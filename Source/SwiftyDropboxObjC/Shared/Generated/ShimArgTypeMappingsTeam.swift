///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBTEAMDeviceSessionToDBXOptional(object: DBTEAMDeviceSession?) -> DBXTeamDeviceSession? {
    guard let object = object else { return nil }
    return mapDBTEAMDeviceSessionToDBX(object: object)
}

func mapDBTEAMDeviceSessionToDBX(object: DBTEAMDeviceSession) -> DBXTeamDeviceSession {
    DBXTeamDeviceSession(sessionId: object.sessionId, ipAddress: object.ipAddress, country: object.country, created: object.created, updated: object.updated)
}

func mapDBTEAMActiveWebSessionToDBXOptional(object: DBTEAMActiveWebSession?) -> DBXTeamActiveWebSession? {
    guard let object = object else { return nil }
    return mapDBTEAMActiveWebSessionToDBX(object: object)
}

func mapDBTEAMActiveWebSessionToDBX(object: DBTEAMActiveWebSession) -> DBXTeamActiveWebSession {
    DBXTeamActiveWebSession(
        sessionId: object.sessionId,
        userAgent: object.userAgent,
        os: object.os,
        browser: object.browser,
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated,
        expires: object.expires
    )
}

func mapDBTEAMAddSecondaryEmailResultToDBXOptional(object: DBTEAMAddSecondaryEmailResult?) -> DBXTeamAddSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBTEAMAddSecondaryEmailResultToDBX(object: object)
}

func mapDBTEAMAddSecondaryEmailResultToDBX(object: DBTEAMAddSecondaryEmailResult) -> DBXTeamAddSecondaryEmailResult {
    if object.isSuccess() {
        let success = mapDBSECONDARYEMAILSSecondaryEmailToDBX(object: object.success)
        return DBXTeamAddSecondaryEmailResult.factory(swift: .success(success.swift))
    }
    if object.isUnavailable() {
        let unavailable = object.unavailable
        return DBXTeamAddSecondaryEmailResult.factory(swift: .unavailable(unavailable))
    }
    if object.isAlreadyPending() {
        let alreadyPending = object.alreadyPending
        return DBXTeamAddSecondaryEmailResult.factory(swift: .alreadyPending(alreadyPending))
    }
    if object.isAlreadyOwnedByUser() {
        let alreadyOwnedByUser = object.alreadyOwnedByUser
        return DBXTeamAddSecondaryEmailResult.factory(swift: .alreadyOwnedByUser(alreadyOwnedByUser))
    }
    if object.isReachedLimit() {
        let reachedLimit = object.reachedLimit
        return DBXTeamAddSecondaryEmailResult.factory(swift: .reachedLimit(reachedLimit))
    }
    if object.isTransientError() {
        let transientError = object.transientError
        return DBXTeamAddSecondaryEmailResult.factory(swift: .transientError(transientError))
    }
    if object.isTooManyUpdates() {
        let tooManyUpdates = object.tooManyUpdates
        return DBXTeamAddSecondaryEmailResult.factory(swift: .tooManyUpdates(tooManyUpdates))
    }
    if object.isUnknownError() {
        let unknownError = object.unknownError
        return DBXTeamAddSecondaryEmailResult.factory(swift: .unknownError(unknownError))
    }
    if object.isRateLimited() {
        let rateLimited = object.rateLimited
        return DBXTeamAddSecondaryEmailResult.factory(swift: .rateLimited(rateLimited))
    }
    if object.isOther() {
        return DBXTeamAddSecondaryEmailResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMAddSecondaryEmailsArgToDBXOptional(object: DBTEAMAddSecondaryEmailsArg?) -> DBXTeamAddSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMAddSecondaryEmailsArgToDBX(object: object)
}

func mapDBTEAMAddSecondaryEmailsArgToDBX(object: DBTEAMAddSecondaryEmailsArg) -> DBXTeamAddSecondaryEmailsArg {
    DBXTeamAddSecondaryEmailsArg(newSecondaryEmails: object.dNewSecondaryEmails.compactMap { mapDBTEAMUserSecondaryEmailsArgToDBX(object: $0) })
}

func mapDBTEAMAddSecondaryEmailsErrorToDBXOptional(object: DBTEAMAddSecondaryEmailsError?) -> DBXTeamAddSecondaryEmailsError? {
    guard let object = object else { return nil }
    return mapDBTEAMAddSecondaryEmailsErrorToDBX(object: object)
}

func mapDBTEAMAddSecondaryEmailsErrorToDBX(object: DBTEAMAddSecondaryEmailsError) -> DBXTeamAddSecondaryEmailsError {
    if object.isSecondaryEmailsDisabled() {
        return DBXTeamAddSecondaryEmailsErrorSecondaryEmailsDisabled()
    }
    if object.isTooManyEmails() {
        return DBXTeamAddSecondaryEmailsErrorTooManyEmails()
    }
    if object.isOther() {
        return DBXTeamAddSecondaryEmailsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMAddSecondaryEmailsResultToDBXOptional(object: DBTEAMAddSecondaryEmailsResult?) -> DBXTeamAddSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMAddSecondaryEmailsResultToDBX(object: object)
}

func mapDBTEAMAddSecondaryEmailsResultToDBX(object: DBTEAMAddSecondaryEmailsResult) -> DBXTeamAddSecondaryEmailsResult {
    DBXTeamAddSecondaryEmailsResult(results: object.results.compactMap { mapDBTEAMUserAddResultToDBX(object: $0) })
}

func mapDBTEAMAdminTierToDBXOptional(object: DBTEAMAdminTier?) -> DBXTeamAdminTier? {
    guard let object = object else { return nil }
    return mapDBTEAMAdminTierToDBX(object: object)
}

func mapDBTEAMAdminTierToDBX(object: DBTEAMAdminTier) -> DBXTeamAdminTier {
    if object.isTeamAdmin() {
        return DBXTeamAdminTierTeamAdmin()
    }
    if object.isUserManagementAdmin() {
        return DBXTeamAdminTierUserManagementAdmin()
    }
    if object.isSupportAdmin() {
        return DBXTeamAdminTierSupportAdmin()
    }
    if object.isMemberOnly() {
        return DBXTeamAdminTierMemberOnly()
    }
    fatalError("codegen error")
}

func mapDBTEAMApiAppToDBXOptional(object: DBTEAMApiApp?) -> DBXTeamApiApp? {
    guard let object = object else { return nil }
    return mapDBTEAMApiAppToDBX(object: object)
}

func mapDBTEAMApiAppToDBX(object: DBTEAMApiApp) -> DBXTeamApiApp {
    DBXTeamApiApp(
        appId: object.appId,
        appName: object.appName,
        isAppFolder: object.isAppFolder,
        publisher: object.publisher,
        publisherUrl: object.publisherUrl,
        linked: object.linked
    )
}

func mapDBTEAMBaseDfbReportToDBXOptional(object: DBTEAMBaseDfbReport?) -> DBXTeamBaseDfbReport? {
    guard let object = object else { return nil }
    return mapDBTEAMBaseDfbReportToDBX(object: object)
}

func mapDBTEAMBaseDfbReportToDBX(object: DBTEAMBaseDfbReport) -> DBXTeamBaseDfbReport {
    DBXTeamBaseDfbReport(startDate: object.startDate)
}

func mapDBTEAMBaseTeamFolderErrorToDBXOptional(object: DBTEAMBaseTeamFolderError?) -> DBXTeamBaseTeamFolderError? {
    guard let object = object else { return nil }
    return mapDBTEAMBaseTeamFolderErrorToDBX(object: object)
}

func mapDBTEAMBaseTeamFolderErrorToDBX(object: DBTEAMBaseTeamFolderError) -> DBXTeamBaseTeamFolderError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamBaseTeamFolderError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamBaseTeamFolderError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamBaseTeamFolderError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamBaseTeamFolderErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCustomQuotaErrorToDBXOptional(object: DBTEAMCustomQuotaError?) -> DBXTeamCustomQuotaError? {
    guard let object = object else { return nil }
    return mapDBTEAMCustomQuotaErrorToDBX(object: object)
}

func mapDBTEAMCustomQuotaErrorToDBX(object: DBTEAMCustomQuotaError) -> DBXTeamCustomQuotaError {
    if object.isTooManyUsers() {
        return DBXTeamCustomQuotaErrorTooManyUsers()
    }
    if object.isOther() {
        return DBXTeamCustomQuotaErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCustomQuotaResultToDBXOptional(object: DBTEAMCustomQuotaResult?) -> DBXTeamCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBTEAMCustomQuotaResultToDBX(object: object)
}

func mapDBTEAMCustomQuotaResultToDBX(object: DBTEAMCustomQuotaResult) -> DBXTeamCustomQuotaResult {
    if object.isSuccess() {
        let success = mapDBTEAMUserCustomQuotaResultToDBX(object: object.success)
        return DBXTeamCustomQuotaResult.factory(swift: .success(success.swift))
    }
    if object.isInvalidUser() {
        let invalidUser = mapDBTEAMUserSelectorArgToDBX(object: object.invalidUser)
        return DBXTeamCustomQuotaResult.factory(swift: .invalidUser(invalidUser.swift))
    }
    if object.isOther() {
        return DBXTeamCustomQuotaResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCustomQuotaUsersArgToDBXOptional(object: DBTEAMCustomQuotaUsersArg?) -> DBXTeamCustomQuotaUsersArg? {
    guard let object = object else { return nil }
    return mapDBTEAMCustomQuotaUsersArgToDBX(object: object)
}

func mapDBTEAMCustomQuotaUsersArgToDBX(object: DBTEAMCustomQuotaUsersArg) -> DBXTeamCustomQuotaUsersArg {
    DBXTeamCustomQuotaUsersArg(users: object.users.compactMap { mapDBTEAMUserSelectorArgToDBX(object: $0) })
}

func mapDBTEAMDateRangeToDBXOptional(object: DBTEAMDateRange?) -> DBXTeamDateRange? {
    guard let object = object else { return nil }
    return mapDBTEAMDateRangeToDBX(object: object)
}

func mapDBTEAMDateRangeToDBX(object: DBTEAMDateRange) -> DBXTeamDateRange {
    DBXTeamDateRange(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMDateRangeErrorToDBXOptional(object: DBTEAMDateRangeError?) -> DBXTeamDateRangeError? {
    guard let object = object else { return nil }
    return mapDBTEAMDateRangeErrorToDBX(object: object)
}

func mapDBTEAMDateRangeErrorToDBX(object: DBTEAMDateRangeError) -> DBXTeamDateRangeError {
    if object.isOther() {
        return DBXTeamDateRangeErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMDeleteSecondaryEmailResultToDBXOptional(object: DBTEAMDeleteSecondaryEmailResult?) -> DBXTeamDeleteSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBTEAMDeleteSecondaryEmailResultToDBX(object: object)
}

func mapDBTEAMDeleteSecondaryEmailResultToDBX(object: DBTEAMDeleteSecondaryEmailResult) -> DBXTeamDeleteSecondaryEmailResult {
    if object.isSuccess() {
        let success = object.success
        return DBXTeamDeleteSecondaryEmailResult.factory(swift: .success(success))
    }
    if object.isNotFound() {
        let notFound = object.notFound
        return DBXTeamDeleteSecondaryEmailResult.factory(swift: .notFound(notFound))
    }
    if object.isCannotRemovePrimary() {
        let cannotRemovePrimary = object.cannotRemovePrimary
        return DBXTeamDeleteSecondaryEmailResult.factory(swift: .cannotRemovePrimary(cannotRemovePrimary))
    }
    if object.isOther() {
        return DBXTeamDeleteSecondaryEmailResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMDeleteSecondaryEmailsArgToDBXOptional(object: DBTEAMDeleteSecondaryEmailsArg?) -> DBXTeamDeleteSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMDeleteSecondaryEmailsArgToDBX(object: object)
}

func mapDBTEAMDeleteSecondaryEmailsArgToDBX(object: DBTEAMDeleteSecondaryEmailsArg) -> DBXTeamDeleteSecondaryEmailsArg {
    DBXTeamDeleteSecondaryEmailsArg(emailsToDelete: object.emailsToDelete.compactMap { mapDBTEAMUserSecondaryEmailsArgToDBX(object: $0) })
}

func mapDBTEAMDeleteSecondaryEmailsResultToDBXOptional(object: DBTEAMDeleteSecondaryEmailsResult?) -> DBXTeamDeleteSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMDeleteSecondaryEmailsResultToDBX(object: object)
}

func mapDBTEAMDeleteSecondaryEmailsResultToDBX(object: DBTEAMDeleteSecondaryEmailsResult) -> DBXTeamDeleteSecondaryEmailsResult {
    DBXTeamDeleteSecondaryEmailsResult(results: object.results.compactMap { mapDBTEAMUserDeleteResultToDBX(object: $0) })
}

func mapDBTEAMDesktopClientSessionToDBXOptional(object: DBTEAMDesktopClientSession?) -> DBXTeamDesktopClientSession? {
    guard let object = object else { return nil }
    return mapDBTEAMDesktopClientSessionToDBX(object: object)
}

func mapDBTEAMDesktopClientSessionToDBX(object: DBTEAMDesktopClientSession) -> DBXTeamDesktopClientSession {
    DBXTeamDesktopClientSession(
        sessionId: object.sessionId,
        hostName: object.hostName,
        clientType: mapDBTEAMDesktopPlatformToDBX(object: object.clientType),
        clientVersion: object.clientVersion,
        platform: object.platform,
        isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated
    )
}

func mapDBTEAMDesktopPlatformToDBXOptional(object: DBTEAMDesktopPlatform?) -> DBXTeamDesktopPlatform? {
    guard let object = object else { return nil }
    return mapDBTEAMDesktopPlatformToDBX(object: object)
}

func mapDBTEAMDesktopPlatformToDBX(object: DBTEAMDesktopPlatform) -> DBXTeamDesktopPlatform {
    if object.isWindows() {
        return DBXTeamDesktopPlatformWindows()
    }
    if object.isMac() {
        return DBXTeamDesktopPlatformMac()
    }
    if object.isLinux() {
        return DBXTeamDesktopPlatformLinux()
    }
    if object.isOther() {
        return DBXTeamDesktopPlatformOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMDeviceSessionArgToDBXOptional(object: DBTEAMDeviceSessionArg?) -> DBXTeamDeviceSessionArg? {
    guard let object = object else { return nil }
    return mapDBTEAMDeviceSessionArgToDBX(object: object)
}

func mapDBTEAMDeviceSessionArgToDBX(object: DBTEAMDeviceSessionArg) -> DBXTeamDeviceSessionArg {
    DBXTeamDeviceSessionArg(sessionId: object.sessionId, teamMemberId: object.teamMemberId)
}

func mapDBTEAMDevicesActiveToDBXOptional(object: DBTEAMDevicesActive?) -> DBXTeamDevicesActive? {
    guard let object = object else { return nil }
    return mapDBTEAMDevicesActiveToDBX(object: object)
}

func mapDBTEAMDevicesActiveToDBX(object: DBTEAMDevicesActive) -> DBXTeamDevicesActive {
    DBXTeamDevicesActive(
        windows: object.windows,
        macos: object.macos,
        linux: object.linux,
        ios: object.ios,
        android: object.android,
        other: object.other,
        total: object.total
    )
}

func mapDBTEAMExcludedUsersListArgToDBXOptional(object: DBTEAMExcludedUsersListArg?) -> DBXTeamExcludedUsersListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersListArgToDBX(object: object)
}

func mapDBTEAMExcludedUsersListArgToDBX(object: DBTEAMExcludedUsersListArg) -> DBXTeamExcludedUsersListArg {
    DBXTeamExcludedUsersListArg(limit: object.limit)
}

func mapDBTEAMExcludedUsersListContinueArgToDBXOptional(object: DBTEAMExcludedUsersListContinueArg?) -> DBXTeamExcludedUsersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersListContinueArgToDBX(object: object)
}

func mapDBTEAMExcludedUsersListContinueArgToDBX(object: DBTEAMExcludedUsersListContinueArg) -> DBXTeamExcludedUsersListContinueArg {
    DBXTeamExcludedUsersListContinueArg(cursor: object.cursor)
}

func mapDBTEAMExcludedUsersListContinueErrorToDBXOptional(object: DBTEAMExcludedUsersListContinueError?) -> DBXTeamExcludedUsersListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersListContinueErrorToDBX(object: object)
}

func mapDBTEAMExcludedUsersListContinueErrorToDBX(object: DBTEAMExcludedUsersListContinueError) -> DBXTeamExcludedUsersListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamExcludedUsersListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamExcludedUsersListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMExcludedUsersListErrorToDBXOptional(object: DBTEAMExcludedUsersListError?) -> DBXTeamExcludedUsersListError? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersListErrorToDBX(object: object)
}

func mapDBTEAMExcludedUsersListErrorToDBX(object: DBTEAMExcludedUsersListError) -> DBXTeamExcludedUsersListError {
    if object.isListError() {
        return DBXTeamExcludedUsersListErrorListError()
    }
    if object.isOther() {
        return DBXTeamExcludedUsersListErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMExcludedUsersListResultToDBXOptional(object: DBTEAMExcludedUsersListResult?) -> DBXTeamExcludedUsersListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersListResultToDBX(object: object)
}

func mapDBTEAMExcludedUsersListResultToDBX(object: DBTEAMExcludedUsersListResult) -> DBXTeamExcludedUsersListResult {
    DBXTeamExcludedUsersListResult(users: object.users.compactMap { mapDBTEAMMemberProfileToDBX(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBTEAMExcludedUsersUpdateArgToDBXOptional(object: DBTEAMExcludedUsersUpdateArg?) -> DBXTeamExcludedUsersUpdateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersUpdateArgToDBX(object: object)
}

func mapDBTEAMExcludedUsersUpdateArgToDBX(object: DBTEAMExcludedUsersUpdateArg) -> DBXTeamExcludedUsersUpdateArg {
    DBXTeamExcludedUsersUpdateArg(users: object.users?.compactMap { mapDBTEAMUserSelectorArgToDBX(object: $0) })
}

func mapDBTEAMExcludedUsersUpdateErrorToDBXOptional(object: DBTEAMExcludedUsersUpdateError?) -> DBXTeamExcludedUsersUpdateError? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersUpdateErrorToDBX(object: object)
}

func mapDBTEAMExcludedUsersUpdateErrorToDBX(object: DBTEAMExcludedUsersUpdateError) -> DBXTeamExcludedUsersUpdateError {
    if object.isUsersNotInTeam() {
        return DBXTeamExcludedUsersUpdateErrorUsersNotInTeam()
    }
    if object.isTooManyUsers() {
        return DBXTeamExcludedUsersUpdateErrorTooManyUsers()
    }
    if object.isOther() {
        return DBXTeamExcludedUsersUpdateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMExcludedUsersUpdateResultToDBXOptional(object: DBTEAMExcludedUsersUpdateResult?) -> DBXTeamExcludedUsersUpdateResult? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersUpdateResultToDBX(object: object)
}

func mapDBTEAMExcludedUsersUpdateResultToDBX(object: DBTEAMExcludedUsersUpdateResult) -> DBXTeamExcludedUsersUpdateResult {
    DBXTeamExcludedUsersUpdateResult(status: mapDBTEAMExcludedUsersUpdateStatusToDBX(object: object.status))
}

func mapDBTEAMExcludedUsersUpdateStatusToDBXOptional(object: DBTEAMExcludedUsersUpdateStatus?) -> DBXTeamExcludedUsersUpdateStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMExcludedUsersUpdateStatusToDBX(object: object)
}

func mapDBTEAMExcludedUsersUpdateStatusToDBX(object: DBTEAMExcludedUsersUpdateStatus) -> DBXTeamExcludedUsersUpdateStatus {
    if object.isSuccess() {
        return DBXTeamExcludedUsersUpdateStatusSuccess()
    }
    if object.isOther() {
        return DBXTeamExcludedUsersUpdateStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMFeatureToDBXOptional(object: DBTEAMFeature?) -> DBXTeamFeature? {
    guard let object = object else { return nil }
    return mapDBTEAMFeatureToDBX(object: object)
}

func mapDBTEAMFeatureToDBX(object: DBTEAMFeature) -> DBXTeamFeature {
    if object.isUploadApiRateLimit() {
        return DBXTeamFeatureUploadApiRateLimit()
    }
    if object.isHasTeamSharedDropbox() {
        return DBXTeamFeatureHasTeamSharedDropbox()
    }
    if object.isHasTeamFileEvents() {
        return DBXTeamFeatureHasTeamFileEvents()
    }
    if object.isHasTeamSelectiveSync() {
        return DBXTeamFeatureHasTeamSelectiveSync()
    }
    if object.isOther() {
        return DBXTeamFeatureOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMFeatureValueToDBXOptional(object: DBTEAMFeatureValue?) -> DBXTeamFeatureValue? {
    guard let object = object else { return nil }
    return mapDBTEAMFeatureValueToDBX(object: object)
}

func mapDBTEAMFeatureValueToDBX(object: DBTEAMFeatureValue) -> DBXTeamFeatureValue {
    if object.isUploadApiRateLimit() {
        let uploadApiRateLimit = mapDBTEAMUploadApiRateLimitValueToDBX(object: object.uploadApiRateLimit)
        return DBXTeamFeatureValue.factory(swift: .uploadApiRateLimit(uploadApiRateLimit.swift))
    }
    if object.isHasTeamSharedDropbox() {
        let hasTeamSharedDropbox = mapDBTEAMHasTeamSharedDropboxValueToDBX(object: object.hasTeamSharedDropbox)
        return DBXTeamFeatureValue.factory(swift: .hasTeamSharedDropbox(hasTeamSharedDropbox.swift))
    }
    if object.isHasTeamFileEvents() {
        let hasTeamFileEvents = mapDBTEAMHasTeamFileEventsValueToDBX(object: object.hasTeamFileEvents)
        return DBXTeamFeatureValue.factory(swift: .hasTeamFileEvents(hasTeamFileEvents.swift))
    }
    if object.isHasTeamSelectiveSync() {
        let hasTeamSelectiveSync = mapDBTEAMHasTeamSelectiveSyncValueToDBX(object: object.hasTeamSelectiveSync)
        return DBXTeamFeatureValue.factory(swift: .hasTeamSelectiveSync(hasTeamSelectiveSync.swift))
    }
    if object.isOther() {
        return DBXTeamFeatureValueOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMFeaturesGetValuesBatchArgToDBXOptional(object: DBTEAMFeaturesGetValuesBatchArg?) -> DBXTeamFeaturesGetValuesBatchArg? {
    guard let object = object else { return nil }
    return mapDBTEAMFeaturesGetValuesBatchArgToDBX(object: object)
}

func mapDBTEAMFeaturesGetValuesBatchArgToDBX(object: DBTEAMFeaturesGetValuesBatchArg) -> DBXTeamFeaturesGetValuesBatchArg {
    DBXTeamFeaturesGetValuesBatchArg(features: object.features.compactMap { mapDBTEAMFeatureToDBX(object: $0) })
}

func mapDBTEAMFeaturesGetValuesBatchErrorToDBXOptional(object: DBTEAMFeaturesGetValuesBatchError?) -> DBXTeamFeaturesGetValuesBatchError? {
    guard let object = object else { return nil }
    return mapDBTEAMFeaturesGetValuesBatchErrorToDBX(object: object)
}

func mapDBTEAMFeaturesGetValuesBatchErrorToDBX(object: DBTEAMFeaturesGetValuesBatchError) -> DBXTeamFeaturesGetValuesBatchError {
    if object.isEmptyFeaturesList() {
        return DBXTeamFeaturesGetValuesBatchErrorEmptyFeaturesList()
    }
    if object.isOther() {
        return DBXTeamFeaturesGetValuesBatchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMFeaturesGetValuesBatchResultToDBXOptional(object: DBTEAMFeaturesGetValuesBatchResult?) -> DBXTeamFeaturesGetValuesBatchResult? {
    guard let object = object else { return nil }
    return mapDBTEAMFeaturesGetValuesBatchResultToDBX(object: object)
}

func mapDBTEAMFeaturesGetValuesBatchResultToDBX(object: DBTEAMFeaturesGetValuesBatchResult) -> DBXTeamFeaturesGetValuesBatchResult {
    DBXTeamFeaturesGetValuesBatchResult(values: object.values.compactMap { mapDBTEAMFeatureValueToDBX(object: $0) })
}

func mapDBTEAMGetActivityReportToDBXOptional(object: DBTEAMGetActivityReport?) -> DBXTeamGetActivityReport? {
    guard let object = object else { return nil }
    return mapDBTEAMGetActivityReportToDBX(object: object)
}

func mapDBTEAMGetActivityReportToDBX(object: DBTEAMGetActivityReport) -> DBXTeamGetActivityReport {
    DBXTeamGetActivityReport(
        startDate: object.startDate,
        adds: object.adds,
        edits: object.edits,
        deletes: object.deletes,
        activeUsers28Day: object.activeUsers28Day,
        activeUsers7Day: object.activeUsers7Day,
        activeUsers1Day: object.activeUsers1Day,
        activeSharedFolders28Day: object.activeSharedFolders28Day,
        activeSharedFolders7Day: object.activeSharedFolders7Day,
        activeSharedFolders1Day: object.activeSharedFolders1Day,
        sharedLinksCreated: object.sharedLinksCreated,
        sharedLinksViewedByTeam: object.sharedLinksViewedByTeam,
        sharedLinksViewedByOutsideUser: object.sharedLinksViewedByOutsideUser,
        sharedLinksViewedByNotLoggedIn: object.sharedLinksViewedByNotLoggedIn,
        sharedLinksViewedTotal: object.sharedLinksViewedTotal
    )
}

func mapDBTEAMGetDevicesReportToDBXOptional(object: DBTEAMGetDevicesReport?) -> DBXTeamGetDevicesReport? {
    guard let object = object else { return nil }
    return mapDBTEAMGetDevicesReportToDBX(object: object)
}

func mapDBTEAMGetDevicesReportToDBX(object: DBTEAMGetDevicesReport) -> DBXTeamGetDevicesReport {
    DBXTeamGetDevicesReport(
        startDate: object.startDate,
        active1Day: mapDBTEAMDevicesActiveToDBX(object: object.active1Day),
        active7Day: mapDBTEAMDevicesActiveToDBX(object: object.active7Day),
        active28Day: mapDBTEAMDevicesActiveToDBX(object: object.active28Day)
    )
}

func mapDBTEAMGetMembershipReportToDBXOptional(object: DBTEAMGetMembershipReport?) -> DBXTeamGetMembershipReport? {
    guard let object = object else { return nil }
    return mapDBTEAMGetMembershipReportToDBX(object: object)
}

func mapDBTEAMGetMembershipReportToDBX(object: DBTEAMGetMembershipReport) -> DBXTeamGetMembershipReport {
    DBXTeamGetMembershipReport(
        startDate: object.startDate,
        teamSize: object.teamSize,
        pendingInvites: object.pendingInvites,
        membersJoined: object.membersJoined,
        suspendedMembers: object.suspendedMembers,
        licenses: object.licenses
    )
}

func mapDBTEAMGetStorageReportToDBXOptional(object: DBTEAMGetStorageReport?) -> DBXTeamGetStorageReport? {
    guard let object = object else { return nil }
    return mapDBTEAMGetStorageReportToDBX(object: object)
}

func mapDBTEAMGetStorageReportToDBX(object: DBTEAMGetStorageReport) -> DBXTeamGetStorageReport {
    DBXTeamGetStorageReport(
        startDate: object.startDate,
        totalUsage: object.totalUsage,
        sharedUsage: object.sharedUsage,
        unsharedUsage: object.unsharedUsage,
        sharedFolders: object.sharedFolders,
        memberStorageMap: object.memberStorageMap.compactMap { $0.map { mapDBTEAMStorageBucketToDBX(object: $0) } }
    )
}

func mapDBTEAMGroupAccessTypeToDBXOptional(object: DBTEAMGroupAccessType?) -> DBXTeamGroupAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupAccessTypeToDBX(object: object)
}

func mapDBTEAMGroupAccessTypeToDBX(object: DBTEAMGroupAccessType) -> DBXTeamGroupAccessType {
    if object.isMember() {
        return DBXTeamGroupAccessTypeMember()
    }
    if object.isOwner() {
        return DBXTeamGroupAccessTypeOwner()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupCreateArgToDBXOptional(object: DBTEAMGroupCreateArg?) -> DBXTeamGroupCreateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupCreateArgToDBX(object: object)
}

func mapDBTEAMGroupCreateArgToDBX(object: DBTEAMGroupCreateArg) -> DBXTeamGroupCreateArg {
    DBXTeamGroupCreateArg(
        groupName: object.groupName,
        addCreatorAsOwner: object.addCreatorAsOwner,
        groupExternalId: object.groupExternalId,
        groupManagementType: mapDBTEAMCOMMONGroupManagementTypeToDBXOptional(object: object.groupManagementType)
    )
}

func mapDBTEAMGroupCreateErrorToDBXOptional(object: DBTEAMGroupCreateError?) -> DBXTeamGroupCreateError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupCreateErrorToDBX(object: object)
}

func mapDBTEAMGroupCreateErrorToDBX(object: DBTEAMGroupCreateError) -> DBXTeamGroupCreateError {
    if object.isGroupNameAlreadyUsed() {
        return DBXTeamGroupCreateErrorGroupNameAlreadyUsed()
    }
    if object.isGroupNameInvalid() {
        return DBXTeamGroupCreateErrorGroupNameInvalid()
    }
    if object.isExternalIdAlreadyInUse() {
        return DBXTeamGroupCreateErrorExternalIdAlreadyInUse()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupCreateErrorSystemManagedGroupDisallowed()
    }
    if object.isOther() {
        return DBXTeamGroupCreateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupSelectorErrorToDBXOptional(object: DBTEAMGroupSelectorError?) -> DBXTeamGroupSelectorError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupSelectorErrorToDBX(object: object)
}

func mapDBTEAMGroupSelectorErrorToDBX(object: DBTEAMGroupSelectorError) -> DBXTeamGroupSelectorError {
    if object.isGroupNotFound() {
        return DBXTeamGroupSelectorErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupSelectorErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupSelectorWithTeamGroupErrorToDBXOptional(object: DBTEAMGroupSelectorWithTeamGroupError?) -> DBXTeamGroupSelectorWithTeamGroupError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupSelectorWithTeamGroupErrorToDBX(object: object)
}

func mapDBTEAMGroupSelectorWithTeamGroupErrorToDBX(object: DBTEAMGroupSelectorWithTeamGroupError) -> DBXTeamGroupSelectorWithTeamGroupError {
    if object.isGroupNotFound() {
        return DBXTeamGroupSelectorWithTeamGroupErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupSelectorWithTeamGroupErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupSelectorWithTeamGroupErrorSystemManagedGroupDisallowed()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupDeleteErrorToDBXOptional(object: DBTEAMGroupDeleteError?) -> DBXTeamGroupDeleteError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupDeleteErrorToDBX(object: object)
}

func mapDBTEAMGroupDeleteErrorToDBX(object: DBTEAMGroupDeleteError) -> DBXTeamGroupDeleteError {
    if object.isGroupNotFound() {
        return DBXTeamGroupDeleteErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupDeleteErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupDeleteErrorSystemManagedGroupDisallowed()
    }
    if object.isGroupAlreadyDeleted() {
        return DBXTeamGroupDeleteErrorGroupAlreadyDeleted()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupFullInfoToDBXOptional(object: DBTEAMGroupFullInfo?) -> DBXTeamGroupFullInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupFullInfoToDBX(object: object)
}

func mapDBTEAMGroupFullInfoToDBX(object: DBTEAMGroupFullInfo) -> DBXTeamGroupFullInfo {
    DBXTeamGroupFullInfo(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBTEAMCOMMONGroupManagementTypeToDBX(object: object.groupManagementType),
        created: object.created,
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount,
        members: object.members?.compactMap { mapDBTEAMGroupMemberInfoToDBX(object: $0) }
    )
}

func mapDBTEAMGroupMemberInfoToDBXOptional(object: DBTEAMGroupMemberInfo?) -> DBXTeamGroupMemberInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMemberInfoToDBX(object: object)
}

func mapDBTEAMGroupMemberInfoToDBX(object: DBTEAMGroupMemberInfo) -> DBXTeamGroupMemberInfo {
    DBXTeamGroupMemberInfo(profile: mapDBTEAMMemberProfileToDBX(object: object.profile), accessType: mapDBTEAMGroupAccessTypeToDBX(object: object.accessType))
}

func mapDBTEAMGroupMemberSelectorToDBXOptional(object: DBTEAMGroupMemberSelector?) -> DBXTeamGroupMemberSelector? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMemberSelectorToDBX(object: object)
}

func mapDBTEAMGroupMemberSelectorToDBX(object: DBTEAMGroupMemberSelector) -> DBXTeamGroupMemberSelector {
    DBXTeamGroupMemberSelector(group: mapDBTEAMGroupSelectorToDBX(object: object.group), user: mapDBTEAMUserSelectorArgToDBX(object: object.user))
}

func mapDBTEAMGroupMemberSelectorErrorToDBXOptional(object: DBTEAMGroupMemberSelectorError?) -> DBXTeamGroupMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMemberSelectorErrorToDBX(object: object)
}

func mapDBTEAMGroupMemberSelectorErrorToDBX(object: DBTEAMGroupMemberSelectorError) -> DBXTeamGroupMemberSelectorError {
    if object.isGroupNotFound() {
        return DBXTeamGroupMemberSelectorErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupMemberSelectorErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupMemberSelectorErrorSystemManagedGroupDisallowed()
    }
    if object.isMemberNotInGroup() {
        return DBXTeamGroupMemberSelectorErrorMemberNotInGroup()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupMemberSetAccessTypeErrorToDBXOptional(object: DBTEAMGroupMemberSetAccessTypeError?) -> DBXTeamGroupMemberSetAccessTypeError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMemberSetAccessTypeErrorToDBX(object: object)
}

func mapDBTEAMGroupMemberSetAccessTypeErrorToDBX(object: DBTEAMGroupMemberSetAccessTypeError) -> DBXTeamGroupMemberSetAccessTypeError {
    if object.isGroupNotFound() {
        return DBXTeamGroupMemberSetAccessTypeErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupMemberSetAccessTypeErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupMemberSetAccessTypeErrorSystemManagedGroupDisallowed()
    }
    if object.isMemberNotInGroup() {
        return DBXTeamGroupMemberSetAccessTypeErrorMemberNotInGroup()
    }
    if object.isUserCannotBeManagerOfCompanyManagedGroup() {
        return DBXTeamGroupMemberSetAccessTypeErrorUserCannotBeManagerOfCompanyManagedGroup()
    }
    fatalError("codegen error")
}

func mapDBTEAMIncludeMembersArgToDBXOptional(object: DBTEAMIncludeMembersArg?) -> DBXTeamIncludeMembersArg? {
    guard let object = object else { return nil }
    return mapDBTEAMIncludeMembersArgToDBX(object: object)
}

func mapDBTEAMIncludeMembersArgToDBX(object: DBTEAMIncludeMembersArg) -> DBXTeamIncludeMembersArg {
    DBXTeamIncludeMembersArg(returnMembers: object.returnMembers)
}

func mapDBTEAMGroupMembersAddArgToDBXOptional(object: DBTEAMGroupMembersAddArg?) -> DBXTeamGroupMembersAddArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersAddArgToDBX(object: object)
}

func mapDBTEAMGroupMembersAddArgToDBX(object: DBTEAMGroupMembersAddArg) -> DBXTeamGroupMembersAddArg {
    DBXTeamGroupMembersAddArg(
        group: mapDBTEAMGroupSelectorToDBX(object: object.group),
        members: object.members.compactMap { mapDBTEAMMemberAccessToDBX(object: $0) },
        returnMembers: object.returnMembers
    )
}

func mapDBTEAMGroupMembersAddErrorToDBXOptional(object: DBTEAMGroupMembersAddError?) -> DBXTeamGroupMembersAddError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersAddErrorToDBX(object: object)
}

func mapDBTEAMGroupMembersAddErrorToDBX(object: DBTEAMGroupMembersAddError) -> DBXTeamGroupMembersAddError {
    if object.isGroupNotFound() {
        return DBXTeamGroupMembersAddErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupMembersAddErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupMembersAddErrorSystemManagedGroupDisallowed()
    }
    if object.isDuplicateUser() {
        return DBXTeamGroupMembersAddErrorDuplicateUser()
    }
    if object.isGroupNotInTeam() {
        return DBXTeamGroupMembersAddErrorGroupNotInTeam()
    }
    if object.isMembersNotInTeam() {
        let membersNotInTeam = object.membersNotInTeam
        return DBXTeamGroupMembersAddError.factory(swift: .membersNotInTeam(membersNotInTeam))
    }
    if object.isUsersNotFound() {
        let usersNotFound = object.usersNotFound
        return DBXTeamGroupMembersAddError.factory(swift: .usersNotFound(usersNotFound))
    }
    if object.isUserMustBeActiveToBeOwner() {
        return DBXTeamGroupMembersAddErrorUserMustBeActiveToBeOwner()
    }
    if object.isUserCannotBeManagerOfCompanyManagedGroup() {
        let userCannotBeManagerOfCompanyManagedGroup = object.userCannotBeManagerOfCompanyManagedGroup
        return DBXTeamGroupMembersAddError.factory(swift: .userCannotBeManagerOfCompanyManagedGroup(userCannotBeManagerOfCompanyManagedGroup))
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupMembersChangeResultToDBXOptional(object: DBTEAMGroupMembersChangeResult?) -> DBXTeamGroupMembersChangeResult? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersChangeResultToDBX(object: object)
}

func mapDBTEAMGroupMembersChangeResultToDBX(object: DBTEAMGroupMembersChangeResult) -> DBXTeamGroupMembersChangeResult {
    DBXTeamGroupMembersChangeResult(groupInfo: mapDBTEAMGroupFullInfoToDBX(object: object.groupInfo), asyncJobId: object.asyncJobId)
}

func mapDBTEAMGroupMembersRemoveArgToDBXOptional(object: DBTEAMGroupMembersRemoveArg?) -> DBXTeamGroupMembersRemoveArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersRemoveArgToDBX(object: object)
}

func mapDBTEAMGroupMembersRemoveArgToDBX(object: DBTEAMGroupMembersRemoveArg) -> DBXTeamGroupMembersRemoveArg {
    DBXTeamGroupMembersRemoveArg(
        group: mapDBTEAMGroupSelectorToDBX(object: object.group),
        users: object.users.compactMap { mapDBTEAMUserSelectorArgToDBX(object: $0) },
        returnMembers: object.returnMembers
    )
}

func mapDBTEAMGroupMembersSelectorErrorToDBXOptional(object: DBTEAMGroupMembersSelectorError?) -> DBXTeamGroupMembersSelectorError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersSelectorErrorToDBX(object: object)
}

func mapDBTEAMGroupMembersSelectorErrorToDBX(object: DBTEAMGroupMembersSelectorError) -> DBXTeamGroupMembersSelectorError {
    if object.isGroupNotFound() {
        return DBXTeamGroupMembersSelectorErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupMembersSelectorErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupMembersSelectorErrorSystemManagedGroupDisallowed()
    }
    if object.isMemberNotInGroup() {
        return DBXTeamGroupMembersSelectorErrorMemberNotInGroup()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupMembersRemoveErrorToDBXOptional(object: DBTEAMGroupMembersRemoveError?) -> DBXTeamGroupMembersRemoveError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersRemoveErrorToDBX(object: object)
}

func mapDBTEAMGroupMembersRemoveErrorToDBX(object: DBTEAMGroupMembersRemoveError) -> DBXTeamGroupMembersRemoveError {
    if object.isGroupNotFound() {
        return DBXTeamGroupMembersRemoveErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupMembersRemoveErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupMembersRemoveErrorSystemManagedGroupDisallowed()
    }
    if object.isMemberNotInGroup() {
        return DBXTeamGroupMembersRemoveErrorMemberNotInGroup()
    }
    if object.isGroupNotInTeam() {
        return DBXTeamGroupMembersRemoveErrorGroupNotInTeam()
    }
    if object.isMembersNotInTeam() {
        let membersNotInTeam = object.membersNotInTeam
        return DBXTeamGroupMembersRemoveError.factory(swift: .membersNotInTeam(membersNotInTeam))
    }
    if object.isUsersNotFound() {
        let usersNotFound = object.usersNotFound
        return DBXTeamGroupMembersRemoveError.factory(swift: .usersNotFound(usersNotFound))
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupMembersSelectorToDBXOptional(object: DBTEAMGroupMembersSelector?) -> DBXTeamGroupMembersSelector? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersSelectorToDBX(object: object)
}

func mapDBTEAMGroupMembersSelectorToDBX(object: DBTEAMGroupMembersSelector) -> DBXTeamGroupMembersSelector {
    DBXTeamGroupMembersSelector(group: mapDBTEAMGroupSelectorToDBX(object: object.group), users: mapDBTEAMUsersSelectorArgToDBX(object: object.users))
}

func mapDBTEAMGroupMembersSetAccessTypeArgToDBXOptional(object: DBTEAMGroupMembersSetAccessTypeArg?) -> DBXTeamGroupMembersSetAccessTypeArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupMembersSetAccessTypeArgToDBX(object: object)
}

func mapDBTEAMGroupMembersSetAccessTypeArgToDBX(object: DBTEAMGroupMembersSetAccessTypeArg) -> DBXTeamGroupMembersSetAccessTypeArg {
    DBXTeamGroupMembersSetAccessTypeArg(
        group: mapDBTEAMGroupSelectorToDBX(object: object.group),
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        accessType: mapDBTEAMGroupAccessTypeToDBX(object: object.accessType),
        returnMembers: object.returnMembers
    )
}

func mapDBTEAMGroupSelectorToDBXOptional(object: DBTEAMGroupSelector?) -> DBXTeamGroupSelector? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupSelectorToDBX(object: object)
}

func mapDBTEAMGroupSelectorToDBX(object: DBTEAMGroupSelector) -> DBXTeamGroupSelector {
    if object.isGroupId() {
        let groupId = object.groupId
        return DBXTeamGroupSelector.factory(swift: .groupId(groupId))
    }
    if object.isGroupExternalId() {
        let groupExternalId = object.groupExternalId
        return DBXTeamGroupSelector.factory(swift: .groupExternalId(groupExternalId))
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupUpdateArgsToDBXOptional(object: DBTEAMGroupUpdateArgs?) -> DBXTeamGroupUpdateArgs? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupUpdateArgsToDBX(object: object)
}

func mapDBTEAMGroupUpdateArgsToDBX(object: DBTEAMGroupUpdateArgs) -> DBXTeamGroupUpdateArgs {
    DBXTeamGroupUpdateArgs(
        group: mapDBTEAMGroupSelectorToDBX(object: object.group),
        returnMembers: object.returnMembers,
        newGroupName: object.dNewGroupName,
        newGroupExternalId: object.dNewGroupExternalId,
        newGroupManagementType: mapDBTEAMCOMMONGroupManagementTypeToDBXOptional(object: object.dNewGroupManagementType)
    )
}

func mapDBTEAMGroupUpdateErrorToDBXOptional(object: DBTEAMGroupUpdateError?) -> DBXTeamGroupUpdateError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupUpdateErrorToDBX(object: object)
}

func mapDBTEAMGroupUpdateErrorToDBX(object: DBTEAMGroupUpdateError) -> DBXTeamGroupUpdateError {
    if object.isGroupNotFound() {
        return DBXTeamGroupUpdateErrorGroupNotFound()
    }
    if object.isOther() {
        return DBXTeamGroupUpdateErrorOther()
    }
    if object.isSystemManagedGroupDisallowed() {
        return DBXTeamGroupUpdateErrorSystemManagedGroupDisallowed()
    }
    if object.isGroupNameAlreadyUsed() {
        return DBXTeamGroupUpdateErrorGroupNameAlreadyUsed()
    }
    if object.isGroupNameInvalid() {
        return DBXTeamGroupUpdateErrorGroupNameInvalid()
    }
    if object.isExternalIdAlreadyInUse() {
        return DBXTeamGroupUpdateErrorExternalIdAlreadyInUse()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsGetInfoErrorToDBXOptional(object: DBTEAMGroupsGetInfoError?) -> DBXTeamGroupsGetInfoError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsGetInfoErrorToDBX(object: object)
}

func mapDBTEAMGroupsGetInfoErrorToDBX(object: DBTEAMGroupsGetInfoError) -> DBXTeamGroupsGetInfoError {
    if object.isGroupNotOnTeam() {
        return DBXTeamGroupsGetInfoErrorGroupNotOnTeam()
    }
    if object.isOther() {
        return DBXTeamGroupsGetInfoErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsGetInfoItemToDBXOptional(object: DBTEAMGroupsGetInfoItem?) -> DBXTeamGroupsGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsGetInfoItemToDBX(object: object)
}

func mapDBTEAMGroupsGetInfoItemToDBX(object: DBTEAMGroupsGetInfoItem) -> DBXTeamGroupsGetInfoItem {
    if object.isIdNotFound() {
        let idNotFound = object.idNotFound
        return DBXTeamGroupsGetInfoItem.factory(swift: .idNotFound(idNotFound))
    }
    if object.isGroupInfo() {
        let groupInfo = mapDBTEAMGroupFullInfoToDBX(object: object.groupInfo)
        return DBXTeamGroupsGetInfoItem.factory(swift: .groupInfo(groupInfo.subSwift))
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsListArgToDBXOptional(object: DBTEAMGroupsListArg?) -> DBXTeamGroupsListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsListArgToDBX(object: object)
}

func mapDBTEAMGroupsListArgToDBX(object: DBTEAMGroupsListArg) -> DBXTeamGroupsListArg {
    DBXTeamGroupsListArg(limit: object.limit)
}

func mapDBTEAMGroupsListContinueArgToDBXOptional(object: DBTEAMGroupsListContinueArg?) -> DBXTeamGroupsListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsListContinueArgToDBX(object: object)
}

func mapDBTEAMGroupsListContinueArgToDBX(object: DBTEAMGroupsListContinueArg) -> DBXTeamGroupsListContinueArg {
    DBXTeamGroupsListContinueArg(cursor: object.cursor)
}

func mapDBTEAMGroupsListContinueErrorToDBXOptional(object: DBTEAMGroupsListContinueError?) -> DBXTeamGroupsListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsListContinueErrorToDBX(object: object)
}

func mapDBTEAMGroupsListContinueErrorToDBX(object: DBTEAMGroupsListContinueError) -> DBXTeamGroupsListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamGroupsListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamGroupsListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsListResultToDBXOptional(object: DBTEAMGroupsListResult?) -> DBXTeamGroupsListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsListResultToDBX(object: object)
}

func mapDBTEAMGroupsListResultToDBX(object: DBTEAMGroupsListResult) -> DBXTeamGroupsListResult {
    DBXTeamGroupsListResult(groups: object.groups.compactMap { mapDBTEAMCOMMONGroupSummaryToDBX(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBTEAMGroupsMembersListArgToDBXOptional(object: DBTEAMGroupsMembersListArg?) -> DBXTeamGroupsMembersListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsMembersListArgToDBX(object: object)
}

func mapDBTEAMGroupsMembersListArgToDBX(object: DBTEAMGroupsMembersListArg) -> DBXTeamGroupsMembersListArg {
    DBXTeamGroupsMembersListArg(group: mapDBTEAMGroupSelectorToDBX(object: object.group), limit: object.limit)
}

func mapDBTEAMGroupsMembersListContinueArgToDBXOptional(object: DBTEAMGroupsMembersListContinueArg?) -> DBXTeamGroupsMembersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsMembersListContinueArgToDBX(object: object)
}

func mapDBTEAMGroupsMembersListContinueArgToDBX(object: DBTEAMGroupsMembersListContinueArg) -> DBXTeamGroupsMembersListContinueArg {
    DBXTeamGroupsMembersListContinueArg(cursor: object.cursor)
}

func mapDBTEAMGroupsMembersListContinueErrorToDBXOptional(object: DBTEAMGroupsMembersListContinueError?) -> DBXTeamGroupsMembersListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsMembersListContinueErrorToDBX(object: object)
}

func mapDBTEAMGroupsMembersListContinueErrorToDBX(object: DBTEAMGroupsMembersListContinueError) -> DBXTeamGroupsMembersListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamGroupsMembersListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamGroupsMembersListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsMembersListResultToDBXOptional(object: DBTEAMGroupsMembersListResult?) -> DBXTeamGroupsMembersListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsMembersListResultToDBX(object: object)
}

func mapDBTEAMGroupsMembersListResultToDBX(object: DBTEAMGroupsMembersListResult) -> DBXTeamGroupsMembersListResult {
    DBXTeamGroupsMembersListResult(
        members: object.members.compactMap { mapDBTEAMGroupMemberInfoToDBX(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBTEAMGroupsPollErrorToDBXOptional(object: DBTEAMGroupsPollError?) -> DBXTeamGroupsPollError? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsPollErrorToDBX(object: object)
}

func mapDBTEAMGroupsPollErrorToDBX(object: DBTEAMGroupsPollError) -> DBXTeamGroupsPollError {
    if object.isInvalidAsyncJobId() {
        return DBXTeamGroupsPollErrorInvalidAsyncJobId()
    }
    if object.isInternalError() {
        return DBXTeamGroupsPollErrorInternalError()
    }
    if object.isOther() {
        return DBXTeamGroupsPollErrorOther()
    }
    if object.isAccessDenied() {
        return DBXTeamGroupsPollErrorAccessDenied()
    }
    fatalError("codegen error")
}

func mapDBTEAMGroupsSelectorToDBXOptional(object: DBTEAMGroupsSelector?) -> DBXTeamGroupsSelector? {
    guard let object = object else { return nil }
    return mapDBTEAMGroupsSelectorToDBX(object: object)
}

func mapDBTEAMGroupsSelectorToDBX(object: DBTEAMGroupsSelector) -> DBXTeamGroupsSelector {
    if object.isGroupIds() {
        let groupIds = object.groupIds
        return DBXTeamGroupsSelector.factory(swift: .groupIds(groupIds))
    }
    if object.isGroupExternalIds() {
        let groupExternalIds = object.groupExternalIds
        return DBXTeamGroupsSelector.factory(swift: .groupExternalIds(groupExternalIds))
    }
    fatalError("codegen error")
}

func mapDBTEAMHasTeamFileEventsValueToDBXOptional(object: DBTEAMHasTeamFileEventsValue?) -> DBXTeamHasTeamFileEventsValue? {
    guard let object = object else { return nil }
    return mapDBTEAMHasTeamFileEventsValueToDBX(object: object)
}

func mapDBTEAMHasTeamFileEventsValueToDBX(object: DBTEAMHasTeamFileEventsValue) -> DBXTeamHasTeamFileEventsValue {
    if object.isEnabled() {
        let enabled = object.enabled
        return DBXTeamHasTeamFileEventsValue.factory(swift: .enabled(enabled.boolValue))
    }
    if object.isOther() {
        return DBXTeamHasTeamFileEventsValueOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMHasTeamSelectiveSyncValueToDBXOptional(object: DBTEAMHasTeamSelectiveSyncValue?) -> DBXTeamHasTeamSelectiveSyncValue? {
    guard let object = object else { return nil }
    return mapDBTEAMHasTeamSelectiveSyncValueToDBX(object: object)
}

func mapDBTEAMHasTeamSelectiveSyncValueToDBX(object: DBTEAMHasTeamSelectiveSyncValue) -> DBXTeamHasTeamSelectiveSyncValue {
    if object.isHasTeamSelectiveSync() {
        let hasTeamSelectiveSync = object.hasTeamSelectiveSync
        return DBXTeamHasTeamSelectiveSyncValue.factory(swift: .hasTeamSelectiveSync(hasTeamSelectiveSync.boolValue))
    }
    if object.isOther() {
        return DBXTeamHasTeamSelectiveSyncValueOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMHasTeamSharedDropboxValueToDBXOptional(object: DBTEAMHasTeamSharedDropboxValue?) -> DBXTeamHasTeamSharedDropboxValue? {
    guard let object = object else { return nil }
    return mapDBTEAMHasTeamSharedDropboxValueToDBX(object: object)
}

func mapDBTEAMHasTeamSharedDropboxValueToDBX(object: DBTEAMHasTeamSharedDropboxValue) -> DBXTeamHasTeamSharedDropboxValue {
    if object.isHasTeamSharedDropbox() {
        let hasTeamSharedDropbox = object.hasTeamSharedDropbox
        return DBXTeamHasTeamSharedDropboxValue.factory(swift: .hasTeamSharedDropbox(hasTeamSharedDropbox.boolValue))
    }
    if object.isOther() {
        return DBXTeamHasTeamSharedDropboxValueOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldHeldRevisionMetadataToDBXOptional(object: DBTEAMLegalHoldHeldRevisionMetadata?) -> DBXTeamLegalHoldHeldRevisionMetadata? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldHeldRevisionMetadataToDBX(object: object)
}

func mapDBTEAMLegalHoldHeldRevisionMetadataToDBX(object: DBTEAMLegalHoldHeldRevisionMetadata) -> DBXTeamLegalHoldHeldRevisionMetadata {
    DBXTeamLegalHoldHeldRevisionMetadata(
        newFilename: object.dNewFilename,
        originalRevisionId: object.originalRevisionId,
        originalFilePath: object.originalFilePath,
        serverModified: object.serverModified,
        authorMemberId: object.authorMemberId,
        authorMemberStatus: mapDBTEAMTeamMemberStatusToDBX(object: object.authorMemberStatus),
        authorEmail: object.authorEmail,
        fileType: object.fileType,
        size: object.size,
        contentHash: object.contentHash
    )
}

func mapDBTEAMLegalHoldPolicyToDBXOptional(object: DBTEAMLegalHoldPolicy?) -> DBXTeamLegalHoldPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldPolicyToDBX(object: object)
}

func mapDBTEAMLegalHoldPolicyToDBX(object: DBTEAMLegalHoldPolicy) -> DBXTeamLegalHoldPolicy {
    DBXTeamLegalHoldPolicy(
        id: object.id_,
        name: object.name,
        members: mapDBTEAMMembersInfoToDBX(object: object.members),
        status: mapDBTEAMLegalHoldStatusToDBX(object: object.status),
        startDate: object.startDate,
        description_: object.description_,
        activationTime: object.activationTime,
        endDate: object.endDate
    )
}

func mapDBTEAMLegalHoldStatusToDBXOptional(object: DBTEAMLegalHoldStatus?) -> DBXTeamLegalHoldStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldStatusToDBX(object: object)
}

func mapDBTEAMLegalHoldStatusToDBX(object: DBTEAMLegalHoldStatus) -> DBXTeamLegalHoldStatus {
    if object.isActive() {
        return DBXTeamLegalHoldStatusActive()
    }
    if object.isReleased() {
        return DBXTeamLegalHoldStatusReleased()
    }
    if object.isActivating() {
        return DBXTeamLegalHoldStatusActivating()
    }
    if object.isUpdating() {
        return DBXTeamLegalHoldStatusUpdating()
    }
    if object.isExporting() {
        return DBXTeamLegalHoldStatusExporting()
    }
    if object.isReleasing() {
        return DBXTeamLegalHoldStatusReleasing()
    }
    if object.isOther() {
        return DBXTeamLegalHoldStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsErrorToDBXOptional(object: DBTEAMLegalHoldsError?) -> DBXTeamLegalHoldsError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsErrorToDBX(object: DBTEAMLegalHoldsError) -> DBXTeamLegalHoldsError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsGetPolicyArgToDBXOptional(object: DBTEAMLegalHoldsGetPolicyArg?) -> DBXTeamLegalHoldsGetPolicyArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsGetPolicyArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsGetPolicyArgToDBX(object: DBTEAMLegalHoldsGetPolicyArg) -> DBXTeamLegalHoldsGetPolicyArg {
    DBXTeamLegalHoldsGetPolicyArg(id: object.id_)
}

func mapDBTEAMLegalHoldsGetPolicyErrorToDBXOptional(object: DBTEAMLegalHoldsGetPolicyError?) -> DBXTeamLegalHoldsGetPolicyError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsGetPolicyErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsGetPolicyErrorToDBX(object: DBTEAMLegalHoldsGetPolicyError) -> DBXTeamLegalHoldsGetPolicyError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsGetPolicyErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsGetPolicyErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsGetPolicyErrorOther()
    }
    if object.isLegalHoldPolicyNotFound() {
        return DBXTeamLegalHoldsGetPolicyErrorLegalHoldPolicyNotFound()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsListHeldRevisionResultToDBXOptional(object: DBTEAMLegalHoldsListHeldRevisionResult?) -> DBXTeamLegalHoldsListHeldRevisionResult? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListHeldRevisionResultToDBX(object: object)
}

func mapDBTEAMLegalHoldsListHeldRevisionResultToDBX(object: DBTEAMLegalHoldsListHeldRevisionResult) -> DBXTeamLegalHoldsListHeldRevisionResult {
    DBXTeamLegalHoldsListHeldRevisionResult(
        entries: object.entries.compactMap { mapDBTEAMLegalHoldHeldRevisionMetadataToDBX(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBTEAMLegalHoldsListHeldRevisionsArgToDBXOptional(object: DBTEAMLegalHoldsListHeldRevisionsArg?) -> DBXTeamLegalHoldsListHeldRevisionsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListHeldRevisionsArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsListHeldRevisionsArgToDBX(object: DBTEAMLegalHoldsListHeldRevisionsArg) -> DBXTeamLegalHoldsListHeldRevisionsArg {
    DBXTeamLegalHoldsListHeldRevisionsArg(id: object.id_)
}

func mapDBTEAMLegalHoldsListHeldRevisionsContinueArgToDBXOptional(object: DBTEAMLegalHoldsListHeldRevisionsContinueArg?)
    -> DBXTeamLegalHoldsListHeldRevisionsContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListHeldRevisionsContinueArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsListHeldRevisionsContinueArgToDBX(object: DBTEAMLegalHoldsListHeldRevisionsContinueArg)
    -> DBXTeamLegalHoldsListHeldRevisionsContinueArg {
    DBXTeamLegalHoldsListHeldRevisionsContinueArg(id: object.id_, cursor: object.cursor)
}

func mapDBTEAMLegalHoldsListHeldRevisionsContinueErrorToDBXOptional(object: DBTEAMLegalHoldsListHeldRevisionsContinueError?)
    -> DBXTeamLegalHoldsListHeldRevisionsContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListHeldRevisionsContinueErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsListHeldRevisionsContinueErrorToDBX(object: DBTEAMLegalHoldsListHeldRevisionsContinueError)
    -> DBXTeamLegalHoldsListHeldRevisionsContinueError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsListHeldRevisionsContinueErrorUnknownLegalHoldError()
    }
    if object.isTransientError() {
        return DBXTeamLegalHoldsListHeldRevisionsContinueErrorTransientError()
    }
    if object.isReset() {
        return DBXTeamLegalHoldsListHeldRevisionsContinueErrorReset()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsListHeldRevisionsContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsListHeldRevisionsErrorToDBXOptional(object: DBTEAMLegalHoldsListHeldRevisionsError?) -> DBXTeamLegalHoldsListHeldRevisionsError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListHeldRevisionsErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsListHeldRevisionsErrorToDBX(object: DBTEAMLegalHoldsListHeldRevisionsError) -> DBXTeamLegalHoldsListHeldRevisionsError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorOther()
    }
    if object.isTransientError() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorTransientError()
    }
    if object.isLegalHoldStillEmpty() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorLegalHoldStillEmpty()
    }
    if object.isInactiveLegalHold() {
        return DBXTeamLegalHoldsListHeldRevisionsErrorInactiveLegalHold()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsListPoliciesArgToDBXOptional(object: DBTEAMLegalHoldsListPoliciesArg?) -> DBXTeamLegalHoldsListPoliciesArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListPoliciesArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsListPoliciesArgToDBX(object: DBTEAMLegalHoldsListPoliciesArg) -> DBXTeamLegalHoldsListPoliciesArg {
    DBXTeamLegalHoldsListPoliciesArg(includeReleased: object.includeReleased)
}

func mapDBTEAMLegalHoldsListPoliciesErrorToDBXOptional(object: DBTEAMLegalHoldsListPoliciesError?) -> DBXTeamLegalHoldsListPoliciesError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListPoliciesErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsListPoliciesErrorToDBX(object: DBTEAMLegalHoldsListPoliciesError) -> DBXTeamLegalHoldsListPoliciesError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsListPoliciesErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsListPoliciesErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsListPoliciesErrorOther()
    }
    if object.isTransientError() {
        return DBXTeamLegalHoldsListPoliciesErrorTransientError()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsListPoliciesResultToDBXOptional(object: DBTEAMLegalHoldsListPoliciesResult?) -> DBXTeamLegalHoldsListPoliciesResult? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsListPoliciesResultToDBX(object: object)
}

func mapDBTEAMLegalHoldsListPoliciesResultToDBX(object: DBTEAMLegalHoldsListPoliciesResult) -> DBXTeamLegalHoldsListPoliciesResult {
    DBXTeamLegalHoldsListPoliciesResult(policies: object.policies.compactMap { mapDBTEAMLegalHoldPolicyToDBX(object: $0) })
}

func mapDBTEAMLegalHoldsPolicyCreateArgToDBXOptional(object: DBTEAMLegalHoldsPolicyCreateArg?) -> DBXTeamLegalHoldsPolicyCreateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyCreateArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyCreateArgToDBX(object: DBTEAMLegalHoldsPolicyCreateArg) -> DBXTeamLegalHoldsPolicyCreateArg {
    DBXTeamLegalHoldsPolicyCreateArg(
        name: object.name,
        members: object.members,
        description_: object.description_,
        startDate: object.startDate,
        endDate: object.endDate
    )
}

func mapDBTEAMLegalHoldsPolicyCreateErrorToDBXOptional(object: DBTEAMLegalHoldsPolicyCreateError?) -> DBXTeamLegalHoldsPolicyCreateError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyCreateErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyCreateErrorToDBX(object: DBTEAMLegalHoldsPolicyCreateError) -> DBXTeamLegalHoldsPolicyCreateError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsPolicyCreateErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsPolicyCreateErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsPolicyCreateErrorOther()
    }
    if object.isStartDateIsLaterThanEndDate() {
        return DBXTeamLegalHoldsPolicyCreateErrorStartDateIsLaterThanEndDate()
    }
    if object.isEmptyMembersList() {
        return DBXTeamLegalHoldsPolicyCreateErrorEmptyMembersList()
    }
    if object.isInvalidMembers() {
        return DBXTeamLegalHoldsPolicyCreateErrorInvalidMembers()
    }
    if object.isNumberOfUsersOnHoldIsGreaterThanHoldLimitation() {
        return DBXTeamLegalHoldsPolicyCreateErrorNumberOfUsersOnHoldIsGreaterThanHoldLimitation()
    }
    if object.isTransientError() {
        return DBXTeamLegalHoldsPolicyCreateErrorTransientError()
    }
    if object.isNameMustBeUnique() {
        return DBXTeamLegalHoldsPolicyCreateErrorNameMustBeUnique()
    }
    if object.isTeamExceededLegalHoldQuota() {
        return DBXTeamLegalHoldsPolicyCreateErrorTeamExceededLegalHoldQuota()
    }
    if object.isInvalidDate() {
        return DBXTeamLegalHoldsPolicyCreateErrorInvalidDate()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsPolicyReleaseArgToDBXOptional(object: DBTEAMLegalHoldsPolicyReleaseArg?) -> DBXTeamLegalHoldsPolicyReleaseArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyReleaseArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyReleaseArgToDBX(object: DBTEAMLegalHoldsPolicyReleaseArg) -> DBXTeamLegalHoldsPolicyReleaseArg {
    DBXTeamLegalHoldsPolicyReleaseArg(id: object.id_)
}

func mapDBTEAMLegalHoldsPolicyReleaseErrorToDBXOptional(object: DBTEAMLegalHoldsPolicyReleaseError?) -> DBXTeamLegalHoldsPolicyReleaseError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyReleaseErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyReleaseErrorToDBX(object: DBTEAMLegalHoldsPolicyReleaseError) -> DBXTeamLegalHoldsPolicyReleaseError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsPolicyReleaseErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsPolicyReleaseErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsPolicyReleaseErrorOther()
    }
    if object.isLegalHoldPerformingAnotherOperation() {
        return DBXTeamLegalHoldsPolicyReleaseErrorLegalHoldPerformingAnotherOperation()
    }
    if object.isLegalHoldAlreadyReleasing() {
        return DBXTeamLegalHoldsPolicyReleaseErrorLegalHoldAlreadyReleasing()
    }
    if object.isLegalHoldPolicyNotFound() {
        return DBXTeamLegalHoldsPolicyReleaseErrorLegalHoldPolicyNotFound()
    }
    fatalError("codegen error")
}

func mapDBTEAMLegalHoldsPolicyUpdateArgToDBXOptional(object: DBTEAMLegalHoldsPolicyUpdateArg?) -> DBXTeamLegalHoldsPolicyUpdateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyUpdateArgToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyUpdateArgToDBX(object: DBTEAMLegalHoldsPolicyUpdateArg) -> DBXTeamLegalHoldsPolicyUpdateArg {
    DBXTeamLegalHoldsPolicyUpdateArg(id: object.id_, name: object.name, description_: object.description_, members: object.members)
}

func mapDBTEAMLegalHoldsPolicyUpdateErrorToDBXOptional(object: DBTEAMLegalHoldsPolicyUpdateError?) -> DBXTeamLegalHoldsPolicyUpdateError? {
    guard let object = object else { return nil }
    return mapDBTEAMLegalHoldsPolicyUpdateErrorToDBX(object: object)
}

func mapDBTEAMLegalHoldsPolicyUpdateErrorToDBX(object: DBTEAMLegalHoldsPolicyUpdateError) -> DBXTeamLegalHoldsPolicyUpdateError {
    if object.isUnknownLegalHoldError() {
        return DBXTeamLegalHoldsPolicyUpdateErrorUnknownLegalHoldError()
    }
    if object.isInsufficientPermissions() {
        return DBXTeamLegalHoldsPolicyUpdateErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXTeamLegalHoldsPolicyUpdateErrorOther()
    }
    if object.isTransientError() {
        return DBXTeamLegalHoldsPolicyUpdateErrorTransientError()
    }
    if object.isInactiveLegalHold() {
        return DBXTeamLegalHoldsPolicyUpdateErrorInactiveLegalHold()
    }
    if object.isLegalHoldPerformingAnotherOperation() {
        return DBXTeamLegalHoldsPolicyUpdateErrorLegalHoldPerformingAnotherOperation()
    }
    if object.isInvalidMembers() {
        return DBXTeamLegalHoldsPolicyUpdateErrorInvalidMembers()
    }
    if object.isNumberOfUsersOnHoldIsGreaterThanHoldLimitation() {
        return DBXTeamLegalHoldsPolicyUpdateErrorNumberOfUsersOnHoldIsGreaterThanHoldLimitation()
    }
    if object.isEmptyMembersList() {
        return DBXTeamLegalHoldsPolicyUpdateErrorEmptyMembersList()
    }
    if object.isNameMustBeUnique() {
        return DBXTeamLegalHoldsPolicyUpdateErrorNameMustBeUnique()
    }
    if object.isLegalHoldPolicyNotFound() {
        return DBXTeamLegalHoldsPolicyUpdateErrorLegalHoldPolicyNotFound()
    }
    fatalError("codegen error")
}

func mapDBTEAMListMemberAppsArgToDBXOptional(object: DBTEAMListMemberAppsArg?) -> DBXTeamListMemberAppsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberAppsArgToDBX(object: object)
}

func mapDBTEAMListMemberAppsArgToDBX(object: DBTEAMListMemberAppsArg) -> DBXTeamListMemberAppsArg {
    DBXTeamListMemberAppsArg(teamMemberId: object.teamMemberId)
}

func mapDBTEAMListMemberAppsErrorToDBXOptional(object: DBTEAMListMemberAppsError?) -> DBXTeamListMemberAppsError? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberAppsErrorToDBX(object: object)
}

func mapDBTEAMListMemberAppsErrorToDBX(object: DBTEAMListMemberAppsError) -> DBXTeamListMemberAppsError {
    if object.isMemberNotFound() {
        return DBXTeamListMemberAppsErrorMemberNotFound()
    }
    if object.isOther() {
        return DBXTeamListMemberAppsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListMemberAppsResultToDBXOptional(object: DBTEAMListMemberAppsResult?) -> DBXTeamListMemberAppsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberAppsResultToDBX(object: object)
}

func mapDBTEAMListMemberAppsResultToDBX(object: DBTEAMListMemberAppsResult) -> DBXTeamListMemberAppsResult {
    DBXTeamListMemberAppsResult(linkedApiApps: object.linkedApiApps.compactMap { mapDBTEAMApiAppToDBX(object: $0) })
}

func mapDBTEAMListMemberDevicesArgToDBXOptional(object: DBTEAMListMemberDevicesArg?) -> DBXTeamListMemberDevicesArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberDevicesArgToDBX(object: object)
}

func mapDBTEAMListMemberDevicesArgToDBX(object: DBTEAMListMemberDevicesArg) -> DBXTeamListMemberDevicesArg {
    DBXTeamListMemberDevicesArg(
        teamMemberId: object.teamMemberId,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBTEAMListMemberDevicesErrorToDBXOptional(object: DBTEAMListMemberDevicesError?) -> DBXTeamListMemberDevicesError? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberDevicesErrorToDBX(object: object)
}

func mapDBTEAMListMemberDevicesErrorToDBX(object: DBTEAMListMemberDevicesError) -> DBXTeamListMemberDevicesError {
    if object.isMemberNotFound() {
        return DBXTeamListMemberDevicesErrorMemberNotFound()
    }
    if object.isOther() {
        return DBXTeamListMemberDevicesErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListMemberDevicesResultToDBXOptional(object: DBTEAMListMemberDevicesResult?) -> DBXTeamListMemberDevicesResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListMemberDevicesResultToDBX(object: object)
}

func mapDBTEAMListMemberDevicesResultToDBX(object: DBTEAMListMemberDevicesResult) -> DBXTeamListMemberDevicesResult {
    DBXTeamListMemberDevicesResult(
        activeWebSessions: object.activeWebSessions?.compactMap { mapDBTEAMActiveWebSessionToDBX(object: $0) },
        desktopClientSessions: object.desktopClientSessions?.compactMap { mapDBTEAMDesktopClientSessionToDBX(object: $0) },
        mobileClientSessions: object.mobileClientSessions?.compactMap { mapDBTEAMMobileClientSessionToDBX(object: $0) }
    )
}

func mapDBTEAMListMembersAppsArgToDBXOptional(object: DBTEAMListMembersAppsArg?) -> DBXTeamListMembersAppsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersAppsArgToDBX(object: object)
}

func mapDBTEAMListMembersAppsArgToDBX(object: DBTEAMListMembersAppsArg) -> DBXTeamListMembersAppsArg {
    DBXTeamListMembersAppsArg(cursor: object.cursor)
}

func mapDBTEAMListMembersAppsErrorToDBXOptional(object: DBTEAMListMembersAppsError?) -> DBXTeamListMembersAppsError? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersAppsErrorToDBX(object: object)
}

func mapDBTEAMListMembersAppsErrorToDBX(object: DBTEAMListMembersAppsError) -> DBXTeamListMembersAppsError {
    if object.isReset() {
        return DBXTeamListMembersAppsErrorReset()
    }
    if object.isOther() {
        return DBXTeamListMembersAppsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListMembersAppsResultToDBXOptional(object: DBTEAMListMembersAppsResult?) -> DBXTeamListMembersAppsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersAppsResultToDBX(object: object)
}

func mapDBTEAMListMembersAppsResultToDBX(object: DBTEAMListMembersAppsResult) -> DBXTeamListMembersAppsResult {
    DBXTeamListMembersAppsResult(apps: object.apps.compactMap { mapDBTEAMMemberLinkedAppsToDBX(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBTEAMListMembersDevicesArgToDBXOptional(object: DBTEAMListMembersDevicesArg?) -> DBXTeamListMembersDevicesArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersDevicesArgToDBX(object: object)
}

func mapDBTEAMListMembersDevicesArgToDBX(object: DBTEAMListMembersDevicesArg) -> DBXTeamListMembersDevicesArg {
    DBXTeamListMembersDevicesArg(
        cursor: object.cursor,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBTEAMListMembersDevicesErrorToDBXOptional(object: DBTEAMListMembersDevicesError?) -> DBXTeamListMembersDevicesError? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersDevicesErrorToDBX(object: object)
}

func mapDBTEAMListMembersDevicesErrorToDBX(object: DBTEAMListMembersDevicesError) -> DBXTeamListMembersDevicesError {
    if object.isReset() {
        return DBXTeamListMembersDevicesErrorReset()
    }
    if object.isOther() {
        return DBXTeamListMembersDevicesErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListMembersDevicesResultToDBXOptional(object: DBTEAMListMembersDevicesResult?) -> DBXTeamListMembersDevicesResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListMembersDevicesResultToDBX(object: object)
}

func mapDBTEAMListMembersDevicesResultToDBX(object: DBTEAMListMembersDevicesResult) -> DBXTeamListMembersDevicesResult {
    DBXTeamListMembersDevicesResult(
        devices: object.devices.compactMap { mapDBTEAMMemberDevicesToDBX(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBTEAMListTeamAppsArgToDBXOptional(object: DBTEAMListTeamAppsArg?) -> DBXTeamListTeamAppsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamAppsArgToDBX(object: object)
}

func mapDBTEAMListTeamAppsArgToDBX(object: DBTEAMListTeamAppsArg) -> DBXTeamListTeamAppsArg {
    DBXTeamListTeamAppsArg(cursor: object.cursor)
}

func mapDBTEAMListTeamAppsErrorToDBXOptional(object: DBTEAMListTeamAppsError?) -> DBXTeamListTeamAppsError? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamAppsErrorToDBX(object: object)
}

func mapDBTEAMListTeamAppsErrorToDBX(object: DBTEAMListTeamAppsError) -> DBXTeamListTeamAppsError {
    if object.isReset() {
        return DBXTeamListTeamAppsErrorReset()
    }
    if object.isOther() {
        return DBXTeamListTeamAppsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListTeamAppsResultToDBXOptional(object: DBTEAMListTeamAppsResult?) -> DBXTeamListTeamAppsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamAppsResultToDBX(object: object)
}

func mapDBTEAMListTeamAppsResultToDBX(object: DBTEAMListTeamAppsResult) -> DBXTeamListTeamAppsResult {
    DBXTeamListTeamAppsResult(apps: object.apps.compactMap { mapDBTEAMMemberLinkedAppsToDBX(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBTEAMListTeamDevicesArgToDBXOptional(object: DBTEAMListTeamDevicesArg?) -> DBXTeamListTeamDevicesArg? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamDevicesArgToDBX(object: object)
}

func mapDBTEAMListTeamDevicesArgToDBX(object: DBTEAMListTeamDevicesArg) -> DBXTeamListTeamDevicesArg {
    DBXTeamListTeamDevicesArg(
        cursor: object.cursor,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBTEAMListTeamDevicesErrorToDBXOptional(object: DBTEAMListTeamDevicesError?) -> DBXTeamListTeamDevicesError? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamDevicesErrorToDBX(object: object)
}

func mapDBTEAMListTeamDevicesErrorToDBX(object: DBTEAMListTeamDevicesError) -> DBXTeamListTeamDevicesError {
    if object.isReset() {
        return DBXTeamListTeamDevicesErrorReset()
    }
    if object.isOther() {
        return DBXTeamListTeamDevicesErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMListTeamDevicesResultToDBXOptional(object: DBTEAMListTeamDevicesResult?) -> DBXTeamListTeamDevicesResult? {
    guard let object = object else { return nil }
    return mapDBTEAMListTeamDevicesResultToDBX(object: object)
}

func mapDBTEAMListTeamDevicesResultToDBX(object: DBTEAMListTeamDevicesResult) -> DBXTeamListTeamDevicesResult {
    DBXTeamListTeamDevicesResult(devices: object.devices.compactMap { mapDBTEAMMemberDevicesToDBX(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBTEAMMemberAccessToDBXOptional(object: DBTEAMMemberAccess?) -> DBXTeamMemberAccess? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAccessToDBX(object: object)
}

func mapDBTEAMMemberAccessToDBX(object: DBTEAMMemberAccess) -> DBXTeamMemberAccess {
    DBXTeamMemberAccess(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), accessType: mapDBTEAMGroupAccessTypeToDBX(object: object.accessType))
}

func mapDBTEAMMemberAddArgBaseToDBXOptional(object: DBTEAMMemberAddArgBase?) -> DBXTeamMemberAddArgBase? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddArgBaseToDBX(object: object)
}

func mapDBTEAMMemberAddArgBaseToDBX(object: DBTEAMMemberAddArgBase) -> DBXTeamMemberAddArgBase {
    DBXTeamMemberAddArgBase(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted
    )
}

func mapDBTEAMMemberAddArgToDBXOptional(object: DBTEAMMemberAddArg?) -> DBXTeamMemberAddArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddArgToDBX(object: object)
}

func mapDBTEAMMemberAddArgToDBX(object: DBTEAMMemberAddArg) -> DBXTeamMemberAddArg {
    DBXTeamMemberAddArg(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted,
        role: mapDBTEAMAdminTierToDBX(object: object.role)
    )
}

func mapDBTEAMMemberAddResultBaseToDBXOptional(object: DBTEAMMemberAddResultBase?) -> DBXTeamMemberAddResultBase? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddResultBaseToDBX(object: object)
}

func mapDBTEAMMemberAddResultBaseToDBX(object: DBTEAMMemberAddResultBase) -> DBXTeamMemberAddResultBase {
    if object.isTeamLicenseLimit() {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBXTeamMemberAddResultBase.factory(swift: .teamLicenseLimit(teamLicenseLimit))
    }
    if object.isFreeTeamMemberLimitReached() {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBXTeamMemberAddResultBase.factory(swift: .freeTeamMemberLimitReached(freeTeamMemberLimitReached))
    }
    if object.isUserAlreadyOnTeam() {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBXTeamMemberAddResultBase.factory(swift: .userAlreadyOnTeam(userAlreadyOnTeam))
    }
    if object.isUserOnAnotherTeam() {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBXTeamMemberAddResultBase.factory(swift: .userOnAnotherTeam(userOnAnotherTeam))
    }
    if object.isUserAlreadyPaired() {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBXTeamMemberAddResultBase.factory(swift: .userAlreadyPaired(userAlreadyPaired))
    }
    if object.isUserMigrationFailed() {
        let userMigrationFailed = object.userMigrationFailed
        return DBXTeamMemberAddResultBase.factory(swift: .userMigrationFailed(userMigrationFailed))
    }
    if object.isDuplicateExternalMemberId() {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBXTeamMemberAddResultBase.factory(swift: .duplicateExternalMemberId(duplicateExternalMemberId))
    }
    if object.isDuplicateMemberPersistentId() {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBXTeamMemberAddResultBase.factory(swift: .duplicateMemberPersistentId(duplicateMemberPersistentId))
    }
    if object.isPersistentIdDisabled() {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBXTeamMemberAddResultBase.factory(swift: .persistentIdDisabled(persistentIdDisabled))
    }
    if object.isUserCreationFailed() {
        let userCreationFailed = object.userCreationFailed
        return DBXTeamMemberAddResultBase.factory(swift: .userCreationFailed(userCreationFailed))
    }
    fatalError("codegen error")
}

func mapDBTEAMMemberAddResultToDBXOptional(object: DBTEAMMemberAddResult?) -> DBXTeamMemberAddResult? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddResultToDBX(object: object)
}

func mapDBTEAMMemberAddResultToDBX(object: DBTEAMMemberAddResult) -> DBXTeamMemberAddResult {
    if object.isTeamLicenseLimit() {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBXTeamMemberAddResult.factory(swift: .teamLicenseLimit(teamLicenseLimit))
    }
    if object.isFreeTeamMemberLimitReached() {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBXTeamMemberAddResult.factory(swift: .freeTeamMemberLimitReached(freeTeamMemberLimitReached))
    }
    if object.isUserAlreadyOnTeam() {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBXTeamMemberAddResult.factory(swift: .userAlreadyOnTeam(userAlreadyOnTeam))
    }
    if object.isUserOnAnotherTeam() {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBXTeamMemberAddResult.factory(swift: .userOnAnotherTeam(userOnAnotherTeam))
    }
    if object.isUserAlreadyPaired() {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBXTeamMemberAddResult.factory(swift: .userAlreadyPaired(userAlreadyPaired))
    }
    if object.isUserMigrationFailed() {
        let userMigrationFailed = object.userMigrationFailed
        return DBXTeamMemberAddResult.factory(swift: .userMigrationFailed(userMigrationFailed))
    }
    if object.isDuplicateExternalMemberId() {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBXTeamMemberAddResult.factory(swift: .duplicateExternalMemberId(duplicateExternalMemberId))
    }
    if object.isDuplicateMemberPersistentId() {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBXTeamMemberAddResult.factory(swift: .duplicateMemberPersistentId(duplicateMemberPersistentId))
    }
    if object.isPersistentIdDisabled() {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBXTeamMemberAddResult.factory(swift: .persistentIdDisabled(persistentIdDisabled))
    }
    if object.isUserCreationFailed() {
        let userCreationFailed = object.userCreationFailed
        return DBXTeamMemberAddResult.factory(swift: .userCreationFailed(userCreationFailed))
    }
    if object.isSuccess() {
        let success = mapDBTEAMTeamMemberInfoToDBX(object: object.success)
        return DBXTeamMemberAddResult.factory(swift: .success(success.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMMemberAddV2ArgToDBXOptional(object: DBTEAMMemberAddV2Arg?) -> DBXTeamMemberAddV2Arg? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddV2ArgToDBX(object: object)
}

func mapDBTEAMMemberAddV2ArgToDBX(object: DBTEAMMemberAddV2Arg) -> DBXTeamMemberAddV2Arg {
    DBXTeamMemberAddV2Arg(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted,
        roleIds: object.roleIds
    )
}

func mapDBTEAMMemberAddV2ResultToDBXOptional(object: DBTEAMMemberAddV2Result?) -> DBXTeamMemberAddV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberAddV2ResultToDBX(object: object)
}

func mapDBTEAMMemberAddV2ResultToDBX(object: DBTEAMMemberAddV2Result) -> DBXTeamMemberAddV2Result {
    if object.isTeamLicenseLimit() {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBXTeamMemberAddV2Result.factory(swift: .teamLicenseLimit(teamLicenseLimit))
    }
    if object.isFreeTeamMemberLimitReached() {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBXTeamMemberAddV2Result.factory(swift: .freeTeamMemberLimitReached(freeTeamMemberLimitReached))
    }
    if object.isUserAlreadyOnTeam() {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBXTeamMemberAddV2Result.factory(swift: .userAlreadyOnTeam(userAlreadyOnTeam))
    }
    if object.isUserOnAnotherTeam() {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBXTeamMemberAddV2Result.factory(swift: .userOnAnotherTeam(userOnAnotherTeam))
    }
    if object.isUserAlreadyPaired() {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBXTeamMemberAddV2Result.factory(swift: .userAlreadyPaired(userAlreadyPaired))
    }
    if object.isUserMigrationFailed() {
        let userMigrationFailed = object.userMigrationFailed
        return DBXTeamMemberAddV2Result.factory(swift: .userMigrationFailed(userMigrationFailed))
    }
    if object.isDuplicateExternalMemberId() {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBXTeamMemberAddV2Result.factory(swift: .duplicateExternalMemberId(duplicateExternalMemberId))
    }
    if object.isDuplicateMemberPersistentId() {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBXTeamMemberAddV2Result.factory(swift: .duplicateMemberPersistentId(duplicateMemberPersistentId))
    }
    if object.isPersistentIdDisabled() {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBXTeamMemberAddV2Result.factory(swift: .persistentIdDisabled(persistentIdDisabled))
    }
    if object.isUserCreationFailed() {
        let userCreationFailed = object.userCreationFailed
        return DBXTeamMemberAddV2Result.factory(swift: .userCreationFailed(userCreationFailed))
    }
    if object.isSuccess() {
        let success = mapDBTEAMTeamMemberInfoV2ToDBX(object: object.success)
        return DBXTeamMemberAddV2Result.factory(swift: .success(success.swift))
    }
    if object.isOther() {
        return DBXTeamMemberAddV2ResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMemberDevicesToDBXOptional(object: DBTEAMMemberDevices?) -> DBXTeamMemberDevices? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberDevicesToDBX(object: object)
}

func mapDBTEAMMemberDevicesToDBX(object: DBTEAMMemberDevices) -> DBXTeamMemberDevices {
    DBXTeamMemberDevices(
        teamMemberId: object.teamMemberId,
        webSessions: object.webSessions?.compactMap { mapDBTEAMActiveWebSessionToDBX(object: $0) },
        desktopClients: object.desktopClients?.compactMap { mapDBTEAMDesktopClientSessionToDBX(object: $0) },
        mobileClients: object.mobileClients?.compactMap { mapDBTEAMMobileClientSessionToDBX(object: $0) }
    )
}

func mapDBTEAMMemberLinkedAppsToDBXOptional(object: DBTEAMMemberLinkedApps?) -> DBXTeamMemberLinkedApps? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberLinkedAppsToDBX(object: object)
}

func mapDBTEAMMemberLinkedAppsToDBX(object: DBTEAMMemberLinkedApps) -> DBXTeamMemberLinkedApps {
    DBXTeamMemberLinkedApps(teamMemberId: object.teamMemberId, linkedApiApps: object.linkedApiApps.compactMap { mapDBTEAMApiAppToDBX(object: $0) })
}

func mapDBTEAMMemberProfileToDBXOptional(object: DBTEAMMemberProfile?) -> DBXTeamMemberProfile? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberProfileToDBX(object: object)
}

func mapDBTEAMMemberProfileToDBX(object: DBTEAMMemberProfile) -> DBXTeamMemberProfile {
    DBXTeamMemberProfile(
        teamMemberId: object.teamMemberId,
        email: object.email,
        emailVerified: object.emailVerified,
        status: mapDBTEAMTeamMemberStatusToDBX(object: object.status),
        name: mapDBUSERSNameToDBX(object: object.name),
        membershipType: mapDBTEAMTeamMembershipTypeToDBX(object: object.membershipType),
        externalId: object.externalId,
        accountId: object.accountId,
        secondaryEmails: object.secondaryEmails?.compactMap { mapDBSECONDARYEMAILSSecondaryEmailToDBX(object: $0) },
        invitedOn: object.invitedOn,
        joinedOn: object.joinedOn,
        suspendedOn: object.suspendedOn,
        persistentId: object.persistentId,
        isDirectoryRestricted: object.isDirectoryRestricted,
        profilePhotoUrl: object.profilePhotoUrl
    )
}

func mapDBTEAMUserSelectorErrorToDBXOptional(object: DBTEAMUserSelectorError?) -> DBXTeamUserSelectorError? {
    guard let object = object else { return nil }
    return mapDBTEAMUserSelectorErrorToDBX(object: object)
}

func mapDBTEAMUserSelectorErrorToDBX(object: DBTEAMUserSelectorError) -> DBXTeamUserSelectorError {
    if object.isUserNotFound() {
        return DBXTeamUserSelectorErrorUserNotFound()
    }
    fatalError("codegen error")
}

func mapDBTEAMMemberSelectorErrorToDBXOptional(object: DBTEAMMemberSelectorError?) -> DBXTeamMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBTEAMMemberSelectorErrorToDBX(object: object)
}

func mapDBTEAMMemberSelectorErrorToDBX(object: DBTEAMMemberSelectorError) -> DBXTeamMemberSelectorError {
    if object.isUserNotFound() {
        return DBXTeamMemberSelectorErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMemberSelectorErrorUserNotInTeam()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersAddArgBaseToDBXOptional(object: DBTEAMMembersAddArgBase?) -> DBXTeamMembersAddArgBase? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddArgBaseToDBX(object: object)
}

func mapDBTEAMMembersAddArgBaseToDBX(object: DBTEAMMembersAddArgBase) -> DBXTeamMembersAddArgBase {
    DBXTeamMembersAddArgBase(forceAsync: object.forceAsync)
}

func mapDBTEAMMembersAddArgToDBXOptional(object: DBTEAMMembersAddArg?) -> DBXTeamMembersAddArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddArgToDBX(object: object)
}

func mapDBTEAMMembersAddArgToDBX(object: DBTEAMMembersAddArg) -> DBXTeamMembersAddArg {
    DBXTeamMembersAddArg(newMembers: object.dNewMembers.compactMap { mapDBTEAMMemberAddArgToDBX(object: $0) }, forceAsync: object.forceAsync)
}

func mapDBTEAMMembersAddJobStatusToDBXOptional(object: DBTEAMMembersAddJobStatus?) -> DBXTeamMembersAddJobStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddJobStatusToDBX(object: object)
}

func mapDBTEAMMembersAddJobStatusToDBX(object: DBTEAMMembersAddJobStatus) -> DBXTeamMembersAddJobStatus {
    if object.isInProgress() {
        return DBXTeamMembersAddJobStatusInProgress()
    }
    if object.isComplete() {
        let complete = object.complete.compactMap { mapDBTEAMMemberAddResultToDBX(object: $0) }
        return DBXTeamMembersAddJobStatus.factory(swift: .complete(complete.map(\.swift)))
    }
    if object.isFailed() {
        let failed = object.failed
        return DBXTeamMembersAddJobStatus.factory(swift: .failed(failed))
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersAddJobStatusV2ResultToDBXOptional(object: DBTEAMMembersAddJobStatusV2Result?) -> DBXTeamMembersAddJobStatusV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddJobStatusV2ResultToDBX(object: object)
}

func mapDBTEAMMembersAddJobStatusV2ResultToDBX(object: DBTEAMMembersAddJobStatusV2Result) -> DBXTeamMembersAddJobStatusV2Result {
    if object.isInProgress() {
        return DBXTeamMembersAddJobStatusV2ResultInProgress()
    }
    if object.isComplete() {
        let complete = object.complete.compactMap { mapDBTEAMMemberAddV2ResultToDBX(object: $0) }
        return DBXTeamMembersAddJobStatusV2Result.factory(swift: .complete(complete.map(\.swift)))
    }
    if object.isFailed() {
        let failed = object.failed
        return DBXTeamMembersAddJobStatusV2Result.factory(swift: .failed(failed))
    }
    if object.isOther() {
        return DBXTeamMembersAddJobStatusV2ResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersAddLaunchToDBXOptional(object: DBTEAMMembersAddLaunch?) -> DBXTeamMembersAddLaunch? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddLaunchToDBX(object: object)
}

func mapDBTEAMMembersAddLaunchToDBX(object: DBTEAMMembersAddLaunch) -> DBXTeamMembersAddLaunch {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXTeamMembersAddLaunch.factory(swift: .asyncJobId(asyncJobId))
    }
    if object.isComplete() {
        let complete = object.complete.compactMap { mapDBTEAMMemberAddResultToDBX(object: $0) }
        return DBXTeamMembersAddLaunch.factory(swift: .complete(complete.map(\.swift)))
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersAddLaunchV2ResultToDBXOptional(object: DBTEAMMembersAddLaunchV2Result?) -> DBXTeamMembersAddLaunchV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddLaunchV2ResultToDBX(object: object)
}

func mapDBTEAMMembersAddLaunchV2ResultToDBX(object: DBTEAMMembersAddLaunchV2Result) -> DBXTeamMembersAddLaunchV2Result {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXTeamMembersAddLaunchV2Result.factory(swift: .asyncJobId(asyncJobId))
    }
    if object.isComplete() {
        let complete = object.complete.compactMap { mapDBTEAMMemberAddV2ResultToDBX(object: $0) }
        return DBXTeamMembersAddLaunchV2Result.factory(swift: .complete(complete.map(\.swift)))
    }
    if object.isOther() {
        return DBXTeamMembersAddLaunchV2ResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersAddV2ArgToDBXOptional(object: DBTEAMMembersAddV2Arg?) -> DBXTeamMembersAddV2Arg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersAddV2ArgToDBX(object: object)
}

func mapDBTEAMMembersAddV2ArgToDBX(object: DBTEAMMembersAddV2Arg) -> DBXTeamMembersAddV2Arg {
    DBXTeamMembersAddV2Arg(newMembers: object.dNewMembers.compactMap { mapDBTEAMMemberAddV2ArgToDBX(object: $0) }, forceAsync: object.forceAsync)
}

func mapDBTEAMMembersDeactivateBaseArgToDBXOptional(object: DBTEAMMembersDeactivateBaseArg?) -> DBXTeamMembersDeactivateBaseArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDeactivateBaseArgToDBX(object: object)
}

func mapDBTEAMMembersDeactivateBaseArgToDBX(object: DBTEAMMembersDeactivateBaseArg) -> DBXTeamMembersDeactivateBaseArg {
    DBXTeamMembersDeactivateBaseArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user))
}

func mapDBTEAMMembersDataTransferArgToDBXOptional(object: DBTEAMMembersDataTransferArg?) -> DBXTeamMembersDataTransferArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDataTransferArgToDBX(object: object)
}

func mapDBTEAMMembersDataTransferArgToDBX(object: DBTEAMMembersDataTransferArg) -> DBXTeamMembersDataTransferArg {
    DBXTeamMembersDataTransferArg(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        transferDestId: mapDBTEAMUserSelectorArgToDBX(object: object.transferDestId),
        transferAdminId: mapDBTEAMUserSelectorArgToDBX(object: object.transferAdminId)
    )
}

func mapDBTEAMMembersDeactivateArgToDBXOptional(object: DBTEAMMembersDeactivateArg?) -> DBXTeamMembersDeactivateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDeactivateArgToDBX(object: object)
}

func mapDBTEAMMembersDeactivateArgToDBX(object: DBTEAMMembersDeactivateArg) -> DBXTeamMembersDeactivateArg {
    DBXTeamMembersDeactivateArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), wipeData: object.wipeData)
}

func mapDBTEAMMembersDeactivateErrorToDBXOptional(object: DBTEAMMembersDeactivateError?) -> DBXTeamMembersDeactivateError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDeactivateErrorToDBX(object: object)
}

func mapDBTEAMMembersDeactivateErrorToDBX(object: DBTEAMMembersDeactivateError) -> DBXTeamMembersDeactivateError {
    if object.isUserNotFound() {
        return DBXTeamMembersDeactivateErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersDeactivateErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersDeactivateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersDeleteProfilePhotoArgToDBXOptional(object: DBTEAMMembersDeleteProfilePhotoArg?) -> DBXTeamMembersDeleteProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDeleteProfilePhotoArgToDBX(object: object)
}

func mapDBTEAMMembersDeleteProfilePhotoArgToDBX(object: DBTEAMMembersDeleteProfilePhotoArg) -> DBXTeamMembersDeleteProfilePhotoArg {
    DBXTeamMembersDeleteProfilePhotoArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user))
}

func mapDBTEAMMembersDeleteProfilePhotoErrorToDBXOptional(object: DBTEAMMembersDeleteProfilePhotoError?) -> DBXTeamMembersDeleteProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersDeleteProfilePhotoErrorToDBX(object: object)
}

func mapDBTEAMMembersDeleteProfilePhotoErrorToDBX(object: DBTEAMMembersDeleteProfilePhotoError) -> DBXTeamMembersDeleteProfilePhotoError {
    if object.isUserNotFound() {
        return DBXTeamMembersDeleteProfilePhotoErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersDeleteProfilePhotoErrorUserNotInTeam()
    }
    if object.isSetProfileDisallowed() {
        return DBXTeamMembersDeleteProfilePhotoErrorSetProfileDisallowed()
    }
    if object.isOther() {
        return DBXTeamMembersDeleteProfilePhotoErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersGetAvailableTeamMemberRolesResultToDBXOptional(object: DBTEAMMembersGetAvailableTeamMemberRolesResult?)
    -> DBXTeamMembersGetAvailableTeamMemberRolesResult? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetAvailableTeamMemberRolesResultToDBX(object: object)
}

func mapDBTEAMMembersGetAvailableTeamMemberRolesResultToDBX(object: DBTEAMMembersGetAvailableTeamMemberRolesResult)
    -> DBXTeamMembersGetAvailableTeamMemberRolesResult {
    DBXTeamMembersGetAvailableTeamMemberRolesResult(roles: object.roles.compactMap { mapDBTEAMTeamMemberRoleToDBX(object: $0) })
}

func mapDBTEAMMembersGetInfoArgsToDBXOptional(object: DBTEAMMembersGetInfoArgs?) -> DBXTeamMembersGetInfoArgs? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoArgsToDBX(object: object)
}

func mapDBTEAMMembersGetInfoArgsToDBX(object: DBTEAMMembersGetInfoArgs) -> DBXTeamMembersGetInfoArgs {
    DBXTeamMembersGetInfoArgs(members: object.members.compactMap { mapDBTEAMUserSelectorArgToDBX(object: $0) })
}

func mapDBTEAMMembersGetInfoErrorToDBXOptional(object: DBTEAMMembersGetInfoError?) -> DBXTeamMembersGetInfoError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoErrorToDBX(object: object)
}

func mapDBTEAMMembersGetInfoErrorToDBX(object: DBTEAMMembersGetInfoError) -> DBXTeamMembersGetInfoError {
    if object.isOther() {
        return DBXTeamMembersGetInfoErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersGetInfoItemBaseToDBXOptional(object: DBTEAMMembersGetInfoItemBase?) -> DBXTeamMembersGetInfoItemBase? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoItemBaseToDBX(object: object)
}

func mapDBTEAMMembersGetInfoItemBaseToDBX(object: DBTEAMMembersGetInfoItemBase) -> DBXTeamMembersGetInfoItemBase {
    if object.isIdNotFound() {
        let idNotFound = object.idNotFound
        return DBXTeamMembersGetInfoItemBase.factory(swift: .idNotFound(idNotFound))
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersGetInfoItemToDBXOptional(object: DBTEAMMembersGetInfoItem?) -> DBXTeamMembersGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoItemToDBX(object: object)
}

func mapDBTEAMMembersGetInfoItemToDBX(object: DBTEAMMembersGetInfoItem) -> DBXTeamMembersGetInfoItem {
    if object.isIdNotFound() {
        let idNotFound = object.idNotFound
        return DBXTeamMembersGetInfoItem.factory(swift: .idNotFound(idNotFound))
    }
    if object.isMemberInfo() {
        let memberInfo = mapDBTEAMTeamMemberInfoToDBX(object: object.memberInfo)
        return DBXTeamMembersGetInfoItem.factory(swift: .memberInfo(memberInfo.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersGetInfoItemV2ToDBXOptional(object: DBTEAMMembersGetInfoItemV2?) -> DBXTeamMembersGetInfoItemV2? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoItemV2ToDBX(object: object)
}

func mapDBTEAMMembersGetInfoItemV2ToDBX(object: DBTEAMMembersGetInfoItemV2) -> DBXTeamMembersGetInfoItemV2 {
    if object.isIdNotFound() {
        let idNotFound = object.idNotFound
        return DBXTeamMembersGetInfoItemV2.factory(swift: .idNotFound(idNotFound))
    }
    if object.isMemberInfo() {
        let memberInfo = mapDBTEAMTeamMemberInfoV2ToDBX(object: object.memberInfo)
        return DBXTeamMembersGetInfoItemV2.factory(swift: .memberInfo(memberInfo.swift))
    }
    if object.isOther() {
        return DBXTeamMembersGetInfoItemV2Other()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersGetInfoV2ArgToDBXOptional(object: DBTEAMMembersGetInfoV2Arg?) -> DBXTeamMembersGetInfoV2Arg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoV2ArgToDBX(object: object)
}

func mapDBTEAMMembersGetInfoV2ArgToDBX(object: DBTEAMMembersGetInfoV2Arg) -> DBXTeamMembersGetInfoV2Arg {
    DBXTeamMembersGetInfoV2Arg(members: object.members.compactMap { mapDBTEAMUserSelectorArgToDBX(object: $0) })
}

func mapDBTEAMMembersGetInfoV2ResultToDBXOptional(object: DBTEAMMembersGetInfoV2Result?) -> DBXTeamMembersGetInfoV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersGetInfoV2ResultToDBX(object: object)
}

func mapDBTEAMMembersGetInfoV2ResultToDBX(object: DBTEAMMembersGetInfoV2Result) -> DBXTeamMembersGetInfoV2Result {
    DBXTeamMembersGetInfoV2Result(membersInfo: object.membersInfo.compactMap { mapDBTEAMMembersGetInfoItemV2ToDBX(object: $0) })
}

func mapDBTEAMMembersInfoToDBXOptional(object: DBTEAMMembersInfo?) -> DBXTeamMembersInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersInfoToDBX(object: object)
}

func mapDBTEAMMembersInfoToDBX(object: DBTEAMMembersInfo) -> DBXTeamMembersInfo {
    DBXTeamMembersInfo(teamMemberIds: object.teamMemberIds, permanentlyDeletedUsers: object.permanentlyDeletedUsers)
}

func mapDBTEAMMembersListArgToDBXOptional(object: DBTEAMMembersListArg?) -> DBXTeamMembersListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListArgToDBX(object: object)
}

func mapDBTEAMMembersListArgToDBX(object: DBTEAMMembersListArg) -> DBXTeamMembersListArg {
    DBXTeamMembersListArg(limit: object.limit, includeRemoved: object.includeRemoved)
}

func mapDBTEAMMembersListContinueArgToDBXOptional(object: DBTEAMMembersListContinueArg?) -> DBXTeamMembersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListContinueArgToDBX(object: object)
}

func mapDBTEAMMembersListContinueArgToDBX(object: DBTEAMMembersListContinueArg) -> DBXTeamMembersListContinueArg {
    DBXTeamMembersListContinueArg(cursor: object.cursor)
}

func mapDBTEAMMembersListContinueErrorToDBXOptional(object: DBTEAMMembersListContinueError?) -> DBXTeamMembersListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListContinueErrorToDBX(object: object)
}

func mapDBTEAMMembersListContinueErrorToDBX(object: DBTEAMMembersListContinueError) -> DBXTeamMembersListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamMembersListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamMembersListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersListErrorToDBXOptional(object: DBTEAMMembersListError?) -> DBXTeamMembersListError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListErrorToDBX(object: object)
}

func mapDBTEAMMembersListErrorToDBX(object: DBTEAMMembersListError) -> DBXTeamMembersListError {
    if object.isOther() {
        return DBXTeamMembersListErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersListResultToDBXOptional(object: DBTEAMMembersListResult?) -> DBXTeamMembersListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListResultToDBX(object: object)
}

func mapDBTEAMMembersListResultToDBX(object: DBTEAMMembersListResult) -> DBXTeamMembersListResult {
    DBXTeamMembersListResult(members: object.members.compactMap { mapDBTEAMTeamMemberInfoToDBX(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBTEAMMembersListV2ResultToDBXOptional(object: DBTEAMMembersListV2Result?) -> DBXTeamMembersListV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersListV2ResultToDBX(object: object)
}

func mapDBTEAMMembersListV2ResultToDBX(object: DBTEAMMembersListV2Result) -> DBXTeamMembersListV2Result {
    DBXTeamMembersListV2Result(
        members: object.members.compactMap { mapDBTEAMTeamMemberInfoV2ToDBX(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBTEAMMembersRecoverArgToDBXOptional(object: DBTEAMMembersRecoverArg?) -> DBXTeamMembersRecoverArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersRecoverArgToDBX(object: object)
}

func mapDBTEAMMembersRecoverArgToDBX(object: DBTEAMMembersRecoverArg) -> DBXTeamMembersRecoverArg {
    DBXTeamMembersRecoverArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user))
}

func mapDBTEAMMembersRecoverErrorToDBXOptional(object: DBTEAMMembersRecoverError?) -> DBXTeamMembersRecoverError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersRecoverErrorToDBX(object: object)
}

func mapDBTEAMMembersRecoverErrorToDBX(object: DBTEAMMembersRecoverError) -> DBXTeamMembersRecoverError {
    if object.isUserNotFound() {
        return DBXTeamMembersRecoverErrorUserNotFound()
    }
    if object.isUserUnrecoverable() {
        return DBXTeamMembersRecoverErrorUserUnrecoverable()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersRecoverErrorUserNotInTeam()
    }
    if object.isTeamLicenseLimit() {
        return DBXTeamMembersRecoverErrorTeamLicenseLimit()
    }
    if object.isOther() {
        return DBXTeamMembersRecoverErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersRemoveArgToDBXOptional(object: DBTEAMMembersRemoveArg?) -> DBXTeamMembersRemoveArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersRemoveArgToDBX(object: object)
}

func mapDBTEAMMembersRemoveArgToDBX(object: DBTEAMMembersRemoveArg) -> DBXTeamMembersRemoveArg {
    DBXTeamMembersRemoveArg(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        wipeData: object.wipeData,
        transferDestId: mapDBTEAMUserSelectorArgToDBXOptional(object: object.transferDestId),
        transferAdminId: mapDBTEAMUserSelectorArgToDBXOptional(object: object.transferAdminId),
        keepAccount: object.keepAccount,
        retainTeamShares: object.retainTeamShares
    )
}

func mapDBTEAMMembersTransferFilesErrorToDBXOptional(object: DBTEAMMembersTransferFilesError?) -> DBXTeamMembersTransferFilesError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersTransferFilesErrorToDBX(object: object)
}

func mapDBTEAMMembersTransferFilesErrorToDBX(object: DBTEAMMembersTransferFilesError) -> DBXTeamMembersTransferFilesError {
    if object.isUserNotFound() {
        return DBXTeamMembersTransferFilesErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersTransferFilesErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersTransferFilesErrorOther()
    }
    if object.isRemovedAndTransferDestShouldDiffer() {
        return DBXTeamMembersTransferFilesErrorRemovedAndTransferDestShouldDiffer()
    }
    if object.isRemovedAndTransferAdminShouldDiffer() {
        return DBXTeamMembersTransferFilesErrorRemovedAndTransferAdminShouldDiffer()
    }
    if object.isTransferDestUserNotFound() {
        return DBXTeamMembersTransferFilesErrorTransferDestUserNotFound()
    }
    if object.isTransferDestUserNotInTeam() {
        return DBXTeamMembersTransferFilesErrorTransferDestUserNotInTeam()
    }
    if object.isTransferAdminUserNotInTeam() {
        return DBXTeamMembersTransferFilesErrorTransferAdminUserNotInTeam()
    }
    if object.isTransferAdminUserNotFound() {
        return DBXTeamMembersTransferFilesErrorTransferAdminUserNotFound()
    }
    if object.isUnspecifiedTransferAdminId() {
        return DBXTeamMembersTransferFilesErrorUnspecifiedTransferAdminId()
    }
    if object.isTransferAdminIsNotAdmin() {
        return DBXTeamMembersTransferFilesErrorTransferAdminIsNotAdmin()
    }
    if object.isRecipientNotVerified() {
        return DBXTeamMembersTransferFilesErrorRecipientNotVerified()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersRemoveErrorToDBXOptional(object: DBTEAMMembersRemoveError?) -> DBXTeamMembersRemoveError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersRemoveErrorToDBX(object: object)
}

func mapDBTEAMMembersRemoveErrorToDBX(object: DBTEAMMembersRemoveError) -> DBXTeamMembersRemoveError {
    if object.isUserNotFound() {
        return DBXTeamMembersRemoveErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersRemoveErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersRemoveErrorOther()
    }
    if object.isRemovedAndTransferDestShouldDiffer() {
        return DBXTeamMembersRemoveErrorRemovedAndTransferDestShouldDiffer()
    }
    if object.isRemovedAndTransferAdminShouldDiffer() {
        return DBXTeamMembersRemoveErrorRemovedAndTransferAdminShouldDiffer()
    }
    if object.isTransferDestUserNotFound() {
        return DBXTeamMembersRemoveErrorTransferDestUserNotFound()
    }
    if object.isTransferDestUserNotInTeam() {
        return DBXTeamMembersRemoveErrorTransferDestUserNotInTeam()
    }
    if object.isTransferAdminUserNotInTeam() {
        return DBXTeamMembersRemoveErrorTransferAdminUserNotInTeam()
    }
    if object.isTransferAdminUserNotFound() {
        return DBXTeamMembersRemoveErrorTransferAdminUserNotFound()
    }
    if object.isUnspecifiedTransferAdminId() {
        return DBXTeamMembersRemoveErrorUnspecifiedTransferAdminId()
    }
    if object.isTransferAdminIsNotAdmin() {
        return DBXTeamMembersRemoveErrorTransferAdminIsNotAdmin()
    }
    if object.isRecipientNotVerified() {
        return DBXTeamMembersRemoveErrorRecipientNotVerified()
    }
    if object.isRemoveLastAdmin() {
        return DBXTeamMembersRemoveErrorRemoveLastAdmin()
    }
    if object.isCannotKeepAccountAndTransfer() {
        return DBXTeamMembersRemoveErrorCannotKeepAccountAndTransfer()
    }
    if object.isCannotKeepAccountAndDeleteData() {
        return DBXTeamMembersRemoveErrorCannotKeepAccountAndDeleteData()
    }
    if object.isEmailAddressTooLongToBeDisabled() {
        return DBXTeamMembersRemoveErrorEmailAddressTooLongToBeDisabled()
    }
    if object.isCannotKeepInvitedUserAccount() {
        return DBXTeamMembersRemoveErrorCannotKeepInvitedUserAccount()
    }
    if object.isCannotRetainSharesWhenDataWiped() {
        return DBXTeamMembersRemoveErrorCannotRetainSharesWhenDataWiped()
    }
    if object.isCannotRetainSharesWhenNoAccountKept() {
        return DBXTeamMembersRemoveErrorCannotRetainSharesWhenNoAccountKept()
    }
    if object.isCannotRetainSharesWhenTeamExternalSharingOff() {
        return DBXTeamMembersRemoveErrorCannotRetainSharesWhenTeamExternalSharingOff()
    }
    if object.isCannotKeepAccount() {
        return DBXTeamMembersRemoveErrorCannotKeepAccount()
    }
    if object.isCannotKeepAccountUnderLegalHold() {
        return DBXTeamMembersRemoveErrorCannotKeepAccountUnderLegalHold()
    }
    if object.isCannotKeepAccountRequiredToSignTos() {
        return DBXTeamMembersRemoveErrorCannotKeepAccountRequiredToSignTos()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSendWelcomeErrorToDBXOptional(object: DBTEAMMembersSendWelcomeError?) -> DBXTeamMembersSendWelcomeError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSendWelcomeErrorToDBX(object: object)
}

func mapDBTEAMMembersSendWelcomeErrorToDBX(object: DBTEAMMembersSendWelcomeError) -> DBXTeamMembersSendWelcomeError {
    if object.isUserNotFound() {
        return DBXTeamMembersSendWelcomeErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSendWelcomeErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersSendWelcomeErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSetPermissions2ArgToDBXOptional(object: DBTEAMMembersSetPermissions2Arg?) -> DBXTeamMembersSetPermissions2Arg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissions2ArgToDBX(object: object)
}

func mapDBTEAMMembersSetPermissions2ArgToDBX(object: DBTEAMMembersSetPermissions2Arg) -> DBXTeamMembersSetPermissions2Arg {
    DBXTeamMembersSetPermissions2Arg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), newRoles: object.dNewRoles)
}

func mapDBTEAMMembersSetPermissions2ErrorToDBXOptional(object: DBTEAMMembersSetPermissions2Error?) -> DBXTeamMembersSetPermissions2Error? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissions2ErrorToDBX(object: object)
}

func mapDBTEAMMembersSetPermissions2ErrorToDBX(object: DBTEAMMembersSetPermissions2Error) -> DBXTeamMembersSetPermissions2Error {
    if object.isUserNotFound() {
        return DBXTeamMembersSetPermissions2ErrorUserNotFound()
    }
    if object.isLastAdmin() {
        return DBXTeamMembersSetPermissions2ErrorLastAdmin()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSetPermissions2ErrorUserNotInTeam()
    }
    if object.isCannotSetPermissions() {
        return DBXTeamMembersSetPermissions2ErrorCannotSetPermissions()
    }
    if object.isRoleNotFound() {
        return DBXTeamMembersSetPermissions2ErrorRoleNotFound()
    }
    if object.isOther() {
        return DBXTeamMembersSetPermissions2ErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSetPermissions2ResultToDBXOptional(object: DBTEAMMembersSetPermissions2Result?) -> DBXTeamMembersSetPermissions2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissions2ResultToDBX(object: object)
}

func mapDBTEAMMembersSetPermissions2ResultToDBX(object: DBTEAMMembersSetPermissions2Result) -> DBXTeamMembersSetPermissions2Result {
    DBXTeamMembersSetPermissions2Result(teamMemberId: object.teamMemberId, roles: object.roles?.compactMap { mapDBTEAMTeamMemberRoleToDBX(object: $0) })
}

func mapDBTEAMMembersSetPermissionsArgToDBXOptional(object: DBTEAMMembersSetPermissionsArg?) -> DBXTeamMembersSetPermissionsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissionsArgToDBX(object: object)
}

func mapDBTEAMMembersSetPermissionsArgToDBX(object: DBTEAMMembersSetPermissionsArg) -> DBXTeamMembersSetPermissionsArg {
    DBXTeamMembersSetPermissionsArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), newRole: mapDBTEAMAdminTierToDBX(object: object.dNewRole))
}

func mapDBTEAMMembersSetPermissionsErrorToDBXOptional(object: DBTEAMMembersSetPermissionsError?) -> DBXTeamMembersSetPermissionsError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissionsErrorToDBX(object: object)
}

func mapDBTEAMMembersSetPermissionsErrorToDBX(object: DBTEAMMembersSetPermissionsError) -> DBXTeamMembersSetPermissionsError {
    if object.isUserNotFound() {
        return DBXTeamMembersSetPermissionsErrorUserNotFound()
    }
    if object.isLastAdmin() {
        return DBXTeamMembersSetPermissionsErrorLastAdmin()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSetPermissionsErrorUserNotInTeam()
    }
    if object.isCannotSetPermissions() {
        return DBXTeamMembersSetPermissionsErrorCannotSetPermissions()
    }
    if object.isTeamLicenseLimit() {
        return DBXTeamMembersSetPermissionsErrorTeamLicenseLimit()
    }
    if object.isOther() {
        return DBXTeamMembersSetPermissionsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSetPermissionsResultToDBXOptional(object: DBTEAMMembersSetPermissionsResult?) -> DBXTeamMembersSetPermissionsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetPermissionsResultToDBX(object: object)
}

func mapDBTEAMMembersSetPermissionsResultToDBX(object: DBTEAMMembersSetPermissionsResult) -> DBXTeamMembersSetPermissionsResult {
    DBXTeamMembersSetPermissionsResult(teamMemberId: object.teamMemberId, role: mapDBTEAMAdminTierToDBX(object: object.role))
}

func mapDBTEAMMembersSetProfileArgToDBXOptional(object: DBTEAMMembersSetProfileArg?) -> DBXTeamMembersSetProfileArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetProfileArgToDBX(object: object)
}

func mapDBTEAMMembersSetProfileArgToDBX(object: DBTEAMMembersSetProfileArg) -> DBXTeamMembersSetProfileArg {
    DBXTeamMembersSetProfileArg(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        newEmail: object.dNewEmail,
        newExternalId: object.dNewExternalId,
        newGivenName: object.dNewGivenName,
        newSurname: object.dNewSurname,
        newPersistentId: object.dNewPersistentId,
        newIsDirectoryRestricted: object.dNewIsDirectoryRestricted
    )
}

func mapDBTEAMMembersSetProfileErrorToDBXOptional(object: DBTEAMMembersSetProfileError?) -> DBXTeamMembersSetProfileError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetProfileErrorToDBX(object: object)
}

func mapDBTEAMMembersSetProfileErrorToDBX(object: DBTEAMMembersSetProfileError) -> DBXTeamMembersSetProfileError {
    if object.isUserNotFound() {
        return DBXTeamMembersSetProfileErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSetProfileErrorUserNotInTeam()
    }
    if object.isExternalIdAndNewExternalIdUnsafe() {
        return DBXTeamMembersSetProfileErrorExternalIdAndNewExternalIdUnsafe()
    }
    if object.isNoNewDataSpecified() {
        return DBXTeamMembersSetProfileErrorNoNewDataSpecified()
    }
    if object.isEmailReservedForOtherUser() {
        return DBXTeamMembersSetProfileErrorEmailReservedForOtherUser()
    }
    if object.isExternalIdUsedByOtherUser() {
        return DBXTeamMembersSetProfileErrorExternalIdUsedByOtherUser()
    }
    if object.isSetProfileDisallowed() {
        return DBXTeamMembersSetProfileErrorSetProfileDisallowed()
    }
    if object.isParamCannotBeEmpty() {
        return DBXTeamMembersSetProfileErrorParamCannotBeEmpty()
    }
    if object.isPersistentIdDisabled() {
        return DBXTeamMembersSetProfileErrorPersistentIdDisabled()
    }
    if object.isPersistentIdUsedByOtherUser() {
        return DBXTeamMembersSetProfileErrorPersistentIdUsedByOtherUser()
    }
    if object.isDirectoryRestrictedOff() {
        return DBXTeamMembersSetProfileErrorDirectoryRestrictedOff()
    }
    if object.isOther() {
        return DBXTeamMembersSetProfileErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSetProfilePhotoArgToDBXOptional(object: DBTEAMMembersSetProfilePhotoArg?) -> DBXTeamMembersSetProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetProfilePhotoArgToDBX(object: object)
}

func mapDBTEAMMembersSetProfilePhotoArgToDBX(object: DBTEAMMembersSetProfilePhotoArg) -> DBXTeamMembersSetProfilePhotoArg {
    DBXTeamMembersSetProfilePhotoArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), photo: mapDBACCOUNTPhotoSourceArgToDBX(object: object.photo))
}

func mapDBTEAMMembersSetProfilePhotoErrorToDBXOptional(object: DBTEAMMembersSetProfilePhotoError?) -> DBXTeamMembersSetProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSetProfilePhotoErrorToDBX(object: object)
}

func mapDBTEAMMembersSetProfilePhotoErrorToDBX(object: DBTEAMMembersSetProfilePhotoError) -> DBXTeamMembersSetProfilePhotoError {
    if object.isUserNotFound() {
        return DBXTeamMembersSetProfilePhotoErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSetProfilePhotoErrorUserNotInTeam()
    }
    if object.isSetProfileDisallowed() {
        return DBXTeamMembersSetProfilePhotoErrorSetProfileDisallowed()
    }
    if object.isPhotoError() {
        let photoError = mapDBACCOUNTSetProfilePhotoErrorToDBX(object: object.photoError)
        return DBXTeamMembersSetProfilePhotoError.factory(swift: .photoError(photoError.swift))
    }
    if object.isOther() {
        return DBXTeamMembersSetProfilePhotoErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersSuspendErrorToDBXOptional(object: DBTEAMMembersSuspendError?) -> DBXTeamMembersSuspendError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersSuspendErrorToDBX(object: object)
}

func mapDBTEAMMembersSuspendErrorToDBX(object: DBTEAMMembersSuspendError) -> DBXTeamMembersSuspendError {
    if object.isUserNotFound() {
        return DBXTeamMembersSuspendErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersSuspendErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersSuspendErrorOther()
    }
    if object.isSuspendInactiveUser() {
        return DBXTeamMembersSuspendErrorSuspendInactiveUser()
    }
    if object.isSuspendLastAdmin() {
        return DBXTeamMembersSuspendErrorSuspendLastAdmin()
    }
    if object.isTeamLicenseLimit() {
        return DBXTeamMembersSuspendErrorTeamLicenseLimit()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersTransferFormerMembersFilesErrorToDBXOptional(object: DBTEAMMembersTransferFormerMembersFilesError?)
    -> DBXTeamMembersTransferFormerMembersFilesError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersTransferFormerMembersFilesErrorToDBX(object: object)
}

func mapDBTEAMMembersTransferFormerMembersFilesErrorToDBX(object: DBTEAMMembersTransferFormerMembersFilesError)
    -> DBXTeamMembersTransferFormerMembersFilesError {
    if object.isUserNotFound() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersTransferFormerMembersFilesErrorOther()
    }
    if object.isRemovedAndTransferDestShouldDiffer() {
        return DBXTeamMembersTransferFormerMembersFilesErrorRemovedAndTransferDestShouldDiffer()
    }
    if object.isRemovedAndTransferAdminShouldDiffer() {
        return DBXTeamMembersTransferFormerMembersFilesErrorRemovedAndTransferAdminShouldDiffer()
    }
    if object.isTransferDestUserNotFound() {
        return DBXTeamMembersTransferFormerMembersFilesErrorTransferDestUserNotFound()
    }
    if object.isTransferDestUserNotInTeam() {
        return DBXTeamMembersTransferFormerMembersFilesErrorTransferDestUserNotInTeam()
    }
    if object.isTransferAdminUserNotInTeam() {
        return DBXTeamMembersTransferFormerMembersFilesErrorTransferAdminUserNotInTeam()
    }
    if object.isTransferAdminUserNotFound() {
        return DBXTeamMembersTransferFormerMembersFilesErrorTransferAdminUserNotFound()
    }
    if object.isUnspecifiedTransferAdminId() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUnspecifiedTransferAdminId()
    }
    if object.isTransferAdminIsNotAdmin() {
        return DBXTeamMembersTransferFormerMembersFilesErrorTransferAdminIsNotAdmin()
    }
    if object.isRecipientNotVerified() {
        return DBXTeamMembersTransferFormerMembersFilesErrorRecipientNotVerified()
    }
    if object.isUserDataIsBeingTransferred() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserDataIsBeingTransferred()
    }
    if object.isUserNotRemoved() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserNotRemoved()
    }
    if object.isUserDataCannotBeTransferred() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserDataCannotBeTransferred()
    }
    if object.isUserDataAlreadyTransferred() {
        return DBXTeamMembersTransferFormerMembersFilesErrorUserDataAlreadyTransferred()
    }
    fatalError("codegen error")
}

func mapDBTEAMMembersUnsuspendArgToDBXOptional(object: DBTEAMMembersUnsuspendArg?) -> DBXTeamMembersUnsuspendArg? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersUnsuspendArgToDBX(object: object)
}

func mapDBTEAMMembersUnsuspendArgToDBX(object: DBTEAMMembersUnsuspendArg) -> DBXTeamMembersUnsuspendArg {
    DBXTeamMembersUnsuspendArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user))
}

func mapDBTEAMMembersUnsuspendErrorToDBXOptional(object: DBTEAMMembersUnsuspendError?) -> DBXTeamMembersUnsuspendError? {
    guard let object = object else { return nil }
    return mapDBTEAMMembersUnsuspendErrorToDBX(object: object)
}

func mapDBTEAMMembersUnsuspendErrorToDBX(object: DBTEAMMembersUnsuspendError) -> DBXTeamMembersUnsuspendError {
    if object.isUserNotFound() {
        return DBXTeamMembersUnsuspendErrorUserNotFound()
    }
    if object.isUserNotInTeam() {
        return DBXTeamMembersUnsuspendErrorUserNotInTeam()
    }
    if object.isOther() {
        return DBXTeamMembersUnsuspendErrorOther()
    }
    if object.isUnsuspendNonSuspendedMember() {
        return DBXTeamMembersUnsuspendErrorUnsuspendNonSuspendedMember()
    }
    if object.isTeamLicenseLimit() {
        return DBXTeamMembersUnsuspendErrorTeamLicenseLimit()
    }
    fatalError("codegen error")
}

func mapDBTEAMMobileClientPlatformToDBXOptional(object: DBTEAMMobileClientPlatform?) -> DBXTeamMobileClientPlatform? {
    guard let object = object else { return nil }
    return mapDBTEAMMobileClientPlatformToDBX(object: object)
}

func mapDBTEAMMobileClientPlatformToDBX(object: DBTEAMMobileClientPlatform) -> DBXTeamMobileClientPlatform {
    if object.isIphone() {
        return DBXTeamMobileClientPlatformIphone()
    }
    if object.isIpad() {
        return DBXTeamMobileClientPlatformIpad()
    }
    if object.isAndroid() {
        return DBXTeamMobileClientPlatformAndroid()
    }
    if object.isWindowsPhone() {
        return DBXTeamMobileClientPlatformWindowsPhone()
    }
    if object.isBlackberry() {
        return DBXTeamMobileClientPlatformBlackberry()
    }
    if object.isOther() {
        return DBXTeamMobileClientPlatformOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMMobileClientSessionToDBXOptional(object: DBTEAMMobileClientSession?) -> DBXTeamMobileClientSession? {
    guard let object = object else { return nil }
    return mapDBTEAMMobileClientSessionToDBX(object: object)
}

func mapDBTEAMMobileClientSessionToDBX(object: DBTEAMMobileClientSession) -> DBXTeamMobileClientSession {
    DBXTeamMobileClientSession(
        sessionId: object.sessionId,
        deviceName: object.deviceName,
        clientType: mapDBTEAMMobileClientPlatformToDBX(object: object.clientType),
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated,
        clientVersion: object.clientVersion,
        osVersion: object.osVersion,
        lastCarrier: object.lastCarrier
    )
}

func mapDBTEAMNamespaceMetadataToDBXOptional(object: DBTEAMNamespaceMetadata?) -> DBXTeamNamespaceMetadata? {
    guard let object = object else { return nil }
    return mapDBTEAMNamespaceMetadataToDBX(object: object)
}

func mapDBTEAMNamespaceMetadataToDBX(object: DBTEAMNamespaceMetadata) -> DBXTeamNamespaceMetadata {
    DBXTeamNamespaceMetadata(
        name: object.name,
        namespaceId: object.namespaceId,
        namespaceType: mapDBTEAMNamespaceTypeToDBX(object: object.namespaceType),
        teamMemberId: object.teamMemberId
    )
}

func mapDBTEAMNamespaceTypeToDBXOptional(object: DBTEAMNamespaceType?) -> DBXTeamNamespaceType? {
    guard let object = object else { return nil }
    return mapDBTEAMNamespaceTypeToDBX(object: object)
}

func mapDBTEAMNamespaceTypeToDBX(object: DBTEAMNamespaceType) -> DBXTeamNamespaceType {
    if object.isAppFolder() {
        return DBXTeamNamespaceTypeAppFolder()
    }
    if object.isSharedFolder() {
        return DBXTeamNamespaceTypeSharedFolder()
    }
    if object.isTeamFolder() {
        return DBXTeamNamespaceTypeTeamFolder()
    }
    if object.isTeamMemberFolder() {
        return DBXTeamNamespaceTypeTeamMemberFolder()
    }
    if object.isOther() {
        return DBXTeamNamespaceTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRemoveCustomQuotaResultToDBXOptional(object: DBTEAMRemoveCustomQuotaResult?) -> DBXTeamRemoveCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBTEAMRemoveCustomQuotaResultToDBX(object: object)
}

func mapDBTEAMRemoveCustomQuotaResultToDBX(object: DBTEAMRemoveCustomQuotaResult) -> DBXTeamRemoveCustomQuotaResult {
    if object.isSuccess() {
        let success = mapDBTEAMUserSelectorArgToDBX(object: object.success)
        return DBXTeamRemoveCustomQuotaResult.factory(swift: .success(success.swift))
    }
    if object.isInvalidUser() {
        let invalidUser = mapDBTEAMUserSelectorArgToDBX(object: object.invalidUser)
        return DBXTeamRemoveCustomQuotaResult.factory(swift: .invalidUser(invalidUser.swift))
    }
    if object.isOther() {
        return DBXTeamRemoveCustomQuotaResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRemovedStatusToDBXOptional(object: DBTEAMRemovedStatus?) -> DBXTeamRemovedStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMRemovedStatusToDBX(object: object)
}

func mapDBTEAMRemovedStatusToDBX(object: DBTEAMRemovedStatus) -> DBXTeamRemovedStatus {
    DBXTeamRemovedStatus(isRecoverable: object.isRecoverable, isDisconnected: object.isDisconnected)
}

func mapDBTEAMResendSecondaryEmailResultToDBXOptional(object: DBTEAMResendSecondaryEmailResult?) -> DBXTeamResendSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBTEAMResendSecondaryEmailResultToDBX(object: object)
}

func mapDBTEAMResendSecondaryEmailResultToDBX(object: DBTEAMResendSecondaryEmailResult) -> DBXTeamResendSecondaryEmailResult {
    if object.isSuccess() {
        let success = object.success
        return DBXTeamResendSecondaryEmailResult.factory(swift: .success(success))
    }
    if object.isNotPending() {
        let notPending = object.notPending
        return DBXTeamResendSecondaryEmailResult.factory(swift: .notPending(notPending))
    }
    if object.isRateLimited() {
        let rateLimited = object.rateLimited
        return DBXTeamResendSecondaryEmailResult.factory(swift: .rateLimited(rateLimited))
    }
    if object.isOther() {
        return DBXTeamResendSecondaryEmailResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMResendVerificationEmailArgToDBXOptional(object: DBTEAMResendVerificationEmailArg?) -> DBXTeamResendVerificationEmailArg? {
    guard let object = object else { return nil }
    return mapDBTEAMResendVerificationEmailArgToDBX(object: object)
}

func mapDBTEAMResendVerificationEmailArgToDBX(object: DBTEAMResendVerificationEmailArg) -> DBXTeamResendVerificationEmailArg {
    DBXTeamResendVerificationEmailArg(emailsToResend: object.emailsToResend.compactMap { mapDBTEAMUserSecondaryEmailsArgToDBX(object: $0) })
}

func mapDBTEAMResendVerificationEmailResultToDBXOptional(object: DBTEAMResendVerificationEmailResult?) -> DBXTeamResendVerificationEmailResult? {
    guard let object = object else { return nil }
    return mapDBTEAMResendVerificationEmailResultToDBX(object: object)
}

func mapDBTEAMResendVerificationEmailResultToDBX(object: DBTEAMResendVerificationEmailResult) -> DBXTeamResendVerificationEmailResult {
    DBXTeamResendVerificationEmailResult(results: object.results.compactMap { mapDBTEAMUserResendResultToDBX(object: $0) })
}

func mapDBTEAMRevokeDesktopClientArgToDBXOptional(object: DBTEAMRevokeDesktopClientArg?) -> DBXTeamRevokeDesktopClientArg? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDesktopClientArgToDBX(object: object)
}

func mapDBTEAMRevokeDesktopClientArgToDBX(object: DBTEAMRevokeDesktopClientArg) -> DBXTeamRevokeDesktopClientArg {
    DBXTeamRevokeDesktopClientArg(sessionId: object.sessionId, teamMemberId: object.teamMemberId, deleteOnUnlink: object.deleteOnUnlink)
}

func mapDBTEAMRevokeDeviceSessionArgToDBXOptional(object: DBTEAMRevokeDeviceSessionArg?) -> DBXTeamRevokeDeviceSessionArg? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionArgToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionArgToDBX(object: DBTEAMRevokeDeviceSessionArg) -> DBXTeamRevokeDeviceSessionArg {
    if object.isWebSession() {
        let webSession = mapDBTEAMDeviceSessionArgToDBX(object: object.webSession)
        return DBXTeamRevokeDeviceSessionArg.factory(swift: .webSession(webSession.swift))
    }
    if object.isDesktopClient() {
        let desktopClient = mapDBTEAMRevokeDesktopClientArgToDBX(object: object.desktopClient)
        return DBXTeamRevokeDeviceSessionArg.factory(swift: .desktopClient(desktopClient.subSwift))
    }
    if object.isMobileClient() {
        let mobileClient = mapDBTEAMDeviceSessionArgToDBX(object: object.mobileClient)
        return DBXTeamRevokeDeviceSessionArg.factory(swift: .mobileClient(mobileClient.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMRevokeDeviceSessionBatchArgToDBXOptional(object: DBTEAMRevokeDeviceSessionBatchArg?) -> DBXTeamRevokeDeviceSessionBatchArg? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionBatchArgToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionBatchArgToDBX(object: DBTEAMRevokeDeviceSessionBatchArg) -> DBXTeamRevokeDeviceSessionBatchArg {
    DBXTeamRevokeDeviceSessionBatchArg(revokeDevices: object.revokeDevices.compactMap { mapDBTEAMRevokeDeviceSessionArgToDBX(object: $0) })
}

func mapDBTEAMRevokeDeviceSessionBatchErrorToDBXOptional(object: DBTEAMRevokeDeviceSessionBatchError?) -> DBXTeamRevokeDeviceSessionBatchError? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionBatchErrorToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionBatchErrorToDBX(object: DBTEAMRevokeDeviceSessionBatchError) -> DBXTeamRevokeDeviceSessionBatchError {
    if object.isOther() {
        return DBXTeamRevokeDeviceSessionBatchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRevokeDeviceSessionBatchResultToDBXOptional(object: DBTEAMRevokeDeviceSessionBatchResult?) -> DBXTeamRevokeDeviceSessionBatchResult? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionBatchResultToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionBatchResultToDBX(object: DBTEAMRevokeDeviceSessionBatchResult) -> DBXTeamRevokeDeviceSessionBatchResult {
    DBXTeamRevokeDeviceSessionBatchResult(revokeDevicesStatus: object.revokeDevicesStatus.compactMap { mapDBTEAMRevokeDeviceSessionStatusToDBX(object: $0) })
}

func mapDBTEAMRevokeDeviceSessionErrorToDBXOptional(object: DBTEAMRevokeDeviceSessionError?) -> DBXTeamRevokeDeviceSessionError? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionErrorToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionErrorToDBX(object: DBTEAMRevokeDeviceSessionError) -> DBXTeamRevokeDeviceSessionError {
    if object.isDeviceSessionNotFound() {
        return DBXTeamRevokeDeviceSessionErrorDeviceSessionNotFound()
    }
    if object.isMemberNotFound() {
        return DBXTeamRevokeDeviceSessionErrorMemberNotFound()
    }
    if object.isOther() {
        return DBXTeamRevokeDeviceSessionErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRevokeDeviceSessionStatusToDBXOptional(object: DBTEAMRevokeDeviceSessionStatus?) -> DBXTeamRevokeDeviceSessionStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeDeviceSessionStatusToDBX(object: object)
}

func mapDBTEAMRevokeDeviceSessionStatusToDBX(object: DBTEAMRevokeDeviceSessionStatus) -> DBXTeamRevokeDeviceSessionStatus {
    DBXTeamRevokeDeviceSessionStatus(success: object.success, errorType: mapDBTEAMRevokeDeviceSessionErrorToDBXOptional(object: object.errorType))
}

func mapDBTEAMRevokeLinkedApiAppArgToDBXOptional(object: DBTEAMRevokeLinkedApiAppArg?) -> DBXTeamRevokeLinkedApiAppArg? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedApiAppArgToDBX(object: object)
}

func mapDBTEAMRevokeLinkedApiAppArgToDBX(object: DBTEAMRevokeLinkedApiAppArg) -> DBXTeamRevokeLinkedApiAppArg {
    DBXTeamRevokeLinkedApiAppArg(appId: object.appId, teamMemberId: object.teamMemberId, keepAppFolder: object.keepAppFolder)
}

func mapDBTEAMRevokeLinkedApiAppBatchArgToDBXOptional(object: DBTEAMRevokeLinkedApiAppBatchArg?) -> DBXTeamRevokeLinkedApiAppBatchArg? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedApiAppBatchArgToDBX(object: object)
}

func mapDBTEAMRevokeLinkedApiAppBatchArgToDBX(object: DBTEAMRevokeLinkedApiAppBatchArg) -> DBXTeamRevokeLinkedApiAppBatchArg {
    DBXTeamRevokeLinkedApiAppBatchArg(revokeLinkedApp: object.revokeLinkedApp.compactMap { mapDBTEAMRevokeLinkedApiAppArgToDBX(object: $0) })
}

func mapDBTEAMRevokeLinkedAppBatchErrorToDBXOptional(object: DBTEAMRevokeLinkedAppBatchError?) -> DBXTeamRevokeLinkedAppBatchError? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedAppBatchErrorToDBX(object: object)
}

func mapDBTEAMRevokeLinkedAppBatchErrorToDBX(object: DBTEAMRevokeLinkedAppBatchError) -> DBXTeamRevokeLinkedAppBatchError {
    if object.isOther() {
        return DBXTeamRevokeLinkedAppBatchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRevokeLinkedAppBatchResultToDBXOptional(object: DBTEAMRevokeLinkedAppBatchResult?) -> DBXTeamRevokeLinkedAppBatchResult? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedAppBatchResultToDBX(object: object)
}

func mapDBTEAMRevokeLinkedAppBatchResultToDBX(object: DBTEAMRevokeLinkedAppBatchResult) -> DBXTeamRevokeLinkedAppBatchResult {
    DBXTeamRevokeLinkedAppBatchResult(revokeLinkedAppStatus: object.revokeLinkedAppStatus.compactMap { mapDBTEAMRevokeLinkedAppStatusToDBX(object: $0) })
}

func mapDBTEAMRevokeLinkedAppErrorToDBXOptional(object: DBTEAMRevokeLinkedAppError?) -> DBXTeamRevokeLinkedAppError? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedAppErrorToDBX(object: object)
}

func mapDBTEAMRevokeLinkedAppErrorToDBX(object: DBTEAMRevokeLinkedAppError) -> DBXTeamRevokeLinkedAppError {
    if object.isAppNotFound() {
        return DBXTeamRevokeLinkedAppErrorAppNotFound()
    }
    if object.isMemberNotFound() {
        return DBXTeamRevokeLinkedAppErrorMemberNotFound()
    }
    if object.isAppFolderRemovalNotSupported() {
        return DBXTeamRevokeLinkedAppErrorAppFolderRemovalNotSupported()
    }
    if object.isOther() {
        return DBXTeamRevokeLinkedAppErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMRevokeLinkedAppStatusToDBXOptional(object: DBTEAMRevokeLinkedAppStatus?) -> DBXTeamRevokeLinkedAppStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMRevokeLinkedAppStatusToDBX(object: object)
}

func mapDBTEAMRevokeLinkedAppStatusToDBX(object: DBTEAMRevokeLinkedAppStatus) -> DBXTeamRevokeLinkedAppStatus {
    DBXTeamRevokeLinkedAppStatus(success: object.success, errorType: mapDBTEAMRevokeLinkedAppErrorToDBXOptional(object: object.errorType))
}

func mapDBTEAMSetCustomQuotaArgToDBXOptional(object: DBTEAMSetCustomQuotaArg?) -> DBXTeamSetCustomQuotaArg? {
    guard let object = object else { return nil }
    return mapDBTEAMSetCustomQuotaArgToDBX(object: object)
}

func mapDBTEAMSetCustomQuotaArgToDBX(object: DBTEAMSetCustomQuotaArg) -> DBXTeamSetCustomQuotaArg {
    DBXTeamSetCustomQuotaArg(usersAndQuotas: object.usersAndQuotas.compactMap { mapDBTEAMUserCustomQuotaArgToDBX(object: $0) })
}

func mapDBTEAMSetCustomQuotaErrorToDBXOptional(object: DBTEAMSetCustomQuotaError?) -> DBXTeamSetCustomQuotaError? {
    guard let object = object else { return nil }
    return mapDBTEAMSetCustomQuotaErrorToDBX(object: object)
}

func mapDBTEAMSetCustomQuotaErrorToDBX(object: DBTEAMSetCustomQuotaError) -> DBXTeamSetCustomQuotaError {
    if object.isTooManyUsers() {
        return DBXTeamSetCustomQuotaErrorTooManyUsers()
    }
    if object.isOther() {
        return DBXTeamSetCustomQuotaErrorOther()
    }
    if object.isSomeUsersAreExcluded() {
        return DBXTeamSetCustomQuotaErrorSomeUsersAreExcluded()
    }
    fatalError("codegen error")
}

func mapDBTEAMSharingAllowlistAddArgsToDBXOptional(object: DBTEAMSharingAllowlistAddArgs?) -> DBXTeamSharingAllowlistAddArgs? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistAddArgsToDBX(object: object)
}

func mapDBTEAMSharingAllowlistAddArgsToDBX(object: DBTEAMSharingAllowlistAddArgs) -> DBXTeamSharingAllowlistAddArgs {
    DBXTeamSharingAllowlistAddArgs(domains: object.domains, emails: object.emails)
}

func mapDBTEAMSharingAllowlistAddErrorToDBXOptional(object: DBTEAMSharingAllowlistAddError?) -> DBXTeamSharingAllowlistAddError? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistAddErrorToDBX(object: object)
}

func mapDBTEAMSharingAllowlistAddErrorToDBX(object: DBTEAMSharingAllowlistAddError) -> DBXTeamSharingAllowlistAddError {
    if object.isMalformedEntry() {
        let malformedEntry = object.malformedEntry
        return DBXTeamSharingAllowlistAddError.factory(swift: .malformedEntry(malformedEntry))
    }
    if object.isNoEntriesProvided() {
        return DBXTeamSharingAllowlistAddErrorNoEntriesProvided()
    }
    if object.isTooManyEntriesProvided() {
        return DBXTeamSharingAllowlistAddErrorTooManyEntriesProvided()
    }
    if object.isTeamLimitReached() {
        return DBXTeamSharingAllowlistAddErrorTeamLimitReached()
    }
    if object.isUnknownError() {
        return DBXTeamSharingAllowlistAddErrorUnknownError()
    }
    if object.isEntriesAlreadyExist() {
        let entriesAlreadyExist = object.entriesAlreadyExist
        return DBXTeamSharingAllowlistAddError.factory(swift: .entriesAlreadyExist(entriesAlreadyExist))
    }
    if object.isOther() {
        return DBXTeamSharingAllowlistAddErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMSharingAllowlistAddResponseToDBXOptional(object: DBTEAMSharingAllowlistAddResponse?) -> DBXTeamSharingAllowlistAddResponse? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistAddResponseToDBX(object: object)
}

func mapDBTEAMSharingAllowlistAddResponseToDBX(object: DBTEAMSharingAllowlistAddResponse) -> DBXTeamSharingAllowlistAddResponse {
    DBXTeamSharingAllowlistAddResponse()
}

func mapDBTEAMSharingAllowlistListArgToDBXOptional(object: DBTEAMSharingAllowlistListArg?) -> DBXTeamSharingAllowlistListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistListArgToDBX(object: object)
}

func mapDBTEAMSharingAllowlistListArgToDBX(object: DBTEAMSharingAllowlistListArg) -> DBXTeamSharingAllowlistListArg {
    DBXTeamSharingAllowlistListArg(limit: object.limit)
}

func mapDBTEAMSharingAllowlistListContinueArgToDBXOptional(object: DBTEAMSharingAllowlistListContinueArg?) -> DBXTeamSharingAllowlistListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistListContinueArgToDBX(object: object)
}

func mapDBTEAMSharingAllowlistListContinueArgToDBX(object: DBTEAMSharingAllowlistListContinueArg) -> DBXTeamSharingAllowlistListContinueArg {
    DBXTeamSharingAllowlistListContinueArg(cursor: object.cursor)
}

func mapDBTEAMSharingAllowlistListContinueErrorToDBXOptional(object: DBTEAMSharingAllowlistListContinueError?) -> DBXTeamSharingAllowlistListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistListContinueErrorToDBX(object: object)
}

func mapDBTEAMSharingAllowlistListContinueErrorToDBX(object: DBTEAMSharingAllowlistListContinueError) -> DBXTeamSharingAllowlistListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamSharingAllowlistListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamSharingAllowlistListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMSharingAllowlistListErrorToDBXOptional(object: DBTEAMSharingAllowlistListError?) -> DBXTeamSharingAllowlistListError? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistListErrorToDBX(object: object)
}

func mapDBTEAMSharingAllowlistListErrorToDBX(object: DBTEAMSharingAllowlistListError) -> DBXTeamSharingAllowlistListError {
    DBXTeamSharingAllowlistListError()
}

func mapDBTEAMSharingAllowlistListResponseToDBXOptional(object: DBTEAMSharingAllowlistListResponse?) -> DBXTeamSharingAllowlistListResponse? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistListResponseToDBX(object: object)
}

func mapDBTEAMSharingAllowlistListResponseToDBX(object: DBTEAMSharingAllowlistListResponse) -> DBXTeamSharingAllowlistListResponse {
    DBXTeamSharingAllowlistListResponse(domains: object.domains, emails: object.emails, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBTEAMSharingAllowlistRemoveArgsToDBXOptional(object: DBTEAMSharingAllowlistRemoveArgs?) -> DBXTeamSharingAllowlistRemoveArgs? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistRemoveArgsToDBX(object: object)
}

func mapDBTEAMSharingAllowlistRemoveArgsToDBX(object: DBTEAMSharingAllowlistRemoveArgs) -> DBXTeamSharingAllowlistRemoveArgs {
    DBXTeamSharingAllowlistRemoveArgs(domains: object.domains, emails: object.emails)
}

func mapDBTEAMSharingAllowlistRemoveErrorToDBXOptional(object: DBTEAMSharingAllowlistRemoveError?) -> DBXTeamSharingAllowlistRemoveError? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistRemoveErrorToDBX(object: object)
}

func mapDBTEAMSharingAllowlistRemoveErrorToDBX(object: DBTEAMSharingAllowlistRemoveError) -> DBXTeamSharingAllowlistRemoveError {
    if object.isMalformedEntry() {
        let malformedEntry = object.malformedEntry
        return DBXTeamSharingAllowlistRemoveError.factory(swift: .malformedEntry(malformedEntry))
    }
    if object.isEntriesDoNotExist() {
        let entriesDoNotExist = object.entriesDoNotExist
        return DBXTeamSharingAllowlistRemoveError.factory(swift: .entriesDoNotExist(entriesDoNotExist))
    }
    if object.isNoEntriesProvided() {
        return DBXTeamSharingAllowlistRemoveErrorNoEntriesProvided()
    }
    if object.isTooManyEntriesProvided() {
        return DBXTeamSharingAllowlistRemoveErrorTooManyEntriesProvided()
    }
    if object.isUnknownError() {
        return DBXTeamSharingAllowlistRemoveErrorUnknownError()
    }
    if object.isOther() {
        return DBXTeamSharingAllowlistRemoveErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMSharingAllowlistRemoveResponseToDBXOptional(object: DBTEAMSharingAllowlistRemoveResponse?) -> DBXTeamSharingAllowlistRemoveResponse? {
    guard let object = object else { return nil }
    return mapDBTEAMSharingAllowlistRemoveResponseToDBX(object: object)
}

func mapDBTEAMSharingAllowlistRemoveResponseToDBX(object: DBTEAMSharingAllowlistRemoveResponse) -> DBXTeamSharingAllowlistRemoveResponse {
    DBXTeamSharingAllowlistRemoveResponse()
}

func mapDBTEAMStorageBucketToDBXOptional(object: DBTEAMStorageBucket?) -> DBXTeamStorageBucket? {
    guard let object = object else { return nil }
    return mapDBTEAMStorageBucketToDBX(object: object)
}

func mapDBTEAMStorageBucketToDBX(object: DBTEAMStorageBucket) -> DBXTeamStorageBucket {
    DBXTeamStorageBucket(bucket: object.bucket, users: object.users)
}

func mapDBTEAMTeamFolderAccessErrorToDBXOptional(object: DBTEAMTeamFolderAccessError?) -> DBXTeamTeamFolderAccessError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderAccessErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderAccessErrorToDBX(object: DBTEAMTeamFolderAccessError) -> DBXTeamTeamFolderAccessError {
    if object.isInvalidTeamFolderId() {
        return DBXTeamTeamFolderAccessErrorInvalidTeamFolderId()
    }
    if object.isNoAccess() {
        return DBXTeamTeamFolderAccessErrorNoAccess()
    }
    if object.isOther() {
        return DBXTeamTeamFolderAccessErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderActivateErrorToDBXOptional(object: DBTEAMTeamFolderActivateError?) -> DBXTeamTeamFolderActivateError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderActivateErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderActivateErrorToDBX(object: DBTEAMTeamFolderActivateError) -> DBXTeamTeamFolderActivateError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamTeamFolderActivateError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamTeamFolderActivateError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamTeamFolderActivateError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderActivateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderIdArgToDBXOptional(object: DBTEAMTeamFolderIdArg?) -> DBXTeamTeamFolderIdArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderIdArgToDBX(object: object)
}

func mapDBTEAMTeamFolderIdArgToDBX(object: DBTEAMTeamFolderIdArg) -> DBXTeamTeamFolderIdArg {
    DBXTeamTeamFolderIdArg(teamFolderId: object.teamFolderId)
}

func mapDBTEAMTeamFolderArchiveArgToDBXOptional(object: DBTEAMTeamFolderArchiveArg?) -> DBXTeamTeamFolderArchiveArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderArchiveArgToDBX(object: object)
}

func mapDBTEAMTeamFolderArchiveArgToDBX(object: DBTEAMTeamFolderArchiveArg) -> DBXTeamTeamFolderArchiveArg {
    DBXTeamTeamFolderArchiveArg(teamFolderId: object.teamFolderId, forceAsyncOff: object.forceAsyncOff)
}

func mapDBTEAMTeamFolderArchiveErrorToDBXOptional(object: DBTEAMTeamFolderArchiveError?) -> DBXTeamTeamFolderArchiveError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderArchiveErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderArchiveErrorToDBX(object: DBTEAMTeamFolderArchiveError) -> DBXTeamTeamFolderArchiveError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamTeamFolderArchiveError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamTeamFolderArchiveError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamTeamFolderArchiveError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderArchiveErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderArchiveJobStatusToDBXOptional(object: DBTEAMTeamFolderArchiveJobStatus?) -> DBXTeamTeamFolderArchiveJobStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderArchiveJobStatusToDBX(object: object)
}

func mapDBTEAMTeamFolderArchiveJobStatusToDBX(object: DBTEAMTeamFolderArchiveJobStatus) -> DBXTeamTeamFolderArchiveJobStatus {
    if object.isInProgress() {
        return DBXTeamTeamFolderArchiveJobStatusInProgress()
    }
    if object.isComplete() {
        let complete = mapDBTEAMTeamFolderMetadataToDBX(object: object.complete)
        return DBXTeamTeamFolderArchiveJobStatus.factory(swift: .complete(complete.swift))
    }
    if object.isFailed() {
        let failed = mapDBTEAMTeamFolderArchiveErrorToDBX(object: object.failed)
        return DBXTeamTeamFolderArchiveJobStatus.factory(swift: .failed(failed.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderArchiveLaunchToDBXOptional(object: DBTEAMTeamFolderArchiveLaunch?) -> DBXTeamTeamFolderArchiveLaunch? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderArchiveLaunchToDBX(object: object)
}

func mapDBTEAMTeamFolderArchiveLaunchToDBX(object: DBTEAMTeamFolderArchiveLaunch) -> DBXTeamTeamFolderArchiveLaunch {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXTeamTeamFolderArchiveLaunch.factory(swift: .asyncJobId(asyncJobId))
    }
    if object.isComplete() {
        let complete = mapDBTEAMTeamFolderMetadataToDBX(object: object.complete)
        return DBXTeamTeamFolderArchiveLaunch.factory(swift: .complete(complete.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderCreateArgToDBXOptional(object: DBTEAMTeamFolderCreateArg?) -> DBXTeamTeamFolderCreateArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderCreateArgToDBX(object: object)
}

func mapDBTEAMTeamFolderCreateArgToDBX(object: DBTEAMTeamFolderCreateArg) -> DBXTeamTeamFolderCreateArg {
    DBXTeamTeamFolderCreateArg(name: object.name, syncSetting: mapDBFILESSyncSettingArgToDBXOptional(object: object.syncSetting))
}

func mapDBTEAMTeamFolderCreateErrorToDBXOptional(object: DBTEAMTeamFolderCreateError?) -> DBXTeamTeamFolderCreateError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderCreateErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderCreateErrorToDBX(object: DBTEAMTeamFolderCreateError) -> DBXTeamTeamFolderCreateError {
    if object.isInvalidFolderName() {
        return DBXTeamTeamFolderCreateErrorInvalidFolderName()
    }
    if object.isFolderNameAlreadyUsed() {
        return DBXTeamTeamFolderCreateErrorFolderNameAlreadyUsed()
    }
    if object.isFolderNameReserved() {
        return DBXTeamTeamFolderCreateErrorFolderNameReserved()
    }
    if object.isSyncSettingsError() {
        let syncSettingsError = mapDBFILESSyncSettingsErrorToDBX(object: object.syncSettingsError)
        return DBXTeamTeamFolderCreateError.factory(swift: .syncSettingsError(syncSettingsError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderCreateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderGetInfoItemToDBXOptional(object: DBTEAMTeamFolderGetInfoItem?) -> DBXTeamTeamFolderGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderGetInfoItemToDBX(object: object)
}

func mapDBTEAMTeamFolderGetInfoItemToDBX(object: DBTEAMTeamFolderGetInfoItem) -> DBXTeamTeamFolderGetInfoItem {
    if object.isIdNotFound() {
        let idNotFound = object.idNotFound
        return DBXTeamTeamFolderGetInfoItem.factory(swift: .idNotFound(idNotFound))
    }
    if object.isTeamFolderMetadata() {
        let teamFolderMetadata = mapDBTEAMTeamFolderMetadataToDBX(object: object.teamFolderMetadata)
        return DBXTeamTeamFolderGetInfoItem.factory(swift: .teamFolderMetadata(teamFolderMetadata.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderIdListArgToDBXOptional(object: DBTEAMTeamFolderIdListArg?) -> DBXTeamTeamFolderIdListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderIdListArgToDBX(object: object)
}

func mapDBTEAMTeamFolderIdListArgToDBX(object: DBTEAMTeamFolderIdListArg) -> DBXTeamTeamFolderIdListArg {
    DBXTeamTeamFolderIdListArg(teamFolderIds: object.teamFolderIds)
}

func mapDBTEAMTeamFolderInvalidStatusErrorToDBXOptional(object: DBTEAMTeamFolderInvalidStatusError?) -> DBXTeamTeamFolderInvalidStatusError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: DBTEAMTeamFolderInvalidStatusError) -> DBXTeamTeamFolderInvalidStatusError {
    if object.isActive() {
        return DBXTeamTeamFolderInvalidStatusErrorActive()
    }
    if object.isArchived() {
        return DBXTeamTeamFolderInvalidStatusErrorArchived()
    }
    if object.isArchiveInProgress() {
        return DBXTeamTeamFolderInvalidStatusErrorArchiveInProgress()
    }
    if object.isOther() {
        return DBXTeamTeamFolderInvalidStatusErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderListArgToDBXOptional(object: DBTEAMTeamFolderListArg?) -> DBXTeamTeamFolderListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderListArgToDBX(object: object)
}

func mapDBTEAMTeamFolderListArgToDBX(object: DBTEAMTeamFolderListArg) -> DBXTeamTeamFolderListArg {
    DBXTeamTeamFolderListArg(limit: object.limit)
}

func mapDBTEAMTeamFolderListContinueArgToDBXOptional(object: DBTEAMTeamFolderListContinueArg?) -> DBXTeamTeamFolderListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderListContinueArgToDBX(object: object)
}

func mapDBTEAMTeamFolderListContinueArgToDBX(object: DBTEAMTeamFolderListContinueArg) -> DBXTeamTeamFolderListContinueArg {
    DBXTeamTeamFolderListContinueArg(cursor: object.cursor)
}

func mapDBTEAMTeamFolderListContinueErrorToDBXOptional(object: DBTEAMTeamFolderListContinueError?) -> DBXTeamTeamFolderListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderListContinueErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderListContinueErrorToDBX(object: DBTEAMTeamFolderListContinueError) -> DBXTeamTeamFolderListContinueError {
    if object.isInvalidCursor() {
        return DBXTeamTeamFolderListContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXTeamTeamFolderListContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderListErrorToDBXOptional(object: DBTEAMTeamFolderListError?) -> DBXTeamTeamFolderListError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderListErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderListErrorToDBX(object: DBTEAMTeamFolderListError) -> DBXTeamTeamFolderListError {
    DBXTeamTeamFolderListError(accessError: mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError))
}

func mapDBTEAMTeamFolderListResultToDBXOptional(object: DBTEAMTeamFolderListResult?) -> DBXTeamTeamFolderListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderListResultToDBX(object: object)
}

func mapDBTEAMTeamFolderListResultToDBX(object: DBTEAMTeamFolderListResult) -> DBXTeamTeamFolderListResult {
    DBXTeamTeamFolderListResult(
        teamFolders: object.teamFolders.compactMap { mapDBTEAMTeamFolderMetadataToDBX(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBTEAMTeamFolderMetadataToDBXOptional(object: DBTEAMTeamFolderMetadata?) -> DBXTeamTeamFolderMetadata? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderMetadataToDBX(object: object)
}

func mapDBTEAMTeamFolderMetadataToDBX(object: DBTEAMTeamFolderMetadata) -> DBXTeamTeamFolderMetadata {
    DBXTeamTeamFolderMetadata(
        teamFolderId: object.teamFolderId,
        name: object.name,
        status: mapDBTEAMTeamFolderStatusToDBX(object: object.status),
        isTeamSharedDropbox: object.isTeamSharedDropbox,
        syncSetting: mapDBFILESSyncSettingToDBX(object: object.syncSetting),
        contentSyncSettings: object.contentSyncSettings.compactMap { mapDBFILESContentSyncSettingToDBX(object: $0) }
    )
}

func mapDBTEAMTeamFolderPermanentlyDeleteErrorToDBXOptional(object: DBTEAMTeamFolderPermanentlyDeleteError?) -> DBXTeamTeamFolderPermanentlyDeleteError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderPermanentlyDeleteErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderPermanentlyDeleteErrorToDBX(object: DBTEAMTeamFolderPermanentlyDeleteError) -> DBXTeamTeamFolderPermanentlyDeleteError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamTeamFolderPermanentlyDeleteError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamTeamFolderPermanentlyDeleteError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamTeamFolderPermanentlyDeleteError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderPermanentlyDeleteErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderRenameArgToDBXOptional(object: DBTEAMTeamFolderRenameArg?) -> DBXTeamTeamFolderRenameArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderRenameArgToDBX(object: object)
}

func mapDBTEAMTeamFolderRenameArgToDBX(object: DBTEAMTeamFolderRenameArg) -> DBXTeamTeamFolderRenameArg {
    DBXTeamTeamFolderRenameArg(teamFolderId: object.teamFolderId, name: object.name)
}

func mapDBTEAMTeamFolderRenameErrorToDBXOptional(object: DBTEAMTeamFolderRenameError?) -> DBXTeamTeamFolderRenameError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderRenameErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderRenameErrorToDBX(object: DBTEAMTeamFolderRenameError) -> DBXTeamTeamFolderRenameError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamTeamFolderRenameError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamTeamFolderRenameError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamTeamFolderRenameError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderRenameErrorOther()
    }
    if object.isInvalidFolderName() {
        return DBXTeamTeamFolderRenameErrorInvalidFolderName()
    }
    if object.isFolderNameAlreadyUsed() {
        return DBXTeamTeamFolderRenameErrorFolderNameAlreadyUsed()
    }
    if object.isFolderNameReserved() {
        return DBXTeamTeamFolderRenameErrorFolderNameReserved()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderStatusToDBXOptional(object: DBTEAMTeamFolderStatus?) -> DBXTeamTeamFolderStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderStatusToDBX(object: object)
}

func mapDBTEAMTeamFolderStatusToDBX(object: DBTEAMTeamFolderStatus) -> DBXTeamTeamFolderStatus {
    if object.isActive() {
        return DBXTeamTeamFolderStatusActive()
    }
    if object.isArchived() {
        return DBXTeamTeamFolderStatusArchived()
    }
    if object.isArchiveInProgress() {
        return DBXTeamTeamFolderStatusArchiveInProgress()
    }
    if object.isOther() {
        return DBXTeamTeamFolderStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBXOptional(object: DBTEAMTeamFolderTeamSharedDropboxError?) -> DBXTeamTeamFolderTeamSharedDropboxError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: DBTEAMTeamFolderTeamSharedDropboxError) -> DBXTeamTeamFolderTeamSharedDropboxError {
    if object.isDisallowed() {
        return DBXTeamTeamFolderTeamSharedDropboxErrorDisallowed()
    }
    if object.isOther() {
        return DBXTeamTeamFolderTeamSharedDropboxErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamFolderUpdateSyncSettingsArgToDBXOptional(object: DBTEAMTeamFolderUpdateSyncSettingsArg?) -> DBXTeamTeamFolderUpdateSyncSettingsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderUpdateSyncSettingsArgToDBX(object: object)
}

func mapDBTEAMTeamFolderUpdateSyncSettingsArgToDBX(object: DBTEAMTeamFolderUpdateSyncSettingsArg) -> DBXTeamTeamFolderUpdateSyncSettingsArg {
    DBXTeamTeamFolderUpdateSyncSettingsArg(
        teamFolderId: object.teamFolderId,
        syncSetting: mapDBFILESSyncSettingArgToDBXOptional(object: object.syncSetting),
        contentSyncSettings: object.contentSyncSettings?.compactMap { mapDBFILESContentSyncSettingArgToDBX(object: $0) }
    )
}

func mapDBTEAMTeamFolderUpdateSyncSettingsErrorToDBXOptional(object: DBTEAMTeamFolderUpdateSyncSettingsError?) -> DBXTeamTeamFolderUpdateSyncSettingsError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamFolderUpdateSyncSettingsErrorToDBX(object: object)
}

func mapDBTEAMTeamFolderUpdateSyncSettingsErrorToDBX(object: DBTEAMTeamFolderUpdateSyncSettingsError) -> DBXTeamTeamFolderUpdateSyncSettingsError {
    if object.isAccessError() {
        let accessError = mapDBTEAMTeamFolderAccessErrorToDBX(object: object.accessError)
        return DBXTeamTeamFolderUpdateSyncSettingsError.factory(swift: .accessError(accessError.swift))
    }
    if object.isStatusError() {
        let statusError = mapDBTEAMTeamFolderInvalidStatusErrorToDBX(object: object.statusError)
        return DBXTeamTeamFolderUpdateSyncSettingsError.factory(swift: .statusError(statusError.swift))
    }
    if object.isTeamSharedDropboxError() {
        let teamSharedDropboxError = mapDBTEAMTeamFolderTeamSharedDropboxErrorToDBX(object: object.teamSharedDropboxError)
        return DBXTeamTeamFolderUpdateSyncSettingsError.factory(swift: .teamSharedDropboxError(teamSharedDropboxError.swift))
    }
    if object.isOther() {
        return DBXTeamTeamFolderUpdateSyncSettingsErrorOther()
    }
    if object.isSyncSettingsError() {
        let syncSettingsError = mapDBFILESSyncSettingsErrorToDBX(object: object.syncSettingsError)
        return DBXTeamTeamFolderUpdateSyncSettingsError.factory(swift: .syncSettingsError(syncSettingsError.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamGetInfoResultToDBXOptional(object: DBTEAMTeamGetInfoResult?) -> DBXTeamTeamGetInfoResult? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamGetInfoResultToDBX(object: object)
}

func mapDBTEAMTeamGetInfoResultToDBX(object: DBTEAMTeamGetInfoResult) -> DBXTeamTeamGetInfoResult {
    DBXTeamTeamGetInfoResult(
        name: object.name,
        teamId: object.teamId,
        numLicensedUsers: object.numLicensedUsers,
        numProvisionedUsers: object.numProvisionedUsers,
        policies: mapDBTEAMPOLICIESTeamMemberPoliciesToDBX(object: object.policies),
        numUsedLicenses: object.numUsedLicenses
    )
}

func mapDBTEAMTeamMemberInfoToDBXOptional(object: DBTEAMTeamMemberInfo?) -> DBXTeamTeamMemberInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberInfoToDBX(object: object)
}

func mapDBTEAMTeamMemberInfoToDBX(object: DBTEAMTeamMemberInfo) -> DBXTeamTeamMemberInfo {
    DBXTeamTeamMemberInfo(profile: mapDBTEAMTeamMemberProfileToDBX(object: object.profile), role: mapDBTEAMAdminTierToDBX(object: object.role))
}

func mapDBTEAMTeamMemberInfoV2ToDBXOptional(object: DBTEAMTeamMemberInfoV2?) -> DBXTeamTeamMemberInfoV2? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberInfoV2ToDBX(object: object)
}

func mapDBTEAMTeamMemberInfoV2ToDBX(object: DBTEAMTeamMemberInfoV2) -> DBXTeamTeamMemberInfoV2 {
    DBXTeamTeamMemberInfoV2(
        profile: mapDBTEAMTeamMemberProfileToDBX(object: object.profile),
        roles: object.roles?.compactMap { mapDBTEAMTeamMemberRoleToDBX(object: $0) }
    )
}

func mapDBTEAMTeamMemberInfoV2ResultToDBXOptional(object: DBTEAMTeamMemberInfoV2Result?) -> DBXTeamTeamMemberInfoV2Result? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberInfoV2ResultToDBX(object: object)
}

func mapDBTEAMTeamMemberInfoV2ResultToDBX(object: DBTEAMTeamMemberInfoV2Result) -> DBXTeamTeamMemberInfoV2Result {
    DBXTeamTeamMemberInfoV2Result(memberInfo: mapDBTEAMTeamMemberInfoV2ToDBX(object: object.memberInfo))
}

func mapDBTEAMTeamMemberProfileToDBXOptional(object: DBTEAMTeamMemberProfile?) -> DBXTeamTeamMemberProfile? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberProfileToDBX(object: object)
}

func mapDBTEAMTeamMemberProfileToDBX(object: DBTEAMTeamMemberProfile) -> DBXTeamTeamMemberProfile {
    DBXTeamTeamMemberProfile(
        teamMemberId: object.teamMemberId,
        email: object.email,
        emailVerified: object.emailVerified,
        status: mapDBTEAMTeamMemberStatusToDBX(object: object.status),
        name: mapDBUSERSNameToDBX(object: object.name),
        membershipType: mapDBTEAMTeamMembershipTypeToDBX(object: object.membershipType),
        groups: object.groups,
        memberFolderId: object.memberFolderId,
        externalId: object.externalId,
        accountId: object.accountId,
        secondaryEmails: object.secondaryEmails?.compactMap { mapDBSECONDARYEMAILSSecondaryEmailToDBX(object: $0) },
        invitedOn: object.invitedOn,
        joinedOn: object.joinedOn,
        suspendedOn: object.suspendedOn,
        persistentId: object.persistentId,
        isDirectoryRestricted: object.isDirectoryRestricted,
        profilePhotoUrl: object.profilePhotoUrl
    )
}

func mapDBTEAMTeamMemberRoleToDBXOptional(object: DBTEAMTeamMemberRole?) -> DBXTeamTeamMemberRole? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberRoleToDBX(object: object)
}

func mapDBTEAMTeamMemberRoleToDBX(object: DBTEAMTeamMemberRole) -> DBXTeamTeamMemberRole {
    DBXTeamTeamMemberRole(roleId: object.roleId, name: object.name, description_: object.description_)
}

func mapDBTEAMTeamMemberStatusToDBXOptional(object: DBTEAMTeamMemberStatus?) -> DBXTeamTeamMemberStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMemberStatusToDBX(object: object)
}

func mapDBTEAMTeamMemberStatusToDBX(object: DBTEAMTeamMemberStatus) -> DBXTeamTeamMemberStatus {
    if object.isActive() {
        return DBXTeamTeamMemberStatusActive()
    }
    if object.isInvited() {
        return DBXTeamTeamMemberStatusInvited()
    }
    if object.isSuspended() {
        return DBXTeamTeamMemberStatusSuspended()
    }
    if object.isRemoved() {
        let removed = mapDBTEAMRemovedStatusToDBX(object: object.removed)
        return DBXTeamTeamMemberStatus.factory(swift: .removed(removed.swift))
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamMembershipTypeToDBXOptional(object: DBTEAMTeamMembershipType?) -> DBXTeamTeamMembershipType? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamMembershipTypeToDBX(object: object)
}

func mapDBTEAMTeamMembershipTypeToDBX(object: DBTEAMTeamMembershipType) -> DBXTeamTeamMembershipType {
    if object.isFull() {
        return DBXTeamTeamMembershipTypeFull()
    }
    if object.isLimited() {
        return DBXTeamTeamMembershipTypeLimited()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamNamespacesListArgToDBXOptional(object: DBTEAMTeamNamespacesListArg?) -> DBXTeamTeamNamespacesListArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamNamespacesListArgToDBX(object: object)
}

func mapDBTEAMTeamNamespacesListArgToDBX(object: DBTEAMTeamNamespacesListArg) -> DBXTeamTeamNamespacesListArg {
    DBXTeamTeamNamespacesListArg(limit: object.limit)
}

func mapDBTEAMTeamNamespacesListContinueArgToDBXOptional(object: DBTEAMTeamNamespacesListContinueArg?) -> DBXTeamTeamNamespacesListContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamNamespacesListContinueArgToDBX(object: object)
}

func mapDBTEAMTeamNamespacesListContinueArgToDBX(object: DBTEAMTeamNamespacesListContinueArg) -> DBXTeamTeamNamespacesListContinueArg {
    DBXTeamTeamNamespacesListContinueArg(cursor: object.cursor)
}

func mapDBTEAMTeamNamespacesListErrorToDBXOptional(object: DBTEAMTeamNamespacesListError?) -> DBXTeamTeamNamespacesListError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamNamespacesListErrorToDBX(object: object)
}

func mapDBTEAMTeamNamespacesListErrorToDBX(object: DBTEAMTeamNamespacesListError) -> DBXTeamTeamNamespacesListError {
    if object.isInvalidArg() {
        return DBXTeamTeamNamespacesListErrorInvalidArg()
    }
    if object.isOther() {
        return DBXTeamTeamNamespacesListErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamNamespacesListContinueErrorToDBXOptional(object: DBTEAMTeamNamespacesListContinueError?) -> DBXTeamTeamNamespacesListContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamNamespacesListContinueErrorToDBX(object: object)
}

func mapDBTEAMTeamNamespacesListContinueErrorToDBX(object: DBTEAMTeamNamespacesListContinueError) -> DBXTeamTeamNamespacesListContinueError {
    if object.isInvalidArg() {
        return DBXTeamTeamNamespacesListContinueErrorInvalidArg()
    }
    if object.isOther() {
        return DBXTeamTeamNamespacesListContinueErrorOther()
    }
    if object.isInvalidCursor() {
        return DBXTeamTeamNamespacesListContinueErrorInvalidCursor()
    }
    fatalError("codegen error")
}

func mapDBTEAMTeamNamespacesListResultToDBXOptional(object: DBTEAMTeamNamespacesListResult?) -> DBXTeamTeamNamespacesListResult? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamNamespacesListResultToDBX(object: object)
}

func mapDBTEAMTeamNamespacesListResultToDBX(object: DBTEAMTeamNamespacesListResult) -> DBXTeamTeamNamespacesListResult {
    DBXTeamTeamNamespacesListResult(
        namespaces: object.namespaces.compactMap { mapDBTEAMNamespaceMetadataToDBX(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBTEAMTeamReportFailureReasonToDBXOptional(object: DBTEAMTeamReportFailureReason?) -> DBXTeamTeamReportFailureReason? {
    guard let object = object else { return nil }
    return mapDBTEAMTeamReportFailureReasonToDBX(object: object)
}

func mapDBTEAMTeamReportFailureReasonToDBX(object: DBTEAMTeamReportFailureReason) -> DBXTeamTeamReportFailureReason {
    if object.isTemporaryError() {
        return DBXTeamTeamReportFailureReasonTemporaryError()
    }
    if object.isManyReportsAtOnce() {
        return DBXTeamTeamReportFailureReasonManyReportsAtOnce()
    }
    if object.isTooMuchData() {
        return DBXTeamTeamReportFailureReasonTooMuchData()
    }
    if object.isOther() {
        return DBXTeamTeamReportFailureReasonOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTokenGetAuthenticatedAdminErrorToDBXOptional(object: DBTEAMTokenGetAuthenticatedAdminError?) -> DBXTeamTokenGetAuthenticatedAdminError? {
    guard let object = object else { return nil }
    return mapDBTEAMTokenGetAuthenticatedAdminErrorToDBX(object: object)
}

func mapDBTEAMTokenGetAuthenticatedAdminErrorToDBX(object: DBTEAMTokenGetAuthenticatedAdminError) -> DBXTeamTokenGetAuthenticatedAdminError {
    if object.isMappingNotFound() {
        return DBXTeamTokenGetAuthenticatedAdminErrorMappingNotFound()
    }
    if object.isAdminNotActive() {
        return DBXTeamTokenGetAuthenticatedAdminErrorAdminNotActive()
    }
    if object.isOther() {
        return DBXTeamTokenGetAuthenticatedAdminErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMTokenGetAuthenticatedAdminResultToDBXOptional(object: DBTEAMTokenGetAuthenticatedAdminResult?) -> DBXTeamTokenGetAuthenticatedAdminResult? {
    guard let object = object else { return nil }
    return mapDBTEAMTokenGetAuthenticatedAdminResultToDBX(object: object)
}

func mapDBTEAMTokenGetAuthenticatedAdminResultToDBX(object: DBTEAMTokenGetAuthenticatedAdminResult) -> DBXTeamTokenGetAuthenticatedAdminResult {
    DBXTeamTokenGetAuthenticatedAdminResult(adminProfile: mapDBTEAMTeamMemberProfileToDBX(object: object.adminProfile))
}

func mapDBTEAMUploadApiRateLimitValueToDBXOptional(object: DBTEAMUploadApiRateLimitValue?) -> DBXTeamUploadApiRateLimitValue? {
    guard let object = object else { return nil }
    return mapDBTEAMUploadApiRateLimitValueToDBX(object: object)
}

func mapDBTEAMUploadApiRateLimitValueToDBX(object: DBTEAMUploadApiRateLimitValue) -> DBXTeamUploadApiRateLimitValue {
    if object.isUnlimited() {
        return DBXTeamUploadApiRateLimitValueUnlimited()
    }
    if object.isLimit() {
        let limit = object.limit
        return DBXTeamUploadApiRateLimitValue.factory(swift: .limit(limit.uint32Value))
    }
    if object.isOther() {
        return DBXTeamUploadApiRateLimitValueOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMUserAddResultToDBXOptional(object: DBTEAMUserAddResult?) -> DBXTeamUserAddResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserAddResultToDBX(object: object)
}

func mapDBTEAMUserAddResultToDBX(object: DBTEAMUserAddResult) -> DBXTeamUserAddResult {
    if object.isSuccess() {
        let success = mapDBTEAMUserSecondaryEmailsResultToDBX(object: object.success)
        return DBXTeamUserAddResult.factory(swift: .success(success.swift))
    }
    if object.isInvalidUser() {
        let invalidUser = mapDBTEAMUserSelectorArgToDBX(object: object.invalidUser)
        return DBXTeamUserAddResult.factory(swift: .invalidUser(invalidUser.swift))
    }
    if object.isUnverified() {
        let unverified = mapDBTEAMUserSelectorArgToDBX(object: object.unverified)
        return DBXTeamUserAddResult.factory(swift: .unverified(unverified.swift))
    }
    if object.isPlaceholderUser() {
        let placeholderUser = mapDBTEAMUserSelectorArgToDBX(object: object.placeholderUser)
        return DBXTeamUserAddResult.factory(swift: .placeholderUser(placeholderUser.swift))
    }
    if object.isOther() {
        return DBXTeamUserAddResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMUserCustomQuotaArgToDBXOptional(object: DBTEAMUserCustomQuotaArg?) -> DBXTeamUserCustomQuotaArg? {
    guard let object = object else { return nil }
    return mapDBTEAMUserCustomQuotaArgToDBX(object: object)
}

func mapDBTEAMUserCustomQuotaArgToDBX(object: DBTEAMUserCustomQuotaArg) -> DBXTeamUserCustomQuotaArg {
    DBXTeamUserCustomQuotaArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), quotaGb: object.quotaGb)
}

func mapDBTEAMUserCustomQuotaResultToDBXOptional(object: DBTEAMUserCustomQuotaResult?) -> DBXTeamUserCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserCustomQuotaResultToDBX(object: object)
}

func mapDBTEAMUserCustomQuotaResultToDBX(object: DBTEAMUserCustomQuotaResult) -> DBXTeamUserCustomQuotaResult {
    DBXTeamUserCustomQuotaResult(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), quotaGb: object.quotaGb)
}

func mapDBTEAMUserDeleteEmailsResultToDBXOptional(object: DBTEAMUserDeleteEmailsResult?) -> DBXTeamUserDeleteEmailsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserDeleteEmailsResultToDBX(object: object)
}

func mapDBTEAMUserDeleteEmailsResultToDBX(object: DBTEAMUserDeleteEmailsResult) -> DBXTeamUserDeleteEmailsResult {
    DBXTeamUserDeleteEmailsResult(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        results: object.results.compactMap { mapDBTEAMDeleteSecondaryEmailResultToDBX(object: $0) }
    )
}

func mapDBTEAMUserDeleteResultToDBXOptional(object: DBTEAMUserDeleteResult?) -> DBXTeamUserDeleteResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserDeleteResultToDBX(object: object)
}

func mapDBTEAMUserDeleteResultToDBX(object: DBTEAMUserDeleteResult) -> DBXTeamUserDeleteResult {
    if object.isSuccess() {
        let success = mapDBTEAMUserDeleteEmailsResultToDBX(object: object.success)
        return DBXTeamUserDeleteResult.factory(swift: .success(success.swift))
    }
    if object.isInvalidUser() {
        let invalidUser = mapDBTEAMUserSelectorArgToDBX(object: object.invalidUser)
        return DBXTeamUserDeleteResult.factory(swift: .invalidUser(invalidUser.swift))
    }
    if object.isOther() {
        return DBXTeamUserDeleteResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMUserResendEmailsResultToDBXOptional(object: DBTEAMUserResendEmailsResult?) -> DBXTeamUserResendEmailsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserResendEmailsResultToDBX(object: object)
}

func mapDBTEAMUserResendEmailsResultToDBX(object: DBTEAMUserResendEmailsResult) -> DBXTeamUserResendEmailsResult {
    DBXTeamUserResendEmailsResult(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        results: object.results.compactMap { mapDBTEAMResendSecondaryEmailResultToDBX(object: $0) }
    )
}

func mapDBTEAMUserResendResultToDBXOptional(object: DBTEAMUserResendResult?) -> DBXTeamUserResendResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserResendResultToDBX(object: object)
}

func mapDBTEAMUserResendResultToDBX(object: DBTEAMUserResendResult) -> DBXTeamUserResendResult {
    if object.isSuccess() {
        let success = mapDBTEAMUserResendEmailsResultToDBX(object: object.success)
        return DBXTeamUserResendResult.factory(swift: .success(success.swift))
    }
    if object.isInvalidUser() {
        let invalidUser = mapDBTEAMUserSelectorArgToDBX(object: object.invalidUser)
        return DBXTeamUserResendResult.factory(swift: .invalidUser(invalidUser.swift))
    }
    if object.isOther() {
        return DBXTeamUserResendResultOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMUserSecondaryEmailsArgToDBXOptional(object: DBTEAMUserSecondaryEmailsArg?) -> DBXTeamUserSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMUserSecondaryEmailsArgToDBX(object: object)
}

func mapDBTEAMUserSecondaryEmailsArgToDBX(object: DBTEAMUserSecondaryEmailsArg) -> DBXTeamUserSecondaryEmailsArg {
    DBXTeamUserSecondaryEmailsArg(user: mapDBTEAMUserSelectorArgToDBX(object: object.user), secondaryEmails: object.secondaryEmails)
}

func mapDBTEAMUserSecondaryEmailsResultToDBXOptional(object: DBTEAMUserSecondaryEmailsResult?) -> DBXTeamUserSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMUserSecondaryEmailsResultToDBX(object: object)
}

func mapDBTEAMUserSecondaryEmailsResultToDBX(object: DBTEAMUserSecondaryEmailsResult) -> DBXTeamUserSecondaryEmailsResult {
    DBXTeamUserSecondaryEmailsResult(
        user: mapDBTEAMUserSelectorArgToDBX(object: object.user),
        results: object.results.compactMap { mapDBTEAMAddSecondaryEmailResultToDBX(object: $0) }
    )
}

func mapDBTEAMUserSelectorArgToDBXOptional(object: DBTEAMUserSelectorArg?) -> DBXTeamUserSelectorArg? {
    guard let object = object else { return nil }
    return mapDBTEAMUserSelectorArgToDBX(object: object)
}

func mapDBTEAMUserSelectorArgToDBX(object: DBTEAMUserSelectorArg) -> DBXTeamUserSelectorArg {
    if object.isTeamMemberId() {
        let teamMemberId = object.teamMemberId
        return DBXTeamUserSelectorArg.factory(swift: .teamMemberId(teamMemberId))
    }
    if object.isExternalId() {
        let externalId = object.externalId
        return DBXTeamUserSelectorArg.factory(swift: .externalId(externalId))
    }
    if object.isEmail() {
        let email = object.email
        return DBXTeamUserSelectorArg.factory(swift: .email(email))
    }
    fatalError("codegen error")
}

func mapDBTEAMUsersSelectorArgToDBXOptional(object: DBTEAMUsersSelectorArg?) -> DBXTeamUsersSelectorArg? {
    guard let object = object else { return nil }
    return mapDBTEAMUsersSelectorArgToDBX(object: object)
}

func mapDBTEAMUsersSelectorArgToDBX(object: DBTEAMUsersSelectorArg) -> DBXTeamUsersSelectorArg {
    if object.isTeamMemberIds() {
        let teamMemberIds = object.teamMemberIds
        return DBXTeamUsersSelectorArg.factory(swift: .teamMemberIds(teamMemberIds))
    }
    if object.isExternalIds() {
        let externalIds = object.externalIds
        return DBXTeamUsersSelectorArg.factory(swift: .externalIds(externalIds))
    }
    if object.isEmails() {
        let emails = object.emails
        return DBXTeamUsersSelectorArg.factory(swift: .emails(emails))
    }
    fatalError("codegen error")
}
