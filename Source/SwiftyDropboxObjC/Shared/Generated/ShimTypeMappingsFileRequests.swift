///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXFileRequestsGeneralFileRequestsErrorToDBOptional(object: DBXFileRequestsGeneralFileRequestsError?) -> DBFILEREQUESTSGeneralFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsGeneralFileRequestsErrorToDB(object: object)
}

func mapDBXFileRequestsGeneralFileRequestsErrorToDB(object: DBXFileRequestsGeneralFileRequestsError) -> DBFILEREQUESTSGeneralFileRequestsError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSGeneralFileRequestsError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSGeneralFileRequestsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsCountFileRequestsErrorToDBOptional(object: DBXFileRequestsCountFileRequestsError?) -> DBFILEREQUESTSCountFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsCountFileRequestsErrorToDB(object: object)
}

func mapDBXFileRequestsCountFileRequestsErrorToDB(object: DBXFileRequestsCountFileRequestsError) -> DBFILEREQUESTSCountFileRequestsError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSCountFileRequestsError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSCountFileRequestsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsCountFileRequestsResultToDBOptional(object: DBXFileRequestsCountFileRequestsResult?) -> DBFILEREQUESTSCountFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsCountFileRequestsResultToDB(object: object)
}

func mapDBXFileRequestsCountFileRequestsResultToDB(object: DBXFileRequestsCountFileRequestsResult) -> DBFILEREQUESTSCountFileRequestsResult {
    DBFILEREQUESTSCountFileRequestsResult(fileRequestCount: object.fileRequestCount)
}

func mapDBXFileRequestsCreateFileRequestArgsToDBOptional(object: DBXFileRequestsCreateFileRequestArgs?) -> DBFILEREQUESTSCreateFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsCreateFileRequestArgsToDB(object: object)
}

func mapDBXFileRequestsCreateFileRequestArgsToDB(object: DBXFileRequestsCreateFileRequestArgs) -> DBFILEREQUESTSCreateFileRequestArgs {
    DBFILEREQUESTSCreateFileRequestArgs(
        title: object.title,
        destination: object.destination,
        deadline: mapDBXFileRequestsFileRequestDeadlineToDBOptional(object: object.deadline),
        open: object.open,
        description_: object.description_
    )
}

func mapDBXFileRequestsFileRequestErrorToDBOptional(object: DBXFileRequestsFileRequestError?) -> DBFILEREQUESTSFileRequestError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsFileRequestErrorToDB(object: object)
}

func mapDBXFileRequestsFileRequestErrorToDB(object: DBXFileRequestsFileRequestError) -> DBFILEREQUESTSFileRequestError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSFileRequestError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSFileRequestError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSFileRequestError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSFileRequestError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSFileRequestError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSFileRequestError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSFileRequestError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSFileRequestError(validationError: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsCreateFileRequestErrorToDBOptional(object: DBXFileRequestsCreateFileRequestError?) -> DBFILEREQUESTSCreateFileRequestError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsCreateFileRequestErrorToDB(object: object)
}

func mapDBXFileRequestsCreateFileRequestErrorToDB(object: DBXFileRequestsCreateFileRequestError) -> DBFILEREQUESTSCreateFileRequestError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSCreateFileRequestError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSCreateFileRequestError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSCreateFileRequestError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSCreateFileRequestError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSCreateFileRequestError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSCreateFileRequestError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSCreateFileRequestError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSCreateFileRequestError(validationError: ())
    }
    if object.asInvalidLocation != nil {
        return DBFILEREQUESTSCreateFileRequestError(invalidLocation: ())
    }
    if object.asRateLimit != nil {
        return DBFILEREQUESTSCreateFileRequestError(rateLimit: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsDeleteAllClosedFileRequestsErrorToDBOptional(object: DBXFileRequestsDeleteAllClosedFileRequestsError?)
    -> DBFILEREQUESTSDeleteAllClosedFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsDeleteAllClosedFileRequestsErrorToDB(object: object)
}

func mapDBXFileRequestsDeleteAllClosedFileRequestsErrorToDB(object: DBXFileRequestsDeleteAllClosedFileRequestsError)
    -> DBFILEREQUESTSDeleteAllClosedFileRequestsError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSDeleteAllClosedFileRequestsError(validationError: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsDeleteAllClosedFileRequestsResultToDBOptional(object: DBXFileRequestsDeleteAllClosedFileRequestsResult?)
    -> DBFILEREQUESTSDeleteAllClosedFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsDeleteAllClosedFileRequestsResultToDB(object: object)
}

func mapDBXFileRequestsDeleteAllClosedFileRequestsResultToDB(object: DBXFileRequestsDeleteAllClosedFileRequestsResult)
    -> DBFILEREQUESTSDeleteAllClosedFileRequestsResult {
    DBFILEREQUESTSDeleteAllClosedFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBXFileRequestsFileRequestToDB(object: $0) })
}

func mapDBXFileRequestsDeleteFileRequestArgsToDBOptional(object: DBXFileRequestsDeleteFileRequestArgs?) -> DBFILEREQUESTSDeleteFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsDeleteFileRequestArgsToDB(object: object)
}

func mapDBXFileRequestsDeleteFileRequestArgsToDB(object: DBXFileRequestsDeleteFileRequestArgs) -> DBFILEREQUESTSDeleteFileRequestArgs {
    DBFILEREQUESTSDeleteFileRequestArgs(ids: object.ids)
}

func mapDBXFileRequestsDeleteFileRequestErrorToDBOptional(object: DBXFileRequestsDeleteFileRequestError?) -> DBFILEREQUESTSDeleteFileRequestError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsDeleteFileRequestErrorToDB(object: object)
}

func mapDBXFileRequestsDeleteFileRequestErrorToDB(object: DBXFileRequestsDeleteFileRequestError) -> DBFILEREQUESTSDeleteFileRequestError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSDeleteFileRequestError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSDeleteFileRequestError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSDeleteFileRequestError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSDeleteFileRequestError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSDeleteFileRequestError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSDeleteFileRequestError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSDeleteFileRequestError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSDeleteFileRequestError(validationError: ())
    }
    if object.asFileRequestOpen != nil {
        return DBFILEREQUESTSDeleteFileRequestError(fileRequestOpen: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsDeleteFileRequestsResultToDBOptional(object: DBXFileRequestsDeleteFileRequestsResult?) -> DBFILEREQUESTSDeleteFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsDeleteFileRequestsResultToDB(object: object)
}

func mapDBXFileRequestsDeleteFileRequestsResultToDB(object: DBXFileRequestsDeleteFileRequestsResult) -> DBFILEREQUESTSDeleteFileRequestsResult {
    DBFILEREQUESTSDeleteFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBXFileRequestsFileRequestToDB(object: $0) })
}

func mapDBXFileRequestsFileRequestToDBOptional(object: DBXFileRequestsFileRequest?) -> DBFILEREQUESTSFileRequest? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsFileRequestToDB(object: object)
}

func mapDBXFileRequestsFileRequestToDB(object: DBXFileRequestsFileRequest) -> DBFILEREQUESTSFileRequest {
    DBFILEREQUESTSFileRequest(
        id_: object.id,
        url: object.url,
        title: object.title,
        created: object.created,
        isOpen: object.isOpen,
        fileCount: object.fileCount,
        destination: object.destination,
        deadline: mapDBXFileRequestsFileRequestDeadlineToDBOptional(object: object.deadline),
        description_: object.description_
    )
}

func mapDBXFileRequestsFileRequestDeadlineToDBOptional(object: DBXFileRequestsFileRequestDeadline?) -> DBFILEREQUESTSFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsFileRequestDeadlineToDB(object: object)
}

func mapDBXFileRequestsFileRequestDeadlineToDB(object: DBXFileRequestsFileRequestDeadline) -> DBFILEREQUESTSFileRequestDeadline {
    DBFILEREQUESTSFileRequestDeadline(deadline: object.deadline, allowLateUploads: mapDBXFileRequestsGracePeriodToDBOptional(object: object.allowLateUploads))
}

func mapDBXFileRequestsGetFileRequestArgsToDBOptional(object: DBXFileRequestsGetFileRequestArgs?) -> DBFILEREQUESTSGetFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsGetFileRequestArgsToDB(object: object)
}

func mapDBXFileRequestsGetFileRequestArgsToDB(object: DBXFileRequestsGetFileRequestArgs) -> DBFILEREQUESTSGetFileRequestArgs {
    DBFILEREQUESTSGetFileRequestArgs(id_: object.id)
}

func mapDBXFileRequestsGetFileRequestErrorToDBOptional(object: DBXFileRequestsGetFileRequestError?) -> DBFILEREQUESTSGetFileRequestError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsGetFileRequestErrorToDB(object: object)
}

func mapDBXFileRequestsGetFileRequestErrorToDB(object: DBXFileRequestsGetFileRequestError) -> DBFILEREQUESTSGetFileRequestError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSGetFileRequestError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSGetFileRequestError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSGetFileRequestError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSGetFileRequestError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSGetFileRequestError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSGetFileRequestError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSGetFileRequestError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSGetFileRequestError(validationError: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsGracePeriodToDBOptional(object: DBXFileRequestsGracePeriod?) -> DBFILEREQUESTSGracePeriod? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsGracePeriodToDB(object: object)
}

func mapDBXFileRequestsGracePeriodToDB(object: DBXFileRequestsGracePeriod) -> DBFILEREQUESTSGracePeriod {
    if object.asOneDay != nil {
        return DBFILEREQUESTSGracePeriod(oneDay: ())
    }
    if object.asTwoDays != nil {
        return DBFILEREQUESTSGracePeriod(twoDays: ())
    }
    if object.asSevenDays != nil {
        return DBFILEREQUESTSGracePeriod(sevenDays: ())
    }
    if object.asThirtyDays != nil {
        return DBFILEREQUESTSGracePeriod(thirtyDays: ())
    }
    if object.asAlways != nil {
        return DBFILEREQUESTSGracePeriod(always: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSGracePeriod(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsListFileRequestsArgToDBOptional(object: DBXFileRequestsListFileRequestsArg?) -> DBFILEREQUESTSListFileRequestsArg? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsArgToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsArgToDB(object: DBXFileRequestsListFileRequestsArg) -> DBFILEREQUESTSListFileRequestsArg {
    DBFILEREQUESTSListFileRequestsArg(limit: object.limit)
}

func mapDBXFileRequestsListFileRequestsContinueArgToDBOptional(object: DBXFileRequestsListFileRequestsContinueArg?)
    -> DBFILEREQUESTSListFileRequestsContinueArg? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsContinueArgToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsContinueArgToDB(object: DBXFileRequestsListFileRequestsContinueArg) -> DBFILEREQUESTSListFileRequestsContinueArg {
    DBFILEREQUESTSListFileRequestsContinueArg(cursor: object.cursor)
}

func mapDBXFileRequestsListFileRequestsContinueErrorToDBOptional(object: DBXFileRequestsListFileRequestsContinueError?)
    -> DBFILEREQUESTSListFileRequestsContinueError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsContinueErrorToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsContinueErrorToDB(object: DBXFileRequestsListFileRequestsContinueError) -> DBFILEREQUESTSListFileRequestsContinueError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSListFileRequestsContinueError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSListFileRequestsContinueError(other: ())
    }
    if object.asInvalidCursor != nil {
        return DBFILEREQUESTSListFileRequestsContinueError(invalidCursor: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsListFileRequestsErrorToDBOptional(object: DBXFileRequestsListFileRequestsError?) -> DBFILEREQUESTSListFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsErrorToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsErrorToDB(object: DBXFileRequestsListFileRequestsError) -> DBFILEREQUESTSListFileRequestsError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSListFileRequestsError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSListFileRequestsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsListFileRequestsResultToDBOptional(object: DBXFileRequestsListFileRequestsResult?) -> DBFILEREQUESTSListFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsResultToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsResultToDB(object: DBXFileRequestsListFileRequestsResult) -> DBFILEREQUESTSListFileRequestsResult {
    DBFILEREQUESTSListFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBXFileRequestsFileRequestToDB(object: $0) })
}

func mapDBXFileRequestsListFileRequestsV2ResultToDBOptional(object: DBXFileRequestsListFileRequestsV2Result?) -> DBFILEREQUESTSListFileRequestsV2Result? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsListFileRequestsV2ResultToDB(object: object)
}

func mapDBXFileRequestsListFileRequestsV2ResultToDB(object: DBXFileRequestsListFileRequestsV2Result) -> DBFILEREQUESTSListFileRequestsV2Result {
    DBFILEREQUESTSListFileRequestsV2Result(
        fileRequests: object.fileRequests.compactMap { mapDBXFileRequestsFileRequestToDB(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBXFileRequestsUpdateFileRequestArgsToDBOptional(object: DBXFileRequestsUpdateFileRequestArgs?) -> DBFILEREQUESTSUpdateFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsUpdateFileRequestArgsToDB(object: object)
}

func mapDBXFileRequestsUpdateFileRequestArgsToDB(object: DBXFileRequestsUpdateFileRequestArgs) -> DBFILEREQUESTSUpdateFileRequestArgs {
    DBFILEREQUESTSUpdateFileRequestArgs(
        id_: object.id,
        title: object.title,
        destination: object.destination,
        deadline: mapDBXFileRequestsUpdateFileRequestDeadlineToDB(object: object.deadline),
        open: object.open,
        description_: object.description_
    )
}

func mapDBXFileRequestsUpdateFileRequestDeadlineToDBOptional(object: DBXFileRequestsUpdateFileRequestDeadline?) -> DBFILEREQUESTSUpdateFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsUpdateFileRequestDeadlineToDB(object: object)
}

func mapDBXFileRequestsUpdateFileRequestDeadlineToDB(object: DBXFileRequestsUpdateFileRequestDeadline) -> DBFILEREQUESTSUpdateFileRequestDeadline {
    if object.asNoUpdate != nil {
        return DBFILEREQUESTSUpdateFileRequestDeadline(noUpdate: ())
    }
    if let object = object.asUpdate {
        let update = mapDBXFileRequestsFileRequestDeadlineToDBOptional(object: object.update)
        return DBFILEREQUESTSUpdateFileRequestDeadline(update: update)
    }
    if object.asOther != nil {
        return DBFILEREQUESTSUpdateFileRequestDeadline(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFileRequestsUpdateFileRequestErrorToDBOptional(object: DBXFileRequestsUpdateFileRequestError?) -> DBFILEREQUESTSUpdateFileRequestError? {
    guard let object = object else { return nil }
    return mapDBXFileRequestsUpdateFileRequestErrorToDB(object: object)
}

func mapDBXFileRequestsUpdateFileRequestErrorToDB(object: DBXFileRequestsUpdateFileRequestError) -> DBFILEREQUESTSUpdateFileRequestError {
    if object.asDisabledForTeam != nil {
        return DBFILEREQUESTSUpdateFileRequestError(disabledForTeam: ())
    }
    if object.asOther != nil {
        return DBFILEREQUESTSUpdateFileRequestError(other: ())
    }
    if object.asNotFound != nil {
        return DBFILEREQUESTSUpdateFileRequestError(notFound: ())
    }
    if object.asNotAFolder != nil {
        return DBFILEREQUESTSUpdateFileRequestError(notAFolder: ())
    }
    if object.asAppLacksAccess != nil {
        return DBFILEREQUESTSUpdateFileRequestError(appLacksAccess: ())
    }
    if object.asNoPermission != nil {
        return DBFILEREQUESTSUpdateFileRequestError(noPermission: ())
    }
    if object.asEmailUnverified != nil {
        return DBFILEREQUESTSUpdateFileRequestError(emailUnverified: ())
    }
    if object.asValidationError != nil {
        return DBFILEREQUESTSUpdateFileRequestError(validationError: ())
    }
    fatalError("codegen error")
}
