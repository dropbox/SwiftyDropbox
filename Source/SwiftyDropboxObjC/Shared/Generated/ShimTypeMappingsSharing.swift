///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXSharingAccessInheritanceToDBOptional(object: DBXSharingAccessInheritance?) -> DBSHARINGAccessInheritance? {
    guard let object = object else { return nil }
    return mapDBXSharingAccessInheritanceToDB(object: object)
}

func mapDBXSharingAccessInheritanceToDB(object: DBXSharingAccessInheritance) -> DBSHARINGAccessInheritance {
    if object.asInherit != nil {
        return DBSHARINGAccessInheritance(inherit: ())
    }
    if object.asNoInherit != nil {
        return DBSHARINGAccessInheritance(noInherit: ())
    }
    if object.asOther != nil {
        return DBSHARINGAccessInheritance(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAccessLevelToDBOptional(object: DBXSharingAccessLevel?) -> DBSHARINGAccessLevel? {
    guard let object = object else { return nil }
    return mapDBXSharingAccessLevelToDB(object: object)
}

func mapDBXSharingAccessLevelToDB(object: DBXSharingAccessLevel) -> DBSHARINGAccessLevel {
    if object.asOwner != nil {
        return DBSHARINGAccessLevel(owner: ())
    }
    if object.asEditor != nil {
        return DBSHARINGAccessLevel(editor: ())
    }
    if object.asViewer != nil {
        return DBSHARINGAccessLevel(viewer: ())
    }
    if object.asViewerNoComment != nil {
        return DBSHARINGAccessLevel(viewerNoComment: ())
    }
    if object.asTraverse != nil {
        return DBSHARINGAccessLevel(traverse: ())
    }
    if object.asNoAccess != nil {
        return DBSHARINGAccessLevel(noAccess: ())
    }
    if object.asOther != nil {
        return DBSHARINGAccessLevel(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAclUpdatePolicyToDBOptional(object: DBXSharingAclUpdatePolicy?) -> DBSHARINGAclUpdatePolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingAclUpdatePolicyToDB(object: object)
}

func mapDBXSharingAclUpdatePolicyToDB(object: DBXSharingAclUpdatePolicy) -> DBSHARINGAclUpdatePolicy {
    if object.asOwner != nil {
        return DBSHARINGAclUpdatePolicy(owner: ())
    }
    if object.asEditors != nil {
        return DBSHARINGAclUpdatePolicy(editors: ())
    }
    if object.asOther != nil {
        return DBSHARINGAclUpdatePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAddFileMemberArgsToDBOptional(object: DBXSharingAddFileMemberArgs?) -> DBSHARINGAddFileMemberArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingAddFileMemberArgsToDB(object: object)
}

func mapDBXSharingAddFileMemberArgsToDB(object: DBXSharingAddFileMemberArgs) -> DBSHARINGAddFileMemberArgs {
    DBSHARINGAddFileMemberArgs(
        file: object.file,
        members: object.members.compactMap { mapDBXSharingMemberSelectorToDB(object: $0) },
        customMessage: object.customMessage,
        quiet: object.quiet,
        accessLevel: mapDBXSharingAccessLevelToDB(object: object.accessLevel),
        addMessageAsComment: object.addMessageAsComment
    )
}

func mapDBXSharingAddFileMemberErrorToDBOptional(object: DBXSharingAddFileMemberError?) -> DBSHARINGAddFileMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingAddFileMemberErrorToDB(object: object)
}

func mapDBXSharingAddFileMemberErrorToDB(object: DBXSharingAddFileMemberError) -> DBSHARINGAddFileMemberError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGAddFileMemberError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGAddFileMemberError(accessError: accessError)
    }
    if object.asRateLimit != nil {
        return DBSHARINGAddFileMemberError(rateLimit: ())
    }
    if object.asInvalidComment != nil {
        return DBSHARINGAddFileMemberError(invalidComment: ())
    }
    if object.asOther != nil {
        return DBSHARINGAddFileMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAddFolderMemberArgToDBOptional(object: DBXSharingAddFolderMemberArg?) -> DBSHARINGAddFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBXSharingAddFolderMemberArgToDB(object: object)
}

func mapDBXSharingAddFolderMemberArgToDB(object: DBXSharingAddFolderMemberArg) -> DBSHARINGAddFolderMemberArg {
    DBSHARINGAddFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        members: object.members.compactMap { mapDBXSharingAddMemberToDB(object: $0) },
        quiet: object.quiet,
        customMessage: object.customMessage
    )
}

func mapDBXSharingAddFolderMemberErrorToDBOptional(object: DBXSharingAddFolderMemberError?) -> DBSHARINGAddFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingAddFolderMemberErrorToDB(object: object)
}

func mapDBXSharingAddFolderMemberErrorToDB(object: DBXSharingAddFolderMemberError) -> DBSHARINGAddFolderMemberError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGAddFolderMemberError(accessError: accessError)
    }
    if object.asEmailUnverified != nil {
        return DBSHARINGAddFolderMemberError(emailUnverified: ())
    }
    if object.asBannedMember != nil {
        return DBSHARINGAddFolderMemberError(bannedMember: ())
    }
    if let object = object.asBadMember {
        let badMember = mapDBXSharingAddMemberSelectorErrorToDB(object: object.badMember)
        return DBSHARINGAddFolderMemberError(badMember: badMember)
    }
    if object.asCantShareOutsideTeam != nil {
        return DBSHARINGAddFolderMemberError(cantShareOutsideTeam: ())
    }
    if let object = object.asTooManyMembers {
        let tooManyMembers = object.tooManyMembers
        return DBSHARINGAddFolderMemberError(tooManyMembers: tooManyMembers)
    }
    if let object = object.asTooManyPendingInvites {
        let tooManyPendingInvites = object.tooManyPendingInvites
        return DBSHARINGAddFolderMemberError(tooManyPendingInvites: tooManyPendingInvites)
    }
    if object.asRateLimit != nil {
        return DBSHARINGAddFolderMemberError(rateLimit: ())
    }
    if object.asTooManyInvitees != nil {
        return DBSHARINGAddFolderMemberError(tooManyInvitees: ())
    }
    if object.asInsufficientPlan != nil {
        return DBSHARINGAddFolderMemberError(insufficientPlan: ())
    }
    if object.asTeamFolder != nil {
        return DBSHARINGAddFolderMemberError(teamFolder: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGAddFolderMemberError(noPermission: ())
    }
    if object.asInvalidSharedFolder != nil {
        return DBSHARINGAddFolderMemberError(invalidSharedFolder: ())
    }
    if object.asOther != nil {
        return DBSHARINGAddFolderMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAddMemberToDBOptional(object: DBXSharingAddMember?) -> DBSHARINGAddMember? {
    guard let object = object else { return nil }
    return mapDBXSharingAddMemberToDB(object: object)
}

func mapDBXSharingAddMemberToDB(object: DBXSharingAddMember) -> DBSHARINGAddMember {
    DBSHARINGAddMember(member: mapDBXSharingMemberSelectorToDB(object: object.member), accessLevel: mapDBXSharingAccessLevelToDB(object: object.accessLevel))
}

func mapDBXSharingAddMemberSelectorErrorToDBOptional(object: DBXSharingAddMemberSelectorError?) -> DBSHARINGAddMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBXSharingAddMemberSelectorErrorToDB(object: object)
}

func mapDBXSharingAddMemberSelectorErrorToDB(object: DBXSharingAddMemberSelectorError) -> DBSHARINGAddMemberSelectorError {
    if object.asAutomaticGroup != nil {
        return DBSHARINGAddMemberSelectorError(automaticGroup: ())
    }
    if let object = object.asInvalidDropboxId {
        let invalidDropboxId = object.invalidDropboxId
        return DBSHARINGAddMemberSelectorError(invalidDropboxId: invalidDropboxId)
    }
    if let object = object.asInvalidEmail {
        let invalidEmail = object.invalidEmail
        return DBSHARINGAddMemberSelectorError(invalidEmail: invalidEmail)
    }
    if let object = object.asUnverifiedDropboxId {
        let unverifiedDropboxId = object.unverifiedDropboxId
        return DBSHARINGAddMemberSelectorError(unverifiedDropboxId: unverifiedDropboxId)
    }
    if object.asGroupDeleted != nil {
        return DBSHARINGAddMemberSelectorError(groupDeleted: ())
    }
    if object.asGroupNotOnTeam != nil {
        return DBSHARINGAddMemberSelectorError(groupNotOnTeam: ())
    }
    if object.asOther != nil {
        return DBSHARINGAddMemberSelectorError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRequestedVisibilityToDBOptional(object: DBXSharingRequestedVisibility?) -> DBSHARINGRequestedVisibility? {
    guard let object = object else { return nil }
    return mapDBXSharingRequestedVisibilityToDB(object: object)
}

func mapDBXSharingRequestedVisibilityToDB(object: DBXSharingRequestedVisibility) -> DBSHARINGRequestedVisibility {
    if object.asPublic_ != nil {
        return DBSHARINGRequestedVisibility(withPublic: ())
    }
    if object.asTeamOnly != nil {
        return DBSHARINGRequestedVisibility(teamOnly: ())
    }
    if object.asPassword != nil {
        return DBSHARINGRequestedVisibility(password: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingResolvedVisibilityToDBOptional(object: DBXSharingResolvedVisibility?) -> DBSHARINGResolvedVisibility? {
    guard let object = object else { return nil }
    return mapDBXSharingResolvedVisibilityToDB(object: object)
}

func mapDBXSharingResolvedVisibilityToDB(object: DBXSharingResolvedVisibility) -> DBSHARINGResolvedVisibility {
    if object.asPublic_ != nil {
        return DBSHARINGResolvedVisibility(withPublic: ())
    }
    if object.asTeamOnly != nil {
        return DBSHARINGResolvedVisibility(teamOnly: ())
    }
    if object.asPassword != nil {
        return DBSHARINGResolvedVisibility(password: ())
    }
    if object.asTeamAndPassword != nil {
        return DBSHARINGResolvedVisibility(teamAndPassword: ())
    }
    if object.asSharedFolderOnly != nil {
        return DBSHARINGResolvedVisibility(sharedFolderOnly: ())
    }
    if object.asNoOne != nil {
        return DBSHARINGResolvedVisibility(noOne: ())
    }
    if object.asOnlyYou != nil {
        return DBSHARINGResolvedVisibility(onlyYou: ())
    }
    if object.asOther != nil {
        return DBSHARINGResolvedVisibility(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAlphaResolvedVisibilityToDBOptional(object: DBXSharingAlphaResolvedVisibility?) -> DBSHARINGAlphaResolvedVisibility? {
    guard let object = object else { return nil }
    return mapDBXSharingAlphaResolvedVisibilityToDB(object: object)
}

func mapDBXSharingAlphaResolvedVisibilityToDB(object: DBXSharingAlphaResolvedVisibility) -> DBSHARINGAlphaResolvedVisibility {
    if object.asPublic_ != nil {
        return DBSHARINGAlphaResolvedVisibility(withPublic: ())
    }
    if object.asTeamOnly != nil {
        return DBSHARINGAlphaResolvedVisibility(teamOnly: ())
    }
    if object.asPassword != nil {
        return DBSHARINGAlphaResolvedVisibility(password: ())
    }
    if object.asTeamAndPassword != nil {
        return DBSHARINGAlphaResolvedVisibility(teamAndPassword: ())
    }
    if object.asSharedFolderOnly != nil {
        return DBSHARINGAlphaResolvedVisibility(sharedFolderOnly: ())
    }
    if object.asNoOne != nil {
        return DBSHARINGAlphaResolvedVisibility(noOne: ())
    }
    if object.asOnlyYou != nil {
        return DBSHARINGAlphaResolvedVisibility(onlyYou: ())
    }
    if object.asOther != nil {
        return DBSHARINGAlphaResolvedVisibility(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingAudienceExceptionContentInfoToDBOptional(object: DBXSharingAudienceExceptionContentInfo?) -> DBSHARINGAudienceExceptionContentInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingAudienceExceptionContentInfoToDB(object: object)
}

func mapDBXSharingAudienceExceptionContentInfoToDB(object: DBXSharingAudienceExceptionContentInfo) -> DBSHARINGAudienceExceptionContentInfo {
    DBSHARINGAudienceExceptionContentInfo(name: object.name)
}

func mapDBXSharingAudienceExceptionsToDBOptional(object: DBXSharingAudienceExceptions?) -> DBSHARINGAudienceExceptions? {
    guard let object = object else { return nil }
    return mapDBXSharingAudienceExceptionsToDB(object: object)
}

func mapDBXSharingAudienceExceptionsToDB(object: DBXSharingAudienceExceptions) -> DBSHARINGAudienceExceptions {
    DBSHARINGAudienceExceptions(count: object.count, exceptions: object.exceptions.compactMap { mapDBXSharingAudienceExceptionContentInfoToDB(object: $0) })
}

func mapDBXSharingAudienceRestrictingSharedFolderToDBOptional(object: DBXSharingAudienceRestrictingSharedFolder?) -> DBSHARINGAudienceRestrictingSharedFolder? {
    guard let object = object else { return nil }
    return mapDBXSharingAudienceRestrictingSharedFolderToDB(object: object)
}

func mapDBXSharingAudienceRestrictingSharedFolderToDB(object: DBXSharingAudienceRestrictingSharedFolder) -> DBSHARINGAudienceRestrictingSharedFolder {
    DBSHARINGAudienceRestrictingSharedFolder(
        sharedFolderId: object.sharedFolderId,
        name: object.name,
        audience: mapDBXSharingLinkAudienceToDB(object: object.audience)
    )
}

func mapDBXSharingLinkMetadataToDBOptional(object: DBXSharingLinkMetadata?) -> DBSHARINGLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkMetadataToDB(object: object)
}

func mapDBXSharingLinkMetadataToDB(object: DBXSharingLinkMetadata) -> DBSHARINGLinkMetadata {
    switch object {
    case let object as DBXSharingPathLinkMetadata:
        return DBSHARINGPathLinkMetadata(
            url: object.url,
            visibility: mapDBXSharingVisibilityToDB(object: object.visibility),
            path: object.path,
            expires: object.expires
        )
    case let object as DBXSharingCollectionLinkMetadata:
        return DBSHARINGCollectionLinkMetadata(url: object.url, visibility: mapDBXSharingVisibilityToDB(object: object.visibility), expires: object.expires)
    default:
        return DBSHARINGLinkMetadata(url: object.url, visibility: mapDBXSharingVisibilityToDB(object: object.visibility), expires: object.expires)
    }
}

func mapDBXSharingCollectionLinkMetadataToDBOptional(object: DBXSharingCollectionLinkMetadata?) -> DBSHARINGCollectionLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingCollectionLinkMetadataToDB(object: object)
}

func mapDBXSharingCollectionLinkMetadataToDB(object: DBXSharingCollectionLinkMetadata) -> DBSHARINGCollectionLinkMetadata {
    DBSHARINGCollectionLinkMetadata(url: object.url, visibility: mapDBXSharingVisibilityToDB(object: object.visibility), expires: object.expires)
}

func mapDBXSharingCreateSharedLinkArgToDBOptional(object: DBXSharingCreateSharedLinkArg?) -> DBSHARINGCreateSharedLinkArg? {
    guard let object = object else { return nil }
    return mapDBXSharingCreateSharedLinkArgToDB(object: object)
}

func mapDBXSharingCreateSharedLinkArgToDB(object: DBXSharingCreateSharedLinkArg) -> DBSHARINGCreateSharedLinkArg {
    DBSHARINGCreateSharedLinkArg(
        path: object.path,
        shortUrl: object.shortUrl,
        pendingUpload: mapDBXSharingPendingUploadModeToDBOptional(object: object.pendingUpload)
    )
}

func mapDBXSharingCreateSharedLinkErrorToDBOptional(object: DBXSharingCreateSharedLinkError?) -> DBSHARINGCreateSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBXSharingCreateSharedLinkErrorToDB(object: object)
}

func mapDBXSharingCreateSharedLinkErrorToDB(object: DBXSharingCreateSharedLinkError) -> DBSHARINGCreateSharedLinkError {
    if let object = object.asPath {
        let path = mapDBXFilesLookupErrorToDB(object: object.path)
        return DBSHARINGCreateSharedLinkError(path: path)
    }
    if object.asOther != nil {
        return DBSHARINGCreateSharedLinkError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingCreateSharedLinkWithSettingsArgToDBOptional(object: DBXSharingCreateSharedLinkWithSettingsArg?) -> DBSHARINGCreateSharedLinkWithSettingsArg? {
    guard let object = object else { return nil }
    return mapDBXSharingCreateSharedLinkWithSettingsArgToDB(object: object)
}

func mapDBXSharingCreateSharedLinkWithSettingsArgToDB(object: DBXSharingCreateSharedLinkWithSettingsArg) -> DBSHARINGCreateSharedLinkWithSettingsArg {
    DBSHARINGCreateSharedLinkWithSettingsArg(path: object.path, settings: mapDBXSharingSharedLinkSettingsToDBOptional(object: object.settings))
}

func mapDBXSharingCreateSharedLinkWithSettingsErrorToDBOptional(object: DBXSharingCreateSharedLinkWithSettingsError?)
    -> DBSHARINGCreateSharedLinkWithSettingsError? {
    guard let object = object else { return nil }
    return mapDBXSharingCreateSharedLinkWithSettingsErrorToDB(object: object)
}

func mapDBXSharingCreateSharedLinkWithSettingsErrorToDB(object: DBXSharingCreateSharedLinkWithSettingsError) -> DBSHARINGCreateSharedLinkWithSettingsError {
    if let object = object.asPath {
        let path = mapDBXFilesLookupErrorToDB(object: object.path)
        return DBSHARINGCreateSharedLinkWithSettingsError(path: path)
    }
    if object.asEmailNotVerified != nil {
        return DBSHARINGCreateSharedLinkWithSettingsError(emailNotVerified: ())
    }
    if let object = object.asSharedLinkAlreadyExists {
        let sharedLinkAlreadyExists = mapDBXSharingSharedLinkAlreadyExistsMetadataToDBOptional(object: object.sharedLinkAlreadyExists)
        return DBSHARINGCreateSharedLinkWithSettingsError(sharedLinkAlreadyExists: sharedLinkAlreadyExists)
    }
    if let object = object.asSettingsError {
        let settingsError = mapDBXSharingSharedLinkSettingsErrorToDB(object: object.settingsError)
        return DBSHARINGCreateSharedLinkWithSettingsError(settingsError: settingsError)
    }
    if object.asAccessDenied != nil {
        return DBSHARINGCreateSharedLinkWithSettingsError(accessDenied: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedContentLinkMetadataBaseToDBOptional(object: DBXSharingSharedContentLinkMetadataBase?) -> DBSHARINGSharedContentLinkMetadataBase? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedContentLinkMetadataBaseToDB(object: object)
}

func mapDBXSharingSharedContentLinkMetadataBaseToDB(object: DBXSharingSharedContentLinkMetadataBase) -> DBSHARINGSharedContentLinkMetadataBase {
    DBSHARINGSharedContentLinkMetadataBase(
        audienceOptions: object.audienceOptions.compactMap { mapDBXSharingLinkAudienceToDB(object: $0) },
        currentAudience: mapDBXSharingLinkAudienceToDB(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBXSharingLinkPermissionToDB(object: $0) },
        passwordProtected: object.passwordProtected,
        accessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBXSharingAudienceRestrictingSharedFolderToDBOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry
    )
}

func mapDBXSharingExpectedSharedContentLinkMetadataToDBOptional(object: DBXSharingExpectedSharedContentLinkMetadata?)
    -> DBSHARINGExpectedSharedContentLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingExpectedSharedContentLinkMetadataToDB(object: object)
}

func mapDBXSharingExpectedSharedContentLinkMetadataToDB(object: DBXSharingExpectedSharedContentLinkMetadata) -> DBSHARINGExpectedSharedContentLinkMetadata {
    DBSHARINGExpectedSharedContentLinkMetadata(
        audienceOptions: object.audienceOptions.compactMap { mapDBXSharingLinkAudienceToDB(object: $0) },
        currentAudience: mapDBXSharingLinkAudienceToDB(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBXSharingLinkPermissionToDB(object: $0) },
        passwordProtected: object.passwordProtected,
        accessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBXSharingAudienceRestrictingSharedFolderToDBOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry
    )
}

func mapDBXSharingFileActionToDBOptional(object: DBXSharingFileAction?) -> DBSHARINGFileAction? {
    guard let object = object else { return nil }
    return mapDBXSharingFileActionToDB(object: object)
}

func mapDBXSharingFileActionToDB(object: DBXSharingFileAction) -> DBSHARINGFileAction {
    if object.asDisableViewerInfo != nil {
        return DBSHARINGFileAction(disableViewerInfo: ())
    }
    if object.asEditContents != nil {
        return DBSHARINGFileAction(editContents: ())
    }
    if object.asEnableViewerInfo != nil {
        return DBSHARINGFileAction(enableViewerInfo: ())
    }
    if object.asInviteViewer != nil {
        return DBSHARINGFileAction(inviteViewer: ())
    }
    if object.asInviteViewerNoComment != nil {
        return DBSHARINGFileAction(inviteViewerNoComment: ())
    }
    if object.asInviteEditor != nil {
        return DBSHARINGFileAction(inviteEditor: ())
    }
    if object.asUnshare != nil {
        return DBSHARINGFileAction(unshare: ())
    }
    if object.asRelinquishMembership != nil {
        return DBSHARINGFileAction(relinquishMembership: ())
    }
    if object.asShareLink != nil {
        return DBSHARINGFileAction(shareLink: ())
    }
    if object.asCreateLink != nil {
        return DBSHARINGFileAction(createLink: ())
    }
    if object.asCreateViewLink != nil {
        return DBSHARINGFileAction(createViewLink: ())
    }
    if object.asCreateEditLink != nil {
        return DBSHARINGFileAction(createEditLink: ())
    }
    if object.asOther != nil {
        return DBSHARINGFileAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingFileErrorResultToDBOptional(object: DBXSharingFileErrorResult?) -> DBSHARINGFileErrorResult? {
    guard let object = object else { return nil }
    return mapDBXSharingFileErrorResultToDB(object: object)
}

func mapDBXSharingFileErrorResultToDB(object: DBXSharingFileErrorResult) -> DBSHARINGFileErrorResult {
    if let object = object.asFileNotFoundError {
        let fileNotFoundError = object.fileNotFoundError
        return DBSHARINGFileErrorResult(fileNotFoundError: fileNotFoundError)
    }
    if let object = object.asInvalidFileActionError {
        let invalidFileActionError = object.invalidFileActionError
        return DBSHARINGFileErrorResult(invalidFileActionError: invalidFileActionError)
    }
    if let object = object.asPermissionDeniedError {
        let permissionDeniedError = object.permissionDeniedError
        return DBSHARINGFileErrorResult(permissionDeniedError: permissionDeniedError)
    }
    if object.asOther != nil {
        return DBSHARINGFileErrorResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedLinkMetadataToDBOptional(object: DBXSharingSharedLinkMetadata?) -> DBSHARINGSharedLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkMetadataToDB(object: object)
}

func mapDBXSharingSharedLinkMetadataToDB(object: DBXSharingSharedLinkMetadata) -> DBSHARINGSharedLinkMetadata {
    switch object {
    case let object as DBXSharingFileLinkMetadata:
        return DBSHARINGFileLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBXSharingLinkPermissionsToDB(object: object.linkPermissions),
            clientModified: object.clientModified,
            serverModified: object.serverModified,
            rev: object.rev,
            size: object.size,
            id_: object.id,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBXSharingTeamMemberInfoToDBOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBXUsersTeamToDBOptional(object: object.contentOwnerTeamInfo)
        )
    case let object as DBXSharingFolderLinkMetadata:
        return DBSHARINGFolderLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBXSharingLinkPermissionsToDB(object: object.linkPermissions),
            id_: object.id,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBXSharingTeamMemberInfoToDBOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBXUsersTeamToDBOptional(object: object.contentOwnerTeamInfo)
        )
    default:
        return DBSHARINGSharedLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBXSharingLinkPermissionsToDB(object: object.linkPermissions),
            id_: object.id,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBXSharingTeamMemberInfoToDBOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBXUsersTeamToDBOptional(object: object.contentOwnerTeamInfo)
        )
    }
}

func mapDBXSharingFileLinkMetadataToDBOptional(object: DBXSharingFileLinkMetadata?) -> DBSHARINGFileLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingFileLinkMetadataToDB(object: object)
}

func mapDBXSharingFileLinkMetadataToDB(object: DBXSharingFileLinkMetadata) -> DBSHARINGFileLinkMetadata {
    DBSHARINGFileLinkMetadata(
        url: object.url,
        name: object.name,
        linkPermissions: mapDBXSharingLinkPermissionsToDB(object: object.linkPermissions),
        clientModified: object.clientModified,
        serverModified: object.serverModified,
        rev: object.rev,
        size: object.size,
        id_: object.id,
        expires: object.expires,
        pathLower: object.pathLower,
        teamMemberInfo: mapDBXSharingTeamMemberInfoToDBOptional(object: object.teamMemberInfo),
        contentOwnerTeamInfo: mapDBXUsersTeamToDBOptional(object: object.contentOwnerTeamInfo)
    )
}

func mapDBXSharingFileMemberActionErrorToDBOptional(object: DBXSharingFileMemberActionError?) -> DBSHARINGFileMemberActionError? {
    guard let object = object else { return nil }
    return mapDBXSharingFileMemberActionErrorToDB(object: object)
}

func mapDBXSharingFileMemberActionErrorToDB(object: DBXSharingFileMemberActionError) -> DBSHARINGFileMemberActionError {
    if object.asInvalidMember != nil {
        return DBSHARINGFileMemberActionError(invalidMember: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGFileMemberActionError(noPermission: ())
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGFileMemberActionError(accessError: accessError)
    }
    if let object = object.asNoExplicitAccess {
        let noExplicitAccess = mapDBXSharingMemberAccessLevelResultToDB(object: object.noExplicitAccess)
        return DBSHARINGFileMemberActionError(noExplicitAccess: noExplicitAccess)
    }
    if object.asOther != nil {
        return DBSHARINGFileMemberActionError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingFileMemberActionIndividualResultToDBOptional(object: DBXSharingFileMemberActionIndividualResult?)
    -> DBSHARINGFileMemberActionIndividualResult? {
    guard let object = object else { return nil }
    return mapDBXSharingFileMemberActionIndividualResultToDB(object: object)
}

func mapDBXSharingFileMemberActionIndividualResultToDB(object: DBXSharingFileMemberActionIndividualResult) -> DBSHARINGFileMemberActionIndividualResult {
    if let object = object.asSuccess {
        let success = mapDBXSharingAccessLevelToDBOptional(object: object.success)
        return DBSHARINGFileMemberActionIndividualResult(success: success)
    }
    if let object = object.asMemberError {
        let memberError = mapDBXSharingFileMemberActionErrorToDB(object: object.memberError)
        return DBSHARINGFileMemberActionIndividualResult(memberError: memberError)
    }
    fatalError("codegen error")
}

func mapDBXSharingFileMemberActionResultToDBOptional(object: DBXSharingFileMemberActionResult?) -> DBSHARINGFileMemberActionResult? {
    guard let object = object else { return nil }
    return mapDBXSharingFileMemberActionResultToDB(object: object)
}

func mapDBXSharingFileMemberActionResultToDB(object: DBXSharingFileMemberActionResult) -> DBSHARINGFileMemberActionResult {
    DBSHARINGFileMemberActionResult(
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        result: mapDBXSharingFileMemberActionIndividualResultToDB(object: object.result),
        sckeySha1: object.sckeySha1,
        invitationSignature: object.invitationSignature
    )
}

func mapDBXSharingFileMemberRemoveActionResultToDBOptional(object: DBXSharingFileMemberRemoveActionResult?) -> DBSHARINGFileMemberRemoveActionResult? {
    guard let object = object else { return nil }
    return mapDBXSharingFileMemberRemoveActionResultToDB(object: object)
}

func mapDBXSharingFileMemberRemoveActionResultToDB(object: DBXSharingFileMemberRemoveActionResult) -> DBSHARINGFileMemberRemoveActionResult {
    if let object = object.asSuccess {
        let success = mapDBXSharingMemberAccessLevelResultToDB(object: object.success)
        return DBSHARINGFileMemberRemoveActionResult(success: success)
    }
    if let object = object.asMemberError {
        let memberError = mapDBXSharingFileMemberActionErrorToDB(object: object.memberError)
        return DBSHARINGFileMemberRemoveActionResult(memberError: memberError)
    }
    if object.asOther != nil {
        return DBSHARINGFileMemberRemoveActionResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingFilePermissionToDBOptional(object: DBXSharingFilePermission?) -> DBSHARINGFilePermission? {
    guard let object = object else { return nil }
    return mapDBXSharingFilePermissionToDB(object: object)
}

func mapDBXSharingFilePermissionToDB(object: DBXSharingFilePermission) -> DBSHARINGFilePermission {
    DBSHARINGFilePermission(
        action: mapDBXSharingFileActionToDB(object: object.action),
        allow: object.allow,
        reason: mapDBXSharingPermissionDeniedReasonToDBOptional(object: object.reason)
    )
}

func mapDBXSharingFolderActionToDBOptional(object: DBXSharingFolderAction?) -> DBSHARINGFolderAction? {
    guard let object = object else { return nil }
    return mapDBXSharingFolderActionToDB(object: object)
}

func mapDBXSharingFolderActionToDB(object: DBXSharingFolderAction) -> DBSHARINGFolderAction {
    if object.asChangeOptions != nil {
        return DBSHARINGFolderAction(changeOptions: ())
    }
    if object.asDisableViewerInfo != nil {
        return DBSHARINGFolderAction(disableViewerInfo: ())
    }
    if object.asEditContents != nil {
        return DBSHARINGFolderAction(editContents: ())
    }
    if object.asEnableViewerInfo != nil {
        return DBSHARINGFolderAction(enableViewerInfo: ())
    }
    if object.asInviteEditor != nil {
        return DBSHARINGFolderAction(inviteEditor: ())
    }
    if object.asInviteViewer != nil {
        return DBSHARINGFolderAction(inviteViewer: ())
    }
    if object.asInviteViewerNoComment != nil {
        return DBSHARINGFolderAction(inviteViewerNoComment: ())
    }
    if object.asRelinquishMembership != nil {
        return DBSHARINGFolderAction(relinquishMembership: ())
    }
    if object.asUnmount != nil {
        return DBSHARINGFolderAction(unmount: ())
    }
    if object.asUnshare != nil {
        return DBSHARINGFolderAction(unshare: ())
    }
    if object.asLeaveACopy != nil {
        return DBSHARINGFolderAction(leaveACopy: ())
    }
    if object.asShareLink != nil {
        return DBSHARINGFolderAction(shareLink: ())
    }
    if object.asCreateLink != nil {
        return DBSHARINGFolderAction(createLink: ())
    }
    if object.asSetAccessInheritance != nil {
        return DBSHARINGFolderAction(setAccessInheritance: ())
    }
    if object.asOther != nil {
        return DBSHARINGFolderAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingFolderLinkMetadataToDBOptional(object: DBXSharingFolderLinkMetadata?) -> DBSHARINGFolderLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingFolderLinkMetadataToDB(object: object)
}

func mapDBXSharingFolderLinkMetadataToDB(object: DBXSharingFolderLinkMetadata) -> DBSHARINGFolderLinkMetadata {
    DBSHARINGFolderLinkMetadata(
        url: object.url,
        name: object.name,
        linkPermissions: mapDBXSharingLinkPermissionsToDB(object: object.linkPermissions),
        id_: object.id,
        expires: object.expires,
        pathLower: object.pathLower,
        teamMemberInfo: mapDBXSharingTeamMemberInfoToDBOptional(object: object.teamMemberInfo),
        contentOwnerTeamInfo: mapDBXUsersTeamToDBOptional(object: object.contentOwnerTeamInfo)
    )
}

func mapDBXSharingFolderPermissionToDBOptional(object: DBXSharingFolderPermission?) -> DBSHARINGFolderPermission? {
    guard let object = object else { return nil }
    return mapDBXSharingFolderPermissionToDB(object: object)
}

func mapDBXSharingFolderPermissionToDB(object: DBXSharingFolderPermission) -> DBSHARINGFolderPermission {
    DBSHARINGFolderPermission(
        action: mapDBXSharingFolderActionToDB(object: object.action),
        allow: object.allow,
        reason: mapDBXSharingPermissionDeniedReasonToDBOptional(object: object.reason)
    )
}

func mapDBXSharingFolderPolicyToDBOptional(object: DBXSharingFolderPolicy?) -> DBSHARINGFolderPolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingFolderPolicyToDB(object: object)
}

func mapDBXSharingFolderPolicyToDB(object: DBXSharingFolderPolicy) -> DBSHARINGFolderPolicy {
    DBSHARINGFolderPolicy(
        aclUpdatePolicy: mapDBXSharingAclUpdatePolicyToDB(object: object.aclUpdatePolicy),
        sharedLinkPolicy: mapDBXSharingSharedLinkPolicyToDB(object: object.sharedLinkPolicy),
        memberPolicy: mapDBXSharingMemberPolicyToDBOptional(object: object.memberPolicy),
        resolvedMemberPolicy: mapDBXSharingMemberPolicyToDBOptional(object: object.resolvedMemberPolicy),
        viewerInfoPolicy: mapDBXSharingViewerInfoPolicyToDBOptional(object: object.viewerInfoPolicy)
    )
}

func mapDBXSharingGetFileMetadataArgToDBOptional(object: DBXSharingGetFileMetadataArg?) -> DBSHARINGGetFileMetadataArg? {
    guard let object = object else { return nil }
    return mapDBXSharingGetFileMetadataArgToDB(object: object)
}

func mapDBXSharingGetFileMetadataArgToDB(object: DBXSharingGetFileMetadataArg) -> DBSHARINGGetFileMetadataArg {
    DBSHARINGGetFileMetadataArg(file: object.file, actions: object.actions?.compactMap { mapDBXSharingFileActionToDB(object: $0) })
}

func mapDBXSharingGetFileMetadataBatchArgToDBOptional(object: DBXSharingGetFileMetadataBatchArg?) -> DBSHARINGGetFileMetadataBatchArg? {
    guard let object = object else { return nil }
    return mapDBXSharingGetFileMetadataBatchArgToDB(object: object)
}

func mapDBXSharingGetFileMetadataBatchArgToDB(object: DBXSharingGetFileMetadataBatchArg) -> DBSHARINGGetFileMetadataBatchArg {
    DBSHARINGGetFileMetadataBatchArg(files: object.files, actions: object.actions?.compactMap { mapDBXSharingFileActionToDB(object: $0) })
}

func mapDBXSharingGetFileMetadataBatchResultToDBOptional(object: DBXSharingGetFileMetadataBatchResult?) -> DBSHARINGGetFileMetadataBatchResult? {
    guard let object = object else { return nil }
    return mapDBXSharingGetFileMetadataBatchResultToDB(object: object)
}

func mapDBXSharingGetFileMetadataBatchResultToDB(object: DBXSharingGetFileMetadataBatchResult) -> DBSHARINGGetFileMetadataBatchResult {
    DBSHARINGGetFileMetadataBatchResult(file: object.file, result: mapDBXSharingGetFileMetadataIndividualResultToDB(object: object.result))
}

func mapDBXSharingGetFileMetadataErrorToDBOptional(object: DBXSharingGetFileMetadataError?) -> DBSHARINGGetFileMetadataError? {
    guard let object = object else { return nil }
    return mapDBXSharingGetFileMetadataErrorToDB(object: object)
}

func mapDBXSharingGetFileMetadataErrorToDB(object: DBXSharingGetFileMetadataError) -> DBSHARINGGetFileMetadataError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGGetFileMetadataError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGGetFileMetadataError(accessError: accessError)
    }
    if object.asOther != nil {
        return DBSHARINGGetFileMetadataError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingGetFileMetadataIndividualResultToDBOptional(object: DBXSharingGetFileMetadataIndividualResult?) -> DBSHARINGGetFileMetadataIndividualResult? {
    guard let object = object else { return nil }
    return mapDBXSharingGetFileMetadataIndividualResultToDB(object: object)
}

func mapDBXSharingGetFileMetadataIndividualResultToDB(object: DBXSharingGetFileMetadataIndividualResult) -> DBSHARINGGetFileMetadataIndividualResult {
    if let object = object.asMetadata {
        let metadata = mapDBXSharingSharedFileMetadataToDB(object: object.metadata)
        return DBSHARINGGetFileMetadataIndividualResult(metadata: metadata)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGGetFileMetadataIndividualResult(accessError: accessError)
    }
    if object.asOther != nil {
        return DBSHARINGGetFileMetadataIndividualResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingGetMetadataArgsToDBOptional(object: DBXSharingGetMetadataArgs?) -> DBSHARINGGetMetadataArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingGetMetadataArgsToDB(object: object)
}

func mapDBXSharingGetMetadataArgsToDB(object: DBXSharingGetMetadataArgs) -> DBSHARINGGetMetadataArgs {
    DBSHARINGGetMetadataArgs(sharedFolderId: object.sharedFolderId, actions: object.actions?.compactMap { mapDBXSharingFolderActionToDB(object: $0) })
}

func mapDBXSharingSharedLinkErrorToDBOptional(object: DBXSharingSharedLinkError?) -> DBSHARINGSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkErrorToDB(object: object)
}

func mapDBXSharingSharedLinkErrorToDB(object: DBXSharingSharedLinkError) -> DBSHARINGSharedLinkError {
    if object.asSharedLinkNotFound != nil {
        return DBSHARINGSharedLinkError(sharedLinkNotFound: ())
    }
    if object.asSharedLinkAccessDenied != nil {
        return DBSHARINGSharedLinkError(sharedLinkAccessDenied: ())
    }
    if object.asUnsupportedLinkType != nil {
        return DBSHARINGSharedLinkError(unsupportedLinkType: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharedLinkError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingGetSharedLinkFileErrorToDBOptional(object: DBXSharingGetSharedLinkFileError?) -> DBSHARINGGetSharedLinkFileError? {
    guard let object = object else { return nil }
    return mapDBXSharingGetSharedLinkFileErrorToDB(object: object)
}

func mapDBXSharingGetSharedLinkFileErrorToDB(object: DBXSharingGetSharedLinkFileError) -> DBSHARINGGetSharedLinkFileError {
    if object.asSharedLinkNotFound != nil {
        return DBSHARINGGetSharedLinkFileError(sharedLinkNotFound: ())
    }
    if object.asSharedLinkAccessDenied != nil {
        return DBSHARINGGetSharedLinkFileError(sharedLinkAccessDenied: ())
    }
    if object.asUnsupportedLinkType != nil {
        return DBSHARINGGetSharedLinkFileError(unsupportedLinkType: ())
    }
    if object.asOther != nil {
        return DBSHARINGGetSharedLinkFileError(other: ())
    }
    if object.asSharedLinkIsDirectory != nil {
        return DBSHARINGGetSharedLinkFileError(sharedLinkIsDirectory: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingGetSharedLinkMetadataArgToDBOptional(object: DBXSharingGetSharedLinkMetadataArg?) -> DBSHARINGGetSharedLinkMetadataArg? {
    guard let object = object else { return nil }
    return mapDBXSharingGetSharedLinkMetadataArgToDB(object: object)
}

func mapDBXSharingGetSharedLinkMetadataArgToDB(object: DBXSharingGetSharedLinkMetadataArg) -> DBSHARINGGetSharedLinkMetadataArg {
    DBSHARINGGetSharedLinkMetadataArg(url: object.url, path: object.path, linkPassword: object.linkPassword)
}

func mapDBXSharingGetSharedLinksArgToDBOptional(object: DBXSharingGetSharedLinksArg?) -> DBSHARINGGetSharedLinksArg? {
    guard let object = object else { return nil }
    return mapDBXSharingGetSharedLinksArgToDB(object: object)
}

func mapDBXSharingGetSharedLinksArgToDB(object: DBXSharingGetSharedLinksArg) -> DBSHARINGGetSharedLinksArg {
    DBSHARINGGetSharedLinksArg(path: object.path)
}

func mapDBXSharingGetSharedLinksErrorToDBOptional(object: DBXSharingGetSharedLinksError?) -> DBSHARINGGetSharedLinksError? {
    guard let object = object else { return nil }
    return mapDBXSharingGetSharedLinksErrorToDB(object: object)
}

func mapDBXSharingGetSharedLinksErrorToDB(object: DBXSharingGetSharedLinksError) -> DBSHARINGGetSharedLinksError {
    if let object = object.asPath {
        let path = object.path
        return DBSHARINGGetSharedLinksError(path: path)
    }
    if object.asOther != nil {
        return DBSHARINGGetSharedLinksError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingGetSharedLinksResultToDBOptional(object: DBXSharingGetSharedLinksResult?) -> DBSHARINGGetSharedLinksResult? {
    guard let object = object else { return nil }
    return mapDBXSharingGetSharedLinksResultToDB(object: object)
}

func mapDBXSharingGetSharedLinksResultToDB(object: DBXSharingGetSharedLinksResult) -> DBSHARINGGetSharedLinksResult {
    DBSHARINGGetSharedLinksResult(links: object.links.compactMap { mapDBXSharingLinkMetadataToDB(object: $0) })
}

func mapDBXSharingGroupInfoToDBOptional(object: DBXSharingGroupInfo?) -> DBSHARINGGroupInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingGroupInfoToDB(object: object)
}

func mapDBXSharingGroupInfoToDB(object: DBXSharingGroupInfo) -> DBSHARINGGroupInfo {
    DBSHARINGGroupInfo(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBXTeamCommonGroupManagementTypeToDB(object: object.groupManagementType),
        groupType: mapDBXTeamCommonGroupTypeToDB(object: object.groupType),
        isMember: object.isMember,
        isOwner: object.isOwner,
        sameTeam: object.sameTeam,
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount
    )
}

func mapDBXSharingMembershipInfoToDBOptional(object: DBXSharingMembershipInfo?) -> DBSHARINGMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingMembershipInfoToDB(object: object)
}

func mapDBXSharingMembershipInfoToDB(object: DBXSharingMembershipInfo) -> DBSHARINGMembershipInfo {
    DBSHARINGMembershipInfo(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        permissions: object.permissions?.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBXSharingGroupMembershipInfoToDBOptional(object: DBXSharingGroupMembershipInfo?) -> DBSHARINGGroupMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingGroupMembershipInfoToDB(object: object)
}

func mapDBXSharingGroupMembershipInfoToDB(object: DBXSharingGroupMembershipInfo) -> DBSHARINGGroupMembershipInfo {
    DBSHARINGGroupMembershipInfo(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        group: mapDBXSharingGroupInfoToDB(object: object.group),
        permissions: object.permissions?.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBXSharingInsufficientPlanToDBOptional(object: DBXSharingInsufficientPlan?) -> DBSHARINGInsufficientPlan? {
    guard let object = object else { return nil }
    return mapDBXSharingInsufficientPlanToDB(object: object)
}

func mapDBXSharingInsufficientPlanToDB(object: DBXSharingInsufficientPlan) -> DBSHARINGInsufficientPlan {
    DBSHARINGInsufficientPlan(message: object.message, upsellUrl: object.upsellUrl)
}

func mapDBXSharingInsufficientQuotaAmountsToDBOptional(object: DBXSharingInsufficientQuotaAmounts?) -> DBSHARINGInsufficientQuotaAmounts? {
    guard let object = object else { return nil }
    return mapDBXSharingInsufficientQuotaAmountsToDB(object: object)
}

func mapDBXSharingInsufficientQuotaAmountsToDB(object: DBXSharingInsufficientQuotaAmounts) -> DBSHARINGInsufficientQuotaAmounts {
    DBSHARINGInsufficientQuotaAmounts(spaceNeeded: object.spaceNeeded, spaceShortage: object.spaceShortage, spaceLeft: object.spaceLeft)
}

func mapDBXSharingInviteeInfoToDBOptional(object: DBXSharingInviteeInfo?) -> DBSHARINGInviteeInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingInviteeInfoToDB(object: object)
}

func mapDBXSharingInviteeInfoToDB(object: DBXSharingInviteeInfo) -> DBSHARINGInviteeInfo {
    if let object = object.asEmail {
        let email = object.email
        return DBSHARINGInviteeInfo(email: email)
    }
    if object.asOther != nil {
        return DBSHARINGInviteeInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingInviteeMembershipInfoToDBOptional(object: DBXSharingInviteeMembershipInfo?) -> DBSHARINGInviteeMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingInviteeMembershipInfoToDB(object: object)
}

func mapDBXSharingInviteeMembershipInfoToDB(object: DBXSharingInviteeMembershipInfo) -> DBSHARINGInviteeMembershipInfo {
    DBSHARINGInviteeMembershipInfo(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        invitee: mapDBXSharingInviteeInfoToDB(object: object.invitee),
        permissions: object.permissions?.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited,
        user: mapDBXSharingUserInfoToDBOptional(object: object.user)
    )
}

func mapDBXSharingJobErrorToDBOptional(object: DBXSharingJobError?) -> DBSHARINGJobError? {
    guard let object = object else { return nil }
    return mapDBXSharingJobErrorToDB(object: object)
}

func mapDBXSharingJobErrorToDB(object: DBXSharingJobError) -> DBSHARINGJobError {
    if let object = object.asUnshareFolderError {
        let unshareFolderError = mapDBXSharingUnshareFolderErrorToDB(object: object.unshareFolderError)
        return DBSHARINGJobError(unshareFolderError: unshareFolderError)
    }
    if let object = object.asRemoveFolderMemberError {
        let removeFolderMemberError = mapDBXSharingRemoveFolderMemberErrorToDB(object: object.removeFolderMemberError)
        return DBSHARINGJobError(removeFolderMemberError: removeFolderMemberError)
    }
    if let object = object.asRelinquishFolderMembershipError {
        let relinquishFolderMembershipError = mapDBXSharingRelinquishFolderMembershipErrorToDB(object: object.relinquishFolderMembershipError)
        return DBSHARINGJobError(relinquishFolderMembershipError: relinquishFolderMembershipError)
    }
    if object.asOther != nil {
        return DBSHARINGJobError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingJobStatusToDBOptional(object: DBXSharingJobStatus?) -> DBSHARINGJobStatus? {
    guard let object = object else { return nil }
    return mapDBXSharingJobStatusToDB(object: object)
}

func mapDBXSharingJobStatusToDB(object: DBXSharingJobStatus) -> DBSHARINGJobStatus {
    if object.asInProgress != nil {
        return DBSHARINGJobStatus(inProgress: ())
    }
    if object.asComplete != nil {
        return DBSHARINGJobStatus(complete: ())
    }
    if let object = object.asFailed {
        let failed = mapDBXSharingJobErrorToDB(object: object.failed)
        return DBSHARINGJobStatus(failed: failed)
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkAccessLevelToDBOptional(object: DBXSharingLinkAccessLevel?) -> DBSHARINGLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkAccessLevelToDB(object: object)
}

func mapDBXSharingLinkAccessLevelToDB(object: DBXSharingLinkAccessLevel) -> DBSHARINGLinkAccessLevel {
    if object.asViewer != nil {
        return DBSHARINGLinkAccessLevel(viewer: ())
    }
    if object.asEditor != nil {
        return DBSHARINGLinkAccessLevel(editor: ())
    }
    if object.asOther != nil {
        return DBSHARINGLinkAccessLevel(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkActionToDBOptional(object: DBXSharingLinkAction?) -> DBSHARINGLinkAction? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkActionToDB(object: object)
}

func mapDBXSharingLinkActionToDB(object: DBXSharingLinkAction) -> DBSHARINGLinkAction {
    if object.asChangeAccessLevel != nil {
        return DBSHARINGLinkAction(changeAccessLevel: ())
    }
    if object.asChangeAudience != nil {
        return DBSHARINGLinkAction(changeAudience: ())
    }
    if object.asRemoveExpiry != nil {
        return DBSHARINGLinkAction(removeExpiry: ())
    }
    if object.asRemovePassword != nil {
        return DBSHARINGLinkAction(removePassword: ())
    }
    if object.asSetExpiry != nil {
        return DBSHARINGLinkAction(setExpiry: ())
    }
    if object.asSetPassword != nil {
        return DBSHARINGLinkAction(setPassword: ())
    }
    if object.asOther != nil {
        return DBSHARINGLinkAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkAudienceToDBOptional(object: DBXSharingLinkAudience?) -> DBSHARINGLinkAudience? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkAudienceToDB(object: object)
}

func mapDBXSharingLinkAudienceToDB(object: DBXSharingLinkAudience) -> DBSHARINGLinkAudience {
    if object.asPublic_ != nil {
        return DBSHARINGLinkAudience(withPublic: ())
    }
    if object.asTeam != nil {
        return DBSHARINGLinkAudience(team: ())
    }
    if object.asNoOne != nil {
        return DBSHARINGLinkAudience(noOne: ())
    }
    if object.asPassword != nil {
        return DBSHARINGLinkAudience(password: ())
    }
    if object.asMembers != nil {
        return DBSHARINGLinkAudience(members: ())
    }
    if object.asOther != nil {
        return DBSHARINGLinkAudience(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingVisibilityPolicyDisallowedReasonToDBOptional(object: DBXSharingVisibilityPolicyDisallowedReason?)
    -> DBSHARINGVisibilityPolicyDisallowedReason? {
    guard let object = object else { return nil }
    return mapDBXSharingVisibilityPolicyDisallowedReasonToDB(object: object)
}

func mapDBXSharingVisibilityPolicyDisallowedReasonToDB(object: DBXSharingVisibilityPolicyDisallowedReason) -> DBSHARINGVisibilityPolicyDisallowedReason {
    if object.asDeleteAndRecreate != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(deleteAndRecreate: ())
    }
    if object.asRestrictedBySharedFolder != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(restrictedBySharedFolder: ())
    }
    if object.asRestrictedByTeam != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(restrictedByTeam: ())
    }
    if object.asUserNotOnTeam != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(userNotOnTeam: ())
    }
    if object.asUserAccountType != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(userAccountType: ())
    }
    if object.asPermissionDenied != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(permissionDenied: ())
    }
    if object.asOther != nil {
        return DBSHARINGVisibilityPolicyDisallowedReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkAudienceDisallowedReasonToDBOptional(object: DBXSharingLinkAudienceDisallowedReason?) -> DBSHARINGLinkAudienceDisallowedReason? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkAudienceDisallowedReasonToDB(object: object)
}

func mapDBXSharingLinkAudienceDisallowedReasonToDB(object: DBXSharingLinkAudienceDisallowedReason) -> DBSHARINGLinkAudienceDisallowedReason {
    if object.asDeleteAndRecreate != nil {
        return DBSHARINGLinkAudienceDisallowedReason(deleteAndRecreate: ())
    }
    if object.asRestrictedBySharedFolder != nil {
        return DBSHARINGLinkAudienceDisallowedReason(restrictedBySharedFolder: ())
    }
    if object.asRestrictedByTeam != nil {
        return DBSHARINGLinkAudienceDisallowedReason(restrictedByTeam: ())
    }
    if object.asUserNotOnTeam != nil {
        return DBSHARINGLinkAudienceDisallowedReason(userNotOnTeam: ())
    }
    if object.asUserAccountType != nil {
        return DBSHARINGLinkAudienceDisallowedReason(userAccountType: ())
    }
    if object.asPermissionDenied != nil {
        return DBSHARINGLinkAudienceDisallowedReason(permissionDenied: ())
    }
    if object.asOther != nil {
        return DBSHARINGLinkAudienceDisallowedReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkAudienceOptionToDBOptional(object: DBXSharingLinkAudienceOption?) -> DBSHARINGLinkAudienceOption? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkAudienceOptionToDB(object: object)
}

func mapDBXSharingLinkAudienceOptionToDB(object: DBXSharingLinkAudienceOption) -> DBSHARINGLinkAudienceOption {
    DBSHARINGLinkAudienceOption(
        audience: mapDBXSharingLinkAudienceToDB(object: object.audience),
        allowed: object.allowed,
        disallowedReason: mapDBXSharingLinkAudienceDisallowedReasonToDBOptional(object: object.disallowedReason)
    )
}

func mapDBXSharingLinkExpiryToDBOptional(object: DBXSharingLinkExpiry?) -> DBSHARINGLinkExpiry? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkExpiryToDB(object: object)
}

func mapDBXSharingLinkExpiryToDB(object: DBXSharingLinkExpiry) -> DBSHARINGLinkExpiry {
    if object.asRemoveExpiry != nil {
        return DBSHARINGLinkExpiry(removeExpiry: ())
    }
    if let object = object.asSetExpiry {
        let setExpiry = object.setExpiry
        return DBSHARINGLinkExpiry(setExpiry: setExpiry)
    }
    if object.asOther != nil {
        return DBSHARINGLinkExpiry(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkPasswordToDBOptional(object: DBXSharingLinkPassword?) -> DBSHARINGLinkPassword? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkPasswordToDB(object: object)
}

func mapDBXSharingLinkPasswordToDB(object: DBXSharingLinkPassword) -> DBSHARINGLinkPassword {
    if object.asRemovePassword != nil {
        return DBSHARINGLinkPassword(removePassword: ())
    }
    if let object = object.asSetPassword {
        let setPassword = object.setPassword
        return DBSHARINGLinkPassword(setPassword: setPassword)
    }
    if object.asOther != nil {
        return DBSHARINGLinkPassword(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingLinkPermissionToDBOptional(object: DBXSharingLinkPermission?) -> DBSHARINGLinkPermission? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkPermissionToDB(object: object)
}

func mapDBXSharingLinkPermissionToDB(object: DBXSharingLinkPermission) -> DBSHARINGLinkPermission {
    DBSHARINGLinkPermission(
        action: mapDBXSharingLinkActionToDB(object: object.action),
        allow: object.allow,
        reason: mapDBXSharingPermissionDeniedReasonToDBOptional(object: object.reason)
    )
}

func mapDBXSharingLinkPermissionsToDBOptional(object: DBXSharingLinkPermissions?) -> DBSHARINGLinkPermissions? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkPermissionsToDB(object: object)
}

func mapDBXSharingLinkPermissionsToDB(object: DBXSharingLinkPermissions) -> DBSHARINGLinkPermissions {
    DBSHARINGLinkPermissions(
        canRevoke: object.canRevoke,
        visibilityPolicies: object.visibilityPolicies.compactMap { mapDBXSharingVisibilityPolicyToDB(object: $0) },
        canSetExpiry: object.canSetExpiry,
        canRemoveExpiry: object.canRemoveExpiry,
        allowDownload: object.allowDownload,
        canAllowDownload: object.canAllowDownload,
        canDisallowDownload: object.canDisallowDownload,
        allowComments: object.allowComments,
        teamRestrictsComments: object.teamRestrictsComments,
        resolvedVisibility: mapDBXSharingResolvedVisibilityToDBOptional(object: object.resolvedVisibility),
        requestedVisibility: mapDBXSharingRequestedVisibilityToDBOptional(object: object.requestedVisibility),
        revokeFailureReason: mapDBXSharingSharedLinkAccessFailureReasonToDBOptional(object: object.revokeFailureReason),
        effectiveAudience: mapDBXSharingLinkAudienceToDBOptional(object: object.effectiveAudience),
        linkAccessLevel: mapDBXSharingLinkAccessLevelToDBOptional(object: object.linkAccessLevel),
        audienceOptions: object.audienceOptions?.compactMap { mapDBXSharingLinkAudienceOptionToDB(object: $0) },
        canSetPassword: object.canSetPassword,
        canRemovePassword: object.canRemovePassword,
        requirePassword: object.requirePassword,
        canUseExtendedSharingControls: object.canUseExtendedSharingControls
    )
}

func mapDBXSharingLinkSettingsToDBOptional(object: DBXSharingLinkSettings?) -> DBSHARINGLinkSettings? {
    guard let object = object else { return nil }
    return mapDBXSharingLinkSettingsToDB(object: object)
}

func mapDBXSharingLinkSettingsToDB(object: DBXSharingLinkSettings) -> DBSHARINGLinkSettings {
    DBSHARINGLinkSettings(
        accessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.accessLevel),
        audience: mapDBXSharingLinkAudienceToDBOptional(object: object.audience),
        expiry: mapDBXSharingLinkExpiryToDBOptional(object: object.expiry),
        password: mapDBXSharingLinkPasswordToDBOptional(object: object.password)
    )
}

func mapDBXSharingListFileMembersArgToDBOptional(object: DBXSharingListFileMembersArg?) -> DBSHARINGListFileMembersArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersArgToDB(object: object)
}

func mapDBXSharingListFileMembersArgToDB(object: DBXSharingListFileMembersArg) -> DBSHARINGListFileMembersArg {
    DBSHARINGListFileMembersArg(
        file: object.file,
        actions: object.actions?.compactMap { mapDBXSharingMemberActionToDB(object: $0) },
        includeInherited: object.includeInherited,
        limit: object.limit
    )
}

func mapDBXSharingListFileMembersBatchArgToDBOptional(object: DBXSharingListFileMembersBatchArg?) -> DBSHARINGListFileMembersBatchArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersBatchArgToDB(object: object)
}

func mapDBXSharingListFileMembersBatchArgToDB(object: DBXSharingListFileMembersBatchArg) -> DBSHARINGListFileMembersBatchArg {
    DBSHARINGListFileMembersBatchArg(files: object.files, limit: object.limit)
}

func mapDBXSharingListFileMembersBatchResultToDBOptional(object: DBXSharingListFileMembersBatchResult?) -> DBSHARINGListFileMembersBatchResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersBatchResultToDB(object: object)
}

func mapDBXSharingListFileMembersBatchResultToDB(object: DBXSharingListFileMembersBatchResult) -> DBSHARINGListFileMembersBatchResult {
    DBSHARINGListFileMembersBatchResult(file: object.file, result: mapDBXSharingListFileMembersIndividualResultToDB(object: object.result))
}

func mapDBXSharingListFileMembersContinueArgToDBOptional(object: DBXSharingListFileMembersContinueArg?) -> DBSHARINGListFileMembersContinueArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersContinueArgToDB(object: object)
}

func mapDBXSharingListFileMembersContinueArgToDB(object: DBXSharingListFileMembersContinueArg) -> DBSHARINGListFileMembersContinueArg {
    DBSHARINGListFileMembersContinueArg(cursor: object.cursor)
}

func mapDBXSharingListFileMembersContinueErrorToDBOptional(object: DBXSharingListFileMembersContinueError?) -> DBSHARINGListFileMembersContinueError? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersContinueErrorToDB(object: object)
}

func mapDBXSharingListFileMembersContinueErrorToDB(object: DBXSharingListFileMembersContinueError) -> DBSHARINGListFileMembersContinueError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGListFileMembersContinueError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGListFileMembersContinueError(accessError: accessError)
    }
    if object.asInvalidCursor != nil {
        return DBSHARINGListFileMembersContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBSHARINGListFileMembersContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFileMembersCountResultToDBOptional(object: DBXSharingListFileMembersCountResult?) -> DBSHARINGListFileMembersCountResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersCountResultToDB(object: object)
}

func mapDBXSharingListFileMembersCountResultToDB(object: DBXSharingListFileMembersCountResult) -> DBSHARINGListFileMembersCountResult {
    DBSHARINGListFileMembersCountResult(members: mapDBXSharingSharedFileMembersToDB(object: object.members), memberCount: object.memberCount)
}

func mapDBXSharingListFileMembersErrorToDBOptional(object: DBXSharingListFileMembersError?) -> DBSHARINGListFileMembersError? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersErrorToDB(object: object)
}

func mapDBXSharingListFileMembersErrorToDB(object: DBXSharingListFileMembersError) -> DBSHARINGListFileMembersError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGListFileMembersError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGListFileMembersError(accessError: accessError)
    }
    if object.asOther != nil {
        return DBSHARINGListFileMembersError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFileMembersIndividualResultToDBOptional(object: DBXSharingListFileMembersIndividualResult?) -> DBSHARINGListFileMembersIndividualResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListFileMembersIndividualResultToDB(object: object)
}

func mapDBXSharingListFileMembersIndividualResultToDB(object: DBXSharingListFileMembersIndividualResult) -> DBSHARINGListFileMembersIndividualResult {
    if let object = object.asResult {
        let result = mapDBXSharingListFileMembersCountResultToDB(object: object.result)
        return DBSHARINGListFileMembersIndividualResult(result: result)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGListFileMembersIndividualResult(accessError: accessError)
    }
    if object.asOther != nil {
        return DBSHARINGListFileMembersIndividualResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFilesArgToDBOptional(object: DBXSharingListFilesArg?) -> DBSHARINGListFilesArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFilesArgToDB(object: object)
}

func mapDBXSharingListFilesArgToDB(object: DBXSharingListFilesArg) -> DBSHARINGListFilesArg {
    DBSHARINGListFilesArg(limit: object.limit, actions: object.actions?.compactMap { mapDBXSharingFileActionToDB(object: $0) })
}

func mapDBXSharingListFilesContinueArgToDBOptional(object: DBXSharingListFilesContinueArg?) -> DBSHARINGListFilesContinueArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFilesContinueArgToDB(object: object)
}

func mapDBXSharingListFilesContinueArgToDB(object: DBXSharingListFilesContinueArg) -> DBSHARINGListFilesContinueArg {
    DBSHARINGListFilesContinueArg(cursor: object.cursor)
}

func mapDBXSharingListFilesContinueErrorToDBOptional(object: DBXSharingListFilesContinueError?) -> DBSHARINGListFilesContinueError? {
    guard let object = object else { return nil }
    return mapDBXSharingListFilesContinueErrorToDB(object: object)
}

func mapDBXSharingListFilesContinueErrorToDB(object: DBXSharingListFilesContinueError) -> DBSHARINGListFilesContinueError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGListFilesContinueError(userError: userError)
    }
    if object.asInvalidCursor != nil {
        return DBSHARINGListFilesContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBSHARINGListFilesContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFilesResultToDBOptional(object: DBXSharingListFilesResult?) -> DBSHARINGListFilesResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListFilesResultToDB(object: object)
}

func mapDBXSharingListFilesResultToDB(object: DBXSharingListFilesResult) -> DBSHARINGListFilesResult {
    DBSHARINGListFilesResult(entries: object.entries.compactMap { mapDBXSharingSharedFileMetadataToDB(object: $0) }, cursor: object.cursor)
}

func mapDBXSharingListFolderMembersCursorArgToDBOptional(object: DBXSharingListFolderMembersCursorArg?) -> DBSHARINGListFolderMembersCursorArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFolderMembersCursorArgToDB(object: object)
}

func mapDBXSharingListFolderMembersCursorArgToDB(object: DBXSharingListFolderMembersCursorArg) -> DBSHARINGListFolderMembersCursorArg {
    DBSHARINGListFolderMembersCursorArg(actions: object.actions?.compactMap { mapDBXSharingMemberActionToDB(object: $0) }, limit: object.limit)
}

func mapDBXSharingListFolderMembersArgsToDBOptional(object: DBXSharingListFolderMembersArgs?) -> DBSHARINGListFolderMembersArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingListFolderMembersArgsToDB(object: object)
}

func mapDBXSharingListFolderMembersArgsToDB(object: DBXSharingListFolderMembersArgs) -> DBSHARINGListFolderMembersArgs {
    DBSHARINGListFolderMembersArgs(
        sharedFolderId: object.sharedFolderId,
        actions: object.actions?.compactMap { mapDBXSharingMemberActionToDB(object: $0) },
        limit: object.limit
    )
}

func mapDBXSharingListFolderMembersContinueArgToDBOptional(object: DBXSharingListFolderMembersContinueArg?) -> DBSHARINGListFolderMembersContinueArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFolderMembersContinueArgToDB(object: object)
}

func mapDBXSharingListFolderMembersContinueArgToDB(object: DBXSharingListFolderMembersContinueArg) -> DBSHARINGListFolderMembersContinueArg {
    DBSHARINGListFolderMembersContinueArg(cursor: object.cursor)
}

func mapDBXSharingListFolderMembersContinueErrorToDBOptional(object: DBXSharingListFolderMembersContinueError?) -> DBSHARINGListFolderMembersContinueError? {
    guard let object = object else { return nil }
    return mapDBXSharingListFolderMembersContinueErrorToDB(object: object)
}

func mapDBXSharingListFolderMembersContinueErrorToDB(object: DBXSharingListFolderMembersContinueError) -> DBSHARINGListFolderMembersContinueError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGListFolderMembersContinueError(accessError: accessError)
    }
    if object.asInvalidCursor != nil {
        return DBSHARINGListFolderMembersContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBSHARINGListFolderMembersContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFoldersArgsToDBOptional(object: DBXSharingListFoldersArgs?) -> DBSHARINGListFoldersArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingListFoldersArgsToDB(object: object)
}

func mapDBXSharingListFoldersArgsToDB(object: DBXSharingListFoldersArgs) -> DBSHARINGListFoldersArgs {
    DBSHARINGListFoldersArgs(limit: object.limit, actions: object.actions?.compactMap { mapDBXSharingFolderActionToDB(object: $0) })
}

func mapDBXSharingListFoldersContinueArgToDBOptional(object: DBXSharingListFoldersContinueArg?) -> DBSHARINGListFoldersContinueArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListFoldersContinueArgToDB(object: object)
}

func mapDBXSharingListFoldersContinueArgToDB(object: DBXSharingListFoldersContinueArg) -> DBSHARINGListFoldersContinueArg {
    DBSHARINGListFoldersContinueArg(cursor: object.cursor)
}

func mapDBXSharingListFoldersContinueErrorToDBOptional(object: DBXSharingListFoldersContinueError?) -> DBSHARINGListFoldersContinueError? {
    guard let object = object else { return nil }
    return mapDBXSharingListFoldersContinueErrorToDB(object: object)
}

func mapDBXSharingListFoldersContinueErrorToDB(object: DBXSharingListFoldersContinueError) -> DBSHARINGListFoldersContinueError {
    if object.asInvalidCursor != nil {
        return DBSHARINGListFoldersContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBSHARINGListFoldersContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListFoldersResultToDBOptional(object: DBXSharingListFoldersResult?) -> DBSHARINGListFoldersResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListFoldersResultToDB(object: object)
}

func mapDBXSharingListFoldersResultToDB(object: DBXSharingListFoldersResult) -> DBSHARINGListFoldersResult {
    DBSHARINGListFoldersResult(entries: object.entries.compactMap { mapDBXSharingSharedFolderMetadataToDB(object: $0) }, cursor: object.cursor)
}

func mapDBXSharingListSharedLinksArgToDBOptional(object: DBXSharingListSharedLinksArg?) -> DBSHARINGListSharedLinksArg? {
    guard let object = object else { return nil }
    return mapDBXSharingListSharedLinksArgToDB(object: object)
}

func mapDBXSharingListSharedLinksArgToDB(object: DBXSharingListSharedLinksArg) -> DBSHARINGListSharedLinksArg {
    DBSHARINGListSharedLinksArg(path: object.path, cursor: object.cursor, directOnly: object.directOnly)
}

func mapDBXSharingListSharedLinksErrorToDBOptional(object: DBXSharingListSharedLinksError?) -> DBSHARINGListSharedLinksError? {
    guard let object = object else { return nil }
    return mapDBXSharingListSharedLinksErrorToDB(object: object)
}

func mapDBXSharingListSharedLinksErrorToDB(object: DBXSharingListSharedLinksError) -> DBSHARINGListSharedLinksError {
    if let object = object.asPath {
        let path = mapDBXFilesLookupErrorToDB(object: object.path)
        return DBSHARINGListSharedLinksError(path: path)
    }
    if object.asReset != nil {
        return DBSHARINGListSharedLinksError(reset: ())
    }
    if object.asOther != nil {
        return DBSHARINGListSharedLinksError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingListSharedLinksResultToDBOptional(object: DBXSharingListSharedLinksResult?) -> DBSHARINGListSharedLinksResult? {
    guard let object = object else { return nil }
    return mapDBXSharingListSharedLinksResultToDB(object: object)
}

func mapDBXSharingListSharedLinksResultToDB(object: DBXSharingListSharedLinksResult) -> DBSHARINGListSharedLinksResult {
    DBSHARINGListSharedLinksResult(
        links: object.links.compactMap { mapDBXSharingSharedLinkMetadataToDB(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBXSharingMemberAccessLevelResultToDBOptional(object: DBXSharingMemberAccessLevelResult?) -> DBSHARINGMemberAccessLevelResult? {
    guard let object = object else { return nil }
    return mapDBXSharingMemberAccessLevelResultToDB(object: object)
}

func mapDBXSharingMemberAccessLevelResultToDB(object: DBXSharingMemberAccessLevelResult) -> DBSHARINGMemberAccessLevelResult {
    DBSHARINGMemberAccessLevelResult(
        accessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.accessLevel),
        warning: object.warning,
        accessDetails: object.accessDetails?.compactMap { mapDBXSharingParentFolderAccessInfoToDB(object: $0) }
    )
}

func mapDBXSharingMemberActionToDBOptional(object: DBXSharingMemberAction?) -> DBSHARINGMemberAction? {
    guard let object = object else { return nil }
    return mapDBXSharingMemberActionToDB(object: object)
}

func mapDBXSharingMemberActionToDB(object: DBXSharingMemberAction) -> DBSHARINGMemberAction {
    if object.asLeaveACopy != nil {
        return DBSHARINGMemberAction(leaveACopy: ())
    }
    if object.asMakeEditor != nil {
        return DBSHARINGMemberAction(makeEditor: ())
    }
    if object.asMakeOwner != nil {
        return DBSHARINGMemberAction(makeOwner: ())
    }
    if object.asMakeViewer != nil {
        return DBSHARINGMemberAction(makeViewer: ())
    }
    if object.asMakeViewerNoComment != nil {
        return DBSHARINGMemberAction(makeViewerNoComment: ())
    }
    if object.asRemove != nil {
        return DBSHARINGMemberAction(remove: ())
    }
    if object.asOther != nil {
        return DBSHARINGMemberAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingMemberPermissionToDBOptional(object: DBXSharingMemberPermission?) -> DBSHARINGMemberPermission? {
    guard let object = object else { return nil }
    return mapDBXSharingMemberPermissionToDB(object: object)
}

func mapDBXSharingMemberPermissionToDB(object: DBXSharingMemberPermission) -> DBSHARINGMemberPermission {
    DBSHARINGMemberPermission(
        action: mapDBXSharingMemberActionToDB(object: object.action),
        allow: object.allow,
        reason: mapDBXSharingPermissionDeniedReasonToDBOptional(object: object.reason)
    )
}

func mapDBXSharingMemberPolicyToDBOptional(object: DBXSharingMemberPolicy?) -> DBSHARINGMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingMemberPolicyToDB(object: object)
}

func mapDBXSharingMemberPolicyToDB(object: DBXSharingMemberPolicy) -> DBSHARINGMemberPolicy {
    if object.asTeam != nil {
        return DBSHARINGMemberPolicy(team: ())
    }
    if object.asAnyone != nil {
        return DBSHARINGMemberPolicy(anyone: ())
    }
    if object.asOther != nil {
        return DBSHARINGMemberPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingMemberSelectorToDBOptional(object: DBXSharingMemberSelector?) -> DBSHARINGMemberSelector? {
    guard let object = object else { return nil }
    return mapDBXSharingMemberSelectorToDB(object: object)
}

func mapDBXSharingMemberSelectorToDB(object: DBXSharingMemberSelector) -> DBSHARINGMemberSelector {
    if let object = object.asDropboxId {
        let dropboxId = object.dropboxId
        return DBSHARINGMemberSelector(dropboxId: dropboxId)
    }
    if let object = object.asEmail {
        let email = object.email
        return DBSHARINGMemberSelector(email: email)
    }
    if object.asOther != nil {
        return DBSHARINGMemberSelector(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingModifySharedLinkSettingsArgsToDBOptional(object: DBXSharingModifySharedLinkSettingsArgs?) -> DBSHARINGModifySharedLinkSettingsArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingModifySharedLinkSettingsArgsToDB(object: object)
}

func mapDBXSharingModifySharedLinkSettingsArgsToDB(object: DBXSharingModifySharedLinkSettingsArgs) -> DBSHARINGModifySharedLinkSettingsArgs {
    DBSHARINGModifySharedLinkSettingsArgs(
        url: object.url,
        settings: mapDBXSharingSharedLinkSettingsToDB(object: object.settings),
        removeExpiration: object.removeExpiration
    )
}

func mapDBXSharingModifySharedLinkSettingsErrorToDBOptional(object: DBXSharingModifySharedLinkSettingsError?) -> DBSHARINGModifySharedLinkSettingsError? {
    guard let object = object else { return nil }
    return mapDBXSharingModifySharedLinkSettingsErrorToDB(object: object)
}

func mapDBXSharingModifySharedLinkSettingsErrorToDB(object: DBXSharingModifySharedLinkSettingsError) -> DBSHARINGModifySharedLinkSettingsError {
    if object.asSharedLinkNotFound != nil {
        return DBSHARINGModifySharedLinkSettingsError(sharedLinkNotFound: ())
    }
    if object.asSharedLinkAccessDenied != nil {
        return DBSHARINGModifySharedLinkSettingsError(sharedLinkAccessDenied: ())
    }
    if object.asUnsupportedLinkType != nil {
        return DBSHARINGModifySharedLinkSettingsError(unsupportedLinkType: ())
    }
    if object.asOther != nil {
        return DBSHARINGModifySharedLinkSettingsError(other: ())
    }
    if let object = object.asSettingsError {
        let settingsError = mapDBXSharingSharedLinkSettingsErrorToDB(object: object.settingsError)
        return DBSHARINGModifySharedLinkSettingsError(settingsError: settingsError)
    }
    if object.asEmailNotVerified != nil {
        return DBSHARINGModifySharedLinkSettingsError(emailNotVerified: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingMountFolderArgToDBOptional(object: DBXSharingMountFolderArg?) -> DBSHARINGMountFolderArg? {
    guard let object = object else { return nil }
    return mapDBXSharingMountFolderArgToDB(object: object)
}

func mapDBXSharingMountFolderArgToDB(object: DBXSharingMountFolderArg) -> DBSHARINGMountFolderArg {
    DBSHARINGMountFolderArg(sharedFolderId: object.sharedFolderId)
}

func mapDBXSharingMountFolderErrorToDBOptional(object: DBXSharingMountFolderError?) -> DBSHARINGMountFolderError? {
    guard let object = object else { return nil }
    return mapDBXSharingMountFolderErrorToDB(object: object)
}

func mapDBXSharingMountFolderErrorToDB(object: DBXSharingMountFolderError) -> DBSHARINGMountFolderError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGMountFolderError(accessError: accessError)
    }
    if object.asInsideSharedFolder != nil {
        return DBSHARINGMountFolderError(insideSharedFolder: ())
    }
    if let object = object.asInsufficientQuota {
        let insufficientQuota = mapDBXSharingInsufficientQuotaAmountsToDB(object: object.insufficientQuota)
        return DBSHARINGMountFolderError(insufficientQuota: insufficientQuota)
    }
    if object.asAlreadyMounted != nil {
        return DBSHARINGMountFolderError(alreadyMounted: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGMountFolderError(noPermission: ())
    }
    if object.asNotMountable != nil {
        return DBSHARINGMountFolderError(notMountable: ())
    }
    if object.asOther != nil {
        return DBSHARINGMountFolderError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingParentFolderAccessInfoToDBOptional(object: DBXSharingParentFolderAccessInfo?) -> DBSHARINGParentFolderAccessInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingParentFolderAccessInfoToDB(object: object)
}

func mapDBXSharingParentFolderAccessInfoToDB(object: DBXSharingParentFolderAccessInfo) -> DBSHARINGParentFolderAccessInfo {
    DBSHARINGParentFolderAccessInfo(
        folderName: object.folderName,
        sharedFolderId: object.sharedFolderId,
        permissions: object.permissions.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        path: object.path
    )
}

func mapDBXSharingPathLinkMetadataToDBOptional(object: DBXSharingPathLinkMetadata?) -> DBSHARINGPathLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingPathLinkMetadataToDB(object: object)
}

func mapDBXSharingPathLinkMetadataToDB(object: DBXSharingPathLinkMetadata) -> DBSHARINGPathLinkMetadata {
    DBSHARINGPathLinkMetadata(url: object.url, visibility: mapDBXSharingVisibilityToDB(object: object.visibility), path: object.path, expires: object.expires)
}

func mapDBXSharingPendingUploadModeToDBOptional(object: DBXSharingPendingUploadMode?) -> DBSHARINGPendingUploadMode? {
    guard let object = object else { return nil }
    return mapDBXSharingPendingUploadModeToDB(object: object)
}

func mapDBXSharingPendingUploadModeToDB(object: DBXSharingPendingUploadMode) -> DBSHARINGPendingUploadMode {
    if object.asFile != nil {
        return DBSHARINGPendingUploadMode(file: ())
    }
    if object.asFolder != nil {
        return DBSHARINGPendingUploadMode(folder: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingPermissionDeniedReasonToDBOptional(object: DBXSharingPermissionDeniedReason?) -> DBSHARINGPermissionDeniedReason? {
    guard let object = object else { return nil }
    return mapDBXSharingPermissionDeniedReasonToDB(object: object)
}

func mapDBXSharingPermissionDeniedReasonToDB(object: DBXSharingPermissionDeniedReason) -> DBSHARINGPermissionDeniedReason {
    if object.asUserNotSameTeamAsOwner != nil {
        return DBSHARINGPermissionDeniedReason(userNotSameTeamAsOwner: ())
    }
    if object.asUserNotAllowedByOwner != nil {
        return DBSHARINGPermissionDeniedReason(userNotAllowedByOwner: ())
    }
    if object.asTargetIsIndirectMember != nil {
        return DBSHARINGPermissionDeniedReason(targetIsIndirectMember: ())
    }
    if object.asTargetIsOwner != nil {
        return DBSHARINGPermissionDeniedReason(targetIsOwner: ())
    }
    if object.asTargetIsSelf != nil {
        return DBSHARINGPermissionDeniedReason(targetIsSelf: ())
    }
    if object.asTargetNotActive != nil {
        return DBSHARINGPermissionDeniedReason(targetNotActive: ())
    }
    if object.asFolderIsLimitedTeamFolder != nil {
        return DBSHARINGPermissionDeniedReason(folderIsLimitedTeamFolder: ())
    }
    if object.asOwnerNotOnTeam != nil {
        return DBSHARINGPermissionDeniedReason(ownerNotOnTeam: ())
    }
    if object.asPermissionDenied != nil {
        return DBSHARINGPermissionDeniedReason(permissionDenied: ())
    }
    if object.asRestrictedByTeam != nil {
        return DBSHARINGPermissionDeniedReason(restrictedByTeam: ())
    }
    if object.asUserAccountType != nil {
        return DBSHARINGPermissionDeniedReason(userAccountType: ())
    }
    if object.asUserNotOnTeam != nil {
        return DBSHARINGPermissionDeniedReason(userNotOnTeam: ())
    }
    if object.asFolderIsInsideSharedFolder != nil {
        return DBSHARINGPermissionDeniedReason(folderIsInsideSharedFolder: ())
    }
    if object.asRestrictedByParentFolder != nil {
        return DBSHARINGPermissionDeniedReason(restrictedByParentFolder: ())
    }
    if let object = object.asInsufficientPlan {
        let insufficientPlan = mapDBXSharingInsufficientPlanToDB(object: object.insufficientPlan)
        return DBSHARINGPermissionDeniedReason(insufficientPlan: insufficientPlan)
    }
    if object.asOther != nil {
        return DBSHARINGPermissionDeniedReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRelinquishFileMembershipArgToDBOptional(object: DBXSharingRelinquishFileMembershipArg?) -> DBSHARINGRelinquishFileMembershipArg? {
    guard let object = object else { return nil }
    return mapDBXSharingRelinquishFileMembershipArgToDB(object: object)
}

func mapDBXSharingRelinquishFileMembershipArgToDB(object: DBXSharingRelinquishFileMembershipArg) -> DBSHARINGRelinquishFileMembershipArg {
    DBSHARINGRelinquishFileMembershipArg(file: object.file)
}

func mapDBXSharingRelinquishFileMembershipErrorToDBOptional(object: DBXSharingRelinquishFileMembershipError?) -> DBSHARINGRelinquishFileMembershipError? {
    guard let object = object else { return nil }
    return mapDBXSharingRelinquishFileMembershipErrorToDB(object: object)
}

func mapDBXSharingRelinquishFileMembershipErrorToDB(object: DBXSharingRelinquishFileMembershipError) -> DBSHARINGRelinquishFileMembershipError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGRelinquishFileMembershipError(accessError: accessError)
    }
    if object.asGroupAccess != nil {
        return DBSHARINGRelinquishFileMembershipError(groupAccess: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGRelinquishFileMembershipError(noPermission: ())
    }
    if object.asOther != nil {
        return DBSHARINGRelinquishFileMembershipError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRelinquishFolderMembershipArgToDBOptional(object: DBXSharingRelinquishFolderMembershipArg?) -> DBSHARINGRelinquishFolderMembershipArg? {
    guard let object = object else { return nil }
    return mapDBXSharingRelinquishFolderMembershipArgToDB(object: object)
}

func mapDBXSharingRelinquishFolderMembershipArgToDB(object: DBXSharingRelinquishFolderMembershipArg) -> DBSHARINGRelinquishFolderMembershipArg {
    DBSHARINGRelinquishFolderMembershipArg(sharedFolderId: object.sharedFolderId, leaveACopy: object.leaveACopy)
}

func mapDBXSharingRelinquishFolderMembershipErrorToDBOptional(object: DBXSharingRelinquishFolderMembershipError?) -> DBSHARINGRelinquishFolderMembershipError? {
    guard let object = object else { return nil }
    return mapDBXSharingRelinquishFolderMembershipErrorToDB(object: object)
}

func mapDBXSharingRelinquishFolderMembershipErrorToDB(object: DBXSharingRelinquishFolderMembershipError) -> DBSHARINGRelinquishFolderMembershipError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGRelinquishFolderMembershipError(accessError: accessError)
    }
    if object.asFolderOwner != nil {
        return DBSHARINGRelinquishFolderMembershipError(folderOwner: ())
    }
    if object.asMounted != nil {
        return DBSHARINGRelinquishFolderMembershipError(mounted: ())
    }
    if object.asGroupAccess != nil {
        return DBSHARINGRelinquishFolderMembershipError(groupAccess: ())
    }
    if object.asTeamFolder != nil {
        return DBSHARINGRelinquishFolderMembershipError(teamFolder: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGRelinquishFolderMembershipError(noPermission: ())
    }
    if object.asNoExplicitAccess != nil {
        return DBSHARINGRelinquishFolderMembershipError(noExplicitAccess: ())
    }
    if object.asOther != nil {
        return DBSHARINGRelinquishFolderMembershipError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRemoveFileMemberArgToDBOptional(object: DBXSharingRemoveFileMemberArg?) -> DBSHARINGRemoveFileMemberArg? {
    guard let object = object else { return nil }
    return mapDBXSharingRemoveFileMemberArgToDB(object: object)
}

func mapDBXSharingRemoveFileMemberArgToDB(object: DBXSharingRemoveFileMemberArg) -> DBSHARINGRemoveFileMemberArg {
    DBSHARINGRemoveFileMemberArg(file: object.file, member: mapDBXSharingMemberSelectorToDB(object: object.member))
}

func mapDBXSharingRemoveFileMemberErrorToDBOptional(object: DBXSharingRemoveFileMemberError?) -> DBSHARINGRemoveFileMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingRemoveFileMemberErrorToDB(object: object)
}

func mapDBXSharingRemoveFileMemberErrorToDB(object: DBXSharingRemoveFileMemberError) -> DBSHARINGRemoveFileMemberError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGRemoveFileMemberError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGRemoveFileMemberError(accessError: accessError)
    }
    if let object = object.asNoExplicitAccess {
        let noExplicitAccess = mapDBXSharingMemberAccessLevelResultToDB(object: object.noExplicitAccess)
        return DBSHARINGRemoveFileMemberError(noExplicitAccess: noExplicitAccess)
    }
    if object.asOther != nil {
        return DBSHARINGRemoveFileMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRemoveFolderMemberArgToDBOptional(object: DBXSharingRemoveFolderMemberArg?) -> DBSHARINGRemoveFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBXSharingRemoveFolderMemberArgToDB(object: object)
}

func mapDBXSharingRemoveFolderMemberArgToDB(object: DBXSharingRemoveFolderMemberArg) -> DBSHARINGRemoveFolderMemberArg {
    DBSHARINGRemoveFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        leaveACopy: object.leaveACopy
    )
}

func mapDBXSharingRemoveFolderMemberErrorToDBOptional(object: DBXSharingRemoveFolderMemberError?) -> DBSHARINGRemoveFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingRemoveFolderMemberErrorToDB(object: object)
}

func mapDBXSharingRemoveFolderMemberErrorToDB(object: DBXSharingRemoveFolderMemberError) -> DBSHARINGRemoveFolderMemberError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGRemoveFolderMemberError(accessError: accessError)
    }
    if let object = object.asMemberError {
        let memberError = mapDBXSharingSharedFolderMemberErrorToDB(object: object.memberError)
        return DBSHARINGRemoveFolderMemberError(memberError: memberError)
    }
    if object.asFolderOwner != nil {
        return DBSHARINGRemoveFolderMemberError(folderOwner: ())
    }
    if object.asGroupAccess != nil {
        return DBSHARINGRemoveFolderMemberError(groupAccess: ())
    }
    if object.asTeamFolder != nil {
        return DBSHARINGRemoveFolderMemberError(teamFolder: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGRemoveFolderMemberError(noPermission: ())
    }
    if object.asTooManyFiles != nil {
        return DBSHARINGRemoveFolderMemberError(tooManyFiles: ())
    }
    if object.asOther != nil {
        return DBSHARINGRemoveFolderMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRemoveMemberJobStatusToDBOptional(object: DBXSharingRemoveMemberJobStatus?) -> DBSHARINGRemoveMemberJobStatus? {
    guard let object = object else { return nil }
    return mapDBXSharingRemoveMemberJobStatusToDB(object: object)
}

func mapDBXSharingRemoveMemberJobStatusToDB(object: DBXSharingRemoveMemberJobStatus) -> DBSHARINGRemoveMemberJobStatus {
    if object.asInProgress != nil {
        return DBSHARINGRemoveMemberJobStatus(inProgress: ())
    }
    if let object = object.asComplete {
        let complete = mapDBXSharingMemberAccessLevelResultToDB(object: object.complete)
        return DBSHARINGRemoveMemberJobStatus(complete: complete)
    }
    if let object = object.asFailed {
        let failed = mapDBXSharingRemoveFolderMemberErrorToDB(object: object.failed)
        return DBSHARINGRemoveMemberJobStatus(failed: failed)
    }
    fatalError("codegen error")
}

func mapDBXSharingRequestedLinkAccessLevelToDBOptional(object: DBXSharingRequestedLinkAccessLevel?) -> DBSHARINGRequestedLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBXSharingRequestedLinkAccessLevelToDB(object: object)
}

func mapDBXSharingRequestedLinkAccessLevelToDB(object: DBXSharingRequestedLinkAccessLevel) -> DBSHARINGRequestedLinkAccessLevel {
    if object.asViewer != nil {
        return DBSHARINGRequestedLinkAccessLevel(viewer: ())
    }
    if object.asEditor != nil {
        return DBSHARINGRequestedLinkAccessLevel(editor: ())
    }
    if object.asMax != nil {
        return DBSHARINGRequestedLinkAccessLevel(max: ())
    }
    if object.asDefault_ != nil {
        return DBSHARINGRequestedLinkAccessLevel(default_: ())
    }
    if object.asOther != nil {
        return DBSHARINGRequestedLinkAccessLevel(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingRevokeSharedLinkArgToDBOptional(object: DBXSharingRevokeSharedLinkArg?) -> DBSHARINGRevokeSharedLinkArg? {
    guard let object = object else { return nil }
    return mapDBXSharingRevokeSharedLinkArgToDB(object: object)
}

func mapDBXSharingRevokeSharedLinkArgToDB(object: DBXSharingRevokeSharedLinkArg) -> DBSHARINGRevokeSharedLinkArg {
    DBSHARINGRevokeSharedLinkArg(url: object.url)
}

func mapDBXSharingRevokeSharedLinkErrorToDBOptional(object: DBXSharingRevokeSharedLinkError?) -> DBSHARINGRevokeSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBXSharingRevokeSharedLinkErrorToDB(object: object)
}

func mapDBXSharingRevokeSharedLinkErrorToDB(object: DBXSharingRevokeSharedLinkError) -> DBSHARINGRevokeSharedLinkError {
    if object.asSharedLinkNotFound != nil {
        return DBSHARINGRevokeSharedLinkError(sharedLinkNotFound: ())
    }
    if object.asSharedLinkAccessDenied != nil {
        return DBSHARINGRevokeSharedLinkError(sharedLinkAccessDenied: ())
    }
    if object.asUnsupportedLinkType != nil {
        return DBSHARINGRevokeSharedLinkError(unsupportedLinkType: ())
    }
    if object.asOther != nil {
        return DBSHARINGRevokeSharedLinkError(other: ())
    }
    if object.asSharedLinkMalformed != nil {
        return DBSHARINGRevokeSharedLinkError(sharedLinkMalformed: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSetAccessInheritanceArgToDBOptional(object: DBXSharingSetAccessInheritanceArg?) -> DBSHARINGSetAccessInheritanceArg? {
    guard let object = object else { return nil }
    return mapDBXSharingSetAccessInheritanceArgToDB(object: object)
}

func mapDBXSharingSetAccessInheritanceArgToDB(object: DBXSharingSetAccessInheritanceArg) -> DBSHARINGSetAccessInheritanceArg {
    DBSHARINGSetAccessInheritanceArg(
        sharedFolderId: object.sharedFolderId,
        accessInheritance: mapDBXSharingAccessInheritanceToDB(object: object.accessInheritance)
    )
}

func mapDBXSharingSetAccessInheritanceErrorToDBOptional(object: DBXSharingSetAccessInheritanceError?) -> DBSHARINGSetAccessInheritanceError? {
    guard let object = object else { return nil }
    return mapDBXSharingSetAccessInheritanceErrorToDB(object: object)
}

func mapDBXSharingSetAccessInheritanceErrorToDB(object: DBXSharingSetAccessInheritanceError) -> DBSHARINGSetAccessInheritanceError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGSetAccessInheritanceError(accessError: accessError)
    }
    if object.asNoPermission != nil {
        return DBSHARINGSetAccessInheritanceError(noPermission: ())
    }
    if object.asOther != nil {
        return DBSHARINGSetAccessInheritanceError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingShareFolderArgBaseToDBOptional(object: DBXSharingShareFolderArgBase?) -> DBSHARINGShareFolderArgBase? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderArgBaseToDB(object: object)
}

func mapDBXSharingShareFolderArgBaseToDB(object: DBXSharingShareFolderArgBase) -> DBSHARINGShareFolderArgBase {
    DBSHARINGShareFolderArgBase(
        path: object.path,
        aclUpdatePolicy: mapDBXSharingAclUpdatePolicyToDBOptional(object: object.aclUpdatePolicy),
        forceAsync: object.forceAsync,
        memberPolicy: mapDBXSharingMemberPolicyToDBOptional(object: object.memberPolicy),
        sharedLinkPolicy: mapDBXSharingSharedLinkPolicyToDBOptional(object: object.sharedLinkPolicy),
        viewerInfoPolicy: mapDBXSharingViewerInfoPolicyToDBOptional(object: object.viewerInfoPolicy),
        accessInheritance: mapDBXSharingAccessInheritanceToDB(object: object.accessInheritance)
    )
}

func mapDBXSharingShareFolderArgToDBOptional(object: DBXSharingShareFolderArg?) -> DBSHARINGShareFolderArg? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderArgToDB(object: object)
}

func mapDBXSharingShareFolderArgToDB(object: DBXSharingShareFolderArg) -> DBSHARINGShareFolderArg {
    DBSHARINGShareFolderArg(
        path: object.path,
        aclUpdatePolicy: mapDBXSharingAclUpdatePolicyToDBOptional(object: object.aclUpdatePolicy),
        forceAsync: object.forceAsync,
        memberPolicy: mapDBXSharingMemberPolicyToDBOptional(object: object.memberPolicy),
        sharedLinkPolicy: mapDBXSharingSharedLinkPolicyToDBOptional(object: object.sharedLinkPolicy),
        viewerInfoPolicy: mapDBXSharingViewerInfoPolicyToDBOptional(object: object.viewerInfoPolicy),
        accessInheritance: mapDBXSharingAccessInheritanceToDB(object: object.accessInheritance),
        actions: object.actions?.compactMap { mapDBXSharingFolderActionToDB(object: $0) },
        linkSettings: mapDBXSharingLinkSettingsToDBOptional(object: object.linkSettings)
    )
}

func mapDBXSharingShareFolderErrorBaseToDBOptional(object: DBXSharingShareFolderErrorBase?) -> DBSHARINGShareFolderErrorBase? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderErrorBaseToDB(object: object)
}

func mapDBXSharingShareFolderErrorBaseToDB(object: DBXSharingShareFolderErrorBase) -> DBSHARINGShareFolderErrorBase {
    if object.asEmailUnverified != nil {
        return DBSHARINGShareFolderErrorBase(emailUnverified: ())
    }
    if let object = object.asBadPath {
        let badPath = mapDBXSharingSharePathErrorToDB(object: object.badPath)
        return DBSHARINGShareFolderErrorBase(badPath: badPath)
    }
    if object.asTeamPolicyDisallowsMemberPolicy != nil {
        return DBSHARINGShareFolderErrorBase(teamPolicyDisallowsMemberPolicy: ())
    }
    if object.asDisallowedSharedLinkPolicy != nil {
        return DBSHARINGShareFolderErrorBase(disallowedSharedLinkPolicy: ())
    }
    if object.asOther != nil {
        return DBSHARINGShareFolderErrorBase(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingShareFolderErrorToDBOptional(object: DBXSharingShareFolderError?) -> DBSHARINGShareFolderError? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderErrorToDB(object: object)
}

func mapDBXSharingShareFolderErrorToDB(object: DBXSharingShareFolderError) -> DBSHARINGShareFolderError {
    if object.asEmailUnverified != nil {
        return DBSHARINGShareFolderError(emailUnverified: ())
    }
    if let object = object.asBadPath {
        let badPath = mapDBXSharingSharePathErrorToDB(object: object.badPath)
        return DBSHARINGShareFolderError(badPath: badPath)
    }
    if object.asTeamPolicyDisallowsMemberPolicy != nil {
        return DBSHARINGShareFolderError(teamPolicyDisallowsMemberPolicy: ())
    }
    if object.asDisallowedSharedLinkPolicy != nil {
        return DBSHARINGShareFolderError(disallowedSharedLinkPolicy: ())
    }
    if object.asOther != nil {
        return DBSHARINGShareFolderError(other: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGShareFolderError(noPermission: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingShareFolderJobStatusToDBOptional(object: DBXSharingShareFolderJobStatus?) -> DBSHARINGShareFolderJobStatus? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderJobStatusToDB(object: object)
}

func mapDBXSharingShareFolderJobStatusToDB(object: DBXSharingShareFolderJobStatus) -> DBSHARINGShareFolderJobStatus {
    if object.asInProgress != nil {
        return DBSHARINGShareFolderJobStatus(inProgress: ())
    }
    if let object = object.asComplete {
        let complete = mapDBXSharingSharedFolderMetadataToDB(object: object.complete)
        return DBSHARINGShareFolderJobStatus(complete: complete)
    }
    if let object = object.asFailed {
        let failed = mapDBXSharingShareFolderErrorToDB(object: object.failed)
        return DBSHARINGShareFolderJobStatus(failed: failed)
    }
    fatalError("codegen error")
}

func mapDBXSharingShareFolderLaunchToDBOptional(object: DBXSharingShareFolderLaunch?) -> DBSHARINGShareFolderLaunch? {
    guard let object = object else { return nil }
    return mapDBXSharingShareFolderLaunchToDB(object: object)
}

func mapDBXSharingShareFolderLaunchToDB(object: DBXSharingShareFolderLaunch) -> DBSHARINGShareFolderLaunch {
    if let object = object.asAsyncJobId {
        let asyncJobId = object.asyncJobId
        return DBSHARINGShareFolderLaunch(asyncJobId: asyncJobId)
    }
    if let object = object.asComplete {
        let complete = mapDBXSharingSharedFolderMetadataToDB(object: object.complete)
        return DBSHARINGShareFolderLaunch(complete: complete)
    }
    fatalError("codegen error")
}

func mapDBXSharingSharePathErrorToDBOptional(object: DBXSharingSharePathError?) -> DBSHARINGSharePathError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharePathErrorToDB(object: object)
}

func mapDBXSharingSharePathErrorToDB(object: DBXSharingSharePathError) -> DBSHARINGSharePathError {
    if object.asIsFile != nil {
        return DBSHARINGSharePathError(isFile: ())
    }
    if object.asInsideSharedFolder != nil {
        return DBSHARINGSharePathError(insideSharedFolder: ())
    }
    if object.asContainsSharedFolder != nil {
        return DBSHARINGSharePathError(containsSharedFolder: ())
    }
    if object.asContainsAppFolder != nil {
        return DBSHARINGSharePathError(containsAppFolder: ())
    }
    if object.asContainsTeamFolder != nil {
        return DBSHARINGSharePathError(containsTeamFolder: ())
    }
    if object.asIsAppFolder != nil {
        return DBSHARINGSharePathError(isAppFolder: ())
    }
    if object.asInsideAppFolder != nil {
        return DBSHARINGSharePathError(insideAppFolder: ())
    }
    if object.asIsPublicFolder != nil {
        return DBSHARINGSharePathError(isPublicFolder: ())
    }
    if object.asInsidePublicFolder != nil {
        return DBSHARINGSharePathError(insidePublicFolder: ())
    }
    if let object = object.asAlreadyShared {
        let alreadyShared = mapDBXSharingSharedFolderMetadataToDB(object: object.alreadyShared)
        return DBSHARINGSharePathError(alreadyShared: alreadyShared)
    }
    if object.asInvalidPath != nil {
        return DBSHARINGSharePathError(invalidPath: ())
    }
    if object.asIsOsxPackage != nil {
        return DBSHARINGSharePathError(isOsxPackage: ())
    }
    if object.asInsideOsxPackage != nil {
        return DBSHARINGSharePathError(insideOsxPackage: ())
    }
    if object.asIsVault != nil {
        return DBSHARINGSharePathError(isVault: ())
    }
    if object.asIsVaultLocked != nil {
        return DBSHARINGSharePathError(isVaultLocked: ())
    }
    if object.asIsFamily != nil {
        return DBSHARINGSharePathError(isFamily: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharePathError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedContentLinkMetadataToDBOptional(object: DBXSharingSharedContentLinkMetadata?) -> DBSHARINGSharedContentLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedContentLinkMetadataToDB(object: object)
}

func mapDBXSharingSharedContentLinkMetadataToDB(object: DBXSharingSharedContentLinkMetadata) -> DBSHARINGSharedContentLinkMetadata {
    DBSHARINGSharedContentLinkMetadata(
        audienceOptions: object.audienceOptions.compactMap { mapDBXSharingLinkAudienceToDB(object: $0) },
        currentAudience: mapDBXSharingLinkAudienceToDB(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBXSharingLinkPermissionToDB(object: $0) },
        passwordProtected: object.passwordProtected,
        url: object.url,
        accessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBXSharingAudienceRestrictingSharedFolderToDBOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry,
        audienceExceptions: mapDBXSharingAudienceExceptionsToDBOptional(object: object.audienceExceptions)
    )
}

func mapDBXSharingSharedFileMembersToDBOptional(object: DBXSharingSharedFileMembers?) -> DBSHARINGSharedFileMembers? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFileMembersToDB(object: object)
}

func mapDBXSharingSharedFileMembersToDB(object: DBXSharingSharedFileMembers) -> DBSHARINGSharedFileMembers {
    DBSHARINGSharedFileMembers(
        users: object.users.compactMap { mapDBXSharingUserFileMembershipInfoToDB(object: $0) },
        groups: object.groups.compactMap { mapDBXSharingGroupMembershipInfoToDB(object: $0) },
        invitees: object.invitees.compactMap { mapDBXSharingInviteeMembershipInfoToDB(object: $0) },
        cursor: object.cursor
    )
}

func mapDBXSharingSharedFileMetadataToDBOptional(object: DBXSharingSharedFileMetadata?) -> DBSHARINGSharedFileMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFileMetadataToDB(object: object)
}

func mapDBXSharingSharedFileMetadataToDB(object: DBXSharingSharedFileMetadata) -> DBSHARINGSharedFileMetadata {
    DBSHARINGSharedFileMetadata(
        id_: object.id,
        name: object.name,
        policy: mapDBXSharingFolderPolicyToDB(object: object.policy),
        previewUrl: object.previewUrl,
        accessType: mapDBXSharingAccessLevelToDBOptional(object: object.accessType),
        expectedLinkMetadata: mapDBXSharingExpectedSharedContentLinkMetadataToDBOptional(object: object.expectedLinkMetadata),
        linkMetadata: mapDBXSharingSharedContentLinkMetadataToDBOptional(object: object.linkMetadata),
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBXUsersTeamToDBOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        permissions: object.permissions?.compactMap { mapDBXSharingFilePermissionToDB(object: $0) },
        timeInvited: object.timeInvited
    )
}

func mapDBXSharingSharedFolderAccessErrorToDBOptional(object: DBXSharingSharedFolderAccessError?) -> DBSHARINGSharedFolderAccessError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFolderAccessErrorToDB(object: object)
}

func mapDBXSharingSharedFolderAccessErrorToDB(object: DBXSharingSharedFolderAccessError) -> DBSHARINGSharedFolderAccessError {
    if object.asInvalidId != nil {
        return DBSHARINGSharedFolderAccessError(invalidId: ())
    }
    if object.asNotAMember != nil {
        return DBSHARINGSharedFolderAccessError(notAMember: ())
    }
    if object.asInvalidMember != nil {
        return DBSHARINGSharedFolderAccessError(invalidMember: ())
    }
    if object.asEmailUnverified != nil {
        return DBSHARINGSharedFolderAccessError(emailUnverified: ())
    }
    if object.asUnmounted != nil {
        return DBSHARINGSharedFolderAccessError(unmounted: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharedFolderAccessError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedFolderMemberErrorToDBOptional(object: DBXSharingSharedFolderMemberError?) -> DBSHARINGSharedFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFolderMemberErrorToDB(object: object)
}

func mapDBXSharingSharedFolderMemberErrorToDB(object: DBXSharingSharedFolderMemberError) -> DBSHARINGSharedFolderMemberError {
    if object.asInvalidDropboxId != nil {
        return DBSHARINGSharedFolderMemberError(invalidDropboxId: ())
    }
    if object.asNotAMember != nil {
        return DBSHARINGSharedFolderMemberError(notAMember: ())
    }
    if let object = object.asNoExplicitAccess {
        let noExplicitAccess = mapDBXSharingMemberAccessLevelResultToDB(object: object.noExplicitAccess)
        return DBSHARINGSharedFolderMemberError(noExplicitAccess: noExplicitAccess)
    }
    if object.asOther != nil {
        return DBSHARINGSharedFolderMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedFolderMembersToDBOptional(object: DBXSharingSharedFolderMembers?) -> DBSHARINGSharedFolderMembers? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFolderMembersToDB(object: object)
}

func mapDBXSharingSharedFolderMembersToDB(object: DBXSharingSharedFolderMembers) -> DBSHARINGSharedFolderMembers {
    DBSHARINGSharedFolderMembers(
        users: object.users.compactMap { mapDBXSharingUserMembershipInfoToDB(object: $0) },
        groups: object.groups.compactMap { mapDBXSharingGroupMembershipInfoToDB(object: $0) },
        invitees: object.invitees.compactMap { mapDBXSharingInviteeMembershipInfoToDB(object: $0) },
        cursor: object.cursor
    )
}

func mapDBXSharingSharedFolderMetadataBaseToDBOptional(object: DBXSharingSharedFolderMetadataBase?) -> DBSHARINGSharedFolderMetadataBase? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFolderMetadataBaseToDB(object: object)
}

func mapDBXSharingSharedFolderMetadataBaseToDB(object: DBXSharingSharedFolderMetadataBase) -> DBSHARINGSharedFolderMetadataBase {
    DBSHARINGSharedFolderMetadataBase(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        isInsideTeamFolder: object.isInsideTeamFolder,
        isTeamFolder: object.isTeamFolder,
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBXUsersTeamToDBOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        parentFolderName: object.parentFolderName
    )
}

func mapDBXSharingSharedFolderMetadataToDBOptional(object: DBXSharingSharedFolderMetadata?) -> DBSHARINGSharedFolderMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedFolderMetadataToDB(object: object)
}

func mapDBXSharingSharedFolderMetadataToDB(object: DBXSharingSharedFolderMetadata) -> DBSHARINGSharedFolderMetadata {
    DBSHARINGSharedFolderMetadata(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        isInsideTeamFolder: object.isInsideTeamFolder,
        isTeamFolder: object.isTeamFolder,
        name: object.name,
        policy: mapDBXSharingFolderPolicyToDB(object: object.policy),
        previewUrl: object.previewUrl,
        sharedFolderId: object.sharedFolderId,
        timeInvited: object.timeInvited,
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBXUsersTeamToDBOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        parentFolderName: object.parentFolderName,
        linkMetadata: mapDBXSharingSharedContentLinkMetadataToDBOptional(object: object.linkMetadata),
        permissions: object.permissions?.compactMap { mapDBXSharingFolderPermissionToDB(object: $0) },
        accessInheritance: mapDBXSharingAccessInheritanceToDB(object: object.accessInheritance)
    )
}

func mapDBXSharingSharedLinkAccessFailureReasonToDBOptional(object: DBXSharingSharedLinkAccessFailureReason?) -> DBSHARINGSharedLinkAccessFailureReason? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkAccessFailureReasonToDB(object: object)
}

func mapDBXSharingSharedLinkAccessFailureReasonToDB(object: DBXSharingSharedLinkAccessFailureReason) -> DBSHARINGSharedLinkAccessFailureReason {
    if object.asLoginRequired != nil {
        return DBSHARINGSharedLinkAccessFailureReason(loginRequired: ())
    }
    if object.asEmailVerifyRequired != nil {
        return DBSHARINGSharedLinkAccessFailureReason(emailVerifyRequired: ())
    }
    if object.asPasswordRequired != nil {
        return DBSHARINGSharedLinkAccessFailureReason(passwordRequired: ())
    }
    if object.asTeamOnly != nil {
        return DBSHARINGSharedLinkAccessFailureReason(teamOnly: ())
    }
    if object.asOwnerOnly != nil {
        return DBSHARINGSharedLinkAccessFailureReason(ownerOnly: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharedLinkAccessFailureReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedLinkAlreadyExistsMetadataToDBOptional(object: DBXSharingSharedLinkAlreadyExistsMetadata?) -> DBSHARINGSharedLinkAlreadyExistsMetadata? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkAlreadyExistsMetadataToDB(object: object)
}

func mapDBXSharingSharedLinkAlreadyExistsMetadataToDB(object: DBXSharingSharedLinkAlreadyExistsMetadata) -> DBSHARINGSharedLinkAlreadyExistsMetadata {
    if let object = object.asMetadata {
        let metadata = mapDBXSharingSharedLinkMetadataToDB(object: object.metadata)
        return DBSHARINGSharedLinkAlreadyExistsMetadata(metadata: metadata)
    }
    if object.asOther != nil {
        return DBSHARINGSharedLinkAlreadyExistsMetadata(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedLinkPolicyToDBOptional(object: DBXSharingSharedLinkPolicy?) -> DBSHARINGSharedLinkPolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkPolicyToDB(object: object)
}

func mapDBXSharingSharedLinkPolicyToDB(object: DBXSharingSharedLinkPolicy) -> DBSHARINGSharedLinkPolicy {
    if object.asAnyone != nil {
        return DBSHARINGSharedLinkPolicy(anyone: ())
    }
    if object.asTeam != nil {
        return DBSHARINGSharedLinkPolicy(team: ())
    }
    if object.asMembers != nil {
        return DBSHARINGSharedLinkPolicy(members: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharedLinkPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharedLinkSettingsToDBOptional(object: DBXSharingSharedLinkSettings?) -> DBSHARINGSharedLinkSettings? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkSettingsToDB(object: object)
}

func mapDBXSharingSharedLinkSettingsToDB(object: DBXSharingSharedLinkSettings) -> DBSHARINGSharedLinkSettings {
    DBSHARINGSharedLinkSettings(
        requirePassword: object.requirePassword,
        linkPassword: object.linkPassword,
        expires: object.expires,
        audience: mapDBXSharingLinkAudienceToDBOptional(object: object.audience),
        access: mapDBXSharingRequestedLinkAccessLevelToDBOptional(object: object.access),
        requestedVisibility: mapDBXSharingRequestedVisibilityToDBOptional(object: object.requestedVisibility),
        allowDownload: object.allowDownload
    )
}

func mapDBXSharingSharedLinkSettingsErrorToDBOptional(object: DBXSharingSharedLinkSettingsError?) -> DBSHARINGSharedLinkSettingsError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharedLinkSettingsErrorToDB(object: object)
}

func mapDBXSharingSharedLinkSettingsErrorToDB(object: DBXSharingSharedLinkSettingsError) -> DBSHARINGSharedLinkSettingsError {
    if object.asInvalidSettings != nil {
        return DBSHARINGSharedLinkSettingsError(invalidSettings: ())
    }
    if object.asNotAuthorized != nil {
        return DBSHARINGSharedLinkSettingsError(notAuthorized: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharingFileAccessErrorToDBOptional(object: DBXSharingSharingFileAccessError?) -> DBSHARINGSharingFileAccessError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharingFileAccessErrorToDB(object: object)
}

func mapDBXSharingSharingFileAccessErrorToDB(object: DBXSharingSharingFileAccessError) -> DBSHARINGSharingFileAccessError {
    if object.asNoPermission != nil {
        return DBSHARINGSharingFileAccessError(noPermission: ())
    }
    if object.asInvalidFile != nil {
        return DBSHARINGSharingFileAccessError(invalidFile: ())
    }
    if object.asIsFolder != nil {
        return DBSHARINGSharingFileAccessError(isFolder: ())
    }
    if object.asInsidePublicFolder != nil {
        return DBSHARINGSharingFileAccessError(insidePublicFolder: ())
    }
    if object.asInsideOsxPackage != nil {
        return DBSHARINGSharingFileAccessError(insideOsxPackage: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharingFileAccessError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingSharingUserErrorToDBOptional(object: DBXSharingSharingUserError?) -> DBSHARINGSharingUserError? {
    guard let object = object else { return nil }
    return mapDBXSharingSharingUserErrorToDB(object: object)
}

func mapDBXSharingSharingUserErrorToDB(object: DBXSharingSharingUserError) -> DBSHARINGSharingUserError {
    if object.asEmailUnverified != nil {
        return DBSHARINGSharingUserError(emailUnverified: ())
    }
    if object.asOther != nil {
        return DBSHARINGSharingUserError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingTeamMemberInfoToDBOptional(object: DBXSharingTeamMemberInfo?) -> DBSHARINGTeamMemberInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingTeamMemberInfoToDB(object: object)
}

func mapDBXSharingTeamMemberInfoToDB(object: DBXSharingTeamMemberInfo) -> DBSHARINGTeamMemberInfo {
    DBSHARINGTeamMemberInfo(teamInfo: mapDBXUsersTeamToDB(object: object.teamInfo), displayName: object.displayName, memberId: object.memberId)
}

func mapDBXSharingTransferFolderArgToDBOptional(object: DBXSharingTransferFolderArg?) -> DBSHARINGTransferFolderArg? {
    guard let object = object else { return nil }
    return mapDBXSharingTransferFolderArgToDB(object: object)
}

func mapDBXSharingTransferFolderArgToDB(object: DBXSharingTransferFolderArg) -> DBSHARINGTransferFolderArg {
    DBSHARINGTransferFolderArg(sharedFolderId: object.sharedFolderId, toDropboxId: object.toDropboxId)
}

func mapDBXSharingTransferFolderErrorToDBOptional(object: DBXSharingTransferFolderError?) -> DBSHARINGTransferFolderError? {
    guard let object = object else { return nil }
    return mapDBXSharingTransferFolderErrorToDB(object: object)
}

func mapDBXSharingTransferFolderErrorToDB(object: DBXSharingTransferFolderError) -> DBSHARINGTransferFolderError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGTransferFolderError(accessError: accessError)
    }
    if object.asInvalidDropboxId != nil {
        return DBSHARINGTransferFolderError(invalidDropboxId: ())
    }
    if object.asNewOwnerNotAMember != nil {
        return DBSHARINGTransferFolderError(dNewOwnerNotAMember: ())
    }
    if object.asNewOwnerUnmounted != nil {
        return DBSHARINGTransferFolderError(dNewOwnerUnmounted: ())
    }
    if object.asNewOwnerEmailUnverified != nil {
        return DBSHARINGTransferFolderError(dNewOwnerEmailUnverified: ())
    }
    if object.asTeamFolder != nil {
        return DBSHARINGTransferFolderError(teamFolder: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGTransferFolderError(noPermission: ())
    }
    if object.asOther != nil {
        return DBSHARINGTransferFolderError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUnmountFolderArgToDBOptional(object: DBXSharingUnmountFolderArg?) -> DBSHARINGUnmountFolderArg? {
    guard let object = object else { return nil }
    return mapDBXSharingUnmountFolderArgToDB(object: object)
}

func mapDBXSharingUnmountFolderArgToDB(object: DBXSharingUnmountFolderArg) -> DBSHARINGUnmountFolderArg {
    DBSHARINGUnmountFolderArg(sharedFolderId: object.sharedFolderId)
}

func mapDBXSharingUnmountFolderErrorToDBOptional(object: DBXSharingUnmountFolderError?) -> DBSHARINGUnmountFolderError? {
    guard let object = object else { return nil }
    return mapDBXSharingUnmountFolderErrorToDB(object: object)
}

func mapDBXSharingUnmountFolderErrorToDB(object: DBXSharingUnmountFolderError) -> DBSHARINGUnmountFolderError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGUnmountFolderError(accessError: accessError)
    }
    if object.asNoPermission != nil {
        return DBSHARINGUnmountFolderError(noPermission: ())
    }
    if object.asNotUnmountable != nil {
        return DBSHARINGUnmountFolderError(notUnmountable: ())
    }
    if object.asOther != nil {
        return DBSHARINGUnmountFolderError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUnshareFileArgToDBOptional(object: DBXSharingUnshareFileArg?) -> DBSHARINGUnshareFileArg? {
    guard let object = object else { return nil }
    return mapDBXSharingUnshareFileArgToDB(object: object)
}

func mapDBXSharingUnshareFileArgToDB(object: DBXSharingUnshareFileArg) -> DBSHARINGUnshareFileArg {
    DBSHARINGUnshareFileArg(file: object.file)
}

func mapDBXSharingUnshareFileErrorToDBOptional(object: DBXSharingUnshareFileError?) -> DBSHARINGUnshareFileError? {
    guard let object = object else { return nil }
    return mapDBXSharingUnshareFileErrorToDB(object: object)
}

func mapDBXSharingUnshareFileErrorToDB(object: DBXSharingUnshareFileError) -> DBSHARINGUnshareFileError {
    if let object = object.asUserError {
        let userError = mapDBXSharingSharingUserErrorToDB(object: object.userError)
        return DBSHARINGUnshareFileError(userError: userError)
    }
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharingFileAccessErrorToDB(object: object.accessError)
        return DBSHARINGUnshareFileError(accessError: accessError)
    }
    if object.asOther != nil {
        return DBSHARINGUnshareFileError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUnshareFolderArgToDBOptional(object: DBXSharingUnshareFolderArg?) -> DBSHARINGUnshareFolderArg? {
    guard let object = object else { return nil }
    return mapDBXSharingUnshareFolderArgToDB(object: object)
}

func mapDBXSharingUnshareFolderArgToDB(object: DBXSharingUnshareFolderArg) -> DBSHARINGUnshareFolderArg {
    DBSHARINGUnshareFolderArg(sharedFolderId: object.sharedFolderId, leaveACopy: object.leaveACopy)
}

func mapDBXSharingUnshareFolderErrorToDBOptional(object: DBXSharingUnshareFolderError?) -> DBSHARINGUnshareFolderError? {
    guard let object = object else { return nil }
    return mapDBXSharingUnshareFolderErrorToDB(object: object)
}

func mapDBXSharingUnshareFolderErrorToDB(object: DBXSharingUnshareFolderError) -> DBSHARINGUnshareFolderError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGUnshareFolderError(accessError: accessError)
    }
    if object.asTeamFolder != nil {
        return DBSHARINGUnshareFolderError(teamFolder: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGUnshareFolderError(noPermission: ())
    }
    if object.asTooManyFiles != nil {
        return DBSHARINGUnshareFolderError(tooManyFiles: ())
    }
    if object.asOther != nil {
        return DBSHARINGUnshareFolderError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUpdateFileMemberArgsToDBOptional(object: DBXSharingUpdateFileMemberArgs?) -> DBSHARINGUpdateFileMemberArgs? {
    guard let object = object else { return nil }
    return mapDBXSharingUpdateFileMemberArgsToDB(object: object)
}

func mapDBXSharingUpdateFileMemberArgsToDB(object: DBXSharingUpdateFileMemberArgs) -> DBSHARINGUpdateFileMemberArgs {
    DBSHARINGUpdateFileMemberArgs(
        file: object.file,
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        accessLevel: mapDBXSharingAccessLevelToDB(object: object.accessLevel)
    )
}

func mapDBXSharingUpdateFolderMemberArgToDBOptional(object: DBXSharingUpdateFolderMemberArg?) -> DBSHARINGUpdateFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBXSharingUpdateFolderMemberArgToDB(object: object)
}

func mapDBXSharingUpdateFolderMemberArgToDB(object: DBXSharingUpdateFolderMemberArg) -> DBSHARINGUpdateFolderMemberArg {
    DBSHARINGUpdateFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        accessLevel: mapDBXSharingAccessLevelToDB(object: object.accessLevel)
    )
}

func mapDBXSharingUpdateFolderMemberErrorToDBOptional(object: DBXSharingUpdateFolderMemberError?) -> DBSHARINGUpdateFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBXSharingUpdateFolderMemberErrorToDB(object: object)
}

func mapDBXSharingUpdateFolderMemberErrorToDB(object: DBXSharingUpdateFolderMemberError) -> DBSHARINGUpdateFolderMemberError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGUpdateFolderMemberError(accessError: accessError)
    }
    if let object = object.asMemberError {
        let memberError = mapDBXSharingSharedFolderMemberErrorToDB(object: object.memberError)
        return DBSHARINGUpdateFolderMemberError(memberError: memberError)
    }
    if let object = object.asNoExplicitAccess {
        let noExplicitAccess = mapDBXSharingAddFolderMemberErrorToDB(object: object.noExplicitAccess)
        return DBSHARINGUpdateFolderMemberError(noExplicitAccess: noExplicitAccess)
    }
    if object.asInsufficientPlan != nil {
        return DBSHARINGUpdateFolderMemberError(insufficientPlan: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGUpdateFolderMemberError(noPermission: ())
    }
    if object.asOther != nil {
        return DBSHARINGUpdateFolderMemberError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUpdateFolderPolicyArgToDBOptional(object: DBXSharingUpdateFolderPolicyArg?) -> DBSHARINGUpdateFolderPolicyArg? {
    guard let object = object else { return nil }
    return mapDBXSharingUpdateFolderPolicyArgToDB(object: object)
}

func mapDBXSharingUpdateFolderPolicyArgToDB(object: DBXSharingUpdateFolderPolicyArg) -> DBSHARINGUpdateFolderPolicyArg {
    DBSHARINGUpdateFolderPolicyArg(
        sharedFolderId: object.sharedFolderId,
        memberPolicy: mapDBXSharingMemberPolicyToDBOptional(object: object.memberPolicy),
        aclUpdatePolicy: mapDBXSharingAclUpdatePolicyToDBOptional(object: object.aclUpdatePolicy),
        viewerInfoPolicy: mapDBXSharingViewerInfoPolicyToDBOptional(object: object.viewerInfoPolicy),
        sharedLinkPolicy: mapDBXSharingSharedLinkPolicyToDBOptional(object: object.sharedLinkPolicy),
        linkSettings: mapDBXSharingLinkSettingsToDBOptional(object: object.linkSettings),
        actions: object.actions?.compactMap { mapDBXSharingFolderActionToDB(object: $0) }
    )
}

func mapDBXSharingUpdateFolderPolicyErrorToDBOptional(object: DBXSharingUpdateFolderPolicyError?) -> DBSHARINGUpdateFolderPolicyError? {
    guard let object = object else { return nil }
    return mapDBXSharingUpdateFolderPolicyErrorToDB(object: object)
}

func mapDBXSharingUpdateFolderPolicyErrorToDB(object: DBXSharingUpdateFolderPolicyError) -> DBSHARINGUpdateFolderPolicyError {
    if let object = object.asAccessError {
        let accessError = mapDBXSharingSharedFolderAccessErrorToDB(object: object.accessError)
        return DBSHARINGUpdateFolderPolicyError(accessError: accessError)
    }
    if object.asNotOnTeam != nil {
        return DBSHARINGUpdateFolderPolicyError(notOnTeam: ())
    }
    if object.asTeamPolicyDisallowsMemberPolicy != nil {
        return DBSHARINGUpdateFolderPolicyError(teamPolicyDisallowsMemberPolicy: ())
    }
    if object.asDisallowedSharedLinkPolicy != nil {
        return DBSHARINGUpdateFolderPolicyError(disallowedSharedLinkPolicy: ())
    }
    if object.asNoPermission != nil {
        return DBSHARINGUpdateFolderPolicyError(noPermission: ())
    }
    if object.asTeamFolder != nil {
        return DBSHARINGUpdateFolderPolicyError(teamFolder: ())
    }
    if object.asOther != nil {
        return DBSHARINGUpdateFolderPolicyError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingUserMembershipInfoToDBOptional(object: DBXSharingUserMembershipInfo?) -> DBSHARINGUserMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingUserMembershipInfoToDB(object: object)
}

func mapDBXSharingUserMembershipInfoToDB(object: DBXSharingUserMembershipInfo) -> DBSHARINGUserMembershipInfo {
    DBSHARINGUserMembershipInfo(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        user: mapDBXSharingUserInfoToDB(object: object.user),
        permissions: object.permissions?.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBXSharingUserFileMembershipInfoToDBOptional(object: DBXSharingUserFileMembershipInfo?) -> DBSHARINGUserFileMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingUserFileMembershipInfoToDB(object: object)
}

func mapDBXSharingUserFileMembershipInfoToDB(object: DBXSharingUserFileMembershipInfo) -> DBSHARINGUserFileMembershipInfo {
    DBSHARINGUserFileMembershipInfo(
        accessType: mapDBXSharingAccessLevelToDB(object: object.accessType),
        user: mapDBXSharingUserInfoToDB(object: object.user),
        permissions: object.permissions?.compactMap { mapDBXSharingMemberPermissionToDB(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited,
        timeLastSeen: object.timeLastSeen,
        platformType: mapDBXSeenStatePlatformTypeToDBOptional(object: object.platformType)
    )
}

func mapDBXSharingUserInfoToDBOptional(object: DBXSharingUserInfo?) -> DBSHARINGUserInfo? {
    guard let object = object else { return nil }
    return mapDBXSharingUserInfoToDB(object: object)
}

func mapDBXSharingUserInfoToDB(object: DBXSharingUserInfo) -> DBSHARINGUserInfo {
    DBSHARINGUserInfo(
        accountId: object.accountId,
        email: object.email,
        displayName: object.displayName,
        sameTeam: object.sameTeam,
        teamMemberId: object.teamMemberId
    )
}

func mapDBXSharingViewerInfoPolicyToDBOptional(object: DBXSharingViewerInfoPolicy?) -> DBSHARINGViewerInfoPolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingViewerInfoPolicyToDB(object: object)
}

func mapDBXSharingViewerInfoPolicyToDB(object: DBXSharingViewerInfoPolicy) -> DBSHARINGViewerInfoPolicy {
    if object.asEnabled != nil {
        return DBSHARINGViewerInfoPolicy(enabled: ())
    }
    if object.asDisabled != nil {
        return DBSHARINGViewerInfoPolicy(disabled: ())
    }
    if object.asOther != nil {
        return DBSHARINGViewerInfoPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingVisibilityToDBOptional(object: DBXSharingVisibility?) -> DBSHARINGVisibility? {
    guard let object = object else { return nil }
    return mapDBXSharingVisibilityToDB(object: object)
}

func mapDBXSharingVisibilityToDB(object: DBXSharingVisibility) -> DBSHARINGVisibility {
    if object.asPublic_ != nil {
        return DBSHARINGVisibility(withPublic: ())
    }
    if object.asTeamOnly != nil {
        return DBSHARINGVisibility(teamOnly: ())
    }
    if object.asPassword != nil {
        return DBSHARINGVisibility(password: ())
    }
    if object.asTeamAndPassword != nil {
        return DBSHARINGVisibility(teamAndPassword: ())
    }
    if object.asSharedFolderOnly != nil {
        return DBSHARINGVisibility(sharedFolderOnly: ())
    }
    if object.asOther != nil {
        return DBSHARINGVisibility(other: ())
    }
    fatalError("codegen error")
}

func mapDBXSharingVisibilityPolicyToDBOptional(object: DBXSharingVisibilityPolicy?) -> DBSHARINGVisibilityPolicy? {
    guard let object = object else { return nil }
    return mapDBXSharingVisibilityPolicyToDB(object: object)
}

func mapDBXSharingVisibilityPolicyToDB(object: DBXSharingVisibilityPolicy) -> DBSHARINGVisibilityPolicy {
    DBSHARINGVisibilityPolicy(
        policy: mapDBXSharingRequestedVisibilityToDB(object: object.policy),
        resolvedPolicy: mapDBXSharingAlphaResolvedVisibilityToDB(object: object.resolvedPolicy),
        allowed: object.allowed,
        disallowedReason: mapDBXSharingVisibilityPolicyDisallowedReasonToDBOptional(object: object.disallowedReason)
    )
}
