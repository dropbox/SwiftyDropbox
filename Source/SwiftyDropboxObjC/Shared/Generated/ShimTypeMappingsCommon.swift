///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXCommonPathRootToDBOptional(object: DBXCommonPathRoot?) -> DBCOMMONPathRoot? {
    guard let object = object else { return nil }
    return mapDBXCommonPathRootToDB(object: object)
}

func mapDBXCommonPathRootToDB(object: DBXCommonPathRoot) -> DBCOMMONPathRoot {
    if object.asHome != nil {
        return DBCOMMONPathRoot(home: ())
    }
    if let object = object.asRoot {
        let root = object.root
        return DBCOMMONPathRoot(root: root)
    }
    if let object = object.asNamespaceId {
        let namespaceId = object.namespaceId
        return DBCOMMONPathRoot(namespaceId: namespaceId)
    }
    if object.asOther != nil {
        return DBCOMMONPathRoot(other: ())
    }
    fatalError("codegen error")
}

func mapDBXCommonPathRootErrorToDBOptional(object: DBXCommonPathRootError?) -> DBCOMMONPathRootError? {
    guard let object = object else { return nil }
    return mapDBXCommonPathRootErrorToDB(object: object)
}

func mapDBXCommonPathRootErrorToDB(object: DBXCommonPathRootError) -> DBCOMMONPathRootError {
    if let object = object.asInvalidRoot {
        let invalidRoot = mapDBXCommonRootInfoToDB(object: object.invalidRoot)
        return DBCOMMONPathRootError(invalidRoot: invalidRoot)
    }
    if object.asNoPermission != nil {
        return DBCOMMONPathRootError(noPermission: ())
    }
    if object.asOther != nil {
        return DBCOMMONPathRootError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXCommonRootInfoToDBOptional(object: DBXCommonRootInfo?) -> DBCOMMONRootInfo? {
    guard let object = object else { return nil }
    return mapDBXCommonRootInfoToDB(object: object)
}

func mapDBXCommonRootInfoToDB(object: DBXCommonRootInfo) -> DBCOMMONRootInfo {
    switch object {
    case let object as DBXCommonTeamRootInfo:
        return DBCOMMONTeamRootInfo(rootNamespaceId: object.rootNamespaceId, homeNamespaceId: object.homeNamespaceId, homePath: object.homePath)
    case let object as DBXCommonUserRootInfo:
        return DBCOMMONUserRootInfo(rootNamespaceId: object.rootNamespaceId, homeNamespaceId: object.homeNamespaceId)
    default:
        return DBCOMMONRootInfo(rootNamespaceId: object.rootNamespaceId, homeNamespaceId: object.homeNamespaceId)
    }
}

func mapDBXCommonTeamRootInfoToDBOptional(object: DBXCommonTeamRootInfo?) -> DBCOMMONTeamRootInfo? {
    guard let object = object else { return nil }
    return mapDBXCommonTeamRootInfoToDB(object: object)
}

func mapDBXCommonTeamRootInfoToDB(object: DBXCommonTeamRootInfo) -> DBCOMMONTeamRootInfo {
    DBCOMMONTeamRootInfo(rootNamespaceId: object.rootNamespaceId, homeNamespaceId: object.homeNamespaceId, homePath: object.homePath)
}

func mapDBXCommonUserRootInfoToDBOptional(object: DBXCommonUserRootInfo?) -> DBCOMMONUserRootInfo? {
    guard let object = object else { return nil }
    return mapDBXCommonUserRootInfoToDB(object: object)
}

func mapDBXCommonUserRootInfoToDB(object: DBXCommonUserRootInfo) -> DBCOMMONUserRootInfo {
    DBCOMMONUserRootInfo(rootNamespaceId: object.rootNamespaceId, homeNamespaceId: object.homeNamespaceId)
}
