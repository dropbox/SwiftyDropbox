///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the async namespace
/// For Swift see async

/// Result returned by methods that launch an asynchronous job. A method who may either launch an asynchronous job,
/// or complete the request synchronously, can use this union by extending it, and adding a 'complete' field with
/// the type of the synchronous response. See LaunchEmptyResult for an example.
@objc
public class DBXAsyncLaunchResultBase: NSObject {
    let swift: Async.LaunchResultBase

    public init(swift: Async.LaunchResultBase) {
        self.swift = swift
    }

    public static func factory(swift: Async.LaunchResultBase) -> DBXAsyncLaunchResultBase {
        switch swift {
        case .asyncJobId(let swiftArg):
            let arg = swiftArg
            return DBXAsyncLaunchResultBaseAsyncJobId(arg)
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAsyncJobId: DBXAsyncLaunchResultBaseAsyncJobId? {
        self as? DBXAsyncLaunchResultBaseAsyncJobId
    }
}

/// This response indicates that the processing is asynchronous. The string is an id that can be used to obtain
/// the status of the asynchronous job.
@objc
public class DBXAsyncLaunchResultBaseAsyncJobId: DBXAsyncLaunchResultBase {
    @objc
    public var asyncJobId: String

    @objc
    public init(_ arg: String) {
        self.asyncJobId = arg
        let swift = Async.LaunchResultBase.asyncJobId(arg)
        super.init(swift: swift)
    }
}

/// Result returned by methods that may either launch an asynchronous job or complete synchronously. Upon
/// synchronous completion of the job, no additional information is returned.
@objc
public class DBXAsyncLaunchEmptyResult: NSObject {
    let swift: Async.LaunchEmptyResult

    public init(swift: Async.LaunchEmptyResult) {
        self.swift = swift
    }

    public static func factory(swift: Async.LaunchEmptyResult) -> DBXAsyncLaunchEmptyResult {
        switch swift {
        case .asyncJobId(let swiftArg):
            let arg = swiftArg
            return DBXAsyncLaunchEmptyResultAsyncJobId(arg)
        case .complete:
            return DBXAsyncLaunchEmptyResultComplete()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAsyncJobId: DBXAsyncLaunchEmptyResultAsyncJobId? {
        self as? DBXAsyncLaunchEmptyResultAsyncJobId
    }

    @objc
    public var asComplete: DBXAsyncLaunchEmptyResultComplete? {
        self as? DBXAsyncLaunchEmptyResultComplete
    }
}

/// This response indicates that the processing is asynchronous. The string is an id that can be used to obtain
/// the status of the asynchronous job.
@objc
public class DBXAsyncLaunchEmptyResultAsyncJobId: DBXAsyncLaunchEmptyResult {
    @objc
    public var asyncJobId: String

    @objc
    public init(_ arg: String) {
        self.asyncJobId = arg
        let swift = Async.LaunchEmptyResult.asyncJobId(arg)
        super.init(swift: swift)
    }
}

/// The job finished synchronously and successfully.
@objc
public class DBXAsyncLaunchEmptyResultComplete: DBXAsyncLaunchEmptyResult {
    @objc
    public init() {
        let swift = Async.LaunchEmptyResult.complete
        super.init(swift: swift)
    }
}

/// Arguments for methods that poll the status of an asynchronous job.
@objc
public class DBXAsyncPollArg: NSObject {
    /// Id of the asynchronous job. This is the value of a response returned from the method that launched the job.
    @objc
    public var asyncJobId: String { swift.asyncJobId }

    @objc
    public init(asyncJobId: String) {
        self.swift = Async.PollArg(asyncJobId: asyncJobId)
    }

    let swift: Async.PollArg

    public init(swift: Async.PollArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Result returned by methods that poll for the status of an asynchronous job. Unions that extend this union should
/// add a 'complete' field with a type of the information returned upon job completion. See PollEmptyResult for an
/// example.
@objc
public class DBXAsyncPollResultBase: NSObject {
    let swift: Async.PollResultBase

    public init(swift: Async.PollResultBase) {
        self.swift = swift
    }

    public static func factory(swift: Async.PollResultBase) -> DBXAsyncPollResultBase {
        switch swift {
        case .inProgress:
            return DBXAsyncPollResultBaseInProgress()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asInProgress: DBXAsyncPollResultBaseInProgress? {
        self as? DBXAsyncPollResultBaseInProgress
    }
}

/// The asynchronous job is still in progress.
@objc
public class DBXAsyncPollResultBaseInProgress: DBXAsyncPollResultBase {
    @objc
    public init() {
        let swift = Async.PollResultBase.inProgress
        super.init(swift: swift)
    }
}

/// Result returned by methods that poll for the status of an asynchronous job. Upon completion of the job, no
/// additional information is returned.
@objc
public class DBXAsyncPollEmptyResult: NSObject {
    let swift: Async.PollEmptyResult

    public init(swift: Async.PollEmptyResult) {
        self.swift = swift
    }

    public static func factory(swift: Async.PollEmptyResult) -> DBXAsyncPollEmptyResult {
        switch swift {
        case .inProgress:
            return DBXAsyncPollEmptyResultInProgress()
        case .complete:
            return DBXAsyncPollEmptyResultComplete()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asInProgress: DBXAsyncPollEmptyResultInProgress? {
        self as? DBXAsyncPollEmptyResultInProgress
    }

    @objc
    public var asComplete: DBXAsyncPollEmptyResultComplete? {
        self as? DBXAsyncPollEmptyResultComplete
    }
}

/// The asynchronous job is still in progress.
@objc
public class DBXAsyncPollEmptyResultInProgress: DBXAsyncPollEmptyResult {
    @objc
    public init() {
        let swift = Async.PollEmptyResult.inProgress
        super.init(swift: swift)
    }
}

/// The asynchronous job has completed successfully.
@objc
public class DBXAsyncPollEmptyResultComplete: DBXAsyncPollEmptyResult {
    @objc
    public init() {
        let swift = Async.PollEmptyResult.complete
        super.init(swift: swift)
    }
}

/// Error returned by methods for polling the status of asynchronous job.
@objc
public class DBXAsyncPollError: NSObject {
    let swift: Async.PollError

    public init(swift: Async.PollError) {
        self.swift = swift
    }

    public static func factory(swift: Async.PollError) -> DBXAsyncPollError {
        switch swift {
        case .invalidAsyncJobId:
            return DBXAsyncPollErrorInvalidAsyncJobId()
        case .internalError:
            return DBXAsyncPollErrorInternalError()
        case .other:
            return DBXAsyncPollErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asInvalidAsyncJobId: DBXAsyncPollErrorInvalidAsyncJobId? {
        self as? DBXAsyncPollErrorInvalidAsyncJobId
    }

    @objc
    public var asInternalError: DBXAsyncPollErrorInternalError? {
        self as? DBXAsyncPollErrorInternalError
    }

    @objc
    public var asOther: DBXAsyncPollErrorOther? {
        self as? DBXAsyncPollErrorOther
    }
}

/// The job ID is invalid.
@objc
public class DBXAsyncPollErrorInvalidAsyncJobId: DBXAsyncPollError {
    @objc
    public init() {
        let swift = Async.PollError.invalidAsyncJobId
        super.init(swift: swift)
    }
}

/// Something went wrong with the job on Dropbox's end. You'll need to verify that the action you were taking
/// succeeded, and if not, try again. This should happen very rarely.
@objc
public class DBXAsyncPollErrorInternalError: DBXAsyncPollError {
    @objc
    public init() {
        let swift = Async.PollError.internalError
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXAsyncPollErrorOther: DBXAsyncPollError {
    @objc
    public init() {
        let swift = Async.PollError.other
        super.init(swift: swift)
    }
}
