///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBFILEREQUESTSGeneralFileRequestsErrorToDBXOptional(object: DBFILEREQUESTSGeneralFileRequestsError?) -> DBXFileRequestsGeneralFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSGeneralFileRequestsErrorToDBX(object: object)
}

func mapDBFILEREQUESTSGeneralFileRequestsErrorToDBX(object: DBFILEREQUESTSGeneralFileRequestsError) -> DBXFileRequestsGeneralFileRequestsError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsGeneralFileRequestsErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsGeneralFileRequestsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSCountFileRequestsErrorToDBXOptional(object: DBFILEREQUESTSCountFileRequestsError?) -> DBXFileRequestsCountFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSCountFileRequestsErrorToDBX(object: object)
}

func mapDBFILEREQUESTSCountFileRequestsErrorToDBX(object: DBFILEREQUESTSCountFileRequestsError) -> DBXFileRequestsCountFileRequestsError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsCountFileRequestsErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsCountFileRequestsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSCountFileRequestsResultToDBXOptional(object: DBFILEREQUESTSCountFileRequestsResult?) -> DBXFileRequestsCountFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSCountFileRequestsResultToDBX(object: object)
}

func mapDBFILEREQUESTSCountFileRequestsResultToDBX(object: DBFILEREQUESTSCountFileRequestsResult) -> DBXFileRequestsCountFileRequestsResult {
    DBXFileRequestsCountFileRequestsResult(fileRequestCount: object.fileRequestCount)
}

func mapDBFILEREQUESTSCreateFileRequestArgsToDBXOptional(object: DBFILEREQUESTSCreateFileRequestArgs?) -> DBXFileRequestsCreateFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSCreateFileRequestArgsToDBX(object: object)
}

func mapDBFILEREQUESTSCreateFileRequestArgsToDBX(object: DBFILEREQUESTSCreateFileRequestArgs) -> DBXFileRequestsCreateFileRequestArgs {
    DBXFileRequestsCreateFileRequestArgs(
        title: object.title,
        destination: object.destination,
        deadline: mapDBFILEREQUESTSFileRequestDeadlineToDBXOptional(object: object.deadline),
        open: object.open,
        description_: object.description_
    )
}

func mapDBFILEREQUESTSFileRequestErrorToDBXOptional(object: DBFILEREQUESTSFileRequestError?) -> DBXFileRequestsFileRequestError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSFileRequestErrorToDBX(object: object)
}

func mapDBFILEREQUESTSFileRequestErrorToDBX(object: DBFILEREQUESTSFileRequestError) -> DBXFileRequestsFileRequestError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsFileRequestErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsFileRequestErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsFileRequestErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsFileRequestErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsFileRequestErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsFileRequestErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsFileRequestErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsFileRequestErrorValidationError()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSCreateFileRequestErrorToDBXOptional(object: DBFILEREQUESTSCreateFileRequestError?) -> DBXFileRequestsCreateFileRequestError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSCreateFileRequestErrorToDBX(object: object)
}

func mapDBFILEREQUESTSCreateFileRequestErrorToDBX(object: DBFILEREQUESTSCreateFileRequestError) -> DBXFileRequestsCreateFileRequestError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsCreateFileRequestErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsCreateFileRequestErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsCreateFileRequestErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsCreateFileRequestErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsCreateFileRequestErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsCreateFileRequestErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsCreateFileRequestErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsCreateFileRequestErrorValidationError()
    }
    if object.isInvalidLocation() {
        return DBXFileRequestsCreateFileRequestErrorInvalidLocation()
    }
    if object.isRateLimit() {
        return DBXFileRequestsCreateFileRequestErrorRateLimit()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSDeleteAllClosedFileRequestsErrorToDBXOptional(object: DBFILEREQUESTSDeleteAllClosedFileRequestsError?)
    -> DBXFileRequestsDeleteAllClosedFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSDeleteAllClosedFileRequestsErrorToDBX(object: object)
}

func mapDBFILEREQUESTSDeleteAllClosedFileRequestsErrorToDBX(object: DBFILEREQUESTSDeleteAllClosedFileRequestsError)
    -> DBXFileRequestsDeleteAllClosedFileRequestsError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsDeleteAllClosedFileRequestsErrorValidationError()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSDeleteAllClosedFileRequestsResultToDBXOptional(object: DBFILEREQUESTSDeleteAllClosedFileRequestsResult?)
    -> DBXFileRequestsDeleteAllClosedFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSDeleteAllClosedFileRequestsResultToDBX(object: object)
}

func mapDBFILEREQUESTSDeleteAllClosedFileRequestsResultToDBX(object: DBFILEREQUESTSDeleteAllClosedFileRequestsResult)
    -> DBXFileRequestsDeleteAllClosedFileRequestsResult {
    DBXFileRequestsDeleteAllClosedFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBFILEREQUESTSFileRequestToDBX(object: $0) })
}

func mapDBFILEREQUESTSDeleteFileRequestArgsToDBXOptional(object: DBFILEREQUESTSDeleteFileRequestArgs?) -> DBXFileRequestsDeleteFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSDeleteFileRequestArgsToDBX(object: object)
}

func mapDBFILEREQUESTSDeleteFileRequestArgsToDBX(object: DBFILEREQUESTSDeleteFileRequestArgs) -> DBXFileRequestsDeleteFileRequestArgs {
    DBXFileRequestsDeleteFileRequestArgs(ids: object.ids)
}

func mapDBFILEREQUESTSDeleteFileRequestErrorToDBXOptional(object: DBFILEREQUESTSDeleteFileRequestError?) -> DBXFileRequestsDeleteFileRequestError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSDeleteFileRequestErrorToDBX(object: object)
}

func mapDBFILEREQUESTSDeleteFileRequestErrorToDBX(object: DBFILEREQUESTSDeleteFileRequestError) -> DBXFileRequestsDeleteFileRequestError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsDeleteFileRequestErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsDeleteFileRequestErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsDeleteFileRequestErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsDeleteFileRequestErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsDeleteFileRequestErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsDeleteFileRequestErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsDeleteFileRequestErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsDeleteFileRequestErrorValidationError()
    }
    if object.isFileRequestOpen() {
        return DBXFileRequestsDeleteFileRequestErrorFileRequestOpen()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSDeleteFileRequestsResultToDBXOptional(object: DBFILEREQUESTSDeleteFileRequestsResult?) -> DBXFileRequestsDeleteFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSDeleteFileRequestsResultToDBX(object: object)
}

func mapDBFILEREQUESTSDeleteFileRequestsResultToDBX(object: DBFILEREQUESTSDeleteFileRequestsResult) -> DBXFileRequestsDeleteFileRequestsResult {
    DBXFileRequestsDeleteFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBFILEREQUESTSFileRequestToDBX(object: $0) })
}

func mapDBFILEREQUESTSFileRequestToDBXOptional(object: DBFILEREQUESTSFileRequest?) -> DBXFileRequestsFileRequest? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSFileRequestToDBX(object: object)
}

func mapDBFILEREQUESTSFileRequestToDBX(object: DBFILEREQUESTSFileRequest) -> DBXFileRequestsFileRequest {
    DBXFileRequestsFileRequest(
        id: object.id_,
        url: object.url,
        title: object.title,
        created: object.created,
        isOpen: object.isOpen,
        fileCount: object.fileCount,
        destination: object.destination,
        deadline: mapDBFILEREQUESTSFileRequestDeadlineToDBXOptional(object: object.deadline),
        description_: object.description_
    )
}

func mapDBFILEREQUESTSFileRequestDeadlineToDBXOptional(object: DBFILEREQUESTSFileRequestDeadline?) -> DBXFileRequestsFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSFileRequestDeadlineToDBX(object: object)
}

func mapDBFILEREQUESTSFileRequestDeadlineToDBX(object: DBFILEREQUESTSFileRequestDeadline) -> DBXFileRequestsFileRequestDeadline {
    DBXFileRequestsFileRequestDeadline(deadline: object.deadline, allowLateUploads: mapDBFILEREQUESTSGracePeriodToDBXOptional(object: object.allowLateUploads))
}

func mapDBFILEREQUESTSGetFileRequestArgsToDBXOptional(object: DBFILEREQUESTSGetFileRequestArgs?) -> DBXFileRequestsGetFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSGetFileRequestArgsToDBX(object: object)
}

func mapDBFILEREQUESTSGetFileRequestArgsToDBX(object: DBFILEREQUESTSGetFileRequestArgs) -> DBXFileRequestsGetFileRequestArgs {
    DBXFileRequestsGetFileRequestArgs(id: object.id_)
}

func mapDBFILEREQUESTSGetFileRequestErrorToDBXOptional(object: DBFILEREQUESTSGetFileRequestError?) -> DBXFileRequestsGetFileRequestError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSGetFileRequestErrorToDBX(object: object)
}

func mapDBFILEREQUESTSGetFileRequestErrorToDBX(object: DBFILEREQUESTSGetFileRequestError) -> DBXFileRequestsGetFileRequestError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsGetFileRequestErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsGetFileRequestErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsGetFileRequestErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsGetFileRequestErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsGetFileRequestErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsGetFileRequestErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsGetFileRequestErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsGetFileRequestErrorValidationError()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSGracePeriodToDBXOptional(object: DBFILEREQUESTSGracePeriod?) -> DBXFileRequestsGracePeriod? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSGracePeriodToDBX(object: object)
}

func mapDBFILEREQUESTSGracePeriodToDBX(object: DBFILEREQUESTSGracePeriod) -> DBXFileRequestsGracePeriod {
    if object.isOneDay() {
        return DBXFileRequestsGracePeriodOneDay()
    }
    if object.isTwoDays() {
        return DBXFileRequestsGracePeriodTwoDays()
    }
    if object.isSevenDays() {
        return DBXFileRequestsGracePeriodSevenDays()
    }
    if object.isThirtyDays() {
        return DBXFileRequestsGracePeriodThirtyDays()
    }
    if object.isAlways() {
        return DBXFileRequestsGracePeriodAlways()
    }
    if object.isOther() {
        return DBXFileRequestsGracePeriodOther()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSListFileRequestsArgToDBXOptional(object: DBFILEREQUESTSListFileRequestsArg?) -> DBXFileRequestsListFileRequestsArg? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsArgToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsArgToDBX(object: DBFILEREQUESTSListFileRequestsArg) -> DBXFileRequestsListFileRequestsArg {
    DBXFileRequestsListFileRequestsArg(limit: object.limit)
}

func mapDBFILEREQUESTSListFileRequestsContinueArgToDBXOptional(object: DBFILEREQUESTSListFileRequestsContinueArg?)
    -> DBXFileRequestsListFileRequestsContinueArg? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsContinueArgToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsContinueArgToDBX(object: DBFILEREQUESTSListFileRequestsContinueArg) -> DBXFileRequestsListFileRequestsContinueArg {
    DBXFileRequestsListFileRequestsContinueArg(cursor: object.cursor)
}

func mapDBFILEREQUESTSListFileRequestsContinueErrorToDBXOptional(object: DBFILEREQUESTSListFileRequestsContinueError?)
    -> DBXFileRequestsListFileRequestsContinueError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsContinueErrorToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsContinueErrorToDBX(object: DBFILEREQUESTSListFileRequestsContinueError) -> DBXFileRequestsListFileRequestsContinueError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsListFileRequestsContinueErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsListFileRequestsContinueErrorOther()
    }
    if object.isInvalidCursor() {
        return DBXFileRequestsListFileRequestsContinueErrorInvalidCursor()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSListFileRequestsErrorToDBXOptional(object: DBFILEREQUESTSListFileRequestsError?) -> DBXFileRequestsListFileRequestsError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsErrorToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsErrorToDBX(object: DBFILEREQUESTSListFileRequestsError) -> DBXFileRequestsListFileRequestsError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsListFileRequestsErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsListFileRequestsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSListFileRequestsResultToDBXOptional(object: DBFILEREQUESTSListFileRequestsResult?) -> DBXFileRequestsListFileRequestsResult? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsResultToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsResultToDBX(object: DBFILEREQUESTSListFileRequestsResult) -> DBXFileRequestsListFileRequestsResult {
    DBXFileRequestsListFileRequestsResult(fileRequests: object.fileRequests.compactMap { mapDBFILEREQUESTSFileRequestToDBX(object: $0) })
}

func mapDBFILEREQUESTSListFileRequestsV2ResultToDBXOptional(object: DBFILEREQUESTSListFileRequestsV2Result?) -> DBXFileRequestsListFileRequestsV2Result? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSListFileRequestsV2ResultToDBX(object: object)
}

func mapDBFILEREQUESTSListFileRequestsV2ResultToDBX(object: DBFILEREQUESTSListFileRequestsV2Result) -> DBXFileRequestsListFileRequestsV2Result {
    DBXFileRequestsListFileRequestsV2Result(
        fileRequests: object.fileRequests.compactMap { mapDBFILEREQUESTSFileRequestToDBX(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBFILEREQUESTSUpdateFileRequestArgsToDBXOptional(object: DBFILEREQUESTSUpdateFileRequestArgs?) -> DBXFileRequestsUpdateFileRequestArgs? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSUpdateFileRequestArgsToDBX(object: object)
}

func mapDBFILEREQUESTSUpdateFileRequestArgsToDBX(object: DBFILEREQUESTSUpdateFileRequestArgs) -> DBXFileRequestsUpdateFileRequestArgs {
    DBXFileRequestsUpdateFileRequestArgs(
        id: object.id_,
        title: object.title,
        destination: object.destination,
        deadline: mapDBFILEREQUESTSUpdateFileRequestDeadlineToDBX(object: object.deadline),
        open: object.open,
        description_: object.description_
    )
}

func mapDBFILEREQUESTSUpdateFileRequestDeadlineToDBXOptional(object: DBFILEREQUESTSUpdateFileRequestDeadline?) -> DBXFileRequestsUpdateFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSUpdateFileRequestDeadlineToDBX(object: object)
}

func mapDBFILEREQUESTSUpdateFileRequestDeadlineToDBX(object: DBFILEREQUESTSUpdateFileRequestDeadline) -> DBXFileRequestsUpdateFileRequestDeadline {
    if object.isNoUpdate() {
        return DBXFileRequestsUpdateFileRequestDeadlineNoUpdate()
    }
    if object.isUpdate() {
        let update = mapDBFILEREQUESTSFileRequestDeadlineToDBXOptional(object: object.update)
        return DBXFileRequestsUpdateFileRequestDeadline.factory(swift: .update(update?.swift))
    }
    if object.isOther() {
        return DBXFileRequestsUpdateFileRequestDeadlineOther()
    }
    fatalError("codegen error")
}

func mapDBFILEREQUESTSUpdateFileRequestErrorToDBXOptional(object: DBFILEREQUESTSUpdateFileRequestError?) -> DBXFileRequestsUpdateFileRequestError? {
    guard let object = object else { return nil }
    return mapDBFILEREQUESTSUpdateFileRequestErrorToDBX(object: object)
}

func mapDBFILEREQUESTSUpdateFileRequestErrorToDBX(object: DBFILEREQUESTSUpdateFileRequestError) -> DBXFileRequestsUpdateFileRequestError {
    if object.isDisabledForTeam() {
        return DBXFileRequestsUpdateFileRequestErrorDisabledForTeam()
    }
    if object.isOther() {
        return DBXFileRequestsUpdateFileRequestErrorOther()
    }
    if object.isNotFound() {
        return DBXFileRequestsUpdateFileRequestErrorNotFound()
    }
    if object.isNotAFolder() {
        return DBXFileRequestsUpdateFileRequestErrorNotAFolder()
    }
    if object.isAppLacksAccess() {
        return DBXFileRequestsUpdateFileRequestErrorAppLacksAccess()
    }
    if object.isNoPermission() {
        return DBXFileRequestsUpdateFileRequestErrorNoPermission()
    }
    if object.isEmailUnverified() {
        return DBXFileRequestsUpdateFileRequestErrorEmailUnverified()
    }
    if object.isValidationError() {
        return DBXFileRequestsUpdateFileRequestErrorValidationError()
    }
    fatalError("codegen error")
}
