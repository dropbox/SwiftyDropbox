///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXAuthAccessErrorToDBOptional(object: DBXAuthAccessError?) -> DBAUTHAccessError? {
    guard let object = object else { return nil }
    return mapDBXAuthAccessErrorToDB(object: object)
}

func mapDBXAuthAccessErrorToDB(object: DBXAuthAccessError) -> DBAUTHAccessError {
    if let object = object.asInvalidAccountType {
        let invalidAccountType = mapDBXAuthInvalidAccountTypeErrorToDB(object: object.invalidAccountType)
        return DBAUTHAccessError(invalidAccountType: invalidAccountType)
    }
    if let object = object.asPaperAccessDenied {
        let paperAccessDenied = mapDBXAuthPaperAccessErrorToDB(object: object.paperAccessDenied)
        return DBAUTHAccessError(paperAccessDenied: paperAccessDenied)
    }
    if object.asOther != nil {
        return DBAUTHAccessError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthAuthErrorToDBOptional(object: DBXAuthAuthError?) -> DBAUTHAuthError? {
    guard let object = object else { return nil }
    return mapDBXAuthAuthErrorToDB(object: object)
}

func mapDBXAuthAuthErrorToDB(object: DBXAuthAuthError) -> DBAUTHAuthError {
    if object.asInvalidAccessToken != nil {
        return DBAUTHAuthError(invalidAccessToken: ())
    }
    if object.asInvalidSelectUser != nil {
        return DBAUTHAuthError(invalidSelectUser: ())
    }
    if object.asInvalidSelectAdmin != nil {
        return DBAUTHAuthError(invalidSelectAdmin: ())
    }
    if object.asUserSuspended != nil {
        return DBAUTHAuthError(userSuspended: ())
    }
    if object.asExpiredAccessToken != nil {
        return DBAUTHAuthError(expiredAccessToken: ())
    }
    if let object = object.asMissingScope {
        let missingScope = mapDBXAuthTokenScopeErrorToDB(object: object.missingScope)
        return DBAUTHAuthError(missingScope: missingScope)
    }
    if object.asRouteAccessDenied != nil {
        return DBAUTHAuthError(routeAccessDenied: ())
    }
    if object.asOther != nil {
        return DBAUTHAuthError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthInvalidAccountTypeErrorToDBOptional(object: DBXAuthInvalidAccountTypeError?) -> DBAUTHInvalidAccountTypeError? {
    guard let object = object else { return nil }
    return mapDBXAuthInvalidAccountTypeErrorToDB(object: object)
}

func mapDBXAuthInvalidAccountTypeErrorToDB(object: DBXAuthInvalidAccountTypeError) -> DBAUTHInvalidAccountTypeError {
    if object.asEndpoint != nil {
        return DBAUTHInvalidAccountTypeError(endpoint: ())
    }
    if object.asFeature != nil {
        return DBAUTHInvalidAccountTypeError(feature: ())
    }
    if object.asOther != nil {
        return DBAUTHInvalidAccountTypeError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthPaperAccessErrorToDBOptional(object: DBXAuthPaperAccessError?) -> DBAUTHPaperAccessError? {
    guard let object = object else { return nil }
    return mapDBXAuthPaperAccessErrorToDB(object: object)
}

func mapDBXAuthPaperAccessErrorToDB(object: DBXAuthPaperAccessError) -> DBAUTHPaperAccessError {
    if object.asPaperDisabled != nil {
        return DBAUTHPaperAccessError(paperDisabled: ())
    }
    if object.asNotPaperUser != nil {
        return DBAUTHPaperAccessError(notPaperUser: ())
    }
    if object.asOther != nil {
        return DBAUTHPaperAccessError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthRateLimitErrorToDBOptional(object: DBXAuthRateLimitError?) -> DBAUTHRateLimitError? {
    guard let object = object else { return nil }
    return mapDBXAuthRateLimitErrorToDB(object: object)
}

func mapDBXAuthRateLimitErrorToDB(object: DBXAuthRateLimitError) -> DBAUTHRateLimitError {
    DBAUTHRateLimitError(reason: mapDBXAuthRateLimitReasonToDB(object: object.reason), retryAfter: object.retryAfter)
}

func mapDBXAuthRateLimitReasonToDBOptional(object: DBXAuthRateLimitReason?) -> DBAUTHRateLimitReason? {
    guard let object = object else { return nil }
    return mapDBXAuthRateLimitReasonToDB(object: object)
}

func mapDBXAuthRateLimitReasonToDB(object: DBXAuthRateLimitReason) -> DBAUTHRateLimitReason {
    if object.asTooManyRequests != nil {
        return DBAUTHRateLimitReason(tooManyRequests: ())
    }
    if object.asTooManyWriteOperations != nil {
        return DBAUTHRateLimitReason(tooManyWriteOperations: ())
    }
    if object.asOther != nil {
        return DBAUTHRateLimitReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthTokenFromOAuth1ArgToDBOptional(object: DBXAuthTokenFromOAuth1Arg?) -> DBAUTHTokenFromOAuth1Arg? {
    guard let object = object else { return nil }
    return mapDBXAuthTokenFromOAuth1ArgToDB(object: object)
}

func mapDBXAuthTokenFromOAuth1ArgToDB(object: DBXAuthTokenFromOAuth1Arg) -> DBAUTHTokenFromOAuth1Arg {
    DBAUTHTokenFromOAuth1Arg(oauth1Token: object.oauth1Token, oauth1TokenSecret: object.oauth1TokenSecret)
}

func mapDBXAuthTokenFromOAuth1ErrorToDBOptional(object: DBXAuthTokenFromOAuth1Error?) -> DBAUTHTokenFromOAuth1Error? {
    guard let object = object else { return nil }
    return mapDBXAuthTokenFromOAuth1ErrorToDB(object: object)
}

func mapDBXAuthTokenFromOAuth1ErrorToDB(object: DBXAuthTokenFromOAuth1Error) -> DBAUTHTokenFromOAuth1Error {
    if object.asInvalidOauth1TokenInfo != nil {
        return DBAUTHTokenFromOAuth1Error(invalidOauth1TokenInfo: ())
    }
    if object.asAppIdMismatch != nil {
        return DBAUTHTokenFromOAuth1Error(appIdMismatch: ())
    }
    if object.asOther != nil {
        return DBAUTHTokenFromOAuth1Error(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAuthTokenFromOAuth1ResultToDBOptional(object: DBXAuthTokenFromOAuth1Result?) -> DBAUTHTokenFromOAuth1Result? {
    guard let object = object else { return nil }
    return mapDBXAuthTokenFromOAuth1ResultToDB(object: object)
}

func mapDBXAuthTokenFromOAuth1ResultToDB(object: DBXAuthTokenFromOAuth1Result) -> DBAUTHTokenFromOAuth1Result {
    DBAUTHTokenFromOAuth1Result(oauth2Token: object.oauth2Token)
}

func mapDBXAuthTokenScopeErrorToDBOptional(object: DBXAuthTokenScopeError?) -> DBAUTHTokenScopeError? {
    guard let object = object else { return nil }
    return mapDBXAuthTokenScopeErrorToDB(object: object)
}

func mapDBXAuthTokenScopeErrorToDB(object: DBXAuthTokenScopeError) -> DBAUTHTokenScopeError {
    DBAUTHTokenScopeError(requiredScope: object.requiredScope)
}
