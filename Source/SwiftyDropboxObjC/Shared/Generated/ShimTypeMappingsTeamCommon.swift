///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXTeamCommonGroupManagementTypeToDBOptional(object: DBXTeamCommonGroupManagementType?) -> DBTEAMCOMMONGroupManagementType? {
    guard let object = object else { return nil }
    return mapDBXTeamCommonGroupManagementTypeToDB(object: object)
}

func mapDBXTeamCommonGroupManagementTypeToDB(object: DBXTeamCommonGroupManagementType) -> DBTEAMCOMMONGroupManagementType {
    if object.asUserManaged != nil {
        return DBTEAMCOMMONGroupManagementType(userManaged: ())
    }
    if object.asCompanyManaged != nil {
        return DBTEAMCOMMONGroupManagementType(companyManaged: ())
    }
    if object.asSystemManaged != nil {
        return DBTEAMCOMMONGroupManagementType(systemManaged: ())
    }
    if object.asOther != nil {
        return DBTEAMCOMMONGroupManagementType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCommonGroupSummaryToDBOptional(object: DBXTeamCommonGroupSummary?) -> DBTEAMCOMMONGroupSummary? {
    guard let object = object else { return nil }
    return mapDBXTeamCommonGroupSummaryToDB(object: object)
}

func mapDBXTeamCommonGroupSummaryToDB(object: DBXTeamCommonGroupSummary) -> DBTEAMCOMMONGroupSummary {
    DBTEAMCOMMONGroupSummary(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBXTeamCommonGroupManagementTypeToDB(object: object.groupManagementType),
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount
    )
}

func mapDBXTeamCommonGroupTypeToDBOptional(object: DBXTeamCommonGroupType?) -> DBTEAMCOMMONGroupType? {
    guard let object = object else { return nil }
    return mapDBXTeamCommonGroupTypeToDB(object: object)
}

func mapDBXTeamCommonGroupTypeToDB(object: DBXTeamCommonGroupType) -> DBTEAMCOMMONGroupType {
    if object.asTeam != nil {
        return DBTEAMCOMMONGroupType(team: ())
    }
    if object.asUserManaged != nil {
        return DBTEAMCOMMONGroupType(userManaged: ())
    }
    if object.asOther != nil {
        return DBTEAMCOMMONGroupType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCommonMemberSpaceLimitTypeToDBOptional(object: DBXTeamCommonMemberSpaceLimitType?) -> DBTEAMCOMMONMemberSpaceLimitType? {
    guard let object = object else { return nil }
    return mapDBXTeamCommonMemberSpaceLimitTypeToDB(object: object)
}

func mapDBXTeamCommonMemberSpaceLimitTypeToDB(object: DBXTeamCommonMemberSpaceLimitType) -> DBTEAMCOMMONMemberSpaceLimitType {
    if object.asOff != nil {
        return DBTEAMCOMMONMemberSpaceLimitType(off: ())
    }
    if object.asAlertOnly != nil {
        return DBTEAMCOMMONMemberSpaceLimitType(alertOnly: ())
    }
    if object.asStopSync != nil {
        return DBTEAMCOMMONMemberSpaceLimitType(stopSync: ())
    }
    if object.asOther != nil {
        return DBTEAMCOMMONMemberSpaceLimitType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCommonTimeRangeToDBOptional(object: DBXTeamCommonTimeRange?) -> DBTEAMCOMMONTimeRange? {
    guard let object = object else { return nil }
    return mapDBXTeamCommonTimeRangeToDB(object: object)
}

func mapDBXTeamCommonTimeRangeToDB(object: DBXTeamCommonTimeRange) -> DBTEAMCOMMONTimeRange {
    DBTEAMCOMMONTimeRange(startTime: object.startTime, endTime: object.endTime)
}
