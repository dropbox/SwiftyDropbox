///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the file_properties namespace
/// For Swift see file_properties

/// Objective-C compatible AddPropertiesArg struct
@objc
public class DBXFilePropertiesAddPropertiesArg: NSObject {
    /// A unique identifier for the file or folder.
    @objc
    public var path: String { swift.path }
    /// The property groups which are to be added to a Dropbox file. No two groups in the input should  refer to the
    /// same template.
    @objc
    public var propertyGroups: [DBXFilePropertiesPropertyGroup] { swift.propertyGroups.map { DBXFilePropertiesPropertyGroup(swift: $0) } }

    @objc
    public init(path: String, propertyGroups: [DBXFilePropertiesPropertyGroup]) {
        self.swift = FileProperties.AddPropertiesArg(path: path, propertyGroups: propertyGroups.map(\.swift))
    }

    let swift: FileProperties.AddPropertiesArg

    public init(swift: FileProperties.AddPropertiesArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TemplateError union
@objc
public class DBXFilePropertiesTemplateError: NSObject {
    let swift: FileProperties.TemplateError

    public init(swift: FileProperties.TemplateError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.TemplateError) -> DBXFilePropertiesTemplateError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesTemplateErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesTemplateErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesTemplateErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesTemplateErrorTemplateNotFound? {
        self as? DBXFilePropertiesTemplateErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesTemplateErrorRestrictedContent? {
        self as? DBXFilePropertiesTemplateErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesTemplateErrorOther? {
        self as? DBXFilePropertiesTemplateErrorOther
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesTemplateErrorTemplateNotFound: DBXFilePropertiesTemplateError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.TemplateError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesTemplateErrorRestrictedContent: DBXFilePropertiesTemplateError {
    @objc
    public init() {
        let swift = FileProperties.TemplateError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesTemplateErrorOther: DBXFilePropertiesTemplateError {
    @objc
    public init() {
        let swift = FileProperties.TemplateError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PropertiesError union
@objc
public class DBXFilePropertiesPropertiesError: NSObject {
    let swift: FileProperties.PropertiesError

    public init(swift: FileProperties.PropertiesError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.PropertiesError) -> DBXFilePropertiesPropertiesError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesPropertiesErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesPropertiesErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesPropertiesErrorOther()
        case .path(let swiftArg):
            let arg = DBXFilePropertiesLookupError(swift: swiftArg)
            return DBXFilePropertiesPropertiesErrorPath(arg)
        case .unsupportedFolder:
            return DBXFilePropertiesPropertiesErrorUnsupportedFolder()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesPropertiesErrorTemplateNotFound? {
        self as? DBXFilePropertiesPropertiesErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesPropertiesErrorRestrictedContent? {
        self as? DBXFilePropertiesPropertiesErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesPropertiesErrorOther? {
        self as? DBXFilePropertiesPropertiesErrorOther
    }

    @objc
    public var asPath: DBXFilePropertiesPropertiesErrorPath? {
        self as? DBXFilePropertiesPropertiesErrorPath
    }

    @objc
    public var asUnsupportedFolder: DBXFilePropertiesPropertiesErrorUnsupportedFolder? {
        self as? DBXFilePropertiesPropertiesErrorUnsupportedFolder
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesPropertiesErrorTemplateNotFound: DBXFilePropertiesPropertiesError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.PropertiesError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesPropertiesErrorRestrictedContent: DBXFilePropertiesPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesErrorOther: DBXFilePropertiesPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesError.other
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesErrorPath: DBXFilePropertiesPropertiesError {
    @objc
    public var path: DBXFilePropertiesLookupError

    @objc
    public init(_ arg: DBXFilePropertiesLookupError) {
        self.path = arg
        let swift = FileProperties.PropertiesError.path(arg.swift)
        super.init(swift: swift)
    }
}

/// This folder cannot be tagged. Tagging folders is not supported for team-owned templates.
@objc
public class DBXFilePropertiesPropertiesErrorUnsupportedFolder: DBXFilePropertiesPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesError.unsupportedFolder
        super.init(swift: swift)
    }
}

/// Objective-C compatible InvalidPropertyGroupError union
@objc
public class DBXFilePropertiesInvalidPropertyGroupError: NSObject {
    let swift: FileProperties.InvalidPropertyGroupError

    public init(swift: FileProperties.InvalidPropertyGroupError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.InvalidPropertyGroupError) -> DBXFilePropertiesInvalidPropertyGroupError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesInvalidPropertyGroupErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesInvalidPropertyGroupErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesInvalidPropertyGroupErrorOther()
        case .path(let swiftArg):
            let arg = DBXFilePropertiesLookupError(swift: swiftArg)
            return DBXFilePropertiesInvalidPropertyGroupErrorPath(arg)
        case .unsupportedFolder:
            return DBXFilePropertiesInvalidPropertyGroupErrorUnsupportedFolder()
        case .propertyFieldTooLarge:
            return DBXFilePropertiesInvalidPropertyGroupErrorPropertyFieldTooLarge()
        case .doesNotFitTemplate:
            return DBXFilePropertiesInvalidPropertyGroupErrorDoesNotFitTemplate()
        case .duplicatePropertyGroups:
            return DBXFilePropertiesInvalidPropertyGroupErrorDuplicatePropertyGroups()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesInvalidPropertyGroupErrorTemplateNotFound? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesInvalidPropertyGroupErrorRestrictedContent? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesInvalidPropertyGroupErrorOther? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorOther
    }

    @objc
    public var asPath: DBXFilePropertiesInvalidPropertyGroupErrorPath? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorPath
    }

    @objc
    public var asUnsupportedFolder: DBXFilePropertiesInvalidPropertyGroupErrorUnsupportedFolder? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorUnsupportedFolder
    }

    @objc
    public var asPropertyFieldTooLarge: DBXFilePropertiesInvalidPropertyGroupErrorPropertyFieldTooLarge? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorPropertyFieldTooLarge
    }

    @objc
    public var asDoesNotFitTemplate: DBXFilePropertiesInvalidPropertyGroupErrorDoesNotFitTemplate? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorDoesNotFitTemplate
    }

    @objc
    public var asDuplicatePropertyGroups: DBXFilePropertiesInvalidPropertyGroupErrorDuplicatePropertyGroups? {
        self as? DBXFilePropertiesInvalidPropertyGroupErrorDuplicatePropertyGroups
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorTemplateNotFound: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.InvalidPropertyGroupError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorRestrictedContent: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorOther: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.other
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorPath: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public var path: DBXFilePropertiesLookupError

    @objc
    public init(_ arg: DBXFilePropertiesLookupError) {
        self.path = arg
        let swift = FileProperties.InvalidPropertyGroupError.path(arg.swift)
        super.init(swift: swift)
    }
}

/// This folder cannot be tagged. Tagging folders is not supported for team-owned templates.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorUnsupportedFolder: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.unsupportedFolder
        super.init(swift: swift)
    }
}

/// One or more of the supplied property field values is too large.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorPropertyFieldTooLarge: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.propertyFieldTooLarge
        super.init(swift: swift)
    }
}

/// One or more of the supplied property fields does not conform to the template specifications.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorDoesNotFitTemplate: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.doesNotFitTemplate
        super.init(swift: swift)
    }
}

/// There are 2 or more property groups referring to the same templates in the input.
@objc
public class DBXFilePropertiesInvalidPropertyGroupErrorDuplicatePropertyGroups: DBXFilePropertiesInvalidPropertyGroupError {
    @objc
    public init() {
        let swift = FileProperties.InvalidPropertyGroupError.duplicatePropertyGroups
        super.init(swift: swift)
    }
}

/// Objective-C compatible AddPropertiesError union
@objc
public class DBXFilePropertiesAddPropertiesError: NSObject {
    let swift: FileProperties.AddPropertiesError

    public init(swift: FileProperties.AddPropertiesError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.AddPropertiesError) -> DBXFilePropertiesAddPropertiesError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesAddPropertiesErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesAddPropertiesErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesAddPropertiesErrorOther()
        case .path(let swiftArg):
            let arg = DBXFilePropertiesLookupError(swift: swiftArg)
            return DBXFilePropertiesAddPropertiesErrorPath(arg)
        case .unsupportedFolder:
            return DBXFilePropertiesAddPropertiesErrorUnsupportedFolder()
        case .propertyFieldTooLarge:
            return DBXFilePropertiesAddPropertiesErrorPropertyFieldTooLarge()
        case .doesNotFitTemplate:
            return DBXFilePropertiesAddPropertiesErrorDoesNotFitTemplate()
        case .duplicatePropertyGroups:
            return DBXFilePropertiesAddPropertiesErrorDuplicatePropertyGroups()
        case .propertyGroupAlreadyExists:
            return DBXFilePropertiesAddPropertiesErrorPropertyGroupAlreadyExists()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesAddPropertiesErrorTemplateNotFound? {
        self as? DBXFilePropertiesAddPropertiesErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesAddPropertiesErrorRestrictedContent? {
        self as? DBXFilePropertiesAddPropertiesErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesAddPropertiesErrorOther? {
        self as? DBXFilePropertiesAddPropertiesErrorOther
    }

    @objc
    public var asPath: DBXFilePropertiesAddPropertiesErrorPath? {
        self as? DBXFilePropertiesAddPropertiesErrorPath
    }

    @objc
    public var asUnsupportedFolder: DBXFilePropertiesAddPropertiesErrorUnsupportedFolder? {
        self as? DBXFilePropertiesAddPropertiesErrorUnsupportedFolder
    }

    @objc
    public var asPropertyFieldTooLarge: DBXFilePropertiesAddPropertiesErrorPropertyFieldTooLarge? {
        self as? DBXFilePropertiesAddPropertiesErrorPropertyFieldTooLarge
    }

    @objc
    public var asDoesNotFitTemplate: DBXFilePropertiesAddPropertiesErrorDoesNotFitTemplate? {
        self as? DBXFilePropertiesAddPropertiesErrorDoesNotFitTemplate
    }

    @objc
    public var asDuplicatePropertyGroups: DBXFilePropertiesAddPropertiesErrorDuplicatePropertyGroups? {
        self as? DBXFilePropertiesAddPropertiesErrorDuplicatePropertyGroups
    }

    @objc
    public var asPropertyGroupAlreadyExists: DBXFilePropertiesAddPropertiesErrorPropertyGroupAlreadyExists? {
        self as? DBXFilePropertiesAddPropertiesErrorPropertyGroupAlreadyExists
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesAddPropertiesErrorTemplateNotFound: DBXFilePropertiesAddPropertiesError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.AddPropertiesError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesAddPropertiesErrorRestrictedContent: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesAddPropertiesErrorOther: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.other
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesAddPropertiesErrorPath: DBXFilePropertiesAddPropertiesError {
    @objc
    public var path: DBXFilePropertiesLookupError

    @objc
    public init(_ arg: DBXFilePropertiesLookupError) {
        self.path = arg
        let swift = FileProperties.AddPropertiesError.path(arg.swift)
        super.init(swift: swift)
    }
}

/// This folder cannot be tagged. Tagging folders is not supported for team-owned templates.
@objc
public class DBXFilePropertiesAddPropertiesErrorUnsupportedFolder: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.unsupportedFolder
        super.init(swift: swift)
    }
}

/// One or more of the supplied property field values is too large.
@objc
public class DBXFilePropertiesAddPropertiesErrorPropertyFieldTooLarge: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.propertyFieldTooLarge
        super.init(swift: swift)
    }
}

/// One or more of the supplied property fields does not conform to the template specifications.
@objc
public class DBXFilePropertiesAddPropertiesErrorDoesNotFitTemplate: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.doesNotFitTemplate
        super.init(swift: swift)
    }
}

/// There are 2 or more property groups referring to the same templates in the input.
@objc
public class DBXFilePropertiesAddPropertiesErrorDuplicatePropertyGroups: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.duplicatePropertyGroups
        super.init(swift: swift)
    }
}

/// A property group associated with this template and file already exists.
@objc
public class DBXFilePropertiesAddPropertiesErrorPropertyGroupAlreadyExists: DBXFilePropertiesAddPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.AddPropertiesError.propertyGroupAlreadyExists
        super.init(swift: swift)
    }
}

/// Defines how a property group may be structured.
@objc
public class DBXFilePropertiesPropertyGroupTemplate: NSObject {
    /// Display name for the template. Template names can be up to 256 bytes.
    @objc
    public var name: String { swift.name }
    /// Description for the template. Template descriptions can be up to 1024 bytes.
    @objc
    public var description_: String { swift.description_ }
    /// Definitions of the property fields associated with this template. There can be up to 32 properties in a
    /// single template.
    @objc
    public var fields: [DBXFilePropertiesPropertyFieldTemplate] { swift.fields.map { DBXFilePropertiesPropertyFieldTemplate(swift: $0) } }

    @objc
    public init(name: String, description_: String, fields: [DBXFilePropertiesPropertyFieldTemplate]) {
        self.swift = FileProperties.PropertyGroupTemplate(name: name, description_: description_, fields: fields.map(\.swift))
    }

    let swift: FileProperties.PropertyGroupTemplate

    public init(swift: FileProperties.PropertyGroupTemplate) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AddTemplateArg struct
@objc
public class DBXFilePropertiesAddTemplateArg: DBXFilePropertiesPropertyGroupTemplate {
    let subSwift: FileProperties.AddTemplateArg

    public init(swift: FileProperties.AddTemplateArg) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Objective-C compatible AddTemplateResult struct
@objc
public class DBXFilePropertiesAddTemplateResult: NSObject {
    /// An identifier for template added by  See templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateId: String { swift.templateId }

    @objc
    public init(templateId: String) {
        self.swift = FileProperties.AddTemplateResult(templateId: templateId)
    }

    let swift: FileProperties.AddTemplateResult

    public init(swift: FileProperties.AddTemplateResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GetTemplateArg struct
@objc
public class DBXFilePropertiesGetTemplateArg: NSObject {
    /// An identifier for template added by route  See templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateId: String { swift.templateId }

    @objc
    public init(templateId: String) {
        self.swift = FileProperties.GetTemplateArg(templateId: templateId)
    }

    let swift: FileProperties.GetTemplateArg

    public init(swift: FileProperties.GetTemplateArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GetTemplateResult struct
@objc
public class DBXFilePropertiesGetTemplateResult: DBXFilePropertiesPropertyGroupTemplate {
    let subSwift: FileProperties.GetTemplateResult

    public init(swift: FileProperties.GetTemplateResult) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Objective-C compatible ListTemplateResult struct
@objc
public class DBXFilePropertiesListTemplateResult: NSObject {
    /// List of identifiers for templates added by  See templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateIds: [String] { swift.templateIds }

    @objc
    public init(templateIds: [String]) {
        self.swift = FileProperties.ListTemplateResult(templateIds: templateIds)
    }

    let swift: FileProperties.ListTemplateResult

    public init(swift: FileProperties.ListTemplateResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Logical operator to join search queries together.
@objc
public class DBXFilePropertiesLogicalOperator: NSObject {
    let swift: FileProperties.LogicalOperator

    public init(swift: FileProperties.LogicalOperator) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.LogicalOperator) -> DBXFilePropertiesLogicalOperator {
        switch swift {
        case .orOperator:
            return DBXFilePropertiesLogicalOperatorOrOperator()
        case .other:
            return DBXFilePropertiesLogicalOperatorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOrOperator: DBXFilePropertiesLogicalOperatorOrOperator? {
        self as? DBXFilePropertiesLogicalOperatorOrOperator
    }

    @objc
    public var asOther: DBXFilePropertiesLogicalOperatorOther? {
        self as? DBXFilePropertiesLogicalOperatorOther
    }
}

/// Append a query with an "or" operator.
@objc
public class DBXFilePropertiesLogicalOperatorOrOperator: DBXFilePropertiesLogicalOperator {
    @objc
    public init() {
        let swift = FileProperties.LogicalOperator.orOperator
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesLogicalOperatorOther: DBXFilePropertiesLogicalOperator {
    @objc
    public init() {
        let swift = FileProperties.LogicalOperator.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible LookUpPropertiesError union
@objc
public class DBXFilePropertiesLookUpPropertiesError: NSObject {
    let swift: FileProperties.LookUpPropertiesError

    public init(swift: FileProperties.LookUpPropertiesError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.LookUpPropertiesError) -> DBXFilePropertiesLookUpPropertiesError {
        switch swift {
        case .propertyGroupNotFound:
            return DBXFilePropertiesLookUpPropertiesErrorPropertyGroupNotFound()
        case .other:
            return DBXFilePropertiesLookUpPropertiesErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPropertyGroupNotFound: DBXFilePropertiesLookUpPropertiesErrorPropertyGroupNotFound? {
        self as? DBXFilePropertiesLookUpPropertiesErrorPropertyGroupNotFound
    }

    @objc
    public var asOther: DBXFilePropertiesLookUpPropertiesErrorOther? {
        self as? DBXFilePropertiesLookUpPropertiesErrorOther
    }
}

/// No property group was found.
@objc
public class DBXFilePropertiesLookUpPropertiesErrorPropertyGroupNotFound: DBXFilePropertiesLookUpPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.LookUpPropertiesError.propertyGroupNotFound
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesLookUpPropertiesErrorOther: DBXFilePropertiesLookUpPropertiesError {
    @objc
    public init() {
        let swift = FileProperties.LookUpPropertiesError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible LookupError union
@objc
public class DBXFilePropertiesLookupError: NSObject {
    let swift: FileProperties.LookupError

    public init(swift: FileProperties.LookupError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.LookupError) -> DBXFilePropertiesLookupError {
        switch swift {
        case .malformedPath(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesLookupErrorMalformedPath(arg)
        case .notFound:
            return DBXFilePropertiesLookupErrorNotFound()
        case .notFile:
            return DBXFilePropertiesLookupErrorNotFile()
        case .notFolder:
            return DBXFilePropertiesLookupErrorNotFolder()
        case .restrictedContent:
            return DBXFilePropertiesLookupErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesLookupErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asMalformedPath: DBXFilePropertiesLookupErrorMalformedPath? {
        self as? DBXFilePropertiesLookupErrorMalformedPath
    }

    @objc
    public var asNotFound: DBXFilePropertiesLookupErrorNotFound? {
        self as? DBXFilePropertiesLookupErrorNotFound
    }

    @objc
    public var asNotFile: DBXFilePropertiesLookupErrorNotFile? {
        self as? DBXFilePropertiesLookupErrorNotFile
    }

    @objc
    public var asNotFolder: DBXFilePropertiesLookupErrorNotFolder? {
        self as? DBXFilePropertiesLookupErrorNotFolder
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesLookupErrorRestrictedContent? {
        self as? DBXFilePropertiesLookupErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesLookupErrorOther? {
        self as? DBXFilePropertiesLookupErrorOther
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesLookupErrorMalformedPath: DBXFilePropertiesLookupError {
    @objc
    public var malformedPath: String

    @objc
    public init(_ arg: String) {
        self.malformedPath = arg
        let swift = FileProperties.LookupError.malformedPath(arg)
        super.init(swift: swift)
    }
}

/// There is nothing at the given path.
@objc
public class DBXFilePropertiesLookupErrorNotFound: DBXFilePropertiesLookupError {
    @objc
    public init() {
        let swift = FileProperties.LookupError.notFound
        super.init(swift: swift)
    }
}

/// We were expecting a file, but the given path refers to something that isn't a file.
@objc
public class DBXFilePropertiesLookupErrorNotFile: DBXFilePropertiesLookupError {
    @objc
    public init() {
        let swift = FileProperties.LookupError.notFile
        super.init(swift: swift)
    }
}

/// We were expecting a folder, but the given path refers to something that isn't a folder.
@objc
public class DBXFilePropertiesLookupErrorNotFolder: DBXFilePropertiesLookupError {
    @objc
    public init() {
        let swift = FileProperties.LookupError.notFolder
        super.init(swift: swift)
    }
}

/// The file cannot be transferred because the content is restricted. For example, we might restrict a file due
/// to legal requirements.
@objc
public class DBXFilePropertiesLookupErrorRestrictedContent: DBXFilePropertiesLookupError {
    @objc
    public init() {
        let swift = FileProperties.LookupError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesLookupErrorOther: DBXFilePropertiesLookupError {
    @objc
    public init() {
        let swift = FileProperties.LookupError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ModifyTemplateError union
@objc
public class DBXFilePropertiesModifyTemplateError: NSObject {
    let swift: FileProperties.ModifyTemplateError

    public init(swift: FileProperties.ModifyTemplateError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.ModifyTemplateError) -> DBXFilePropertiesModifyTemplateError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesModifyTemplateErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesModifyTemplateErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesModifyTemplateErrorOther()
        case .conflictingPropertyNames:
            return DBXFilePropertiesModifyTemplateErrorConflictingPropertyNames()
        case .tooManyProperties:
            return DBXFilePropertiesModifyTemplateErrorTooManyProperties()
        case .tooManyTemplates:
            return DBXFilePropertiesModifyTemplateErrorTooManyTemplates()
        case .templateAttributeTooLarge:
            return DBXFilePropertiesModifyTemplateErrorTemplateAttributeTooLarge()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesModifyTemplateErrorTemplateNotFound? {
        self as? DBXFilePropertiesModifyTemplateErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesModifyTemplateErrorRestrictedContent? {
        self as? DBXFilePropertiesModifyTemplateErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesModifyTemplateErrorOther? {
        self as? DBXFilePropertiesModifyTemplateErrorOther
    }

    @objc
    public var asConflictingPropertyNames: DBXFilePropertiesModifyTemplateErrorConflictingPropertyNames? {
        self as? DBXFilePropertiesModifyTemplateErrorConflictingPropertyNames
    }

    @objc
    public var asTooManyProperties: DBXFilePropertiesModifyTemplateErrorTooManyProperties? {
        self as? DBXFilePropertiesModifyTemplateErrorTooManyProperties
    }

    @objc
    public var asTooManyTemplates: DBXFilePropertiesModifyTemplateErrorTooManyTemplates? {
        self as? DBXFilePropertiesModifyTemplateErrorTooManyTemplates
    }

    @objc
    public var asTemplateAttributeTooLarge: DBXFilePropertiesModifyTemplateErrorTemplateAttributeTooLarge? {
        self as? DBXFilePropertiesModifyTemplateErrorTemplateAttributeTooLarge
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesModifyTemplateErrorTemplateNotFound: DBXFilePropertiesModifyTemplateError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.ModifyTemplateError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesModifyTemplateErrorRestrictedContent: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesModifyTemplateErrorOther: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.other
        super.init(swift: swift)
    }
}

/// A property field key with that name already exists in the template.
@objc
public class DBXFilePropertiesModifyTemplateErrorConflictingPropertyNames: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.conflictingPropertyNames
        super.init(swift: swift)
    }
}

/// There are too many properties in the changed template. The maximum number of properties per template is 32.
@objc
public class DBXFilePropertiesModifyTemplateErrorTooManyProperties: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.tooManyProperties
        super.init(swift: swift)
    }
}

/// There are too many templates for the team.
@objc
public class DBXFilePropertiesModifyTemplateErrorTooManyTemplates: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.tooManyTemplates
        super.init(swift: swift)
    }
}

/// The template name, description or one or more of the property field keys is too large.
@objc
public class DBXFilePropertiesModifyTemplateErrorTemplateAttributeTooLarge: DBXFilePropertiesModifyTemplateError {
    @objc
    public init() {
        let swift = FileProperties.ModifyTemplateError.templateAttributeTooLarge
        super.init(swift: swift)
    }
}

/// Objective-C compatible OverwritePropertyGroupArg struct
@objc
public class DBXFilePropertiesOverwritePropertyGroupArg: NSObject {
    /// A unique identifier for the file or folder.
    @objc
    public var path: String { swift.path }
    /// The property groups "snapshot" updates to force apply. No two groups in the input should  refer to the same
    /// template.
    @objc
    public var propertyGroups: [DBXFilePropertiesPropertyGroup] { swift.propertyGroups.map { DBXFilePropertiesPropertyGroup(swift: $0) } }

    @objc
    public init(path: String, propertyGroups: [DBXFilePropertiesPropertyGroup]) {
        self.swift = FileProperties.OverwritePropertyGroupArg(path: path, propertyGroups: propertyGroups.map(\.swift))
    }

    let swift: FileProperties.OverwritePropertyGroupArg

    public init(swift: FileProperties.OverwritePropertyGroupArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertiesSearchArg struct
@objc
public class DBXFilePropertiesPropertiesSearchArg: NSObject {
    /// Queries to search.
    @objc
    public var queries: [DBXFilePropertiesPropertiesSearchQuery] { swift.queries.map { DBXFilePropertiesPropertiesSearchQuery(swift: $0) } }
    /// Filter results to contain only properties associated with these template IDs.
    @objc
    public var templateFilter: DBXFilePropertiesTemplateFilter { DBXFilePropertiesTemplateFilter(swift: swift.templateFilter) }

    @objc
    public init(queries: [DBXFilePropertiesPropertiesSearchQuery], templateFilter: DBXFilePropertiesTemplateFilter) {
        self.swift = FileProperties.PropertiesSearchArg(queries: queries.map(\.swift), templateFilter: templateFilter.swift)
    }

    let swift: FileProperties.PropertiesSearchArg

    public init(swift: FileProperties.PropertiesSearchArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertiesSearchContinueArg struct
@objc
public class DBXFilePropertiesPropertiesSearchContinueArg: NSObject {
    /// The cursor returned by your last call to propertiesSearch or propertiesSearchContinue.
    @objc
    public var cursor: String { swift.cursor }

    @objc
    public init(cursor: String) {
        self.swift = FileProperties.PropertiesSearchContinueArg(cursor: cursor)
    }

    let swift: FileProperties.PropertiesSearchContinueArg

    public init(swift: FileProperties.PropertiesSearchContinueArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertiesSearchContinueError union
@objc
public class DBXFilePropertiesPropertiesSearchContinueError: NSObject {
    let swift: FileProperties.PropertiesSearchContinueError

    public init(swift: FileProperties.PropertiesSearchContinueError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.PropertiesSearchContinueError) -> DBXFilePropertiesPropertiesSearchContinueError {
        switch swift {
        case .reset:
            return DBXFilePropertiesPropertiesSearchContinueErrorReset()
        case .other:
            return DBXFilePropertiesPropertiesSearchContinueErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asReset: DBXFilePropertiesPropertiesSearchContinueErrorReset? {
        self as? DBXFilePropertiesPropertiesSearchContinueErrorReset
    }

    @objc
    public var asOther: DBXFilePropertiesPropertiesSearchContinueErrorOther? {
        self as? DBXFilePropertiesPropertiesSearchContinueErrorOther
    }
}

/// Indicates that the cursor has been invalidated. Call propertiesSearch to obtain a new cursor.
@objc
public class DBXFilePropertiesPropertiesSearchContinueErrorReset: DBXFilePropertiesPropertiesSearchContinueError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesSearchContinueError.reset
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesSearchContinueErrorOther: DBXFilePropertiesPropertiesSearchContinueError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesSearchContinueError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PropertiesSearchError union
@objc
public class DBXFilePropertiesPropertiesSearchError: NSObject {
    let swift: FileProperties.PropertiesSearchError

    public init(swift: FileProperties.PropertiesSearchError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.PropertiesSearchError) -> DBXFilePropertiesPropertiesSearchError {
        switch swift {
        case .propertyGroupLookup(let swiftArg):
            let arg = DBXFilePropertiesLookUpPropertiesError(swift: swiftArg)
            return DBXFilePropertiesPropertiesSearchErrorPropertyGroupLookup(arg)
        case .other:
            return DBXFilePropertiesPropertiesSearchErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPropertyGroupLookup: DBXFilePropertiesPropertiesSearchErrorPropertyGroupLookup? {
        self as? DBXFilePropertiesPropertiesSearchErrorPropertyGroupLookup
    }

    @objc
    public var asOther: DBXFilePropertiesPropertiesSearchErrorOther? {
        self as? DBXFilePropertiesPropertiesSearchErrorOther
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesSearchErrorPropertyGroupLookup: DBXFilePropertiesPropertiesSearchError {
    @objc
    public var propertyGroupLookup: DBXFilePropertiesLookUpPropertiesError

    @objc
    public init(_ arg: DBXFilePropertiesLookUpPropertiesError) {
        self.propertyGroupLookup = arg
        let swift = FileProperties.PropertiesSearchError.propertyGroupLookup(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesSearchErrorOther: DBXFilePropertiesPropertiesSearchError {
    @objc
    public init() {
        let swift = FileProperties.PropertiesSearchError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PropertiesSearchMatch struct
@objc
public class DBXFilePropertiesPropertiesSearchMatch: NSObject {
    /// The ID for the matched file or folder.
    @objc
    public var id: String { swift.id }
    /// The path for the matched file or folder.
    @objc
    public var path: String { swift.path }
    /// Whether the file or folder is deleted.
    @objc
    public var isDeleted: NSNumber { swift.isDeleted as NSNumber }
    /// List of custom property groups associated with the file.
    @objc
    public var propertyGroups: [DBXFilePropertiesPropertyGroup] { swift.propertyGroups.map { DBXFilePropertiesPropertyGroup(swift: $0) } }

    @objc
    public init(id: String, path: String, isDeleted: NSNumber, propertyGroups: [DBXFilePropertiesPropertyGroup]) {
        self.swift = FileProperties.PropertiesSearchMatch(id: id, path: path, isDeleted: isDeleted.boolValue, propertyGroups: propertyGroups.map(\.swift))
    }

    let swift: FileProperties.PropertiesSearchMatch

    public init(swift: FileProperties.PropertiesSearchMatch) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertiesSearchMode union
@objc
public class DBXFilePropertiesPropertiesSearchMode: NSObject {
    let swift: FileProperties.PropertiesSearchMode

    public init(swift: FileProperties.PropertiesSearchMode) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.PropertiesSearchMode) -> DBXFilePropertiesPropertiesSearchMode {
        switch swift {
        case .fieldName(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesPropertiesSearchModeFieldName(arg)
        case .other:
            return DBXFilePropertiesPropertiesSearchModeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFieldName: DBXFilePropertiesPropertiesSearchModeFieldName? {
        self as? DBXFilePropertiesPropertiesSearchModeFieldName
    }

    @objc
    public var asOther: DBXFilePropertiesPropertiesSearchModeOther? {
        self as? DBXFilePropertiesPropertiesSearchModeOther
    }
}

/// Search for a value associated with this field name.
@objc
public class DBXFilePropertiesPropertiesSearchModeFieldName: DBXFilePropertiesPropertiesSearchMode {
    @objc
    public var fieldName: String

    @objc
    public init(_ arg: String) {
        self.fieldName = arg
        let swift = FileProperties.PropertiesSearchMode.fieldName(arg)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertiesSearchModeOther: DBXFilePropertiesPropertiesSearchMode {
    @objc
    public init() {
        let swift = FileProperties.PropertiesSearchMode.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PropertiesSearchQuery struct
@objc
public class DBXFilePropertiesPropertiesSearchQuery: NSObject {
    /// The property field value for which to search across templates.
    @objc
    public var query: String { swift.query }
    /// The mode with which to perform the search.
    @objc
    public var mode: DBXFilePropertiesPropertiesSearchMode { DBXFilePropertiesPropertiesSearchMode(swift: swift.mode) }
    /// The logical operator with which to append the query.
    @objc
    public var logicalOperator: DBXFilePropertiesLogicalOperator { DBXFilePropertiesLogicalOperator(swift: swift.logicalOperator) }

    @objc
    public init(query: String, mode: DBXFilePropertiesPropertiesSearchMode, logicalOperator: DBXFilePropertiesLogicalOperator) {
        self.swift = FileProperties.PropertiesSearchQuery(query: query, mode: mode.swift, logicalOperator: logicalOperator.swift)
    }

    let swift: FileProperties.PropertiesSearchQuery

    public init(swift: FileProperties.PropertiesSearchQuery) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertiesSearchResult struct
@objc
public class DBXFilePropertiesPropertiesSearchResult: NSObject {
    /// A list (possibly empty) of matches for the query.
    @objc
    public var matches: [DBXFilePropertiesPropertiesSearchMatch] { swift.matches.map { DBXFilePropertiesPropertiesSearchMatch(swift: $0) } }
    /// Pass the cursor into propertiesSearchContinue to continue to receive search results. Cursor will be null
    /// when there are no more results.
    @objc
    public var cursor: String? { swift.cursor }

    @objc
    public init(matches: [DBXFilePropertiesPropertiesSearchMatch], cursor: String?) {
        self.swift = FileProperties.PropertiesSearchResult(matches: matches.map(\.swift), cursor: cursor)
    }

    let swift: FileProperties.PropertiesSearchResult

    public init(swift: FileProperties.PropertiesSearchResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Raw key/value data to be associated with a Dropbox file. Property fields are added to Dropbox files as a
/// PropertyGroup.
@objc
public class DBXFilePropertiesPropertyField: NSObject {
    /// Key of the property field associated with a file and template. Keys can be up to 256 bytes.
    @objc
    public var name: String { swift.name }
    /// Value of the property field associated with a file and template. Values can be up to 1024 bytes.
    @objc
    public var value: String { swift.value }

    @objc
    public init(name: String, value: String) {
        self.swift = FileProperties.PropertyField(name: name, value: value)
    }

    let swift: FileProperties.PropertyField

    public init(swift: FileProperties.PropertyField) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Defines how a single property field may be structured. Used exclusively by PropertyGroupTemplate.
@objc
public class DBXFilePropertiesPropertyFieldTemplate: NSObject {
    /// Key of the property field being described. Property field keys can be up to 256 bytes.
    @objc
    public var name: String { swift.name }
    /// Description of the property field. Property field descriptions can be up to 1024 bytes.
    @objc
    public var description_: String { swift.description_ }
    /// Data type of the value of this property field. This type will be enforced upon property creation and
    /// modifications.
    @objc
    public var type: DBXFilePropertiesPropertyType { DBXFilePropertiesPropertyType(swift: swift.type) }

    @objc
    public init(name: String, description_: String, type: DBXFilePropertiesPropertyType) {
        self.swift = FileProperties.PropertyFieldTemplate(name: name, description_: description_, type: type.swift)
    }

    let swift: FileProperties.PropertyFieldTemplate

    public init(swift: FileProperties.PropertyFieldTemplate) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// A subset of the property fields described by the corresponding PropertyGroupTemplate. Properties are always
/// added to a Dropbox file as a PropertyGroup. The possible key names and value types in this group are defined by
/// the corresponding PropertyGroupTemplate.
@objc
public class DBXFilePropertiesPropertyGroup: NSObject {
    /// A unique identifier for the associated template.
    @objc
    public var templateId: String { swift.templateId }
    /// The actual properties associated with the template. There can be up to 32 property types per template.
    @objc
    public var fields: [DBXFilePropertiesPropertyField] { swift.fields.map { DBXFilePropertiesPropertyField(swift: $0) } }

    @objc
    public init(templateId: String, fields: [DBXFilePropertiesPropertyField]) {
        self.swift = FileProperties.PropertyGroup(templateId: templateId, fields: fields.map(\.swift))
    }

    let swift: FileProperties.PropertyGroup

    public init(swift: FileProperties.PropertyGroup) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PropertyGroupUpdate struct
@objc
public class DBXFilePropertiesPropertyGroupUpdate: NSObject {
    /// A unique identifier for a property template.
    @objc
    public var templateId: String { swift.templateId }
    /// Property fields to update. If the property field already exists, it is updated. If the property field
    /// doesn't exist, the property group is added.
    @objc
    public var addOrUpdateFields: [DBXFilePropertiesPropertyField]? { swift.addOrUpdateFields?.map { DBXFilePropertiesPropertyField(swift: $0) } }
    /// Property fields to remove (by name), provided they exist.
    @objc
    public var removeFields: [String]? { swift.removeFields }

    @objc
    public init(templateId: String, addOrUpdateFields: [DBXFilePropertiesPropertyField]?, removeFields: [String]?) {
        self.swift = FileProperties.PropertyGroupUpdate(templateId: templateId, addOrUpdateFields: addOrUpdateFields?.map(\.swift), removeFields: removeFields)
    }

    let swift: FileProperties.PropertyGroupUpdate

    public init(swift: FileProperties.PropertyGroupUpdate) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Data type of the given property field added.
@objc
public class DBXFilePropertiesPropertyType: NSObject {
    let swift: FileProperties.PropertyType

    public init(swift: FileProperties.PropertyType) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.PropertyType) -> DBXFilePropertiesPropertyType {
        switch swift {
        case .string_:
            return DBXFilePropertiesPropertyTypeString_()
        case .other:
            return DBXFilePropertiesPropertyTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asString_: DBXFilePropertiesPropertyTypeString_? {
        self as? DBXFilePropertiesPropertyTypeString_
    }

    @objc
    public var asOther: DBXFilePropertiesPropertyTypeOther? {
        self as? DBXFilePropertiesPropertyTypeOther
    }
}

/// The associated property field will be of type string. Unicode is supported.
@objc
public class DBXFilePropertiesPropertyTypeString_: DBXFilePropertiesPropertyType {
    @objc
    public init() {
        let swift = FileProperties.PropertyType.string_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesPropertyTypeOther: DBXFilePropertiesPropertyType {
    @objc
    public init() {
        let swift = FileProperties.PropertyType.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible RemovePropertiesArg struct
@objc
public class DBXFilePropertiesRemovePropertiesArg: NSObject {
    /// A unique identifier for the file or folder.
    @objc
    public var path: String { swift.path }
    /// A list of identifiers for a template created by templatesAddForUser or templatesAddForTeam.
    @objc
    public var propertyTemplateIds: [String] { swift.propertyTemplateIds }

    @objc
    public init(path: String, propertyTemplateIds: [String]) {
        self.swift = FileProperties.RemovePropertiesArg(path: path, propertyTemplateIds: propertyTemplateIds)
    }

    let swift: FileProperties.RemovePropertiesArg

    public init(swift: FileProperties.RemovePropertiesArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RemovePropertiesError union
@objc
public class DBXFilePropertiesRemovePropertiesError: NSObject {
    let swift: FileProperties.RemovePropertiesError

    public init(swift: FileProperties.RemovePropertiesError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.RemovePropertiesError) -> DBXFilePropertiesRemovePropertiesError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesRemovePropertiesErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesRemovePropertiesErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesRemovePropertiesErrorOther()
        case .path(let swiftArg):
            let arg = DBXFilePropertiesLookupError(swift: swiftArg)
            return DBXFilePropertiesRemovePropertiesErrorPath(arg)
        case .unsupportedFolder:
            return DBXFilePropertiesRemovePropertiesErrorUnsupportedFolder()
        case .propertyGroupLookup(let swiftArg):
            let arg = DBXFilePropertiesLookUpPropertiesError(swift: swiftArg)
            return DBXFilePropertiesRemovePropertiesErrorPropertyGroupLookup(arg)
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesRemovePropertiesErrorTemplateNotFound? {
        self as? DBXFilePropertiesRemovePropertiesErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesRemovePropertiesErrorRestrictedContent? {
        self as? DBXFilePropertiesRemovePropertiesErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesRemovePropertiesErrorOther? {
        self as? DBXFilePropertiesRemovePropertiesErrorOther
    }

    @objc
    public var asPath: DBXFilePropertiesRemovePropertiesErrorPath? {
        self as? DBXFilePropertiesRemovePropertiesErrorPath
    }

    @objc
    public var asUnsupportedFolder: DBXFilePropertiesRemovePropertiesErrorUnsupportedFolder? {
        self as? DBXFilePropertiesRemovePropertiesErrorUnsupportedFolder
    }

    @objc
    public var asPropertyGroupLookup: DBXFilePropertiesRemovePropertiesErrorPropertyGroupLookup? {
        self as? DBXFilePropertiesRemovePropertiesErrorPropertyGroupLookup
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesRemovePropertiesErrorTemplateNotFound: DBXFilePropertiesRemovePropertiesError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.RemovePropertiesError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesRemovePropertiesErrorRestrictedContent: DBXFilePropertiesRemovePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.RemovePropertiesError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesRemovePropertiesErrorOther: DBXFilePropertiesRemovePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.RemovePropertiesError.other
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesRemovePropertiesErrorPath: DBXFilePropertiesRemovePropertiesError {
    @objc
    public var path: DBXFilePropertiesLookupError

    @objc
    public init(_ arg: DBXFilePropertiesLookupError) {
        self.path = arg
        let swift = FileProperties.RemovePropertiesError.path(arg.swift)
        super.init(swift: swift)
    }
}

/// This folder cannot be tagged. Tagging folders is not supported for team-owned templates.
@objc
public class DBXFilePropertiesRemovePropertiesErrorUnsupportedFolder: DBXFilePropertiesRemovePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.RemovePropertiesError.unsupportedFolder
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesRemovePropertiesErrorPropertyGroupLookup: DBXFilePropertiesRemovePropertiesError {
    @objc
    public var propertyGroupLookup: DBXFilePropertiesLookUpPropertiesError

    @objc
    public init(_ arg: DBXFilePropertiesLookUpPropertiesError) {
        self.propertyGroupLookup = arg
        let swift = FileProperties.RemovePropertiesError.propertyGroupLookup(arg.swift)
        super.init(swift: swift)
    }
}

/// Objective-C compatible RemoveTemplateArg struct
@objc
public class DBXFilePropertiesRemoveTemplateArg: NSObject {
    /// An identifier for a template created by templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateId: String { swift.templateId }

    @objc
    public init(templateId: String) {
        self.swift = FileProperties.RemoveTemplateArg(templateId: templateId)
    }

    let swift: FileProperties.RemoveTemplateArg

    public init(swift: FileProperties.RemoveTemplateArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TemplateFilterBase union
@objc
public class DBXFilePropertiesTemplateFilterBase: NSObject {
    let swift: FileProperties.TemplateFilterBase

    public init(swift: FileProperties.TemplateFilterBase) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.TemplateFilterBase) -> DBXFilePropertiesTemplateFilterBase {
        switch swift {
        case .filterSome(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesTemplateFilterBaseFilterSome(arg)
        case .other:
            return DBXFilePropertiesTemplateFilterBaseOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFilterSome: DBXFilePropertiesTemplateFilterBaseFilterSome? {
        self as? DBXFilePropertiesTemplateFilterBaseFilterSome
    }

    @objc
    public var asOther: DBXFilePropertiesTemplateFilterBaseOther? {
        self as? DBXFilePropertiesTemplateFilterBaseOther
    }
}

/// Only templates with an ID in the supplied list will be returned (a subset of templates will be returned).
@objc
public class DBXFilePropertiesTemplateFilterBaseFilterSome: DBXFilePropertiesTemplateFilterBase {
    @objc
    public var filterSome: [String]

    @objc
    public init(_ arg: [String]) {
        self.filterSome = arg
        let swift = FileProperties.TemplateFilterBase.filterSome(arg)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesTemplateFilterBaseOther: DBXFilePropertiesTemplateFilterBase {
    @objc
    public init() {
        let swift = FileProperties.TemplateFilterBase.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible TemplateFilter union
@objc
public class DBXFilePropertiesTemplateFilter: NSObject {
    let swift: FileProperties.TemplateFilter

    public init(swift: FileProperties.TemplateFilter) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.TemplateFilter) -> DBXFilePropertiesTemplateFilter {
        switch swift {
        case .filterSome(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesTemplateFilterFilterSome(arg)
        case .other:
            return DBXFilePropertiesTemplateFilterOther()
        case .filterNone:
            return DBXFilePropertiesTemplateFilterFilterNone()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFilterSome: DBXFilePropertiesTemplateFilterFilterSome? {
        self as? DBXFilePropertiesTemplateFilterFilterSome
    }

    @objc
    public var asOther: DBXFilePropertiesTemplateFilterOther? {
        self as? DBXFilePropertiesTemplateFilterOther
    }

    @objc
    public var asFilterNone: DBXFilePropertiesTemplateFilterFilterNone? {
        self as? DBXFilePropertiesTemplateFilterFilterNone
    }
}

/// Only templates with an ID in the supplied list will be returned (a subset of templates will be returned).
@objc
public class DBXFilePropertiesTemplateFilterFilterSome: DBXFilePropertiesTemplateFilter {
    @objc
    public var filterSome: [String]

    @objc
    public init(_ arg: [String]) {
        self.filterSome = arg
        let swift = FileProperties.TemplateFilter.filterSome(arg)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesTemplateFilterOther: DBXFilePropertiesTemplateFilter {
    @objc
    public init() {
        let swift = FileProperties.TemplateFilter.other
        super.init(swift: swift)
    }
}

/// No templates will be filtered from the result (all templates will be returned).
@objc
public class DBXFilePropertiesTemplateFilterFilterNone: DBXFilePropertiesTemplateFilter {
    @objc
    public init() {
        let swift = FileProperties.TemplateFilter.filterNone
        super.init(swift: swift)
    }
}

/// Objective-C compatible TemplateOwnerType union
@objc
public class DBXFilePropertiesTemplateOwnerType: NSObject {
    let swift: FileProperties.TemplateOwnerType

    public init(swift: FileProperties.TemplateOwnerType) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.TemplateOwnerType) -> DBXFilePropertiesTemplateOwnerType {
        switch swift {
        case .user:
            return DBXFilePropertiesTemplateOwnerTypeUser()
        case .team:
            return DBXFilePropertiesTemplateOwnerTypeTeam()
        case .other:
            return DBXFilePropertiesTemplateOwnerTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asUser: DBXFilePropertiesTemplateOwnerTypeUser? {
        self as? DBXFilePropertiesTemplateOwnerTypeUser
    }

    @objc
    public var asTeam: DBXFilePropertiesTemplateOwnerTypeTeam? {
        self as? DBXFilePropertiesTemplateOwnerTypeTeam
    }

    @objc
    public var asOther: DBXFilePropertiesTemplateOwnerTypeOther? {
        self as? DBXFilePropertiesTemplateOwnerTypeOther
    }
}

/// Template will be associated with a user.
@objc
public class DBXFilePropertiesTemplateOwnerTypeUser: DBXFilePropertiesTemplateOwnerType {
    @objc
    public init() {
        let swift = FileProperties.TemplateOwnerType.user
        super.init(swift: swift)
    }
}

/// Template will be associated with a team.
@objc
public class DBXFilePropertiesTemplateOwnerTypeTeam: DBXFilePropertiesTemplateOwnerType {
    @objc
    public init() {
        let swift = FileProperties.TemplateOwnerType.team
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesTemplateOwnerTypeOther: DBXFilePropertiesTemplateOwnerType {
    @objc
    public init() {
        let swift = FileProperties.TemplateOwnerType.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible UpdatePropertiesArg struct
@objc
public class DBXFilePropertiesUpdatePropertiesArg: NSObject {
    /// A unique identifier for the file or folder.
    @objc
    public var path: String { swift.path }
    /// The property groups "delta" updates to apply.
    @objc
    public var updatePropertyGroups: [DBXFilePropertiesPropertyGroupUpdate] {
        swift.updatePropertyGroups.map { DBXFilePropertiesPropertyGroupUpdate(swift: $0) }
    }

    @objc
    public init(path: String, updatePropertyGroups: [DBXFilePropertiesPropertyGroupUpdate]) {
        self.swift = FileProperties.UpdatePropertiesArg(path: path, updatePropertyGroups: updatePropertyGroups.map(\.swift))
    }

    let swift: FileProperties.UpdatePropertiesArg

    public init(swift: FileProperties.UpdatePropertiesArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UpdatePropertiesError union
@objc
public class DBXFilePropertiesUpdatePropertiesError: NSObject {
    let swift: FileProperties.UpdatePropertiesError

    public init(swift: FileProperties.UpdatePropertiesError) {
        self.swift = swift
    }

    public static func factory(swift: FileProperties.UpdatePropertiesError) -> DBXFilePropertiesUpdatePropertiesError {
        switch swift {
        case .templateNotFound(let swiftArg):
            let arg = swiftArg
            return DBXFilePropertiesUpdatePropertiesErrorTemplateNotFound(arg)
        case .restrictedContent:
            return DBXFilePropertiesUpdatePropertiesErrorRestrictedContent()
        case .other:
            return DBXFilePropertiesUpdatePropertiesErrorOther()
        case .path(let swiftArg):
            let arg = DBXFilePropertiesLookupError(swift: swiftArg)
            return DBXFilePropertiesUpdatePropertiesErrorPath(arg)
        case .unsupportedFolder:
            return DBXFilePropertiesUpdatePropertiesErrorUnsupportedFolder()
        case .propertyFieldTooLarge:
            return DBXFilePropertiesUpdatePropertiesErrorPropertyFieldTooLarge()
        case .doesNotFitTemplate:
            return DBXFilePropertiesUpdatePropertiesErrorDoesNotFitTemplate()
        case .duplicatePropertyGroups:
            return DBXFilePropertiesUpdatePropertiesErrorDuplicatePropertyGroups()
        case .propertyGroupLookup(let swiftArg):
            let arg = DBXFilePropertiesLookUpPropertiesError(swift: swiftArg)
            return DBXFilePropertiesUpdatePropertiesErrorPropertyGroupLookup(arg)
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTemplateNotFound: DBXFilePropertiesUpdatePropertiesErrorTemplateNotFound? {
        self as? DBXFilePropertiesUpdatePropertiesErrorTemplateNotFound
    }

    @objc
    public var asRestrictedContent: DBXFilePropertiesUpdatePropertiesErrorRestrictedContent? {
        self as? DBXFilePropertiesUpdatePropertiesErrorRestrictedContent
    }

    @objc
    public var asOther: DBXFilePropertiesUpdatePropertiesErrorOther? {
        self as? DBXFilePropertiesUpdatePropertiesErrorOther
    }

    @objc
    public var asPath: DBXFilePropertiesUpdatePropertiesErrorPath? {
        self as? DBXFilePropertiesUpdatePropertiesErrorPath
    }

    @objc
    public var asUnsupportedFolder: DBXFilePropertiesUpdatePropertiesErrorUnsupportedFolder? {
        self as? DBXFilePropertiesUpdatePropertiesErrorUnsupportedFolder
    }

    @objc
    public var asPropertyFieldTooLarge: DBXFilePropertiesUpdatePropertiesErrorPropertyFieldTooLarge? {
        self as? DBXFilePropertiesUpdatePropertiesErrorPropertyFieldTooLarge
    }

    @objc
    public var asDoesNotFitTemplate: DBXFilePropertiesUpdatePropertiesErrorDoesNotFitTemplate? {
        self as? DBXFilePropertiesUpdatePropertiesErrorDoesNotFitTemplate
    }

    @objc
    public var asDuplicatePropertyGroups: DBXFilePropertiesUpdatePropertiesErrorDuplicatePropertyGroups? {
        self as? DBXFilePropertiesUpdatePropertiesErrorDuplicatePropertyGroups
    }

    @objc
    public var asPropertyGroupLookup: DBXFilePropertiesUpdatePropertiesErrorPropertyGroupLookup? {
        self as? DBXFilePropertiesUpdatePropertiesErrorPropertyGroupLookup
    }
}

/// Template does not exist for the given identifier.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorTemplateNotFound: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public var templateNotFound: String

    @objc
    public init(_ arg: String) {
        self.templateNotFound = arg
        let swift = FileProperties.UpdatePropertiesError.templateNotFound(arg)
        super.init(swift: swift)
    }
}

/// You do not have permission to modify this template.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorRestrictedContent: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.restrictedContent
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorOther: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.other
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorPath: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public var path: DBXFilePropertiesLookupError

    @objc
    public init(_ arg: DBXFilePropertiesLookupError) {
        self.path = arg
        let swift = FileProperties.UpdatePropertiesError.path(arg.swift)
        super.init(swift: swift)
    }
}

/// This folder cannot be tagged. Tagging folders is not supported for team-owned templates.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorUnsupportedFolder: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.unsupportedFolder
        super.init(swift: swift)
    }
}

/// One or more of the supplied property field values is too large.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorPropertyFieldTooLarge: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.propertyFieldTooLarge
        super.init(swift: swift)
    }
}

/// One or more of the supplied property fields does not conform to the template specifications.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorDoesNotFitTemplate: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.doesNotFitTemplate
        super.init(swift: swift)
    }
}

/// There are 2 or more property groups referring to the same templates in the input.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorDuplicatePropertyGroups: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public init() {
        let swift = FileProperties.UpdatePropertiesError.duplicatePropertyGroups
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFilePropertiesUpdatePropertiesErrorPropertyGroupLookup: DBXFilePropertiesUpdatePropertiesError {
    @objc
    public var propertyGroupLookup: DBXFilePropertiesLookUpPropertiesError

    @objc
    public init(_ arg: DBXFilePropertiesLookUpPropertiesError) {
        self.propertyGroupLookup = arg
        let swift = FileProperties.UpdatePropertiesError.propertyGroupLookup(arg.swift)
        super.init(swift: swift)
    }
}

/// Objective-C compatible UpdateTemplateArg struct
@objc
public class DBXFilePropertiesUpdateTemplateArg: NSObject {
    /// An identifier for template added by  See templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateId: String { swift.templateId }
    /// A display name for the template. template names can be up to 256 bytes.
    @objc
    public var name: String? { swift.name }
    /// Description for the new template. Template descriptions can be up to 1024 bytes.
    @objc
    public var description_: String? { swift.description_ }
    /// Property field templates to be added to the group template. There can be up to 32 properties in a single
    /// template.
    @objc
    public var addFields: [DBXFilePropertiesPropertyFieldTemplate]? { swift.addFields?.map { DBXFilePropertiesPropertyFieldTemplate(swift: $0) } }

    @objc
    public init(templateId: String, name: String?, description_: String?, addFields: [DBXFilePropertiesPropertyFieldTemplate]?) {
        self.swift = FileProperties.UpdateTemplateArg(templateId: templateId, name: name, description_: description_, addFields: addFields?.map(\.swift))
    }

    let swift: FileProperties.UpdateTemplateArg

    public init(swift: FileProperties.UpdateTemplateArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UpdateTemplateResult struct
@objc
public class DBXFilePropertiesUpdateTemplateResult: NSObject {
    /// An identifier for template added by route  See templatesAddForUser or templatesAddForTeam.
    @objc
    public var templateId: String { swift.templateId }

    @objc
    public init(templateId: String) {
        self.swift = FileProperties.UpdateTemplateResult(templateId: templateId)
    }

    let swift: FileProperties.UpdateTemplateResult

    public init(swift: FileProperties.UpdateTemplateResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}
