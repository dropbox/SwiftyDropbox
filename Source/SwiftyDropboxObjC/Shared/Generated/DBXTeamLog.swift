///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the team_log namespace
/// For Swift see team_log

/// Indicates the method in which the action was performed.
@objc
public class DBXTeamLogAccessMethodLogInfo: NSObject {
    let swift: TeamLog.AccessMethodLogInfo

    public init(swift: TeamLog.AccessMethodLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AccessMethodLogInfo) -> DBXTeamLogAccessMethodLogInfo {
        switch swift {
        case .adminConsole(let swiftArg):
            let arg = DBXTeamLogWebSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoAdminConsole(arg)
        case .api(let swiftArg):
            let arg = DBXTeamLogApiSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoApi(arg)
        case .contentManager(let swiftArg):
            let arg = DBXTeamLogWebSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoContentManager(arg)
        case .endUser(let swiftArg):
            let arg = DBXTeamLogSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoEndUser(arg)
        case .enterpriseConsole(let swiftArg):
            let arg = DBXTeamLogWebSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoEnterpriseConsole(arg)
        case .signInAs(let swiftArg):
            let arg = DBXTeamLogWebSessionLogInfo(swift: swiftArg)
            return DBXTeamLogAccessMethodLogInfoSignInAs(arg)
        case .other:
            return DBXTeamLogAccessMethodLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminConsole: DBXTeamLogAccessMethodLogInfoAdminConsole? {
        self as? DBXTeamLogAccessMethodLogInfoAdminConsole
    }

    @objc
    public var asApi: DBXTeamLogAccessMethodLogInfoApi? {
        self as? DBXTeamLogAccessMethodLogInfoApi
    }

    @objc
    public var asContentManager: DBXTeamLogAccessMethodLogInfoContentManager? {
        self as? DBXTeamLogAccessMethodLogInfoContentManager
    }

    @objc
    public var asEndUser: DBXTeamLogAccessMethodLogInfoEndUser? {
        self as? DBXTeamLogAccessMethodLogInfoEndUser
    }

    @objc
    public var asEnterpriseConsole: DBXTeamLogAccessMethodLogInfoEnterpriseConsole? {
        self as? DBXTeamLogAccessMethodLogInfoEnterpriseConsole
    }

    @objc
    public var asSignInAs: DBXTeamLogAccessMethodLogInfoSignInAs? {
        self as? DBXTeamLogAccessMethodLogInfoSignInAs
    }

    @objc
    public var asOther: DBXTeamLogAccessMethodLogInfoOther? {
        self as? DBXTeamLogAccessMethodLogInfoOther
    }
}

/// Admin console session details.
@objc
public class DBXTeamLogAccessMethodLogInfoAdminConsole: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var adminConsole: DBXTeamLogWebSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogWebSessionLogInfo) {
        self.adminConsole = arg
        let swift = TeamLog.AccessMethodLogInfo.adminConsole(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Api session details.
@objc
public class DBXTeamLogAccessMethodLogInfoApi: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var api: DBXTeamLogApiSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogApiSessionLogInfo) {
        self.api = arg
        let swift = TeamLog.AccessMethodLogInfo.api(arg.swift)
        super.init(swift: swift)
    }
}

/// Content manager session details.
@objc
public class DBXTeamLogAccessMethodLogInfoContentManager: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var contentManager: DBXTeamLogWebSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogWebSessionLogInfo) {
        self.contentManager = arg
        let swift = TeamLog.AccessMethodLogInfo.contentManager(arg.subSwift)
        super.init(swift: swift)
    }
}

/// End user session details.
@objc
public class DBXTeamLogAccessMethodLogInfoEndUser: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var endUser: DBXTeamLogSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogSessionLogInfo) {
        self.endUser = arg
        let swift = TeamLog.AccessMethodLogInfo.endUser(arg.swift)
        super.init(swift: swift)
    }
}

/// Enterprise console session details.
@objc
public class DBXTeamLogAccessMethodLogInfoEnterpriseConsole: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var enterpriseConsole: DBXTeamLogWebSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogWebSessionLogInfo) {
        self.enterpriseConsole = arg
        let swift = TeamLog.AccessMethodLogInfo.enterpriseConsole(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Sign in as session details.
@objc
public class DBXTeamLogAccessMethodLogInfoSignInAs: DBXTeamLogAccessMethodLogInfo {
    @objc
    public var signInAs: DBXTeamLogWebSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogWebSessionLogInfo) {
        self.signInAs = arg
        let swift = TeamLog.AccessMethodLogInfo.signInAs(arg.subSwift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccessMethodLogInfoOther: DBXTeamLogAccessMethodLogInfo {
    @objc
    public init() {
        let swift = TeamLog.AccessMethodLogInfo.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible AccountCaptureAvailability union
@objc
public class DBXTeamLogAccountCaptureAvailability: NSObject {
    let swift: TeamLog.AccountCaptureAvailability

    public init(swift: TeamLog.AccountCaptureAvailability) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AccountCaptureAvailability) -> DBXTeamLogAccountCaptureAvailability {
        switch swift {
        case .available:
            return DBXTeamLogAccountCaptureAvailabilityAvailable()
        case .unavailable:
            return DBXTeamLogAccountCaptureAvailabilityUnavailable()
        case .other:
            return DBXTeamLogAccountCaptureAvailabilityOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAvailable: DBXTeamLogAccountCaptureAvailabilityAvailable? {
        self as? DBXTeamLogAccountCaptureAvailabilityAvailable
    }

    @objc
    public var asUnavailable: DBXTeamLogAccountCaptureAvailabilityUnavailable? {
        self as? DBXTeamLogAccountCaptureAvailabilityUnavailable
    }

    @objc
    public var asOther: DBXTeamLogAccountCaptureAvailabilityOther? {
        self as? DBXTeamLogAccountCaptureAvailabilityOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureAvailabilityAvailable: DBXTeamLogAccountCaptureAvailability {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureAvailability.available
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureAvailabilityUnavailable: DBXTeamLogAccountCaptureAvailability {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureAvailability.unavailable
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureAvailabilityOther: DBXTeamLogAccountCaptureAvailability {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureAvailability.other
        super.init(swift: swift)
    }
}

/// Granted/revoked option to enable account capture on team domains.
@objc
public class DBXTeamLogAccountCaptureChangeAvailabilityDetails: NSObject {
    /// New account capture availabilty value.
    @objc
    public var newValue: DBXTeamLogAccountCaptureAvailability { DBXTeamLogAccountCaptureAvailability(swift: swift.newValue) }
    /// Previous account capture availabilty value. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogAccountCaptureAvailability? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogAccountCaptureAvailability(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogAccountCaptureAvailability, previousValue: DBXTeamLogAccountCaptureAvailability?) {
        self.swift = TeamLog.AccountCaptureChangeAvailabilityDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.AccountCaptureChangeAvailabilityDetails

    public init(swift: TeamLog.AccountCaptureChangeAvailabilityDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureChangeAvailabilityType struct
@objc
public class DBXTeamLogAccountCaptureChangeAvailabilityType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountCaptureChangeAvailabilityType(description_: description_)
    }

    let swift: TeamLog.AccountCaptureChangeAvailabilityType

    public init(swift: TeamLog.AccountCaptureChangeAvailabilityType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed account capture setting on team domain.
@objc
public class DBXTeamLogAccountCaptureChangePolicyDetails: NSObject {
    /// New account capture policy.
    @objc
    public var newValue: DBXTeamLogAccountCapturePolicy { DBXTeamLogAccountCapturePolicy(swift: swift.newValue) }
    /// Previous account capture policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogAccountCapturePolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogAccountCapturePolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogAccountCapturePolicy, previousValue: DBXTeamLogAccountCapturePolicy?) {
        self.swift = TeamLog.AccountCaptureChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.AccountCaptureChangePolicyDetails

    public init(swift: TeamLog.AccountCaptureChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureChangePolicyType struct
@objc
public class DBXTeamLogAccountCaptureChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountCaptureChangePolicyType(description_: description_)
    }

    let swift: TeamLog.AccountCaptureChangePolicyType

    public init(swift: TeamLog.AccountCaptureChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Account-captured user migrated account to team.
@objc
public class DBXTeamLogAccountCaptureMigrateAccountDetails: NSObject {
    /// Domain name.
    @objc
    public var domainName: String { swift.domainName }

    @objc
    public init(domainName: String) {
        self.swift = TeamLog.AccountCaptureMigrateAccountDetails(domainName: domainName)
    }

    let swift: TeamLog.AccountCaptureMigrateAccountDetails

    public init(swift: TeamLog.AccountCaptureMigrateAccountDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureMigrateAccountType struct
@objc
public class DBXTeamLogAccountCaptureMigrateAccountType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountCaptureMigrateAccountType(description_: description_)
    }

    let swift: TeamLog.AccountCaptureMigrateAccountType

    public init(swift: TeamLog.AccountCaptureMigrateAccountType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Sent account capture email to all unmanaged members.
@objc
public class DBXTeamLogAccountCaptureNotificationEmailsSentDetails: NSObject {
    /// Domain name.
    @objc
    public var domainName: String { swift.domainName }
    /// Account-capture email notification type.
    @objc
    public var notificationType: DBXTeamLogAccountCaptureNotificationType? { guard let swift = swift.notificationType else { return nil }
        return DBXTeamLogAccountCaptureNotificationType(swift: swift)
    }

    @objc
    public init(domainName: String, notificationType: DBXTeamLogAccountCaptureNotificationType?) {
        self.swift = TeamLog.AccountCaptureNotificationEmailsSentDetails(domainName: domainName, notificationType: notificationType?.swift)
    }

    let swift: TeamLog.AccountCaptureNotificationEmailsSentDetails

    public init(swift: TeamLog.AccountCaptureNotificationEmailsSentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureNotificationEmailsSentType struct
@objc
public class DBXTeamLogAccountCaptureNotificationEmailsSentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountCaptureNotificationEmailsSentType(description_: description_)
    }

    let swift: TeamLog.AccountCaptureNotificationEmailsSentType

    public init(swift: TeamLog.AccountCaptureNotificationEmailsSentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureNotificationType union
@objc
public class DBXTeamLogAccountCaptureNotificationType: NSObject {
    let swift: TeamLog.AccountCaptureNotificationType

    public init(swift: TeamLog.AccountCaptureNotificationType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AccountCaptureNotificationType) -> DBXTeamLogAccountCaptureNotificationType {
        switch swift {
        case .actionableNotification:
            return DBXTeamLogAccountCaptureNotificationTypeActionableNotification()
        case .proactiveWarningNotification:
            return DBXTeamLogAccountCaptureNotificationTypeProactiveWarningNotification()
        case .other:
            return DBXTeamLogAccountCaptureNotificationTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asActionableNotification: DBXTeamLogAccountCaptureNotificationTypeActionableNotification? {
        self as? DBXTeamLogAccountCaptureNotificationTypeActionableNotification
    }

    @objc
    public var asProactiveWarningNotification: DBXTeamLogAccountCaptureNotificationTypeProactiveWarningNotification? {
        self as? DBXTeamLogAccountCaptureNotificationTypeProactiveWarningNotification
    }

    @objc
    public var asOther: DBXTeamLogAccountCaptureNotificationTypeOther? {
        self as? DBXTeamLogAccountCaptureNotificationTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureNotificationTypeActionableNotification: DBXTeamLogAccountCaptureNotificationType {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureNotificationType.actionableNotification
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureNotificationTypeProactiveWarningNotification: DBXTeamLogAccountCaptureNotificationType {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureNotificationType.proactiveWarningNotification
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCaptureNotificationTypeOther: DBXTeamLogAccountCaptureNotificationType {
    @objc
    public init() {
        let swift = TeamLog.AccountCaptureNotificationType.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible AccountCapturePolicy union
@objc
public class DBXTeamLogAccountCapturePolicy: NSObject {
    let swift: TeamLog.AccountCapturePolicy

    public init(swift: TeamLog.AccountCapturePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AccountCapturePolicy) -> DBXTeamLogAccountCapturePolicy {
        switch swift {
        case .allUsers:
            return DBXTeamLogAccountCapturePolicyAllUsers()
        case .disabled:
            return DBXTeamLogAccountCapturePolicyDisabled()
        case .invitedUsers:
            return DBXTeamLogAccountCapturePolicyInvitedUsers()
        case .preventPersonalCreation:
            return DBXTeamLogAccountCapturePolicyPreventPersonalCreation()
        case .other:
            return DBXTeamLogAccountCapturePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllUsers: DBXTeamLogAccountCapturePolicyAllUsers? {
        self as? DBXTeamLogAccountCapturePolicyAllUsers
    }

    @objc
    public var asDisabled: DBXTeamLogAccountCapturePolicyDisabled? {
        self as? DBXTeamLogAccountCapturePolicyDisabled
    }

    @objc
    public var asInvitedUsers: DBXTeamLogAccountCapturePolicyInvitedUsers? {
        self as? DBXTeamLogAccountCapturePolicyInvitedUsers
    }

    @objc
    public var asPreventPersonalCreation: DBXTeamLogAccountCapturePolicyPreventPersonalCreation? {
        self as? DBXTeamLogAccountCapturePolicyPreventPersonalCreation
    }

    @objc
    public var asOther: DBXTeamLogAccountCapturePolicyOther? {
        self as? DBXTeamLogAccountCapturePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCapturePolicyAllUsers: DBXTeamLogAccountCapturePolicy {
    @objc
    public init() {
        let swift = TeamLog.AccountCapturePolicy.allUsers
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCapturePolicyDisabled: DBXTeamLogAccountCapturePolicy {
    @objc
    public init() {
        let swift = TeamLog.AccountCapturePolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCapturePolicyInvitedUsers: DBXTeamLogAccountCapturePolicy {
    @objc
    public init() {
        let swift = TeamLog.AccountCapturePolicy.invitedUsers
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCapturePolicyPreventPersonalCreation: DBXTeamLogAccountCapturePolicy {
    @objc
    public init() {
        let swift = TeamLog.AccountCapturePolicy.preventPersonalCreation
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountCapturePolicyOther: DBXTeamLogAccountCapturePolicy {
    @objc
    public init() {
        let swift = TeamLog.AccountCapturePolicy.other
        super.init(swift: swift)
    }
}

/// Account-captured user changed account email to personal email.
@objc
public class DBXTeamLogAccountCaptureRelinquishAccountDetails: NSObject {
    /// Domain name.
    @objc
    public var domainName: String { swift.domainName }

    @objc
    public init(domainName: String) {
        self.swift = TeamLog.AccountCaptureRelinquishAccountDetails(domainName: domainName)
    }

    let swift: TeamLog.AccountCaptureRelinquishAccountDetails

    public init(swift: TeamLog.AccountCaptureRelinquishAccountDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountCaptureRelinquishAccountType struct
@objc
public class DBXTeamLogAccountCaptureRelinquishAccountType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountCaptureRelinquishAccountType(description_: description_)
    }

    let swift: TeamLog.AccountCaptureRelinquishAccountType

    public init(swift: TeamLog.AccountCaptureRelinquishAccountType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unlocked/locked account after failed sign in attempts.
@objc
public class DBXTeamLogAccountLockOrUnlockedDetails: NSObject {
    /// The previous account status.
    @objc
    public var previousValue: DBXTeamLogAccountState { DBXTeamLogAccountState(swift: swift.previousValue) }
    /// The new account status.
    @objc
    public var newValue: DBXTeamLogAccountState { DBXTeamLogAccountState(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogAccountState, newValue: DBXTeamLogAccountState) {
        self.swift = TeamLog.AccountLockOrUnlockedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.AccountLockOrUnlockedDetails

    public init(swift: TeamLog.AccountLockOrUnlockedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountLockOrUnlockedType struct
@objc
public class DBXTeamLogAccountLockOrUnlockedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AccountLockOrUnlockedType(description_: description_)
    }

    let swift: TeamLog.AccountLockOrUnlockedType

    public init(swift: TeamLog.AccountLockOrUnlockedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AccountState union
@objc
public class DBXTeamLogAccountState: NSObject {
    let swift: TeamLog.AccountState

    public init(swift: TeamLog.AccountState) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AccountState) -> DBXTeamLogAccountState {
        switch swift {
        case .locked:
            return DBXTeamLogAccountStateLocked()
        case .unlocked:
            return DBXTeamLogAccountStateUnlocked()
        case .other:
            return DBXTeamLogAccountStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asLocked: DBXTeamLogAccountStateLocked? {
        self as? DBXTeamLogAccountStateLocked
    }

    @objc
    public var asUnlocked: DBXTeamLogAccountStateUnlocked? {
        self as? DBXTeamLogAccountStateUnlocked
    }

    @objc
    public var asOther: DBXTeamLogAccountStateOther? {
        self as? DBXTeamLogAccountStateOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountStateLocked: DBXTeamLogAccountState {
    @objc
    public init() {
        let swift = TeamLog.AccountState.locked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountStateUnlocked: DBXTeamLogAccountState {
    @objc
    public init() {
        let swift = TeamLog.AccountState.unlocked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAccountStateOther: DBXTeamLogAccountState {
    @objc
    public init() {
        let swift = TeamLog.AccountState.other
        super.init(swift: swift)
    }
}

/// Additional information indicating the action taken that caused status change.
@objc
public class DBXTeamLogActionDetails: NSObject {
    let swift: TeamLog.ActionDetails

    public init(swift: TeamLog.ActionDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ActionDetails) -> DBXTeamLogActionDetails {
        switch swift {
        case .removeAction(let swiftArg):
            let arg = DBXTeamLogMemberRemoveActionType(swift: swiftArg)
            return DBXTeamLogActionDetailsRemoveAction(arg)
        case .teamInviteDetails(let swiftArg):
            let arg = DBXTeamLogTeamInviteDetails(swift: swiftArg)
            return DBXTeamLogActionDetailsTeamInviteDetails(arg)
        case .teamJoinDetails(let swiftArg):
            let arg = DBXTeamLogJoinTeamDetails(swift: swiftArg)
            return DBXTeamLogActionDetailsTeamJoinDetails(arg)
        case .other:
            return DBXTeamLogActionDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asRemoveAction: DBXTeamLogActionDetailsRemoveAction? {
        self as? DBXTeamLogActionDetailsRemoveAction
    }

    @objc
    public var asTeamInviteDetails: DBXTeamLogActionDetailsTeamInviteDetails? {
        self as? DBXTeamLogActionDetailsTeamInviteDetails
    }

    @objc
    public var asTeamJoinDetails: DBXTeamLogActionDetailsTeamJoinDetails? {
        self as? DBXTeamLogActionDetailsTeamJoinDetails
    }

    @objc
    public var asOther: DBXTeamLogActionDetailsOther? {
        self as? DBXTeamLogActionDetailsOther
    }
}

/// Define how the user was removed from the team.
@objc
public class DBXTeamLogActionDetailsRemoveAction: DBXTeamLogActionDetails {
    @objc
    public var removeAction: DBXTeamLogMemberRemoveActionType

    @objc
    public init(_ arg: DBXTeamLogMemberRemoveActionType) {
        self.removeAction = arg
        let swift = TeamLog.ActionDetails.removeAction(arg.swift)
        super.init(swift: swift)
    }
}

/// Additional information relevant when someone is invited to the team.
@objc
public class DBXTeamLogActionDetailsTeamInviteDetails: DBXTeamLogActionDetails {
    @objc
    public var teamInviteDetails: DBXTeamLogTeamInviteDetails

    @objc
    public init(_ arg: DBXTeamLogTeamInviteDetails) {
        self.teamInviteDetails = arg
        let swift = TeamLog.ActionDetails.teamInviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// Additional information relevant when a new member joins the team.
@objc
public class DBXTeamLogActionDetailsTeamJoinDetails: DBXTeamLogActionDetails {
    @objc
    public var teamJoinDetails: DBXTeamLogJoinTeamDetails

    @objc
    public init(_ arg: DBXTeamLogJoinTeamDetails) {
        self.teamJoinDetails = arg
        let swift = TeamLog.ActionDetails.teamJoinDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogActionDetailsOther: DBXTeamLogActionDetails {
    @objc
    public init() {
        let swift = TeamLog.ActionDetails.other
        super.init(swift: swift)
    }
}

/// The entity who performed the action.
@objc
public class DBXTeamLogActorLogInfo: NSObject {
    let swift: TeamLog.ActorLogInfo

    public init(swift: TeamLog.ActorLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ActorLogInfo) -> DBXTeamLogActorLogInfo {
        switch swift {
        case .admin(let swiftArg):
            let arg = DBXTeamLogUserLogInfo(swift: swiftArg)
            return DBXTeamLogActorLogInfoAdmin(arg)
        case .anonymous:
            return DBXTeamLogActorLogInfoAnonymous()
        case .app(let swiftArg):
            let arg = DBXTeamLogAppLogInfo(swift: swiftArg)
            return DBXTeamLogActorLogInfoApp(arg)
        case .dropbox:
            return DBXTeamLogActorLogInfoDropbox()
        case .reseller(let swiftArg):
            let arg = DBXTeamLogResellerLogInfo(swift: swiftArg)
            return DBXTeamLogActorLogInfoReseller(arg)
        case .user(let swiftArg):
            let arg = DBXTeamLogUserLogInfo(swift: swiftArg)
            return DBXTeamLogActorLogInfoUser(arg)
        case .other:
            return DBXTeamLogActorLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdmin: DBXTeamLogActorLogInfoAdmin? {
        self as? DBXTeamLogActorLogInfoAdmin
    }

    @objc
    public var asAnonymous: DBXTeamLogActorLogInfoAnonymous? {
        self as? DBXTeamLogActorLogInfoAnonymous
    }

    @objc
    public var asApp: DBXTeamLogActorLogInfoApp? {
        self as? DBXTeamLogActorLogInfoApp
    }

    @objc
    public var asDropbox: DBXTeamLogActorLogInfoDropbox? {
        self as? DBXTeamLogActorLogInfoDropbox
    }

    @objc
    public var asReseller: DBXTeamLogActorLogInfoReseller? {
        self as? DBXTeamLogActorLogInfoReseller
    }

    @objc
    public var asUser: DBXTeamLogActorLogInfoUser? {
        self as? DBXTeamLogActorLogInfoUser
    }

    @objc
    public var asOther: DBXTeamLogActorLogInfoOther? {
        self as? DBXTeamLogActorLogInfoOther
    }
}

/// The admin who did the action.
@objc
public class DBXTeamLogActorLogInfoAdmin: DBXTeamLogActorLogInfo {
    @objc
    public var admin: DBXTeamLogUserLogInfo

    @objc
    public init(_ arg: DBXTeamLogUserLogInfo) {
        self.admin = arg
        let swift = TeamLog.ActorLogInfo.admin(arg.swift)
        super.init(swift: swift)
    }
}

/// Anonymous actor.
@objc
public class DBXTeamLogActorLogInfoAnonymous: DBXTeamLogActorLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ActorLogInfo.anonymous
        super.init(swift: swift)
    }
}

/// The application who did the action.
@objc
public class DBXTeamLogActorLogInfoApp: DBXTeamLogActorLogInfo {
    @objc
    public var app: DBXTeamLogAppLogInfo

    @objc
    public init(_ arg: DBXTeamLogAppLogInfo) {
        self.app = arg
        let swift = TeamLog.ActorLogInfo.app(arg.swift)
        super.init(swift: swift)
    }
}

/// Action done by Dropbox.
@objc
public class DBXTeamLogActorLogInfoDropbox: DBXTeamLogActorLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ActorLogInfo.dropbox
        super.init(swift: swift)
    }
}

/// Action done by reseller.
@objc
public class DBXTeamLogActorLogInfoReseller: DBXTeamLogActorLogInfo {
    @objc
    public var reseller: DBXTeamLogResellerLogInfo

    @objc
    public init(_ arg: DBXTeamLogResellerLogInfo) {
        self.reseller = arg
        let swift = TeamLog.ActorLogInfo.reseller(arg.swift)
        super.init(swift: swift)
    }
}

/// The user who did the action.
@objc
public class DBXTeamLogActorLogInfoUser: DBXTeamLogActorLogInfo {
    @objc
    public var user: DBXTeamLogUserLogInfo

    @objc
    public init(_ arg: DBXTeamLogUserLogInfo) {
        self.user = arg
        let swift = TeamLog.ActorLogInfo.user(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogActorLogInfoOther: DBXTeamLogActorLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ActorLogInfo.other
        super.init(swift: swift)
    }
}

/// Alert category
@objc
public class DBXTeamLogAdminAlertCategoryEnum: NSObject {
    let swift: TeamLog.AdminAlertCategoryEnum

    public init(swift: TeamLog.AdminAlertCategoryEnum) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminAlertCategoryEnum) -> DBXTeamLogAdminAlertCategoryEnum {
        switch swift {
        case .accountTakeover:
            return DBXTeamLogAdminAlertCategoryEnumAccountTakeover()
        case .dataLossProtection:
            return DBXTeamLogAdminAlertCategoryEnumDataLossProtection()
        case .informationGovernance:
            return DBXTeamLogAdminAlertCategoryEnumInformationGovernance()
        case .malwareSharing:
            return DBXTeamLogAdminAlertCategoryEnumMalwareSharing()
        case .massiveFileOperation:
            return DBXTeamLogAdminAlertCategoryEnumMassiveFileOperation()
        case .na:
            return DBXTeamLogAdminAlertCategoryEnumNa()
        case .threatManagement:
            return DBXTeamLogAdminAlertCategoryEnumThreatManagement()
        case .other:
            return DBXTeamLogAdminAlertCategoryEnumOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAccountTakeover: DBXTeamLogAdminAlertCategoryEnumAccountTakeover? {
        self as? DBXTeamLogAdminAlertCategoryEnumAccountTakeover
    }

    @objc
    public var asDataLossProtection: DBXTeamLogAdminAlertCategoryEnumDataLossProtection? {
        self as? DBXTeamLogAdminAlertCategoryEnumDataLossProtection
    }

    @objc
    public var asInformationGovernance: DBXTeamLogAdminAlertCategoryEnumInformationGovernance? {
        self as? DBXTeamLogAdminAlertCategoryEnumInformationGovernance
    }

    @objc
    public var asMalwareSharing: DBXTeamLogAdminAlertCategoryEnumMalwareSharing? {
        self as? DBXTeamLogAdminAlertCategoryEnumMalwareSharing
    }

    @objc
    public var asMassiveFileOperation: DBXTeamLogAdminAlertCategoryEnumMassiveFileOperation? {
        self as? DBXTeamLogAdminAlertCategoryEnumMassiveFileOperation
    }

    @objc
    public var asNa: DBXTeamLogAdminAlertCategoryEnumNa? {
        self as? DBXTeamLogAdminAlertCategoryEnumNa
    }

    @objc
    public var asThreatManagement: DBXTeamLogAdminAlertCategoryEnumThreatManagement? {
        self as? DBXTeamLogAdminAlertCategoryEnumThreatManagement
    }

    @objc
    public var asOther: DBXTeamLogAdminAlertCategoryEnumOther? {
        self as? DBXTeamLogAdminAlertCategoryEnumOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumAccountTakeover: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.accountTakeover
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumDataLossProtection: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.dataLossProtection
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumInformationGovernance: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.informationGovernance
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumMalwareSharing: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.malwareSharing
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumMassiveFileOperation: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.massiveFileOperation
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumNa: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.na
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumThreatManagement: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.threatManagement
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertCategoryEnumOther: DBXTeamLogAdminAlertCategoryEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertCategoryEnum.other
        super.init(swift: swift)
    }
}

/// Alert state
@objc
public class DBXTeamLogAdminAlertGeneralStateEnum: NSObject {
    let swift: TeamLog.AdminAlertGeneralStateEnum

    public init(swift: TeamLog.AdminAlertGeneralStateEnum) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminAlertGeneralStateEnum) -> DBXTeamLogAdminAlertGeneralStateEnum {
        switch swift {
        case .active:
            return DBXTeamLogAdminAlertGeneralStateEnumActive()
        case .dismissed:
            return DBXTeamLogAdminAlertGeneralStateEnumDismissed()
        case .inProgress:
            return DBXTeamLogAdminAlertGeneralStateEnumInProgress()
        case .na:
            return DBXTeamLogAdminAlertGeneralStateEnumNa()
        case .resolved:
            return DBXTeamLogAdminAlertGeneralStateEnumResolved()
        case .other:
            return DBXTeamLogAdminAlertGeneralStateEnumOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asActive: DBXTeamLogAdminAlertGeneralStateEnumActive? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumActive
    }

    @objc
    public var asDismissed: DBXTeamLogAdminAlertGeneralStateEnumDismissed? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumDismissed
    }

    @objc
    public var asInProgress: DBXTeamLogAdminAlertGeneralStateEnumInProgress? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumInProgress
    }

    @objc
    public var asNa: DBXTeamLogAdminAlertGeneralStateEnumNa? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumNa
    }

    @objc
    public var asResolved: DBXTeamLogAdminAlertGeneralStateEnumResolved? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumResolved
    }

    @objc
    public var asOther: DBXTeamLogAdminAlertGeneralStateEnumOther? {
        self as? DBXTeamLogAdminAlertGeneralStateEnumOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumActive: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.active
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumDismissed: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.dismissed
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumInProgress: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.inProgress
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumNa: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.na
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumResolved: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.resolved
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertGeneralStateEnumOther: DBXTeamLogAdminAlertGeneralStateEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertGeneralStateEnum.other
        super.init(swift: swift)
    }
}

/// Alert severity
@objc
public class DBXTeamLogAdminAlertSeverityEnum: NSObject {
    let swift: TeamLog.AdminAlertSeverityEnum

    public init(swift: TeamLog.AdminAlertSeverityEnum) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminAlertSeverityEnum) -> DBXTeamLogAdminAlertSeverityEnum {
        switch swift {
        case .high:
            return DBXTeamLogAdminAlertSeverityEnumHigh()
        case .info:
            return DBXTeamLogAdminAlertSeverityEnumInfo()
        case .low:
            return DBXTeamLogAdminAlertSeverityEnumLow()
        case .medium:
            return DBXTeamLogAdminAlertSeverityEnumMedium()
        case .na:
            return DBXTeamLogAdminAlertSeverityEnumNa()
        case .other:
            return DBXTeamLogAdminAlertSeverityEnumOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asHigh: DBXTeamLogAdminAlertSeverityEnumHigh? {
        self as? DBXTeamLogAdminAlertSeverityEnumHigh
    }

    @objc
    public var asInfo: DBXTeamLogAdminAlertSeverityEnumInfo? {
        self as? DBXTeamLogAdminAlertSeverityEnumInfo
    }

    @objc
    public var asLow: DBXTeamLogAdminAlertSeverityEnumLow? {
        self as? DBXTeamLogAdminAlertSeverityEnumLow
    }

    @objc
    public var asMedium: DBXTeamLogAdminAlertSeverityEnumMedium? {
        self as? DBXTeamLogAdminAlertSeverityEnumMedium
    }

    @objc
    public var asNa: DBXTeamLogAdminAlertSeverityEnumNa? {
        self as? DBXTeamLogAdminAlertSeverityEnumNa
    }

    @objc
    public var asOther: DBXTeamLogAdminAlertSeverityEnumOther? {
        self as? DBXTeamLogAdminAlertSeverityEnumOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumHigh: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.high
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumInfo: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.info
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumLow: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.low
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumMedium: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.medium
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumNa: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.na
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertSeverityEnumOther: DBXTeamLogAdminAlertSeverityEnum {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertSeverityEnum.other
        super.init(swift: swift)
    }
}

/// Alert configurations
@objc
public class DBXTeamLogAdminAlertingAlertConfiguration: NSObject {
    /// Alert state.
    @objc
    public var alertState: DBXTeamLogAdminAlertingAlertStatePolicy? { guard let swift = swift.alertState else { return nil }
        return DBXTeamLogAdminAlertingAlertStatePolicy(swift: swift)
    }

    /// Sensitivity level.
    @objc
    public var sensitivityLevel: DBXTeamLogAdminAlertingAlertSensitivity? { guard let swift = swift.sensitivityLevel else { return nil }
        return DBXTeamLogAdminAlertingAlertSensitivity(swift: swift)
    }

    /// Recipient settings.
    @objc
    public var recipientsSettings: DBXTeamLogRecipientsConfiguration? { guard let swift = swift.recipientsSettings else { return nil }
        return DBXTeamLogRecipientsConfiguration(swift: swift)
    }

    /// Text.
    @objc
    public var text: String? { swift.text }
    /// Excluded file extensions.
    @objc
    public var excludedFileExtensions: String? { swift.excludedFileExtensions }

    @objc
    public init(
        alertState: DBXTeamLogAdminAlertingAlertStatePolicy?,
        sensitivityLevel: DBXTeamLogAdminAlertingAlertSensitivity?,
        recipientsSettings: DBXTeamLogRecipientsConfiguration?,
        text: String?,
        excludedFileExtensions: String?
    ) {
        self.swift = TeamLog.AdminAlertingAlertConfiguration(
            alertState: alertState?.swift,
            sensitivityLevel: sensitivityLevel?.swift,
            recipientsSettings: recipientsSettings?.swift,
            text: text,
            excludedFileExtensions: excludedFileExtensions
        )
    }

    let swift: TeamLog.AdminAlertingAlertConfiguration

    public init(swift: TeamLog.AdminAlertingAlertConfiguration) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Alert sensitivity
@objc
public class DBXTeamLogAdminAlertingAlertSensitivity: NSObject {
    let swift: TeamLog.AdminAlertingAlertSensitivity

    public init(swift: TeamLog.AdminAlertingAlertSensitivity) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminAlertingAlertSensitivity) -> DBXTeamLogAdminAlertingAlertSensitivity {
        switch swift {
        case .high:
            return DBXTeamLogAdminAlertingAlertSensitivityHigh()
        case .highest:
            return DBXTeamLogAdminAlertingAlertSensitivityHighest()
        case .invalid:
            return DBXTeamLogAdminAlertingAlertSensitivityInvalid()
        case .low:
            return DBXTeamLogAdminAlertingAlertSensitivityLow()
        case .lowest:
            return DBXTeamLogAdminAlertingAlertSensitivityLowest()
        case .medium:
            return DBXTeamLogAdminAlertingAlertSensitivityMedium()
        case .other:
            return DBXTeamLogAdminAlertingAlertSensitivityOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asHigh: DBXTeamLogAdminAlertingAlertSensitivityHigh? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityHigh
    }

    @objc
    public var asHighest: DBXTeamLogAdminAlertingAlertSensitivityHighest? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityHighest
    }

    @objc
    public var asInvalid: DBXTeamLogAdminAlertingAlertSensitivityInvalid? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityInvalid
    }

    @objc
    public var asLow: DBXTeamLogAdminAlertingAlertSensitivityLow? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityLow
    }

    @objc
    public var asLowest: DBXTeamLogAdminAlertingAlertSensitivityLowest? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityLowest
    }

    @objc
    public var asMedium: DBXTeamLogAdminAlertingAlertSensitivityMedium? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityMedium
    }

    @objc
    public var asOther: DBXTeamLogAdminAlertingAlertSensitivityOther? {
        self as? DBXTeamLogAdminAlertingAlertSensitivityOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityHigh: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.high
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityHighest: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.highest
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityInvalid: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.invalid
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityLow: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.low
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityLowest: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.lowest
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityMedium: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.medium
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertSensitivityOther: DBXTeamLogAdminAlertingAlertSensitivity {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertSensitivity.other
        super.init(swift: swift)
    }
}

/// Changed an alert state.
@objc
public class DBXTeamLogAdminAlertingAlertStateChangedDetails: NSObject {
    /// Alert name.
    @objc
    public var alertName: String { swift.alertName }
    /// Alert severity.
    @objc
    public var alertSeverity: DBXTeamLogAdminAlertSeverityEnum { DBXTeamLogAdminAlertSeverityEnum(swift: swift.alertSeverity) }
    /// Alert category.
    @objc
    public var alertCategory: DBXTeamLogAdminAlertCategoryEnum { DBXTeamLogAdminAlertCategoryEnum(swift: swift.alertCategory) }
    /// Alert ID.
    @objc
    public var alertInstanceId: String { swift.alertInstanceId }
    /// Alert state before the change.
    @objc
    public var previousValue: DBXTeamLogAdminAlertGeneralStateEnum { DBXTeamLogAdminAlertGeneralStateEnum(swift: swift.previousValue) }
    /// Alert state after the change.
    @objc
    public var newValue: DBXTeamLogAdminAlertGeneralStateEnum { DBXTeamLogAdminAlertGeneralStateEnum(swift: swift.newValue) }

    @objc
    public init(
        alertName: String,
        alertSeverity: DBXTeamLogAdminAlertSeverityEnum,
        alertCategory: DBXTeamLogAdminAlertCategoryEnum,
        alertInstanceId: String,
        previousValue: DBXTeamLogAdminAlertGeneralStateEnum,
        newValue: DBXTeamLogAdminAlertGeneralStateEnum
    ) {
        self.swift = TeamLog.AdminAlertingAlertStateChangedDetails(
            alertName: alertName,
            alertSeverity: alertSeverity.swift,
            alertCategory: alertCategory.swift,
            alertInstanceId: alertInstanceId,
            previousValue: previousValue.swift,
            newValue: newValue.swift
        )
    }

    let swift: TeamLog.AdminAlertingAlertStateChangedDetails

    public init(swift: TeamLog.AdminAlertingAlertStateChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AdminAlertingAlertStateChangedType struct
@objc
public class DBXTeamLogAdminAlertingAlertStateChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AdminAlertingAlertStateChangedType(description_: description_)
    }

    let swift: TeamLog.AdminAlertingAlertStateChangedType

    public init(swift: TeamLog.AdminAlertingAlertStateChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether an alert can be triggered or not
@objc
public class DBXTeamLogAdminAlertingAlertStatePolicy: NSObject {
    let swift: TeamLog.AdminAlertingAlertStatePolicy

    public init(swift: TeamLog.AdminAlertingAlertStatePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminAlertingAlertStatePolicy) -> DBXTeamLogAdminAlertingAlertStatePolicy {
        switch swift {
        case .off:
            return DBXTeamLogAdminAlertingAlertStatePolicyOff()
        case .on:
            return DBXTeamLogAdminAlertingAlertStatePolicyOn()
        case .other:
            return DBXTeamLogAdminAlertingAlertStatePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOff: DBXTeamLogAdminAlertingAlertStatePolicyOff? {
        self as? DBXTeamLogAdminAlertingAlertStatePolicyOff
    }

    @objc
    public var asOn: DBXTeamLogAdminAlertingAlertStatePolicyOn? {
        self as? DBXTeamLogAdminAlertingAlertStatePolicyOn
    }

    @objc
    public var asOther: DBXTeamLogAdminAlertingAlertStatePolicyOther? {
        self as? DBXTeamLogAdminAlertingAlertStatePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertStatePolicyOff: DBXTeamLogAdminAlertingAlertStatePolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertStatePolicy.off
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertStatePolicyOn: DBXTeamLogAdminAlertingAlertStatePolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertStatePolicy.on
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminAlertingAlertStatePolicyOther: DBXTeamLogAdminAlertingAlertStatePolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminAlertingAlertStatePolicy.other
        super.init(swift: swift)
    }
}

/// Changed an alert setting.
@objc
public class DBXTeamLogAdminAlertingChangedAlertConfigDetails: NSObject {
    /// Alert Name.
    @objc
    public var alertName: String { swift.alertName }
    /// Previous alert configuration.
    @objc
    public var previousAlertConfig: DBXTeamLogAdminAlertingAlertConfiguration { DBXTeamLogAdminAlertingAlertConfiguration(swift: swift.previousAlertConfig) }
    /// New alert configuration.
    @objc
    public var newAlertConfig: DBXTeamLogAdminAlertingAlertConfiguration { DBXTeamLogAdminAlertingAlertConfiguration(swift: swift.newAlertConfig) }

    @objc
    public init(alertName: String, previousAlertConfig: DBXTeamLogAdminAlertingAlertConfiguration, newAlertConfig: DBXTeamLogAdminAlertingAlertConfiguration) {
        self.swift = TeamLog.AdminAlertingChangedAlertConfigDetails(
            alertName: alertName,
            previousAlertConfig: previousAlertConfig.swift,
            newAlertConfig: newAlertConfig.swift
        )
    }

    let swift: TeamLog.AdminAlertingChangedAlertConfigDetails

    public init(swift: TeamLog.AdminAlertingChangedAlertConfigDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AdminAlertingChangedAlertConfigType struct
@objc
public class DBXTeamLogAdminAlertingChangedAlertConfigType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AdminAlertingChangedAlertConfigType(description_: description_)
    }

    let swift: TeamLog.AdminAlertingChangedAlertConfigType

    public init(swift: TeamLog.AdminAlertingChangedAlertConfigType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Triggered security alert.
@objc
public class DBXTeamLogAdminAlertingTriggeredAlertDetails: NSObject {
    /// Alert name.
    @objc
    public var alertName: String { swift.alertName }
    /// Alert severity.
    @objc
    public var alertSeverity: DBXTeamLogAdminAlertSeverityEnum { DBXTeamLogAdminAlertSeverityEnum(swift: swift.alertSeverity) }
    /// Alert category.
    @objc
    public var alertCategory: DBXTeamLogAdminAlertCategoryEnum { DBXTeamLogAdminAlertCategoryEnum(swift: swift.alertCategory) }
    /// Alert ID.
    @objc
    public var alertInstanceId: String { swift.alertInstanceId }

    @objc
    public init(alertName: String, alertSeverity: DBXTeamLogAdminAlertSeverityEnum, alertCategory: DBXTeamLogAdminAlertCategoryEnum, alertInstanceId: String) {
        self.swift = TeamLog.AdminAlertingTriggeredAlertDetails(
            alertName: alertName,
            alertSeverity: alertSeverity.swift,
            alertCategory: alertCategory.swift,
            alertInstanceId: alertInstanceId
        )
    }

    let swift: TeamLog.AdminAlertingTriggeredAlertDetails

    public init(swift: TeamLog.AdminAlertingTriggeredAlertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AdminAlertingTriggeredAlertType struct
@objc
public class DBXTeamLogAdminAlertingTriggeredAlertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AdminAlertingTriggeredAlertType(description_: description_)
    }

    let swift: TeamLog.AdminAlertingTriggeredAlertType

    public init(swift: TeamLog.AdminAlertingTriggeredAlertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AdminConsoleAppPermission union
@objc
public class DBXTeamLogAdminConsoleAppPermission: NSObject {
    let swift: TeamLog.AdminConsoleAppPermission

    public init(swift: TeamLog.AdminConsoleAppPermission) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminConsoleAppPermission) -> DBXTeamLogAdminConsoleAppPermission {
        switch swift {
        case .defaultForListedApps:
            return DBXTeamLogAdminConsoleAppPermissionDefaultForListedApps()
        case .defaultForUnlistedApps:
            return DBXTeamLogAdminConsoleAppPermissionDefaultForUnlistedApps()
        case .other:
            return DBXTeamLogAdminConsoleAppPermissionOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefaultForListedApps: DBXTeamLogAdminConsoleAppPermissionDefaultForListedApps? {
        self as? DBXTeamLogAdminConsoleAppPermissionDefaultForListedApps
    }

    @objc
    public var asDefaultForUnlistedApps: DBXTeamLogAdminConsoleAppPermissionDefaultForUnlistedApps? {
        self as? DBXTeamLogAdminConsoleAppPermissionDefaultForUnlistedApps
    }

    @objc
    public var asOther: DBXTeamLogAdminConsoleAppPermissionOther? {
        self as? DBXTeamLogAdminConsoleAppPermissionOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPermissionDefaultForListedApps: DBXTeamLogAdminConsoleAppPermission {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPermission.defaultForListedApps
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPermissionDefaultForUnlistedApps: DBXTeamLogAdminConsoleAppPermission {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPermission.defaultForUnlistedApps
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPermissionOther: DBXTeamLogAdminConsoleAppPermission {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPermission.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible AdminConsoleAppPolicy union
@objc
public class DBXTeamLogAdminConsoleAppPolicy: NSObject {
    let swift: TeamLog.AdminConsoleAppPolicy

    public init(swift: TeamLog.AdminConsoleAppPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminConsoleAppPolicy) -> DBXTeamLogAdminConsoleAppPolicy {
        switch swift {
        case .allow:
            return DBXTeamLogAdminConsoleAppPolicyAllow()
        case .block:
            return DBXTeamLogAdminConsoleAppPolicyBlock()
        case .default_:
            return DBXTeamLogAdminConsoleAppPolicyDefault_()
        case .other:
            return DBXTeamLogAdminConsoleAppPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllow: DBXTeamLogAdminConsoleAppPolicyAllow? {
        self as? DBXTeamLogAdminConsoleAppPolicyAllow
    }

    @objc
    public var asBlock: DBXTeamLogAdminConsoleAppPolicyBlock? {
        self as? DBXTeamLogAdminConsoleAppPolicyBlock
    }

    @objc
    public var asDefault_: DBXTeamLogAdminConsoleAppPolicyDefault_? {
        self as? DBXTeamLogAdminConsoleAppPolicyDefault_
    }

    @objc
    public var asOther: DBXTeamLogAdminConsoleAppPolicyOther? {
        self as? DBXTeamLogAdminConsoleAppPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPolicyAllow: DBXTeamLogAdminConsoleAppPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPolicy.allow
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPolicyBlock: DBXTeamLogAdminConsoleAppPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPolicy.block
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPolicyDefault_: DBXTeamLogAdminConsoleAppPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminConsoleAppPolicyOther: DBXTeamLogAdminConsoleAppPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminConsoleAppPolicy.other
        super.init(swift: swift)
    }
}

/// Changed admin reminder settings for requests to join the team.
@objc
public class DBXTeamLogAdminEmailRemindersChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogAdminEmailRemindersPolicy { DBXTeamLogAdminEmailRemindersPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogAdminEmailRemindersPolicy { DBXTeamLogAdminEmailRemindersPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogAdminEmailRemindersPolicy, previousValue: DBXTeamLogAdminEmailRemindersPolicy) {
        self.swift = TeamLog.AdminEmailRemindersChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.AdminEmailRemindersChangedDetails

    public init(swift: TeamLog.AdminEmailRemindersChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AdminEmailRemindersChangedType struct
@objc
public class DBXTeamLogAdminEmailRemindersChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AdminEmailRemindersChangedType(description_: description_)
    }

    let swift: TeamLog.AdminEmailRemindersChangedType

    public init(swift: TeamLog.AdminEmailRemindersChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether team admins receive reminder emails for requests to join the team
@objc
public class DBXTeamLogAdminEmailRemindersPolicy: NSObject {
    let swift: TeamLog.AdminEmailRemindersPolicy

    public init(swift: TeamLog.AdminEmailRemindersPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminEmailRemindersPolicy) -> DBXTeamLogAdminEmailRemindersPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogAdminEmailRemindersPolicyDefault_()
        case .disabled:
            return DBXTeamLogAdminEmailRemindersPolicyDisabled()
        case .enabled:
            return DBXTeamLogAdminEmailRemindersPolicyEnabled()
        case .other:
            return DBXTeamLogAdminEmailRemindersPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogAdminEmailRemindersPolicyDefault_? {
        self as? DBXTeamLogAdminEmailRemindersPolicyDefault_
    }

    @objc
    public var asDisabled: DBXTeamLogAdminEmailRemindersPolicyDisabled? {
        self as? DBXTeamLogAdminEmailRemindersPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogAdminEmailRemindersPolicyEnabled? {
        self as? DBXTeamLogAdminEmailRemindersPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogAdminEmailRemindersPolicyOther? {
        self as? DBXTeamLogAdminEmailRemindersPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminEmailRemindersPolicyDefault_: DBXTeamLogAdminEmailRemindersPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminEmailRemindersPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminEmailRemindersPolicyDisabled: DBXTeamLogAdminEmailRemindersPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminEmailRemindersPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminEmailRemindersPolicyEnabled: DBXTeamLogAdminEmailRemindersPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminEmailRemindersPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminEmailRemindersPolicyOther: DBXTeamLogAdminEmailRemindersPolicy {
    @objc
    public init() {
        let swift = TeamLog.AdminEmailRemindersPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible AdminRole union
@objc
public class DBXTeamLogAdminRole: NSObject {
    let swift: TeamLog.AdminRole

    public init(swift: TeamLog.AdminRole) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AdminRole) -> DBXTeamLogAdminRole {
        switch swift {
        case .billingAdmin:
            return DBXTeamLogAdminRoleBillingAdmin()
        case .complianceAdmin:
            return DBXTeamLogAdminRoleComplianceAdmin()
        case .contentAdmin:
            return DBXTeamLogAdminRoleContentAdmin()
        case .limitedAdmin:
            return DBXTeamLogAdminRoleLimitedAdmin()
        case .memberOnly:
            return DBXTeamLogAdminRoleMemberOnly()
        case .reportingAdmin:
            return DBXTeamLogAdminRoleReportingAdmin()
        case .securityAdmin:
            return DBXTeamLogAdminRoleSecurityAdmin()
        case .supportAdmin:
            return DBXTeamLogAdminRoleSupportAdmin()
        case .teamAdmin:
            return DBXTeamLogAdminRoleTeamAdmin()
        case .userManagementAdmin:
            return DBXTeamLogAdminRoleUserManagementAdmin()
        case .other:
            return DBXTeamLogAdminRoleOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asBillingAdmin: DBXTeamLogAdminRoleBillingAdmin? {
        self as? DBXTeamLogAdminRoleBillingAdmin
    }

    @objc
    public var asComplianceAdmin: DBXTeamLogAdminRoleComplianceAdmin? {
        self as? DBXTeamLogAdminRoleComplianceAdmin
    }

    @objc
    public var asContentAdmin: DBXTeamLogAdminRoleContentAdmin? {
        self as? DBXTeamLogAdminRoleContentAdmin
    }

    @objc
    public var asLimitedAdmin: DBXTeamLogAdminRoleLimitedAdmin? {
        self as? DBXTeamLogAdminRoleLimitedAdmin
    }

    @objc
    public var asMemberOnly: DBXTeamLogAdminRoleMemberOnly? {
        self as? DBXTeamLogAdminRoleMemberOnly
    }

    @objc
    public var asReportingAdmin: DBXTeamLogAdminRoleReportingAdmin? {
        self as? DBXTeamLogAdminRoleReportingAdmin
    }

    @objc
    public var asSecurityAdmin: DBXTeamLogAdminRoleSecurityAdmin? {
        self as? DBXTeamLogAdminRoleSecurityAdmin
    }

    @objc
    public var asSupportAdmin: DBXTeamLogAdminRoleSupportAdmin? {
        self as? DBXTeamLogAdminRoleSupportAdmin
    }

    @objc
    public var asTeamAdmin: DBXTeamLogAdminRoleTeamAdmin? {
        self as? DBXTeamLogAdminRoleTeamAdmin
    }

    @objc
    public var asUserManagementAdmin: DBXTeamLogAdminRoleUserManagementAdmin? {
        self as? DBXTeamLogAdminRoleUserManagementAdmin
    }

    @objc
    public var asOther: DBXTeamLogAdminRoleOther? {
        self as? DBXTeamLogAdminRoleOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleBillingAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.billingAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleComplianceAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.complianceAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleContentAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.contentAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleLimitedAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.limitedAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleMemberOnly: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.memberOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleReportingAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.reportingAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleSecurityAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.securityAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleSupportAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.supportAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleTeamAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.teamAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleUserManagementAdmin: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.userManagementAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAdminRoleOther: DBXTeamLogAdminRole {
    @objc
    public init() {
        let swift = TeamLog.AdminRole.other
        super.init(swift: swift)
    }
}

/// Alert recipients setting type
@objc
public class DBXTeamLogAlertRecipientsSettingType: NSObject {
    let swift: TeamLog.AlertRecipientsSettingType

    public init(swift: TeamLog.AlertRecipientsSettingType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AlertRecipientsSettingType) -> DBXTeamLogAlertRecipientsSettingType {
        switch swift {
        case .customList:
            return DBXTeamLogAlertRecipientsSettingTypeCustomList()
        case .invalid:
            return DBXTeamLogAlertRecipientsSettingTypeInvalid()
        case .none:
            return DBXTeamLogAlertRecipientsSettingTypeNone()
        case .teamAdmins:
            return DBXTeamLogAlertRecipientsSettingTypeTeamAdmins()
        case .other:
            return DBXTeamLogAlertRecipientsSettingTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asCustomList: DBXTeamLogAlertRecipientsSettingTypeCustomList? {
        self as? DBXTeamLogAlertRecipientsSettingTypeCustomList
    }

    @objc
    public var asInvalid: DBXTeamLogAlertRecipientsSettingTypeInvalid? {
        self as? DBXTeamLogAlertRecipientsSettingTypeInvalid
    }

    @objc
    public var asNone: DBXTeamLogAlertRecipientsSettingTypeNone? {
        self as? DBXTeamLogAlertRecipientsSettingTypeNone
    }

    @objc
    public var asTeamAdmins: DBXTeamLogAlertRecipientsSettingTypeTeamAdmins? {
        self as? DBXTeamLogAlertRecipientsSettingTypeTeamAdmins
    }

    @objc
    public var asOther: DBXTeamLogAlertRecipientsSettingTypeOther? {
        self as? DBXTeamLogAlertRecipientsSettingTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAlertRecipientsSettingTypeCustomList: DBXTeamLogAlertRecipientsSettingType {
    @objc
    public init() {
        let swift = TeamLog.AlertRecipientsSettingType.customList
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAlertRecipientsSettingTypeInvalid: DBXTeamLogAlertRecipientsSettingType {
    @objc
    public init() {
        let swift = TeamLog.AlertRecipientsSettingType.invalid
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAlertRecipientsSettingTypeNone: DBXTeamLogAlertRecipientsSettingType {
    @objc
    public init() {
        let swift = TeamLog.AlertRecipientsSettingType.none
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAlertRecipientsSettingTypeTeamAdmins: DBXTeamLogAlertRecipientsSettingType {
    @objc
    public init() {
        let swift = TeamLog.AlertRecipientsSettingType.teamAdmins
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAlertRecipientsSettingTypeOther: DBXTeamLogAlertRecipientsSettingType {
    @objc
    public init() {
        let swift = TeamLog.AlertRecipientsSettingType.other
        super.init(swift: swift)
    }
}

/// Disabled downloads.
@objc
public class DBXTeamLogAllowDownloadDisabledDetails: NSObject {
    let swift: TeamLog.AllowDownloadDisabledDetails

    public init(swift: TeamLog.AllowDownloadDisabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AllowDownloadDisabledType struct
@objc
public class DBXTeamLogAllowDownloadDisabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AllowDownloadDisabledType(description_: description_)
    }

    let swift: TeamLog.AllowDownloadDisabledType

    public init(swift: TeamLog.AllowDownloadDisabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled downloads.
@objc
public class DBXTeamLogAllowDownloadEnabledDetails: NSObject {
    let swift: TeamLog.AllowDownloadEnabledDetails

    public init(swift: TeamLog.AllowDownloadEnabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AllowDownloadEnabledType struct
@objc
public class DBXTeamLogAllowDownloadEnabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AllowDownloadEnabledType(description_: description_)
    }

    let swift: TeamLog.AllowDownloadEnabledType

    public init(swift: TeamLog.AllowDownloadEnabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Api session.
@objc
public class DBXTeamLogApiSessionLogInfo: NSObject {
    /// Api request ID.
    @objc
    public var requestId: String { swift.requestId }

    @objc
    public init(requestId: String) {
        self.swift = TeamLog.ApiSessionLogInfo(requestId: requestId)
    }

    let swift: TeamLog.ApiSessionLogInfo

    public init(swift: TeamLog.ApiSessionLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to connect app for member.
@objc
public class DBXTeamLogAppBlockedByPermissionsDetails: NSObject {
    /// Relevant application details.
    @objc
    public var appInfo: DBXTeamLogAppLogInfo {
        DBXTeamLogAppLogInfo.wrapPreservingSubtypes(swift: swift.appInfo)
    }

    @objc
    public init(appInfo: DBXTeamLogAppLogInfo) {
        self.swift = TeamLog.AppBlockedByPermissionsDetails(appInfo: appInfo.swift)
    }

    let swift: TeamLog.AppBlockedByPermissionsDetails

    public init(swift: TeamLog.AppBlockedByPermissionsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppBlockedByPermissionsType struct
@objc
public class DBXTeamLogAppBlockedByPermissionsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppBlockedByPermissionsType(description_: description_)
    }

    let swift: TeamLog.AppBlockedByPermissionsType

    public init(swift: TeamLog.AppBlockedByPermissionsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Linked app for team.
@objc
public class DBXTeamLogAppLinkTeamDetails: NSObject {
    /// Relevant application details.
    @objc
    public var appInfo: DBXTeamLogAppLogInfo {
        DBXTeamLogAppLogInfo.wrapPreservingSubtypes(swift: swift.appInfo)
    }

    @objc
    public init(appInfo: DBXTeamLogAppLogInfo) {
        self.swift = TeamLog.AppLinkTeamDetails(appInfo: appInfo.swift)
    }

    let swift: TeamLog.AppLinkTeamDetails

    public init(swift: TeamLog.AppLinkTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppLinkTeamType struct
@objc
public class DBXTeamLogAppLinkTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppLinkTeamType(description_: description_)
    }

    let swift: TeamLog.AppLinkTeamType

    public init(swift: TeamLog.AppLinkTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Linked app for member.
@objc
public class DBXTeamLogAppLinkUserDetails: NSObject {
    /// Relevant application details.
    @objc
    public var appInfo: DBXTeamLogAppLogInfo {
        DBXTeamLogAppLogInfo.wrapPreservingSubtypes(swift: swift.appInfo)
    }

    @objc
    public init(appInfo: DBXTeamLogAppLogInfo) {
        self.swift = TeamLog.AppLinkUserDetails(appInfo: appInfo.swift)
    }

    let swift: TeamLog.AppLinkUserDetails

    public init(swift: TeamLog.AppLinkUserDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppLinkUserType struct
@objc
public class DBXTeamLogAppLinkUserType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppLinkUserType(description_: description_)
    }

    let swift: TeamLog.AppLinkUserType

    public init(swift: TeamLog.AppLinkUserType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// App's logged information.
@objc
public class DBXTeamLogAppLogInfo: NSObject {
    /// App unique ID.
    @objc
    public var appId: String? { swift.appId }
    /// App display name.
    @objc
    public var displayName: String? { swift.displayName }

    @objc
    public init(appId: String?, displayName: String?) {
        self.swift = TeamLog.AppLogInfo(appId: appId, displayName: displayName)
    }

    let swift: TeamLog.AppLogInfo

    public init(swift: TeamLog.AppLogInfo) {
        self.swift = swift
    }

    public static func wrapPreservingSubtypes(swift: TeamLog.AppLogInfo) -> DBXTeamLogAppLogInfo {
        switch swift {
        case let userOrTeamLinkedAppLogInfo as TeamLog.UserOrTeamLinkedAppLogInfo:
            return DBXTeamLogUserOrTeamLinkedAppLogInfo(swift: userOrTeamLinkedAppLogInfo)
        case let userLinkedAppLogInfo as TeamLog.UserLinkedAppLogInfo:
            return DBXTeamLogUserLinkedAppLogInfo(swift: userLinkedAppLogInfo)
        case let teamLinkedAppLogInfo as TeamLog.TeamLinkedAppLogInfo:
            return DBXTeamLogTeamLinkedAppLogInfo(swift: teamLinkedAppLogInfo)
        default:
            return DBXTeamLogAppLogInfo(swift: swift)
        }
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed app permissions.
@objc
public class DBXTeamLogAppPermissionsChangedDetails: NSObject {
    /// Name of the app.
    @objc
    public var appName: String? { swift.appName }
    /// Permission that was changed.
    @objc
    public var permission: DBXTeamLogAdminConsoleAppPermission? { guard let swift = swift.permission else { return nil }
        return DBXTeamLogAdminConsoleAppPermission(swift: swift)
    }

    /// Previous policy.
    @objc
    public var previousValue: DBXTeamLogAdminConsoleAppPolicy { DBXTeamLogAdminConsoleAppPolicy(swift: swift.previousValue) }
    /// New policy.
    @objc
    public var newValue: DBXTeamLogAdminConsoleAppPolicy { DBXTeamLogAdminConsoleAppPolicy(swift: swift.newValue) }

    @objc
    public init(
        previousValue: DBXTeamLogAdminConsoleAppPolicy,
        newValue: DBXTeamLogAdminConsoleAppPolicy,
        appName: String?,
        permission: DBXTeamLogAdminConsoleAppPermission?
    ) {
        self.swift = TeamLog.AppPermissionsChangedDetails(
            previousValue: previousValue.swift,
            newValue: newValue.swift,
            appName: appName,
            permission: permission?.swift
        )
    }

    let swift: TeamLog.AppPermissionsChangedDetails

    public init(swift: TeamLog.AppPermissionsChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppPermissionsChangedType struct
@objc
public class DBXTeamLogAppPermissionsChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppPermissionsChangedType(description_: description_)
    }

    let swift: TeamLog.AppPermissionsChangedType

    public init(swift: TeamLog.AppPermissionsChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unlinked app for team.
@objc
public class DBXTeamLogAppUnlinkTeamDetails: NSObject {
    /// Relevant application details.
    @objc
    public var appInfo: DBXTeamLogAppLogInfo {
        DBXTeamLogAppLogInfo.wrapPreservingSubtypes(swift: swift.appInfo)
    }

    @objc
    public init(appInfo: DBXTeamLogAppLogInfo) {
        self.swift = TeamLog.AppUnlinkTeamDetails(appInfo: appInfo.swift)
    }

    let swift: TeamLog.AppUnlinkTeamDetails

    public init(swift: TeamLog.AppUnlinkTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppUnlinkTeamType struct
@objc
public class DBXTeamLogAppUnlinkTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppUnlinkTeamType(description_: description_)
    }

    let swift: TeamLog.AppUnlinkTeamType

    public init(swift: TeamLog.AppUnlinkTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unlinked app for member.
@objc
public class DBXTeamLogAppUnlinkUserDetails: NSObject {
    /// Relevant application details.
    @objc
    public var appInfo: DBXTeamLogAppLogInfo {
        DBXTeamLogAppLogInfo.wrapPreservingSubtypes(swift: swift.appInfo)
    }

    @objc
    public init(appInfo: DBXTeamLogAppLogInfo) {
        self.swift = TeamLog.AppUnlinkUserDetails(appInfo: appInfo.swift)
    }

    let swift: TeamLog.AppUnlinkUserDetails

    public init(swift: TeamLog.AppUnlinkUserDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible AppUnlinkUserType struct
@objc
public class DBXTeamLogAppUnlinkUserType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.AppUnlinkUserType(description_: description_)
    }

    let swift: TeamLog.AppUnlinkUserType

    public init(swift: TeamLog.AppUnlinkUserType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Applied naming convention.
@objc
public class DBXTeamLogApplyNamingConventionDetails: NSObject {
    let swift: TeamLog.ApplyNamingConventionDetails

    public init(swift: TeamLog.ApplyNamingConventionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ApplyNamingConventionType struct
@objc
public class DBXTeamLogApplyNamingConventionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ApplyNamingConventionType(description_: description_)
    }

    let swift: TeamLog.ApplyNamingConventionType

    public init(swift: TeamLog.ApplyNamingConventionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Asset details.
@objc
public class DBXTeamLogAssetLogInfo: NSObject {
    let swift: TeamLog.AssetLogInfo

    public init(swift: TeamLog.AssetLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.AssetLogInfo) -> DBXTeamLogAssetLogInfo {
        switch swift {
        case .file(let swiftArg):
            let arg = DBXTeamLogFileLogInfo(swift: swiftArg)
            return DBXTeamLogAssetLogInfoFile(arg)
        case .folder(let swiftArg):
            let arg = DBXTeamLogFolderLogInfo(swift: swiftArg)
            return DBXTeamLogAssetLogInfoFolder(arg)
        case .paperDocument(let swiftArg):
            let arg = DBXTeamLogPaperDocumentLogInfo(swift: swiftArg)
            return DBXTeamLogAssetLogInfoPaperDocument(arg)
        case .paperFolder(let swiftArg):
            let arg = DBXTeamLogPaperFolderLogInfo(swift: swiftArg)
            return DBXTeamLogAssetLogInfoPaperFolder(arg)
        case .showcaseDocument(let swiftArg):
            let arg = DBXTeamLogShowcaseDocumentLogInfo(swift: swiftArg)
            return DBXTeamLogAssetLogInfoShowcaseDocument(arg)
        case .other:
            return DBXTeamLogAssetLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFile: DBXTeamLogAssetLogInfoFile? {
        self as? DBXTeamLogAssetLogInfoFile
    }

    @objc
    public var asFolder: DBXTeamLogAssetLogInfoFolder? {
        self as? DBXTeamLogAssetLogInfoFolder
    }

    @objc
    public var asPaperDocument: DBXTeamLogAssetLogInfoPaperDocument? {
        self as? DBXTeamLogAssetLogInfoPaperDocument
    }

    @objc
    public var asPaperFolder: DBXTeamLogAssetLogInfoPaperFolder? {
        self as? DBXTeamLogAssetLogInfoPaperFolder
    }

    @objc
    public var asShowcaseDocument: DBXTeamLogAssetLogInfoShowcaseDocument? {
        self as? DBXTeamLogAssetLogInfoShowcaseDocument
    }

    @objc
    public var asOther: DBXTeamLogAssetLogInfoOther? {
        self as? DBXTeamLogAssetLogInfoOther
    }
}

/// File's details.
@objc
public class DBXTeamLogAssetLogInfoFile: DBXTeamLogAssetLogInfo {
    @objc
    public var file: DBXTeamLogFileLogInfo

    @objc
    public init(_ arg: DBXTeamLogFileLogInfo) {
        self.file = arg
        let swift = TeamLog.AssetLogInfo.file(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Folder's details.
@objc
public class DBXTeamLogAssetLogInfoFolder: DBXTeamLogAssetLogInfo {
    @objc
    public var folder: DBXTeamLogFolderLogInfo

    @objc
    public init(_ arg: DBXTeamLogFolderLogInfo) {
        self.folder = arg
        let swift = TeamLog.AssetLogInfo.folder(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Paper document's details.
@objc
public class DBXTeamLogAssetLogInfoPaperDocument: DBXTeamLogAssetLogInfo {
    @objc
    public var paperDocument: DBXTeamLogPaperDocumentLogInfo

    @objc
    public init(_ arg: DBXTeamLogPaperDocumentLogInfo) {
        self.paperDocument = arg
        let swift = TeamLog.AssetLogInfo.paperDocument(arg.swift)
        super.init(swift: swift)
    }
}

/// Paper folder's details.
@objc
public class DBXTeamLogAssetLogInfoPaperFolder: DBXTeamLogAssetLogInfo {
    @objc
    public var paperFolder: DBXTeamLogPaperFolderLogInfo

    @objc
    public init(_ arg: DBXTeamLogPaperFolderLogInfo) {
        self.paperFolder = arg
        let swift = TeamLog.AssetLogInfo.paperFolder(arg.swift)
        super.init(swift: swift)
    }
}

/// Showcase document's details.
@objc
public class DBXTeamLogAssetLogInfoShowcaseDocument: DBXTeamLogAssetLogInfo {
    @objc
    public var showcaseDocument: DBXTeamLogShowcaseDocumentLogInfo

    @objc
    public init(_ arg: DBXTeamLogShowcaseDocumentLogInfo) {
        self.showcaseDocument = arg
        let swift = TeamLog.AssetLogInfo.showcaseDocument(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogAssetLogInfoOther: DBXTeamLogAssetLogInfo {
    @objc
    public init() {
        let swift = TeamLog.AssetLogInfo.other
        super.init(swift: swift)
    }
}

/// Invited members to activate Backup.
@objc
public class DBXTeamLogBackupAdminInvitationSentDetails: NSObject {
    let swift: TeamLog.BackupAdminInvitationSentDetails

    public init(swift: TeamLog.BackupAdminInvitationSentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BackupAdminInvitationSentType struct
@objc
public class DBXTeamLogBackupAdminInvitationSentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BackupAdminInvitationSentType(description_: description_)
    }

    let swift: TeamLog.BackupAdminInvitationSentType

    public init(swift: TeamLog.BackupAdminInvitationSentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Opened Backup invite.
@objc
public class DBXTeamLogBackupInvitationOpenedDetails: NSObject {
    let swift: TeamLog.BackupInvitationOpenedDetails

    public init(swift: TeamLog.BackupInvitationOpenedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BackupInvitationOpenedType struct
@objc
public class DBXTeamLogBackupInvitationOpenedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BackupInvitationOpenedType(description_: description_)
    }

    let swift: TeamLog.BackupInvitationOpenedType

    public init(swift: TeamLog.BackupInvitationOpenedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Backup status
@objc
public class DBXTeamLogBackupStatus: NSObject {
    let swift: TeamLog.BackupStatus

    public init(swift: TeamLog.BackupStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.BackupStatus) -> DBXTeamLogBackupStatus {
        switch swift {
        case .disabled:
            return DBXTeamLogBackupStatusDisabled()
        case .enabled:
            return DBXTeamLogBackupStatusEnabled()
        case .other:
            return DBXTeamLogBackupStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogBackupStatusDisabled? {
        self as? DBXTeamLogBackupStatusDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogBackupStatusEnabled? {
        self as? DBXTeamLogBackupStatusEnabled
    }

    @objc
    public var asOther: DBXTeamLogBackupStatusOther? {
        self as? DBXTeamLogBackupStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogBackupStatusDisabled: DBXTeamLogBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.BackupStatus.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogBackupStatusEnabled: DBXTeamLogBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.BackupStatus.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogBackupStatusOther: DBXTeamLogBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.BackupStatus.other
        super.init(swift: swift)
    }
}

/// Added Binder page.
@objc
public class DBXTeamLogBinderAddPageDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderAddPageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderAddPageDetails

    public init(swift: TeamLog.BinderAddPageDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderAddPageType struct
@objc
public class DBXTeamLogBinderAddPageType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderAddPageType(description_: description_)
    }

    let swift: TeamLog.BinderAddPageType

    public init(swift: TeamLog.BinderAddPageType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added Binder section.
@objc
public class DBXTeamLogBinderAddSectionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderAddSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderAddSectionDetails

    public init(swift: TeamLog.BinderAddSectionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderAddSectionType struct
@objc
public class DBXTeamLogBinderAddSectionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderAddSectionType(description_: description_)
    }

    let swift: TeamLog.BinderAddSectionType

    public init(swift: TeamLog.BinderAddSectionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed Binder page.
@objc
public class DBXTeamLogBinderRemovePageDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderRemovePageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderRemovePageDetails

    public init(swift: TeamLog.BinderRemovePageDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderRemovePageType struct
@objc
public class DBXTeamLogBinderRemovePageType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderRemovePageType(description_: description_)
    }

    let swift: TeamLog.BinderRemovePageType

    public init(swift: TeamLog.BinderRemovePageType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed Binder section.
@objc
public class DBXTeamLogBinderRemoveSectionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderRemoveSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderRemoveSectionDetails

    public init(swift: TeamLog.BinderRemoveSectionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderRemoveSectionType struct
@objc
public class DBXTeamLogBinderRemoveSectionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderRemoveSectionType(description_: description_)
    }

    let swift: TeamLog.BinderRemoveSectionType

    public init(swift: TeamLog.BinderRemoveSectionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed Binder page.
@objc
public class DBXTeamLogBinderRenamePageDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }
    /// Previous name of the Binder page/section.
    @objc
    public var previousBinderItemName: String? { swift.previousBinderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String, previousBinderItemName: String?) {
        self.swift = TeamLog.BinderRenamePageDetails(
            eventUuid: eventUuid,
            docTitle: docTitle,
            binderItemName: binderItemName,
            previousBinderItemName: previousBinderItemName
        )
    }

    let swift: TeamLog.BinderRenamePageDetails

    public init(swift: TeamLog.BinderRenamePageDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderRenamePageType struct
@objc
public class DBXTeamLogBinderRenamePageType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderRenamePageType(description_: description_)
    }

    let swift: TeamLog.BinderRenamePageType

    public init(swift: TeamLog.BinderRenamePageType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed Binder section.
@objc
public class DBXTeamLogBinderRenameSectionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }
    /// Previous name of the Binder page/section.
    @objc
    public var previousBinderItemName: String? { swift.previousBinderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String, previousBinderItemName: String?) {
        self.swift = TeamLog.BinderRenameSectionDetails(
            eventUuid: eventUuid,
            docTitle: docTitle,
            binderItemName: binderItemName,
            previousBinderItemName: previousBinderItemName
        )
    }

    let swift: TeamLog.BinderRenameSectionDetails

    public init(swift: TeamLog.BinderRenameSectionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderRenameSectionType struct
@objc
public class DBXTeamLogBinderRenameSectionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderRenameSectionType(description_: description_)
    }

    let swift: TeamLog.BinderRenameSectionType

    public init(swift: TeamLog.BinderRenameSectionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reordered Binder page.
@objc
public class DBXTeamLogBinderReorderPageDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderReorderPageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderReorderPageDetails

    public init(swift: TeamLog.BinderReorderPageDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderReorderPageType struct
@objc
public class DBXTeamLogBinderReorderPageType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderReorderPageType(description_: description_)
    }

    let swift: TeamLog.BinderReorderPageType

    public init(swift: TeamLog.BinderReorderPageType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reordered Binder section.
@objc
public class DBXTeamLogBinderReorderSectionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Title of the Binder doc.
    @objc
    public var docTitle: String { swift.docTitle }
    /// Name of the Binder page/section.
    @objc
    public var binderItemName: String { swift.binderItemName }

    @objc
    public init(eventUuid: String, docTitle: String, binderItemName: String) {
        self.swift = TeamLog.BinderReorderSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
    }

    let swift: TeamLog.BinderReorderSectionDetails

    public init(swift: TeamLog.BinderReorderSectionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible BinderReorderSectionType struct
@objc
public class DBXTeamLogBinderReorderSectionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.BinderReorderSectionType(description_: description_)
    }

    let swift: TeamLog.BinderReorderSectionType

    public init(swift: TeamLog.BinderReorderSectionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if team members can activate camera uploads
@objc
public class DBXTeamLogCameraUploadsPolicy: NSObject {
    let swift: TeamLog.CameraUploadsPolicy

    public init(swift: TeamLog.CameraUploadsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.CameraUploadsPolicy) -> DBXTeamLogCameraUploadsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogCameraUploadsPolicyDisabled()
        case .enabled:
            return DBXTeamLogCameraUploadsPolicyEnabled()
        case .other:
            return DBXTeamLogCameraUploadsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogCameraUploadsPolicyDisabled? {
        self as? DBXTeamLogCameraUploadsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogCameraUploadsPolicyEnabled? {
        self as? DBXTeamLogCameraUploadsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogCameraUploadsPolicyOther? {
        self as? DBXTeamLogCameraUploadsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCameraUploadsPolicyDisabled: DBXTeamLogCameraUploadsPolicy {
    @objc
    public init() {
        let swift = TeamLog.CameraUploadsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCameraUploadsPolicyEnabled: DBXTeamLogCameraUploadsPolicy {
    @objc
    public init() {
        let swift = TeamLog.CameraUploadsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCameraUploadsPolicyOther: DBXTeamLogCameraUploadsPolicy {
    @objc
    public init() {
        let swift = TeamLog.CameraUploadsPolicy.other
        super.init(swift: swift)
    }
}

/// Changed camera uploads setting for team.
@objc
public class DBXTeamLogCameraUploadsPolicyChangedDetails: NSObject {
    /// New camera uploads setting.
    @objc
    public var newValue: DBXTeamLogCameraUploadsPolicy { DBXTeamLogCameraUploadsPolicy(swift: swift.newValue) }
    /// Previous camera uploads setting.
    @objc
    public var previousValue: DBXTeamLogCameraUploadsPolicy { DBXTeamLogCameraUploadsPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogCameraUploadsPolicy, previousValue: DBXTeamLogCameraUploadsPolicy) {
        self.swift = TeamLog.CameraUploadsPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.CameraUploadsPolicyChangedDetails

    public init(swift: TeamLog.CameraUploadsPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible CameraUploadsPolicyChangedType struct
@objc
public class DBXTeamLogCameraUploadsPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.CameraUploadsPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.CameraUploadsPolicyChangedType

    public init(swift: TeamLog.CameraUploadsPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether team users can transcription in Capture
@objc
public class DBXTeamLogCaptureTranscriptPolicy: NSObject {
    let swift: TeamLog.CaptureTranscriptPolicy

    public init(swift: TeamLog.CaptureTranscriptPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.CaptureTranscriptPolicy) -> DBXTeamLogCaptureTranscriptPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogCaptureTranscriptPolicyDefault_()
        case .disabled:
            return DBXTeamLogCaptureTranscriptPolicyDisabled()
        case .enabled:
            return DBXTeamLogCaptureTranscriptPolicyEnabled()
        case .other:
            return DBXTeamLogCaptureTranscriptPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogCaptureTranscriptPolicyDefault_? {
        self as? DBXTeamLogCaptureTranscriptPolicyDefault_
    }

    @objc
    public var asDisabled: DBXTeamLogCaptureTranscriptPolicyDisabled? {
        self as? DBXTeamLogCaptureTranscriptPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogCaptureTranscriptPolicyEnabled? {
        self as? DBXTeamLogCaptureTranscriptPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogCaptureTranscriptPolicyOther? {
        self as? DBXTeamLogCaptureTranscriptPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCaptureTranscriptPolicyDefault_: DBXTeamLogCaptureTranscriptPolicy {
    @objc
    public init() {
        let swift = TeamLog.CaptureTranscriptPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCaptureTranscriptPolicyDisabled: DBXTeamLogCaptureTranscriptPolicy {
    @objc
    public init() {
        let swift = TeamLog.CaptureTranscriptPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCaptureTranscriptPolicyEnabled: DBXTeamLogCaptureTranscriptPolicy {
    @objc
    public init() {
        let swift = TeamLog.CaptureTranscriptPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogCaptureTranscriptPolicyOther: DBXTeamLogCaptureTranscriptPolicy {
    @objc
    public init() {
        let swift = TeamLog.CaptureTranscriptPolicy.other
        super.init(swift: swift)
    }
}

/// Changed Capture transcription policy for team.
@objc
public class DBXTeamLogCaptureTranscriptPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogCaptureTranscriptPolicy { DBXTeamLogCaptureTranscriptPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogCaptureTranscriptPolicy { DBXTeamLogCaptureTranscriptPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogCaptureTranscriptPolicy, previousValue: DBXTeamLogCaptureTranscriptPolicy) {
        self.swift = TeamLog.CaptureTranscriptPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.CaptureTranscriptPolicyChangedDetails

    public init(swift: TeamLog.CaptureTranscriptPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible CaptureTranscriptPolicyChangedType struct
@objc
public class DBXTeamLogCaptureTranscriptPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.CaptureTranscriptPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.CaptureTranscriptPolicyChangedType

    public init(swift: TeamLog.CaptureTranscriptPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Certificate details.
@objc
public class DBXTeamLogCertificate: NSObject {
    /// Certificate subject.
    @objc
    public var subject: String { swift.subject }
    /// Certificate issuer.
    @objc
    public var issuer: String { swift.issuer }
    /// Certificate issue date.
    @objc
    public var issueDate: String { swift.issueDate }
    /// Certificate expiration date.
    @objc
    public var expirationDate: String { swift.expirationDate }
    /// Certificate serial number.
    @objc
    public var serialNumber: String { swift.serialNumber }
    /// Certificate sha1 fingerprint.
    @objc
    public var sha1Fingerprint: String { swift.sha1Fingerprint }
    /// Certificate common name.
    @objc
    public var commonName: String? { swift.commonName }

    @objc
    public init(
        subject: String,
        issuer: String,
        issueDate: String,
        expirationDate: String,
        serialNumber: String,
        sha1Fingerprint: String,
        commonName: String?
    ) {
        self.swift = TeamLog.Certificate(
            subject: subject,
            issuer: issuer,
            issueDate: issueDate,
            expirationDate: expirationDate,
            serialNumber: serialNumber,
            sha1Fingerprint: sha1Fingerprint,
            commonName: commonName
        )
    }

    let swift: TeamLog.Certificate

    public init(swift: TeamLog.Certificate) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether the team's default expiration days policy must be enforced when an externally shared
/// link is updated
@objc
public class DBXTeamLogChangeLinkExpirationPolicy: NSObject {
    let swift: TeamLog.ChangeLinkExpirationPolicy

    public init(swift: TeamLog.ChangeLinkExpirationPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ChangeLinkExpirationPolicy) -> DBXTeamLogChangeLinkExpirationPolicy {
        switch swift {
        case .allowed:
            return DBXTeamLogChangeLinkExpirationPolicyAllowed()
        case .notAllowed:
            return DBXTeamLogChangeLinkExpirationPolicyNotAllowed()
        case .other:
            return DBXTeamLogChangeLinkExpirationPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllowed: DBXTeamLogChangeLinkExpirationPolicyAllowed? {
        self as? DBXTeamLogChangeLinkExpirationPolicyAllowed
    }

    @objc
    public var asNotAllowed: DBXTeamLogChangeLinkExpirationPolicyNotAllowed? {
        self as? DBXTeamLogChangeLinkExpirationPolicyNotAllowed
    }

    @objc
    public var asOther: DBXTeamLogChangeLinkExpirationPolicyOther? {
        self as? DBXTeamLogChangeLinkExpirationPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogChangeLinkExpirationPolicyAllowed: DBXTeamLogChangeLinkExpirationPolicy {
    @objc
    public init() {
        let swift = TeamLog.ChangeLinkExpirationPolicy.allowed
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogChangeLinkExpirationPolicyNotAllowed: DBXTeamLogChangeLinkExpirationPolicy {
    @objc
    public init() {
        let swift = TeamLog.ChangeLinkExpirationPolicy.notAllowed
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogChangeLinkExpirationPolicyOther: DBXTeamLogChangeLinkExpirationPolicy {
    @objc
    public init() {
        let swift = TeamLog.ChangeLinkExpirationPolicy.other
        super.init(swift: swift)
    }
}

/// Changed enterprise admin role.
@objc
public class DBXTeamLogChangedEnterpriseAdminRoleDetails: NSObject {
    /// The member&#x2019s previous enterprise admin role.
    @objc
    public var previousValue: DBXTeamLogFedAdminRole { DBXTeamLogFedAdminRole(swift: swift.previousValue) }
    /// The member&#x2019s new enterprise admin role.
    @objc
    public var newValue: DBXTeamLogFedAdminRole { DBXTeamLogFedAdminRole(swift: swift.newValue) }
    /// The name of the member&#x2019s team.
    @objc
    public var teamName: String { swift.teamName }

    @objc
    public init(previousValue: DBXTeamLogFedAdminRole, newValue: DBXTeamLogFedAdminRole, teamName: String) {
        self.swift = TeamLog.ChangedEnterpriseAdminRoleDetails(previousValue: previousValue.swift, newValue: newValue.swift, teamName: teamName)
    }

    let swift: TeamLog.ChangedEnterpriseAdminRoleDetails

    public init(swift: TeamLog.ChangedEnterpriseAdminRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ChangedEnterpriseAdminRoleType struct
@objc
public class DBXTeamLogChangedEnterpriseAdminRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ChangedEnterpriseAdminRoleType(description_: description_)
    }

    let swift: TeamLog.ChangedEnterpriseAdminRoleType

    public init(swift: TeamLog.ChangedEnterpriseAdminRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed enterprise-connected team status.
@objc
public class DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails: NSObject {
    /// The preformed change in the team&#x2019s connection status.
    @objc
    public var action: DBXTeamLogFedHandshakeAction { DBXTeamLogFedHandshakeAction(swift: swift.action) }
    /// Additional information about the organization or team.
    @objc
    public var additionalInfo: DBXTeamLogFederationStatusChangeAdditionalInfo { DBXTeamLogFederationStatusChangeAdditionalInfo(swift: swift.additionalInfo) }
    /// Previous request state.
    @objc
    public var previousValue: DBXTeamLogTrustedTeamsRequestState { DBXTeamLogTrustedTeamsRequestState(swift: swift.previousValue) }
    /// New request state.
    @objc
    public var newValue: DBXTeamLogTrustedTeamsRequestState { DBXTeamLogTrustedTeamsRequestState(swift: swift.newValue) }

    @objc
    public init(
        action: DBXTeamLogFedHandshakeAction,
        additionalInfo: DBXTeamLogFederationStatusChangeAdditionalInfo,
        previousValue: DBXTeamLogTrustedTeamsRequestState,
        newValue: DBXTeamLogTrustedTeamsRequestState
    ) {
        self.swift = TeamLog.ChangedEnterpriseConnectedTeamStatusDetails(
            action: action.swift,
            additionalInfo: additionalInfo.swift,
            previousValue: previousValue.swift,
            newValue: newValue.swift
        )
    }

    let swift: TeamLog.ChangedEnterpriseConnectedTeamStatusDetails

    public init(swift: TeamLog.ChangedEnterpriseConnectedTeamStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ChangedEnterpriseConnectedTeamStatusType struct
@objc
public class DBXTeamLogChangedEnterpriseConnectedTeamStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ChangedEnterpriseConnectedTeamStatusType(description_: description_)
    }

    let swift: TeamLog.ChangedEnterpriseConnectedTeamStatusType

    public init(swift: TeamLog.ChangedEnterpriseConnectedTeamStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed classification policy for team.
@objc
public class DBXTeamLogClassificationChangePolicyDetails: NSObject {
    /// Previous classification policy.
    @objc
    public var previousValue: DBXTeamLogClassificationPolicyEnumWrapper { DBXTeamLogClassificationPolicyEnumWrapper(swift: swift.previousValue) }
    /// New classification policy.
    @objc
    public var newValue: DBXTeamLogClassificationPolicyEnumWrapper { DBXTeamLogClassificationPolicyEnumWrapper(swift: swift.newValue) }
    /// Policy type.
    @objc
    public var classificationType: DBXTeamLogClassificationType { DBXTeamLogClassificationType(swift: swift.classificationType) }

    @objc
    public init(
        previousValue: DBXTeamLogClassificationPolicyEnumWrapper,
        newValue: DBXTeamLogClassificationPolicyEnumWrapper,
        classificationType: DBXTeamLogClassificationType
    ) {
        self.swift = TeamLog.ClassificationChangePolicyDetails(
            previousValue: previousValue.swift,
            newValue: newValue.swift,
            classificationType: classificationType.swift
        )
    }

    let swift: TeamLog.ClassificationChangePolicyDetails

    public init(swift: TeamLog.ClassificationChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ClassificationChangePolicyType struct
@objc
public class DBXTeamLogClassificationChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ClassificationChangePolicyType(description_: description_)
    }

    let swift: TeamLog.ClassificationChangePolicyType

    public init(swift: TeamLog.ClassificationChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created Classification report.
@objc
public class DBXTeamLogClassificationCreateReportDetails: NSObject {
    let swift: TeamLog.ClassificationCreateReportDetails

    public init(swift: TeamLog.ClassificationCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create Classification report.
@objc
public class DBXTeamLogClassificationCreateReportFailDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.ClassificationCreateReportFailDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.ClassificationCreateReportFailDetails

    public init(swift: TeamLog.ClassificationCreateReportFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ClassificationCreateReportFailType struct
@objc
public class DBXTeamLogClassificationCreateReportFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ClassificationCreateReportFailType(description_: description_)
    }

    let swift: TeamLog.ClassificationCreateReportFailType

    public init(swift: TeamLog.ClassificationCreateReportFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ClassificationCreateReportType struct
@objc
public class DBXTeamLogClassificationCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ClassificationCreateReportType(description_: description_)
    }

    let swift: TeamLog.ClassificationCreateReportType

    public init(swift: TeamLog.ClassificationCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to the classification feature
@objc
public class DBXTeamLogClassificationPolicyEnumWrapper: NSObject {
    let swift: TeamLog.ClassificationPolicyEnumWrapper

    public init(swift: TeamLog.ClassificationPolicyEnumWrapper) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ClassificationPolicyEnumWrapper) -> DBXTeamLogClassificationPolicyEnumWrapper {
        switch swift {
        case .disabled:
            return DBXTeamLogClassificationPolicyEnumWrapperDisabled()
        case .enabled:
            return DBXTeamLogClassificationPolicyEnumWrapperEnabled()
        case .memberAndTeamFolders:
            return DBXTeamLogClassificationPolicyEnumWrapperMemberAndTeamFolders()
        case .teamFolders:
            return DBXTeamLogClassificationPolicyEnumWrapperTeamFolders()
        case .other:
            return DBXTeamLogClassificationPolicyEnumWrapperOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogClassificationPolicyEnumWrapperDisabled? {
        self as? DBXTeamLogClassificationPolicyEnumWrapperDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogClassificationPolicyEnumWrapperEnabled? {
        self as? DBXTeamLogClassificationPolicyEnumWrapperEnabled
    }

    @objc
    public var asMemberAndTeamFolders: DBXTeamLogClassificationPolicyEnumWrapperMemberAndTeamFolders? {
        self as? DBXTeamLogClassificationPolicyEnumWrapperMemberAndTeamFolders
    }

    @objc
    public var asTeamFolders: DBXTeamLogClassificationPolicyEnumWrapperTeamFolders? {
        self as? DBXTeamLogClassificationPolicyEnumWrapperTeamFolders
    }

    @objc
    public var asOther: DBXTeamLogClassificationPolicyEnumWrapperOther? {
        self as? DBXTeamLogClassificationPolicyEnumWrapperOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationPolicyEnumWrapperDisabled: DBXTeamLogClassificationPolicyEnumWrapper {
    @objc
    public init() {
        let swift = TeamLog.ClassificationPolicyEnumWrapper.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationPolicyEnumWrapperEnabled: DBXTeamLogClassificationPolicyEnumWrapper {
    @objc
    public init() {
        let swift = TeamLog.ClassificationPolicyEnumWrapper.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationPolicyEnumWrapperMemberAndTeamFolders: DBXTeamLogClassificationPolicyEnumWrapper {
    @objc
    public init() {
        let swift = TeamLog.ClassificationPolicyEnumWrapper.memberAndTeamFolders
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationPolicyEnumWrapperTeamFolders: DBXTeamLogClassificationPolicyEnumWrapper {
    @objc
    public init() {
        let swift = TeamLog.ClassificationPolicyEnumWrapper.teamFolders
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationPolicyEnumWrapperOther: DBXTeamLogClassificationPolicyEnumWrapper {
    @objc
    public init() {
        let swift = TeamLog.ClassificationPolicyEnumWrapper.other
        super.init(swift: swift)
    }
}

/// The type of classification (currently only personal information)
@objc
public class DBXTeamLogClassificationType: NSObject {
    let swift: TeamLog.ClassificationType

    public init(swift: TeamLog.ClassificationType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ClassificationType) -> DBXTeamLogClassificationType {
        switch swift {
        case .personalInformation:
            return DBXTeamLogClassificationTypePersonalInformation()
        case .pii:
            return DBXTeamLogClassificationTypePii()
        case .other:
            return DBXTeamLogClassificationTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPersonalInformation: DBXTeamLogClassificationTypePersonalInformation? {
        self as? DBXTeamLogClassificationTypePersonalInformation
    }

    @objc
    public var asPii: DBXTeamLogClassificationTypePii? {
        self as? DBXTeamLogClassificationTypePii
    }

    @objc
    public var asOther: DBXTeamLogClassificationTypeOther? {
        self as? DBXTeamLogClassificationTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationTypePersonalInformation: DBXTeamLogClassificationType {
    @objc
    public init() {
        let swift = TeamLog.ClassificationType.personalInformation
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationTypePii: DBXTeamLogClassificationType {
    @objc
    public init() {
        let swift = TeamLog.ClassificationType.pii
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogClassificationTypeOther: DBXTeamLogClassificationType {
    @objc
    public init() {
        let swift = TeamLog.ClassificationType.other
        super.init(swift: swift)
    }
}

/// Shared album.
@objc
public class DBXTeamLogCollectionShareDetails: NSObject {
    /// Album name.
    @objc
    public var albumName: String { swift.albumName }

    @objc
    public init(albumName: String) {
        self.swift = TeamLog.CollectionShareDetails(albumName: albumName)
    }

    let swift: TeamLog.CollectionShareDetails

    public init(swift: TeamLog.CollectionShareDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible CollectionShareType struct
@objc
public class DBXTeamLogCollectionShareType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.CollectionShareType(description_: description_)
    }

    let swift: TeamLog.CollectionShareType

    public init(swift: TeamLog.CollectionShareType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to computer backup feature
@objc
public class DBXTeamLogComputerBackupPolicy: NSObject {
    let swift: TeamLog.ComputerBackupPolicy

    public init(swift: TeamLog.ComputerBackupPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ComputerBackupPolicy) -> DBXTeamLogComputerBackupPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogComputerBackupPolicyDefault_()
        case .disabled:
            return DBXTeamLogComputerBackupPolicyDisabled()
        case .enabled:
            return DBXTeamLogComputerBackupPolicyEnabled()
        case .other:
            return DBXTeamLogComputerBackupPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogComputerBackupPolicyDefault_? {
        self as? DBXTeamLogComputerBackupPolicyDefault_
    }

    @objc
    public var asDisabled: DBXTeamLogComputerBackupPolicyDisabled? {
        self as? DBXTeamLogComputerBackupPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogComputerBackupPolicyEnabled? {
        self as? DBXTeamLogComputerBackupPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogComputerBackupPolicyOther? {
        self as? DBXTeamLogComputerBackupPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogComputerBackupPolicyDefault_: DBXTeamLogComputerBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ComputerBackupPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogComputerBackupPolicyDisabled: DBXTeamLogComputerBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ComputerBackupPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogComputerBackupPolicyEnabled: DBXTeamLogComputerBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ComputerBackupPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogComputerBackupPolicyOther: DBXTeamLogComputerBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ComputerBackupPolicy.other
        super.init(swift: swift)
    }
}

/// Changed computer backup policy for team.
@objc
public class DBXTeamLogComputerBackupPolicyChangedDetails: NSObject {
    /// New computer backup policy.
    @objc
    public var newValue: DBXTeamLogComputerBackupPolicy { DBXTeamLogComputerBackupPolicy(swift: swift.newValue) }
    /// Previous computer backup policy.
    @objc
    public var previousValue: DBXTeamLogComputerBackupPolicy { DBXTeamLogComputerBackupPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogComputerBackupPolicy, previousValue: DBXTeamLogComputerBackupPolicy) {
        self.swift = TeamLog.ComputerBackupPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ComputerBackupPolicyChangedDetails

    public init(swift: TeamLog.ComputerBackupPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ComputerBackupPolicyChangedType struct
@objc
public class DBXTeamLogComputerBackupPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ComputerBackupPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.ComputerBackupPolicyChangedType

    public init(swift: TeamLog.ComputerBackupPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// The name of the team
@objc
public class DBXTeamLogConnectedTeamName: NSObject {
    /// The name of the team.
    @objc
    public var team: String { swift.team }

    @objc
    public init(team: String) {
        self.swift = TeamLog.ConnectedTeamName(team: team)
    }

    let swift: TeamLog.ConnectedTeamName

    public init(swift: TeamLog.ConnectedTeamName) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed content management setting.
@objc
public class DBXTeamLogContentAdministrationPolicyChangedDetails: NSObject {
    /// New content administration policy.
    @objc
    public var newValue: String { swift.newValue }
    /// Previous content administration policy.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(newValue: String, previousValue: String) {
        self.swift = TeamLog.ContentAdministrationPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.ContentAdministrationPolicyChangedDetails

    public init(swift: TeamLog.ContentAdministrationPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ContentAdministrationPolicyChangedType struct
@objc
public class DBXTeamLogContentAdministrationPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ContentAdministrationPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.ContentAdministrationPolicyChangedType

    public init(swift: TeamLog.ContentAdministrationPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for pemanent content deletion
@objc
public class DBXTeamLogContentPermanentDeletePolicy: NSObject {
    let swift: TeamLog.ContentPermanentDeletePolicy

    public init(swift: TeamLog.ContentPermanentDeletePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ContentPermanentDeletePolicy) -> DBXTeamLogContentPermanentDeletePolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogContentPermanentDeletePolicyDisabled()
        case .enabled:
            return DBXTeamLogContentPermanentDeletePolicyEnabled()
        case .other:
            return DBXTeamLogContentPermanentDeletePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogContentPermanentDeletePolicyDisabled? {
        self as? DBXTeamLogContentPermanentDeletePolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogContentPermanentDeletePolicyEnabled? {
        self as? DBXTeamLogContentPermanentDeletePolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogContentPermanentDeletePolicyOther? {
        self as? DBXTeamLogContentPermanentDeletePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogContentPermanentDeletePolicyDisabled: DBXTeamLogContentPermanentDeletePolicy {
    @objc
    public init() {
        let swift = TeamLog.ContentPermanentDeletePolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogContentPermanentDeletePolicyEnabled: DBXTeamLogContentPermanentDeletePolicy {
    @objc
    public init() {
        let swift = TeamLog.ContentPermanentDeletePolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogContentPermanentDeletePolicyOther: DBXTeamLogContentPermanentDeletePolicy {
    @objc
    public init() {
        let swift = TeamLog.ContentPermanentDeletePolicy.other
        super.init(swift: swift)
    }
}

/// The primary entity on which the action was done.
@objc
public class DBXTeamLogContextLogInfo: NSObject {
    let swift: TeamLog.ContextLogInfo

    public init(swift: TeamLog.ContextLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ContextLogInfo) -> DBXTeamLogContextLogInfo {
        switch swift {
        case .anonymous:
            return DBXTeamLogContextLogInfoAnonymous()
        case .nonTeamMember(let swiftArg):
            let arg = DBXTeamLogNonTeamMemberLogInfo(swift: swiftArg)
            return DBXTeamLogContextLogInfoNonTeamMember(arg)
        case .organizationTeam(let swiftArg):
            let arg = DBXTeamLogTeamLogInfo(swift: swiftArg)
            return DBXTeamLogContextLogInfoOrganizationTeam(arg)
        case .team:
            return DBXTeamLogContextLogInfoTeam()
        case .teamMember(let swiftArg):
            let arg = DBXTeamLogTeamMemberLogInfo(swift: swiftArg)
            return DBXTeamLogContextLogInfoTeamMember(arg)
        case .trustedNonTeamMember(let swiftArg):
            let arg = DBXTeamLogTrustedNonTeamMemberLogInfo(swift: swiftArg)
            return DBXTeamLogContextLogInfoTrustedNonTeamMember(arg)
        case .other:
            return DBXTeamLogContextLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAnonymous: DBXTeamLogContextLogInfoAnonymous? {
        self as? DBXTeamLogContextLogInfoAnonymous
    }

    @objc
    public var asNonTeamMember: DBXTeamLogContextLogInfoNonTeamMember? {
        self as? DBXTeamLogContextLogInfoNonTeamMember
    }

    @objc
    public var asOrganizationTeam: DBXTeamLogContextLogInfoOrganizationTeam? {
        self as? DBXTeamLogContextLogInfoOrganizationTeam
    }

    @objc
    public var asTeam: DBXTeamLogContextLogInfoTeam? {
        self as? DBXTeamLogContextLogInfoTeam
    }

    @objc
    public var asTeamMember: DBXTeamLogContextLogInfoTeamMember? {
        self as? DBXTeamLogContextLogInfoTeamMember
    }

    @objc
    public var asTrustedNonTeamMember: DBXTeamLogContextLogInfoTrustedNonTeamMember? {
        self as? DBXTeamLogContextLogInfoTrustedNonTeamMember
    }

    @objc
    public var asOther: DBXTeamLogContextLogInfoOther? {
        self as? DBXTeamLogContextLogInfoOther
    }
}

/// Anonymous context.
@objc
public class DBXTeamLogContextLogInfoAnonymous: DBXTeamLogContextLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ContextLogInfo.anonymous
        super.init(swift: swift)
    }
}

/// Action was done on behalf of a non team member.
@objc
public class DBXTeamLogContextLogInfoNonTeamMember: DBXTeamLogContextLogInfo {
    @objc
    public var nonTeamMember: DBXTeamLogNonTeamMemberLogInfo

    @objc
    public init(_ arg: DBXTeamLogNonTeamMemberLogInfo) {
        self.nonTeamMember = arg
        let swift = TeamLog.ContextLogInfo.nonTeamMember(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Action was done on behalf of a team that's part of an organization.
@objc
public class DBXTeamLogContextLogInfoOrganizationTeam: DBXTeamLogContextLogInfo {
    @objc
    public var organizationTeam: DBXTeamLogTeamLogInfo

    @objc
    public init(_ arg: DBXTeamLogTeamLogInfo) {
        self.organizationTeam = arg
        let swift = TeamLog.ContextLogInfo.organizationTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// Action was done on behalf of the team.
@objc
public class DBXTeamLogContextLogInfoTeam: DBXTeamLogContextLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ContextLogInfo.team
        super.init(swift: swift)
    }
}

/// Action was done on behalf of a team member.
@objc
public class DBXTeamLogContextLogInfoTeamMember: DBXTeamLogContextLogInfo {
    @objc
    public var teamMember: DBXTeamLogTeamMemberLogInfo

    @objc
    public init(_ arg: DBXTeamLogTeamMemberLogInfo) {
        self.teamMember = arg
        let swift = TeamLog.ContextLogInfo.teamMember(arg.subSwift)
        super.init(swift: swift)
    }
}

/// Action was done on behalf of a trusted non team member.
@objc
public class DBXTeamLogContextLogInfoTrustedNonTeamMember: DBXTeamLogContextLogInfo {
    @objc
    public var trustedNonTeamMember: DBXTeamLogTrustedNonTeamMemberLogInfo

    @objc
    public init(_ arg: DBXTeamLogTrustedNonTeamMemberLogInfo) {
        self.trustedNonTeamMember = arg
        let swift = TeamLog.ContextLogInfo.trustedNonTeamMember(arg.subSwift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogContextLogInfoOther: DBXTeamLogContextLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ContextLogInfo.other
        super.init(swift: swift)
    }
}

/// Created folders.
@objc
public class DBXTeamLogCreateFolderDetails: NSObject {
    let swift: TeamLog.CreateFolderDetails

    public init(swift: TeamLog.CreateFolderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible CreateFolderType struct
@objc
public class DBXTeamLogCreateFolderType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.CreateFolderType(description_: description_)
    }

    let swift: TeamLog.CreateFolderType

    public init(swift: TeamLog.CreateFolderType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created team invite link.
@objc
public class DBXTeamLogCreateTeamInviteLinkDetails: NSObject {
    /// The invite link url that was created.
    @objc
    public var linkUrl: String { swift.linkUrl }
    /// The expiration date of the invite link.
    @objc
    public var expiryDate: String { swift.expiryDate }

    @objc
    public init(linkUrl: String, expiryDate: String) {
        self.swift = TeamLog.CreateTeamInviteLinkDetails(linkUrl: linkUrl, expiryDate: expiryDate)
    }

    let swift: TeamLog.CreateTeamInviteLinkDetails

    public init(swift: TeamLog.CreateTeamInviteLinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible CreateTeamInviteLinkType struct
@objc
public class DBXTeamLogCreateTeamInviteLinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.CreateTeamInviteLinkType(description_: description_)
    }

    let swift: TeamLog.CreateTeamInviteLinkType

    public init(swift: TeamLog.CreateTeamInviteLinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set restrictions on data center locations where team data resides.
@objc
public class DBXTeamLogDataPlacementRestrictionChangePolicyDetails: NSObject {
    /// Previous placement restriction.
    @objc
    public var previousValue: DBXTeamLogPlacementRestriction { DBXTeamLogPlacementRestriction(swift: swift.previousValue) }
    /// New placement restriction.
    @objc
    public var newValue: DBXTeamLogPlacementRestriction { DBXTeamLogPlacementRestriction(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogPlacementRestriction, newValue: DBXTeamLogPlacementRestriction) {
        self.swift = TeamLog.DataPlacementRestrictionChangePolicyDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.DataPlacementRestrictionChangePolicyDetails

    public init(swift: TeamLog.DataPlacementRestrictionChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DataPlacementRestrictionChangePolicyType struct
@objc
public class DBXTeamLogDataPlacementRestrictionChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DataPlacementRestrictionChangePolicyType(description_: description_)
    }

    let swift: TeamLog.DataPlacementRestrictionChangePolicyType

    public init(swift: TeamLog.DataPlacementRestrictionChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Completed restrictions on data center locations where team data resides.
@objc
public class DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails: NSObject {
    /// Placement restriction.
    @objc
    public var placementRestriction: DBXTeamLogPlacementRestriction { DBXTeamLogPlacementRestriction(swift: swift.placementRestriction) }

    @objc
    public init(placementRestriction: DBXTeamLogPlacementRestriction) {
        self.swift = TeamLog.DataPlacementRestrictionSatisfyPolicyDetails(placementRestriction: placementRestriction.swift)
    }

    let swift: TeamLog.DataPlacementRestrictionSatisfyPolicyDetails

    public init(swift: TeamLog.DataPlacementRestrictionSatisfyPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DataPlacementRestrictionSatisfyPolicyType struct
@objc
public class DBXTeamLogDataPlacementRestrictionSatisfyPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DataPlacementRestrictionSatisfyPolicyType(description_: description_)
    }

    let swift: TeamLog.DataPlacementRestrictionSatisfyPolicyType

    public init(swift: TeamLog.DataPlacementRestrictionSatisfyPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested data residency migration for team data.
@objc
public class DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails: NSObject {
    let swift: TeamLog.DataResidencyMigrationRequestSuccessfulDetails

    public init(swift: TeamLog.DataResidencyMigrationRequestSuccessfulDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DataResidencyMigrationRequestSuccessfulType struct
@objc
public class DBXTeamLogDataResidencyMigrationRequestSuccessfulType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DataResidencyMigrationRequestSuccessfulType(description_: description_)
    }

    let swift: TeamLog.DataResidencyMigrationRequestSuccessfulType

    public init(swift: TeamLog.DataResidencyMigrationRequestSuccessfulType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Request for data residency migration for team data has failed.
@objc
public class DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails: NSObject {
    let swift: TeamLog.DataResidencyMigrationRequestUnsuccessfulDetails

    public init(swift: TeamLog.DataResidencyMigrationRequestUnsuccessfulDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DataResidencyMigrationRequestUnsuccessfulType struct
@objc
public class DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DataResidencyMigrationRequestUnsuccessfulType(description_: description_)
    }

    let swift: TeamLog.DataResidencyMigrationRequestUnsuccessfulType

    public init(swift: TeamLog.DataResidencyMigrationRequestUnsuccessfulType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for the default number of days until an externally shared link expires
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicy: NSObject {
    let swift: TeamLog.DefaultLinkExpirationDaysPolicy

    public init(swift: TeamLog.DefaultLinkExpirationDaysPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DefaultLinkExpirationDaysPolicy) -> DBXTeamLogDefaultLinkExpirationDaysPolicy {
        switch swift {
        case .day1:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay1()
        case .day180:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay180()
        case .day3:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay3()
        case .day30:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay30()
        case .day7:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay7()
        case .day90:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyDay90()
        case .none:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyNone()
        case .year1:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyYear1()
        case .other:
            return DBXTeamLogDefaultLinkExpirationDaysPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDay1: DBXTeamLogDefaultLinkExpirationDaysPolicyDay1? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay1
    }

    @objc
    public var asDay180: DBXTeamLogDefaultLinkExpirationDaysPolicyDay180? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay180
    }

    @objc
    public var asDay3: DBXTeamLogDefaultLinkExpirationDaysPolicyDay3? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay3
    }

    @objc
    public var asDay30: DBXTeamLogDefaultLinkExpirationDaysPolicyDay30? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay30
    }

    @objc
    public var asDay7: DBXTeamLogDefaultLinkExpirationDaysPolicyDay7? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay7
    }

    @objc
    public var asDay90: DBXTeamLogDefaultLinkExpirationDaysPolicyDay90? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyDay90
    }

    @objc
    public var asNone: DBXTeamLogDefaultLinkExpirationDaysPolicyNone? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyNone
    }

    @objc
    public var asYear1: DBXTeamLogDefaultLinkExpirationDaysPolicyYear1? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyYear1
    }

    @objc
    public var asOther: DBXTeamLogDefaultLinkExpirationDaysPolicyOther? {
        self as? DBXTeamLogDefaultLinkExpirationDaysPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay1: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day1
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay180: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day180
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay3: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day3
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay30: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day30
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay7: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day7
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyDay90: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.day90
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyNone: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.none
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyYear1: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.year1
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDefaultLinkExpirationDaysPolicyOther: DBXTeamLogDefaultLinkExpirationDaysPolicy {
    @objc
    public init() {
        let swift = TeamLog.DefaultLinkExpirationDaysPolicy.other
        super.init(swift: swift)
    }
}

/// Deleted team invite link.
@objc
public class DBXTeamLogDeleteTeamInviteLinkDetails: NSObject {
    /// The invite link url that was deleted.
    @objc
    public var linkUrl: String { swift.linkUrl }

    @objc
    public init(linkUrl: String) {
        self.swift = TeamLog.DeleteTeamInviteLinkDetails(linkUrl: linkUrl)
    }

    let swift: TeamLog.DeleteTeamInviteLinkDetails

    public init(swift: TeamLog.DeleteTeamInviteLinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeleteTeamInviteLinkType struct
@objc
public class DBXTeamLogDeleteTeamInviteLinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeleteTeamInviteLinkType(description_: description_)
    }

    let swift: TeamLog.DeleteTeamInviteLinkType

    public init(swift: TeamLog.DeleteTeamInviteLinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Device's session logged information.
@objc
public class DBXTeamLogDeviceSessionLogInfo: NSObject {
    /// The IP address of the last activity from this session.
    @objc
    public var ipAddress: String? { swift.ipAddress }
    /// The time this session was created.
    @objc
    public var created: Date? { swift.created }
    /// The time of the last activity from this session.
    @objc
    public var updated: Date? { swift.updated }

    @objc
    public init(ipAddress: String?, created: Date?, updated: Date?) {
        self.swift = TeamLog.DeviceSessionLogInfo(ipAddress: ipAddress, created: created, updated: updated)
    }

    let swift: TeamLog.DeviceSessionLogInfo

    public init(swift: TeamLog.DeviceSessionLogInfo) {
        self.swift = swift
    }

    public static func wrapPreservingSubtypes(swift: TeamLog.DeviceSessionLogInfo) -> DBXTeamLogDeviceSessionLogInfo {
        switch swift {
        case let desktopDeviceSessionLogInfo as TeamLog.DesktopDeviceSessionLogInfo:
            return DBXTeamLogDesktopDeviceSessionLogInfo(swift: desktopDeviceSessionLogInfo)
        case let mobileDeviceSessionLogInfo as TeamLog.MobileDeviceSessionLogInfo:
            return DBXTeamLogMobileDeviceSessionLogInfo(swift: mobileDeviceSessionLogInfo)
        case let webDeviceSessionLogInfo as TeamLog.WebDeviceSessionLogInfo:
            return DBXTeamLogWebDeviceSessionLogInfo(swift: webDeviceSessionLogInfo)
        case let legacyDeviceSessionLogInfo as TeamLog.LegacyDeviceSessionLogInfo:
            return DBXTeamLogLegacyDeviceSessionLogInfo(swift: legacyDeviceSessionLogInfo)
        default:
            return DBXTeamLogDeviceSessionLogInfo(swift: swift)
        }
    }

    @objc
    public override var description: String { swift.description }
}

/// Information about linked Dropbox desktop client sessions
@objc
public class DBXTeamLogDesktopDeviceSessionLogInfo: DBXTeamLogDeviceSessionLogInfo {
    /// Desktop session unique id.
    @objc
    public var sessionInfo: DBXTeamLogDesktopSessionLogInfo? { guard let swift = subSwift.sessionInfo else { return nil }
        return DBXTeamLogDesktopSessionLogInfo(swift: swift)
    }

    /// Name of the hosting desktop.
    @objc
    public var hostName: String { subSwift.hostName }
    /// The Dropbox desktop client type.
    @objc
    public var clientType: DBXTeamDesktopPlatform { DBXTeamDesktopPlatform(swift: subSwift.clientType) }
    /// The Dropbox client version.
    @objc
    public var clientVersion: String? { subSwift.clientVersion }
    /// Information on the hosting platform.
    @objc
    public var platform: String { subSwift.platform }
    /// Whether itu2019s possible to delete all of the account files upon unlinking.
    @objc
    public var isDeleteOnUnlinkSupported: NSNumber { subSwift.isDeleteOnUnlinkSupported as NSNumber }

    @objc
    public init(
        hostName: String,
        clientType: DBXTeamDesktopPlatform,
        platform: String,
        isDeleteOnUnlinkSupported: NSNumber,
        ipAddress: String?,
        created: Date?,
        updated: Date?,
        sessionInfo: DBXTeamLogDesktopSessionLogInfo?,
        clientVersion: String?
    ) {
        let swift = TeamLog.DesktopDeviceSessionLogInfo(
            hostName: hostName,
            clientType: clientType.swift,
            platform: platform,
            isDeleteOnUnlinkSupported: isDeleteOnUnlinkSupported.boolValue,
            ipAddress: ipAddress,
            created: created,
            updated: updated,
            sessionInfo: sessionInfo?.subSwift,
            clientVersion: clientVersion
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.DesktopDeviceSessionLogInfo

    public init(swift: TeamLog.DesktopDeviceSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Session's logged information.
@objc
public class DBXTeamLogSessionLogInfo: NSObject {
    /// Session ID.
    @objc
    public var sessionId: String? { swift.sessionId }

    @objc
    public init(sessionId: String?) {
        self.swift = TeamLog.SessionLogInfo(sessionId: sessionId)
    }

    let swift: TeamLog.SessionLogInfo

    public init(swift: TeamLog.SessionLogInfo) {
        self.swift = swift
    }

    public static func wrapPreservingSubtypes(swift: TeamLog.SessionLogInfo) -> DBXTeamLogSessionLogInfo {
        switch swift {
        case let webSessionLogInfo as TeamLog.WebSessionLogInfo:
            return DBXTeamLogWebSessionLogInfo(swift: webSessionLogInfo)
        case let desktopSessionLogInfo as TeamLog.DesktopSessionLogInfo:
            return DBXTeamLogDesktopSessionLogInfo(swift: desktopSessionLogInfo)
        case let mobileSessionLogInfo as TeamLog.MobileSessionLogInfo:
            return DBXTeamLogMobileSessionLogInfo(swift: mobileSessionLogInfo)
        default:
            return DBXTeamLogSessionLogInfo(swift: swift)
        }
    }

    @objc
    public override var description: String { swift.description }
}

/// Desktop session.
@objc
public class DBXTeamLogDesktopSessionLogInfo: DBXTeamLogSessionLogInfo {
    let subSwift: TeamLog.DesktopSessionLogInfo

    public init(swift: TeamLog.DesktopSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Added members to device approvals exception list.
@objc
public class DBXTeamLogDeviceApprovalsAddExceptionDetails: NSObject {
    let swift: TeamLog.DeviceApprovalsAddExceptionDetails

    public init(swift: TeamLog.DeviceApprovalsAddExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsAddExceptionType struct
@objc
public class DBXTeamLogDeviceApprovalsAddExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsAddExceptionType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsAddExceptionType

    public init(swift: TeamLog.DeviceApprovalsAddExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set/removed limit on number of computers member can link to team Dropbox account.
@objc
public class DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails: NSObject {
    /// New desktop device approvals policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamLogDeviceApprovalsPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogDeviceApprovalsPolicy(swift: swift)
    }

    /// Previous desktop device approvals policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogDeviceApprovalsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogDeviceApprovalsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogDeviceApprovalsPolicy?, previousValue: DBXTeamLogDeviceApprovalsPolicy?) {
        self.swift = TeamLog.DeviceApprovalsChangeDesktopPolicyDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.DeviceApprovalsChangeDesktopPolicyDetails

    public init(swift: TeamLog.DeviceApprovalsChangeDesktopPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsChangeDesktopPolicyType struct
@objc
public class DBXTeamLogDeviceApprovalsChangeDesktopPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsChangeDesktopPolicyType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsChangeDesktopPolicyType

    public init(swift: TeamLog.DeviceApprovalsChangeDesktopPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set/removed limit on number of mobile devices member can link to team Dropbox account.
@objc
public class DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails: NSObject {
    /// New mobile device approvals policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamLogDeviceApprovalsPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogDeviceApprovalsPolicy(swift: swift)
    }

    /// Previous mobile device approvals policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogDeviceApprovalsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogDeviceApprovalsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogDeviceApprovalsPolicy?, previousValue: DBXTeamLogDeviceApprovalsPolicy?) {
        self.swift = TeamLog.DeviceApprovalsChangeMobilePolicyDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.DeviceApprovalsChangeMobilePolicyDetails

    public init(swift: TeamLog.DeviceApprovalsChangeMobilePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsChangeMobilePolicyType struct
@objc
public class DBXTeamLogDeviceApprovalsChangeMobilePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsChangeMobilePolicyType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsChangeMobilePolicyType

    public init(swift: TeamLog.DeviceApprovalsChangeMobilePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed device approvals setting when member is over limit.
@objc
public class DBXTeamLogDeviceApprovalsChangeOverageActionDetails: NSObject {
    /// New over the limits policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamPoliciesRolloutMethod? { guard let swift = swift.newValue else { return nil }
        return DBXTeamPoliciesRolloutMethod(swift: swift)
    }

    /// Previous over the limit policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesRolloutMethod? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesRolloutMethod(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesRolloutMethod?, previousValue: DBXTeamPoliciesRolloutMethod?) {
        self.swift = TeamLog.DeviceApprovalsChangeOverageActionDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.DeviceApprovalsChangeOverageActionDetails

    public init(swift: TeamLog.DeviceApprovalsChangeOverageActionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsChangeOverageActionType struct
@objc
public class DBXTeamLogDeviceApprovalsChangeOverageActionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsChangeOverageActionType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsChangeOverageActionType

    public init(swift: TeamLog.DeviceApprovalsChangeOverageActionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed device approvals setting when member unlinks approved device.
@objc
public class DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails: NSObject {
    /// New device unlink policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamLogDeviceUnlinkPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogDeviceUnlinkPolicy(swift: swift)
    }

    /// Previous device unlink policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogDeviceUnlinkPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogDeviceUnlinkPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogDeviceUnlinkPolicy?, previousValue: DBXTeamLogDeviceUnlinkPolicy?) {
        self.swift = TeamLog.DeviceApprovalsChangeUnlinkActionDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.DeviceApprovalsChangeUnlinkActionDetails

    public init(swift: TeamLog.DeviceApprovalsChangeUnlinkActionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsChangeUnlinkActionType struct
@objc
public class DBXTeamLogDeviceApprovalsChangeUnlinkActionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsChangeUnlinkActionType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsChangeUnlinkActionType

    public init(swift: TeamLog.DeviceApprovalsChangeUnlinkActionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsPolicy union
@objc
public class DBXTeamLogDeviceApprovalsPolicy: NSObject {
    let swift: TeamLog.DeviceApprovalsPolicy

    public init(swift: TeamLog.DeviceApprovalsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DeviceApprovalsPolicy) -> DBXTeamLogDeviceApprovalsPolicy {
        switch swift {
        case .limited:
            return DBXTeamLogDeviceApprovalsPolicyLimited()
        case .unlimited:
            return DBXTeamLogDeviceApprovalsPolicyUnlimited()
        case .other:
            return DBXTeamLogDeviceApprovalsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asLimited: DBXTeamLogDeviceApprovalsPolicyLimited? {
        self as? DBXTeamLogDeviceApprovalsPolicyLimited
    }

    @objc
    public var asUnlimited: DBXTeamLogDeviceApprovalsPolicyUnlimited? {
        self as? DBXTeamLogDeviceApprovalsPolicyUnlimited
    }

    @objc
    public var asOther: DBXTeamLogDeviceApprovalsPolicyOther? {
        self as? DBXTeamLogDeviceApprovalsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceApprovalsPolicyLimited: DBXTeamLogDeviceApprovalsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceApprovalsPolicy.limited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceApprovalsPolicyUnlimited: DBXTeamLogDeviceApprovalsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceApprovalsPolicy.unlimited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceApprovalsPolicyOther: DBXTeamLogDeviceApprovalsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceApprovalsPolicy.other
        super.init(swift: swift)
    }
}

/// Removed members from device approvals exception list.
@objc
public class DBXTeamLogDeviceApprovalsRemoveExceptionDetails: NSObject {
    let swift: TeamLog.DeviceApprovalsRemoveExceptionDetails

    public init(swift: TeamLog.DeviceApprovalsRemoveExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceApprovalsRemoveExceptionType struct
@objc
public class DBXTeamLogDeviceApprovalsRemoveExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceApprovalsRemoveExceptionType(description_: description_)
    }

    let swift: TeamLog.DeviceApprovalsRemoveExceptionType

    public init(swift: TeamLog.DeviceApprovalsRemoveExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed IP address associated with active desktop session.
@objc
public class DBXTeamLogDeviceChangeIpDesktopDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo {
        DBXTeamLogDeviceSessionLogInfo.wrapPreservingSubtypes(swift: swift.deviceSessionInfo)
    }

    @objc
    public init(deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo) {
        self.swift = TeamLog.DeviceChangeIpDesktopDetails(deviceSessionInfo: deviceSessionInfo.swift)
    }

    let swift: TeamLog.DeviceChangeIpDesktopDetails

    public init(swift: TeamLog.DeviceChangeIpDesktopDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceChangeIpDesktopType struct
@objc
public class DBXTeamLogDeviceChangeIpDesktopType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceChangeIpDesktopType(description_: description_)
    }

    let swift: TeamLog.DeviceChangeIpDesktopType

    public init(swift: TeamLog.DeviceChangeIpDesktopType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed IP address associated with active mobile session.
@objc
public class DBXTeamLogDeviceChangeIpMobileDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo? { guard let swift = swift.deviceSessionInfo else { return nil }
        return DBXTeamLogDeviceSessionLogInfo(swift: swift)
    }

    @objc
    public init(deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo?) {
        self.swift = TeamLog.DeviceChangeIpMobileDetails(deviceSessionInfo: deviceSessionInfo?.swift)
    }

    let swift: TeamLog.DeviceChangeIpMobileDetails

    public init(swift: TeamLog.DeviceChangeIpMobileDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceChangeIpMobileType struct
@objc
public class DBXTeamLogDeviceChangeIpMobileType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceChangeIpMobileType(description_: description_)
    }

    let swift: TeamLog.DeviceChangeIpMobileType

    public init(swift: TeamLog.DeviceChangeIpMobileType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed IP address associated with active web session.
@objc
public class DBXTeamLogDeviceChangeIpWebDetails: NSObject {
    /// Web browser name.
    @objc
    public var userAgent: String { swift.userAgent }

    @objc
    public init(userAgent: String) {
        self.swift = TeamLog.DeviceChangeIpWebDetails(userAgent: userAgent)
    }

    let swift: TeamLog.DeviceChangeIpWebDetails

    public init(swift: TeamLog.DeviceChangeIpWebDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceChangeIpWebType struct
@objc
public class DBXTeamLogDeviceChangeIpWebType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceChangeIpWebType(description_: description_)
    }

    let swift: TeamLog.DeviceChangeIpWebType

    public init(swift: TeamLog.DeviceChangeIpWebType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to delete all files from unlinked device.
@objc
public class DBXTeamLogDeviceDeleteOnUnlinkFailDetails: NSObject {
    /// Session unique id.
    @objc
    public var sessionInfo: DBXTeamLogSessionLogInfo? { guard let swift = swift.sessionInfo else { return nil }
        return DBXTeamLogSessionLogInfo(swift: swift)
    }

    /// The device name. Might be missing due to historical data gap.
    @objc
    public var displayName: String? { swift.displayName }
    /// The number of times that remote file deletion failed.
    @objc
    public var numFailures: NSNumber { swift.numFailures as NSNumber }

    @objc
    public init(numFailures: NSNumber, sessionInfo: DBXTeamLogSessionLogInfo?, displayName: String?) {
        self.swift = TeamLog.DeviceDeleteOnUnlinkFailDetails(numFailures: numFailures.int64Value, sessionInfo: sessionInfo?.swift, displayName: displayName)
    }

    let swift: TeamLog.DeviceDeleteOnUnlinkFailDetails

    public init(swift: TeamLog.DeviceDeleteOnUnlinkFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceDeleteOnUnlinkFailType struct
@objc
public class DBXTeamLogDeviceDeleteOnUnlinkFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceDeleteOnUnlinkFailType(description_: description_)
    }

    let swift: TeamLog.DeviceDeleteOnUnlinkFailType

    public init(swift: TeamLog.DeviceDeleteOnUnlinkFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted all files from unlinked device.
@objc
public class DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails: NSObject {
    /// Session unique id.
    @objc
    public var sessionInfo: DBXTeamLogSessionLogInfo? { guard let swift = swift.sessionInfo else { return nil }
        return DBXTeamLogSessionLogInfo(swift: swift)
    }

    /// The device name. Might be missing due to historical data gap.
    @objc
    public var displayName: String? { swift.displayName }

    @objc
    public init(sessionInfo: DBXTeamLogSessionLogInfo?, displayName: String?) {
        self.swift = TeamLog.DeviceDeleteOnUnlinkSuccessDetails(sessionInfo: sessionInfo?.swift, displayName: displayName)
    }

    let swift: TeamLog.DeviceDeleteOnUnlinkSuccessDetails

    public init(swift: TeamLog.DeviceDeleteOnUnlinkSuccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceDeleteOnUnlinkSuccessType struct
@objc
public class DBXTeamLogDeviceDeleteOnUnlinkSuccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceDeleteOnUnlinkSuccessType(description_: description_)
    }

    let swift: TeamLog.DeviceDeleteOnUnlinkSuccessType

    public init(swift: TeamLog.DeviceDeleteOnUnlinkSuccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to link device.
@objc
public class DBXTeamLogDeviceLinkFailDetails: NSObject {
    /// IP address. Might be missing due to historical data gap.
    @objc
    public var ipAddress: String? { swift.ipAddress }
    /// A description of the device used while user approval blocked.
    @objc
    public var deviceType: DBXTeamLogDeviceType { DBXTeamLogDeviceType(swift: swift.deviceType) }

    @objc
    public init(deviceType: DBXTeamLogDeviceType, ipAddress: String?) {
        self.swift = TeamLog.DeviceLinkFailDetails(deviceType: deviceType.swift, ipAddress: ipAddress)
    }

    let swift: TeamLog.DeviceLinkFailDetails

    public init(swift: TeamLog.DeviceLinkFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceLinkFailType struct
@objc
public class DBXTeamLogDeviceLinkFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceLinkFailType(description_: description_)
    }

    let swift: TeamLog.DeviceLinkFailType

    public init(swift: TeamLog.DeviceLinkFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Linked device.
@objc
public class DBXTeamLogDeviceLinkSuccessDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo? { guard let swift = swift.deviceSessionInfo else { return nil }
        return DBXTeamLogDeviceSessionLogInfo(swift: swift)
    }

    @objc
    public init(deviceSessionInfo: DBXTeamLogDeviceSessionLogInfo?) {
        self.swift = TeamLog.DeviceLinkSuccessDetails(deviceSessionInfo: deviceSessionInfo?.swift)
    }

    let swift: TeamLog.DeviceLinkSuccessDetails

    public init(swift: TeamLog.DeviceLinkSuccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceLinkSuccessType struct
@objc
public class DBXTeamLogDeviceLinkSuccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceLinkSuccessType(description_: description_)
    }

    let swift: TeamLog.DeviceLinkSuccessType

    public init(swift: TeamLog.DeviceLinkSuccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disabled device management.
@objc
public class DBXTeamLogDeviceManagementDisabledDetails: NSObject {
    let swift: TeamLog.DeviceManagementDisabledDetails

    public init(swift: TeamLog.DeviceManagementDisabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceManagementDisabledType struct
@objc
public class DBXTeamLogDeviceManagementDisabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceManagementDisabledType(description_: description_)
    }

    let swift: TeamLog.DeviceManagementDisabledType

    public init(swift: TeamLog.DeviceManagementDisabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled device management.
@objc
public class DBXTeamLogDeviceManagementEnabledDetails: NSObject {
    let swift: TeamLog.DeviceManagementEnabledDetails

    public init(swift: TeamLog.DeviceManagementEnabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceManagementEnabledType struct
@objc
public class DBXTeamLogDeviceManagementEnabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceManagementEnabledType(description_: description_)
    }

    let swift: TeamLog.DeviceManagementEnabledType

    public init(swift: TeamLog.DeviceManagementEnabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled backup for computer.
@objc
public class DBXTeamLogDeviceSyncBackupStatusChangedDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo { DBXTeamLogDesktopDeviceSessionLogInfo(swift: swift.desktopDeviceSessionInfo) }
    /// Previous status of computer backup on the device.
    @objc
    public var previousValue: DBXTeamLogBackupStatus { DBXTeamLogBackupStatus(swift: swift.previousValue) }
    /// Next status of computer backup on the device.
    @objc
    public var newValue: DBXTeamLogBackupStatus { DBXTeamLogBackupStatus(swift: swift.newValue) }

    @objc
    public init(desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo, previousValue: DBXTeamLogBackupStatus, newValue: DBXTeamLogBackupStatus) {
        self.swift = TeamLog.DeviceSyncBackupStatusChangedDetails(
            desktopDeviceSessionInfo: desktopDeviceSessionInfo.subSwift,
            previousValue: previousValue.swift,
            newValue: newValue.swift
        )
    }

    let swift: TeamLog.DeviceSyncBackupStatusChangedDetails

    public init(swift: TeamLog.DeviceSyncBackupStatusChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceSyncBackupStatusChangedType struct
@objc
public class DBXTeamLogDeviceSyncBackupStatusChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceSyncBackupStatusChangedType(description_: description_)
    }

    let swift: TeamLog.DeviceSyncBackupStatusChangedType

    public init(swift: TeamLog.DeviceSyncBackupStatusChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceType union
@objc
public class DBXTeamLogDeviceType: NSObject {
    let swift: TeamLog.DeviceType

    public init(swift: TeamLog.DeviceType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DeviceType) -> DBXTeamLogDeviceType {
        switch swift {
        case .desktop:
            return DBXTeamLogDeviceTypeDesktop()
        case .mobile:
            return DBXTeamLogDeviceTypeMobile()
        case .other:
            return DBXTeamLogDeviceTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDesktop: DBXTeamLogDeviceTypeDesktop? {
        self as? DBXTeamLogDeviceTypeDesktop
    }

    @objc
    public var asMobile: DBXTeamLogDeviceTypeMobile? {
        self as? DBXTeamLogDeviceTypeMobile
    }

    @objc
    public var asOther: DBXTeamLogDeviceTypeOther? {
        self as? DBXTeamLogDeviceTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceTypeDesktop: DBXTeamLogDeviceType {
    @objc
    public init() {
        let swift = TeamLog.DeviceType.desktop
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceTypeMobile: DBXTeamLogDeviceType {
    @objc
    public init() {
        let swift = TeamLog.DeviceType.mobile
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceTypeOther: DBXTeamLogDeviceType {
    @objc
    public init() {
        let swift = TeamLog.DeviceType.other
        super.init(swift: swift)
    }
}

/// Disconnected device.
@objc
public class DBXTeamLogDeviceUnlinkDetails: NSObject {
    /// Session unique id.
    @objc
    public var sessionInfo: DBXTeamLogSessionLogInfo? { guard let swift = swift.sessionInfo else { return nil }
        return DBXTeamLogSessionLogInfo(swift: swift)
    }

    /// The device name. Might be missing due to historical data gap.
    @objc
    public var displayName: String? { swift.displayName }
    /// True if the user requested to delete data after device unlink, false otherwise.
    @objc
    public var deleteData: NSNumber { swift.deleteData as NSNumber }

    @objc
    public init(deleteData: NSNumber, sessionInfo: DBXTeamLogSessionLogInfo?, displayName: String?) {
        self.swift = TeamLog.DeviceUnlinkDetails(deleteData: deleteData.boolValue, sessionInfo: sessionInfo?.swift, displayName: displayName)
    }

    let swift: TeamLog.DeviceUnlinkDetails

    public init(swift: TeamLog.DeviceUnlinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DeviceUnlinkPolicy union
@objc
public class DBXTeamLogDeviceUnlinkPolicy: NSObject {
    let swift: TeamLog.DeviceUnlinkPolicy

    public init(swift: TeamLog.DeviceUnlinkPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DeviceUnlinkPolicy) -> DBXTeamLogDeviceUnlinkPolicy {
        switch swift {
        case .keep:
            return DBXTeamLogDeviceUnlinkPolicyKeep()
        case .remove:
            return DBXTeamLogDeviceUnlinkPolicyRemove()
        case .other:
            return DBXTeamLogDeviceUnlinkPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asKeep: DBXTeamLogDeviceUnlinkPolicyKeep? {
        self as? DBXTeamLogDeviceUnlinkPolicyKeep
    }

    @objc
    public var asRemove: DBXTeamLogDeviceUnlinkPolicyRemove? {
        self as? DBXTeamLogDeviceUnlinkPolicyRemove
    }

    @objc
    public var asOther: DBXTeamLogDeviceUnlinkPolicyOther? {
        self as? DBXTeamLogDeviceUnlinkPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceUnlinkPolicyKeep: DBXTeamLogDeviceUnlinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceUnlinkPolicy.keep
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceUnlinkPolicyRemove: DBXTeamLogDeviceUnlinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceUnlinkPolicy.remove
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDeviceUnlinkPolicyOther: DBXTeamLogDeviceUnlinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.DeviceUnlinkPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible DeviceUnlinkType struct
@objc
public class DBXTeamLogDeviceUnlinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DeviceUnlinkType(description_: description_)
    }

    let swift: TeamLog.DeviceUnlinkType

    public init(swift: TeamLog.DeviceUnlinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members to directory restrictions list.
@objc
public class DBXTeamLogDirectoryRestrictionsAddMembersDetails: NSObject {
    let swift: TeamLog.DirectoryRestrictionsAddMembersDetails

    public init(swift: TeamLog.DirectoryRestrictionsAddMembersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DirectoryRestrictionsAddMembersType struct
@objc
public class DBXTeamLogDirectoryRestrictionsAddMembersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DirectoryRestrictionsAddMembersType(description_: description_)
    }

    let swift: TeamLog.DirectoryRestrictionsAddMembersType

    public init(swift: TeamLog.DirectoryRestrictionsAddMembersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed members from directory restrictions list.
@objc
public class DBXTeamLogDirectoryRestrictionsRemoveMembersDetails: NSObject {
    let swift: TeamLog.DirectoryRestrictionsRemoveMembersDetails

    public init(swift: TeamLog.DirectoryRestrictionsRemoveMembersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DirectoryRestrictionsRemoveMembersType struct
@objc
public class DBXTeamLogDirectoryRestrictionsRemoveMembersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DirectoryRestrictionsRemoveMembersType(description_: description_)
    }

    let swift: TeamLog.DirectoryRestrictionsRemoveMembersType

    public init(swift: TeamLog.DirectoryRestrictionsRemoveMembersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disabled domain invites.
@objc
public class DBXTeamLogDisabledDomainInvitesDetails: NSObject {
    let swift: TeamLog.DisabledDomainInvitesDetails

    public init(swift: TeamLog.DisabledDomainInvitesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DisabledDomainInvitesType struct
@objc
public class DBXTeamLogDisabledDomainInvitesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DisabledDomainInvitesType(description_: description_)
    }

    let swift: TeamLog.DisabledDomainInvitesType

    public init(swift: TeamLog.DisabledDomainInvitesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DispositionActionType union
@objc
public class DBXTeamLogDispositionActionType: NSObject {
    let swift: TeamLog.DispositionActionType

    public init(swift: TeamLog.DispositionActionType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DispositionActionType) -> DBXTeamLogDispositionActionType {
        switch swift {
        case .automaticDelete:
            return DBXTeamLogDispositionActionTypeAutomaticDelete()
        case .automaticPermanentlyDelete:
            return DBXTeamLogDispositionActionTypeAutomaticPermanentlyDelete()
        case .other:
            return DBXTeamLogDispositionActionTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAutomaticDelete: DBXTeamLogDispositionActionTypeAutomaticDelete? {
        self as? DBXTeamLogDispositionActionTypeAutomaticDelete
    }

    @objc
    public var asAutomaticPermanentlyDelete: DBXTeamLogDispositionActionTypeAutomaticPermanentlyDelete? {
        self as? DBXTeamLogDispositionActionTypeAutomaticPermanentlyDelete
    }

    @objc
    public var asOther: DBXTeamLogDispositionActionTypeOther? {
        self as? DBXTeamLogDispositionActionTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDispositionActionTypeAutomaticDelete: DBXTeamLogDispositionActionType {
    @objc
    public init() {
        let swift = TeamLog.DispositionActionType.automaticDelete
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDispositionActionTypeAutomaticPermanentlyDelete: DBXTeamLogDispositionActionType {
    @objc
    public init() {
        let swift = TeamLog.DispositionActionType.automaticPermanentlyDelete
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDispositionActionTypeOther: DBXTeamLogDispositionActionType {
    @objc
    public init() {
        let swift = TeamLog.DispositionActionType.other
        super.init(swift: swift)
    }
}

/// Approved user's request to join team.
@objc
public class DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails: NSObject {
    let swift: TeamLog.DomainInvitesApproveRequestToJoinTeamDetails

    public init(swift: TeamLog.DomainInvitesApproveRequestToJoinTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesApproveRequestToJoinTeamType struct
@objc
public class DBXTeamLogDomainInvitesApproveRequestToJoinTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesApproveRequestToJoinTeamType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesApproveRequestToJoinTeamType

    public init(swift: TeamLog.DomainInvitesApproveRequestToJoinTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Declined user's request to join team.
@objc
public class DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails: NSObject {
    let swift: TeamLog.DomainInvitesDeclineRequestToJoinTeamDetails

    public init(swift: TeamLog.DomainInvitesDeclineRequestToJoinTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesDeclineRequestToJoinTeamType struct
@objc
public class DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesDeclineRequestToJoinTeamType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesDeclineRequestToJoinTeamType

    public init(swift: TeamLog.DomainInvitesDeclineRequestToJoinTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Sent domain invites to existing domain accounts.
@objc
public class DBXTeamLogDomainInvitesEmailExistingUsersDetails: NSObject {
    /// Domain names.
    @objc
    public var domainName: String { swift.domainName }
    /// Number of recipients.
    @objc
    public var numRecipients: NSNumber { swift.numRecipients as NSNumber }

    @objc
    public init(domainName: String, numRecipients: NSNumber) {
        self.swift = TeamLog.DomainInvitesEmailExistingUsersDetails(domainName: domainName, numRecipients: numRecipients.uint64Value)
    }

    let swift: TeamLog.DomainInvitesEmailExistingUsersDetails

    public init(swift: TeamLog.DomainInvitesEmailExistingUsersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesEmailExistingUsersType struct
@objc
public class DBXTeamLogDomainInvitesEmailExistingUsersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesEmailExistingUsersType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesEmailExistingUsersType

    public init(swift: TeamLog.DomainInvitesEmailExistingUsersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested to join team.
@objc
public class DBXTeamLogDomainInvitesRequestToJoinTeamDetails: NSObject {
    let swift: TeamLog.DomainInvitesRequestToJoinTeamDetails

    public init(swift: TeamLog.DomainInvitesRequestToJoinTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesRequestToJoinTeamType struct
@objc
public class DBXTeamLogDomainInvitesRequestToJoinTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesRequestToJoinTeamType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesRequestToJoinTeamType

    public init(swift: TeamLog.DomainInvitesRequestToJoinTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disabled "Automatically invite new users".
@objc
public class DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails: NSObject {
    let swift: TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetails

    public init(swift: TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesSetInviteNewUserPrefToNoType struct
@objc
public class DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesSetInviteNewUserPrefToNoType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesSetInviteNewUserPrefToNoType

    public init(swift: TeamLog.DomainInvitesSetInviteNewUserPrefToNoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled "Automatically invite new users".
@objc
public class DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails: NSObject {
    let swift: TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetails

    public init(swift: TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainInvitesSetInviteNewUserPrefToYesType struct
@objc
public class DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainInvitesSetInviteNewUserPrefToYesType(description_: description_)
    }

    let swift: TeamLog.DomainInvitesSetInviteNewUserPrefToYesType

    public init(swift: TeamLog.DomainInvitesSetInviteNewUserPrefToYesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to verify team domain.
@objc
public class DBXTeamLogDomainVerificationAddDomainFailDetails: NSObject {
    /// Domain name.
    @objc
    public var domainName: String { swift.domainName }
    /// Domain name verification method. Might be missing due to historical data gap.
    @objc
    public var verificationMethod: String? { swift.verificationMethod }

    @objc
    public init(domainName: String, verificationMethod: String?) {
        self.swift = TeamLog.DomainVerificationAddDomainFailDetails(domainName: domainName, verificationMethod: verificationMethod)
    }

    let swift: TeamLog.DomainVerificationAddDomainFailDetails

    public init(swift: TeamLog.DomainVerificationAddDomainFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainVerificationAddDomainFailType struct
@objc
public class DBXTeamLogDomainVerificationAddDomainFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainVerificationAddDomainFailType(description_: description_)
    }

    let swift: TeamLog.DomainVerificationAddDomainFailType

    public init(swift: TeamLog.DomainVerificationAddDomainFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Verified team domain.
@objc
public class DBXTeamLogDomainVerificationAddDomainSuccessDetails: NSObject {
    /// Domain names.
    @objc
    public var domainNames: [String] { swift.domainNames }
    /// Domain name verification method. Might be missing due to historical data gap.
    @objc
    public var verificationMethod: String? { swift.verificationMethod }

    @objc
    public init(domainNames: [String], verificationMethod: String?) {
        self.swift = TeamLog.DomainVerificationAddDomainSuccessDetails(domainNames: domainNames, verificationMethod: verificationMethod)
    }

    let swift: TeamLog.DomainVerificationAddDomainSuccessDetails

    public init(swift: TeamLog.DomainVerificationAddDomainSuccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainVerificationAddDomainSuccessType struct
@objc
public class DBXTeamLogDomainVerificationAddDomainSuccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainVerificationAddDomainSuccessType(description_: description_)
    }

    let swift: TeamLog.DomainVerificationAddDomainSuccessType

    public init(swift: TeamLog.DomainVerificationAddDomainSuccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed domain from list of verified team domains.
@objc
public class DBXTeamLogDomainVerificationRemoveDomainDetails: NSObject {
    /// Domain names.
    @objc
    public var domainNames: [String] { swift.domainNames }

    @objc
    public init(domainNames: [String]) {
        self.swift = TeamLog.DomainVerificationRemoveDomainDetails(domainNames: domainNames)
    }

    let swift: TeamLog.DomainVerificationRemoveDomainDetails

    public init(swift: TeamLog.DomainVerificationRemoveDomainDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DomainVerificationRemoveDomainType struct
@objc
public class DBXTeamLogDomainVerificationRemoveDomainType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DomainVerificationRemoveDomainType(description_: description_)
    }

    let swift: TeamLog.DomainVerificationRemoveDomainType

    public init(swift: TeamLog.DomainVerificationRemoveDomainType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared content downloads policy
@objc
public class DBXTeamLogDownloadPolicyType: NSObject {
    let swift: TeamLog.DownloadPolicyType

    public init(swift: TeamLog.DownloadPolicyType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DownloadPolicyType) -> DBXTeamLogDownloadPolicyType {
        switch swift {
        case .allow:
            return DBXTeamLogDownloadPolicyTypeAllow()
        case .disallow:
            return DBXTeamLogDownloadPolicyTypeDisallow()
        case .other:
            return DBXTeamLogDownloadPolicyTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllow: DBXTeamLogDownloadPolicyTypeAllow? {
        self as? DBXTeamLogDownloadPolicyTypeAllow
    }

    @objc
    public var asDisallow: DBXTeamLogDownloadPolicyTypeDisallow? {
        self as? DBXTeamLogDownloadPolicyTypeDisallow
    }

    @objc
    public var asOther: DBXTeamLogDownloadPolicyTypeOther? {
        self as? DBXTeamLogDownloadPolicyTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDownloadPolicyTypeAllow: DBXTeamLogDownloadPolicyType {
    @objc
    public init() {
        let swift = TeamLog.DownloadPolicyType.allow
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDownloadPolicyTypeDisallow: DBXTeamLogDownloadPolicyType {
    @objc
    public init() {
        let swift = TeamLog.DownloadPolicyType.disallow
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDownloadPolicyTypeOther: DBXTeamLogDownloadPolicyType {
    @objc
    public init() {
        let swift = TeamLog.DownloadPolicyType.other
        super.init(swift: swift)
    }
}

/// Exported passwords.
@objc
public class DBXTeamLogDropboxPasswordsExportedDetails: NSObject {
    /// The platform the device runs export.
    @objc
    public var platform: String { swift.platform }

    @objc
    public init(platform: String) {
        self.swift = TeamLog.DropboxPasswordsExportedDetails(platform: platform)
    }

    let swift: TeamLog.DropboxPasswordsExportedDetails

    public init(swift: TeamLog.DropboxPasswordsExportedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DropboxPasswordsExportedType struct
@objc
public class DBXTeamLogDropboxPasswordsExportedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DropboxPasswordsExportedType(description_: description_)
    }

    let swift: TeamLog.DropboxPasswordsExportedType

    public init(swift: TeamLog.DropboxPasswordsExportedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enrolled new Dropbox Passwords device.
@objc
public class DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails: NSObject {
    /// Whether it's a first device enrolled.
    @objc
    public var isFirstDevice: NSNumber { swift.isFirstDevice as NSNumber }
    /// The platform the device is enrolled.
    @objc
    public var platform: String { swift.platform }

    @objc
    public init(isFirstDevice: NSNumber, platform: String) {
        self.swift = TeamLog.DropboxPasswordsNewDeviceEnrolledDetails(isFirstDevice: isFirstDevice.boolValue, platform: platform)
    }

    let swift: TeamLog.DropboxPasswordsNewDeviceEnrolledDetails

    public init(swift: TeamLog.DropboxPasswordsNewDeviceEnrolledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DropboxPasswordsNewDeviceEnrolledType struct
@objc
public class DBXTeamLogDropboxPasswordsNewDeviceEnrolledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DropboxPasswordsNewDeviceEnrolledType(description_: description_)
    }

    let swift: TeamLog.DropboxPasswordsNewDeviceEnrolledType

    public init(swift: TeamLog.DropboxPasswordsNewDeviceEnrolledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether team users can use Dropbox Passwords
@objc
public class DBXTeamLogDropboxPasswordsPolicy: NSObject {
    let swift: TeamLog.DropboxPasswordsPolicy

    public init(swift: TeamLog.DropboxPasswordsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.DropboxPasswordsPolicy) -> DBXTeamLogDropboxPasswordsPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogDropboxPasswordsPolicyDefault_()
        case .disabled:
            return DBXTeamLogDropboxPasswordsPolicyDisabled()
        case .enabled:
            return DBXTeamLogDropboxPasswordsPolicyEnabled()
        case .other:
            return DBXTeamLogDropboxPasswordsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogDropboxPasswordsPolicyDefault_? {
        self as? DBXTeamLogDropboxPasswordsPolicyDefault_
    }

    @objc
    public var asDisabled: DBXTeamLogDropboxPasswordsPolicyDisabled? {
        self as? DBXTeamLogDropboxPasswordsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogDropboxPasswordsPolicyEnabled? {
        self as? DBXTeamLogDropboxPasswordsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogDropboxPasswordsPolicyOther? {
        self as? DBXTeamLogDropboxPasswordsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDropboxPasswordsPolicyDefault_: DBXTeamLogDropboxPasswordsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DropboxPasswordsPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDropboxPasswordsPolicyDisabled: DBXTeamLogDropboxPasswordsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DropboxPasswordsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDropboxPasswordsPolicyEnabled: DBXTeamLogDropboxPasswordsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DropboxPasswordsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogDropboxPasswordsPolicyOther: DBXTeamLogDropboxPasswordsPolicy {
    @objc
    public init() {
        let swift = TeamLog.DropboxPasswordsPolicy.other
        super.init(swift: swift)
    }
}

/// Changed Dropbox Passwords policy for team.
@objc
public class DBXTeamLogDropboxPasswordsPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogDropboxPasswordsPolicy { DBXTeamLogDropboxPasswordsPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogDropboxPasswordsPolicy { DBXTeamLogDropboxPasswordsPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogDropboxPasswordsPolicy, previousValue: DBXTeamLogDropboxPasswordsPolicy) {
        self.swift = TeamLog.DropboxPasswordsPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.DropboxPasswordsPolicyChangedDetails

    public init(swift: TeamLog.DropboxPasswordsPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible DropboxPasswordsPolicyChangedType struct
@objc
public class DBXTeamLogDropboxPasswordsPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.DropboxPasswordsPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.DropboxPasswordsPolicyChangedType

    public init(swift: TeamLog.DropboxPasswordsPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Represents a time duration: unit and amount
@objc
public class DBXTeamLogDurationLogInfo: NSObject {
    /// Time unit.
    @objc
    public var unit: DBXTeamLogTimeUnit { DBXTeamLogTimeUnit(swift: swift.unit) }
    /// Amount of time.
    @objc
    public var amount: NSNumber { swift.amount as NSNumber }

    @objc
    public init(unit: DBXTeamLogTimeUnit, amount: NSNumber) {
        self.swift = TeamLog.DurationLogInfo(unit: unit.swift, amount: amount.uint64Value)
    }

    let swift: TeamLog.DurationLogInfo

    public init(swift: TeamLog.DurationLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether a team can use Email to Dropbox feature
@objc
public class DBXTeamLogEmailIngestPolicy: NSObject {
    let swift: TeamLog.EmailIngestPolicy

    public init(swift: TeamLog.EmailIngestPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EmailIngestPolicy) -> DBXTeamLogEmailIngestPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogEmailIngestPolicyDisabled()
        case .enabled:
            return DBXTeamLogEmailIngestPolicyEnabled()
        case .other:
            return DBXTeamLogEmailIngestPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogEmailIngestPolicyDisabled? {
        self as? DBXTeamLogEmailIngestPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogEmailIngestPolicyEnabled? {
        self as? DBXTeamLogEmailIngestPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogEmailIngestPolicyOther? {
        self as? DBXTeamLogEmailIngestPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEmailIngestPolicyDisabled: DBXTeamLogEmailIngestPolicy {
    @objc
    public init() {
        let swift = TeamLog.EmailIngestPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEmailIngestPolicyEnabled: DBXTeamLogEmailIngestPolicy {
    @objc
    public init() {
        let swift = TeamLog.EmailIngestPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEmailIngestPolicyOther: DBXTeamLogEmailIngestPolicy {
    @objc
    public init() {
        let swift = TeamLog.EmailIngestPolicy.other
        super.init(swift: swift)
    }
}

/// Changed email to Dropbox policy for team.
@objc
public class DBXTeamLogEmailIngestPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogEmailIngestPolicy { DBXTeamLogEmailIngestPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogEmailIngestPolicy { DBXTeamLogEmailIngestPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogEmailIngestPolicy, previousValue: DBXTeamLogEmailIngestPolicy) {
        self.swift = TeamLog.EmailIngestPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.EmailIngestPolicyChangedDetails

    public init(swift: TeamLog.EmailIngestPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmailIngestPolicyChangedType struct
@objc
public class DBXTeamLogEmailIngestPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmailIngestPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.EmailIngestPolicyChangedType

    public init(swift: TeamLog.EmailIngestPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Received files via Email to Dropbox.
@objc
public class DBXTeamLogEmailIngestReceiveFileDetails: NSObject {
    /// Inbox name.
    @objc
    public var inboxName: String { swift.inboxName }
    /// Submitted file names.
    @objc
    public var attachmentNames: [String] { swift.attachmentNames }
    /// Subject of the email.
    @objc
    public var subject: String? { swift.subject }
    /// The name as provided by the submitter.
    @objc
    public var fromName: String? { swift.fromName }
    /// The email as provided by the submitter.
    @objc
    public var fromEmail: String? { swift.fromEmail }

    @objc
    public init(inboxName: String, attachmentNames: [String], subject: String?, fromName: String?, fromEmail: String?) {
        self.swift = TeamLog.EmailIngestReceiveFileDetails(
            inboxName: inboxName,
            attachmentNames: attachmentNames,
            subject: subject,
            fromName: fromName,
            fromEmail: fromEmail
        )
    }

    let swift: TeamLog.EmailIngestReceiveFileDetails

    public init(swift: TeamLog.EmailIngestReceiveFileDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmailIngestReceiveFileType struct
@objc
public class DBXTeamLogEmailIngestReceiveFileType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmailIngestReceiveFileType(description_: description_)
    }

    let swift: TeamLog.EmailIngestReceiveFileType

    public init(swift: TeamLog.EmailIngestReceiveFileType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members to EMM exception list.
@objc
public class DBXTeamLogEmmAddExceptionDetails: NSObject {
    let swift: TeamLog.EmmAddExceptionDetails

    public init(swift: TeamLog.EmmAddExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmAddExceptionType struct
@objc
public class DBXTeamLogEmmAddExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmAddExceptionType(description_: description_)
    }

    let swift: TeamLog.EmmAddExceptionType

    public init(swift: TeamLog.EmmAddExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled enterprise mobility management for members.
@objc
public class DBXTeamLogEmmChangePolicyDetails: NSObject {
    /// New enterprise mobility management policy.
    @objc
    public var newValue: DBXTeamPoliciesEmmState { DBXTeamPoliciesEmmState(swift: swift.newValue) }
    /// Previous enterprise mobility management policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesEmmState? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesEmmState(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesEmmState, previousValue: DBXTeamPoliciesEmmState?) {
        self.swift = TeamLog.EmmChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.EmmChangePolicyDetails

    public init(swift: TeamLog.EmmChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmChangePolicyType struct
@objc
public class DBXTeamLogEmmChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmChangePolicyType(description_: description_)
    }

    let swift: TeamLog.EmmChangePolicyType

    public init(swift: TeamLog.EmmChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created EMM-excluded users report.
@objc
public class DBXTeamLogEmmCreateExceptionsReportDetails: NSObject {
    let swift: TeamLog.EmmCreateExceptionsReportDetails

    public init(swift: TeamLog.EmmCreateExceptionsReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmCreateExceptionsReportType struct
@objc
public class DBXTeamLogEmmCreateExceptionsReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmCreateExceptionsReportType(description_: description_)
    }

    let swift: TeamLog.EmmCreateExceptionsReportType

    public init(swift: TeamLog.EmmCreateExceptionsReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created EMM mobile app usage report.
@objc
public class DBXTeamLogEmmCreateUsageReportDetails: NSObject {
    let swift: TeamLog.EmmCreateUsageReportDetails

    public init(swift: TeamLog.EmmCreateUsageReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmCreateUsageReportType struct
@objc
public class DBXTeamLogEmmCreateUsageReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmCreateUsageReportType(description_: description_)
    }

    let swift: TeamLog.EmmCreateUsageReportType

    public init(swift: TeamLog.EmmCreateUsageReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to sign in via EMM.
@objc
public class DBXTeamLogEmmErrorDetails: NSObject {
    /// Error details.
    @objc
    public var errorDetails: DBXTeamLogFailureDetailsLogInfo { DBXTeamLogFailureDetailsLogInfo(swift: swift.errorDetails) }

    @objc
    public init(errorDetails: DBXTeamLogFailureDetailsLogInfo) {
        self.swift = TeamLog.EmmErrorDetails(errorDetails: errorDetails.swift)
    }

    let swift: TeamLog.EmmErrorDetails

    public init(swift: TeamLog.EmmErrorDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmErrorType struct
@objc
public class DBXTeamLogEmmErrorType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmErrorType(description_: description_)
    }

    let swift: TeamLog.EmmErrorType

    public init(swift: TeamLog.EmmErrorType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Refreshed auth token used for setting up EMM.
@objc
public class DBXTeamLogEmmRefreshAuthTokenDetails: NSObject {
    let swift: TeamLog.EmmRefreshAuthTokenDetails

    public init(swift: TeamLog.EmmRefreshAuthTokenDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmRefreshAuthTokenType struct
@objc
public class DBXTeamLogEmmRefreshAuthTokenType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmRefreshAuthTokenType(description_: description_)
    }

    let swift: TeamLog.EmmRefreshAuthTokenType

    public init(swift: TeamLog.EmmRefreshAuthTokenType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed members from EMM exception list.
@objc
public class DBXTeamLogEmmRemoveExceptionDetails: NSObject {
    let swift: TeamLog.EmmRemoveExceptionDetails

    public init(swift: TeamLog.EmmRemoveExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EmmRemoveExceptionType struct
@objc
public class DBXTeamLogEmmRemoveExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EmmRemoveExceptionType(description_: description_)
    }

    let swift: TeamLog.EmmRemoveExceptionType

    public init(swift: TeamLog.EmmRemoveExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled domain invites.
@objc
public class DBXTeamLogEnabledDomainInvitesDetails: NSObject {
    let swift: TeamLog.EnabledDomainInvitesDetails

    public init(swift: TeamLog.EnabledDomainInvitesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EnabledDomainInvitesType struct
@objc
public class DBXTeamLogEnabledDomainInvitesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EnabledDomainInvitesType(description_: description_)
    }

    let swift: TeamLog.EnabledDomainInvitesType

    public init(swift: TeamLog.EnabledDomainInvitesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Ended enterprise admin session.
@objc
public class DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails: NSObject {
    /// More information about the organization or team.
    @objc
    public var federationExtraDetails: DBXTeamLogFedExtraDetails { DBXTeamLogFedExtraDetails(swift: swift.federationExtraDetails) }

    @objc
    public init(federationExtraDetails: DBXTeamLogFedExtraDetails) {
        self.swift = TeamLog.EndedEnterpriseAdminSessionDeprecatedDetails(federationExtraDetails: federationExtraDetails.swift)
    }

    let swift: TeamLog.EndedEnterpriseAdminSessionDeprecatedDetails

    public init(swift: TeamLog.EndedEnterpriseAdminSessionDeprecatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EndedEnterpriseAdminSessionDeprecatedType struct
@objc
public class DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EndedEnterpriseAdminSessionDeprecatedType(description_: description_)
    }

    let swift: TeamLog.EndedEnterpriseAdminSessionDeprecatedType

    public init(swift: TeamLog.EndedEnterpriseAdminSessionDeprecatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Ended enterprise admin session.
@objc
public class DBXTeamLogEndedEnterpriseAdminSessionDetails: NSObject {
    let swift: TeamLog.EndedEnterpriseAdminSessionDetails

    public init(swift: TeamLog.EndedEnterpriseAdminSessionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EndedEnterpriseAdminSessionType struct
@objc
public class DBXTeamLogEndedEnterpriseAdminSessionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EndedEnterpriseAdminSessionType(description_: description_)
    }

    let swift: TeamLog.EndedEnterpriseAdminSessionType

    public init(swift: TeamLog.EndedEnterpriseAdminSessionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether password must be enforced when an externally shared link is updated
@objc
public class DBXTeamLogEnforceLinkPasswordPolicy: NSObject {
    let swift: TeamLog.EnforceLinkPasswordPolicy

    public init(swift: TeamLog.EnforceLinkPasswordPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EnforceLinkPasswordPolicy) -> DBXTeamLogEnforceLinkPasswordPolicy {
        switch swift {
        case .optional:
            return DBXTeamLogEnforceLinkPasswordPolicyOptional()
        case .required:
            return DBXTeamLogEnforceLinkPasswordPolicyRequired()
        case .other:
            return DBXTeamLogEnforceLinkPasswordPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOptional: DBXTeamLogEnforceLinkPasswordPolicyOptional? {
        self as? DBXTeamLogEnforceLinkPasswordPolicyOptional
    }

    @objc
    public var asRequired: DBXTeamLogEnforceLinkPasswordPolicyRequired? {
        self as? DBXTeamLogEnforceLinkPasswordPolicyRequired
    }

    @objc
    public var asOther: DBXTeamLogEnforceLinkPasswordPolicyOther? {
        self as? DBXTeamLogEnforceLinkPasswordPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEnforceLinkPasswordPolicyOptional: DBXTeamLogEnforceLinkPasswordPolicy {
    @objc
    public init() {
        let swift = TeamLog.EnforceLinkPasswordPolicy.optional
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEnforceLinkPasswordPolicyRequired: DBXTeamLogEnforceLinkPasswordPolicy {
    @objc
    public init() {
        let swift = TeamLog.EnforceLinkPasswordPolicy.required
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEnforceLinkPasswordPolicyOther: DBXTeamLogEnforceLinkPasswordPolicy {
    @objc
    public init() {
        let swift = TeamLog.EnforceLinkPasswordPolicy.other
        super.init(swift: swift)
    }
}

/// Changed who can update a setting.
@objc
public class DBXTeamLogEnterpriseSettingsLockingDetails: NSObject {
    /// The secondary team name.
    @objc
    public var teamName: String { swift.teamName }
    /// Settings page name.
    @objc
    public var settingsPageName: String { swift.settingsPageName }
    /// Previous locked settings page state.
    @objc
    public var previousSettingsPageLockingState: String { swift.previousSettingsPageLockingState }
    /// New locked settings page state.
    @objc
    public var newSettingsPageLockingState: String { swift.newSettingsPageLockingState }

    @objc
    public init(teamName: String, settingsPageName: String, previousSettingsPageLockingState: String, newSettingsPageLockingState: String) {
        self.swift = TeamLog.EnterpriseSettingsLockingDetails(
            teamName: teamName,
            settingsPageName: settingsPageName,
            previousSettingsPageLockingState: previousSettingsPageLockingState,
            newSettingsPageLockingState: newSettingsPageLockingState
        )
    }

    let swift: TeamLog.EnterpriseSettingsLockingDetails

    public init(swift: TeamLog.EnterpriseSettingsLockingDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible EnterpriseSettingsLockingType struct
@objc
public class DBXTeamLogEnterpriseSettingsLockingType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.EnterpriseSettingsLockingType(description_: description_)
    }

    let swift: TeamLog.EnterpriseSettingsLockingType

    public init(swift: TeamLog.EnterpriseSettingsLockingType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Category of events in event audit log.
@objc
public class DBXTeamLogEventCategory: NSObject {
    let swift: TeamLog.EventCategory

    public init(swift: TeamLog.EventCategory) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EventCategory) -> DBXTeamLogEventCategory {
        switch swift {
        case .adminAlerting:
            return DBXTeamLogEventCategoryAdminAlerting()
        case .apps:
            return DBXTeamLogEventCategoryApps()
        case .comments:
            return DBXTeamLogEventCategoryComments()
        case .dataGovernance:
            return DBXTeamLogEventCategoryDataGovernance()
        case .devices:
            return DBXTeamLogEventCategoryDevices()
        case .domains:
            return DBXTeamLogEventCategoryDomains()
        case .encryption:
            return DBXTeamLogEventCategoryEncryption()
        case .fileOperations:
            return DBXTeamLogEventCategoryFileOperations()
        case .fileRequests:
            return DBXTeamLogEventCategoryFileRequests()
        case .groups:
            return DBXTeamLogEventCategoryGroups()
        case .logins:
            return DBXTeamLogEventCategoryLogins()
        case .members:
            return DBXTeamLogEventCategoryMembers()
        case .paper:
            return DBXTeamLogEventCategoryPaper()
        case .passwords:
            return DBXTeamLogEventCategoryPasswords()
        case .reports:
            return DBXTeamLogEventCategoryReports()
        case .sharing:
            return DBXTeamLogEventCategorySharing()
        case .showcase:
            return DBXTeamLogEventCategoryShowcase()
        case .sso:
            return DBXTeamLogEventCategorySso()
        case .teamFolders:
            return DBXTeamLogEventCategoryTeamFolders()
        case .teamPolicies:
            return DBXTeamLogEventCategoryTeamPolicies()
        case .teamProfile:
            return DBXTeamLogEventCategoryTeamProfile()
        case .tfa:
            return DBXTeamLogEventCategoryTfa()
        case .trustedTeams:
            return DBXTeamLogEventCategoryTrustedTeams()
        case .other:
            return DBXTeamLogEventCategoryOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminAlerting: DBXTeamLogEventCategoryAdminAlerting? {
        self as? DBXTeamLogEventCategoryAdminAlerting
    }

    @objc
    public var asApps: DBXTeamLogEventCategoryApps? {
        self as? DBXTeamLogEventCategoryApps
    }

    @objc
    public var asComments: DBXTeamLogEventCategoryComments? {
        self as? DBXTeamLogEventCategoryComments
    }

    @objc
    public var asDataGovernance: DBXTeamLogEventCategoryDataGovernance? {
        self as? DBXTeamLogEventCategoryDataGovernance
    }

    @objc
    public var asDevices: DBXTeamLogEventCategoryDevices? {
        self as? DBXTeamLogEventCategoryDevices
    }

    @objc
    public var asDomains: DBXTeamLogEventCategoryDomains? {
        self as? DBXTeamLogEventCategoryDomains
    }

    @objc
    public var asEncryption: DBXTeamLogEventCategoryEncryption? {
        self as? DBXTeamLogEventCategoryEncryption
    }

    @objc
    public var asFileOperations: DBXTeamLogEventCategoryFileOperations? {
        self as? DBXTeamLogEventCategoryFileOperations
    }

    @objc
    public var asFileRequests: DBXTeamLogEventCategoryFileRequests? {
        self as? DBXTeamLogEventCategoryFileRequests
    }

    @objc
    public var asGroups: DBXTeamLogEventCategoryGroups? {
        self as? DBXTeamLogEventCategoryGroups
    }

    @objc
    public var asLogins: DBXTeamLogEventCategoryLogins? {
        self as? DBXTeamLogEventCategoryLogins
    }

    @objc
    public var asMembers: DBXTeamLogEventCategoryMembers? {
        self as? DBXTeamLogEventCategoryMembers
    }

    @objc
    public var asPaper: DBXTeamLogEventCategoryPaper? {
        self as? DBXTeamLogEventCategoryPaper
    }

    @objc
    public var asPasswords: DBXTeamLogEventCategoryPasswords? {
        self as? DBXTeamLogEventCategoryPasswords
    }

    @objc
    public var asReports: DBXTeamLogEventCategoryReports? {
        self as? DBXTeamLogEventCategoryReports
    }

    @objc
    public var asSharing: DBXTeamLogEventCategorySharing? {
        self as? DBXTeamLogEventCategorySharing
    }

    @objc
    public var asShowcase: DBXTeamLogEventCategoryShowcase? {
        self as? DBXTeamLogEventCategoryShowcase
    }

    @objc
    public var asSso: DBXTeamLogEventCategorySso? {
        self as? DBXTeamLogEventCategorySso
    }

    @objc
    public var asTeamFolders: DBXTeamLogEventCategoryTeamFolders? {
        self as? DBXTeamLogEventCategoryTeamFolders
    }

    @objc
    public var asTeamPolicies: DBXTeamLogEventCategoryTeamPolicies? {
        self as? DBXTeamLogEventCategoryTeamPolicies
    }

    @objc
    public var asTeamProfile: DBXTeamLogEventCategoryTeamProfile? {
        self as? DBXTeamLogEventCategoryTeamProfile
    }

    @objc
    public var asTfa: DBXTeamLogEventCategoryTfa? {
        self as? DBXTeamLogEventCategoryTfa
    }

    @objc
    public var asTrustedTeams: DBXTeamLogEventCategoryTrustedTeams? {
        self as? DBXTeamLogEventCategoryTrustedTeams
    }

    @objc
    public var asOther: DBXTeamLogEventCategoryOther? {
        self as? DBXTeamLogEventCategoryOther
    }
}

/// Events that involve team related alerts.
@objc
public class DBXTeamLogEventCategoryAdminAlerting: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.adminAlerting
        super.init(swift: swift)
    }
}

/// Events that apply to management of linked apps.
@objc
public class DBXTeamLogEventCategoryApps: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.apps
        super.init(swift: swift)
    }
}

/// Events that have to do with comments on files and Paper documents.
@objc
public class DBXTeamLogEventCategoryComments: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.comments
        super.init(swift: swift)
    }
}

/// Events that involve data governance actions
@objc
public class DBXTeamLogEventCategoryDataGovernance: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.dataGovernance
        super.init(swift: swift)
    }
}

/// Events that apply to linked devices on mobile, desktop and Web platforms.
@objc
public class DBXTeamLogEventCategoryDevices: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.devices
        super.init(swift: swift)
    }
}

/// Events that involve domain management feature: domain verification, invite enforcement and account capture.
@objc
public class DBXTeamLogEventCategoryDomains: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.domains
        super.init(swift: swift)
    }
}

/// Events that involve encryption.
@objc
public class DBXTeamLogEventCategoryEncryption: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.encryption
        super.init(swift: swift)
    }
}

/// Events that have to do with filesystem operations on files and folders: copy, move, delete, etc.
@objc
public class DBXTeamLogEventCategoryFileOperations: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.fileOperations
        super.init(swift: swift)
    }
}

/// Events that apply to the file requests feature.
@objc
public class DBXTeamLogEventCategoryFileRequests: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.fileRequests
        super.init(swift: swift)
    }
}

/// Events that involve group management.
@objc
public class DBXTeamLogEventCategoryGroups: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.groups
        super.init(swift: swift)
    }
}

/// Events that involve users signing in to or out of Dropbox.
@objc
public class DBXTeamLogEventCategoryLogins: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.logins
        super.init(swift: swift)
    }
}

/// Events that involve team member management.
@objc
public class DBXTeamLogEventCategoryMembers: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.members
        super.init(swift: swift)
    }
}

/// Events that apply to Dropbox Paper.
@objc
public class DBXTeamLogEventCategoryPaper: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.paper
        super.init(swift: swift)
    }
}

/// Events that involve using, changing or resetting passwords.
@objc
public class DBXTeamLogEventCategoryPasswords: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.passwords
        super.init(swift: swift)
    }
}

/// Events that concern generation of admin reports, including team activity and device usage.
@objc
public class DBXTeamLogEventCategoryReports: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.reports
        super.init(swift: swift)
    }
}

/// Events that apply to all types of sharing and collaboration.
@objc
public class DBXTeamLogEventCategorySharing: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.sharing
        super.init(swift: swift)
    }
}

/// Events that apply to Dropbox Showcase.
@objc
public class DBXTeamLogEventCategoryShowcase: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.showcase
        super.init(swift: swift)
    }
}

/// Events that involve using or configuring single sign-on as well as administrative policies concerning single
/// sign-on.
@objc
public class DBXTeamLogEventCategorySso: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.sso
        super.init(swift: swift)
    }
}

/// Events that involve team folder management.
@objc
public class DBXTeamLogEventCategoryTeamFolders: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.teamFolders
        super.init(swift: swift)
    }
}

/// Events that involve a change in team-wide policies.
@objc
public class DBXTeamLogEventCategoryTeamPolicies: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.teamPolicies
        super.init(swift: swift)
    }
}

/// Events that involve a change in the team profile.
@objc
public class DBXTeamLogEventCategoryTeamProfile: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.teamProfile
        super.init(swift: swift)
    }
}

/// Events that involve using or configuring two factor authentication as well as administrative policies
/// concerning two factor authentication.
@objc
public class DBXTeamLogEventCategoryTfa: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.tfa
        super.init(swift: swift)
    }
}

/// Events that apply to cross-team trust establishment.
@objc
public class DBXTeamLogEventCategoryTrustedTeams: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.trustedTeams
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventCategoryOther: DBXTeamLogEventCategory {
    @objc
    public init() {
        let swift = TeamLog.EventCategory.other
        super.init(swift: swift)
    }
}

/// Additional fields depending on the event type.
@objc
public class DBXTeamLogEventDetails: NSObject {
    let swift: TeamLog.EventDetails

    public init(swift: TeamLog.EventDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EventDetails) -> DBXTeamLogEventDetails {
        switch swift {
        case .adminAlertingAlertStateChangedDetails(let swiftArg):
            let arg = DBXTeamLogAdminAlertingAlertStateChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAdminAlertingAlertStateChangedDetails(arg)
        case .adminAlertingChangedAlertConfigDetails(let swiftArg):
            let arg = DBXTeamLogAdminAlertingChangedAlertConfigDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAdminAlertingChangedAlertConfigDetails(arg)
        case .adminAlertingTriggeredAlertDetails(let swiftArg):
            let arg = DBXTeamLogAdminAlertingTriggeredAlertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAdminAlertingTriggeredAlertDetails(arg)
        case .ransomwareRestoreProcessCompletedDetails(let swiftArg):
            let arg = DBXTeamLogRansomwareRestoreProcessCompletedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRansomwareRestoreProcessCompletedDetails(arg)
        case .ransomwareRestoreProcessStartedDetails(let swiftArg):
            let arg = DBXTeamLogRansomwareRestoreProcessStartedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRansomwareRestoreProcessStartedDetails(arg)
        case .appBlockedByPermissionsDetails(let swiftArg):
            let arg = DBXTeamLogAppBlockedByPermissionsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppBlockedByPermissionsDetails(arg)
        case .appLinkTeamDetails(let swiftArg):
            let arg = DBXTeamLogAppLinkTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppLinkTeamDetails(arg)
        case .appLinkUserDetails(let swiftArg):
            let arg = DBXTeamLogAppLinkUserDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppLinkUserDetails(arg)
        case .appUnlinkTeamDetails(let swiftArg):
            let arg = DBXTeamLogAppUnlinkTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppUnlinkTeamDetails(arg)
        case .appUnlinkUserDetails(let swiftArg):
            let arg = DBXTeamLogAppUnlinkUserDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppUnlinkUserDetails(arg)
        case .integrationConnectedDetails(let swiftArg):
            let arg = DBXTeamLogIntegrationConnectedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsIntegrationConnectedDetails(arg)
        case .integrationDisconnectedDetails(let swiftArg):
            let arg = DBXTeamLogIntegrationDisconnectedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsIntegrationDisconnectedDetails(arg)
        case .fileAddCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileAddCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileAddCommentDetails(arg)
        case .fileChangeCommentSubscriptionDetails(let swiftArg):
            let arg = DBXTeamLogFileChangeCommentSubscriptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileChangeCommentSubscriptionDetails(arg)
        case .fileDeleteCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileDeleteCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileDeleteCommentDetails(arg)
        case .fileEditCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileEditCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileEditCommentDetails(arg)
        case .fileLikeCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileLikeCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileLikeCommentDetails(arg)
        case .fileResolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileResolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileResolveCommentDetails(arg)
        case .fileUnlikeCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileUnlikeCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileUnlikeCommentDetails(arg)
        case .fileUnresolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogFileUnresolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileUnresolveCommentDetails(arg)
        case .governancePolicyAddFoldersDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyAddFoldersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyAddFoldersDetails(arg)
        case .governancePolicyAddFolderFailedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyAddFolderFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyAddFolderFailedDetails(arg)
        case .governancePolicyContentDisposedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyContentDisposedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyContentDisposedDetails(arg)
        case .governancePolicyCreateDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyCreateDetails(arg)
        case .governancePolicyDeleteDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyDeleteDetails(arg)
        case .governancePolicyEditDetailsDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyEditDetailsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyEditDetailsDetails(arg)
        case .governancePolicyEditDurationDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyEditDurationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyEditDurationDetails(arg)
        case .governancePolicyExportCreatedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyExportCreatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyExportCreatedDetails(arg)
        case .governancePolicyExportRemovedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyExportRemovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyExportRemovedDetails(arg)
        case .governancePolicyRemoveFoldersDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyRemoveFoldersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyRemoveFoldersDetails(arg)
        case .governancePolicyReportCreatedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyReportCreatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyReportCreatedDetails(arg)
        case .governancePolicyZipPartDownloadedDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyZipPartDownloadedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGovernancePolicyZipPartDownloadedDetails(arg)
        case .legalHoldsActivateAHoldDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsActivateAHoldDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsActivateAHoldDetails(arg)
        case .legalHoldsAddMembersDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsAddMembersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsAddMembersDetails(arg)
        case .legalHoldsChangeHoldDetailsDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsChangeHoldDetailsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsChangeHoldDetailsDetails(arg)
        case .legalHoldsChangeHoldNameDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsChangeHoldNameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsChangeHoldNameDetails(arg)
        case .legalHoldsExportAHoldDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportAHoldDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsExportAHoldDetails(arg)
        case .legalHoldsExportCancelledDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportCancelledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsExportCancelledDetails(arg)
        case .legalHoldsExportDownloadedDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportDownloadedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsExportDownloadedDetails(arg)
        case .legalHoldsExportRemovedDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportRemovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsExportRemovedDetails(arg)
        case .legalHoldsReleaseAHoldDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsReleaseAHoldDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsReleaseAHoldDetails(arg)
        case .legalHoldsRemoveMembersDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsRemoveMembersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsRemoveMembersDetails(arg)
        case .legalHoldsReportAHoldDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsReportAHoldDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLegalHoldsReportAHoldDetails(arg)
        case .deviceChangeIpDesktopDetails(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpDesktopDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceChangeIpDesktopDetails(arg)
        case .deviceChangeIpMobileDetails(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpMobileDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceChangeIpMobileDetails(arg)
        case .deviceChangeIpWebDetails(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpWebDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceChangeIpWebDetails(arg)
        case .deviceDeleteOnUnlinkFailDetails(let swiftArg):
            let arg = DBXTeamLogDeviceDeleteOnUnlinkFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceDeleteOnUnlinkFailDetails(arg)
        case .deviceDeleteOnUnlinkSuccessDetails(let swiftArg):
            let arg = DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceDeleteOnUnlinkSuccessDetails(arg)
        case .deviceLinkFailDetails(let swiftArg):
            let arg = DBXTeamLogDeviceLinkFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceLinkFailDetails(arg)
        case .deviceLinkSuccessDetails(let swiftArg):
            let arg = DBXTeamLogDeviceLinkSuccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceLinkSuccessDetails(arg)
        case .deviceManagementDisabledDetails(let swiftArg):
            let arg = DBXTeamLogDeviceManagementDisabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceManagementDisabledDetails(arg)
        case .deviceManagementEnabledDetails(let swiftArg):
            let arg = DBXTeamLogDeviceManagementEnabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceManagementEnabledDetails(arg)
        case .deviceSyncBackupStatusChangedDetails(let swiftArg):
            let arg = DBXTeamLogDeviceSyncBackupStatusChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceSyncBackupStatusChangedDetails(arg)
        case .deviceUnlinkDetails(let swiftArg):
            let arg = DBXTeamLogDeviceUnlinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceUnlinkDetails(arg)
        case .dropboxPasswordsExportedDetails(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsExportedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDropboxPasswordsExportedDetails(arg)
        case .dropboxPasswordsNewDeviceEnrolledDetails(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDropboxPasswordsNewDeviceEnrolledDetails(arg)
        case .emmRefreshAuthTokenDetails(let swiftArg):
            let arg = DBXTeamLogEmmRefreshAuthTokenDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmRefreshAuthTokenDetails(arg)
        case .externalDriveBackupEligibilityStatusCheckedDetails(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails(arg)
        case .externalDriveBackupStatusChangedDetails(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupStatusChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExternalDriveBackupStatusChangedDetails(arg)
        case .accountCaptureChangeAvailabilityDetails(let swiftArg):
            let arg = DBXTeamLogAccountCaptureChangeAvailabilityDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountCaptureChangeAvailabilityDetails(arg)
        case .accountCaptureMigrateAccountDetails(let swiftArg):
            let arg = DBXTeamLogAccountCaptureMigrateAccountDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountCaptureMigrateAccountDetails(arg)
        case .accountCaptureNotificationEmailsSentDetails(let swiftArg):
            let arg = DBXTeamLogAccountCaptureNotificationEmailsSentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountCaptureNotificationEmailsSentDetails(arg)
        case .accountCaptureRelinquishAccountDetails(let swiftArg):
            let arg = DBXTeamLogAccountCaptureRelinquishAccountDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountCaptureRelinquishAccountDetails(arg)
        case .disabledDomainInvitesDetails(let swiftArg):
            let arg = DBXTeamLogDisabledDomainInvitesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDisabledDomainInvitesDetails(arg)
        case .domainInvitesApproveRequestToJoinTeamDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesApproveRequestToJoinTeamDetails(arg)
        case .domainInvitesDeclineRequestToJoinTeamDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails(arg)
        case .domainInvitesEmailExistingUsersDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesEmailExistingUsersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesEmailExistingUsersDetails(arg)
        case .domainInvitesRequestToJoinTeamDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesRequestToJoinTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesRequestToJoinTeamDetails(arg)
        case .domainInvitesSetInviteNewUserPrefToNoDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails(arg)
        case .domainInvitesSetInviteNewUserPrefToYesDetails(let swiftArg):
            let arg = DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails(arg)
        case .domainVerificationAddDomainFailDetails(let swiftArg):
            let arg = DBXTeamLogDomainVerificationAddDomainFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainVerificationAddDomainFailDetails(arg)
        case .domainVerificationAddDomainSuccessDetails(let swiftArg):
            let arg = DBXTeamLogDomainVerificationAddDomainSuccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainVerificationAddDomainSuccessDetails(arg)
        case .domainVerificationRemoveDomainDetails(let swiftArg):
            let arg = DBXTeamLogDomainVerificationRemoveDomainDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDomainVerificationRemoveDomainDetails(arg)
        case .enabledDomainInvitesDetails(let swiftArg):
            let arg = DBXTeamLogEnabledDomainInvitesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEnabledDomainInvitesDetails(arg)
        case .teamEncryptionKeyCancelKeyDeletionDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyCancelKeyDeletionDetails(arg)
        case .teamEncryptionKeyCreateKeyDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyCreateKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyCreateKeyDetails(arg)
        case .teamEncryptionKeyDeleteKeyDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyDeleteKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyDeleteKeyDetails(arg)
        case .teamEncryptionKeyDisableKeyDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyDisableKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyDisableKeyDetails(arg)
        case .teamEncryptionKeyEnableKeyDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyEnableKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyEnableKeyDetails(arg)
        case .teamEncryptionKeyRotateKeyDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyRotateKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyRotateKeyDetails(arg)
        case .teamEncryptionKeyScheduleKeyDeletionDetails(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamEncryptionKeyScheduleKeyDeletionDetails(arg)
        case .applyNamingConventionDetails(let swiftArg):
            let arg = DBXTeamLogApplyNamingConventionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsApplyNamingConventionDetails(arg)
        case .createFolderDetails(let swiftArg):
            let arg = DBXTeamLogCreateFolderDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsCreateFolderDetails(arg)
        case .fileAddDetails(let swiftArg):
            let arg = DBXTeamLogFileAddDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileAddDetails(arg)
        case .fileAddFromAutomationDetails(let swiftArg):
            let arg = DBXTeamLogFileAddFromAutomationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileAddFromAutomationDetails(arg)
        case .fileCopyDetails(let swiftArg):
            let arg = DBXTeamLogFileCopyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileCopyDetails(arg)
        case .fileDeleteDetails(let swiftArg):
            let arg = DBXTeamLogFileDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileDeleteDetails(arg)
        case .fileDownloadDetails(let swiftArg):
            let arg = DBXTeamLogFileDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileDownloadDetails(arg)
        case .fileEditDetails(let swiftArg):
            let arg = DBXTeamLogFileEditDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileEditDetails(arg)
        case .fileGetCopyReferenceDetails(let swiftArg):
            let arg = DBXTeamLogFileGetCopyReferenceDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileGetCopyReferenceDetails(arg)
        case .fileLockingLockStatusChangedDetails(let swiftArg):
            let arg = DBXTeamLogFileLockingLockStatusChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileLockingLockStatusChangedDetails(arg)
        case .fileMoveDetails(let swiftArg):
            let arg = DBXTeamLogFileMoveDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileMoveDetails(arg)
        case .filePermanentlyDeleteDetails(let swiftArg):
            let arg = DBXTeamLogFilePermanentlyDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFilePermanentlyDeleteDetails(arg)
        case .filePreviewDetails(let swiftArg):
            let arg = DBXTeamLogFilePreviewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFilePreviewDetails(arg)
        case .fileRenameDetails(let swiftArg):
            let arg = DBXTeamLogFileRenameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRenameDetails(arg)
        case .fileRestoreDetails(let swiftArg):
            let arg = DBXTeamLogFileRestoreDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRestoreDetails(arg)
        case .fileRevertDetails(let swiftArg):
            let arg = DBXTeamLogFileRevertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRevertDetails(arg)
        case .fileRollbackChangesDetails(let swiftArg):
            let arg = DBXTeamLogFileRollbackChangesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRollbackChangesDetails(arg)
        case .fileSaveCopyReferenceDetails(let swiftArg):
            let arg = DBXTeamLogFileSaveCopyReferenceDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileSaveCopyReferenceDetails(arg)
        case .folderOverviewDescriptionChangedDetails(let swiftArg):
            let arg = DBXTeamLogFolderOverviewDescriptionChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFolderOverviewDescriptionChangedDetails(arg)
        case .folderOverviewItemPinnedDetails(let swiftArg):
            let arg = DBXTeamLogFolderOverviewItemPinnedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFolderOverviewItemPinnedDetails(arg)
        case .folderOverviewItemUnpinnedDetails(let swiftArg):
            let arg = DBXTeamLogFolderOverviewItemUnpinnedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFolderOverviewItemUnpinnedDetails(arg)
        case .objectLabelAddedDetails(let swiftArg):
            let arg = DBXTeamLogObjectLabelAddedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsObjectLabelAddedDetails(arg)
        case .objectLabelRemovedDetails(let swiftArg):
            let arg = DBXTeamLogObjectLabelRemovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsObjectLabelRemovedDetails(arg)
        case .objectLabelUpdatedValueDetails(let swiftArg):
            let arg = DBXTeamLogObjectLabelUpdatedValueDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsObjectLabelUpdatedValueDetails(arg)
        case .organizeFolderWithTidyDetails(let swiftArg):
            let arg = DBXTeamLogOrganizeFolderWithTidyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsOrganizeFolderWithTidyDetails(arg)
        case .replayFileDeleteDetails(let swiftArg):
            let arg = DBXTeamLogReplayFileDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsReplayFileDeleteDetails(arg)
        case .rewindFolderDetails(let swiftArg):
            let arg = DBXTeamLogRewindFolderDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRewindFolderDetails(arg)
        case .undoNamingConventionDetails(let swiftArg):
            let arg = DBXTeamLogUndoNamingConventionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsUndoNamingConventionDetails(arg)
        case .undoOrganizeFolderWithTidyDetails(let swiftArg):
            let arg = DBXTeamLogUndoOrganizeFolderWithTidyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsUndoOrganizeFolderWithTidyDetails(arg)
        case .userTagsAddedDetails(let swiftArg):
            let arg = DBXTeamLogUserTagsAddedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsUserTagsAddedDetails(arg)
        case .userTagsRemovedDetails(let swiftArg):
            let arg = DBXTeamLogUserTagsRemovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsUserTagsRemovedDetails(arg)
        case .emailIngestReceiveFileDetails(let swiftArg):
            let arg = DBXTeamLogEmailIngestReceiveFileDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmailIngestReceiveFileDetails(arg)
        case .fileRequestChangeDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestChangeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestChangeDetails(arg)
        case .fileRequestCloseDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestCloseDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestCloseDetails(arg)
        case .fileRequestCreateDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestCreateDetails(arg)
        case .fileRequestDeleteDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestDeleteDetails(arg)
        case .fileRequestReceiveFileDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestReceiveFileDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestReceiveFileDetails(arg)
        case .groupAddExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogGroupAddExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupAddExternalIdDetails(arg)
        case .groupAddMemberDetails(let swiftArg):
            let arg = DBXTeamLogGroupAddMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupAddMemberDetails(arg)
        case .groupChangeExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogGroupChangeExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupChangeExternalIdDetails(arg)
        case .groupChangeManagementTypeDetails(let swiftArg):
            let arg = DBXTeamLogGroupChangeManagementTypeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupChangeManagementTypeDetails(arg)
        case .groupChangeMemberRoleDetails(let swiftArg):
            let arg = DBXTeamLogGroupChangeMemberRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupChangeMemberRoleDetails(arg)
        case .groupCreateDetails(let swiftArg):
            let arg = DBXTeamLogGroupCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupCreateDetails(arg)
        case .groupDeleteDetails(let swiftArg):
            let arg = DBXTeamLogGroupDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupDeleteDetails(arg)
        case .groupDescriptionUpdatedDetails(let swiftArg):
            let arg = DBXTeamLogGroupDescriptionUpdatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupDescriptionUpdatedDetails(arg)
        case .groupJoinPolicyUpdatedDetails(let swiftArg):
            let arg = DBXTeamLogGroupJoinPolicyUpdatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupJoinPolicyUpdatedDetails(arg)
        case .groupMovedDetails(let swiftArg):
            let arg = DBXTeamLogGroupMovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupMovedDetails(arg)
        case .groupRemoveExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogGroupRemoveExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupRemoveExternalIdDetails(arg)
        case .groupRemoveMemberDetails(let swiftArg):
            let arg = DBXTeamLogGroupRemoveMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupRemoveMemberDetails(arg)
        case .groupRenameDetails(let swiftArg):
            let arg = DBXTeamLogGroupRenameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupRenameDetails(arg)
        case .accountLockOrUnlockedDetails(let swiftArg):
            let arg = DBXTeamLogAccountLockOrUnlockedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountLockOrUnlockedDetails(arg)
        case .emmErrorDetails(let swiftArg):
            let arg = DBXTeamLogEmmErrorDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmErrorDetails(arg)
        case .guestAdminSignedInViaTrustedTeamsDetails(let swiftArg):
            let arg = DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGuestAdminSignedInViaTrustedTeamsDetails(arg)
        case .guestAdminSignedOutViaTrustedTeamsDetails(let swiftArg):
            let arg = DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails(arg)
        case .loginFailDetails(let swiftArg):
            let arg = DBXTeamLogLoginFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLoginFailDetails(arg)
        case .loginSuccessDetails(let swiftArg):
            let arg = DBXTeamLogLoginSuccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLoginSuccessDetails(arg)
        case .logoutDetails(let swiftArg):
            let arg = DBXTeamLogLogoutDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsLogoutDetails(arg)
        case .resellerSupportSessionEndDetails(let swiftArg):
            let arg = DBXTeamLogResellerSupportSessionEndDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsResellerSupportSessionEndDetails(arg)
        case .resellerSupportSessionStartDetails(let swiftArg):
            let arg = DBXTeamLogResellerSupportSessionStartDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsResellerSupportSessionStartDetails(arg)
        case .signInAsSessionEndDetails(let swiftArg):
            let arg = DBXTeamLogSignInAsSessionEndDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSignInAsSessionEndDetails(arg)
        case .signInAsSessionStartDetails(let swiftArg):
            let arg = DBXTeamLogSignInAsSessionStartDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSignInAsSessionStartDetails(arg)
        case .ssoErrorDetails(let swiftArg):
            let arg = DBXTeamLogSsoErrorDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoErrorDetails(arg)
        case .backupAdminInvitationSentDetails(let swiftArg):
            let arg = DBXTeamLogBackupAdminInvitationSentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBackupAdminInvitationSentDetails(arg)
        case .backupInvitationOpenedDetails(let swiftArg):
            let arg = DBXTeamLogBackupInvitationOpenedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBackupInvitationOpenedDetails(arg)
        case .createTeamInviteLinkDetails(let swiftArg):
            let arg = DBXTeamLogCreateTeamInviteLinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsCreateTeamInviteLinkDetails(arg)
        case .deleteTeamInviteLinkDetails(let swiftArg):
            let arg = DBXTeamLogDeleteTeamInviteLinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeleteTeamInviteLinkDetails(arg)
        case .memberAddExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogMemberAddExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberAddExternalIdDetails(arg)
        case .memberAddNameDetails(let swiftArg):
            let arg = DBXTeamLogMemberAddNameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberAddNameDetails(arg)
        case .memberChangeAdminRoleDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeAdminRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeAdminRoleDetails(arg)
        case .memberChangeEmailDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeEmailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeEmailDetails(arg)
        case .memberChangeExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeExternalIdDetails(arg)
        case .memberChangeMembershipTypeDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeMembershipTypeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeMembershipTypeDetails(arg)
        case .memberChangeNameDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeNameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeNameDetails(arg)
        case .memberChangeResellerRoleDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeResellerRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeResellerRoleDetails(arg)
        case .memberChangeStatusDetails(let swiftArg):
            let arg = DBXTeamLogMemberChangeStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberChangeStatusDetails(arg)
        case .memberDeleteManualContactsDetails(let swiftArg):
            let arg = DBXTeamLogMemberDeleteManualContactsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberDeleteManualContactsDetails(arg)
        case .memberDeleteProfilePhotoDetails(let swiftArg):
            let arg = DBXTeamLogMemberDeleteProfilePhotoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberDeleteProfilePhotoDetails(arg)
        case .memberPermanentlyDeleteAccountContentsDetails(let swiftArg):
            let arg = DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberPermanentlyDeleteAccountContentsDetails(arg)
        case .memberRemoveExternalIdDetails(let swiftArg):
            let arg = DBXTeamLogMemberRemoveExternalIdDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberRemoveExternalIdDetails(arg)
        case .memberSetProfilePhotoDetails(let swiftArg):
            let arg = DBXTeamLogMemberSetProfilePhotoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSetProfilePhotoDetails(arg)
        case .memberSpaceLimitsAddCustomQuotaDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsAddCustomQuotaDetails(arg)
        case .memberSpaceLimitsChangeCustomQuotaDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails(arg)
        case .memberSpaceLimitsChangeStatusDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsChangeStatusDetails(arg)
        case .memberSpaceLimitsRemoveCustomQuotaDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails(arg)
        case .memberSuggestDetails(let swiftArg):
            let arg = DBXTeamLogMemberSuggestDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSuggestDetails(arg)
        case .memberTransferAccountContentsDetails(let swiftArg):
            let arg = DBXTeamLogMemberTransferAccountContentsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberTransferAccountContentsDetails(arg)
        case .pendingSecondaryEmailAddedDetails(let swiftArg):
            let arg = DBXTeamLogPendingSecondaryEmailAddedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPendingSecondaryEmailAddedDetails(arg)
        case .secondaryEmailDeletedDetails(let swiftArg):
            let arg = DBXTeamLogSecondaryEmailDeletedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSecondaryEmailDeletedDetails(arg)
        case .secondaryEmailVerifiedDetails(let swiftArg):
            let arg = DBXTeamLogSecondaryEmailVerifiedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSecondaryEmailVerifiedDetails(arg)
        case .secondaryMailsPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogSecondaryMailsPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSecondaryMailsPolicyChangedDetails(arg)
        case .binderAddPageDetails(let swiftArg):
            let arg = DBXTeamLogBinderAddPageDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderAddPageDetails(arg)
        case .binderAddSectionDetails(let swiftArg):
            let arg = DBXTeamLogBinderAddSectionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderAddSectionDetails(arg)
        case .binderRemovePageDetails(let swiftArg):
            let arg = DBXTeamLogBinderRemovePageDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderRemovePageDetails(arg)
        case .binderRemoveSectionDetails(let swiftArg):
            let arg = DBXTeamLogBinderRemoveSectionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderRemoveSectionDetails(arg)
        case .binderRenamePageDetails(let swiftArg):
            let arg = DBXTeamLogBinderRenamePageDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderRenamePageDetails(arg)
        case .binderRenameSectionDetails(let swiftArg):
            let arg = DBXTeamLogBinderRenameSectionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderRenameSectionDetails(arg)
        case .binderReorderPageDetails(let swiftArg):
            let arg = DBXTeamLogBinderReorderPageDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderReorderPageDetails(arg)
        case .binderReorderSectionDetails(let swiftArg):
            let arg = DBXTeamLogBinderReorderSectionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsBinderReorderSectionDetails(arg)
        case .paperContentAddMemberDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentAddMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentAddMemberDetails(arg)
        case .paperContentAddToFolderDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentAddToFolderDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentAddToFolderDetails(arg)
        case .paperContentArchiveDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentArchiveDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentArchiveDetails(arg)
        case .paperContentCreateDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentCreateDetails(arg)
        case .paperContentPermanentlyDeleteDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentPermanentlyDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentPermanentlyDeleteDetails(arg)
        case .paperContentRemoveFromFolderDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentRemoveFromFolderDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentRemoveFromFolderDetails(arg)
        case .paperContentRemoveMemberDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentRemoveMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentRemoveMemberDetails(arg)
        case .paperContentRenameDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentRenameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentRenameDetails(arg)
        case .paperContentRestoreDetails(let swiftArg):
            let arg = DBXTeamLogPaperContentRestoreDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperContentRestoreDetails(arg)
        case .paperDocAddCommentDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocAddCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocAddCommentDetails(arg)
        case .paperDocChangeMemberRoleDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeMemberRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocChangeMemberRoleDetails(arg)
        case .paperDocChangeSharingPolicyDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeSharingPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocChangeSharingPolicyDetails(arg)
        case .paperDocChangeSubscriptionDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeSubscriptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocChangeSubscriptionDetails(arg)
        case .paperDocDeletedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocDeletedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocDeletedDetails(arg)
        case .paperDocDeleteCommentDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocDeleteCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocDeleteCommentDetails(arg)
        case .paperDocDownloadDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocDownloadDetails(arg)
        case .paperDocEditDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocEditDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocEditDetails(arg)
        case .paperDocEditCommentDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocEditCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocEditCommentDetails(arg)
        case .paperDocFollowedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocFollowedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocFollowedDetails(arg)
        case .paperDocMentionDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocMentionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocMentionDetails(arg)
        case .paperDocOwnershipChangedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocOwnershipChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocOwnershipChangedDetails(arg)
        case .paperDocRequestAccessDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocRequestAccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocRequestAccessDetails(arg)
        case .paperDocResolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocResolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocResolveCommentDetails(arg)
        case .paperDocRevertDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocRevertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocRevertDetails(arg)
        case .paperDocSlackShareDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocSlackShareDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocSlackShareDetails(arg)
        case .paperDocTeamInviteDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocTeamInviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocTeamInviteDetails(arg)
        case .paperDocTrashedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocTrashedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocTrashedDetails(arg)
        case .paperDocUnresolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocUnresolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocUnresolveCommentDetails(arg)
        case .paperDocUntrashedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocUntrashedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocUntrashedDetails(arg)
        case .paperDocViewDetails(let swiftArg):
            let arg = DBXTeamLogPaperDocViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDocViewDetails(arg)
        case .paperExternalViewAllowDetails(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewAllowDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperExternalViewAllowDetails(arg)
        case .paperExternalViewDefaultTeamDetails(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewDefaultTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperExternalViewDefaultTeamDetails(arg)
        case .paperExternalViewForbidDetails(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewForbidDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperExternalViewForbidDetails(arg)
        case .paperFolderChangeSubscriptionDetails(let swiftArg):
            let arg = DBXTeamLogPaperFolderChangeSubscriptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperFolderChangeSubscriptionDetails(arg)
        case .paperFolderDeletedDetails(let swiftArg):
            let arg = DBXTeamLogPaperFolderDeletedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperFolderDeletedDetails(arg)
        case .paperFolderFollowedDetails(let swiftArg):
            let arg = DBXTeamLogPaperFolderFollowedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperFolderFollowedDetails(arg)
        case .paperFolderTeamInviteDetails(let swiftArg):
            let arg = DBXTeamLogPaperFolderTeamInviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperFolderTeamInviteDetails(arg)
        case .paperPublishedLinkChangePermissionDetails(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkChangePermissionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperPublishedLinkChangePermissionDetails(arg)
        case .paperPublishedLinkCreateDetails(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperPublishedLinkCreateDetails(arg)
        case .paperPublishedLinkDisabledDetails(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkDisabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperPublishedLinkDisabledDetails(arg)
        case .paperPublishedLinkViewDetails(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperPublishedLinkViewDetails(arg)
        case .passwordChangeDetails(let swiftArg):
            let arg = DBXTeamLogPasswordChangeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPasswordChangeDetails(arg)
        case .passwordResetDetails(let swiftArg):
            let arg = DBXTeamLogPasswordResetDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPasswordResetDetails(arg)
        case .passwordResetAllDetails(let swiftArg):
            let arg = DBXTeamLogPasswordResetAllDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPasswordResetAllDetails(arg)
        case .classificationCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogClassificationCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsClassificationCreateReportDetails(arg)
        case .classificationCreateReportFailDetails(let swiftArg):
            let arg = DBXTeamLogClassificationCreateReportFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsClassificationCreateReportFailDetails(arg)
        case .emmCreateExceptionsReportDetails(let swiftArg):
            let arg = DBXTeamLogEmmCreateExceptionsReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmCreateExceptionsReportDetails(arg)
        case .emmCreateUsageReportDetails(let swiftArg):
            let arg = DBXTeamLogEmmCreateUsageReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmCreateUsageReportDetails(arg)
        case .exportMembersReportDetails(let swiftArg):
            let arg = DBXTeamLogExportMembersReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExportMembersReportDetails(arg)
        case .exportMembersReportFailDetails(let swiftArg):
            let arg = DBXTeamLogExportMembersReportFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExportMembersReportFailDetails(arg)
        case .externalSharingCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogExternalSharingCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExternalSharingCreateReportDetails(arg)
        case .externalSharingReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogExternalSharingReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExternalSharingReportFailedDetails(arg)
        case .noExpirationLinkGenCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogNoExpirationLinkGenCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoExpirationLinkGenCreateReportDetails(arg)
        case .noExpirationLinkGenReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogNoExpirationLinkGenReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoExpirationLinkGenReportFailedDetails(arg)
        case .noPasswordLinkGenCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkGenCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoPasswordLinkGenCreateReportDetails(arg)
        case .noPasswordLinkGenReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkGenReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoPasswordLinkGenReportFailedDetails(arg)
        case .noPasswordLinkViewCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkViewCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoPasswordLinkViewCreateReportDetails(arg)
        case .noPasswordLinkViewReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkViewReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoPasswordLinkViewReportFailedDetails(arg)
        case .outdatedLinkViewCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogOutdatedLinkViewCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsOutdatedLinkViewCreateReportDetails(arg)
        case .outdatedLinkViewReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogOutdatedLinkViewReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsOutdatedLinkViewReportFailedDetails(arg)
        case .paperAdminExportStartDetails(let swiftArg):
            let arg = DBXTeamLogPaperAdminExportStartDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperAdminExportStartDetails(arg)
        case .ransomwareAlertCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogRansomwareAlertCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRansomwareAlertCreateReportDetails(arg)
        case .ransomwareAlertCreateReportFailedDetails(let swiftArg):
            let arg = DBXTeamLogRansomwareAlertCreateReportFailedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRansomwareAlertCreateReportFailedDetails(arg)
        case .smartSyncCreateAdminPrivilegeReportDetails(let swiftArg):
            let arg = DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSmartSyncCreateAdminPrivilegeReportDetails(arg)
        case .teamActivityCreateReportDetails(let swiftArg):
            let arg = DBXTeamLogTeamActivityCreateReportDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamActivityCreateReportDetails(arg)
        case .teamActivityCreateReportFailDetails(let swiftArg):
            let arg = DBXTeamLogTeamActivityCreateReportFailDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamActivityCreateReportFailDetails(arg)
        case .collectionShareDetails(let swiftArg):
            let arg = DBXTeamLogCollectionShareDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsCollectionShareDetails(arg)
        case .fileTransfersFileAddDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersFileAddDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersFileAddDetails(arg)
        case .fileTransfersTransferDeleteDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersTransferDeleteDetails(arg)
        case .fileTransfersTransferDownloadDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersTransferDownloadDetails(arg)
        case .fileTransfersTransferSendDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferSendDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersTransferSendDetails(arg)
        case .fileTransfersTransferViewDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersTransferViewDetails(arg)
        case .noteAclInviteOnlyDetails(let swiftArg):
            let arg = DBXTeamLogNoteAclInviteOnlyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoteAclInviteOnlyDetails(arg)
        case .noteAclLinkDetails(let swiftArg):
            let arg = DBXTeamLogNoteAclLinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoteAclLinkDetails(arg)
        case .noteAclTeamLinkDetails(let swiftArg):
            let arg = DBXTeamLogNoteAclTeamLinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoteAclTeamLinkDetails(arg)
        case .noteSharedDetails(let swiftArg):
            let arg = DBXTeamLogNoteSharedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoteSharedDetails(arg)
        case .noteShareReceiveDetails(let swiftArg):
            let arg = DBXTeamLogNoteShareReceiveDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNoteShareReceiveDetails(arg)
        case .openNoteSharedDetails(let swiftArg):
            let arg = DBXTeamLogOpenNoteSharedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsOpenNoteSharedDetails(arg)
        case .replayFileSharedLinkCreatedDetails(let swiftArg):
            let arg = DBXTeamLogReplayFileSharedLinkCreatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsReplayFileSharedLinkCreatedDetails(arg)
        case .replayFileSharedLinkModifiedDetails(let swiftArg):
            let arg = DBXTeamLogReplayFileSharedLinkModifiedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsReplayFileSharedLinkModifiedDetails(arg)
        case .replayProjectTeamAddDetails(let swiftArg):
            let arg = DBXTeamLogReplayProjectTeamAddDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsReplayProjectTeamAddDetails(arg)
        case .replayProjectTeamDeleteDetails(let swiftArg):
            let arg = DBXTeamLogReplayProjectTeamDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsReplayProjectTeamDeleteDetails(arg)
        case .sfAddGroupDetails(let swiftArg):
            let arg = DBXTeamLogSfAddGroupDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfAddGroupDetails(arg)
        case .sfAllowNonMembersToViewSharedLinksDetails(let swiftArg):
            let arg = DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfAllowNonMembersToViewSharedLinksDetails(arg)
        case .sfExternalInviteWarnDetails(let swiftArg):
            let arg = DBXTeamLogSfExternalInviteWarnDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfExternalInviteWarnDetails(arg)
        case .sfFbInviteDetails(let swiftArg):
            let arg = DBXTeamLogSfFbInviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfFbInviteDetails(arg)
        case .sfFbInviteChangeRoleDetails(let swiftArg):
            let arg = DBXTeamLogSfFbInviteChangeRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfFbInviteChangeRoleDetails(arg)
        case .sfFbUninviteDetails(let swiftArg):
            let arg = DBXTeamLogSfFbUninviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfFbUninviteDetails(arg)
        case .sfInviteGroupDetails(let swiftArg):
            let arg = DBXTeamLogSfInviteGroupDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfInviteGroupDetails(arg)
        case .sfTeamGrantAccessDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamGrantAccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamGrantAccessDetails(arg)
        case .sfTeamInviteDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamInviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamInviteDetails(arg)
        case .sfTeamInviteChangeRoleDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamInviteChangeRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamInviteChangeRoleDetails(arg)
        case .sfTeamJoinDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamJoinDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamJoinDetails(arg)
        case .sfTeamJoinFromOobLinkDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamJoinFromOobLinkDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamJoinFromOobLinkDetails(arg)
        case .sfTeamUninviteDetails(let swiftArg):
            let arg = DBXTeamLogSfTeamUninviteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSfTeamUninviteDetails(arg)
        case .sharedContentAddInviteesDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentAddInviteesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentAddInviteesDetails(arg)
        case .sharedContentAddLinkExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentAddLinkExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentAddLinkExpiryDetails(arg)
        case .sharedContentAddLinkPasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentAddLinkPasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentAddLinkPasswordDetails(arg)
        case .sharedContentAddMemberDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentAddMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentAddMemberDetails(arg)
        case .sharedContentChangeDownloadsPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeDownloadsPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeDownloadsPolicyDetails(arg)
        case .sharedContentChangeInviteeRoleDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeInviteeRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeInviteeRoleDetails(arg)
        case .sharedContentChangeLinkAudienceDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkAudienceDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeLinkAudienceDetails(arg)
        case .sharedContentChangeLinkExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeLinkExpiryDetails(arg)
        case .sharedContentChangeLinkPasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkPasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeLinkPasswordDetails(arg)
        case .sharedContentChangeMemberRoleDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeMemberRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeMemberRoleDetails(arg)
        case .sharedContentChangeViewerInfoPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeViewerInfoPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentChangeViewerInfoPolicyDetails(arg)
        case .sharedContentClaimInvitationDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentClaimInvitationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentClaimInvitationDetails(arg)
        case .sharedContentCopyDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentCopyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentCopyDetails(arg)
        case .sharedContentDownloadDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentDownloadDetails(arg)
        case .sharedContentRelinquishMembershipDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRelinquishMembershipDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRelinquishMembershipDetails(arg)
        case .sharedContentRemoveInviteesDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveInviteesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRemoveInviteesDetails(arg)
        case .sharedContentRemoveLinkExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveLinkExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRemoveLinkExpiryDetails(arg)
        case .sharedContentRemoveLinkPasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveLinkPasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRemoveLinkPasswordDetails(arg)
        case .sharedContentRemoveMemberDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRemoveMemberDetails(arg)
        case .sharedContentRequestAccessDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRequestAccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRequestAccessDetails(arg)
        case .sharedContentRestoreInviteesDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRestoreInviteesDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRestoreInviteesDetails(arg)
        case .sharedContentRestoreMemberDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentRestoreMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentRestoreMemberDetails(arg)
        case .sharedContentUnshareDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentUnshareDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentUnshareDetails(arg)
        case .sharedContentViewDetails(let swiftArg):
            let arg = DBXTeamLogSharedContentViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedContentViewDetails(arg)
        case .sharedFolderChangeLinkPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeLinkPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderChangeLinkPolicyDetails(arg)
        case .sharedFolderChangeMembersInheritancePolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderChangeMembersInheritancePolicyDetails(arg)
        case .sharedFolderChangeMembersManagementPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderChangeMembersManagementPolicyDetails(arg)
        case .sharedFolderChangeMembersPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderChangeMembersPolicyDetails(arg)
        case .sharedFolderCreateDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderCreateDetails(arg)
        case .sharedFolderDeclineInvitationDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderDeclineInvitationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderDeclineInvitationDetails(arg)
        case .sharedFolderMountDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderMountDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderMountDetails(arg)
        case .sharedFolderNestDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderNestDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderNestDetails(arg)
        case .sharedFolderTransferOwnershipDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderTransferOwnershipDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderTransferOwnershipDetails(arg)
        case .sharedFolderUnmountDetails(let swiftArg):
            let arg = DBXTeamLogSharedFolderUnmountDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedFolderUnmountDetails(arg)
        case .sharedLinkAddExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkAddExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkAddExpiryDetails(arg)
        case .sharedLinkChangeExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkChangeExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkChangeExpiryDetails(arg)
        case .sharedLinkChangeVisibilityDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkChangeVisibilityDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkChangeVisibilityDetails(arg)
        case .sharedLinkCopyDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkCopyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkCopyDetails(arg)
        case .sharedLinkCreateDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkCreateDetails(arg)
        case .sharedLinkDisableDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkDisableDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkDisableDetails(arg)
        case .sharedLinkDownloadDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkDownloadDetails(arg)
        case .sharedLinkRemoveExpiryDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkRemoveExpiryDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkRemoveExpiryDetails(arg)
        case .sharedLinkSettingsAddExpirationDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAddExpirationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsAddExpirationDetails(arg)
        case .sharedLinkSettingsAddPasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAddPasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsAddPasswordDetails(arg)
        case .sharedLinkSettingsAllowDownloadDisabledDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails(arg)
        case .sharedLinkSettingsAllowDownloadEnabledDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails(arg)
        case .sharedLinkSettingsChangeAudienceDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangeAudienceDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsChangeAudienceDetails(arg)
        case .sharedLinkSettingsChangeExpirationDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangeExpirationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsChangeExpirationDetails(arg)
        case .sharedLinkSettingsChangePasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangePasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsChangePasswordDetails(arg)
        case .sharedLinkSettingsRemoveExpirationDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsRemoveExpirationDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsRemoveExpirationDetails(arg)
        case .sharedLinkSettingsRemovePasswordDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsRemovePasswordDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkSettingsRemovePasswordDetails(arg)
        case .sharedLinkShareDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkShareDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkShareDetails(arg)
        case .sharedLinkViewDetails(let swiftArg):
            let arg = DBXTeamLogSharedLinkViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedLinkViewDetails(arg)
        case .sharedNoteOpenedDetails(let swiftArg):
            let arg = DBXTeamLogSharedNoteOpenedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharedNoteOpenedDetails(arg)
        case .shmodelDisableDownloadsDetails(let swiftArg):
            let arg = DBXTeamLogShmodelDisableDownloadsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShmodelDisableDownloadsDetails(arg)
        case .shmodelEnableDownloadsDetails(let swiftArg):
            let arg = DBXTeamLogShmodelEnableDownloadsDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShmodelEnableDownloadsDetails(arg)
        case .shmodelGroupShareDetails(let swiftArg):
            let arg = DBXTeamLogShmodelGroupShareDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShmodelGroupShareDetails(arg)
        case .showcaseAccessGrantedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseAccessGrantedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseAccessGrantedDetails(arg)
        case .showcaseAddMemberDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseAddMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseAddMemberDetails(arg)
        case .showcaseArchivedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseArchivedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseArchivedDetails(arg)
        case .showcaseCreatedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseCreatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseCreatedDetails(arg)
        case .showcaseDeleteCommentDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseDeleteCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseDeleteCommentDetails(arg)
        case .showcaseEditedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseEditedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseEditedDetails(arg)
        case .showcaseEditCommentDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseEditCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseEditCommentDetails(arg)
        case .showcaseFileAddedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseFileAddedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseFileAddedDetails(arg)
        case .showcaseFileDownloadDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseFileDownloadDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseFileDownloadDetails(arg)
        case .showcaseFileRemovedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseFileRemovedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseFileRemovedDetails(arg)
        case .showcaseFileViewDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseFileViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseFileViewDetails(arg)
        case .showcasePermanentlyDeletedDetails(let swiftArg):
            let arg = DBXTeamLogShowcasePermanentlyDeletedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcasePermanentlyDeletedDetails(arg)
        case .showcasePostCommentDetails(let swiftArg):
            let arg = DBXTeamLogShowcasePostCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcasePostCommentDetails(arg)
        case .showcaseRemoveMemberDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseRemoveMemberDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseRemoveMemberDetails(arg)
        case .showcaseRenamedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseRenamedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseRenamedDetails(arg)
        case .showcaseRequestAccessDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseRequestAccessDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseRequestAccessDetails(arg)
        case .showcaseResolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseResolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseResolveCommentDetails(arg)
        case .showcaseRestoredDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseRestoredDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseRestoredDetails(arg)
        case .showcaseTrashedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseTrashedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseTrashedDetails(arg)
        case .showcaseTrashedDeprecatedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseTrashedDeprecatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseTrashedDeprecatedDetails(arg)
        case .showcaseUnresolveCommentDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseUnresolveCommentDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseUnresolveCommentDetails(arg)
        case .showcaseUntrashedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseUntrashedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseUntrashedDetails(arg)
        case .showcaseUntrashedDeprecatedDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseUntrashedDeprecatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseUntrashedDeprecatedDetails(arg)
        case .showcaseViewDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseViewDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseViewDetails(arg)
        case .ssoAddCertDetails(let swiftArg):
            let arg = DBXTeamLogSsoAddCertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoAddCertDetails(arg)
        case .ssoAddLoginUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoAddLoginUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoAddLoginUrlDetails(arg)
        case .ssoAddLogoutUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoAddLogoutUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoAddLogoutUrlDetails(arg)
        case .ssoChangeCertDetails(let swiftArg):
            let arg = DBXTeamLogSsoChangeCertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoChangeCertDetails(arg)
        case .ssoChangeLoginUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoChangeLoginUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoChangeLoginUrlDetails(arg)
        case .ssoChangeLogoutUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoChangeLogoutUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoChangeLogoutUrlDetails(arg)
        case .ssoChangeSamlIdentityModeDetails(let swiftArg):
            let arg = DBXTeamLogSsoChangeSamlIdentityModeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoChangeSamlIdentityModeDetails(arg)
        case .ssoRemoveCertDetails(let swiftArg):
            let arg = DBXTeamLogSsoRemoveCertDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoRemoveCertDetails(arg)
        case .ssoRemoveLoginUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoRemoveLoginUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoRemoveLoginUrlDetails(arg)
        case .ssoRemoveLogoutUrlDetails(let swiftArg):
            let arg = DBXTeamLogSsoRemoveLogoutUrlDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoRemoveLogoutUrlDetails(arg)
        case .teamFolderChangeStatusDetails(let swiftArg):
            let arg = DBXTeamLogTeamFolderChangeStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamFolderChangeStatusDetails(arg)
        case .teamFolderCreateDetails(let swiftArg):
            let arg = DBXTeamLogTeamFolderCreateDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamFolderCreateDetails(arg)
        case .teamFolderDowngradeDetails(let swiftArg):
            let arg = DBXTeamLogTeamFolderDowngradeDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamFolderDowngradeDetails(arg)
        case .teamFolderPermanentlyDeleteDetails(let swiftArg):
            let arg = DBXTeamLogTeamFolderPermanentlyDeleteDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamFolderPermanentlyDeleteDetails(arg)
        case .teamFolderRenameDetails(let swiftArg):
            let arg = DBXTeamLogTeamFolderRenameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamFolderRenameDetails(arg)
        case .teamSelectiveSyncSettingsChangedDetails(let swiftArg):
            let arg = DBXTeamLogTeamSelectiveSyncSettingsChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamSelectiveSyncSettingsChangedDetails(arg)
        case .accountCaptureChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogAccountCaptureChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAccountCaptureChangePolicyDetails(arg)
        case .adminEmailRemindersChangedDetails(let swiftArg):
            let arg = DBXTeamLogAdminEmailRemindersChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAdminEmailRemindersChangedDetails(arg)
        case .allowDownloadDisabledDetails(let swiftArg):
            let arg = DBXTeamLogAllowDownloadDisabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAllowDownloadDisabledDetails(arg)
        case .allowDownloadEnabledDetails(let swiftArg):
            let arg = DBXTeamLogAllowDownloadEnabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAllowDownloadEnabledDetails(arg)
        case .appPermissionsChangedDetails(let swiftArg):
            let arg = DBXTeamLogAppPermissionsChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsAppPermissionsChangedDetails(arg)
        case .cameraUploadsPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogCameraUploadsPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsCameraUploadsPolicyChangedDetails(arg)
        case .captureTranscriptPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogCaptureTranscriptPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsCaptureTranscriptPolicyChangedDetails(arg)
        case .classificationChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogClassificationChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsClassificationChangePolicyDetails(arg)
        case .computerBackupPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogComputerBackupPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsComputerBackupPolicyChangedDetails(arg)
        case .contentAdministrationPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogContentAdministrationPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsContentAdministrationPolicyChangedDetails(arg)
        case .dataPlacementRestrictionChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogDataPlacementRestrictionChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDataPlacementRestrictionChangePolicyDetails(arg)
        case .dataPlacementRestrictionSatisfyPolicyDetails(let swiftArg):
            let arg = DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDataPlacementRestrictionSatisfyPolicyDetails(arg)
        case .deviceApprovalsAddExceptionDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsAddExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsAddExceptionDetails(arg)
        case .deviceApprovalsChangeDesktopPolicyDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsChangeDesktopPolicyDetails(arg)
        case .deviceApprovalsChangeMobilePolicyDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsChangeMobilePolicyDetails(arg)
        case .deviceApprovalsChangeOverageActionDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeOverageActionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsChangeOverageActionDetails(arg)
        case .deviceApprovalsChangeUnlinkActionDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsChangeUnlinkActionDetails(arg)
        case .deviceApprovalsRemoveExceptionDetails(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsRemoveExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDeviceApprovalsRemoveExceptionDetails(arg)
        case .directoryRestrictionsAddMembersDetails(let swiftArg):
            let arg = DBXTeamLogDirectoryRestrictionsAddMembersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDirectoryRestrictionsAddMembersDetails(arg)
        case .directoryRestrictionsRemoveMembersDetails(let swiftArg):
            let arg = DBXTeamLogDirectoryRestrictionsRemoveMembersDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDirectoryRestrictionsRemoveMembersDetails(arg)
        case .dropboxPasswordsPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDropboxPasswordsPolicyChangedDetails(arg)
        case .emailIngestPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogEmailIngestPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmailIngestPolicyChangedDetails(arg)
        case .emmAddExceptionDetails(let swiftArg):
            let arg = DBXTeamLogEmmAddExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmAddExceptionDetails(arg)
        case .emmChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogEmmChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmChangePolicyDetails(arg)
        case .emmRemoveExceptionDetails(let swiftArg):
            let arg = DBXTeamLogEmmRemoveExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEmmRemoveExceptionDetails(arg)
        case .extendedVersionHistoryChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogExtendedVersionHistoryChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExtendedVersionHistoryChangePolicyDetails(arg)
        case .externalDriveBackupPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsExternalDriveBackupPolicyChangedDetails(arg)
        case .fileCommentsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogFileCommentsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileCommentsChangePolicyDetails(arg)
        case .fileLockingPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogFileLockingPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileLockingPolicyChangedDetails(arg)
        case .fileProviderMigrationPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogFileProviderMigrationPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileProviderMigrationPolicyChangedDetails(arg)
        case .fileRequestsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestsChangePolicyDetails(arg)
        case .fileRequestsEmailsEnabledDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestsEmailsEnabledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestsEmailsEnabledDetails(arg)
        case .fileRequestsEmailsRestrictedToTeamOnlyDetails(let swiftArg):
            let arg = DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails(arg)
        case .fileTransfersPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogFileTransfersPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFileTransfersPolicyChangedDetails(arg)
        case .folderLinkRestrictionPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogFolderLinkRestrictionPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsFolderLinkRestrictionPolicyChangedDetails(arg)
        case .googleSsoChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogGoogleSsoChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGoogleSsoChangePolicyDetails(arg)
        case .groupUserManagementChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogGroupUserManagementChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGroupUserManagementChangePolicyDetails(arg)
        case .integrationPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogIntegrationPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsIntegrationPolicyChangedDetails(arg)
        case .inviteAcceptanceEmailPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsInviteAcceptanceEmailPolicyChangedDetails(arg)
        case .memberRequestsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogMemberRequestsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberRequestsChangePolicyDetails(arg)
        case .memberSendInvitePolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogMemberSendInvitePolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSendInvitePolicyChangedDetails(arg)
        case .memberSpaceLimitsAddExceptionDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsAddExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsAddExceptionDetails(arg)
        case .memberSpaceLimitsChangeCapsTypePolicyDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails(arg)
        case .memberSpaceLimitsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsChangePolicyDetails(arg)
        case .memberSpaceLimitsRemoveExceptionDetails(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSpaceLimitsRemoveExceptionDetails(arg)
        case .memberSuggestionsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogMemberSuggestionsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMemberSuggestionsChangePolicyDetails(arg)
        case .microsoftOfficeAddinChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMicrosoftOfficeAddinChangePolicyDetails(arg)
        case .networkControlChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogNetworkControlChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsNetworkControlChangePolicyDetails(arg)
        case .paperChangeDeploymentPolicyDetails(let swiftArg):
            let arg = DBXTeamLogPaperChangeDeploymentPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperChangeDeploymentPolicyDetails(arg)
        case .paperChangeMemberLinkPolicyDetails(let swiftArg):
            let arg = DBXTeamLogPaperChangeMemberLinkPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperChangeMemberLinkPolicyDetails(arg)
        case .paperChangeMemberPolicyDetails(let swiftArg):
            let arg = DBXTeamLogPaperChangeMemberPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperChangeMemberPolicyDetails(arg)
        case .paperChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogPaperChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperChangePolicyDetails(arg)
        case .paperDefaultFolderPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDefaultFolderPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDefaultFolderPolicyChangedDetails(arg)
        case .paperDesktopPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogPaperDesktopPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperDesktopPolicyChangedDetails(arg)
        case .paperEnabledUsersGroupAdditionDetails(let swiftArg):
            let arg = DBXTeamLogPaperEnabledUsersGroupAdditionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperEnabledUsersGroupAdditionDetails(arg)
        case .paperEnabledUsersGroupRemovalDetails(let swiftArg):
            let arg = DBXTeamLogPaperEnabledUsersGroupRemovalDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPaperEnabledUsersGroupRemovalDetails(arg)
        case .passwordStrengthRequirementsChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPasswordStrengthRequirementsChangePolicyDetails(arg)
        case .permanentDeleteChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogPermanentDeleteChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsPermanentDeleteChangePolicyDetails(arg)
        case .resellerSupportChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogResellerSupportChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsResellerSupportChangePolicyDetails(arg)
        case .rewindPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogRewindPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsRewindPolicyChangedDetails(arg)
        case .sendForSignaturePolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogSendForSignaturePolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSendForSignaturePolicyChangedDetails(arg)
        case .sharingChangeFolderJoinPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeFolderJoinPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeFolderJoinPolicyDetails(arg)
        case .sharingChangeLinkAllowChangeExpirationPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails(arg)
        case .sharingChangeLinkDefaultExpirationPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails(arg)
        case .sharingChangeLinkEnforcePasswordPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails(arg)
        case .sharingChangeLinkPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeLinkPolicyDetails(arg)
        case .sharingChangeMemberPolicyDetails(let swiftArg):
            let arg = DBXTeamLogSharingChangeMemberPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSharingChangeMemberPolicyDetails(arg)
        case .showcaseChangeDownloadPolicyDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeDownloadPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseChangeDownloadPolicyDetails(arg)
        case .showcaseChangeEnabledPolicyDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeEnabledPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseChangeEnabledPolicyDetails(arg)
        case .showcaseChangeExternalSharingPolicyDetails(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeExternalSharingPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsShowcaseChangeExternalSharingPolicyDetails(arg)
        case .smarterSmartSyncPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogSmarterSmartSyncPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSmarterSmartSyncPolicyChangedDetails(arg)
        case .smartSyncChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogSmartSyncChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSmartSyncChangePolicyDetails(arg)
        case .smartSyncNotOptOutDetails(let swiftArg):
            let arg = DBXTeamLogSmartSyncNotOptOutDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSmartSyncNotOptOutDetails(arg)
        case .smartSyncOptOutDetails(let swiftArg):
            let arg = DBXTeamLogSmartSyncOptOutDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSmartSyncOptOutDetails(arg)
        case .ssoChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogSsoChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsSsoChangePolicyDetails(arg)
        case .teamBrandingPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogTeamBrandingPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamBrandingPolicyChangedDetails(arg)
        case .teamExtensionsPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogTeamExtensionsPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamExtensionsPolicyChangedDetails(arg)
        case .teamSelectiveSyncPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogTeamSelectiveSyncPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamSelectiveSyncPolicyChangedDetails(arg)
        case .teamSharingWhitelistSubjectsChangedDetails(let swiftArg):
            let arg = DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamSharingWhitelistSubjectsChangedDetails(arg)
        case .tfaAddExceptionDetails(let swiftArg):
            let arg = DBXTeamLogTfaAddExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaAddExceptionDetails(arg)
        case .tfaChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogTfaChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaChangePolicyDetails(arg)
        case .tfaRemoveExceptionDetails(let swiftArg):
            let arg = DBXTeamLogTfaRemoveExceptionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaRemoveExceptionDetails(arg)
        case .twoAccountChangePolicyDetails(let swiftArg):
            let arg = DBXTeamLogTwoAccountChangePolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTwoAccountChangePolicyDetails(arg)
        case .viewerInfoPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogViewerInfoPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsViewerInfoPolicyChangedDetails(arg)
        case .watermarkingPolicyChangedDetails(let swiftArg):
            let arg = DBXTeamLogWatermarkingPolicyChangedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsWatermarkingPolicyChangedDetails(arg)
        case .webSessionsChangeActiveSessionLimitDetails(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeActiveSessionLimitDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsWebSessionsChangeActiveSessionLimitDetails(arg)
        case .webSessionsChangeFixedLengthPolicyDetails(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsWebSessionsChangeFixedLengthPolicyDetails(arg)
        case .webSessionsChangeIdleLengthPolicyDetails(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsWebSessionsChangeIdleLengthPolicyDetails(arg)
        case .dataResidencyMigrationRequestSuccessfulDetails(let swiftArg):
            let arg = DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDataResidencyMigrationRequestSuccessfulDetails(arg)
        case .dataResidencyMigrationRequestUnsuccessfulDetails(let swiftArg):
            let arg = DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails(arg)
        case .teamMergeFromDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeFromDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeFromDetails(arg)
        case .teamMergeToDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeToDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeToDetails(arg)
        case .teamProfileAddBackgroundDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileAddBackgroundDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileAddBackgroundDetails(arg)
        case .teamProfileAddLogoDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileAddLogoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileAddLogoDetails(arg)
        case .teamProfileChangeBackgroundDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeBackgroundDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileChangeBackgroundDetails(arg)
        case .teamProfileChangeDefaultLanguageDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeDefaultLanguageDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileChangeDefaultLanguageDetails(arg)
        case .teamProfileChangeLogoDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeLogoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileChangeLogoDetails(arg)
        case .teamProfileChangeNameDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeNameDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileChangeNameDetails(arg)
        case .teamProfileRemoveBackgroundDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileRemoveBackgroundDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileRemoveBackgroundDetails(arg)
        case .teamProfileRemoveLogoDetails(let swiftArg):
            let arg = DBXTeamLogTeamProfileRemoveLogoDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamProfileRemoveLogoDetails(arg)
        case .tfaAddBackupPhoneDetails(let swiftArg):
            let arg = DBXTeamLogTfaAddBackupPhoneDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaAddBackupPhoneDetails(arg)
        case .tfaAddSecurityKeyDetails(let swiftArg):
            let arg = DBXTeamLogTfaAddSecurityKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaAddSecurityKeyDetails(arg)
        case .tfaChangeBackupPhoneDetails(let swiftArg):
            let arg = DBXTeamLogTfaChangeBackupPhoneDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaChangeBackupPhoneDetails(arg)
        case .tfaChangeStatusDetails(let swiftArg):
            let arg = DBXTeamLogTfaChangeStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaChangeStatusDetails(arg)
        case .tfaRemoveBackupPhoneDetails(let swiftArg):
            let arg = DBXTeamLogTfaRemoveBackupPhoneDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaRemoveBackupPhoneDetails(arg)
        case .tfaRemoveSecurityKeyDetails(let swiftArg):
            let arg = DBXTeamLogTfaRemoveSecurityKeyDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaRemoveSecurityKeyDetails(arg)
        case .tfaResetDetails(let swiftArg):
            let arg = DBXTeamLogTfaResetDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTfaResetDetails(arg)
        case .changedEnterpriseAdminRoleDetails(let swiftArg):
            let arg = DBXTeamLogChangedEnterpriseAdminRoleDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsChangedEnterpriseAdminRoleDetails(arg)
        case .changedEnterpriseConnectedTeamStatusDetails(let swiftArg):
            let arg = DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsChangedEnterpriseConnectedTeamStatusDetails(arg)
        case .endedEnterpriseAdminSessionDetails(let swiftArg):
            let arg = DBXTeamLogEndedEnterpriseAdminSessionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDetails(arg)
        case .endedEnterpriseAdminSessionDeprecatedDetails(let swiftArg):
            let arg = DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails(arg)
        case .enterpriseSettingsLockingDetails(let swiftArg):
            let arg = DBXTeamLogEnterpriseSettingsLockingDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsEnterpriseSettingsLockingDetails(arg)
        case .guestAdminChangeStatusDetails(let swiftArg):
            let arg = DBXTeamLogGuestAdminChangeStatusDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsGuestAdminChangeStatusDetails(arg)
        case .startedEnterpriseAdminSessionDetails(let swiftArg):
            let arg = DBXTeamLogStartedEnterpriseAdminSessionDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsStartedEnterpriseAdminSessionDetails(arg)
        case .teamMergeRequestAcceptedDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestAcceptedDetails(arg)
        case .teamMergeRequestAcceptedShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestAcceptedShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails(arg)
        case .teamMergeRequestAutoCanceledDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAutoCanceledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestAutoCanceledDetails(arg)
        case .teamMergeRequestCanceledDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestCanceledDetails(arg)
        case .teamMergeRequestCanceledShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestCanceledShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails(arg)
        case .teamMergeRequestExpiredDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestExpiredDetails(arg)
        case .teamMergeRequestExpiredShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestExpiredShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails(arg)
        case .teamMergeRequestRejectedShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestRejectedShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails(arg)
        case .teamMergeRequestReminderDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestReminderDetails(arg)
        case .teamMergeRequestReminderShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestReminderShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails(arg)
        case .teamMergeRequestRevokedDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRevokedDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestRevokedDetails(arg)
        case .teamMergeRequestSentShownToPrimaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails(arg)
        case .teamMergeRequestSentShownToSecondaryTeamDetails(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails(arg)
        case .missingDetails(let swiftArg):
            let arg = DBXTeamLogMissingDetails(swift: swiftArg)
            return DBXTeamLogEventDetailsMissingDetails(arg)
        case .other:
            return DBXTeamLogEventDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminAlertingAlertStateChangedDetails: DBXTeamLogEventDetailsAdminAlertingAlertStateChangedDetails? {
        self as? DBXTeamLogEventDetailsAdminAlertingAlertStateChangedDetails
    }

    @objc
    public var asAdminAlertingChangedAlertConfigDetails: DBXTeamLogEventDetailsAdminAlertingChangedAlertConfigDetails? {
        self as? DBXTeamLogEventDetailsAdminAlertingChangedAlertConfigDetails
    }

    @objc
    public var asAdminAlertingTriggeredAlertDetails: DBXTeamLogEventDetailsAdminAlertingTriggeredAlertDetails? {
        self as? DBXTeamLogEventDetailsAdminAlertingTriggeredAlertDetails
    }

    @objc
    public var asRansomwareRestoreProcessCompletedDetails: DBXTeamLogEventDetailsRansomwareRestoreProcessCompletedDetails? {
        self as? DBXTeamLogEventDetailsRansomwareRestoreProcessCompletedDetails
    }

    @objc
    public var asRansomwareRestoreProcessStartedDetails: DBXTeamLogEventDetailsRansomwareRestoreProcessStartedDetails? {
        self as? DBXTeamLogEventDetailsRansomwareRestoreProcessStartedDetails
    }

    @objc
    public var asAppBlockedByPermissionsDetails: DBXTeamLogEventDetailsAppBlockedByPermissionsDetails? {
        self as? DBXTeamLogEventDetailsAppBlockedByPermissionsDetails
    }

    @objc
    public var asAppLinkTeamDetails: DBXTeamLogEventDetailsAppLinkTeamDetails? {
        self as? DBXTeamLogEventDetailsAppLinkTeamDetails
    }

    @objc
    public var asAppLinkUserDetails: DBXTeamLogEventDetailsAppLinkUserDetails? {
        self as? DBXTeamLogEventDetailsAppLinkUserDetails
    }

    @objc
    public var asAppUnlinkTeamDetails: DBXTeamLogEventDetailsAppUnlinkTeamDetails? {
        self as? DBXTeamLogEventDetailsAppUnlinkTeamDetails
    }

    @objc
    public var asAppUnlinkUserDetails: DBXTeamLogEventDetailsAppUnlinkUserDetails? {
        self as? DBXTeamLogEventDetailsAppUnlinkUserDetails
    }

    @objc
    public var asIntegrationConnectedDetails: DBXTeamLogEventDetailsIntegrationConnectedDetails? {
        self as? DBXTeamLogEventDetailsIntegrationConnectedDetails
    }

    @objc
    public var asIntegrationDisconnectedDetails: DBXTeamLogEventDetailsIntegrationDisconnectedDetails? {
        self as? DBXTeamLogEventDetailsIntegrationDisconnectedDetails
    }

    @objc
    public var asFileAddCommentDetails: DBXTeamLogEventDetailsFileAddCommentDetails? {
        self as? DBXTeamLogEventDetailsFileAddCommentDetails
    }

    @objc
    public var asFileChangeCommentSubscriptionDetails: DBXTeamLogEventDetailsFileChangeCommentSubscriptionDetails? {
        self as? DBXTeamLogEventDetailsFileChangeCommentSubscriptionDetails
    }

    @objc
    public var asFileDeleteCommentDetails: DBXTeamLogEventDetailsFileDeleteCommentDetails? {
        self as? DBXTeamLogEventDetailsFileDeleteCommentDetails
    }

    @objc
    public var asFileEditCommentDetails: DBXTeamLogEventDetailsFileEditCommentDetails? {
        self as? DBXTeamLogEventDetailsFileEditCommentDetails
    }

    @objc
    public var asFileLikeCommentDetails: DBXTeamLogEventDetailsFileLikeCommentDetails? {
        self as? DBXTeamLogEventDetailsFileLikeCommentDetails
    }

    @objc
    public var asFileResolveCommentDetails: DBXTeamLogEventDetailsFileResolveCommentDetails? {
        self as? DBXTeamLogEventDetailsFileResolveCommentDetails
    }

    @objc
    public var asFileUnlikeCommentDetails: DBXTeamLogEventDetailsFileUnlikeCommentDetails? {
        self as? DBXTeamLogEventDetailsFileUnlikeCommentDetails
    }

    @objc
    public var asFileUnresolveCommentDetails: DBXTeamLogEventDetailsFileUnresolveCommentDetails? {
        self as? DBXTeamLogEventDetailsFileUnresolveCommentDetails
    }

    @objc
    public var asGovernancePolicyAddFoldersDetails: DBXTeamLogEventDetailsGovernancePolicyAddFoldersDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyAddFoldersDetails
    }

    @objc
    public var asGovernancePolicyAddFolderFailedDetails: DBXTeamLogEventDetailsGovernancePolicyAddFolderFailedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyAddFolderFailedDetails
    }

    @objc
    public var asGovernancePolicyContentDisposedDetails: DBXTeamLogEventDetailsGovernancePolicyContentDisposedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyContentDisposedDetails
    }

    @objc
    public var asGovernancePolicyCreateDetails: DBXTeamLogEventDetailsGovernancePolicyCreateDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyCreateDetails
    }

    @objc
    public var asGovernancePolicyDeleteDetails: DBXTeamLogEventDetailsGovernancePolicyDeleteDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyDeleteDetails
    }

    @objc
    public var asGovernancePolicyEditDetailsDetails: DBXTeamLogEventDetailsGovernancePolicyEditDetailsDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyEditDetailsDetails
    }

    @objc
    public var asGovernancePolicyEditDurationDetails: DBXTeamLogEventDetailsGovernancePolicyEditDurationDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyEditDurationDetails
    }

    @objc
    public var asGovernancePolicyExportCreatedDetails: DBXTeamLogEventDetailsGovernancePolicyExportCreatedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyExportCreatedDetails
    }

    @objc
    public var asGovernancePolicyExportRemovedDetails: DBXTeamLogEventDetailsGovernancePolicyExportRemovedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyExportRemovedDetails
    }

    @objc
    public var asGovernancePolicyRemoveFoldersDetails: DBXTeamLogEventDetailsGovernancePolicyRemoveFoldersDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyRemoveFoldersDetails
    }

    @objc
    public var asGovernancePolicyReportCreatedDetails: DBXTeamLogEventDetailsGovernancePolicyReportCreatedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyReportCreatedDetails
    }

    @objc
    public var asGovernancePolicyZipPartDownloadedDetails: DBXTeamLogEventDetailsGovernancePolicyZipPartDownloadedDetails? {
        self as? DBXTeamLogEventDetailsGovernancePolicyZipPartDownloadedDetails
    }

    @objc
    public var asLegalHoldsActivateAHoldDetails: DBXTeamLogEventDetailsLegalHoldsActivateAHoldDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsActivateAHoldDetails
    }

    @objc
    public var asLegalHoldsAddMembersDetails: DBXTeamLogEventDetailsLegalHoldsAddMembersDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsAddMembersDetails
    }

    @objc
    public var asLegalHoldsChangeHoldDetailsDetails: DBXTeamLogEventDetailsLegalHoldsChangeHoldDetailsDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsChangeHoldDetailsDetails
    }

    @objc
    public var asLegalHoldsChangeHoldNameDetails: DBXTeamLogEventDetailsLegalHoldsChangeHoldNameDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsChangeHoldNameDetails
    }

    @objc
    public var asLegalHoldsExportAHoldDetails: DBXTeamLogEventDetailsLegalHoldsExportAHoldDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsExportAHoldDetails
    }

    @objc
    public var asLegalHoldsExportCancelledDetails: DBXTeamLogEventDetailsLegalHoldsExportCancelledDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsExportCancelledDetails
    }

    @objc
    public var asLegalHoldsExportDownloadedDetails: DBXTeamLogEventDetailsLegalHoldsExportDownloadedDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsExportDownloadedDetails
    }

    @objc
    public var asLegalHoldsExportRemovedDetails: DBXTeamLogEventDetailsLegalHoldsExportRemovedDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsExportRemovedDetails
    }

    @objc
    public var asLegalHoldsReleaseAHoldDetails: DBXTeamLogEventDetailsLegalHoldsReleaseAHoldDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsReleaseAHoldDetails
    }

    @objc
    public var asLegalHoldsRemoveMembersDetails: DBXTeamLogEventDetailsLegalHoldsRemoveMembersDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsRemoveMembersDetails
    }

    @objc
    public var asLegalHoldsReportAHoldDetails: DBXTeamLogEventDetailsLegalHoldsReportAHoldDetails? {
        self as? DBXTeamLogEventDetailsLegalHoldsReportAHoldDetails
    }

    @objc
    public var asDeviceChangeIpDesktopDetails: DBXTeamLogEventDetailsDeviceChangeIpDesktopDetails? {
        self as? DBXTeamLogEventDetailsDeviceChangeIpDesktopDetails
    }

    @objc
    public var asDeviceChangeIpMobileDetails: DBXTeamLogEventDetailsDeviceChangeIpMobileDetails? {
        self as? DBXTeamLogEventDetailsDeviceChangeIpMobileDetails
    }

    @objc
    public var asDeviceChangeIpWebDetails: DBXTeamLogEventDetailsDeviceChangeIpWebDetails? {
        self as? DBXTeamLogEventDetailsDeviceChangeIpWebDetails
    }

    @objc
    public var asDeviceDeleteOnUnlinkFailDetails: DBXTeamLogEventDetailsDeviceDeleteOnUnlinkFailDetails? {
        self as? DBXTeamLogEventDetailsDeviceDeleteOnUnlinkFailDetails
    }

    @objc
    public var asDeviceDeleteOnUnlinkSuccessDetails: DBXTeamLogEventDetailsDeviceDeleteOnUnlinkSuccessDetails? {
        self as? DBXTeamLogEventDetailsDeviceDeleteOnUnlinkSuccessDetails
    }

    @objc
    public var asDeviceLinkFailDetails: DBXTeamLogEventDetailsDeviceLinkFailDetails? {
        self as? DBXTeamLogEventDetailsDeviceLinkFailDetails
    }

    @objc
    public var asDeviceLinkSuccessDetails: DBXTeamLogEventDetailsDeviceLinkSuccessDetails? {
        self as? DBXTeamLogEventDetailsDeviceLinkSuccessDetails
    }

    @objc
    public var asDeviceManagementDisabledDetails: DBXTeamLogEventDetailsDeviceManagementDisabledDetails? {
        self as? DBXTeamLogEventDetailsDeviceManagementDisabledDetails
    }

    @objc
    public var asDeviceManagementEnabledDetails: DBXTeamLogEventDetailsDeviceManagementEnabledDetails? {
        self as? DBXTeamLogEventDetailsDeviceManagementEnabledDetails
    }

    @objc
    public var asDeviceSyncBackupStatusChangedDetails: DBXTeamLogEventDetailsDeviceSyncBackupStatusChangedDetails? {
        self as? DBXTeamLogEventDetailsDeviceSyncBackupStatusChangedDetails
    }

    @objc
    public var asDeviceUnlinkDetails: DBXTeamLogEventDetailsDeviceUnlinkDetails? {
        self as? DBXTeamLogEventDetailsDeviceUnlinkDetails
    }

    @objc
    public var asDropboxPasswordsExportedDetails: DBXTeamLogEventDetailsDropboxPasswordsExportedDetails? {
        self as? DBXTeamLogEventDetailsDropboxPasswordsExportedDetails
    }

    @objc
    public var asDropboxPasswordsNewDeviceEnrolledDetails: DBXTeamLogEventDetailsDropboxPasswordsNewDeviceEnrolledDetails? {
        self as? DBXTeamLogEventDetailsDropboxPasswordsNewDeviceEnrolledDetails
    }

    @objc
    public var asEmmRefreshAuthTokenDetails: DBXTeamLogEventDetailsEmmRefreshAuthTokenDetails? {
        self as? DBXTeamLogEventDetailsEmmRefreshAuthTokenDetails
    }

    @objc
    public var asExternalDriveBackupEligibilityStatusCheckedDetails: DBXTeamLogEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails? {
        self as? DBXTeamLogEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails
    }

    @objc
    public var asExternalDriveBackupStatusChangedDetails: DBXTeamLogEventDetailsExternalDriveBackupStatusChangedDetails? {
        self as? DBXTeamLogEventDetailsExternalDriveBackupStatusChangedDetails
    }

    @objc
    public var asAccountCaptureChangeAvailabilityDetails: DBXTeamLogEventDetailsAccountCaptureChangeAvailabilityDetails? {
        self as? DBXTeamLogEventDetailsAccountCaptureChangeAvailabilityDetails
    }

    @objc
    public var asAccountCaptureMigrateAccountDetails: DBXTeamLogEventDetailsAccountCaptureMigrateAccountDetails? {
        self as? DBXTeamLogEventDetailsAccountCaptureMigrateAccountDetails
    }

    @objc
    public var asAccountCaptureNotificationEmailsSentDetails: DBXTeamLogEventDetailsAccountCaptureNotificationEmailsSentDetails? {
        self as? DBXTeamLogEventDetailsAccountCaptureNotificationEmailsSentDetails
    }

    @objc
    public var asAccountCaptureRelinquishAccountDetails: DBXTeamLogEventDetailsAccountCaptureRelinquishAccountDetails? {
        self as? DBXTeamLogEventDetailsAccountCaptureRelinquishAccountDetails
    }

    @objc
    public var asDisabledDomainInvitesDetails: DBXTeamLogEventDetailsDisabledDomainInvitesDetails? {
        self as? DBXTeamLogEventDetailsDisabledDomainInvitesDetails
    }

    @objc
    public var asDomainInvitesApproveRequestToJoinTeamDetails: DBXTeamLogEventDetailsDomainInvitesApproveRequestToJoinTeamDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesApproveRequestToJoinTeamDetails
    }

    @objc
    public var asDomainInvitesDeclineRequestToJoinTeamDetails: DBXTeamLogEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails
    }

    @objc
    public var asDomainInvitesEmailExistingUsersDetails: DBXTeamLogEventDetailsDomainInvitesEmailExistingUsersDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesEmailExistingUsersDetails
    }

    @objc
    public var asDomainInvitesRequestToJoinTeamDetails: DBXTeamLogEventDetailsDomainInvitesRequestToJoinTeamDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesRequestToJoinTeamDetails
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToNoDetails: DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToYesDetails: DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails? {
        self as? DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails
    }

    @objc
    public var asDomainVerificationAddDomainFailDetails: DBXTeamLogEventDetailsDomainVerificationAddDomainFailDetails? {
        self as? DBXTeamLogEventDetailsDomainVerificationAddDomainFailDetails
    }

    @objc
    public var asDomainVerificationAddDomainSuccessDetails: DBXTeamLogEventDetailsDomainVerificationAddDomainSuccessDetails? {
        self as? DBXTeamLogEventDetailsDomainVerificationAddDomainSuccessDetails
    }

    @objc
    public var asDomainVerificationRemoveDomainDetails: DBXTeamLogEventDetailsDomainVerificationRemoveDomainDetails? {
        self as? DBXTeamLogEventDetailsDomainVerificationRemoveDomainDetails
    }

    @objc
    public var asEnabledDomainInvitesDetails: DBXTeamLogEventDetailsEnabledDomainInvitesDetails? {
        self as? DBXTeamLogEventDetailsEnabledDomainInvitesDetails
    }

    @objc
    public var asTeamEncryptionKeyCancelKeyDeletionDetails: DBXTeamLogEventDetailsTeamEncryptionKeyCancelKeyDeletionDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyCancelKeyDeletionDetails
    }

    @objc
    public var asTeamEncryptionKeyCreateKeyDetails: DBXTeamLogEventDetailsTeamEncryptionKeyCreateKeyDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyCreateKeyDetails
    }

    @objc
    public var asTeamEncryptionKeyDeleteKeyDetails: DBXTeamLogEventDetailsTeamEncryptionKeyDeleteKeyDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyDeleteKeyDetails
    }

    @objc
    public var asTeamEncryptionKeyDisableKeyDetails: DBXTeamLogEventDetailsTeamEncryptionKeyDisableKeyDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyDisableKeyDetails
    }

    @objc
    public var asTeamEncryptionKeyEnableKeyDetails: DBXTeamLogEventDetailsTeamEncryptionKeyEnableKeyDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyEnableKeyDetails
    }

    @objc
    public var asTeamEncryptionKeyRotateKeyDetails: DBXTeamLogEventDetailsTeamEncryptionKeyRotateKeyDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyRotateKeyDetails
    }

    @objc
    public var asTeamEncryptionKeyScheduleKeyDeletionDetails: DBXTeamLogEventDetailsTeamEncryptionKeyScheduleKeyDeletionDetails? {
        self as? DBXTeamLogEventDetailsTeamEncryptionKeyScheduleKeyDeletionDetails
    }

    @objc
    public var asApplyNamingConventionDetails: DBXTeamLogEventDetailsApplyNamingConventionDetails? {
        self as? DBXTeamLogEventDetailsApplyNamingConventionDetails
    }

    @objc
    public var asCreateFolderDetails: DBXTeamLogEventDetailsCreateFolderDetails? {
        self as? DBXTeamLogEventDetailsCreateFolderDetails
    }

    @objc
    public var asFileAddDetails: DBXTeamLogEventDetailsFileAddDetails? {
        self as? DBXTeamLogEventDetailsFileAddDetails
    }

    @objc
    public var asFileAddFromAutomationDetails: DBXTeamLogEventDetailsFileAddFromAutomationDetails? {
        self as? DBXTeamLogEventDetailsFileAddFromAutomationDetails
    }

    @objc
    public var asFileCopyDetails: DBXTeamLogEventDetailsFileCopyDetails? {
        self as? DBXTeamLogEventDetailsFileCopyDetails
    }

    @objc
    public var asFileDeleteDetails: DBXTeamLogEventDetailsFileDeleteDetails? {
        self as? DBXTeamLogEventDetailsFileDeleteDetails
    }

    @objc
    public var asFileDownloadDetails: DBXTeamLogEventDetailsFileDownloadDetails? {
        self as? DBXTeamLogEventDetailsFileDownloadDetails
    }

    @objc
    public var asFileEditDetails: DBXTeamLogEventDetailsFileEditDetails? {
        self as? DBXTeamLogEventDetailsFileEditDetails
    }

    @objc
    public var asFileGetCopyReferenceDetails: DBXTeamLogEventDetailsFileGetCopyReferenceDetails? {
        self as? DBXTeamLogEventDetailsFileGetCopyReferenceDetails
    }

    @objc
    public var asFileLockingLockStatusChangedDetails: DBXTeamLogEventDetailsFileLockingLockStatusChangedDetails? {
        self as? DBXTeamLogEventDetailsFileLockingLockStatusChangedDetails
    }

    @objc
    public var asFileMoveDetails: DBXTeamLogEventDetailsFileMoveDetails? {
        self as? DBXTeamLogEventDetailsFileMoveDetails
    }

    @objc
    public var asFilePermanentlyDeleteDetails: DBXTeamLogEventDetailsFilePermanentlyDeleteDetails? {
        self as? DBXTeamLogEventDetailsFilePermanentlyDeleteDetails
    }

    @objc
    public var asFilePreviewDetails: DBXTeamLogEventDetailsFilePreviewDetails? {
        self as? DBXTeamLogEventDetailsFilePreviewDetails
    }

    @objc
    public var asFileRenameDetails: DBXTeamLogEventDetailsFileRenameDetails? {
        self as? DBXTeamLogEventDetailsFileRenameDetails
    }

    @objc
    public var asFileRestoreDetails: DBXTeamLogEventDetailsFileRestoreDetails? {
        self as? DBXTeamLogEventDetailsFileRestoreDetails
    }

    @objc
    public var asFileRevertDetails: DBXTeamLogEventDetailsFileRevertDetails? {
        self as? DBXTeamLogEventDetailsFileRevertDetails
    }

    @objc
    public var asFileRollbackChangesDetails: DBXTeamLogEventDetailsFileRollbackChangesDetails? {
        self as? DBXTeamLogEventDetailsFileRollbackChangesDetails
    }

    @objc
    public var asFileSaveCopyReferenceDetails: DBXTeamLogEventDetailsFileSaveCopyReferenceDetails? {
        self as? DBXTeamLogEventDetailsFileSaveCopyReferenceDetails
    }

    @objc
    public var asFolderOverviewDescriptionChangedDetails: DBXTeamLogEventDetailsFolderOverviewDescriptionChangedDetails? {
        self as? DBXTeamLogEventDetailsFolderOverviewDescriptionChangedDetails
    }

    @objc
    public var asFolderOverviewItemPinnedDetails: DBXTeamLogEventDetailsFolderOverviewItemPinnedDetails? {
        self as? DBXTeamLogEventDetailsFolderOverviewItemPinnedDetails
    }

    @objc
    public var asFolderOverviewItemUnpinnedDetails: DBXTeamLogEventDetailsFolderOverviewItemUnpinnedDetails? {
        self as? DBXTeamLogEventDetailsFolderOverviewItemUnpinnedDetails
    }

    @objc
    public var asObjectLabelAddedDetails: DBXTeamLogEventDetailsObjectLabelAddedDetails? {
        self as? DBXTeamLogEventDetailsObjectLabelAddedDetails
    }

    @objc
    public var asObjectLabelRemovedDetails: DBXTeamLogEventDetailsObjectLabelRemovedDetails? {
        self as? DBXTeamLogEventDetailsObjectLabelRemovedDetails
    }

    @objc
    public var asObjectLabelUpdatedValueDetails: DBXTeamLogEventDetailsObjectLabelUpdatedValueDetails? {
        self as? DBXTeamLogEventDetailsObjectLabelUpdatedValueDetails
    }

    @objc
    public var asOrganizeFolderWithTidyDetails: DBXTeamLogEventDetailsOrganizeFolderWithTidyDetails? {
        self as? DBXTeamLogEventDetailsOrganizeFolderWithTidyDetails
    }

    @objc
    public var asReplayFileDeleteDetails: DBXTeamLogEventDetailsReplayFileDeleteDetails? {
        self as? DBXTeamLogEventDetailsReplayFileDeleteDetails
    }

    @objc
    public var asRewindFolderDetails: DBXTeamLogEventDetailsRewindFolderDetails? {
        self as? DBXTeamLogEventDetailsRewindFolderDetails
    }

    @objc
    public var asUndoNamingConventionDetails: DBXTeamLogEventDetailsUndoNamingConventionDetails? {
        self as? DBXTeamLogEventDetailsUndoNamingConventionDetails
    }

    @objc
    public var asUndoOrganizeFolderWithTidyDetails: DBXTeamLogEventDetailsUndoOrganizeFolderWithTidyDetails? {
        self as? DBXTeamLogEventDetailsUndoOrganizeFolderWithTidyDetails
    }

    @objc
    public var asUserTagsAddedDetails: DBXTeamLogEventDetailsUserTagsAddedDetails? {
        self as? DBXTeamLogEventDetailsUserTagsAddedDetails
    }

    @objc
    public var asUserTagsRemovedDetails: DBXTeamLogEventDetailsUserTagsRemovedDetails? {
        self as? DBXTeamLogEventDetailsUserTagsRemovedDetails
    }

    @objc
    public var asEmailIngestReceiveFileDetails: DBXTeamLogEventDetailsEmailIngestReceiveFileDetails? {
        self as? DBXTeamLogEventDetailsEmailIngestReceiveFileDetails
    }

    @objc
    public var asFileRequestChangeDetails: DBXTeamLogEventDetailsFileRequestChangeDetails? {
        self as? DBXTeamLogEventDetailsFileRequestChangeDetails
    }

    @objc
    public var asFileRequestCloseDetails: DBXTeamLogEventDetailsFileRequestCloseDetails? {
        self as? DBXTeamLogEventDetailsFileRequestCloseDetails
    }

    @objc
    public var asFileRequestCreateDetails: DBXTeamLogEventDetailsFileRequestCreateDetails? {
        self as? DBXTeamLogEventDetailsFileRequestCreateDetails
    }

    @objc
    public var asFileRequestDeleteDetails: DBXTeamLogEventDetailsFileRequestDeleteDetails? {
        self as? DBXTeamLogEventDetailsFileRequestDeleteDetails
    }

    @objc
    public var asFileRequestReceiveFileDetails: DBXTeamLogEventDetailsFileRequestReceiveFileDetails? {
        self as? DBXTeamLogEventDetailsFileRequestReceiveFileDetails
    }

    @objc
    public var asGroupAddExternalIdDetails: DBXTeamLogEventDetailsGroupAddExternalIdDetails? {
        self as? DBXTeamLogEventDetailsGroupAddExternalIdDetails
    }

    @objc
    public var asGroupAddMemberDetails: DBXTeamLogEventDetailsGroupAddMemberDetails? {
        self as? DBXTeamLogEventDetailsGroupAddMemberDetails
    }

    @objc
    public var asGroupChangeExternalIdDetails: DBXTeamLogEventDetailsGroupChangeExternalIdDetails? {
        self as? DBXTeamLogEventDetailsGroupChangeExternalIdDetails
    }

    @objc
    public var asGroupChangeManagementTypeDetails: DBXTeamLogEventDetailsGroupChangeManagementTypeDetails? {
        self as? DBXTeamLogEventDetailsGroupChangeManagementTypeDetails
    }

    @objc
    public var asGroupChangeMemberRoleDetails: DBXTeamLogEventDetailsGroupChangeMemberRoleDetails? {
        self as? DBXTeamLogEventDetailsGroupChangeMemberRoleDetails
    }

    @objc
    public var asGroupCreateDetails: DBXTeamLogEventDetailsGroupCreateDetails? {
        self as? DBXTeamLogEventDetailsGroupCreateDetails
    }

    @objc
    public var asGroupDeleteDetails: DBXTeamLogEventDetailsGroupDeleteDetails? {
        self as? DBXTeamLogEventDetailsGroupDeleteDetails
    }

    @objc
    public var asGroupDescriptionUpdatedDetails: DBXTeamLogEventDetailsGroupDescriptionUpdatedDetails? {
        self as? DBXTeamLogEventDetailsGroupDescriptionUpdatedDetails
    }

    @objc
    public var asGroupJoinPolicyUpdatedDetails: DBXTeamLogEventDetailsGroupJoinPolicyUpdatedDetails? {
        self as? DBXTeamLogEventDetailsGroupJoinPolicyUpdatedDetails
    }

    @objc
    public var asGroupMovedDetails: DBXTeamLogEventDetailsGroupMovedDetails? {
        self as? DBXTeamLogEventDetailsGroupMovedDetails
    }

    @objc
    public var asGroupRemoveExternalIdDetails: DBXTeamLogEventDetailsGroupRemoveExternalIdDetails? {
        self as? DBXTeamLogEventDetailsGroupRemoveExternalIdDetails
    }

    @objc
    public var asGroupRemoveMemberDetails: DBXTeamLogEventDetailsGroupRemoveMemberDetails? {
        self as? DBXTeamLogEventDetailsGroupRemoveMemberDetails
    }

    @objc
    public var asGroupRenameDetails: DBXTeamLogEventDetailsGroupRenameDetails? {
        self as? DBXTeamLogEventDetailsGroupRenameDetails
    }

    @objc
    public var asAccountLockOrUnlockedDetails: DBXTeamLogEventDetailsAccountLockOrUnlockedDetails? {
        self as? DBXTeamLogEventDetailsAccountLockOrUnlockedDetails
    }

    @objc
    public var asEmmErrorDetails: DBXTeamLogEventDetailsEmmErrorDetails? {
        self as? DBXTeamLogEventDetailsEmmErrorDetails
    }

    @objc
    public var asGuestAdminSignedInViaTrustedTeamsDetails: DBXTeamLogEventDetailsGuestAdminSignedInViaTrustedTeamsDetails? {
        self as? DBXTeamLogEventDetailsGuestAdminSignedInViaTrustedTeamsDetails
    }

    @objc
    public var asGuestAdminSignedOutViaTrustedTeamsDetails: DBXTeamLogEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails? {
        self as? DBXTeamLogEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails
    }

    @objc
    public var asLoginFailDetails: DBXTeamLogEventDetailsLoginFailDetails? {
        self as? DBXTeamLogEventDetailsLoginFailDetails
    }

    @objc
    public var asLoginSuccessDetails: DBXTeamLogEventDetailsLoginSuccessDetails? {
        self as? DBXTeamLogEventDetailsLoginSuccessDetails
    }

    @objc
    public var asLogoutDetails: DBXTeamLogEventDetailsLogoutDetails? {
        self as? DBXTeamLogEventDetailsLogoutDetails
    }

    @objc
    public var asResellerSupportSessionEndDetails: DBXTeamLogEventDetailsResellerSupportSessionEndDetails? {
        self as? DBXTeamLogEventDetailsResellerSupportSessionEndDetails
    }

    @objc
    public var asResellerSupportSessionStartDetails: DBXTeamLogEventDetailsResellerSupportSessionStartDetails? {
        self as? DBXTeamLogEventDetailsResellerSupportSessionStartDetails
    }

    @objc
    public var asSignInAsSessionEndDetails: DBXTeamLogEventDetailsSignInAsSessionEndDetails? {
        self as? DBXTeamLogEventDetailsSignInAsSessionEndDetails
    }

    @objc
    public var asSignInAsSessionStartDetails: DBXTeamLogEventDetailsSignInAsSessionStartDetails? {
        self as? DBXTeamLogEventDetailsSignInAsSessionStartDetails
    }

    @objc
    public var asSsoErrorDetails: DBXTeamLogEventDetailsSsoErrorDetails? {
        self as? DBXTeamLogEventDetailsSsoErrorDetails
    }

    @objc
    public var asBackupAdminInvitationSentDetails: DBXTeamLogEventDetailsBackupAdminInvitationSentDetails? {
        self as? DBXTeamLogEventDetailsBackupAdminInvitationSentDetails
    }

    @objc
    public var asBackupInvitationOpenedDetails: DBXTeamLogEventDetailsBackupInvitationOpenedDetails? {
        self as? DBXTeamLogEventDetailsBackupInvitationOpenedDetails
    }

    @objc
    public var asCreateTeamInviteLinkDetails: DBXTeamLogEventDetailsCreateTeamInviteLinkDetails? {
        self as? DBXTeamLogEventDetailsCreateTeamInviteLinkDetails
    }

    @objc
    public var asDeleteTeamInviteLinkDetails: DBXTeamLogEventDetailsDeleteTeamInviteLinkDetails? {
        self as? DBXTeamLogEventDetailsDeleteTeamInviteLinkDetails
    }

    @objc
    public var asMemberAddExternalIdDetails: DBXTeamLogEventDetailsMemberAddExternalIdDetails? {
        self as? DBXTeamLogEventDetailsMemberAddExternalIdDetails
    }

    @objc
    public var asMemberAddNameDetails: DBXTeamLogEventDetailsMemberAddNameDetails? {
        self as? DBXTeamLogEventDetailsMemberAddNameDetails
    }

    @objc
    public var asMemberChangeAdminRoleDetails: DBXTeamLogEventDetailsMemberChangeAdminRoleDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeAdminRoleDetails
    }

    @objc
    public var asMemberChangeEmailDetails: DBXTeamLogEventDetailsMemberChangeEmailDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeEmailDetails
    }

    @objc
    public var asMemberChangeExternalIdDetails: DBXTeamLogEventDetailsMemberChangeExternalIdDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeExternalIdDetails
    }

    @objc
    public var asMemberChangeMembershipTypeDetails: DBXTeamLogEventDetailsMemberChangeMembershipTypeDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeMembershipTypeDetails
    }

    @objc
    public var asMemberChangeNameDetails: DBXTeamLogEventDetailsMemberChangeNameDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeNameDetails
    }

    @objc
    public var asMemberChangeResellerRoleDetails: DBXTeamLogEventDetailsMemberChangeResellerRoleDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeResellerRoleDetails
    }

    @objc
    public var asMemberChangeStatusDetails: DBXTeamLogEventDetailsMemberChangeStatusDetails? {
        self as? DBXTeamLogEventDetailsMemberChangeStatusDetails
    }

    @objc
    public var asMemberDeleteManualContactsDetails: DBXTeamLogEventDetailsMemberDeleteManualContactsDetails? {
        self as? DBXTeamLogEventDetailsMemberDeleteManualContactsDetails
    }

    @objc
    public var asMemberDeleteProfilePhotoDetails: DBXTeamLogEventDetailsMemberDeleteProfilePhotoDetails? {
        self as? DBXTeamLogEventDetailsMemberDeleteProfilePhotoDetails
    }

    @objc
    public var asMemberPermanentlyDeleteAccountContentsDetails: DBXTeamLogEventDetailsMemberPermanentlyDeleteAccountContentsDetails? {
        self as? DBXTeamLogEventDetailsMemberPermanentlyDeleteAccountContentsDetails
    }

    @objc
    public var asMemberRemoveExternalIdDetails: DBXTeamLogEventDetailsMemberRemoveExternalIdDetails? {
        self as? DBXTeamLogEventDetailsMemberRemoveExternalIdDetails
    }

    @objc
    public var asMemberSetProfilePhotoDetails: DBXTeamLogEventDetailsMemberSetProfilePhotoDetails? {
        self as? DBXTeamLogEventDetailsMemberSetProfilePhotoDetails
    }

    @objc
    public var asMemberSpaceLimitsAddCustomQuotaDetails: DBXTeamLogEventDetailsMemberSpaceLimitsAddCustomQuotaDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsAddCustomQuotaDetails
    }

    @objc
    public var asMemberSpaceLimitsChangeCustomQuotaDetails: DBXTeamLogEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails
    }

    @objc
    public var asMemberSpaceLimitsChangeStatusDetails: DBXTeamLogEventDetailsMemberSpaceLimitsChangeStatusDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsChangeStatusDetails
    }

    @objc
    public var asMemberSpaceLimitsRemoveCustomQuotaDetails: DBXTeamLogEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails
    }

    @objc
    public var asMemberSuggestDetails: DBXTeamLogEventDetailsMemberSuggestDetails? {
        self as? DBXTeamLogEventDetailsMemberSuggestDetails
    }

    @objc
    public var asMemberTransferAccountContentsDetails: DBXTeamLogEventDetailsMemberTransferAccountContentsDetails? {
        self as? DBXTeamLogEventDetailsMemberTransferAccountContentsDetails
    }

    @objc
    public var asPendingSecondaryEmailAddedDetails: DBXTeamLogEventDetailsPendingSecondaryEmailAddedDetails? {
        self as? DBXTeamLogEventDetailsPendingSecondaryEmailAddedDetails
    }

    @objc
    public var asSecondaryEmailDeletedDetails: DBXTeamLogEventDetailsSecondaryEmailDeletedDetails? {
        self as? DBXTeamLogEventDetailsSecondaryEmailDeletedDetails
    }

    @objc
    public var asSecondaryEmailVerifiedDetails: DBXTeamLogEventDetailsSecondaryEmailVerifiedDetails? {
        self as? DBXTeamLogEventDetailsSecondaryEmailVerifiedDetails
    }

    @objc
    public var asSecondaryMailsPolicyChangedDetails: DBXTeamLogEventDetailsSecondaryMailsPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsSecondaryMailsPolicyChangedDetails
    }

    @objc
    public var asBinderAddPageDetails: DBXTeamLogEventDetailsBinderAddPageDetails? {
        self as? DBXTeamLogEventDetailsBinderAddPageDetails
    }

    @objc
    public var asBinderAddSectionDetails: DBXTeamLogEventDetailsBinderAddSectionDetails? {
        self as? DBXTeamLogEventDetailsBinderAddSectionDetails
    }

    @objc
    public var asBinderRemovePageDetails: DBXTeamLogEventDetailsBinderRemovePageDetails? {
        self as? DBXTeamLogEventDetailsBinderRemovePageDetails
    }

    @objc
    public var asBinderRemoveSectionDetails: DBXTeamLogEventDetailsBinderRemoveSectionDetails? {
        self as? DBXTeamLogEventDetailsBinderRemoveSectionDetails
    }

    @objc
    public var asBinderRenamePageDetails: DBXTeamLogEventDetailsBinderRenamePageDetails? {
        self as? DBXTeamLogEventDetailsBinderRenamePageDetails
    }

    @objc
    public var asBinderRenameSectionDetails: DBXTeamLogEventDetailsBinderRenameSectionDetails? {
        self as? DBXTeamLogEventDetailsBinderRenameSectionDetails
    }

    @objc
    public var asBinderReorderPageDetails: DBXTeamLogEventDetailsBinderReorderPageDetails? {
        self as? DBXTeamLogEventDetailsBinderReorderPageDetails
    }

    @objc
    public var asBinderReorderSectionDetails: DBXTeamLogEventDetailsBinderReorderSectionDetails? {
        self as? DBXTeamLogEventDetailsBinderReorderSectionDetails
    }

    @objc
    public var asPaperContentAddMemberDetails: DBXTeamLogEventDetailsPaperContentAddMemberDetails? {
        self as? DBXTeamLogEventDetailsPaperContentAddMemberDetails
    }

    @objc
    public var asPaperContentAddToFolderDetails: DBXTeamLogEventDetailsPaperContentAddToFolderDetails? {
        self as? DBXTeamLogEventDetailsPaperContentAddToFolderDetails
    }

    @objc
    public var asPaperContentArchiveDetails: DBXTeamLogEventDetailsPaperContentArchiveDetails? {
        self as? DBXTeamLogEventDetailsPaperContentArchiveDetails
    }

    @objc
    public var asPaperContentCreateDetails: DBXTeamLogEventDetailsPaperContentCreateDetails? {
        self as? DBXTeamLogEventDetailsPaperContentCreateDetails
    }

    @objc
    public var asPaperContentPermanentlyDeleteDetails: DBXTeamLogEventDetailsPaperContentPermanentlyDeleteDetails? {
        self as? DBXTeamLogEventDetailsPaperContentPermanentlyDeleteDetails
    }

    @objc
    public var asPaperContentRemoveFromFolderDetails: DBXTeamLogEventDetailsPaperContentRemoveFromFolderDetails? {
        self as? DBXTeamLogEventDetailsPaperContentRemoveFromFolderDetails
    }

    @objc
    public var asPaperContentRemoveMemberDetails: DBXTeamLogEventDetailsPaperContentRemoveMemberDetails? {
        self as? DBXTeamLogEventDetailsPaperContentRemoveMemberDetails
    }

    @objc
    public var asPaperContentRenameDetails: DBXTeamLogEventDetailsPaperContentRenameDetails? {
        self as? DBXTeamLogEventDetailsPaperContentRenameDetails
    }

    @objc
    public var asPaperContentRestoreDetails: DBXTeamLogEventDetailsPaperContentRestoreDetails? {
        self as? DBXTeamLogEventDetailsPaperContentRestoreDetails
    }

    @objc
    public var asPaperDocAddCommentDetails: DBXTeamLogEventDetailsPaperDocAddCommentDetails? {
        self as? DBXTeamLogEventDetailsPaperDocAddCommentDetails
    }

    @objc
    public var asPaperDocChangeMemberRoleDetails: DBXTeamLogEventDetailsPaperDocChangeMemberRoleDetails? {
        self as? DBXTeamLogEventDetailsPaperDocChangeMemberRoleDetails
    }

    @objc
    public var asPaperDocChangeSharingPolicyDetails: DBXTeamLogEventDetailsPaperDocChangeSharingPolicyDetails? {
        self as? DBXTeamLogEventDetailsPaperDocChangeSharingPolicyDetails
    }

    @objc
    public var asPaperDocChangeSubscriptionDetails: DBXTeamLogEventDetailsPaperDocChangeSubscriptionDetails? {
        self as? DBXTeamLogEventDetailsPaperDocChangeSubscriptionDetails
    }

    @objc
    public var asPaperDocDeletedDetails: DBXTeamLogEventDetailsPaperDocDeletedDetails? {
        self as? DBXTeamLogEventDetailsPaperDocDeletedDetails
    }

    @objc
    public var asPaperDocDeleteCommentDetails: DBXTeamLogEventDetailsPaperDocDeleteCommentDetails? {
        self as? DBXTeamLogEventDetailsPaperDocDeleteCommentDetails
    }

    @objc
    public var asPaperDocDownloadDetails: DBXTeamLogEventDetailsPaperDocDownloadDetails? {
        self as? DBXTeamLogEventDetailsPaperDocDownloadDetails
    }

    @objc
    public var asPaperDocEditDetails: DBXTeamLogEventDetailsPaperDocEditDetails? {
        self as? DBXTeamLogEventDetailsPaperDocEditDetails
    }

    @objc
    public var asPaperDocEditCommentDetails: DBXTeamLogEventDetailsPaperDocEditCommentDetails? {
        self as? DBXTeamLogEventDetailsPaperDocEditCommentDetails
    }

    @objc
    public var asPaperDocFollowedDetails: DBXTeamLogEventDetailsPaperDocFollowedDetails? {
        self as? DBXTeamLogEventDetailsPaperDocFollowedDetails
    }

    @objc
    public var asPaperDocMentionDetails: DBXTeamLogEventDetailsPaperDocMentionDetails? {
        self as? DBXTeamLogEventDetailsPaperDocMentionDetails
    }

    @objc
    public var asPaperDocOwnershipChangedDetails: DBXTeamLogEventDetailsPaperDocOwnershipChangedDetails? {
        self as? DBXTeamLogEventDetailsPaperDocOwnershipChangedDetails
    }

    @objc
    public var asPaperDocRequestAccessDetails: DBXTeamLogEventDetailsPaperDocRequestAccessDetails? {
        self as? DBXTeamLogEventDetailsPaperDocRequestAccessDetails
    }

    @objc
    public var asPaperDocResolveCommentDetails: DBXTeamLogEventDetailsPaperDocResolveCommentDetails? {
        self as? DBXTeamLogEventDetailsPaperDocResolveCommentDetails
    }

    @objc
    public var asPaperDocRevertDetails: DBXTeamLogEventDetailsPaperDocRevertDetails? {
        self as? DBXTeamLogEventDetailsPaperDocRevertDetails
    }

    @objc
    public var asPaperDocSlackShareDetails: DBXTeamLogEventDetailsPaperDocSlackShareDetails? {
        self as? DBXTeamLogEventDetailsPaperDocSlackShareDetails
    }

    @objc
    public var asPaperDocTeamInviteDetails: DBXTeamLogEventDetailsPaperDocTeamInviteDetails? {
        self as? DBXTeamLogEventDetailsPaperDocTeamInviteDetails
    }

    @objc
    public var asPaperDocTrashedDetails: DBXTeamLogEventDetailsPaperDocTrashedDetails? {
        self as? DBXTeamLogEventDetailsPaperDocTrashedDetails
    }

    @objc
    public var asPaperDocUnresolveCommentDetails: DBXTeamLogEventDetailsPaperDocUnresolveCommentDetails? {
        self as? DBXTeamLogEventDetailsPaperDocUnresolveCommentDetails
    }

    @objc
    public var asPaperDocUntrashedDetails: DBXTeamLogEventDetailsPaperDocUntrashedDetails? {
        self as? DBXTeamLogEventDetailsPaperDocUntrashedDetails
    }

    @objc
    public var asPaperDocViewDetails: DBXTeamLogEventDetailsPaperDocViewDetails? {
        self as? DBXTeamLogEventDetailsPaperDocViewDetails
    }

    @objc
    public var asPaperExternalViewAllowDetails: DBXTeamLogEventDetailsPaperExternalViewAllowDetails? {
        self as? DBXTeamLogEventDetailsPaperExternalViewAllowDetails
    }

    @objc
    public var asPaperExternalViewDefaultTeamDetails: DBXTeamLogEventDetailsPaperExternalViewDefaultTeamDetails? {
        self as? DBXTeamLogEventDetailsPaperExternalViewDefaultTeamDetails
    }

    @objc
    public var asPaperExternalViewForbidDetails: DBXTeamLogEventDetailsPaperExternalViewForbidDetails? {
        self as? DBXTeamLogEventDetailsPaperExternalViewForbidDetails
    }

    @objc
    public var asPaperFolderChangeSubscriptionDetails: DBXTeamLogEventDetailsPaperFolderChangeSubscriptionDetails? {
        self as? DBXTeamLogEventDetailsPaperFolderChangeSubscriptionDetails
    }

    @objc
    public var asPaperFolderDeletedDetails: DBXTeamLogEventDetailsPaperFolderDeletedDetails? {
        self as? DBXTeamLogEventDetailsPaperFolderDeletedDetails
    }

    @objc
    public var asPaperFolderFollowedDetails: DBXTeamLogEventDetailsPaperFolderFollowedDetails? {
        self as? DBXTeamLogEventDetailsPaperFolderFollowedDetails
    }

    @objc
    public var asPaperFolderTeamInviteDetails: DBXTeamLogEventDetailsPaperFolderTeamInviteDetails? {
        self as? DBXTeamLogEventDetailsPaperFolderTeamInviteDetails
    }

    @objc
    public var asPaperPublishedLinkChangePermissionDetails: DBXTeamLogEventDetailsPaperPublishedLinkChangePermissionDetails? {
        self as? DBXTeamLogEventDetailsPaperPublishedLinkChangePermissionDetails
    }

    @objc
    public var asPaperPublishedLinkCreateDetails: DBXTeamLogEventDetailsPaperPublishedLinkCreateDetails? {
        self as? DBXTeamLogEventDetailsPaperPublishedLinkCreateDetails
    }

    @objc
    public var asPaperPublishedLinkDisabledDetails: DBXTeamLogEventDetailsPaperPublishedLinkDisabledDetails? {
        self as? DBXTeamLogEventDetailsPaperPublishedLinkDisabledDetails
    }

    @objc
    public var asPaperPublishedLinkViewDetails: DBXTeamLogEventDetailsPaperPublishedLinkViewDetails? {
        self as? DBXTeamLogEventDetailsPaperPublishedLinkViewDetails
    }

    @objc
    public var asPasswordChangeDetails: DBXTeamLogEventDetailsPasswordChangeDetails? {
        self as? DBXTeamLogEventDetailsPasswordChangeDetails
    }

    @objc
    public var asPasswordResetDetails: DBXTeamLogEventDetailsPasswordResetDetails? {
        self as? DBXTeamLogEventDetailsPasswordResetDetails
    }

    @objc
    public var asPasswordResetAllDetails: DBXTeamLogEventDetailsPasswordResetAllDetails? {
        self as? DBXTeamLogEventDetailsPasswordResetAllDetails
    }

    @objc
    public var asClassificationCreateReportDetails: DBXTeamLogEventDetailsClassificationCreateReportDetails? {
        self as? DBXTeamLogEventDetailsClassificationCreateReportDetails
    }

    @objc
    public var asClassificationCreateReportFailDetails: DBXTeamLogEventDetailsClassificationCreateReportFailDetails? {
        self as? DBXTeamLogEventDetailsClassificationCreateReportFailDetails
    }

    @objc
    public var asEmmCreateExceptionsReportDetails: DBXTeamLogEventDetailsEmmCreateExceptionsReportDetails? {
        self as? DBXTeamLogEventDetailsEmmCreateExceptionsReportDetails
    }

    @objc
    public var asEmmCreateUsageReportDetails: DBXTeamLogEventDetailsEmmCreateUsageReportDetails? {
        self as? DBXTeamLogEventDetailsEmmCreateUsageReportDetails
    }

    @objc
    public var asExportMembersReportDetails: DBXTeamLogEventDetailsExportMembersReportDetails? {
        self as? DBXTeamLogEventDetailsExportMembersReportDetails
    }

    @objc
    public var asExportMembersReportFailDetails: DBXTeamLogEventDetailsExportMembersReportFailDetails? {
        self as? DBXTeamLogEventDetailsExportMembersReportFailDetails
    }

    @objc
    public var asExternalSharingCreateReportDetails: DBXTeamLogEventDetailsExternalSharingCreateReportDetails? {
        self as? DBXTeamLogEventDetailsExternalSharingCreateReportDetails
    }

    @objc
    public var asExternalSharingReportFailedDetails: DBXTeamLogEventDetailsExternalSharingReportFailedDetails? {
        self as? DBXTeamLogEventDetailsExternalSharingReportFailedDetails
    }

    @objc
    public var asNoExpirationLinkGenCreateReportDetails: DBXTeamLogEventDetailsNoExpirationLinkGenCreateReportDetails? {
        self as? DBXTeamLogEventDetailsNoExpirationLinkGenCreateReportDetails
    }

    @objc
    public var asNoExpirationLinkGenReportFailedDetails: DBXTeamLogEventDetailsNoExpirationLinkGenReportFailedDetails? {
        self as? DBXTeamLogEventDetailsNoExpirationLinkGenReportFailedDetails
    }

    @objc
    public var asNoPasswordLinkGenCreateReportDetails: DBXTeamLogEventDetailsNoPasswordLinkGenCreateReportDetails? {
        self as? DBXTeamLogEventDetailsNoPasswordLinkGenCreateReportDetails
    }

    @objc
    public var asNoPasswordLinkGenReportFailedDetails: DBXTeamLogEventDetailsNoPasswordLinkGenReportFailedDetails? {
        self as? DBXTeamLogEventDetailsNoPasswordLinkGenReportFailedDetails
    }

    @objc
    public var asNoPasswordLinkViewCreateReportDetails: DBXTeamLogEventDetailsNoPasswordLinkViewCreateReportDetails? {
        self as? DBXTeamLogEventDetailsNoPasswordLinkViewCreateReportDetails
    }

    @objc
    public var asNoPasswordLinkViewReportFailedDetails: DBXTeamLogEventDetailsNoPasswordLinkViewReportFailedDetails? {
        self as? DBXTeamLogEventDetailsNoPasswordLinkViewReportFailedDetails
    }

    @objc
    public var asOutdatedLinkViewCreateReportDetails: DBXTeamLogEventDetailsOutdatedLinkViewCreateReportDetails? {
        self as? DBXTeamLogEventDetailsOutdatedLinkViewCreateReportDetails
    }

    @objc
    public var asOutdatedLinkViewReportFailedDetails: DBXTeamLogEventDetailsOutdatedLinkViewReportFailedDetails? {
        self as? DBXTeamLogEventDetailsOutdatedLinkViewReportFailedDetails
    }

    @objc
    public var asPaperAdminExportStartDetails: DBXTeamLogEventDetailsPaperAdminExportStartDetails? {
        self as? DBXTeamLogEventDetailsPaperAdminExportStartDetails
    }

    @objc
    public var asRansomwareAlertCreateReportDetails: DBXTeamLogEventDetailsRansomwareAlertCreateReportDetails? {
        self as? DBXTeamLogEventDetailsRansomwareAlertCreateReportDetails
    }

    @objc
    public var asRansomwareAlertCreateReportFailedDetails: DBXTeamLogEventDetailsRansomwareAlertCreateReportFailedDetails? {
        self as? DBXTeamLogEventDetailsRansomwareAlertCreateReportFailedDetails
    }

    @objc
    public var asSmartSyncCreateAdminPrivilegeReportDetails: DBXTeamLogEventDetailsSmartSyncCreateAdminPrivilegeReportDetails? {
        self as? DBXTeamLogEventDetailsSmartSyncCreateAdminPrivilegeReportDetails
    }

    @objc
    public var asTeamActivityCreateReportDetails: DBXTeamLogEventDetailsTeamActivityCreateReportDetails? {
        self as? DBXTeamLogEventDetailsTeamActivityCreateReportDetails
    }

    @objc
    public var asTeamActivityCreateReportFailDetails: DBXTeamLogEventDetailsTeamActivityCreateReportFailDetails? {
        self as? DBXTeamLogEventDetailsTeamActivityCreateReportFailDetails
    }

    @objc
    public var asCollectionShareDetails: DBXTeamLogEventDetailsCollectionShareDetails? {
        self as? DBXTeamLogEventDetailsCollectionShareDetails
    }

    @objc
    public var asFileTransfersFileAddDetails: DBXTeamLogEventDetailsFileTransfersFileAddDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersFileAddDetails
    }

    @objc
    public var asFileTransfersTransferDeleteDetails: DBXTeamLogEventDetailsFileTransfersTransferDeleteDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersTransferDeleteDetails
    }

    @objc
    public var asFileTransfersTransferDownloadDetails: DBXTeamLogEventDetailsFileTransfersTransferDownloadDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersTransferDownloadDetails
    }

    @objc
    public var asFileTransfersTransferSendDetails: DBXTeamLogEventDetailsFileTransfersTransferSendDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersTransferSendDetails
    }

    @objc
    public var asFileTransfersTransferViewDetails: DBXTeamLogEventDetailsFileTransfersTransferViewDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersTransferViewDetails
    }

    @objc
    public var asNoteAclInviteOnlyDetails: DBXTeamLogEventDetailsNoteAclInviteOnlyDetails? {
        self as? DBXTeamLogEventDetailsNoteAclInviteOnlyDetails
    }

    @objc
    public var asNoteAclLinkDetails: DBXTeamLogEventDetailsNoteAclLinkDetails? {
        self as? DBXTeamLogEventDetailsNoteAclLinkDetails
    }

    @objc
    public var asNoteAclTeamLinkDetails: DBXTeamLogEventDetailsNoteAclTeamLinkDetails? {
        self as? DBXTeamLogEventDetailsNoteAclTeamLinkDetails
    }

    @objc
    public var asNoteSharedDetails: DBXTeamLogEventDetailsNoteSharedDetails? {
        self as? DBXTeamLogEventDetailsNoteSharedDetails
    }

    @objc
    public var asNoteShareReceiveDetails: DBXTeamLogEventDetailsNoteShareReceiveDetails? {
        self as? DBXTeamLogEventDetailsNoteShareReceiveDetails
    }

    @objc
    public var asOpenNoteSharedDetails: DBXTeamLogEventDetailsOpenNoteSharedDetails? {
        self as? DBXTeamLogEventDetailsOpenNoteSharedDetails
    }

    @objc
    public var asReplayFileSharedLinkCreatedDetails: DBXTeamLogEventDetailsReplayFileSharedLinkCreatedDetails? {
        self as? DBXTeamLogEventDetailsReplayFileSharedLinkCreatedDetails
    }

    @objc
    public var asReplayFileSharedLinkModifiedDetails: DBXTeamLogEventDetailsReplayFileSharedLinkModifiedDetails? {
        self as? DBXTeamLogEventDetailsReplayFileSharedLinkModifiedDetails
    }

    @objc
    public var asReplayProjectTeamAddDetails: DBXTeamLogEventDetailsReplayProjectTeamAddDetails? {
        self as? DBXTeamLogEventDetailsReplayProjectTeamAddDetails
    }

    @objc
    public var asReplayProjectTeamDeleteDetails: DBXTeamLogEventDetailsReplayProjectTeamDeleteDetails? {
        self as? DBXTeamLogEventDetailsReplayProjectTeamDeleteDetails
    }

    @objc
    public var asSfAddGroupDetails: DBXTeamLogEventDetailsSfAddGroupDetails? {
        self as? DBXTeamLogEventDetailsSfAddGroupDetails
    }

    @objc
    public var asSfAllowNonMembersToViewSharedLinksDetails: DBXTeamLogEventDetailsSfAllowNonMembersToViewSharedLinksDetails? {
        self as? DBXTeamLogEventDetailsSfAllowNonMembersToViewSharedLinksDetails
    }

    @objc
    public var asSfExternalInviteWarnDetails: DBXTeamLogEventDetailsSfExternalInviteWarnDetails? {
        self as? DBXTeamLogEventDetailsSfExternalInviteWarnDetails
    }

    @objc
    public var asSfFbInviteDetails: DBXTeamLogEventDetailsSfFbInviteDetails? {
        self as? DBXTeamLogEventDetailsSfFbInviteDetails
    }

    @objc
    public var asSfFbInviteChangeRoleDetails: DBXTeamLogEventDetailsSfFbInviteChangeRoleDetails? {
        self as? DBXTeamLogEventDetailsSfFbInviteChangeRoleDetails
    }

    @objc
    public var asSfFbUninviteDetails: DBXTeamLogEventDetailsSfFbUninviteDetails? {
        self as? DBXTeamLogEventDetailsSfFbUninviteDetails
    }

    @objc
    public var asSfInviteGroupDetails: DBXTeamLogEventDetailsSfInviteGroupDetails? {
        self as? DBXTeamLogEventDetailsSfInviteGroupDetails
    }

    @objc
    public var asSfTeamGrantAccessDetails: DBXTeamLogEventDetailsSfTeamGrantAccessDetails? {
        self as? DBXTeamLogEventDetailsSfTeamGrantAccessDetails
    }

    @objc
    public var asSfTeamInviteDetails: DBXTeamLogEventDetailsSfTeamInviteDetails? {
        self as? DBXTeamLogEventDetailsSfTeamInviteDetails
    }

    @objc
    public var asSfTeamInviteChangeRoleDetails: DBXTeamLogEventDetailsSfTeamInviteChangeRoleDetails? {
        self as? DBXTeamLogEventDetailsSfTeamInviteChangeRoleDetails
    }

    @objc
    public var asSfTeamJoinDetails: DBXTeamLogEventDetailsSfTeamJoinDetails? {
        self as? DBXTeamLogEventDetailsSfTeamJoinDetails
    }

    @objc
    public var asSfTeamJoinFromOobLinkDetails: DBXTeamLogEventDetailsSfTeamJoinFromOobLinkDetails? {
        self as? DBXTeamLogEventDetailsSfTeamJoinFromOobLinkDetails
    }

    @objc
    public var asSfTeamUninviteDetails: DBXTeamLogEventDetailsSfTeamUninviteDetails? {
        self as? DBXTeamLogEventDetailsSfTeamUninviteDetails
    }

    @objc
    public var asSharedContentAddInviteesDetails: DBXTeamLogEventDetailsSharedContentAddInviteesDetails? {
        self as? DBXTeamLogEventDetailsSharedContentAddInviteesDetails
    }

    @objc
    public var asSharedContentAddLinkExpiryDetails: DBXTeamLogEventDetailsSharedContentAddLinkExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedContentAddLinkExpiryDetails
    }

    @objc
    public var asSharedContentAddLinkPasswordDetails: DBXTeamLogEventDetailsSharedContentAddLinkPasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedContentAddLinkPasswordDetails
    }

    @objc
    public var asSharedContentAddMemberDetails: DBXTeamLogEventDetailsSharedContentAddMemberDetails? {
        self as? DBXTeamLogEventDetailsSharedContentAddMemberDetails
    }

    @objc
    public var asSharedContentChangeDownloadsPolicyDetails: DBXTeamLogEventDetailsSharedContentChangeDownloadsPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeDownloadsPolicyDetails
    }

    @objc
    public var asSharedContentChangeInviteeRoleDetails: DBXTeamLogEventDetailsSharedContentChangeInviteeRoleDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeInviteeRoleDetails
    }

    @objc
    public var asSharedContentChangeLinkAudienceDetails: DBXTeamLogEventDetailsSharedContentChangeLinkAudienceDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeLinkAudienceDetails
    }

    @objc
    public var asSharedContentChangeLinkExpiryDetails: DBXTeamLogEventDetailsSharedContentChangeLinkExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeLinkExpiryDetails
    }

    @objc
    public var asSharedContentChangeLinkPasswordDetails: DBXTeamLogEventDetailsSharedContentChangeLinkPasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeLinkPasswordDetails
    }

    @objc
    public var asSharedContentChangeMemberRoleDetails: DBXTeamLogEventDetailsSharedContentChangeMemberRoleDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeMemberRoleDetails
    }

    @objc
    public var asSharedContentChangeViewerInfoPolicyDetails: DBXTeamLogEventDetailsSharedContentChangeViewerInfoPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedContentChangeViewerInfoPolicyDetails
    }

    @objc
    public var asSharedContentClaimInvitationDetails: DBXTeamLogEventDetailsSharedContentClaimInvitationDetails? {
        self as? DBXTeamLogEventDetailsSharedContentClaimInvitationDetails
    }

    @objc
    public var asSharedContentCopyDetails: DBXTeamLogEventDetailsSharedContentCopyDetails? {
        self as? DBXTeamLogEventDetailsSharedContentCopyDetails
    }

    @objc
    public var asSharedContentDownloadDetails: DBXTeamLogEventDetailsSharedContentDownloadDetails? {
        self as? DBXTeamLogEventDetailsSharedContentDownloadDetails
    }

    @objc
    public var asSharedContentRelinquishMembershipDetails: DBXTeamLogEventDetailsSharedContentRelinquishMembershipDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRelinquishMembershipDetails
    }

    @objc
    public var asSharedContentRemoveInviteesDetails: DBXTeamLogEventDetailsSharedContentRemoveInviteesDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRemoveInviteesDetails
    }

    @objc
    public var asSharedContentRemoveLinkExpiryDetails: DBXTeamLogEventDetailsSharedContentRemoveLinkExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRemoveLinkExpiryDetails
    }

    @objc
    public var asSharedContentRemoveLinkPasswordDetails: DBXTeamLogEventDetailsSharedContentRemoveLinkPasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRemoveLinkPasswordDetails
    }

    @objc
    public var asSharedContentRemoveMemberDetails: DBXTeamLogEventDetailsSharedContentRemoveMemberDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRemoveMemberDetails
    }

    @objc
    public var asSharedContentRequestAccessDetails: DBXTeamLogEventDetailsSharedContentRequestAccessDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRequestAccessDetails
    }

    @objc
    public var asSharedContentRestoreInviteesDetails: DBXTeamLogEventDetailsSharedContentRestoreInviteesDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRestoreInviteesDetails
    }

    @objc
    public var asSharedContentRestoreMemberDetails: DBXTeamLogEventDetailsSharedContentRestoreMemberDetails? {
        self as? DBXTeamLogEventDetailsSharedContentRestoreMemberDetails
    }

    @objc
    public var asSharedContentUnshareDetails: DBXTeamLogEventDetailsSharedContentUnshareDetails? {
        self as? DBXTeamLogEventDetailsSharedContentUnshareDetails
    }

    @objc
    public var asSharedContentViewDetails: DBXTeamLogEventDetailsSharedContentViewDetails? {
        self as? DBXTeamLogEventDetailsSharedContentViewDetails
    }

    @objc
    public var asSharedFolderChangeLinkPolicyDetails: DBXTeamLogEventDetailsSharedFolderChangeLinkPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderChangeLinkPolicyDetails
    }

    @objc
    public var asSharedFolderChangeMembersInheritancePolicyDetails: DBXTeamLogEventDetailsSharedFolderChangeMembersInheritancePolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderChangeMembersInheritancePolicyDetails
    }

    @objc
    public var asSharedFolderChangeMembersManagementPolicyDetails: DBXTeamLogEventDetailsSharedFolderChangeMembersManagementPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderChangeMembersManagementPolicyDetails
    }

    @objc
    public var asSharedFolderChangeMembersPolicyDetails: DBXTeamLogEventDetailsSharedFolderChangeMembersPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderChangeMembersPolicyDetails
    }

    @objc
    public var asSharedFolderCreateDetails: DBXTeamLogEventDetailsSharedFolderCreateDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderCreateDetails
    }

    @objc
    public var asSharedFolderDeclineInvitationDetails: DBXTeamLogEventDetailsSharedFolderDeclineInvitationDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderDeclineInvitationDetails
    }

    @objc
    public var asSharedFolderMountDetails: DBXTeamLogEventDetailsSharedFolderMountDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderMountDetails
    }

    @objc
    public var asSharedFolderNestDetails: DBXTeamLogEventDetailsSharedFolderNestDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderNestDetails
    }

    @objc
    public var asSharedFolderTransferOwnershipDetails: DBXTeamLogEventDetailsSharedFolderTransferOwnershipDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderTransferOwnershipDetails
    }

    @objc
    public var asSharedFolderUnmountDetails: DBXTeamLogEventDetailsSharedFolderUnmountDetails? {
        self as? DBXTeamLogEventDetailsSharedFolderUnmountDetails
    }

    @objc
    public var asSharedLinkAddExpiryDetails: DBXTeamLogEventDetailsSharedLinkAddExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkAddExpiryDetails
    }

    @objc
    public var asSharedLinkChangeExpiryDetails: DBXTeamLogEventDetailsSharedLinkChangeExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkChangeExpiryDetails
    }

    @objc
    public var asSharedLinkChangeVisibilityDetails: DBXTeamLogEventDetailsSharedLinkChangeVisibilityDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkChangeVisibilityDetails
    }

    @objc
    public var asSharedLinkCopyDetails: DBXTeamLogEventDetailsSharedLinkCopyDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkCopyDetails
    }

    @objc
    public var asSharedLinkCreateDetails: DBXTeamLogEventDetailsSharedLinkCreateDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkCreateDetails
    }

    @objc
    public var asSharedLinkDisableDetails: DBXTeamLogEventDetailsSharedLinkDisableDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkDisableDetails
    }

    @objc
    public var asSharedLinkDownloadDetails: DBXTeamLogEventDetailsSharedLinkDownloadDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkDownloadDetails
    }

    @objc
    public var asSharedLinkRemoveExpiryDetails: DBXTeamLogEventDetailsSharedLinkRemoveExpiryDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkRemoveExpiryDetails
    }

    @objc
    public var asSharedLinkSettingsAddExpirationDetails: DBXTeamLogEventDetailsSharedLinkSettingsAddExpirationDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsAddExpirationDetails
    }

    @objc
    public var asSharedLinkSettingsAddPasswordDetails: DBXTeamLogEventDetailsSharedLinkSettingsAddPasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsAddPasswordDetails
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadDisabledDetails: DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadEnabledDetails: DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails
    }

    @objc
    public var asSharedLinkSettingsChangeAudienceDetails: DBXTeamLogEventDetailsSharedLinkSettingsChangeAudienceDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsChangeAudienceDetails
    }

    @objc
    public var asSharedLinkSettingsChangeExpirationDetails: DBXTeamLogEventDetailsSharedLinkSettingsChangeExpirationDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsChangeExpirationDetails
    }

    @objc
    public var asSharedLinkSettingsChangePasswordDetails: DBXTeamLogEventDetailsSharedLinkSettingsChangePasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsChangePasswordDetails
    }

    @objc
    public var asSharedLinkSettingsRemoveExpirationDetails: DBXTeamLogEventDetailsSharedLinkSettingsRemoveExpirationDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsRemoveExpirationDetails
    }

    @objc
    public var asSharedLinkSettingsRemovePasswordDetails: DBXTeamLogEventDetailsSharedLinkSettingsRemovePasswordDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkSettingsRemovePasswordDetails
    }

    @objc
    public var asSharedLinkShareDetails: DBXTeamLogEventDetailsSharedLinkShareDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkShareDetails
    }

    @objc
    public var asSharedLinkViewDetails: DBXTeamLogEventDetailsSharedLinkViewDetails? {
        self as? DBXTeamLogEventDetailsSharedLinkViewDetails
    }

    @objc
    public var asSharedNoteOpenedDetails: DBXTeamLogEventDetailsSharedNoteOpenedDetails? {
        self as? DBXTeamLogEventDetailsSharedNoteOpenedDetails
    }

    @objc
    public var asShmodelDisableDownloadsDetails: DBXTeamLogEventDetailsShmodelDisableDownloadsDetails? {
        self as? DBXTeamLogEventDetailsShmodelDisableDownloadsDetails
    }

    @objc
    public var asShmodelEnableDownloadsDetails: DBXTeamLogEventDetailsShmodelEnableDownloadsDetails? {
        self as? DBXTeamLogEventDetailsShmodelEnableDownloadsDetails
    }

    @objc
    public var asShmodelGroupShareDetails: DBXTeamLogEventDetailsShmodelGroupShareDetails? {
        self as? DBXTeamLogEventDetailsShmodelGroupShareDetails
    }

    @objc
    public var asShowcaseAccessGrantedDetails: DBXTeamLogEventDetailsShowcaseAccessGrantedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseAccessGrantedDetails
    }

    @objc
    public var asShowcaseAddMemberDetails: DBXTeamLogEventDetailsShowcaseAddMemberDetails? {
        self as? DBXTeamLogEventDetailsShowcaseAddMemberDetails
    }

    @objc
    public var asShowcaseArchivedDetails: DBXTeamLogEventDetailsShowcaseArchivedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseArchivedDetails
    }

    @objc
    public var asShowcaseCreatedDetails: DBXTeamLogEventDetailsShowcaseCreatedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseCreatedDetails
    }

    @objc
    public var asShowcaseDeleteCommentDetails: DBXTeamLogEventDetailsShowcaseDeleteCommentDetails? {
        self as? DBXTeamLogEventDetailsShowcaseDeleteCommentDetails
    }

    @objc
    public var asShowcaseEditedDetails: DBXTeamLogEventDetailsShowcaseEditedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseEditedDetails
    }

    @objc
    public var asShowcaseEditCommentDetails: DBXTeamLogEventDetailsShowcaseEditCommentDetails? {
        self as? DBXTeamLogEventDetailsShowcaseEditCommentDetails
    }

    @objc
    public var asShowcaseFileAddedDetails: DBXTeamLogEventDetailsShowcaseFileAddedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseFileAddedDetails
    }

    @objc
    public var asShowcaseFileDownloadDetails: DBXTeamLogEventDetailsShowcaseFileDownloadDetails? {
        self as? DBXTeamLogEventDetailsShowcaseFileDownloadDetails
    }

    @objc
    public var asShowcaseFileRemovedDetails: DBXTeamLogEventDetailsShowcaseFileRemovedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseFileRemovedDetails
    }

    @objc
    public var asShowcaseFileViewDetails: DBXTeamLogEventDetailsShowcaseFileViewDetails? {
        self as? DBXTeamLogEventDetailsShowcaseFileViewDetails
    }

    @objc
    public var asShowcasePermanentlyDeletedDetails: DBXTeamLogEventDetailsShowcasePermanentlyDeletedDetails? {
        self as? DBXTeamLogEventDetailsShowcasePermanentlyDeletedDetails
    }

    @objc
    public var asShowcasePostCommentDetails: DBXTeamLogEventDetailsShowcasePostCommentDetails? {
        self as? DBXTeamLogEventDetailsShowcasePostCommentDetails
    }

    @objc
    public var asShowcaseRemoveMemberDetails: DBXTeamLogEventDetailsShowcaseRemoveMemberDetails? {
        self as? DBXTeamLogEventDetailsShowcaseRemoveMemberDetails
    }

    @objc
    public var asShowcaseRenamedDetails: DBXTeamLogEventDetailsShowcaseRenamedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseRenamedDetails
    }

    @objc
    public var asShowcaseRequestAccessDetails: DBXTeamLogEventDetailsShowcaseRequestAccessDetails? {
        self as? DBXTeamLogEventDetailsShowcaseRequestAccessDetails
    }

    @objc
    public var asShowcaseResolveCommentDetails: DBXTeamLogEventDetailsShowcaseResolveCommentDetails? {
        self as? DBXTeamLogEventDetailsShowcaseResolveCommentDetails
    }

    @objc
    public var asShowcaseRestoredDetails: DBXTeamLogEventDetailsShowcaseRestoredDetails? {
        self as? DBXTeamLogEventDetailsShowcaseRestoredDetails
    }

    @objc
    public var asShowcaseTrashedDetails: DBXTeamLogEventDetailsShowcaseTrashedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseTrashedDetails
    }

    @objc
    public var asShowcaseTrashedDeprecatedDetails: DBXTeamLogEventDetailsShowcaseTrashedDeprecatedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseTrashedDeprecatedDetails
    }

    @objc
    public var asShowcaseUnresolveCommentDetails: DBXTeamLogEventDetailsShowcaseUnresolveCommentDetails? {
        self as? DBXTeamLogEventDetailsShowcaseUnresolveCommentDetails
    }

    @objc
    public var asShowcaseUntrashedDetails: DBXTeamLogEventDetailsShowcaseUntrashedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseUntrashedDetails
    }

    @objc
    public var asShowcaseUntrashedDeprecatedDetails: DBXTeamLogEventDetailsShowcaseUntrashedDeprecatedDetails? {
        self as? DBXTeamLogEventDetailsShowcaseUntrashedDeprecatedDetails
    }

    @objc
    public var asShowcaseViewDetails: DBXTeamLogEventDetailsShowcaseViewDetails? {
        self as? DBXTeamLogEventDetailsShowcaseViewDetails
    }

    @objc
    public var asSsoAddCertDetails: DBXTeamLogEventDetailsSsoAddCertDetails? {
        self as? DBXTeamLogEventDetailsSsoAddCertDetails
    }

    @objc
    public var asSsoAddLoginUrlDetails: DBXTeamLogEventDetailsSsoAddLoginUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoAddLoginUrlDetails
    }

    @objc
    public var asSsoAddLogoutUrlDetails: DBXTeamLogEventDetailsSsoAddLogoutUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoAddLogoutUrlDetails
    }

    @objc
    public var asSsoChangeCertDetails: DBXTeamLogEventDetailsSsoChangeCertDetails? {
        self as? DBXTeamLogEventDetailsSsoChangeCertDetails
    }

    @objc
    public var asSsoChangeLoginUrlDetails: DBXTeamLogEventDetailsSsoChangeLoginUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoChangeLoginUrlDetails
    }

    @objc
    public var asSsoChangeLogoutUrlDetails: DBXTeamLogEventDetailsSsoChangeLogoutUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoChangeLogoutUrlDetails
    }

    @objc
    public var asSsoChangeSamlIdentityModeDetails: DBXTeamLogEventDetailsSsoChangeSamlIdentityModeDetails? {
        self as? DBXTeamLogEventDetailsSsoChangeSamlIdentityModeDetails
    }

    @objc
    public var asSsoRemoveCertDetails: DBXTeamLogEventDetailsSsoRemoveCertDetails? {
        self as? DBXTeamLogEventDetailsSsoRemoveCertDetails
    }

    @objc
    public var asSsoRemoveLoginUrlDetails: DBXTeamLogEventDetailsSsoRemoveLoginUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoRemoveLoginUrlDetails
    }

    @objc
    public var asSsoRemoveLogoutUrlDetails: DBXTeamLogEventDetailsSsoRemoveLogoutUrlDetails? {
        self as? DBXTeamLogEventDetailsSsoRemoveLogoutUrlDetails
    }

    @objc
    public var asTeamFolderChangeStatusDetails: DBXTeamLogEventDetailsTeamFolderChangeStatusDetails? {
        self as? DBXTeamLogEventDetailsTeamFolderChangeStatusDetails
    }

    @objc
    public var asTeamFolderCreateDetails: DBXTeamLogEventDetailsTeamFolderCreateDetails? {
        self as? DBXTeamLogEventDetailsTeamFolderCreateDetails
    }

    @objc
    public var asTeamFolderDowngradeDetails: DBXTeamLogEventDetailsTeamFolderDowngradeDetails? {
        self as? DBXTeamLogEventDetailsTeamFolderDowngradeDetails
    }

    @objc
    public var asTeamFolderPermanentlyDeleteDetails: DBXTeamLogEventDetailsTeamFolderPermanentlyDeleteDetails? {
        self as? DBXTeamLogEventDetailsTeamFolderPermanentlyDeleteDetails
    }

    @objc
    public var asTeamFolderRenameDetails: DBXTeamLogEventDetailsTeamFolderRenameDetails? {
        self as? DBXTeamLogEventDetailsTeamFolderRenameDetails
    }

    @objc
    public var asTeamSelectiveSyncSettingsChangedDetails: DBXTeamLogEventDetailsTeamSelectiveSyncSettingsChangedDetails? {
        self as? DBXTeamLogEventDetailsTeamSelectiveSyncSettingsChangedDetails
    }

    @objc
    public var asAccountCaptureChangePolicyDetails: DBXTeamLogEventDetailsAccountCaptureChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsAccountCaptureChangePolicyDetails
    }

    @objc
    public var asAdminEmailRemindersChangedDetails: DBXTeamLogEventDetailsAdminEmailRemindersChangedDetails? {
        self as? DBXTeamLogEventDetailsAdminEmailRemindersChangedDetails
    }

    @objc
    public var asAllowDownloadDisabledDetails: DBXTeamLogEventDetailsAllowDownloadDisabledDetails? {
        self as? DBXTeamLogEventDetailsAllowDownloadDisabledDetails
    }

    @objc
    public var asAllowDownloadEnabledDetails: DBXTeamLogEventDetailsAllowDownloadEnabledDetails? {
        self as? DBXTeamLogEventDetailsAllowDownloadEnabledDetails
    }

    @objc
    public var asAppPermissionsChangedDetails: DBXTeamLogEventDetailsAppPermissionsChangedDetails? {
        self as? DBXTeamLogEventDetailsAppPermissionsChangedDetails
    }

    @objc
    public var asCameraUploadsPolicyChangedDetails: DBXTeamLogEventDetailsCameraUploadsPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsCameraUploadsPolicyChangedDetails
    }

    @objc
    public var asCaptureTranscriptPolicyChangedDetails: DBXTeamLogEventDetailsCaptureTranscriptPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsCaptureTranscriptPolicyChangedDetails
    }

    @objc
    public var asClassificationChangePolicyDetails: DBXTeamLogEventDetailsClassificationChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsClassificationChangePolicyDetails
    }

    @objc
    public var asComputerBackupPolicyChangedDetails: DBXTeamLogEventDetailsComputerBackupPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsComputerBackupPolicyChangedDetails
    }

    @objc
    public var asContentAdministrationPolicyChangedDetails: DBXTeamLogEventDetailsContentAdministrationPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsContentAdministrationPolicyChangedDetails
    }

    @objc
    public var asDataPlacementRestrictionChangePolicyDetails: DBXTeamLogEventDetailsDataPlacementRestrictionChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsDataPlacementRestrictionChangePolicyDetails
    }

    @objc
    public var asDataPlacementRestrictionSatisfyPolicyDetails: DBXTeamLogEventDetailsDataPlacementRestrictionSatisfyPolicyDetails? {
        self as? DBXTeamLogEventDetailsDataPlacementRestrictionSatisfyPolicyDetails
    }

    @objc
    public var asDeviceApprovalsAddExceptionDetails: DBXTeamLogEventDetailsDeviceApprovalsAddExceptionDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsAddExceptionDetails
    }

    @objc
    public var asDeviceApprovalsChangeDesktopPolicyDetails: DBXTeamLogEventDetailsDeviceApprovalsChangeDesktopPolicyDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsChangeDesktopPolicyDetails
    }

    @objc
    public var asDeviceApprovalsChangeMobilePolicyDetails: DBXTeamLogEventDetailsDeviceApprovalsChangeMobilePolicyDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsChangeMobilePolicyDetails
    }

    @objc
    public var asDeviceApprovalsChangeOverageActionDetails: DBXTeamLogEventDetailsDeviceApprovalsChangeOverageActionDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsChangeOverageActionDetails
    }

    @objc
    public var asDeviceApprovalsChangeUnlinkActionDetails: DBXTeamLogEventDetailsDeviceApprovalsChangeUnlinkActionDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsChangeUnlinkActionDetails
    }

    @objc
    public var asDeviceApprovalsRemoveExceptionDetails: DBXTeamLogEventDetailsDeviceApprovalsRemoveExceptionDetails? {
        self as? DBXTeamLogEventDetailsDeviceApprovalsRemoveExceptionDetails
    }

    @objc
    public var asDirectoryRestrictionsAddMembersDetails: DBXTeamLogEventDetailsDirectoryRestrictionsAddMembersDetails? {
        self as? DBXTeamLogEventDetailsDirectoryRestrictionsAddMembersDetails
    }

    @objc
    public var asDirectoryRestrictionsRemoveMembersDetails: DBXTeamLogEventDetailsDirectoryRestrictionsRemoveMembersDetails? {
        self as? DBXTeamLogEventDetailsDirectoryRestrictionsRemoveMembersDetails
    }

    @objc
    public var asDropboxPasswordsPolicyChangedDetails: DBXTeamLogEventDetailsDropboxPasswordsPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsDropboxPasswordsPolicyChangedDetails
    }

    @objc
    public var asEmailIngestPolicyChangedDetails: DBXTeamLogEventDetailsEmailIngestPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsEmailIngestPolicyChangedDetails
    }

    @objc
    public var asEmmAddExceptionDetails: DBXTeamLogEventDetailsEmmAddExceptionDetails? {
        self as? DBXTeamLogEventDetailsEmmAddExceptionDetails
    }

    @objc
    public var asEmmChangePolicyDetails: DBXTeamLogEventDetailsEmmChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsEmmChangePolicyDetails
    }

    @objc
    public var asEmmRemoveExceptionDetails: DBXTeamLogEventDetailsEmmRemoveExceptionDetails? {
        self as? DBXTeamLogEventDetailsEmmRemoveExceptionDetails
    }

    @objc
    public var asExtendedVersionHistoryChangePolicyDetails: DBXTeamLogEventDetailsExtendedVersionHistoryChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsExtendedVersionHistoryChangePolicyDetails
    }

    @objc
    public var asExternalDriveBackupPolicyChangedDetails: DBXTeamLogEventDetailsExternalDriveBackupPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsExternalDriveBackupPolicyChangedDetails
    }

    @objc
    public var asFileCommentsChangePolicyDetails: DBXTeamLogEventDetailsFileCommentsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsFileCommentsChangePolicyDetails
    }

    @objc
    public var asFileLockingPolicyChangedDetails: DBXTeamLogEventDetailsFileLockingPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsFileLockingPolicyChangedDetails
    }

    @objc
    public var asFileProviderMigrationPolicyChangedDetails: DBXTeamLogEventDetailsFileProviderMigrationPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsFileProviderMigrationPolicyChangedDetails
    }

    @objc
    public var asFileRequestsChangePolicyDetails: DBXTeamLogEventDetailsFileRequestsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsFileRequestsChangePolicyDetails
    }

    @objc
    public var asFileRequestsEmailsEnabledDetails: DBXTeamLogEventDetailsFileRequestsEmailsEnabledDetails? {
        self as? DBXTeamLogEventDetailsFileRequestsEmailsEnabledDetails
    }

    @objc
    public var asFileRequestsEmailsRestrictedToTeamOnlyDetails: DBXTeamLogEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails? {
        self as? DBXTeamLogEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails
    }

    @objc
    public var asFileTransfersPolicyChangedDetails: DBXTeamLogEventDetailsFileTransfersPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsFileTransfersPolicyChangedDetails
    }

    @objc
    public var asFolderLinkRestrictionPolicyChangedDetails: DBXTeamLogEventDetailsFolderLinkRestrictionPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsFolderLinkRestrictionPolicyChangedDetails
    }

    @objc
    public var asGoogleSsoChangePolicyDetails: DBXTeamLogEventDetailsGoogleSsoChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsGoogleSsoChangePolicyDetails
    }

    @objc
    public var asGroupUserManagementChangePolicyDetails: DBXTeamLogEventDetailsGroupUserManagementChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsGroupUserManagementChangePolicyDetails
    }

    @objc
    public var asIntegrationPolicyChangedDetails: DBXTeamLogEventDetailsIntegrationPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsIntegrationPolicyChangedDetails
    }

    @objc
    public var asInviteAcceptanceEmailPolicyChangedDetails: DBXTeamLogEventDetailsInviteAcceptanceEmailPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsInviteAcceptanceEmailPolicyChangedDetails
    }

    @objc
    public var asMemberRequestsChangePolicyDetails: DBXTeamLogEventDetailsMemberRequestsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsMemberRequestsChangePolicyDetails
    }

    @objc
    public var asMemberSendInvitePolicyChangedDetails: DBXTeamLogEventDetailsMemberSendInvitePolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsMemberSendInvitePolicyChangedDetails
    }

    @objc
    public var asMemberSpaceLimitsAddExceptionDetails: DBXTeamLogEventDetailsMemberSpaceLimitsAddExceptionDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsAddExceptionDetails
    }

    @objc
    public var asMemberSpaceLimitsChangeCapsTypePolicyDetails: DBXTeamLogEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails
    }

    @objc
    public var asMemberSpaceLimitsChangePolicyDetails: DBXTeamLogEventDetailsMemberSpaceLimitsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsChangePolicyDetails
    }

    @objc
    public var asMemberSpaceLimitsRemoveExceptionDetails: DBXTeamLogEventDetailsMemberSpaceLimitsRemoveExceptionDetails? {
        self as? DBXTeamLogEventDetailsMemberSpaceLimitsRemoveExceptionDetails
    }

    @objc
    public var asMemberSuggestionsChangePolicyDetails: DBXTeamLogEventDetailsMemberSuggestionsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsMemberSuggestionsChangePolicyDetails
    }

    @objc
    public var asMicrosoftOfficeAddinChangePolicyDetails: DBXTeamLogEventDetailsMicrosoftOfficeAddinChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsMicrosoftOfficeAddinChangePolicyDetails
    }

    @objc
    public var asNetworkControlChangePolicyDetails: DBXTeamLogEventDetailsNetworkControlChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsNetworkControlChangePolicyDetails
    }

    @objc
    public var asPaperChangeDeploymentPolicyDetails: DBXTeamLogEventDetailsPaperChangeDeploymentPolicyDetails? {
        self as? DBXTeamLogEventDetailsPaperChangeDeploymentPolicyDetails
    }

    @objc
    public var asPaperChangeMemberLinkPolicyDetails: DBXTeamLogEventDetailsPaperChangeMemberLinkPolicyDetails? {
        self as? DBXTeamLogEventDetailsPaperChangeMemberLinkPolicyDetails
    }

    @objc
    public var asPaperChangeMemberPolicyDetails: DBXTeamLogEventDetailsPaperChangeMemberPolicyDetails? {
        self as? DBXTeamLogEventDetailsPaperChangeMemberPolicyDetails
    }

    @objc
    public var asPaperChangePolicyDetails: DBXTeamLogEventDetailsPaperChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsPaperChangePolicyDetails
    }

    @objc
    public var asPaperDefaultFolderPolicyChangedDetails: DBXTeamLogEventDetailsPaperDefaultFolderPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsPaperDefaultFolderPolicyChangedDetails
    }

    @objc
    public var asPaperDesktopPolicyChangedDetails: DBXTeamLogEventDetailsPaperDesktopPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsPaperDesktopPolicyChangedDetails
    }

    @objc
    public var asPaperEnabledUsersGroupAdditionDetails: DBXTeamLogEventDetailsPaperEnabledUsersGroupAdditionDetails? {
        self as? DBXTeamLogEventDetailsPaperEnabledUsersGroupAdditionDetails
    }

    @objc
    public var asPaperEnabledUsersGroupRemovalDetails: DBXTeamLogEventDetailsPaperEnabledUsersGroupRemovalDetails? {
        self as? DBXTeamLogEventDetailsPaperEnabledUsersGroupRemovalDetails
    }

    @objc
    public var asPasswordStrengthRequirementsChangePolicyDetails: DBXTeamLogEventDetailsPasswordStrengthRequirementsChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsPasswordStrengthRequirementsChangePolicyDetails
    }

    @objc
    public var asPermanentDeleteChangePolicyDetails: DBXTeamLogEventDetailsPermanentDeleteChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsPermanentDeleteChangePolicyDetails
    }

    @objc
    public var asResellerSupportChangePolicyDetails: DBXTeamLogEventDetailsResellerSupportChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsResellerSupportChangePolicyDetails
    }

    @objc
    public var asRewindPolicyChangedDetails: DBXTeamLogEventDetailsRewindPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsRewindPolicyChangedDetails
    }

    @objc
    public var asSendForSignaturePolicyChangedDetails: DBXTeamLogEventDetailsSendForSignaturePolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsSendForSignaturePolicyChangedDetails
    }

    @objc
    public var asSharingChangeFolderJoinPolicyDetails: DBXTeamLogEventDetailsSharingChangeFolderJoinPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeFolderJoinPolicyDetails
    }

    @objc
    public var asSharingChangeLinkAllowChangeExpirationPolicyDetails: DBXTeamLogEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails
    }

    @objc
    public var asSharingChangeLinkDefaultExpirationPolicyDetails: DBXTeamLogEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails
    }

    @objc
    public var asSharingChangeLinkEnforcePasswordPolicyDetails: DBXTeamLogEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails
    }

    @objc
    public var asSharingChangeLinkPolicyDetails: DBXTeamLogEventDetailsSharingChangeLinkPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeLinkPolicyDetails
    }

    @objc
    public var asSharingChangeMemberPolicyDetails: DBXTeamLogEventDetailsSharingChangeMemberPolicyDetails? {
        self as? DBXTeamLogEventDetailsSharingChangeMemberPolicyDetails
    }

    @objc
    public var asShowcaseChangeDownloadPolicyDetails: DBXTeamLogEventDetailsShowcaseChangeDownloadPolicyDetails? {
        self as? DBXTeamLogEventDetailsShowcaseChangeDownloadPolicyDetails
    }

    @objc
    public var asShowcaseChangeEnabledPolicyDetails: DBXTeamLogEventDetailsShowcaseChangeEnabledPolicyDetails? {
        self as? DBXTeamLogEventDetailsShowcaseChangeEnabledPolicyDetails
    }

    @objc
    public var asShowcaseChangeExternalSharingPolicyDetails: DBXTeamLogEventDetailsShowcaseChangeExternalSharingPolicyDetails? {
        self as? DBXTeamLogEventDetailsShowcaseChangeExternalSharingPolicyDetails
    }

    @objc
    public var asSmarterSmartSyncPolicyChangedDetails: DBXTeamLogEventDetailsSmarterSmartSyncPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsSmarterSmartSyncPolicyChangedDetails
    }

    @objc
    public var asSmartSyncChangePolicyDetails: DBXTeamLogEventDetailsSmartSyncChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsSmartSyncChangePolicyDetails
    }

    @objc
    public var asSmartSyncNotOptOutDetails: DBXTeamLogEventDetailsSmartSyncNotOptOutDetails? {
        self as? DBXTeamLogEventDetailsSmartSyncNotOptOutDetails
    }

    @objc
    public var asSmartSyncOptOutDetails: DBXTeamLogEventDetailsSmartSyncOptOutDetails? {
        self as? DBXTeamLogEventDetailsSmartSyncOptOutDetails
    }

    @objc
    public var asSsoChangePolicyDetails: DBXTeamLogEventDetailsSsoChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsSsoChangePolicyDetails
    }

    @objc
    public var asTeamBrandingPolicyChangedDetails: DBXTeamLogEventDetailsTeamBrandingPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsTeamBrandingPolicyChangedDetails
    }

    @objc
    public var asTeamExtensionsPolicyChangedDetails: DBXTeamLogEventDetailsTeamExtensionsPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsTeamExtensionsPolicyChangedDetails
    }

    @objc
    public var asTeamSelectiveSyncPolicyChangedDetails: DBXTeamLogEventDetailsTeamSelectiveSyncPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsTeamSelectiveSyncPolicyChangedDetails
    }

    @objc
    public var asTeamSharingWhitelistSubjectsChangedDetails: DBXTeamLogEventDetailsTeamSharingWhitelistSubjectsChangedDetails? {
        self as? DBXTeamLogEventDetailsTeamSharingWhitelistSubjectsChangedDetails
    }

    @objc
    public var asTfaAddExceptionDetails: DBXTeamLogEventDetailsTfaAddExceptionDetails? {
        self as? DBXTeamLogEventDetailsTfaAddExceptionDetails
    }

    @objc
    public var asTfaChangePolicyDetails: DBXTeamLogEventDetailsTfaChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsTfaChangePolicyDetails
    }

    @objc
    public var asTfaRemoveExceptionDetails: DBXTeamLogEventDetailsTfaRemoveExceptionDetails? {
        self as? DBXTeamLogEventDetailsTfaRemoveExceptionDetails
    }

    @objc
    public var asTwoAccountChangePolicyDetails: DBXTeamLogEventDetailsTwoAccountChangePolicyDetails? {
        self as? DBXTeamLogEventDetailsTwoAccountChangePolicyDetails
    }

    @objc
    public var asViewerInfoPolicyChangedDetails: DBXTeamLogEventDetailsViewerInfoPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsViewerInfoPolicyChangedDetails
    }

    @objc
    public var asWatermarkingPolicyChangedDetails: DBXTeamLogEventDetailsWatermarkingPolicyChangedDetails? {
        self as? DBXTeamLogEventDetailsWatermarkingPolicyChangedDetails
    }

    @objc
    public var asWebSessionsChangeActiveSessionLimitDetails: DBXTeamLogEventDetailsWebSessionsChangeActiveSessionLimitDetails? {
        self as? DBXTeamLogEventDetailsWebSessionsChangeActiveSessionLimitDetails
    }

    @objc
    public var asWebSessionsChangeFixedLengthPolicyDetails: DBXTeamLogEventDetailsWebSessionsChangeFixedLengthPolicyDetails? {
        self as? DBXTeamLogEventDetailsWebSessionsChangeFixedLengthPolicyDetails
    }

    @objc
    public var asWebSessionsChangeIdleLengthPolicyDetails: DBXTeamLogEventDetailsWebSessionsChangeIdleLengthPolicyDetails? {
        self as? DBXTeamLogEventDetailsWebSessionsChangeIdleLengthPolicyDetails
    }

    @objc
    public var asDataResidencyMigrationRequestSuccessfulDetails: DBXTeamLogEventDetailsDataResidencyMigrationRequestSuccessfulDetails? {
        self as? DBXTeamLogEventDetailsDataResidencyMigrationRequestSuccessfulDetails
    }

    @objc
    public var asDataResidencyMigrationRequestUnsuccessfulDetails: DBXTeamLogEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails? {
        self as? DBXTeamLogEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails
    }

    @objc
    public var asTeamMergeFromDetails: DBXTeamLogEventDetailsTeamMergeFromDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeFromDetails
    }

    @objc
    public var asTeamMergeToDetails: DBXTeamLogEventDetailsTeamMergeToDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeToDetails
    }

    @objc
    public var asTeamProfileAddBackgroundDetails: DBXTeamLogEventDetailsTeamProfileAddBackgroundDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileAddBackgroundDetails
    }

    @objc
    public var asTeamProfileAddLogoDetails: DBXTeamLogEventDetailsTeamProfileAddLogoDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileAddLogoDetails
    }

    @objc
    public var asTeamProfileChangeBackgroundDetails: DBXTeamLogEventDetailsTeamProfileChangeBackgroundDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileChangeBackgroundDetails
    }

    @objc
    public var asTeamProfileChangeDefaultLanguageDetails: DBXTeamLogEventDetailsTeamProfileChangeDefaultLanguageDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileChangeDefaultLanguageDetails
    }

    @objc
    public var asTeamProfileChangeLogoDetails: DBXTeamLogEventDetailsTeamProfileChangeLogoDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileChangeLogoDetails
    }

    @objc
    public var asTeamProfileChangeNameDetails: DBXTeamLogEventDetailsTeamProfileChangeNameDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileChangeNameDetails
    }

    @objc
    public var asTeamProfileRemoveBackgroundDetails: DBXTeamLogEventDetailsTeamProfileRemoveBackgroundDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileRemoveBackgroundDetails
    }

    @objc
    public var asTeamProfileRemoveLogoDetails: DBXTeamLogEventDetailsTeamProfileRemoveLogoDetails? {
        self as? DBXTeamLogEventDetailsTeamProfileRemoveLogoDetails
    }

    @objc
    public var asTfaAddBackupPhoneDetails: DBXTeamLogEventDetailsTfaAddBackupPhoneDetails? {
        self as? DBXTeamLogEventDetailsTfaAddBackupPhoneDetails
    }

    @objc
    public var asTfaAddSecurityKeyDetails: DBXTeamLogEventDetailsTfaAddSecurityKeyDetails? {
        self as? DBXTeamLogEventDetailsTfaAddSecurityKeyDetails
    }

    @objc
    public var asTfaChangeBackupPhoneDetails: DBXTeamLogEventDetailsTfaChangeBackupPhoneDetails? {
        self as? DBXTeamLogEventDetailsTfaChangeBackupPhoneDetails
    }

    @objc
    public var asTfaChangeStatusDetails: DBXTeamLogEventDetailsTfaChangeStatusDetails? {
        self as? DBXTeamLogEventDetailsTfaChangeStatusDetails
    }

    @objc
    public var asTfaRemoveBackupPhoneDetails: DBXTeamLogEventDetailsTfaRemoveBackupPhoneDetails? {
        self as? DBXTeamLogEventDetailsTfaRemoveBackupPhoneDetails
    }

    @objc
    public var asTfaRemoveSecurityKeyDetails: DBXTeamLogEventDetailsTfaRemoveSecurityKeyDetails? {
        self as? DBXTeamLogEventDetailsTfaRemoveSecurityKeyDetails
    }

    @objc
    public var asTfaResetDetails: DBXTeamLogEventDetailsTfaResetDetails? {
        self as? DBXTeamLogEventDetailsTfaResetDetails
    }

    @objc
    public var asChangedEnterpriseAdminRoleDetails: DBXTeamLogEventDetailsChangedEnterpriseAdminRoleDetails? {
        self as? DBXTeamLogEventDetailsChangedEnterpriseAdminRoleDetails
    }

    @objc
    public var asChangedEnterpriseConnectedTeamStatusDetails: DBXTeamLogEventDetailsChangedEnterpriseConnectedTeamStatusDetails? {
        self as? DBXTeamLogEventDetailsChangedEnterpriseConnectedTeamStatusDetails
    }

    @objc
    public var asEndedEnterpriseAdminSessionDetails: DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDetails? {
        self as? DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDetails
    }

    @objc
    public var asEndedEnterpriseAdminSessionDeprecatedDetails: DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails? {
        self as? DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails
    }

    @objc
    public var asEnterpriseSettingsLockingDetails: DBXTeamLogEventDetailsEnterpriseSettingsLockingDetails? {
        self as? DBXTeamLogEventDetailsEnterpriseSettingsLockingDetails
    }

    @objc
    public var asGuestAdminChangeStatusDetails: DBXTeamLogEventDetailsGuestAdminChangeStatusDetails? {
        self as? DBXTeamLogEventDetailsGuestAdminChangeStatusDetails
    }

    @objc
    public var asStartedEnterpriseAdminSessionDetails: DBXTeamLogEventDetailsStartedEnterpriseAdminSessionDetails? {
        self as? DBXTeamLogEventDetailsStartedEnterpriseAdminSessionDetails
    }

    @objc
    public var asTeamMergeRequestAcceptedDetails: DBXTeamLogEventDetailsTeamMergeRequestAcceptedDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestAcceptedDetails
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestAutoCanceledDetails: DBXTeamLogEventDetailsTeamMergeRequestAutoCanceledDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestAutoCanceledDetails
    }

    @objc
    public var asTeamMergeRequestCanceledDetails: DBXTeamLogEventDetailsTeamMergeRequestCanceledDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestCanceledDetails
    }

    @objc
    public var asTeamMergeRequestCanceledShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestCanceledShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestExpiredDetails: DBXTeamLogEventDetailsTeamMergeRequestExpiredDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestExpiredDetails
    }

    @objc
    public var asTeamMergeRequestExpiredShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestExpiredShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestRejectedShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestRejectedShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestReminderDetails: DBXTeamLogEventDetailsTeamMergeRequestReminderDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestReminderDetails
    }

    @objc
    public var asTeamMergeRequestReminderShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestReminderShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestRevokedDetails: DBXTeamLogEventDetailsTeamMergeRequestRevokedDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestRevokedDetails
    }

    @objc
    public var asTeamMergeRequestSentShownToPrimaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails
    }

    @objc
    public var asTeamMergeRequestSentShownToSecondaryTeamDetails: DBXTeamLogEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails? {
        self as? DBXTeamLogEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails
    }

    @objc
    public var asMissingDetails: DBXTeamLogEventDetailsMissingDetails? {
        self as? DBXTeamLogEventDetailsMissingDetails
    }

    @objc
    public var asOther: DBXTeamLogEventDetailsOther? {
        self as? DBXTeamLogEventDetailsOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAdminAlertingAlertStateChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var adminAlertingAlertStateChangedDetails: DBXTeamLogAdminAlertingAlertStateChangedDetails

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingAlertStateChangedDetails) {
        self.adminAlertingAlertStateChangedDetails = arg
        let swift = TeamLog.EventDetails.adminAlertingAlertStateChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAdminAlertingChangedAlertConfigDetails: DBXTeamLogEventDetails {
    @objc
    public var adminAlertingChangedAlertConfigDetails: DBXTeamLogAdminAlertingChangedAlertConfigDetails

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingChangedAlertConfigDetails) {
        self.adminAlertingChangedAlertConfigDetails = arg
        let swift = TeamLog.EventDetails.adminAlertingChangedAlertConfigDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAdminAlertingTriggeredAlertDetails: DBXTeamLogEventDetails {
    @objc
    public var adminAlertingTriggeredAlertDetails: DBXTeamLogAdminAlertingTriggeredAlertDetails

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingTriggeredAlertDetails) {
        self.adminAlertingTriggeredAlertDetails = arg
        let swift = TeamLog.EventDetails.adminAlertingTriggeredAlertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRansomwareRestoreProcessCompletedDetails: DBXTeamLogEventDetails {
    @objc
    public var ransomwareRestoreProcessCompletedDetails: DBXTeamLogRansomwareRestoreProcessCompletedDetails

    @objc
    public init(_ arg: DBXTeamLogRansomwareRestoreProcessCompletedDetails) {
        self.ransomwareRestoreProcessCompletedDetails = arg
        let swift = TeamLog.EventDetails.ransomwareRestoreProcessCompletedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRansomwareRestoreProcessStartedDetails: DBXTeamLogEventDetails {
    @objc
    public var ransomwareRestoreProcessStartedDetails: DBXTeamLogRansomwareRestoreProcessStartedDetails

    @objc
    public init(_ arg: DBXTeamLogRansomwareRestoreProcessStartedDetails) {
        self.ransomwareRestoreProcessStartedDetails = arg
        let swift = TeamLog.EventDetails.ransomwareRestoreProcessStartedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppBlockedByPermissionsDetails: DBXTeamLogEventDetails {
    @objc
    public var appBlockedByPermissionsDetails: DBXTeamLogAppBlockedByPermissionsDetails

    @objc
    public init(_ arg: DBXTeamLogAppBlockedByPermissionsDetails) {
        self.appBlockedByPermissionsDetails = arg
        let swift = TeamLog.EventDetails.appBlockedByPermissionsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppLinkTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var appLinkTeamDetails: DBXTeamLogAppLinkTeamDetails

    @objc
    public init(_ arg: DBXTeamLogAppLinkTeamDetails) {
        self.appLinkTeamDetails = arg
        let swift = TeamLog.EventDetails.appLinkTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppLinkUserDetails: DBXTeamLogEventDetails {
    @objc
    public var appLinkUserDetails: DBXTeamLogAppLinkUserDetails

    @objc
    public init(_ arg: DBXTeamLogAppLinkUserDetails) {
        self.appLinkUserDetails = arg
        let swift = TeamLog.EventDetails.appLinkUserDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppUnlinkTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var appUnlinkTeamDetails: DBXTeamLogAppUnlinkTeamDetails

    @objc
    public init(_ arg: DBXTeamLogAppUnlinkTeamDetails) {
        self.appUnlinkTeamDetails = arg
        let swift = TeamLog.EventDetails.appUnlinkTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppUnlinkUserDetails: DBXTeamLogEventDetails {
    @objc
    public var appUnlinkUserDetails: DBXTeamLogAppUnlinkUserDetails

    @objc
    public init(_ arg: DBXTeamLogAppUnlinkUserDetails) {
        self.appUnlinkUserDetails = arg
        let swift = TeamLog.EventDetails.appUnlinkUserDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsIntegrationConnectedDetails: DBXTeamLogEventDetails {
    @objc
    public var integrationConnectedDetails: DBXTeamLogIntegrationConnectedDetails

    @objc
    public init(_ arg: DBXTeamLogIntegrationConnectedDetails) {
        self.integrationConnectedDetails = arg
        let swift = TeamLog.EventDetails.integrationConnectedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsIntegrationDisconnectedDetails: DBXTeamLogEventDetails {
    @objc
    public var integrationDisconnectedDetails: DBXTeamLogIntegrationDisconnectedDetails

    @objc
    public init(_ arg: DBXTeamLogIntegrationDisconnectedDetails) {
        self.integrationDisconnectedDetails = arg
        let swift = TeamLog.EventDetails.integrationDisconnectedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileAddCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileAddCommentDetails: DBXTeamLogFileAddCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileAddCommentDetails) {
        self.fileAddCommentDetails = arg
        let swift = TeamLog.EventDetails.fileAddCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileChangeCommentSubscriptionDetails: DBXTeamLogEventDetails {
    @objc
    public var fileChangeCommentSubscriptionDetails: DBXTeamLogFileChangeCommentSubscriptionDetails

    @objc
    public init(_ arg: DBXTeamLogFileChangeCommentSubscriptionDetails) {
        self.fileChangeCommentSubscriptionDetails = arg
        let swift = TeamLog.EventDetails.fileChangeCommentSubscriptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileDeleteCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileDeleteCommentDetails: DBXTeamLogFileDeleteCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileDeleteCommentDetails) {
        self.fileDeleteCommentDetails = arg
        let swift = TeamLog.EventDetails.fileDeleteCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileEditCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileEditCommentDetails: DBXTeamLogFileEditCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileEditCommentDetails) {
        self.fileEditCommentDetails = arg
        let swift = TeamLog.EventDetails.fileEditCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileLikeCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileLikeCommentDetails: DBXTeamLogFileLikeCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileLikeCommentDetails) {
        self.fileLikeCommentDetails = arg
        let swift = TeamLog.EventDetails.fileLikeCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileResolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileResolveCommentDetails: DBXTeamLogFileResolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileResolveCommentDetails) {
        self.fileResolveCommentDetails = arg
        let swift = TeamLog.EventDetails.fileResolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileUnlikeCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileUnlikeCommentDetails: DBXTeamLogFileUnlikeCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileUnlikeCommentDetails) {
        self.fileUnlikeCommentDetails = arg
        let swift = TeamLog.EventDetails.fileUnlikeCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileUnresolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var fileUnresolveCommentDetails: DBXTeamLogFileUnresolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogFileUnresolveCommentDetails) {
        self.fileUnresolveCommentDetails = arg
        let swift = TeamLog.EventDetails.fileUnresolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyAddFoldersDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyAddFoldersDetails: DBXTeamLogGovernancePolicyAddFoldersDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyAddFoldersDetails) {
        self.governancePolicyAddFoldersDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyAddFoldersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyAddFolderFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyAddFolderFailedDetails: DBXTeamLogGovernancePolicyAddFolderFailedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyAddFolderFailedDetails) {
        self.governancePolicyAddFolderFailedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyAddFolderFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyContentDisposedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyContentDisposedDetails: DBXTeamLogGovernancePolicyContentDisposedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyContentDisposedDetails) {
        self.governancePolicyContentDisposedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyContentDisposedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyCreateDetails: DBXTeamLogGovernancePolicyCreateDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyCreateDetails) {
        self.governancePolicyCreateDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyDeleteDetails: DBXTeamLogGovernancePolicyDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyDeleteDetails) {
        self.governancePolicyDeleteDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyEditDetailsDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyEditDetailsDetails: DBXTeamLogGovernancePolicyEditDetailsDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyEditDetailsDetails) {
        self.governancePolicyEditDetailsDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyEditDetailsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyEditDurationDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyEditDurationDetails: DBXTeamLogGovernancePolicyEditDurationDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyEditDurationDetails) {
        self.governancePolicyEditDurationDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyEditDurationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyExportCreatedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyExportCreatedDetails: DBXTeamLogGovernancePolicyExportCreatedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyExportCreatedDetails) {
        self.governancePolicyExportCreatedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyExportCreatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyExportRemovedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyExportRemovedDetails: DBXTeamLogGovernancePolicyExportRemovedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyExportRemovedDetails) {
        self.governancePolicyExportRemovedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyExportRemovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyRemoveFoldersDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyRemoveFoldersDetails: DBXTeamLogGovernancePolicyRemoveFoldersDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyRemoveFoldersDetails) {
        self.governancePolicyRemoveFoldersDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyRemoveFoldersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyReportCreatedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyReportCreatedDetails: DBXTeamLogGovernancePolicyReportCreatedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyReportCreatedDetails) {
        self.governancePolicyReportCreatedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyReportCreatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGovernancePolicyZipPartDownloadedDetails: DBXTeamLogEventDetails {
    @objc
    public var governancePolicyZipPartDownloadedDetails: DBXTeamLogGovernancePolicyZipPartDownloadedDetails

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyZipPartDownloadedDetails) {
        self.governancePolicyZipPartDownloadedDetails = arg
        let swift = TeamLog.EventDetails.governancePolicyZipPartDownloadedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsActivateAHoldDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsActivateAHoldDetails: DBXTeamLogLegalHoldsActivateAHoldDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsActivateAHoldDetails) {
        self.legalHoldsActivateAHoldDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsActivateAHoldDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsAddMembersDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsAddMembersDetails: DBXTeamLogLegalHoldsAddMembersDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsAddMembersDetails) {
        self.legalHoldsAddMembersDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsAddMembersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsChangeHoldDetailsDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsChangeHoldDetailsDetails: DBXTeamLogLegalHoldsChangeHoldDetailsDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsChangeHoldDetailsDetails) {
        self.legalHoldsChangeHoldDetailsDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsChangeHoldDetailsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsChangeHoldNameDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsChangeHoldNameDetails: DBXTeamLogLegalHoldsChangeHoldNameDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsChangeHoldNameDetails) {
        self.legalHoldsChangeHoldNameDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsChangeHoldNameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsExportAHoldDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsExportAHoldDetails: DBXTeamLogLegalHoldsExportAHoldDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportAHoldDetails) {
        self.legalHoldsExportAHoldDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsExportAHoldDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsExportCancelledDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsExportCancelledDetails: DBXTeamLogLegalHoldsExportCancelledDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportCancelledDetails) {
        self.legalHoldsExportCancelledDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsExportCancelledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsExportDownloadedDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsExportDownloadedDetails: DBXTeamLogLegalHoldsExportDownloadedDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportDownloadedDetails) {
        self.legalHoldsExportDownloadedDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsExportDownloadedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsExportRemovedDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsExportRemovedDetails: DBXTeamLogLegalHoldsExportRemovedDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportRemovedDetails) {
        self.legalHoldsExportRemovedDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsExportRemovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsReleaseAHoldDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsReleaseAHoldDetails: DBXTeamLogLegalHoldsReleaseAHoldDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsReleaseAHoldDetails) {
        self.legalHoldsReleaseAHoldDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsReleaseAHoldDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsRemoveMembersDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsRemoveMembersDetails: DBXTeamLogLegalHoldsRemoveMembersDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsRemoveMembersDetails) {
        self.legalHoldsRemoveMembersDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsRemoveMembersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLegalHoldsReportAHoldDetails: DBXTeamLogEventDetails {
    @objc
    public var legalHoldsReportAHoldDetails: DBXTeamLogLegalHoldsReportAHoldDetails

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsReportAHoldDetails) {
        self.legalHoldsReportAHoldDetails = arg
        let swift = TeamLog.EventDetails.legalHoldsReportAHoldDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceChangeIpDesktopDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceChangeIpDesktopDetails: DBXTeamLogDeviceChangeIpDesktopDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpDesktopDetails) {
        self.deviceChangeIpDesktopDetails = arg
        let swift = TeamLog.EventDetails.deviceChangeIpDesktopDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceChangeIpMobileDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceChangeIpMobileDetails: DBXTeamLogDeviceChangeIpMobileDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpMobileDetails) {
        self.deviceChangeIpMobileDetails = arg
        let swift = TeamLog.EventDetails.deviceChangeIpMobileDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceChangeIpWebDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceChangeIpWebDetails: DBXTeamLogDeviceChangeIpWebDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpWebDetails) {
        self.deviceChangeIpWebDetails = arg
        let swift = TeamLog.EventDetails.deviceChangeIpWebDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceDeleteOnUnlinkFailDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceDeleteOnUnlinkFailDetails: DBXTeamLogDeviceDeleteOnUnlinkFailDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceDeleteOnUnlinkFailDetails) {
        self.deviceDeleteOnUnlinkFailDetails = arg
        let swift = TeamLog.EventDetails.deviceDeleteOnUnlinkFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceDeleteOnUnlinkSuccessDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceDeleteOnUnlinkSuccessDetails: DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails) {
        self.deviceDeleteOnUnlinkSuccessDetails = arg
        let swift = TeamLog.EventDetails.deviceDeleteOnUnlinkSuccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceLinkFailDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceLinkFailDetails: DBXTeamLogDeviceLinkFailDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceLinkFailDetails) {
        self.deviceLinkFailDetails = arg
        let swift = TeamLog.EventDetails.deviceLinkFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceLinkSuccessDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceLinkSuccessDetails: DBXTeamLogDeviceLinkSuccessDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceLinkSuccessDetails) {
        self.deviceLinkSuccessDetails = arg
        let swift = TeamLog.EventDetails.deviceLinkSuccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceManagementDisabledDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceManagementDisabledDetails: DBXTeamLogDeviceManagementDisabledDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceManagementDisabledDetails) {
        self.deviceManagementDisabledDetails = arg
        let swift = TeamLog.EventDetails.deviceManagementDisabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceManagementEnabledDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceManagementEnabledDetails: DBXTeamLogDeviceManagementEnabledDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceManagementEnabledDetails) {
        self.deviceManagementEnabledDetails = arg
        let swift = TeamLog.EventDetails.deviceManagementEnabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceSyncBackupStatusChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceSyncBackupStatusChangedDetails: DBXTeamLogDeviceSyncBackupStatusChangedDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceSyncBackupStatusChangedDetails) {
        self.deviceSyncBackupStatusChangedDetails = arg
        let swift = TeamLog.EventDetails.deviceSyncBackupStatusChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceUnlinkDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceUnlinkDetails: DBXTeamLogDeviceUnlinkDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceUnlinkDetails) {
        self.deviceUnlinkDetails = arg
        let swift = TeamLog.EventDetails.deviceUnlinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDropboxPasswordsExportedDetails: DBXTeamLogEventDetails {
    @objc
    public var dropboxPasswordsExportedDetails: DBXTeamLogDropboxPasswordsExportedDetails

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsExportedDetails) {
        self.dropboxPasswordsExportedDetails = arg
        let swift = TeamLog.EventDetails.dropboxPasswordsExportedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDropboxPasswordsNewDeviceEnrolledDetails: DBXTeamLogEventDetails {
    @objc
    public var dropboxPasswordsNewDeviceEnrolledDetails: DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails) {
        self.dropboxPasswordsNewDeviceEnrolledDetails = arg
        let swift = TeamLog.EventDetails.dropboxPasswordsNewDeviceEnrolledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmRefreshAuthTokenDetails: DBXTeamLogEventDetails {
    @objc
    public var emmRefreshAuthTokenDetails: DBXTeamLogEmmRefreshAuthTokenDetails

    @objc
    public init(_ arg: DBXTeamLogEmmRefreshAuthTokenDetails) {
        self.emmRefreshAuthTokenDetails = arg
        let swift = TeamLog.EventDetails.emmRefreshAuthTokenDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails: DBXTeamLogEventDetails {
    @objc
    public var externalDriveBackupEligibilityStatusCheckedDetails: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails) {
        self.externalDriveBackupEligibilityStatusCheckedDetails = arg
        let swift = TeamLog.EventDetails.externalDriveBackupEligibilityStatusCheckedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExternalDriveBackupStatusChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var externalDriveBackupStatusChangedDetails: DBXTeamLogExternalDriveBackupStatusChangedDetails

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupStatusChangedDetails) {
        self.externalDriveBackupStatusChangedDetails = arg
        let swift = TeamLog.EventDetails.externalDriveBackupStatusChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountCaptureChangeAvailabilityDetails: DBXTeamLogEventDetails {
    @objc
    public var accountCaptureChangeAvailabilityDetails: DBXTeamLogAccountCaptureChangeAvailabilityDetails

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureChangeAvailabilityDetails) {
        self.accountCaptureChangeAvailabilityDetails = arg
        let swift = TeamLog.EventDetails.accountCaptureChangeAvailabilityDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountCaptureMigrateAccountDetails: DBXTeamLogEventDetails {
    @objc
    public var accountCaptureMigrateAccountDetails: DBXTeamLogAccountCaptureMigrateAccountDetails

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureMigrateAccountDetails) {
        self.accountCaptureMigrateAccountDetails = arg
        let swift = TeamLog.EventDetails.accountCaptureMigrateAccountDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountCaptureNotificationEmailsSentDetails: DBXTeamLogEventDetails {
    @objc
    public var accountCaptureNotificationEmailsSentDetails: DBXTeamLogAccountCaptureNotificationEmailsSentDetails

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureNotificationEmailsSentDetails) {
        self.accountCaptureNotificationEmailsSentDetails = arg
        let swift = TeamLog.EventDetails.accountCaptureNotificationEmailsSentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountCaptureRelinquishAccountDetails: DBXTeamLogEventDetails {
    @objc
    public var accountCaptureRelinquishAccountDetails: DBXTeamLogAccountCaptureRelinquishAccountDetails

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureRelinquishAccountDetails) {
        self.accountCaptureRelinquishAccountDetails = arg
        let swift = TeamLog.EventDetails.accountCaptureRelinquishAccountDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDisabledDomainInvitesDetails: DBXTeamLogEventDetails {
    @objc
    public var disabledDomainInvitesDetails: DBXTeamLogDisabledDomainInvitesDetails

    @objc
    public init(_ arg: DBXTeamLogDisabledDomainInvitesDetails) {
        self.disabledDomainInvitesDetails = arg
        let swift = TeamLog.EventDetails.disabledDomainInvitesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesApproveRequestToJoinTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesApproveRequestToJoinTeamDetails: DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails) {
        self.domainInvitesApproveRequestToJoinTeamDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesApproveRequestToJoinTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesDeclineRequestToJoinTeamDetails: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails) {
        self.domainInvitesDeclineRequestToJoinTeamDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesDeclineRequestToJoinTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesEmailExistingUsersDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesEmailExistingUsersDetails: DBXTeamLogDomainInvitesEmailExistingUsersDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesEmailExistingUsersDetails) {
        self.domainInvitesEmailExistingUsersDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesEmailExistingUsersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesRequestToJoinTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesRequestToJoinTeamDetails: DBXTeamLogDomainInvitesRequestToJoinTeamDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesRequestToJoinTeamDetails) {
        self.domainInvitesRequestToJoinTeamDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesRequestToJoinTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesSetInviteNewUserPrefToNoDetails: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails) {
        self.domainInvitesSetInviteNewUserPrefToNoDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesSetInviteNewUserPrefToNoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails: DBXTeamLogEventDetails {
    @objc
    public var domainInvitesSetInviteNewUserPrefToYesDetails: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails) {
        self.domainInvitesSetInviteNewUserPrefToYesDetails = arg
        let swift = TeamLog.EventDetails.domainInvitesSetInviteNewUserPrefToYesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainVerificationAddDomainFailDetails: DBXTeamLogEventDetails {
    @objc
    public var domainVerificationAddDomainFailDetails: DBXTeamLogDomainVerificationAddDomainFailDetails

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationAddDomainFailDetails) {
        self.domainVerificationAddDomainFailDetails = arg
        let swift = TeamLog.EventDetails.domainVerificationAddDomainFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainVerificationAddDomainSuccessDetails: DBXTeamLogEventDetails {
    @objc
    public var domainVerificationAddDomainSuccessDetails: DBXTeamLogDomainVerificationAddDomainSuccessDetails

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationAddDomainSuccessDetails) {
        self.domainVerificationAddDomainSuccessDetails = arg
        let swift = TeamLog.EventDetails.domainVerificationAddDomainSuccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDomainVerificationRemoveDomainDetails: DBXTeamLogEventDetails {
    @objc
    public var domainVerificationRemoveDomainDetails: DBXTeamLogDomainVerificationRemoveDomainDetails

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationRemoveDomainDetails) {
        self.domainVerificationRemoveDomainDetails = arg
        let swift = TeamLog.EventDetails.domainVerificationRemoveDomainDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEnabledDomainInvitesDetails: DBXTeamLogEventDetails {
    @objc
    public var enabledDomainInvitesDetails: DBXTeamLogEnabledDomainInvitesDetails

    @objc
    public init(_ arg: DBXTeamLogEnabledDomainInvitesDetails) {
        self.enabledDomainInvitesDetails = arg
        let swift = TeamLog.EventDetails.enabledDomainInvitesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyCancelKeyDeletionDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyCancelKeyDeletionDetails: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails) {
        self.teamEncryptionKeyCancelKeyDeletionDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyCancelKeyDeletionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyCreateKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyCreateKeyDetails: DBXTeamLogTeamEncryptionKeyCreateKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyCreateKeyDetails) {
        self.teamEncryptionKeyCreateKeyDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyCreateKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyDeleteKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyDeleteKeyDetails: DBXTeamLogTeamEncryptionKeyDeleteKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyDeleteKeyDetails) {
        self.teamEncryptionKeyDeleteKeyDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyDeleteKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyDisableKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyDisableKeyDetails: DBXTeamLogTeamEncryptionKeyDisableKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyDisableKeyDetails) {
        self.teamEncryptionKeyDisableKeyDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyDisableKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyEnableKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyEnableKeyDetails: DBXTeamLogTeamEncryptionKeyEnableKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyEnableKeyDetails) {
        self.teamEncryptionKeyEnableKeyDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyEnableKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyRotateKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyRotateKeyDetails: DBXTeamLogTeamEncryptionKeyRotateKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyRotateKeyDetails) {
        self.teamEncryptionKeyRotateKeyDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyRotateKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamEncryptionKeyScheduleKeyDeletionDetails: DBXTeamLogEventDetails {
    @objc
    public var teamEncryptionKeyScheduleKeyDeletionDetails: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails) {
        self.teamEncryptionKeyScheduleKeyDeletionDetails = arg
        let swift = TeamLog.EventDetails.teamEncryptionKeyScheduleKeyDeletionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsApplyNamingConventionDetails: DBXTeamLogEventDetails {
    @objc
    public var applyNamingConventionDetails: DBXTeamLogApplyNamingConventionDetails

    @objc
    public init(_ arg: DBXTeamLogApplyNamingConventionDetails) {
        self.applyNamingConventionDetails = arg
        let swift = TeamLog.EventDetails.applyNamingConventionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsCreateFolderDetails: DBXTeamLogEventDetails {
    @objc
    public var createFolderDetails: DBXTeamLogCreateFolderDetails

    @objc
    public init(_ arg: DBXTeamLogCreateFolderDetails) {
        self.createFolderDetails = arg
        let swift = TeamLog.EventDetails.createFolderDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileAddDetails: DBXTeamLogEventDetails {
    @objc
    public var fileAddDetails: DBXTeamLogFileAddDetails

    @objc
    public init(_ arg: DBXTeamLogFileAddDetails) {
        self.fileAddDetails = arg
        let swift = TeamLog.EventDetails.fileAddDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileAddFromAutomationDetails: DBXTeamLogEventDetails {
    @objc
    public var fileAddFromAutomationDetails: DBXTeamLogFileAddFromAutomationDetails

    @objc
    public init(_ arg: DBXTeamLogFileAddFromAutomationDetails) {
        self.fileAddFromAutomationDetails = arg
        let swift = TeamLog.EventDetails.fileAddFromAutomationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileCopyDetails: DBXTeamLogEventDetails {
    @objc
    public var fileCopyDetails: DBXTeamLogFileCopyDetails

    @objc
    public init(_ arg: DBXTeamLogFileCopyDetails) {
        self.fileCopyDetails = arg
        let swift = TeamLog.EventDetails.fileCopyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var fileDeleteDetails: DBXTeamLogFileDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogFileDeleteDetails) {
        self.fileDeleteDetails = arg
        let swift = TeamLog.EventDetails.fileDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var fileDownloadDetails: DBXTeamLogFileDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogFileDownloadDetails) {
        self.fileDownloadDetails = arg
        let swift = TeamLog.EventDetails.fileDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileEditDetails: DBXTeamLogEventDetails {
    @objc
    public var fileEditDetails: DBXTeamLogFileEditDetails

    @objc
    public init(_ arg: DBXTeamLogFileEditDetails) {
        self.fileEditDetails = arg
        let swift = TeamLog.EventDetails.fileEditDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileGetCopyReferenceDetails: DBXTeamLogEventDetails {
    @objc
    public var fileGetCopyReferenceDetails: DBXTeamLogFileGetCopyReferenceDetails

    @objc
    public init(_ arg: DBXTeamLogFileGetCopyReferenceDetails) {
        self.fileGetCopyReferenceDetails = arg
        let swift = TeamLog.EventDetails.fileGetCopyReferenceDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileLockingLockStatusChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var fileLockingLockStatusChangedDetails: DBXTeamLogFileLockingLockStatusChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFileLockingLockStatusChangedDetails) {
        self.fileLockingLockStatusChangedDetails = arg
        let swift = TeamLog.EventDetails.fileLockingLockStatusChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileMoveDetails: DBXTeamLogEventDetails {
    @objc
    public var fileMoveDetails: DBXTeamLogFileMoveDetails

    @objc
    public init(_ arg: DBXTeamLogFileMoveDetails) {
        self.fileMoveDetails = arg
        let swift = TeamLog.EventDetails.fileMoveDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFilePermanentlyDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var filePermanentlyDeleteDetails: DBXTeamLogFilePermanentlyDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogFilePermanentlyDeleteDetails) {
        self.filePermanentlyDeleteDetails = arg
        let swift = TeamLog.EventDetails.filePermanentlyDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFilePreviewDetails: DBXTeamLogEventDetails {
    @objc
    public var filePreviewDetails: DBXTeamLogFilePreviewDetails

    @objc
    public init(_ arg: DBXTeamLogFilePreviewDetails) {
        self.filePreviewDetails = arg
        let swift = TeamLog.EventDetails.filePreviewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRenameDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRenameDetails: DBXTeamLogFileRenameDetails

    @objc
    public init(_ arg: DBXTeamLogFileRenameDetails) {
        self.fileRenameDetails = arg
        let swift = TeamLog.EventDetails.fileRenameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRestoreDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRestoreDetails: DBXTeamLogFileRestoreDetails

    @objc
    public init(_ arg: DBXTeamLogFileRestoreDetails) {
        self.fileRestoreDetails = arg
        let swift = TeamLog.EventDetails.fileRestoreDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRevertDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRevertDetails: DBXTeamLogFileRevertDetails

    @objc
    public init(_ arg: DBXTeamLogFileRevertDetails) {
        self.fileRevertDetails = arg
        let swift = TeamLog.EventDetails.fileRevertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRollbackChangesDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRollbackChangesDetails: DBXTeamLogFileRollbackChangesDetails

    @objc
    public init(_ arg: DBXTeamLogFileRollbackChangesDetails) {
        self.fileRollbackChangesDetails = arg
        let swift = TeamLog.EventDetails.fileRollbackChangesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileSaveCopyReferenceDetails: DBXTeamLogEventDetails {
    @objc
    public var fileSaveCopyReferenceDetails: DBXTeamLogFileSaveCopyReferenceDetails

    @objc
    public init(_ arg: DBXTeamLogFileSaveCopyReferenceDetails) {
        self.fileSaveCopyReferenceDetails = arg
        let swift = TeamLog.EventDetails.fileSaveCopyReferenceDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFolderOverviewDescriptionChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var folderOverviewDescriptionChangedDetails: DBXTeamLogFolderOverviewDescriptionChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewDescriptionChangedDetails) {
        self.folderOverviewDescriptionChangedDetails = arg
        let swift = TeamLog.EventDetails.folderOverviewDescriptionChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFolderOverviewItemPinnedDetails: DBXTeamLogEventDetails {
    @objc
    public var folderOverviewItemPinnedDetails: DBXTeamLogFolderOverviewItemPinnedDetails

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewItemPinnedDetails) {
        self.folderOverviewItemPinnedDetails = arg
        let swift = TeamLog.EventDetails.folderOverviewItemPinnedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFolderOverviewItemUnpinnedDetails: DBXTeamLogEventDetails {
    @objc
    public var folderOverviewItemUnpinnedDetails: DBXTeamLogFolderOverviewItemUnpinnedDetails

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewItemUnpinnedDetails) {
        self.folderOverviewItemUnpinnedDetails = arg
        let swift = TeamLog.EventDetails.folderOverviewItemUnpinnedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsObjectLabelAddedDetails: DBXTeamLogEventDetails {
    @objc
    public var objectLabelAddedDetails: DBXTeamLogObjectLabelAddedDetails

    @objc
    public init(_ arg: DBXTeamLogObjectLabelAddedDetails) {
        self.objectLabelAddedDetails = arg
        let swift = TeamLog.EventDetails.objectLabelAddedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsObjectLabelRemovedDetails: DBXTeamLogEventDetails {
    @objc
    public var objectLabelRemovedDetails: DBXTeamLogObjectLabelRemovedDetails

    @objc
    public init(_ arg: DBXTeamLogObjectLabelRemovedDetails) {
        self.objectLabelRemovedDetails = arg
        let swift = TeamLog.EventDetails.objectLabelRemovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsObjectLabelUpdatedValueDetails: DBXTeamLogEventDetails {
    @objc
    public var objectLabelUpdatedValueDetails: DBXTeamLogObjectLabelUpdatedValueDetails

    @objc
    public init(_ arg: DBXTeamLogObjectLabelUpdatedValueDetails) {
        self.objectLabelUpdatedValueDetails = arg
        let swift = TeamLog.EventDetails.objectLabelUpdatedValueDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsOrganizeFolderWithTidyDetails: DBXTeamLogEventDetails {
    @objc
    public var organizeFolderWithTidyDetails: DBXTeamLogOrganizeFolderWithTidyDetails

    @objc
    public init(_ arg: DBXTeamLogOrganizeFolderWithTidyDetails) {
        self.organizeFolderWithTidyDetails = arg
        let swift = TeamLog.EventDetails.organizeFolderWithTidyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsReplayFileDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var replayFileDeleteDetails: DBXTeamLogReplayFileDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogReplayFileDeleteDetails) {
        self.replayFileDeleteDetails = arg
        let swift = TeamLog.EventDetails.replayFileDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRewindFolderDetails: DBXTeamLogEventDetails {
    @objc
    public var rewindFolderDetails: DBXTeamLogRewindFolderDetails

    @objc
    public init(_ arg: DBXTeamLogRewindFolderDetails) {
        self.rewindFolderDetails = arg
        let swift = TeamLog.EventDetails.rewindFolderDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsUndoNamingConventionDetails: DBXTeamLogEventDetails {
    @objc
    public var undoNamingConventionDetails: DBXTeamLogUndoNamingConventionDetails

    @objc
    public init(_ arg: DBXTeamLogUndoNamingConventionDetails) {
        self.undoNamingConventionDetails = arg
        let swift = TeamLog.EventDetails.undoNamingConventionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsUndoOrganizeFolderWithTidyDetails: DBXTeamLogEventDetails {
    @objc
    public var undoOrganizeFolderWithTidyDetails: DBXTeamLogUndoOrganizeFolderWithTidyDetails

    @objc
    public init(_ arg: DBXTeamLogUndoOrganizeFolderWithTidyDetails) {
        self.undoOrganizeFolderWithTidyDetails = arg
        let swift = TeamLog.EventDetails.undoOrganizeFolderWithTidyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsUserTagsAddedDetails: DBXTeamLogEventDetails {
    @objc
    public var userTagsAddedDetails: DBXTeamLogUserTagsAddedDetails

    @objc
    public init(_ arg: DBXTeamLogUserTagsAddedDetails) {
        self.userTagsAddedDetails = arg
        let swift = TeamLog.EventDetails.userTagsAddedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsUserTagsRemovedDetails: DBXTeamLogEventDetails {
    @objc
    public var userTagsRemovedDetails: DBXTeamLogUserTagsRemovedDetails

    @objc
    public init(_ arg: DBXTeamLogUserTagsRemovedDetails) {
        self.userTagsRemovedDetails = arg
        let swift = TeamLog.EventDetails.userTagsRemovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmailIngestReceiveFileDetails: DBXTeamLogEventDetails {
    @objc
    public var emailIngestReceiveFileDetails: DBXTeamLogEmailIngestReceiveFileDetails

    @objc
    public init(_ arg: DBXTeamLogEmailIngestReceiveFileDetails) {
        self.emailIngestReceiveFileDetails = arg
        let swift = TeamLog.EventDetails.emailIngestReceiveFileDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestChangeDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestChangeDetails: DBXTeamLogFileRequestChangeDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestChangeDetails) {
        self.fileRequestChangeDetails = arg
        let swift = TeamLog.EventDetails.fileRequestChangeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestCloseDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestCloseDetails: DBXTeamLogFileRequestCloseDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestCloseDetails) {
        self.fileRequestCloseDetails = arg
        let swift = TeamLog.EventDetails.fileRequestCloseDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestCreateDetails: DBXTeamLogFileRequestCreateDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestCreateDetails) {
        self.fileRequestCreateDetails = arg
        let swift = TeamLog.EventDetails.fileRequestCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestDeleteDetails: DBXTeamLogFileRequestDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestDeleteDetails) {
        self.fileRequestDeleteDetails = arg
        let swift = TeamLog.EventDetails.fileRequestDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestReceiveFileDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestReceiveFileDetails: DBXTeamLogFileRequestReceiveFileDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestReceiveFileDetails) {
        self.fileRequestReceiveFileDetails = arg
        let swift = TeamLog.EventDetails.fileRequestReceiveFileDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupAddExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var groupAddExternalIdDetails: DBXTeamLogGroupAddExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogGroupAddExternalIdDetails) {
        self.groupAddExternalIdDetails = arg
        let swift = TeamLog.EventDetails.groupAddExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupAddMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var groupAddMemberDetails: DBXTeamLogGroupAddMemberDetails

    @objc
    public init(_ arg: DBXTeamLogGroupAddMemberDetails) {
        self.groupAddMemberDetails = arg
        let swift = TeamLog.EventDetails.groupAddMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupChangeExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var groupChangeExternalIdDetails: DBXTeamLogGroupChangeExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogGroupChangeExternalIdDetails) {
        self.groupChangeExternalIdDetails = arg
        let swift = TeamLog.EventDetails.groupChangeExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupChangeManagementTypeDetails: DBXTeamLogEventDetails {
    @objc
    public var groupChangeManagementTypeDetails: DBXTeamLogGroupChangeManagementTypeDetails

    @objc
    public init(_ arg: DBXTeamLogGroupChangeManagementTypeDetails) {
        self.groupChangeManagementTypeDetails = arg
        let swift = TeamLog.EventDetails.groupChangeManagementTypeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupChangeMemberRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var groupChangeMemberRoleDetails: DBXTeamLogGroupChangeMemberRoleDetails

    @objc
    public init(_ arg: DBXTeamLogGroupChangeMemberRoleDetails) {
        self.groupChangeMemberRoleDetails = arg
        let swift = TeamLog.EventDetails.groupChangeMemberRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var groupCreateDetails: DBXTeamLogGroupCreateDetails

    @objc
    public init(_ arg: DBXTeamLogGroupCreateDetails) {
        self.groupCreateDetails = arg
        let swift = TeamLog.EventDetails.groupCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var groupDeleteDetails: DBXTeamLogGroupDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogGroupDeleteDetails) {
        self.groupDeleteDetails = arg
        let swift = TeamLog.EventDetails.groupDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupDescriptionUpdatedDetails: DBXTeamLogEventDetails {
    @objc
    public var groupDescriptionUpdatedDetails: DBXTeamLogGroupDescriptionUpdatedDetails

    @objc
    public init(_ arg: DBXTeamLogGroupDescriptionUpdatedDetails) {
        self.groupDescriptionUpdatedDetails = arg
        let swift = TeamLog.EventDetails.groupDescriptionUpdatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupJoinPolicyUpdatedDetails: DBXTeamLogEventDetails {
    @objc
    public var groupJoinPolicyUpdatedDetails: DBXTeamLogGroupJoinPolicyUpdatedDetails

    @objc
    public init(_ arg: DBXTeamLogGroupJoinPolicyUpdatedDetails) {
        self.groupJoinPolicyUpdatedDetails = arg
        let swift = TeamLog.EventDetails.groupJoinPolicyUpdatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupMovedDetails: DBXTeamLogEventDetails {
    @objc
    public var groupMovedDetails: DBXTeamLogGroupMovedDetails

    @objc
    public init(_ arg: DBXTeamLogGroupMovedDetails) {
        self.groupMovedDetails = arg
        let swift = TeamLog.EventDetails.groupMovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupRemoveExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var groupRemoveExternalIdDetails: DBXTeamLogGroupRemoveExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogGroupRemoveExternalIdDetails) {
        self.groupRemoveExternalIdDetails = arg
        let swift = TeamLog.EventDetails.groupRemoveExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupRemoveMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var groupRemoveMemberDetails: DBXTeamLogGroupRemoveMemberDetails

    @objc
    public init(_ arg: DBXTeamLogGroupRemoveMemberDetails) {
        self.groupRemoveMemberDetails = arg
        let swift = TeamLog.EventDetails.groupRemoveMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupRenameDetails: DBXTeamLogEventDetails {
    @objc
    public var groupRenameDetails: DBXTeamLogGroupRenameDetails

    @objc
    public init(_ arg: DBXTeamLogGroupRenameDetails) {
        self.groupRenameDetails = arg
        let swift = TeamLog.EventDetails.groupRenameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountLockOrUnlockedDetails: DBXTeamLogEventDetails {
    @objc
    public var accountLockOrUnlockedDetails: DBXTeamLogAccountLockOrUnlockedDetails

    @objc
    public init(_ arg: DBXTeamLogAccountLockOrUnlockedDetails) {
        self.accountLockOrUnlockedDetails = arg
        let swift = TeamLog.EventDetails.accountLockOrUnlockedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmErrorDetails: DBXTeamLogEventDetails {
    @objc
    public var emmErrorDetails: DBXTeamLogEmmErrorDetails

    @objc
    public init(_ arg: DBXTeamLogEmmErrorDetails) {
        self.emmErrorDetails = arg
        let swift = TeamLog.EventDetails.emmErrorDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGuestAdminSignedInViaTrustedTeamsDetails: DBXTeamLogEventDetails {
    @objc
    public var guestAdminSignedInViaTrustedTeamsDetails: DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails

    @objc
    public init(_ arg: DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails) {
        self.guestAdminSignedInViaTrustedTeamsDetails = arg
        let swift = TeamLog.EventDetails.guestAdminSignedInViaTrustedTeamsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails: DBXTeamLogEventDetails {
    @objc
    public var guestAdminSignedOutViaTrustedTeamsDetails: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails

    @objc
    public init(_ arg: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails) {
        self.guestAdminSignedOutViaTrustedTeamsDetails = arg
        let swift = TeamLog.EventDetails.guestAdminSignedOutViaTrustedTeamsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLoginFailDetails: DBXTeamLogEventDetails {
    @objc
    public var loginFailDetails: DBXTeamLogLoginFailDetails

    @objc
    public init(_ arg: DBXTeamLogLoginFailDetails) {
        self.loginFailDetails = arg
        let swift = TeamLog.EventDetails.loginFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLoginSuccessDetails: DBXTeamLogEventDetails {
    @objc
    public var loginSuccessDetails: DBXTeamLogLoginSuccessDetails

    @objc
    public init(_ arg: DBXTeamLogLoginSuccessDetails) {
        self.loginSuccessDetails = arg
        let swift = TeamLog.EventDetails.loginSuccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsLogoutDetails: DBXTeamLogEventDetails {
    @objc
    public var logoutDetails: DBXTeamLogLogoutDetails

    @objc
    public init(_ arg: DBXTeamLogLogoutDetails) {
        self.logoutDetails = arg
        let swift = TeamLog.EventDetails.logoutDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsResellerSupportSessionEndDetails: DBXTeamLogEventDetails {
    @objc
    public var resellerSupportSessionEndDetails: DBXTeamLogResellerSupportSessionEndDetails

    @objc
    public init(_ arg: DBXTeamLogResellerSupportSessionEndDetails) {
        self.resellerSupportSessionEndDetails = arg
        let swift = TeamLog.EventDetails.resellerSupportSessionEndDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsResellerSupportSessionStartDetails: DBXTeamLogEventDetails {
    @objc
    public var resellerSupportSessionStartDetails: DBXTeamLogResellerSupportSessionStartDetails

    @objc
    public init(_ arg: DBXTeamLogResellerSupportSessionStartDetails) {
        self.resellerSupportSessionStartDetails = arg
        let swift = TeamLog.EventDetails.resellerSupportSessionStartDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSignInAsSessionEndDetails: DBXTeamLogEventDetails {
    @objc
    public var signInAsSessionEndDetails: DBXTeamLogSignInAsSessionEndDetails

    @objc
    public init(_ arg: DBXTeamLogSignInAsSessionEndDetails) {
        self.signInAsSessionEndDetails = arg
        let swift = TeamLog.EventDetails.signInAsSessionEndDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSignInAsSessionStartDetails: DBXTeamLogEventDetails {
    @objc
    public var signInAsSessionStartDetails: DBXTeamLogSignInAsSessionStartDetails

    @objc
    public init(_ arg: DBXTeamLogSignInAsSessionStartDetails) {
        self.signInAsSessionStartDetails = arg
        let swift = TeamLog.EventDetails.signInAsSessionStartDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoErrorDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoErrorDetails: DBXTeamLogSsoErrorDetails

    @objc
    public init(_ arg: DBXTeamLogSsoErrorDetails) {
        self.ssoErrorDetails = arg
        let swift = TeamLog.EventDetails.ssoErrorDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBackupAdminInvitationSentDetails: DBXTeamLogEventDetails {
    @objc
    public var backupAdminInvitationSentDetails: DBXTeamLogBackupAdminInvitationSentDetails

    @objc
    public init(_ arg: DBXTeamLogBackupAdminInvitationSentDetails) {
        self.backupAdminInvitationSentDetails = arg
        let swift = TeamLog.EventDetails.backupAdminInvitationSentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBackupInvitationOpenedDetails: DBXTeamLogEventDetails {
    @objc
    public var backupInvitationOpenedDetails: DBXTeamLogBackupInvitationOpenedDetails

    @objc
    public init(_ arg: DBXTeamLogBackupInvitationOpenedDetails) {
        self.backupInvitationOpenedDetails = arg
        let swift = TeamLog.EventDetails.backupInvitationOpenedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsCreateTeamInviteLinkDetails: DBXTeamLogEventDetails {
    @objc
    public var createTeamInviteLinkDetails: DBXTeamLogCreateTeamInviteLinkDetails

    @objc
    public init(_ arg: DBXTeamLogCreateTeamInviteLinkDetails) {
        self.createTeamInviteLinkDetails = arg
        let swift = TeamLog.EventDetails.createTeamInviteLinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeleteTeamInviteLinkDetails: DBXTeamLogEventDetails {
    @objc
    public var deleteTeamInviteLinkDetails: DBXTeamLogDeleteTeamInviteLinkDetails

    @objc
    public init(_ arg: DBXTeamLogDeleteTeamInviteLinkDetails) {
        self.deleteTeamInviteLinkDetails = arg
        let swift = TeamLog.EventDetails.deleteTeamInviteLinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberAddExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var memberAddExternalIdDetails: DBXTeamLogMemberAddExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogMemberAddExternalIdDetails) {
        self.memberAddExternalIdDetails = arg
        let swift = TeamLog.EventDetails.memberAddExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberAddNameDetails: DBXTeamLogEventDetails {
    @objc
    public var memberAddNameDetails: DBXTeamLogMemberAddNameDetails

    @objc
    public init(_ arg: DBXTeamLogMemberAddNameDetails) {
        self.memberAddNameDetails = arg
        let swift = TeamLog.EventDetails.memberAddNameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeAdminRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeAdminRoleDetails: DBXTeamLogMemberChangeAdminRoleDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeAdminRoleDetails) {
        self.memberChangeAdminRoleDetails = arg
        let swift = TeamLog.EventDetails.memberChangeAdminRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeEmailDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeEmailDetails: DBXTeamLogMemberChangeEmailDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeEmailDetails) {
        self.memberChangeEmailDetails = arg
        let swift = TeamLog.EventDetails.memberChangeEmailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeExternalIdDetails: DBXTeamLogMemberChangeExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeExternalIdDetails) {
        self.memberChangeExternalIdDetails = arg
        let swift = TeamLog.EventDetails.memberChangeExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeMembershipTypeDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeMembershipTypeDetails: DBXTeamLogMemberChangeMembershipTypeDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeMembershipTypeDetails) {
        self.memberChangeMembershipTypeDetails = arg
        let swift = TeamLog.EventDetails.memberChangeMembershipTypeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeNameDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeNameDetails: DBXTeamLogMemberChangeNameDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeNameDetails) {
        self.memberChangeNameDetails = arg
        let swift = TeamLog.EventDetails.memberChangeNameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeResellerRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeResellerRoleDetails: DBXTeamLogMemberChangeResellerRoleDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeResellerRoleDetails) {
        self.memberChangeResellerRoleDetails = arg
        let swift = TeamLog.EventDetails.memberChangeResellerRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberChangeStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var memberChangeStatusDetails: DBXTeamLogMemberChangeStatusDetails

    @objc
    public init(_ arg: DBXTeamLogMemberChangeStatusDetails) {
        self.memberChangeStatusDetails = arg
        let swift = TeamLog.EventDetails.memberChangeStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberDeleteManualContactsDetails: DBXTeamLogEventDetails {
    @objc
    public var memberDeleteManualContactsDetails: DBXTeamLogMemberDeleteManualContactsDetails

    @objc
    public init(_ arg: DBXTeamLogMemberDeleteManualContactsDetails) {
        self.memberDeleteManualContactsDetails = arg
        let swift = TeamLog.EventDetails.memberDeleteManualContactsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberDeleteProfilePhotoDetails: DBXTeamLogEventDetails {
    @objc
    public var memberDeleteProfilePhotoDetails: DBXTeamLogMemberDeleteProfilePhotoDetails

    @objc
    public init(_ arg: DBXTeamLogMemberDeleteProfilePhotoDetails) {
        self.memberDeleteProfilePhotoDetails = arg
        let swift = TeamLog.EventDetails.memberDeleteProfilePhotoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberPermanentlyDeleteAccountContentsDetails: DBXTeamLogEventDetails {
    @objc
    public var memberPermanentlyDeleteAccountContentsDetails: DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails

    @objc
    public init(_ arg: DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails) {
        self.memberPermanentlyDeleteAccountContentsDetails = arg
        let swift = TeamLog.EventDetails.memberPermanentlyDeleteAccountContentsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberRemoveExternalIdDetails: DBXTeamLogEventDetails {
    @objc
    public var memberRemoveExternalIdDetails: DBXTeamLogMemberRemoveExternalIdDetails

    @objc
    public init(_ arg: DBXTeamLogMemberRemoveExternalIdDetails) {
        self.memberRemoveExternalIdDetails = arg
        let swift = TeamLog.EventDetails.memberRemoveExternalIdDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSetProfilePhotoDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSetProfilePhotoDetails: DBXTeamLogMemberSetProfilePhotoDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSetProfilePhotoDetails) {
        self.memberSetProfilePhotoDetails = arg
        let swift = TeamLog.EventDetails.memberSetProfilePhotoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsAddCustomQuotaDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsAddCustomQuotaDetails: DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails) {
        self.memberSpaceLimitsAddCustomQuotaDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsAddCustomQuotaDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsChangeCustomQuotaDetails: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails) {
        self.memberSpaceLimitsChangeCustomQuotaDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsChangeCustomQuotaDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsChangeStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsChangeStatusDetails: DBXTeamLogMemberSpaceLimitsChangeStatusDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeStatusDetails) {
        self.memberSpaceLimitsChangeStatusDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsChangeStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsRemoveCustomQuotaDetails: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails) {
        self.memberSpaceLimitsRemoveCustomQuotaDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsRemoveCustomQuotaDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSuggestDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSuggestDetails: DBXTeamLogMemberSuggestDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSuggestDetails) {
        self.memberSuggestDetails = arg
        let swift = TeamLog.EventDetails.memberSuggestDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberTransferAccountContentsDetails: DBXTeamLogEventDetails {
    @objc
    public var memberTransferAccountContentsDetails: DBXTeamLogMemberTransferAccountContentsDetails

    @objc
    public init(_ arg: DBXTeamLogMemberTransferAccountContentsDetails) {
        self.memberTransferAccountContentsDetails = arg
        let swift = TeamLog.EventDetails.memberTransferAccountContentsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPendingSecondaryEmailAddedDetails: DBXTeamLogEventDetails {
    @objc
    public var pendingSecondaryEmailAddedDetails: DBXTeamLogPendingSecondaryEmailAddedDetails

    @objc
    public init(_ arg: DBXTeamLogPendingSecondaryEmailAddedDetails) {
        self.pendingSecondaryEmailAddedDetails = arg
        let swift = TeamLog.EventDetails.pendingSecondaryEmailAddedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSecondaryEmailDeletedDetails: DBXTeamLogEventDetails {
    @objc
    public var secondaryEmailDeletedDetails: DBXTeamLogSecondaryEmailDeletedDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryEmailDeletedDetails) {
        self.secondaryEmailDeletedDetails = arg
        let swift = TeamLog.EventDetails.secondaryEmailDeletedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSecondaryEmailVerifiedDetails: DBXTeamLogEventDetails {
    @objc
    public var secondaryEmailVerifiedDetails: DBXTeamLogSecondaryEmailVerifiedDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryEmailVerifiedDetails) {
        self.secondaryEmailVerifiedDetails = arg
        let swift = TeamLog.EventDetails.secondaryEmailVerifiedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSecondaryMailsPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var secondaryMailsPolicyChangedDetails: DBXTeamLogSecondaryMailsPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryMailsPolicyChangedDetails) {
        self.secondaryMailsPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.secondaryMailsPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderAddPageDetails: DBXTeamLogEventDetails {
    @objc
    public var binderAddPageDetails: DBXTeamLogBinderAddPageDetails

    @objc
    public init(_ arg: DBXTeamLogBinderAddPageDetails) {
        self.binderAddPageDetails = arg
        let swift = TeamLog.EventDetails.binderAddPageDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderAddSectionDetails: DBXTeamLogEventDetails {
    @objc
    public var binderAddSectionDetails: DBXTeamLogBinderAddSectionDetails

    @objc
    public init(_ arg: DBXTeamLogBinderAddSectionDetails) {
        self.binderAddSectionDetails = arg
        let swift = TeamLog.EventDetails.binderAddSectionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderRemovePageDetails: DBXTeamLogEventDetails {
    @objc
    public var binderRemovePageDetails: DBXTeamLogBinderRemovePageDetails

    @objc
    public init(_ arg: DBXTeamLogBinderRemovePageDetails) {
        self.binderRemovePageDetails = arg
        let swift = TeamLog.EventDetails.binderRemovePageDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderRemoveSectionDetails: DBXTeamLogEventDetails {
    @objc
    public var binderRemoveSectionDetails: DBXTeamLogBinderRemoveSectionDetails

    @objc
    public init(_ arg: DBXTeamLogBinderRemoveSectionDetails) {
        self.binderRemoveSectionDetails = arg
        let swift = TeamLog.EventDetails.binderRemoveSectionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderRenamePageDetails: DBXTeamLogEventDetails {
    @objc
    public var binderRenamePageDetails: DBXTeamLogBinderRenamePageDetails

    @objc
    public init(_ arg: DBXTeamLogBinderRenamePageDetails) {
        self.binderRenamePageDetails = arg
        let swift = TeamLog.EventDetails.binderRenamePageDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderRenameSectionDetails: DBXTeamLogEventDetails {
    @objc
    public var binderRenameSectionDetails: DBXTeamLogBinderRenameSectionDetails

    @objc
    public init(_ arg: DBXTeamLogBinderRenameSectionDetails) {
        self.binderRenameSectionDetails = arg
        let swift = TeamLog.EventDetails.binderRenameSectionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderReorderPageDetails: DBXTeamLogEventDetails {
    @objc
    public var binderReorderPageDetails: DBXTeamLogBinderReorderPageDetails

    @objc
    public init(_ arg: DBXTeamLogBinderReorderPageDetails) {
        self.binderReorderPageDetails = arg
        let swift = TeamLog.EventDetails.binderReorderPageDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsBinderReorderSectionDetails: DBXTeamLogEventDetails {
    @objc
    public var binderReorderSectionDetails: DBXTeamLogBinderReorderSectionDetails

    @objc
    public init(_ arg: DBXTeamLogBinderReorderSectionDetails) {
        self.binderReorderSectionDetails = arg
        let swift = TeamLog.EventDetails.binderReorderSectionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentAddMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentAddMemberDetails: DBXTeamLogPaperContentAddMemberDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentAddMemberDetails) {
        self.paperContentAddMemberDetails = arg
        let swift = TeamLog.EventDetails.paperContentAddMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentAddToFolderDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentAddToFolderDetails: DBXTeamLogPaperContentAddToFolderDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentAddToFolderDetails) {
        self.paperContentAddToFolderDetails = arg
        let swift = TeamLog.EventDetails.paperContentAddToFolderDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentArchiveDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentArchiveDetails: DBXTeamLogPaperContentArchiveDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentArchiveDetails) {
        self.paperContentArchiveDetails = arg
        let swift = TeamLog.EventDetails.paperContentArchiveDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentCreateDetails: DBXTeamLogPaperContentCreateDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentCreateDetails) {
        self.paperContentCreateDetails = arg
        let swift = TeamLog.EventDetails.paperContentCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentPermanentlyDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentPermanentlyDeleteDetails: DBXTeamLogPaperContentPermanentlyDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentPermanentlyDeleteDetails) {
        self.paperContentPermanentlyDeleteDetails = arg
        let swift = TeamLog.EventDetails.paperContentPermanentlyDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentRemoveFromFolderDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentRemoveFromFolderDetails: DBXTeamLogPaperContentRemoveFromFolderDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentRemoveFromFolderDetails) {
        self.paperContentRemoveFromFolderDetails = arg
        let swift = TeamLog.EventDetails.paperContentRemoveFromFolderDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentRemoveMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentRemoveMemberDetails: DBXTeamLogPaperContentRemoveMemberDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentRemoveMemberDetails) {
        self.paperContentRemoveMemberDetails = arg
        let swift = TeamLog.EventDetails.paperContentRemoveMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentRenameDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentRenameDetails: DBXTeamLogPaperContentRenameDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentRenameDetails) {
        self.paperContentRenameDetails = arg
        let swift = TeamLog.EventDetails.paperContentRenameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperContentRestoreDetails: DBXTeamLogEventDetails {
    @objc
    public var paperContentRestoreDetails: DBXTeamLogPaperContentRestoreDetails

    @objc
    public init(_ arg: DBXTeamLogPaperContentRestoreDetails) {
        self.paperContentRestoreDetails = arg
        let swift = TeamLog.EventDetails.paperContentRestoreDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocAddCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocAddCommentDetails: DBXTeamLogPaperDocAddCommentDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocAddCommentDetails) {
        self.paperDocAddCommentDetails = arg
        let swift = TeamLog.EventDetails.paperDocAddCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocChangeMemberRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocChangeMemberRoleDetails: DBXTeamLogPaperDocChangeMemberRoleDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeMemberRoleDetails) {
        self.paperDocChangeMemberRoleDetails = arg
        let swift = TeamLog.EventDetails.paperDocChangeMemberRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocChangeSharingPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocChangeSharingPolicyDetails: DBXTeamLogPaperDocChangeSharingPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeSharingPolicyDetails) {
        self.paperDocChangeSharingPolicyDetails = arg
        let swift = TeamLog.EventDetails.paperDocChangeSharingPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocChangeSubscriptionDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocChangeSubscriptionDetails: DBXTeamLogPaperDocChangeSubscriptionDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeSubscriptionDetails) {
        self.paperDocChangeSubscriptionDetails = arg
        let swift = TeamLog.EventDetails.paperDocChangeSubscriptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocDeletedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocDeletedDetails: DBXTeamLogPaperDocDeletedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocDeletedDetails) {
        self.paperDocDeletedDetails = arg
        let swift = TeamLog.EventDetails.paperDocDeletedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocDeleteCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocDeleteCommentDetails: DBXTeamLogPaperDocDeleteCommentDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocDeleteCommentDetails) {
        self.paperDocDeleteCommentDetails = arg
        let swift = TeamLog.EventDetails.paperDocDeleteCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocDownloadDetails: DBXTeamLogPaperDocDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocDownloadDetails) {
        self.paperDocDownloadDetails = arg
        let swift = TeamLog.EventDetails.paperDocDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocEditDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocEditDetails: DBXTeamLogPaperDocEditDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocEditDetails) {
        self.paperDocEditDetails = arg
        let swift = TeamLog.EventDetails.paperDocEditDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocEditCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocEditCommentDetails: DBXTeamLogPaperDocEditCommentDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocEditCommentDetails) {
        self.paperDocEditCommentDetails = arg
        let swift = TeamLog.EventDetails.paperDocEditCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocFollowedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocFollowedDetails: DBXTeamLogPaperDocFollowedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocFollowedDetails) {
        self.paperDocFollowedDetails = arg
        let swift = TeamLog.EventDetails.paperDocFollowedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocMentionDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocMentionDetails: DBXTeamLogPaperDocMentionDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocMentionDetails) {
        self.paperDocMentionDetails = arg
        let swift = TeamLog.EventDetails.paperDocMentionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocOwnershipChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocOwnershipChangedDetails: DBXTeamLogPaperDocOwnershipChangedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocOwnershipChangedDetails) {
        self.paperDocOwnershipChangedDetails = arg
        let swift = TeamLog.EventDetails.paperDocOwnershipChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocRequestAccessDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocRequestAccessDetails: DBXTeamLogPaperDocRequestAccessDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocRequestAccessDetails) {
        self.paperDocRequestAccessDetails = arg
        let swift = TeamLog.EventDetails.paperDocRequestAccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocResolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocResolveCommentDetails: DBXTeamLogPaperDocResolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocResolveCommentDetails) {
        self.paperDocResolveCommentDetails = arg
        let swift = TeamLog.EventDetails.paperDocResolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocRevertDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocRevertDetails: DBXTeamLogPaperDocRevertDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocRevertDetails) {
        self.paperDocRevertDetails = arg
        let swift = TeamLog.EventDetails.paperDocRevertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocSlackShareDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocSlackShareDetails: DBXTeamLogPaperDocSlackShareDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocSlackShareDetails) {
        self.paperDocSlackShareDetails = arg
        let swift = TeamLog.EventDetails.paperDocSlackShareDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocTeamInviteDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocTeamInviteDetails: DBXTeamLogPaperDocTeamInviteDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocTeamInviteDetails) {
        self.paperDocTeamInviteDetails = arg
        let swift = TeamLog.EventDetails.paperDocTeamInviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocTrashedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocTrashedDetails: DBXTeamLogPaperDocTrashedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocTrashedDetails) {
        self.paperDocTrashedDetails = arg
        let swift = TeamLog.EventDetails.paperDocTrashedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocUnresolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocUnresolveCommentDetails: DBXTeamLogPaperDocUnresolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocUnresolveCommentDetails) {
        self.paperDocUnresolveCommentDetails = arg
        let swift = TeamLog.EventDetails.paperDocUnresolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocUntrashedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocUntrashedDetails: DBXTeamLogPaperDocUntrashedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocUntrashedDetails) {
        self.paperDocUntrashedDetails = arg
        let swift = TeamLog.EventDetails.paperDocUntrashedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDocViewDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDocViewDetails: DBXTeamLogPaperDocViewDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDocViewDetails) {
        self.paperDocViewDetails = arg
        let swift = TeamLog.EventDetails.paperDocViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperExternalViewAllowDetails: DBXTeamLogEventDetails {
    @objc
    public var paperExternalViewAllowDetails: DBXTeamLogPaperExternalViewAllowDetails

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewAllowDetails) {
        self.paperExternalViewAllowDetails = arg
        let swift = TeamLog.EventDetails.paperExternalViewAllowDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperExternalViewDefaultTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var paperExternalViewDefaultTeamDetails: DBXTeamLogPaperExternalViewDefaultTeamDetails

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewDefaultTeamDetails) {
        self.paperExternalViewDefaultTeamDetails = arg
        let swift = TeamLog.EventDetails.paperExternalViewDefaultTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperExternalViewForbidDetails: DBXTeamLogEventDetails {
    @objc
    public var paperExternalViewForbidDetails: DBXTeamLogPaperExternalViewForbidDetails

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewForbidDetails) {
        self.paperExternalViewForbidDetails = arg
        let swift = TeamLog.EventDetails.paperExternalViewForbidDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperFolderChangeSubscriptionDetails: DBXTeamLogEventDetails {
    @objc
    public var paperFolderChangeSubscriptionDetails: DBXTeamLogPaperFolderChangeSubscriptionDetails

    @objc
    public init(_ arg: DBXTeamLogPaperFolderChangeSubscriptionDetails) {
        self.paperFolderChangeSubscriptionDetails = arg
        let swift = TeamLog.EventDetails.paperFolderChangeSubscriptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperFolderDeletedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperFolderDeletedDetails: DBXTeamLogPaperFolderDeletedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperFolderDeletedDetails) {
        self.paperFolderDeletedDetails = arg
        let swift = TeamLog.EventDetails.paperFolderDeletedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperFolderFollowedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperFolderFollowedDetails: DBXTeamLogPaperFolderFollowedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperFolderFollowedDetails) {
        self.paperFolderFollowedDetails = arg
        let swift = TeamLog.EventDetails.paperFolderFollowedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperFolderTeamInviteDetails: DBXTeamLogEventDetails {
    @objc
    public var paperFolderTeamInviteDetails: DBXTeamLogPaperFolderTeamInviteDetails

    @objc
    public init(_ arg: DBXTeamLogPaperFolderTeamInviteDetails) {
        self.paperFolderTeamInviteDetails = arg
        let swift = TeamLog.EventDetails.paperFolderTeamInviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperPublishedLinkChangePermissionDetails: DBXTeamLogEventDetails {
    @objc
    public var paperPublishedLinkChangePermissionDetails: DBXTeamLogPaperPublishedLinkChangePermissionDetails

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkChangePermissionDetails) {
        self.paperPublishedLinkChangePermissionDetails = arg
        let swift = TeamLog.EventDetails.paperPublishedLinkChangePermissionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperPublishedLinkCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var paperPublishedLinkCreateDetails: DBXTeamLogPaperPublishedLinkCreateDetails

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkCreateDetails) {
        self.paperPublishedLinkCreateDetails = arg
        let swift = TeamLog.EventDetails.paperPublishedLinkCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperPublishedLinkDisabledDetails: DBXTeamLogEventDetails {
    @objc
    public var paperPublishedLinkDisabledDetails: DBXTeamLogPaperPublishedLinkDisabledDetails

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkDisabledDetails) {
        self.paperPublishedLinkDisabledDetails = arg
        let swift = TeamLog.EventDetails.paperPublishedLinkDisabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperPublishedLinkViewDetails: DBXTeamLogEventDetails {
    @objc
    public var paperPublishedLinkViewDetails: DBXTeamLogPaperPublishedLinkViewDetails

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkViewDetails) {
        self.paperPublishedLinkViewDetails = arg
        let swift = TeamLog.EventDetails.paperPublishedLinkViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPasswordChangeDetails: DBXTeamLogEventDetails {
    @objc
    public var passwordChangeDetails: DBXTeamLogPasswordChangeDetails

    @objc
    public init(_ arg: DBXTeamLogPasswordChangeDetails) {
        self.passwordChangeDetails = arg
        let swift = TeamLog.EventDetails.passwordChangeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPasswordResetDetails: DBXTeamLogEventDetails {
    @objc
    public var passwordResetDetails: DBXTeamLogPasswordResetDetails

    @objc
    public init(_ arg: DBXTeamLogPasswordResetDetails) {
        self.passwordResetDetails = arg
        let swift = TeamLog.EventDetails.passwordResetDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPasswordResetAllDetails: DBXTeamLogEventDetails {
    @objc
    public var passwordResetAllDetails: DBXTeamLogPasswordResetAllDetails

    @objc
    public init(_ arg: DBXTeamLogPasswordResetAllDetails) {
        self.passwordResetAllDetails = arg
        let swift = TeamLog.EventDetails.passwordResetAllDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsClassificationCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var classificationCreateReportDetails: DBXTeamLogClassificationCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogClassificationCreateReportDetails) {
        self.classificationCreateReportDetails = arg
        let swift = TeamLog.EventDetails.classificationCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsClassificationCreateReportFailDetails: DBXTeamLogEventDetails {
    @objc
    public var classificationCreateReportFailDetails: DBXTeamLogClassificationCreateReportFailDetails

    @objc
    public init(_ arg: DBXTeamLogClassificationCreateReportFailDetails) {
        self.classificationCreateReportFailDetails = arg
        let swift = TeamLog.EventDetails.classificationCreateReportFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmCreateExceptionsReportDetails: DBXTeamLogEventDetails {
    @objc
    public var emmCreateExceptionsReportDetails: DBXTeamLogEmmCreateExceptionsReportDetails

    @objc
    public init(_ arg: DBXTeamLogEmmCreateExceptionsReportDetails) {
        self.emmCreateExceptionsReportDetails = arg
        let swift = TeamLog.EventDetails.emmCreateExceptionsReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmCreateUsageReportDetails: DBXTeamLogEventDetails {
    @objc
    public var emmCreateUsageReportDetails: DBXTeamLogEmmCreateUsageReportDetails

    @objc
    public init(_ arg: DBXTeamLogEmmCreateUsageReportDetails) {
        self.emmCreateUsageReportDetails = arg
        let swift = TeamLog.EventDetails.emmCreateUsageReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExportMembersReportDetails: DBXTeamLogEventDetails {
    @objc
    public var exportMembersReportDetails: DBXTeamLogExportMembersReportDetails

    @objc
    public init(_ arg: DBXTeamLogExportMembersReportDetails) {
        self.exportMembersReportDetails = arg
        let swift = TeamLog.EventDetails.exportMembersReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExportMembersReportFailDetails: DBXTeamLogEventDetails {
    @objc
    public var exportMembersReportFailDetails: DBXTeamLogExportMembersReportFailDetails

    @objc
    public init(_ arg: DBXTeamLogExportMembersReportFailDetails) {
        self.exportMembersReportFailDetails = arg
        let swift = TeamLog.EventDetails.exportMembersReportFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExternalSharingCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var externalSharingCreateReportDetails: DBXTeamLogExternalSharingCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogExternalSharingCreateReportDetails) {
        self.externalSharingCreateReportDetails = arg
        let swift = TeamLog.EventDetails.externalSharingCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExternalSharingReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var externalSharingReportFailedDetails: DBXTeamLogExternalSharingReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogExternalSharingReportFailedDetails) {
        self.externalSharingReportFailedDetails = arg
        let swift = TeamLog.EventDetails.externalSharingReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoExpirationLinkGenCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var noExpirationLinkGenCreateReportDetails: DBXTeamLogNoExpirationLinkGenCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogNoExpirationLinkGenCreateReportDetails) {
        self.noExpirationLinkGenCreateReportDetails = arg
        let swift = TeamLog.EventDetails.noExpirationLinkGenCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoExpirationLinkGenReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var noExpirationLinkGenReportFailedDetails: DBXTeamLogNoExpirationLinkGenReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogNoExpirationLinkGenReportFailedDetails) {
        self.noExpirationLinkGenReportFailedDetails = arg
        let swift = TeamLog.EventDetails.noExpirationLinkGenReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoPasswordLinkGenCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var noPasswordLinkGenCreateReportDetails: DBXTeamLogNoPasswordLinkGenCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkGenCreateReportDetails) {
        self.noPasswordLinkGenCreateReportDetails = arg
        let swift = TeamLog.EventDetails.noPasswordLinkGenCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoPasswordLinkGenReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var noPasswordLinkGenReportFailedDetails: DBXTeamLogNoPasswordLinkGenReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkGenReportFailedDetails) {
        self.noPasswordLinkGenReportFailedDetails = arg
        let swift = TeamLog.EventDetails.noPasswordLinkGenReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoPasswordLinkViewCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var noPasswordLinkViewCreateReportDetails: DBXTeamLogNoPasswordLinkViewCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkViewCreateReportDetails) {
        self.noPasswordLinkViewCreateReportDetails = arg
        let swift = TeamLog.EventDetails.noPasswordLinkViewCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoPasswordLinkViewReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var noPasswordLinkViewReportFailedDetails: DBXTeamLogNoPasswordLinkViewReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkViewReportFailedDetails) {
        self.noPasswordLinkViewReportFailedDetails = arg
        let swift = TeamLog.EventDetails.noPasswordLinkViewReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsOutdatedLinkViewCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var outdatedLinkViewCreateReportDetails: DBXTeamLogOutdatedLinkViewCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogOutdatedLinkViewCreateReportDetails) {
        self.outdatedLinkViewCreateReportDetails = arg
        let swift = TeamLog.EventDetails.outdatedLinkViewCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsOutdatedLinkViewReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var outdatedLinkViewReportFailedDetails: DBXTeamLogOutdatedLinkViewReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogOutdatedLinkViewReportFailedDetails) {
        self.outdatedLinkViewReportFailedDetails = arg
        let swift = TeamLog.EventDetails.outdatedLinkViewReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperAdminExportStartDetails: DBXTeamLogEventDetails {
    @objc
    public var paperAdminExportStartDetails: DBXTeamLogPaperAdminExportStartDetails

    @objc
    public init(_ arg: DBXTeamLogPaperAdminExportStartDetails) {
        self.paperAdminExportStartDetails = arg
        let swift = TeamLog.EventDetails.paperAdminExportStartDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRansomwareAlertCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var ransomwareAlertCreateReportDetails: DBXTeamLogRansomwareAlertCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogRansomwareAlertCreateReportDetails) {
        self.ransomwareAlertCreateReportDetails = arg
        let swift = TeamLog.EventDetails.ransomwareAlertCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRansomwareAlertCreateReportFailedDetails: DBXTeamLogEventDetails {
    @objc
    public var ransomwareAlertCreateReportFailedDetails: DBXTeamLogRansomwareAlertCreateReportFailedDetails

    @objc
    public init(_ arg: DBXTeamLogRansomwareAlertCreateReportFailedDetails) {
        self.ransomwareAlertCreateReportFailedDetails = arg
        let swift = TeamLog.EventDetails.ransomwareAlertCreateReportFailedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSmartSyncCreateAdminPrivilegeReportDetails: DBXTeamLogEventDetails {
    @objc
    public var smartSyncCreateAdminPrivilegeReportDetails: DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails

    @objc
    public init(_ arg: DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails) {
        self.smartSyncCreateAdminPrivilegeReportDetails = arg
        let swift = TeamLog.EventDetails.smartSyncCreateAdminPrivilegeReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamActivityCreateReportDetails: DBXTeamLogEventDetails {
    @objc
    public var teamActivityCreateReportDetails: DBXTeamLogTeamActivityCreateReportDetails

    @objc
    public init(_ arg: DBXTeamLogTeamActivityCreateReportDetails) {
        self.teamActivityCreateReportDetails = arg
        let swift = TeamLog.EventDetails.teamActivityCreateReportDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamActivityCreateReportFailDetails: DBXTeamLogEventDetails {
    @objc
    public var teamActivityCreateReportFailDetails: DBXTeamLogTeamActivityCreateReportFailDetails

    @objc
    public init(_ arg: DBXTeamLogTeamActivityCreateReportFailDetails) {
        self.teamActivityCreateReportFailDetails = arg
        let swift = TeamLog.EventDetails.teamActivityCreateReportFailDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsCollectionShareDetails: DBXTeamLogEventDetails {
    @objc
    public var collectionShareDetails: DBXTeamLogCollectionShareDetails

    @objc
    public init(_ arg: DBXTeamLogCollectionShareDetails) {
        self.collectionShareDetails = arg
        let swift = TeamLog.EventDetails.collectionShareDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersFileAddDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersFileAddDetails: DBXTeamLogFileTransfersFileAddDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersFileAddDetails) {
        self.fileTransfersFileAddDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersFileAddDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersTransferDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersTransferDeleteDetails: DBXTeamLogFileTransfersTransferDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferDeleteDetails) {
        self.fileTransfersTransferDeleteDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersTransferDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersTransferDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersTransferDownloadDetails: DBXTeamLogFileTransfersTransferDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferDownloadDetails) {
        self.fileTransfersTransferDownloadDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersTransferDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersTransferSendDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersTransferSendDetails: DBXTeamLogFileTransfersTransferSendDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferSendDetails) {
        self.fileTransfersTransferSendDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersTransferSendDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersTransferViewDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersTransferViewDetails: DBXTeamLogFileTransfersTransferViewDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferViewDetails) {
        self.fileTransfersTransferViewDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersTransferViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoteAclInviteOnlyDetails: DBXTeamLogEventDetails {
    @objc
    public var noteAclInviteOnlyDetails: DBXTeamLogNoteAclInviteOnlyDetails

    @objc
    public init(_ arg: DBXTeamLogNoteAclInviteOnlyDetails) {
        self.noteAclInviteOnlyDetails = arg
        let swift = TeamLog.EventDetails.noteAclInviteOnlyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoteAclLinkDetails: DBXTeamLogEventDetails {
    @objc
    public var noteAclLinkDetails: DBXTeamLogNoteAclLinkDetails

    @objc
    public init(_ arg: DBXTeamLogNoteAclLinkDetails) {
        self.noteAclLinkDetails = arg
        let swift = TeamLog.EventDetails.noteAclLinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoteAclTeamLinkDetails: DBXTeamLogEventDetails {
    @objc
    public var noteAclTeamLinkDetails: DBXTeamLogNoteAclTeamLinkDetails

    @objc
    public init(_ arg: DBXTeamLogNoteAclTeamLinkDetails) {
        self.noteAclTeamLinkDetails = arg
        let swift = TeamLog.EventDetails.noteAclTeamLinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoteSharedDetails: DBXTeamLogEventDetails {
    @objc
    public var noteSharedDetails: DBXTeamLogNoteSharedDetails

    @objc
    public init(_ arg: DBXTeamLogNoteSharedDetails) {
        self.noteSharedDetails = arg
        let swift = TeamLog.EventDetails.noteSharedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNoteShareReceiveDetails: DBXTeamLogEventDetails {
    @objc
    public var noteShareReceiveDetails: DBXTeamLogNoteShareReceiveDetails

    @objc
    public init(_ arg: DBXTeamLogNoteShareReceiveDetails) {
        self.noteShareReceiveDetails = arg
        let swift = TeamLog.EventDetails.noteShareReceiveDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsOpenNoteSharedDetails: DBXTeamLogEventDetails {
    @objc
    public var openNoteSharedDetails: DBXTeamLogOpenNoteSharedDetails

    @objc
    public init(_ arg: DBXTeamLogOpenNoteSharedDetails) {
        self.openNoteSharedDetails = arg
        let swift = TeamLog.EventDetails.openNoteSharedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsReplayFileSharedLinkCreatedDetails: DBXTeamLogEventDetails {
    @objc
    public var replayFileSharedLinkCreatedDetails: DBXTeamLogReplayFileSharedLinkCreatedDetails

    @objc
    public init(_ arg: DBXTeamLogReplayFileSharedLinkCreatedDetails) {
        self.replayFileSharedLinkCreatedDetails = arg
        let swift = TeamLog.EventDetails.replayFileSharedLinkCreatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsReplayFileSharedLinkModifiedDetails: DBXTeamLogEventDetails {
    @objc
    public var replayFileSharedLinkModifiedDetails: DBXTeamLogReplayFileSharedLinkModifiedDetails

    @objc
    public init(_ arg: DBXTeamLogReplayFileSharedLinkModifiedDetails) {
        self.replayFileSharedLinkModifiedDetails = arg
        let swift = TeamLog.EventDetails.replayFileSharedLinkModifiedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsReplayProjectTeamAddDetails: DBXTeamLogEventDetails {
    @objc
    public var replayProjectTeamAddDetails: DBXTeamLogReplayProjectTeamAddDetails

    @objc
    public init(_ arg: DBXTeamLogReplayProjectTeamAddDetails) {
        self.replayProjectTeamAddDetails = arg
        let swift = TeamLog.EventDetails.replayProjectTeamAddDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsReplayProjectTeamDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var replayProjectTeamDeleteDetails: DBXTeamLogReplayProjectTeamDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogReplayProjectTeamDeleteDetails) {
        self.replayProjectTeamDeleteDetails = arg
        let swift = TeamLog.EventDetails.replayProjectTeamDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfAddGroupDetails: DBXTeamLogEventDetails {
    @objc
    public var sfAddGroupDetails: DBXTeamLogSfAddGroupDetails

    @objc
    public init(_ arg: DBXTeamLogSfAddGroupDetails) {
        self.sfAddGroupDetails = arg
        let swift = TeamLog.EventDetails.sfAddGroupDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfAllowNonMembersToViewSharedLinksDetails: DBXTeamLogEventDetails {
    @objc
    public var sfAllowNonMembersToViewSharedLinksDetails: DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails

    @objc
    public init(_ arg: DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails) {
        self.sfAllowNonMembersToViewSharedLinksDetails = arg
        let swift = TeamLog.EventDetails.sfAllowNonMembersToViewSharedLinksDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfExternalInviteWarnDetails: DBXTeamLogEventDetails {
    @objc
    public var sfExternalInviteWarnDetails: DBXTeamLogSfExternalInviteWarnDetails

    @objc
    public init(_ arg: DBXTeamLogSfExternalInviteWarnDetails) {
        self.sfExternalInviteWarnDetails = arg
        let swift = TeamLog.EventDetails.sfExternalInviteWarnDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfFbInviteDetails: DBXTeamLogEventDetails {
    @objc
    public var sfFbInviteDetails: DBXTeamLogSfFbInviteDetails

    @objc
    public init(_ arg: DBXTeamLogSfFbInviteDetails) {
        self.sfFbInviteDetails = arg
        let swift = TeamLog.EventDetails.sfFbInviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfFbInviteChangeRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var sfFbInviteChangeRoleDetails: DBXTeamLogSfFbInviteChangeRoleDetails

    @objc
    public init(_ arg: DBXTeamLogSfFbInviteChangeRoleDetails) {
        self.sfFbInviteChangeRoleDetails = arg
        let swift = TeamLog.EventDetails.sfFbInviteChangeRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfFbUninviteDetails: DBXTeamLogEventDetails {
    @objc
    public var sfFbUninviteDetails: DBXTeamLogSfFbUninviteDetails

    @objc
    public init(_ arg: DBXTeamLogSfFbUninviteDetails) {
        self.sfFbUninviteDetails = arg
        let swift = TeamLog.EventDetails.sfFbUninviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfInviteGroupDetails: DBXTeamLogEventDetails {
    @objc
    public var sfInviteGroupDetails: DBXTeamLogSfInviteGroupDetails

    @objc
    public init(_ arg: DBXTeamLogSfInviteGroupDetails) {
        self.sfInviteGroupDetails = arg
        let swift = TeamLog.EventDetails.sfInviteGroupDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamGrantAccessDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamGrantAccessDetails: DBXTeamLogSfTeamGrantAccessDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamGrantAccessDetails) {
        self.sfTeamGrantAccessDetails = arg
        let swift = TeamLog.EventDetails.sfTeamGrantAccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamInviteDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamInviteDetails: DBXTeamLogSfTeamInviteDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamInviteDetails) {
        self.sfTeamInviteDetails = arg
        let swift = TeamLog.EventDetails.sfTeamInviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamInviteChangeRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamInviteChangeRoleDetails: DBXTeamLogSfTeamInviteChangeRoleDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamInviteChangeRoleDetails) {
        self.sfTeamInviteChangeRoleDetails = arg
        let swift = TeamLog.EventDetails.sfTeamInviteChangeRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamJoinDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamJoinDetails: DBXTeamLogSfTeamJoinDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamJoinDetails) {
        self.sfTeamJoinDetails = arg
        let swift = TeamLog.EventDetails.sfTeamJoinDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamJoinFromOobLinkDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamJoinFromOobLinkDetails: DBXTeamLogSfTeamJoinFromOobLinkDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamJoinFromOobLinkDetails) {
        self.sfTeamJoinFromOobLinkDetails = arg
        let swift = TeamLog.EventDetails.sfTeamJoinFromOobLinkDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSfTeamUninviteDetails: DBXTeamLogEventDetails {
    @objc
    public var sfTeamUninviteDetails: DBXTeamLogSfTeamUninviteDetails

    @objc
    public init(_ arg: DBXTeamLogSfTeamUninviteDetails) {
        self.sfTeamUninviteDetails = arg
        let swift = TeamLog.EventDetails.sfTeamUninviteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentAddInviteesDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentAddInviteesDetails: DBXTeamLogSharedContentAddInviteesDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddInviteesDetails) {
        self.sharedContentAddInviteesDetails = arg
        let swift = TeamLog.EventDetails.sharedContentAddInviteesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentAddLinkExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentAddLinkExpiryDetails: DBXTeamLogSharedContentAddLinkExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddLinkExpiryDetails) {
        self.sharedContentAddLinkExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedContentAddLinkExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentAddLinkPasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentAddLinkPasswordDetails: DBXTeamLogSharedContentAddLinkPasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddLinkPasswordDetails) {
        self.sharedContentAddLinkPasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedContentAddLinkPasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentAddMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentAddMemberDetails: DBXTeamLogSharedContentAddMemberDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddMemberDetails) {
        self.sharedContentAddMemberDetails = arg
        let swift = TeamLog.EventDetails.sharedContentAddMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeDownloadsPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeDownloadsPolicyDetails: DBXTeamLogSharedContentChangeDownloadsPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeDownloadsPolicyDetails) {
        self.sharedContentChangeDownloadsPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeDownloadsPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeInviteeRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeInviteeRoleDetails: DBXTeamLogSharedContentChangeInviteeRoleDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeInviteeRoleDetails) {
        self.sharedContentChangeInviteeRoleDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeInviteeRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeLinkAudienceDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeLinkAudienceDetails: DBXTeamLogSharedContentChangeLinkAudienceDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkAudienceDetails) {
        self.sharedContentChangeLinkAudienceDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeLinkAudienceDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeLinkExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeLinkExpiryDetails: DBXTeamLogSharedContentChangeLinkExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkExpiryDetails) {
        self.sharedContentChangeLinkExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeLinkExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeLinkPasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeLinkPasswordDetails: DBXTeamLogSharedContentChangeLinkPasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkPasswordDetails) {
        self.sharedContentChangeLinkPasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeLinkPasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeMemberRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeMemberRoleDetails: DBXTeamLogSharedContentChangeMemberRoleDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeMemberRoleDetails) {
        self.sharedContentChangeMemberRoleDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeMemberRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentChangeViewerInfoPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentChangeViewerInfoPolicyDetails: DBXTeamLogSharedContentChangeViewerInfoPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeViewerInfoPolicyDetails) {
        self.sharedContentChangeViewerInfoPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedContentChangeViewerInfoPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentClaimInvitationDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentClaimInvitationDetails: DBXTeamLogSharedContentClaimInvitationDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentClaimInvitationDetails) {
        self.sharedContentClaimInvitationDetails = arg
        let swift = TeamLog.EventDetails.sharedContentClaimInvitationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentCopyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentCopyDetails: DBXTeamLogSharedContentCopyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentCopyDetails) {
        self.sharedContentCopyDetails = arg
        let swift = TeamLog.EventDetails.sharedContentCopyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentDownloadDetails: DBXTeamLogSharedContentDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentDownloadDetails) {
        self.sharedContentDownloadDetails = arg
        let swift = TeamLog.EventDetails.sharedContentDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRelinquishMembershipDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRelinquishMembershipDetails: DBXTeamLogSharedContentRelinquishMembershipDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRelinquishMembershipDetails) {
        self.sharedContentRelinquishMembershipDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRelinquishMembershipDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRemoveInviteesDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRemoveInviteesDetails: DBXTeamLogSharedContentRemoveInviteesDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveInviteesDetails) {
        self.sharedContentRemoveInviteesDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRemoveInviteesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRemoveLinkExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRemoveLinkExpiryDetails: DBXTeamLogSharedContentRemoveLinkExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveLinkExpiryDetails) {
        self.sharedContentRemoveLinkExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRemoveLinkExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRemoveLinkPasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRemoveLinkPasswordDetails: DBXTeamLogSharedContentRemoveLinkPasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveLinkPasswordDetails) {
        self.sharedContentRemoveLinkPasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRemoveLinkPasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRemoveMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRemoveMemberDetails: DBXTeamLogSharedContentRemoveMemberDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveMemberDetails) {
        self.sharedContentRemoveMemberDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRemoveMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRequestAccessDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRequestAccessDetails: DBXTeamLogSharedContentRequestAccessDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRequestAccessDetails) {
        self.sharedContentRequestAccessDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRequestAccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRestoreInviteesDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRestoreInviteesDetails: DBXTeamLogSharedContentRestoreInviteesDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRestoreInviteesDetails) {
        self.sharedContentRestoreInviteesDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRestoreInviteesDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentRestoreMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentRestoreMemberDetails: DBXTeamLogSharedContentRestoreMemberDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentRestoreMemberDetails) {
        self.sharedContentRestoreMemberDetails = arg
        let swift = TeamLog.EventDetails.sharedContentRestoreMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentUnshareDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentUnshareDetails: DBXTeamLogSharedContentUnshareDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentUnshareDetails) {
        self.sharedContentUnshareDetails = arg
        let swift = TeamLog.EventDetails.sharedContentUnshareDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedContentViewDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedContentViewDetails: DBXTeamLogSharedContentViewDetails

    @objc
    public init(_ arg: DBXTeamLogSharedContentViewDetails) {
        self.sharedContentViewDetails = arg
        let swift = TeamLog.EventDetails.sharedContentViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderChangeLinkPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderChangeLinkPolicyDetails: DBXTeamLogSharedFolderChangeLinkPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeLinkPolicyDetails) {
        self.sharedFolderChangeLinkPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderChangeLinkPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderChangeMembersInheritancePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderChangeMembersInheritancePolicyDetails: DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails) {
        self.sharedFolderChangeMembersInheritancePolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderChangeMembersInheritancePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderChangeMembersManagementPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderChangeMembersManagementPolicyDetails: DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails) {
        self.sharedFolderChangeMembersManagementPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderChangeMembersManagementPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderChangeMembersPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderChangeMembersPolicyDetails: DBXTeamLogSharedFolderChangeMembersPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersPolicyDetails) {
        self.sharedFolderChangeMembersPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderChangeMembersPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderCreateDetails: DBXTeamLogSharedFolderCreateDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderCreateDetails) {
        self.sharedFolderCreateDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderDeclineInvitationDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderDeclineInvitationDetails: DBXTeamLogSharedFolderDeclineInvitationDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderDeclineInvitationDetails) {
        self.sharedFolderDeclineInvitationDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderDeclineInvitationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderMountDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderMountDetails: DBXTeamLogSharedFolderMountDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderMountDetails) {
        self.sharedFolderMountDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderMountDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderNestDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderNestDetails: DBXTeamLogSharedFolderNestDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderNestDetails) {
        self.sharedFolderNestDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderNestDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderTransferOwnershipDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderTransferOwnershipDetails: DBXTeamLogSharedFolderTransferOwnershipDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderTransferOwnershipDetails) {
        self.sharedFolderTransferOwnershipDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderTransferOwnershipDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedFolderUnmountDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedFolderUnmountDetails: DBXTeamLogSharedFolderUnmountDetails

    @objc
    public init(_ arg: DBXTeamLogSharedFolderUnmountDetails) {
        self.sharedFolderUnmountDetails = arg
        let swift = TeamLog.EventDetails.sharedFolderUnmountDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkAddExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkAddExpiryDetails: DBXTeamLogSharedLinkAddExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkAddExpiryDetails) {
        self.sharedLinkAddExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkAddExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkChangeExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkChangeExpiryDetails: DBXTeamLogSharedLinkChangeExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkChangeExpiryDetails) {
        self.sharedLinkChangeExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkChangeExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkChangeVisibilityDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkChangeVisibilityDetails: DBXTeamLogSharedLinkChangeVisibilityDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkChangeVisibilityDetails) {
        self.sharedLinkChangeVisibilityDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkChangeVisibilityDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkCopyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkCopyDetails: DBXTeamLogSharedLinkCopyDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkCopyDetails) {
        self.sharedLinkCopyDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkCopyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkCreateDetails: DBXTeamLogSharedLinkCreateDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkCreateDetails) {
        self.sharedLinkCreateDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkDisableDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkDisableDetails: DBXTeamLogSharedLinkDisableDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkDisableDetails) {
        self.sharedLinkDisableDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkDisableDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkDownloadDetails: DBXTeamLogSharedLinkDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkDownloadDetails) {
        self.sharedLinkDownloadDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkRemoveExpiryDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkRemoveExpiryDetails: DBXTeamLogSharedLinkRemoveExpiryDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkRemoveExpiryDetails) {
        self.sharedLinkRemoveExpiryDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkRemoveExpiryDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsAddExpirationDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsAddExpirationDetails: DBXTeamLogSharedLinkSettingsAddExpirationDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAddExpirationDetails) {
        self.sharedLinkSettingsAddExpirationDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsAddExpirationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsAddPasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsAddPasswordDetails: DBXTeamLogSharedLinkSettingsAddPasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAddPasswordDetails) {
        self.sharedLinkSettingsAddPasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsAddPasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsAllowDownloadDisabledDetails: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails) {
        self.sharedLinkSettingsAllowDownloadDisabledDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsAllowDownloadDisabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsAllowDownloadEnabledDetails: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails) {
        self.sharedLinkSettingsAllowDownloadEnabledDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsAllowDownloadEnabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsChangeAudienceDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsChangeAudienceDetails: DBXTeamLogSharedLinkSettingsChangeAudienceDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangeAudienceDetails) {
        self.sharedLinkSettingsChangeAudienceDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsChangeAudienceDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsChangeExpirationDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsChangeExpirationDetails: DBXTeamLogSharedLinkSettingsChangeExpirationDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangeExpirationDetails) {
        self.sharedLinkSettingsChangeExpirationDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsChangeExpirationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsChangePasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsChangePasswordDetails: DBXTeamLogSharedLinkSettingsChangePasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangePasswordDetails) {
        self.sharedLinkSettingsChangePasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsChangePasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsRemoveExpirationDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsRemoveExpirationDetails: DBXTeamLogSharedLinkSettingsRemoveExpirationDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsRemoveExpirationDetails) {
        self.sharedLinkSettingsRemoveExpirationDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsRemoveExpirationDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkSettingsRemovePasswordDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkSettingsRemovePasswordDetails: DBXTeamLogSharedLinkSettingsRemovePasswordDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsRemovePasswordDetails) {
        self.sharedLinkSettingsRemovePasswordDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkSettingsRemovePasswordDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkShareDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkShareDetails: DBXTeamLogSharedLinkShareDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkShareDetails) {
        self.sharedLinkShareDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkShareDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedLinkViewDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedLinkViewDetails: DBXTeamLogSharedLinkViewDetails

    @objc
    public init(_ arg: DBXTeamLogSharedLinkViewDetails) {
        self.sharedLinkViewDetails = arg
        let swift = TeamLog.EventDetails.sharedLinkViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharedNoteOpenedDetails: DBXTeamLogEventDetails {
    @objc
    public var sharedNoteOpenedDetails: DBXTeamLogSharedNoteOpenedDetails

    @objc
    public init(_ arg: DBXTeamLogSharedNoteOpenedDetails) {
        self.sharedNoteOpenedDetails = arg
        let swift = TeamLog.EventDetails.sharedNoteOpenedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShmodelDisableDownloadsDetails: DBXTeamLogEventDetails {
    @objc
    public var shmodelDisableDownloadsDetails: DBXTeamLogShmodelDisableDownloadsDetails

    @objc
    public init(_ arg: DBXTeamLogShmodelDisableDownloadsDetails) {
        self.shmodelDisableDownloadsDetails = arg
        let swift = TeamLog.EventDetails.shmodelDisableDownloadsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShmodelEnableDownloadsDetails: DBXTeamLogEventDetails {
    @objc
    public var shmodelEnableDownloadsDetails: DBXTeamLogShmodelEnableDownloadsDetails

    @objc
    public init(_ arg: DBXTeamLogShmodelEnableDownloadsDetails) {
        self.shmodelEnableDownloadsDetails = arg
        let swift = TeamLog.EventDetails.shmodelEnableDownloadsDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShmodelGroupShareDetails: DBXTeamLogEventDetails {
    @objc
    public var shmodelGroupShareDetails: DBXTeamLogShmodelGroupShareDetails

    @objc
    public init(_ arg: DBXTeamLogShmodelGroupShareDetails) {
        self.shmodelGroupShareDetails = arg
        let swift = TeamLog.EventDetails.shmodelGroupShareDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseAccessGrantedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseAccessGrantedDetails: DBXTeamLogShowcaseAccessGrantedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseAccessGrantedDetails) {
        self.showcaseAccessGrantedDetails = arg
        let swift = TeamLog.EventDetails.showcaseAccessGrantedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseAddMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseAddMemberDetails: DBXTeamLogShowcaseAddMemberDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseAddMemberDetails) {
        self.showcaseAddMemberDetails = arg
        let swift = TeamLog.EventDetails.showcaseAddMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseArchivedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseArchivedDetails: DBXTeamLogShowcaseArchivedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseArchivedDetails) {
        self.showcaseArchivedDetails = arg
        let swift = TeamLog.EventDetails.showcaseArchivedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseCreatedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseCreatedDetails: DBXTeamLogShowcaseCreatedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseCreatedDetails) {
        self.showcaseCreatedDetails = arg
        let swift = TeamLog.EventDetails.showcaseCreatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseDeleteCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseDeleteCommentDetails: DBXTeamLogShowcaseDeleteCommentDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseDeleteCommentDetails) {
        self.showcaseDeleteCommentDetails = arg
        let swift = TeamLog.EventDetails.showcaseDeleteCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseEditedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseEditedDetails: DBXTeamLogShowcaseEditedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseEditedDetails) {
        self.showcaseEditedDetails = arg
        let swift = TeamLog.EventDetails.showcaseEditedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseEditCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseEditCommentDetails: DBXTeamLogShowcaseEditCommentDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseEditCommentDetails) {
        self.showcaseEditCommentDetails = arg
        let swift = TeamLog.EventDetails.showcaseEditCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseFileAddedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseFileAddedDetails: DBXTeamLogShowcaseFileAddedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileAddedDetails) {
        self.showcaseFileAddedDetails = arg
        let swift = TeamLog.EventDetails.showcaseFileAddedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseFileDownloadDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseFileDownloadDetails: DBXTeamLogShowcaseFileDownloadDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileDownloadDetails) {
        self.showcaseFileDownloadDetails = arg
        let swift = TeamLog.EventDetails.showcaseFileDownloadDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseFileRemovedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseFileRemovedDetails: DBXTeamLogShowcaseFileRemovedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileRemovedDetails) {
        self.showcaseFileRemovedDetails = arg
        let swift = TeamLog.EventDetails.showcaseFileRemovedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseFileViewDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseFileViewDetails: DBXTeamLogShowcaseFileViewDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileViewDetails) {
        self.showcaseFileViewDetails = arg
        let swift = TeamLog.EventDetails.showcaseFileViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcasePermanentlyDeletedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcasePermanentlyDeletedDetails: DBXTeamLogShowcasePermanentlyDeletedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcasePermanentlyDeletedDetails) {
        self.showcasePermanentlyDeletedDetails = arg
        let swift = TeamLog.EventDetails.showcasePermanentlyDeletedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcasePostCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var showcasePostCommentDetails: DBXTeamLogShowcasePostCommentDetails

    @objc
    public init(_ arg: DBXTeamLogShowcasePostCommentDetails) {
        self.showcasePostCommentDetails = arg
        let swift = TeamLog.EventDetails.showcasePostCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseRemoveMemberDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseRemoveMemberDetails: DBXTeamLogShowcaseRemoveMemberDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseRemoveMemberDetails) {
        self.showcaseRemoveMemberDetails = arg
        let swift = TeamLog.EventDetails.showcaseRemoveMemberDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseRenamedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseRenamedDetails: DBXTeamLogShowcaseRenamedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseRenamedDetails) {
        self.showcaseRenamedDetails = arg
        let swift = TeamLog.EventDetails.showcaseRenamedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseRequestAccessDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseRequestAccessDetails: DBXTeamLogShowcaseRequestAccessDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseRequestAccessDetails) {
        self.showcaseRequestAccessDetails = arg
        let swift = TeamLog.EventDetails.showcaseRequestAccessDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseResolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseResolveCommentDetails: DBXTeamLogShowcaseResolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseResolveCommentDetails) {
        self.showcaseResolveCommentDetails = arg
        let swift = TeamLog.EventDetails.showcaseResolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseRestoredDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseRestoredDetails: DBXTeamLogShowcaseRestoredDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseRestoredDetails) {
        self.showcaseRestoredDetails = arg
        let swift = TeamLog.EventDetails.showcaseRestoredDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseTrashedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseTrashedDetails: DBXTeamLogShowcaseTrashedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseTrashedDetails) {
        self.showcaseTrashedDetails = arg
        let swift = TeamLog.EventDetails.showcaseTrashedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseTrashedDeprecatedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseTrashedDeprecatedDetails: DBXTeamLogShowcaseTrashedDeprecatedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseTrashedDeprecatedDetails) {
        self.showcaseTrashedDeprecatedDetails = arg
        let swift = TeamLog.EventDetails.showcaseTrashedDeprecatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseUnresolveCommentDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseUnresolveCommentDetails: DBXTeamLogShowcaseUnresolveCommentDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseUnresolveCommentDetails) {
        self.showcaseUnresolveCommentDetails = arg
        let swift = TeamLog.EventDetails.showcaseUnresolveCommentDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseUntrashedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseUntrashedDetails: DBXTeamLogShowcaseUntrashedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseUntrashedDetails) {
        self.showcaseUntrashedDetails = arg
        let swift = TeamLog.EventDetails.showcaseUntrashedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseUntrashedDeprecatedDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseUntrashedDeprecatedDetails: DBXTeamLogShowcaseUntrashedDeprecatedDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseUntrashedDeprecatedDetails) {
        self.showcaseUntrashedDeprecatedDetails = arg
        let swift = TeamLog.EventDetails.showcaseUntrashedDeprecatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseViewDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseViewDetails: DBXTeamLogShowcaseViewDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseViewDetails) {
        self.showcaseViewDetails = arg
        let swift = TeamLog.EventDetails.showcaseViewDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoAddCertDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoAddCertDetails: DBXTeamLogSsoAddCertDetails

    @objc
    public init(_ arg: DBXTeamLogSsoAddCertDetails) {
        self.ssoAddCertDetails = arg
        let swift = TeamLog.EventDetails.ssoAddCertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoAddLoginUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoAddLoginUrlDetails: DBXTeamLogSsoAddLoginUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoAddLoginUrlDetails) {
        self.ssoAddLoginUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoAddLoginUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoAddLogoutUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoAddLogoutUrlDetails: DBXTeamLogSsoAddLogoutUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoAddLogoutUrlDetails) {
        self.ssoAddLogoutUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoAddLogoutUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoChangeCertDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoChangeCertDetails: DBXTeamLogSsoChangeCertDetails

    @objc
    public init(_ arg: DBXTeamLogSsoChangeCertDetails) {
        self.ssoChangeCertDetails = arg
        let swift = TeamLog.EventDetails.ssoChangeCertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoChangeLoginUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoChangeLoginUrlDetails: DBXTeamLogSsoChangeLoginUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoChangeLoginUrlDetails) {
        self.ssoChangeLoginUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoChangeLoginUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoChangeLogoutUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoChangeLogoutUrlDetails: DBXTeamLogSsoChangeLogoutUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoChangeLogoutUrlDetails) {
        self.ssoChangeLogoutUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoChangeLogoutUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoChangeSamlIdentityModeDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoChangeSamlIdentityModeDetails: DBXTeamLogSsoChangeSamlIdentityModeDetails

    @objc
    public init(_ arg: DBXTeamLogSsoChangeSamlIdentityModeDetails) {
        self.ssoChangeSamlIdentityModeDetails = arg
        let swift = TeamLog.EventDetails.ssoChangeSamlIdentityModeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoRemoveCertDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoRemoveCertDetails: DBXTeamLogSsoRemoveCertDetails

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveCertDetails) {
        self.ssoRemoveCertDetails = arg
        let swift = TeamLog.EventDetails.ssoRemoveCertDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoRemoveLoginUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoRemoveLoginUrlDetails: DBXTeamLogSsoRemoveLoginUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveLoginUrlDetails) {
        self.ssoRemoveLoginUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoRemoveLoginUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoRemoveLogoutUrlDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoRemoveLogoutUrlDetails: DBXTeamLogSsoRemoveLogoutUrlDetails

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveLogoutUrlDetails) {
        self.ssoRemoveLogoutUrlDetails = arg
        let swift = TeamLog.EventDetails.ssoRemoveLogoutUrlDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamFolderChangeStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var teamFolderChangeStatusDetails: DBXTeamLogTeamFolderChangeStatusDetails

    @objc
    public init(_ arg: DBXTeamLogTeamFolderChangeStatusDetails) {
        self.teamFolderChangeStatusDetails = arg
        let swift = TeamLog.EventDetails.teamFolderChangeStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamFolderCreateDetails: DBXTeamLogEventDetails {
    @objc
    public var teamFolderCreateDetails: DBXTeamLogTeamFolderCreateDetails

    @objc
    public init(_ arg: DBXTeamLogTeamFolderCreateDetails) {
        self.teamFolderCreateDetails = arg
        let swift = TeamLog.EventDetails.teamFolderCreateDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamFolderDowngradeDetails: DBXTeamLogEventDetails {
    @objc
    public var teamFolderDowngradeDetails: DBXTeamLogTeamFolderDowngradeDetails

    @objc
    public init(_ arg: DBXTeamLogTeamFolderDowngradeDetails) {
        self.teamFolderDowngradeDetails = arg
        let swift = TeamLog.EventDetails.teamFolderDowngradeDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamFolderPermanentlyDeleteDetails: DBXTeamLogEventDetails {
    @objc
    public var teamFolderPermanentlyDeleteDetails: DBXTeamLogTeamFolderPermanentlyDeleteDetails

    @objc
    public init(_ arg: DBXTeamLogTeamFolderPermanentlyDeleteDetails) {
        self.teamFolderPermanentlyDeleteDetails = arg
        let swift = TeamLog.EventDetails.teamFolderPermanentlyDeleteDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamFolderRenameDetails: DBXTeamLogEventDetails {
    @objc
    public var teamFolderRenameDetails: DBXTeamLogTeamFolderRenameDetails

    @objc
    public init(_ arg: DBXTeamLogTeamFolderRenameDetails) {
        self.teamFolderRenameDetails = arg
        let swift = TeamLog.EventDetails.teamFolderRenameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamSelectiveSyncSettingsChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamSelectiveSyncSettingsChangedDetails: DBXTeamLogTeamSelectiveSyncSettingsChangedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamSelectiveSyncSettingsChangedDetails) {
        self.teamSelectiveSyncSettingsChangedDetails = arg
        let swift = TeamLog.EventDetails.teamSelectiveSyncSettingsChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAccountCaptureChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var accountCaptureChangePolicyDetails: DBXTeamLogAccountCaptureChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureChangePolicyDetails) {
        self.accountCaptureChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.accountCaptureChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAdminEmailRemindersChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var adminEmailRemindersChangedDetails: DBXTeamLogAdminEmailRemindersChangedDetails

    @objc
    public init(_ arg: DBXTeamLogAdminEmailRemindersChangedDetails) {
        self.adminEmailRemindersChangedDetails = arg
        let swift = TeamLog.EventDetails.adminEmailRemindersChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAllowDownloadDisabledDetails: DBXTeamLogEventDetails {
    @objc
    public var allowDownloadDisabledDetails: DBXTeamLogAllowDownloadDisabledDetails

    @objc
    public init(_ arg: DBXTeamLogAllowDownloadDisabledDetails) {
        self.allowDownloadDisabledDetails = arg
        let swift = TeamLog.EventDetails.allowDownloadDisabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAllowDownloadEnabledDetails: DBXTeamLogEventDetails {
    @objc
    public var allowDownloadEnabledDetails: DBXTeamLogAllowDownloadEnabledDetails

    @objc
    public init(_ arg: DBXTeamLogAllowDownloadEnabledDetails) {
        self.allowDownloadEnabledDetails = arg
        let swift = TeamLog.EventDetails.allowDownloadEnabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsAppPermissionsChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var appPermissionsChangedDetails: DBXTeamLogAppPermissionsChangedDetails

    @objc
    public init(_ arg: DBXTeamLogAppPermissionsChangedDetails) {
        self.appPermissionsChangedDetails = arg
        let swift = TeamLog.EventDetails.appPermissionsChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsCameraUploadsPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var cameraUploadsPolicyChangedDetails: DBXTeamLogCameraUploadsPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogCameraUploadsPolicyChangedDetails) {
        self.cameraUploadsPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.cameraUploadsPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsCaptureTranscriptPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var captureTranscriptPolicyChangedDetails: DBXTeamLogCaptureTranscriptPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogCaptureTranscriptPolicyChangedDetails) {
        self.captureTranscriptPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.captureTranscriptPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsClassificationChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var classificationChangePolicyDetails: DBXTeamLogClassificationChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogClassificationChangePolicyDetails) {
        self.classificationChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.classificationChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsComputerBackupPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var computerBackupPolicyChangedDetails: DBXTeamLogComputerBackupPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogComputerBackupPolicyChangedDetails) {
        self.computerBackupPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.computerBackupPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsContentAdministrationPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var contentAdministrationPolicyChangedDetails: DBXTeamLogContentAdministrationPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogContentAdministrationPolicyChangedDetails) {
        self.contentAdministrationPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.contentAdministrationPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDataPlacementRestrictionChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var dataPlacementRestrictionChangePolicyDetails: DBXTeamLogDataPlacementRestrictionChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogDataPlacementRestrictionChangePolicyDetails) {
        self.dataPlacementRestrictionChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.dataPlacementRestrictionChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDataPlacementRestrictionSatisfyPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var dataPlacementRestrictionSatisfyPolicyDetails: DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails) {
        self.dataPlacementRestrictionSatisfyPolicyDetails = arg
        let swift = TeamLog.EventDetails.dataPlacementRestrictionSatisfyPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsAddExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsAddExceptionDetails: DBXTeamLogDeviceApprovalsAddExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsAddExceptionDetails) {
        self.deviceApprovalsAddExceptionDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsAddExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsChangeDesktopPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsChangeDesktopPolicyDetails: DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails) {
        self.deviceApprovalsChangeDesktopPolicyDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsChangeDesktopPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsChangeMobilePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsChangeMobilePolicyDetails: DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails) {
        self.deviceApprovalsChangeMobilePolicyDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsChangeMobilePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsChangeOverageActionDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsChangeOverageActionDetails: DBXTeamLogDeviceApprovalsChangeOverageActionDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeOverageActionDetails) {
        self.deviceApprovalsChangeOverageActionDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsChangeOverageActionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsChangeUnlinkActionDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsChangeUnlinkActionDetails: DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails) {
        self.deviceApprovalsChangeUnlinkActionDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsChangeUnlinkActionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDeviceApprovalsRemoveExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var deviceApprovalsRemoveExceptionDetails: DBXTeamLogDeviceApprovalsRemoveExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsRemoveExceptionDetails) {
        self.deviceApprovalsRemoveExceptionDetails = arg
        let swift = TeamLog.EventDetails.deviceApprovalsRemoveExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDirectoryRestrictionsAddMembersDetails: DBXTeamLogEventDetails {
    @objc
    public var directoryRestrictionsAddMembersDetails: DBXTeamLogDirectoryRestrictionsAddMembersDetails

    @objc
    public init(_ arg: DBXTeamLogDirectoryRestrictionsAddMembersDetails) {
        self.directoryRestrictionsAddMembersDetails = arg
        let swift = TeamLog.EventDetails.directoryRestrictionsAddMembersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDirectoryRestrictionsRemoveMembersDetails: DBXTeamLogEventDetails {
    @objc
    public var directoryRestrictionsRemoveMembersDetails: DBXTeamLogDirectoryRestrictionsRemoveMembersDetails

    @objc
    public init(_ arg: DBXTeamLogDirectoryRestrictionsRemoveMembersDetails) {
        self.directoryRestrictionsRemoveMembersDetails = arg
        let swift = TeamLog.EventDetails.directoryRestrictionsRemoveMembersDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDropboxPasswordsPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var dropboxPasswordsPolicyChangedDetails: DBXTeamLogDropboxPasswordsPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsPolicyChangedDetails) {
        self.dropboxPasswordsPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.dropboxPasswordsPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmailIngestPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var emailIngestPolicyChangedDetails: DBXTeamLogEmailIngestPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogEmailIngestPolicyChangedDetails) {
        self.emailIngestPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.emailIngestPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmAddExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var emmAddExceptionDetails: DBXTeamLogEmmAddExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogEmmAddExceptionDetails) {
        self.emmAddExceptionDetails = arg
        let swift = TeamLog.EventDetails.emmAddExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var emmChangePolicyDetails: DBXTeamLogEmmChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogEmmChangePolicyDetails) {
        self.emmChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.emmChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEmmRemoveExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var emmRemoveExceptionDetails: DBXTeamLogEmmRemoveExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogEmmRemoveExceptionDetails) {
        self.emmRemoveExceptionDetails = arg
        let swift = TeamLog.EventDetails.emmRemoveExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExtendedVersionHistoryChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var extendedVersionHistoryChangePolicyDetails: DBXTeamLogExtendedVersionHistoryChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogExtendedVersionHistoryChangePolicyDetails) {
        self.extendedVersionHistoryChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.extendedVersionHistoryChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsExternalDriveBackupPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var externalDriveBackupPolicyChangedDetails: DBXTeamLogExternalDriveBackupPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupPolicyChangedDetails) {
        self.externalDriveBackupPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.externalDriveBackupPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileCommentsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var fileCommentsChangePolicyDetails: DBXTeamLogFileCommentsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogFileCommentsChangePolicyDetails) {
        self.fileCommentsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.fileCommentsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileLockingPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var fileLockingPolicyChangedDetails: DBXTeamLogFileLockingPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFileLockingPolicyChangedDetails) {
        self.fileLockingPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.fileLockingPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileProviderMigrationPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var fileProviderMigrationPolicyChangedDetails: DBXTeamLogFileProviderMigrationPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFileProviderMigrationPolicyChangedDetails) {
        self.fileProviderMigrationPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.fileProviderMigrationPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestsChangePolicyDetails: DBXTeamLogFileRequestsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestsChangePolicyDetails) {
        self.fileRequestsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.fileRequestsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestsEmailsEnabledDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestsEmailsEnabledDetails: DBXTeamLogFileRequestsEmailsEnabledDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestsEmailsEnabledDetails) {
        self.fileRequestsEmailsEnabledDetails = arg
        let swift = TeamLog.EventDetails.fileRequestsEmailsEnabledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails: DBXTeamLogEventDetails {
    @objc
    public var fileRequestsEmailsRestrictedToTeamOnlyDetails: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails

    @objc
    public init(_ arg: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails) {
        self.fileRequestsEmailsRestrictedToTeamOnlyDetails = arg
        let swift = TeamLog.EventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFileTransfersPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var fileTransfersPolicyChangedDetails: DBXTeamLogFileTransfersPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFileTransfersPolicyChangedDetails) {
        self.fileTransfersPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.fileTransfersPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsFolderLinkRestrictionPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var folderLinkRestrictionPolicyChangedDetails: DBXTeamLogFolderLinkRestrictionPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogFolderLinkRestrictionPolicyChangedDetails) {
        self.folderLinkRestrictionPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.folderLinkRestrictionPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGoogleSsoChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var googleSsoChangePolicyDetails: DBXTeamLogGoogleSsoChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogGoogleSsoChangePolicyDetails) {
        self.googleSsoChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.googleSsoChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGroupUserManagementChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var groupUserManagementChangePolicyDetails: DBXTeamLogGroupUserManagementChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogGroupUserManagementChangePolicyDetails) {
        self.groupUserManagementChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.groupUserManagementChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsIntegrationPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var integrationPolicyChangedDetails: DBXTeamLogIntegrationPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogIntegrationPolicyChangedDetails) {
        self.integrationPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.integrationPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsInviteAcceptanceEmailPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var inviteAcceptanceEmailPolicyChangedDetails: DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails) {
        self.inviteAcceptanceEmailPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.inviteAcceptanceEmailPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberRequestsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var memberRequestsChangePolicyDetails: DBXTeamLogMemberRequestsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogMemberRequestsChangePolicyDetails) {
        self.memberRequestsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.memberRequestsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSendInvitePolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSendInvitePolicyChangedDetails: DBXTeamLogMemberSendInvitePolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSendInvitePolicyChangedDetails) {
        self.memberSendInvitePolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.memberSendInvitePolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsAddExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsAddExceptionDetails: DBXTeamLogMemberSpaceLimitsAddExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsAddExceptionDetails) {
        self.memberSpaceLimitsAddExceptionDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsAddExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsChangeCapsTypePolicyDetails: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails) {
        self.memberSpaceLimitsChangeCapsTypePolicyDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsChangeCapsTypePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsChangePolicyDetails: DBXTeamLogMemberSpaceLimitsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangePolicyDetails) {
        self.memberSpaceLimitsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSpaceLimitsRemoveExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSpaceLimitsRemoveExceptionDetails: DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails) {
        self.memberSpaceLimitsRemoveExceptionDetails = arg
        let swift = TeamLog.EventDetails.memberSpaceLimitsRemoveExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMemberSuggestionsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var memberSuggestionsChangePolicyDetails: DBXTeamLogMemberSuggestionsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogMemberSuggestionsChangePolicyDetails) {
        self.memberSuggestionsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.memberSuggestionsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsMicrosoftOfficeAddinChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var microsoftOfficeAddinChangePolicyDetails: DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails) {
        self.microsoftOfficeAddinChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.microsoftOfficeAddinChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsNetworkControlChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var networkControlChangePolicyDetails: DBXTeamLogNetworkControlChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogNetworkControlChangePolicyDetails) {
        self.networkControlChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.networkControlChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperChangeDeploymentPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var paperChangeDeploymentPolicyDetails: DBXTeamLogPaperChangeDeploymentPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPaperChangeDeploymentPolicyDetails) {
        self.paperChangeDeploymentPolicyDetails = arg
        let swift = TeamLog.EventDetails.paperChangeDeploymentPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperChangeMemberLinkPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var paperChangeMemberLinkPolicyDetails: DBXTeamLogPaperChangeMemberLinkPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPaperChangeMemberLinkPolicyDetails) {
        self.paperChangeMemberLinkPolicyDetails = arg
        let swift = TeamLog.EventDetails.paperChangeMemberLinkPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperChangeMemberPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var paperChangeMemberPolicyDetails: DBXTeamLogPaperChangeMemberPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPaperChangeMemberPolicyDetails) {
        self.paperChangeMemberPolicyDetails = arg
        let swift = TeamLog.EventDetails.paperChangeMemberPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var paperChangePolicyDetails: DBXTeamLogPaperChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPaperChangePolicyDetails) {
        self.paperChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.paperChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDefaultFolderPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDefaultFolderPolicyChangedDetails: DBXTeamLogPaperDefaultFolderPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDefaultFolderPolicyChangedDetails) {
        self.paperDefaultFolderPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.paperDefaultFolderPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperDesktopPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var paperDesktopPolicyChangedDetails: DBXTeamLogPaperDesktopPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogPaperDesktopPolicyChangedDetails) {
        self.paperDesktopPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.paperDesktopPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperEnabledUsersGroupAdditionDetails: DBXTeamLogEventDetails {
    @objc
    public var paperEnabledUsersGroupAdditionDetails: DBXTeamLogPaperEnabledUsersGroupAdditionDetails

    @objc
    public init(_ arg: DBXTeamLogPaperEnabledUsersGroupAdditionDetails) {
        self.paperEnabledUsersGroupAdditionDetails = arg
        let swift = TeamLog.EventDetails.paperEnabledUsersGroupAdditionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPaperEnabledUsersGroupRemovalDetails: DBXTeamLogEventDetails {
    @objc
    public var paperEnabledUsersGroupRemovalDetails: DBXTeamLogPaperEnabledUsersGroupRemovalDetails

    @objc
    public init(_ arg: DBXTeamLogPaperEnabledUsersGroupRemovalDetails) {
        self.paperEnabledUsersGroupRemovalDetails = arg
        let swift = TeamLog.EventDetails.paperEnabledUsersGroupRemovalDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPasswordStrengthRequirementsChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var passwordStrengthRequirementsChangePolicyDetails: DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails) {
        self.passwordStrengthRequirementsChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.passwordStrengthRequirementsChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsPermanentDeleteChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var permanentDeleteChangePolicyDetails: DBXTeamLogPermanentDeleteChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogPermanentDeleteChangePolicyDetails) {
        self.permanentDeleteChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.permanentDeleteChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsResellerSupportChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var resellerSupportChangePolicyDetails: DBXTeamLogResellerSupportChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogResellerSupportChangePolicyDetails) {
        self.resellerSupportChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.resellerSupportChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsRewindPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var rewindPolicyChangedDetails: DBXTeamLogRewindPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogRewindPolicyChangedDetails) {
        self.rewindPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.rewindPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSendForSignaturePolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var sendForSignaturePolicyChangedDetails: DBXTeamLogSendForSignaturePolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogSendForSignaturePolicyChangedDetails) {
        self.sendForSignaturePolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.sendForSignaturePolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeFolderJoinPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeFolderJoinPolicyDetails: DBXTeamLogSharingChangeFolderJoinPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeFolderJoinPolicyDetails) {
        self.sharingChangeFolderJoinPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeFolderJoinPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeLinkAllowChangeExpirationPolicyDetails: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails) {
        self.sharingChangeLinkAllowChangeExpirationPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeLinkAllowChangeExpirationPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeLinkDefaultExpirationPolicyDetails: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails) {
        self.sharingChangeLinkDefaultExpirationPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeLinkDefaultExpirationPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeLinkEnforcePasswordPolicyDetails: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails) {
        self.sharingChangeLinkEnforcePasswordPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeLinkEnforcePasswordPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeLinkPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeLinkPolicyDetails: DBXTeamLogSharingChangeLinkPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkPolicyDetails) {
        self.sharingChangeLinkPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeLinkPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSharingChangeMemberPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var sharingChangeMemberPolicyDetails: DBXTeamLogSharingChangeMemberPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSharingChangeMemberPolicyDetails) {
        self.sharingChangeMemberPolicyDetails = arg
        let swift = TeamLog.EventDetails.sharingChangeMemberPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseChangeDownloadPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseChangeDownloadPolicyDetails: DBXTeamLogShowcaseChangeDownloadPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeDownloadPolicyDetails) {
        self.showcaseChangeDownloadPolicyDetails = arg
        let swift = TeamLog.EventDetails.showcaseChangeDownloadPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseChangeEnabledPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseChangeEnabledPolicyDetails: DBXTeamLogShowcaseChangeEnabledPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeEnabledPolicyDetails) {
        self.showcaseChangeEnabledPolicyDetails = arg
        let swift = TeamLog.EventDetails.showcaseChangeEnabledPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsShowcaseChangeExternalSharingPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var showcaseChangeExternalSharingPolicyDetails: DBXTeamLogShowcaseChangeExternalSharingPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeExternalSharingPolicyDetails) {
        self.showcaseChangeExternalSharingPolicyDetails = arg
        let swift = TeamLog.EventDetails.showcaseChangeExternalSharingPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSmarterSmartSyncPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var smarterSmartSyncPolicyChangedDetails: DBXTeamLogSmarterSmartSyncPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogSmarterSmartSyncPolicyChangedDetails) {
        self.smarterSmartSyncPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.smarterSmartSyncPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSmartSyncChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var smartSyncChangePolicyDetails: DBXTeamLogSmartSyncChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSmartSyncChangePolicyDetails) {
        self.smartSyncChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.smartSyncChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSmartSyncNotOptOutDetails: DBXTeamLogEventDetails {
    @objc
    public var smartSyncNotOptOutDetails: DBXTeamLogSmartSyncNotOptOutDetails

    @objc
    public init(_ arg: DBXTeamLogSmartSyncNotOptOutDetails) {
        self.smartSyncNotOptOutDetails = arg
        let swift = TeamLog.EventDetails.smartSyncNotOptOutDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSmartSyncOptOutDetails: DBXTeamLogEventDetails {
    @objc
    public var smartSyncOptOutDetails: DBXTeamLogSmartSyncOptOutDetails

    @objc
    public init(_ arg: DBXTeamLogSmartSyncOptOutDetails) {
        self.smartSyncOptOutDetails = arg
        let swift = TeamLog.EventDetails.smartSyncOptOutDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsSsoChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var ssoChangePolicyDetails: DBXTeamLogSsoChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogSsoChangePolicyDetails) {
        self.ssoChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.ssoChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamBrandingPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamBrandingPolicyChangedDetails: DBXTeamLogTeamBrandingPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamBrandingPolicyChangedDetails) {
        self.teamBrandingPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.teamBrandingPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamExtensionsPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamExtensionsPolicyChangedDetails: DBXTeamLogTeamExtensionsPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamExtensionsPolicyChangedDetails) {
        self.teamExtensionsPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.teamExtensionsPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamSelectiveSyncPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamSelectiveSyncPolicyChangedDetails: DBXTeamLogTeamSelectiveSyncPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamSelectiveSyncPolicyChangedDetails) {
        self.teamSelectiveSyncPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.teamSelectiveSyncPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamSharingWhitelistSubjectsChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamSharingWhitelistSubjectsChangedDetails: DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails) {
        self.teamSharingWhitelistSubjectsChangedDetails = arg
        let swift = TeamLog.EventDetails.teamSharingWhitelistSubjectsChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaAddExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaAddExceptionDetails: DBXTeamLogTfaAddExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogTfaAddExceptionDetails) {
        self.tfaAddExceptionDetails = arg
        let swift = TeamLog.EventDetails.tfaAddExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaChangePolicyDetails: DBXTeamLogTfaChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogTfaChangePolicyDetails) {
        self.tfaChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.tfaChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaRemoveExceptionDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaRemoveExceptionDetails: DBXTeamLogTfaRemoveExceptionDetails

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveExceptionDetails) {
        self.tfaRemoveExceptionDetails = arg
        let swift = TeamLog.EventDetails.tfaRemoveExceptionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTwoAccountChangePolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var twoAccountChangePolicyDetails: DBXTeamLogTwoAccountChangePolicyDetails

    @objc
    public init(_ arg: DBXTeamLogTwoAccountChangePolicyDetails) {
        self.twoAccountChangePolicyDetails = arg
        let swift = TeamLog.EventDetails.twoAccountChangePolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsViewerInfoPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var viewerInfoPolicyChangedDetails: DBXTeamLogViewerInfoPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogViewerInfoPolicyChangedDetails) {
        self.viewerInfoPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.viewerInfoPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsWatermarkingPolicyChangedDetails: DBXTeamLogEventDetails {
    @objc
    public var watermarkingPolicyChangedDetails: DBXTeamLogWatermarkingPolicyChangedDetails

    @objc
    public init(_ arg: DBXTeamLogWatermarkingPolicyChangedDetails) {
        self.watermarkingPolicyChangedDetails = arg
        let swift = TeamLog.EventDetails.watermarkingPolicyChangedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsWebSessionsChangeActiveSessionLimitDetails: DBXTeamLogEventDetails {
    @objc
    public var webSessionsChangeActiveSessionLimitDetails: DBXTeamLogWebSessionsChangeActiveSessionLimitDetails

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeActiveSessionLimitDetails) {
        self.webSessionsChangeActiveSessionLimitDetails = arg
        let swift = TeamLog.EventDetails.webSessionsChangeActiveSessionLimitDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsWebSessionsChangeFixedLengthPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var webSessionsChangeFixedLengthPolicyDetails: DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails) {
        self.webSessionsChangeFixedLengthPolicyDetails = arg
        let swift = TeamLog.EventDetails.webSessionsChangeFixedLengthPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsWebSessionsChangeIdleLengthPolicyDetails: DBXTeamLogEventDetails {
    @objc
    public var webSessionsChangeIdleLengthPolicyDetails: DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails) {
        self.webSessionsChangeIdleLengthPolicyDetails = arg
        let swift = TeamLog.EventDetails.webSessionsChangeIdleLengthPolicyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDataResidencyMigrationRequestSuccessfulDetails: DBXTeamLogEventDetails {
    @objc
    public var dataResidencyMigrationRequestSuccessfulDetails: DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails

    @objc
    public init(_ arg: DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails) {
        self.dataResidencyMigrationRequestSuccessfulDetails = arg
        let swift = TeamLog.EventDetails.dataResidencyMigrationRequestSuccessfulDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails: DBXTeamLogEventDetails {
    @objc
    public var dataResidencyMigrationRequestUnsuccessfulDetails: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails

    @objc
    public init(_ arg: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails) {
        self.dataResidencyMigrationRequestUnsuccessfulDetails = arg
        let swift = TeamLog.EventDetails.dataResidencyMigrationRequestUnsuccessfulDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeFromDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeFromDetails: DBXTeamLogTeamMergeFromDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeFromDetails) {
        self.teamMergeFromDetails = arg
        let swift = TeamLog.EventDetails.teamMergeFromDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeToDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeToDetails: DBXTeamLogTeamMergeToDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeToDetails) {
        self.teamMergeToDetails = arg
        let swift = TeamLog.EventDetails.teamMergeToDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileAddBackgroundDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileAddBackgroundDetails: DBXTeamLogTeamProfileAddBackgroundDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileAddBackgroundDetails) {
        self.teamProfileAddBackgroundDetails = arg
        let swift = TeamLog.EventDetails.teamProfileAddBackgroundDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileAddLogoDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileAddLogoDetails: DBXTeamLogTeamProfileAddLogoDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileAddLogoDetails) {
        self.teamProfileAddLogoDetails = arg
        let swift = TeamLog.EventDetails.teamProfileAddLogoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileChangeBackgroundDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileChangeBackgroundDetails: DBXTeamLogTeamProfileChangeBackgroundDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeBackgroundDetails) {
        self.teamProfileChangeBackgroundDetails = arg
        let swift = TeamLog.EventDetails.teamProfileChangeBackgroundDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileChangeDefaultLanguageDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileChangeDefaultLanguageDetails: DBXTeamLogTeamProfileChangeDefaultLanguageDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeDefaultLanguageDetails) {
        self.teamProfileChangeDefaultLanguageDetails = arg
        let swift = TeamLog.EventDetails.teamProfileChangeDefaultLanguageDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileChangeLogoDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileChangeLogoDetails: DBXTeamLogTeamProfileChangeLogoDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeLogoDetails) {
        self.teamProfileChangeLogoDetails = arg
        let swift = TeamLog.EventDetails.teamProfileChangeLogoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileChangeNameDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileChangeNameDetails: DBXTeamLogTeamProfileChangeNameDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeNameDetails) {
        self.teamProfileChangeNameDetails = arg
        let swift = TeamLog.EventDetails.teamProfileChangeNameDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileRemoveBackgroundDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileRemoveBackgroundDetails: DBXTeamLogTeamProfileRemoveBackgroundDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileRemoveBackgroundDetails) {
        self.teamProfileRemoveBackgroundDetails = arg
        let swift = TeamLog.EventDetails.teamProfileRemoveBackgroundDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamProfileRemoveLogoDetails: DBXTeamLogEventDetails {
    @objc
    public var teamProfileRemoveLogoDetails: DBXTeamLogTeamProfileRemoveLogoDetails

    @objc
    public init(_ arg: DBXTeamLogTeamProfileRemoveLogoDetails) {
        self.teamProfileRemoveLogoDetails = arg
        let swift = TeamLog.EventDetails.teamProfileRemoveLogoDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaAddBackupPhoneDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaAddBackupPhoneDetails: DBXTeamLogTfaAddBackupPhoneDetails

    @objc
    public init(_ arg: DBXTeamLogTfaAddBackupPhoneDetails) {
        self.tfaAddBackupPhoneDetails = arg
        let swift = TeamLog.EventDetails.tfaAddBackupPhoneDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaAddSecurityKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaAddSecurityKeyDetails: DBXTeamLogTfaAddSecurityKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTfaAddSecurityKeyDetails) {
        self.tfaAddSecurityKeyDetails = arg
        let swift = TeamLog.EventDetails.tfaAddSecurityKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaChangeBackupPhoneDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaChangeBackupPhoneDetails: DBXTeamLogTfaChangeBackupPhoneDetails

    @objc
    public init(_ arg: DBXTeamLogTfaChangeBackupPhoneDetails) {
        self.tfaChangeBackupPhoneDetails = arg
        let swift = TeamLog.EventDetails.tfaChangeBackupPhoneDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaChangeStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaChangeStatusDetails: DBXTeamLogTfaChangeStatusDetails

    @objc
    public init(_ arg: DBXTeamLogTfaChangeStatusDetails) {
        self.tfaChangeStatusDetails = arg
        let swift = TeamLog.EventDetails.tfaChangeStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaRemoveBackupPhoneDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaRemoveBackupPhoneDetails: DBXTeamLogTfaRemoveBackupPhoneDetails

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveBackupPhoneDetails) {
        self.tfaRemoveBackupPhoneDetails = arg
        let swift = TeamLog.EventDetails.tfaRemoveBackupPhoneDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaRemoveSecurityKeyDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaRemoveSecurityKeyDetails: DBXTeamLogTfaRemoveSecurityKeyDetails

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveSecurityKeyDetails) {
        self.tfaRemoveSecurityKeyDetails = arg
        let swift = TeamLog.EventDetails.tfaRemoveSecurityKeyDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTfaResetDetails: DBXTeamLogEventDetails {
    @objc
    public var tfaResetDetails: DBXTeamLogTfaResetDetails

    @objc
    public init(_ arg: DBXTeamLogTfaResetDetails) {
        self.tfaResetDetails = arg
        let swift = TeamLog.EventDetails.tfaResetDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsChangedEnterpriseAdminRoleDetails: DBXTeamLogEventDetails {
    @objc
    public var changedEnterpriseAdminRoleDetails: DBXTeamLogChangedEnterpriseAdminRoleDetails

    @objc
    public init(_ arg: DBXTeamLogChangedEnterpriseAdminRoleDetails) {
        self.changedEnterpriseAdminRoleDetails = arg
        let swift = TeamLog.EventDetails.changedEnterpriseAdminRoleDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsChangedEnterpriseConnectedTeamStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var changedEnterpriseConnectedTeamStatusDetails: DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails

    @objc
    public init(_ arg: DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails) {
        self.changedEnterpriseConnectedTeamStatusDetails = arg
        let swift = TeamLog.EventDetails.changedEnterpriseConnectedTeamStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDetails: DBXTeamLogEventDetails {
    @objc
    public var endedEnterpriseAdminSessionDetails: DBXTeamLogEndedEnterpriseAdminSessionDetails

    @objc
    public init(_ arg: DBXTeamLogEndedEnterpriseAdminSessionDetails) {
        self.endedEnterpriseAdminSessionDetails = arg
        let swift = TeamLog.EventDetails.endedEnterpriseAdminSessionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails: DBXTeamLogEventDetails {
    @objc
    public var endedEnterpriseAdminSessionDeprecatedDetails: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails

    @objc
    public init(_ arg: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails) {
        self.endedEnterpriseAdminSessionDeprecatedDetails = arg
        let swift = TeamLog.EventDetails.endedEnterpriseAdminSessionDeprecatedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsEnterpriseSettingsLockingDetails: DBXTeamLogEventDetails {
    @objc
    public var enterpriseSettingsLockingDetails: DBXTeamLogEnterpriseSettingsLockingDetails

    @objc
    public init(_ arg: DBXTeamLogEnterpriseSettingsLockingDetails) {
        self.enterpriseSettingsLockingDetails = arg
        let swift = TeamLog.EventDetails.enterpriseSettingsLockingDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsGuestAdminChangeStatusDetails: DBXTeamLogEventDetails {
    @objc
    public var guestAdminChangeStatusDetails: DBXTeamLogGuestAdminChangeStatusDetails

    @objc
    public init(_ arg: DBXTeamLogGuestAdminChangeStatusDetails) {
        self.guestAdminChangeStatusDetails = arg
        let swift = TeamLog.EventDetails.guestAdminChangeStatusDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsStartedEnterpriseAdminSessionDetails: DBXTeamLogEventDetails {
    @objc
    public var startedEnterpriseAdminSessionDetails: DBXTeamLogStartedEnterpriseAdminSessionDetails

    @objc
    public init(_ arg: DBXTeamLogStartedEnterpriseAdminSessionDetails) {
        self.startedEnterpriseAdminSessionDetails = arg
        let swift = TeamLog.EventDetails.startedEnterpriseAdminSessionDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestAcceptedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestAcceptedDetails: DBXTeamLogTeamMergeRequestAcceptedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedDetails) {
        self.teamMergeRequestAcceptedDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestAcceptedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestAcceptedShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails) {
        self.teamMergeRequestAcceptedShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestAcceptedShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestAcceptedShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails) {
        self.teamMergeRequestAcceptedShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestAcceptedShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestAutoCanceledDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestAutoCanceledDetails: DBXTeamLogTeamMergeRequestAutoCanceledDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAutoCanceledDetails) {
        self.teamMergeRequestAutoCanceledDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestAutoCanceledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestCanceledDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestCanceledDetails: DBXTeamLogTeamMergeRequestCanceledDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledDetails) {
        self.teamMergeRequestCanceledDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestCanceledDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestCanceledShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails) {
        self.teamMergeRequestCanceledShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestCanceledShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestCanceledShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails) {
        self.teamMergeRequestCanceledShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestCanceledShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestExpiredDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestExpiredDetails: DBXTeamLogTeamMergeRequestExpiredDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredDetails) {
        self.teamMergeRequestExpiredDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestExpiredDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestExpiredShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails) {
        self.teamMergeRequestExpiredShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestExpiredShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestExpiredShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails) {
        self.teamMergeRequestExpiredShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestExpiredShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestRejectedShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails) {
        self.teamMergeRequestRejectedShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestRejectedShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestRejectedShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails) {
        self.teamMergeRequestRejectedShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestRejectedShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestReminderDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestReminderDetails: DBXTeamLogTeamMergeRequestReminderDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderDetails) {
        self.teamMergeRequestReminderDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestReminderDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestReminderShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails) {
        self.teamMergeRequestReminderShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestReminderShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestReminderShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails) {
        self.teamMergeRequestReminderShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestReminderShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestRevokedDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestRevokedDetails: DBXTeamLogTeamMergeRequestRevokedDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRevokedDetails) {
        self.teamMergeRequestRevokedDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestRevokedDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestSentShownToPrimaryTeamDetails: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails) {
        self.teamMergeRequestSentShownToPrimaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestSentShownToPrimaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails: DBXTeamLogEventDetails {
    @objc
    public var teamMergeRequestSentShownToSecondaryTeamDetails: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails) {
        self.teamMergeRequestSentShownToSecondaryTeamDetails = arg
        let swift = TeamLog.EventDetails.teamMergeRequestSentShownToSecondaryTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// Hints that this event was returned with missing details due to an internal error.
@objc
public class DBXTeamLogEventDetailsMissingDetails: DBXTeamLogEventDetails {
    @objc
    public var missingDetails: DBXTeamLogMissingDetails

    @objc
    public init(_ arg: DBXTeamLogMissingDetails) {
        self.missingDetails = arg
        let swift = TeamLog.EventDetails.missingDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventDetailsOther: DBXTeamLogEventDetails {
    @objc
    public init() {
        let swift = TeamLog.EventDetails.other
        super.init(swift: swift)
    }
}

/// The type of the event with description.
@objc
public class DBXTeamLogEventType: NSObject {
    let swift: TeamLog.EventType

    public init(swift: TeamLog.EventType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EventType) -> DBXTeamLogEventType {
        switch swift {
        case .adminAlertingAlertStateChanged(let swiftArg):
            let arg = DBXTeamLogAdminAlertingAlertStateChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeAdminAlertingAlertStateChanged(arg)
        case .adminAlertingChangedAlertConfig(let swiftArg):
            let arg = DBXTeamLogAdminAlertingChangedAlertConfigType(swift: swiftArg)
            return DBXTeamLogEventTypeAdminAlertingChangedAlertConfig(arg)
        case .adminAlertingTriggeredAlert(let swiftArg):
            let arg = DBXTeamLogAdminAlertingTriggeredAlertType(swift: swiftArg)
            return DBXTeamLogEventTypeAdminAlertingTriggeredAlert(arg)
        case .ransomwareRestoreProcessCompleted(let swiftArg):
            let arg = DBXTeamLogRansomwareRestoreProcessCompletedType(swift: swiftArg)
            return DBXTeamLogEventTypeRansomwareRestoreProcessCompleted(arg)
        case .ransomwareRestoreProcessStarted(let swiftArg):
            let arg = DBXTeamLogRansomwareRestoreProcessStartedType(swift: swiftArg)
            return DBXTeamLogEventTypeRansomwareRestoreProcessStarted(arg)
        case .appBlockedByPermissions(let swiftArg):
            let arg = DBXTeamLogAppBlockedByPermissionsType(swift: swiftArg)
            return DBXTeamLogEventTypeAppBlockedByPermissions(arg)
        case .appLinkTeam(let swiftArg):
            let arg = DBXTeamLogAppLinkTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeAppLinkTeam(arg)
        case .appLinkUser(let swiftArg):
            let arg = DBXTeamLogAppLinkUserType(swift: swiftArg)
            return DBXTeamLogEventTypeAppLinkUser(arg)
        case .appUnlinkTeam(let swiftArg):
            let arg = DBXTeamLogAppUnlinkTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeAppUnlinkTeam(arg)
        case .appUnlinkUser(let swiftArg):
            let arg = DBXTeamLogAppUnlinkUserType(swift: swiftArg)
            return DBXTeamLogEventTypeAppUnlinkUser(arg)
        case .integrationConnected(let swiftArg):
            let arg = DBXTeamLogIntegrationConnectedType(swift: swiftArg)
            return DBXTeamLogEventTypeIntegrationConnected(arg)
        case .integrationDisconnected(let swiftArg):
            let arg = DBXTeamLogIntegrationDisconnectedType(swift: swiftArg)
            return DBXTeamLogEventTypeIntegrationDisconnected(arg)
        case .fileAddComment(let swiftArg):
            let arg = DBXTeamLogFileAddCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileAddComment(arg)
        case .fileChangeCommentSubscription(let swiftArg):
            let arg = DBXTeamLogFileChangeCommentSubscriptionType(swift: swiftArg)
            return DBXTeamLogEventTypeFileChangeCommentSubscription(arg)
        case .fileDeleteComment(let swiftArg):
            let arg = DBXTeamLogFileDeleteCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileDeleteComment(arg)
        case .fileEditComment(let swiftArg):
            let arg = DBXTeamLogFileEditCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileEditComment(arg)
        case .fileLikeComment(let swiftArg):
            let arg = DBXTeamLogFileLikeCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileLikeComment(arg)
        case .fileResolveComment(let swiftArg):
            let arg = DBXTeamLogFileResolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileResolveComment(arg)
        case .fileUnlikeComment(let swiftArg):
            let arg = DBXTeamLogFileUnlikeCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileUnlikeComment(arg)
        case .fileUnresolveComment(let swiftArg):
            let arg = DBXTeamLogFileUnresolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeFileUnresolveComment(arg)
        case .governancePolicyAddFolders(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyAddFoldersType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyAddFolders(arg)
        case .governancePolicyAddFolderFailed(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyAddFolderFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyAddFolderFailed(arg)
        case .governancePolicyContentDisposed(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyContentDisposedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyContentDisposed(arg)
        case .governancePolicyCreate(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyCreate(arg)
        case .governancePolicyDelete(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyDelete(arg)
        case .governancePolicyEditDetails(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyEditDetailsType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyEditDetails(arg)
        case .governancePolicyEditDuration(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyEditDurationType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyEditDuration(arg)
        case .governancePolicyExportCreated(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyExportCreatedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyExportCreated(arg)
        case .governancePolicyExportRemoved(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyExportRemovedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyExportRemoved(arg)
        case .governancePolicyRemoveFolders(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyRemoveFoldersType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyRemoveFolders(arg)
        case .governancePolicyReportCreated(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyReportCreatedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyReportCreated(arg)
        case .governancePolicyZipPartDownloaded(let swiftArg):
            let arg = DBXTeamLogGovernancePolicyZipPartDownloadedType(swift: swiftArg)
            return DBXTeamLogEventTypeGovernancePolicyZipPartDownloaded(arg)
        case .legalHoldsActivateAHold(let swiftArg):
            let arg = DBXTeamLogLegalHoldsActivateAHoldType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsActivateAHold(arg)
        case .legalHoldsAddMembers(let swiftArg):
            let arg = DBXTeamLogLegalHoldsAddMembersType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsAddMembers(arg)
        case .legalHoldsChangeHoldDetails(let swiftArg):
            let arg = DBXTeamLogLegalHoldsChangeHoldDetailsType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsChangeHoldDetails(arg)
        case .legalHoldsChangeHoldName(let swiftArg):
            let arg = DBXTeamLogLegalHoldsChangeHoldNameType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsChangeHoldName(arg)
        case .legalHoldsExportAHold(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportAHoldType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsExportAHold(arg)
        case .legalHoldsExportCancelled(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportCancelledType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsExportCancelled(arg)
        case .legalHoldsExportDownloaded(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportDownloadedType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsExportDownloaded(arg)
        case .legalHoldsExportRemoved(let swiftArg):
            let arg = DBXTeamLogLegalHoldsExportRemovedType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsExportRemoved(arg)
        case .legalHoldsReleaseAHold(let swiftArg):
            let arg = DBXTeamLogLegalHoldsReleaseAHoldType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsReleaseAHold(arg)
        case .legalHoldsRemoveMembers(let swiftArg):
            let arg = DBXTeamLogLegalHoldsRemoveMembersType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsRemoveMembers(arg)
        case .legalHoldsReportAHold(let swiftArg):
            let arg = DBXTeamLogLegalHoldsReportAHoldType(swift: swiftArg)
            return DBXTeamLogEventTypeLegalHoldsReportAHold(arg)
        case .deviceChangeIpDesktop(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpDesktopType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceChangeIpDesktop(arg)
        case .deviceChangeIpMobile(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpMobileType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceChangeIpMobile(arg)
        case .deviceChangeIpWeb(let swiftArg):
            let arg = DBXTeamLogDeviceChangeIpWebType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceChangeIpWeb(arg)
        case .deviceDeleteOnUnlinkFail(let swiftArg):
            let arg = DBXTeamLogDeviceDeleteOnUnlinkFailType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceDeleteOnUnlinkFail(arg)
        case .deviceDeleteOnUnlinkSuccess(let swiftArg):
            let arg = DBXTeamLogDeviceDeleteOnUnlinkSuccessType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceDeleteOnUnlinkSuccess(arg)
        case .deviceLinkFail(let swiftArg):
            let arg = DBXTeamLogDeviceLinkFailType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceLinkFail(arg)
        case .deviceLinkSuccess(let swiftArg):
            let arg = DBXTeamLogDeviceLinkSuccessType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceLinkSuccess(arg)
        case .deviceManagementDisabled(let swiftArg):
            let arg = DBXTeamLogDeviceManagementDisabledType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceManagementDisabled(arg)
        case .deviceManagementEnabled(let swiftArg):
            let arg = DBXTeamLogDeviceManagementEnabledType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceManagementEnabled(arg)
        case .deviceSyncBackupStatusChanged(let swiftArg):
            let arg = DBXTeamLogDeviceSyncBackupStatusChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceSyncBackupStatusChanged(arg)
        case .deviceUnlink(let swiftArg):
            let arg = DBXTeamLogDeviceUnlinkType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceUnlink(arg)
        case .dropboxPasswordsExported(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsExportedType(swift: swiftArg)
            return DBXTeamLogEventTypeDropboxPasswordsExported(arg)
        case .dropboxPasswordsNewDeviceEnrolled(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsNewDeviceEnrolledType(swift: swiftArg)
            return DBXTeamLogEventTypeDropboxPasswordsNewDeviceEnrolled(arg)
        case .emmRefreshAuthToken(let swiftArg):
            let arg = DBXTeamLogEmmRefreshAuthTokenType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmRefreshAuthToken(arg)
        case .externalDriveBackupEligibilityStatusChecked(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType(swift: swiftArg)
            return DBXTeamLogEventTypeExternalDriveBackupEligibilityStatusChecked(arg)
        case .externalDriveBackupStatusChanged(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupStatusChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeExternalDriveBackupStatusChanged(arg)
        case .accountCaptureChangeAvailability(let swiftArg):
            let arg = DBXTeamLogAccountCaptureChangeAvailabilityType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountCaptureChangeAvailability(arg)
        case .accountCaptureMigrateAccount(let swiftArg):
            let arg = DBXTeamLogAccountCaptureMigrateAccountType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountCaptureMigrateAccount(arg)
        case .accountCaptureNotificationEmailsSent(let swiftArg):
            let arg = DBXTeamLogAccountCaptureNotificationEmailsSentType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountCaptureNotificationEmailsSent(arg)
        case .accountCaptureRelinquishAccount(let swiftArg):
            let arg = DBXTeamLogAccountCaptureRelinquishAccountType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountCaptureRelinquishAccount(arg)
        case .disabledDomainInvites(let swiftArg):
            let arg = DBXTeamLogDisabledDomainInvitesType(swift: swiftArg)
            return DBXTeamLogEventTypeDisabledDomainInvites(arg)
        case .domainInvitesApproveRequestToJoinTeam(let swiftArg):
            let arg = DBXTeamLogDomainInvitesApproveRequestToJoinTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesApproveRequestToJoinTeam(arg)
        case .domainInvitesDeclineRequestToJoinTeam(let swiftArg):
            let arg = DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesDeclineRequestToJoinTeam(arg)
        case .domainInvitesEmailExistingUsers(let swiftArg):
            let arg = DBXTeamLogDomainInvitesEmailExistingUsersType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesEmailExistingUsers(arg)
        case .domainInvitesRequestToJoinTeam(let swiftArg):
            let arg = DBXTeamLogDomainInvitesRequestToJoinTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesRequestToJoinTeam(arg)
        case .domainInvitesSetInviteNewUserPrefToNo(let swiftArg):
            let arg = DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToNo(arg)
        case .domainInvitesSetInviteNewUserPrefToYes(let swiftArg):
            let arg = DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToYes(arg)
        case .domainVerificationAddDomainFail(let swiftArg):
            let arg = DBXTeamLogDomainVerificationAddDomainFailType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainVerificationAddDomainFail(arg)
        case .domainVerificationAddDomainSuccess(let swiftArg):
            let arg = DBXTeamLogDomainVerificationAddDomainSuccessType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainVerificationAddDomainSuccess(arg)
        case .domainVerificationRemoveDomain(let swiftArg):
            let arg = DBXTeamLogDomainVerificationRemoveDomainType(swift: swiftArg)
            return DBXTeamLogEventTypeDomainVerificationRemoveDomain(arg)
        case .enabledDomainInvites(let swiftArg):
            let arg = DBXTeamLogEnabledDomainInvitesType(swift: swiftArg)
            return DBXTeamLogEventTypeEnabledDomainInvites(arg)
        case .teamEncryptionKeyCancelKeyDeletion(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyCancelKeyDeletion(arg)
        case .teamEncryptionKeyCreateKey(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyCreateKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyCreateKey(arg)
        case .teamEncryptionKeyDeleteKey(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyDeleteKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyDeleteKey(arg)
        case .teamEncryptionKeyDisableKey(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyDisableKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyDisableKey(arg)
        case .teamEncryptionKeyEnableKey(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyEnableKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyEnableKey(arg)
        case .teamEncryptionKeyRotateKey(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyRotateKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyRotateKey(arg)
        case .teamEncryptionKeyScheduleKeyDeletion(let swiftArg):
            let arg = DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamEncryptionKeyScheduleKeyDeletion(arg)
        case .applyNamingConvention(let swiftArg):
            let arg = DBXTeamLogApplyNamingConventionType(swift: swiftArg)
            return DBXTeamLogEventTypeApplyNamingConvention(arg)
        case .createFolder(let swiftArg):
            let arg = DBXTeamLogCreateFolderType(swift: swiftArg)
            return DBXTeamLogEventTypeCreateFolder(arg)
        case .fileAdd(let swiftArg):
            let arg = DBXTeamLogFileAddType(swift: swiftArg)
            return DBXTeamLogEventTypeFileAdd(arg)
        case .fileAddFromAutomation(let swiftArg):
            let arg = DBXTeamLogFileAddFromAutomationType(swift: swiftArg)
            return DBXTeamLogEventTypeFileAddFromAutomation(arg)
        case .fileCopy(let swiftArg):
            let arg = DBXTeamLogFileCopyType(swift: swiftArg)
            return DBXTeamLogEventTypeFileCopy(arg)
        case .fileDelete(let swiftArg):
            let arg = DBXTeamLogFileDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeFileDelete(arg)
        case .fileDownload(let swiftArg):
            let arg = DBXTeamLogFileDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypeFileDownload(arg)
        case .fileEdit(let swiftArg):
            let arg = DBXTeamLogFileEditType(swift: swiftArg)
            return DBXTeamLogEventTypeFileEdit(arg)
        case .fileGetCopyReference(let swiftArg):
            let arg = DBXTeamLogFileGetCopyReferenceType(swift: swiftArg)
            return DBXTeamLogEventTypeFileGetCopyReference(arg)
        case .fileLockingLockStatusChanged(let swiftArg):
            let arg = DBXTeamLogFileLockingLockStatusChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFileLockingLockStatusChanged(arg)
        case .fileMove(let swiftArg):
            let arg = DBXTeamLogFileMoveType(swift: swiftArg)
            return DBXTeamLogEventTypeFileMove(arg)
        case .filePermanentlyDelete(let swiftArg):
            let arg = DBXTeamLogFilePermanentlyDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeFilePermanentlyDelete(arg)
        case .filePreview(let swiftArg):
            let arg = DBXTeamLogFilePreviewType(swift: swiftArg)
            return DBXTeamLogEventTypeFilePreview(arg)
        case .fileRename(let swiftArg):
            let arg = DBXTeamLogFileRenameType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRename(arg)
        case .fileRestore(let swiftArg):
            let arg = DBXTeamLogFileRestoreType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRestore(arg)
        case .fileRevert(let swiftArg):
            let arg = DBXTeamLogFileRevertType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRevert(arg)
        case .fileRollbackChanges(let swiftArg):
            let arg = DBXTeamLogFileRollbackChangesType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRollbackChanges(arg)
        case .fileSaveCopyReference(let swiftArg):
            let arg = DBXTeamLogFileSaveCopyReferenceType(swift: swiftArg)
            return DBXTeamLogEventTypeFileSaveCopyReference(arg)
        case .folderOverviewDescriptionChanged(let swiftArg):
            let arg = DBXTeamLogFolderOverviewDescriptionChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFolderOverviewDescriptionChanged(arg)
        case .folderOverviewItemPinned(let swiftArg):
            let arg = DBXTeamLogFolderOverviewItemPinnedType(swift: swiftArg)
            return DBXTeamLogEventTypeFolderOverviewItemPinned(arg)
        case .folderOverviewItemUnpinned(let swiftArg):
            let arg = DBXTeamLogFolderOverviewItemUnpinnedType(swift: swiftArg)
            return DBXTeamLogEventTypeFolderOverviewItemUnpinned(arg)
        case .objectLabelAdded(let swiftArg):
            let arg = DBXTeamLogObjectLabelAddedType(swift: swiftArg)
            return DBXTeamLogEventTypeObjectLabelAdded(arg)
        case .objectLabelRemoved(let swiftArg):
            let arg = DBXTeamLogObjectLabelRemovedType(swift: swiftArg)
            return DBXTeamLogEventTypeObjectLabelRemoved(arg)
        case .objectLabelUpdatedValue(let swiftArg):
            let arg = DBXTeamLogObjectLabelUpdatedValueType(swift: swiftArg)
            return DBXTeamLogEventTypeObjectLabelUpdatedValue(arg)
        case .organizeFolderWithTidy(let swiftArg):
            let arg = DBXTeamLogOrganizeFolderWithTidyType(swift: swiftArg)
            return DBXTeamLogEventTypeOrganizeFolderWithTidy(arg)
        case .replayFileDelete(let swiftArg):
            let arg = DBXTeamLogReplayFileDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeReplayFileDelete(arg)
        case .rewindFolder(let swiftArg):
            let arg = DBXTeamLogRewindFolderType(swift: swiftArg)
            return DBXTeamLogEventTypeRewindFolder(arg)
        case .undoNamingConvention(let swiftArg):
            let arg = DBXTeamLogUndoNamingConventionType(swift: swiftArg)
            return DBXTeamLogEventTypeUndoNamingConvention(arg)
        case .undoOrganizeFolderWithTidy(let swiftArg):
            let arg = DBXTeamLogUndoOrganizeFolderWithTidyType(swift: swiftArg)
            return DBXTeamLogEventTypeUndoOrganizeFolderWithTidy(arg)
        case .userTagsAdded(let swiftArg):
            let arg = DBXTeamLogUserTagsAddedType(swift: swiftArg)
            return DBXTeamLogEventTypeUserTagsAdded(arg)
        case .userTagsRemoved(let swiftArg):
            let arg = DBXTeamLogUserTagsRemovedType(swift: swiftArg)
            return DBXTeamLogEventTypeUserTagsRemoved(arg)
        case .emailIngestReceiveFile(let swiftArg):
            let arg = DBXTeamLogEmailIngestReceiveFileType(swift: swiftArg)
            return DBXTeamLogEventTypeEmailIngestReceiveFile(arg)
        case .fileRequestChange(let swiftArg):
            let arg = DBXTeamLogFileRequestChangeType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestChange(arg)
        case .fileRequestClose(let swiftArg):
            let arg = DBXTeamLogFileRequestCloseType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestClose(arg)
        case .fileRequestCreate(let swiftArg):
            let arg = DBXTeamLogFileRequestCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestCreate(arg)
        case .fileRequestDelete(let swiftArg):
            let arg = DBXTeamLogFileRequestDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestDelete(arg)
        case .fileRequestReceiveFile(let swiftArg):
            let arg = DBXTeamLogFileRequestReceiveFileType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestReceiveFile(arg)
        case .groupAddExternalId(let swiftArg):
            let arg = DBXTeamLogGroupAddExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupAddExternalId(arg)
        case .groupAddMember(let swiftArg):
            let arg = DBXTeamLogGroupAddMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupAddMember(arg)
        case .groupChangeExternalId(let swiftArg):
            let arg = DBXTeamLogGroupChangeExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupChangeExternalId(arg)
        case .groupChangeManagementType(let swiftArg):
            let arg = DBXTeamLogGroupChangeManagementTypeType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupChangeManagementType(arg)
        case .groupChangeMemberRole(let swiftArg):
            let arg = DBXTeamLogGroupChangeMemberRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupChangeMemberRole(arg)
        case .groupCreate(let swiftArg):
            let arg = DBXTeamLogGroupCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupCreate(arg)
        case .groupDelete(let swiftArg):
            let arg = DBXTeamLogGroupDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupDelete(arg)
        case .groupDescriptionUpdated(let swiftArg):
            let arg = DBXTeamLogGroupDescriptionUpdatedType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupDescriptionUpdated(arg)
        case .groupJoinPolicyUpdated(let swiftArg):
            let arg = DBXTeamLogGroupJoinPolicyUpdatedType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupJoinPolicyUpdated(arg)
        case .groupMoved(let swiftArg):
            let arg = DBXTeamLogGroupMovedType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupMoved(arg)
        case .groupRemoveExternalId(let swiftArg):
            let arg = DBXTeamLogGroupRemoveExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupRemoveExternalId(arg)
        case .groupRemoveMember(let swiftArg):
            let arg = DBXTeamLogGroupRemoveMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupRemoveMember(arg)
        case .groupRename(let swiftArg):
            let arg = DBXTeamLogGroupRenameType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupRename(arg)
        case .accountLockOrUnlocked(let swiftArg):
            let arg = DBXTeamLogAccountLockOrUnlockedType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountLockOrUnlocked(arg)
        case .emmError(let swiftArg):
            let arg = DBXTeamLogEmmErrorType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmError(arg)
        case .guestAdminSignedInViaTrustedTeams(let swiftArg):
            let arg = DBXTeamLogGuestAdminSignedInViaTrustedTeamsType(swift: swiftArg)
            return DBXTeamLogEventTypeGuestAdminSignedInViaTrustedTeams(arg)
        case .guestAdminSignedOutViaTrustedTeams(let swiftArg):
            let arg = DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType(swift: swiftArg)
            return DBXTeamLogEventTypeGuestAdminSignedOutViaTrustedTeams(arg)
        case .loginFail(let swiftArg):
            let arg = DBXTeamLogLoginFailType(swift: swiftArg)
            return DBXTeamLogEventTypeLoginFail(arg)
        case .loginSuccess(let swiftArg):
            let arg = DBXTeamLogLoginSuccessType(swift: swiftArg)
            return DBXTeamLogEventTypeLoginSuccess(arg)
        case .logout(let swiftArg):
            let arg = DBXTeamLogLogoutType(swift: swiftArg)
            return DBXTeamLogEventTypeLogout(arg)
        case .resellerSupportSessionEnd(let swiftArg):
            let arg = DBXTeamLogResellerSupportSessionEndType(swift: swiftArg)
            return DBXTeamLogEventTypeResellerSupportSessionEnd(arg)
        case .resellerSupportSessionStart(let swiftArg):
            let arg = DBXTeamLogResellerSupportSessionStartType(swift: swiftArg)
            return DBXTeamLogEventTypeResellerSupportSessionStart(arg)
        case .signInAsSessionEnd(let swiftArg):
            let arg = DBXTeamLogSignInAsSessionEndType(swift: swiftArg)
            return DBXTeamLogEventTypeSignInAsSessionEnd(arg)
        case .signInAsSessionStart(let swiftArg):
            let arg = DBXTeamLogSignInAsSessionStartType(swift: swiftArg)
            return DBXTeamLogEventTypeSignInAsSessionStart(arg)
        case .ssoError(let swiftArg):
            let arg = DBXTeamLogSsoErrorType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoError(arg)
        case .backupAdminInvitationSent(let swiftArg):
            let arg = DBXTeamLogBackupAdminInvitationSentType(swift: swiftArg)
            return DBXTeamLogEventTypeBackupAdminInvitationSent(arg)
        case .backupInvitationOpened(let swiftArg):
            let arg = DBXTeamLogBackupInvitationOpenedType(swift: swiftArg)
            return DBXTeamLogEventTypeBackupInvitationOpened(arg)
        case .createTeamInviteLink(let swiftArg):
            let arg = DBXTeamLogCreateTeamInviteLinkType(swift: swiftArg)
            return DBXTeamLogEventTypeCreateTeamInviteLink(arg)
        case .deleteTeamInviteLink(let swiftArg):
            let arg = DBXTeamLogDeleteTeamInviteLinkType(swift: swiftArg)
            return DBXTeamLogEventTypeDeleteTeamInviteLink(arg)
        case .memberAddExternalId(let swiftArg):
            let arg = DBXTeamLogMemberAddExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberAddExternalId(arg)
        case .memberAddName(let swiftArg):
            let arg = DBXTeamLogMemberAddNameType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberAddName(arg)
        case .memberChangeAdminRole(let swiftArg):
            let arg = DBXTeamLogMemberChangeAdminRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeAdminRole(arg)
        case .memberChangeEmail(let swiftArg):
            let arg = DBXTeamLogMemberChangeEmailType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeEmail(arg)
        case .memberChangeExternalId(let swiftArg):
            let arg = DBXTeamLogMemberChangeExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeExternalId(arg)
        case .memberChangeMembershipType(let swiftArg):
            let arg = DBXTeamLogMemberChangeMembershipTypeType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeMembershipType(arg)
        case .memberChangeName(let swiftArg):
            let arg = DBXTeamLogMemberChangeNameType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeName(arg)
        case .memberChangeResellerRole(let swiftArg):
            let arg = DBXTeamLogMemberChangeResellerRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeResellerRole(arg)
        case .memberChangeStatus(let swiftArg):
            let arg = DBXTeamLogMemberChangeStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberChangeStatus(arg)
        case .memberDeleteManualContacts(let swiftArg):
            let arg = DBXTeamLogMemberDeleteManualContactsType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberDeleteManualContacts(arg)
        case .memberDeleteProfilePhoto(let swiftArg):
            let arg = DBXTeamLogMemberDeleteProfilePhotoType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberDeleteProfilePhoto(arg)
        case .memberPermanentlyDeleteAccountContents(let swiftArg):
            let arg = DBXTeamLogMemberPermanentlyDeleteAccountContentsType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberPermanentlyDeleteAccountContents(arg)
        case .memberRemoveExternalId(let swiftArg):
            let arg = DBXTeamLogMemberRemoveExternalIdType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberRemoveExternalId(arg)
        case .memberSetProfilePhoto(let swiftArg):
            let arg = DBXTeamLogMemberSetProfilePhotoType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSetProfilePhoto(arg)
        case .memberSpaceLimitsAddCustomQuota(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsAddCustomQuotaType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsAddCustomQuota(arg)
        case .memberSpaceLimitsChangeCustomQuota(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsChangeCustomQuota(arg)
        case .memberSpaceLimitsChangeStatus(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsChangeStatus(arg)
        case .memberSpaceLimitsRemoveCustomQuota(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsRemoveCustomQuota(arg)
        case .memberSuggest(let swiftArg):
            let arg = DBXTeamLogMemberSuggestType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSuggest(arg)
        case .memberTransferAccountContents(let swiftArg):
            let arg = DBXTeamLogMemberTransferAccountContentsType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberTransferAccountContents(arg)
        case .pendingSecondaryEmailAdded(let swiftArg):
            let arg = DBXTeamLogPendingSecondaryEmailAddedType(swift: swiftArg)
            return DBXTeamLogEventTypePendingSecondaryEmailAdded(arg)
        case .secondaryEmailDeleted(let swiftArg):
            let arg = DBXTeamLogSecondaryEmailDeletedType(swift: swiftArg)
            return DBXTeamLogEventTypeSecondaryEmailDeleted(arg)
        case .secondaryEmailVerified(let swiftArg):
            let arg = DBXTeamLogSecondaryEmailVerifiedType(swift: swiftArg)
            return DBXTeamLogEventTypeSecondaryEmailVerified(arg)
        case .secondaryMailsPolicyChanged(let swiftArg):
            let arg = DBXTeamLogSecondaryMailsPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeSecondaryMailsPolicyChanged(arg)
        case .binderAddPage(let swiftArg):
            let arg = DBXTeamLogBinderAddPageType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderAddPage(arg)
        case .binderAddSection(let swiftArg):
            let arg = DBXTeamLogBinderAddSectionType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderAddSection(arg)
        case .binderRemovePage(let swiftArg):
            let arg = DBXTeamLogBinderRemovePageType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderRemovePage(arg)
        case .binderRemoveSection(let swiftArg):
            let arg = DBXTeamLogBinderRemoveSectionType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderRemoveSection(arg)
        case .binderRenamePage(let swiftArg):
            let arg = DBXTeamLogBinderRenamePageType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderRenamePage(arg)
        case .binderRenameSection(let swiftArg):
            let arg = DBXTeamLogBinderRenameSectionType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderRenameSection(arg)
        case .binderReorderPage(let swiftArg):
            let arg = DBXTeamLogBinderReorderPageType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderReorderPage(arg)
        case .binderReorderSection(let swiftArg):
            let arg = DBXTeamLogBinderReorderSectionType(swift: swiftArg)
            return DBXTeamLogEventTypeBinderReorderSection(arg)
        case .paperContentAddMember(let swiftArg):
            let arg = DBXTeamLogPaperContentAddMemberType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentAddMember(arg)
        case .paperContentAddToFolder(let swiftArg):
            let arg = DBXTeamLogPaperContentAddToFolderType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentAddToFolder(arg)
        case .paperContentArchive(let swiftArg):
            let arg = DBXTeamLogPaperContentArchiveType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentArchive(arg)
        case .paperContentCreate(let swiftArg):
            let arg = DBXTeamLogPaperContentCreateType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentCreate(arg)
        case .paperContentPermanentlyDelete(let swiftArg):
            let arg = DBXTeamLogPaperContentPermanentlyDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentPermanentlyDelete(arg)
        case .paperContentRemoveFromFolder(let swiftArg):
            let arg = DBXTeamLogPaperContentRemoveFromFolderType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentRemoveFromFolder(arg)
        case .paperContentRemoveMember(let swiftArg):
            let arg = DBXTeamLogPaperContentRemoveMemberType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentRemoveMember(arg)
        case .paperContentRename(let swiftArg):
            let arg = DBXTeamLogPaperContentRenameType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentRename(arg)
        case .paperContentRestore(let swiftArg):
            let arg = DBXTeamLogPaperContentRestoreType(swift: swiftArg)
            return DBXTeamLogEventTypePaperContentRestore(arg)
        case .paperDocAddComment(let swiftArg):
            let arg = DBXTeamLogPaperDocAddCommentType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocAddComment(arg)
        case .paperDocChangeMemberRole(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeMemberRoleType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocChangeMemberRole(arg)
        case .paperDocChangeSharingPolicy(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeSharingPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocChangeSharingPolicy(arg)
        case .paperDocChangeSubscription(let swiftArg):
            let arg = DBXTeamLogPaperDocChangeSubscriptionType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocChangeSubscription(arg)
        case .paperDocDeleted(let swiftArg):
            let arg = DBXTeamLogPaperDocDeletedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocDeleted(arg)
        case .paperDocDeleteComment(let swiftArg):
            let arg = DBXTeamLogPaperDocDeleteCommentType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocDeleteComment(arg)
        case .paperDocDownload(let swiftArg):
            let arg = DBXTeamLogPaperDocDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocDownload(arg)
        case .paperDocEdit(let swiftArg):
            let arg = DBXTeamLogPaperDocEditType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocEdit(arg)
        case .paperDocEditComment(let swiftArg):
            let arg = DBXTeamLogPaperDocEditCommentType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocEditComment(arg)
        case .paperDocFollowed(let swiftArg):
            let arg = DBXTeamLogPaperDocFollowedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocFollowed(arg)
        case .paperDocMention(let swiftArg):
            let arg = DBXTeamLogPaperDocMentionType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocMention(arg)
        case .paperDocOwnershipChanged(let swiftArg):
            let arg = DBXTeamLogPaperDocOwnershipChangedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocOwnershipChanged(arg)
        case .paperDocRequestAccess(let swiftArg):
            let arg = DBXTeamLogPaperDocRequestAccessType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocRequestAccess(arg)
        case .paperDocResolveComment(let swiftArg):
            let arg = DBXTeamLogPaperDocResolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocResolveComment(arg)
        case .paperDocRevert(let swiftArg):
            let arg = DBXTeamLogPaperDocRevertType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocRevert(arg)
        case .paperDocSlackShare(let swiftArg):
            let arg = DBXTeamLogPaperDocSlackShareType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocSlackShare(arg)
        case .paperDocTeamInvite(let swiftArg):
            let arg = DBXTeamLogPaperDocTeamInviteType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocTeamInvite(arg)
        case .paperDocTrashed(let swiftArg):
            let arg = DBXTeamLogPaperDocTrashedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocTrashed(arg)
        case .paperDocUnresolveComment(let swiftArg):
            let arg = DBXTeamLogPaperDocUnresolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocUnresolveComment(arg)
        case .paperDocUntrashed(let swiftArg):
            let arg = DBXTeamLogPaperDocUntrashedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocUntrashed(arg)
        case .paperDocView(let swiftArg):
            let arg = DBXTeamLogPaperDocViewType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDocView(arg)
        case .paperExternalViewAllow(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewAllowType(swift: swiftArg)
            return DBXTeamLogEventTypePaperExternalViewAllow(arg)
        case .paperExternalViewDefaultTeam(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewDefaultTeamType(swift: swiftArg)
            return DBXTeamLogEventTypePaperExternalViewDefaultTeam(arg)
        case .paperExternalViewForbid(let swiftArg):
            let arg = DBXTeamLogPaperExternalViewForbidType(swift: swiftArg)
            return DBXTeamLogEventTypePaperExternalViewForbid(arg)
        case .paperFolderChangeSubscription(let swiftArg):
            let arg = DBXTeamLogPaperFolderChangeSubscriptionType(swift: swiftArg)
            return DBXTeamLogEventTypePaperFolderChangeSubscription(arg)
        case .paperFolderDeleted(let swiftArg):
            let arg = DBXTeamLogPaperFolderDeletedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperFolderDeleted(arg)
        case .paperFolderFollowed(let swiftArg):
            let arg = DBXTeamLogPaperFolderFollowedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperFolderFollowed(arg)
        case .paperFolderTeamInvite(let swiftArg):
            let arg = DBXTeamLogPaperFolderTeamInviteType(swift: swiftArg)
            return DBXTeamLogEventTypePaperFolderTeamInvite(arg)
        case .paperPublishedLinkChangePermission(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkChangePermissionType(swift: swiftArg)
            return DBXTeamLogEventTypePaperPublishedLinkChangePermission(arg)
        case .paperPublishedLinkCreate(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkCreateType(swift: swiftArg)
            return DBXTeamLogEventTypePaperPublishedLinkCreate(arg)
        case .paperPublishedLinkDisabled(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkDisabledType(swift: swiftArg)
            return DBXTeamLogEventTypePaperPublishedLinkDisabled(arg)
        case .paperPublishedLinkView(let swiftArg):
            let arg = DBXTeamLogPaperPublishedLinkViewType(swift: swiftArg)
            return DBXTeamLogEventTypePaperPublishedLinkView(arg)
        case .passwordChange(let swiftArg):
            let arg = DBXTeamLogPasswordChangeType(swift: swiftArg)
            return DBXTeamLogEventTypePasswordChange(arg)
        case .passwordReset(let swiftArg):
            let arg = DBXTeamLogPasswordResetType(swift: swiftArg)
            return DBXTeamLogEventTypePasswordReset(arg)
        case .passwordResetAll(let swiftArg):
            let arg = DBXTeamLogPasswordResetAllType(swift: swiftArg)
            return DBXTeamLogEventTypePasswordResetAll(arg)
        case .classificationCreateReport(let swiftArg):
            let arg = DBXTeamLogClassificationCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeClassificationCreateReport(arg)
        case .classificationCreateReportFail(let swiftArg):
            let arg = DBXTeamLogClassificationCreateReportFailType(swift: swiftArg)
            return DBXTeamLogEventTypeClassificationCreateReportFail(arg)
        case .emmCreateExceptionsReport(let swiftArg):
            let arg = DBXTeamLogEmmCreateExceptionsReportType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmCreateExceptionsReport(arg)
        case .emmCreateUsageReport(let swiftArg):
            let arg = DBXTeamLogEmmCreateUsageReportType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmCreateUsageReport(arg)
        case .exportMembersReport(let swiftArg):
            let arg = DBXTeamLogExportMembersReportType(swift: swiftArg)
            return DBXTeamLogEventTypeExportMembersReport(arg)
        case .exportMembersReportFail(let swiftArg):
            let arg = DBXTeamLogExportMembersReportFailType(swift: swiftArg)
            return DBXTeamLogEventTypeExportMembersReportFail(arg)
        case .externalSharingCreateReport(let swiftArg):
            let arg = DBXTeamLogExternalSharingCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeExternalSharingCreateReport(arg)
        case .externalSharingReportFailed(let swiftArg):
            let arg = DBXTeamLogExternalSharingReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeExternalSharingReportFailed(arg)
        case .noExpirationLinkGenCreateReport(let swiftArg):
            let arg = DBXTeamLogNoExpirationLinkGenCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeNoExpirationLinkGenCreateReport(arg)
        case .noExpirationLinkGenReportFailed(let swiftArg):
            let arg = DBXTeamLogNoExpirationLinkGenReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeNoExpirationLinkGenReportFailed(arg)
        case .noPasswordLinkGenCreateReport(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkGenCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeNoPasswordLinkGenCreateReport(arg)
        case .noPasswordLinkGenReportFailed(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkGenReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeNoPasswordLinkGenReportFailed(arg)
        case .noPasswordLinkViewCreateReport(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkViewCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeNoPasswordLinkViewCreateReport(arg)
        case .noPasswordLinkViewReportFailed(let swiftArg):
            let arg = DBXTeamLogNoPasswordLinkViewReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeNoPasswordLinkViewReportFailed(arg)
        case .outdatedLinkViewCreateReport(let swiftArg):
            let arg = DBXTeamLogOutdatedLinkViewCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeOutdatedLinkViewCreateReport(arg)
        case .outdatedLinkViewReportFailed(let swiftArg):
            let arg = DBXTeamLogOutdatedLinkViewReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeOutdatedLinkViewReportFailed(arg)
        case .paperAdminExportStart(let swiftArg):
            let arg = DBXTeamLogPaperAdminExportStartType(swift: swiftArg)
            return DBXTeamLogEventTypePaperAdminExportStart(arg)
        case .ransomwareAlertCreateReport(let swiftArg):
            let arg = DBXTeamLogRansomwareAlertCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeRansomwareAlertCreateReport(arg)
        case .ransomwareAlertCreateReportFailed(let swiftArg):
            let arg = DBXTeamLogRansomwareAlertCreateReportFailedType(swift: swiftArg)
            return DBXTeamLogEventTypeRansomwareAlertCreateReportFailed(arg)
        case .smartSyncCreateAdminPrivilegeReport(let swiftArg):
            let arg = DBXTeamLogSmartSyncCreateAdminPrivilegeReportType(swift: swiftArg)
            return DBXTeamLogEventTypeSmartSyncCreateAdminPrivilegeReport(arg)
        case .teamActivityCreateReport(let swiftArg):
            let arg = DBXTeamLogTeamActivityCreateReportType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamActivityCreateReport(arg)
        case .teamActivityCreateReportFail(let swiftArg):
            let arg = DBXTeamLogTeamActivityCreateReportFailType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamActivityCreateReportFail(arg)
        case .collectionShare(let swiftArg):
            let arg = DBXTeamLogCollectionShareType(swift: swiftArg)
            return DBXTeamLogEventTypeCollectionShare(arg)
        case .fileTransfersFileAdd(let swiftArg):
            let arg = DBXTeamLogFileTransfersFileAddType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersFileAdd(arg)
        case .fileTransfersTransferDelete(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersTransferDelete(arg)
        case .fileTransfersTransferDownload(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersTransferDownload(arg)
        case .fileTransfersTransferSend(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferSendType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersTransferSend(arg)
        case .fileTransfersTransferView(let swiftArg):
            let arg = DBXTeamLogFileTransfersTransferViewType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersTransferView(arg)
        case .noteAclInviteOnly(let swiftArg):
            let arg = DBXTeamLogNoteAclInviteOnlyType(swift: swiftArg)
            return DBXTeamLogEventTypeNoteAclInviteOnly(arg)
        case .noteAclLink(let swiftArg):
            let arg = DBXTeamLogNoteAclLinkType(swift: swiftArg)
            return DBXTeamLogEventTypeNoteAclLink(arg)
        case .noteAclTeamLink(let swiftArg):
            let arg = DBXTeamLogNoteAclTeamLinkType(swift: swiftArg)
            return DBXTeamLogEventTypeNoteAclTeamLink(arg)
        case .noteShared(let swiftArg):
            let arg = DBXTeamLogNoteSharedType(swift: swiftArg)
            return DBXTeamLogEventTypeNoteShared(arg)
        case .noteShareReceive(let swiftArg):
            let arg = DBXTeamLogNoteShareReceiveType(swift: swiftArg)
            return DBXTeamLogEventTypeNoteShareReceive(arg)
        case .openNoteShared(let swiftArg):
            let arg = DBXTeamLogOpenNoteSharedType(swift: swiftArg)
            return DBXTeamLogEventTypeOpenNoteShared(arg)
        case .replayFileSharedLinkCreated(let swiftArg):
            let arg = DBXTeamLogReplayFileSharedLinkCreatedType(swift: swiftArg)
            return DBXTeamLogEventTypeReplayFileSharedLinkCreated(arg)
        case .replayFileSharedLinkModified(let swiftArg):
            let arg = DBXTeamLogReplayFileSharedLinkModifiedType(swift: swiftArg)
            return DBXTeamLogEventTypeReplayFileSharedLinkModified(arg)
        case .replayProjectTeamAdd(let swiftArg):
            let arg = DBXTeamLogReplayProjectTeamAddType(swift: swiftArg)
            return DBXTeamLogEventTypeReplayProjectTeamAdd(arg)
        case .replayProjectTeamDelete(let swiftArg):
            let arg = DBXTeamLogReplayProjectTeamDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeReplayProjectTeamDelete(arg)
        case .sfAddGroup(let swiftArg):
            let arg = DBXTeamLogSfAddGroupType(swift: swiftArg)
            return DBXTeamLogEventTypeSfAddGroup(arg)
        case .sfAllowNonMembersToViewSharedLinks(let swiftArg):
            let arg = DBXTeamLogSfAllowNonMembersToViewSharedLinksType(swift: swiftArg)
            return DBXTeamLogEventTypeSfAllowNonMembersToViewSharedLinks(arg)
        case .sfExternalInviteWarn(let swiftArg):
            let arg = DBXTeamLogSfExternalInviteWarnType(swift: swiftArg)
            return DBXTeamLogEventTypeSfExternalInviteWarn(arg)
        case .sfFbInvite(let swiftArg):
            let arg = DBXTeamLogSfFbInviteType(swift: swiftArg)
            return DBXTeamLogEventTypeSfFbInvite(arg)
        case .sfFbInviteChangeRole(let swiftArg):
            let arg = DBXTeamLogSfFbInviteChangeRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeSfFbInviteChangeRole(arg)
        case .sfFbUninvite(let swiftArg):
            let arg = DBXTeamLogSfFbUninviteType(swift: swiftArg)
            return DBXTeamLogEventTypeSfFbUninvite(arg)
        case .sfInviteGroup(let swiftArg):
            let arg = DBXTeamLogSfInviteGroupType(swift: swiftArg)
            return DBXTeamLogEventTypeSfInviteGroup(arg)
        case .sfTeamGrantAccess(let swiftArg):
            let arg = DBXTeamLogSfTeamGrantAccessType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamGrantAccess(arg)
        case .sfTeamInvite(let swiftArg):
            let arg = DBXTeamLogSfTeamInviteType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamInvite(arg)
        case .sfTeamInviteChangeRole(let swiftArg):
            let arg = DBXTeamLogSfTeamInviteChangeRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamInviteChangeRole(arg)
        case .sfTeamJoin(let swiftArg):
            let arg = DBXTeamLogSfTeamJoinType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamJoin(arg)
        case .sfTeamJoinFromOobLink(let swiftArg):
            let arg = DBXTeamLogSfTeamJoinFromOobLinkType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamJoinFromOobLink(arg)
        case .sfTeamUninvite(let swiftArg):
            let arg = DBXTeamLogSfTeamUninviteType(swift: swiftArg)
            return DBXTeamLogEventTypeSfTeamUninvite(arg)
        case .sharedContentAddInvitees(let swiftArg):
            let arg = DBXTeamLogSharedContentAddInviteesType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentAddInvitees(arg)
        case .sharedContentAddLinkExpiry(let swiftArg):
            let arg = DBXTeamLogSharedContentAddLinkExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentAddLinkExpiry(arg)
        case .sharedContentAddLinkPassword(let swiftArg):
            let arg = DBXTeamLogSharedContentAddLinkPasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentAddLinkPassword(arg)
        case .sharedContentAddMember(let swiftArg):
            let arg = DBXTeamLogSharedContentAddMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentAddMember(arg)
        case .sharedContentChangeDownloadsPolicy(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeDownloadsPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeDownloadsPolicy(arg)
        case .sharedContentChangeInviteeRole(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeInviteeRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeInviteeRole(arg)
        case .sharedContentChangeLinkAudience(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkAudienceType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeLinkAudience(arg)
        case .sharedContentChangeLinkExpiry(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeLinkExpiry(arg)
        case .sharedContentChangeLinkPassword(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeLinkPasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeLinkPassword(arg)
        case .sharedContentChangeMemberRole(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeMemberRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeMemberRole(arg)
        case .sharedContentChangeViewerInfoPolicy(let swiftArg):
            let arg = DBXTeamLogSharedContentChangeViewerInfoPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentChangeViewerInfoPolicy(arg)
        case .sharedContentClaimInvitation(let swiftArg):
            let arg = DBXTeamLogSharedContentClaimInvitationType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentClaimInvitation(arg)
        case .sharedContentCopy(let swiftArg):
            let arg = DBXTeamLogSharedContentCopyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentCopy(arg)
        case .sharedContentDownload(let swiftArg):
            let arg = DBXTeamLogSharedContentDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentDownload(arg)
        case .sharedContentRelinquishMembership(let swiftArg):
            let arg = DBXTeamLogSharedContentRelinquishMembershipType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRelinquishMembership(arg)
        case .sharedContentRemoveInvitees(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveInviteesType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRemoveInvitees(arg)
        case .sharedContentRemoveLinkExpiry(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveLinkExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRemoveLinkExpiry(arg)
        case .sharedContentRemoveLinkPassword(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveLinkPasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRemoveLinkPassword(arg)
        case .sharedContentRemoveMember(let swiftArg):
            let arg = DBXTeamLogSharedContentRemoveMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRemoveMember(arg)
        case .sharedContentRequestAccess(let swiftArg):
            let arg = DBXTeamLogSharedContentRequestAccessType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRequestAccess(arg)
        case .sharedContentRestoreInvitees(let swiftArg):
            let arg = DBXTeamLogSharedContentRestoreInviteesType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRestoreInvitees(arg)
        case .sharedContentRestoreMember(let swiftArg):
            let arg = DBXTeamLogSharedContentRestoreMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentRestoreMember(arg)
        case .sharedContentUnshare(let swiftArg):
            let arg = DBXTeamLogSharedContentUnshareType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentUnshare(arg)
        case .sharedContentView(let swiftArg):
            let arg = DBXTeamLogSharedContentViewType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedContentView(arg)
        case .sharedFolderChangeLinkPolicy(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeLinkPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderChangeLinkPolicy(arg)
        case .sharedFolderChangeMembersInheritancePolicy(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersInheritancePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderChangeMembersInheritancePolicy(arg)
        case .sharedFolderChangeMembersManagementPolicy(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersManagementPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderChangeMembersManagementPolicy(arg)
        case .sharedFolderChangeMembersPolicy(let swiftArg):
            let arg = DBXTeamLogSharedFolderChangeMembersPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderChangeMembersPolicy(arg)
        case .sharedFolderCreate(let swiftArg):
            let arg = DBXTeamLogSharedFolderCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderCreate(arg)
        case .sharedFolderDeclineInvitation(let swiftArg):
            let arg = DBXTeamLogSharedFolderDeclineInvitationType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderDeclineInvitation(arg)
        case .sharedFolderMount(let swiftArg):
            let arg = DBXTeamLogSharedFolderMountType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderMount(arg)
        case .sharedFolderNest(let swiftArg):
            let arg = DBXTeamLogSharedFolderNestType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderNest(arg)
        case .sharedFolderTransferOwnership(let swiftArg):
            let arg = DBXTeamLogSharedFolderTransferOwnershipType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderTransferOwnership(arg)
        case .sharedFolderUnmount(let swiftArg):
            let arg = DBXTeamLogSharedFolderUnmountType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedFolderUnmount(arg)
        case .sharedLinkAddExpiry(let swiftArg):
            let arg = DBXTeamLogSharedLinkAddExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkAddExpiry(arg)
        case .sharedLinkChangeExpiry(let swiftArg):
            let arg = DBXTeamLogSharedLinkChangeExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkChangeExpiry(arg)
        case .sharedLinkChangeVisibility(let swiftArg):
            let arg = DBXTeamLogSharedLinkChangeVisibilityType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkChangeVisibility(arg)
        case .sharedLinkCopy(let swiftArg):
            let arg = DBXTeamLogSharedLinkCopyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkCopy(arg)
        case .sharedLinkCreate(let swiftArg):
            let arg = DBXTeamLogSharedLinkCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkCreate(arg)
        case .sharedLinkDisable(let swiftArg):
            let arg = DBXTeamLogSharedLinkDisableType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkDisable(arg)
        case .sharedLinkDownload(let swiftArg):
            let arg = DBXTeamLogSharedLinkDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkDownload(arg)
        case .sharedLinkRemoveExpiry(let swiftArg):
            let arg = DBXTeamLogSharedLinkRemoveExpiryType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkRemoveExpiry(arg)
        case .sharedLinkSettingsAddExpiration(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAddExpirationType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsAddExpiration(arg)
        case .sharedLinkSettingsAddPassword(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAddPasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsAddPassword(arg)
        case .sharedLinkSettingsAllowDownloadDisabled(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadDisabled(arg)
        case .sharedLinkSettingsAllowDownloadEnabled(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadEnabled(arg)
        case .sharedLinkSettingsChangeAudience(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangeAudienceType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsChangeAudience(arg)
        case .sharedLinkSettingsChangeExpiration(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangeExpirationType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsChangeExpiration(arg)
        case .sharedLinkSettingsChangePassword(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsChangePasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsChangePassword(arg)
        case .sharedLinkSettingsRemoveExpiration(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsRemoveExpirationType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsRemoveExpiration(arg)
        case .sharedLinkSettingsRemovePassword(let swiftArg):
            let arg = DBXTeamLogSharedLinkSettingsRemovePasswordType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkSettingsRemovePassword(arg)
        case .sharedLinkShare(let swiftArg):
            let arg = DBXTeamLogSharedLinkShareType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkShare(arg)
        case .sharedLinkView(let swiftArg):
            let arg = DBXTeamLogSharedLinkViewType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedLinkView(arg)
        case .sharedNoteOpened(let swiftArg):
            let arg = DBXTeamLogSharedNoteOpenedType(swift: swiftArg)
            return DBXTeamLogEventTypeSharedNoteOpened(arg)
        case .shmodelDisableDownloads(let swiftArg):
            let arg = DBXTeamLogShmodelDisableDownloadsType(swift: swiftArg)
            return DBXTeamLogEventTypeShmodelDisableDownloads(arg)
        case .shmodelEnableDownloads(let swiftArg):
            let arg = DBXTeamLogShmodelEnableDownloadsType(swift: swiftArg)
            return DBXTeamLogEventTypeShmodelEnableDownloads(arg)
        case .shmodelGroupShare(let swiftArg):
            let arg = DBXTeamLogShmodelGroupShareType(swift: swiftArg)
            return DBXTeamLogEventTypeShmodelGroupShare(arg)
        case .showcaseAccessGranted(let swiftArg):
            let arg = DBXTeamLogShowcaseAccessGrantedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseAccessGranted(arg)
        case .showcaseAddMember(let swiftArg):
            let arg = DBXTeamLogShowcaseAddMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseAddMember(arg)
        case .showcaseArchived(let swiftArg):
            let arg = DBXTeamLogShowcaseArchivedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseArchived(arg)
        case .showcaseCreated(let swiftArg):
            let arg = DBXTeamLogShowcaseCreatedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseCreated(arg)
        case .showcaseDeleteComment(let swiftArg):
            let arg = DBXTeamLogShowcaseDeleteCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseDeleteComment(arg)
        case .showcaseEdited(let swiftArg):
            let arg = DBXTeamLogShowcaseEditedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseEdited(arg)
        case .showcaseEditComment(let swiftArg):
            let arg = DBXTeamLogShowcaseEditCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseEditComment(arg)
        case .showcaseFileAdded(let swiftArg):
            let arg = DBXTeamLogShowcaseFileAddedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseFileAdded(arg)
        case .showcaseFileDownload(let swiftArg):
            let arg = DBXTeamLogShowcaseFileDownloadType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseFileDownload(arg)
        case .showcaseFileRemoved(let swiftArg):
            let arg = DBXTeamLogShowcaseFileRemovedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseFileRemoved(arg)
        case .showcaseFileView(let swiftArg):
            let arg = DBXTeamLogShowcaseFileViewType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseFileView(arg)
        case .showcasePermanentlyDeleted(let swiftArg):
            let arg = DBXTeamLogShowcasePermanentlyDeletedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcasePermanentlyDeleted(arg)
        case .showcasePostComment(let swiftArg):
            let arg = DBXTeamLogShowcasePostCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcasePostComment(arg)
        case .showcaseRemoveMember(let swiftArg):
            let arg = DBXTeamLogShowcaseRemoveMemberType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseRemoveMember(arg)
        case .showcaseRenamed(let swiftArg):
            let arg = DBXTeamLogShowcaseRenamedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseRenamed(arg)
        case .showcaseRequestAccess(let swiftArg):
            let arg = DBXTeamLogShowcaseRequestAccessType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseRequestAccess(arg)
        case .showcaseResolveComment(let swiftArg):
            let arg = DBXTeamLogShowcaseResolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseResolveComment(arg)
        case .showcaseRestored(let swiftArg):
            let arg = DBXTeamLogShowcaseRestoredType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseRestored(arg)
        case .showcaseTrashed(let swiftArg):
            let arg = DBXTeamLogShowcaseTrashedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseTrashed(arg)
        case .showcaseTrashedDeprecated(let swiftArg):
            let arg = DBXTeamLogShowcaseTrashedDeprecatedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseTrashedDeprecated(arg)
        case .showcaseUnresolveComment(let swiftArg):
            let arg = DBXTeamLogShowcaseUnresolveCommentType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseUnresolveComment(arg)
        case .showcaseUntrashed(let swiftArg):
            let arg = DBXTeamLogShowcaseUntrashedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseUntrashed(arg)
        case .showcaseUntrashedDeprecated(let swiftArg):
            let arg = DBXTeamLogShowcaseUntrashedDeprecatedType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseUntrashedDeprecated(arg)
        case .showcaseView(let swiftArg):
            let arg = DBXTeamLogShowcaseViewType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseView(arg)
        case .ssoAddCert(let swiftArg):
            let arg = DBXTeamLogSsoAddCertType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoAddCert(arg)
        case .ssoAddLoginUrl(let swiftArg):
            let arg = DBXTeamLogSsoAddLoginUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoAddLoginUrl(arg)
        case .ssoAddLogoutUrl(let swiftArg):
            let arg = DBXTeamLogSsoAddLogoutUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoAddLogoutUrl(arg)
        case .ssoChangeCert(let swiftArg):
            let arg = DBXTeamLogSsoChangeCertType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoChangeCert(arg)
        case .ssoChangeLoginUrl(let swiftArg):
            let arg = DBXTeamLogSsoChangeLoginUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoChangeLoginUrl(arg)
        case .ssoChangeLogoutUrl(let swiftArg):
            let arg = DBXTeamLogSsoChangeLogoutUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoChangeLogoutUrl(arg)
        case .ssoChangeSamlIdentityMode(let swiftArg):
            let arg = DBXTeamLogSsoChangeSamlIdentityModeType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoChangeSamlIdentityMode(arg)
        case .ssoRemoveCert(let swiftArg):
            let arg = DBXTeamLogSsoRemoveCertType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoRemoveCert(arg)
        case .ssoRemoveLoginUrl(let swiftArg):
            let arg = DBXTeamLogSsoRemoveLoginUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoRemoveLoginUrl(arg)
        case .ssoRemoveLogoutUrl(let swiftArg):
            let arg = DBXTeamLogSsoRemoveLogoutUrlType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoRemoveLogoutUrl(arg)
        case .teamFolderChangeStatus(let swiftArg):
            let arg = DBXTeamLogTeamFolderChangeStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamFolderChangeStatus(arg)
        case .teamFolderCreate(let swiftArg):
            let arg = DBXTeamLogTeamFolderCreateType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamFolderCreate(arg)
        case .teamFolderDowngrade(let swiftArg):
            let arg = DBXTeamLogTeamFolderDowngradeType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamFolderDowngrade(arg)
        case .teamFolderPermanentlyDelete(let swiftArg):
            let arg = DBXTeamLogTeamFolderPermanentlyDeleteType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamFolderPermanentlyDelete(arg)
        case .teamFolderRename(let swiftArg):
            let arg = DBXTeamLogTeamFolderRenameType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamFolderRename(arg)
        case .teamSelectiveSyncSettingsChanged(let swiftArg):
            let arg = DBXTeamLogTeamSelectiveSyncSettingsChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamSelectiveSyncSettingsChanged(arg)
        case .accountCaptureChangePolicy(let swiftArg):
            let arg = DBXTeamLogAccountCaptureChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeAccountCaptureChangePolicy(arg)
        case .adminEmailRemindersChanged(let swiftArg):
            let arg = DBXTeamLogAdminEmailRemindersChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeAdminEmailRemindersChanged(arg)
        case .allowDownloadDisabled(let swiftArg):
            let arg = DBXTeamLogAllowDownloadDisabledType(swift: swiftArg)
            return DBXTeamLogEventTypeAllowDownloadDisabled(arg)
        case .allowDownloadEnabled(let swiftArg):
            let arg = DBXTeamLogAllowDownloadEnabledType(swift: swiftArg)
            return DBXTeamLogEventTypeAllowDownloadEnabled(arg)
        case .appPermissionsChanged(let swiftArg):
            let arg = DBXTeamLogAppPermissionsChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeAppPermissionsChanged(arg)
        case .cameraUploadsPolicyChanged(let swiftArg):
            let arg = DBXTeamLogCameraUploadsPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeCameraUploadsPolicyChanged(arg)
        case .captureTranscriptPolicyChanged(let swiftArg):
            let arg = DBXTeamLogCaptureTranscriptPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeCaptureTranscriptPolicyChanged(arg)
        case .classificationChangePolicy(let swiftArg):
            let arg = DBXTeamLogClassificationChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeClassificationChangePolicy(arg)
        case .computerBackupPolicyChanged(let swiftArg):
            let arg = DBXTeamLogComputerBackupPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeComputerBackupPolicyChanged(arg)
        case .contentAdministrationPolicyChanged(let swiftArg):
            let arg = DBXTeamLogContentAdministrationPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeContentAdministrationPolicyChanged(arg)
        case .dataPlacementRestrictionChangePolicy(let swiftArg):
            let arg = DBXTeamLogDataPlacementRestrictionChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeDataPlacementRestrictionChangePolicy(arg)
        case .dataPlacementRestrictionSatisfyPolicy(let swiftArg):
            let arg = DBXTeamLogDataPlacementRestrictionSatisfyPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeDataPlacementRestrictionSatisfyPolicy(arg)
        case .deviceApprovalsAddException(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsAddExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsAddException(arg)
        case .deviceApprovalsChangeDesktopPolicy(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeDesktopPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsChangeDesktopPolicy(arg)
        case .deviceApprovalsChangeMobilePolicy(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeMobilePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsChangeMobilePolicy(arg)
        case .deviceApprovalsChangeOverageAction(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeOverageActionType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsChangeOverageAction(arg)
        case .deviceApprovalsChangeUnlinkAction(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsChangeUnlinkActionType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsChangeUnlinkAction(arg)
        case .deviceApprovalsRemoveException(let swiftArg):
            let arg = DBXTeamLogDeviceApprovalsRemoveExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeDeviceApprovalsRemoveException(arg)
        case .directoryRestrictionsAddMembers(let swiftArg):
            let arg = DBXTeamLogDirectoryRestrictionsAddMembersType(swift: swiftArg)
            return DBXTeamLogEventTypeDirectoryRestrictionsAddMembers(arg)
        case .directoryRestrictionsRemoveMembers(let swiftArg):
            let arg = DBXTeamLogDirectoryRestrictionsRemoveMembersType(swift: swiftArg)
            return DBXTeamLogEventTypeDirectoryRestrictionsRemoveMembers(arg)
        case .dropboxPasswordsPolicyChanged(let swiftArg):
            let arg = DBXTeamLogDropboxPasswordsPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeDropboxPasswordsPolicyChanged(arg)
        case .emailIngestPolicyChanged(let swiftArg):
            let arg = DBXTeamLogEmailIngestPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeEmailIngestPolicyChanged(arg)
        case .emmAddException(let swiftArg):
            let arg = DBXTeamLogEmmAddExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmAddException(arg)
        case .emmChangePolicy(let swiftArg):
            let arg = DBXTeamLogEmmChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmChangePolicy(arg)
        case .emmRemoveException(let swiftArg):
            let arg = DBXTeamLogEmmRemoveExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeEmmRemoveException(arg)
        case .extendedVersionHistoryChangePolicy(let swiftArg):
            let arg = DBXTeamLogExtendedVersionHistoryChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeExtendedVersionHistoryChangePolicy(arg)
        case .externalDriveBackupPolicyChanged(let swiftArg):
            let arg = DBXTeamLogExternalDriveBackupPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeExternalDriveBackupPolicyChanged(arg)
        case .fileCommentsChangePolicy(let swiftArg):
            let arg = DBXTeamLogFileCommentsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeFileCommentsChangePolicy(arg)
        case .fileLockingPolicyChanged(let swiftArg):
            let arg = DBXTeamLogFileLockingPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFileLockingPolicyChanged(arg)
        case .fileProviderMigrationPolicyChanged(let swiftArg):
            let arg = DBXTeamLogFileProviderMigrationPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFileProviderMigrationPolicyChanged(arg)
        case .fileRequestsChangePolicy(let swiftArg):
            let arg = DBXTeamLogFileRequestsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestsChangePolicy(arg)
        case .fileRequestsEmailsEnabled(let swiftArg):
            let arg = DBXTeamLogFileRequestsEmailsEnabledType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestsEmailsEnabled(arg)
        case .fileRequestsEmailsRestrictedToTeamOnly(let swiftArg):
            let arg = DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType(swift: swiftArg)
            return DBXTeamLogEventTypeFileRequestsEmailsRestrictedToTeamOnly(arg)
        case .fileTransfersPolicyChanged(let swiftArg):
            let arg = DBXTeamLogFileTransfersPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFileTransfersPolicyChanged(arg)
        case .folderLinkRestrictionPolicyChanged(let swiftArg):
            let arg = DBXTeamLogFolderLinkRestrictionPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeFolderLinkRestrictionPolicyChanged(arg)
        case .googleSsoChangePolicy(let swiftArg):
            let arg = DBXTeamLogGoogleSsoChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeGoogleSsoChangePolicy(arg)
        case .groupUserManagementChangePolicy(let swiftArg):
            let arg = DBXTeamLogGroupUserManagementChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeGroupUserManagementChangePolicy(arg)
        case .integrationPolicyChanged(let swiftArg):
            let arg = DBXTeamLogIntegrationPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeIntegrationPolicyChanged(arg)
        case .inviteAcceptanceEmailPolicyChanged(let swiftArg):
            let arg = DBXTeamLogInviteAcceptanceEmailPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeInviteAcceptanceEmailPolicyChanged(arg)
        case .memberRequestsChangePolicy(let swiftArg):
            let arg = DBXTeamLogMemberRequestsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberRequestsChangePolicy(arg)
        case .memberSendInvitePolicyChanged(let swiftArg):
            let arg = DBXTeamLogMemberSendInvitePolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSendInvitePolicyChanged(arg)
        case .memberSpaceLimitsAddException(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsAddExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsAddException(arg)
        case .memberSpaceLimitsChangeCapsTypePolicy(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsChangeCapsTypePolicy(arg)
        case .memberSpaceLimitsChangePolicy(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsChangePolicy(arg)
        case .memberSpaceLimitsRemoveException(let swiftArg):
            let arg = DBXTeamLogMemberSpaceLimitsRemoveExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSpaceLimitsRemoveException(arg)
        case .memberSuggestionsChangePolicy(let swiftArg):
            let arg = DBXTeamLogMemberSuggestionsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeMemberSuggestionsChangePolicy(arg)
        case .microsoftOfficeAddinChangePolicy(let swiftArg):
            let arg = DBXTeamLogMicrosoftOfficeAddinChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeMicrosoftOfficeAddinChangePolicy(arg)
        case .networkControlChangePolicy(let swiftArg):
            let arg = DBXTeamLogNetworkControlChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeNetworkControlChangePolicy(arg)
        case .paperChangeDeploymentPolicy(let swiftArg):
            let arg = DBXTeamLogPaperChangeDeploymentPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePaperChangeDeploymentPolicy(arg)
        case .paperChangeMemberLinkPolicy(let swiftArg):
            let arg = DBXTeamLogPaperChangeMemberLinkPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePaperChangeMemberLinkPolicy(arg)
        case .paperChangeMemberPolicy(let swiftArg):
            let arg = DBXTeamLogPaperChangeMemberPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePaperChangeMemberPolicy(arg)
        case .paperChangePolicy(let swiftArg):
            let arg = DBXTeamLogPaperChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePaperChangePolicy(arg)
        case .paperDefaultFolderPolicyChanged(let swiftArg):
            let arg = DBXTeamLogPaperDefaultFolderPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDefaultFolderPolicyChanged(arg)
        case .paperDesktopPolicyChanged(let swiftArg):
            let arg = DBXTeamLogPaperDesktopPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypePaperDesktopPolicyChanged(arg)
        case .paperEnabledUsersGroupAddition(let swiftArg):
            let arg = DBXTeamLogPaperEnabledUsersGroupAdditionType(swift: swiftArg)
            return DBXTeamLogEventTypePaperEnabledUsersGroupAddition(arg)
        case .paperEnabledUsersGroupRemoval(let swiftArg):
            let arg = DBXTeamLogPaperEnabledUsersGroupRemovalType(swift: swiftArg)
            return DBXTeamLogEventTypePaperEnabledUsersGroupRemoval(arg)
        case .passwordStrengthRequirementsChangePolicy(let swiftArg):
            let arg = DBXTeamLogPasswordStrengthRequirementsChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePasswordStrengthRequirementsChangePolicy(arg)
        case .permanentDeleteChangePolicy(let swiftArg):
            let arg = DBXTeamLogPermanentDeleteChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypePermanentDeleteChangePolicy(arg)
        case .resellerSupportChangePolicy(let swiftArg):
            let arg = DBXTeamLogResellerSupportChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeResellerSupportChangePolicy(arg)
        case .rewindPolicyChanged(let swiftArg):
            let arg = DBXTeamLogRewindPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeRewindPolicyChanged(arg)
        case .sendForSignaturePolicyChanged(let swiftArg):
            let arg = DBXTeamLogSendForSignaturePolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeSendForSignaturePolicyChanged(arg)
        case .sharingChangeFolderJoinPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeFolderJoinPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeFolderJoinPolicy(arg)
        case .sharingChangeLinkAllowChangeExpirationPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeLinkAllowChangeExpirationPolicy(arg)
        case .sharingChangeLinkDefaultExpirationPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeLinkDefaultExpirationPolicy(arg)
        case .sharingChangeLinkEnforcePasswordPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeLinkEnforcePasswordPolicy(arg)
        case .sharingChangeLinkPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeLinkPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeLinkPolicy(arg)
        case .sharingChangeMemberPolicy(let swiftArg):
            let arg = DBXTeamLogSharingChangeMemberPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSharingChangeMemberPolicy(arg)
        case .showcaseChangeDownloadPolicy(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeDownloadPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseChangeDownloadPolicy(arg)
        case .showcaseChangeEnabledPolicy(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeEnabledPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseChangeEnabledPolicy(arg)
        case .showcaseChangeExternalSharingPolicy(let swiftArg):
            let arg = DBXTeamLogShowcaseChangeExternalSharingPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeShowcaseChangeExternalSharingPolicy(arg)
        case .smarterSmartSyncPolicyChanged(let swiftArg):
            let arg = DBXTeamLogSmarterSmartSyncPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeSmarterSmartSyncPolicyChanged(arg)
        case .smartSyncChangePolicy(let swiftArg):
            let arg = DBXTeamLogSmartSyncChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSmartSyncChangePolicy(arg)
        case .smartSyncNotOptOut(let swiftArg):
            let arg = DBXTeamLogSmartSyncNotOptOutType(swift: swiftArg)
            return DBXTeamLogEventTypeSmartSyncNotOptOut(arg)
        case .smartSyncOptOut(let swiftArg):
            let arg = DBXTeamLogSmartSyncOptOutType(swift: swiftArg)
            return DBXTeamLogEventTypeSmartSyncOptOut(arg)
        case .ssoChangePolicy(let swiftArg):
            let arg = DBXTeamLogSsoChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeSsoChangePolicy(arg)
        case .teamBrandingPolicyChanged(let swiftArg):
            let arg = DBXTeamLogTeamBrandingPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamBrandingPolicyChanged(arg)
        case .teamExtensionsPolicyChanged(let swiftArg):
            let arg = DBXTeamLogTeamExtensionsPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamExtensionsPolicyChanged(arg)
        case .teamSelectiveSyncPolicyChanged(let swiftArg):
            let arg = DBXTeamLogTeamSelectiveSyncPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamSelectiveSyncPolicyChanged(arg)
        case .teamSharingWhitelistSubjectsChanged(let swiftArg):
            let arg = DBXTeamLogTeamSharingWhitelistSubjectsChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamSharingWhitelistSubjectsChanged(arg)
        case .tfaAddException(let swiftArg):
            let arg = DBXTeamLogTfaAddExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaAddException(arg)
        case .tfaChangePolicy(let swiftArg):
            let arg = DBXTeamLogTfaChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaChangePolicy(arg)
        case .tfaRemoveException(let swiftArg):
            let arg = DBXTeamLogTfaRemoveExceptionType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaRemoveException(arg)
        case .twoAccountChangePolicy(let swiftArg):
            let arg = DBXTeamLogTwoAccountChangePolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeTwoAccountChangePolicy(arg)
        case .viewerInfoPolicyChanged(let swiftArg):
            let arg = DBXTeamLogViewerInfoPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeViewerInfoPolicyChanged(arg)
        case .watermarkingPolicyChanged(let swiftArg):
            let arg = DBXTeamLogWatermarkingPolicyChangedType(swift: swiftArg)
            return DBXTeamLogEventTypeWatermarkingPolicyChanged(arg)
        case .webSessionsChangeActiveSessionLimit(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeActiveSessionLimitType(swift: swiftArg)
            return DBXTeamLogEventTypeWebSessionsChangeActiveSessionLimit(arg)
        case .webSessionsChangeFixedLengthPolicy(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeFixedLengthPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeWebSessionsChangeFixedLengthPolicy(arg)
        case .webSessionsChangeIdleLengthPolicy(let swiftArg):
            let arg = DBXTeamLogWebSessionsChangeIdleLengthPolicyType(swift: swiftArg)
            return DBXTeamLogEventTypeWebSessionsChangeIdleLengthPolicy(arg)
        case .dataResidencyMigrationRequestSuccessful(let swiftArg):
            let arg = DBXTeamLogDataResidencyMigrationRequestSuccessfulType(swift: swiftArg)
            return DBXTeamLogEventTypeDataResidencyMigrationRequestSuccessful(arg)
        case .dataResidencyMigrationRequestUnsuccessful(let swiftArg):
            let arg = DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType(swift: swiftArg)
            return DBXTeamLogEventTypeDataResidencyMigrationRequestUnsuccessful(arg)
        case .teamMergeFrom(let swiftArg):
            let arg = DBXTeamLogTeamMergeFromType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeFrom(arg)
        case .teamMergeTo(let swiftArg):
            let arg = DBXTeamLogTeamMergeToType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeTo(arg)
        case .teamProfileAddBackground(let swiftArg):
            let arg = DBXTeamLogTeamProfileAddBackgroundType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileAddBackground(arg)
        case .teamProfileAddLogo(let swiftArg):
            let arg = DBXTeamLogTeamProfileAddLogoType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileAddLogo(arg)
        case .teamProfileChangeBackground(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeBackgroundType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileChangeBackground(arg)
        case .teamProfileChangeDefaultLanguage(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeDefaultLanguageType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileChangeDefaultLanguage(arg)
        case .teamProfileChangeLogo(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeLogoType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileChangeLogo(arg)
        case .teamProfileChangeName(let swiftArg):
            let arg = DBXTeamLogTeamProfileChangeNameType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileChangeName(arg)
        case .teamProfileRemoveBackground(let swiftArg):
            let arg = DBXTeamLogTeamProfileRemoveBackgroundType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileRemoveBackground(arg)
        case .teamProfileRemoveLogo(let swiftArg):
            let arg = DBXTeamLogTeamProfileRemoveLogoType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamProfileRemoveLogo(arg)
        case .tfaAddBackupPhone(let swiftArg):
            let arg = DBXTeamLogTfaAddBackupPhoneType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaAddBackupPhone(arg)
        case .tfaAddSecurityKey(let swiftArg):
            let arg = DBXTeamLogTfaAddSecurityKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaAddSecurityKey(arg)
        case .tfaChangeBackupPhone(let swiftArg):
            let arg = DBXTeamLogTfaChangeBackupPhoneType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaChangeBackupPhone(arg)
        case .tfaChangeStatus(let swiftArg):
            let arg = DBXTeamLogTfaChangeStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaChangeStatus(arg)
        case .tfaRemoveBackupPhone(let swiftArg):
            let arg = DBXTeamLogTfaRemoveBackupPhoneType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaRemoveBackupPhone(arg)
        case .tfaRemoveSecurityKey(let swiftArg):
            let arg = DBXTeamLogTfaRemoveSecurityKeyType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaRemoveSecurityKey(arg)
        case .tfaReset(let swiftArg):
            let arg = DBXTeamLogTfaResetType(swift: swiftArg)
            return DBXTeamLogEventTypeTfaReset(arg)
        case .changedEnterpriseAdminRole(let swiftArg):
            let arg = DBXTeamLogChangedEnterpriseAdminRoleType(swift: swiftArg)
            return DBXTeamLogEventTypeChangedEnterpriseAdminRole(arg)
        case .changedEnterpriseConnectedTeamStatus(let swiftArg):
            let arg = DBXTeamLogChangedEnterpriseConnectedTeamStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeChangedEnterpriseConnectedTeamStatus(arg)
        case .endedEnterpriseAdminSession(let swiftArg):
            let arg = DBXTeamLogEndedEnterpriseAdminSessionType(swift: swiftArg)
            return DBXTeamLogEventTypeEndedEnterpriseAdminSession(arg)
        case .endedEnterpriseAdminSessionDeprecated(let swiftArg):
            let arg = DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType(swift: swiftArg)
            return DBXTeamLogEventTypeEndedEnterpriseAdminSessionDeprecated(arg)
        case .enterpriseSettingsLocking(let swiftArg):
            let arg = DBXTeamLogEnterpriseSettingsLockingType(swift: swiftArg)
            return DBXTeamLogEventTypeEnterpriseSettingsLocking(arg)
        case .guestAdminChangeStatus(let swiftArg):
            let arg = DBXTeamLogGuestAdminChangeStatusType(swift: swiftArg)
            return DBXTeamLogEventTypeGuestAdminChangeStatus(arg)
        case .startedEnterpriseAdminSession(let swiftArg):
            let arg = DBXTeamLogStartedEnterpriseAdminSessionType(swift: swiftArg)
            return DBXTeamLogEventTypeStartedEnterpriseAdminSession(arg)
        case .teamMergeRequestAccepted(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestAccepted(arg)
        case .teamMergeRequestAcceptedShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToPrimaryTeam(arg)
        case .teamMergeRequestAcceptedShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToSecondaryTeam(arg)
        case .teamMergeRequestAutoCanceled(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestAutoCanceledType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestAutoCanceled(arg)
        case .teamMergeRequestCanceled(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestCanceled(arg)
        case .teamMergeRequestCanceledShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestCanceledShownToPrimaryTeam(arg)
        case .teamMergeRequestCanceledShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestCanceledShownToSecondaryTeam(arg)
        case .teamMergeRequestExpired(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestExpired(arg)
        case .teamMergeRequestExpiredShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestExpiredShownToPrimaryTeam(arg)
        case .teamMergeRequestExpiredShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestExpiredShownToSecondaryTeam(arg)
        case .teamMergeRequestRejectedShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestRejectedShownToPrimaryTeam(arg)
        case .teamMergeRequestRejectedShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestRejectedShownToSecondaryTeam(arg)
        case .teamMergeRequestReminder(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestReminder(arg)
        case .teamMergeRequestReminderShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestReminderShownToPrimaryTeam(arg)
        case .teamMergeRequestReminderShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestReminderShownToSecondaryTeam(arg)
        case .teamMergeRequestRevoked(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestRevokedType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestRevoked(arg)
        case .teamMergeRequestSentShownToPrimaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestSentShownToPrimaryTeam(arg)
        case .teamMergeRequestSentShownToSecondaryTeam(let swiftArg):
            let arg = DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType(swift: swiftArg)
            return DBXTeamLogEventTypeTeamMergeRequestSentShownToSecondaryTeam(arg)
        case .other:
            return DBXTeamLogEventTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminAlertingAlertStateChanged: DBXTeamLogEventTypeAdminAlertingAlertStateChanged? {
        self as? DBXTeamLogEventTypeAdminAlertingAlertStateChanged
    }

    @objc
    public var asAdminAlertingChangedAlertConfig: DBXTeamLogEventTypeAdminAlertingChangedAlertConfig? {
        self as? DBXTeamLogEventTypeAdminAlertingChangedAlertConfig
    }

    @objc
    public var asAdminAlertingTriggeredAlert: DBXTeamLogEventTypeAdminAlertingTriggeredAlert? {
        self as? DBXTeamLogEventTypeAdminAlertingTriggeredAlert
    }

    @objc
    public var asRansomwareRestoreProcessCompleted: DBXTeamLogEventTypeRansomwareRestoreProcessCompleted? {
        self as? DBXTeamLogEventTypeRansomwareRestoreProcessCompleted
    }

    @objc
    public var asRansomwareRestoreProcessStarted: DBXTeamLogEventTypeRansomwareRestoreProcessStarted? {
        self as? DBXTeamLogEventTypeRansomwareRestoreProcessStarted
    }

    @objc
    public var asAppBlockedByPermissions: DBXTeamLogEventTypeAppBlockedByPermissions? {
        self as? DBXTeamLogEventTypeAppBlockedByPermissions
    }

    @objc
    public var asAppLinkTeam: DBXTeamLogEventTypeAppLinkTeam? {
        self as? DBXTeamLogEventTypeAppLinkTeam
    }

    @objc
    public var asAppLinkUser: DBXTeamLogEventTypeAppLinkUser? {
        self as? DBXTeamLogEventTypeAppLinkUser
    }

    @objc
    public var asAppUnlinkTeam: DBXTeamLogEventTypeAppUnlinkTeam? {
        self as? DBXTeamLogEventTypeAppUnlinkTeam
    }

    @objc
    public var asAppUnlinkUser: DBXTeamLogEventTypeAppUnlinkUser? {
        self as? DBXTeamLogEventTypeAppUnlinkUser
    }

    @objc
    public var asIntegrationConnected: DBXTeamLogEventTypeIntegrationConnected? {
        self as? DBXTeamLogEventTypeIntegrationConnected
    }

    @objc
    public var asIntegrationDisconnected: DBXTeamLogEventTypeIntegrationDisconnected? {
        self as? DBXTeamLogEventTypeIntegrationDisconnected
    }

    @objc
    public var asFileAddComment: DBXTeamLogEventTypeFileAddComment? {
        self as? DBXTeamLogEventTypeFileAddComment
    }

    @objc
    public var asFileChangeCommentSubscription: DBXTeamLogEventTypeFileChangeCommentSubscription? {
        self as? DBXTeamLogEventTypeFileChangeCommentSubscription
    }

    @objc
    public var asFileDeleteComment: DBXTeamLogEventTypeFileDeleteComment? {
        self as? DBXTeamLogEventTypeFileDeleteComment
    }

    @objc
    public var asFileEditComment: DBXTeamLogEventTypeFileEditComment? {
        self as? DBXTeamLogEventTypeFileEditComment
    }

    @objc
    public var asFileLikeComment: DBXTeamLogEventTypeFileLikeComment? {
        self as? DBXTeamLogEventTypeFileLikeComment
    }

    @objc
    public var asFileResolveComment: DBXTeamLogEventTypeFileResolveComment? {
        self as? DBXTeamLogEventTypeFileResolveComment
    }

    @objc
    public var asFileUnlikeComment: DBXTeamLogEventTypeFileUnlikeComment? {
        self as? DBXTeamLogEventTypeFileUnlikeComment
    }

    @objc
    public var asFileUnresolveComment: DBXTeamLogEventTypeFileUnresolveComment? {
        self as? DBXTeamLogEventTypeFileUnresolveComment
    }

    @objc
    public var asGovernancePolicyAddFolders: DBXTeamLogEventTypeGovernancePolicyAddFolders? {
        self as? DBXTeamLogEventTypeGovernancePolicyAddFolders
    }

    @objc
    public var asGovernancePolicyAddFolderFailed: DBXTeamLogEventTypeGovernancePolicyAddFolderFailed? {
        self as? DBXTeamLogEventTypeGovernancePolicyAddFolderFailed
    }

    @objc
    public var asGovernancePolicyContentDisposed: DBXTeamLogEventTypeGovernancePolicyContentDisposed? {
        self as? DBXTeamLogEventTypeGovernancePolicyContentDisposed
    }

    @objc
    public var asGovernancePolicyCreate: DBXTeamLogEventTypeGovernancePolicyCreate? {
        self as? DBXTeamLogEventTypeGovernancePolicyCreate
    }

    @objc
    public var asGovernancePolicyDelete: DBXTeamLogEventTypeGovernancePolicyDelete? {
        self as? DBXTeamLogEventTypeGovernancePolicyDelete
    }

    @objc
    public var asGovernancePolicyEditDetails: DBXTeamLogEventTypeGovernancePolicyEditDetails? {
        self as? DBXTeamLogEventTypeGovernancePolicyEditDetails
    }

    @objc
    public var asGovernancePolicyEditDuration: DBXTeamLogEventTypeGovernancePolicyEditDuration? {
        self as? DBXTeamLogEventTypeGovernancePolicyEditDuration
    }

    @objc
    public var asGovernancePolicyExportCreated: DBXTeamLogEventTypeGovernancePolicyExportCreated? {
        self as? DBXTeamLogEventTypeGovernancePolicyExportCreated
    }

    @objc
    public var asGovernancePolicyExportRemoved: DBXTeamLogEventTypeGovernancePolicyExportRemoved? {
        self as? DBXTeamLogEventTypeGovernancePolicyExportRemoved
    }

    @objc
    public var asGovernancePolicyRemoveFolders: DBXTeamLogEventTypeGovernancePolicyRemoveFolders? {
        self as? DBXTeamLogEventTypeGovernancePolicyRemoveFolders
    }

    @objc
    public var asGovernancePolicyReportCreated: DBXTeamLogEventTypeGovernancePolicyReportCreated? {
        self as? DBXTeamLogEventTypeGovernancePolicyReportCreated
    }

    @objc
    public var asGovernancePolicyZipPartDownloaded: DBXTeamLogEventTypeGovernancePolicyZipPartDownloaded? {
        self as? DBXTeamLogEventTypeGovernancePolicyZipPartDownloaded
    }

    @objc
    public var asLegalHoldsActivateAHold: DBXTeamLogEventTypeLegalHoldsActivateAHold? {
        self as? DBXTeamLogEventTypeLegalHoldsActivateAHold
    }

    @objc
    public var asLegalHoldsAddMembers: DBXTeamLogEventTypeLegalHoldsAddMembers? {
        self as? DBXTeamLogEventTypeLegalHoldsAddMembers
    }

    @objc
    public var asLegalHoldsChangeHoldDetails: DBXTeamLogEventTypeLegalHoldsChangeHoldDetails? {
        self as? DBXTeamLogEventTypeLegalHoldsChangeHoldDetails
    }

    @objc
    public var asLegalHoldsChangeHoldName: DBXTeamLogEventTypeLegalHoldsChangeHoldName? {
        self as? DBXTeamLogEventTypeLegalHoldsChangeHoldName
    }

    @objc
    public var asLegalHoldsExportAHold: DBXTeamLogEventTypeLegalHoldsExportAHold? {
        self as? DBXTeamLogEventTypeLegalHoldsExportAHold
    }

    @objc
    public var asLegalHoldsExportCancelled: DBXTeamLogEventTypeLegalHoldsExportCancelled? {
        self as? DBXTeamLogEventTypeLegalHoldsExportCancelled
    }

    @objc
    public var asLegalHoldsExportDownloaded: DBXTeamLogEventTypeLegalHoldsExportDownloaded? {
        self as? DBXTeamLogEventTypeLegalHoldsExportDownloaded
    }

    @objc
    public var asLegalHoldsExportRemoved: DBXTeamLogEventTypeLegalHoldsExportRemoved? {
        self as? DBXTeamLogEventTypeLegalHoldsExportRemoved
    }

    @objc
    public var asLegalHoldsReleaseAHold: DBXTeamLogEventTypeLegalHoldsReleaseAHold? {
        self as? DBXTeamLogEventTypeLegalHoldsReleaseAHold
    }

    @objc
    public var asLegalHoldsRemoveMembers: DBXTeamLogEventTypeLegalHoldsRemoveMembers? {
        self as? DBXTeamLogEventTypeLegalHoldsRemoveMembers
    }

    @objc
    public var asLegalHoldsReportAHold: DBXTeamLogEventTypeLegalHoldsReportAHold? {
        self as? DBXTeamLogEventTypeLegalHoldsReportAHold
    }

    @objc
    public var asDeviceChangeIpDesktop: DBXTeamLogEventTypeDeviceChangeIpDesktop? {
        self as? DBXTeamLogEventTypeDeviceChangeIpDesktop
    }

    @objc
    public var asDeviceChangeIpMobile: DBXTeamLogEventTypeDeviceChangeIpMobile? {
        self as? DBXTeamLogEventTypeDeviceChangeIpMobile
    }

    @objc
    public var asDeviceChangeIpWeb: DBXTeamLogEventTypeDeviceChangeIpWeb? {
        self as? DBXTeamLogEventTypeDeviceChangeIpWeb
    }

    @objc
    public var asDeviceDeleteOnUnlinkFail: DBXTeamLogEventTypeDeviceDeleteOnUnlinkFail? {
        self as? DBXTeamLogEventTypeDeviceDeleteOnUnlinkFail
    }

    @objc
    public var asDeviceDeleteOnUnlinkSuccess: DBXTeamLogEventTypeDeviceDeleteOnUnlinkSuccess? {
        self as? DBXTeamLogEventTypeDeviceDeleteOnUnlinkSuccess
    }

    @objc
    public var asDeviceLinkFail: DBXTeamLogEventTypeDeviceLinkFail? {
        self as? DBXTeamLogEventTypeDeviceLinkFail
    }

    @objc
    public var asDeviceLinkSuccess: DBXTeamLogEventTypeDeviceLinkSuccess? {
        self as? DBXTeamLogEventTypeDeviceLinkSuccess
    }

    @objc
    public var asDeviceManagementDisabled: DBXTeamLogEventTypeDeviceManagementDisabled? {
        self as? DBXTeamLogEventTypeDeviceManagementDisabled
    }

    @objc
    public var asDeviceManagementEnabled: DBXTeamLogEventTypeDeviceManagementEnabled? {
        self as? DBXTeamLogEventTypeDeviceManagementEnabled
    }

    @objc
    public var asDeviceSyncBackupStatusChanged: DBXTeamLogEventTypeDeviceSyncBackupStatusChanged? {
        self as? DBXTeamLogEventTypeDeviceSyncBackupStatusChanged
    }

    @objc
    public var asDeviceUnlink: DBXTeamLogEventTypeDeviceUnlink? {
        self as? DBXTeamLogEventTypeDeviceUnlink
    }

    @objc
    public var asDropboxPasswordsExported: DBXTeamLogEventTypeDropboxPasswordsExported? {
        self as? DBXTeamLogEventTypeDropboxPasswordsExported
    }

    @objc
    public var asDropboxPasswordsNewDeviceEnrolled: DBXTeamLogEventTypeDropboxPasswordsNewDeviceEnrolled? {
        self as? DBXTeamLogEventTypeDropboxPasswordsNewDeviceEnrolled
    }

    @objc
    public var asEmmRefreshAuthToken: DBXTeamLogEventTypeEmmRefreshAuthToken? {
        self as? DBXTeamLogEventTypeEmmRefreshAuthToken
    }

    @objc
    public var asExternalDriveBackupEligibilityStatusChecked: DBXTeamLogEventTypeExternalDriveBackupEligibilityStatusChecked? {
        self as? DBXTeamLogEventTypeExternalDriveBackupEligibilityStatusChecked
    }

    @objc
    public var asExternalDriveBackupStatusChanged: DBXTeamLogEventTypeExternalDriveBackupStatusChanged? {
        self as? DBXTeamLogEventTypeExternalDriveBackupStatusChanged
    }

    @objc
    public var asAccountCaptureChangeAvailability: DBXTeamLogEventTypeAccountCaptureChangeAvailability? {
        self as? DBXTeamLogEventTypeAccountCaptureChangeAvailability
    }

    @objc
    public var asAccountCaptureMigrateAccount: DBXTeamLogEventTypeAccountCaptureMigrateAccount? {
        self as? DBXTeamLogEventTypeAccountCaptureMigrateAccount
    }

    @objc
    public var asAccountCaptureNotificationEmailsSent: DBXTeamLogEventTypeAccountCaptureNotificationEmailsSent? {
        self as? DBXTeamLogEventTypeAccountCaptureNotificationEmailsSent
    }

    @objc
    public var asAccountCaptureRelinquishAccount: DBXTeamLogEventTypeAccountCaptureRelinquishAccount? {
        self as? DBXTeamLogEventTypeAccountCaptureRelinquishAccount
    }

    @objc
    public var asDisabledDomainInvites: DBXTeamLogEventTypeDisabledDomainInvites? {
        self as? DBXTeamLogEventTypeDisabledDomainInvites
    }

    @objc
    public var asDomainInvitesApproveRequestToJoinTeam: DBXTeamLogEventTypeDomainInvitesApproveRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeDomainInvitesApproveRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesDeclineRequestToJoinTeam: DBXTeamLogEventTypeDomainInvitesDeclineRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeDomainInvitesDeclineRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesEmailExistingUsers: DBXTeamLogEventTypeDomainInvitesEmailExistingUsers? {
        self as? DBXTeamLogEventTypeDomainInvitesEmailExistingUsers
    }

    @objc
    public var asDomainInvitesRequestToJoinTeam: DBXTeamLogEventTypeDomainInvitesRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeDomainInvitesRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToNo: DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToNo? {
        self as? DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToNo
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToYes: DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToYes? {
        self as? DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToYes
    }

    @objc
    public var asDomainVerificationAddDomainFail: DBXTeamLogEventTypeDomainVerificationAddDomainFail? {
        self as? DBXTeamLogEventTypeDomainVerificationAddDomainFail
    }

    @objc
    public var asDomainVerificationAddDomainSuccess: DBXTeamLogEventTypeDomainVerificationAddDomainSuccess? {
        self as? DBXTeamLogEventTypeDomainVerificationAddDomainSuccess
    }

    @objc
    public var asDomainVerificationRemoveDomain: DBXTeamLogEventTypeDomainVerificationRemoveDomain? {
        self as? DBXTeamLogEventTypeDomainVerificationRemoveDomain
    }

    @objc
    public var asEnabledDomainInvites: DBXTeamLogEventTypeEnabledDomainInvites? {
        self as? DBXTeamLogEventTypeEnabledDomainInvites
    }

    @objc
    public var asTeamEncryptionKeyCancelKeyDeletion: DBXTeamLogEventTypeTeamEncryptionKeyCancelKeyDeletion? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyCancelKeyDeletion
    }

    @objc
    public var asTeamEncryptionKeyCreateKey: DBXTeamLogEventTypeTeamEncryptionKeyCreateKey? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyCreateKey
    }

    @objc
    public var asTeamEncryptionKeyDeleteKey: DBXTeamLogEventTypeTeamEncryptionKeyDeleteKey? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyDeleteKey
    }

    @objc
    public var asTeamEncryptionKeyDisableKey: DBXTeamLogEventTypeTeamEncryptionKeyDisableKey? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyDisableKey
    }

    @objc
    public var asTeamEncryptionKeyEnableKey: DBXTeamLogEventTypeTeamEncryptionKeyEnableKey? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyEnableKey
    }

    @objc
    public var asTeamEncryptionKeyRotateKey: DBXTeamLogEventTypeTeamEncryptionKeyRotateKey? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyRotateKey
    }

    @objc
    public var asTeamEncryptionKeyScheduleKeyDeletion: DBXTeamLogEventTypeTeamEncryptionKeyScheduleKeyDeletion? {
        self as? DBXTeamLogEventTypeTeamEncryptionKeyScheduleKeyDeletion
    }

    @objc
    public var asApplyNamingConvention: DBXTeamLogEventTypeApplyNamingConvention? {
        self as? DBXTeamLogEventTypeApplyNamingConvention
    }

    @objc
    public var asCreateFolder: DBXTeamLogEventTypeCreateFolder? {
        self as? DBXTeamLogEventTypeCreateFolder
    }

    @objc
    public var asFileAdd: DBXTeamLogEventTypeFileAdd? {
        self as? DBXTeamLogEventTypeFileAdd
    }

    @objc
    public var asFileAddFromAutomation: DBXTeamLogEventTypeFileAddFromAutomation? {
        self as? DBXTeamLogEventTypeFileAddFromAutomation
    }

    @objc
    public var asFileCopy: DBXTeamLogEventTypeFileCopy? {
        self as? DBXTeamLogEventTypeFileCopy
    }

    @objc
    public var asFileDelete: DBXTeamLogEventTypeFileDelete? {
        self as? DBXTeamLogEventTypeFileDelete
    }

    @objc
    public var asFileDownload: DBXTeamLogEventTypeFileDownload? {
        self as? DBXTeamLogEventTypeFileDownload
    }

    @objc
    public var asFileEdit: DBXTeamLogEventTypeFileEdit? {
        self as? DBXTeamLogEventTypeFileEdit
    }

    @objc
    public var asFileGetCopyReference: DBXTeamLogEventTypeFileGetCopyReference? {
        self as? DBXTeamLogEventTypeFileGetCopyReference
    }

    @objc
    public var asFileLockingLockStatusChanged: DBXTeamLogEventTypeFileLockingLockStatusChanged? {
        self as? DBXTeamLogEventTypeFileLockingLockStatusChanged
    }

    @objc
    public var asFileMove: DBXTeamLogEventTypeFileMove? {
        self as? DBXTeamLogEventTypeFileMove
    }

    @objc
    public var asFilePermanentlyDelete: DBXTeamLogEventTypeFilePermanentlyDelete? {
        self as? DBXTeamLogEventTypeFilePermanentlyDelete
    }

    @objc
    public var asFilePreview: DBXTeamLogEventTypeFilePreview? {
        self as? DBXTeamLogEventTypeFilePreview
    }

    @objc
    public var asFileRename: DBXTeamLogEventTypeFileRename? {
        self as? DBXTeamLogEventTypeFileRename
    }

    @objc
    public var asFileRestore: DBXTeamLogEventTypeFileRestore? {
        self as? DBXTeamLogEventTypeFileRestore
    }

    @objc
    public var asFileRevert: DBXTeamLogEventTypeFileRevert? {
        self as? DBXTeamLogEventTypeFileRevert
    }

    @objc
    public var asFileRollbackChanges: DBXTeamLogEventTypeFileRollbackChanges? {
        self as? DBXTeamLogEventTypeFileRollbackChanges
    }

    @objc
    public var asFileSaveCopyReference: DBXTeamLogEventTypeFileSaveCopyReference? {
        self as? DBXTeamLogEventTypeFileSaveCopyReference
    }

    @objc
    public var asFolderOverviewDescriptionChanged: DBXTeamLogEventTypeFolderOverviewDescriptionChanged? {
        self as? DBXTeamLogEventTypeFolderOverviewDescriptionChanged
    }

    @objc
    public var asFolderOverviewItemPinned: DBXTeamLogEventTypeFolderOverviewItemPinned? {
        self as? DBXTeamLogEventTypeFolderOverviewItemPinned
    }

    @objc
    public var asFolderOverviewItemUnpinned: DBXTeamLogEventTypeFolderOverviewItemUnpinned? {
        self as? DBXTeamLogEventTypeFolderOverviewItemUnpinned
    }

    @objc
    public var asObjectLabelAdded: DBXTeamLogEventTypeObjectLabelAdded? {
        self as? DBXTeamLogEventTypeObjectLabelAdded
    }

    @objc
    public var asObjectLabelRemoved: DBXTeamLogEventTypeObjectLabelRemoved? {
        self as? DBXTeamLogEventTypeObjectLabelRemoved
    }

    @objc
    public var asObjectLabelUpdatedValue: DBXTeamLogEventTypeObjectLabelUpdatedValue? {
        self as? DBXTeamLogEventTypeObjectLabelUpdatedValue
    }

    @objc
    public var asOrganizeFolderWithTidy: DBXTeamLogEventTypeOrganizeFolderWithTidy? {
        self as? DBXTeamLogEventTypeOrganizeFolderWithTidy
    }

    @objc
    public var asReplayFileDelete: DBXTeamLogEventTypeReplayFileDelete? {
        self as? DBXTeamLogEventTypeReplayFileDelete
    }

    @objc
    public var asRewindFolder: DBXTeamLogEventTypeRewindFolder? {
        self as? DBXTeamLogEventTypeRewindFolder
    }

    @objc
    public var asUndoNamingConvention: DBXTeamLogEventTypeUndoNamingConvention? {
        self as? DBXTeamLogEventTypeUndoNamingConvention
    }

    @objc
    public var asUndoOrganizeFolderWithTidy: DBXTeamLogEventTypeUndoOrganizeFolderWithTidy? {
        self as? DBXTeamLogEventTypeUndoOrganizeFolderWithTidy
    }

    @objc
    public var asUserTagsAdded: DBXTeamLogEventTypeUserTagsAdded? {
        self as? DBXTeamLogEventTypeUserTagsAdded
    }

    @objc
    public var asUserTagsRemoved: DBXTeamLogEventTypeUserTagsRemoved? {
        self as? DBXTeamLogEventTypeUserTagsRemoved
    }

    @objc
    public var asEmailIngestReceiveFile: DBXTeamLogEventTypeEmailIngestReceiveFile? {
        self as? DBXTeamLogEventTypeEmailIngestReceiveFile
    }

    @objc
    public var asFileRequestChange: DBXTeamLogEventTypeFileRequestChange? {
        self as? DBXTeamLogEventTypeFileRequestChange
    }

    @objc
    public var asFileRequestClose: DBXTeamLogEventTypeFileRequestClose? {
        self as? DBXTeamLogEventTypeFileRequestClose
    }

    @objc
    public var asFileRequestCreate: DBXTeamLogEventTypeFileRequestCreate? {
        self as? DBXTeamLogEventTypeFileRequestCreate
    }

    @objc
    public var asFileRequestDelete: DBXTeamLogEventTypeFileRequestDelete? {
        self as? DBXTeamLogEventTypeFileRequestDelete
    }

    @objc
    public var asFileRequestReceiveFile: DBXTeamLogEventTypeFileRequestReceiveFile? {
        self as? DBXTeamLogEventTypeFileRequestReceiveFile
    }

    @objc
    public var asGroupAddExternalId: DBXTeamLogEventTypeGroupAddExternalId? {
        self as? DBXTeamLogEventTypeGroupAddExternalId
    }

    @objc
    public var asGroupAddMember: DBXTeamLogEventTypeGroupAddMember? {
        self as? DBXTeamLogEventTypeGroupAddMember
    }

    @objc
    public var asGroupChangeExternalId: DBXTeamLogEventTypeGroupChangeExternalId? {
        self as? DBXTeamLogEventTypeGroupChangeExternalId
    }

    @objc
    public var asGroupChangeManagementType: DBXTeamLogEventTypeGroupChangeManagementType? {
        self as? DBXTeamLogEventTypeGroupChangeManagementType
    }

    @objc
    public var asGroupChangeMemberRole: DBXTeamLogEventTypeGroupChangeMemberRole? {
        self as? DBXTeamLogEventTypeGroupChangeMemberRole
    }

    @objc
    public var asGroupCreate: DBXTeamLogEventTypeGroupCreate? {
        self as? DBXTeamLogEventTypeGroupCreate
    }

    @objc
    public var asGroupDelete: DBXTeamLogEventTypeGroupDelete? {
        self as? DBXTeamLogEventTypeGroupDelete
    }

    @objc
    public var asGroupDescriptionUpdated: DBXTeamLogEventTypeGroupDescriptionUpdated? {
        self as? DBXTeamLogEventTypeGroupDescriptionUpdated
    }

    @objc
    public var asGroupJoinPolicyUpdated: DBXTeamLogEventTypeGroupJoinPolicyUpdated? {
        self as? DBXTeamLogEventTypeGroupJoinPolicyUpdated
    }

    @objc
    public var asGroupMoved: DBXTeamLogEventTypeGroupMoved? {
        self as? DBXTeamLogEventTypeGroupMoved
    }

    @objc
    public var asGroupRemoveExternalId: DBXTeamLogEventTypeGroupRemoveExternalId? {
        self as? DBXTeamLogEventTypeGroupRemoveExternalId
    }

    @objc
    public var asGroupRemoveMember: DBXTeamLogEventTypeGroupRemoveMember? {
        self as? DBXTeamLogEventTypeGroupRemoveMember
    }

    @objc
    public var asGroupRename: DBXTeamLogEventTypeGroupRename? {
        self as? DBXTeamLogEventTypeGroupRename
    }

    @objc
    public var asAccountLockOrUnlocked: DBXTeamLogEventTypeAccountLockOrUnlocked? {
        self as? DBXTeamLogEventTypeAccountLockOrUnlocked
    }

    @objc
    public var asEmmError: DBXTeamLogEventTypeEmmError? {
        self as? DBXTeamLogEventTypeEmmError
    }

    @objc
    public var asGuestAdminSignedInViaTrustedTeams: DBXTeamLogEventTypeGuestAdminSignedInViaTrustedTeams? {
        self as? DBXTeamLogEventTypeGuestAdminSignedInViaTrustedTeams
    }

    @objc
    public var asGuestAdminSignedOutViaTrustedTeams: DBXTeamLogEventTypeGuestAdminSignedOutViaTrustedTeams? {
        self as? DBXTeamLogEventTypeGuestAdminSignedOutViaTrustedTeams
    }

    @objc
    public var asLoginFail: DBXTeamLogEventTypeLoginFail? {
        self as? DBXTeamLogEventTypeLoginFail
    }

    @objc
    public var asLoginSuccess: DBXTeamLogEventTypeLoginSuccess? {
        self as? DBXTeamLogEventTypeLoginSuccess
    }

    @objc
    public var asLogout: DBXTeamLogEventTypeLogout? {
        self as? DBXTeamLogEventTypeLogout
    }

    @objc
    public var asResellerSupportSessionEnd: DBXTeamLogEventTypeResellerSupportSessionEnd? {
        self as? DBXTeamLogEventTypeResellerSupportSessionEnd
    }

    @objc
    public var asResellerSupportSessionStart: DBXTeamLogEventTypeResellerSupportSessionStart? {
        self as? DBXTeamLogEventTypeResellerSupportSessionStart
    }

    @objc
    public var asSignInAsSessionEnd: DBXTeamLogEventTypeSignInAsSessionEnd? {
        self as? DBXTeamLogEventTypeSignInAsSessionEnd
    }

    @objc
    public var asSignInAsSessionStart: DBXTeamLogEventTypeSignInAsSessionStart? {
        self as? DBXTeamLogEventTypeSignInAsSessionStart
    }

    @objc
    public var asSsoError: DBXTeamLogEventTypeSsoError? {
        self as? DBXTeamLogEventTypeSsoError
    }

    @objc
    public var asBackupAdminInvitationSent: DBXTeamLogEventTypeBackupAdminInvitationSent? {
        self as? DBXTeamLogEventTypeBackupAdminInvitationSent
    }

    @objc
    public var asBackupInvitationOpened: DBXTeamLogEventTypeBackupInvitationOpened? {
        self as? DBXTeamLogEventTypeBackupInvitationOpened
    }

    @objc
    public var asCreateTeamInviteLink: DBXTeamLogEventTypeCreateTeamInviteLink? {
        self as? DBXTeamLogEventTypeCreateTeamInviteLink
    }

    @objc
    public var asDeleteTeamInviteLink: DBXTeamLogEventTypeDeleteTeamInviteLink? {
        self as? DBXTeamLogEventTypeDeleteTeamInviteLink
    }

    @objc
    public var asMemberAddExternalId: DBXTeamLogEventTypeMemberAddExternalId? {
        self as? DBXTeamLogEventTypeMemberAddExternalId
    }

    @objc
    public var asMemberAddName: DBXTeamLogEventTypeMemberAddName? {
        self as? DBXTeamLogEventTypeMemberAddName
    }

    @objc
    public var asMemberChangeAdminRole: DBXTeamLogEventTypeMemberChangeAdminRole? {
        self as? DBXTeamLogEventTypeMemberChangeAdminRole
    }

    @objc
    public var asMemberChangeEmail: DBXTeamLogEventTypeMemberChangeEmail? {
        self as? DBXTeamLogEventTypeMemberChangeEmail
    }

    @objc
    public var asMemberChangeExternalId: DBXTeamLogEventTypeMemberChangeExternalId? {
        self as? DBXTeamLogEventTypeMemberChangeExternalId
    }

    @objc
    public var asMemberChangeMembershipType: DBXTeamLogEventTypeMemberChangeMembershipType? {
        self as? DBXTeamLogEventTypeMemberChangeMembershipType
    }

    @objc
    public var asMemberChangeName: DBXTeamLogEventTypeMemberChangeName? {
        self as? DBXTeamLogEventTypeMemberChangeName
    }

    @objc
    public var asMemberChangeResellerRole: DBXTeamLogEventTypeMemberChangeResellerRole? {
        self as? DBXTeamLogEventTypeMemberChangeResellerRole
    }

    @objc
    public var asMemberChangeStatus: DBXTeamLogEventTypeMemberChangeStatus? {
        self as? DBXTeamLogEventTypeMemberChangeStatus
    }

    @objc
    public var asMemberDeleteManualContacts: DBXTeamLogEventTypeMemberDeleteManualContacts? {
        self as? DBXTeamLogEventTypeMemberDeleteManualContacts
    }

    @objc
    public var asMemberDeleteProfilePhoto: DBXTeamLogEventTypeMemberDeleteProfilePhoto? {
        self as? DBXTeamLogEventTypeMemberDeleteProfilePhoto
    }

    @objc
    public var asMemberPermanentlyDeleteAccountContents: DBXTeamLogEventTypeMemberPermanentlyDeleteAccountContents? {
        self as? DBXTeamLogEventTypeMemberPermanentlyDeleteAccountContents
    }

    @objc
    public var asMemberRemoveExternalId: DBXTeamLogEventTypeMemberRemoveExternalId? {
        self as? DBXTeamLogEventTypeMemberRemoveExternalId
    }

    @objc
    public var asMemberSetProfilePhoto: DBXTeamLogEventTypeMemberSetProfilePhoto? {
        self as? DBXTeamLogEventTypeMemberSetProfilePhoto
    }

    @objc
    public var asMemberSpaceLimitsAddCustomQuota: DBXTeamLogEventTypeMemberSpaceLimitsAddCustomQuota? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsAddCustomQuota
    }

    @objc
    public var asMemberSpaceLimitsChangeCustomQuota: DBXTeamLogEventTypeMemberSpaceLimitsChangeCustomQuota? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsChangeCustomQuota
    }

    @objc
    public var asMemberSpaceLimitsChangeStatus: DBXTeamLogEventTypeMemberSpaceLimitsChangeStatus? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsChangeStatus
    }

    @objc
    public var asMemberSpaceLimitsRemoveCustomQuota: DBXTeamLogEventTypeMemberSpaceLimitsRemoveCustomQuota? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsRemoveCustomQuota
    }

    @objc
    public var asMemberSuggest: DBXTeamLogEventTypeMemberSuggest? {
        self as? DBXTeamLogEventTypeMemberSuggest
    }

    @objc
    public var asMemberTransferAccountContents: DBXTeamLogEventTypeMemberTransferAccountContents? {
        self as? DBXTeamLogEventTypeMemberTransferAccountContents
    }

    @objc
    public var asPendingSecondaryEmailAdded: DBXTeamLogEventTypePendingSecondaryEmailAdded? {
        self as? DBXTeamLogEventTypePendingSecondaryEmailAdded
    }

    @objc
    public var asSecondaryEmailDeleted: DBXTeamLogEventTypeSecondaryEmailDeleted? {
        self as? DBXTeamLogEventTypeSecondaryEmailDeleted
    }

    @objc
    public var asSecondaryEmailVerified: DBXTeamLogEventTypeSecondaryEmailVerified? {
        self as? DBXTeamLogEventTypeSecondaryEmailVerified
    }

    @objc
    public var asSecondaryMailsPolicyChanged: DBXTeamLogEventTypeSecondaryMailsPolicyChanged? {
        self as? DBXTeamLogEventTypeSecondaryMailsPolicyChanged
    }

    @objc
    public var asBinderAddPage: DBXTeamLogEventTypeBinderAddPage? {
        self as? DBXTeamLogEventTypeBinderAddPage
    }

    @objc
    public var asBinderAddSection: DBXTeamLogEventTypeBinderAddSection? {
        self as? DBXTeamLogEventTypeBinderAddSection
    }

    @objc
    public var asBinderRemovePage: DBXTeamLogEventTypeBinderRemovePage? {
        self as? DBXTeamLogEventTypeBinderRemovePage
    }

    @objc
    public var asBinderRemoveSection: DBXTeamLogEventTypeBinderRemoveSection? {
        self as? DBXTeamLogEventTypeBinderRemoveSection
    }

    @objc
    public var asBinderRenamePage: DBXTeamLogEventTypeBinderRenamePage? {
        self as? DBXTeamLogEventTypeBinderRenamePage
    }

    @objc
    public var asBinderRenameSection: DBXTeamLogEventTypeBinderRenameSection? {
        self as? DBXTeamLogEventTypeBinderRenameSection
    }

    @objc
    public var asBinderReorderPage: DBXTeamLogEventTypeBinderReorderPage? {
        self as? DBXTeamLogEventTypeBinderReorderPage
    }

    @objc
    public var asBinderReorderSection: DBXTeamLogEventTypeBinderReorderSection? {
        self as? DBXTeamLogEventTypeBinderReorderSection
    }

    @objc
    public var asPaperContentAddMember: DBXTeamLogEventTypePaperContentAddMember? {
        self as? DBXTeamLogEventTypePaperContentAddMember
    }

    @objc
    public var asPaperContentAddToFolder: DBXTeamLogEventTypePaperContentAddToFolder? {
        self as? DBXTeamLogEventTypePaperContentAddToFolder
    }

    @objc
    public var asPaperContentArchive: DBXTeamLogEventTypePaperContentArchive? {
        self as? DBXTeamLogEventTypePaperContentArchive
    }

    @objc
    public var asPaperContentCreate: DBXTeamLogEventTypePaperContentCreate? {
        self as? DBXTeamLogEventTypePaperContentCreate
    }

    @objc
    public var asPaperContentPermanentlyDelete: DBXTeamLogEventTypePaperContentPermanentlyDelete? {
        self as? DBXTeamLogEventTypePaperContentPermanentlyDelete
    }

    @objc
    public var asPaperContentRemoveFromFolder: DBXTeamLogEventTypePaperContentRemoveFromFolder? {
        self as? DBXTeamLogEventTypePaperContentRemoveFromFolder
    }

    @objc
    public var asPaperContentRemoveMember: DBXTeamLogEventTypePaperContentRemoveMember? {
        self as? DBXTeamLogEventTypePaperContentRemoveMember
    }

    @objc
    public var asPaperContentRename: DBXTeamLogEventTypePaperContentRename? {
        self as? DBXTeamLogEventTypePaperContentRename
    }

    @objc
    public var asPaperContentRestore: DBXTeamLogEventTypePaperContentRestore? {
        self as? DBXTeamLogEventTypePaperContentRestore
    }

    @objc
    public var asPaperDocAddComment: DBXTeamLogEventTypePaperDocAddComment? {
        self as? DBXTeamLogEventTypePaperDocAddComment
    }

    @objc
    public var asPaperDocChangeMemberRole: DBXTeamLogEventTypePaperDocChangeMemberRole? {
        self as? DBXTeamLogEventTypePaperDocChangeMemberRole
    }

    @objc
    public var asPaperDocChangeSharingPolicy: DBXTeamLogEventTypePaperDocChangeSharingPolicy? {
        self as? DBXTeamLogEventTypePaperDocChangeSharingPolicy
    }

    @objc
    public var asPaperDocChangeSubscription: DBXTeamLogEventTypePaperDocChangeSubscription? {
        self as? DBXTeamLogEventTypePaperDocChangeSubscription
    }

    @objc
    public var asPaperDocDeleted: DBXTeamLogEventTypePaperDocDeleted? {
        self as? DBXTeamLogEventTypePaperDocDeleted
    }

    @objc
    public var asPaperDocDeleteComment: DBXTeamLogEventTypePaperDocDeleteComment? {
        self as? DBXTeamLogEventTypePaperDocDeleteComment
    }

    @objc
    public var asPaperDocDownload: DBXTeamLogEventTypePaperDocDownload? {
        self as? DBXTeamLogEventTypePaperDocDownload
    }

    @objc
    public var asPaperDocEdit: DBXTeamLogEventTypePaperDocEdit? {
        self as? DBXTeamLogEventTypePaperDocEdit
    }

    @objc
    public var asPaperDocEditComment: DBXTeamLogEventTypePaperDocEditComment? {
        self as? DBXTeamLogEventTypePaperDocEditComment
    }

    @objc
    public var asPaperDocFollowed: DBXTeamLogEventTypePaperDocFollowed? {
        self as? DBXTeamLogEventTypePaperDocFollowed
    }

    @objc
    public var asPaperDocMention: DBXTeamLogEventTypePaperDocMention? {
        self as? DBXTeamLogEventTypePaperDocMention
    }

    @objc
    public var asPaperDocOwnershipChanged: DBXTeamLogEventTypePaperDocOwnershipChanged? {
        self as? DBXTeamLogEventTypePaperDocOwnershipChanged
    }

    @objc
    public var asPaperDocRequestAccess: DBXTeamLogEventTypePaperDocRequestAccess? {
        self as? DBXTeamLogEventTypePaperDocRequestAccess
    }

    @objc
    public var asPaperDocResolveComment: DBXTeamLogEventTypePaperDocResolveComment? {
        self as? DBXTeamLogEventTypePaperDocResolveComment
    }

    @objc
    public var asPaperDocRevert: DBXTeamLogEventTypePaperDocRevert? {
        self as? DBXTeamLogEventTypePaperDocRevert
    }

    @objc
    public var asPaperDocSlackShare: DBXTeamLogEventTypePaperDocSlackShare? {
        self as? DBXTeamLogEventTypePaperDocSlackShare
    }

    @objc
    public var asPaperDocTeamInvite: DBXTeamLogEventTypePaperDocTeamInvite? {
        self as? DBXTeamLogEventTypePaperDocTeamInvite
    }

    @objc
    public var asPaperDocTrashed: DBXTeamLogEventTypePaperDocTrashed? {
        self as? DBXTeamLogEventTypePaperDocTrashed
    }

    @objc
    public var asPaperDocUnresolveComment: DBXTeamLogEventTypePaperDocUnresolveComment? {
        self as? DBXTeamLogEventTypePaperDocUnresolveComment
    }

    @objc
    public var asPaperDocUntrashed: DBXTeamLogEventTypePaperDocUntrashed? {
        self as? DBXTeamLogEventTypePaperDocUntrashed
    }

    @objc
    public var asPaperDocView: DBXTeamLogEventTypePaperDocView? {
        self as? DBXTeamLogEventTypePaperDocView
    }

    @objc
    public var asPaperExternalViewAllow: DBXTeamLogEventTypePaperExternalViewAllow? {
        self as? DBXTeamLogEventTypePaperExternalViewAllow
    }

    @objc
    public var asPaperExternalViewDefaultTeam: DBXTeamLogEventTypePaperExternalViewDefaultTeam? {
        self as? DBXTeamLogEventTypePaperExternalViewDefaultTeam
    }

    @objc
    public var asPaperExternalViewForbid: DBXTeamLogEventTypePaperExternalViewForbid? {
        self as? DBXTeamLogEventTypePaperExternalViewForbid
    }

    @objc
    public var asPaperFolderChangeSubscription: DBXTeamLogEventTypePaperFolderChangeSubscription? {
        self as? DBXTeamLogEventTypePaperFolderChangeSubscription
    }

    @objc
    public var asPaperFolderDeleted: DBXTeamLogEventTypePaperFolderDeleted? {
        self as? DBXTeamLogEventTypePaperFolderDeleted
    }

    @objc
    public var asPaperFolderFollowed: DBXTeamLogEventTypePaperFolderFollowed? {
        self as? DBXTeamLogEventTypePaperFolderFollowed
    }

    @objc
    public var asPaperFolderTeamInvite: DBXTeamLogEventTypePaperFolderTeamInvite? {
        self as? DBXTeamLogEventTypePaperFolderTeamInvite
    }

    @objc
    public var asPaperPublishedLinkChangePermission: DBXTeamLogEventTypePaperPublishedLinkChangePermission? {
        self as? DBXTeamLogEventTypePaperPublishedLinkChangePermission
    }

    @objc
    public var asPaperPublishedLinkCreate: DBXTeamLogEventTypePaperPublishedLinkCreate? {
        self as? DBXTeamLogEventTypePaperPublishedLinkCreate
    }

    @objc
    public var asPaperPublishedLinkDisabled: DBXTeamLogEventTypePaperPublishedLinkDisabled? {
        self as? DBXTeamLogEventTypePaperPublishedLinkDisabled
    }

    @objc
    public var asPaperPublishedLinkView: DBXTeamLogEventTypePaperPublishedLinkView? {
        self as? DBXTeamLogEventTypePaperPublishedLinkView
    }

    @objc
    public var asPasswordChange: DBXTeamLogEventTypePasswordChange? {
        self as? DBXTeamLogEventTypePasswordChange
    }

    @objc
    public var asPasswordReset: DBXTeamLogEventTypePasswordReset? {
        self as? DBXTeamLogEventTypePasswordReset
    }

    @objc
    public var asPasswordResetAll: DBXTeamLogEventTypePasswordResetAll? {
        self as? DBXTeamLogEventTypePasswordResetAll
    }

    @objc
    public var asClassificationCreateReport: DBXTeamLogEventTypeClassificationCreateReport? {
        self as? DBXTeamLogEventTypeClassificationCreateReport
    }

    @objc
    public var asClassificationCreateReportFail: DBXTeamLogEventTypeClassificationCreateReportFail? {
        self as? DBXTeamLogEventTypeClassificationCreateReportFail
    }

    @objc
    public var asEmmCreateExceptionsReport: DBXTeamLogEventTypeEmmCreateExceptionsReport? {
        self as? DBXTeamLogEventTypeEmmCreateExceptionsReport
    }

    @objc
    public var asEmmCreateUsageReport: DBXTeamLogEventTypeEmmCreateUsageReport? {
        self as? DBXTeamLogEventTypeEmmCreateUsageReport
    }

    @objc
    public var asExportMembersReport: DBXTeamLogEventTypeExportMembersReport? {
        self as? DBXTeamLogEventTypeExportMembersReport
    }

    @objc
    public var asExportMembersReportFail: DBXTeamLogEventTypeExportMembersReportFail? {
        self as? DBXTeamLogEventTypeExportMembersReportFail
    }

    @objc
    public var asExternalSharingCreateReport: DBXTeamLogEventTypeExternalSharingCreateReport? {
        self as? DBXTeamLogEventTypeExternalSharingCreateReport
    }

    @objc
    public var asExternalSharingReportFailed: DBXTeamLogEventTypeExternalSharingReportFailed? {
        self as? DBXTeamLogEventTypeExternalSharingReportFailed
    }

    @objc
    public var asNoExpirationLinkGenCreateReport: DBXTeamLogEventTypeNoExpirationLinkGenCreateReport? {
        self as? DBXTeamLogEventTypeNoExpirationLinkGenCreateReport
    }

    @objc
    public var asNoExpirationLinkGenReportFailed: DBXTeamLogEventTypeNoExpirationLinkGenReportFailed? {
        self as? DBXTeamLogEventTypeNoExpirationLinkGenReportFailed
    }

    @objc
    public var asNoPasswordLinkGenCreateReport: DBXTeamLogEventTypeNoPasswordLinkGenCreateReport? {
        self as? DBXTeamLogEventTypeNoPasswordLinkGenCreateReport
    }

    @objc
    public var asNoPasswordLinkGenReportFailed: DBXTeamLogEventTypeNoPasswordLinkGenReportFailed? {
        self as? DBXTeamLogEventTypeNoPasswordLinkGenReportFailed
    }

    @objc
    public var asNoPasswordLinkViewCreateReport: DBXTeamLogEventTypeNoPasswordLinkViewCreateReport? {
        self as? DBXTeamLogEventTypeNoPasswordLinkViewCreateReport
    }

    @objc
    public var asNoPasswordLinkViewReportFailed: DBXTeamLogEventTypeNoPasswordLinkViewReportFailed? {
        self as? DBXTeamLogEventTypeNoPasswordLinkViewReportFailed
    }

    @objc
    public var asOutdatedLinkViewCreateReport: DBXTeamLogEventTypeOutdatedLinkViewCreateReport? {
        self as? DBXTeamLogEventTypeOutdatedLinkViewCreateReport
    }

    @objc
    public var asOutdatedLinkViewReportFailed: DBXTeamLogEventTypeOutdatedLinkViewReportFailed? {
        self as? DBXTeamLogEventTypeOutdatedLinkViewReportFailed
    }

    @objc
    public var asPaperAdminExportStart: DBXTeamLogEventTypePaperAdminExportStart? {
        self as? DBXTeamLogEventTypePaperAdminExportStart
    }

    @objc
    public var asRansomwareAlertCreateReport: DBXTeamLogEventTypeRansomwareAlertCreateReport? {
        self as? DBXTeamLogEventTypeRansomwareAlertCreateReport
    }

    @objc
    public var asRansomwareAlertCreateReportFailed: DBXTeamLogEventTypeRansomwareAlertCreateReportFailed? {
        self as? DBXTeamLogEventTypeRansomwareAlertCreateReportFailed
    }

    @objc
    public var asSmartSyncCreateAdminPrivilegeReport: DBXTeamLogEventTypeSmartSyncCreateAdminPrivilegeReport? {
        self as? DBXTeamLogEventTypeSmartSyncCreateAdminPrivilegeReport
    }

    @objc
    public var asTeamActivityCreateReport: DBXTeamLogEventTypeTeamActivityCreateReport? {
        self as? DBXTeamLogEventTypeTeamActivityCreateReport
    }

    @objc
    public var asTeamActivityCreateReportFail: DBXTeamLogEventTypeTeamActivityCreateReportFail? {
        self as? DBXTeamLogEventTypeTeamActivityCreateReportFail
    }

    @objc
    public var asCollectionShare: DBXTeamLogEventTypeCollectionShare? {
        self as? DBXTeamLogEventTypeCollectionShare
    }

    @objc
    public var asFileTransfersFileAdd: DBXTeamLogEventTypeFileTransfersFileAdd? {
        self as? DBXTeamLogEventTypeFileTransfersFileAdd
    }

    @objc
    public var asFileTransfersTransferDelete: DBXTeamLogEventTypeFileTransfersTransferDelete? {
        self as? DBXTeamLogEventTypeFileTransfersTransferDelete
    }

    @objc
    public var asFileTransfersTransferDownload: DBXTeamLogEventTypeFileTransfersTransferDownload? {
        self as? DBXTeamLogEventTypeFileTransfersTransferDownload
    }

    @objc
    public var asFileTransfersTransferSend: DBXTeamLogEventTypeFileTransfersTransferSend? {
        self as? DBXTeamLogEventTypeFileTransfersTransferSend
    }

    @objc
    public var asFileTransfersTransferView: DBXTeamLogEventTypeFileTransfersTransferView? {
        self as? DBXTeamLogEventTypeFileTransfersTransferView
    }

    @objc
    public var asNoteAclInviteOnly: DBXTeamLogEventTypeNoteAclInviteOnly? {
        self as? DBXTeamLogEventTypeNoteAclInviteOnly
    }

    @objc
    public var asNoteAclLink: DBXTeamLogEventTypeNoteAclLink? {
        self as? DBXTeamLogEventTypeNoteAclLink
    }

    @objc
    public var asNoteAclTeamLink: DBXTeamLogEventTypeNoteAclTeamLink? {
        self as? DBXTeamLogEventTypeNoteAclTeamLink
    }

    @objc
    public var asNoteShared: DBXTeamLogEventTypeNoteShared? {
        self as? DBXTeamLogEventTypeNoteShared
    }

    @objc
    public var asNoteShareReceive: DBXTeamLogEventTypeNoteShareReceive? {
        self as? DBXTeamLogEventTypeNoteShareReceive
    }

    @objc
    public var asOpenNoteShared: DBXTeamLogEventTypeOpenNoteShared? {
        self as? DBXTeamLogEventTypeOpenNoteShared
    }

    @objc
    public var asReplayFileSharedLinkCreated: DBXTeamLogEventTypeReplayFileSharedLinkCreated? {
        self as? DBXTeamLogEventTypeReplayFileSharedLinkCreated
    }

    @objc
    public var asReplayFileSharedLinkModified: DBXTeamLogEventTypeReplayFileSharedLinkModified? {
        self as? DBXTeamLogEventTypeReplayFileSharedLinkModified
    }

    @objc
    public var asReplayProjectTeamAdd: DBXTeamLogEventTypeReplayProjectTeamAdd? {
        self as? DBXTeamLogEventTypeReplayProjectTeamAdd
    }

    @objc
    public var asReplayProjectTeamDelete: DBXTeamLogEventTypeReplayProjectTeamDelete? {
        self as? DBXTeamLogEventTypeReplayProjectTeamDelete
    }

    @objc
    public var asSfAddGroup: DBXTeamLogEventTypeSfAddGroup? {
        self as? DBXTeamLogEventTypeSfAddGroup
    }

    @objc
    public var asSfAllowNonMembersToViewSharedLinks: DBXTeamLogEventTypeSfAllowNonMembersToViewSharedLinks? {
        self as? DBXTeamLogEventTypeSfAllowNonMembersToViewSharedLinks
    }

    @objc
    public var asSfExternalInviteWarn: DBXTeamLogEventTypeSfExternalInviteWarn? {
        self as? DBXTeamLogEventTypeSfExternalInviteWarn
    }

    @objc
    public var asSfFbInvite: DBXTeamLogEventTypeSfFbInvite? {
        self as? DBXTeamLogEventTypeSfFbInvite
    }

    @objc
    public var asSfFbInviteChangeRole: DBXTeamLogEventTypeSfFbInviteChangeRole? {
        self as? DBXTeamLogEventTypeSfFbInviteChangeRole
    }

    @objc
    public var asSfFbUninvite: DBXTeamLogEventTypeSfFbUninvite? {
        self as? DBXTeamLogEventTypeSfFbUninvite
    }

    @objc
    public var asSfInviteGroup: DBXTeamLogEventTypeSfInviteGroup? {
        self as? DBXTeamLogEventTypeSfInviteGroup
    }

    @objc
    public var asSfTeamGrantAccess: DBXTeamLogEventTypeSfTeamGrantAccess? {
        self as? DBXTeamLogEventTypeSfTeamGrantAccess
    }

    @objc
    public var asSfTeamInvite: DBXTeamLogEventTypeSfTeamInvite? {
        self as? DBXTeamLogEventTypeSfTeamInvite
    }

    @objc
    public var asSfTeamInviteChangeRole: DBXTeamLogEventTypeSfTeamInviteChangeRole? {
        self as? DBXTeamLogEventTypeSfTeamInviteChangeRole
    }

    @objc
    public var asSfTeamJoin: DBXTeamLogEventTypeSfTeamJoin? {
        self as? DBXTeamLogEventTypeSfTeamJoin
    }

    @objc
    public var asSfTeamJoinFromOobLink: DBXTeamLogEventTypeSfTeamJoinFromOobLink? {
        self as? DBXTeamLogEventTypeSfTeamJoinFromOobLink
    }

    @objc
    public var asSfTeamUninvite: DBXTeamLogEventTypeSfTeamUninvite? {
        self as? DBXTeamLogEventTypeSfTeamUninvite
    }

    @objc
    public var asSharedContentAddInvitees: DBXTeamLogEventTypeSharedContentAddInvitees? {
        self as? DBXTeamLogEventTypeSharedContentAddInvitees
    }

    @objc
    public var asSharedContentAddLinkExpiry: DBXTeamLogEventTypeSharedContentAddLinkExpiry? {
        self as? DBXTeamLogEventTypeSharedContentAddLinkExpiry
    }

    @objc
    public var asSharedContentAddLinkPassword: DBXTeamLogEventTypeSharedContentAddLinkPassword? {
        self as? DBXTeamLogEventTypeSharedContentAddLinkPassword
    }

    @objc
    public var asSharedContentAddMember: DBXTeamLogEventTypeSharedContentAddMember? {
        self as? DBXTeamLogEventTypeSharedContentAddMember
    }

    @objc
    public var asSharedContentChangeDownloadsPolicy: DBXTeamLogEventTypeSharedContentChangeDownloadsPolicy? {
        self as? DBXTeamLogEventTypeSharedContentChangeDownloadsPolicy
    }

    @objc
    public var asSharedContentChangeInviteeRole: DBXTeamLogEventTypeSharedContentChangeInviteeRole? {
        self as? DBXTeamLogEventTypeSharedContentChangeInviteeRole
    }

    @objc
    public var asSharedContentChangeLinkAudience: DBXTeamLogEventTypeSharedContentChangeLinkAudience? {
        self as? DBXTeamLogEventTypeSharedContentChangeLinkAudience
    }

    @objc
    public var asSharedContentChangeLinkExpiry: DBXTeamLogEventTypeSharedContentChangeLinkExpiry? {
        self as? DBXTeamLogEventTypeSharedContentChangeLinkExpiry
    }

    @objc
    public var asSharedContentChangeLinkPassword: DBXTeamLogEventTypeSharedContentChangeLinkPassword? {
        self as? DBXTeamLogEventTypeSharedContentChangeLinkPassword
    }

    @objc
    public var asSharedContentChangeMemberRole: DBXTeamLogEventTypeSharedContentChangeMemberRole? {
        self as? DBXTeamLogEventTypeSharedContentChangeMemberRole
    }

    @objc
    public var asSharedContentChangeViewerInfoPolicy: DBXTeamLogEventTypeSharedContentChangeViewerInfoPolicy? {
        self as? DBXTeamLogEventTypeSharedContentChangeViewerInfoPolicy
    }

    @objc
    public var asSharedContentClaimInvitation: DBXTeamLogEventTypeSharedContentClaimInvitation? {
        self as? DBXTeamLogEventTypeSharedContentClaimInvitation
    }

    @objc
    public var asSharedContentCopy: DBXTeamLogEventTypeSharedContentCopy? {
        self as? DBXTeamLogEventTypeSharedContentCopy
    }

    @objc
    public var asSharedContentDownload: DBXTeamLogEventTypeSharedContentDownload? {
        self as? DBXTeamLogEventTypeSharedContentDownload
    }

    @objc
    public var asSharedContentRelinquishMembership: DBXTeamLogEventTypeSharedContentRelinquishMembership? {
        self as? DBXTeamLogEventTypeSharedContentRelinquishMembership
    }

    @objc
    public var asSharedContentRemoveInvitees: DBXTeamLogEventTypeSharedContentRemoveInvitees? {
        self as? DBXTeamLogEventTypeSharedContentRemoveInvitees
    }

    @objc
    public var asSharedContentRemoveLinkExpiry: DBXTeamLogEventTypeSharedContentRemoveLinkExpiry? {
        self as? DBXTeamLogEventTypeSharedContentRemoveLinkExpiry
    }

    @objc
    public var asSharedContentRemoveLinkPassword: DBXTeamLogEventTypeSharedContentRemoveLinkPassword? {
        self as? DBXTeamLogEventTypeSharedContentRemoveLinkPassword
    }

    @objc
    public var asSharedContentRemoveMember: DBXTeamLogEventTypeSharedContentRemoveMember? {
        self as? DBXTeamLogEventTypeSharedContentRemoveMember
    }

    @objc
    public var asSharedContentRequestAccess: DBXTeamLogEventTypeSharedContentRequestAccess? {
        self as? DBXTeamLogEventTypeSharedContentRequestAccess
    }

    @objc
    public var asSharedContentRestoreInvitees: DBXTeamLogEventTypeSharedContentRestoreInvitees? {
        self as? DBXTeamLogEventTypeSharedContentRestoreInvitees
    }

    @objc
    public var asSharedContentRestoreMember: DBXTeamLogEventTypeSharedContentRestoreMember? {
        self as? DBXTeamLogEventTypeSharedContentRestoreMember
    }

    @objc
    public var asSharedContentUnshare: DBXTeamLogEventTypeSharedContentUnshare? {
        self as? DBXTeamLogEventTypeSharedContentUnshare
    }

    @objc
    public var asSharedContentView: DBXTeamLogEventTypeSharedContentView? {
        self as? DBXTeamLogEventTypeSharedContentView
    }

    @objc
    public var asSharedFolderChangeLinkPolicy: DBXTeamLogEventTypeSharedFolderChangeLinkPolicy? {
        self as? DBXTeamLogEventTypeSharedFolderChangeLinkPolicy
    }

    @objc
    public var asSharedFolderChangeMembersInheritancePolicy: DBXTeamLogEventTypeSharedFolderChangeMembersInheritancePolicy? {
        self as? DBXTeamLogEventTypeSharedFolderChangeMembersInheritancePolicy
    }

    @objc
    public var asSharedFolderChangeMembersManagementPolicy: DBXTeamLogEventTypeSharedFolderChangeMembersManagementPolicy? {
        self as? DBXTeamLogEventTypeSharedFolderChangeMembersManagementPolicy
    }

    @objc
    public var asSharedFolderChangeMembersPolicy: DBXTeamLogEventTypeSharedFolderChangeMembersPolicy? {
        self as? DBXTeamLogEventTypeSharedFolderChangeMembersPolicy
    }

    @objc
    public var asSharedFolderCreate: DBXTeamLogEventTypeSharedFolderCreate? {
        self as? DBXTeamLogEventTypeSharedFolderCreate
    }

    @objc
    public var asSharedFolderDeclineInvitation: DBXTeamLogEventTypeSharedFolderDeclineInvitation? {
        self as? DBXTeamLogEventTypeSharedFolderDeclineInvitation
    }

    @objc
    public var asSharedFolderMount: DBXTeamLogEventTypeSharedFolderMount? {
        self as? DBXTeamLogEventTypeSharedFolderMount
    }

    @objc
    public var asSharedFolderNest: DBXTeamLogEventTypeSharedFolderNest? {
        self as? DBXTeamLogEventTypeSharedFolderNest
    }

    @objc
    public var asSharedFolderTransferOwnership: DBXTeamLogEventTypeSharedFolderTransferOwnership? {
        self as? DBXTeamLogEventTypeSharedFolderTransferOwnership
    }

    @objc
    public var asSharedFolderUnmount: DBXTeamLogEventTypeSharedFolderUnmount? {
        self as? DBXTeamLogEventTypeSharedFolderUnmount
    }

    @objc
    public var asSharedLinkAddExpiry: DBXTeamLogEventTypeSharedLinkAddExpiry? {
        self as? DBXTeamLogEventTypeSharedLinkAddExpiry
    }

    @objc
    public var asSharedLinkChangeExpiry: DBXTeamLogEventTypeSharedLinkChangeExpiry? {
        self as? DBXTeamLogEventTypeSharedLinkChangeExpiry
    }

    @objc
    public var asSharedLinkChangeVisibility: DBXTeamLogEventTypeSharedLinkChangeVisibility? {
        self as? DBXTeamLogEventTypeSharedLinkChangeVisibility
    }

    @objc
    public var asSharedLinkCopy: DBXTeamLogEventTypeSharedLinkCopy? {
        self as? DBXTeamLogEventTypeSharedLinkCopy
    }

    @objc
    public var asSharedLinkCreate: DBXTeamLogEventTypeSharedLinkCreate? {
        self as? DBXTeamLogEventTypeSharedLinkCreate
    }

    @objc
    public var asSharedLinkDisable: DBXTeamLogEventTypeSharedLinkDisable? {
        self as? DBXTeamLogEventTypeSharedLinkDisable
    }

    @objc
    public var asSharedLinkDownload: DBXTeamLogEventTypeSharedLinkDownload? {
        self as? DBXTeamLogEventTypeSharedLinkDownload
    }

    @objc
    public var asSharedLinkRemoveExpiry: DBXTeamLogEventTypeSharedLinkRemoveExpiry? {
        self as? DBXTeamLogEventTypeSharedLinkRemoveExpiry
    }

    @objc
    public var asSharedLinkSettingsAddExpiration: DBXTeamLogEventTypeSharedLinkSettingsAddExpiration? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsAddExpiration
    }

    @objc
    public var asSharedLinkSettingsAddPassword: DBXTeamLogEventTypeSharedLinkSettingsAddPassword? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsAddPassword
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadDisabled: DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadDisabled? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadDisabled
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadEnabled: DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadEnabled? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadEnabled
    }

    @objc
    public var asSharedLinkSettingsChangeAudience: DBXTeamLogEventTypeSharedLinkSettingsChangeAudience? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsChangeAudience
    }

    @objc
    public var asSharedLinkSettingsChangeExpiration: DBXTeamLogEventTypeSharedLinkSettingsChangeExpiration? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsChangeExpiration
    }

    @objc
    public var asSharedLinkSettingsChangePassword: DBXTeamLogEventTypeSharedLinkSettingsChangePassword? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsChangePassword
    }

    @objc
    public var asSharedLinkSettingsRemoveExpiration: DBXTeamLogEventTypeSharedLinkSettingsRemoveExpiration? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsRemoveExpiration
    }

    @objc
    public var asSharedLinkSettingsRemovePassword: DBXTeamLogEventTypeSharedLinkSettingsRemovePassword? {
        self as? DBXTeamLogEventTypeSharedLinkSettingsRemovePassword
    }

    @objc
    public var asSharedLinkShare: DBXTeamLogEventTypeSharedLinkShare? {
        self as? DBXTeamLogEventTypeSharedLinkShare
    }

    @objc
    public var asSharedLinkView: DBXTeamLogEventTypeSharedLinkView? {
        self as? DBXTeamLogEventTypeSharedLinkView
    }

    @objc
    public var asSharedNoteOpened: DBXTeamLogEventTypeSharedNoteOpened? {
        self as? DBXTeamLogEventTypeSharedNoteOpened
    }

    @objc
    public var asShmodelDisableDownloads: DBXTeamLogEventTypeShmodelDisableDownloads? {
        self as? DBXTeamLogEventTypeShmodelDisableDownloads
    }

    @objc
    public var asShmodelEnableDownloads: DBXTeamLogEventTypeShmodelEnableDownloads? {
        self as? DBXTeamLogEventTypeShmodelEnableDownloads
    }

    @objc
    public var asShmodelGroupShare: DBXTeamLogEventTypeShmodelGroupShare? {
        self as? DBXTeamLogEventTypeShmodelGroupShare
    }

    @objc
    public var asShowcaseAccessGranted: DBXTeamLogEventTypeShowcaseAccessGranted? {
        self as? DBXTeamLogEventTypeShowcaseAccessGranted
    }

    @objc
    public var asShowcaseAddMember: DBXTeamLogEventTypeShowcaseAddMember? {
        self as? DBXTeamLogEventTypeShowcaseAddMember
    }

    @objc
    public var asShowcaseArchived: DBXTeamLogEventTypeShowcaseArchived? {
        self as? DBXTeamLogEventTypeShowcaseArchived
    }

    @objc
    public var asShowcaseCreated: DBXTeamLogEventTypeShowcaseCreated? {
        self as? DBXTeamLogEventTypeShowcaseCreated
    }

    @objc
    public var asShowcaseDeleteComment: DBXTeamLogEventTypeShowcaseDeleteComment? {
        self as? DBXTeamLogEventTypeShowcaseDeleteComment
    }

    @objc
    public var asShowcaseEdited: DBXTeamLogEventTypeShowcaseEdited? {
        self as? DBXTeamLogEventTypeShowcaseEdited
    }

    @objc
    public var asShowcaseEditComment: DBXTeamLogEventTypeShowcaseEditComment? {
        self as? DBXTeamLogEventTypeShowcaseEditComment
    }

    @objc
    public var asShowcaseFileAdded: DBXTeamLogEventTypeShowcaseFileAdded? {
        self as? DBXTeamLogEventTypeShowcaseFileAdded
    }

    @objc
    public var asShowcaseFileDownload: DBXTeamLogEventTypeShowcaseFileDownload? {
        self as? DBXTeamLogEventTypeShowcaseFileDownload
    }

    @objc
    public var asShowcaseFileRemoved: DBXTeamLogEventTypeShowcaseFileRemoved? {
        self as? DBXTeamLogEventTypeShowcaseFileRemoved
    }

    @objc
    public var asShowcaseFileView: DBXTeamLogEventTypeShowcaseFileView? {
        self as? DBXTeamLogEventTypeShowcaseFileView
    }

    @objc
    public var asShowcasePermanentlyDeleted: DBXTeamLogEventTypeShowcasePermanentlyDeleted? {
        self as? DBXTeamLogEventTypeShowcasePermanentlyDeleted
    }

    @objc
    public var asShowcasePostComment: DBXTeamLogEventTypeShowcasePostComment? {
        self as? DBXTeamLogEventTypeShowcasePostComment
    }

    @objc
    public var asShowcaseRemoveMember: DBXTeamLogEventTypeShowcaseRemoveMember? {
        self as? DBXTeamLogEventTypeShowcaseRemoveMember
    }

    @objc
    public var asShowcaseRenamed: DBXTeamLogEventTypeShowcaseRenamed? {
        self as? DBXTeamLogEventTypeShowcaseRenamed
    }

    @objc
    public var asShowcaseRequestAccess: DBXTeamLogEventTypeShowcaseRequestAccess? {
        self as? DBXTeamLogEventTypeShowcaseRequestAccess
    }

    @objc
    public var asShowcaseResolveComment: DBXTeamLogEventTypeShowcaseResolveComment? {
        self as? DBXTeamLogEventTypeShowcaseResolveComment
    }

    @objc
    public var asShowcaseRestored: DBXTeamLogEventTypeShowcaseRestored? {
        self as? DBXTeamLogEventTypeShowcaseRestored
    }

    @objc
    public var asShowcaseTrashed: DBXTeamLogEventTypeShowcaseTrashed? {
        self as? DBXTeamLogEventTypeShowcaseTrashed
    }

    @objc
    public var asShowcaseTrashedDeprecated: DBXTeamLogEventTypeShowcaseTrashedDeprecated? {
        self as? DBXTeamLogEventTypeShowcaseTrashedDeprecated
    }

    @objc
    public var asShowcaseUnresolveComment: DBXTeamLogEventTypeShowcaseUnresolveComment? {
        self as? DBXTeamLogEventTypeShowcaseUnresolveComment
    }

    @objc
    public var asShowcaseUntrashed: DBXTeamLogEventTypeShowcaseUntrashed? {
        self as? DBXTeamLogEventTypeShowcaseUntrashed
    }

    @objc
    public var asShowcaseUntrashedDeprecated: DBXTeamLogEventTypeShowcaseUntrashedDeprecated? {
        self as? DBXTeamLogEventTypeShowcaseUntrashedDeprecated
    }

    @objc
    public var asShowcaseView: DBXTeamLogEventTypeShowcaseView? {
        self as? DBXTeamLogEventTypeShowcaseView
    }

    @objc
    public var asSsoAddCert: DBXTeamLogEventTypeSsoAddCert? {
        self as? DBXTeamLogEventTypeSsoAddCert
    }

    @objc
    public var asSsoAddLoginUrl: DBXTeamLogEventTypeSsoAddLoginUrl? {
        self as? DBXTeamLogEventTypeSsoAddLoginUrl
    }

    @objc
    public var asSsoAddLogoutUrl: DBXTeamLogEventTypeSsoAddLogoutUrl? {
        self as? DBXTeamLogEventTypeSsoAddLogoutUrl
    }

    @objc
    public var asSsoChangeCert: DBXTeamLogEventTypeSsoChangeCert? {
        self as? DBXTeamLogEventTypeSsoChangeCert
    }

    @objc
    public var asSsoChangeLoginUrl: DBXTeamLogEventTypeSsoChangeLoginUrl? {
        self as? DBXTeamLogEventTypeSsoChangeLoginUrl
    }

    @objc
    public var asSsoChangeLogoutUrl: DBXTeamLogEventTypeSsoChangeLogoutUrl? {
        self as? DBXTeamLogEventTypeSsoChangeLogoutUrl
    }

    @objc
    public var asSsoChangeSamlIdentityMode: DBXTeamLogEventTypeSsoChangeSamlIdentityMode? {
        self as? DBXTeamLogEventTypeSsoChangeSamlIdentityMode
    }

    @objc
    public var asSsoRemoveCert: DBXTeamLogEventTypeSsoRemoveCert? {
        self as? DBXTeamLogEventTypeSsoRemoveCert
    }

    @objc
    public var asSsoRemoveLoginUrl: DBXTeamLogEventTypeSsoRemoveLoginUrl? {
        self as? DBXTeamLogEventTypeSsoRemoveLoginUrl
    }

    @objc
    public var asSsoRemoveLogoutUrl: DBXTeamLogEventTypeSsoRemoveLogoutUrl? {
        self as? DBXTeamLogEventTypeSsoRemoveLogoutUrl
    }

    @objc
    public var asTeamFolderChangeStatus: DBXTeamLogEventTypeTeamFolderChangeStatus? {
        self as? DBXTeamLogEventTypeTeamFolderChangeStatus
    }

    @objc
    public var asTeamFolderCreate: DBXTeamLogEventTypeTeamFolderCreate? {
        self as? DBXTeamLogEventTypeTeamFolderCreate
    }

    @objc
    public var asTeamFolderDowngrade: DBXTeamLogEventTypeTeamFolderDowngrade? {
        self as? DBXTeamLogEventTypeTeamFolderDowngrade
    }

    @objc
    public var asTeamFolderPermanentlyDelete: DBXTeamLogEventTypeTeamFolderPermanentlyDelete? {
        self as? DBXTeamLogEventTypeTeamFolderPermanentlyDelete
    }

    @objc
    public var asTeamFolderRename: DBXTeamLogEventTypeTeamFolderRename? {
        self as? DBXTeamLogEventTypeTeamFolderRename
    }

    @objc
    public var asTeamSelectiveSyncSettingsChanged: DBXTeamLogEventTypeTeamSelectiveSyncSettingsChanged? {
        self as? DBXTeamLogEventTypeTeamSelectiveSyncSettingsChanged
    }

    @objc
    public var asAccountCaptureChangePolicy: DBXTeamLogEventTypeAccountCaptureChangePolicy? {
        self as? DBXTeamLogEventTypeAccountCaptureChangePolicy
    }

    @objc
    public var asAdminEmailRemindersChanged: DBXTeamLogEventTypeAdminEmailRemindersChanged? {
        self as? DBXTeamLogEventTypeAdminEmailRemindersChanged
    }

    @objc
    public var asAllowDownloadDisabled: DBXTeamLogEventTypeAllowDownloadDisabled? {
        self as? DBXTeamLogEventTypeAllowDownloadDisabled
    }

    @objc
    public var asAllowDownloadEnabled: DBXTeamLogEventTypeAllowDownloadEnabled? {
        self as? DBXTeamLogEventTypeAllowDownloadEnabled
    }

    @objc
    public var asAppPermissionsChanged: DBXTeamLogEventTypeAppPermissionsChanged? {
        self as? DBXTeamLogEventTypeAppPermissionsChanged
    }

    @objc
    public var asCameraUploadsPolicyChanged: DBXTeamLogEventTypeCameraUploadsPolicyChanged? {
        self as? DBXTeamLogEventTypeCameraUploadsPolicyChanged
    }

    @objc
    public var asCaptureTranscriptPolicyChanged: DBXTeamLogEventTypeCaptureTranscriptPolicyChanged? {
        self as? DBXTeamLogEventTypeCaptureTranscriptPolicyChanged
    }

    @objc
    public var asClassificationChangePolicy: DBXTeamLogEventTypeClassificationChangePolicy? {
        self as? DBXTeamLogEventTypeClassificationChangePolicy
    }

    @objc
    public var asComputerBackupPolicyChanged: DBXTeamLogEventTypeComputerBackupPolicyChanged? {
        self as? DBXTeamLogEventTypeComputerBackupPolicyChanged
    }

    @objc
    public var asContentAdministrationPolicyChanged: DBXTeamLogEventTypeContentAdministrationPolicyChanged? {
        self as? DBXTeamLogEventTypeContentAdministrationPolicyChanged
    }

    @objc
    public var asDataPlacementRestrictionChangePolicy: DBXTeamLogEventTypeDataPlacementRestrictionChangePolicy? {
        self as? DBXTeamLogEventTypeDataPlacementRestrictionChangePolicy
    }

    @objc
    public var asDataPlacementRestrictionSatisfyPolicy: DBXTeamLogEventTypeDataPlacementRestrictionSatisfyPolicy? {
        self as? DBXTeamLogEventTypeDataPlacementRestrictionSatisfyPolicy
    }

    @objc
    public var asDeviceApprovalsAddException: DBXTeamLogEventTypeDeviceApprovalsAddException? {
        self as? DBXTeamLogEventTypeDeviceApprovalsAddException
    }

    @objc
    public var asDeviceApprovalsChangeDesktopPolicy: DBXTeamLogEventTypeDeviceApprovalsChangeDesktopPolicy? {
        self as? DBXTeamLogEventTypeDeviceApprovalsChangeDesktopPolicy
    }

    @objc
    public var asDeviceApprovalsChangeMobilePolicy: DBXTeamLogEventTypeDeviceApprovalsChangeMobilePolicy? {
        self as? DBXTeamLogEventTypeDeviceApprovalsChangeMobilePolicy
    }

    @objc
    public var asDeviceApprovalsChangeOverageAction: DBXTeamLogEventTypeDeviceApprovalsChangeOverageAction? {
        self as? DBXTeamLogEventTypeDeviceApprovalsChangeOverageAction
    }

    @objc
    public var asDeviceApprovalsChangeUnlinkAction: DBXTeamLogEventTypeDeviceApprovalsChangeUnlinkAction? {
        self as? DBXTeamLogEventTypeDeviceApprovalsChangeUnlinkAction
    }

    @objc
    public var asDeviceApprovalsRemoveException: DBXTeamLogEventTypeDeviceApprovalsRemoveException? {
        self as? DBXTeamLogEventTypeDeviceApprovalsRemoveException
    }

    @objc
    public var asDirectoryRestrictionsAddMembers: DBXTeamLogEventTypeDirectoryRestrictionsAddMembers? {
        self as? DBXTeamLogEventTypeDirectoryRestrictionsAddMembers
    }

    @objc
    public var asDirectoryRestrictionsRemoveMembers: DBXTeamLogEventTypeDirectoryRestrictionsRemoveMembers? {
        self as? DBXTeamLogEventTypeDirectoryRestrictionsRemoveMembers
    }

    @objc
    public var asDropboxPasswordsPolicyChanged: DBXTeamLogEventTypeDropboxPasswordsPolicyChanged? {
        self as? DBXTeamLogEventTypeDropboxPasswordsPolicyChanged
    }

    @objc
    public var asEmailIngestPolicyChanged: DBXTeamLogEventTypeEmailIngestPolicyChanged? {
        self as? DBXTeamLogEventTypeEmailIngestPolicyChanged
    }

    @objc
    public var asEmmAddException: DBXTeamLogEventTypeEmmAddException? {
        self as? DBXTeamLogEventTypeEmmAddException
    }

    @objc
    public var asEmmChangePolicy: DBXTeamLogEventTypeEmmChangePolicy? {
        self as? DBXTeamLogEventTypeEmmChangePolicy
    }

    @objc
    public var asEmmRemoveException: DBXTeamLogEventTypeEmmRemoveException? {
        self as? DBXTeamLogEventTypeEmmRemoveException
    }

    @objc
    public var asExtendedVersionHistoryChangePolicy: DBXTeamLogEventTypeExtendedVersionHistoryChangePolicy? {
        self as? DBXTeamLogEventTypeExtendedVersionHistoryChangePolicy
    }

    @objc
    public var asExternalDriveBackupPolicyChanged: DBXTeamLogEventTypeExternalDriveBackupPolicyChanged? {
        self as? DBXTeamLogEventTypeExternalDriveBackupPolicyChanged
    }

    @objc
    public var asFileCommentsChangePolicy: DBXTeamLogEventTypeFileCommentsChangePolicy? {
        self as? DBXTeamLogEventTypeFileCommentsChangePolicy
    }

    @objc
    public var asFileLockingPolicyChanged: DBXTeamLogEventTypeFileLockingPolicyChanged? {
        self as? DBXTeamLogEventTypeFileLockingPolicyChanged
    }

    @objc
    public var asFileProviderMigrationPolicyChanged: DBXTeamLogEventTypeFileProviderMigrationPolicyChanged? {
        self as? DBXTeamLogEventTypeFileProviderMigrationPolicyChanged
    }

    @objc
    public var asFileRequestsChangePolicy: DBXTeamLogEventTypeFileRequestsChangePolicy? {
        self as? DBXTeamLogEventTypeFileRequestsChangePolicy
    }

    @objc
    public var asFileRequestsEmailsEnabled: DBXTeamLogEventTypeFileRequestsEmailsEnabled? {
        self as? DBXTeamLogEventTypeFileRequestsEmailsEnabled
    }

    @objc
    public var asFileRequestsEmailsRestrictedToTeamOnly: DBXTeamLogEventTypeFileRequestsEmailsRestrictedToTeamOnly? {
        self as? DBXTeamLogEventTypeFileRequestsEmailsRestrictedToTeamOnly
    }

    @objc
    public var asFileTransfersPolicyChanged: DBXTeamLogEventTypeFileTransfersPolicyChanged? {
        self as? DBXTeamLogEventTypeFileTransfersPolicyChanged
    }

    @objc
    public var asFolderLinkRestrictionPolicyChanged: DBXTeamLogEventTypeFolderLinkRestrictionPolicyChanged? {
        self as? DBXTeamLogEventTypeFolderLinkRestrictionPolicyChanged
    }

    @objc
    public var asGoogleSsoChangePolicy: DBXTeamLogEventTypeGoogleSsoChangePolicy? {
        self as? DBXTeamLogEventTypeGoogleSsoChangePolicy
    }

    @objc
    public var asGroupUserManagementChangePolicy: DBXTeamLogEventTypeGroupUserManagementChangePolicy? {
        self as? DBXTeamLogEventTypeGroupUserManagementChangePolicy
    }

    @objc
    public var asIntegrationPolicyChanged: DBXTeamLogEventTypeIntegrationPolicyChanged? {
        self as? DBXTeamLogEventTypeIntegrationPolicyChanged
    }

    @objc
    public var asInviteAcceptanceEmailPolicyChanged: DBXTeamLogEventTypeInviteAcceptanceEmailPolicyChanged? {
        self as? DBXTeamLogEventTypeInviteAcceptanceEmailPolicyChanged
    }

    @objc
    public var asMemberRequestsChangePolicy: DBXTeamLogEventTypeMemberRequestsChangePolicy? {
        self as? DBXTeamLogEventTypeMemberRequestsChangePolicy
    }

    @objc
    public var asMemberSendInvitePolicyChanged: DBXTeamLogEventTypeMemberSendInvitePolicyChanged? {
        self as? DBXTeamLogEventTypeMemberSendInvitePolicyChanged
    }

    @objc
    public var asMemberSpaceLimitsAddException: DBXTeamLogEventTypeMemberSpaceLimitsAddException? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsAddException
    }

    @objc
    public var asMemberSpaceLimitsChangeCapsTypePolicy: DBXTeamLogEventTypeMemberSpaceLimitsChangeCapsTypePolicy? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsChangeCapsTypePolicy
    }

    @objc
    public var asMemberSpaceLimitsChangePolicy: DBXTeamLogEventTypeMemberSpaceLimitsChangePolicy? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsChangePolicy
    }

    @objc
    public var asMemberSpaceLimitsRemoveException: DBXTeamLogEventTypeMemberSpaceLimitsRemoveException? {
        self as? DBXTeamLogEventTypeMemberSpaceLimitsRemoveException
    }

    @objc
    public var asMemberSuggestionsChangePolicy: DBXTeamLogEventTypeMemberSuggestionsChangePolicy? {
        self as? DBXTeamLogEventTypeMemberSuggestionsChangePolicy
    }

    @objc
    public var asMicrosoftOfficeAddinChangePolicy: DBXTeamLogEventTypeMicrosoftOfficeAddinChangePolicy? {
        self as? DBXTeamLogEventTypeMicrosoftOfficeAddinChangePolicy
    }

    @objc
    public var asNetworkControlChangePolicy: DBXTeamLogEventTypeNetworkControlChangePolicy? {
        self as? DBXTeamLogEventTypeNetworkControlChangePolicy
    }

    @objc
    public var asPaperChangeDeploymentPolicy: DBXTeamLogEventTypePaperChangeDeploymentPolicy? {
        self as? DBXTeamLogEventTypePaperChangeDeploymentPolicy
    }

    @objc
    public var asPaperChangeMemberLinkPolicy: DBXTeamLogEventTypePaperChangeMemberLinkPolicy? {
        self as? DBXTeamLogEventTypePaperChangeMemberLinkPolicy
    }

    @objc
    public var asPaperChangeMemberPolicy: DBXTeamLogEventTypePaperChangeMemberPolicy? {
        self as? DBXTeamLogEventTypePaperChangeMemberPolicy
    }

    @objc
    public var asPaperChangePolicy: DBXTeamLogEventTypePaperChangePolicy? {
        self as? DBXTeamLogEventTypePaperChangePolicy
    }

    @objc
    public var asPaperDefaultFolderPolicyChanged: DBXTeamLogEventTypePaperDefaultFolderPolicyChanged? {
        self as? DBXTeamLogEventTypePaperDefaultFolderPolicyChanged
    }

    @objc
    public var asPaperDesktopPolicyChanged: DBXTeamLogEventTypePaperDesktopPolicyChanged? {
        self as? DBXTeamLogEventTypePaperDesktopPolicyChanged
    }

    @objc
    public var asPaperEnabledUsersGroupAddition: DBXTeamLogEventTypePaperEnabledUsersGroupAddition? {
        self as? DBXTeamLogEventTypePaperEnabledUsersGroupAddition
    }

    @objc
    public var asPaperEnabledUsersGroupRemoval: DBXTeamLogEventTypePaperEnabledUsersGroupRemoval? {
        self as? DBXTeamLogEventTypePaperEnabledUsersGroupRemoval
    }

    @objc
    public var asPasswordStrengthRequirementsChangePolicy: DBXTeamLogEventTypePasswordStrengthRequirementsChangePolicy? {
        self as? DBXTeamLogEventTypePasswordStrengthRequirementsChangePolicy
    }

    @objc
    public var asPermanentDeleteChangePolicy: DBXTeamLogEventTypePermanentDeleteChangePolicy? {
        self as? DBXTeamLogEventTypePermanentDeleteChangePolicy
    }

    @objc
    public var asResellerSupportChangePolicy: DBXTeamLogEventTypeResellerSupportChangePolicy? {
        self as? DBXTeamLogEventTypeResellerSupportChangePolicy
    }

    @objc
    public var asRewindPolicyChanged: DBXTeamLogEventTypeRewindPolicyChanged? {
        self as? DBXTeamLogEventTypeRewindPolicyChanged
    }

    @objc
    public var asSendForSignaturePolicyChanged: DBXTeamLogEventTypeSendForSignaturePolicyChanged? {
        self as? DBXTeamLogEventTypeSendForSignaturePolicyChanged
    }

    @objc
    public var asSharingChangeFolderJoinPolicy: DBXTeamLogEventTypeSharingChangeFolderJoinPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeFolderJoinPolicy
    }

    @objc
    public var asSharingChangeLinkAllowChangeExpirationPolicy: DBXTeamLogEventTypeSharingChangeLinkAllowChangeExpirationPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeLinkAllowChangeExpirationPolicy
    }

    @objc
    public var asSharingChangeLinkDefaultExpirationPolicy: DBXTeamLogEventTypeSharingChangeLinkDefaultExpirationPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeLinkDefaultExpirationPolicy
    }

    @objc
    public var asSharingChangeLinkEnforcePasswordPolicy: DBXTeamLogEventTypeSharingChangeLinkEnforcePasswordPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeLinkEnforcePasswordPolicy
    }

    @objc
    public var asSharingChangeLinkPolicy: DBXTeamLogEventTypeSharingChangeLinkPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeLinkPolicy
    }

    @objc
    public var asSharingChangeMemberPolicy: DBXTeamLogEventTypeSharingChangeMemberPolicy? {
        self as? DBXTeamLogEventTypeSharingChangeMemberPolicy
    }

    @objc
    public var asShowcaseChangeDownloadPolicy: DBXTeamLogEventTypeShowcaseChangeDownloadPolicy? {
        self as? DBXTeamLogEventTypeShowcaseChangeDownloadPolicy
    }

    @objc
    public var asShowcaseChangeEnabledPolicy: DBXTeamLogEventTypeShowcaseChangeEnabledPolicy? {
        self as? DBXTeamLogEventTypeShowcaseChangeEnabledPolicy
    }

    @objc
    public var asShowcaseChangeExternalSharingPolicy: DBXTeamLogEventTypeShowcaseChangeExternalSharingPolicy? {
        self as? DBXTeamLogEventTypeShowcaseChangeExternalSharingPolicy
    }

    @objc
    public var asSmarterSmartSyncPolicyChanged: DBXTeamLogEventTypeSmarterSmartSyncPolicyChanged? {
        self as? DBXTeamLogEventTypeSmarterSmartSyncPolicyChanged
    }

    @objc
    public var asSmartSyncChangePolicy: DBXTeamLogEventTypeSmartSyncChangePolicy? {
        self as? DBXTeamLogEventTypeSmartSyncChangePolicy
    }

    @objc
    public var asSmartSyncNotOptOut: DBXTeamLogEventTypeSmartSyncNotOptOut? {
        self as? DBXTeamLogEventTypeSmartSyncNotOptOut
    }

    @objc
    public var asSmartSyncOptOut: DBXTeamLogEventTypeSmartSyncOptOut? {
        self as? DBXTeamLogEventTypeSmartSyncOptOut
    }

    @objc
    public var asSsoChangePolicy: DBXTeamLogEventTypeSsoChangePolicy? {
        self as? DBXTeamLogEventTypeSsoChangePolicy
    }

    @objc
    public var asTeamBrandingPolicyChanged: DBXTeamLogEventTypeTeamBrandingPolicyChanged? {
        self as? DBXTeamLogEventTypeTeamBrandingPolicyChanged
    }

    @objc
    public var asTeamExtensionsPolicyChanged: DBXTeamLogEventTypeTeamExtensionsPolicyChanged? {
        self as? DBXTeamLogEventTypeTeamExtensionsPolicyChanged
    }

    @objc
    public var asTeamSelectiveSyncPolicyChanged: DBXTeamLogEventTypeTeamSelectiveSyncPolicyChanged? {
        self as? DBXTeamLogEventTypeTeamSelectiveSyncPolicyChanged
    }

    @objc
    public var asTeamSharingWhitelistSubjectsChanged: DBXTeamLogEventTypeTeamSharingWhitelistSubjectsChanged? {
        self as? DBXTeamLogEventTypeTeamSharingWhitelistSubjectsChanged
    }

    @objc
    public var asTfaAddException: DBXTeamLogEventTypeTfaAddException? {
        self as? DBXTeamLogEventTypeTfaAddException
    }

    @objc
    public var asTfaChangePolicy: DBXTeamLogEventTypeTfaChangePolicy? {
        self as? DBXTeamLogEventTypeTfaChangePolicy
    }

    @objc
    public var asTfaRemoveException: DBXTeamLogEventTypeTfaRemoveException? {
        self as? DBXTeamLogEventTypeTfaRemoveException
    }

    @objc
    public var asTwoAccountChangePolicy: DBXTeamLogEventTypeTwoAccountChangePolicy? {
        self as? DBXTeamLogEventTypeTwoAccountChangePolicy
    }

    @objc
    public var asViewerInfoPolicyChanged: DBXTeamLogEventTypeViewerInfoPolicyChanged? {
        self as? DBXTeamLogEventTypeViewerInfoPolicyChanged
    }

    @objc
    public var asWatermarkingPolicyChanged: DBXTeamLogEventTypeWatermarkingPolicyChanged? {
        self as? DBXTeamLogEventTypeWatermarkingPolicyChanged
    }

    @objc
    public var asWebSessionsChangeActiveSessionLimit: DBXTeamLogEventTypeWebSessionsChangeActiveSessionLimit? {
        self as? DBXTeamLogEventTypeWebSessionsChangeActiveSessionLimit
    }

    @objc
    public var asWebSessionsChangeFixedLengthPolicy: DBXTeamLogEventTypeWebSessionsChangeFixedLengthPolicy? {
        self as? DBXTeamLogEventTypeWebSessionsChangeFixedLengthPolicy
    }

    @objc
    public var asWebSessionsChangeIdleLengthPolicy: DBXTeamLogEventTypeWebSessionsChangeIdleLengthPolicy? {
        self as? DBXTeamLogEventTypeWebSessionsChangeIdleLengthPolicy
    }

    @objc
    public var asDataResidencyMigrationRequestSuccessful: DBXTeamLogEventTypeDataResidencyMigrationRequestSuccessful? {
        self as? DBXTeamLogEventTypeDataResidencyMigrationRequestSuccessful
    }

    @objc
    public var asDataResidencyMigrationRequestUnsuccessful: DBXTeamLogEventTypeDataResidencyMigrationRequestUnsuccessful? {
        self as? DBXTeamLogEventTypeDataResidencyMigrationRequestUnsuccessful
    }

    @objc
    public var asTeamMergeFrom: DBXTeamLogEventTypeTeamMergeFrom? {
        self as? DBXTeamLogEventTypeTeamMergeFrom
    }

    @objc
    public var asTeamMergeTo: DBXTeamLogEventTypeTeamMergeTo? {
        self as? DBXTeamLogEventTypeTeamMergeTo
    }

    @objc
    public var asTeamProfileAddBackground: DBXTeamLogEventTypeTeamProfileAddBackground? {
        self as? DBXTeamLogEventTypeTeamProfileAddBackground
    }

    @objc
    public var asTeamProfileAddLogo: DBXTeamLogEventTypeTeamProfileAddLogo? {
        self as? DBXTeamLogEventTypeTeamProfileAddLogo
    }

    @objc
    public var asTeamProfileChangeBackground: DBXTeamLogEventTypeTeamProfileChangeBackground? {
        self as? DBXTeamLogEventTypeTeamProfileChangeBackground
    }

    @objc
    public var asTeamProfileChangeDefaultLanguage: DBXTeamLogEventTypeTeamProfileChangeDefaultLanguage? {
        self as? DBXTeamLogEventTypeTeamProfileChangeDefaultLanguage
    }

    @objc
    public var asTeamProfileChangeLogo: DBXTeamLogEventTypeTeamProfileChangeLogo? {
        self as? DBXTeamLogEventTypeTeamProfileChangeLogo
    }

    @objc
    public var asTeamProfileChangeName: DBXTeamLogEventTypeTeamProfileChangeName? {
        self as? DBXTeamLogEventTypeTeamProfileChangeName
    }

    @objc
    public var asTeamProfileRemoveBackground: DBXTeamLogEventTypeTeamProfileRemoveBackground? {
        self as? DBXTeamLogEventTypeTeamProfileRemoveBackground
    }

    @objc
    public var asTeamProfileRemoveLogo: DBXTeamLogEventTypeTeamProfileRemoveLogo? {
        self as? DBXTeamLogEventTypeTeamProfileRemoveLogo
    }

    @objc
    public var asTfaAddBackupPhone: DBXTeamLogEventTypeTfaAddBackupPhone? {
        self as? DBXTeamLogEventTypeTfaAddBackupPhone
    }

    @objc
    public var asTfaAddSecurityKey: DBXTeamLogEventTypeTfaAddSecurityKey? {
        self as? DBXTeamLogEventTypeTfaAddSecurityKey
    }

    @objc
    public var asTfaChangeBackupPhone: DBXTeamLogEventTypeTfaChangeBackupPhone? {
        self as? DBXTeamLogEventTypeTfaChangeBackupPhone
    }

    @objc
    public var asTfaChangeStatus: DBXTeamLogEventTypeTfaChangeStatus? {
        self as? DBXTeamLogEventTypeTfaChangeStatus
    }

    @objc
    public var asTfaRemoveBackupPhone: DBXTeamLogEventTypeTfaRemoveBackupPhone? {
        self as? DBXTeamLogEventTypeTfaRemoveBackupPhone
    }

    @objc
    public var asTfaRemoveSecurityKey: DBXTeamLogEventTypeTfaRemoveSecurityKey? {
        self as? DBXTeamLogEventTypeTfaRemoveSecurityKey
    }

    @objc
    public var asTfaReset: DBXTeamLogEventTypeTfaReset? {
        self as? DBXTeamLogEventTypeTfaReset
    }

    @objc
    public var asChangedEnterpriseAdminRole: DBXTeamLogEventTypeChangedEnterpriseAdminRole? {
        self as? DBXTeamLogEventTypeChangedEnterpriseAdminRole
    }

    @objc
    public var asChangedEnterpriseConnectedTeamStatus: DBXTeamLogEventTypeChangedEnterpriseConnectedTeamStatus? {
        self as? DBXTeamLogEventTypeChangedEnterpriseConnectedTeamStatus
    }

    @objc
    public var asEndedEnterpriseAdminSession: DBXTeamLogEventTypeEndedEnterpriseAdminSession? {
        self as? DBXTeamLogEventTypeEndedEnterpriseAdminSession
    }

    @objc
    public var asEndedEnterpriseAdminSessionDeprecated: DBXTeamLogEventTypeEndedEnterpriseAdminSessionDeprecated? {
        self as? DBXTeamLogEventTypeEndedEnterpriseAdminSessionDeprecated
    }

    @objc
    public var asEnterpriseSettingsLocking: DBXTeamLogEventTypeEnterpriseSettingsLocking? {
        self as? DBXTeamLogEventTypeEnterpriseSettingsLocking
    }

    @objc
    public var asGuestAdminChangeStatus: DBXTeamLogEventTypeGuestAdminChangeStatus? {
        self as? DBXTeamLogEventTypeGuestAdminChangeStatus
    }

    @objc
    public var asStartedEnterpriseAdminSession: DBXTeamLogEventTypeStartedEnterpriseAdminSession? {
        self as? DBXTeamLogEventTypeStartedEnterpriseAdminSession
    }

    @objc
    public var asTeamMergeRequestAccepted: DBXTeamLogEventTypeTeamMergeRequestAccepted? {
        self as? DBXTeamLogEventTypeTeamMergeRequestAccepted
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestAutoCanceled: DBXTeamLogEventTypeTeamMergeRequestAutoCanceled? {
        self as? DBXTeamLogEventTypeTeamMergeRequestAutoCanceled
    }

    @objc
    public var asTeamMergeRequestCanceled: DBXTeamLogEventTypeTeamMergeRequestCanceled? {
        self as? DBXTeamLogEventTypeTeamMergeRequestCanceled
    }

    @objc
    public var asTeamMergeRequestCanceledShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestCanceledShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestCanceledShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestCanceledShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestCanceledShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestCanceledShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestExpired: DBXTeamLogEventTypeTeamMergeRequestExpired? {
        self as? DBXTeamLogEventTypeTeamMergeRequestExpired
    }

    @objc
    public var asTeamMergeRequestExpiredShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestExpiredShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestExpiredShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestExpiredShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestExpiredShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestExpiredShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestRejectedShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestRejectedShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestRejectedShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestRejectedShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestRejectedShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestRejectedShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestReminder: DBXTeamLogEventTypeTeamMergeRequestReminder? {
        self as? DBXTeamLogEventTypeTeamMergeRequestReminder
    }

    @objc
    public var asTeamMergeRequestReminderShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestReminderShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestReminderShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestReminderShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestReminderShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestReminderShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestRevoked: DBXTeamLogEventTypeTeamMergeRequestRevoked? {
        self as? DBXTeamLogEventTypeTeamMergeRequestRevoked
    }

    @objc
    public var asTeamMergeRequestSentShownToPrimaryTeam: DBXTeamLogEventTypeTeamMergeRequestSentShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestSentShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestSentShownToSecondaryTeam: DBXTeamLogEventTypeTeamMergeRequestSentShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeTeamMergeRequestSentShownToSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogEventTypeOther? {
        self as? DBXTeamLogEventTypeOther
    }
}

/// (admin_alerting) Changed an alert state
@objc
public class DBXTeamLogEventTypeAdminAlertingAlertStateChanged: DBXTeamLogEventType {
    @objc
    public var adminAlertingAlertStateChanged: DBXTeamLogAdminAlertingAlertStateChangedType

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingAlertStateChangedType) {
        self.adminAlertingAlertStateChanged = arg
        let swift = TeamLog.EventType.adminAlertingAlertStateChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (admin_alerting) Changed an alert setting
@objc
public class DBXTeamLogEventTypeAdminAlertingChangedAlertConfig: DBXTeamLogEventType {
    @objc
    public var adminAlertingChangedAlertConfig: DBXTeamLogAdminAlertingChangedAlertConfigType

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingChangedAlertConfigType) {
        self.adminAlertingChangedAlertConfig = arg
        let swift = TeamLog.EventType.adminAlertingChangedAlertConfig(arg.swift)
        super.init(swift: swift)
    }
}

/// (admin_alerting) Triggered security alert
@objc
public class DBXTeamLogEventTypeAdminAlertingTriggeredAlert: DBXTeamLogEventType {
    @objc
    public var adminAlertingTriggeredAlert: DBXTeamLogAdminAlertingTriggeredAlertType

    @objc
    public init(_ arg: DBXTeamLogAdminAlertingTriggeredAlertType) {
        self.adminAlertingTriggeredAlert = arg
        let swift = TeamLog.EventType.adminAlertingTriggeredAlert(arg.swift)
        super.init(swift: swift)
    }
}

/// (admin_alerting) Completed ransomware restore process
@objc
public class DBXTeamLogEventTypeRansomwareRestoreProcessCompleted: DBXTeamLogEventType {
    @objc
    public var ransomwareRestoreProcessCompleted: DBXTeamLogRansomwareRestoreProcessCompletedType

    @objc
    public init(_ arg: DBXTeamLogRansomwareRestoreProcessCompletedType) {
        self.ransomwareRestoreProcessCompleted = arg
        let swift = TeamLog.EventType.ransomwareRestoreProcessCompleted(arg.swift)
        super.init(swift: swift)
    }
}

/// (admin_alerting) Started ransomware restore process
@objc
public class DBXTeamLogEventTypeRansomwareRestoreProcessStarted: DBXTeamLogEventType {
    @objc
    public var ransomwareRestoreProcessStarted: DBXTeamLogRansomwareRestoreProcessStartedType

    @objc
    public init(_ arg: DBXTeamLogRansomwareRestoreProcessStartedType) {
        self.ransomwareRestoreProcessStarted = arg
        let swift = TeamLog.EventType.ransomwareRestoreProcessStarted(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Failed to connect app for member
@objc
public class DBXTeamLogEventTypeAppBlockedByPermissions: DBXTeamLogEventType {
    @objc
    public var appBlockedByPermissions: DBXTeamLogAppBlockedByPermissionsType

    @objc
    public init(_ arg: DBXTeamLogAppBlockedByPermissionsType) {
        self.appBlockedByPermissions = arg
        let swift = TeamLog.EventType.appBlockedByPermissions(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Linked app for team
@objc
public class DBXTeamLogEventTypeAppLinkTeam: DBXTeamLogEventType {
    @objc
    public var appLinkTeam: DBXTeamLogAppLinkTeamType

    @objc
    public init(_ arg: DBXTeamLogAppLinkTeamType) {
        self.appLinkTeam = arg
        let swift = TeamLog.EventType.appLinkTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Linked app for member
@objc
public class DBXTeamLogEventTypeAppLinkUser: DBXTeamLogEventType {
    @objc
    public var appLinkUser: DBXTeamLogAppLinkUserType

    @objc
    public init(_ arg: DBXTeamLogAppLinkUserType) {
        self.appLinkUser = arg
        let swift = TeamLog.EventType.appLinkUser(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Unlinked app for team
@objc
public class DBXTeamLogEventTypeAppUnlinkTeam: DBXTeamLogEventType {
    @objc
    public var appUnlinkTeam: DBXTeamLogAppUnlinkTeamType

    @objc
    public init(_ arg: DBXTeamLogAppUnlinkTeamType) {
        self.appUnlinkTeam = arg
        let swift = TeamLog.EventType.appUnlinkTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Unlinked app for member
@objc
public class DBXTeamLogEventTypeAppUnlinkUser: DBXTeamLogEventType {
    @objc
    public var appUnlinkUser: DBXTeamLogAppUnlinkUserType

    @objc
    public init(_ arg: DBXTeamLogAppUnlinkUserType) {
        self.appUnlinkUser = arg
        let swift = TeamLog.EventType.appUnlinkUser(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Connected integration for member
@objc
public class DBXTeamLogEventTypeIntegrationConnected: DBXTeamLogEventType {
    @objc
    public var integrationConnected: DBXTeamLogIntegrationConnectedType

    @objc
    public init(_ arg: DBXTeamLogIntegrationConnectedType) {
        self.integrationConnected = arg
        let swift = TeamLog.EventType.integrationConnected(arg.swift)
        super.init(swift: swift)
    }
}

/// (apps) Disconnected integration for member
@objc
public class DBXTeamLogEventTypeIntegrationDisconnected: DBXTeamLogEventType {
    @objc
    public var integrationDisconnected: DBXTeamLogIntegrationDisconnectedType

    @objc
    public init(_ arg: DBXTeamLogIntegrationDisconnectedType) {
        self.integrationDisconnected = arg
        let swift = TeamLog.EventType.integrationDisconnected(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Added file comment
@objc
public class DBXTeamLogEventTypeFileAddComment: DBXTeamLogEventType {
    @objc
    public var fileAddComment: DBXTeamLogFileAddCommentType

    @objc
    public init(_ arg: DBXTeamLogFileAddCommentType) {
        self.fileAddComment = arg
        let swift = TeamLog.EventType.fileAddComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Subscribed to or unsubscribed from comment notifications for file
@objc
public class DBXTeamLogEventTypeFileChangeCommentSubscription: DBXTeamLogEventType {
    @objc
    public var fileChangeCommentSubscription: DBXTeamLogFileChangeCommentSubscriptionType

    @objc
    public init(_ arg: DBXTeamLogFileChangeCommentSubscriptionType) {
        self.fileChangeCommentSubscription = arg
        let swift = TeamLog.EventType.fileChangeCommentSubscription(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Deleted file comment
@objc
public class DBXTeamLogEventTypeFileDeleteComment: DBXTeamLogEventType {
    @objc
    public var fileDeleteComment: DBXTeamLogFileDeleteCommentType

    @objc
    public init(_ arg: DBXTeamLogFileDeleteCommentType) {
        self.fileDeleteComment = arg
        let swift = TeamLog.EventType.fileDeleteComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Edited file comment
@objc
public class DBXTeamLogEventTypeFileEditComment: DBXTeamLogEventType {
    @objc
    public var fileEditComment: DBXTeamLogFileEditCommentType

    @objc
    public init(_ arg: DBXTeamLogFileEditCommentType) {
        self.fileEditComment = arg
        let swift = TeamLog.EventType.fileEditComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Liked file comment (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeFileLikeComment: DBXTeamLogEventType {
    @objc
    public var fileLikeComment: DBXTeamLogFileLikeCommentType

    @objc
    public init(_ arg: DBXTeamLogFileLikeCommentType) {
        self.fileLikeComment = arg
        let swift = TeamLog.EventType.fileLikeComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Resolved file comment
@objc
public class DBXTeamLogEventTypeFileResolveComment: DBXTeamLogEventType {
    @objc
    public var fileResolveComment: DBXTeamLogFileResolveCommentType

    @objc
    public init(_ arg: DBXTeamLogFileResolveCommentType) {
        self.fileResolveComment = arg
        let swift = TeamLog.EventType.fileResolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Unliked file comment (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeFileUnlikeComment: DBXTeamLogEventType {
    @objc
    public var fileUnlikeComment: DBXTeamLogFileUnlikeCommentType

    @objc
    public init(_ arg: DBXTeamLogFileUnlikeCommentType) {
        self.fileUnlikeComment = arg
        let swift = TeamLog.EventType.fileUnlikeComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (comments) Unresolved file comment
@objc
public class DBXTeamLogEventTypeFileUnresolveComment: DBXTeamLogEventType {
    @objc
    public var fileUnresolveComment: DBXTeamLogFileUnresolveCommentType

    @objc
    public init(_ arg: DBXTeamLogFileUnresolveCommentType) {
        self.fileUnresolveComment = arg
        let swift = TeamLog.EventType.fileUnresolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Added folders to policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyAddFolders: DBXTeamLogEventType {
    @objc
    public var governancePolicyAddFolders: DBXTeamLogGovernancePolicyAddFoldersType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyAddFoldersType) {
        self.governancePolicyAddFolders = arg
        let swift = TeamLog.EventType.governancePolicyAddFolders(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Couldn't add a folder to a policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyAddFolderFailed: DBXTeamLogEventType {
    @objc
    public var governancePolicyAddFolderFailed: DBXTeamLogGovernancePolicyAddFolderFailedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyAddFolderFailedType) {
        self.governancePolicyAddFolderFailed = arg
        let swift = TeamLog.EventType.governancePolicyAddFolderFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Content disposed
@objc
public class DBXTeamLogEventTypeGovernancePolicyContentDisposed: DBXTeamLogEventType {
    @objc
    public var governancePolicyContentDisposed: DBXTeamLogGovernancePolicyContentDisposedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyContentDisposedType) {
        self.governancePolicyContentDisposed = arg
        let swift = TeamLog.EventType.governancePolicyContentDisposed(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Activated a new policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyCreate: DBXTeamLogEventType {
    @objc
    public var governancePolicyCreate: DBXTeamLogGovernancePolicyCreateType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyCreateType) {
        self.governancePolicyCreate = arg
        let swift = TeamLog.EventType.governancePolicyCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Deleted a policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyDelete: DBXTeamLogEventType {
    @objc
    public var governancePolicyDelete: DBXTeamLogGovernancePolicyDeleteType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyDeleteType) {
        self.governancePolicyDelete = arg
        let swift = TeamLog.EventType.governancePolicyDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Edited policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyEditDetails: DBXTeamLogEventType {
    @objc
    public var governancePolicyEditDetails: DBXTeamLogGovernancePolicyEditDetailsType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyEditDetailsType) {
        self.governancePolicyEditDetails = arg
        let swift = TeamLog.EventType.governancePolicyEditDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Changed policy duration
@objc
public class DBXTeamLogEventTypeGovernancePolicyEditDuration: DBXTeamLogEventType {
    @objc
    public var governancePolicyEditDuration: DBXTeamLogGovernancePolicyEditDurationType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyEditDurationType) {
        self.governancePolicyEditDuration = arg
        let swift = TeamLog.EventType.governancePolicyEditDuration(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Created a policy download
@objc
public class DBXTeamLogEventTypeGovernancePolicyExportCreated: DBXTeamLogEventType {
    @objc
    public var governancePolicyExportCreated: DBXTeamLogGovernancePolicyExportCreatedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyExportCreatedType) {
        self.governancePolicyExportCreated = arg
        let swift = TeamLog.EventType.governancePolicyExportCreated(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Removed a policy download
@objc
public class DBXTeamLogEventTypeGovernancePolicyExportRemoved: DBXTeamLogEventType {
    @objc
    public var governancePolicyExportRemoved: DBXTeamLogGovernancePolicyExportRemovedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyExportRemovedType) {
        self.governancePolicyExportRemoved = arg
        let swift = TeamLog.EventType.governancePolicyExportRemoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Removed folders from policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyRemoveFolders: DBXTeamLogEventType {
    @objc
    public var governancePolicyRemoveFolders: DBXTeamLogGovernancePolicyRemoveFoldersType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyRemoveFoldersType) {
        self.governancePolicyRemoveFolders = arg
        let swift = TeamLog.EventType.governancePolicyRemoveFolders(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Created a summary report for a policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyReportCreated: DBXTeamLogEventType {
    @objc
    public var governancePolicyReportCreated: DBXTeamLogGovernancePolicyReportCreatedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyReportCreatedType) {
        self.governancePolicyReportCreated = arg
        let swift = TeamLog.EventType.governancePolicyReportCreated(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Downloaded content from a policy
@objc
public class DBXTeamLogEventTypeGovernancePolicyZipPartDownloaded: DBXTeamLogEventType {
    @objc
    public var governancePolicyZipPartDownloaded: DBXTeamLogGovernancePolicyZipPartDownloadedType

    @objc
    public init(_ arg: DBXTeamLogGovernancePolicyZipPartDownloadedType) {
        self.governancePolicyZipPartDownloaded = arg
        let swift = TeamLog.EventType.governancePolicyZipPartDownloaded(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Activated a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsActivateAHold: DBXTeamLogEventType {
    @objc
    public var legalHoldsActivateAHold: DBXTeamLogLegalHoldsActivateAHoldType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsActivateAHoldType) {
        self.legalHoldsActivateAHold = arg
        let swift = TeamLog.EventType.legalHoldsActivateAHold(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Added members to a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsAddMembers: DBXTeamLogEventType {
    @objc
    public var legalHoldsAddMembers: DBXTeamLogLegalHoldsAddMembersType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsAddMembersType) {
        self.legalHoldsAddMembers = arg
        let swift = TeamLog.EventType.legalHoldsAddMembers(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Edited details for a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsChangeHoldDetails: DBXTeamLogEventType {
    @objc
    public var legalHoldsChangeHoldDetails: DBXTeamLogLegalHoldsChangeHoldDetailsType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsChangeHoldDetailsType) {
        self.legalHoldsChangeHoldDetails = arg
        let swift = TeamLog.EventType.legalHoldsChangeHoldDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Renamed a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsChangeHoldName: DBXTeamLogEventType {
    @objc
    public var legalHoldsChangeHoldName: DBXTeamLogLegalHoldsChangeHoldNameType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsChangeHoldNameType) {
        self.legalHoldsChangeHoldName = arg
        let swift = TeamLog.EventType.legalHoldsChangeHoldName(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Exported hold
@objc
public class DBXTeamLogEventTypeLegalHoldsExportAHold: DBXTeamLogEventType {
    @objc
    public var legalHoldsExportAHold: DBXTeamLogLegalHoldsExportAHoldType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportAHoldType) {
        self.legalHoldsExportAHold = arg
        let swift = TeamLog.EventType.legalHoldsExportAHold(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Canceled export for a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsExportCancelled: DBXTeamLogEventType {
    @objc
    public var legalHoldsExportCancelled: DBXTeamLogLegalHoldsExportCancelledType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportCancelledType) {
        self.legalHoldsExportCancelled = arg
        let swift = TeamLog.EventType.legalHoldsExportCancelled(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Downloaded export for a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsExportDownloaded: DBXTeamLogEventType {
    @objc
    public var legalHoldsExportDownloaded: DBXTeamLogLegalHoldsExportDownloadedType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportDownloadedType) {
        self.legalHoldsExportDownloaded = arg
        let swift = TeamLog.EventType.legalHoldsExportDownloaded(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Removed export for a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsExportRemoved: DBXTeamLogEventType {
    @objc
    public var legalHoldsExportRemoved: DBXTeamLogLegalHoldsExportRemovedType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsExportRemovedType) {
        self.legalHoldsExportRemoved = arg
        let swift = TeamLog.EventType.legalHoldsExportRemoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Released a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsReleaseAHold: DBXTeamLogEventType {
    @objc
    public var legalHoldsReleaseAHold: DBXTeamLogLegalHoldsReleaseAHoldType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsReleaseAHoldType) {
        self.legalHoldsReleaseAHold = arg
        let swift = TeamLog.EventType.legalHoldsReleaseAHold(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Removed members from a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsRemoveMembers: DBXTeamLogEventType {
    @objc
    public var legalHoldsRemoveMembers: DBXTeamLogLegalHoldsRemoveMembersType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsRemoveMembersType) {
        self.legalHoldsRemoveMembers = arg
        let swift = TeamLog.EventType.legalHoldsRemoveMembers(arg.swift)
        super.init(swift: swift)
    }
}

/// (data_governance) Created a summary report for a hold
@objc
public class DBXTeamLogEventTypeLegalHoldsReportAHold: DBXTeamLogEventType {
    @objc
    public var legalHoldsReportAHold: DBXTeamLogLegalHoldsReportAHoldType

    @objc
    public init(_ arg: DBXTeamLogLegalHoldsReportAHoldType) {
        self.legalHoldsReportAHold = arg
        let swift = TeamLog.EventType.legalHoldsReportAHold(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active desktop session
@objc
public class DBXTeamLogEventTypeDeviceChangeIpDesktop: DBXTeamLogEventType {
    @objc
    public var deviceChangeIpDesktop: DBXTeamLogDeviceChangeIpDesktopType

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpDesktopType) {
        self.deviceChangeIpDesktop = arg
        let swift = TeamLog.EventType.deviceChangeIpDesktop(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active mobile session
@objc
public class DBXTeamLogEventTypeDeviceChangeIpMobile: DBXTeamLogEventType {
    @objc
    public var deviceChangeIpMobile: DBXTeamLogDeviceChangeIpMobileType

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpMobileType) {
        self.deviceChangeIpMobile = arg
        let swift = TeamLog.EventType.deviceChangeIpMobile(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active web session
@objc
public class DBXTeamLogEventTypeDeviceChangeIpWeb: DBXTeamLogEventType {
    @objc
    public var deviceChangeIpWeb: DBXTeamLogDeviceChangeIpWebType

    @objc
    public init(_ arg: DBXTeamLogDeviceChangeIpWebType) {
        self.deviceChangeIpWeb = arg
        let swift = TeamLog.EventType.deviceChangeIpWeb(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Failed to delete all files from unlinked device
@objc
public class DBXTeamLogEventTypeDeviceDeleteOnUnlinkFail: DBXTeamLogEventType {
    @objc
    public var deviceDeleteOnUnlinkFail: DBXTeamLogDeviceDeleteOnUnlinkFailType

    @objc
    public init(_ arg: DBXTeamLogDeviceDeleteOnUnlinkFailType) {
        self.deviceDeleteOnUnlinkFail = arg
        let swift = TeamLog.EventType.deviceDeleteOnUnlinkFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Deleted all files from unlinked device
@objc
public class DBXTeamLogEventTypeDeviceDeleteOnUnlinkSuccess: DBXTeamLogEventType {
    @objc
    public var deviceDeleteOnUnlinkSuccess: DBXTeamLogDeviceDeleteOnUnlinkSuccessType

    @objc
    public init(_ arg: DBXTeamLogDeviceDeleteOnUnlinkSuccessType) {
        self.deviceDeleteOnUnlinkSuccess = arg
        let swift = TeamLog.EventType.deviceDeleteOnUnlinkSuccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Failed to link device
@objc
public class DBXTeamLogEventTypeDeviceLinkFail: DBXTeamLogEventType {
    @objc
    public var deviceLinkFail: DBXTeamLogDeviceLinkFailType

    @objc
    public init(_ arg: DBXTeamLogDeviceLinkFailType) {
        self.deviceLinkFail = arg
        let swift = TeamLog.EventType.deviceLinkFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Linked device
@objc
public class DBXTeamLogEventTypeDeviceLinkSuccess: DBXTeamLogEventType {
    @objc
    public var deviceLinkSuccess: DBXTeamLogDeviceLinkSuccessType

    @objc
    public init(_ arg: DBXTeamLogDeviceLinkSuccessType) {
        self.deviceLinkSuccess = arg
        let swift = TeamLog.EventType.deviceLinkSuccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Disabled device management (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDeviceManagementDisabled: DBXTeamLogEventType {
    @objc
    public var deviceManagementDisabled: DBXTeamLogDeviceManagementDisabledType

    @objc
    public init(_ arg: DBXTeamLogDeviceManagementDisabledType) {
        self.deviceManagementDisabled = arg
        let swift = TeamLog.EventType.deviceManagementDisabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Enabled device management (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDeviceManagementEnabled: DBXTeamLogEventType {
    @objc
    public var deviceManagementEnabled: DBXTeamLogDeviceManagementEnabledType

    @objc
    public init(_ arg: DBXTeamLogDeviceManagementEnabledType) {
        self.deviceManagementEnabled = arg
        let swift = TeamLog.EventType.deviceManagementEnabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Enabled/disabled backup for computer
@objc
public class DBXTeamLogEventTypeDeviceSyncBackupStatusChanged: DBXTeamLogEventType {
    @objc
    public var deviceSyncBackupStatusChanged: DBXTeamLogDeviceSyncBackupStatusChangedType

    @objc
    public init(_ arg: DBXTeamLogDeviceSyncBackupStatusChangedType) {
        self.deviceSyncBackupStatusChanged = arg
        let swift = TeamLog.EventType.deviceSyncBackupStatusChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Disconnected device
@objc
public class DBXTeamLogEventTypeDeviceUnlink: DBXTeamLogEventType {
    @objc
    public var deviceUnlink: DBXTeamLogDeviceUnlinkType

    @objc
    public init(_ arg: DBXTeamLogDeviceUnlinkType) {
        self.deviceUnlink = arg
        let swift = TeamLog.EventType.deviceUnlink(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Exported passwords
@objc
public class DBXTeamLogEventTypeDropboxPasswordsExported: DBXTeamLogEventType {
    @objc
    public var dropboxPasswordsExported: DBXTeamLogDropboxPasswordsExportedType

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsExportedType) {
        self.dropboxPasswordsExported = arg
        let swift = TeamLog.EventType.dropboxPasswordsExported(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Enrolled new Dropbox Passwords device
@objc
public class DBXTeamLogEventTypeDropboxPasswordsNewDeviceEnrolled: DBXTeamLogEventType {
    @objc
    public var dropboxPasswordsNewDeviceEnrolled: DBXTeamLogDropboxPasswordsNewDeviceEnrolledType

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsNewDeviceEnrolledType) {
        self.dropboxPasswordsNewDeviceEnrolled = arg
        let swift = TeamLog.EventType.dropboxPasswordsNewDeviceEnrolled(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Refreshed auth token used for setting up EMM
@objc
public class DBXTeamLogEventTypeEmmRefreshAuthToken: DBXTeamLogEventType {
    @objc
    public var emmRefreshAuthToken: DBXTeamLogEmmRefreshAuthTokenType

    @objc
    public init(_ arg: DBXTeamLogEmmRefreshAuthTokenType) {
        self.emmRefreshAuthToken = arg
        let swift = TeamLog.EventType.emmRefreshAuthToken(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Checked external drive backup eligibility status
@objc
public class DBXTeamLogEventTypeExternalDriveBackupEligibilityStatusChecked: DBXTeamLogEventType {
    @objc
    public var externalDriveBackupEligibilityStatusChecked: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType) {
        self.externalDriveBackupEligibilityStatusChecked = arg
        let swift = TeamLog.EventType.externalDriveBackupEligibilityStatusChecked(arg.swift)
        super.init(swift: swift)
    }
}

/// (devices) Modified external drive backup
@objc
public class DBXTeamLogEventTypeExternalDriveBackupStatusChanged: DBXTeamLogEventType {
    @objc
    public var externalDriveBackupStatusChanged: DBXTeamLogExternalDriveBackupStatusChangedType

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupStatusChangedType) {
        self.externalDriveBackupStatusChanged = arg
        let swift = TeamLog.EventType.externalDriveBackupStatusChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Granted/revoked option to enable account capture on team domains
@objc
public class DBXTeamLogEventTypeAccountCaptureChangeAvailability: DBXTeamLogEventType {
    @objc
    public var accountCaptureChangeAvailability: DBXTeamLogAccountCaptureChangeAvailabilityType

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureChangeAvailabilityType) {
        self.accountCaptureChangeAvailability = arg
        let swift = TeamLog.EventType.accountCaptureChangeAvailability(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Account-captured user migrated account to team
@objc
public class DBXTeamLogEventTypeAccountCaptureMigrateAccount: DBXTeamLogEventType {
    @objc
    public var accountCaptureMigrateAccount: DBXTeamLogAccountCaptureMigrateAccountType

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureMigrateAccountType) {
        self.accountCaptureMigrateAccount = arg
        let swift = TeamLog.EventType.accountCaptureMigrateAccount(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Sent account capture email to all unmanaged members
@objc
public class DBXTeamLogEventTypeAccountCaptureNotificationEmailsSent: DBXTeamLogEventType {
    @objc
    public var accountCaptureNotificationEmailsSent: DBXTeamLogAccountCaptureNotificationEmailsSentType

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureNotificationEmailsSentType) {
        self.accountCaptureNotificationEmailsSent = arg
        let swift = TeamLog.EventType.accountCaptureNotificationEmailsSent(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Account-captured user changed account email to personal email
@objc
public class DBXTeamLogEventTypeAccountCaptureRelinquishAccount: DBXTeamLogEventType {
    @objc
    public var accountCaptureRelinquishAccount: DBXTeamLogAccountCaptureRelinquishAccountType

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureRelinquishAccountType) {
        self.accountCaptureRelinquishAccount = arg
        let swift = TeamLog.EventType.accountCaptureRelinquishAccount(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Disabled domain invites (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDisabledDomainInvites: DBXTeamLogEventType {
    @objc
    public var disabledDomainInvites: DBXTeamLogDisabledDomainInvitesType

    @objc
    public init(_ arg: DBXTeamLogDisabledDomainInvitesType) {
        self.disabledDomainInvites = arg
        let swift = TeamLog.EventType.disabledDomainInvites(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Approved user's request to join team
@objc
public class DBXTeamLogEventTypeDomainInvitesApproveRequestToJoinTeam: DBXTeamLogEventType {
    @objc
    public var domainInvitesApproveRequestToJoinTeam: DBXTeamLogDomainInvitesApproveRequestToJoinTeamType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesApproveRequestToJoinTeamType) {
        self.domainInvitesApproveRequestToJoinTeam = arg
        let swift = TeamLog.EventType.domainInvitesApproveRequestToJoinTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Declined user's request to join team
@objc
public class DBXTeamLogEventTypeDomainInvitesDeclineRequestToJoinTeam: DBXTeamLogEventType {
    @objc
    public var domainInvitesDeclineRequestToJoinTeam: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType) {
        self.domainInvitesDeclineRequestToJoinTeam = arg
        let swift = TeamLog.EventType.domainInvitesDeclineRequestToJoinTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Sent domain invites to existing domain accounts (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDomainInvitesEmailExistingUsers: DBXTeamLogEventType {
    @objc
    public var domainInvitesEmailExistingUsers: DBXTeamLogDomainInvitesEmailExistingUsersType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesEmailExistingUsersType) {
        self.domainInvitesEmailExistingUsers = arg
        let swift = TeamLog.EventType.domainInvitesEmailExistingUsers(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Requested to join team
@objc
public class DBXTeamLogEventTypeDomainInvitesRequestToJoinTeam: DBXTeamLogEventType {
    @objc
    public var domainInvitesRequestToJoinTeam: DBXTeamLogDomainInvitesRequestToJoinTeamType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesRequestToJoinTeamType) {
        self.domainInvitesRequestToJoinTeam = arg
        let swift = TeamLog.EventType.domainInvitesRequestToJoinTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Disabled "Automatically invite new users" (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToNo: DBXTeamLogEventType {
    @objc
    public var domainInvitesSetInviteNewUserPrefToNo: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType) {
        self.domainInvitesSetInviteNewUserPrefToNo = arg
        let swift = TeamLog.EventType.domainInvitesSetInviteNewUserPrefToNo(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Enabled "Automatically invite new users" (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeDomainInvitesSetInviteNewUserPrefToYes: DBXTeamLogEventType {
    @objc
    public var domainInvitesSetInviteNewUserPrefToYes: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType

    @objc
    public init(_ arg: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType) {
        self.domainInvitesSetInviteNewUserPrefToYes = arg
        let swift = TeamLog.EventType.domainInvitesSetInviteNewUserPrefToYes(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Failed to verify team domain
@objc
public class DBXTeamLogEventTypeDomainVerificationAddDomainFail: DBXTeamLogEventType {
    @objc
    public var domainVerificationAddDomainFail: DBXTeamLogDomainVerificationAddDomainFailType

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationAddDomainFailType) {
        self.domainVerificationAddDomainFail = arg
        let swift = TeamLog.EventType.domainVerificationAddDomainFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Verified team domain
@objc
public class DBXTeamLogEventTypeDomainVerificationAddDomainSuccess: DBXTeamLogEventType {
    @objc
    public var domainVerificationAddDomainSuccess: DBXTeamLogDomainVerificationAddDomainSuccessType

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationAddDomainSuccessType) {
        self.domainVerificationAddDomainSuccess = arg
        let swift = TeamLog.EventType.domainVerificationAddDomainSuccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Removed domain from list of verified team domains
@objc
public class DBXTeamLogEventTypeDomainVerificationRemoveDomain: DBXTeamLogEventType {
    @objc
    public var domainVerificationRemoveDomain: DBXTeamLogDomainVerificationRemoveDomainType

    @objc
    public init(_ arg: DBXTeamLogDomainVerificationRemoveDomainType) {
        self.domainVerificationRemoveDomain = arg
        let swift = TeamLog.EventType.domainVerificationRemoveDomain(arg.swift)
        super.init(swift: swift)
    }
}

/// (domains) Enabled domain invites (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeEnabledDomainInvites: DBXTeamLogEventType {
    @objc
    public var enabledDomainInvites: DBXTeamLogEnabledDomainInvitesType

    @objc
    public init(_ arg: DBXTeamLogEnabledDomainInvitesType) {
        self.enabledDomainInvites = arg
        let swift = TeamLog.EventType.enabledDomainInvites(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Canceled team encryption key deletion
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyCancelKeyDeletion: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyCancelKeyDeletion: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType) {
        self.teamEncryptionKeyCancelKeyDeletion = arg
        let swift = TeamLog.EventType.teamEncryptionKeyCancelKeyDeletion(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Created team encryption key
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyCreateKey: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyCreateKey: DBXTeamLogTeamEncryptionKeyCreateKeyType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyCreateKeyType) {
        self.teamEncryptionKeyCreateKey = arg
        let swift = TeamLog.EventType.teamEncryptionKeyCreateKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Deleted team encryption key
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyDeleteKey: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyDeleteKey: DBXTeamLogTeamEncryptionKeyDeleteKeyType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyDeleteKeyType) {
        self.teamEncryptionKeyDeleteKey = arg
        let swift = TeamLog.EventType.teamEncryptionKeyDeleteKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Disabled team encryption key
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyDisableKey: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyDisableKey: DBXTeamLogTeamEncryptionKeyDisableKeyType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyDisableKeyType) {
        self.teamEncryptionKeyDisableKey = arg
        let swift = TeamLog.EventType.teamEncryptionKeyDisableKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Enabled team encryption key
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyEnableKey: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyEnableKey: DBXTeamLogTeamEncryptionKeyEnableKeyType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyEnableKeyType) {
        self.teamEncryptionKeyEnableKey = arg
        let swift = TeamLog.EventType.teamEncryptionKeyEnableKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Rotated team encryption key (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyRotateKey: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyRotateKey: DBXTeamLogTeamEncryptionKeyRotateKeyType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyRotateKeyType) {
        self.teamEncryptionKeyRotateKey = arg
        let swift = TeamLog.EventType.teamEncryptionKeyRotateKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (encryption) Scheduled encryption key deletion
@objc
public class DBXTeamLogEventTypeTeamEncryptionKeyScheduleKeyDeletion: DBXTeamLogEventType {
    @objc
    public var teamEncryptionKeyScheduleKeyDeletion: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType

    @objc
    public init(_ arg: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType) {
        self.teamEncryptionKeyScheduleKeyDeletion = arg
        let swift = TeamLog.EventType.teamEncryptionKeyScheduleKeyDeletion(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Applied naming convention
@objc
public class DBXTeamLogEventTypeApplyNamingConvention: DBXTeamLogEventType {
    @objc
    public var applyNamingConvention: DBXTeamLogApplyNamingConventionType

    @objc
    public init(_ arg: DBXTeamLogApplyNamingConventionType) {
        self.applyNamingConvention = arg
        let swift = TeamLog.EventType.applyNamingConvention(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Created folders (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeCreateFolder: DBXTeamLogEventType {
    @objc
    public var createFolder: DBXTeamLogCreateFolderType

    @objc
    public init(_ arg: DBXTeamLogCreateFolderType) {
        self.createFolder = arg
        let swift = TeamLog.EventType.createFolder(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Added files and/or folders
@objc
public class DBXTeamLogEventTypeFileAdd: DBXTeamLogEventType {
    @objc
    public var fileAdd: DBXTeamLogFileAddType

    @objc
    public init(_ arg: DBXTeamLogFileAddType) {
        self.fileAdd = arg
        let swift = TeamLog.EventType.fileAdd(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Added files and/or folders from automation
@objc
public class DBXTeamLogEventTypeFileAddFromAutomation: DBXTeamLogEventType {
    @objc
    public var fileAddFromAutomation: DBXTeamLogFileAddFromAutomationType

    @objc
    public init(_ arg: DBXTeamLogFileAddFromAutomationType) {
        self.fileAddFromAutomation = arg
        let swift = TeamLog.EventType.fileAddFromAutomation(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Copied files and/or folders
@objc
public class DBXTeamLogEventTypeFileCopy: DBXTeamLogEventType {
    @objc
    public var fileCopy: DBXTeamLogFileCopyType

    @objc
    public init(_ arg: DBXTeamLogFileCopyType) {
        self.fileCopy = arg
        let swift = TeamLog.EventType.fileCopy(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Deleted files and/or folders
@objc
public class DBXTeamLogEventTypeFileDelete: DBXTeamLogEventType {
    @objc
    public var fileDelete: DBXTeamLogFileDeleteType

    @objc
    public init(_ arg: DBXTeamLogFileDeleteType) {
        self.fileDelete = arg
        let swift = TeamLog.EventType.fileDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Downloaded files and/or folders
@objc
public class DBXTeamLogEventTypeFileDownload: DBXTeamLogEventType {
    @objc
    public var fileDownload: DBXTeamLogFileDownloadType

    @objc
    public init(_ arg: DBXTeamLogFileDownloadType) {
        self.fileDownload = arg
        let swift = TeamLog.EventType.fileDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Edited files
@objc
public class DBXTeamLogEventTypeFileEdit: DBXTeamLogEventType {
    @objc
    public var fileEdit: DBXTeamLogFileEditType

    @objc
    public init(_ arg: DBXTeamLogFileEditType) {
        self.fileEdit = arg
        let swift = TeamLog.EventType.fileEdit(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Created copy reference to file/folder
@objc
public class DBXTeamLogEventTypeFileGetCopyReference: DBXTeamLogEventType {
    @objc
    public var fileGetCopyReference: DBXTeamLogFileGetCopyReferenceType

    @objc
    public init(_ arg: DBXTeamLogFileGetCopyReferenceType) {
        self.fileGetCopyReference = arg
        let swift = TeamLog.EventType.fileGetCopyReference(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Locked/unlocked editing for a file
@objc
public class DBXTeamLogEventTypeFileLockingLockStatusChanged: DBXTeamLogEventType {
    @objc
    public var fileLockingLockStatusChanged: DBXTeamLogFileLockingLockStatusChangedType

    @objc
    public init(_ arg: DBXTeamLogFileLockingLockStatusChangedType) {
        self.fileLockingLockStatusChanged = arg
        let swift = TeamLog.EventType.fileLockingLockStatusChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Moved files and/or folders
@objc
public class DBXTeamLogEventTypeFileMove: DBXTeamLogEventType {
    @objc
    public var fileMove: DBXTeamLogFileMoveType

    @objc
    public init(_ arg: DBXTeamLogFileMoveType) {
        self.fileMove = arg
        let swift = TeamLog.EventType.fileMove(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Permanently deleted files and/or folders
@objc
public class DBXTeamLogEventTypeFilePermanentlyDelete: DBXTeamLogEventType {
    @objc
    public var filePermanentlyDelete: DBXTeamLogFilePermanentlyDeleteType

    @objc
    public init(_ arg: DBXTeamLogFilePermanentlyDeleteType) {
        self.filePermanentlyDelete = arg
        let swift = TeamLog.EventType.filePermanentlyDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Previewed files and/or folders
@objc
public class DBXTeamLogEventTypeFilePreview: DBXTeamLogEventType {
    @objc
    public var filePreview: DBXTeamLogFilePreviewType

    @objc
    public init(_ arg: DBXTeamLogFilePreviewType) {
        self.filePreview = arg
        let swift = TeamLog.EventType.filePreview(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Renamed files and/or folders
@objc
public class DBXTeamLogEventTypeFileRename: DBXTeamLogEventType {
    @objc
    public var fileRename: DBXTeamLogFileRenameType

    @objc
    public init(_ arg: DBXTeamLogFileRenameType) {
        self.fileRename = arg
        let swift = TeamLog.EventType.fileRename(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Restored deleted files and/or folders
@objc
public class DBXTeamLogEventTypeFileRestore: DBXTeamLogEventType {
    @objc
    public var fileRestore: DBXTeamLogFileRestoreType

    @objc
    public init(_ arg: DBXTeamLogFileRestoreType) {
        self.fileRestore = arg
        let swift = TeamLog.EventType.fileRestore(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Reverted files to previous version
@objc
public class DBXTeamLogEventTypeFileRevert: DBXTeamLogEventType {
    @objc
    public var fileRevert: DBXTeamLogFileRevertType

    @objc
    public init(_ arg: DBXTeamLogFileRevertType) {
        self.fileRevert = arg
        let swift = TeamLog.EventType.fileRevert(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Rolled back file actions
@objc
public class DBXTeamLogEventTypeFileRollbackChanges: DBXTeamLogEventType {
    @objc
    public var fileRollbackChanges: DBXTeamLogFileRollbackChangesType

    @objc
    public init(_ arg: DBXTeamLogFileRollbackChangesType) {
        self.fileRollbackChanges = arg
        let swift = TeamLog.EventType.fileRollbackChanges(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Saved file/folder using copy reference
@objc
public class DBXTeamLogEventTypeFileSaveCopyReference: DBXTeamLogEventType {
    @objc
    public var fileSaveCopyReference: DBXTeamLogFileSaveCopyReferenceType

    @objc
    public init(_ arg: DBXTeamLogFileSaveCopyReferenceType) {
        self.fileSaveCopyReference = arg
        let swift = TeamLog.EventType.fileSaveCopyReference(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Updated folder overview
@objc
public class DBXTeamLogEventTypeFolderOverviewDescriptionChanged: DBXTeamLogEventType {
    @objc
    public var folderOverviewDescriptionChanged: DBXTeamLogFolderOverviewDescriptionChangedType

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewDescriptionChangedType) {
        self.folderOverviewDescriptionChanged = arg
        let swift = TeamLog.EventType.folderOverviewDescriptionChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Pinned item to folder overview
@objc
public class DBXTeamLogEventTypeFolderOverviewItemPinned: DBXTeamLogEventType {
    @objc
    public var folderOverviewItemPinned: DBXTeamLogFolderOverviewItemPinnedType

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewItemPinnedType) {
        self.folderOverviewItemPinned = arg
        let swift = TeamLog.EventType.folderOverviewItemPinned(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Unpinned item from folder overview
@objc
public class DBXTeamLogEventTypeFolderOverviewItemUnpinned: DBXTeamLogEventType {
    @objc
    public var folderOverviewItemUnpinned: DBXTeamLogFolderOverviewItemUnpinnedType

    @objc
    public init(_ arg: DBXTeamLogFolderOverviewItemUnpinnedType) {
        self.folderOverviewItemUnpinned = arg
        let swift = TeamLog.EventType.folderOverviewItemUnpinned(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Added a label
@objc
public class DBXTeamLogEventTypeObjectLabelAdded: DBXTeamLogEventType {
    @objc
    public var objectLabelAdded: DBXTeamLogObjectLabelAddedType

    @objc
    public init(_ arg: DBXTeamLogObjectLabelAddedType) {
        self.objectLabelAdded = arg
        let swift = TeamLog.EventType.objectLabelAdded(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Removed a label
@objc
public class DBXTeamLogEventTypeObjectLabelRemoved: DBXTeamLogEventType {
    @objc
    public var objectLabelRemoved: DBXTeamLogObjectLabelRemovedType

    @objc
    public init(_ arg: DBXTeamLogObjectLabelRemovedType) {
        self.objectLabelRemoved = arg
        let swift = TeamLog.EventType.objectLabelRemoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Updated a label's value
@objc
public class DBXTeamLogEventTypeObjectLabelUpdatedValue: DBXTeamLogEventType {
    @objc
    public var objectLabelUpdatedValue: DBXTeamLogObjectLabelUpdatedValueType

    @objc
    public init(_ arg: DBXTeamLogObjectLabelUpdatedValueType) {
        self.objectLabelUpdatedValue = arg
        let swift = TeamLog.EventType.objectLabelUpdatedValue(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Organized a folder with multi-file organize
@objc
public class DBXTeamLogEventTypeOrganizeFolderWithTidy: DBXTeamLogEventType {
    @objc
    public var organizeFolderWithTidy: DBXTeamLogOrganizeFolderWithTidyType

    @objc
    public init(_ arg: DBXTeamLogOrganizeFolderWithTidyType) {
        self.organizeFolderWithTidy = arg
        let swift = TeamLog.EventType.organizeFolderWithTidy(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Deleted files in Replay
@objc
public class DBXTeamLogEventTypeReplayFileDelete: DBXTeamLogEventType {
    @objc
    public var replayFileDelete: DBXTeamLogReplayFileDeleteType

    @objc
    public init(_ arg: DBXTeamLogReplayFileDeleteType) {
        self.replayFileDelete = arg
        let swift = TeamLog.EventType.replayFileDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Rewound a folder
@objc
public class DBXTeamLogEventTypeRewindFolder: DBXTeamLogEventType {
    @objc
    public var rewindFolder: DBXTeamLogRewindFolderType

    @objc
    public init(_ arg: DBXTeamLogRewindFolderType) {
        self.rewindFolder = arg
        let swift = TeamLog.EventType.rewindFolder(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Reverted naming convention
@objc
public class DBXTeamLogEventTypeUndoNamingConvention: DBXTeamLogEventType {
    @objc
    public var undoNamingConvention: DBXTeamLogUndoNamingConventionType

    @objc
    public init(_ arg: DBXTeamLogUndoNamingConventionType) {
        self.undoNamingConvention = arg
        let swift = TeamLog.EventType.undoNamingConvention(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Removed multi-file organize
@objc
public class DBXTeamLogEventTypeUndoOrganizeFolderWithTidy: DBXTeamLogEventType {
    @objc
    public var undoOrganizeFolderWithTidy: DBXTeamLogUndoOrganizeFolderWithTidyType

    @objc
    public init(_ arg: DBXTeamLogUndoOrganizeFolderWithTidyType) {
        self.undoOrganizeFolderWithTidy = arg
        let swift = TeamLog.EventType.undoOrganizeFolderWithTidy(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Tagged a file
@objc
public class DBXTeamLogEventTypeUserTagsAdded: DBXTeamLogEventType {
    @objc
    public var userTagsAdded: DBXTeamLogUserTagsAddedType

    @objc
    public init(_ arg: DBXTeamLogUserTagsAddedType) {
        self.userTagsAdded = arg
        let swift = TeamLog.EventType.userTagsAdded(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_operations) Removed tags
@objc
public class DBXTeamLogEventTypeUserTagsRemoved: DBXTeamLogEventType {
    @objc
    public var userTagsRemoved: DBXTeamLogUserTagsRemovedType

    @objc
    public init(_ arg: DBXTeamLogUserTagsRemovedType) {
        self.userTagsRemoved = arg
        let swift = TeamLog.EventType.userTagsRemoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Received files via Email to Dropbox
@objc
public class DBXTeamLogEventTypeEmailIngestReceiveFile: DBXTeamLogEventType {
    @objc
    public var emailIngestReceiveFile: DBXTeamLogEmailIngestReceiveFileType

    @objc
    public init(_ arg: DBXTeamLogEmailIngestReceiveFileType) {
        self.emailIngestReceiveFile = arg
        let swift = TeamLog.EventType.emailIngestReceiveFile(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Changed file request
@objc
public class DBXTeamLogEventTypeFileRequestChange: DBXTeamLogEventType {
    @objc
    public var fileRequestChange: DBXTeamLogFileRequestChangeType

    @objc
    public init(_ arg: DBXTeamLogFileRequestChangeType) {
        self.fileRequestChange = arg
        let swift = TeamLog.EventType.fileRequestChange(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Closed file request
@objc
public class DBXTeamLogEventTypeFileRequestClose: DBXTeamLogEventType {
    @objc
    public var fileRequestClose: DBXTeamLogFileRequestCloseType

    @objc
    public init(_ arg: DBXTeamLogFileRequestCloseType) {
        self.fileRequestClose = arg
        let swift = TeamLog.EventType.fileRequestClose(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Created file request
@objc
public class DBXTeamLogEventTypeFileRequestCreate: DBXTeamLogEventType {
    @objc
    public var fileRequestCreate: DBXTeamLogFileRequestCreateType

    @objc
    public init(_ arg: DBXTeamLogFileRequestCreateType) {
        self.fileRequestCreate = arg
        let swift = TeamLog.EventType.fileRequestCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Delete file request
@objc
public class DBXTeamLogEventTypeFileRequestDelete: DBXTeamLogEventType {
    @objc
    public var fileRequestDelete: DBXTeamLogFileRequestDeleteType

    @objc
    public init(_ arg: DBXTeamLogFileRequestDeleteType) {
        self.fileRequestDelete = arg
        let swift = TeamLog.EventType.fileRequestDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (file_requests) Received files for file request
@objc
public class DBXTeamLogEventTypeFileRequestReceiveFile: DBXTeamLogEventType {
    @objc
    public var fileRequestReceiveFile: DBXTeamLogFileRequestReceiveFileType

    @objc
    public init(_ arg: DBXTeamLogFileRequestReceiveFileType) {
        self.fileRequestReceiveFile = arg
        let swift = TeamLog.EventType.fileRequestReceiveFile(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Added external ID for group
@objc
public class DBXTeamLogEventTypeGroupAddExternalId: DBXTeamLogEventType {
    @objc
    public var groupAddExternalId: DBXTeamLogGroupAddExternalIdType

    @objc
    public init(_ arg: DBXTeamLogGroupAddExternalIdType) {
        self.groupAddExternalId = arg
        let swift = TeamLog.EventType.groupAddExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Added team members to group
@objc
public class DBXTeamLogEventTypeGroupAddMember: DBXTeamLogEventType {
    @objc
    public var groupAddMember: DBXTeamLogGroupAddMemberType

    @objc
    public init(_ arg: DBXTeamLogGroupAddMemberType) {
        self.groupAddMember = arg
        let swift = TeamLog.EventType.groupAddMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Changed external ID for group
@objc
public class DBXTeamLogEventTypeGroupChangeExternalId: DBXTeamLogEventType {
    @objc
    public var groupChangeExternalId: DBXTeamLogGroupChangeExternalIdType

    @objc
    public init(_ arg: DBXTeamLogGroupChangeExternalIdType) {
        self.groupChangeExternalId = arg
        let swift = TeamLog.EventType.groupChangeExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Changed group management type
@objc
public class DBXTeamLogEventTypeGroupChangeManagementType: DBXTeamLogEventType {
    @objc
    public var groupChangeManagementType: DBXTeamLogGroupChangeManagementTypeType

    @objc
    public init(_ arg: DBXTeamLogGroupChangeManagementTypeType) {
        self.groupChangeManagementType = arg
        let swift = TeamLog.EventType.groupChangeManagementType(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Changed manager permissions of group member
@objc
public class DBXTeamLogEventTypeGroupChangeMemberRole: DBXTeamLogEventType {
    @objc
    public var groupChangeMemberRole: DBXTeamLogGroupChangeMemberRoleType

    @objc
    public init(_ arg: DBXTeamLogGroupChangeMemberRoleType) {
        self.groupChangeMemberRole = arg
        let swift = TeamLog.EventType.groupChangeMemberRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Created group
@objc
public class DBXTeamLogEventTypeGroupCreate: DBXTeamLogEventType {
    @objc
    public var groupCreate: DBXTeamLogGroupCreateType

    @objc
    public init(_ arg: DBXTeamLogGroupCreateType) {
        self.groupCreate = arg
        let swift = TeamLog.EventType.groupCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Deleted group
@objc
public class DBXTeamLogEventTypeGroupDelete: DBXTeamLogEventType {
    @objc
    public var groupDelete: DBXTeamLogGroupDeleteType

    @objc
    public init(_ arg: DBXTeamLogGroupDeleteType) {
        self.groupDelete = arg
        let swift = TeamLog.EventType.groupDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Updated group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeGroupDescriptionUpdated: DBXTeamLogEventType {
    @objc
    public var groupDescriptionUpdated: DBXTeamLogGroupDescriptionUpdatedType

    @objc
    public init(_ arg: DBXTeamLogGroupDescriptionUpdatedType) {
        self.groupDescriptionUpdated = arg
        let swift = TeamLog.EventType.groupDescriptionUpdated(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Updated group join policy (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeGroupJoinPolicyUpdated: DBXTeamLogEventType {
    @objc
    public var groupJoinPolicyUpdated: DBXTeamLogGroupJoinPolicyUpdatedType

    @objc
    public init(_ arg: DBXTeamLogGroupJoinPolicyUpdatedType) {
        self.groupJoinPolicyUpdated = arg
        let swift = TeamLog.EventType.groupJoinPolicyUpdated(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Moved group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeGroupMoved: DBXTeamLogEventType {
    @objc
    public var groupMoved: DBXTeamLogGroupMovedType

    @objc
    public init(_ arg: DBXTeamLogGroupMovedType) {
        self.groupMoved = arg
        let swift = TeamLog.EventType.groupMoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Removed external ID for group
@objc
public class DBXTeamLogEventTypeGroupRemoveExternalId: DBXTeamLogEventType {
    @objc
    public var groupRemoveExternalId: DBXTeamLogGroupRemoveExternalIdType

    @objc
    public init(_ arg: DBXTeamLogGroupRemoveExternalIdType) {
        self.groupRemoveExternalId = arg
        let swift = TeamLog.EventType.groupRemoveExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Removed team members from group
@objc
public class DBXTeamLogEventTypeGroupRemoveMember: DBXTeamLogEventType {
    @objc
    public var groupRemoveMember: DBXTeamLogGroupRemoveMemberType

    @objc
    public init(_ arg: DBXTeamLogGroupRemoveMemberType) {
        self.groupRemoveMember = arg
        let swift = TeamLog.EventType.groupRemoveMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (groups) Renamed group
@objc
public class DBXTeamLogEventTypeGroupRename: DBXTeamLogEventType {
    @objc
    public var groupRename: DBXTeamLogGroupRenameType

    @objc
    public init(_ arg: DBXTeamLogGroupRenameType) {
        self.groupRename = arg
        let swift = TeamLog.EventType.groupRename(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Unlocked/locked account after failed sign in attempts
@objc
public class DBXTeamLogEventTypeAccountLockOrUnlocked: DBXTeamLogEventType {
    @objc
    public var accountLockOrUnlocked: DBXTeamLogAccountLockOrUnlockedType

    @objc
    public init(_ arg: DBXTeamLogAccountLockOrUnlockedType) {
        self.accountLockOrUnlocked = arg
        let swift = TeamLog.EventType.accountLockOrUnlocked(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign in')
@objc
public class DBXTeamLogEventTypeEmmError: DBXTeamLogEventType {
    @objc
    public var emmError: DBXTeamLogEmmErrorType

    @objc
    public init(_ arg: DBXTeamLogEmmErrorType) {
        self.emmError = arg
        let swift = TeamLog.EventType.emmError(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Started trusted team admin session
@objc
public class DBXTeamLogEventTypeGuestAdminSignedInViaTrustedTeams: DBXTeamLogEventType {
    @objc
    public var guestAdminSignedInViaTrustedTeams: DBXTeamLogGuestAdminSignedInViaTrustedTeamsType

    @objc
    public init(_ arg: DBXTeamLogGuestAdminSignedInViaTrustedTeamsType) {
        self.guestAdminSignedInViaTrustedTeams = arg
        let swift = TeamLog.EventType.guestAdminSignedInViaTrustedTeams(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Ended trusted team admin session
@objc
public class DBXTeamLogEventTypeGuestAdminSignedOutViaTrustedTeams: DBXTeamLogEventType {
    @objc
    public var guestAdminSignedOutViaTrustedTeams: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType

    @objc
    public init(_ arg: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType) {
        self.guestAdminSignedOutViaTrustedTeams = arg
        let swift = TeamLog.EventType.guestAdminSignedOutViaTrustedTeams(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in
@objc
public class DBXTeamLogEventTypeLoginFail: DBXTeamLogEventType {
    @objc
    public var loginFail: DBXTeamLogLoginFailType

    @objc
    public init(_ arg: DBXTeamLogLoginFailType) {
        self.loginFail = arg
        let swift = TeamLog.EventType.loginFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Signed in
@objc
public class DBXTeamLogEventTypeLoginSuccess: DBXTeamLogEventType {
    @objc
    public var loginSuccess: DBXTeamLogLoginSuccessType

    @objc
    public init(_ arg: DBXTeamLogLoginSuccessType) {
        self.loginSuccess = arg
        let swift = TeamLog.EventType.loginSuccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Signed out
@objc
public class DBXTeamLogEventTypeLogout: DBXTeamLogEventType {
    @objc
    public var logout: DBXTeamLogLogoutType

    @objc
    public init(_ arg: DBXTeamLogLogoutType) {
        self.logout = arg
        let swift = TeamLog.EventType.logout(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Ended reseller support session
@objc
public class DBXTeamLogEventTypeResellerSupportSessionEnd: DBXTeamLogEventType {
    @objc
    public var resellerSupportSessionEnd: DBXTeamLogResellerSupportSessionEndType

    @objc
    public init(_ arg: DBXTeamLogResellerSupportSessionEndType) {
        self.resellerSupportSessionEnd = arg
        let swift = TeamLog.EventType.resellerSupportSessionEnd(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Started reseller support session
@objc
public class DBXTeamLogEventTypeResellerSupportSessionStart: DBXTeamLogEventType {
    @objc
    public var resellerSupportSessionStart: DBXTeamLogResellerSupportSessionStartType

    @objc
    public init(_ arg: DBXTeamLogResellerSupportSessionStartType) {
        self.resellerSupportSessionStart = arg
        let swift = TeamLog.EventType.resellerSupportSessionStart(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Ended admin sign-in-as session
@objc
public class DBXTeamLogEventTypeSignInAsSessionEnd: DBXTeamLogEventType {
    @objc
    public var signInAsSessionEnd: DBXTeamLogSignInAsSessionEndType

    @objc
    public init(_ arg: DBXTeamLogSignInAsSessionEndType) {
        self.signInAsSessionEnd = arg
        let swift = TeamLog.EventType.signInAsSessionEnd(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Started admin sign-in-as session
@objc
public class DBXTeamLogEventTypeSignInAsSessionStart: DBXTeamLogEventType {
    @objc
    public var signInAsSessionStart: DBXTeamLogSignInAsSessionStartType

    @objc
    public init(_ arg: DBXTeamLogSignInAsSessionStartType) {
        self.signInAsSessionStart = arg
        let swift = TeamLog.EventType.signInAsSessionStart(arg.swift)
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign in')
@objc
public class DBXTeamLogEventTypeSsoError: DBXTeamLogEventType {
    @objc
    public var ssoError: DBXTeamLogSsoErrorType

    @objc
    public init(_ arg: DBXTeamLogSsoErrorType) {
        self.ssoError = arg
        let swift = TeamLog.EventType.ssoError(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Invited members to activate Backup
@objc
public class DBXTeamLogEventTypeBackupAdminInvitationSent: DBXTeamLogEventType {
    @objc
    public var backupAdminInvitationSent: DBXTeamLogBackupAdminInvitationSentType

    @objc
    public init(_ arg: DBXTeamLogBackupAdminInvitationSentType) {
        self.backupAdminInvitationSent = arg
        let swift = TeamLog.EventType.backupAdminInvitationSent(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Opened Backup invite
@objc
public class DBXTeamLogEventTypeBackupInvitationOpened: DBXTeamLogEventType {
    @objc
    public var backupInvitationOpened: DBXTeamLogBackupInvitationOpenedType

    @objc
    public init(_ arg: DBXTeamLogBackupInvitationOpenedType) {
        self.backupInvitationOpened = arg
        let swift = TeamLog.EventType.backupInvitationOpened(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Created team invite link
@objc
public class DBXTeamLogEventTypeCreateTeamInviteLink: DBXTeamLogEventType {
    @objc
    public var createTeamInviteLink: DBXTeamLogCreateTeamInviteLinkType

    @objc
    public init(_ arg: DBXTeamLogCreateTeamInviteLinkType) {
        self.createTeamInviteLink = arg
        let swift = TeamLog.EventType.createTeamInviteLink(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Deleted team invite link
@objc
public class DBXTeamLogEventTypeDeleteTeamInviteLink: DBXTeamLogEventType {
    @objc
    public var deleteTeamInviteLink: DBXTeamLogDeleteTeamInviteLinkType

    @objc
    public init(_ arg: DBXTeamLogDeleteTeamInviteLinkType) {
        self.deleteTeamInviteLink = arg
        let swift = TeamLog.EventType.deleteTeamInviteLink(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Added an external ID for team member
@objc
public class DBXTeamLogEventTypeMemberAddExternalId: DBXTeamLogEventType {
    @objc
    public var memberAddExternalId: DBXTeamLogMemberAddExternalIdType

    @objc
    public init(_ arg: DBXTeamLogMemberAddExternalIdType) {
        self.memberAddExternalId = arg
        let swift = TeamLog.EventType.memberAddExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Added team member name
@objc
public class DBXTeamLogEventTypeMemberAddName: DBXTeamLogEventType {
    @objc
    public var memberAddName: DBXTeamLogMemberAddNameType

    @objc
    public init(_ arg: DBXTeamLogMemberAddNameType) {
        self.memberAddName = arg
        let swift = TeamLog.EventType.memberAddName(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed team member admin role
@objc
public class DBXTeamLogEventTypeMemberChangeAdminRole: DBXTeamLogEventType {
    @objc
    public var memberChangeAdminRole: DBXTeamLogMemberChangeAdminRoleType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeAdminRoleType) {
        self.memberChangeAdminRole = arg
        let swift = TeamLog.EventType.memberChangeAdminRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed team member email
@objc
public class DBXTeamLogEventTypeMemberChangeEmail: DBXTeamLogEventType {
    @objc
    public var memberChangeEmail: DBXTeamLogMemberChangeEmailType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeEmailType) {
        self.memberChangeEmail = arg
        let swift = TeamLog.EventType.memberChangeEmail(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed the external ID for team member
@objc
public class DBXTeamLogEventTypeMemberChangeExternalId: DBXTeamLogEventType {
    @objc
    public var memberChangeExternalId: DBXTeamLogMemberChangeExternalIdType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeExternalIdType) {
        self.memberChangeExternalId = arg
        let swift = TeamLog.EventType.memberChangeExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed membership type (limited/full) of member (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeMemberChangeMembershipType: DBXTeamLogEventType {
    @objc
    public var memberChangeMembershipType: DBXTeamLogMemberChangeMembershipTypeType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeMembershipTypeType) {
        self.memberChangeMembershipType = arg
        let swift = TeamLog.EventType.memberChangeMembershipType(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed team member name
@objc
public class DBXTeamLogEventTypeMemberChangeName: DBXTeamLogEventType {
    @objc
    public var memberChangeName: DBXTeamLogMemberChangeNameType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeNameType) {
        self.memberChangeName = arg
        let swift = TeamLog.EventType.memberChangeName(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed team member reseller role
@objc
public class DBXTeamLogEventTypeMemberChangeResellerRole: DBXTeamLogEventType {
    @objc
    public var memberChangeResellerRole: DBXTeamLogMemberChangeResellerRoleType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeResellerRoleType) {
        self.memberChangeResellerRole = arg
        let swift = TeamLog.EventType.memberChangeResellerRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed member status (invited, joined, suspended, etc.)
@objc
public class DBXTeamLogEventTypeMemberChangeStatus: DBXTeamLogEventType {
    @objc
    public var memberChangeStatus: DBXTeamLogMemberChangeStatusType

    @objc
    public init(_ arg: DBXTeamLogMemberChangeStatusType) {
        self.memberChangeStatus = arg
        let swift = TeamLog.EventType.memberChangeStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Cleared manually added contacts
@objc
public class DBXTeamLogEventTypeMemberDeleteManualContacts: DBXTeamLogEventType {
    @objc
    public var memberDeleteManualContacts: DBXTeamLogMemberDeleteManualContactsType

    @objc
    public init(_ arg: DBXTeamLogMemberDeleteManualContactsType) {
        self.memberDeleteManualContacts = arg
        let swift = TeamLog.EventType.memberDeleteManualContacts(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Deleted team member profile photo
@objc
public class DBXTeamLogEventTypeMemberDeleteProfilePhoto: DBXTeamLogEventType {
    @objc
    public var memberDeleteProfilePhoto: DBXTeamLogMemberDeleteProfilePhotoType

    @objc
    public init(_ arg: DBXTeamLogMemberDeleteProfilePhotoType) {
        self.memberDeleteProfilePhoto = arg
        let swift = TeamLog.EventType.memberDeleteProfilePhoto(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Permanently deleted contents of deleted team member account
@objc
public class DBXTeamLogEventTypeMemberPermanentlyDeleteAccountContents: DBXTeamLogEventType {
    @objc
    public var memberPermanentlyDeleteAccountContents: DBXTeamLogMemberPermanentlyDeleteAccountContentsType

    @objc
    public init(_ arg: DBXTeamLogMemberPermanentlyDeleteAccountContentsType) {
        self.memberPermanentlyDeleteAccountContents = arg
        let swift = TeamLog.EventType.memberPermanentlyDeleteAccountContents(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Removed the external ID for team member
@objc
public class DBXTeamLogEventTypeMemberRemoveExternalId: DBXTeamLogEventType {
    @objc
    public var memberRemoveExternalId: DBXTeamLogMemberRemoveExternalIdType

    @objc
    public init(_ arg: DBXTeamLogMemberRemoveExternalIdType) {
        self.memberRemoveExternalId = arg
        let swift = TeamLog.EventType.memberRemoveExternalId(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Set team member profile photo
@objc
public class DBXTeamLogEventTypeMemberSetProfilePhoto: DBXTeamLogEventType {
    @objc
    public var memberSetProfilePhoto: DBXTeamLogMemberSetProfilePhotoType

    @objc
    public init(_ arg: DBXTeamLogMemberSetProfilePhotoType) {
        self.memberSetProfilePhoto = arg
        let swift = TeamLog.EventType.memberSetProfilePhoto(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Set custom member space limit
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsAddCustomQuota: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsAddCustomQuota: DBXTeamLogMemberSpaceLimitsAddCustomQuotaType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsAddCustomQuotaType) {
        self.memberSpaceLimitsAddCustomQuota = arg
        let swift = TeamLog.EventType.memberSpaceLimitsAddCustomQuota(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed custom member space limit
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsChangeCustomQuota: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsChangeCustomQuota: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType) {
        self.memberSpaceLimitsChangeCustomQuota = arg
        let swift = TeamLog.EventType.memberSpaceLimitsChangeCustomQuota(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Changed space limit status
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsChangeStatus: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsChangeStatus: DBXTeamLogMemberSpaceLimitsChangeStatusType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeStatusType) {
        self.memberSpaceLimitsChangeStatus = arg
        let swift = TeamLog.EventType.memberSpaceLimitsChangeStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Removed custom member space limit
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsRemoveCustomQuota: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsRemoveCustomQuota: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType) {
        self.memberSpaceLimitsRemoveCustomQuota = arg
        let swift = TeamLog.EventType.memberSpaceLimitsRemoveCustomQuota(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Suggested person to add to team
@objc
public class DBXTeamLogEventTypeMemberSuggest: DBXTeamLogEventType {
    @objc
    public var memberSuggest: DBXTeamLogMemberSuggestType

    @objc
    public init(_ arg: DBXTeamLogMemberSuggestType) {
        self.memberSuggest = arg
        let swift = TeamLog.EventType.memberSuggest(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Transferred contents of deleted member account to another member
@objc
public class DBXTeamLogEventTypeMemberTransferAccountContents: DBXTeamLogEventType {
    @objc
    public var memberTransferAccountContents: DBXTeamLogMemberTransferAccountContentsType

    @objc
    public init(_ arg: DBXTeamLogMemberTransferAccountContentsType) {
        self.memberTransferAccountContents = arg
        let swift = TeamLog.EventType.memberTransferAccountContents(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Added pending secondary email
@objc
public class DBXTeamLogEventTypePendingSecondaryEmailAdded: DBXTeamLogEventType {
    @objc
    public var pendingSecondaryEmailAdded: DBXTeamLogPendingSecondaryEmailAddedType

    @objc
    public init(_ arg: DBXTeamLogPendingSecondaryEmailAddedType) {
        self.pendingSecondaryEmailAdded = arg
        let swift = TeamLog.EventType.pendingSecondaryEmailAdded(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Deleted secondary email
@objc
public class DBXTeamLogEventTypeSecondaryEmailDeleted: DBXTeamLogEventType {
    @objc
    public var secondaryEmailDeleted: DBXTeamLogSecondaryEmailDeletedType

    @objc
    public init(_ arg: DBXTeamLogSecondaryEmailDeletedType) {
        self.secondaryEmailDeleted = arg
        let swift = TeamLog.EventType.secondaryEmailDeleted(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Verified secondary email
@objc
public class DBXTeamLogEventTypeSecondaryEmailVerified: DBXTeamLogEventType {
    @objc
    public var secondaryEmailVerified: DBXTeamLogSecondaryEmailVerifiedType

    @objc
    public init(_ arg: DBXTeamLogSecondaryEmailVerifiedType) {
        self.secondaryEmailVerified = arg
        let swift = TeamLog.EventType.secondaryEmailVerified(arg.swift)
        super.init(swift: swift)
    }
}

/// (members) Secondary mails policy changed
@objc
public class DBXTeamLogEventTypeSecondaryMailsPolicyChanged: DBXTeamLogEventType {
    @objc
    public var secondaryMailsPolicyChanged: DBXTeamLogSecondaryMailsPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogSecondaryMailsPolicyChangedType) {
        self.secondaryMailsPolicyChanged = arg
        let swift = TeamLog.EventType.secondaryMailsPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Added Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderAddPage: DBXTeamLogEventType {
    @objc
    public var binderAddPage: DBXTeamLogBinderAddPageType

    @objc
    public init(_ arg: DBXTeamLogBinderAddPageType) {
        self.binderAddPage = arg
        let swift = TeamLog.EventType.binderAddPage(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Added Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderAddSection: DBXTeamLogEventType {
    @objc
    public var binderAddSection: DBXTeamLogBinderAddSectionType

    @objc
    public init(_ arg: DBXTeamLogBinderAddSectionType) {
        self.binderAddSection = arg
        let swift = TeamLog.EventType.binderAddSection(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Removed Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderRemovePage: DBXTeamLogEventType {
    @objc
    public var binderRemovePage: DBXTeamLogBinderRemovePageType

    @objc
    public init(_ arg: DBXTeamLogBinderRemovePageType) {
        self.binderRemovePage = arg
        let swift = TeamLog.EventType.binderRemovePage(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Removed Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderRemoveSection: DBXTeamLogEventType {
    @objc
    public var binderRemoveSection: DBXTeamLogBinderRemoveSectionType

    @objc
    public init(_ arg: DBXTeamLogBinderRemoveSectionType) {
        self.binderRemoveSection = arg
        let swift = TeamLog.EventType.binderRemoveSection(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderRenamePage: DBXTeamLogEventType {
    @objc
    public var binderRenamePage: DBXTeamLogBinderRenamePageType

    @objc
    public init(_ arg: DBXTeamLogBinderRenamePageType) {
        self.binderRenamePage = arg
        let swift = TeamLog.EventType.binderRenamePage(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Renamed Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderRenameSection: DBXTeamLogEventType {
    @objc
    public var binderRenameSection: DBXTeamLogBinderRenameSectionType

    @objc
    public init(_ arg: DBXTeamLogBinderRenameSectionType) {
        self.binderRenameSection = arg
        let swift = TeamLog.EventType.binderRenameSection(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Reordered Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderReorderPage: DBXTeamLogEventType {
    @objc
    public var binderReorderPage: DBXTeamLogBinderReorderPageType

    @objc
    public init(_ arg: DBXTeamLogBinderReorderPageType) {
        self.binderReorderPage = arg
        let swift = TeamLog.EventType.binderReorderPage(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Reordered Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeBinderReorderSection: DBXTeamLogEventType {
    @objc
    public var binderReorderSection: DBXTeamLogBinderReorderSectionType

    @objc
    public init(_ arg: DBXTeamLogBinderReorderSectionType) {
        self.binderReorderSection = arg
        let swift = TeamLog.EventType.binderReorderSection(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Added users and/or groups to Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentAddMember: DBXTeamLogEventType {
    @objc
    public var paperContentAddMember: DBXTeamLogPaperContentAddMemberType

    @objc
    public init(_ arg: DBXTeamLogPaperContentAddMemberType) {
        self.paperContentAddMember = arg
        let swift = TeamLog.EventType.paperContentAddMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Added Paper doc/folder to folder
@objc
public class DBXTeamLogEventTypePaperContentAddToFolder: DBXTeamLogEventType {
    @objc
    public var paperContentAddToFolder: DBXTeamLogPaperContentAddToFolderType

    @objc
    public init(_ arg: DBXTeamLogPaperContentAddToFolderType) {
        self.paperContentAddToFolder = arg
        let swift = TeamLog.EventType.paperContentAddToFolder(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentArchive: DBXTeamLogEventType {
    @objc
    public var paperContentArchive: DBXTeamLogPaperContentArchiveType

    @objc
    public init(_ arg: DBXTeamLogPaperContentArchiveType) {
        self.paperContentArchive = arg
        let swift = TeamLog.EventType.paperContentArchive(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Created Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentCreate: DBXTeamLogEventType {
    @objc
    public var paperContentCreate: DBXTeamLogPaperContentCreateType

    @objc
    public init(_ arg: DBXTeamLogPaperContentCreateType) {
        self.paperContentCreate = arg
        let swift = TeamLog.EventType.paperContentCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Permanently deleted Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentPermanentlyDelete: DBXTeamLogEventType {
    @objc
    public var paperContentPermanentlyDelete: DBXTeamLogPaperContentPermanentlyDeleteType

    @objc
    public init(_ arg: DBXTeamLogPaperContentPermanentlyDeleteType) {
        self.paperContentPermanentlyDelete = arg
        let swift = TeamLog.EventType.paperContentPermanentlyDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Removed Paper doc/folder from folder
@objc
public class DBXTeamLogEventTypePaperContentRemoveFromFolder: DBXTeamLogEventType {
    @objc
    public var paperContentRemoveFromFolder: DBXTeamLogPaperContentRemoveFromFolderType

    @objc
    public init(_ arg: DBXTeamLogPaperContentRemoveFromFolderType) {
        self.paperContentRemoveFromFolder = arg
        let swift = TeamLog.EventType.paperContentRemoveFromFolder(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Removed users and/or groups from Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentRemoveMember: DBXTeamLogEventType {
    @objc
    public var paperContentRemoveMember: DBXTeamLogPaperContentRemoveMemberType

    @objc
    public init(_ arg: DBXTeamLogPaperContentRemoveMemberType) {
        self.paperContentRemoveMember = arg
        let swift = TeamLog.EventType.paperContentRemoveMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Renamed Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentRename: DBXTeamLogEventType {
    @objc
    public var paperContentRename: DBXTeamLogPaperContentRenameType

    @objc
    public init(_ arg: DBXTeamLogPaperContentRenameType) {
        self.paperContentRename = arg
        let swift = TeamLog.EventType.paperContentRename(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Restored archived Paper doc/folder
@objc
public class DBXTeamLogEventTypePaperContentRestore: DBXTeamLogEventType {
    @objc
    public var paperContentRestore: DBXTeamLogPaperContentRestoreType

    @objc
    public init(_ arg: DBXTeamLogPaperContentRestoreType) {
        self.paperContentRestore = arg
        let swift = TeamLog.EventType.paperContentRestore(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Added Paper doc comment
@objc
public class DBXTeamLogEventTypePaperDocAddComment: DBXTeamLogEventType {
    @objc
    public var paperDocAddComment: DBXTeamLogPaperDocAddCommentType

    @objc
    public init(_ arg: DBXTeamLogPaperDocAddCommentType) {
        self.paperDocAddComment = arg
        let swift = TeamLog.EventType.paperDocAddComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed member permissions for Paper doc
@objc
public class DBXTeamLogEventTypePaperDocChangeMemberRole: DBXTeamLogEventType {
    @objc
    public var paperDocChangeMemberRole: DBXTeamLogPaperDocChangeMemberRoleType

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeMemberRoleType) {
        self.paperDocChangeMemberRole = arg
        let swift = TeamLog.EventType.paperDocChangeMemberRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed sharing setting for Paper doc
@objc
public class DBXTeamLogEventTypePaperDocChangeSharingPolicy: DBXTeamLogEventType {
    @objc
    public var paperDocChangeSharingPolicy: DBXTeamLogPaperDocChangeSharingPolicyType

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeSharingPolicyType) {
        self.paperDocChangeSharingPolicy = arg
        let swift = TeamLog.EventType.paperDocChangeSharingPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Followed/unfollowed Paper doc
@objc
public class DBXTeamLogEventTypePaperDocChangeSubscription: DBXTeamLogEventType {
    @objc
    public var paperDocChangeSubscription: DBXTeamLogPaperDocChangeSubscriptionType

    @objc
    public init(_ arg: DBXTeamLogPaperDocChangeSubscriptionType) {
        self.paperDocChangeSubscription = arg
        let swift = TeamLog.EventType.paperDocChangeSubscription(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperDocDeleted: DBXTeamLogEventType {
    @objc
    public var paperDocDeleted: DBXTeamLogPaperDocDeletedType

    @objc
    public init(_ arg: DBXTeamLogPaperDocDeletedType) {
        self.paperDocDeleted = arg
        let swift = TeamLog.EventType.paperDocDeleted(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Deleted Paper doc comment
@objc
public class DBXTeamLogEventTypePaperDocDeleteComment: DBXTeamLogEventType {
    @objc
    public var paperDocDeleteComment: DBXTeamLogPaperDocDeleteCommentType

    @objc
    public init(_ arg: DBXTeamLogPaperDocDeleteCommentType) {
        self.paperDocDeleteComment = arg
        let swift = TeamLog.EventType.paperDocDeleteComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Downloaded Paper doc in specific format
@objc
public class DBXTeamLogEventTypePaperDocDownload: DBXTeamLogEventType {
    @objc
    public var paperDocDownload: DBXTeamLogPaperDocDownloadType

    @objc
    public init(_ arg: DBXTeamLogPaperDocDownloadType) {
        self.paperDocDownload = arg
        let swift = TeamLog.EventType.paperDocDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Edited Paper doc
@objc
public class DBXTeamLogEventTypePaperDocEdit: DBXTeamLogEventType {
    @objc
    public var paperDocEdit: DBXTeamLogPaperDocEditType

    @objc
    public init(_ arg: DBXTeamLogPaperDocEditType) {
        self.paperDocEdit = arg
        let swift = TeamLog.EventType.paperDocEdit(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Edited Paper doc comment
@objc
public class DBXTeamLogEventTypePaperDocEditComment: DBXTeamLogEventType {
    @objc
    public var paperDocEditComment: DBXTeamLogPaperDocEditCommentType

    @objc
    public init(_ arg: DBXTeamLogPaperDocEditCommentType) {
        self.paperDocEditComment = arg
        let swift = TeamLog.EventType.paperDocEditComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
@objc
public class DBXTeamLogEventTypePaperDocFollowed: DBXTeamLogEventType {
    @objc
    public var paperDocFollowed: DBXTeamLogPaperDocFollowedType

    @objc
    public init(_ arg: DBXTeamLogPaperDocFollowedType) {
        self.paperDocFollowed = arg
        let swift = TeamLog.EventType.paperDocFollowed(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Mentioned user in Paper doc
@objc
public class DBXTeamLogEventTypePaperDocMention: DBXTeamLogEventType {
    @objc
    public var paperDocMention: DBXTeamLogPaperDocMentionType

    @objc
    public init(_ arg: DBXTeamLogPaperDocMentionType) {
        self.paperDocMention = arg
        let swift = TeamLog.EventType.paperDocMention(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Transferred ownership of Paper doc
@objc
public class DBXTeamLogEventTypePaperDocOwnershipChanged: DBXTeamLogEventType {
    @objc
    public var paperDocOwnershipChanged: DBXTeamLogPaperDocOwnershipChangedType

    @objc
    public init(_ arg: DBXTeamLogPaperDocOwnershipChangedType) {
        self.paperDocOwnershipChanged = arg
        let swift = TeamLog.EventType.paperDocOwnershipChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Requested access to Paper doc
@objc
public class DBXTeamLogEventTypePaperDocRequestAccess: DBXTeamLogEventType {
    @objc
    public var paperDocRequestAccess: DBXTeamLogPaperDocRequestAccessType

    @objc
    public init(_ arg: DBXTeamLogPaperDocRequestAccessType) {
        self.paperDocRequestAccess = arg
        let swift = TeamLog.EventType.paperDocRequestAccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Resolved Paper doc comment
@objc
public class DBXTeamLogEventTypePaperDocResolveComment: DBXTeamLogEventType {
    @objc
    public var paperDocResolveComment: DBXTeamLogPaperDocResolveCommentType

    @objc
    public init(_ arg: DBXTeamLogPaperDocResolveCommentType) {
        self.paperDocResolveComment = arg
        let swift = TeamLog.EventType.paperDocResolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Restored Paper doc to previous version
@objc
public class DBXTeamLogEventTypePaperDocRevert: DBXTeamLogEventType {
    @objc
    public var paperDocRevert: DBXTeamLogPaperDocRevertType

    @objc
    public init(_ arg: DBXTeamLogPaperDocRevertType) {
        self.paperDocRevert = arg
        let swift = TeamLog.EventType.paperDocRevert(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper doc via Slack
@objc
public class DBXTeamLogEventTypePaperDocSlackShare: DBXTeamLogEventType {
    @objc
    public var paperDocSlackShare: DBXTeamLogPaperDocSlackShareType

    @objc
    public init(_ arg: DBXTeamLogPaperDocSlackShareType) {
        self.paperDocSlackShare = arg
        let swift = TeamLog.EventType.paperDocSlackShare(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper doc with users and/or groups (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperDocTeamInvite: DBXTeamLogEventType {
    @objc
    public var paperDocTeamInvite: DBXTeamLogPaperDocTeamInviteType

    @objc
    public init(_ arg: DBXTeamLogPaperDocTeamInviteType) {
        self.paperDocTeamInvite = arg
        let swift = TeamLog.EventType.paperDocTeamInvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Deleted Paper doc
@objc
public class DBXTeamLogEventTypePaperDocTrashed: DBXTeamLogEventType {
    @objc
    public var paperDocTrashed: DBXTeamLogPaperDocTrashedType

    @objc
    public init(_ arg: DBXTeamLogPaperDocTrashedType) {
        self.paperDocTrashed = arg
        let swift = TeamLog.EventType.paperDocTrashed(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Unresolved Paper doc comment
@objc
public class DBXTeamLogEventTypePaperDocUnresolveComment: DBXTeamLogEventType {
    @objc
    public var paperDocUnresolveComment: DBXTeamLogPaperDocUnresolveCommentType

    @objc
    public init(_ arg: DBXTeamLogPaperDocUnresolveCommentType) {
        self.paperDocUnresolveComment = arg
        let swift = TeamLog.EventType.paperDocUnresolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Restored Paper doc
@objc
public class DBXTeamLogEventTypePaperDocUntrashed: DBXTeamLogEventType {
    @objc
    public var paperDocUntrashed: DBXTeamLogPaperDocUntrashedType

    @objc
    public init(_ arg: DBXTeamLogPaperDocUntrashedType) {
        self.paperDocUntrashed = arg
        let swift = TeamLog.EventType.paperDocUntrashed(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Viewed Paper doc
@objc
public class DBXTeamLogEventTypePaperDocView: DBXTeamLogEventType {
    @objc
    public var paperDocView: DBXTeamLogPaperDocViewType

    @objc
    public init(_ arg: DBXTeamLogPaperDocViewType) {
        self.paperDocView = arg
        let swift = TeamLog.EventType.paperDocView(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to anyone (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperExternalViewAllow: DBXTeamLogEventType {
    @objc
    public var paperExternalViewAllow: DBXTeamLogPaperExternalViewAllowType

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewAllowType) {
        self.paperExternalViewAllow = arg
        let swift = TeamLog.EventType.paperExternalViewAllow(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to default team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperExternalViewDefaultTeam: DBXTeamLogEventType {
    @objc
    public var paperExternalViewDefaultTeam: DBXTeamLogPaperExternalViewDefaultTeamType

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewDefaultTeamType) {
        self.paperExternalViewDefaultTeam = arg
        let swift = TeamLog.EventType.paperExternalViewDefaultTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to team-only (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperExternalViewForbid: DBXTeamLogEventType {
    @objc
    public var paperExternalViewForbid: DBXTeamLogPaperExternalViewForbidType

    @objc
    public init(_ arg: DBXTeamLogPaperExternalViewForbidType) {
        self.paperExternalViewForbid = arg
        let swift = TeamLog.EventType.paperExternalViewForbid(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Followed/unfollowed Paper folder
@objc
public class DBXTeamLogEventTypePaperFolderChangeSubscription: DBXTeamLogEventType {
    @objc
    public var paperFolderChangeSubscription: DBXTeamLogPaperFolderChangeSubscriptionType

    @objc
    public init(_ arg: DBXTeamLogPaperFolderChangeSubscriptionType) {
        self.paperFolderChangeSubscription = arg
        let swift = TeamLog.EventType.paperFolderChangeSubscription(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperFolderDeleted: DBXTeamLogEventType {
    @objc
    public var paperFolderDeleted: DBXTeamLogPaperFolderDeletedType

    @objc
    public init(_ arg: DBXTeamLogPaperFolderDeletedType) {
        self.paperFolderDeleted = arg
        let swift = TeamLog.EventType.paperFolderDeleted(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
@objc
public class DBXTeamLogEventTypePaperFolderFollowed: DBXTeamLogEventType {
    @objc
    public var paperFolderFollowed: DBXTeamLogPaperFolderFollowedType

    @objc
    public init(_ arg: DBXTeamLogPaperFolderFollowedType) {
        self.paperFolderFollowed = arg
        let swift = TeamLog.EventType.paperFolderFollowed(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper folder with users and/or groups (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperFolderTeamInvite: DBXTeamLogEventType {
    @objc
    public var paperFolderTeamInvite: DBXTeamLogPaperFolderTeamInviteType

    @objc
    public init(_ arg: DBXTeamLogPaperFolderTeamInviteType) {
        self.paperFolderTeamInvite = arg
        let swift = TeamLog.EventType.paperFolderTeamInvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Changed permissions for published doc
@objc
public class DBXTeamLogEventTypePaperPublishedLinkChangePermission: DBXTeamLogEventType {
    @objc
    public var paperPublishedLinkChangePermission: DBXTeamLogPaperPublishedLinkChangePermissionType

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkChangePermissionType) {
        self.paperPublishedLinkChangePermission = arg
        let swift = TeamLog.EventType.paperPublishedLinkChangePermission(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Published doc
@objc
public class DBXTeamLogEventTypePaperPublishedLinkCreate: DBXTeamLogEventType {
    @objc
    public var paperPublishedLinkCreate: DBXTeamLogPaperPublishedLinkCreateType

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkCreateType) {
        self.paperPublishedLinkCreate = arg
        let swift = TeamLog.EventType.paperPublishedLinkCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Unpublished doc
@objc
public class DBXTeamLogEventTypePaperPublishedLinkDisabled: DBXTeamLogEventType {
    @objc
    public var paperPublishedLinkDisabled: DBXTeamLogPaperPublishedLinkDisabledType

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkDisabledType) {
        self.paperPublishedLinkDisabled = arg
        let swift = TeamLog.EventType.paperPublishedLinkDisabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (paper) Viewed published doc
@objc
public class DBXTeamLogEventTypePaperPublishedLinkView: DBXTeamLogEventType {
    @objc
    public var paperPublishedLinkView: DBXTeamLogPaperPublishedLinkViewType

    @objc
    public init(_ arg: DBXTeamLogPaperPublishedLinkViewType) {
        self.paperPublishedLinkView = arg
        let swift = TeamLog.EventType.paperPublishedLinkView(arg.swift)
        super.init(swift: swift)
    }
}

/// (passwords) Changed password
@objc
public class DBXTeamLogEventTypePasswordChange: DBXTeamLogEventType {
    @objc
    public var passwordChange: DBXTeamLogPasswordChangeType

    @objc
    public init(_ arg: DBXTeamLogPasswordChangeType) {
        self.passwordChange = arg
        let swift = TeamLog.EventType.passwordChange(arg.swift)
        super.init(swift: swift)
    }
}

/// (passwords) Reset password
@objc
public class DBXTeamLogEventTypePasswordReset: DBXTeamLogEventType {
    @objc
    public var passwordReset: DBXTeamLogPasswordResetType

    @objc
    public init(_ arg: DBXTeamLogPasswordResetType) {
        self.passwordReset = arg
        let swift = TeamLog.EventType.passwordReset(arg.swift)
        super.init(swift: swift)
    }
}

/// (passwords) Reset all team member passwords
@objc
public class DBXTeamLogEventTypePasswordResetAll: DBXTeamLogEventType {
    @objc
    public var passwordResetAll: DBXTeamLogPasswordResetAllType

    @objc
    public init(_ arg: DBXTeamLogPasswordResetAllType) {
        self.passwordResetAll = arg
        let swift = TeamLog.EventType.passwordResetAll(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created Classification report
@objc
public class DBXTeamLogEventTypeClassificationCreateReport: DBXTeamLogEventType {
    @objc
    public var classificationCreateReport: DBXTeamLogClassificationCreateReportType

    @objc
    public init(_ arg: DBXTeamLogClassificationCreateReportType) {
        self.classificationCreateReport = arg
        let swift = TeamLog.EventType.classificationCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create Classification report
@objc
public class DBXTeamLogEventTypeClassificationCreateReportFail: DBXTeamLogEventType {
    @objc
    public var classificationCreateReportFail: DBXTeamLogClassificationCreateReportFailType

    @objc
    public init(_ arg: DBXTeamLogClassificationCreateReportFailType) {
        self.classificationCreateReportFail = arg
        let swift = TeamLog.EventType.classificationCreateReportFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created EMM-excluded users report
@objc
public class DBXTeamLogEventTypeEmmCreateExceptionsReport: DBXTeamLogEventType {
    @objc
    public var emmCreateExceptionsReport: DBXTeamLogEmmCreateExceptionsReportType

    @objc
    public init(_ arg: DBXTeamLogEmmCreateExceptionsReportType) {
        self.emmCreateExceptionsReport = arg
        let swift = TeamLog.EventType.emmCreateExceptionsReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created EMM mobile app usage report
@objc
public class DBXTeamLogEventTypeEmmCreateUsageReport: DBXTeamLogEventType {
    @objc
    public var emmCreateUsageReport: DBXTeamLogEmmCreateUsageReportType

    @objc
    public init(_ arg: DBXTeamLogEmmCreateUsageReportType) {
        self.emmCreateUsageReport = arg
        let swift = TeamLog.EventType.emmCreateUsageReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created member data report
@objc
public class DBXTeamLogEventTypeExportMembersReport: DBXTeamLogEventType {
    @objc
    public var exportMembersReport: DBXTeamLogExportMembersReportType

    @objc
    public init(_ arg: DBXTeamLogExportMembersReportType) {
        self.exportMembersReport = arg
        let swift = TeamLog.EventType.exportMembersReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Failed to create members data report
@objc
public class DBXTeamLogEventTypeExportMembersReportFail: DBXTeamLogEventType {
    @objc
    public var exportMembersReportFail: DBXTeamLogExportMembersReportFailType

    @objc
    public init(_ arg: DBXTeamLogExportMembersReportFailType) {
        self.exportMembersReportFail = arg
        let swift = TeamLog.EventType.exportMembersReportFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created External sharing report
@objc
public class DBXTeamLogEventTypeExternalSharingCreateReport: DBXTeamLogEventType {
    @objc
    public var externalSharingCreateReport: DBXTeamLogExternalSharingCreateReportType

    @objc
    public init(_ arg: DBXTeamLogExternalSharingCreateReportType) {
        self.externalSharingCreateReport = arg
        let swift = TeamLog.EventType.externalSharingCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create External sharing report
@objc
public class DBXTeamLogEventTypeExternalSharingReportFailed: DBXTeamLogEventType {
    @objc
    public var externalSharingReportFailed: DBXTeamLogExternalSharingReportFailedType

    @objc
    public init(_ arg: DBXTeamLogExternalSharingReportFailedType) {
        self.externalSharingReportFailed = arg
        let swift = TeamLog.EventType.externalSharingReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Report created: Links created with no expiration
@objc
public class DBXTeamLogEventTypeNoExpirationLinkGenCreateReport: DBXTeamLogEventType {
    @objc
    public var noExpirationLinkGenCreateReport: DBXTeamLogNoExpirationLinkGenCreateReportType

    @objc
    public init(_ arg: DBXTeamLogNoExpirationLinkGenCreateReportType) {
        self.noExpirationLinkGenCreateReport = arg
        let swift = TeamLog.EventType.noExpirationLinkGenCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Links created with no expiration
@objc
public class DBXTeamLogEventTypeNoExpirationLinkGenReportFailed: DBXTeamLogEventType {
    @objc
    public var noExpirationLinkGenReportFailed: DBXTeamLogNoExpirationLinkGenReportFailedType

    @objc
    public init(_ arg: DBXTeamLogNoExpirationLinkGenReportFailedType) {
        self.noExpirationLinkGenReportFailed = arg
        let swift = TeamLog.EventType.noExpirationLinkGenReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Report created: Links created without passwords
@objc
public class DBXTeamLogEventTypeNoPasswordLinkGenCreateReport: DBXTeamLogEventType {
    @objc
    public var noPasswordLinkGenCreateReport: DBXTeamLogNoPasswordLinkGenCreateReportType

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkGenCreateReportType) {
        self.noPasswordLinkGenCreateReport = arg
        let swift = TeamLog.EventType.noPasswordLinkGenCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Links created without passwords
@objc
public class DBXTeamLogEventTypeNoPasswordLinkGenReportFailed: DBXTeamLogEventType {
    @objc
    public var noPasswordLinkGenReportFailed: DBXTeamLogNoPasswordLinkGenReportFailedType

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkGenReportFailedType) {
        self.noPasswordLinkGenReportFailed = arg
        let swift = TeamLog.EventType.noPasswordLinkGenReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Report created: Views of links without passwords
@objc
public class DBXTeamLogEventTypeNoPasswordLinkViewCreateReport: DBXTeamLogEventType {
    @objc
    public var noPasswordLinkViewCreateReport: DBXTeamLogNoPasswordLinkViewCreateReportType

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkViewCreateReportType) {
        self.noPasswordLinkViewCreateReport = arg
        let swift = TeamLog.EventType.noPasswordLinkViewCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Views of links without passwords
@objc
public class DBXTeamLogEventTypeNoPasswordLinkViewReportFailed: DBXTeamLogEventType {
    @objc
    public var noPasswordLinkViewReportFailed: DBXTeamLogNoPasswordLinkViewReportFailedType

    @objc
    public init(_ arg: DBXTeamLogNoPasswordLinkViewReportFailedType) {
        self.noPasswordLinkViewReportFailed = arg
        let swift = TeamLog.EventType.noPasswordLinkViewReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Report created: Views of old links
@objc
public class DBXTeamLogEventTypeOutdatedLinkViewCreateReport: DBXTeamLogEventType {
    @objc
    public var outdatedLinkViewCreateReport: DBXTeamLogOutdatedLinkViewCreateReportType

    @objc
    public init(_ arg: DBXTeamLogOutdatedLinkViewCreateReportType) {
        self.outdatedLinkViewCreateReport = arg
        let swift = TeamLog.EventType.outdatedLinkViewCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Views of old links
@objc
public class DBXTeamLogEventTypeOutdatedLinkViewReportFailed: DBXTeamLogEventType {
    @objc
    public var outdatedLinkViewReportFailed: DBXTeamLogOutdatedLinkViewReportFailedType

    @objc
    public init(_ arg: DBXTeamLogOutdatedLinkViewReportFailedType) {
        self.outdatedLinkViewReportFailed = arg
        let swift = TeamLog.EventType.outdatedLinkViewReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Exported all team Paper docs
@objc
public class DBXTeamLogEventTypePaperAdminExportStart: DBXTeamLogEventType {
    @objc
    public var paperAdminExportStart: DBXTeamLogPaperAdminExportStartType

    @objc
    public init(_ arg: DBXTeamLogPaperAdminExportStartType) {
        self.paperAdminExportStart = arg
        let swift = TeamLog.EventType.paperAdminExportStart(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created ransomware report
@objc
public class DBXTeamLogEventTypeRansomwareAlertCreateReport: DBXTeamLogEventType {
    @objc
    public var ransomwareAlertCreateReport: DBXTeamLogRansomwareAlertCreateReportType

    @objc
    public init(_ arg: DBXTeamLogRansomwareAlertCreateReportType) {
        self.ransomwareAlertCreateReport = arg
        let swift = TeamLog.EventType.ransomwareAlertCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't generate ransomware report
@objc
public class DBXTeamLogEventTypeRansomwareAlertCreateReportFailed: DBXTeamLogEventType {
    @objc
    public var ransomwareAlertCreateReportFailed: DBXTeamLogRansomwareAlertCreateReportFailedType

    @objc
    public init(_ arg: DBXTeamLogRansomwareAlertCreateReportFailedType) {
        self.ransomwareAlertCreateReportFailed = arg
        let swift = TeamLog.EventType.ransomwareAlertCreateReportFailed(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created Smart Sync non-admin devices report
@objc
public class DBXTeamLogEventTypeSmartSyncCreateAdminPrivilegeReport: DBXTeamLogEventType {
    @objc
    public var smartSyncCreateAdminPrivilegeReport: DBXTeamLogSmartSyncCreateAdminPrivilegeReportType

    @objc
    public init(_ arg: DBXTeamLogSmartSyncCreateAdminPrivilegeReportType) {
        self.smartSyncCreateAdminPrivilegeReport = arg
        let swift = TeamLog.EventType.smartSyncCreateAdminPrivilegeReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Created team activity report
@objc
public class DBXTeamLogEventTypeTeamActivityCreateReport: DBXTeamLogEventType {
    @objc
    public var teamActivityCreateReport: DBXTeamLogTeamActivityCreateReportType

    @objc
    public init(_ arg: DBXTeamLogTeamActivityCreateReportType) {
        self.teamActivityCreateReport = arg
        let swift = TeamLog.EventType.teamActivityCreateReport(arg.swift)
        super.init(swift: swift)
    }
}

/// (reports) Couldn't generate team activity report
@objc
public class DBXTeamLogEventTypeTeamActivityCreateReportFail: DBXTeamLogEventType {
    @objc
    public var teamActivityCreateReportFail: DBXTeamLogTeamActivityCreateReportFailType

    @objc
    public init(_ arg: DBXTeamLogTeamActivityCreateReportFailType) {
        self.teamActivityCreateReportFail = arg
        let swift = TeamLog.EventType.teamActivityCreateReportFail(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Shared album
@objc
public class DBXTeamLogEventTypeCollectionShare: DBXTeamLogEventType {
    @objc
    public var collectionShare: DBXTeamLogCollectionShareType

    @objc
    public init(_ arg: DBXTeamLogCollectionShareType) {
        self.collectionShare = arg
        let swift = TeamLog.EventType.collectionShare(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Transfer files added
@objc
public class DBXTeamLogEventTypeFileTransfersFileAdd: DBXTeamLogEventType {
    @objc
    public var fileTransfersFileAdd: DBXTeamLogFileTransfersFileAddType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersFileAddType) {
        self.fileTransfersFileAdd = arg
        let swift = TeamLog.EventType.fileTransfersFileAdd(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Deleted transfer
@objc
public class DBXTeamLogEventTypeFileTransfersTransferDelete: DBXTeamLogEventType {
    @objc
    public var fileTransfersTransferDelete: DBXTeamLogFileTransfersTransferDeleteType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferDeleteType) {
        self.fileTransfersTransferDelete = arg
        let swift = TeamLog.EventType.fileTransfersTransferDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Transfer downloaded
@objc
public class DBXTeamLogEventTypeFileTransfersTransferDownload: DBXTeamLogEventType {
    @objc
    public var fileTransfersTransferDownload: DBXTeamLogFileTransfersTransferDownloadType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferDownloadType) {
        self.fileTransfersTransferDownload = arg
        let swift = TeamLog.EventType.fileTransfersTransferDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Sent transfer
@objc
public class DBXTeamLogEventTypeFileTransfersTransferSend: DBXTeamLogEventType {
    @objc
    public var fileTransfersTransferSend: DBXTeamLogFileTransfersTransferSendType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferSendType) {
        self.fileTransfersTransferSend = arg
        let swift = TeamLog.EventType.fileTransfersTransferSend(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Viewed transfer
@objc
public class DBXTeamLogEventTypeFileTransfersTransferView: DBXTeamLogEventType {
    @objc
    public var fileTransfersTransferView: DBXTeamLogFileTransfersTransferViewType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersTransferViewType) {
        self.fileTransfersTransferView = arg
        let swift = TeamLog.EventType.fileTransfersTransferView(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeNoteAclInviteOnly: DBXTeamLogEventType {
    @objc
    public var noteAclInviteOnly: DBXTeamLogNoteAclInviteOnlyType

    @objc
    public init(_ arg: DBXTeamLogNoteAclInviteOnlyType) {
        self.noteAclInviteOnly = arg
        let swift = TeamLog.EventType.noteAclInviteOnly(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to link-accessible (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeNoteAclLink: DBXTeamLogEventType {
    @objc
    public var noteAclLink: DBXTeamLogNoteAclLinkType

    @objc
    public init(_ arg: DBXTeamLogNoteAclLinkType) {
        self.noteAclLink = arg
        let swift = TeamLog.EventType.noteAclLink(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to link-accessible for team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeNoteAclTeamLink: DBXTeamLogEventType {
    @objc
    public var noteAclTeamLink: DBXTeamLogNoteAclTeamLinkType

    @objc
    public init(_ arg: DBXTeamLogNoteAclTeamLinkType) {
        self.noteAclTeamLink = arg
        let swift = TeamLog.EventType.noteAclTeamLink(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeNoteShared: DBXTeamLogEventType {
    @objc
    public var noteShared: DBXTeamLogNoteSharedType

    @objc
    public init(_ arg: DBXTeamLogNoteSharedType) {
        self.noteShared = arg
        let swift = TeamLog.EventType.noteShared(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Shared received Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeNoteShareReceive: DBXTeamLogEventType {
    @objc
    public var noteShareReceive: DBXTeamLogNoteShareReceiveType

    @objc
    public init(_ arg: DBXTeamLogNoteShareReceiveType) {
        self.noteShareReceive = arg
        let swift = TeamLog.EventType.noteShareReceive(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeOpenNoteShared: DBXTeamLogEventType {
    @objc
    public var openNoteShared: DBXTeamLogOpenNoteSharedType

    @objc
    public init(_ arg: DBXTeamLogOpenNoteSharedType) {
        self.openNoteShared = arg
        let swift = TeamLog.EventType.openNoteShared(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Created shared link in Replay
@objc
public class DBXTeamLogEventTypeReplayFileSharedLinkCreated: DBXTeamLogEventType {
    @objc
    public var replayFileSharedLinkCreated: DBXTeamLogReplayFileSharedLinkCreatedType

    @objc
    public init(_ arg: DBXTeamLogReplayFileSharedLinkCreatedType) {
        self.replayFileSharedLinkCreated = arg
        let swift = TeamLog.EventType.replayFileSharedLinkCreated(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Modified shared link in Replay
@objc
public class DBXTeamLogEventTypeReplayFileSharedLinkModified: DBXTeamLogEventType {
    @objc
    public var replayFileSharedLinkModified: DBXTeamLogReplayFileSharedLinkModifiedType

    @objc
    public init(_ arg: DBXTeamLogReplayFileSharedLinkModifiedType) {
        self.replayFileSharedLinkModified = arg
        let swift = TeamLog.EventType.replayFileSharedLinkModified(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added member to Replay Project
@objc
public class DBXTeamLogEventTypeReplayProjectTeamAdd: DBXTeamLogEventType {
    @objc
    public var replayProjectTeamAdd: DBXTeamLogReplayProjectTeamAddType

    @objc
    public init(_ arg: DBXTeamLogReplayProjectTeamAddType) {
        self.replayProjectTeamAdd = arg
        let swift = TeamLog.EventType.replayProjectTeamAdd(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed member from Replay Project
@objc
public class DBXTeamLogEventTypeReplayProjectTeamDelete: DBXTeamLogEventType {
    @objc
    public var replayProjectTeamDelete: DBXTeamLogReplayProjectTeamDeleteType

    @objc
    public init(_ arg: DBXTeamLogReplayProjectTeamDeleteType) {
        self.replayProjectTeamDelete = arg
        let swift = TeamLog.EventType.replayProjectTeamDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added team to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfAddGroup: DBXTeamLogEventType {
    @objc
    public var sfAddGroup: DBXTeamLogSfAddGroupType

    @objc
    public init(_ arg: DBXTeamLogSfAddGroupType) {
        self.sfAddGroup = arg
        let swift = TeamLog.EventType.sfAddGroup(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Allowed non-collaborators to view links to files in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfAllowNonMembersToViewSharedLinks: DBXTeamLogEventType {
    @objc
    public var sfAllowNonMembersToViewSharedLinks: DBXTeamLogSfAllowNonMembersToViewSharedLinksType

    @objc
    public init(_ arg: DBXTeamLogSfAllowNonMembersToViewSharedLinksType) {
        self.sfAllowNonMembersToViewSharedLinks = arg
        let swift = TeamLog.EventType.sfAllowNonMembersToViewSharedLinks(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Set team members to see warning before sharing folders outside team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfExternalInviteWarn: DBXTeamLogEventType {
    @objc
    public var sfExternalInviteWarn: DBXTeamLogSfExternalInviteWarnType

    @objc
    public init(_ arg: DBXTeamLogSfExternalInviteWarnType) {
        self.sfExternalInviteWarn = arg
        let swift = TeamLog.EventType.sfExternalInviteWarn(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Invited Facebook users to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfFbInvite: DBXTeamLogEventType {
    @objc
    public var sfFbInvite: DBXTeamLogSfFbInviteType

    @objc
    public init(_ arg: DBXTeamLogSfFbInviteType) {
        self.sfFbInvite = arg
        let swift = TeamLog.EventType.sfFbInvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed Facebook user's role in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfFbInviteChangeRole: DBXTeamLogEventType {
    @objc
    public var sfFbInviteChangeRole: DBXTeamLogSfFbInviteChangeRoleType

    @objc
    public init(_ arg: DBXTeamLogSfFbInviteChangeRoleType) {
        self.sfFbInviteChangeRole = arg
        let swift = TeamLog.EventType.sfFbInviteChangeRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Uninvited Facebook user from shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfFbUninvite: DBXTeamLogEventType {
    @objc
    public var sfFbUninvite: DBXTeamLogSfFbUninviteType

    @objc
    public init(_ arg: DBXTeamLogSfFbUninviteType) {
        self.sfFbUninvite = arg
        let swift = TeamLog.EventType.sfFbUninvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Invited group to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfInviteGroup: DBXTeamLogEventType {
    @objc
    public var sfInviteGroup: DBXTeamLogSfInviteGroupType

    @objc
    public init(_ arg: DBXTeamLogSfInviteGroupType) {
        self.sfInviteGroup = arg
        let swift = TeamLog.EventType.sfInviteGroup(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Granted access to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfTeamGrantAccess: DBXTeamLogEventType {
    @objc
    public var sfTeamGrantAccess: DBXTeamLogSfTeamGrantAccessType

    @objc
    public init(_ arg: DBXTeamLogSfTeamGrantAccessType) {
        self.sfTeamGrantAccess = arg
        let swift = TeamLog.EventType.sfTeamGrantAccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Invited team members to shared folder (deprecated, replaced by 'Invited user to Dropbox and added
/// them to shared file/folder')
@objc
public class DBXTeamLogEventTypeSfTeamInvite: DBXTeamLogEventType {
    @objc
    public var sfTeamInvite: DBXTeamLogSfTeamInviteType

    @objc
    public init(_ arg: DBXTeamLogSfTeamInviteType) {
        self.sfTeamInvite = arg
        let swift = TeamLog.EventType.sfTeamInvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed team member's role in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfTeamInviteChangeRole: DBXTeamLogEventType {
    @objc
    public var sfTeamInviteChangeRole: DBXTeamLogSfTeamInviteChangeRoleType

    @objc
    public init(_ arg: DBXTeamLogSfTeamInviteChangeRoleType) {
        self.sfTeamInviteChangeRole = arg
        let swift = TeamLog.EventType.sfTeamInviteChangeRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Joined team member's shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfTeamJoin: DBXTeamLogEventType {
    @objc
    public var sfTeamJoin: DBXTeamLogSfTeamJoinType

    @objc
    public init(_ arg: DBXTeamLogSfTeamJoinType) {
        self.sfTeamJoin = arg
        let swift = TeamLog.EventType.sfTeamJoin(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Joined team member's shared folder from link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSfTeamJoinFromOobLink: DBXTeamLogEventType {
    @objc
    public var sfTeamJoinFromOobLink: DBXTeamLogSfTeamJoinFromOobLinkType

    @objc
    public init(_ arg: DBXTeamLogSfTeamJoinFromOobLinkType) {
        self.sfTeamJoinFromOobLink = arg
        let swift = TeamLog.EventType.sfTeamJoinFromOobLink(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Unshared folder with team member (deprecated, replaced by 'Removed invitee from shared file/folder
/// before invite was accepted')
@objc
public class DBXTeamLogEventTypeSfTeamUninvite: DBXTeamLogEventType {
    @objc
    public var sfTeamUninvite: DBXTeamLogSfTeamUninviteType

    @objc
    public init(_ arg: DBXTeamLogSfTeamUninviteType) {
        self.sfTeamUninvite = arg
        let swift = TeamLog.EventType.sfTeamUninvite(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Invited user to Dropbox and added them to shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentAddInvitees: DBXTeamLogEventType {
    @objc
    public var sharedContentAddInvitees: DBXTeamLogSharedContentAddInviteesType

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddInviteesType) {
        self.sharedContentAddInvitees = arg
        let swift = TeamLog.EventType.sharedContentAddInvitees(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added expiration date to link for shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentAddLinkExpiry: DBXTeamLogEventType {
    @objc
    public var sharedContentAddLinkExpiry: DBXTeamLogSharedContentAddLinkExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddLinkExpiryType) {
        self.sharedContentAddLinkExpiry = arg
        let swift = TeamLog.EventType.sharedContentAddLinkExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added password to link for shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentAddLinkPassword: DBXTeamLogEventType {
    @objc
    public var sharedContentAddLinkPassword: DBXTeamLogSharedContentAddLinkPasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddLinkPasswordType) {
        self.sharedContentAddLinkPassword = arg
        let swift = TeamLog.EventType.sharedContentAddLinkPassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added users and/or groups to shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentAddMember: DBXTeamLogEventType {
    @objc
    public var sharedContentAddMember: DBXTeamLogSharedContentAddMemberType

    @objc
    public init(_ arg: DBXTeamLogSharedContentAddMemberType) {
        self.sharedContentAddMember = arg
        let swift = TeamLog.EventType.sharedContentAddMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether members can download shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentChangeDownloadsPolicy: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeDownloadsPolicy: DBXTeamLogSharedContentChangeDownloadsPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeDownloadsPolicyType) {
        self.sharedContentChangeDownloadsPolicy = arg
        let swift = TeamLog.EventType.sharedContentChangeDownloadsPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed access type of invitee to shared file/folder before invite was accepted
@objc
public class DBXTeamLogEventTypeSharedContentChangeInviteeRole: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeInviteeRole: DBXTeamLogSharedContentChangeInviteeRoleType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeInviteeRoleType) {
        self.sharedContentChangeInviteeRole = arg
        let swift = TeamLog.EventType.sharedContentChangeInviteeRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed link audience of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentChangeLinkAudience: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeLinkAudience: DBXTeamLogSharedContentChangeLinkAudienceType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkAudienceType) {
        self.sharedContentChangeLinkAudience = arg
        let swift = TeamLog.EventType.sharedContentChangeLinkAudience(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed link expiration of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentChangeLinkExpiry: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeLinkExpiry: DBXTeamLogSharedContentChangeLinkExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkExpiryType) {
        self.sharedContentChangeLinkExpiry = arg
        let swift = TeamLog.EventType.sharedContentChangeLinkExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed link password of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentChangeLinkPassword: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeLinkPassword: DBXTeamLogSharedContentChangeLinkPasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeLinkPasswordType) {
        self.sharedContentChangeLinkPassword = arg
        let swift = TeamLog.EventType.sharedContentChangeLinkPassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed access type of shared file/folder member
@objc
public class DBXTeamLogEventTypeSharedContentChangeMemberRole: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeMemberRole: DBXTeamLogSharedContentChangeMemberRoleType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeMemberRoleType) {
        self.sharedContentChangeMemberRole = arg
        let swift = TeamLog.EventType.sharedContentChangeMemberRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether members can see who viewed shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentChangeViewerInfoPolicy: DBXTeamLogEventType {
    @objc
    public var sharedContentChangeViewerInfoPolicy: DBXTeamLogSharedContentChangeViewerInfoPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedContentChangeViewerInfoPolicyType) {
        self.sharedContentChangeViewerInfoPolicy = arg
        let swift = TeamLog.EventType.sharedContentChangeViewerInfoPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Acquired membership of shared file/folder by accepting invite
@objc
public class DBXTeamLogEventTypeSharedContentClaimInvitation: DBXTeamLogEventType {
    @objc
    public var sharedContentClaimInvitation: DBXTeamLogSharedContentClaimInvitationType

    @objc
    public init(_ arg: DBXTeamLogSharedContentClaimInvitationType) {
        self.sharedContentClaimInvitation = arg
        let swift = TeamLog.EventType.sharedContentClaimInvitation(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Copied shared file/folder to own Dropbox
@objc
public class DBXTeamLogEventTypeSharedContentCopy: DBXTeamLogEventType {
    @objc
    public var sharedContentCopy: DBXTeamLogSharedContentCopyType

    @objc
    public init(_ arg: DBXTeamLogSharedContentCopyType) {
        self.sharedContentCopy = arg
        let swift = TeamLog.EventType.sharedContentCopy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Downloaded shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentDownload: DBXTeamLogEventType {
    @objc
    public var sharedContentDownload: DBXTeamLogSharedContentDownloadType

    @objc
    public init(_ arg: DBXTeamLogSharedContentDownloadType) {
        self.sharedContentDownload = arg
        let swift = TeamLog.EventType.sharedContentDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Left shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentRelinquishMembership: DBXTeamLogEventType {
    @objc
    public var sharedContentRelinquishMembership: DBXTeamLogSharedContentRelinquishMembershipType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRelinquishMembershipType) {
        self.sharedContentRelinquishMembership = arg
        let swift = TeamLog.EventType.sharedContentRelinquishMembership(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed invitee from shared file/folder before invite was accepted
@objc
public class DBXTeamLogEventTypeSharedContentRemoveInvitees: DBXTeamLogEventType {
    @objc
    public var sharedContentRemoveInvitees: DBXTeamLogSharedContentRemoveInviteesType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveInviteesType) {
        self.sharedContentRemoveInvitees = arg
        let swift = TeamLog.EventType.sharedContentRemoveInvitees(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed link expiration date of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentRemoveLinkExpiry: DBXTeamLogEventType {
    @objc
    public var sharedContentRemoveLinkExpiry: DBXTeamLogSharedContentRemoveLinkExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveLinkExpiryType) {
        self.sharedContentRemoveLinkExpiry = arg
        let swift = TeamLog.EventType.sharedContentRemoveLinkExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed link password of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedContentRemoveLinkPassword: DBXTeamLogEventType {
    @objc
    public var sharedContentRemoveLinkPassword: DBXTeamLogSharedContentRemoveLinkPasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveLinkPasswordType) {
        self.sharedContentRemoveLinkPassword = arg
        let swift = TeamLog.EventType.sharedContentRemoveLinkPassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed user/group from shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentRemoveMember: DBXTeamLogEventType {
    @objc
    public var sharedContentRemoveMember: DBXTeamLogSharedContentRemoveMemberType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRemoveMemberType) {
        self.sharedContentRemoveMember = arg
        let swift = TeamLog.EventType.sharedContentRemoveMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Requested access to shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentRequestAccess: DBXTeamLogEventType {
    @objc
    public var sharedContentRequestAccess: DBXTeamLogSharedContentRequestAccessType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRequestAccessType) {
        self.sharedContentRequestAccess = arg
        let swift = TeamLog.EventType.sharedContentRequestAccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Restored shared file/folder invitees
@objc
public class DBXTeamLogEventTypeSharedContentRestoreInvitees: DBXTeamLogEventType {
    @objc
    public var sharedContentRestoreInvitees: DBXTeamLogSharedContentRestoreInviteesType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRestoreInviteesType) {
        self.sharedContentRestoreInvitees = arg
        let swift = TeamLog.EventType.sharedContentRestoreInvitees(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Restored users and/or groups to membership of shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentRestoreMember: DBXTeamLogEventType {
    @objc
    public var sharedContentRestoreMember: DBXTeamLogSharedContentRestoreMemberType

    @objc
    public init(_ arg: DBXTeamLogSharedContentRestoreMemberType) {
        self.sharedContentRestoreMember = arg
        let swift = TeamLog.EventType.sharedContentRestoreMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Unshared file/folder by clearing membership
@objc
public class DBXTeamLogEventTypeSharedContentUnshare: DBXTeamLogEventType {
    @objc
    public var sharedContentUnshare: DBXTeamLogSharedContentUnshareType

    @objc
    public init(_ arg: DBXTeamLogSharedContentUnshareType) {
        self.sharedContentUnshare = arg
        let swift = TeamLog.EventType.sharedContentUnshare(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Previewed shared file/folder
@objc
public class DBXTeamLogEventTypeSharedContentView: DBXTeamLogEventType {
    @objc
    public var sharedContentView: DBXTeamLogSharedContentViewType

    @objc
    public init(_ arg: DBXTeamLogSharedContentViewType) {
        self.sharedContentView = arg
        let swift = TeamLog.EventType.sharedContentView(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can access shared folder via link
@objc
public class DBXTeamLogEventTypeSharedFolderChangeLinkPolicy: DBXTeamLogEventType {
    @objc
    public var sharedFolderChangeLinkPolicy: DBXTeamLogSharedFolderChangeLinkPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeLinkPolicyType) {
        self.sharedFolderChangeLinkPolicy = arg
        let swift = TeamLog.EventType.sharedFolderChangeLinkPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether shared folder inherits members from parent folder
@objc
public class DBXTeamLogEventTypeSharedFolderChangeMembersInheritancePolicy: DBXTeamLogEventType {
    @objc
    public var sharedFolderChangeMembersInheritancePolicy: DBXTeamLogSharedFolderChangeMembersInheritancePolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersInheritancePolicyType) {
        self.sharedFolderChangeMembersInheritancePolicy = arg
        let swift = TeamLog.EventType.sharedFolderChangeMembersInheritancePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can add/remove members of shared folder
@objc
public class DBXTeamLogEventTypeSharedFolderChangeMembersManagementPolicy: DBXTeamLogEventType {
    @objc
    public var sharedFolderChangeMembersManagementPolicy: DBXTeamLogSharedFolderChangeMembersManagementPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersManagementPolicyType) {
        self.sharedFolderChangeMembersManagementPolicy = arg
        let swift = TeamLog.EventType.sharedFolderChangeMembersManagementPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can become member of shared folder
@objc
public class DBXTeamLogEventTypeSharedFolderChangeMembersPolicy: DBXTeamLogEventType {
    @objc
    public var sharedFolderChangeMembersPolicy: DBXTeamLogSharedFolderChangeMembersPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderChangeMembersPolicyType) {
        self.sharedFolderChangeMembersPolicy = arg
        let swift = TeamLog.EventType.sharedFolderChangeMembersPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Created shared folder
@objc
public class DBXTeamLogEventTypeSharedFolderCreate: DBXTeamLogEventType {
    @objc
    public var sharedFolderCreate: DBXTeamLogSharedFolderCreateType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderCreateType) {
        self.sharedFolderCreate = arg
        let swift = TeamLog.EventType.sharedFolderCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Declined team member's invite to shared folder
@objc
public class DBXTeamLogEventTypeSharedFolderDeclineInvitation: DBXTeamLogEventType {
    @objc
    public var sharedFolderDeclineInvitation: DBXTeamLogSharedFolderDeclineInvitationType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderDeclineInvitationType) {
        self.sharedFolderDeclineInvitation = arg
        let swift = TeamLog.EventType.sharedFolderDeclineInvitation(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added shared folder to own Dropbox
@objc
public class DBXTeamLogEventTypeSharedFolderMount: DBXTeamLogEventType {
    @objc
    public var sharedFolderMount: DBXTeamLogSharedFolderMountType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderMountType) {
        self.sharedFolderMount = arg
        let swift = TeamLog.EventType.sharedFolderMount(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed parent of shared folder
@objc
public class DBXTeamLogEventTypeSharedFolderNest: DBXTeamLogEventType {
    @objc
    public var sharedFolderNest: DBXTeamLogSharedFolderNestType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderNestType) {
        self.sharedFolderNest = arg
        let swift = TeamLog.EventType.sharedFolderNest(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Transferred ownership of shared folder to another member
@objc
public class DBXTeamLogEventTypeSharedFolderTransferOwnership: DBXTeamLogEventType {
    @objc
    public var sharedFolderTransferOwnership: DBXTeamLogSharedFolderTransferOwnershipType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderTransferOwnershipType) {
        self.sharedFolderTransferOwnership = arg
        let swift = TeamLog.EventType.sharedFolderTransferOwnership(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Deleted shared folder from Dropbox
@objc
public class DBXTeamLogEventTypeSharedFolderUnmount: DBXTeamLogEventType {
    @objc
    public var sharedFolderUnmount: DBXTeamLogSharedFolderUnmountType

    @objc
    public init(_ arg: DBXTeamLogSharedFolderUnmountType) {
        self.sharedFolderUnmount = arg
        let swift = TeamLog.EventType.sharedFolderUnmount(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added shared link expiration date
@objc
public class DBXTeamLogEventTypeSharedLinkAddExpiry: DBXTeamLogEventType {
    @objc
    public var sharedLinkAddExpiry: DBXTeamLogSharedLinkAddExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkAddExpiryType) {
        self.sharedLinkAddExpiry = arg
        let swift = TeamLog.EventType.sharedLinkAddExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed shared link expiration date
@objc
public class DBXTeamLogEventTypeSharedLinkChangeExpiry: DBXTeamLogEventType {
    @objc
    public var sharedLinkChangeExpiry: DBXTeamLogSharedLinkChangeExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkChangeExpiryType) {
        self.sharedLinkChangeExpiry = arg
        let swift = TeamLog.EventType.sharedLinkChangeExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed visibility of shared link
@objc
public class DBXTeamLogEventTypeSharedLinkChangeVisibility: DBXTeamLogEventType {
    @objc
    public var sharedLinkChangeVisibility: DBXTeamLogSharedLinkChangeVisibilityType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkChangeVisibilityType) {
        self.sharedLinkChangeVisibility = arg
        let swift = TeamLog.EventType.sharedLinkChangeVisibility(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added file/folder to Dropbox from shared link
@objc
public class DBXTeamLogEventTypeSharedLinkCopy: DBXTeamLogEventType {
    @objc
    public var sharedLinkCopy: DBXTeamLogSharedLinkCopyType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkCopyType) {
        self.sharedLinkCopy = arg
        let swift = TeamLog.EventType.sharedLinkCopy(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Created shared link
@objc
public class DBXTeamLogEventTypeSharedLinkCreate: DBXTeamLogEventType {
    @objc
    public var sharedLinkCreate: DBXTeamLogSharedLinkCreateType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkCreateType) {
        self.sharedLinkCreate = arg
        let swift = TeamLog.EventType.sharedLinkCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed shared link
@objc
public class DBXTeamLogEventTypeSharedLinkDisable: DBXTeamLogEventType {
    @objc
    public var sharedLinkDisable: DBXTeamLogSharedLinkDisableType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkDisableType) {
        self.sharedLinkDisable = arg
        let swift = TeamLog.EventType.sharedLinkDisable(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Downloaded file/folder from shared link
@objc
public class DBXTeamLogEventTypeSharedLinkDownload: DBXTeamLogEventType {
    @objc
    public var sharedLinkDownload: DBXTeamLogSharedLinkDownloadType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkDownloadType) {
        self.sharedLinkDownload = arg
        let swift = TeamLog.EventType.sharedLinkDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed shared link expiration date
@objc
public class DBXTeamLogEventTypeSharedLinkRemoveExpiry: DBXTeamLogEventType {
    @objc
    public var sharedLinkRemoveExpiry: DBXTeamLogSharedLinkRemoveExpiryType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkRemoveExpiryType) {
        self.sharedLinkRemoveExpiry = arg
        let swift = TeamLog.EventType.sharedLinkRemoveExpiry(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added an expiration date to the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsAddExpiration: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsAddExpiration: DBXTeamLogSharedLinkSettingsAddExpirationType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAddExpirationType) {
        self.sharedLinkSettingsAddExpiration = arg
        let swift = TeamLog.EventType.sharedLinkSettingsAddExpiration(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added a password to the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsAddPassword: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsAddPassword: DBXTeamLogSharedLinkSettingsAddPasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAddPasswordType) {
        self.sharedLinkSettingsAddPassword = arg
        let swift = TeamLog.EventType.sharedLinkSettingsAddPassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Disabled downloads
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadDisabled: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsAllowDownloadDisabled: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType) {
        self.sharedLinkSettingsAllowDownloadDisabled = arg
        let swift = TeamLog.EventType.sharedLinkSettingsAllowDownloadDisabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Enabled downloads
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsAllowDownloadEnabled: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsAllowDownloadEnabled: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType) {
        self.sharedLinkSettingsAllowDownloadEnabled = arg
        let swift = TeamLog.EventType.sharedLinkSettingsAllowDownloadEnabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed the audience of the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsChangeAudience: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsChangeAudience: DBXTeamLogSharedLinkSettingsChangeAudienceType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangeAudienceType) {
        self.sharedLinkSettingsChangeAudience = arg
        let swift = TeamLog.EventType.sharedLinkSettingsChangeAudience(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed the expiration date of the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsChangeExpiration: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsChangeExpiration: DBXTeamLogSharedLinkSettingsChangeExpirationType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangeExpirationType) {
        self.sharedLinkSettingsChangeExpiration = arg
        let swift = TeamLog.EventType.sharedLinkSettingsChangeExpiration(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Changed the password of the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsChangePassword: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsChangePassword: DBXTeamLogSharedLinkSettingsChangePasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsChangePasswordType) {
        self.sharedLinkSettingsChangePassword = arg
        let swift = TeamLog.EventType.sharedLinkSettingsChangePassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed the expiration date from the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsRemoveExpiration: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsRemoveExpiration: DBXTeamLogSharedLinkSettingsRemoveExpirationType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsRemoveExpirationType) {
        self.sharedLinkSettingsRemoveExpiration = arg
        let swift = TeamLog.EventType.sharedLinkSettingsRemoveExpiration(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Removed the password from the shared link
@objc
public class DBXTeamLogEventTypeSharedLinkSettingsRemovePassword: DBXTeamLogEventType {
    @objc
    public var sharedLinkSettingsRemovePassword: DBXTeamLogSharedLinkSettingsRemovePasswordType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkSettingsRemovePasswordType) {
        self.sharedLinkSettingsRemovePassword = arg
        let swift = TeamLog.EventType.sharedLinkSettingsRemovePassword(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Added members as audience of shared link
@objc
public class DBXTeamLogEventTypeSharedLinkShare: DBXTeamLogEventType {
    @objc
    public var sharedLinkShare: DBXTeamLogSharedLinkShareType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkShareType) {
        self.sharedLinkShare = arg
        let swift = TeamLog.EventType.sharedLinkShare(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared link
@objc
public class DBXTeamLogEventTypeSharedLinkView: DBXTeamLogEventType {
    @objc
    public var sharedLinkView: DBXTeamLogSharedLinkViewType

    @objc
    public init(_ arg: DBXTeamLogSharedLinkViewType) {
        self.sharedLinkView = arg
        let swift = TeamLog.EventType.sharedLinkView(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeSharedNoteOpened: DBXTeamLogEventType {
    @objc
    public var sharedNoteOpened: DBXTeamLogSharedNoteOpenedType

    @objc
    public init(_ arg: DBXTeamLogSharedNoteOpenedType) {
        self.sharedNoteOpened = arg
        let swift = TeamLog.EventType.sharedNoteOpened(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Disabled downloads for link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeShmodelDisableDownloads: DBXTeamLogEventType {
    @objc
    public var shmodelDisableDownloads: DBXTeamLogShmodelDisableDownloadsType

    @objc
    public init(_ arg: DBXTeamLogShmodelDisableDownloadsType) {
        self.shmodelDisableDownloads = arg
        let swift = TeamLog.EventType.shmodelDisableDownloads(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Enabled downloads for link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeShmodelEnableDownloads: DBXTeamLogEventType {
    @objc
    public var shmodelEnableDownloads: DBXTeamLogShmodelEnableDownloadsType

    @objc
    public init(_ arg: DBXTeamLogShmodelEnableDownloadsType) {
        self.shmodelEnableDownloads = arg
        let swift = TeamLog.EventType.shmodelEnableDownloads(arg.swift)
        super.init(swift: swift)
    }
}

/// (sharing) Shared link with group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeShmodelGroupShare: DBXTeamLogEventType {
    @objc
    public var shmodelGroupShare: DBXTeamLogShmodelGroupShareType

    @objc
    public init(_ arg: DBXTeamLogShmodelGroupShareType) {
        self.shmodelGroupShare = arg
        let swift = TeamLog.EventType.shmodelGroupShare(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Granted access to showcase
@objc
public class DBXTeamLogEventTypeShowcaseAccessGranted: DBXTeamLogEventType {
    @objc
    public var showcaseAccessGranted: DBXTeamLogShowcaseAccessGrantedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseAccessGrantedType) {
        self.showcaseAccessGranted = arg
        let swift = TeamLog.EventType.showcaseAccessGranted(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Added member to showcase
@objc
public class DBXTeamLogEventTypeShowcaseAddMember: DBXTeamLogEventType {
    @objc
    public var showcaseAddMember: DBXTeamLogShowcaseAddMemberType

    @objc
    public init(_ arg: DBXTeamLogShowcaseAddMemberType) {
        self.showcaseAddMember = arg
        let swift = TeamLog.EventType.showcaseAddMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Archived showcase
@objc
public class DBXTeamLogEventTypeShowcaseArchived: DBXTeamLogEventType {
    @objc
    public var showcaseArchived: DBXTeamLogShowcaseArchivedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseArchivedType) {
        self.showcaseArchived = arg
        let swift = TeamLog.EventType.showcaseArchived(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Created showcase
@objc
public class DBXTeamLogEventTypeShowcaseCreated: DBXTeamLogEventType {
    @objc
    public var showcaseCreated: DBXTeamLogShowcaseCreatedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseCreatedType) {
        self.showcaseCreated = arg
        let swift = TeamLog.EventType.showcaseCreated(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase comment
@objc
public class DBXTeamLogEventTypeShowcaseDeleteComment: DBXTeamLogEventType {
    @objc
    public var showcaseDeleteComment: DBXTeamLogShowcaseDeleteCommentType

    @objc
    public init(_ arg: DBXTeamLogShowcaseDeleteCommentType) {
        self.showcaseDeleteComment = arg
        let swift = TeamLog.EventType.showcaseDeleteComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Edited showcase
@objc
public class DBXTeamLogEventTypeShowcaseEdited: DBXTeamLogEventType {
    @objc
    public var showcaseEdited: DBXTeamLogShowcaseEditedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseEditedType) {
        self.showcaseEdited = arg
        let swift = TeamLog.EventType.showcaseEdited(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Edited showcase comment
@objc
public class DBXTeamLogEventTypeShowcaseEditComment: DBXTeamLogEventType {
    @objc
    public var showcaseEditComment: DBXTeamLogShowcaseEditCommentType

    @objc
    public init(_ arg: DBXTeamLogShowcaseEditCommentType) {
        self.showcaseEditComment = arg
        let swift = TeamLog.EventType.showcaseEditComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Added file to showcase
@objc
public class DBXTeamLogEventTypeShowcaseFileAdded: DBXTeamLogEventType {
    @objc
    public var showcaseFileAdded: DBXTeamLogShowcaseFileAddedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileAddedType) {
        self.showcaseFileAdded = arg
        let swift = TeamLog.EventType.showcaseFileAdded(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Downloaded file from showcase
@objc
public class DBXTeamLogEventTypeShowcaseFileDownload: DBXTeamLogEventType {
    @objc
    public var showcaseFileDownload: DBXTeamLogShowcaseFileDownloadType

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileDownloadType) {
        self.showcaseFileDownload = arg
        let swift = TeamLog.EventType.showcaseFileDownload(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Removed file from showcase
@objc
public class DBXTeamLogEventTypeShowcaseFileRemoved: DBXTeamLogEventType {
    @objc
    public var showcaseFileRemoved: DBXTeamLogShowcaseFileRemovedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileRemovedType) {
        self.showcaseFileRemoved = arg
        let swift = TeamLog.EventType.showcaseFileRemoved(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Viewed file in showcase
@objc
public class DBXTeamLogEventTypeShowcaseFileView: DBXTeamLogEventType {
    @objc
    public var showcaseFileView: DBXTeamLogShowcaseFileViewType

    @objc
    public init(_ arg: DBXTeamLogShowcaseFileViewType) {
        self.showcaseFileView = arg
        let swift = TeamLog.EventType.showcaseFileView(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Permanently deleted showcase
@objc
public class DBXTeamLogEventTypeShowcasePermanentlyDeleted: DBXTeamLogEventType {
    @objc
    public var showcasePermanentlyDeleted: DBXTeamLogShowcasePermanentlyDeletedType

    @objc
    public init(_ arg: DBXTeamLogShowcasePermanentlyDeletedType) {
        self.showcasePermanentlyDeleted = arg
        let swift = TeamLog.EventType.showcasePermanentlyDeleted(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Added showcase comment
@objc
public class DBXTeamLogEventTypeShowcasePostComment: DBXTeamLogEventType {
    @objc
    public var showcasePostComment: DBXTeamLogShowcasePostCommentType

    @objc
    public init(_ arg: DBXTeamLogShowcasePostCommentType) {
        self.showcasePostComment = arg
        let swift = TeamLog.EventType.showcasePostComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Removed member from showcase
@objc
public class DBXTeamLogEventTypeShowcaseRemoveMember: DBXTeamLogEventType {
    @objc
    public var showcaseRemoveMember: DBXTeamLogShowcaseRemoveMemberType

    @objc
    public init(_ arg: DBXTeamLogShowcaseRemoveMemberType) {
        self.showcaseRemoveMember = arg
        let swift = TeamLog.EventType.showcaseRemoveMember(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Renamed showcase
@objc
public class DBXTeamLogEventTypeShowcaseRenamed: DBXTeamLogEventType {
    @objc
    public var showcaseRenamed: DBXTeamLogShowcaseRenamedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseRenamedType) {
        self.showcaseRenamed = arg
        let swift = TeamLog.EventType.showcaseRenamed(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Requested access to showcase
@objc
public class DBXTeamLogEventTypeShowcaseRequestAccess: DBXTeamLogEventType {
    @objc
    public var showcaseRequestAccess: DBXTeamLogShowcaseRequestAccessType

    @objc
    public init(_ arg: DBXTeamLogShowcaseRequestAccessType) {
        self.showcaseRequestAccess = arg
        let swift = TeamLog.EventType.showcaseRequestAccess(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Resolved showcase comment
@objc
public class DBXTeamLogEventTypeShowcaseResolveComment: DBXTeamLogEventType {
    @objc
    public var showcaseResolveComment: DBXTeamLogShowcaseResolveCommentType

    @objc
    public init(_ arg: DBXTeamLogShowcaseResolveCommentType) {
        self.showcaseResolveComment = arg
        let swift = TeamLog.EventType.showcaseResolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Unarchived showcase
@objc
public class DBXTeamLogEventTypeShowcaseRestored: DBXTeamLogEventType {
    @objc
    public var showcaseRestored: DBXTeamLogShowcaseRestoredType

    @objc
    public init(_ arg: DBXTeamLogShowcaseRestoredType) {
        self.showcaseRestored = arg
        let swift = TeamLog.EventType.showcaseRestored(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase
@objc
public class DBXTeamLogEventTypeShowcaseTrashed: DBXTeamLogEventType {
    @objc
    public var showcaseTrashed: DBXTeamLogShowcaseTrashedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseTrashedType) {
        self.showcaseTrashed = arg
        let swift = TeamLog.EventType.showcaseTrashed(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')
@objc
public class DBXTeamLogEventTypeShowcaseTrashedDeprecated: DBXTeamLogEventType {
    @objc
    public var showcaseTrashedDeprecated: DBXTeamLogShowcaseTrashedDeprecatedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseTrashedDeprecatedType) {
        self.showcaseTrashedDeprecated = arg
        let swift = TeamLog.EventType.showcaseTrashedDeprecated(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Unresolved showcase comment
@objc
public class DBXTeamLogEventTypeShowcaseUnresolveComment: DBXTeamLogEventType {
    @objc
    public var showcaseUnresolveComment: DBXTeamLogShowcaseUnresolveCommentType

    @objc
    public init(_ arg: DBXTeamLogShowcaseUnresolveCommentType) {
        self.showcaseUnresolveComment = arg
        let swift = TeamLog.EventType.showcaseUnresolveComment(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Restored showcase
@objc
public class DBXTeamLogEventTypeShowcaseUntrashed: DBXTeamLogEventType {
    @objc
    public var showcaseUntrashed: DBXTeamLogShowcaseUntrashedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseUntrashedType) {
        self.showcaseUntrashed = arg
        let swift = TeamLog.EventType.showcaseUntrashed(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Restored showcase (old version) (deprecated, replaced by 'Restored showcase')
@objc
public class DBXTeamLogEventTypeShowcaseUntrashedDeprecated: DBXTeamLogEventType {
    @objc
    public var showcaseUntrashedDeprecated: DBXTeamLogShowcaseUntrashedDeprecatedType

    @objc
    public init(_ arg: DBXTeamLogShowcaseUntrashedDeprecatedType) {
        self.showcaseUntrashedDeprecated = arg
        let swift = TeamLog.EventType.showcaseUntrashedDeprecated(arg.swift)
        super.init(swift: swift)
    }
}

/// (showcase) Viewed showcase
@objc
public class DBXTeamLogEventTypeShowcaseView: DBXTeamLogEventType {
    @objc
    public var showcaseView: DBXTeamLogShowcaseViewType

    @objc
    public init(_ arg: DBXTeamLogShowcaseViewType) {
        self.showcaseView = arg
        let swift = TeamLog.EventType.showcaseView(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Added X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeSsoAddCert: DBXTeamLogEventType {
    @objc
    public var ssoAddCert: DBXTeamLogSsoAddCertType

    @objc
    public init(_ arg: DBXTeamLogSsoAddCertType) {
        self.ssoAddCert = arg
        let swift = TeamLog.EventType.ssoAddCert(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Added sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeSsoAddLoginUrl: DBXTeamLogEventType {
    @objc
    public var ssoAddLoginUrl: DBXTeamLogSsoAddLoginUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoAddLoginUrlType) {
        self.ssoAddLoginUrl = arg
        let swift = TeamLog.EventType.ssoAddLoginUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Added sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeSsoAddLogoutUrl: DBXTeamLogEventType {
    @objc
    public var ssoAddLogoutUrl: DBXTeamLogSsoAddLogoutUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoAddLogoutUrlType) {
        self.ssoAddLogoutUrl = arg
        let swift = TeamLog.EventType.ssoAddLogoutUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Changed X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeSsoChangeCert: DBXTeamLogEventType {
    @objc
    public var ssoChangeCert: DBXTeamLogSsoChangeCertType

    @objc
    public init(_ arg: DBXTeamLogSsoChangeCertType) {
        self.ssoChangeCert = arg
        let swift = TeamLog.EventType.ssoChangeCert(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Changed sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeSsoChangeLoginUrl: DBXTeamLogEventType {
    @objc
    public var ssoChangeLoginUrl: DBXTeamLogSsoChangeLoginUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoChangeLoginUrlType) {
        self.ssoChangeLoginUrl = arg
        let swift = TeamLog.EventType.ssoChangeLoginUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Changed sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeSsoChangeLogoutUrl: DBXTeamLogEventType {
    @objc
    public var ssoChangeLogoutUrl: DBXTeamLogSsoChangeLogoutUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoChangeLogoutUrlType) {
        self.ssoChangeLogoutUrl = arg
        let swift = TeamLog.EventType.ssoChangeLogoutUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Changed SAML identity mode for SSO
@objc
public class DBXTeamLogEventTypeSsoChangeSamlIdentityMode: DBXTeamLogEventType {
    @objc
    public var ssoChangeSamlIdentityMode: DBXTeamLogSsoChangeSamlIdentityModeType

    @objc
    public init(_ arg: DBXTeamLogSsoChangeSamlIdentityModeType) {
        self.ssoChangeSamlIdentityMode = arg
        let swift = TeamLog.EventType.ssoChangeSamlIdentityMode(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Removed X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeSsoRemoveCert: DBXTeamLogEventType {
    @objc
    public var ssoRemoveCert: DBXTeamLogSsoRemoveCertType

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveCertType) {
        self.ssoRemoveCert = arg
        let swift = TeamLog.EventType.ssoRemoveCert(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Removed sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeSsoRemoveLoginUrl: DBXTeamLogEventType {
    @objc
    public var ssoRemoveLoginUrl: DBXTeamLogSsoRemoveLoginUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveLoginUrlType) {
        self.ssoRemoveLoginUrl = arg
        let swift = TeamLog.EventType.ssoRemoveLoginUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (sso) Removed sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeSsoRemoveLogoutUrl: DBXTeamLogEventType {
    @objc
    public var ssoRemoveLogoutUrl: DBXTeamLogSsoRemoveLogoutUrlType

    @objc
    public init(_ arg: DBXTeamLogSsoRemoveLogoutUrlType) {
        self.ssoRemoveLogoutUrl = arg
        let swift = TeamLog.EventType.ssoRemoveLogoutUrl(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Changed archival status of team folder
@objc
public class DBXTeamLogEventTypeTeamFolderChangeStatus: DBXTeamLogEventType {
    @objc
    public var teamFolderChangeStatus: DBXTeamLogTeamFolderChangeStatusType

    @objc
    public init(_ arg: DBXTeamLogTeamFolderChangeStatusType) {
        self.teamFolderChangeStatus = arg
        let swift = TeamLog.EventType.teamFolderChangeStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Created team folder in active status
@objc
public class DBXTeamLogEventTypeTeamFolderCreate: DBXTeamLogEventType {
    @objc
    public var teamFolderCreate: DBXTeamLogTeamFolderCreateType

    @objc
    public init(_ arg: DBXTeamLogTeamFolderCreateType) {
        self.teamFolderCreate = arg
        let swift = TeamLog.EventType.teamFolderCreate(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Downgraded team folder to regular shared folder
@objc
public class DBXTeamLogEventTypeTeamFolderDowngrade: DBXTeamLogEventType {
    @objc
    public var teamFolderDowngrade: DBXTeamLogTeamFolderDowngradeType

    @objc
    public init(_ arg: DBXTeamLogTeamFolderDowngradeType) {
        self.teamFolderDowngrade = arg
        let swift = TeamLog.EventType.teamFolderDowngrade(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Permanently deleted archived team folder
@objc
public class DBXTeamLogEventTypeTeamFolderPermanentlyDelete: DBXTeamLogEventType {
    @objc
    public var teamFolderPermanentlyDelete: DBXTeamLogTeamFolderPermanentlyDeleteType

    @objc
    public init(_ arg: DBXTeamLogTeamFolderPermanentlyDeleteType) {
        self.teamFolderPermanentlyDelete = arg
        let swift = TeamLog.EventType.teamFolderPermanentlyDelete(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Renamed active/archived team folder
@objc
public class DBXTeamLogEventTypeTeamFolderRename: DBXTeamLogEventType {
    @objc
    public var teamFolderRename: DBXTeamLogTeamFolderRenameType

    @objc
    public init(_ arg: DBXTeamLogTeamFolderRenameType) {
        self.teamFolderRename = arg
        let swift = TeamLog.EventType.teamFolderRename(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_folders) Changed sync default
@objc
public class DBXTeamLogEventTypeTeamSelectiveSyncSettingsChanged: DBXTeamLogEventType {
    @objc
    public var teamSelectiveSyncSettingsChanged: DBXTeamLogTeamSelectiveSyncSettingsChangedType

    @objc
    public init(_ arg: DBXTeamLogTeamSelectiveSyncSettingsChangedType) {
        self.teamSelectiveSyncSettingsChanged = arg
        let swift = TeamLog.EventType.teamSelectiveSyncSettingsChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed account capture setting on team domain
@objc
public class DBXTeamLogEventTypeAccountCaptureChangePolicy: DBXTeamLogEventType {
    @objc
    public var accountCaptureChangePolicy: DBXTeamLogAccountCaptureChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogAccountCaptureChangePolicyType) {
        self.accountCaptureChangePolicy = arg
        let swift = TeamLog.EventType.accountCaptureChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed admin reminder settings for requests to join the team
@objc
public class DBXTeamLogEventTypeAdminEmailRemindersChanged: DBXTeamLogEventType {
    @objc
    public var adminEmailRemindersChanged: DBXTeamLogAdminEmailRemindersChangedType

    @objc
    public init(_ arg: DBXTeamLogAdminEmailRemindersChangedType) {
        self.adminEmailRemindersChanged = arg
        let swift = TeamLog.EventType.adminEmailRemindersChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Disabled downloads (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeAllowDownloadDisabled: DBXTeamLogEventType {
    @objc
    public var allowDownloadDisabled: DBXTeamLogAllowDownloadDisabledType

    @objc
    public init(_ arg: DBXTeamLogAllowDownloadDisabledType) {
        self.allowDownloadDisabled = arg
        let swift = TeamLog.EventType.allowDownloadDisabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled downloads (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeAllowDownloadEnabled: DBXTeamLogEventType {
    @objc
    public var allowDownloadEnabled: DBXTeamLogAllowDownloadEnabledType

    @objc
    public init(_ arg: DBXTeamLogAllowDownloadEnabledType) {
        self.allowDownloadEnabled = arg
        let swift = TeamLog.EventType.allowDownloadEnabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed app permissions
@objc
public class DBXTeamLogEventTypeAppPermissionsChanged: DBXTeamLogEventType {
    @objc
    public var appPermissionsChanged: DBXTeamLogAppPermissionsChangedType

    @objc
    public init(_ arg: DBXTeamLogAppPermissionsChangedType) {
        self.appPermissionsChanged = arg
        let swift = TeamLog.EventType.appPermissionsChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed camera uploads setting for team
@objc
public class DBXTeamLogEventTypeCameraUploadsPolicyChanged: DBXTeamLogEventType {
    @objc
    public var cameraUploadsPolicyChanged: DBXTeamLogCameraUploadsPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogCameraUploadsPolicyChangedType) {
        self.cameraUploadsPolicyChanged = arg
        let swift = TeamLog.EventType.cameraUploadsPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Capture transcription policy for team
@objc
public class DBXTeamLogEventTypeCaptureTranscriptPolicyChanged: DBXTeamLogEventType {
    @objc
    public var captureTranscriptPolicyChanged: DBXTeamLogCaptureTranscriptPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogCaptureTranscriptPolicyChangedType) {
        self.captureTranscriptPolicyChanged = arg
        let swift = TeamLog.EventType.captureTranscriptPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed classification policy for team
@objc
public class DBXTeamLogEventTypeClassificationChangePolicy: DBXTeamLogEventType {
    @objc
    public var classificationChangePolicy: DBXTeamLogClassificationChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogClassificationChangePolicyType) {
        self.classificationChangePolicy = arg
        let swift = TeamLog.EventType.classificationChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed computer backup policy for team
@objc
public class DBXTeamLogEventTypeComputerBackupPolicyChanged: DBXTeamLogEventType {
    @objc
    public var computerBackupPolicyChanged: DBXTeamLogComputerBackupPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogComputerBackupPolicyChangedType) {
        self.computerBackupPolicyChanged = arg
        let swift = TeamLog.EventType.computerBackupPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed content management setting
@objc
public class DBXTeamLogEventTypeContentAdministrationPolicyChanged: DBXTeamLogEventType {
    @objc
    public var contentAdministrationPolicyChanged: DBXTeamLogContentAdministrationPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogContentAdministrationPolicyChangedType) {
        self.contentAdministrationPolicyChanged = arg
        let swift = TeamLog.EventType.contentAdministrationPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Set restrictions on data center locations where team data resides
@objc
public class DBXTeamLogEventTypeDataPlacementRestrictionChangePolicy: DBXTeamLogEventType {
    @objc
    public var dataPlacementRestrictionChangePolicy: DBXTeamLogDataPlacementRestrictionChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogDataPlacementRestrictionChangePolicyType) {
        self.dataPlacementRestrictionChangePolicy = arg
        let swift = TeamLog.EventType.dataPlacementRestrictionChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Completed restrictions on data center locations where team data resides
@objc
public class DBXTeamLogEventTypeDataPlacementRestrictionSatisfyPolicy: DBXTeamLogEventType {
    @objc
    public var dataPlacementRestrictionSatisfyPolicy: DBXTeamLogDataPlacementRestrictionSatisfyPolicyType

    @objc
    public init(_ arg: DBXTeamLogDataPlacementRestrictionSatisfyPolicyType) {
        self.dataPlacementRestrictionSatisfyPolicy = arg
        let swift = TeamLog.EventType.dataPlacementRestrictionSatisfyPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to device approvals exception list
@objc
public class DBXTeamLogEventTypeDeviceApprovalsAddException: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsAddException: DBXTeamLogDeviceApprovalsAddExceptionType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsAddExceptionType) {
        self.deviceApprovalsAddException = arg
        let swift = TeamLog.EventType.deviceApprovalsAddException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Set/removed limit on number of computers member can link to team Dropbox account
@objc
public class DBXTeamLogEventTypeDeviceApprovalsChangeDesktopPolicy: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsChangeDesktopPolicy: DBXTeamLogDeviceApprovalsChangeDesktopPolicyType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeDesktopPolicyType) {
        self.deviceApprovalsChangeDesktopPolicy = arg
        let swift = TeamLog.EventType.deviceApprovalsChangeDesktopPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Set/removed limit on number of mobile devices member can link to team Dropbox account
@objc
public class DBXTeamLogEventTypeDeviceApprovalsChangeMobilePolicy: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsChangeMobilePolicy: DBXTeamLogDeviceApprovalsChangeMobilePolicyType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeMobilePolicyType) {
        self.deviceApprovalsChangeMobilePolicy = arg
        let swift = TeamLog.EventType.deviceApprovalsChangeMobilePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed device approvals setting when member is over limit
@objc
public class DBXTeamLogEventTypeDeviceApprovalsChangeOverageAction: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsChangeOverageAction: DBXTeamLogDeviceApprovalsChangeOverageActionType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeOverageActionType) {
        self.deviceApprovalsChangeOverageAction = arg
        let swift = TeamLog.EventType.deviceApprovalsChangeOverageAction(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed device approvals setting when member unlinks approved device
@objc
public class DBXTeamLogEventTypeDeviceApprovalsChangeUnlinkAction: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsChangeUnlinkAction: DBXTeamLogDeviceApprovalsChangeUnlinkActionType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsChangeUnlinkActionType) {
        self.deviceApprovalsChangeUnlinkAction = arg
        let swift = TeamLog.EventType.deviceApprovalsChangeUnlinkAction(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from device approvals exception list
@objc
public class DBXTeamLogEventTypeDeviceApprovalsRemoveException: DBXTeamLogEventType {
    @objc
    public var deviceApprovalsRemoveException: DBXTeamLogDeviceApprovalsRemoveExceptionType

    @objc
    public init(_ arg: DBXTeamLogDeviceApprovalsRemoveExceptionType) {
        self.deviceApprovalsRemoveException = arg
        let swift = TeamLog.EventType.deviceApprovalsRemoveException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to directory restrictions list
@objc
public class DBXTeamLogEventTypeDirectoryRestrictionsAddMembers: DBXTeamLogEventType {
    @objc
    public var directoryRestrictionsAddMembers: DBXTeamLogDirectoryRestrictionsAddMembersType

    @objc
    public init(_ arg: DBXTeamLogDirectoryRestrictionsAddMembersType) {
        self.directoryRestrictionsAddMembers = arg
        let swift = TeamLog.EventType.directoryRestrictionsAddMembers(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from directory restrictions list
@objc
public class DBXTeamLogEventTypeDirectoryRestrictionsRemoveMembers: DBXTeamLogEventType {
    @objc
    public var directoryRestrictionsRemoveMembers: DBXTeamLogDirectoryRestrictionsRemoveMembersType

    @objc
    public init(_ arg: DBXTeamLogDirectoryRestrictionsRemoveMembersType) {
        self.directoryRestrictionsRemoveMembers = arg
        let swift = TeamLog.EventType.directoryRestrictionsRemoveMembers(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Dropbox Passwords policy for team
@objc
public class DBXTeamLogEventTypeDropboxPasswordsPolicyChanged: DBXTeamLogEventType {
    @objc
    public var dropboxPasswordsPolicyChanged: DBXTeamLogDropboxPasswordsPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogDropboxPasswordsPolicyChangedType) {
        self.dropboxPasswordsPolicyChanged = arg
        let swift = TeamLog.EventType.dropboxPasswordsPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed email to Dropbox policy for team
@objc
public class DBXTeamLogEventTypeEmailIngestPolicyChanged: DBXTeamLogEventType {
    @objc
    public var emailIngestPolicyChanged: DBXTeamLogEmailIngestPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogEmailIngestPolicyChangedType) {
        self.emailIngestPolicyChanged = arg
        let swift = TeamLog.EventType.emailIngestPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to EMM exception list
@objc
public class DBXTeamLogEventTypeEmmAddException: DBXTeamLogEventType {
    @objc
    public var emmAddException: DBXTeamLogEmmAddExceptionType

    @objc
    public init(_ arg: DBXTeamLogEmmAddExceptionType) {
        self.emmAddException = arg
        let swift = TeamLog.EventType.emmAddException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled enterprise mobility management for members
@objc
public class DBXTeamLogEventTypeEmmChangePolicy: DBXTeamLogEventType {
    @objc
    public var emmChangePolicy: DBXTeamLogEmmChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogEmmChangePolicyType) {
        self.emmChangePolicy = arg
        let swift = TeamLog.EventType.emmChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from EMM exception list
@objc
public class DBXTeamLogEventTypeEmmRemoveException: DBXTeamLogEventType {
    @objc
    public var emmRemoveException: DBXTeamLogEmmRemoveExceptionType

    @objc
    public init(_ arg: DBXTeamLogEmmRemoveExceptionType) {
        self.emmRemoveException = arg
        let swift = TeamLog.EventType.emmRemoveException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Accepted/opted out of extended version history
@objc
public class DBXTeamLogEventTypeExtendedVersionHistoryChangePolicy: DBXTeamLogEventType {
    @objc
    public var extendedVersionHistoryChangePolicy: DBXTeamLogExtendedVersionHistoryChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogExtendedVersionHistoryChangePolicyType) {
        self.extendedVersionHistoryChangePolicy = arg
        let swift = TeamLog.EventType.extendedVersionHistoryChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed external drive backup policy for team
@objc
public class DBXTeamLogEventTypeExternalDriveBackupPolicyChanged: DBXTeamLogEventType {
    @objc
    public var externalDriveBackupPolicyChanged: DBXTeamLogExternalDriveBackupPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogExternalDriveBackupPolicyChangedType) {
        self.externalDriveBackupPolicyChanged = arg
        let swift = TeamLog.EventType.externalDriveBackupPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled commenting on team files
@objc
public class DBXTeamLogEventTypeFileCommentsChangePolicy: DBXTeamLogEventType {
    @objc
    public var fileCommentsChangePolicy: DBXTeamLogFileCommentsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogFileCommentsChangePolicyType) {
        self.fileCommentsChangePolicy = arg
        let swift = TeamLog.EventType.fileCommentsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed file locking policy for team
@objc
public class DBXTeamLogEventTypeFileLockingPolicyChanged: DBXTeamLogEventType {
    @objc
    public var fileLockingPolicyChanged: DBXTeamLogFileLockingPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogFileLockingPolicyChangedType) {
        self.fileLockingPolicyChanged = arg
        let swift = TeamLog.EventType.fileLockingPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed File Provider Migration policy for team
@objc
public class DBXTeamLogEventTypeFileProviderMigrationPolicyChanged: DBXTeamLogEventType {
    @objc
    public var fileProviderMigrationPolicyChanged: DBXTeamLogFileProviderMigrationPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogFileProviderMigrationPolicyChangedType) {
        self.fileProviderMigrationPolicyChanged = arg
        let swift = TeamLog.EventType.fileProviderMigrationPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled file requests
@objc
public class DBXTeamLogEventTypeFileRequestsChangePolicy: DBXTeamLogEventType {
    @objc
    public var fileRequestsChangePolicy: DBXTeamLogFileRequestsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogFileRequestsChangePolicyType) {
        self.fileRequestsChangePolicy = arg
        let swift = TeamLog.EventType.fileRequestsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled file request emails for everyone (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeFileRequestsEmailsEnabled: DBXTeamLogEventType {
    @objc
    public var fileRequestsEmailsEnabled: DBXTeamLogFileRequestsEmailsEnabledType

    @objc
    public init(_ arg: DBXTeamLogFileRequestsEmailsEnabledType) {
        self.fileRequestsEmailsEnabled = arg
        let swift = TeamLog.EventType.fileRequestsEmailsEnabled(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled file request emails for team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeFileRequestsEmailsRestrictedToTeamOnly: DBXTeamLogEventType {
    @objc
    public var fileRequestsEmailsRestrictedToTeamOnly: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType

    @objc
    public init(_ arg: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType) {
        self.fileRequestsEmailsRestrictedToTeamOnly = arg
        let swift = TeamLog.EventType.fileRequestsEmailsRestrictedToTeamOnly(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed file transfers policy for team
@objc
public class DBXTeamLogEventTypeFileTransfersPolicyChanged: DBXTeamLogEventType {
    @objc
    public var fileTransfersPolicyChanged: DBXTeamLogFileTransfersPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogFileTransfersPolicyChangedType) {
        self.fileTransfersPolicyChanged = arg
        let swift = TeamLog.EventType.fileTransfersPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed folder link restrictions policy for team
@objc
public class DBXTeamLogEventTypeFolderLinkRestrictionPolicyChanged: DBXTeamLogEventType {
    @objc
    public var folderLinkRestrictionPolicyChanged: DBXTeamLogFolderLinkRestrictionPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogFolderLinkRestrictionPolicyChangedType) {
        self.folderLinkRestrictionPolicyChanged = arg
        let swift = TeamLog.EventType.folderLinkRestrictionPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Google single sign-on for team
@objc
public class DBXTeamLogEventTypeGoogleSsoChangePolicy: DBXTeamLogEventType {
    @objc
    public var googleSsoChangePolicy: DBXTeamLogGoogleSsoChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogGoogleSsoChangePolicyType) {
        self.googleSsoChangePolicy = arg
        let swift = TeamLog.EventType.googleSsoChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed who can create groups
@objc
public class DBXTeamLogEventTypeGroupUserManagementChangePolicy: DBXTeamLogEventType {
    @objc
    public var groupUserManagementChangePolicy: DBXTeamLogGroupUserManagementChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogGroupUserManagementChangePolicyType) {
        self.groupUserManagementChangePolicy = arg
        let swift = TeamLog.EventType.groupUserManagementChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed integration policy for team
@objc
public class DBXTeamLogEventTypeIntegrationPolicyChanged: DBXTeamLogEventType {
    @objc
    public var integrationPolicyChanged: DBXTeamLogIntegrationPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogIntegrationPolicyChangedType) {
        self.integrationPolicyChanged = arg
        let swift = TeamLog.EventType.integrationPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed invite accept email policy for team
@objc
public class DBXTeamLogEventTypeInviteAcceptanceEmailPolicyChanged: DBXTeamLogEventType {
    @objc
    public var inviteAcceptanceEmailPolicyChanged: DBXTeamLogInviteAcceptanceEmailPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogInviteAcceptanceEmailPolicyChangedType) {
        self.inviteAcceptanceEmailPolicyChanged = arg
        let swift = TeamLog.EventType.inviteAcceptanceEmailPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether users can find team when not invited
@objc
public class DBXTeamLogEventTypeMemberRequestsChangePolicy: DBXTeamLogEventType {
    @objc
    public var memberRequestsChangePolicy: DBXTeamLogMemberRequestsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogMemberRequestsChangePolicyType) {
        self.memberRequestsChangePolicy = arg
        let swift = TeamLog.EventType.memberRequestsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed member send invite policy for team
@objc
public class DBXTeamLogEventTypeMemberSendInvitePolicyChanged: DBXTeamLogEventType {
    @objc
    public var memberSendInvitePolicyChanged: DBXTeamLogMemberSendInvitePolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogMemberSendInvitePolicyChangedType) {
        self.memberSendInvitePolicyChanged = arg
        let swift = TeamLog.EventType.memberSendInvitePolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to member space limit exception list
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsAddException: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsAddException: DBXTeamLogMemberSpaceLimitsAddExceptionType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsAddExceptionType) {
        self.memberSpaceLimitsAddException = arg
        let swift = TeamLog.EventType.memberSpaceLimitsAddException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed member space limit type for team
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsChangeCapsTypePolicy: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsChangeCapsTypePolicy: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType) {
        self.memberSpaceLimitsChangeCapsTypePolicy = arg
        let swift = TeamLog.EventType.memberSpaceLimitsChangeCapsTypePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team default member space limit
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsChangePolicy: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsChangePolicy: DBXTeamLogMemberSpaceLimitsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsChangePolicyType) {
        self.memberSpaceLimitsChangePolicy = arg
        let swift = TeamLog.EventType.memberSpaceLimitsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from member space limit exception list
@objc
public class DBXTeamLogEventTypeMemberSpaceLimitsRemoveException: DBXTeamLogEventType {
    @objc
    public var memberSpaceLimitsRemoveException: DBXTeamLogMemberSpaceLimitsRemoveExceptionType

    @objc
    public init(_ arg: DBXTeamLogMemberSpaceLimitsRemoveExceptionType) {
        self.memberSpaceLimitsRemoveException = arg
        let swift = TeamLog.EventType.memberSpaceLimitsRemoveException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled option for team members to suggest people to add to team
@objc
public class DBXTeamLogEventTypeMemberSuggestionsChangePolicy: DBXTeamLogEventType {
    @objc
    public var memberSuggestionsChangePolicy: DBXTeamLogMemberSuggestionsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogMemberSuggestionsChangePolicyType) {
        self.memberSuggestionsChangePolicy = arg
        let swift = TeamLog.EventType.memberSuggestionsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Microsoft Office add-in
@objc
public class DBXTeamLogEventTypeMicrosoftOfficeAddinChangePolicy: DBXTeamLogEventType {
    @objc
    public var microsoftOfficeAddinChangePolicy: DBXTeamLogMicrosoftOfficeAddinChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogMicrosoftOfficeAddinChangePolicyType) {
        self.microsoftOfficeAddinChangePolicy = arg
        let swift = TeamLog.EventType.microsoftOfficeAddinChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled network control
@objc
public class DBXTeamLogEventTypeNetworkControlChangePolicy: DBXTeamLogEventType {
    @objc
    public var networkControlChangePolicy: DBXTeamLogNetworkControlChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogNetworkControlChangePolicyType) {
        self.networkControlChangePolicy = arg
        let swift = TeamLog.EventType.networkControlChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific
/// members
@objc
public class DBXTeamLogEventTypePaperChangeDeploymentPolicy: DBXTeamLogEventType {
    @objc
    public var paperChangeDeploymentPolicy: DBXTeamLogPaperChangeDeploymentPolicyType

    @objc
    public init(_ arg: DBXTeamLogPaperChangeDeploymentPolicyType) {
        self.paperChangeDeploymentPolicy = arg
        let swift = TeamLog.EventType.paperChangeDeploymentPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether non-members can view Paper docs with link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypePaperChangeMemberLinkPolicy: DBXTeamLogEventType {
    @objc
    public var paperChangeMemberLinkPolicy: DBXTeamLogPaperChangeMemberLinkPolicyType

    @objc
    public init(_ arg: DBXTeamLogPaperChangeMemberLinkPolicyType) {
        self.paperChangeMemberLinkPolicy = arg
        let swift = TeamLog.EventType.paperChangeMemberLinkPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share Paper docs outside team, and if docs are accessible only
/// by team members or anyone by default
@objc
public class DBXTeamLogEventTypePaperChangeMemberPolicy: DBXTeamLogEventType {
    @objc
    public var paperChangeMemberPolicy: DBXTeamLogPaperChangeMemberPolicyType

    @objc
    public init(_ arg: DBXTeamLogPaperChangeMemberPolicyType) {
        self.paperChangeMemberPolicy = arg
        let swift = TeamLog.EventType.paperChangeMemberPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Dropbox Paper for team
@objc
public class DBXTeamLogEventTypePaperChangePolicy: DBXTeamLogEventType {
    @objc
    public var paperChangePolicy: DBXTeamLogPaperChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogPaperChangePolicyType) {
        self.paperChangePolicy = arg
        let swift = TeamLog.EventType.paperChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Paper Default Folder Policy setting for team
@objc
public class DBXTeamLogEventTypePaperDefaultFolderPolicyChanged: DBXTeamLogEventType {
    @objc
    public var paperDefaultFolderPolicyChanged: DBXTeamLogPaperDefaultFolderPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogPaperDefaultFolderPolicyChangedType) {
        self.paperDefaultFolderPolicyChanged = arg
        let swift = TeamLog.EventType.paperDefaultFolderPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Paper Desktop for team
@objc
public class DBXTeamLogEventTypePaperDesktopPolicyChanged: DBXTeamLogEventType {
    @objc
    public var paperDesktopPolicyChanged: DBXTeamLogPaperDesktopPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogPaperDesktopPolicyChangedType) {
        self.paperDesktopPolicyChanged = arg
        let swift = TeamLog.EventType.paperDesktopPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added users to Paper-enabled users list
@objc
public class DBXTeamLogEventTypePaperEnabledUsersGroupAddition: DBXTeamLogEventType {
    @objc
    public var paperEnabledUsersGroupAddition: DBXTeamLogPaperEnabledUsersGroupAdditionType

    @objc
    public init(_ arg: DBXTeamLogPaperEnabledUsersGroupAdditionType) {
        self.paperEnabledUsersGroupAddition = arg
        let swift = TeamLog.EventType.paperEnabledUsersGroupAddition(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed users from Paper-enabled users list
@objc
public class DBXTeamLogEventTypePaperEnabledUsersGroupRemoval: DBXTeamLogEventType {
    @objc
    public var paperEnabledUsersGroupRemoval: DBXTeamLogPaperEnabledUsersGroupRemovalType

    @objc
    public init(_ arg: DBXTeamLogPaperEnabledUsersGroupRemovalType) {
        self.paperEnabledUsersGroupRemoval = arg
        let swift = TeamLog.EventType.paperEnabledUsersGroupRemoval(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team password strength requirements
@objc
public class DBXTeamLogEventTypePasswordStrengthRequirementsChangePolicy: DBXTeamLogEventType {
    @objc
    public var passwordStrengthRequirementsChangePolicy: DBXTeamLogPasswordStrengthRequirementsChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogPasswordStrengthRequirementsChangePolicyType) {
        self.passwordStrengthRequirementsChangePolicy = arg
        let swift = TeamLog.EventType.passwordStrengthRequirementsChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled ability of team members to permanently delete content
@objc
public class DBXTeamLogEventTypePermanentDeleteChangePolicy: DBXTeamLogEventType {
    @objc
    public var permanentDeleteChangePolicy: DBXTeamLogPermanentDeleteChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogPermanentDeleteChangePolicyType) {
        self.permanentDeleteChangePolicy = arg
        let swift = TeamLog.EventType.permanentDeleteChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled reseller support
@objc
public class DBXTeamLogEventTypeResellerSupportChangePolicy: DBXTeamLogEventType {
    @objc
    public var resellerSupportChangePolicy: DBXTeamLogResellerSupportChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogResellerSupportChangePolicyType) {
        self.resellerSupportChangePolicy = arg
        let swift = TeamLog.EventType.resellerSupportChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Rewind policy for team
@objc
public class DBXTeamLogEventTypeRewindPolicyChanged: DBXTeamLogEventType {
    @objc
    public var rewindPolicyChanged: DBXTeamLogRewindPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogRewindPolicyChangedType) {
        self.rewindPolicyChanged = arg
        let swift = TeamLog.EventType.rewindPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed send for signature policy for team
@objc
public class DBXTeamLogEventTypeSendForSignaturePolicyChanged: DBXTeamLogEventType {
    @objc
    public var sendForSignaturePolicyChanged: DBXTeamLogSendForSignaturePolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogSendForSignaturePolicyChangedType) {
        self.sendForSignaturePolicyChanged = arg
        let swift = TeamLog.EventType.sendForSignaturePolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether team members can join shared folders owned outside team
@objc
public class DBXTeamLogEventTypeSharingChangeFolderJoinPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeFolderJoinPolicy: DBXTeamLogSharingChangeFolderJoinPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeFolderJoinPolicyType) {
        self.sharingChangeFolderJoinPolicy = arg
        let swift = TeamLog.EventType.sharingChangeFolderJoinPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the allow remove or change expiration policy for the links shared outside of the
/// team
@objc
public class DBXTeamLogEventTypeSharingChangeLinkAllowChangeExpirationPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeLinkAllowChangeExpirationPolicy: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType) {
        self.sharingChangeLinkAllowChangeExpirationPolicy = arg
        let swift = TeamLog.EventType.sharingChangeLinkAllowChangeExpirationPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the default expiration for the links shared outside of the team
@objc
public class DBXTeamLogEventTypeSharingChangeLinkDefaultExpirationPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeLinkDefaultExpirationPolicy: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType) {
        self.sharingChangeLinkDefaultExpirationPolicy = arg
        let swift = TeamLog.EventType.sharingChangeLinkDefaultExpirationPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the password requirement for the links shared outside of the team
@objc
public class DBXTeamLogEventTypeSharingChangeLinkEnforcePasswordPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeLinkEnforcePasswordPolicy: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType) {
        self.sharingChangeLinkEnforcePasswordPolicy = arg
        let swift = TeamLog.EventType.sharingChangeLinkEnforcePasswordPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share links outside team, and if links are accessible only by
/// team members or anyone by default
@objc
public class DBXTeamLogEventTypeSharingChangeLinkPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeLinkPolicy: DBXTeamLogSharingChangeLinkPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeLinkPolicyType) {
        self.sharingChangeLinkPolicy = arg
        let swift = TeamLog.EventType.sharingChangeLinkPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share files/folders outside team
@objc
public class DBXTeamLogEventTypeSharingChangeMemberPolicy: DBXTeamLogEventType {
    @objc
    public var sharingChangeMemberPolicy: DBXTeamLogSharingChangeMemberPolicyType

    @objc
    public init(_ arg: DBXTeamLogSharingChangeMemberPolicyType) {
        self.sharingChangeMemberPolicy = arg
        let swift = TeamLog.EventType.sharingChangeMemberPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for team
@objc
public class DBXTeamLogEventTypeShowcaseChangeDownloadPolicy: DBXTeamLogEventType {
    @objc
    public var showcaseChangeDownloadPolicy: DBXTeamLogShowcaseChangeDownloadPolicyType

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeDownloadPolicyType) {
        self.showcaseChangeDownloadPolicy = arg
        let swift = TeamLog.EventType.showcaseChangeDownloadPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Dropbox Showcase for team
@objc
public class DBXTeamLogEventTypeShowcaseChangeEnabledPolicy: DBXTeamLogEventType {
    @objc
    public var showcaseChangeEnabledPolicy: DBXTeamLogShowcaseChangeEnabledPolicyType

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeEnabledPolicyType) {
        self.showcaseChangeEnabledPolicy = arg
        let swift = TeamLog.EventType.showcaseChangeEnabledPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for team
@objc
public class DBXTeamLogEventTypeShowcaseChangeExternalSharingPolicy: DBXTeamLogEventType {
    @objc
    public var showcaseChangeExternalSharingPolicy: DBXTeamLogShowcaseChangeExternalSharingPolicyType

    @objc
    public init(_ arg: DBXTeamLogShowcaseChangeExternalSharingPolicyType) {
        self.showcaseChangeExternalSharingPolicy = arg
        let swift = TeamLog.EventType.showcaseChangeExternalSharingPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed automatic Smart Sync setting for team
@objc
public class DBXTeamLogEventTypeSmarterSmartSyncPolicyChanged: DBXTeamLogEventType {
    @objc
    public var smarterSmartSyncPolicyChanged: DBXTeamLogSmarterSmartSyncPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogSmarterSmartSyncPolicyChangedType) {
        self.smarterSmartSyncPolicyChanged = arg
        let swift = TeamLog.EventType.smarterSmartSyncPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed default Smart Sync setting for team members
@objc
public class DBXTeamLogEventTypeSmartSyncChangePolicy: DBXTeamLogEventType {
    @objc
    public var smartSyncChangePolicy: DBXTeamLogSmartSyncChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogSmartSyncChangePolicyType) {
        self.smartSyncChangePolicy = arg
        let swift = TeamLog.EventType.smartSyncChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Opted team into Smart Sync
@objc
public class DBXTeamLogEventTypeSmartSyncNotOptOut: DBXTeamLogEventType {
    @objc
    public var smartSyncNotOptOut: DBXTeamLogSmartSyncNotOptOutType

    @objc
    public init(_ arg: DBXTeamLogSmartSyncNotOptOutType) {
        self.smartSyncNotOptOut = arg
        let swift = TeamLog.EventType.smartSyncNotOptOut(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Opted team out of Smart Sync
@objc
public class DBXTeamLogEventTypeSmartSyncOptOut: DBXTeamLogEventType {
    @objc
    public var smartSyncOptOut: DBXTeamLogSmartSyncOptOutType

    @objc
    public init(_ arg: DBXTeamLogSmartSyncOptOutType) {
        self.smartSyncOptOut = arg
        let swift = TeamLog.EventType.smartSyncOptOut(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed single sign-on setting for team
@objc
public class DBXTeamLogEventTypeSsoChangePolicy: DBXTeamLogEventType {
    @objc
    public var ssoChangePolicy: DBXTeamLogSsoChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogSsoChangePolicyType) {
        self.ssoChangePolicy = arg
        let swift = TeamLog.EventType.ssoChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team branding policy for team
@objc
public class DBXTeamLogEventTypeTeamBrandingPolicyChanged: DBXTeamLogEventType {
    @objc
    public var teamBrandingPolicyChanged: DBXTeamLogTeamBrandingPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogTeamBrandingPolicyChangedType) {
        self.teamBrandingPolicyChanged = arg
        let swift = TeamLog.EventType.teamBrandingPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed App Integrations setting for team
@objc
public class DBXTeamLogEventTypeTeamExtensionsPolicyChanged: DBXTeamLogEventType {
    @objc
    public var teamExtensionsPolicyChanged: DBXTeamLogTeamExtensionsPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogTeamExtensionsPolicyChangedType) {
        self.teamExtensionsPolicyChanged = arg
        let swift = TeamLog.EventType.teamExtensionsPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Team Selective Sync for team
@objc
public class DBXTeamLogEventTypeTeamSelectiveSyncPolicyChanged: DBXTeamLogEventType {
    @objc
    public var teamSelectiveSyncPolicyChanged: DBXTeamLogTeamSelectiveSyncPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogTeamSelectiveSyncPolicyChangedType) {
        self.teamSelectiveSyncPolicyChanged = arg
        let swift = TeamLog.EventType.teamSelectiveSyncPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Edited the approved list for sharing externally
@objc
public class DBXTeamLogEventTypeTeamSharingWhitelistSubjectsChanged: DBXTeamLogEventType {
    @objc
    public var teamSharingWhitelistSubjectsChanged: DBXTeamLogTeamSharingWhitelistSubjectsChangedType

    @objc
    public init(_ arg: DBXTeamLogTeamSharingWhitelistSubjectsChangedType) {
        self.teamSharingWhitelistSubjectsChanged = arg
        let swift = TeamLog.EventType.teamSharingWhitelistSubjectsChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to two factor authentication exception list
@objc
public class DBXTeamLogEventTypeTfaAddException: DBXTeamLogEventType {
    @objc
    public var tfaAddException: DBXTeamLogTfaAddExceptionType

    @objc
    public init(_ arg: DBXTeamLogTfaAddExceptionType) {
        self.tfaAddException = arg
        let swift = TeamLog.EventType.tfaAddException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed two-step verification setting for team
@objc
public class DBXTeamLogEventTypeTfaChangePolicy: DBXTeamLogEventType {
    @objc
    public var tfaChangePolicy: DBXTeamLogTfaChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogTfaChangePolicyType) {
        self.tfaChangePolicy = arg
        let swift = TeamLog.EventType.tfaChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from two factor authentication exception list
@objc
public class DBXTeamLogEventTypeTfaRemoveException: DBXTeamLogEventType {
    @objc
    public var tfaRemoveException: DBXTeamLogTfaRemoveExceptionType

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveExceptionType) {
        self.tfaRemoveException = arg
        let swift = TeamLog.EventType.tfaRemoveException(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled option for members to link personal Dropbox account and team account to
/// same computer
@objc
public class DBXTeamLogEventTypeTwoAccountChangePolicy: DBXTeamLogEventType {
    @objc
    public var twoAccountChangePolicy: DBXTeamLogTwoAccountChangePolicyType

    @objc
    public init(_ arg: DBXTeamLogTwoAccountChangePolicyType) {
        self.twoAccountChangePolicy = arg
        let swift = TeamLog.EventType.twoAccountChangePolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team policy for viewer info
@objc
public class DBXTeamLogEventTypeViewerInfoPolicyChanged: DBXTeamLogEventType {
    @objc
    public var viewerInfoPolicyChanged: DBXTeamLogViewerInfoPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogViewerInfoPolicyChangedType) {
        self.viewerInfoPolicyChanged = arg
        let swift = TeamLog.EventType.viewerInfoPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed watermarking policy for team
@objc
public class DBXTeamLogEventTypeWatermarkingPolicyChanged: DBXTeamLogEventType {
    @objc
    public var watermarkingPolicyChanged: DBXTeamLogWatermarkingPolicyChangedType

    @objc
    public init(_ arg: DBXTeamLogWatermarkingPolicyChangedType) {
        self.watermarkingPolicyChanged = arg
        let swift = TeamLog.EventType.watermarkingPolicyChanged(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed limit on active sessions per member
@objc
public class DBXTeamLogEventTypeWebSessionsChangeActiveSessionLimit: DBXTeamLogEventType {
    @objc
    public var webSessionsChangeActiveSessionLimit: DBXTeamLogWebSessionsChangeActiveSessionLimitType

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeActiveSessionLimitType) {
        self.webSessionsChangeActiveSessionLimit = arg
        let swift = TeamLog.EventType.webSessionsChangeActiveSessionLimit(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed how long members can stay signed in to Dropbox.com
@objc
public class DBXTeamLogEventTypeWebSessionsChangeFixedLengthPolicy: DBXTeamLogEventType {
    @objc
    public var webSessionsChangeFixedLengthPolicy: DBXTeamLogWebSessionsChangeFixedLengthPolicyType

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeFixedLengthPolicyType) {
        self.webSessionsChangeFixedLengthPolicy = arg
        let swift = TeamLog.EventType.webSessionsChangeFixedLengthPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_policies) Changed how long team members can be idle while signed in to Dropbox.com
@objc
public class DBXTeamLogEventTypeWebSessionsChangeIdleLengthPolicy: DBXTeamLogEventType {
    @objc
    public var webSessionsChangeIdleLengthPolicy: DBXTeamLogWebSessionsChangeIdleLengthPolicyType

    @objc
    public init(_ arg: DBXTeamLogWebSessionsChangeIdleLengthPolicyType) {
        self.webSessionsChangeIdleLengthPolicy = arg
        let swift = TeamLog.EventType.webSessionsChangeIdleLengthPolicy(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Requested data residency migration for team data
@objc
public class DBXTeamLogEventTypeDataResidencyMigrationRequestSuccessful: DBXTeamLogEventType {
    @objc
    public var dataResidencyMigrationRequestSuccessful: DBXTeamLogDataResidencyMigrationRequestSuccessfulType

    @objc
    public init(_ arg: DBXTeamLogDataResidencyMigrationRequestSuccessfulType) {
        self.dataResidencyMigrationRequestSuccessful = arg
        let swift = TeamLog.EventType.dataResidencyMigrationRequestSuccessful(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Request for data residency migration for team data has failed
@objc
public class DBXTeamLogEventTypeDataResidencyMigrationRequestUnsuccessful: DBXTeamLogEventType {
    @objc
    public var dataResidencyMigrationRequestUnsuccessful: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType

    @objc
    public init(_ arg: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType) {
        self.dataResidencyMigrationRequestUnsuccessful = arg
        let swift = TeamLog.EventType.dataResidencyMigrationRequestUnsuccessful(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Merged another team into this team
@objc
public class DBXTeamLogEventTypeTeamMergeFrom: DBXTeamLogEventType {
    @objc
    public var teamMergeFrom: DBXTeamLogTeamMergeFromType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeFromType) {
        self.teamMergeFrom = arg
        let swift = TeamLog.EventType.teamMergeFrom(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Merged this team into another team
@objc
public class DBXTeamLogEventTypeTeamMergeTo: DBXTeamLogEventType {
    @objc
    public var teamMergeTo: DBXTeamLogTeamMergeToType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeToType) {
        self.teamMergeTo = arg
        let swift = TeamLog.EventType.teamMergeTo(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Added team background to display on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileAddBackground: DBXTeamLogEventType {
    @objc
    public var teamProfileAddBackground: DBXTeamLogTeamProfileAddBackgroundType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileAddBackgroundType) {
        self.teamProfileAddBackground = arg
        let swift = TeamLog.EventType.teamProfileAddBackground(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Added team logo to display on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileAddLogo: DBXTeamLogEventType {
    @objc
    public var teamProfileAddLogo: DBXTeamLogTeamProfileAddLogoType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileAddLogoType) {
        self.teamProfileAddLogo = arg
        let swift = TeamLog.EventType.teamProfileAddLogo(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team background displayed on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileChangeBackground: DBXTeamLogEventType {
    @objc
    public var teamProfileChangeBackground: DBXTeamLogTeamProfileChangeBackgroundType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeBackgroundType) {
        self.teamProfileChangeBackground = arg
        let swift = TeamLog.EventType.teamProfileChangeBackground(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Changed default language for team
@objc
public class DBXTeamLogEventTypeTeamProfileChangeDefaultLanguage: DBXTeamLogEventType {
    @objc
    public var teamProfileChangeDefaultLanguage: DBXTeamLogTeamProfileChangeDefaultLanguageType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeDefaultLanguageType) {
        self.teamProfileChangeDefaultLanguage = arg
        let swift = TeamLog.EventType.teamProfileChangeDefaultLanguage(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team logo displayed on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileChangeLogo: DBXTeamLogEventType {
    @objc
    public var teamProfileChangeLogo: DBXTeamLogTeamProfileChangeLogoType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeLogoType) {
        self.teamProfileChangeLogo = arg
        let swift = TeamLog.EventType.teamProfileChangeLogo(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team name
@objc
public class DBXTeamLogEventTypeTeamProfileChangeName: DBXTeamLogEventType {
    @objc
    public var teamProfileChangeName: DBXTeamLogTeamProfileChangeNameType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileChangeNameType) {
        self.teamProfileChangeName = arg
        let swift = TeamLog.EventType.teamProfileChangeName(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Removed team background displayed on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileRemoveBackground: DBXTeamLogEventType {
    @objc
    public var teamProfileRemoveBackground: DBXTeamLogTeamProfileRemoveBackgroundType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileRemoveBackgroundType) {
        self.teamProfileRemoveBackground = arg
        let swift = TeamLog.EventType.teamProfileRemoveBackground(arg.swift)
        super.init(swift: swift)
    }
}

/// (team_profile) Removed team logo displayed on shared link headers
@objc
public class DBXTeamLogEventTypeTeamProfileRemoveLogo: DBXTeamLogEventType {
    @objc
    public var teamProfileRemoveLogo: DBXTeamLogTeamProfileRemoveLogoType

    @objc
    public init(_ arg: DBXTeamLogTeamProfileRemoveLogoType) {
        self.teamProfileRemoveLogo = arg
        let swift = TeamLog.EventType.teamProfileRemoveLogo(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Added backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeTfaAddBackupPhone: DBXTeamLogEventType {
    @objc
    public var tfaAddBackupPhone: DBXTeamLogTfaAddBackupPhoneType

    @objc
    public init(_ arg: DBXTeamLogTfaAddBackupPhoneType) {
        self.tfaAddBackupPhone = arg
        let swift = TeamLog.EventType.tfaAddBackupPhone(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Added security key for two-step verification
@objc
public class DBXTeamLogEventTypeTfaAddSecurityKey: DBXTeamLogEventType {
    @objc
    public var tfaAddSecurityKey: DBXTeamLogTfaAddSecurityKeyType

    @objc
    public init(_ arg: DBXTeamLogTfaAddSecurityKeyType) {
        self.tfaAddSecurityKey = arg
        let swift = TeamLog.EventType.tfaAddSecurityKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Changed backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeTfaChangeBackupPhone: DBXTeamLogEventType {
    @objc
    public var tfaChangeBackupPhone: DBXTeamLogTfaChangeBackupPhoneType

    @objc
    public init(_ arg: DBXTeamLogTfaChangeBackupPhoneType) {
        self.tfaChangeBackupPhone = arg
        let swift = TeamLog.EventType.tfaChangeBackupPhone(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Enabled/disabled/changed two-step verification setting
@objc
public class DBXTeamLogEventTypeTfaChangeStatus: DBXTeamLogEventType {
    @objc
    public var tfaChangeStatus: DBXTeamLogTfaChangeStatusType

    @objc
    public init(_ arg: DBXTeamLogTfaChangeStatusType) {
        self.tfaChangeStatus = arg
        let swift = TeamLog.EventType.tfaChangeStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Removed backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeTfaRemoveBackupPhone: DBXTeamLogEventType {
    @objc
    public var tfaRemoveBackupPhone: DBXTeamLogTfaRemoveBackupPhoneType

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveBackupPhoneType) {
        self.tfaRemoveBackupPhone = arg
        let swift = TeamLog.EventType.tfaRemoveBackupPhone(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Removed security key for two-step verification
@objc
public class DBXTeamLogEventTypeTfaRemoveSecurityKey: DBXTeamLogEventType {
    @objc
    public var tfaRemoveSecurityKey: DBXTeamLogTfaRemoveSecurityKeyType

    @objc
    public init(_ arg: DBXTeamLogTfaRemoveSecurityKeyType) {
        self.tfaRemoveSecurityKey = arg
        let swift = TeamLog.EventType.tfaRemoveSecurityKey(arg.swift)
        super.init(swift: swift)
    }
}

/// (tfa) Reset two-step verification for team member
@objc
public class DBXTeamLogEventTypeTfaReset: DBXTeamLogEventType {
    @objc
    public var tfaReset: DBXTeamLogTfaResetType

    @objc
    public init(_ arg: DBXTeamLogTfaResetType) {
        self.tfaReset = arg
        let swift = TeamLog.EventType.tfaReset(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed enterprise admin role
@objc
public class DBXTeamLogEventTypeChangedEnterpriseAdminRole: DBXTeamLogEventType {
    @objc
    public var changedEnterpriseAdminRole: DBXTeamLogChangedEnterpriseAdminRoleType

    @objc
    public init(_ arg: DBXTeamLogChangedEnterpriseAdminRoleType) {
        self.changedEnterpriseAdminRole = arg
        let swift = TeamLog.EventType.changedEnterpriseAdminRole(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed enterprise-connected team status
@objc
public class DBXTeamLogEventTypeChangedEnterpriseConnectedTeamStatus: DBXTeamLogEventType {
    @objc
    public var changedEnterpriseConnectedTeamStatus: DBXTeamLogChangedEnterpriseConnectedTeamStatusType

    @objc
    public init(_ arg: DBXTeamLogChangedEnterpriseConnectedTeamStatusType) {
        self.changedEnterpriseConnectedTeamStatus = arg
        let swift = TeamLog.EventType.changedEnterpriseConnectedTeamStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Ended enterprise admin session
@objc
public class DBXTeamLogEventTypeEndedEnterpriseAdminSession: DBXTeamLogEventType {
    @objc
    public var endedEnterpriseAdminSession: DBXTeamLogEndedEnterpriseAdminSessionType

    @objc
    public init(_ arg: DBXTeamLogEndedEnterpriseAdminSessionType) {
        self.endedEnterpriseAdminSession = arg
        let swift = TeamLog.EventType.endedEnterpriseAdminSession(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Ended enterprise admin session (deprecated, replaced by 'Ended enterprise admin session')
@objc
public class DBXTeamLogEventTypeEndedEnterpriseAdminSessionDeprecated: DBXTeamLogEventType {
    @objc
    public var endedEnterpriseAdminSessionDeprecated: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType

    @objc
    public init(_ arg: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType) {
        self.endedEnterpriseAdminSessionDeprecated = arg
        let swift = TeamLog.EventType.endedEnterpriseAdminSessionDeprecated(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed who can update a setting
@objc
public class DBXTeamLogEventTypeEnterpriseSettingsLocking: DBXTeamLogEventType {
    @objc
    public var enterpriseSettingsLocking: DBXTeamLogEnterpriseSettingsLockingType

    @objc
    public init(_ arg: DBXTeamLogEnterpriseSettingsLockingType) {
        self.enterpriseSettingsLocking = arg
        let swift = TeamLog.EventType.enterpriseSettingsLocking(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed guest team admin status
@objc
public class DBXTeamLogEventTypeGuestAdminChangeStatus: DBXTeamLogEventType {
    @objc
    public var guestAdminChangeStatus: DBXTeamLogGuestAdminChangeStatusType

    @objc
    public init(_ arg: DBXTeamLogGuestAdminChangeStatusType) {
        self.guestAdminChangeStatus = arg
        let swift = TeamLog.EventType.guestAdminChangeStatus(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Started enterprise admin session
@objc
public class DBXTeamLogEventTypeStartedEnterpriseAdminSession: DBXTeamLogEventType {
    @objc
    public var startedEnterpriseAdminSession: DBXTeamLogStartedEnterpriseAdminSessionType

    @objc
    public init(_ arg: DBXTeamLogStartedEnterpriseAdminSessionType) {
        self.startedEnterpriseAdminSession = arg
        let swift = TeamLog.EventType.startedEnterpriseAdminSession(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request
@objc
public class DBXTeamLogEventTypeTeamMergeRequestAccepted: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestAccepted: DBXTeamLogTeamMergeRequestAcceptedType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedType) {
        self.teamMergeRequestAccepted = arg
        let swift = TeamLog.EventType.teamMergeRequestAccepted(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestAcceptedShownToPrimaryTeam: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType) {
        self.teamMergeRequestAcceptedShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestAcceptedShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestAcceptedShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestAcceptedShownToSecondaryTeam: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType) {
        self.teamMergeRequestAcceptedShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestAcceptedShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Automatically canceled team merge request
@objc
public class DBXTeamLogEventTypeTeamMergeRequestAutoCanceled: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestAutoCanceled: DBXTeamLogTeamMergeRequestAutoCanceledType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestAutoCanceledType) {
        self.teamMergeRequestAutoCanceled = arg
        let swift = TeamLog.EventType.teamMergeRequestAutoCanceled(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request
@objc
public class DBXTeamLogEventTypeTeamMergeRequestCanceled: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestCanceled: DBXTeamLogTeamMergeRequestCanceledType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledType) {
        self.teamMergeRequestCanceled = arg
        let swift = TeamLog.EventType.teamMergeRequestCanceled(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestCanceledShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestCanceledShownToPrimaryTeam: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType) {
        self.teamMergeRequestCanceledShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestCanceledShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestCanceledShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestCanceledShownToSecondaryTeam: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType) {
        self.teamMergeRequestCanceledShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestCanceledShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired
@objc
public class DBXTeamLogEventTypeTeamMergeRequestExpired: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestExpired: DBXTeamLogTeamMergeRequestExpiredType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredType) {
        self.teamMergeRequestExpired = arg
        let swift = TeamLog.EventType.teamMergeRequestExpired(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestExpiredShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestExpiredShownToPrimaryTeam: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType) {
        self.teamMergeRequestExpiredShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestExpiredShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestExpiredShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestExpiredShownToSecondaryTeam: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType) {
        self.teamMergeRequestExpiredShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestExpiredShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeTeamMergeRequestRejectedShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestRejectedShownToPrimaryTeam: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType) {
        self.teamMergeRequestRejectedShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestRejectedShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeTeamMergeRequestRejectedShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestRejectedShownToSecondaryTeam: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType) {
        self.teamMergeRequestRejectedShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestRejectedShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder
@objc
public class DBXTeamLogEventTypeTeamMergeRequestReminder: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestReminder: DBXTeamLogTeamMergeRequestReminderType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderType) {
        self.teamMergeRequestReminder = arg
        let swift = TeamLog.EventType.teamMergeRequestReminder(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
/// reminder')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestReminderShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestReminderShownToPrimaryTeam: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType) {
        self.teamMergeRequestReminderShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestReminderShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
/// reminder')
@objc
public class DBXTeamLogEventTypeTeamMergeRequestReminderShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestReminderShownToSecondaryTeam: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType) {
        self.teamMergeRequestReminderShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestReminderShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled the team merge
@objc
public class DBXTeamLogEventTypeTeamMergeRequestRevoked: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestRevoked: DBXTeamLogTeamMergeRequestRevokedType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestRevokedType) {
        self.teamMergeRequestRevoked = arg
        let swift = TeamLog.EventType.teamMergeRequestRevoked(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Requested to merge their Dropbox team into yours
@objc
public class DBXTeamLogEventTypeTeamMergeRequestSentShownToPrimaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestSentShownToPrimaryTeam: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType) {
        self.teamMergeRequestSentShownToPrimaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestSentShownToPrimaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// (trusted_teams) Requested to merge your team into another Dropbox team
@objc
public class DBXTeamLogEventTypeTeamMergeRequestSentShownToSecondaryTeam: DBXTeamLogEventType {
    @objc
    public var teamMergeRequestSentShownToSecondaryTeam: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType

    @objc
    public init(_ arg: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType) {
        self.teamMergeRequestSentShownToSecondaryTeam = arg
        let swift = TeamLog.EventType.teamMergeRequestSentShownToSecondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventTypeOther: DBXTeamLogEventType {
    @objc
    public init() {
        let swift = TeamLog.EventType.other
        super.init(swift: swift)
    }
}

/// The type of the event.
@objc
public class DBXTeamLogEventTypeArg: NSObject {
    let swift: TeamLog.EventTypeArg

    public init(swift: TeamLog.EventTypeArg) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.EventTypeArg) -> DBXTeamLogEventTypeArg {
        switch swift {
        case .adminAlertingAlertStateChanged:
            return DBXTeamLogEventTypeArgAdminAlertingAlertStateChanged()
        case .adminAlertingChangedAlertConfig:
            return DBXTeamLogEventTypeArgAdminAlertingChangedAlertConfig()
        case .adminAlertingTriggeredAlert:
            return DBXTeamLogEventTypeArgAdminAlertingTriggeredAlert()
        case .ransomwareRestoreProcessCompleted:
            return DBXTeamLogEventTypeArgRansomwareRestoreProcessCompleted()
        case .ransomwareRestoreProcessStarted:
            return DBXTeamLogEventTypeArgRansomwareRestoreProcessStarted()
        case .appBlockedByPermissions:
            return DBXTeamLogEventTypeArgAppBlockedByPermissions()
        case .appLinkTeam:
            return DBXTeamLogEventTypeArgAppLinkTeam()
        case .appLinkUser:
            return DBXTeamLogEventTypeArgAppLinkUser()
        case .appUnlinkTeam:
            return DBXTeamLogEventTypeArgAppUnlinkTeam()
        case .appUnlinkUser:
            return DBXTeamLogEventTypeArgAppUnlinkUser()
        case .integrationConnected:
            return DBXTeamLogEventTypeArgIntegrationConnected()
        case .integrationDisconnected:
            return DBXTeamLogEventTypeArgIntegrationDisconnected()
        case .fileAddComment:
            return DBXTeamLogEventTypeArgFileAddComment()
        case .fileChangeCommentSubscription:
            return DBXTeamLogEventTypeArgFileChangeCommentSubscription()
        case .fileDeleteComment:
            return DBXTeamLogEventTypeArgFileDeleteComment()
        case .fileEditComment:
            return DBXTeamLogEventTypeArgFileEditComment()
        case .fileLikeComment:
            return DBXTeamLogEventTypeArgFileLikeComment()
        case .fileResolveComment:
            return DBXTeamLogEventTypeArgFileResolveComment()
        case .fileUnlikeComment:
            return DBXTeamLogEventTypeArgFileUnlikeComment()
        case .fileUnresolveComment:
            return DBXTeamLogEventTypeArgFileUnresolveComment()
        case .governancePolicyAddFolders:
            return DBXTeamLogEventTypeArgGovernancePolicyAddFolders()
        case .governancePolicyAddFolderFailed:
            return DBXTeamLogEventTypeArgGovernancePolicyAddFolderFailed()
        case .governancePolicyContentDisposed:
            return DBXTeamLogEventTypeArgGovernancePolicyContentDisposed()
        case .governancePolicyCreate:
            return DBXTeamLogEventTypeArgGovernancePolicyCreate()
        case .governancePolicyDelete:
            return DBXTeamLogEventTypeArgGovernancePolicyDelete()
        case .governancePolicyEditDetails:
            return DBXTeamLogEventTypeArgGovernancePolicyEditDetails()
        case .governancePolicyEditDuration:
            return DBXTeamLogEventTypeArgGovernancePolicyEditDuration()
        case .governancePolicyExportCreated:
            return DBXTeamLogEventTypeArgGovernancePolicyExportCreated()
        case .governancePolicyExportRemoved:
            return DBXTeamLogEventTypeArgGovernancePolicyExportRemoved()
        case .governancePolicyRemoveFolders:
            return DBXTeamLogEventTypeArgGovernancePolicyRemoveFolders()
        case .governancePolicyReportCreated:
            return DBXTeamLogEventTypeArgGovernancePolicyReportCreated()
        case .governancePolicyZipPartDownloaded:
            return DBXTeamLogEventTypeArgGovernancePolicyZipPartDownloaded()
        case .legalHoldsActivateAHold:
            return DBXTeamLogEventTypeArgLegalHoldsActivateAHold()
        case .legalHoldsAddMembers:
            return DBXTeamLogEventTypeArgLegalHoldsAddMembers()
        case .legalHoldsChangeHoldDetails:
            return DBXTeamLogEventTypeArgLegalHoldsChangeHoldDetails()
        case .legalHoldsChangeHoldName:
            return DBXTeamLogEventTypeArgLegalHoldsChangeHoldName()
        case .legalHoldsExportAHold:
            return DBXTeamLogEventTypeArgLegalHoldsExportAHold()
        case .legalHoldsExportCancelled:
            return DBXTeamLogEventTypeArgLegalHoldsExportCancelled()
        case .legalHoldsExportDownloaded:
            return DBXTeamLogEventTypeArgLegalHoldsExportDownloaded()
        case .legalHoldsExportRemoved:
            return DBXTeamLogEventTypeArgLegalHoldsExportRemoved()
        case .legalHoldsReleaseAHold:
            return DBXTeamLogEventTypeArgLegalHoldsReleaseAHold()
        case .legalHoldsRemoveMembers:
            return DBXTeamLogEventTypeArgLegalHoldsRemoveMembers()
        case .legalHoldsReportAHold:
            return DBXTeamLogEventTypeArgLegalHoldsReportAHold()
        case .deviceChangeIpDesktop:
            return DBXTeamLogEventTypeArgDeviceChangeIpDesktop()
        case .deviceChangeIpMobile:
            return DBXTeamLogEventTypeArgDeviceChangeIpMobile()
        case .deviceChangeIpWeb:
            return DBXTeamLogEventTypeArgDeviceChangeIpWeb()
        case .deviceDeleteOnUnlinkFail:
            return DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkFail()
        case .deviceDeleteOnUnlinkSuccess:
            return DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkSuccess()
        case .deviceLinkFail:
            return DBXTeamLogEventTypeArgDeviceLinkFail()
        case .deviceLinkSuccess:
            return DBXTeamLogEventTypeArgDeviceLinkSuccess()
        case .deviceManagementDisabled:
            return DBXTeamLogEventTypeArgDeviceManagementDisabled()
        case .deviceManagementEnabled:
            return DBXTeamLogEventTypeArgDeviceManagementEnabled()
        case .deviceSyncBackupStatusChanged:
            return DBXTeamLogEventTypeArgDeviceSyncBackupStatusChanged()
        case .deviceUnlink:
            return DBXTeamLogEventTypeArgDeviceUnlink()
        case .dropboxPasswordsExported:
            return DBXTeamLogEventTypeArgDropboxPasswordsExported()
        case .dropboxPasswordsNewDeviceEnrolled:
            return DBXTeamLogEventTypeArgDropboxPasswordsNewDeviceEnrolled()
        case .emmRefreshAuthToken:
            return DBXTeamLogEventTypeArgEmmRefreshAuthToken()
        case .externalDriveBackupEligibilityStatusChecked:
            return DBXTeamLogEventTypeArgExternalDriveBackupEligibilityStatusChecked()
        case .externalDriveBackupStatusChanged:
            return DBXTeamLogEventTypeArgExternalDriveBackupStatusChanged()
        case .accountCaptureChangeAvailability:
            return DBXTeamLogEventTypeArgAccountCaptureChangeAvailability()
        case .accountCaptureMigrateAccount:
            return DBXTeamLogEventTypeArgAccountCaptureMigrateAccount()
        case .accountCaptureNotificationEmailsSent:
            return DBXTeamLogEventTypeArgAccountCaptureNotificationEmailsSent()
        case .accountCaptureRelinquishAccount:
            return DBXTeamLogEventTypeArgAccountCaptureRelinquishAccount()
        case .disabledDomainInvites:
            return DBXTeamLogEventTypeArgDisabledDomainInvites()
        case .domainInvitesApproveRequestToJoinTeam:
            return DBXTeamLogEventTypeArgDomainInvitesApproveRequestToJoinTeam()
        case .domainInvitesDeclineRequestToJoinTeam:
            return DBXTeamLogEventTypeArgDomainInvitesDeclineRequestToJoinTeam()
        case .domainInvitesEmailExistingUsers:
            return DBXTeamLogEventTypeArgDomainInvitesEmailExistingUsers()
        case .domainInvitesRequestToJoinTeam:
            return DBXTeamLogEventTypeArgDomainInvitesRequestToJoinTeam()
        case .domainInvitesSetInviteNewUserPrefToNo:
            return DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToNo()
        case .domainInvitesSetInviteNewUserPrefToYes:
            return DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToYes()
        case .domainVerificationAddDomainFail:
            return DBXTeamLogEventTypeArgDomainVerificationAddDomainFail()
        case .domainVerificationAddDomainSuccess:
            return DBXTeamLogEventTypeArgDomainVerificationAddDomainSuccess()
        case .domainVerificationRemoveDomain:
            return DBXTeamLogEventTypeArgDomainVerificationRemoveDomain()
        case .enabledDomainInvites:
            return DBXTeamLogEventTypeArgEnabledDomainInvites()
        case .teamEncryptionKeyCancelKeyDeletion:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyCancelKeyDeletion()
        case .teamEncryptionKeyCreateKey:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyCreateKey()
        case .teamEncryptionKeyDeleteKey:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyDeleteKey()
        case .teamEncryptionKeyDisableKey:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyDisableKey()
        case .teamEncryptionKeyEnableKey:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyEnableKey()
        case .teamEncryptionKeyRotateKey:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyRotateKey()
        case .teamEncryptionKeyScheduleKeyDeletion:
            return DBXTeamLogEventTypeArgTeamEncryptionKeyScheduleKeyDeletion()
        case .applyNamingConvention:
            return DBXTeamLogEventTypeArgApplyNamingConvention()
        case .createFolder:
            return DBXTeamLogEventTypeArgCreateFolder()
        case .fileAdd:
            return DBXTeamLogEventTypeArgFileAdd()
        case .fileAddFromAutomation:
            return DBXTeamLogEventTypeArgFileAddFromAutomation()
        case .fileCopy:
            return DBXTeamLogEventTypeArgFileCopy()
        case .fileDelete:
            return DBXTeamLogEventTypeArgFileDelete()
        case .fileDownload:
            return DBXTeamLogEventTypeArgFileDownload()
        case .fileEdit:
            return DBXTeamLogEventTypeArgFileEdit()
        case .fileGetCopyReference:
            return DBXTeamLogEventTypeArgFileGetCopyReference()
        case .fileLockingLockStatusChanged:
            return DBXTeamLogEventTypeArgFileLockingLockStatusChanged()
        case .fileMove:
            return DBXTeamLogEventTypeArgFileMove()
        case .filePermanentlyDelete:
            return DBXTeamLogEventTypeArgFilePermanentlyDelete()
        case .filePreview:
            return DBXTeamLogEventTypeArgFilePreview()
        case .fileRename:
            return DBXTeamLogEventTypeArgFileRename()
        case .fileRestore:
            return DBXTeamLogEventTypeArgFileRestore()
        case .fileRevert:
            return DBXTeamLogEventTypeArgFileRevert()
        case .fileRollbackChanges:
            return DBXTeamLogEventTypeArgFileRollbackChanges()
        case .fileSaveCopyReference:
            return DBXTeamLogEventTypeArgFileSaveCopyReference()
        case .folderOverviewDescriptionChanged:
            return DBXTeamLogEventTypeArgFolderOverviewDescriptionChanged()
        case .folderOverviewItemPinned:
            return DBXTeamLogEventTypeArgFolderOverviewItemPinned()
        case .folderOverviewItemUnpinned:
            return DBXTeamLogEventTypeArgFolderOverviewItemUnpinned()
        case .objectLabelAdded:
            return DBXTeamLogEventTypeArgObjectLabelAdded()
        case .objectLabelRemoved:
            return DBXTeamLogEventTypeArgObjectLabelRemoved()
        case .objectLabelUpdatedValue:
            return DBXTeamLogEventTypeArgObjectLabelUpdatedValue()
        case .organizeFolderWithTidy:
            return DBXTeamLogEventTypeArgOrganizeFolderWithTidy()
        case .replayFileDelete:
            return DBXTeamLogEventTypeArgReplayFileDelete()
        case .rewindFolder:
            return DBXTeamLogEventTypeArgRewindFolder()
        case .undoNamingConvention:
            return DBXTeamLogEventTypeArgUndoNamingConvention()
        case .undoOrganizeFolderWithTidy:
            return DBXTeamLogEventTypeArgUndoOrganizeFolderWithTidy()
        case .userTagsAdded:
            return DBXTeamLogEventTypeArgUserTagsAdded()
        case .userTagsRemoved:
            return DBXTeamLogEventTypeArgUserTagsRemoved()
        case .emailIngestReceiveFile:
            return DBXTeamLogEventTypeArgEmailIngestReceiveFile()
        case .fileRequestChange:
            return DBXTeamLogEventTypeArgFileRequestChange()
        case .fileRequestClose:
            return DBXTeamLogEventTypeArgFileRequestClose()
        case .fileRequestCreate:
            return DBXTeamLogEventTypeArgFileRequestCreate()
        case .fileRequestDelete:
            return DBXTeamLogEventTypeArgFileRequestDelete()
        case .fileRequestReceiveFile:
            return DBXTeamLogEventTypeArgFileRequestReceiveFile()
        case .groupAddExternalId:
            return DBXTeamLogEventTypeArgGroupAddExternalId()
        case .groupAddMember:
            return DBXTeamLogEventTypeArgGroupAddMember()
        case .groupChangeExternalId:
            return DBXTeamLogEventTypeArgGroupChangeExternalId()
        case .groupChangeManagementType:
            return DBXTeamLogEventTypeArgGroupChangeManagementType()
        case .groupChangeMemberRole:
            return DBXTeamLogEventTypeArgGroupChangeMemberRole()
        case .groupCreate:
            return DBXTeamLogEventTypeArgGroupCreate()
        case .groupDelete:
            return DBXTeamLogEventTypeArgGroupDelete()
        case .groupDescriptionUpdated:
            return DBXTeamLogEventTypeArgGroupDescriptionUpdated()
        case .groupJoinPolicyUpdated:
            return DBXTeamLogEventTypeArgGroupJoinPolicyUpdated()
        case .groupMoved:
            return DBXTeamLogEventTypeArgGroupMoved()
        case .groupRemoveExternalId:
            return DBXTeamLogEventTypeArgGroupRemoveExternalId()
        case .groupRemoveMember:
            return DBXTeamLogEventTypeArgGroupRemoveMember()
        case .groupRename:
            return DBXTeamLogEventTypeArgGroupRename()
        case .accountLockOrUnlocked:
            return DBXTeamLogEventTypeArgAccountLockOrUnlocked()
        case .emmError:
            return DBXTeamLogEventTypeArgEmmError()
        case .guestAdminSignedInViaTrustedTeams:
            return DBXTeamLogEventTypeArgGuestAdminSignedInViaTrustedTeams()
        case .guestAdminSignedOutViaTrustedTeams:
            return DBXTeamLogEventTypeArgGuestAdminSignedOutViaTrustedTeams()
        case .loginFail:
            return DBXTeamLogEventTypeArgLoginFail()
        case .loginSuccess:
            return DBXTeamLogEventTypeArgLoginSuccess()
        case .logout:
            return DBXTeamLogEventTypeArgLogout()
        case .resellerSupportSessionEnd:
            return DBXTeamLogEventTypeArgResellerSupportSessionEnd()
        case .resellerSupportSessionStart:
            return DBXTeamLogEventTypeArgResellerSupportSessionStart()
        case .signInAsSessionEnd:
            return DBXTeamLogEventTypeArgSignInAsSessionEnd()
        case .signInAsSessionStart:
            return DBXTeamLogEventTypeArgSignInAsSessionStart()
        case .ssoError:
            return DBXTeamLogEventTypeArgSsoError()
        case .backupAdminInvitationSent:
            return DBXTeamLogEventTypeArgBackupAdminInvitationSent()
        case .backupInvitationOpened:
            return DBXTeamLogEventTypeArgBackupInvitationOpened()
        case .createTeamInviteLink:
            return DBXTeamLogEventTypeArgCreateTeamInviteLink()
        case .deleteTeamInviteLink:
            return DBXTeamLogEventTypeArgDeleteTeamInviteLink()
        case .memberAddExternalId:
            return DBXTeamLogEventTypeArgMemberAddExternalId()
        case .memberAddName:
            return DBXTeamLogEventTypeArgMemberAddName()
        case .memberChangeAdminRole:
            return DBXTeamLogEventTypeArgMemberChangeAdminRole()
        case .memberChangeEmail:
            return DBXTeamLogEventTypeArgMemberChangeEmail()
        case .memberChangeExternalId:
            return DBXTeamLogEventTypeArgMemberChangeExternalId()
        case .memberChangeMembershipType:
            return DBXTeamLogEventTypeArgMemberChangeMembershipType()
        case .memberChangeName:
            return DBXTeamLogEventTypeArgMemberChangeName()
        case .memberChangeResellerRole:
            return DBXTeamLogEventTypeArgMemberChangeResellerRole()
        case .memberChangeStatus:
            return DBXTeamLogEventTypeArgMemberChangeStatus()
        case .memberDeleteManualContacts:
            return DBXTeamLogEventTypeArgMemberDeleteManualContacts()
        case .memberDeleteProfilePhoto:
            return DBXTeamLogEventTypeArgMemberDeleteProfilePhoto()
        case .memberPermanentlyDeleteAccountContents:
            return DBXTeamLogEventTypeArgMemberPermanentlyDeleteAccountContents()
        case .memberRemoveExternalId:
            return DBXTeamLogEventTypeArgMemberRemoveExternalId()
        case .memberSetProfilePhoto:
            return DBXTeamLogEventTypeArgMemberSetProfilePhoto()
        case .memberSpaceLimitsAddCustomQuota:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsAddCustomQuota()
        case .memberSpaceLimitsChangeCustomQuota:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCustomQuota()
        case .memberSpaceLimitsChangeStatus:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeStatus()
        case .memberSpaceLimitsRemoveCustomQuota:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveCustomQuota()
        case .memberSuggest:
            return DBXTeamLogEventTypeArgMemberSuggest()
        case .memberTransferAccountContents:
            return DBXTeamLogEventTypeArgMemberTransferAccountContents()
        case .pendingSecondaryEmailAdded:
            return DBXTeamLogEventTypeArgPendingSecondaryEmailAdded()
        case .secondaryEmailDeleted:
            return DBXTeamLogEventTypeArgSecondaryEmailDeleted()
        case .secondaryEmailVerified:
            return DBXTeamLogEventTypeArgSecondaryEmailVerified()
        case .secondaryMailsPolicyChanged:
            return DBXTeamLogEventTypeArgSecondaryMailsPolicyChanged()
        case .binderAddPage:
            return DBXTeamLogEventTypeArgBinderAddPage()
        case .binderAddSection:
            return DBXTeamLogEventTypeArgBinderAddSection()
        case .binderRemovePage:
            return DBXTeamLogEventTypeArgBinderRemovePage()
        case .binderRemoveSection:
            return DBXTeamLogEventTypeArgBinderRemoveSection()
        case .binderRenamePage:
            return DBXTeamLogEventTypeArgBinderRenamePage()
        case .binderRenameSection:
            return DBXTeamLogEventTypeArgBinderRenameSection()
        case .binderReorderPage:
            return DBXTeamLogEventTypeArgBinderReorderPage()
        case .binderReorderSection:
            return DBXTeamLogEventTypeArgBinderReorderSection()
        case .paperContentAddMember:
            return DBXTeamLogEventTypeArgPaperContentAddMember()
        case .paperContentAddToFolder:
            return DBXTeamLogEventTypeArgPaperContentAddToFolder()
        case .paperContentArchive:
            return DBXTeamLogEventTypeArgPaperContentArchive()
        case .paperContentCreate:
            return DBXTeamLogEventTypeArgPaperContentCreate()
        case .paperContentPermanentlyDelete:
            return DBXTeamLogEventTypeArgPaperContentPermanentlyDelete()
        case .paperContentRemoveFromFolder:
            return DBXTeamLogEventTypeArgPaperContentRemoveFromFolder()
        case .paperContentRemoveMember:
            return DBXTeamLogEventTypeArgPaperContentRemoveMember()
        case .paperContentRename:
            return DBXTeamLogEventTypeArgPaperContentRename()
        case .paperContentRestore:
            return DBXTeamLogEventTypeArgPaperContentRestore()
        case .paperDocAddComment:
            return DBXTeamLogEventTypeArgPaperDocAddComment()
        case .paperDocChangeMemberRole:
            return DBXTeamLogEventTypeArgPaperDocChangeMemberRole()
        case .paperDocChangeSharingPolicy:
            return DBXTeamLogEventTypeArgPaperDocChangeSharingPolicy()
        case .paperDocChangeSubscription:
            return DBXTeamLogEventTypeArgPaperDocChangeSubscription()
        case .paperDocDeleted:
            return DBXTeamLogEventTypeArgPaperDocDeleted()
        case .paperDocDeleteComment:
            return DBXTeamLogEventTypeArgPaperDocDeleteComment()
        case .paperDocDownload:
            return DBXTeamLogEventTypeArgPaperDocDownload()
        case .paperDocEdit:
            return DBXTeamLogEventTypeArgPaperDocEdit()
        case .paperDocEditComment:
            return DBXTeamLogEventTypeArgPaperDocEditComment()
        case .paperDocFollowed:
            return DBXTeamLogEventTypeArgPaperDocFollowed()
        case .paperDocMention:
            return DBXTeamLogEventTypeArgPaperDocMention()
        case .paperDocOwnershipChanged:
            return DBXTeamLogEventTypeArgPaperDocOwnershipChanged()
        case .paperDocRequestAccess:
            return DBXTeamLogEventTypeArgPaperDocRequestAccess()
        case .paperDocResolveComment:
            return DBXTeamLogEventTypeArgPaperDocResolveComment()
        case .paperDocRevert:
            return DBXTeamLogEventTypeArgPaperDocRevert()
        case .paperDocSlackShare:
            return DBXTeamLogEventTypeArgPaperDocSlackShare()
        case .paperDocTeamInvite:
            return DBXTeamLogEventTypeArgPaperDocTeamInvite()
        case .paperDocTrashed:
            return DBXTeamLogEventTypeArgPaperDocTrashed()
        case .paperDocUnresolveComment:
            return DBXTeamLogEventTypeArgPaperDocUnresolveComment()
        case .paperDocUntrashed:
            return DBXTeamLogEventTypeArgPaperDocUntrashed()
        case .paperDocView:
            return DBXTeamLogEventTypeArgPaperDocView()
        case .paperExternalViewAllow:
            return DBXTeamLogEventTypeArgPaperExternalViewAllow()
        case .paperExternalViewDefaultTeam:
            return DBXTeamLogEventTypeArgPaperExternalViewDefaultTeam()
        case .paperExternalViewForbid:
            return DBXTeamLogEventTypeArgPaperExternalViewForbid()
        case .paperFolderChangeSubscription:
            return DBXTeamLogEventTypeArgPaperFolderChangeSubscription()
        case .paperFolderDeleted:
            return DBXTeamLogEventTypeArgPaperFolderDeleted()
        case .paperFolderFollowed:
            return DBXTeamLogEventTypeArgPaperFolderFollowed()
        case .paperFolderTeamInvite:
            return DBXTeamLogEventTypeArgPaperFolderTeamInvite()
        case .paperPublishedLinkChangePermission:
            return DBXTeamLogEventTypeArgPaperPublishedLinkChangePermission()
        case .paperPublishedLinkCreate:
            return DBXTeamLogEventTypeArgPaperPublishedLinkCreate()
        case .paperPublishedLinkDisabled:
            return DBXTeamLogEventTypeArgPaperPublishedLinkDisabled()
        case .paperPublishedLinkView:
            return DBXTeamLogEventTypeArgPaperPublishedLinkView()
        case .passwordChange:
            return DBXTeamLogEventTypeArgPasswordChange()
        case .passwordReset:
            return DBXTeamLogEventTypeArgPasswordReset()
        case .passwordResetAll:
            return DBXTeamLogEventTypeArgPasswordResetAll()
        case .classificationCreateReport:
            return DBXTeamLogEventTypeArgClassificationCreateReport()
        case .classificationCreateReportFail:
            return DBXTeamLogEventTypeArgClassificationCreateReportFail()
        case .emmCreateExceptionsReport:
            return DBXTeamLogEventTypeArgEmmCreateExceptionsReport()
        case .emmCreateUsageReport:
            return DBXTeamLogEventTypeArgEmmCreateUsageReport()
        case .exportMembersReport:
            return DBXTeamLogEventTypeArgExportMembersReport()
        case .exportMembersReportFail:
            return DBXTeamLogEventTypeArgExportMembersReportFail()
        case .externalSharingCreateReport:
            return DBXTeamLogEventTypeArgExternalSharingCreateReport()
        case .externalSharingReportFailed:
            return DBXTeamLogEventTypeArgExternalSharingReportFailed()
        case .noExpirationLinkGenCreateReport:
            return DBXTeamLogEventTypeArgNoExpirationLinkGenCreateReport()
        case .noExpirationLinkGenReportFailed:
            return DBXTeamLogEventTypeArgNoExpirationLinkGenReportFailed()
        case .noPasswordLinkGenCreateReport:
            return DBXTeamLogEventTypeArgNoPasswordLinkGenCreateReport()
        case .noPasswordLinkGenReportFailed:
            return DBXTeamLogEventTypeArgNoPasswordLinkGenReportFailed()
        case .noPasswordLinkViewCreateReport:
            return DBXTeamLogEventTypeArgNoPasswordLinkViewCreateReport()
        case .noPasswordLinkViewReportFailed:
            return DBXTeamLogEventTypeArgNoPasswordLinkViewReportFailed()
        case .outdatedLinkViewCreateReport:
            return DBXTeamLogEventTypeArgOutdatedLinkViewCreateReport()
        case .outdatedLinkViewReportFailed:
            return DBXTeamLogEventTypeArgOutdatedLinkViewReportFailed()
        case .paperAdminExportStart:
            return DBXTeamLogEventTypeArgPaperAdminExportStart()
        case .ransomwareAlertCreateReport:
            return DBXTeamLogEventTypeArgRansomwareAlertCreateReport()
        case .ransomwareAlertCreateReportFailed:
            return DBXTeamLogEventTypeArgRansomwareAlertCreateReportFailed()
        case .smartSyncCreateAdminPrivilegeReport:
            return DBXTeamLogEventTypeArgSmartSyncCreateAdminPrivilegeReport()
        case .teamActivityCreateReport:
            return DBXTeamLogEventTypeArgTeamActivityCreateReport()
        case .teamActivityCreateReportFail:
            return DBXTeamLogEventTypeArgTeamActivityCreateReportFail()
        case .collectionShare:
            return DBXTeamLogEventTypeArgCollectionShare()
        case .fileTransfersFileAdd:
            return DBXTeamLogEventTypeArgFileTransfersFileAdd()
        case .fileTransfersTransferDelete:
            return DBXTeamLogEventTypeArgFileTransfersTransferDelete()
        case .fileTransfersTransferDownload:
            return DBXTeamLogEventTypeArgFileTransfersTransferDownload()
        case .fileTransfersTransferSend:
            return DBXTeamLogEventTypeArgFileTransfersTransferSend()
        case .fileTransfersTransferView:
            return DBXTeamLogEventTypeArgFileTransfersTransferView()
        case .noteAclInviteOnly:
            return DBXTeamLogEventTypeArgNoteAclInviteOnly()
        case .noteAclLink:
            return DBXTeamLogEventTypeArgNoteAclLink()
        case .noteAclTeamLink:
            return DBXTeamLogEventTypeArgNoteAclTeamLink()
        case .noteShared:
            return DBXTeamLogEventTypeArgNoteShared()
        case .noteShareReceive:
            return DBXTeamLogEventTypeArgNoteShareReceive()
        case .openNoteShared:
            return DBXTeamLogEventTypeArgOpenNoteShared()
        case .replayFileSharedLinkCreated:
            return DBXTeamLogEventTypeArgReplayFileSharedLinkCreated()
        case .replayFileSharedLinkModified:
            return DBXTeamLogEventTypeArgReplayFileSharedLinkModified()
        case .replayProjectTeamAdd:
            return DBXTeamLogEventTypeArgReplayProjectTeamAdd()
        case .replayProjectTeamDelete:
            return DBXTeamLogEventTypeArgReplayProjectTeamDelete()
        case .sfAddGroup:
            return DBXTeamLogEventTypeArgSfAddGroup()
        case .sfAllowNonMembersToViewSharedLinks:
            return DBXTeamLogEventTypeArgSfAllowNonMembersToViewSharedLinks()
        case .sfExternalInviteWarn:
            return DBXTeamLogEventTypeArgSfExternalInviteWarn()
        case .sfFbInvite:
            return DBXTeamLogEventTypeArgSfFbInvite()
        case .sfFbInviteChangeRole:
            return DBXTeamLogEventTypeArgSfFbInviteChangeRole()
        case .sfFbUninvite:
            return DBXTeamLogEventTypeArgSfFbUninvite()
        case .sfInviteGroup:
            return DBXTeamLogEventTypeArgSfInviteGroup()
        case .sfTeamGrantAccess:
            return DBXTeamLogEventTypeArgSfTeamGrantAccess()
        case .sfTeamInvite:
            return DBXTeamLogEventTypeArgSfTeamInvite()
        case .sfTeamInviteChangeRole:
            return DBXTeamLogEventTypeArgSfTeamInviteChangeRole()
        case .sfTeamJoin:
            return DBXTeamLogEventTypeArgSfTeamJoin()
        case .sfTeamJoinFromOobLink:
            return DBXTeamLogEventTypeArgSfTeamJoinFromOobLink()
        case .sfTeamUninvite:
            return DBXTeamLogEventTypeArgSfTeamUninvite()
        case .sharedContentAddInvitees:
            return DBXTeamLogEventTypeArgSharedContentAddInvitees()
        case .sharedContentAddLinkExpiry:
            return DBXTeamLogEventTypeArgSharedContentAddLinkExpiry()
        case .sharedContentAddLinkPassword:
            return DBXTeamLogEventTypeArgSharedContentAddLinkPassword()
        case .sharedContentAddMember:
            return DBXTeamLogEventTypeArgSharedContentAddMember()
        case .sharedContentChangeDownloadsPolicy:
            return DBXTeamLogEventTypeArgSharedContentChangeDownloadsPolicy()
        case .sharedContentChangeInviteeRole:
            return DBXTeamLogEventTypeArgSharedContentChangeInviteeRole()
        case .sharedContentChangeLinkAudience:
            return DBXTeamLogEventTypeArgSharedContentChangeLinkAudience()
        case .sharedContentChangeLinkExpiry:
            return DBXTeamLogEventTypeArgSharedContentChangeLinkExpiry()
        case .sharedContentChangeLinkPassword:
            return DBXTeamLogEventTypeArgSharedContentChangeLinkPassword()
        case .sharedContentChangeMemberRole:
            return DBXTeamLogEventTypeArgSharedContentChangeMemberRole()
        case .sharedContentChangeViewerInfoPolicy:
            return DBXTeamLogEventTypeArgSharedContentChangeViewerInfoPolicy()
        case .sharedContentClaimInvitation:
            return DBXTeamLogEventTypeArgSharedContentClaimInvitation()
        case .sharedContentCopy:
            return DBXTeamLogEventTypeArgSharedContentCopy()
        case .sharedContentDownload:
            return DBXTeamLogEventTypeArgSharedContentDownload()
        case .sharedContentRelinquishMembership:
            return DBXTeamLogEventTypeArgSharedContentRelinquishMembership()
        case .sharedContentRemoveInvitees:
            return DBXTeamLogEventTypeArgSharedContentRemoveInvitees()
        case .sharedContentRemoveLinkExpiry:
            return DBXTeamLogEventTypeArgSharedContentRemoveLinkExpiry()
        case .sharedContentRemoveLinkPassword:
            return DBXTeamLogEventTypeArgSharedContentRemoveLinkPassword()
        case .sharedContentRemoveMember:
            return DBXTeamLogEventTypeArgSharedContentRemoveMember()
        case .sharedContentRequestAccess:
            return DBXTeamLogEventTypeArgSharedContentRequestAccess()
        case .sharedContentRestoreInvitees:
            return DBXTeamLogEventTypeArgSharedContentRestoreInvitees()
        case .sharedContentRestoreMember:
            return DBXTeamLogEventTypeArgSharedContentRestoreMember()
        case .sharedContentUnshare:
            return DBXTeamLogEventTypeArgSharedContentUnshare()
        case .sharedContentView:
            return DBXTeamLogEventTypeArgSharedContentView()
        case .sharedFolderChangeLinkPolicy:
            return DBXTeamLogEventTypeArgSharedFolderChangeLinkPolicy()
        case .sharedFolderChangeMembersInheritancePolicy:
            return DBXTeamLogEventTypeArgSharedFolderChangeMembersInheritancePolicy()
        case .sharedFolderChangeMembersManagementPolicy:
            return DBXTeamLogEventTypeArgSharedFolderChangeMembersManagementPolicy()
        case .sharedFolderChangeMembersPolicy:
            return DBXTeamLogEventTypeArgSharedFolderChangeMembersPolicy()
        case .sharedFolderCreate:
            return DBXTeamLogEventTypeArgSharedFolderCreate()
        case .sharedFolderDeclineInvitation:
            return DBXTeamLogEventTypeArgSharedFolderDeclineInvitation()
        case .sharedFolderMount:
            return DBXTeamLogEventTypeArgSharedFolderMount()
        case .sharedFolderNest:
            return DBXTeamLogEventTypeArgSharedFolderNest()
        case .sharedFolderTransferOwnership:
            return DBXTeamLogEventTypeArgSharedFolderTransferOwnership()
        case .sharedFolderUnmount:
            return DBXTeamLogEventTypeArgSharedFolderUnmount()
        case .sharedLinkAddExpiry:
            return DBXTeamLogEventTypeArgSharedLinkAddExpiry()
        case .sharedLinkChangeExpiry:
            return DBXTeamLogEventTypeArgSharedLinkChangeExpiry()
        case .sharedLinkChangeVisibility:
            return DBXTeamLogEventTypeArgSharedLinkChangeVisibility()
        case .sharedLinkCopy:
            return DBXTeamLogEventTypeArgSharedLinkCopy()
        case .sharedLinkCreate:
            return DBXTeamLogEventTypeArgSharedLinkCreate()
        case .sharedLinkDisable:
            return DBXTeamLogEventTypeArgSharedLinkDisable()
        case .sharedLinkDownload:
            return DBXTeamLogEventTypeArgSharedLinkDownload()
        case .sharedLinkRemoveExpiry:
            return DBXTeamLogEventTypeArgSharedLinkRemoveExpiry()
        case .sharedLinkSettingsAddExpiration:
            return DBXTeamLogEventTypeArgSharedLinkSettingsAddExpiration()
        case .sharedLinkSettingsAddPassword:
            return DBXTeamLogEventTypeArgSharedLinkSettingsAddPassword()
        case .sharedLinkSettingsAllowDownloadDisabled:
            return DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadDisabled()
        case .sharedLinkSettingsAllowDownloadEnabled:
            return DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadEnabled()
        case .sharedLinkSettingsChangeAudience:
            return DBXTeamLogEventTypeArgSharedLinkSettingsChangeAudience()
        case .sharedLinkSettingsChangeExpiration:
            return DBXTeamLogEventTypeArgSharedLinkSettingsChangeExpiration()
        case .sharedLinkSettingsChangePassword:
            return DBXTeamLogEventTypeArgSharedLinkSettingsChangePassword()
        case .sharedLinkSettingsRemoveExpiration:
            return DBXTeamLogEventTypeArgSharedLinkSettingsRemoveExpiration()
        case .sharedLinkSettingsRemovePassword:
            return DBXTeamLogEventTypeArgSharedLinkSettingsRemovePassword()
        case .sharedLinkShare:
            return DBXTeamLogEventTypeArgSharedLinkShare()
        case .sharedLinkView:
            return DBXTeamLogEventTypeArgSharedLinkView()
        case .sharedNoteOpened:
            return DBXTeamLogEventTypeArgSharedNoteOpened()
        case .shmodelDisableDownloads:
            return DBXTeamLogEventTypeArgShmodelDisableDownloads()
        case .shmodelEnableDownloads:
            return DBXTeamLogEventTypeArgShmodelEnableDownloads()
        case .shmodelGroupShare:
            return DBXTeamLogEventTypeArgShmodelGroupShare()
        case .showcaseAccessGranted:
            return DBXTeamLogEventTypeArgShowcaseAccessGranted()
        case .showcaseAddMember:
            return DBXTeamLogEventTypeArgShowcaseAddMember()
        case .showcaseArchived:
            return DBXTeamLogEventTypeArgShowcaseArchived()
        case .showcaseCreated:
            return DBXTeamLogEventTypeArgShowcaseCreated()
        case .showcaseDeleteComment:
            return DBXTeamLogEventTypeArgShowcaseDeleteComment()
        case .showcaseEdited:
            return DBXTeamLogEventTypeArgShowcaseEdited()
        case .showcaseEditComment:
            return DBXTeamLogEventTypeArgShowcaseEditComment()
        case .showcaseFileAdded:
            return DBXTeamLogEventTypeArgShowcaseFileAdded()
        case .showcaseFileDownload:
            return DBXTeamLogEventTypeArgShowcaseFileDownload()
        case .showcaseFileRemoved:
            return DBXTeamLogEventTypeArgShowcaseFileRemoved()
        case .showcaseFileView:
            return DBXTeamLogEventTypeArgShowcaseFileView()
        case .showcasePermanentlyDeleted:
            return DBXTeamLogEventTypeArgShowcasePermanentlyDeleted()
        case .showcasePostComment:
            return DBXTeamLogEventTypeArgShowcasePostComment()
        case .showcaseRemoveMember:
            return DBXTeamLogEventTypeArgShowcaseRemoveMember()
        case .showcaseRenamed:
            return DBXTeamLogEventTypeArgShowcaseRenamed()
        case .showcaseRequestAccess:
            return DBXTeamLogEventTypeArgShowcaseRequestAccess()
        case .showcaseResolveComment:
            return DBXTeamLogEventTypeArgShowcaseResolveComment()
        case .showcaseRestored:
            return DBXTeamLogEventTypeArgShowcaseRestored()
        case .showcaseTrashed:
            return DBXTeamLogEventTypeArgShowcaseTrashed()
        case .showcaseTrashedDeprecated:
            return DBXTeamLogEventTypeArgShowcaseTrashedDeprecated()
        case .showcaseUnresolveComment:
            return DBXTeamLogEventTypeArgShowcaseUnresolveComment()
        case .showcaseUntrashed:
            return DBXTeamLogEventTypeArgShowcaseUntrashed()
        case .showcaseUntrashedDeprecated:
            return DBXTeamLogEventTypeArgShowcaseUntrashedDeprecated()
        case .showcaseView:
            return DBXTeamLogEventTypeArgShowcaseView()
        case .ssoAddCert:
            return DBXTeamLogEventTypeArgSsoAddCert()
        case .ssoAddLoginUrl:
            return DBXTeamLogEventTypeArgSsoAddLoginUrl()
        case .ssoAddLogoutUrl:
            return DBXTeamLogEventTypeArgSsoAddLogoutUrl()
        case .ssoChangeCert:
            return DBXTeamLogEventTypeArgSsoChangeCert()
        case .ssoChangeLoginUrl:
            return DBXTeamLogEventTypeArgSsoChangeLoginUrl()
        case .ssoChangeLogoutUrl:
            return DBXTeamLogEventTypeArgSsoChangeLogoutUrl()
        case .ssoChangeSamlIdentityMode:
            return DBXTeamLogEventTypeArgSsoChangeSamlIdentityMode()
        case .ssoRemoveCert:
            return DBXTeamLogEventTypeArgSsoRemoveCert()
        case .ssoRemoveLoginUrl:
            return DBXTeamLogEventTypeArgSsoRemoveLoginUrl()
        case .ssoRemoveLogoutUrl:
            return DBXTeamLogEventTypeArgSsoRemoveLogoutUrl()
        case .teamFolderChangeStatus:
            return DBXTeamLogEventTypeArgTeamFolderChangeStatus()
        case .teamFolderCreate:
            return DBXTeamLogEventTypeArgTeamFolderCreate()
        case .teamFolderDowngrade:
            return DBXTeamLogEventTypeArgTeamFolderDowngrade()
        case .teamFolderPermanentlyDelete:
            return DBXTeamLogEventTypeArgTeamFolderPermanentlyDelete()
        case .teamFolderRename:
            return DBXTeamLogEventTypeArgTeamFolderRename()
        case .teamSelectiveSyncSettingsChanged:
            return DBXTeamLogEventTypeArgTeamSelectiveSyncSettingsChanged()
        case .accountCaptureChangePolicy:
            return DBXTeamLogEventTypeArgAccountCaptureChangePolicy()
        case .adminEmailRemindersChanged:
            return DBXTeamLogEventTypeArgAdminEmailRemindersChanged()
        case .allowDownloadDisabled:
            return DBXTeamLogEventTypeArgAllowDownloadDisabled()
        case .allowDownloadEnabled:
            return DBXTeamLogEventTypeArgAllowDownloadEnabled()
        case .appPermissionsChanged:
            return DBXTeamLogEventTypeArgAppPermissionsChanged()
        case .cameraUploadsPolicyChanged:
            return DBXTeamLogEventTypeArgCameraUploadsPolicyChanged()
        case .captureTranscriptPolicyChanged:
            return DBXTeamLogEventTypeArgCaptureTranscriptPolicyChanged()
        case .classificationChangePolicy:
            return DBXTeamLogEventTypeArgClassificationChangePolicy()
        case .computerBackupPolicyChanged:
            return DBXTeamLogEventTypeArgComputerBackupPolicyChanged()
        case .contentAdministrationPolicyChanged:
            return DBXTeamLogEventTypeArgContentAdministrationPolicyChanged()
        case .dataPlacementRestrictionChangePolicy:
            return DBXTeamLogEventTypeArgDataPlacementRestrictionChangePolicy()
        case .dataPlacementRestrictionSatisfyPolicy:
            return DBXTeamLogEventTypeArgDataPlacementRestrictionSatisfyPolicy()
        case .deviceApprovalsAddException:
            return DBXTeamLogEventTypeArgDeviceApprovalsAddException()
        case .deviceApprovalsChangeDesktopPolicy:
            return DBXTeamLogEventTypeArgDeviceApprovalsChangeDesktopPolicy()
        case .deviceApprovalsChangeMobilePolicy:
            return DBXTeamLogEventTypeArgDeviceApprovalsChangeMobilePolicy()
        case .deviceApprovalsChangeOverageAction:
            return DBXTeamLogEventTypeArgDeviceApprovalsChangeOverageAction()
        case .deviceApprovalsChangeUnlinkAction:
            return DBXTeamLogEventTypeArgDeviceApprovalsChangeUnlinkAction()
        case .deviceApprovalsRemoveException:
            return DBXTeamLogEventTypeArgDeviceApprovalsRemoveException()
        case .directoryRestrictionsAddMembers:
            return DBXTeamLogEventTypeArgDirectoryRestrictionsAddMembers()
        case .directoryRestrictionsRemoveMembers:
            return DBXTeamLogEventTypeArgDirectoryRestrictionsRemoveMembers()
        case .dropboxPasswordsPolicyChanged:
            return DBXTeamLogEventTypeArgDropboxPasswordsPolicyChanged()
        case .emailIngestPolicyChanged:
            return DBXTeamLogEventTypeArgEmailIngestPolicyChanged()
        case .emmAddException:
            return DBXTeamLogEventTypeArgEmmAddException()
        case .emmChangePolicy:
            return DBXTeamLogEventTypeArgEmmChangePolicy()
        case .emmRemoveException:
            return DBXTeamLogEventTypeArgEmmRemoveException()
        case .extendedVersionHistoryChangePolicy:
            return DBXTeamLogEventTypeArgExtendedVersionHistoryChangePolicy()
        case .externalDriveBackupPolicyChanged:
            return DBXTeamLogEventTypeArgExternalDriveBackupPolicyChanged()
        case .fileCommentsChangePolicy:
            return DBXTeamLogEventTypeArgFileCommentsChangePolicy()
        case .fileLockingPolicyChanged:
            return DBXTeamLogEventTypeArgFileLockingPolicyChanged()
        case .fileProviderMigrationPolicyChanged:
            return DBXTeamLogEventTypeArgFileProviderMigrationPolicyChanged()
        case .fileRequestsChangePolicy:
            return DBXTeamLogEventTypeArgFileRequestsChangePolicy()
        case .fileRequestsEmailsEnabled:
            return DBXTeamLogEventTypeArgFileRequestsEmailsEnabled()
        case .fileRequestsEmailsRestrictedToTeamOnly:
            return DBXTeamLogEventTypeArgFileRequestsEmailsRestrictedToTeamOnly()
        case .fileTransfersPolicyChanged:
            return DBXTeamLogEventTypeArgFileTransfersPolicyChanged()
        case .folderLinkRestrictionPolicyChanged:
            return DBXTeamLogEventTypeArgFolderLinkRestrictionPolicyChanged()
        case .googleSsoChangePolicy:
            return DBXTeamLogEventTypeArgGoogleSsoChangePolicy()
        case .groupUserManagementChangePolicy:
            return DBXTeamLogEventTypeArgGroupUserManagementChangePolicy()
        case .integrationPolicyChanged:
            return DBXTeamLogEventTypeArgIntegrationPolicyChanged()
        case .inviteAcceptanceEmailPolicyChanged:
            return DBXTeamLogEventTypeArgInviteAcceptanceEmailPolicyChanged()
        case .memberRequestsChangePolicy:
            return DBXTeamLogEventTypeArgMemberRequestsChangePolicy()
        case .memberSendInvitePolicyChanged:
            return DBXTeamLogEventTypeArgMemberSendInvitePolicyChanged()
        case .memberSpaceLimitsAddException:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsAddException()
        case .memberSpaceLimitsChangeCapsTypePolicy:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCapsTypePolicy()
        case .memberSpaceLimitsChangePolicy:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsChangePolicy()
        case .memberSpaceLimitsRemoveException:
            return DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveException()
        case .memberSuggestionsChangePolicy:
            return DBXTeamLogEventTypeArgMemberSuggestionsChangePolicy()
        case .microsoftOfficeAddinChangePolicy:
            return DBXTeamLogEventTypeArgMicrosoftOfficeAddinChangePolicy()
        case .networkControlChangePolicy:
            return DBXTeamLogEventTypeArgNetworkControlChangePolicy()
        case .paperChangeDeploymentPolicy:
            return DBXTeamLogEventTypeArgPaperChangeDeploymentPolicy()
        case .paperChangeMemberLinkPolicy:
            return DBXTeamLogEventTypeArgPaperChangeMemberLinkPolicy()
        case .paperChangeMemberPolicy:
            return DBXTeamLogEventTypeArgPaperChangeMemberPolicy()
        case .paperChangePolicy:
            return DBXTeamLogEventTypeArgPaperChangePolicy()
        case .paperDefaultFolderPolicyChanged:
            return DBXTeamLogEventTypeArgPaperDefaultFolderPolicyChanged()
        case .paperDesktopPolicyChanged:
            return DBXTeamLogEventTypeArgPaperDesktopPolicyChanged()
        case .paperEnabledUsersGroupAddition:
            return DBXTeamLogEventTypeArgPaperEnabledUsersGroupAddition()
        case .paperEnabledUsersGroupRemoval:
            return DBXTeamLogEventTypeArgPaperEnabledUsersGroupRemoval()
        case .passwordStrengthRequirementsChangePolicy:
            return DBXTeamLogEventTypeArgPasswordStrengthRequirementsChangePolicy()
        case .permanentDeleteChangePolicy:
            return DBXTeamLogEventTypeArgPermanentDeleteChangePolicy()
        case .resellerSupportChangePolicy:
            return DBXTeamLogEventTypeArgResellerSupportChangePolicy()
        case .rewindPolicyChanged:
            return DBXTeamLogEventTypeArgRewindPolicyChanged()
        case .sendForSignaturePolicyChanged:
            return DBXTeamLogEventTypeArgSendForSignaturePolicyChanged()
        case .sharingChangeFolderJoinPolicy:
            return DBXTeamLogEventTypeArgSharingChangeFolderJoinPolicy()
        case .sharingChangeLinkAllowChangeExpirationPolicy:
            return DBXTeamLogEventTypeArgSharingChangeLinkAllowChangeExpirationPolicy()
        case .sharingChangeLinkDefaultExpirationPolicy:
            return DBXTeamLogEventTypeArgSharingChangeLinkDefaultExpirationPolicy()
        case .sharingChangeLinkEnforcePasswordPolicy:
            return DBXTeamLogEventTypeArgSharingChangeLinkEnforcePasswordPolicy()
        case .sharingChangeLinkPolicy:
            return DBXTeamLogEventTypeArgSharingChangeLinkPolicy()
        case .sharingChangeMemberPolicy:
            return DBXTeamLogEventTypeArgSharingChangeMemberPolicy()
        case .showcaseChangeDownloadPolicy:
            return DBXTeamLogEventTypeArgShowcaseChangeDownloadPolicy()
        case .showcaseChangeEnabledPolicy:
            return DBXTeamLogEventTypeArgShowcaseChangeEnabledPolicy()
        case .showcaseChangeExternalSharingPolicy:
            return DBXTeamLogEventTypeArgShowcaseChangeExternalSharingPolicy()
        case .smarterSmartSyncPolicyChanged:
            return DBXTeamLogEventTypeArgSmarterSmartSyncPolicyChanged()
        case .smartSyncChangePolicy:
            return DBXTeamLogEventTypeArgSmartSyncChangePolicy()
        case .smartSyncNotOptOut:
            return DBXTeamLogEventTypeArgSmartSyncNotOptOut()
        case .smartSyncOptOut:
            return DBXTeamLogEventTypeArgSmartSyncOptOut()
        case .ssoChangePolicy:
            return DBXTeamLogEventTypeArgSsoChangePolicy()
        case .teamBrandingPolicyChanged:
            return DBXTeamLogEventTypeArgTeamBrandingPolicyChanged()
        case .teamExtensionsPolicyChanged:
            return DBXTeamLogEventTypeArgTeamExtensionsPolicyChanged()
        case .teamSelectiveSyncPolicyChanged:
            return DBXTeamLogEventTypeArgTeamSelectiveSyncPolicyChanged()
        case .teamSharingWhitelistSubjectsChanged:
            return DBXTeamLogEventTypeArgTeamSharingWhitelistSubjectsChanged()
        case .tfaAddException:
            return DBXTeamLogEventTypeArgTfaAddException()
        case .tfaChangePolicy:
            return DBXTeamLogEventTypeArgTfaChangePolicy()
        case .tfaRemoveException:
            return DBXTeamLogEventTypeArgTfaRemoveException()
        case .twoAccountChangePolicy:
            return DBXTeamLogEventTypeArgTwoAccountChangePolicy()
        case .viewerInfoPolicyChanged:
            return DBXTeamLogEventTypeArgViewerInfoPolicyChanged()
        case .watermarkingPolicyChanged:
            return DBXTeamLogEventTypeArgWatermarkingPolicyChanged()
        case .webSessionsChangeActiveSessionLimit:
            return DBXTeamLogEventTypeArgWebSessionsChangeActiveSessionLimit()
        case .webSessionsChangeFixedLengthPolicy:
            return DBXTeamLogEventTypeArgWebSessionsChangeFixedLengthPolicy()
        case .webSessionsChangeIdleLengthPolicy:
            return DBXTeamLogEventTypeArgWebSessionsChangeIdleLengthPolicy()
        case .dataResidencyMigrationRequestSuccessful:
            return DBXTeamLogEventTypeArgDataResidencyMigrationRequestSuccessful()
        case .dataResidencyMigrationRequestUnsuccessful:
            return DBXTeamLogEventTypeArgDataResidencyMigrationRequestUnsuccessful()
        case .teamMergeFrom:
            return DBXTeamLogEventTypeArgTeamMergeFrom()
        case .teamMergeTo:
            return DBXTeamLogEventTypeArgTeamMergeTo()
        case .teamProfileAddBackground:
            return DBXTeamLogEventTypeArgTeamProfileAddBackground()
        case .teamProfileAddLogo:
            return DBXTeamLogEventTypeArgTeamProfileAddLogo()
        case .teamProfileChangeBackground:
            return DBXTeamLogEventTypeArgTeamProfileChangeBackground()
        case .teamProfileChangeDefaultLanguage:
            return DBXTeamLogEventTypeArgTeamProfileChangeDefaultLanguage()
        case .teamProfileChangeLogo:
            return DBXTeamLogEventTypeArgTeamProfileChangeLogo()
        case .teamProfileChangeName:
            return DBXTeamLogEventTypeArgTeamProfileChangeName()
        case .teamProfileRemoveBackground:
            return DBXTeamLogEventTypeArgTeamProfileRemoveBackground()
        case .teamProfileRemoveLogo:
            return DBXTeamLogEventTypeArgTeamProfileRemoveLogo()
        case .tfaAddBackupPhone:
            return DBXTeamLogEventTypeArgTfaAddBackupPhone()
        case .tfaAddSecurityKey:
            return DBXTeamLogEventTypeArgTfaAddSecurityKey()
        case .tfaChangeBackupPhone:
            return DBXTeamLogEventTypeArgTfaChangeBackupPhone()
        case .tfaChangeStatus:
            return DBXTeamLogEventTypeArgTfaChangeStatus()
        case .tfaRemoveBackupPhone:
            return DBXTeamLogEventTypeArgTfaRemoveBackupPhone()
        case .tfaRemoveSecurityKey:
            return DBXTeamLogEventTypeArgTfaRemoveSecurityKey()
        case .tfaReset:
            return DBXTeamLogEventTypeArgTfaReset()
        case .changedEnterpriseAdminRole:
            return DBXTeamLogEventTypeArgChangedEnterpriseAdminRole()
        case .changedEnterpriseConnectedTeamStatus:
            return DBXTeamLogEventTypeArgChangedEnterpriseConnectedTeamStatus()
        case .endedEnterpriseAdminSession:
            return DBXTeamLogEventTypeArgEndedEnterpriseAdminSession()
        case .endedEnterpriseAdminSessionDeprecated:
            return DBXTeamLogEventTypeArgEndedEnterpriseAdminSessionDeprecated()
        case .enterpriseSettingsLocking:
            return DBXTeamLogEventTypeArgEnterpriseSettingsLocking()
        case .guestAdminChangeStatus:
            return DBXTeamLogEventTypeArgGuestAdminChangeStatus()
        case .startedEnterpriseAdminSession:
            return DBXTeamLogEventTypeArgStartedEnterpriseAdminSession()
        case .teamMergeRequestAccepted:
            return DBXTeamLogEventTypeArgTeamMergeRequestAccepted()
        case .teamMergeRequestAcceptedShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToPrimaryTeam()
        case .teamMergeRequestAcceptedShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToSecondaryTeam()
        case .teamMergeRequestAutoCanceled:
            return DBXTeamLogEventTypeArgTeamMergeRequestAutoCanceled()
        case .teamMergeRequestCanceled:
            return DBXTeamLogEventTypeArgTeamMergeRequestCanceled()
        case .teamMergeRequestCanceledShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToPrimaryTeam()
        case .teamMergeRequestCanceledShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToSecondaryTeam()
        case .teamMergeRequestExpired:
            return DBXTeamLogEventTypeArgTeamMergeRequestExpired()
        case .teamMergeRequestExpiredShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToPrimaryTeam()
        case .teamMergeRequestExpiredShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToSecondaryTeam()
        case .teamMergeRequestRejectedShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToPrimaryTeam()
        case .teamMergeRequestRejectedShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToSecondaryTeam()
        case .teamMergeRequestReminder:
            return DBXTeamLogEventTypeArgTeamMergeRequestReminder()
        case .teamMergeRequestReminderShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToPrimaryTeam()
        case .teamMergeRequestReminderShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToSecondaryTeam()
        case .teamMergeRequestRevoked:
            return DBXTeamLogEventTypeArgTeamMergeRequestRevoked()
        case .teamMergeRequestSentShownToPrimaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestSentShownToPrimaryTeam()
        case .teamMergeRequestSentShownToSecondaryTeam:
            return DBXTeamLogEventTypeArgTeamMergeRequestSentShownToSecondaryTeam()
        case .other:
            return DBXTeamLogEventTypeArgOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminAlertingAlertStateChanged: DBXTeamLogEventTypeArgAdminAlertingAlertStateChanged? {
        self as? DBXTeamLogEventTypeArgAdminAlertingAlertStateChanged
    }

    @objc
    public var asAdminAlertingChangedAlertConfig: DBXTeamLogEventTypeArgAdminAlertingChangedAlertConfig? {
        self as? DBXTeamLogEventTypeArgAdminAlertingChangedAlertConfig
    }

    @objc
    public var asAdminAlertingTriggeredAlert: DBXTeamLogEventTypeArgAdminAlertingTriggeredAlert? {
        self as? DBXTeamLogEventTypeArgAdminAlertingTriggeredAlert
    }

    @objc
    public var asRansomwareRestoreProcessCompleted: DBXTeamLogEventTypeArgRansomwareRestoreProcessCompleted? {
        self as? DBXTeamLogEventTypeArgRansomwareRestoreProcessCompleted
    }

    @objc
    public var asRansomwareRestoreProcessStarted: DBXTeamLogEventTypeArgRansomwareRestoreProcessStarted? {
        self as? DBXTeamLogEventTypeArgRansomwareRestoreProcessStarted
    }

    @objc
    public var asAppBlockedByPermissions: DBXTeamLogEventTypeArgAppBlockedByPermissions? {
        self as? DBXTeamLogEventTypeArgAppBlockedByPermissions
    }

    @objc
    public var asAppLinkTeam: DBXTeamLogEventTypeArgAppLinkTeam? {
        self as? DBXTeamLogEventTypeArgAppLinkTeam
    }

    @objc
    public var asAppLinkUser: DBXTeamLogEventTypeArgAppLinkUser? {
        self as? DBXTeamLogEventTypeArgAppLinkUser
    }

    @objc
    public var asAppUnlinkTeam: DBXTeamLogEventTypeArgAppUnlinkTeam? {
        self as? DBXTeamLogEventTypeArgAppUnlinkTeam
    }

    @objc
    public var asAppUnlinkUser: DBXTeamLogEventTypeArgAppUnlinkUser? {
        self as? DBXTeamLogEventTypeArgAppUnlinkUser
    }

    @objc
    public var asIntegrationConnected: DBXTeamLogEventTypeArgIntegrationConnected? {
        self as? DBXTeamLogEventTypeArgIntegrationConnected
    }

    @objc
    public var asIntegrationDisconnected: DBXTeamLogEventTypeArgIntegrationDisconnected? {
        self as? DBXTeamLogEventTypeArgIntegrationDisconnected
    }

    @objc
    public var asFileAddComment: DBXTeamLogEventTypeArgFileAddComment? {
        self as? DBXTeamLogEventTypeArgFileAddComment
    }

    @objc
    public var asFileChangeCommentSubscription: DBXTeamLogEventTypeArgFileChangeCommentSubscription? {
        self as? DBXTeamLogEventTypeArgFileChangeCommentSubscription
    }

    @objc
    public var asFileDeleteComment: DBXTeamLogEventTypeArgFileDeleteComment? {
        self as? DBXTeamLogEventTypeArgFileDeleteComment
    }

    @objc
    public var asFileEditComment: DBXTeamLogEventTypeArgFileEditComment? {
        self as? DBXTeamLogEventTypeArgFileEditComment
    }

    @objc
    public var asFileLikeComment: DBXTeamLogEventTypeArgFileLikeComment? {
        self as? DBXTeamLogEventTypeArgFileLikeComment
    }

    @objc
    public var asFileResolveComment: DBXTeamLogEventTypeArgFileResolveComment? {
        self as? DBXTeamLogEventTypeArgFileResolveComment
    }

    @objc
    public var asFileUnlikeComment: DBXTeamLogEventTypeArgFileUnlikeComment? {
        self as? DBXTeamLogEventTypeArgFileUnlikeComment
    }

    @objc
    public var asFileUnresolveComment: DBXTeamLogEventTypeArgFileUnresolveComment? {
        self as? DBXTeamLogEventTypeArgFileUnresolveComment
    }

    @objc
    public var asGovernancePolicyAddFolders: DBXTeamLogEventTypeArgGovernancePolicyAddFolders? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyAddFolders
    }

    @objc
    public var asGovernancePolicyAddFolderFailed: DBXTeamLogEventTypeArgGovernancePolicyAddFolderFailed? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyAddFolderFailed
    }

    @objc
    public var asGovernancePolicyContentDisposed: DBXTeamLogEventTypeArgGovernancePolicyContentDisposed? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyContentDisposed
    }

    @objc
    public var asGovernancePolicyCreate: DBXTeamLogEventTypeArgGovernancePolicyCreate? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyCreate
    }

    @objc
    public var asGovernancePolicyDelete: DBXTeamLogEventTypeArgGovernancePolicyDelete? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyDelete
    }

    @objc
    public var asGovernancePolicyEditDetails: DBXTeamLogEventTypeArgGovernancePolicyEditDetails? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyEditDetails
    }

    @objc
    public var asGovernancePolicyEditDuration: DBXTeamLogEventTypeArgGovernancePolicyEditDuration? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyEditDuration
    }

    @objc
    public var asGovernancePolicyExportCreated: DBXTeamLogEventTypeArgGovernancePolicyExportCreated? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyExportCreated
    }

    @objc
    public var asGovernancePolicyExportRemoved: DBXTeamLogEventTypeArgGovernancePolicyExportRemoved? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyExportRemoved
    }

    @objc
    public var asGovernancePolicyRemoveFolders: DBXTeamLogEventTypeArgGovernancePolicyRemoveFolders? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyRemoveFolders
    }

    @objc
    public var asGovernancePolicyReportCreated: DBXTeamLogEventTypeArgGovernancePolicyReportCreated? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyReportCreated
    }

    @objc
    public var asGovernancePolicyZipPartDownloaded: DBXTeamLogEventTypeArgGovernancePolicyZipPartDownloaded? {
        self as? DBXTeamLogEventTypeArgGovernancePolicyZipPartDownloaded
    }

    @objc
    public var asLegalHoldsActivateAHold: DBXTeamLogEventTypeArgLegalHoldsActivateAHold? {
        self as? DBXTeamLogEventTypeArgLegalHoldsActivateAHold
    }

    @objc
    public var asLegalHoldsAddMembers: DBXTeamLogEventTypeArgLegalHoldsAddMembers? {
        self as? DBXTeamLogEventTypeArgLegalHoldsAddMembers
    }

    @objc
    public var asLegalHoldsChangeHoldDetails: DBXTeamLogEventTypeArgLegalHoldsChangeHoldDetails? {
        self as? DBXTeamLogEventTypeArgLegalHoldsChangeHoldDetails
    }

    @objc
    public var asLegalHoldsChangeHoldName: DBXTeamLogEventTypeArgLegalHoldsChangeHoldName? {
        self as? DBXTeamLogEventTypeArgLegalHoldsChangeHoldName
    }

    @objc
    public var asLegalHoldsExportAHold: DBXTeamLogEventTypeArgLegalHoldsExportAHold? {
        self as? DBXTeamLogEventTypeArgLegalHoldsExportAHold
    }

    @objc
    public var asLegalHoldsExportCancelled: DBXTeamLogEventTypeArgLegalHoldsExportCancelled? {
        self as? DBXTeamLogEventTypeArgLegalHoldsExportCancelled
    }

    @objc
    public var asLegalHoldsExportDownloaded: DBXTeamLogEventTypeArgLegalHoldsExportDownloaded? {
        self as? DBXTeamLogEventTypeArgLegalHoldsExportDownloaded
    }

    @objc
    public var asLegalHoldsExportRemoved: DBXTeamLogEventTypeArgLegalHoldsExportRemoved? {
        self as? DBXTeamLogEventTypeArgLegalHoldsExportRemoved
    }

    @objc
    public var asLegalHoldsReleaseAHold: DBXTeamLogEventTypeArgLegalHoldsReleaseAHold? {
        self as? DBXTeamLogEventTypeArgLegalHoldsReleaseAHold
    }

    @objc
    public var asLegalHoldsRemoveMembers: DBXTeamLogEventTypeArgLegalHoldsRemoveMembers? {
        self as? DBXTeamLogEventTypeArgLegalHoldsRemoveMembers
    }

    @objc
    public var asLegalHoldsReportAHold: DBXTeamLogEventTypeArgLegalHoldsReportAHold? {
        self as? DBXTeamLogEventTypeArgLegalHoldsReportAHold
    }

    @objc
    public var asDeviceChangeIpDesktop: DBXTeamLogEventTypeArgDeviceChangeIpDesktop? {
        self as? DBXTeamLogEventTypeArgDeviceChangeIpDesktop
    }

    @objc
    public var asDeviceChangeIpMobile: DBXTeamLogEventTypeArgDeviceChangeIpMobile? {
        self as? DBXTeamLogEventTypeArgDeviceChangeIpMobile
    }

    @objc
    public var asDeviceChangeIpWeb: DBXTeamLogEventTypeArgDeviceChangeIpWeb? {
        self as? DBXTeamLogEventTypeArgDeviceChangeIpWeb
    }

    @objc
    public var asDeviceDeleteOnUnlinkFail: DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkFail? {
        self as? DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkFail
    }

    @objc
    public var asDeviceDeleteOnUnlinkSuccess: DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkSuccess? {
        self as? DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkSuccess
    }

    @objc
    public var asDeviceLinkFail: DBXTeamLogEventTypeArgDeviceLinkFail? {
        self as? DBXTeamLogEventTypeArgDeviceLinkFail
    }

    @objc
    public var asDeviceLinkSuccess: DBXTeamLogEventTypeArgDeviceLinkSuccess? {
        self as? DBXTeamLogEventTypeArgDeviceLinkSuccess
    }

    @objc
    public var asDeviceManagementDisabled: DBXTeamLogEventTypeArgDeviceManagementDisabled? {
        self as? DBXTeamLogEventTypeArgDeviceManagementDisabled
    }

    @objc
    public var asDeviceManagementEnabled: DBXTeamLogEventTypeArgDeviceManagementEnabled? {
        self as? DBXTeamLogEventTypeArgDeviceManagementEnabled
    }

    @objc
    public var asDeviceSyncBackupStatusChanged: DBXTeamLogEventTypeArgDeviceSyncBackupStatusChanged? {
        self as? DBXTeamLogEventTypeArgDeviceSyncBackupStatusChanged
    }

    @objc
    public var asDeviceUnlink: DBXTeamLogEventTypeArgDeviceUnlink? {
        self as? DBXTeamLogEventTypeArgDeviceUnlink
    }

    @objc
    public var asDropboxPasswordsExported: DBXTeamLogEventTypeArgDropboxPasswordsExported? {
        self as? DBXTeamLogEventTypeArgDropboxPasswordsExported
    }

    @objc
    public var asDropboxPasswordsNewDeviceEnrolled: DBXTeamLogEventTypeArgDropboxPasswordsNewDeviceEnrolled? {
        self as? DBXTeamLogEventTypeArgDropboxPasswordsNewDeviceEnrolled
    }

    @objc
    public var asEmmRefreshAuthToken: DBXTeamLogEventTypeArgEmmRefreshAuthToken? {
        self as? DBXTeamLogEventTypeArgEmmRefreshAuthToken
    }

    @objc
    public var asExternalDriveBackupEligibilityStatusChecked: DBXTeamLogEventTypeArgExternalDriveBackupEligibilityStatusChecked? {
        self as? DBXTeamLogEventTypeArgExternalDriveBackupEligibilityStatusChecked
    }

    @objc
    public var asExternalDriveBackupStatusChanged: DBXTeamLogEventTypeArgExternalDriveBackupStatusChanged? {
        self as? DBXTeamLogEventTypeArgExternalDriveBackupStatusChanged
    }

    @objc
    public var asAccountCaptureChangeAvailability: DBXTeamLogEventTypeArgAccountCaptureChangeAvailability? {
        self as? DBXTeamLogEventTypeArgAccountCaptureChangeAvailability
    }

    @objc
    public var asAccountCaptureMigrateAccount: DBXTeamLogEventTypeArgAccountCaptureMigrateAccount? {
        self as? DBXTeamLogEventTypeArgAccountCaptureMigrateAccount
    }

    @objc
    public var asAccountCaptureNotificationEmailsSent: DBXTeamLogEventTypeArgAccountCaptureNotificationEmailsSent? {
        self as? DBXTeamLogEventTypeArgAccountCaptureNotificationEmailsSent
    }

    @objc
    public var asAccountCaptureRelinquishAccount: DBXTeamLogEventTypeArgAccountCaptureRelinquishAccount? {
        self as? DBXTeamLogEventTypeArgAccountCaptureRelinquishAccount
    }

    @objc
    public var asDisabledDomainInvites: DBXTeamLogEventTypeArgDisabledDomainInvites? {
        self as? DBXTeamLogEventTypeArgDisabledDomainInvites
    }

    @objc
    public var asDomainInvitesApproveRequestToJoinTeam: DBXTeamLogEventTypeArgDomainInvitesApproveRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeArgDomainInvitesApproveRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesDeclineRequestToJoinTeam: DBXTeamLogEventTypeArgDomainInvitesDeclineRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeArgDomainInvitesDeclineRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesEmailExistingUsers: DBXTeamLogEventTypeArgDomainInvitesEmailExistingUsers? {
        self as? DBXTeamLogEventTypeArgDomainInvitesEmailExistingUsers
    }

    @objc
    public var asDomainInvitesRequestToJoinTeam: DBXTeamLogEventTypeArgDomainInvitesRequestToJoinTeam? {
        self as? DBXTeamLogEventTypeArgDomainInvitesRequestToJoinTeam
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToNo: DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToNo? {
        self as? DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToNo
    }

    @objc
    public var asDomainInvitesSetInviteNewUserPrefToYes: DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToYes? {
        self as? DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToYes
    }

    @objc
    public var asDomainVerificationAddDomainFail: DBXTeamLogEventTypeArgDomainVerificationAddDomainFail? {
        self as? DBXTeamLogEventTypeArgDomainVerificationAddDomainFail
    }

    @objc
    public var asDomainVerificationAddDomainSuccess: DBXTeamLogEventTypeArgDomainVerificationAddDomainSuccess? {
        self as? DBXTeamLogEventTypeArgDomainVerificationAddDomainSuccess
    }

    @objc
    public var asDomainVerificationRemoveDomain: DBXTeamLogEventTypeArgDomainVerificationRemoveDomain? {
        self as? DBXTeamLogEventTypeArgDomainVerificationRemoveDomain
    }

    @objc
    public var asEnabledDomainInvites: DBXTeamLogEventTypeArgEnabledDomainInvites? {
        self as? DBXTeamLogEventTypeArgEnabledDomainInvites
    }

    @objc
    public var asTeamEncryptionKeyCancelKeyDeletion: DBXTeamLogEventTypeArgTeamEncryptionKeyCancelKeyDeletion? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyCancelKeyDeletion
    }

    @objc
    public var asTeamEncryptionKeyCreateKey: DBXTeamLogEventTypeArgTeamEncryptionKeyCreateKey? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyCreateKey
    }

    @objc
    public var asTeamEncryptionKeyDeleteKey: DBXTeamLogEventTypeArgTeamEncryptionKeyDeleteKey? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyDeleteKey
    }

    @objc
    public var asTeamEncryptionKeyDisableKey: DBXTeamLogEventTypeArgTeamEncryptionKeyDisableKey? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyDisableKey
    }

    @objc
    public var asTeamEncryptionKeyEnableKey: DBXTeamLogEventTypeArgTeamEncryptionKeyEnableKey? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyEnableKey
    }

    @objc
    public var asTeamEncryptionKeyRotateKey: DBXTeamLogEventTypeArgTeamEncryptionKeyRotateKey? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyRotateKey
    }

    @objc
    public var asTeamEncryptionKeyScheduleKeyDeletion: DBXTeamLogEventTypeArgTeamEncryptionKeyScheduleKeyDeletion? {
        self as? DBXTeamLogEventTypeArgTeamEncryptionKeyScheduleKeyDeletion
    }

    @objc
    public var asApplyNamingConvention: DBXTeamLogEventTypeArgApplyNamingConvention? {
        self as? DBXTeamLogEventTypeArgApplyNamingConvention
    }

    @objc
    public var asCreateFolder: DBXTeamLogEventTypeArgCreateFolder? {
        self as? DBXTeamLogEventTypeArgCreateFolder
    }

    @objc
    public var asFileAdd: DBXTeamLogEventTypeArgFileAdd? {
        self as? DBXTeamLogEventTypeArgFileAdd
    }

    @objc
    public var asFileAddFromAutomation: DBXTeamLogEventTypeArgFileAddFromAutomation? {
        self as? DBXTeamLogEventTypeArgFileAddFromAutomation
    }

    @objc
    public var asFileCopy: DBXTeamLogEventTypeArgFileCopy? {
        self as? DBXTeamLogEventTypeArgFileCopy
    }

    @objc
    public var asFileDelete: DBXTeamLogEventTypeArgFileDelete? {
        self as? DBXTeamLogEventTypeArgFileDelete
    }

    @objc
    public var asFileDownload: DBXTeamLogEventTypeArgFileDownload? {
        self as? DBXTeamLogEventTypeArgFileDownload
    }

    @objc
    public var asFileEdit: DBXTeamLogEventTypeArgFileEdit? {
        self as? DBXTeamLogEventTypeArgFileEdit
    }

    @objc
    public var asFileGetCopyReference: DBXTeamLogEventTypeArgFileGetCopyReference? {
        self as? DBXTeamLogEventTypeArgFileGetCopyReference
    }

    @objc
    public var asFileLockingLockStatusChanged: DBXTeamLogEventTypeArgFileLockingLockStatusChanged? {
        self as? DBXTeamLogEventTypeArgFileLockingLockStatusChanged
    }

    @objc
    public var asFileMove: DBXTeamLogEventTypeArgFileMove? {
        self as? DBXTeamLogEventTypeArgFileMove
    }

    @objc
    public var asFilePermanentlyDelete: DBXTeamLogEventTypeArgFilePermanentlyDelete? {
        self as? DBXTeamLogEventTypeArgFilePermanentlyDelete
    }

    @objc
    public var asFilePreview: DBXTeamLogEventTypeArgFilePreview? {
        self as? DBXTeamLogEventTypeArgFilePreview
    }

    @objc
    public var asFileRename: DBXTeamLogEventTypeArgFileRename? {
        self as? DBXTeamLogEventTypeArgFileRename
    }

    @objc
    public var asFileRestore: DBXTeamLogEventTypeArgFileRestore? {
        self as? DBXTeamLogEventTypeArgFileRestore
    }

    @objc
    public var asFileRevert: DBXTeamLogEventTypeArgFileRevert? {
        self as? DBXTeamLogEventTypeArgFileRevert
    }

    @objc
    public var asFileRollbackChanges: DBXTeamLogEventTypeArgFileRollbackChanges? {
        self as? DBXTeamLogEventTypeArgFileRollbackChanges
    }

    @objc
    public var asFileSaveCopyReference: DBXTeamLogEventTypeArgFileSaveCopyReference? {
        self as? DBXTeamLogEventTypeArgFileSaveCopyReference
    }

    @objc
    public var asFolderOverviewDescriptionChanged: DBXTeamLogEventTypeArgFolderOverviewDescriptionChanged? {
        self as? DBXTeamLogEventTypeArgFolderOverviewDescriptionChanged
    }

    @objc
    public var asFolderOverviewItemPinned: DBXTeamLogEventTypeArgFolderOverviewItemPinned? {
        self as? DBXTeamLogEventTypeArgFolderOverviewItemPinned
    }

    @objc
    public var asFolderOverviewItemUnpinned: DBXTeamLogEventTypeArgFolderOverviewItemUnpinned? {
        self as? DBXTeamLogEventTypeArgFolderOverviewItemUnpinned
    }

    @objc
    public var asObjectLabelAdded: DBXTeamLogEventTypeArgObjectLabelAdded? {
        self as? DBXTeamLogEventTypeArgObjectLabelAdded
    }

    @objc
    public var asObjectLabelRemoved: DBXTeamLogEventTypeArgObjectLabelRemoved? {
        self as? DBXTeamLogEventTypeArgObjectLabelRemoved
    }

    @objc
    public var asObjectLabelUpdatedValue: DBXTeamLogEventTypeArgObjectLabelUpdatedValue? {
        self as? DBXTeamLogEventTypeArgObjectLabelUpdatedValue
    }

    @objc
    public var asOrganizeFolderWithTidy: DBXTeamLogEventTypeArgOrganizeFolderWithTidy? {
        self as? DBXTeamLogEventTypeArgOrganizeFolderWithTidy
    }

    @objc
    public var asReplayFileDelete: DBXTeamLogEventTypeArgReplayFileDelete? {
        self as? DBXTeamLogEventTypeArgReplayFileDelete
    }

    @objc
    public var asRewindFolder: DBXTeamLogEventTypeArgRewindFolder? {
        self as? DBXTeamLogEventTypeArgRewindFolder
    }

    @objc
    public var asUndoNamingConvention: DBXTeamLogEventTypeArgUndoNamingConvention? {
        self as? DBXTeamLogEventTypeArgUndoNamingConvention
    }

    @objc
    public var asUndoOrganizeFolderWithTidy: DBXTeamLogEventTypeArgUndoOrganizeFolderWithTidy? {
        self as? DBXTeamLogEventTypeArgUndoOrganizeFolderWithTidy
    }

    @objc
    public var asUserTagsAdded: DBXTeamLogEventTypeArgUserTagsAdded? {
        self as? DBXTeamLogEventTypeArgUserTagsAdded
    }

    @objc
    public var asUserTagsRemoved: DBXTeamLogEventTypeArgUserTagsRemoved? {
        self as? DBXTeamLogEventTypeArgUserTagsRemoved
    }

    @objc
    public var asEmailIngestReceiveFile: DBXTeamLogEventTypeArgEmailIngestReceiveFile? {
        self as? DBXTeamLogEventTypeArgEmailIngestReceiveFile
    }

    @objc
    public var asFileRequestChange: DBXTeamLogEventTypeArgFileRequestChange? {
        self as? DBXTeamLogEventTypeArgFileRequestChange
    }

    @objc
    public var asFileRequestClose: DBXTeamLogEventTypeArgFileRequestClose? {
        self as? DBXTeamLogEventTypeArgFileRequestClose
    }

    @objc
    public var asFileRequestCreate: DBXTeamLogEventTypeArgFileRequestCreate? {
        self as? DBXTeamLogEventTypeArgFileRequestCreate
    }

    @objc
    public var asFileRequestDelete: DBXTeamLogEventTypeArgFileRequestDelete? {
        self as? DBXTeamLogEventTypeArgFileRequestDelete
    }

    @objc
    public var asFileRequestReceiveFile: DBXTeamLogEventTypeArgFileRequestReceiveFile? {
        self as? DBXTeamLogEventTypeArgFileRequestReceiveFile
    }

    @objc
    public var asGroupAddExternalId: DBXTeamLogEventTypeArgGroupAddExternalId? {
        self as? DBXTeamLogEventTypeArgGroupAddExternalId
    }

    @objc
    public var asGroupAddMember: DBXTeamLogEventTypeArgGroupAddMember? {
        self as? DBXTeamLogEventTypeArgGroupAddMember
    }

    @objc
    public var asGroupChangeExternalId: DBXTeamLogEventTypeArgGroupChangeExternalId? {
        self as? DBXTeamLogEventTypeArgGroupChangeExternalId
    }

    @objc
    public var asGroupChangeManagementType: DBXTeamLogEventTypeArgGroupChangeManagementType? {
        self as? DBXTeamLogEventTypeArgGroupChangeManagementType
    }

    @objc
    public var asGroupChangeMemberRole: DBXTeamLogEventTypeArgGroupChangeMemberRole? {
        self as? DBXTeamLogEventTypeArgGroupChangeMemberRole
    }

    @objc
    public var asGroupCreate: DBXTeamLogEventTypeArgGroupCreate? {
        self as? DBXTeamLogEventTypeArgGroupCreate
    }

    @objc
    public var asGroupDelete: DBXTeamLogEventTypeArgGroupDelete? {
        self as? DBXTeamLogEventTypeArgGroupDelete
    }

    @objc
    public var asGroupDescriptionUpdated: DBXTeamLogEventTypeArgGroupDescriptionUpdated? {
        self as? DBXTeamLogEventTypeArgGroupDescriptionUpdated
    }

    @objc
    public var asGroupJoinPolicyUpdated: DBXTeamLogEventTypeArgGroupJoinPolicyUpdated? {
        self as? DBXTeamLogEventTypeArgGroupJoinPolicyUpdated
    }

    @objc
    public var asGroupMoved: DBXTeamLogEventTypeArgGroupMoved? {
        self as? DBXTeamLogEventTypeArgGroupMoved
    }

    @objc
    public var asGroupRemoveExternalId: DBXTeamLogEventTypeArgGroupRemoveExternalId? {
        self as? DBXTeamLogEventTypeArgGroupRemoveExternalId
    }

    @objc
    public var asGroupRemoveMember: DBXTeamLogEventTypeArgGroupRemoveMember? {
        self as? DBXTeamLogEventTypeArgGroupRemoveMember
    }

    @objc
    public var asGroupRename: DBXTeamLogEventTypeArgGroupRename? {
        self as? DBXTeamLogEventTypeArgGroupRename
    }

    @objc
    public var asAccountLockOrUnlocked: DBXTeamLogEventTypeArgAccountLockOrUnlocked? {
        self as? DBXTeamLogEventTypeArgAccountLockOrUnlocked
    }

    @objc
    public var asEmmError: DBXTeamLogEventTypeArgEmmError? {
        self as? DBXTeamLogEventTypeArgEmmError
    }

    @objc
    public var asGuestAdminSignedInViaTrustedTeams: DBXTeamLogEventTypeArgGuestAdminSignedInViaTrustedTeams? {
        self as? DBXTeamLogEventTypeArgGuestAdminSignedInViaTrustedTeams
    }

    @objc
    public var asGuestAdminSignedOutViaTrustedTeams: DBXTeamLogEventTypeArgGuestAdminSignedOutViaTrustedTeams? {
        self as? DBXTeamLogEventTypeArgGuestAdminSignedOutViaTrustedTeams
    }

    @objc
    public var asLoginFail: DBXTeamLogEventTypeArgLoginFail? {
        self as? DBXTeamLogEventTypeArgLoginFail
    }

    @objc
    public var asLoginSuccess: DBXTeamLogEventTypeArgLoginSuccess? {
        self as? DBXTeamLogEventTypeArgLoginSuccess
    }

    @objc
    public var asLogout: DBXTeamLogEventTypeArgLogout? {
        self as? DBXTeamLogEventTypeArgLogout
    }

    @objc
    public var asResellerSupportSessionEnd: DBXTeamLogEventTypeArgResellerSupportSessionEnd? {
        self as? DBXTeamLogEventTypeArgResellerSupportSessionEnd
    }

    @objc
    public var asResellerSupportSessionStart: DBXTeamLogEventTypeArgResellerSupportSessionStart? {
        self as? DBXTeamLogEventTypeArgResellerSupportSessionStart
    }

    @objc
    public var asSignInAsSessionEnd: DBXTeamLogEventTypeArgSignInAsSessionEnd? {
        self as? DBXTeamLogEventTypeArgSignInAsSessionEnd
    }

    @objc
    public var asSignInAsSessionStart: DBXTeamLogEventTypeArgSignInAsSessionStart? {
        self as? DBXTeamLogEventTypeArgSignInAsSessionStart
    }

    @objc
    public var asSsoError: DBXTeamLogEventTypeArgSsoError? {
        self as? DBXTeamLogEventTypeArgSsoError
    }

    @objc
    public var asBackupAdminInvitationSent: DBXTeamLogEventTypeArgBackupAdminInvitationSent? {
        self as? DBXTeamLogEventTypeArgBackupAdminInvitationSent
    }

    @objc
    public var asBackupInvitationOpened: DBXTeamLogEventTypeArgBackupInvitationOpened? {
        self as? DBXTeamLogEventTypeArgBackupInvitationOpened
    }

    @objc
    public var asCreateTeamInviteLink: DBXTeamLogEventTypeArgCreateTeamInviteLink? {
        self as? DBXTeamLogEventTypeArgCreateTeamInviteLink
    }

    @objc
    public var asDeleteTeamInviteLink: DBXTeamLogEventTypeArgDeleteTeamInviteLink? {
        self as? DBXTeamLogEventTypeArgDeleteTeamInviteLink
    }

    @objc
    public var asMemberAddExternalId: DBXTeamLogEventTypeArgMemberAddExternalId? {
        self as? DBXTeamLogEventTypeArgMemberAddExternalId
    }

    @objc
    public var asMemberAddName: DBXTeamLogEventTypeArgMemberAddName? {
        self as? DBXTeamLogEventTypeArgMemberAddName
    }

    @objc
    public var asMemberChangeAdminRole: DBXTeamLogEventTypeArgMemberChangeAdminRole? {
        self as? DBXTeamLogEventTypeArgMemberChangeAdminRole
    }

    @objc
    public var asMemberChangeEmail: DBXTeamLogEventTypeArgMemberChangeEmail? {
        self as? DBXTeamLogEventTypeArgMemberChangeEmail
    }

    @objc
    public var asMemberChangeExternalId: DBXTeamLogEventTypeArgMemberChangeExternalId? {
        self as? DBXTeamLogEventTypeArgMemberChangeExternalId
    }

    @objc
    public var asMemberChangeMembershipType: DBXTeamLogEventTypeArgMemberChangeMembershipType? {
        self as? DBXTeamLogEventTypeArgMemberChangeMembershipType
    }

    @objc
    public var asMemberChangeName: DBXTeamLogEventTypeArgMemberChangeName? {
        self as? DBXTeamLogEventTypeArgMemberChangeName
    }

    @objc
    public var asMemberChangeResellerRole: DBXTeamLogEventTypeArgMemberChangeResellerRole? {
        self as? DBXTeamLogEventTypeArgMemberChangeResellerRole
    }

    @objc
    public var asMemberChangeStatus: DBXTeamLogEventTypeArgMemberChangeStatus? {
        self as? DBXTeamLogEventTypeArgMemberChangeStatus
    }

    @objc
    public var asMemberDeleteManualContacts: DBXTeamLogEventTypeArgMemberDeleteManualContacts? {
        self as? DBXTeamLogEventTypeArgMemberDeleteManualContacts
    }

    @objc
    public var asMemberDeleteProfilePhoto: DBXTeamLogEventTypeArgMemberDeleteProfilePhoto? {
        self as? DBXTeamLogEventTypeArgMemberDeleteProfilePhoto
    }

    @objc
    public var asMemberPermanentlyDeleteAccountContents: DBXTeamLogEventTypeArgMemberPermanentlyDeleteAccountContents? {
        self as? DBXTeamLogEventTypeArgMemberPermanentlyDeleteAccountContents
    }

    @objc
    public var asMemberRemoveExternalId: DBXTeamLogEventTypeArgMemberRemoveExternalId? {
        self as? DBXTeamLogEventTypeArgMemberRemoveExternalId
    }

    @objc
    public var asMemberSetProfilePhoto: DBXTeamLogEventTypeArgMemberSetProfilePhoto? {
        self as? DBXTeamLogEventTypeArgMemberSetProfilePhoto
    }

    @objc
    public var asMemberSpaceLimitsAddCustomQuota: DBXTeamLogEventTypeArgMemberSpaceLimitsAddCustomQuota? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsAddCustomQuota
    }

    @objc
    public var asMemberSpaceLimitsChangeCustomQuota: DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCustomQuota? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCustomQuota
    }

    @objc
    public var asMemberSpaceLimitsChangeStatus: DBXTeamLogEventTypeArgMemberSpaceLimitsChangeStatus? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsChangeStatus
    }

    @objc
    public var asMemberSpaceLimitsRemoveCustomQuota: DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveCustomQuota? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveCustomQuota
    }

    @objc
    public var asMemberSuggest: DBXTeamLogEventTypeArgMemberSuggest? {
        self as? DBXTeamLogEventTypeArgMemberSuggest
    }

    @objc
    public var asMemberTransferAccountContents: DBXTeamLogEventTypeArgMemberTransferAccountContents? {
        self as? DBXTeamLogEventTypeArgMemberTransferAccountContents
    }

    @objc
    public var asPendingSecondaryEmailAdded: DBXTeamLogEventTypeArgPendingSecondaryEmailAdded? {
        self as? DBXTeamLogEventTypeArgPendingSecondaryEmailAdded
    }

    @objc
    public var asSecondaryEmailDeleted: DBXTeamLogEventTypeArgSecondaryEmailDeleted? {
        self as? DBXTeamLogEventTypeArgSecondaryEmailDeleted
    }

    @objc
    public var asSecondaryEmailVerified: DBXTeamLogEventTypeArgSecondaryEmailVerified? {
        self as? DBXTeamLogEventTypeArgSecondaryEmailVerified
    }

    @objc
    public var asSecondaryMailsPolicyChanged: DBXTeamLogEventTypeArgSecondaryMailsPolicyChanged? {
        self as? DBXTeamLogEventTypeArgSecondaryMailsPolicyChanged
    }

    @objc
    public var asBinderAddPage: DBXTeamLogEventTypeArgBinderAddPage? {
        self as? DBXTeamLogEventTypeArgBinderAddPage
    }

    @objc
    public var asBinderAddSection: DBXTeamLogEventTypeArgBinderAddSection? {
        self as? DBXTeamLogEventTypeArgBinderAddSection
    }

    @objc
    public var asBinderRemovePage: DBXTeamLogEventTypeArgBinderRemovePage? {
        self as? DBXTeamLogEventTypeArgBinderRemovePage
    }

    @objc
    public var asBinderRemoveSection: DBXTeamLogEventTypeArgBinderRemoveSection? {
        self as? DBXTeamLogEventTypeArgBinderRemoveSection
    }

    @objc
    public var asBinderRenamePage: DBXTeamLogEventTypeArgBinderRenamePage? {
        self as? DBXTeamLogEventTypeArgBinderRenamePage
    }

    @objc
    public var asBinderRenameSection: DBXTeamLogEventTypeArgBinderRenameSection? {
        self as? DBXTeamLogEventTypeArgBinderRenameSection
    }

    @objc
    public var asBinderReorderPage: DBXTeamLogEventTypeArgBinderReorderPage? {
        self as? DBXTeamLogEventTypeArgBinderReorderPage
    }

    @objc
    public var asBinderReorderSection: DBXTeamLogEventTypeArgBinderReorderSection? {
        self as? DBXTeamLogEventTypeArgBinderReorderSection
    }

    @objc
    public var asPaperContentAddMember: DBXTeamLogEventTypeArgPaperContentAddMember? {
        self as? DBXTeamLogEventTypeArgPaperContentAddMember
    }

    @objc
    public var asPaperContentAddToFolder: DBXTeamLogEventTypeArgPaperContentAddToFolder? {
        self as? DBXTeamLogEventTypeArgPaperContentAddToFolder
    }

    @objc
    public var asPaperContentArchive: DBXTeamLogEventTypeArgPaperContentArchive? {
        self as? DBXTeamLogEventTypeArgPaperContentArchive
    }

    @objc
    public var asPaperContentCreate: DBXTeamLogEventTypeArgPaperContentCreate? {
        self as? DBXTeamLogEventTypeArgPaperContentCreate
    }

    @objc
    public var asPaperContentPermanentlyDelete: DBXTeamLogEventTypeArgPaperContentPermanentlyDelete? {
        self as? DBXTeamLogEventTypeArgPaperContentPermanentlyDelete
    }

    @objc
    public var asPaperContentRemoveFromFolder: DBXTeamLogEventTypeArgPaperContentRemoveFromFolder? {
        self as? DBXTeamLogEventTypeArgPaperContentRemoveFromFolder
    }

    @objc
    public var asPaperContentRemoveMember: DBXTeamLogEventTypeArgPaperContentRemoveMember? {
        self as? DBXTeamLogEventTypeArgPaperContentRemoveMember
    }

    @objc
    public var asPaperContentRename: DBXTeamLogEventTypeArgPaperContentRename? {
        self as? DBXTeamLogEventTypeArgPaperContentRename
    }

    @objc
    public var asPaperContentRestore: DBXTeamLogEventTypeArgPaperContentRestore? {
        self as? DBXTeamLogEventTypeArgPaperContentRestore
    }

    @objc
    public var asPaperDocAddComment: DBXTeamLogEventTypeArgPaperDocAddComment? {
        self as? DBXTeamLogEventTypeArgPaperDocAddComment
    }

    @objc
    public var asPaperDocChangeMemberRole: DBXTeamLogEventTypeArgPaperDocChangeMemberRole? {
        self as? DBXTeamLogEventTypeArgPaperDocChangeMemberRole
    }

    @objc
    public var asPaperDocChangeSharingPolicy: DBXTeamLogEventTypeArgPaperDocChangeSharingPolicy? {
        self as? DBXTeamLogEventTypeArgPaperDocChangeSharingPolicy
    }

    @objc
    public var asPaperDocChangeSubscription: DBXTeamLogEventTypeArgPaperDocChangeSubscription? {
        self as? DBXTeamLogEventTypeArgPaperDocChangeSubscription
    }

    @objc
    public var asPaperDocDeleted: DBXTeamLogEventTypeArgPaperDocDeleted? {
        self as? DBXTeamLogEventTypeArgPaperDocDeleted
    }

    @objc
    public var asPaperDocDeleteComment: DBXTeamLogEventTypeArgPaperDocDeleteComment? {
        self as? DBXTeamLogEventTypeArgPaperDocDeleteComment
    }

    @objc
    public var asPaperDocDownload: DBXTeamLogEventTypeArgPaperDocDownload? {
        self as? DBXTeamLogEventTypeArgPaperDocDownload
    }

    @objc
    public var asPaperDocEdit: DBXTeamLogEventTypeArgPaperDocEdit? {
        self as? DBXTeamLogEventTypeArgPaperDocEdit
    }

    @objc
    public var asPaperDocEditComment: DBXTeamLogEventTypeArgPaperDocEditComment? {
        self as? DBXTeamLogEventTypeArgPaperDocEditComment
    }

    @objc
    public var asPaperDocFollowed: DBXTeamLogEventTypeArgPaperDocFollowed? {
        self as? DBXTeamLogEventTypeArgPaperDocFollowed
    }

    @objc
    public var asPaperDocMention: DBXTeamLogEventTypeArgPaperDocMention? {
        self as? DBXTeamLogEventTypeArgPaperDocMention
    }

    @objc
    public var asPaperDocOwnershipChanged: DBXTeamLogEventTypeArgPaperDocOwnershipChanged? {
        self as? DBXTeamLogEventTypeArgPaperDocOwnershipChanged
    }

    @objc
    public var asPaperDocRequestAccess: DBXTeamLogEventTypeArgPaperDocRequestAccess? {
        self as? DBXTeamLogEventTypeArgPaperDocRequestAccess
    }

    @objc
    public var asPaperDocResolveComment: DBXTeamLogEventTypeArgPaperDocResolveComment? {
        self as? DBXTeamLogEventTypeArgPaperDocResolveComment
    }

    @objc
    public var asPaperDocRevert: DBXTeamLogEventTypeArgPaperDocRevert? {
        self as? DBXTeamLogEventTypeArgPaperDocRevert
    }

    @objc
    public var asPaperDocSlackShare: DBXTeamLogEventTypeArgPaperDocSlackShare? {
        self as? DBXTeamLogEventTypeArgPaperDocSlackShare
    }

    @objc
    public var asPaperDocTeamInvite: DBXTeamLogEventTypeArgPaperDocTeamInvite? {
        self as? DBXTeamLogEventTypeArgPaperDocTeamInvite
    }

    @objc
    public var asPaperDocTrashed: DBXTeamLogEventTypeArgPaperDocTrashed? {
        self as? DBXTeamLogEventTypeArgPaperDocTrashed
    }

    @objc
    public var asPaperDocUnresolveComment: DBXTeamLogEventTypeArgPaperDocUnresolveComment? {
        self as? DBXTeamLogEventTypeArgPaperDocUnresolveComment
    }

    @objc
    public var asPaperDocUntrashed: DBXTeamLogEventTypeArgPaperDocUntrashed? {
        self as? DBXTeamLogEventTypeArgPaperDocUntrashed
    }

    @objc
    public var asPaperDocView: DBXTeamLogEventTypeArgPaperDocView? {
        self as? DBXTeamLogEventTypeArgPaperDocView
    }

    @objc
    public var asPaperExternalViewAllow: DBXTeamLogEventTypeArgPaperExternalViewAllow? {
        self as? DBXTeamLogEventTypeArgPaperExternalViewAllow
    }

    @objc
    public var asPaperExternalViewDefaultTeam: DBXTeamLogEventTypeArgPaperExternalViewDefaultTeam? {
        self as? DBXTeamLogEventTypeArgPaperExternalViewDefaultTeam
    }

    @objc
    public var asPaperExternalViewForbid: DBXTeamLogEventTypeArgPaperExternalViewForbid? {
        self as? DBXTeamLogEventTypeArgPaperExternalViewForbid
    }

    @objc
    public var asPaperFolderChangeSubscription: DBXTeamLogEventTypeArgPaperFolderChangeSubscription? {
        self as? DBXTeamLogEventTypeArgPaperFolderChangeSubscription
    }

    @objc
    public var asPaperFolderDeleted: DBXTeamLogEventTypeArgPaperFolderDeleted? {
        self as? DBXTeamLogEventTypeArgPaperFolderDeleted
    }

    @objc
    public var asPaperFolderFollowed: DBXTeamLogEventTypeArgPaperFolderFollowed? {
        self as? DBXTeamLogEventTypeArgPaperFolderFollowed
    }

    @objc
    public var asPaperFolderTeamInvite: DBXTeamLogEventTypeArgPaperFolderTeamInvite? {
        self as? DBXTeamLogEventTypeArgPaperFolderTeamInvite
    }

    @objc
    public var asPaperPublishedLinkChangePermission: DBXTeamLogEventTypeArgPaperPublishedLinkChangePermission? {
        self as? DBXTeamLogEventTypeArgPaperPublishedLinkChangePermission
    }

    @objc
    public var asPaperPublishedLinkCreate: DBXTeamLogEventTypeArgPaperPublishedLinkCreate? {
        self as? DBXTeamLogEventTypeArgPaperPublishedLinkCreate
    }

    @objc
    public var asPaperPublishedLinkDisabled: DBXTeamLogEventTypeArgPaperPublishedLinkDisabled? {
        self as? DBXTeamLogEventTypeArgPaperPublishedLinkDisabled
    }

    @objc
    public var asPaperPublishedLinkView: DBXTeamLogEventTypeArgPaperPublishedLinkView? {
        self as? DBXTeamLogEventTypeArgPaperPublishedLinkView
    }

    @objc
    public var asPasswordChange: DBXTeamLogEventTypeArgPasswordChange? {
        self as? DBXTeamLogEventTypeArgPasswordChange
    }

    @objc
    public var asPasswordReset: DBXTeamLogEventTypeArgPasswordReset? {
        self as? DBXTeamLogEventTypeArgPasswordReset
    }

    @objc
    public var asPasswordResetAll: DBXTeamLogEventTypeArgPasswordResetAll? {
        self as? DBXTeamLogEventTypeArgPasswordResetAll
    }

    @objc
    public var asClassificationCreateReport: DBXTeamLogEventTypeArgClassificationCreateReport? {
        self as? DBXTeamLogEventTypeArgClassificationCreateReport
    }

    @objc
    public var asClassificationCreateReportFail: DBXTeamLogEventTypeArgClassificationCreateReportFail? {
        self as? DBXTeamLogEventTypeArgClassificationCreateReportFail
    }

    @objc
    public var asEmmCreateExceptionsReport: DBXTeamLogEventTypeArgEmmCreateExceptionsReport? {
        self as? DBXTeamLogEventTypeArgEmmCreateExceptionsReport
    }

    @objc
    public var asEmmCreateUsageReport: DBXTeamLogEventTypeArgEmmCreateUsageReport? {
        self as? DBXTeamLogEventTypeArgEmmCreateUsageReport
    }

    @objc
    public var asExportMembersReport: DBXTeamLogEventTypeArgExportMembersReport? {
        self as? DBXTeamLogEventTypeArgExportMembersReport
    }

    @objc
    public var asExportMembersReportFail: DBXTeamLogEventTypeArgExportMembersReportFail? {
        self as? DBXTeamLogEventTypeArgExportMembersReportFail
    }

    @objc
    public var asExternalSharingCreateReport: DBXTeamLogEventTypeArgExternalSharingCreateReport? {
        self as? DBXTeamLogEventTypeArgExternalSharingCreateReport
    }

    @objc
    public var asExternalSharingReportFailed: DBXTeamLogEventTypeArgExternalSharingReportFailed? {
        self as? DBXTeamLogEventTypeArgExternalSharingReportFailed
    }

    @objc
    public var asNoExpirationLinkGenCreateReport: DBXTeamLogEventTypeArgNoExpirationLinkGenCreateReport? {
        self as? DBXTeamLogEventTypeArgNoExpirationLinkGenCreateReport
    }

    @objc
    public var asNoExpirationLinkGenReportFailed: DBXTeamLogEventTypeArgNoExpirationLinkGenReportFailed? {
        self as? DBXTeamLogEventTypeArgNoExpirationLinkGenReportFailed
    }

    @objc
    public var asNoPasswordLinkGenCreateReport: DBXTeamLogEventTypeArgNoPasswordLinkGenCreateReport? {
        self as? DBXTeamLogEventTypeArgNoPasswordLinkGenCreateReport
    }

    @objc
    public var asNoPasswordLinkGenReportFailed: DBXTeamLogEventTypeArgNoPasswordLinkGenReportFailed? {
        self as? DBXTeamLogEventTypeArgNoPasswordLinkGenReportFailed
    }

    @objc
    public var asNoPasswordLinkViewCreateReport: DBXTeamLogEventTypeArgNoPasswordLinkViewCreateReport? {
        self as? DBXTeamLogEventTypeArgNoPasswordLinkViewCreateReport
    }

    @objc
    public var asNoPasswordLinkViewReportFailed: DBXTeamLogEventTypeArgNoPasswordLinkViewReportFailed? {
        self as? DBXTeamLogEventTypeArgNoPasswordLinkViewReportFailed
    }

    @objc
    public var asOutdatedLinkViewCreateReport: DBXTeamLogEventTypeArgOutdatedLinkViewCreateReport? {
        self as? DBXTeamLogEventTypeArgOutdatedLinkViewCreateReport
    }

    @objc
    public var asOutdatedLinkViewReportFailed: DBXTeamLogEventTypeArgOutdatedLinkViewReportFailed? {
        self as? DBXTeamLogEventTypeArgOutdatedLinkViewReportFailed
    }

    @objc
    public var asPaperAdminExportStart: DBXTeamLogEventTypeArgPaperAdminExportStart? {
        self as? DBXTeamLogEventTypeArgPaperAdminExportStart
    }

    @objc
    public var asRansomwareAlertCreateReport: DBXTeamLogEventTypeArgRansomwareAlertCreateReport? {
        self as? DBXTeamLogEventTypeArgRansomwareAlertCreateReport
    }

    @objc
    public var asRansomwareAlertCreateReportFailed: DBXTeamLogEventTypeArgRansomwareAlertCreateReportFailed? {
        self as? DBXTeamLogEventTypeArgRansomwareAlertCreateReportFailed
    }

    @objc
    public var asSmartSyncCreateAdminPrivilegeReport: DBXTeamLogEventTypeArgSmartSyncCreateAdminPrivilegeReport? {
        self as? DBXTeamLogEventTypeArgSmartSyncCreateAdminPrivilegeReport
    }

    @objc
    public var asTeamActivityCreateReport: DBXTeamLogEventTypeArgTeamActivityCreateReport? {
        self as? DBXTeamLogEventTypeArgTeamActivityCreateReport
    }

    @objc
    public var asTeamActivityCreateReportFail: DBXTeamLogEventTypeArgTeamActivityCreateReportFail? {
        self as? DBXTeamLogEventTypeArgTeamActivityCreateReportFail
    }

    @objc
    public var asCollectionShare: DBXTeamLogEventTypeArgCollectionShare? {
        self as? DBXTeamLogEventTypeArgCollectionShare
    }

    @objc
    public var asFileTransfersFileAdd: DBXTeamLogEventTypeArgFileTransfersFileAdd? {
        self as? DBXTeamLogEventTypeArgFileTransfersFileAdd
    }

    @objc
    public var asFileTransfersTransferDelete: DBXTeamLogEventTypeArgFileTransfersTransferDelete? {
        self as? DBXTeamLogEventTypeArgFileTransfersTransferDelete
    }

    @objc
    public var asFileTransfersTransferDownload: DBXTeamLogEventTypeArgFileTransfersTransferDownload? {
        self as? DBXTeamLogEventTypeArgFileTransfersTransferDownload
    }

    @objc
    public var asFileTransfersTransferSend: DBXTeamLogEventTypeArgFileTransfersTransferSend? {
        self as? DBXTeamLogEventTypeArgFileTransfersTransferSend
    }

    @objc
    public var asFileTransfersTransferView: DBXTeamLogEventTypeArgFileTransfersTransferView? {
        self as? DBXTeamLogEventTypeArgFileTransfersTransferView
    }

    @objc
    public var asNoteAclInviteOnly: DBXTeamLogEventTypeArgNoteAclInviteOnly? {
        self as? DBXTeamLogEventTypeArgNoteAclInviteOnly
    }

    @objc
    public var asNoteAclLink: DBXTeamLogEventTypeArgNoteAclLink? {
        self as? DBXTeamLogEventTypeArgNoteAclLink
    }

    @objc
    public var asNoteAclTeamLink: DBXTeamLogEventTypeArgNoteAclTeamLink? {
        self as? DBXTeamLogEventTypeArgNoteAclTeamLink
    }

    @objc
    public var asNoteShared: DBXTeamLogEventTypeArgNoteShared? {
        self as? DBXTeamLogEventTypeArgNoteShared
    }

    @objc
    public var asNoteShareReceive: DBXTeamLogEventTypeArgNoteShareReceive? {
        self as? DBXTeamLogEventTypeArgNoteShareReceive
    }

    @objc
    public var asOpenNoteShared: DBXTeamLogEventTypeArgOpenNoteShared? {
        self as? DBXTeamLogEventTypeArgOpenNoteShared
    }

    @objc
    public var asReplayFileSharedLinkCreated: DBXTeamLogEventTypeArgReplayFileSharedLinkCreated? {
        self as? DBXTeamLogEventTypeArgReplayFileSharedLinkCreated
    }

    @objc
    public var asReplayFileSharedLinkModified: DBXTeamLogEventTypeArgReplayFileSharedLinkModified? {
        self as? DBXTeamLogEventTypeArgReplayFileSharedLinkModified
    }

    @objc
    public var asReplayProjectTeamAdd: DBXTeamLogEventTypeArgReplayProjectTeamAdd? {
        self as? DBXTeamLogEventTypeArgReplayProjectTeamAdd
    }

    @objc
    public var asReplayProjectTeamDelete: DBXTeamLogEventTypeArgReplayProjectTeamDelete? {
        self as? DBXTeamLogEventTypeArgReplayProjectTeamDelete
    }

    @objc
    public var asSfAddGroup: DBXTeamLogEventTypeArgSfAddGroup? {
        self as? DBXTeamLogEventTypeArgSfAddGroup
    }

    @objc
    public var asSfAllowNonMembersToViewSharedLinks: DBXTeamLogEventTypeArgSfAllowNonMembersToViewSharedLinks? {
        self as? DBXTeamLogEventTypeArgSfAllowNonMembersToViewSharedLinks
    }

    @objc
    public var asSfExternalInviteWarn: DBXTeamLogEventTypeArgSfExternalInviteWarn? {
        self as? DBXTeamLogEventTypeArgSfExternalInviteWarn
    }

    @objc
    public var asSfFbInvite: DBXTeamLogEventTypeArgSfFbInvite? {
        self as? DBXTeamLogEventTypeArgSfFbInvite
    }

    @objc
    public var asSfFbInviteChangeRole: DBXTeamLogEventTypeArgSfFbInviteChangeRole? {
        self as? DBXTeamLogEventTypeArgSfFbInviteChangeRole
    }

    @objc
    public var asSfFbUninvite: DBXTeamLogEventTypeArgSfFbUninvite? {
        self as? DBXTeamLogEventTypeArgSfFbUninvite
    }

    @objc
    public var asSfInviteGroup: DBXTeamLogEventTypeArgSfInviteGroup? {
        self as? DBXTeamLogEventTypeArgSfInviteGroup
    }

    @objc
    public var asSfTeamGrantAccess: DBXTeamLogEventTypeArgSfTeamGrantAccess? {
        self as? DBXTeamLogEventTypeArgSfTeamGrantAccess
    }

    @objc
    public var asSfTeamInvite: DBXTeamLogEventTypeArgSfTeamInvite? {
        self as? DBXTeamLogEventTypeArgSfTeamInvite
    }

    @objc
    public var asSfTeamInviteChangeRole: DBXTeamLogEventTypeArgSfTeamInviteChangeRole? {
        self as? DBXTeamLogEventTypeArgSfTeamInviteChangeRole
    }

    @objc
    public var asSfTeamJoin: DBXTeamLogEventTypeArgSfTeamJoin? {
        self as? DBXTeamLogEventTypeArgSfTeamJoin
    }

    @objc
    public var asSfTeamJoinFromOobLink: DBXTeamLogEventTypeArgSfTeamJoinFromOobLink? {
        self as? DBXTeamLogEventTypeArgSfTeamJoinFromOobLink
    }

    @objc
    public var asSfTeamUninvite: DBXTeamLogEventTypeArgSfTeamUninvite? {
        self as? DBXTeamLogEventTypeArgSfTeamUninvite
    }

    @objc
    public var asSharedContentAddInvitees: DBXTeamLogEventTypeArgSharedContentAddInvitees? {
        self as? DBXTeamLogEventTypeArgSharedContentAddInvitees
    }

    @objc
    public var asSharedContentAddLinkExpiry: DBXTeamLogEventTypeArgSharedContentAddLinkExpiry? {
        self as? DBXTeamLogEventTypeArgSharedContentAddLinkExpiry
    }

    @objc
    public var asSharedContentAddLinkPassword: DBXTeamLogEventTypeArgSharedContentAddLinkPassword? {
        self as? DBXTeamLogEventTypeArgSharedContentAddLinkPassword
    }

    @objc
    public var asSharedContentAddMember: DBXTeamLogEventTypeArgSharedContentAddMember? {
        self as? DBXTeamLogEventTypeArgSharedContentAddMember
    }

    @objc
    public var asSharedContentChangeDownloadsPolicy: DBXTeamLogEventTypeArgSharedContentChangeDownloadsPolicy? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeDownloadsPolicy
    }

    @objc
    public var asSharedContentChangeInviteeRole: DBXTeamLogEventTypeArgSharedContentChangeInviteeRole? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeInviteeRole
    }

    @objc
    public var asSharedContentChangeLinkAudience: DBXTeamLogEventTypeArgSharedContentChangeLinkAudience? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeLinkAudience
    }

    @objc
    public var asSharedContentChangeLinkExpiry: DBXTeamLogEventTypeArgSharedContentChangeLinkExpiry? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeLinkExpiry
    }

    @objc
    public var asSharedContentChangeLinkPassword: DBXTeamLogEventTypeArgSharedContentChangeLinkPassword? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeLinkPassword
    }

    @objc
    public var asSharedContentChangeMemberRole: DBXTeamLogEventTypeArgSharedContentChangeMemberRole? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeMemberRole
    }

    @objc
    public var asSharedContentChangeViewerInfoPolicy: DBXTeamLogEventTypeArgSharedContentChangeViewerInfoPolicy? {
        self as? DBXTeamLogEventTypeArgSharedContentChangeViewerInfoPolicy
    }

    @objc
    public var asSharedContentClaimInvitation: DBXTeamLogEventTypeArgSharedContentClaimInvitation? {
        self as? DBXTeamLogEventTypeArgSharedContentClaimInvitation
    }

    @objc
    public var asSharedContentCopy: DBXTeamLogEventTypeArgSharedContentCopy? {
        self as? DBXTeamLogEventTypeArgSharedContentCopy
    }

    @objc
    public var asSharedContentDownload: DBXTeamLogEventTypeArgSharedContentDownload? {
        self as? DBXTeamLogEventTypeArgSharedContentDownload
    }

    @objc
    public var asSharedContentRelinquishMembership: DBXTeamLogEventTypeArgSharedContentRelinquishMembership? {
        self as? DBXTeamLogEventTypeArgSharedContentRelinquishMembership
    }

    @objc
    public var asSharedContentRemoveInvitees: DBXTeamLogEventTypeArgSharedContentRemoveInvitees? {
        self as? DBXTeamLogEventTypeArgSharedContentRemoveInvitees
    }

    @objc
    public var asSharedContentRemoveLinkExpiry: DBXTeamLogEventTypeArgSharedContentRemoveLinkExpiry? {
        self as? DBXTeamLogEventTypeArgSharedContentRemoveLinkExpiry
    }

    @objc
    public var asSharedContentRemoveLinkPassword: DBXTeamLogEventTypeArgSharedContentRemoveLinkPassword? {
        self as? DBXTeamLogEventTypeArgSharedContentRemoveLinkPassword
    }

    @objc
    public var asSharedContentRemoveMember: DBXTeamLogEventTypeArgSharedContentRemoveMember? {
        self as? DBXTeamLogEventTypeArgSharedContentRemoveMember
    }

    @objc
    public var asSharedContentRequestAccess: DBXTeamLogEventTypeArgSharedContentRequestAccess? {
        self as? DBXTeamLogEventTypeArgSharedContentRequestAccess
    }

    @objc
    public var asSharedContentRestoreInvitees: DBXTeamLogEventTypeArgSharedContentRestoreInvitees? {
        self as? DBXTeamLogEventTypeArgSharedContentRestoreInvitees
    }

    @objc
    public var asSharedContentRestoreMember: DBXTeamLogEventTypeArgSharedContentRestoreMember? {
        self as? DBXTeamLogEventTypeArgSharedContentRestoreMember
    }

    @objc
    public var asSharedContentUnshare: DBXTeamLogEventTypeArgSharedContentUnshare? {
        self as? DBXTeamLogEventTypeArgSharedContentUnshare
    }

    @objc
    public var asSharedContentView: DBXTeamLogEventTypeArgSharedContentView? {
        self as? DBXTeamLogEventTypeArgSharedContentView
    }

    @objc
    public var asSharedFolderChangeLinkPolicy: DBXTeamLogEventTypeArgSharedFolderChangeLinkPolicy? {
        self as? DBXTeamLogEventTypeArgSharedFolderChangeLinkPolicy
    }

    @objc
    public var asSharedFolderChangeMembersInheritancePolicy: DBXTeamLogEventTypeArgSharedFolderChangeMembersInheritancePolicy? {
        self as? DBXTeamLogEventTypeArgSharedFolderChangeMembersInheritancePolicy
    }

    @objc
    public var asSharedFolderChangeMembersManagementPolicy: DBXTeamLogEventTypeArgSharedFolderChangeMembersManagementPolicy? {
        self as? DBXTeamLogEventTypeArgSharedFolderChangeMembersManagementPolicy
    }

    @objc
    public var asSharedFolderChangeMembersPolicy: DBXTeamLogEventTypeArgSharedFolderChangeMembersPolicy? {
        self as? DBXTeamLogEventTypeArgSharedFolderChangeMembersPolicy
    }

    @objc
    public var asSharedFolderCreate: DBXTeamLogEventTypeArgSharedFolderCreate? {
        self as? DBXTeamLogEventTypeArgSharedFolderCreate
    }

    @objc
    public var asSharedFolderDeclineInvitation: DBXTeamLogEventTypeArgSharedFolderDeclineInvitation? {
        self as? DBXTeamLogEventTypeArgSharedFolderDeclineInvitation
    }

    @objc
    public var asSharedFolderMount: DBXTeamLogEventTypeArgSharedFolderMount? {
        self as? DBXTeamLogEventTypeArgSharedFolderMount
    }

    @objc
    public var asSharedFolderNest: DBXTeamLogEventTypeArgSharedFolderNest? {
        self as? DBXTeamLogEventTypeArgSharedFolderNest
    }

    @objc
    public var asSharedFolderTransferOwnership: DBXTeamLogEventTypeArgSharedFolderTransferOwnership? {
        self as? DBXTeamLogEventTypeArgSharedFolderTransferOwnership
    }

    @objc
    public var asSharedFolderUnmount: DBXTeamLogEventTypeArgSharedFolderUnmount? {
        self as? DBXTeamLogEventTypeArgSharedFolderUnmount
    }

    @objc
    public var asSharedLinkAddExpiry: DBXTeamLogEventTypeArgSharedLinkAddExpiry? {
        self as? DBXTeamLogEventTypeArgSharedLinkAddExpiry
    }

    @objc
    public var asSharedLinkChangeExpiry: DBXTeamLogEventTypeArgSharedLinkChangeExpiry? {
        self as? DBXTeamLogEventTypeArgSharedLinkChangeExpiry
    }

    @objc
    public var asSharedLinkChangeVisibility: DBXTeamLogEventTypeArgSharedLinkChangeVisibility? {
        self as? DBXTeamLogEventTypeArgSharedLinkChangeVisibility
    }

    @objc
    public var asSharedLinkCopy: DBXTeamLogEventTypeArgSharedLinkCopy? {
        self as? DBXTeamLogEventTypeArgSharedLinkCopy
    }

    @objc
    public var asSharedLinkCreate: DBXTeamLogEventTypeArgSharedLinkCreate? {
        self as? DBXTeamLogEventTypeArgSharedLinkCreate
    }

    @objc
    public var asSharedLinkDisable: DBXTeamLogEventTypeArgSharedLinkDisable? {
        self as? DBXTeamLogEventTypeArgSharedLinkDisable
    }

    @objc
    public var asSharedLinkDownload: DBXTeamLogEventTypeArgSharedLinkDownload? {
        self as? DBXTeamLogEventTypeArgSharedLinkDownload
    }

    @objc
    public var asSharedLinkRemoveExpiry: DBXTeamLogEventTypeArgSharedLinkRemoveExpiry? {
        self as? DBXTeamLogEventTypeArgSharedLinkRemoveExpiry
    }

    @objc
    public var asSharedLinkSettingsAddExpiration: DBXTeamLogEventTypeArgSharedLinkSettingsAddExpiration? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsAddExpiration
    }

    @objc
    public var asSharedLinkSettingsAddPassword: DBXTeamLogEventTypeArgSharedLinkSettingsAddPassword? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsAddPassword
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadDisabled: DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadDisabled? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadDisabled
    }

    @objc
    public var asSharedLinkSettingsAllowDownloadEnabled: DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadEnabled? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadEnabled
    }

    @objc
    public var asSharedLinkSettingsChangeAudience: DBXTeamLogEventTypeArgSharedLinkSettingsChangeAudience? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsChangeAudience
    }

    @objc
    public var asSharedLinkSettingsChangeExpiration: DBXTeamLogEventTypeArgSharedLinkSettingsChangeExpiration? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsChangeExpiration
    }

    @objc
    public var asSharedLinkSettingsChangePassword: DBXTeamLogEventTypeArgSharedLinkSettingsChangePassword? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsChangePassword
    }

    @objc
    public var asSharedLinkSettingsRemoveExpiration: DBXTeamLogEventTypeArgSharedLinkSettingsRemoveExpiration? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsRemoveExpiration
    }

    @objc
    public var asSharedLinkSettingsRemovePassword: DBXTeamLogEventTypeArgSharedLinkSettingsRemovePassword? {
        self as? DBXTeamLogEventTypeArgSharedLinkSettingsRemovePassword
    }

    @objc
    public var asSharedLinkShare: DBXTeamLogEventTypeArgSharedLinkShare? {
        self as? DBXTeamLogEventTypeArgSharedLinkShare
    }

    @objc
    public var asSharedLinkView: DBXTeamLogEventTypeArgSharedLinkView? {
        self as? DBXTeamLogEventTypeArgSharedLinkView
    }

    @objc
    public var asSharedNoteOpened: DBXTeamLogEventTypeArgSharedNoteOpened? {
        self as? DBXTeamLogEventTypeArgSharedNoteOpened
    }

    @objc
    public var asShmodelDisableDownloads: DBXTeamLogEventTypeArgShmodelDisableDownloads? {
        self as? DBXTeamLogEventTypeArgShmodelDisableDownloads
    }

    @objc
    public var asShmodelEnableDownloads: DBXTeamLogEventTypeArgShmodelEnableDownloads? {
        self as? DBXTeamLogEventTypeArgShmodelEnableDownloads
    }

    @objc
    public var asShmodelGroupShare: DBXTeamLogEventTypeArgShmodelGroupShare? {
        self as? DBXTeamLogEventTypeArgShmodelGroupShare
    }

    @objc
    public var asShowcaseAccessGranted: DBXTeamLogEventTypeArgShowcaseAccessGranted? {
        self as? DBXTeamLogEventTypeArgShowcaseAccessGranted
    }

    @objc
    public var asShowcaseAddMember: DBXTeamLogEventTypeArgShowcaseAddMember? {
        self as? DBXTeamLogEventTypeArgShowcaseAddMember
    }

    @objc
    public var asShowcaseArchived: DBXTeamLogEventTypeArgShowcaseArchived? {
        self as? DBXTeamLogEventTypeArgShowcaseArchived
    }

    @objc
    public var asShowcaseCreated: DBXTeamLogEventTypeArgShowcaseCreated? {
        self as? DBXTeamLogEventTypeArgShowcaseCreated
    }

    @objc
    public var asShowcaseDeleteComment: DBXTeamLogEventTypeArgShowcaseDeleteComment? {
        self as? DBXTeamLogEventTypeArgShowcaseDeleteComment
    }

    @objc
    public var asShowcaseEdited: DBXTeamLogEventTypeArgShowcaseEdited? {
        self as? DBXTeamLogEventTypeArgShowcaseEdited
    }

    @objc
    public var asShowcaseEditComment: DBXTeamLogEventTypeArgShowcaseEditComment? {
        self as? DBXTeamLogEventTypeArgShowcaseEditComment
    }

    @objc
    public var asShowcaseFileAdded: DBXTeamLogEventTypeArgShowcaseFileAdded? {
        self as? DBXTeamLogEventTypeArgShowcaseFileAdded
    }

    @objc
    public var asShowcaseFileDownload: DBXTeamLogEventTypeArgShowcaseFileDownload? {
        self as? DBXTeamLogEventTypeArgShowcaseFileDownload
    }

    @objc
    public var asShowcaseFileRemoved: DBXTeamLogEventTypeArgShowcaseFileRemoved? {
        self as? DBXTeamLogEventTypeArgShowcaseFileRemoved
    }

    @objc
    public var asShowcaseFileView: DBXTeamLogEventTypeArgShowcaseFileView? {
        self as? DBXTeamLogEventTypeArgShowcaseFileView
    }

    @objc
    public var asShowcasePermanentlyDeleted: DBXTeamLogEventTypeArgShowcasePermanentlyDeleted? {
        self as? DBXTeamLogEventTypeArgShowcasePermanentlyDeleted
    }

    @objc
    public var asShowcasePostComment: DBXTeamLogEventTypeArgShowcasePostComment? {
        self as? DBXTeamLogEventTypeArgShowcasePostComment
    }

    @objc
    public var asShowcaseRemoveMember: DBXTeamLogEventTypeArgShowcaseRemoveMember? {
        self as? DBXTeamLogEventTypeArgShowcaseRemoveMember
    }

    @objc
    public var asShowcaseRenamed: DBXTeamLogEventTypeArgShowcaseRenamed? {
        self as? DBXTeamLogEventTypeArgShowcaseRenamed
    }

    @objc
    public var asShowcaseRequestAccess: DBXTeamLogEventTypeArgShowcaseRequestAccess? {
        self as? DBXTeamLogEventTypeArgShowcaseRequestAccess
    }

    @objc
    public var asShowcaseResolveComment: DBXTeamLogEventTypeArgShowcaseResolveComment? {
        self as? DBXTeamLogEventTypeArgShowcaseResolveComment
    }

    @objc
    public var asShowcaseRestored: DBXTeamLogEventTypeArgShowcaseRestored? {
        self as? DBXTeamLogEventTypeArgShowcaseRestored
    }

    @objc
    public var asShowcaseTrashed: DBXTeamLogEventTypeArgShowcaseTrashed? {
        self as? DBXTeamLogEventTypeArgShowcaseTrashed
    }

    @objc
    public var asShowcaseTrashedDeprecated: DBXTeamLogEventTypeArgShowcaseTrashedDeprecated? {
        self as? DBXTeamLogEventTypeArgShowcaseTrashedDeprecated
    }

    @objc
    public var asShowcaseUnresolveComment: DBXTeamLogEventTypeArgShowcaseUnresolveComment? {
        self as? DBXTeamLogEventTypeArgShowcaseUnresolveComment
    }

    @objc
    public var asShowcaseUntrashed: DBXTeamLogEventTypeArgShowcaseUntrashed? {
        self as? DBXTeamLogEventTypeArgShowcaseUntrashed
    }

    @objc
    public var asShowcaseUntrashedDeprecated: DBXTeamLogEventTypeArgShowcaseUntrashedDeprecated? {
        self as? DBXTeamLogEventTypeArgShowcaseUntrashedDeprecated
    }

    @objc
    public var asShowcaseView: DBXTeamLogEventTypeArgShowcaseView? {
        self as? DBXTeamLogEventTypeArgShowcaseView
    }

    @objc
    public var asSsoAddCert: DBXTeamLogEventTypeArgSsoAddCert? {
        self as? DBXTeamLogEventTypeArgSsoAddCert
    }

    @objc
    public var asSsoAddLoginUrl: DBXTeamLogEventTypeArgSsoAddLoginUrl? {
        self as? DBXTeamLogEventTypeArgSsoAddLoginUrl
    }

    @objc
    public var asSsoAddLogoutUrl: DBXTeamLogEventTypeArgSsoAddLogoutUrl? {
        self as? DBXTeamLogEventTypeArgSsoAddLogoutUrl
    }

    @objc
    public var asSsoChangeCert: DBXTeamLogEventTypeArgSsoChangeCert? {
        self as? DBXTeamLogEventTypeArgSsoChangeCert
    }

    @objc
    public var asSsoChangeLoginUrl: DBXTeamLogEventTypeArgSsoChangeLoginUrl? {
        self as? DBXTeamLogEventTypeArgSsoChangeLoginUrl
    }

    @objc
    public var asSsoChangeLogoutUrl: DBXTeamLogEventTypeArgSsoChangeLogoutUrl? {
        self as? DBXTeamLogEventTypeArgSsoChangeLogoutUrl
    }

    @objc
    public var asSsoChangeSamlIdentityMode: DBXTeamLogEventTypeArgSsoChangeSamlIdentityMode? {
        self as? DBXTeamLogEventTypeArgSsoChangeSamlIdentityMode
    }

    @objc
    public var asSsoRemoveCert: DBXTeamLogEventTypeArgSsoRemoveCert? {
        self as? DBXTeamLogEventTypeArgSsoRemoveCert
    }

    @objc
    public var asSsoRemoveLoginUrl: DBXTeamLogEventTypeArgSsoRemoveLoginUrl? {
        self as? DBXTeamLogEventTypeArgSsoRemoveLoginUrl
    }

    @objc
    public var asSsoRemoveLogoutUrl: DBXTeamLogEventTypeArgSsoRemoveLogoutUrl? {
        self as? DBXTeamLogEventTypeArgSsoRemoveLogoutUrl
    }

    @objc
    public var asTeamFolderChangeStatus: DBXTeamLogEventTypeArgTeamFolderChangeStatus? {
        self as? DBXTeamLogEventTypeArgTeamFolderChangeStatus
    }

    @objc
    public var asTeamFolderCreate: DBXTeamLogEventTypeArgTeamFolderCreate? {
        self as? DBXTeamLogEventTypeArgTeamFolderCreate
    }

    @objc
    public var asTeamFolderDowngrade: DBXTeamLogEventTypeArgTeamFolderDowngrade? {
        self as? DBXTeamLogEventTypeArgTeamFolderDowngrade
    }

    @objc
    public var asTeamFolderPermanentlyDelete: DBXTeamLogEventTypeArgTeamFolderPermanentlyDelete? {
        self as? DBXTeamLogEventTypeArgTeamFolderPermanentlyDelete
    }

    @objc
    public var asTeamFolderRename: DBXTeamLogEventTypeArgTeamFolderRename? {
        self as? DBXTeamLogEventTypeArgTeamFolderRename
    }

    @objc
    public var asTeamSelectiveSyncSettingsChanged: DBXTeamLogEventTypeArgTeamSelectiveSyncSettingsChanged? {
        self as? DBXTeamLogEventTypeArgTeamSelectiveSyncSettingsChanged
    }

    @objc
    public var asAccountCaptureChangePolicy: DBXTeamLogEventTypeArgAccountCaptureChangePolicy? {
        self as? DBXTeamLogEventTypeArgAccountCaptureChangePolicy
    }

    @objc
    public var asAdminEmailRemindersChanged: DBXTeamLogEventTypeArgAdminEmailRemindersChanged? {
        self as? DBXTeamLogEventTypeArgAdminEmailRemindersChanged
    }

    @objc
    public var asAllowDownloadDisabled: DBXTeamLogEventTypeArgAllowDownloadDisabled? {
        self as? DBXTeamLogEventTypeArgAllowDownloadDisabled
    }

    @objc
    public var asAllowDownloadEnabled: DBXTeamLogEventTypeArgAllowDownloadEnabled? {
        self as? DBXTeamLogEventTypeArgAllowDownloadEnabled
    }

    @objc
    public var asAppPermissionsChanged: DBXTeamLogEventTypeArgAppPermissionsChanged? {
        self as? DBXTeamLogEventTypeArgAppPermissionsChanged
    }

    @objc
    public var asCameraUploadsPolicyChanged: DBXTeamLogEventTypeArgCameraUploadsPolicyChanged? {
        self as? DBXTeamLogEventTypeArgCameraUploadsPolicyChanged
    }

    @objc
    public var asCaptureTranscriptPolicyChanged: DBXTeamLogEventTypeArgCaptureTranscriptPolicyChanged? {
        self as? DBXTeamLogEventTypeArgCaptureTranscriptPolicyChanged
    }

    @objc
    public var asClassificationChangePolicy: DBXTeamLogEventTypeArgClassificationChangePolicy? {
        self as? DBXTeamLogEventTypeArgClassificationChangePolicy
    }

    @objc
    public var asComputerBackupPolicyChanged: DBXTeamLogEventTypeArgComputerBackupPolicyChanged? {
        self as? DBXTeamLogEventTypeArgComputerBackupPolicyChanged
    }

    @objc
    public var asContentAdministrationPolicyChanged: DBXTeamLogEventTypeArgContentAdministrationPolicyChanged? {
        self as? DBXTeamLogEventTypeArgContentAdministrationPolicyChanged
    }

    @objc
    public var asDataPlacementRestrictionChangePolicy: DBXTeamLogEventTypeArgDataPlacementRestrictionChangePolicy? {
        self as? DBXTeamLogEventTypeArgDataPlacementRestrictionChangePolicy
    }

    @objc
    public var asDataPlacementRestrictionSatisfyPolicy: DBXTeamLogEventTypeArgDataPlacementRestrictionSatisfyPolicy? {
        self as? DBXTeamLogEventTypeArgDataPlacementRestrictionSatisfyPolicy
    }

    @objc
    public var asDeviceApprovalsAddException: DBXTeamLogEventTypeArgDeviceApprovalsAddException? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsAddException
    }

    @objc
    public var asDeviceApprovalsChangeDesktopPolicy: DBXTeamLogEventTypeArgDeviceApprovalsChangeDesktopPolicy? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsChangeDesktopPolicy
    }

    @objc
    public var asDeviceApprovalsChangeMobilePolicy: DBXTeamLogEventTypeArgDeviceApprovalsChangeMobilePolicy? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsChangeMobilePolicy
    }

    @objc
    public var asDeviceApprovalsChangeOverageAction: DBXTeamLogEventTypeArgDeviceApprovalsChangeOverageAction? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsChangeOverageAction
    }

    @objc
    public var asDeviceApprovalsChangeUnlinkAction: DBXTeamLogEventTypeArgDeviceApprovalsChangeUnlinkAction? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsChangeUnlinkAction
    }

    @objc
    public var asDeviceApprovalsRemoveException: DBXTeamLogEventTypeArgDeviceApprovalsRemoveException? {
        self as? DBXTeamLogEventTypeArgDeviceApprovalsRemoveException
    }

    @objc
    public var asDirectoryRestrictionsAddMembers: DBXTeamLogEventTypeArgDirectoryRestrictionsAddMembers? {
        self as? DBXTeamLogEventTypeArgDirectoryRestrictionsAddMembers
    }

    @objc
    public var asDirectoryRestrictionsRemoveMembers: DBXTeamLogEventTypeArgDirectoryRestrictionsRemoveMembers? {
        self as? DBXTeamLogEventTypeArgDirectoryRestrictionsRemoveMembers
    }

    @objc
    public var asDropboxPasswordsPolicyChanged: DBXTeamLogEventTypeArgDropboxPasswordsPolicyChanged? {
        self as? DBXTeamLogEventTypeArgDropboxPasswordsPolicyChanged
    }

    @objc
    public var asEmailIngestPolicyChanged: DBXTeamLogEventTypeArgEmailIngestPolicyChanged? {
        self as? DBXTeamLogEventTypeArgEmailIngestPolicyChanged
    }

    @objc
    public var asEmmAddException: DBXTeamLogEventTypeArgEmmAddException? {
        self as? DBXTeamLogEventTypeArgEmmAddException
    }

    @objc
    public var asEmmChangePolicy: DBXTeamLogEventTypeArgEmmChangePolicy? {
        self as? DBXTeamLogEventTypeArgEmmChangePolicy
    }

    @objc
    public var asEmmRemoveException: DBXTeamLogEventTypeArgEmmRemoveException? {
        self as? DBXTeamLogEventTypeArgEmmRemoveException
    }

    @objc
    public var asExtendedVersionHistoryChangePolicy: DBXTeamLogEventTypeArgExtendedVersionHistoryChangePolicy? {
        self as? DBXTeamLogEventTypeArgExtendedVersionHistoryChangePolicy
    }

    @objc
    public var asExternalDriveBackupPolicyChanged: DBXTeamLogEventTypeArgExternalDriveBackupPolicyChanged? {
        self as? DBXTeamLogEventTypeArgExternalDriveBackupPolicyChanged
    }

    @objc
    public var asFileCommentsChangePolicy: DBXTeamLogEventTypeArgFileCommentsChangePolicy? {
        self as? DBXTeamLogEventTypeArgFileCommentsChangePolicy
    }

    @objc
    public var asFileLockingPolicyChanged: DBXTeamLogEventTypeArgFileLockingPolicyChanged? {
        self as? DBXTeamLogEventTypeArgFileLockingPolicyChanged
    }

    @objc
    public var asFileProviderMigrationPolicyChanged: DBXTeamLogEventTypeArgFileProviderMigrationPolicyChanged? {
        self as? DBXTeamLogEventTypeArgFileProviderMigrationPolicyChanged
    }

    @objc
    public var asFileRequestsChangePolicy: DBXTeamLogEventTypeArgFileRequestsChangePolicy? {
        self as? DBXTeamLogEventTypeArgFileRequestsChangePolicy
    }

    @objc
    public var asFileRequestsEmailsEnabled: DBXTeamLogEventTypeArgFileRequestsEmailsEnabled? {
        self as? DBXTeamLogEventTypeArgFileRequestsEmailsEnabled
    }

    @objc
    public var asFileRequestsEmailsRestrictedToTeamOnly: DBXTeamLogEventTypeArgFileRequestsEmailsRestrictedToTeamOnly? {
        self as? DBXTeamLogEventTypeArgFileRequestsEmailsRestrictedToTeamOnly
    }

    @objc
    public var asFileTransfersPolicyChanged: DBXTeamLogEventTypeArgFileTransfersPolicyChanged? {
        self as? DBXTeamLogEventTypeArgFileTransfersPolicyChanged
    }

    @objc
    public var asFolderLinkRestrictionPolicyChanged: DBXTeamLogEventTypeArgFolderLinkRestrictionPolicyChanged? {
        self as? DBXTeamLogEventTypeArgFolderLinkRestrictionPolicyChanged
    }

    @objc
    public var asGoogleSsoChangePolicy: DBXTeamLogEventTypeArgGoogleSsoChangePolicy? {
        self as? DBXTeamLogEventTypeArgGoogleSsoChangePolicy
    }

    @objc
    public var asGroupUserManagementChangePolicy: DBXTeamLogEventTypeArgGroupUserManagementChangePolicy? {
        self as? DBXTeamLogEventTypeArgGroupUserManagementChangePolicy
    }

    @objc
    public var asIntegrationPolicyChanged: DBXTeamLogEventTypeArgIntegrationPolicyChanged? {
        self as? DBXTeamLogEventTypeArgIntegrationPolicyChanged
    }

    @objc
    public var asInviteAcceptanceEmailPolicyChanged: DBXTeamLogEventTypeArgInviteAcceptanceEmailPolicyChanged? {
        self as? DBXTeamLogEventTypeArgInviteAcceptanceEmailPolicyChanged
    }

    @objc
    public var asMemberRequestsChangePolicy: DBXTeamLogEventTypeArgMemberRequestsChangePolicy? {
        self as? DBXTeamLogEventTypeArgMemberRequestsChangePolicy
    }

    @objc
    public var asMemberSendInvitePolicyChanged: DBXTeamLogEventTypeArgMemberSendInvitePolicyChanged? {
        self as? DBXTeamLogEventTypeArgMemberSendInvitePolicyChanged
    }

    @objc
    public var asMemberSpaceLimitsAddException: DBXTeamLogEventTypeArgMemberSpaceLimitsAddException? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsAddException
    }

    @objc
    public var asMemberSpaceLimitsChangeCapsTypePolicy: DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCapsTypePolicy? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCapsTypePolicy
    }

    @objc
    public var asMemberSpaceLimitsChangePolicy: DBXTeamLogEventTypeArgMemberSpaceLimitsChangePolicy? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsChangePolicy
    }

    @objc
    public var asMemberSpaceLimitsRemoveException: DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveException? {
        self as? DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveException
    }

    @objc
    public var asMemberSuggestionsChangePolicy: DBXTeamLogEventTypeArgMemberSuggestionsChangePolicy? {
        self as? DBXTeamLogEventTypeArgMemberSuggestionsChangePolicy
    }

    @objc
    public var asMicrosoftOfficeAddinChangePolicy: DBXTeamLogEventTypeArgMicrosoftOfficeAddinChangePolicy? {
        self as? DBXTeamLogEventTypeArgMicrosoftOfficeAddinChangePolicy
    }

    @objc
    public var asNetworkControlChangePolicy: DBXTeamLogEventTypeArgNetworkControlChangePolicy? {
        self as? DBXTeamLogEventTypeArgNetworkControlChangePolicy
    }

    @objc
    public var asPaperChangeDeploymentPolicy: DBXTeamLogEventTypeArgPaperChangeDeploymentPolicy? {
        self as? DBXTeamLogEventTypeArgPaperChangeDeploymentPolicy
    }

    @objc
    public var asPaperChangeMemberLinkPolicy: DBXTeamLogEventTypeArgPaperChangeMemberLinkPolicy? {
        self as? DBXTeamLogEventTypeArgPaperChangeMemberLinkPolicy
    }

    @objc
    public var asPaperChangeMemberPolicy: DBXTeamLogEventTypeArgPaperChangeMemberPolicy? {
        self as? DBXTeamLogEventTypeArgPaperChangeMemberPolicy
    }

    @objc
    public var asPaperChangePolicy: DBXTeamLogEventTypeArgPaperChangePolicy? {
        self as? DBXTeamLogEventTypeArgPaperChangePolicy
    }

    @objc
    public var asPaperDefaultFolderPolicyChanged: DBXTeamLogEventTypeArgPaperDefaultFolderPolicyChanged? {
        self as? DBXTeamLogEventTypeArgPaperDefaultFolderPolicyChanged
    }

    @objc
    public var asPaperDesktopPolicyChanged: DBXTeamLogEventTypeArgPaperDesktopPolicyChanged? {
        self as? DBXTeamLogEventTypeArgPaperDesktopPolicyChanged
    }

    @objc
    public var asPaperEnabledUsersGroupAddition: DBXTeamLogEventTypeArgPaperEnabledUsersGroupAddition? {
        self as? DBXTeamLogEventTypeArgPaperEnabledUsersGroupAddition
    }

    @objc
    public var asPaperEnabledUsersGroupRemoval: DBXTeamLogEventTypeArgPaperEnabledUsersGroupRemoval? {
        self as? DBXTeamLogEventTypeArgPaperEnabledUsersGroupRemoval
    }

    @objc
    public var asPasswordStrengthRequirementsChangePolicy: DBXTeamLogEventTypeArgPasswordStrengthRequirementsChangePolicy? {
        self as? DBXTeamLogEventTypeArgPasswordStrengthRequirementsChangePolicy
    }

    @objc
    public var asPermanentDeleteChangePolicy: DBXTeamLogEventTypeArgPermanentDeleteChangePolicy? {
        self as? DBXTeamLogEventTypeArgPermanentDeleteChangePolicy
    }

    @objc
    public var asResellerSupportChangePolicy: DBXTeamLogEventTypeArgResellerSupportChangePolicy? {
        self as? DBXTeamLogEventTypeArgResellerSupportChangePolicy
    }

    @objc
    public var asRewindPolicyChanged: DBXTeamLogEventTypeArgRewindPolicyChanged? {
        self as? DBXTeamLogEventTypeArgRewindPolicyChanged
    }

    @objc
    public var asSendForSignaturePolicyChanged: DBXTeamLogEventTypeArgSendForSignaturePolicyChanged? {
        self as? DBXTeamLogEventTypeArgSendForSignaturePolicyChanged
    }

    @objc
    public var asSharingChangeFolderJoinPolicy: DBXTeamLogEventTypeArgSharingChangeFolderJoinPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeFolderJoinPolicy
    }

    @objc
    public var asSharingChangeLinkAllowChangeExpirationPolicy: DBXTeamLogEventTypeArgSharingChangeLinkAllowChangeExpirationPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeLinkAllowChangeExpirationPolicy
    }

    @objc
    public var asSharingChangeLinkDefaultExpirationPolicy: DBXTeamLogEventTypeArgSharingChangeLinkDefaultExpirationPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeLinkDefaultExpirationPolicy
    }

    @objc
    public var asSharingChangeLinkEnforcePasswordPolicy: DBXTeamLogEventTypeArgSharingChangeLinkEnforcePasswordPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeLinkEnforcePasswordPolicy
    }

    @objc
    public var asSharingChangeLinkPolicy: DBXTeamLogEventTypeArgSharingChangeLinkPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeLinkPolicy
    }

    @objc
    public var asSharingChangeMemberPolicy: DBXTeamLogEventTypeArgSharingChangeMemberPolicy? {
        self as? DBXTeamLogEventTypeArgSharingChangeMemberPolicy
    }

    @objc
    public var asShowcaseChangeDownloadPolicy: DBXTeamLogEventTypeArgShowcaseChangeDownloadPolicy? {
        self as? DBXTeamLogEventTypeArgShowcaseChangeDownloadPolicy
    }

    @objc
    public var asShowcaseChangeEnabledPolicy: DBXTeamLogEventTypeArgShowcaseChangeEnabledPolicy? {
        self as? DBXTeamLogEventTypeArgShowcaseChangeEnabledPolicy
    }

    @objc
    public var asShowcaseChangeExternalSharingPolicy: DBXTeamLogEventTypeArgShowcaseChangeExternalSharingPolicy? {
        self as? DBXTeamLogEventTypeArgShowcaseChangeExternalSharingPolicy
    }

    @objc
    public var asSmarterSmartSyncPolicyChanged: DBXTeamLogEventTypeArgSmarterSmartSyncPolicyChanged? {
        self as? DBXTeamLogEventTypeArgSmarterSmartSyncPolicyChanged
    }

    @objc
    public var asSmartSyncChangePolicy: DBXTeamLogEventTypeArgSmartSyncChangePolicy? {
        self as? DBXTeamLogEventTypeArgSmartSyncChangePolicy
    }

    @objc
    public var asSmartSyncNotOptOut: DBXTeamLogEventTypeArgSmartSyncNotOptOut? {
        self as? DBXTeamLogEventTypeArgSmartSyncNotOptOut
    }

    @objc
    public var asSmartSyncOptOut: DBXTeamLogEventTypeArgSmartSyncOptOut? {
        self as? DBXTeamLogEventTypeArgSmartSyncOptOut
    }

    @objc
    public var asSsoChangePolicy: DBXTeamLogEventTypeArgSsoChangePolicy? {
        self as? DBXTeamLogEventTypeArgSsoChangePolicy
    }

    @objc
    public var asTeamBrandingPolicyChanged: DBXTeamLogEventTypeArgTeamBrandingPolicyChanged? {
        self as? DBXTeamLogEventTypeArgTeamBrandingPolicyChanged
    }

    @objc
    public var asTeamExtensionsPolicyChanged: DBXTeamLogEventTypeArgTeamExtensionsPolicyChanged? {
        self as? DBXTeamLogEventTypeArgTeamExtensionsPolicyChanged
    }

    @objc
    public var asTeamSelectiveSyncPolicyChanged: DBXTeamLogEventTypeArgTeamSelectiveSyncPolicyChanged? {
        self as? DBXTeamLogEventTypeArgTeamSelectiveSyncPolicyChanged
    }

    @objc
    public var asTeamSharingWhitelistSubjectsChanged: DBXTeamLogEventTypeArgTeamSharingWhitelistSubjectsChanged? {
        self as? DBXTeamLogEventTypeArgTeamSharingWhitelistSubjectsChanged
    }

    @objc
    public var asTfaAddException: DBXTeamLogEventTypeArgTfaAddException? {
        self as? DBXTeamLogEventTypeArgTfaAddException
    }

    @objc
    public var asTfaChangePolicy: DBXTeamLogEventTypeArgTfaChangePolicy? {
        self as? DBXTeamLogEventTypeArgTfaChangePolicy
    }

    @objc
    public var asTfaRemoveException: DBXTeamLogEventTypeArgTfaRemoveException? {
        self as? DBXTeamLogEventTypeArgTfaRemoveException
    }

    @objc
    public var asTwoAccountChangePolicy: DBXTeamLogEventTypeArgTwoAccountChangePolicy? {
        self as? DBXTeamLogEventTypeArgTwoAccountChangePolicy
    }

    @objc
    public var asViewerInfoPolicyChanged: DBXTeamLogEventTypeArgViewerInfoPolicyChanged? {
        self as? DBXTeamLogEventTypeArgViewerInfoPolicyChanged
    }

    @objc
    public var asWatermarkingPolicyChanged: DBXTeamLogEventTypeArgWatermarkingPolicyChanged? {
        self as? DBXTeamLogEventTypeArgWatermarkingPolicyChanged
    }

    @objc
    public var asWebSessionsChangeActiveSessionLimit: DBXTeamLogEventTypeArgWebSessionsChangeActiveSessionLimit? {
        self as? DBXTeamLogEventTypeArgWebSessionsChangeActiveSessionLimit
    }

    @objc
    public var asWebSessionsChangeFixedLengthPolicy: DBXTeamLogEventTypeArgWebSessionsChangeFixedLengthPolicy? {
        self as? DBXTeamLogEventTypeArgWebSessionsChangeFixedLengthPolicy
    }

    @objc
    public var asWebSessionsChangeIdleLengthPolicy: DBXTeamLogEventTypeArgWebSessionsChangeIdleLengthPolicy? {
        self as? DBXTeamLogEventTypeArgWebSessionsChangeIdleLengthPolicy
    }

    @objc
    public var asDataResidencyMigrationRequestSuccessful: DBXTeamLogEventTypeArgDataResidencyMigrationRequestSuccessful? {
        self as? DBXTeamLogEventTypeArgDataResidencyMigrationRequestSuccessful
    }

    @objc
    public var asDataResidencyMigrationRequestUnsuccessful: DBXTeamLogEventTypeArgDataResidencyMigrationRequestUnsuccessful? {
        self as? DBXTeamLogEventTypeArgDataResidencyMigrationRequestUnsuccessful
    }

    @objc
    public var asTeamMergeFrom: DBXTeamLogEventTypeArgTeamMergeFrom? {
        self as? DBXTeamLogEventTypeArgTeamMergeFrom
    }

    @objc
    public var asTeamMergeTo: DBXTeamLogEventTypeArgTeamMergeTo? {
        self as? DBXTeamLogEventTypeArgTeamMergeTo
    }

    @objc
    public var asTeamProfileAddBackground: DBXTeamLogEventTypeArgTeamProfileAddBackground? {
        self as? DBXTeamLogEventTypeArgTeamProfileAddBackground
    }

    @objc
    public var asTeamProfileAddLogo: DBXTeamLogEventTypeArgTeamProfileAddLogo? {
        self as? DBXTeamLogEventTypeArgTeamProfileAddLogo
    }

    @objc
    public var asTeamProfileChangeBackground: DBXTeamLogEventTypeArgTeamProfileChangeBackground? {
        self as? DBXTeamLogEventTypeArgTeamProfileChangeBackground
    }

    @objc
    public var asTeamProfileChangeDefaultLanguage: DBXTeamLogEventTypeArgTeamProfileChangeDefaultLanguage? {
        self as? DBXTeamLogEventTypeArgTeamProfileChangeDefaultLanguage
    }

    @objc
    public var asTeamProfileChangeLogo: DBXTeamLogEventTypeArgTeamProfileChangeLogo? {
        self as? DBXTeamLogEventTypeArgTeamProfileChangeLogo
    }

    @objc
    public var asTeamProfileChangeName: DBXTeamLogEventTypeArgTeamProfileChangeName? {
        self as? DBXTeamLogEventTypeArgTeamProfileChangeName
    }

    @objc
    public var asTeamProfileRemoveBackground: DBXTeamLogEventTypeArgTeamProfileRemoveBackground? {
        self as? DBXTeamLogEventTypeArgTeamProfileRemoveBackground
    }

    @objc
    public var asTeamProfileRemoveLogo: DBXTeamLogEventTypeArgTeamProfileRemoveLogo? {
        self as? DBXTeamLogEventTypeArgTeamProfileRemoveLogo
    }

    @objc
    public var asTfaAddBackupPhone: DBXTeamLogEventTypeArgTfaAddBackupPhone? {
        self as? DBXTeamLogEventTypeArgTfaAddBackupPhone
    }

    @objc
    public var asTfaAddSecurityKey: DBXTeamLogEventTypeArgTfaAddSecurityKey? {
        self as? DBXTeamLogEventTypeArgTfaAddSecurityKey
    }

    @objc
    public var asTfaChangeBackupPhone: DBXTeamLogEventTypeArgTfaChangeBackupPhone? {
        self as? DBXTeamLogEventTypeArgTfaChangeBackupPhone
    }

    @objc
    public var asTfaChangeStatus: DBXTeamLogEventTypeArgTfaChangeStatus? {
        self as? DBXTeamLogEventTypeArgTfaChangeStatus
    }

    @objc
    public var asTfaRemoveBackupPhone: DBXTeamLogEventTypeArgTfaRemoveBackupPhone? {
        self as? DBXTeamLogEventTypeArgTfaRemoveBackupPhone
    }

    @objc
    public var asTfaRemoveSecurityKey: DBXTeamLogEventTypeArgTfaRemoveSecurityKey? {
        self as? DBXTeamLogEventTypeArgTfaRemoveSecurityKey
    }

    @objc
    public var asTfaReset: DBXTeamLogEventTypeArgTfaReset? {
        self as? DBXTeamLogEventTypeArgTfaReset
    }

    @objc
    public var asChangedEnterpriseAdminRole: DBXTeamLogEventTypeArgChangedEnterpriseAdminRole? {
        self as? DBXTeamLogEventTypeArgChangedEnterpriseAdminRole
    }

    @objc
    public var asChangedEnterpriseConnectedTeamStatus: DBXTeamLogEventTypeArgChangedEnterpriseConnectedTeamStatus? {
        self as? DBXTeamLogEventTypeArgChangedEnterpriseConnectedTeamStatus
    }

    @objc
    public var asEndedEnterpriseAdminSession: DBXTeamLogEventTypeArgEndedEnterpriseAdminSession? {
        self as? DBXTeamLogEventTypeArgEndedEnterpriseAdminSession
    }

    @objc
    public var asEndedEnterpriseAdminSessionDeprecated: DBXTeamLogEventTypeArgEndedEnterpriseAdminSessionDeprecated? {
        self as? DBXTeamLogEventTypeArgEndedEnterpriseAdminSessionDeprecated
    }

    @objc
    public var asEnterpriseSettingsLocking: DBXTeamLogEventTypeArgEnterpriseSettingsLocking? {
        self as? DBXTeamLogEventTypeArgEnterpriseSettingsLocking
    }

    @objc
    public var asGuestAdminChangeStatus: DBXTeamLogEventTypeArgGuestAdminChangeStatus? {
        self as? DBXTeamLogEventTypeArgGuestAdminChangeStatus
    }

    @objc
    public var asStartedEnterpriseAdminSession: DBXTeamLogEventTypeArgStartedEnterpriseAdminSession? {
        self as? DBXTeamLogEventTypeArgStartedEnterpriseAdminSession
    }

    @objc
    public var asTeamMergeRequestAccepted: DBXTeamLogEventTypeArgTeamMergeRequestAccepted? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestAccepted
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestAcceptedShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestAutoCanceled: DBXTeamLogEventTypeArgTeamMergeRequestAutoCanceled? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestAutoCanceled
    }

    @objc
    public var asTeamMergeRequestCanceled: DBXTeamLogEventTypeArgTeamMergeRequestCanceled? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestCanceled
    }

    @objc
    public var asTeamMergeRequestCanceledShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestCanceledShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestExpired: DBXTeamLogEventTypeArgTeamMergeRequestExpired? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestExpired
    }

    @objc
    public var asTeamMergeRequestExpiredShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestExpiredShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestRejectedShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestRejectedShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestReminder: DBXTeamLogEventTypeArgTeamMergeRequestReminder? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestReminder
    }

    @objc
    public var asTeamMergeRequestReminderShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestReminderShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToSecondaryTeam
    }

    @objc
    public var asTeamMergeRequestRevoked: DBXTeamLogEventTypeArgTeamMergeRequestRevoked? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestRevoked
    }

    @objc
    public var asTeamMergeRequestSentShownToPrimaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestSentShownToPrimaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestSentShownToPrimaryTeam
    }

    @objc
    public var asTeamMergeRequestSentShownToSecondaryTeam: DBXTeamLogEventTypeArgTeamMergeRequestSentShownToSecondaryTeam? {
        self as? DBXTeamLogEventTypeArgTeamMergeRequestSentShownToSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogEventTypeArgOther? {
        self as? DBXTeamLogEventTypeArgOther
    }
}

/// (admin_alerting) Changed an alert state
@objc
public class DBXTeamLogEventTypeArgAdminAlertingAlertStateChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.adminAlertingAlertStateChanged
        super.init(swift: swift)
    }
}

/// (admin_alerting) Changed an alert setting
@objc
public class DBXTeamLogEventTypeArgAdminAlertingChangedAlertConfig: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.adminAlertingChangedAlertConfig
        super.init(swift: swift)
    }
}

/// (admin_alerting) Triggered security alert
@objc
public class DBXTeamLogEventTypeArgAdminAlertingTriggeredAlert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.adminAlertingTriggeredAlert
        super.init(swift: swift)
    }
}

/// (admin_alerting) Completed ransomware restore process
@objc
public class DBXTeamLogEventTypeArgRansomwareRestoreProcessCompleted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ransomwareRestoreProcessCompleted
        super.init(swift: swift)
    }
}

/// (admin_alerting) Started ransomware restore process
@objc
public class DBXTeamLogEventTypeArgRansomwareRestoreProcessStarted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ransomwareRestoreProcessStarted
        super.init(swift: swift)
    }
}

/// (apps) Failed to connect app for member
@objc
public class DBXTeamLogEventTypeArgAppBlockedByPermissions: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appBlockedByPermissions
        super.init(swift: swift)
    }
}

/// (apps) Linked app for team
@objc
public class DBXTeamLogEventTypeArgAppLinkTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appLinkTeam
        super.init(swift: swift)
    }
}

/// (apps) Linked app for member
@objc
public class DBXTeamLogEventTypeArgAppLinkUser: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appLinkUser
        super.init(swift: swift)
    }
}

/// (apps) Unlinked app for team
@objc
public class DBXTeamLogEventTypeArgAppUnlinkTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appUnlinkTeam
        super.init(swift: swift)
    }
}

/// (apps) Unlinked app for member
@objc
public class DBXTeamLogEventTypeArgAppUnlinkUser: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appUnlinkUser
        super.init(swift: swift)
    }
}

/// (apps) Connected integration for member
@objc
public class DBXTeamLogEventTypeArgIntegrationConnected: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.integrationConnected
        super.init(swift: swift)
    }
}

/// (apps) Disconnected integration for member
@objc
public class DBXTeamLogEventTypeArgIntegrationDisconnected: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.integrationDisconnected
        super.init(swift: swift)
    }
}

/// (comments) Added file comment
@objc
public class DBXTeamLogEventTypeArgFileAddComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileAddComment
        super.init(swift: swift)
    }
}

/// (comments) Subscribed to or unsubscribed from comment notifications for file
@objc
public class DBXTeamLogEventTypeArgFileChangeCommentSubscription: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileChangeCommentSubscription
        super.init(swift: swift)
    }
}

/// (comments) Deleted file comment
@objc
public class DBXTeamLogEventTypeArgFileDeleteComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileDeleteComment
        super.init(swift: swift)
    }
}

/// (comments) Edited file comment
@objc
public class DBXTeamLogEventTypeArgFileEditComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileEditComment
        super.init(swift: swift)
    }
}

/// (comments) Liked file comment (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgFileLikeComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileLikeComment
        super.init(swift: swift)
    }
}

/// (comments) Resolved file comment
@objc
public class DBXTeamLogEventTypeArgFileResolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileResolveComment
        super.init(swift: swift)
    }
}

/// (comments) Unliked file comment (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgFileUnlikeComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileUnlikeComment
        super.init(swift: swift)
    }
}

/// (comments) Unresolved file comment
@objc
public class DBXTeamLogEventTypeArgFileUnresolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileUnresolveComment
        super.init(swift: swift)
    }
}

/// (data_governance) Added folders to policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyAddFolders: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyAddFolders
        super.init(swift: swift)
    }
}

/// (data_governance) Couldn't add a folder to a policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyAddFolderFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyAddFolderFailed
        super.init(swift: swift)
    }
}

/// (data_governance) Content disposed
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyContentDisposed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyContentDisposed
        super.init(swift: swift)
    }
}

/// (data_governance) Activated a new policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyCreate
        super.init(swift: swift)
    }
}

/// (data_governance) Deleted a policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyDelete
        super.init(swift: swift)
    }
}

/// (data_governance) Edited policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyEditDetails: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyEditDetails
        super.init(swift: swift)
    }
}

/// (data_governance) Changed policy duration
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyEditDuration: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyEditDuration
        super.init(swift: swift)
    }
}

/// (data_governance) Created a policy download
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyExportCreated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyExportCreated
        super.init(swift: swift)
    }
}

/// (data_governance) Removed a policy download
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyExportRemoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyExportRemoved
        super.init(swift: swift)
    }
}

/// (data_governance) Removed folders from policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyRemoveFolders: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyRemoveFolders
        super.init(swift: swift)
    }
}

/// (data_governance) Created a summary report for a policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyReportCreated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyReportCreated
        super.init(swift: swift)
    }
}

/// (data_governance) Downloaded content from a policy
@objc
public class DBXTeamLogEventTypeArgGovernancePolicyZipPartDownloaded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.governancePolicyZipPartDownloaded
        super.init(swift: swift)
    }
}

/// (data_governance) Activated a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsActivateAHold: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsActivateAHold
        super.init(swift: swift)
    }
}

/// (data_governance) Added members to a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsAddMembers: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsAddMembers
        super.init(swift: swift)
    }
}

/// (data_governance) Edited details for a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsChangeHoldDetails: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsChangeHoldDetails
        super.init(swift: swift)
    }
}

/// (data_governance) Renamed a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsChangeHoldName: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsChangeHoldName
        super.init(swift: swift)
    }
}

/// (data_governance) Exported hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsExportAHold: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsExportAHold
        super.init(swift: swift)
    }
}

/// (data_governance) Canceled export for a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsExportCancelled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsExportCancelled
        super.init(swift: swift)
    }
}

/// (data_governance) Downloaded export for a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsExportDownloaded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsExportDownloaded
        super.init(swift: swift)
    }
}

/// (data_governance) Removed export for a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsExportRemoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsExportRemoved
        super.init(swift: swift)
    }
}

/// (data_governance) Released a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsReleaseAHold: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsReleaseAHold
        super.init(swift: swift)
    }
}

/// (data_governance) Removed members from a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsRemoveMembers: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsRemoveMembers
        super.init(swift: swift)
    }
}

/// (data_governance) Created a summary report for a hold
@objc
public class DBXTeamLogEventTypeArgLegalHoldsReportAHold: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.legalHoldsReportAHold
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active desktop session
@objc
public class DBXTeamLogEventTypeArgDeviceChangeIpDesktop: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceChangeIpDesktop
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active mobile session
@objc
public class DBXTeamLogEventTypeArgDeviceChangeIpMobile: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceChangeIpMobile
        super.init(swift: swift)
    }
}

/// (devices) Changed IP address associated with active web session
@objc
public class DBXTeamLogEventTypeArgDeviceChangeIpWeb: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceChangeIpWeb
        super.init(swift: swift)
    }
}

/// (devices) Failed to delete all files from unlinked device
@objc
public class DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceDeleteOnUnlinkFail
        super.init(swift: swift)
    }
}

/// (devices) Deleted all files from unlinked device
@objc
public class DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkSuccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceDeleteOnUnlinkSuccess
        super.init(swift: swift)
    }
}

/// (devices) Failed to link device
@objc
public class DBXTeamLogEventTypeArgDeviceLinkFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceLinkFail
        super.init(swift: swift)
    }
}

/// (devices) Linked device
@objc
public class DBXTeamLogEventTypeArgDeviceLinkSuccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceLinkSuccess
        super.init(swift: swift)
    }
}

/// (devices) Disabled device management (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDeviceManagementDisabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceManagementDisabled
        super.init(swift: swift)
    }
}

/// (devices) Enabled device management (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDeviceManagementEnabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceManagementEnabled
        super.init(swift: swift)
    }
}

/// (devices) Enabled/disabled backup for computer
@objc
public class DBXTeamLogEventTypeArgDeviceSyncBackupStatusChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceSyncBackupStatusChanged
        super.init(swift: swift)
    }
}

/// (devices) Disconnected device
@objc
public class DBXTeamLogEventTypeArgDeviceUnlink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceUnlink
        super.init(swift: swift)
    }
}

/// (devices) Exported passwords
@objc
public class DBXTeamLogEventTypeArgDropboxPasswordsExported: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dropboxPasswordsExported
        super.init(swift: swift)
    }
}

/// (devices) Enrolled new Dropbox Passwords device
@objc
public class DBXTeamLogEventTypeArgDropboxPasswordsNewDeviceEnrolled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dropboxPasswordsNewDeviceEnrolled
        super.init(swift: swift)
    }
}

/// (devices) Refreshed auth token used for setting up EMM
@objc
public class DBXTeamLogEventTypeArgEmmRefreshAuthToken: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmRefreshAuthToken
        super.init(swift: swift)
    }
}

/// (devices) Checked external drive backup eligibility status
@objc
public class DBXTeamLogEventTypeArgExternalDriveBackupEligibilityStatusChecked: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.externalDriveBackupEligibilityStatusChecked
        super.init(swift: swift)
    }
}

/// (devices) Modified external drive backup
@objc
public class DBXTeamLogEventTypeArgExternalDriveBackupStatusChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.externalDriveBackupStatusChanged
        super.init(swift: swift)
    }
}

/// (domains) Granted/revoked option to enable account capture on team domains
@objc
public class DBXTeamLogEventTypeArgAccountCaptureChangeAvailability: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountCaptureChangeAvailability
        super.init(swift: swift)
    }
}

/// (domains) Account-captured user migrated account to team
@objc
public class DBXTeamLogEventTypeArgAccountCaptureMigrateAccount: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountCaptureMigrateAccount
        super.init(swift: swift)
    }
}

/// (domains) Sent account capture email to all unmanaged members
@objc
public class DBXTeamLogEventTypeArgAccountCaptureNotificationEmailsSent: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountCaptureNotificationEmailsSent
        super.init(swift: swift)
    }
}

/// (domains) Account-captured user changed account email to personal email
@objc
public class DBXTeamLogEventTypeArgAccountCaptureRelinquishAccount: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountCaptureRelinquishAccount
        super.init(swift: swift)
    }
}

/// (domains) Disabled domain invites (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDisabledDomainInvites: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.disabledDomainInvites
        super.init(swift: swift)
    }
}

/// (domains) Approved user's request to join team
@objc
public class DBXTeamLogEventTypeArgDomainInvitesApproveRequestToJoinTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesApproveRequestToJoinTeam
        super.init(swift: swift)
    }
}

/// (domains) Declined user's request to join team
@objc
public class DBXTeamLogEventTypeArgDomainInvitesDeclineRequestToJoinTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesDeclineRequestToJoinTeam
        super.init(swift: swift)
    }
}

/// (domains) Sent domain invites to existing domain accounts (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDomainInvitesEmailExistingUsers: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesEmailExistingUsers
        super.init(swift: swift)
    }
}

/// (domains) Requested to join team
@objc
public class DBXTeamLogEventTypeArgDomainInvitesRequestToJoinTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesRequestToJoinTeam
        super.init(swift: swift)
    }
}

/// (domains) Disabled "Automatically invite new users" (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToNo: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesSetInviteNewUserPrefToNo
        super.init(swift: swift)
    }
}

/// (domains) Enabled "Automatically invite new users" (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToYes: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainInvitesSetInviteNewUserPrefToYes
        super.init(swift: swift)
    }
}

/// (domains) Failed to verify team domain
@objc
public class DBXTeamLogEventTypeArgDomainVerificationAddDomainFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainVerificationAddDomainFail
        super.init(swift: swift)
    }
}

/// (domains) Verified team domain
@objc
public class DBXTeamLogEventTypeArgDomainVerificationAddDomainSuccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainVerificationAddDomainSuccess
        super.init(swift: swift)
    }
}

/// (domains) Removed domain from list of verified team domains
@objc
public class DBXTeamLogEventTypeArgDomainVerificationRemoveDomain: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.domainVerificationRemoveDomain
        super.init(swift: swift)
    }
}

/// (domains) Enabled domain invites (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgEnabledDomainInvites: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.enabledDomainInvites
        super.init(swift: swift)
    }
}

/// (encryption) Canceled team encryption key deletion
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyCancelKeyDeletion: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyCancelKeyDeletion
        super.init(swift: swift)
    }
}

/// (encryption) Created team encryption key
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyCreateKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyCreateKey
        super.init(swift: swift)
    }
}

/// (encryption) Deleted team encryption key
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyDeleteKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyDeleteKey
        super.init(swift: swift)
    }
}

/// (encryption) Disabled team encryption key
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyDisableKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyDisableKey
        super.init(swift: swift)
    }
}

/// (encryption) Enabled team encryption key
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyEnableKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyEnableKey
        super.init(swift: swift)
    }
}

/// (encryption) Rotated team encryption key (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyRotateKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyRotateKey
        super.init(swift: swift)
    }
}

/// (encryption) Scheduled encryption key deletion
@objc
public class DBXTeamLogEventTypeArgTeamEncryptionKeyScheduleKeyDeletion: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamEncryptionKeyScheduleKeyDeletion
        super.init(swift: swift)
    }
}

/// (file_operations) Applied naming convention
@objc
public class DBXTeamLogEventTypeArgApplyNamingConvention: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.applyNamingConvention
        super.init(swift: swift)
    }
}

/// (file_operations) Created folders (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgCreateFolder: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.createFolder
        super.init(swift: swift)
    }
}

/// (file_operations) Added files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileAdd: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileAdd
        super.init(swift: swift)
    }
}

/// (file_operations) Added files and/or folders from automation
@objc
public class DBXTeamLogEventTypeArgFileAddFromAutomation: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileAddFromAutomation
        super.init(swift: swift)
    }
}

/// (file_operations) Copied files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileCopy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileCopy
        super.init(swift: swift)
    }
}

/// (file_operations) Deleted files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileDelete
        super.init(swift: swift)
    }
}

/// (file_operations) Downloaded files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileDownload
        super.init(swift: swift)
    }
}

/// (file_operations) Edited files
@objc
public class DBXTeamLogEventTypeArgFileEdit: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileEdit
        super.init(swift: swift)
    }
}

/// (file_operations) Created copy reference to file/folder
@objc
public class DBXTeamLogEventTypeArgFileGetCopyReference: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileGetCopyReference
        super.init(swift: swift)
    }
}

/// (file_operations) Locked/unlocked editing for a file
@objc
public class DBXTeamLogEventTypeArgFileLockingLockStatusChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileLockingLockStatusChanged
        super.init(swift: swift)
    }
}

/// (file_operations) Moved files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileMove: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileMove
        super.init(swift: swift)
    }
}

/// (file_operations) Permanently deleted files and/or folders
@objc
public class DBXTeamLogEventTypeArgFilePermanentlyDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.filePermanentlyDelete
        super.init(swift: swift)
    }
}

/// (file_operations) Previewed files and/or folders
@objc
public class DBXTeamLogEventTypeArgFilePreview: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.filePreview
        super.init(swift: swift)
    }
}

/// (file_operations) Renamed files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileRename: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRename
        super.init(swift: swift)
    }
}

/// (file_operations) Restored deleted files and/or folders
@objc
public class DBXTeamLogEventTypeArgFileRestore: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRestore
        super.init(swift: swift)
    }
}

/// (file_operations) Reverted files to previous version
@objc
public class DBXTeamLogEventTypeArgFileRevert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRevert
        super.init(swift: swift)
    }
}

/// (file_operations) Rolled back file actions
@objc
public class DBXTeamLogEventTypeArgFileRollbackChanges: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRollbackChanges
        super.init(swift: swift)
    }
}

/// (file_operations) Saved file/folder using copy reference
@objc
public class DBXTeamLogEventTypeArgFileSaveCopyReference: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileSaveCopyReference
        super.init(swift: swift)
    }
}

/// (file_operations) Updated folder overview
@objc
public class DBXTeamLogEventTypeArgFolderOverviewDescriptionChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.folderOverviewDescriptionChanged
        super.init(swift: swift)
    }
}

/// (file_operations) Pinned item to folder overview
@objc
public class DBXTeamLogEventTypeArgFolderOverviewItemPinned: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.folderOverviewItemPinned
        super.init(swift: swift)
    }
}

/// (file_operations) Unpinned item from folder overview
@objc
public class DBXTeamLogEventTypeArgFolderOverviewItemUnpinned: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.folderOverviewItemUnpinned
        super.init(swift: swift)
    }
}

/// (file_operations) Added a label
@objc
public class DBXTeamLogEventTypeArgObjectLabelAdded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.objectLabelAdded
        super.init(swift: swift)
    }
}

/// (file_operations) Removed a label
@objc
public class DBXTeamLogEventTypeArgObjectLabelRemoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.objectLabelRemoved
        super.init(swift: swift)
    }
}

/// (file_operations) Updated a label's value
@objc
public class DBXTeamLogEventTypeArgObjectLabelUpdatedValue: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.objectLabelUpdatedValue
        super.init(swift: swift)
    }
}

/// (file_operations) Organized a folder with multi-file organize
@objc
public class DBXTeamLogEventTypeArgOrganizeFolderWithTidy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.organizeFolderWithTidy
        super.init(swift: swift)
    }
}

/// (file_operations) Deleted files in Replay
@objc
public class DBXTeamLogEventTypeArgReplayFileDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.replayFileDelete
        super.init(swift: swift)
    }
}

/// (file_operations) Rewound a folder
@objc
public class DBXTeamLogEventTypeArgRewindFolder: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.rewindFolder
        super.init(swift: swift)
    }
}

/// (file_operations) Reverted naming convention
@objc
public class DBXTeamLogEventTypeArgUndoNamingConvention: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.undoNamingConvention
        super.init(swift: swift)
    }
}

/// (file_operations) Removed multi-file organize
@objc
public class DBXTeamLogEventTypeArgUndoOrganizeFolderWithTidy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.undoOrganizeFolderWithTidy
        super.init(swift: swift)
    }
}

/// (file_operations) Tagged a file
@objc
public class DBXTeamLogEventTypeArgUserTagsAdded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.userTagsAdded
        super.init(swift: swift)
    }
}

/// (file_operations) Removed tags
@objc
public class DBXTeamLogEventTypeArgUserTagsRemoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.userTagsRemoved
        super.init(swift: swift)
    }
}

/// (file_requests) Received files via Email to Dropbox
@objc
public class DBXTeamLogEventTypeArgEmailIngestReceiveFile: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emailIngestReceiveFile
        super.init(swift: swift)
    }
}

/// (file_requests) Changed file request
@objc
public class DBXTeamLogEventTypeArgFileRequestChange: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestChange
        super.init(swift: swift)
    }
}

/// (file_requests) Closed file request
@objc
public class DBXTeamLogEventTypeArgFileRequestClose: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestClose
        super.init(swift: swift)
    }
}

/// (file_requests) Created file request
@objc
public class DBXTeamLogEventTypeArgFileRequestCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestCreate
        super.init(swift: swift)
    }
}

/// (file_requests) Delete file request
@objc
public class DBXTeamLogEventTypeArgFileRequestDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestDelete
        super.init(swift: swift)
    }
}

/// (file_requests) Received files for file request
@objc
public class DBXTeamLogEventTypeArgFileRequestReceiveFile: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestReceiveFile
        super.init(swift: swift)
    }
}

/// (groups) Added external ID for group
@objc
public class DBXTeamLogEventTypeArgGroupAddExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupAddExternalId
        super.init(swift: swift)
    }
}

/// (groups) Added team members to group
@objc
public class DBXTeamLogEventTypeArgGroupAddMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupAddMember
        super.init(swift: swift)
    }
}

/// (groups) Changed external ID for group
@objc
public class DBXTeamLogEventTypeArgGroupChangeExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupChangeExternalId
        super.init(swift: swift)
    }
}

/// (groups) Changed group management type
@objc
public class DBXTeamLogEventTypeArgGroupChangeManagementType: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupChangeManagementType
        super.init(swift: swift)
    }
}

/// (groups) Changed manager permissions of group member
@objc
public class DBXTeamLogEventTypeArgGroupChangeMemberRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupChangeMemberRole
        super.init(swift: swift)
    }
}

/// (groups) Created group
@objc
public class DBXTeamLogEventTypeArgGroupCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupCreate
        super.init(swift: swift)
    }
}

/// (groups) Deleted group
@objc
public class DBXTeamLogEventTypeArgGroupDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupDelete
        super.init(swift: swift)
    }
}

/// (groups) Updated group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgGroupDescriptionUpdated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupDescriptionUpdated
        super.init(swift: swift)
    }
}

/// (groups) Updated group join policy (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgGroupJoinPolicyUpdated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupJoinPolicyUpdated
        super.init(swift: swift)
    }
}

/// (groups) Moved group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgGroupMoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupMoved
        super.init(swift: swift)
    }
}

/// (groups) Removed external ID for group
@objc
public class DBXTeamLogEventTypeArgGroupRemoveExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupRemoveExternalId
        super.init(swift: swift)
    }
}

/// (groups) Removed team members from group
@objc
public class DBXTeamLogEventTypeArgGroupRemoveMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupRemoveMember
        super.init(swift: swift)
    }
}

/// (groups) Renamed group
@objc
public class DBXTeamLogEventTypeArgGroupRename: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupRename
        super.init(swift: swift)
    }
}

/// (logins) Unlocked/locked account after failed sign in attempts
@objc
public class DBXTeamLogEventTypeArgAccountLockOrUnlocked: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountLockOrUnlocked
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign in')
@objc
public class DBXTeamLogEventTypeArgEmmError: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmError
        super.init(swift: swift)
    }
}

/// (logins) Started trusted team admin session
@objc
public class DBXTeamLogEventTypeArgGuestAdminSignedInViaTrustedTeams: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.guestAdminSignedInViaTrustedTeams
        super.init(swift: swift)
    }
}

/// (logins) Ended trusted team admin session
@objc
public class DBXTeamLogEventTypeArgGuestAdminSignedOutViaTrustedTeams: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.guestAdminSignedOutViaTrustedTeams
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in
@objc
public class DBXTeamLogEventTypeArgLoginFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.loginFail
        super.init(swift: swift)
    }
}

/// (logins) Signed in
@objc
public class DBXTeamLogEventTypeArgLoginSuccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.loginSuccess
        super.init(swift: swift)
    }
}

/// (logins) Signed out
@objc
public class DBXTeamLogEventTypeArgLogout: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.logout
        super.init(swift: swift)
    }
}

/// (logins) Ended reseller support session
@objc
public class DBXTeamLogEventTypeArgResellerSupportSessionEnd: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.resellerSupportSessionEnd
        super.init(swift: swift)
    }
}

/// (logins) Started reseller support session
@objc
public class DBXTeamLogEventTypeArgResellerSupportSessionStart: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.resellerSupportSessionStart
        super.init(swift: swift)
    }
}

/// (logins) Ended admin sign-in-as session
@objc
public class DBXTeamLogEventTypeArgSignInAsSessionEnd: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.signInAsSessionEnd
        super.init(swift: swift)
    }
}

/// (logins) Started admin sign-in-as session
@objc
public class DBXTeamLogEventTypeArgSignInAsSessionStart: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.signInAsSessionStart
        super.init(swift: swift)
    }
}

/// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign in')
@objc
public class DBXTeamLogEventTypeArgSsoError: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoError
        super.init(swift: swift)
    }
}

/// (members) Invited members to activate Backup
@objc
public class DBXTeamLogEventTypeArgBackupAdminInvitationSent: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.backupAdminInvitationSent
        super.init(swift: swift)
    }
}

/// (members) Opened Backup invite
@objc
public class DBXTeamLogEventTypeArgBackupInvitationOpened: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.backupInvitationOpened
        super.init(swift: swift)
    }
}

/// (members) Created team invite link
@objc
public class DBXTeamLogEventTypeArgCreateTeamInviteLink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.createTeamInviteLink
        super.init(swift: swift)
    }
}

/// (members) Deleted team invite link
@objc
public class DBXTeamLogEventTypeArgDeleteTeamInviteLink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deleteTeamInviteLink
        super.init(swift: swift)
    }
}

/// (members) Added an external ID for team member
@objc
public class DBXTeamLogEventTypeArgMemberAddExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberAddExternalId
        super.init(swift: swift)
    }
}

/// (members) Added team member name
@objc
public class DBXTeamLogEventTypeArgMemberAddName: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberAddName
        super.init(swift: swift)
    }
}

/// (members) Changed team member admin role
@objc
public class DBXTeamLogEventTypeArgMemberChangeAdminRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeAdminRole
        super.init(swift: swift)
    }
}

/// (members) Changed team member email
@objc
public class DBXTeamLogEventTypeArgMemberChangeEmail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeEmail
        super.init(swift: swift)
    }
}

/// (members) Changed the external ID for team member
@objc
public class DBXTeamLogEventTypeArgMemberChangeExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeExternalId
        super.init(swift: swift)
    }
}

/// (members) Changed membership type (limited/full) of member (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgMemberChangeMembershipType: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeMembershipType
        super.init(swift: swift)
    }
}

/// (members) Changed team member name
@objc
public class DBXTeamLogEventTypeArgMemberChangeName: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeName
        super.init(swift: swift)
    }
}

/// (members) Changed team member reseller role
@objc
public class DBXTeamLogEventTypeArgMemberChangeResellerRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeResellerRole
        super.init(swift: swift)
    }
}

/// (members) Changed member status (invited, joined, suspended, etc.)
@objc
public class DBXTeamLogEventTypeArgMemberChangeStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberChangeStatus
        super.init(swift: swift)
    }
}

/// (members) Cleared manually added contacts
@objc
public class DBXTeamLogEventTypeArgMemberDeleteManualContacts: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberDeleteManualContacts
        super.init(swift: swift)
    }
}

/// (members) Deleted team member profile photo
@objc
public class DBXTeamLogEventTypeArgMemberDeleteProfilePhoto: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberDeleteProfilePhoto
        super.init(swift: swift)
    }
}

/// (members) Permanently deleted contents of deleted team member account
@objc
public class DBXTeamLogEventTypeArgMemberPermanentlyDeleteAccountContents: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberPermanentlyDeleteAccountContents
        super.init(swift: swift)
    }
}

/// (members) Removed the external ID for team member
@objc
public class DBXTeamLogEventTypeArgMemberRemoveExternalId: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberRemoveExternalId
        super.init(swift: swift)
    }
}

/// (members) Set team member profile photo
@objc
public class DBXTeamLogEventTypeArgMemberSetProfilePhoto: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSetProfilePhoto
        super.init(swift: swift)
    }
}

/// (members) Set custom member space limit
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsAddCustomQuota: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsAddCustomQuota
        super.init(swift: swift)
    }
}

/// (members) Changed custom member space limit
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCustomQuota: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsChangeCustomQuota
        super.init(swift: swift)
    }
}

/// (members) Changed space limit status
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsChangeStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsChangeStatus
        super.init(swift: swift)
    }
}

/// (members) Removed custom member space limit
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveCustomQuota: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsRemoveCustomQuota
        super.init(swift: swift)
    }
}

/// (members) Suggested person to add to team
@objc
public class DBXTeamLogEventTypeArgMemberSuggest: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSuggest
        super.init(swift: swift)
    }
}

/// (members) Transferred contents of deleted member account to another member
@objc
public class DBXTeamLogEventTypeArgMemberTransferAccountContents: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberTransferAccountContents
        super.init(swift: swift)
    }
}

/// (members) Added pending secondary email
@objc
public class DBXTeamLogEventTypeArgPendingSecondaryEmailAdded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.pendingSecondaryEmailAdded
        super.init(swift: swift)
    }
}

/// (members) Deleted secondary email
@objc
public class DBXTeamLogEventTypeArgSecondaryEmailDeleted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.secondaryEmailDeleted
        super.init(swift: swift)
    }
}

/// (members) Verified secondary email
@objc
public class DBXTeamLogEventTypeArgSecondaryEmailVerified: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.secondaryEmailVerified
        super.init(swift: swift)
    }
}

/// (members) Secondary mails policy changed
@objc
public class DBXTeamLogEventTypeArgSecondaryMailsPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.secondaryMailsPolicyChanged
        super.init(swift: swift)
    }
}

/// (paper) Added Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderAddPage: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderAddPage
        super.init(swift: swift)
    }
}

/// (paper) Added Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderAddSection: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderAddSection
        super.init(swift: swift)
    }
}

/// (paper) Removed Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderRemovePage: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderRemovePage
        super.init(swift: swift)
    }
}

/// (paper) Removed Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderRemoveSection: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderRemoveSection
        super.init(swift: swift)
    }
}

/// (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderRenamePage: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderRenamePage
        super.init(swift: swift)
    }
}

/// (paper) Renamed Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderRenameSection: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderRenameSection
        super.init(swift: swift)
    }
}

/// (paper) Reordered Binder page (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderReorderPage: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderReorderPage
        super.init(swift: swift)
    }
}

/// (paper) Reordered Binder section (deprecated, replaced by 'Edited files')
@objc
public class DBXTeamLogEventTypeArgBinderReorderSection: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.binderReorderSection
        super.init(swift: swift)
    }
}

/// (paper) Added users and/or groups to Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentAddMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentAddMember
        super.init(swift: swift)
    }
}

/// (paper) Added Paper doc/folder to folder
@objc
public class DBXTeamLogEventTypeArgPaperContentAddToFolder: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentAddToFolder
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentArchive: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentArchive
        super.init(swift: swift)
    }
}

/// (paper) Created Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentCreate
        super.init(swift: swift)
    }
}

/// (paper) Permanently deleted Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentPermanentlyDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentPermanentlyDelete
        super.init(swift: swift)
    }
}

/// (paper) Removed Paper doc/folder from folder
@objc
public class DBXTeamLogEventTypeArgPaperContentRemoveFromFolder: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentRemoveFromFolder
        super.init(swift: swift)
    }
}

/// (paper) Removed users and/or groups from Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentRemoveMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentRemoveMember
        super.init(swift: swift)
    }
}

/// (paper) Renamed Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentRename: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentRename
        super.init(swift: swift)
    }
}

/// (paper) Restored archived Paper doc/folder
@objc
public class DBXTeamLogEventTypeArgPaperContentRestore: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperContentRestore
        super.init(swift: swift)
    }
}

/// (paper) Added Paper doc comment
@objc
public class DBXTeamLogEventTypeArgPaperDocAddComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocAddComment
        super.init(swift: swift)
    }
}

/// (paper) Changed member permissions for Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocChangeMemberRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocChangeMemberRole
        super.init(swift: swift)
    }
}

/// (paper) Changed sharing setting for Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocChangeSharingPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocChangeSharingPolicy
        super.init(swift: swift)
    }
}

/// (paper) Followed/unfollowed Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocChangeSubscription: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocChangeSubscription
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperDocDeleted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocDeleted
        super.init(swift: swift)
    }
}

/// (paper) Deleted Paper doc comment
@objc
public class DBXTeamLogEventTypeArgPaperDocDeleteComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocDeleteComment
        super.init(swift: swift)
    }
}

/// (paper) Downloaded Paper doc in specific format
@objc
public class DBXTeamLogEventTypeArgPaperDocDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocDownload
        super.init(swift: swift)
    }
}

/// (paper) Edited Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocEdit: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocEdit
        super.init(swift: swift)
    }
}

/// (paper) Edited Paper doc comment
@objc
public class DBXTeamLogEventTypeArgPaperDocEditComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocEditComment
        super.init(swift: swift)
    }
}

/// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
@objc
public class DBXTeamLogEventTypeArgPaperDocFollowed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocFollowed
        super.init(swift: swift)
    }
}

/// (paper) Mentioned user in Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocMention: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocMention
        super.init(swift: swift)
    }
}

/// (paper) Transferred ownership of Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocOwnershipChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocOwnershipChanged
        super.init(swift: swift)
    }
}

/// (paper) Requested access to Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocRequestAccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocRequestAccess
        super.init(swift: swift)
    }
}

/// (paper) Resolved Paper doc comment
@objc
public class DBXTeamLogEventTypeArgPaperDocResolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocResolveComment
        super.init(swift: swift)
    }
}

/// (paper) Restored Paper doc to previous version
@objc
public class DBXTeamLogEventTypeArgPaperDocRevert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocRevert
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper doc via Slack
@objc
public class DBXTeamLogEventTypeArgPaperDocSlackShare: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocSlackShare
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper doc with users and/or groups (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperDocTeamInvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocTeamInvite
        super.init(swift: swift)
    }
}

/// (paper) Deleted Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocTrashed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocTrashed
        super.init(swift: swift)
    }
}

/// (paper) Unresolved Paper doc comment
@objc
public class DBXTeamLogEventTypeArgPaperDocUnresolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocUnresolveComment
        super.init(swift: swift)
    }
}

/// (paper) Restored Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocUntrashed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocUntrashed
        super.init(swift: swift)
    }
}

/// (paper) Viewed Paper doc
@objc
public class DBXTeamLogEventTypeArgPaperDocView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDocView
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to anyone (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperExternalViewAllow: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperExternalViewAllow
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to default team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperExternalViewDefaultTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperExternalViewDefaultTeam
        super.init(swift: swift)
    }
}

/// (paper) Changed Paper external sharing setting to team-only (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperExternalViewForbid: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperExternalViewForbid
        super.init(swift: swift)
    }
}

/// (paper) Followed/unfollowed Paper folder
@objc
public class DBXTeamLogEventTypeArgPaperFolderChangeSubscription: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperFolderChangeSubscription
        super.init(swift: swift)
    }
}

/// (paper) Archived Paper folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperFolderDeleted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperFolderDeleted
        super.init(swift: swift)
    }
}

/// (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
@objc
public class DBXTeamLogEventTypeArgPaperFolderFollowed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperFolderFollowed
        super.init(swift: swift)
    }
}

/// (paper) Shared Paper folder with users and/or groups (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperFolderTeamInvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperFolderTeamInvite
        super.init(swift: swift)
    }
}

/// (paper) Changed permissions for published doc
@objc
public class DBXTeamLogEventTypeArgPaperPublishedLinkChangePermission: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperPublishedLinkChangePermission
        super.init(swift: swift)
    }
}

/// (paper) Published doc
@objc
public class DBXTeamLogEventTypeArgPaperPublishedLinkCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperPublishedLinkCreate
        super.init(swift: swift)
    }
}

/// (paper) Unpublished doc
@objc
public class DBXTeamLogEventTypeArgPaperPublishedLinkDisabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperPublishedLinkDisabled
        super.init(swift: swift)
    }
}

/// (paper) Viewed published doc
@objc
public class DBXTeamLogEventTypeArgPaperPublishedLinkView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperPublishedLinkView
        super.init(swift: swift)
    }
}

/// (passwords) Changed password
@objc
public class DBXTeamLogEventTypeArgPasswordChange: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.passwordChange
        super.init(swift: swift)
    }
}

/// (passwords) Reset password
@objc
public class DBXTeamLogEventTypeArgPasswordReset: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.passwordReset
        super.init(swift: swift)
    }
}

/// (passwords) Reset all team member passwords
@objc
public class DBXTeamLogEventTypeArgPasswordResetAll: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.passwordResetAll
        super.init(swift: swift)
    }
}

/// (reports) Created Classification report
@objc
public class DBXTeamLogEventTypeArgClassificationCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.classificationCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create Classification report
@objc
public class DBXTeamLogEventTypeArgClassificationCreateReportFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.classificationCreateReportFail
        super.init(swift: swift)
    }
}

/// (reports) Created EMM-excluded users report
@objc
public class DBXTeamLogEventTypeArgEmmCreateExceptionsReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmCreateExceptionsReport
        super.init(swift: swift)
    }
}

/// (reports) Created EMM mobile app usage report
@objc
public class DBXTeamLogEventTypeArgEmmCreateUsageReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmCreateUsageReport
        super.init(swift: swift)
    }
}

/// (reports) Created member data report
@objc
public class DBXTeamLogEventTypeArgExportMembersReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.exportMembersReport
        super.init(swift: swift)
    }
}

/// (reports) Failed to create members data report
@objc
public class DBXTeamLogEventTypeArgExportMembersReportFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.exportMembersReportFail
        super.init(swift: swift)
    }
}

/// (reports) Created External sharing report
@objc
public class DBXTeamLogEventTypeArgExternalSharingCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.externalSharingCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create External sharing report
@objc
public class DBXTeamLogEventTypeArgExternalSharingReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.externalSharingReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Report created: Links created with no expiration
@objc
public class DBXTeamLogEventTypeArgNoExpirationLinkGenCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noExpirationLinkGenCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Links created with no expiration
@objc
public class DBXTeamLogEventTypeArgNoExpirationLinkGenReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noExpirationLinkGenReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Report created: Links created without passwords
@objc
public class DBXTeamLogEventTypeArgNoPasswordLinkGenCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noPasswordLinkGenCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Links created without passwords
@objc
public class DBXTeamLogEventTypeArgNoPasswordLinkGenReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noPasswordLinkGenReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Report created: Views of links without passwords
@objc
public class DBXTeamLogEventTypeArgNoPasswordLinkViewCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noPasswordLinkViewCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Views of links without passwords
@objc
public class DBXTeamLogEventTypeArgNoPasswordLinkViewReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noPasswordLinkViewReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Report created: Views of old links
@objc
public class DBXTeamLogEventTypeArgOutdatedLinkViewCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.outdatedLinkViewCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't create report: Views of old links
@objc
public class DBXTeamLogEventTypeArgOutdatedLinkViewReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.outdatedLinkViewReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Exported all team Paper docs
@objc
public class DBXTeamLogEventTypeArgPaperAdminExportStart: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperAdminExportStart
        super.init(swift: swift)
    }
}

/// (reports) Created ransomware report
@objc
public class DBXTeamLogEventTypeArgRansomwareAlertCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ransomwareAlertCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't generate ransomware report
@objc
public class DBXTeamLogEventTypeArgRansomwareAlertCreateReportFailed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ransomwareAlertCreateReportFailed
        super.init(swift: swift)
    }
}

/// (reports) Created Smart Sync non-admin devices report
@objc
public class DBXTeamLogEventTypeArgSmartSyncCreateAdminPrivilegeReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.smartSyncCreateAdminPrivilegeReport
        super.init(swift: swift)
    }
}

/// (reports) Created team activity report
@objc
public class DBXTeamLogEventTypeArgTeamActivityCreateReport: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamActivityCreateReport
        super.init(swift: swift)
    }
}

/// (reports) Couldn't generate team activity report
@objc
public class DBXTeamLogEventTypeArgTeamActivityCreateReportFail: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamActivityCreateReportFail
        super.init(swift: swift)
    }
}

/// (sharing) Shared album
@objc
public class DBXTeamLogEventTypeArgCollectionShare: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.collectionShare
        super.init(swift: swift)
    }
}

/// (sharing) Transfer files added
@objc
public class DBXTeamLogEventTypeArgFileTransfersFileAdd: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersFileAdd
        super.init(swift: swift)
    }
}

/// (sharing) Deleted transfer
@objc
public class DBXTeamLogEventTypeArgFileTransfersTransferDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersTransferDelete
        super.init(swift: swift)
    }
}

/// (sharing) Transfer downloaded
@objc
public class DBXTeamLogEventTypeArgFileTransfersTransferDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersTransferDownload
        super.init(swift: swift)
    }
}

/// (sharing) Sent transfer
@objc
public class DBXTeamLogEventTypeArgFileTransfersTransferSend: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersTransferSend
        super.init(swift: swift)
    }
}

/// (sharing) Viewed transfer
@objc
public class DBXTeamLogEventTypeArgFileTransfersTransferView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersTransferView
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgNoteAclInviteOnly: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noteAclInviteOnly
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to link-accessible (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgNoteAclLink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noteAclLink
        super.init(swift: swift)
    }
}

/// (sharing) Changed Paper doc to link-accessible for team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgNoteAclTeamLink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noteAclTeamLink
        super.init(swift: swift)
    }
}

/// (sharing) Shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgNoteShared: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noteShared
        super.init(swift: swift)
    }
}

/// (sharing) Shared received Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgNoteShareReceive: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.noteShareReceive
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgOpenNoteShared: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.openNoteShared
        super.init(swift: swift)
    }
}

/// (sharing) Created shared link in Replay
@objc
public class DBXTeamLogEventTypeArgReplayFileSharedLinkCreated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.replayFileSharedLinkCreated
        super.init(swift: swift)
    }
}

/// (sharing) Modified shared link in Replay
@objc
public class DBXTeamLogEventTypeArgReplayFileSharedLinkModified: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.replayFileSharedLinkModified
        super.init(swift: swift)
    }
}

/// (sharing) Added member to Replay Project
@objc
public class DBXTeamLogEventTypeArgReplayProjectTeamAdd: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.replayProjectTeamAdd
        super.init(swift: swift)
    }
}

/// (sharing) Removed member from Replay Project
@objc
public class DBXTeamLogEventTypeArgReplayProjectTeamDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.replayProjectTeamDelete
        super.init(swift: swift)
    }
}

/// (sharing) Added team to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfAddGroup: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfAddGroup
        super.init(swift: swift)
    }
}

/// (sharing) Allowed non-collaborators to view links to files in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfAllowNonMembersToViewSharedLinks: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfAllowNonMembersToViewSharedLinks
        super.init(swift: swift)
    }
}

/// (sharing) Set team members to see warning before sharing folders outside team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfExternalInviteWarn: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfExternalInviteWarn
        super.init(swift: swift)
    }
}

/// (sharing) Invited Facebook users to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfFbInvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfFbInvite
        super.init(swift: swift)
    }
}

/// (sharing) Changed Facebook user's role in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfFbInviteChangeRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfFbInviteChangeRole
        super.init(swift: swift)
    }
}

/// (sharing) Uninvited Facebook user from shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfFbUninvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfFbUninvite
        super.init(swift: swift)
    }
}

/// (sharing) Invited group to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfInviteGroup: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfInviteGroup
        super.init(swift: swift)
    }
}

/// (sharing) Granted access to shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfTeamGrantAccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamGrantAccess
        super.init(swift: swift)
    }
}

/// (sharing) Invited team members to shared folder (deprecated, replaced by 'Invited user to Dropbox and added
/// them to shared file/folder')
@objc
public class DBXTeamLogEventTypeArgSfTeamInvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamInvite
        super.init(swift: swift)
    }
}

/// (sharing) Changed team member's role in shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfTeamInviteChangeRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamInviteChangeRole
        super.init(swift: swift)
    }
}

/// (sharing) Joined team member's shared folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfTeamJoin: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamJoin
        super.init(swift: swift)
    }
}

/// (sharing) Joined team member's shared folder from link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSfTeamJoinFromOobLink: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamJoinFromOobLink
        super.init(swift: swift)
    }
}

/// (sharing) Unshared folder with team member (deprecated, replaced by 'Removed invitee from shared file/folder
/// before invite was accepted')
@objc
public class DBXTeamLogEventTypeArgSfTeamUninvite: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sfTeamUninvite
        super.init(swift: swift)
    }
}

/// (sharing) Invited user to Dropbox and added them to shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentAddInvitees: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentAddInvitees
        super.init(swift: swift)
    }
}

/// (sharing) Added expiration date to link for shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentAddLinkExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentAddLinkExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Added password to link for shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentAddLinkPassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentAddLinkPassword
        super.init(swift: swift)
    }
}

/// (sharing) Added users and/or groups to shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentAddMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentAddMember
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether members can download shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeDownloadsPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeDownloadsPolicy
        super.init(swift: swift)
    }
}

/// (sharing) Changed access type of invitee to shared file/folder before invite was accepted
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeInviteeRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeInviteeRole
        super.init(swift: swift)
    }
}

/// (sharing) Changed link audience of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeLinkAudience: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeLinkAudience
        super.init(swift: swift)
    }
}

/// (sharing) Changed link expiration of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeLinkExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeLinkExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Changed link password of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeLinkPassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeLinkPassword
        super.init(swift: swift)
    }
}

/// (sharing) Changed access type of shared file/folder member
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeMemberRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeMemberRole
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether members can see who viewed shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentChangeViewerInfoPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentChangeViewerInfoPolicy
        super.init(swift: swift)
    }
}

/// (sharing) Acquired membership of shared file/folder by accepting invite
@objc
public class DBXTeamLogEventTypeArgSharedContentClaimInvitation: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentClaimInvitation
        super.init(swift: swift)
    }
}

/// (sharing) Copied shared file/folder to own Dropbox
@objc
public class DBXTeamLogEventTypeArgSharedContentCopy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentCopy
        super.init(swift: swift)
    }
}

/// (sharing) Downloaded shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentDownload
        super.init(swift: swift)
    }
}

/// (sharing) Left shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentRelinquishMembership: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRelinquishMembership
        super.init(swift: swift)
    }
}

/// (sharing) Removed invitee from shared file/folder before invite was accepted
@objc
public class DBXTeamLogEventTypeArgSharedContentRemoveInvitees: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRemoveInvitees
        super.init(swift: swift)
    }
}

/// (sharing) Removed link expiration date of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentRemoveLinkExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRemoveLinkExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Removed link password of shared file/folder (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedContentRemoveLinkPassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRemoveLinkPassword
        super.init(swift: swift)
    }
}

/// (sharing) Removed user/group from shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentRemoveMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRemoveMember
        super.init(swift: swift)
    }
}

/// (sharing) Requested access to shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentRequestAccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRequestAccess
        super.init(swift: swift)
    }
}

/// (sharing) Restored shared file/folder invitees
@objc
public class DBXTeamLogEventTypeArgSharedContentRestoreInvitees: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRestoreInvitees
        super.init(swift: swift)
    }
}

/// (sharing) Restored users and/or groups to membership of shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentRestoreMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentRestoreMember
        super.init(swift: swift)
    }
}

/// (sharing) Unshared file/folder by clearing membership
@objc
public class DBXTeamLogEventTypeArgSharedContentUnshare: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentUnshare
        super.init(swift: swift)
    }
}

/// (sharing) Previewed shared file/folder
@objc
public class DBXTeamLogEventTypeArgSharedContentView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedContentView
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can access shared folder via link
@objc
public class DBXTeamLogEventTypeArgSharedFolderChangeLinkPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderChangeLinkPolicy
        super.init(swift: swift)
    }
}

/// (sharing) Changed whether shared folder inherits members from parent folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderChangeMembersInheritancePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderChangeMembersInheritancePolicy
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can add/remove members of shared folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderChangeMembersManagementPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderChangeMembersManagementPolicy
        super.init(swift: swift)
    }
}

/// (sharing) Changed who can become member of shared folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderChangeMembersPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderChangeMembersPolicy
        super.init(swift: swift)
    }
}

/// (sharing) Created shared folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderCreate
        super.init(swift: swift)
    }
}

/// (sharing) Declined team member's invite to shared folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderDeclineInvitation: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderDeclineInvitation
        super.init(swift: swift)
    }
}

/// (sharing) Added shared folder to own Dropbox
@objc
public class DBXTeamLogEventTypeArgSharedFolderMount: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderMount
        super.init(swift: swift)
    }
}

/// (sharing) Changed parent of shared folder
@objc
public class DBXTeamLogEventTypeArgSharedFolderNest: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderNest
        super.init(swift: swift)
    }
}

/// (sharing) Transferred ownership of shared folder to another member
@objc
public class DBXTeamLogEventTypeArgSharedFolderTransferOwnership: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderTransferOwnership
        super.init(swift: swift)
    }
}

/// (sharing) Deleted shared folder from Dropbox
@objc
public class DBXTeamLogEventTypeArgSharedFolderUnmount: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedFolderUnmount
        super.init(swift: swift)
    }
}

/// (sharing) Added shared link expiration date
@objc
public class DBXTeamLogEventTypeArgSharedLinkAddExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkAddExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Changed shared link expiration date
@objc
public class DBXTeamLogEventTypeArgSharedLinkChangeExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkChangeExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Changed visibility of shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkChangeVisibility: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkChangeVisibility
        super.init(swift: swift)
    }
}

/// (sharing) Added file/folder to Dropbox from shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkCopy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkCopy
        super.init(swift: swift)
    }
}

/// (sharing) Created shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkCreate
        super.init(swift: swift)
    }
}

/// (sharing) Removed shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkDisable: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkDisable
        super.init(swift: swift)
    }
}

/// (sharing) Downloaded file/folder from shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkDownload
        super.init(swift: swift)
    }
}

/// (sharing) Removed shared link expiration date
@objc
public class DBXTeamLogEventTypeArgSharedLinkRemoveExpiry: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkRemoveExpiry
        super.init(swift: swift)
    }
}

/// (sharing) Added an expiration date to the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsAddExpiration: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsAddExpiration
        super.init(swift: swift)
    }
}

/// (sharing) Added a password to the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsAddPassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsAddPassword
        super.init(swift: swift)
    }
}

/// (sharing) Disabled downloads
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadDisabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsAllowDownloadDisabled
        super.init(swift: swift)
    }
}

/// (sharing) Enabled downloads
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadEnabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsAllowDownloadEnabled
        super.init(swift: swift)
    }
}

/// (sharing) Changed the audience of the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsChangeAudience: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsChangeAudience
        super.init(swift: swift)
    }
}

/// (sharing) Changed the expiration date of the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsChangeExpiration: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsChangeExpiration
        super.init(swift: swift)
    }
}

/// (sharing) Changed the password of the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsChangePassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsChangePassword
        super.init(swift: swift)
    }
}

/// (sharing) Removed the expiration date from the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsRemoveExpiration: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsRemoveExpiration
        super.init(swift: swift)
    }
}

/// (sharing) Removed the password from the shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkSettingsRemovePassword: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkSettingsRemovePassword
        super.init(swift: swift)
    }
}

/// (sharing) Added members as audience of shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkShare: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkShare
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared link
@objc
public class DBXTeamLogEventTypeArgSharedLinkView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedLinkView
        super.init(swift: swift)
    }
}

/// (sharing) Opened shared Paper doc (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgSharedNoteOpened: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharedNoteOpened
        super.init(swift: swift)
    }
}

/// (sharing) Disabled downloads for link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgShmodelDisableDownloads: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.shmodelDisableDownloads
        super.init(swift: swift)
    }
}

/// (sharing) Enabled downloads for link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgShmodelEnableDownloads: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.shmodelEnableDownloads
        super.init(swift: swift)
    }
}

/// (sharing) Shared link with group (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgShmodelGroupShare: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.shmodelGroupShare
        super.init(swift: swift)
    }
}

/// (showcase) Granted access to showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseAccessGranted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseAccessGranted
        super.init(swift: swift)
    }
}

/// (showcase) Added member to showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseAddMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseAddMember
        super.init(swift: swift)
    }
}

/// (showcase) Archived showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseArchived: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseArchived
        super.init(swift: swift)
    }
}

/// (showcase) Created showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseCreated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseCreated
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase comment
@objc
public class DBXTeamLogEventTypeArgShowcaseDeleteComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseDeleteComment
        super.init(swift: swift)
    }
}

/// (showcase) Edited showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseEdited: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseEdited
        super.init(swift: swift)
    }
}

/// (showcase) Edited showcase comment
@objc
public class DBXTeamLogEventTypeArgShowcaseEditComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseEditComment
        super.init(swift: swift)
    }
}

/// (showcase) Added file to showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseFileAdded: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseFileAdded
        super.init(swift: swift)
    }
}

/// (showcase) Downloaded file from showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseFileDownload: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseFileDownload
        super.init(swift: swift)
    }
}

/// (showcase) Removed file from showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseFileRemoved: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseFileRemoved
        super.init(swift: swift)
    }
}

/// (showcase) Viewed file in showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseFileView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseFileView
        super.init(swift: swift)
    }
}

/// (showcase) Permanently deleted showcase
@objc
public class DBXTeamLogEventTypeArgShowcasePermanentlyDeleted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcasePermanentlyDeleted
        super.init(swift: swift)
    }
}

/// (showcase) Added showcase comment
@objc
public class DBXTeamLogEventTypeArgShowcasePostComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcasePostComment
        super.init(swift: swift)
    }
}

/// (showcase) Removed member from showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseRemoveMember: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseRemoveMember
        super.init(swift: swift)
    }
}

/// (showcase) Renamed showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseRenamed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseRenamed
        super.init(swift: swift)
    }
}

/// (showcase) Requested access to showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseRequestAccess: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseRequestAccess
        super.init(swift: swift)
    }
}

/// (showcase) Resolved showcase comment
@objc
public class DBXTeamLogEventTypeArgShowcaseResolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseResolveComment
        super.init(swift: swift)
    }
}

/// (showcase) Unarchived showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseRestored: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseRestored
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseTrashed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseTrashed
        super.init(swift: swift)
    }
}

/// (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')
@objc
public class DBXTeamLogEventTypeArgShowcaseTrashedDeprecated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseTrashedDeprecated
        super.init(swift: swift)
    }
}

/// (showcase) Unresolved showcase comment
@objc
public class DBXTeamLogEventTypeArgShowcaseUnresolveComment: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseUnresolveComment
        super.init(swift: swift)
    }
}

/// (showcase) Restored showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseUntrashed: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseUntrashed
        super.init(swift: swift)
    }
}

/// (showcase) Restored showcase (old version) (deprecated, replaced by 'Restored showcase')
@objc
public class DBXTeamLogEventTypeArgShowcaseUntrashedDeprecated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseUntrashedDeprecated
        super.init(swift: swift)
    }
}

/// (showcase) Viewed showcase
@objc
public class DBXTeamLogEventTypeArgShowcaseView: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseView
        super.init(swift: swift)
    }
}

/// (sso) Added X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeArgSsoAddCert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoAddCert
        super.init(swift: swift)
    }
}

/// (sso) Added sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoAddLoginUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoAddLoginUrl
        super.init(swift: swift)
    }
}

/// (sso) Added sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoAddLogoutUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoAddLogoutUrl
        super.init(swift: swift)
    }
}

/// (sso) Changed X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeArgSsoChangeCert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoChangeCert
        super.init(swift: swift)
    }
}

/// (sso) Changed sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoChangeLoginUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoChangeLoginUrl
        super.init(swift: swift)
    }
}

/// (sso) Changed sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoChangeLogoutUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoChangeLogoutUrl
        super.init(swift: swift)
    }
}

/// (sso) Changed SAML identity mode for SSO
@objc
public class DBXTeamLogEventTypeArgSsoChangeSamlIdentityMode: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoChangeSamlIdentityMode
        super.init(swift: swift)
    }
}

/// (sso) Removed X.509 certificate for SSO
@objc
public class DBXTeamLogEventTypeArgSsoRemoveCert: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoRemoveCert
        super.init(swift: swift)
    }
}

/// (sso) Removed sign-in URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoRemoveLoginUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoRemoveLoginUrl
        super.init(swift: swift)
    }
}

/// (sso) Removed sign-out URL for SSO
@objc
public class DBXTeamLogEventTypeArgSsoRemoveLogoutUrl: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoRemoveLogoutUrl
        super.init(swift: swift)
    }
}

/// (team_folders) Changed archival status of team folder
@objc
public class DBXTeamLogEventTypeArgTeamFolderChangeStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamFolderChangeStatus
        super.init(swift: swift)
    }
}

/// (team_folders) Created team folder in active status
@objc
public class DBXTeamLogEventTypeArgTeamFolderCreate: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamFolderCreate
        super.init(swift: swift)
    }
}

/// (team_folders) Downgraded team folder to regular shared folder
@objc
public class DBXTeamLogEventTypeArgTeamFolderDowngrade: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamFolderDowngrade
        super.init(swift: swift)
    }
}

/// (team_folders) Permanently deleted archived team folder
@objc
public class DBXTeamLogEventTypeArgTeamFolderPermanentlyDelete: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamFolderPermanentlyDelete
        super.init(swift: swift)
    }
}

/// (team_folders) Renamed active/archived team folder
@objc
public class DBXTeamLogEventTypeArgTeamFolderRename: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamFolderRename
        super.init(swift: swift)
    }
}

/// (team_folders) Changed sync default
@objc
public class DBXTeamLogEventTypeArgTeamSelectiveSyncSettingsChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamSelectiveSyncSettingsChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed account capture setting on team domain
@objc
public class DBXTeamLogEventTypeArgAccountCaptureChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.accountCaptureChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed admin reminder settings for requests to join the team
@objc
public class DBXTeamLogEventTypeArgAdminEmailRemindersChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.adminEmailRemindersChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Disabled downloads (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgAllowDownloadDisabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.allowDownloadDisabled
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled downloads (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgAllowDownloadEnabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.allowDownloadEnabled
        super.init(swift: swift)
    }
}

/// (team_policies) Changed app permissions
@objc
public class DBXTeamLogEventTypeArgAppPermissionsChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.appPermissionsChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed camera uploads setting for team
@objc
public class DBXTeamLogEventTypeArgCameraUploadsPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.cameraUploadsPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Capture transcription policy for team
@objc
public class DBXTeamLogEventTypeArgCaptureTranscriptPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.captureTranscriptPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed classification policy for team
@objc
public class DBXTeamLogEventTypeArgClassificationChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.classificationChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed computer backup policy for team
@objc
public class DBXTeamLogEventTypeArgComputerBackupPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.computerBackupPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed content management setting
@objc
public class DBXTeamLogEventTypeArgContentAdministrationPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.contentAdministrationPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Set restrictions on data center locations where team data resides
@objc
public class DBXTeamLogEventTypeArgDataPlacementRestrictionChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dataPlacementRestrictionChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Completed restrictions on data center locations where team data resides
@objc
public class DBXTeamLogEventTypeArgDataPlacementRestrictionSatisfyPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dataPlacementRestrictionSatisfyPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to device approvals exception list
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsAddException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsAddException
        super.init(swift: swift)
    }
}

/// (team_policies) Set/removed limit on number of computers member can link to team Dropbox account
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsChangeDesktopPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsChangeDesktopPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Set/removed limit on number of mobile devices member can link to team Dropbox account
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsChangeMobilePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsChangeMobilePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed device approvals setting when member is over limit
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsChangeOverageAction: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsChangeOverageAction
        super.init(swift: swift)
    }
}

/// (team_policies) Changed device approvals setting when member unlinks approved device
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsChangeUnlinkAction: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsChangeUnlinkAction
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from device approvals exception list
@objc
public class DBXTeamLogEventTypeArgDeviceApprovalsRemoveException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.deviceApprovalsRemoveException
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to directory restrictions list
@objc
public class DBXTeamLogEventTypeArgDirectoryRestrictionsAddMembers: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.directoryRestrictionsAddMembers
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from directory restrictions list
@objc
public class DBXTeamLogEventTypeArgDirectoryRestrictionsRemoveMembers: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.directoryRestrictionsRemoveMembers
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Dropbox Passwords policy for team
@objc
public class DBXTeamLogEventTypeArgDropboxPasswordsPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dropboxPasswordsPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed email to Dropbox policy for team
@objc
public class DBXTeamLogEventTypeArgEmailIngestPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emailIngestPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to EMM exception list
@objc
public class DBXTeamLogEventTypeArgEmmAddException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmAddException
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled enterprise mobility management for members
@objc
public class DBXTeamLogEventTypeArgEmmChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from EMM exception list
@objc
public class DBXTeamLogEventTypeArgEmmRemoveException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.emmRemoveException
        super.init(swift: swift)
    }
}

/// (team_policies) Accepted/opted out of extended version history
@objc
public class DBXTeamLogEventTypeArgExtendedVersionHistoryChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.extendedVersionHistoryChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed external drive backup policy for team
@objc
public class DBXTeamLogEventTypeArgExternalDriveBackupPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.externalDriveBackupPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled commenting on team files
@objc
public class DBXTeamLogEventTypeArgFileCommentsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileCommentsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed file locking policy for team
@objc
public class DBXTeamLogEventTypeArgFileLockingPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileLockingPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed File Provider Migration policy for team
@objc
public class DBXTeamLogEventTypeArgFileProviderMigrationPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileProviderMigrationPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled file requests
@objc
public class DBXTeamLogEventTypeArgFileRequestsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled file request emails for everyone (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgFileRequestsEmailsEnabled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestsEmailsEnabled
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled file request emails for team (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgFileRequestsEmailsRestrictedToTeamOnly: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileRequestsEmailsRestrictedToTeamOnly
        super.init(swift: swift)
    }
}

/// (team_policies) Changed file transfers policy for team
@objc
public class DBXTeamLogEventTypeArgFileTransfersPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.fileTransfersPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed folder link restrictions policy for team
@objc
public class DBXTeamLogEventTypeArgFolderLinkRestrictionPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.folderLinkRestrictionPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Google single sign-on for team
@objc
public class DBXTeamLogEventTypeArgGoogleSsoChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.googleSsoChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed who can create groups
@objc
public class DBXTeamLogEventTypeArgGroupUserManagementChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.groupUserManagementChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed integration policy for team
@objc
public class DBXTeamLogEventTypeArgIntegrationPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.integrationPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed invite accept email policy for team
@objc
public class DBXTeamLogEventTypeArgInviteAcceptanceEmailPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.inviteAcceptanceEmailPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether users can find team when not invited
@objc
public class DBXTeamLogEventTypeArgMemberRequestsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberRequestsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed member send invite policy for team
@objc
public class DBXTeamLogEventTypeArgMemberSendInvitePolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSendInvitePolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to member space limit exception list
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsAddException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsAddException
        super.init(swift: swift)
    }
}

/// (team_policies) Changed member space limit type for team
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCapsTypePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsChangeCapsTypePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team default member space limit
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from member space limit exception list
@objc
public class DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSpaceLimitsRemoveException
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled option for team members to suggest people to add to team
@objc
public class DBXTeamLogEventTypeArgMemberSuggestionsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.memberSuggestionsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Microsoft Office add-in
@objc
public class DBXTeamLogEventTypeArgMicrosoftOfficeAddinChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.microsoftOfficeAddinChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled network control
@objc
public class DBXTeamLogEventTypeArgNetworkControlChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.networkControlChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific
/// members
@objc
public class DBXTeamLogEventTypeArgPaperChangeDeploymentPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperChangeDeploymentPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether non-members can view Paper docs with link (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgPaperChangeMemberLinkPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperChangeMemberLinkPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share Paper docs outside team, and if docs are accessible only
/// by team members or anyone by default
@objc
public class DBXTeamLogEventTypeArgPaperChangeMemberPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperChangeMemberPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Dropbox Paper for team
@objc
public class DBXTeamLogEventTypeArgPaperChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Paper Default Folder Policy setting for team
@objc
public class DBXTeamLogEventTypeArgPaperDefaultFolderPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDefaultFolderPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Paper Desktop for team
@objc
public class DBXTeamLogEventTypeArgPaperDesktopPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperDesktopPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Added users to Paper-enabled users list
@objc
public class DBXTeamLogEventTypeArgPaperEnabledUsersGroupAddition: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperEnabledUsersGroupAddition
        super.init(swift: swift)
    }
}

/// (team_policies) Removed users from Paper-enabled users list
@objc
public class DBXTeamLogEventTypeArgPaperEnabledUsersGroupRemoval: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.paperEnabledUsersGroupRemoval
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team password strength requirements
@objc
public class DBXTeamLogEventTypeArgPasswordStrengthRequirementsChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.passwordStrengthRequirementsChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled ability of team members to permanently delete content
@objc
public class DBXTeamLogEventTypeArgPermanentDeleteChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.permanentDeleteChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled reseller support
@objc
public class DBXTeamLogEventTypeArgResellerSupportChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.resellerSupportChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed Rewind policy for team
@objc
public class DBXTeamLogEventTypeArgRewindPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.rewindPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed send for signature policy for team
@objc
public class DBXTeamLogEventTypeArgSendForSignaturePolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sendForSignaturePolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether team members can join shared folders owned outside team
@objc
public class DBXTeamLogEventTypeArgSharingChangeFolderJoinPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeFolderJoinPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the allow remove or change expiration policy for the links shared outside of the
/// team
@objc
public class DBXTeamLogEventTypeArgSharingChangeLinkAllowChangeExpirationPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeLinkAllowChangeExpirationPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the default expiration for the links shared outside of the team
@objc
public class DBXTeamLogEventTypeArgSharingChangeLinkDefaultExpirationPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeLinkDefaultExpirationPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed the password requirement for the links shared outside of the team
@objc
public class DBXTeamLogEventTypeArgSharingChangeLinkEnforcePasswordPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeLinkEnforcePasswordPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share links outside team, and if links are accessible only by
/// team members or anyone by default
@objc
public class DBXTeamLogEventTypeArgSharingChangeLinkPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeLinkPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed whether members can share files/folders outside team
@objc
public class DBXTeamLogEventTypeArgSharingChangeMemberPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.sharingChangeMemberPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for team
@objc
public class DBXTeamLogEventTypeArgShowcaseChangeDownloadPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseChangeDownloadPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Dropbox Showcase for team
@objc
public class DBXTeamLogEventTypeArgShowcaseChangeEnabledPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseChangeEnabledPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for team
@objc
public class DBXTeamLogEventTypeArgShowcaseChangeExternalSharingPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.showcaseChangeExternalSharingPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed automatic Smart Sync setting for team
@objc
public class DBXTeamLogEventTypeArgSmarterSmartSyncPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.smarterSmartSyncPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed default Smart Sync setting for team members
@objc
public class DBXTeamLogEventTypeArgSmartSyncChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.smartSyncChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Opted team into Smart Sync
@objc
public class DBXTeamLogEventTypeArgSmartSyncNotOptOut: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.smartSyncNotOptOut
        super.init(swift: swift)
    }
}

/// (team_policies) Opted team out of Smart Sync
@objc
public class DBXTeamLogEventTypeArgSmartSyncOptOut: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.smartSyncOptOut
        super.init(swift: swift)
    }
}

/// (team_policies) Changed single sign-on setting for team
@objc
public class DBXTeamLogEventTypeArgSsoChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.ssoChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team branding policy for team
@objc
public class DBXTeamLogEventTypeArgTeamBrandingPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamBrandingPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed App Integrations setting for team
@objc
public class DBXTeamLogEventTypeArgTeamExtensionsPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamExtensionsPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled Team Selective Sync for team
@objc
public class DBXTeamLogEventTypeArgTeamSelectiveSyncPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamSelectiveSyncPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Edited the approved list for sharing externally
@objc
public class DBXTeamLogEventTypeArgTeamSharingWhitelistSubjectsChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamSharingWhitelistSubjectsChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Added members to two factor authentication exception list
@objc
public class DBXTeamLogEventTypeArgTfaAddException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaAddException
        super.init(swift: swift)
    }
}

/// (team_policies) Changed two-step verification setting for team
@objc
public class DBXTeamLogEventTypeArgTfaChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Removed members from two factor authentication exception list
@objc
public class DBXTeamLogEventTypeArgTfaRemoveException: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaRemoveException
        super.init(swift: swift)
    }
}

/// (team_policies) Enabled/disabled option for members to link personal Dropbox account and team account to
/// same computer
@objc
public class DBXTeamLogEventTypeArgTwoAccountChangePolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.twoAccountChangePolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed team policy for viewer info
@objc
public class DBXTeamLogEventTypeArgViewerInfoPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.viewerInfoPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed watermarking policy for team
@objc
public class DBXTeamLogEventTypeArgWatermarkingPolicyChanged: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.watermarkingPolicyChanged
        super.init(swift: swift)
    }
}

/// (team_policies) Changed limit on active sessions per member
@objc
public class DBXTeamLogEventTypeArgWebSessionsChangeActiveSessionLimit: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.webSessionsChangeActiveSessionLimit
        super.init(swift: swift)
    }
}

/// (team_policies) Changed how long members can stay signed in to Dropbox.com
@objc
public class DBXTeamLogEventTypeArgWebSessionsChangeFixedLengthPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.webSessionsChangeFixedLengthPolicy
        super.init(swift: swift)
    }
}

/// (team_policies) Changed how long team members can be idle while signed in to Dropbox.com
@objc
public class DBXTeamLogEventTypeArgWebSessionsChangeIdleLengthPolicy: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.webSessionsChangeIdleLengthPolicy
        super.init(swift: swift)
    }
}

/// (team_profile) Requested data residency migration for team data
@objc
public class DBXTeamLogEventTypeArgDataResidencyMigrationRequestSuccessful: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dataResidencyMigrationRequestSuccessful
        super.init(swift: swift)
    }
}

/// (team_profile) Request for data residency migration for team data has failed
@objc
public class DBXTeamLogEventTypeArgDataResidencyMigrationRequestUnsuccessful: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.dataResidencyMigrationRequestUnsuccessful
        super.init(swift: swift)
    }
}

/// (team_profile) Merged another team into this team
@objc
public class DBXTeamLogEventTypeArgTeamMergeFrom: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeFrom
        super.init(swift: swift)
    }
}

/// (team_profile) Merged this team into another team
@objc
public class DBXTeamLogEventTypeArgTeamMergeTo: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeTo
        super.init(swift: swift)
    }
}

/// (team_profile) Added team background to display on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileAddBackground: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileAddBackground
        super.init(swift: swift)
    }
}

/// (team_profile) Added team logo to display on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileAddLogo: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileAddLogo
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team background displayed on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileChangeBackground: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileChangeBackground
        super.init(swift: swift)
    }
}

/// (team_profile) Changed default language for team
@objc
public class DBXTeamLogEventTypeArgTeamProfileChangeDefaultLanguage: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileChangeDefaultLanguage
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team logo displayed on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileChangeLogo: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileChangeLogo
        super.init(swift: swift)
    }
}

/// (team_profile) Changed team name
@objc
public class DBXTeamLogEventTypeArgTeamProfileChangeName: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileChangeName
        super.init(swift: swift)
    }
}

/// (team_profile) Removed team background displayed on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileRemoveBackground: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileRemoveBackground
        super.init(swift: swift)
    }
}

/// (team_profile) Removed team logo displayed on shared link headers
@objc
public class DBXTeamLogEventTypeArgTeamProfileRemoveLogo: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamProfileRemoveLogo
        super.init(swift: swift)
    }
}

/// (tfa) Added backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeArgTfaAddBackupPhone: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaAddBackupPhone
        super.init(swift: swift)
    }
}

/// (tfa) Added security key for two-step verification
@objc
public class DBXTeamLogEventTypeArgTfaAddSecurityKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaAddSecurityKey
        super.init(swift: swift)
    }
}

/// (tfa) Changed backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeArgTfaChangeBackupPhone: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaChangeBackupPhone
        super.init(swift: swift)
    }
}

/// (tfa) Enabled/disabled/changed two-step verification setting
@objc
public class DBXTeamLogEventTypeArgTfaChangeStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaChangeStatus
        super.init(swift: swift)
    }
}

/// (tfa) Removed backup phone for two-step verification
@objc
public class DBXTeamLogEventTypeArgTfaRemoveBackupPhone: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaRemoveBackupPhone
        super.init(swift: swift)
    }
}

/// (tfa) Removed security key for two-step verification
@objc
public class DBXTeamLogEventTypeArgTfaRemoveSecurityKey: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaRemoveSecurityKey
        super.init(swift: swift)
    }
}

/// (tfa) Reset two-step verification for team member
@objc
public class DBXTeamLogEventTypeArgTfaReset: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.tfaReset
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed enterprise admin role
@objc
public class DBXTeamLogEventTypeArgChangedEnterpriseAdminRole: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.changedEnterpriseAdminRole
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed enterprise-connected team status
@objc
public class DBXTeamLogEventTypeArgChangedEnterpriseConnectedTeamStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.changedEnterpriseConnectedTeamStatus
        super.init(swift: swift)
    }
}

/// (trusted_teams) Ended enterprise admin session
@objc
public class DBXTeamLogEventTypeArgEndedEnterpriseAdminSession: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.endedEnterpriseAdminSession
        super.init(swift: swift)
    }
}

/// (trusted_teams) Ended enterprise admin session (deprecated, replaced by 'Ended enterprise admin session')
@objc
public class DBXTeamLogEventTypeArgEndedEnterpriseAdminSessionDeprecated: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.endedEnterpriseAdminSessionDeprecated
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed who can update a setting
@objc
public class DBXTeamLogEventTypeArgEnterpriseSettingsLocking: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.enterpriseSettingsLocking
        super.init(swift: swift)
    }
}

/// (trusted_teams) Changed guest team admin status
@objc
public class DBXTeamLogEventTypeArgGuestAdminChangeStatus: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.guestAdminChangeStatus
        super.init(swift: swift)
    }
}

/// (trusted_teams) Started enterprise admin session
@objc
public class DBXTeamLogEventTypeArgStartedEnterpriseAdminSession: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.startedEnterpriseAdminSession
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestAccepted: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestAccepted
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestAcceptedShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestAcceptedShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Automatically canceled team merge request
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestAutoCanceled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestAutoCanceled
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestCanceled: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestCanceled
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestCanceledShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestCanceledShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestExpired: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestExpired
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestExpiredShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestExpiredShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestRejectedShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestRejectedShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestReminder: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestReminder
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
/// reminder')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestReminderShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
/// reminder')
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestReminderShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Canceled the team merge
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestRevoked: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestRevoked
        super.init(swift: swift)
    }
}

/// (trusted_teams) Requested to merge their Dropbox team into yours
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestSentShownToPrimaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestSentShownToPrimaryTeam
        super.init(swift: swift)
    }
}

/// (trusted_teams) Requested to merge your team into another Dropbox team
@objc
public class DBXTeamLogEventTypeArgTeamMergeRequestSentShownToSecondaryTeam: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.teamMergeRequestSentShownToSecondaryTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogEventTypeArgOther: DBXTeamLogEventTypeArg {
    @objc
    public init() {
        let swift = TeamLog.EventTypeArg.other
        super.init(swift: swift)
    }
}

/// Created member data report.
@objc
public class DBXTeamLogExportMembersReportDetails: NSObject {
    let swift: TeamLog.ExportMembersReportDetails

    public init(swift: TeamLog.ExportMembersReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to create members data report.
@objc
public class DBXTeamLogExportMembersReportFailDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.ExportMembersReportFailDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.ExportMembersReportFailDetails

    public init(swift: TeamLog.ExportMembersReportFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExportMembersReportFailType struct
@objc
public class DBXTeamLogExportMembersReportFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExportMembersReportFailType(description_: description_)
    }

    let swift: TeamLog.ExportMembersReportFailType

    public init(swift: TeamLog.ExportMembersReportFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExportMembersReportType struct
@objc
public class DBXTeamLogExportMembersReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExportMembersReportType(description_: description_)
    }

    let swift: TeamLog.ExportMembersReportType

    public init(swift: TeamLog.ExportMembersReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Accepted/opted out of extended version history.
@objc
public class DBXTeamLogExtendedVersionHistoryChangePolicyDetails: NSObject {
    /// New extended version history policy.
    @objc
    public var newValue: DBXTeamLogExtendedVersionHistoryPolicy { DBXTeamLogExtendedVersionHistoryPolicy(swift: swift.newValue) }
    /// Previous extended version history policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogExtendedVersionHistoryPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogExtendedVersionHistoryPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogExtendedVersionHistoryPolicy, previousValue: DBXTeamLogExtendedVersionHistoryPolicy?) {
        self.swift = TeamLog.ExtendedVersionHistoryChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.ExtendedVersionHistoryChangePolicyDetails

    public init(swift: TeamLog.ExtendedVersionHistoryChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExtendedVersionHistoryChangePolicyType struct
@objc
public class DBXTeamLogExtendedVersionHistoryChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExtendedVersionHistoryChangePolicyType(description_: description_)
    }

    let swift: TeamLog.ExtendedVersionHistoryChangePolicyType

    public init(swift: TeamLog.ExtendedVersionHistoryChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExtendedVersionHistoryPolicy union
@objc
public class DBXTeamLogExtendedVersionHistoryPolicy: NSObject {
    let swift: TeamLog.ExtendedVersionHistoryPolicy

    public init(swift: TeamLog.ExtendedVersionHistoryPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ExtendedVersionHistoryPolicy) -> DBXTeamLogExtendedVersionHistoryPolicy {
        switch swift {
        case .explicitlyLimited:
            return DBXTeamLogExtendedVersionHistoryPolicyExplicitlyLimited()
        case .explicitlyUnlimited:
            return DBXTeamLogExtendedVersionHistoryPolicyExplicitlyUnlimited()
        case .implicitlyLimited:
            return DBXTeamLogExtendedVersionHistoryPolicyImplicitlyLimited()
        case .implicitlyUnlimited:
            return DBXTeamLogExtendedVersionHistoryPolicyImplicitlyUnlimited()
        case .other:
            return DBXTeamLogExtendedVersionHistoryPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asExplicitlyLimited: DBXTeamLogExtendedVersionHistoryPolicyExplicitlyLimited? {
        self as? DBXTeamLogExtendedVersionHistoryPolicyExplicitlyLimited
    }

    @objc
    public var asExplicitlyUnlimited: DBXTeamLogExtendedVersionHistoryPolicyExplicitlyUnlimited? {
        self as? DBXTeamLogExtendedVersionHistoryPolicyExplicitlyUnlimited
    }

    @objc
    public var asImplicitlyLimited: DBXTeamLogExtendedVersionHistoryPolicyImplicitlyLimited? {
        self as? DBXTeamLogExtendedVersionHistoryPolicyImplicitlyLimited
    }

    @objc
    public var asImplicitlyUnlimited: DBXTeamLogExtendedVersionHistoryPolicyImplicitlyUnlimited? {
        self as? DBXTeamLogExtendedVersionHistoryPolicyImplicitlyUnlimited
    }

    @objc
    public var asOther: DBXTeamLogExtendedVersionHistoryPolicyOther? {
        self as? DBXTeamLogExtendedVersionHistoryPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExtendedVersionHistoryPolicyExplicitlyLimited: DBXTeamLogExtendedVersionHistoryPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExtendedVersionHistoryPolicy.explicitlyLimited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExtendedVersionHistoryPolicyExplicitlyUnlimited: DBXTeamLogExtendedVersionHistoryPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExtendedVersionHistoryPolicy.explicitlyUnlimited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExtendedVersionHistoryPolicyImplicitlyLimited: DBXTeamLogExtendedVersionHistoryPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExtendedVersionHistoryPolicy.implicitlyLimited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExtendedVersionHistoryPolicyImplicitlyUnlimited: DBXTeamLogExtendedVersionHistoryPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExtendedVersionHistoryPolicy.implicitlyUnlimited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExtendedVersionHistoryPolicyOther: DBXTeamLogExtendedVersionHistoryPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExtendedVersionHistoryPolicy.other
        super.init(swift: swift)
    }
}

/// External Drive Backup eligibility status
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatus: NSObject {
    let swift: TeamLog.ExternalDriveBackupEligibilityStatus

    public init(swift: TeamLog.ExternalDriveBackupEligibilityStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ExternalDriveBackupEligibilityStatus) -> DBXTeamLogExternalDriveBackupEligibilityStatus {
        switch swift {
        case .exceedLicenseCap:
            return DBXTeamLogExternalDriveBackupEligibilityStatusExceedLicenseCap()
        case .success:
            return DBXTeamLogExternalDriveBackupEligibilityStatusSuccess()
        case .other:
            return DBXTeamLogExternalDriveBackupEligibilityStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asExceedLicenseCap: DBXTeamLogExternalDriveBackupEligibilityStatusExceedLicenseCap? {
        self as? DBXTeamLogExternalDriveBackupEligibilityStatusExceedLicenseCap
    }

    @objc
    public var asSuccess: DBXTeamLogExternalDriveBackupEligibilityStatusSuccess? {
        self as? DBXTeamLogExternalDriveBackupEligibilityStatusSuccess
    }

    @objc
    public var asOther: DBXTeamLogExternalDriveBackupEligibilityStatusOther? {
        self as? DBXTeamLogExternalDriveBackupEligibilityStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatusExceedLicenseCap: DBXTeamLogExternalDriveBackupEligibilityStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupEligibilityStatus.exceedLicenseCap
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatusSuccess: DBXTeamLogExternalDriveBackupEligibilityStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupEligibilityStatus.success
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatusOther: DBXTeamLogExternalDriveBackupEligibilityStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupEligibilityStatus.other
        super.init(swift: swift)
    }
}

/// Checked external drive backup eligibility status.
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo { DBXTeamLogDesktopDeviceSessionLogInfo(swift: swift.desktopDeviceSessionInfo) }
    /// Current eligibility status of external drive backup.
    @objc
    public var status: DBXTeamLogExternalDriveBackupEligibilityStatus { DBXTeamLogExternalDriveBackupEligibilityStatus(swift: swift.status) }
    /// Total number of valid external drive backup for all the team members.
    @objc
    public var numberOfExternalDriveBackup: NSNumber { swift.numberOfExternalDriveBackup as NSNumber }

    @objc
    public init(
        desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo,
        status: DBXTeamLogExternalDriveBackupEligibilityStatus,
        numberOfExternalDriveBackup: NSNumber
    ) {
        self.swift = TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetails(
            desktopDeviceSessionInfo: desktopDeviceSessionInfo.subSwift,
            status: status.swift,
            numberOfExternalDriveBackup: numberOfExternalDriveBackup.uint64Value
        )
    }

    let swift: TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetails

    public init(swift: TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExternalDriveBackupEligibilityStatusCheckedType struct
@objc
public class DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExternalDriveBackupEligibilityStatusCheckedType(description_: description_)
    }

    let swift: TeamLog.ExternalDriveBackupEligibilityStatusCheckedType

    public init(swift: TeamLog.ExternalDriveBackupEligibilityStatusCheckedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to external drive backup feature
@objc
public class DBXTeamLogExternalDriveBackupPolicy: NSObject {
    let swift: TeamLog.ExternalDriveBackupPolicy

    public init(swift: TeamLog.ExternalDriveBackupPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ExternalDriveBackupPolicy) -> DBXTeamLogExternalDriveBackupPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogExternalDriveBackupPolicyDefault_()
        case .disabled:
            return DBXTeamLogExternalDriveBackupPolicyDisabled()
        case .enabled:
            return DBXTeamLogExternalDriveBackupPolicyEnabled()
        case .other:
            return DBXTeamLogExternalDriveBackupPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogExternalDriveBackupPolicyDefault_? {
        self as? DBXTeamLogExternalDriveBackupPolicyDefault_
    }

    @objc
    public var asDisabled: DBXTeamLogExternalDriveBackupPolicyDisabled? {
        self as? DBXTeamLogExternalDriveBackupPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogExternalDriveBackupPolicyEnabled? {
        self as? DBXTeamLogExternalDriveBackupPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogExternalDriveBackupPolicyOther? {
        self as? DBXTeamLogExternalDriveBackupPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupPolicyDefault_: DBXTeamLogExternalDriveBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupPolicyDisabled: DBXTeamLogExternalDriveBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupPolicyEnabled: DBXTeamLogExternalDriveBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupPolicyOther: DBXTeamLogExternalDriveBackupPolicy {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupPolicy.other
        super.init(swift: swift)
    }
}

/// Changed external drive backup policy for team.
@objc
public class DBXTeamLogExternalDriveBackupPolicyChangedDetails: NSObject {
    /// New external drive backup policy.
    @objc
    public var newValue: DBXTeamLogExternalDriveBackupPolicy { DBXTeamLogExternalDriveBackupPolicy(swift: swift.newValue) }
    /// Previous external drive backup policy.
    @objc
    public var previousValue: DBXTeamLogExternalDriveBackupPolicy { DBXTeamLogExternalDriveBackupPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogExternalDriveBackupPolicy, previousValue: DBXTeamLogExternalDriveBackupPolicy) {
        self.swift = TeamLog.ExternalDriveBackupPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ExternalDriveBackupPolicyChangedDetails

    public init(swift: TeamLog.ExternalDriveBackupPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExternalDriveBackupPolicyChangedType struct
@objc
public class DBXTeamLogExternalDriveBackupPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExternalDriveBackupPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.ExternalDriveBackupPolicyChangedType

    public init(swift: TeamLog.ExternalDriveBackupPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// External Drive Backup status
@objc
public class DBXTeamLogExternalDriveBackupStatus: NSObject {
    let swift: TeamLog.ExternalDriveBackupStatus

    public init(swift: TeamLog.ExternalDriveBackupStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ExternalDriveBackupStatus) -> DBXTeamLogExternalDriveBackupStatus {
        switch swift {
        case .broken:
            return DBXTeamLogExternalDriveBackupStatusBroken()
        case .created:
            return DBXTeamLogExternalDriveBackupStatusCreated()
        case .createdOrBroken:
            return DBXTeamLogExternalDriveBackupStatusCreatedOrBroken()
        case .deleted:
            return DBXTeamLogExternalDriveBackupStatusDeleted()
        case .empty:
            return DBXTeamLogExternalDriveBackupStatusEmpty()
        case .unknown:
            return DBXTeamLogExternalDriveBackupStatusUnknown()
        case .other:
            return DBXTeamLogExternalDriveBackupStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asBroken: DBXTeamLogExternalDriveBackupStatusBroken? {
        self as? DBXTeamLogExternalDriveBackupStatusBroken
    }

    @objc
    public var asCreated: DBXTeamLogExternalDriveBackupStatusCreated? {
        self as? DBXTeamLogExternalDriveBackupStatusCreated
    }

    @objc
    public var asCreatedOrBroken: DBXTeamLogExternalDriveBackupStatusCreatedOrBroken? {
        self as? DBXTeamLogExternalDriveBackupStatusCreatedOrBroken
    }

    @objc
    public var asDeleted: DBXTeamLogExternalDriveBackupStatusDeleted? {
        self as? DBXTeamLogExternalDriveBackupStatusDeleted
    }

    @objc
    public var asEmpty: DBXTeamLogExternalDriveBackupStatusEmpty? {
        self as? DBXTeamLogExternalDriveBackupStatusEmpty
    }

    @objc
    public var asUnknown: DBXTeamLogExternalDriveBackupStatusUnknown? {
        self as? DBXTeamLogExternalDriveBackupStatusUnknown
    }

    @objc
    public var asOther: DBXTeamLogExternalDriveBackupStatusOther? {
        self as? DBXTeamLogExternalDriveBackupStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusBroken: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.broken
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusCreated: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.created
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusCreatedOrBroken: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.createdOrBroken
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusDeleted: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.deleted
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusEmpty: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.empty
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusUnknown: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.unknown
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogExternalDriveBackupStatusOther: DBXTeamLogExternalDriveBackupStatus {
    @objc
    public init() {
        let swift = TeamLog.ExternalDriveBackupStatus.other
        super.init(swift: swift)
    }
}

/// Modified external drive backup.
@objc
public class DBXTeamLogExternalDriveBackupStatusChangedDetails: NSObject {
    /// Device's session logged information.
    @objc
    public var desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo { DBXTeamLogDesktopDeviceSessionLogInfo(swift: swift.desktopDeviceSessionInfo) }
    /// Previous status of this external drive backup.
    @objc
    public var previousValue: DBXTeamLogExternalDriveBackupStatus { DBXTeamLogExternalDriveBackupStatus(swift: swift.previousValue) }
    /// Next status of this external drive backup.
    @objc
    public var newValue: DBXTeamLogExternalDriveBackupStatus { DBXTeamLogExternalDriveBackupStatus(swift: swift.newValue) }

    @objc
    public init(
        desktopDeviceSessionInfo: DBXTeamLogDesktopDeviceSessionLogInfo,
        previousValue: DBXTeamLogExternalDriveBackupStatus,
        newValue: DBXTeamLogExternalDriveBackupStatus
    ) {
        self.swift = TeamLog.ExternalDriveBackupStatusChangedDetails(
            desktopDeviceSessionInfo: desktopDeviceSessionInfo.subSwift,
            previousValue: previousValue.swift,
            newValue: newValue.swift
        )
    }

    let swift: TeamLog.ExternalDriveBackupStatusChangedDetails

    public init(swift: TeamLog.ExternalDriveBackupStatusChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExternalDriveBackupStatusChangedType struct
@objc
public class DBXTeamLogExternalDriveBackupStatusChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExternalDriveBackupStatusChangedType(description_: description_)
    }

    let swift: TeamLog.ExternalDriveBackupStatusChangedType

    public init(swift: TeamLog.ExternalDriveBackupStatusChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created External sharing report.
@objc
public class DBXTeamLogExternalSharingCreateReportDetails: NSObject {
    let swift: TeamLog.ExternalSharingCreateReportDetails

    public init(swift: TeamLog.ExternalSharingCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExternalSharingCreateReportType struct
@objc
public class DBXTeamLogExternalSharingCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExternalSharingCreateReportType(description_: description_)
    }

    let swift: TeamLog.ExternalSharingCreateReportType

    public init(swift: TeamLog.ExternalSharingCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create External sharing report.
@objc
public class DBXTeamLogExternalSharingReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.ExternalSharingReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.ExternalSharingReportFailedDetails

    public init(swift: TeamLog.ExternalSharingReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ExternalSharingReportFailedType struct
@objc
public class DBXTeamLogExternalSharingReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ExternalSharingReportFailedType(description_: description_)
    }

    let swift: TeamLog.ExternalSharingReportFailedType

    public init(swift: TeamLog.ExternalSharingReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// A user without a Dropbox account.
@objc
public class DBXTeamLogExternalUserLogInfo: NSObject {
    /// An external user identifier.
    @objc
    public var userIdentifier: String { swift.userIdentifier }
    /// Identifier type.
    @objc
    public var identifierType: DBXTeamLogIdentifierType { DBXTeamLogIdentifierType(swift: swift.identifierType) }

    @objc
    public init(userIdentifier: String, identifierType: DBXTeamLogIdentifierType) {
        self.swift = TeamLog.ExternalUserLogInfo(userIdentifier: userIdentifier, identifierType: identifierType.swift)
    }

    let swift: TeamLog.ExternalUserLogInfo

    public init(swift: TeamLog.ExternalUserLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Provides details about a failure
@objc
public class DBXTeamLogFailureDetailsLogInfo: NSObject {
    /// A user friendly explanation of the error.
    @objc
    public var userFriendlyMessage: String? { swift.userFriendlyMessage }
    /// A technical explanation of the error. This is relevant for some errors.
    @objc
    public var technicalErrorMessage: String? { swift.technicalErrorMessage }

    @objc
    public init(userFriendlyMessage: String?, technicalErrorMessage: String?) {
        self.swift = TeamLog.FailureDetailsLogInfo(userFriendlyMessage: userFriendlyMessage, technicalErrorMessage: technicalErrorMessage)
    }

    let swift: TeamLog.FailureDetailsLogInfo

    public init(swift: TeamLog.FailureDetailsLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FedAdminRole union
@objc
public class DBXTeamLogFedAdminRole: NSObject {
    let swift: TeamLog.FedAdminRole

    public init(swift: TeamLog.FedAdminRole) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FedAdminRole) -> DBXTeamLogFedAdminRole {
        switch swift {
        case .enterpriseAdmin:
            return DBXTeamLogFedAdminRoleEnterpriseAdmin()
        case .notEnterpriseAdmin:
            return DBXTeamLogFedAdminRoleNotEnterpriseAdmin()
        case .other:
            return DBXTeamLogFedAdminRoleOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asEnterpriseAdmin: DBXTeamLogFedAdminRoleEnterpriseAdmin? {
        self as? DBXTeamLogFedAdminRoleEnterpriseAdmin
    }

    @objc
    public var asNotEnterpriseAdmin: DBXTeamLogFedAdminRoleNotEnterpriseAdmin? {
        self as? DBXTeamLogFedAdminRoleNotEnterpriseAdmin
    }

    @objc
    public var asOther: DBXTeamLogFedAdminRoleOther? {
        self as? DBXTeamLogFedAdminRoleOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedAdminRoleEnterpriseAdmin: DBXTeamLogFedAdminRole {
    @objc
    public init() {
        let swift = TeamLog.FedAdminRole.enterpriseAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedAdminRoleNotEnterpriseAdmin: DBXTeamLogFedAdminRole {
    @objc
    public init() {
        let swift = TeamLog.FedAdminRole.notEnterpriseAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedAdminRoleOther: DBXTeamLogFedAdminRole {
    @objc
    public init() {
        let swift = TeamLog.FedAdminRole.other
        super.init(swift: swift)
    }
}

/// More details about the organization or team.
@objc
public class DBXTeamLogFedExtraDetails: NSObject {
    let swift: TeamLog.FedExtraDetails

    public init(swift: TeamLog.FedExtraDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FedExtraDetails) -> DBXTeamLogFedExtraDetails {
        switch swift {
        case .organization(let swiftArg):
            let arg = DBXTeamLogOrganizationDetails(swift: swiftArg)
            return DBXTeamLogFedExtraDetailsOrganization(arg)
        case .team(let swiftArg):
            let arg = DBXTeamLogTeamDetails(swift: swiftArg)
            return DBXTeamLogFedExtraDetailsTeam(arg)
        case .other:
            return DBXTeamLogFedExtraDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOrganization: DBXTeamLogFedExtraDetailsOrganization? {
        self as? DBXTeamLogFedExtraDetailsOrganization
    }

    @objc
    public var asTeam: DBXTeamLogFedExtraDetailsTeam? {
        self as? DBXTeamLogFedExtraDetailsTeam
    }

    @objc
    public var asOther: DBXTeamLogFedExtraDetailsOther? {
        self as? DBXTeamLogFedExtraDetailsOther
    }
}

/// More details about the organization.
@objc
public class DBXTeamLogFedExtraDetailsOrganization: DBXTeamLogFedExtraDetails {
    @objc
    public var organization: DBXTeamLogOrganizationDetails

    @objc
    public init(_ arg: DBXTeamLogOrganizationDetails) {
        self.organization = arg
        let swift = TeamLog.FedExtraDetails.organization(arg.swift)
        super.init(swift: swift)
    }
}

/// More details about the team.
@objc
public class DBXTeamLogFedExtraDetailsTeam: DBXTeamLogFedExtraDetails {
    @objc
    public var team: DBXTeamLogTeamDetails

    @objc
    public init(_ arg: DBXTeamLogTeamDetails) {
        self.team = arg
        let swift = TeamLog.FedExtraDetails.team(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedExtraDetailsOther: DBXTeamLogFedExtraDetails {
    @objc
    public init() {
        let swift = TeamLog.FedExtraDetails.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible FedHandshakeAction union
@objc
public class DBXTeamLogFedHandshakeAction: NSObject {
    let swift: TeamLog.FedHandshakeAction

    public init(swift: TeamLog.FedHandshakeAction) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FedHandshakeAction) -> DBXTeamLogFedHandshakeAction {
        switch swift {
        case .acceptedInvite:
            return DBXTeamLogFedHandshakeActionAcceptedInvite()
        case .canceledInvite:
            return DBXTeamLogFedHandshakeActionCanceledInvite()
        case .inviteExpired:
            return DBXTeamLogFedHandshakeActionInviteExpired()
        case .invited:
            return DBXTeamLogFedHandshakeActionInvited()
        case .rejectedInvite:
            return DBXTeamLogFedHandshakeActionRejectedInvite()
        case .removedTeam:
            return DBXTeamLogFedHandshakeActionRemovedTeam()
        case .other:
            return DBXTeamLogFedHandshakeActionOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAcceptedInvite: DBXTeamLogFedHandshakeActionAcceptedInvite? {
        self as? DBXTeamLogFedHandshakeActionAcceptedInvite
    }

    @objc
    public var asCanceledInvite: DBXTeamLogFedHandshakeActionCanceledInvite? {
        self as? DBXTeamLogFedHandshakeActionCanceledInvite
    }

    @objc
    public var asInviteExpired: DBXTeamLogFedHandshakeActionInviteExpired? {
        self as? DBXTeamLogFedHandshakeActionInviteExpired
    }

    @objc
    public var asInvited: DBXTeamLogFedHandshakeActionInvited? {
        self as? DBXTeamLogFedHandshakeActionInvited
    }

    @objc
    public var asRejectedInvite: DBXTeamLogFedHandshakeActionRejectedInvite? {
        self as? DBXTeamLogFedHandshakeActionRejectedInvite
    }

    @objc
    public var asRemovedTeam: DBXTeamLogFedHandshakeActionRemovedTeam? {
        self as? DBXTeamLogFedHandshakeActionRemovedTeam
    }

    @objc
    public var asOther: DBXTeamLogFedHandshakeActionOther? {
        self as? DBXTeamLogFedHandshakeActionOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionAcceptedInvite: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.acceptedInvite
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionCanceledInvite: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.canceledInvite
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionInviteExpired: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.inviteExpired
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionInvited: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.invited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionRejectedInvite: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.rejectedInvite
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionRemovedTeam: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.removedTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFedHandshakeActionOther: DBXTeamLogFedHandshakeAction {
    @objc
    public init() {
        let swift = TeamLog.FedHandshakeAction.other
        super.init(swift: swift)
    }
}

/// Additional information about the organization or connected team
@objc
public class DBXTeamLogFederationStatusChangeAdditionalInfo: NSObject {
    let swift: TeamLog.FederationStatusChangeAdditionalInfo

    public init(swift: TeamLog.FederationStatusChangeAdditionalInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FederationStatusChangeAdditionalInfo) -> DBXTeamLogFederationStatusChangeAdditionalInfo {
        switch swift {
        case .connectedTeamName(let swiftArg):
            let arg = DBXTeamLogConnectedTeamName(swift: swiftArg)
            return DBXTeamLogFederationStatusChangeAdditionalInfoConnectedTeamName(arg)
        case .nonTrustedTeamDetails(let swiftArg):
            let arg = DBXTeamLogNonTrustedTeamDetails(swift: swiftArg)
            return DBXTeamLogFederationStatusChangeAdditionalInfoNonTrustedTeamDetails(arg)
        case .organizationName(let swiftArg):
            let arg = DBXTeamLogOrganizationName(swift: swiftArg)
            return DBXTeamLogFederationStatusChangeAdditionalInfoOrganizationName(arg)
        case .other:
            return DBXTeamLogFederationStatusChangeAdditionalInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asConnectedTeamName: DBXTeamLogFederationStatusChangeAdditionalInfoConnectedTeamName? {
        self as? DBXTeamLogFederationStatusChangeAdditionalInfoConnectedTeamName
    }

    @objc
    public var asNonTrustedTeamDetails: DBXTeamLogFederationStatusChangeAdditionalInfoNonTrustedTeamDetails? {
        self as? DBXTeamLogFederationStatusChangeAdditionalInfoNonTrustedTeamDetails
    }

    @objc
    public var asOrganizationName: DBXTeamLogFederationStatusChangeAdditionalInfoOrganizationName? {
        self as? DBXTeamLogFederationStatusChangeAdditionalInfoOrganizationName
    }

    @objc
    public var asOther: DBXTeamLogFederationStatusChangeAdditionalInfoOther? {
        self as? DBXTeamLogFederationStatusChangeAdditionalInfoOther
    }
}

/// The name of the team.
@objc
public class DBXTeamLogFederationStatusChangeAdditionalInfoConnectedTeamName: DBXTeamLogFederationStatusChangeAdditionalInfo {
    @objc
    public var connectedTeamName: DBXTeamLogConnectedTeamName

    @objc
    public init(_ arg: DBXTeamLogConnectedTeamName) {
        self.connectedTeamName = arg
        let swift = TeamLog.FederationStatusChangeAdditionalInfo.connectedTeamName(arg.swift)
        super.init(swift: swift)
    }
}

/// The email to which the request was sent.
@objc
public class DBXTeamLogFederationStatusChangeAdditionalInfoNonTrustedTeamDetails: DBXTeamLogFederationStatusChangeAdditionalInfo {
    @objc
    public var nonTrustedTeamDetails: DBXTeamLogNonTrustedTeamDetails

    @objc
    public init(_ arg: DBXTeamLogNonTrustedTeamDetails) {
        self.nonTrustedTeamDetails = arg
        let swift = TeamLog.FederationStatusChangeAdditionalInfo.nonTrustedTeamDetails(arg.swift)
        super.init(swift: swift)
    }
}

/// The name of the organization.
@objc
public class DBXTeamLogFederationStatusChangeAdditionalInfoOrganizationName: DBXTeamLogFederationStatusChangeAdditionalInfo {
    @objc
    public var organizationName: DBXTeamLogOrganizationName

    @objc
    public init(_ arg: DBXTeamLogOrganizationName) {
        self.organizationName = arg
        let swift = TeamLog.FederationStatusChangeAdditionalInfo.organizationName(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFederationStatusChangeAdditionalInfoOther: DBXTeamLogFederationStatusChangeAdditionalInfo {
    @objc
    public init() {
        let swift = TeamLog.FederationStatusChangeAdditionalInfo.other
        super.init(swift: swift)
    }
}

/// Added file comment.
@objc
public class DBXTeamLogFileAddCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileAddCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileAddCommentDetails

    public init(swift: TeamLog.FileAddCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileAddCommentType struct
@objc
public class DBXTeamLogFileAddCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileAddCommentType(description_: description_)
    }

    let swift: TeamLog.FileAddCommentType

    public init(swift: TeamLog.FileAddCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added files and/or folders.
@objc
public class DBXTeamLogFileAddDetails: NSObject {
    let swift: TeamLog.FileAddDetails

    public init(swift: TeamLog.FileAddDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added files and/or folders from automation.
@objc
public class DBXTeamLogFileAddFromAutomationDetails: NSObject {
    let swift: TeamLog.FileAddFromAutomationDetails

    public init(swift: TeamLog.FileAddFromAutomationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileAddFromAutomationType struct
@objc
public class DBXTeamLogFileAddFromAutomationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileAddFromAutomationType(description_: description_)
    }

    let swift: TeamLog.FileAddFromAutomationType

    public init(swift: TeamLog.FileAddFromAutomationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileAddType struct
@objc
public class DBXTeamLogFileAddType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileAddType(description_: description_)
    }

    let swift: TeamLog.FileAddType

    public init(swift: TeamLog.FileAddType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Subscribed to or unsubscribed from comment notifications for file.
@objc
public class DBXTeamLogFileChangeCommentSubscriptionDetails: NSObject {
    /// New file comment subscription.
    @objc
    public var newValue: DBXTeamLogFileCommentNotificationPolicy { DBXTeamLogFileCommentNotificationPolicy(swift: swift.newValue) }
    /// Previous file comment subscription. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogFileCommentNotificationPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogFileCommentNotificationPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogFileCommentNotificationPolicy, previousValue: DBXTeamLogFileCommentNotificationPolicy?) {
        self.swift = TeamLog.FileChangeCommentSubscriptionDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.FileChangeCommentSubscriptionDetails

    public init(swift: TeamLog.FileChangeCommentSubscriptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileChangeCommentSubscriptionType struct
@objc
public class DBXTeamLogFileChangeCommentSubscriptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileChangeCommentSubscriptionType(description_: description_)
    }

    let swift: TeamLog.FileChangeCommentSubscriptionType

    public init(swift: TeamLog.FileChangeCommentSubscriptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enable or disable file comments notifications
@objc
public class DBXTeamLogFileCommentNotificationPolicy: NSObject {
    let swift: TeamLog.FileCommentNotificationPolicy

    public init(swift: TeamLog.FileCommentNotificationPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FileCommentNotificationPolicy) -> DBXTeamLogFileCommentNotificationPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogFileCommentNotificationPolicyDisabled()
        case .enabled:
            return DBXTeamLogFileCommentNotificationPolicyEnabled()
        case .other:
            return DBXTeamLogFileCommentNotificationPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogFileCommentNotificationPolicyDisabled? {
        self as? DBXTeamLogFileCommentNotificationPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogFileCommentNotificationPolicyEnabled? {
        self as? DBXTeamLogFileCommentNotificationPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogFileCommentNotificationPolicyOther? {
        self as? DBXTeamLogFileCommentNotificationPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentNotificationPolicyDisabled: DBXTeamLogFileCommentNotificationPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentNotificationPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentNotificationPolicyEnabled: DBXTeamLogFileCommentNotificationPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentNotificationPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentNotificationPolicyOther: DBXTeamLogFileCommentNotificationPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentNotificationPolicy.other
        super.init(swift: swift)
    }
}

/// Enabled/disabled commenting on team files.
@objc
public class DBXTeamLogFileCommentsChangePolicyDetails: NSObject {
    /// New commenting on team files policy.
    @objc
    public var newValue: DBXTeamLogFileCommentsPolicy { DBXTeamLogFileCommentsPolicy(swift: swift.newValue) }
    /// Previous commenting on team files policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogFileCommentsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogFileCommentsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogFileCommentsPolicy, previousValue: DBXTeamLogFileCommentsPolicy?) {
        self.swift = TeamLog.FileCommentsChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.FileCommentsChangePolicyDetails

    public init(swift: TeamLog.FileCommentsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileCommentsChangePolicyType struct
@objc
public class DBXTeamLogFileCommentsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileCommentsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.FileCommentsChangePolicyType

    public init(swift: TeamLog.FileCommentsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File comments policy
@objc
public class DBXTeamLogFileCommentsPolicy: NSObject {
    let swift: TeamLog.FileCommentsPolicy

    public init(swift: TeamLog.FileCommentsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FileCommentsPolicy) -> DBXTeamLogFileCommentsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogFileCommentsPolicyDisabled()
        case .enabled:
            return DBXTeamLogFileCommentsPolicyEnabled()
        case .other:
            return DBXTeamLogFileCommentsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogFileCommentsPolicyDisabled? {
        self as? DBXTeamLogFileCommentsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogFileCommentsPolicyEnabled? {
        self as? DBXTeamLogFileCommentsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogFileCommentsPolicyOther? {
        self as? DBXTeamLogFileCommentsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentsPolicyDisabled: DBXTeamLogFileCommentsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentsPolicyEnabled: DBXTeamLogFileCommentsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileCommentsPolicyOther: DBXTeamLogFileCommentsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileCommentsPolicy.other
        super.init(swift: swift)
    }
}

/// Copied files and/or folders.
@objc
public class DBXTeamLogFileCopyDetails: NSObject {
    /// Relocate action details.
    @objc
    public var relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo] {
        swift.relocateActionDetails.map { DBXTeamLogRelocateAssetReferencesLogInfo(swift: $0) }
    }

    @objc
    public init(relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo]) {
        self.swift = TeamLog.FileCopyDetails(relocateActionDetails: relocateActionDetails.map(\.swift))
    }

    let swift: TeamLog.FileCopyDetails

    public init(swift: TeamLog.FileCopyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileCopyType struct
@objc
public class DBXTeamLogFileCopyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileCopyType(description_: description_)
    }

    let swift: TeamLog.FileCopyType

    public init(swift: TeamLog.FileCopyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted file comment.
@objc
public class DBXTeamLogFileDeleteCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileDeleteCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileDeleteCommentDetails

    public init(swift: TeamLog.FileDeleteCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileDeleteCommentType struct
@objc
public class DBXTeamLogFileDeleteCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileDeleteCommentType(description_: description_)
    }

    let swift: TeamLog.FileDeleteCommentType

    public init(swift: TeamLog.FileDeleteCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted files and/or folders.
@objc
public class DBXTeamLogFileDeleteDetails: NSObject {
    let swift: TeamLog.FileDeleteDetails

    public init(swift: TeamLog.FileDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileDeleteType struct
@objc
public class DBXTeamLogFileDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileDeleteType(description_: description_)
    }

    let swift: TeamLog.FileDeleteType

    public init(swift: TeamLog.FileDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded files and/or folders.
@objc
public class DBXTeamLogFileDownloadDetails: NSObject {
    let swift: TeamLog.FileDownloadDetails

    public init(swift: TeamLog.FileDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileDownloadType struct
@objc
public class DBXTeamLogFileDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileDownloadType(description_: description_)
    }

    let swift: TeamLog.FileDownloadType

    public init(swift: TeamLog.FileDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited file comment.
@objc
public class DBXTeamLogFileEditCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }
    /// Previous comment text.
    @objc
    public var previousCommentText: String { swift.previousCommentText }

    @objc
    public init(previousCommentText: String, commentText: String?) {
        self.swift = TeamLog.FileEditCommentDetails(previousCommentText: previousCommentText, commentText: commentText)
    }

    let swift: TeamLog.FileEditCommentDetails

    public init(swift: TeamLog.FileEditCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileEditCommentType struct
@objc
public class DBXTeamLogFileEditCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileEditCommentType(description_: description_)
    }

    let swift: TeamLog.FileEditCommentType

    public init(swift: TeamLog.FileEditCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited files.
@objc
public class DBXTeamLogFileEditDetails: NSObject {
    let swift: TeamLog.FileEditDetails

    public init(swift: TeamLog.FileEditDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileEditType struct
@objc
public class DBXTeamLogFileEditType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileEditType(description_: description_)
    }

    let swift: TeamLog.FileEditType

    public init(swift: TeamLog.FileEditType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created copy reference to file/folder.
@objc
public class DBXTeamLogFileGetCopyReferenceDetails: NSObject {
    let swift: TeamLog.FileGetCopyReferenceDetails

    public init(swift: TeamLog.FileGetCopyReferenceDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileGetCopyReferenceType struct
@objc
public class DBXTeamLogFileGetCopyReferenceType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileGetCopyReferenceType(description_: description_)
    }

    let swift: TeamLog.FileGetCopyReferenceType

    public init(swift: TeamLog.FileGetCopyReferenceType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Liked file comment.
@objc
public class DBXTeamLogFileLikeCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileLikeCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileLikeCommentDetails

    public init(swift: TeamLog.FileLikeCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileLikeCommentType struct
@objc
public class DBXTeamLogFileLikeCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileLikeCommentType(description_: description_)
    }

    let swift: TeamLog.FileLikeCommentType

    public init(swift: TeamLog.FileLikeCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Locked/unlocked editing for a file.
@objc
public class DBXTeamLogFileLockingLockStatusChangedDetails: NSObject {
    /// Previous lock status of the file.
    @objc
    public var previousValue: DBXTeamLogLockStatus { DBXTeamLogLockStatus(swift: swift.previousValue) }
    /// New lock status of the file.
    @objc
    public var newValue: DBXTeamLogLockStatus { DBXTeamLogLockStatus(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogLockStatus, newValue: DBXTeamLogLockStatus) {
        self.swift = TeamLog.FileLockingLockStatusChangedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.FileLockingLockStatusChangedDetails

    public init(swift: TeamLog.FileLockingLockStatusChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileLockingLockStatusChangedType struct
@objc
public class DBXTeamLogFileLockingLockStatusChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileLockingLockStatusChangedType(description_: description_)
    }

    let swift: TeamLog.FileLockingLockStatusChangedType

    public init(swift: TeamLog.FileLockingLockStatusChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed file locking policy for team.
@objc
public class DBXTeamLogFileLockingPolicyChangedDetails: NSObject {
    /// New file locking policy.
    @objc
    public var newValue: DBXTeamPoliciesFileLockingPolicyState { DBXTeamPoliciesFileLockingPolicyState(swift: swift.newValue) }
    /// Previous file locking policy.
    @objc
    public var previousValue: DBXTeamPoliciesFileLockingPolicyState { DBXTeamPoliciesFileLockingPolicyState(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamPoliciesFileLockingPolicyState, previousValue: DBXTeamPoliciesFileLockingPolicyState) {
        self.swift = TeamLog.FileLockingPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.FileLockingPolicyChangedDetails

    public init(swift: TeamLog.FileLockingPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileLockingPolicyChangedType struct
@objc
public class DBXTeamLogFileLockingPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileLockingPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.FileLockingPolicyChangedType

    public init(swift: TeamLog.FileLockingPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Generic information relevant both for files and folders
@objc
public class DBXTeamLogFileOrFolderLogInfo: NSObject {
    /// Path relative to event context.
    @objc
    public var path: DBXTeamLogPathLogInfo { DBXTeamLogPathLogInfo(swift: swift.path) }
    /// Display name.
    @objc
    public var displayName: String? { swift.displayName }
    /// Unique ID.
    @objc
    public var fileId: String? { swift.fileId }
    /// File or folder size in bytes.
    @objc
    public var fileSize: NSNumber? { swift.fileSize as NSNumber? }

    @objc
    public init(path: DBXTeamLogPathLogInfo, displayName: String?, fileId: String?, fileSize: NSNumber?) {
        self.swift = TeamLog.FileOrFolderLogInfo(path: path.swift, displayName: displayName, fileId: fileId, fileSize: fileSize?.uint64Value)
    }

    let swift: TeamLog.FileOrFolderLogInfo

    public init(swift: TeamLog.FileOrFolderLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File's logged information.
@objc
public class DBXTeamLogFileLogInfo: DBXTeamLogFileOrFolderLogInfo {
    let subSwift: TeamLog.FileLogInfo

    public init(swift: TeamLog.FileLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Moved files and/or folders.
@objc
public class DBXTeamLogFileMoveDetails: NSObject {
    /// Relocate action details.
    @objc
    public var relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo] {
        swift.relocateActionDetails.map { DBXTeamLogRelocateAssetReferencesLogInfo(swift: $0) }
    }

    @objc
    public init(relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo]) {
        self.swift = TeamLog.FileMoveDetails(relocateActionDetails: relocateActionDetails.map(\.swift))
    }

    let swift: TeamLog.FileMoveDetails

    public init(swift: TeamLog.FileMoveDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileMoveType struct
@objc
public class DBXTeamLogFileMoveType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileMoveType(description_: description_)
    }

    let swift: TeamLog.FileMoveType

    public init(swift: TeamLog.FileMoveType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Permanently deleted files and/or folders.
@objc
public class DBXTeamLogFilePermanentlyDeleteDetails: NSObject {
    let swift: TeamLog.FilePermanentlyDeleteDetails

    public init(swift: TeamLog.FilePermanentlyDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FilePermanentlyDeleteType struct
@objc
public class DBXTeamLogFilePermanentlyDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FilePermanentlyDeleteType(description_: description_)
    }

    let swift: TeamLog.FilePermanentlyDeleteType

    public init(swift: TeamLog.FilePermanentlyDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Previewed files and/or folders.
@objc
public class DBXTeamLogFilePreviewDetails: NSObject {
    let swift: TeamLog.FilePreviewDetails

    public init(swift: TeamLog.FilePreviewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FilePreviewType struct
@objc
public class DBXTeamLogFilePreviewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FilePreviewType(description_: description_)
    }

    let swift: TeamLog.FilePreviewType

    public init(swift: TeamLog.FilePreviewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed File Provider Migration policy for team.
@objc
public class DBXTeamLogFileProviderMigrationPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamPoliciesFileProviderMigrationPolicyState { DBXTeamPoliciesFileProviderMigrationPolicyState(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamPoliciesFileProviderMigrationPolicyState { DBXTeamPoliciesFileProviderMigrationPolicyState(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamPoliciesFileProviderMigrationPolicyState, previousValue: DBXTeamPoliciesFileProviderMigrationPolicyState) {
        self.swift = TeamLog.FileProviderMigrationPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.FileProviderMigrationPolicyChangedDetails

    public init(swift: TeamLog.FileProviderMigrationPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileProviderMigrationPolicyChangedType struct
@objc
public class DBXTeamLogFileProviderMigrationPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileProviderMigrationPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.FileProviderMigrationPolicyChangedType

    public init(swift: TeamLog.FileProviderMigrationPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed files and/or folders.
@objc
public class DBXTeamLogFileRenameDetails: NSObject {
    /// Relocate action details.
    @objc
    public var relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo] {
        swift.relocateActionDetails.map { DBXTeamLogRelocateAssetReferencesLogInfo(swift: $0) }
    }

    @objc
    public init(relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo]) {
        self.swift = TeamLog.FileRenameDetails(relocateActionDetails: relocateActionDetails.map(\.swift))
    }

    let swift: TeamLog.FileRenameDetails

    public init(swift: TeamLog.FileRenameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRenameType struct
@objc
public class DBXTeamLogFileRenameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRenameType(description_: description_)
    }

    let swift: TeamLog.FileRenameType

    public init(swift: TeamLog.FileRenameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed file request.
@objc
public class DBXTeamLogFileRequestChangeDetails: NSObject {
    /// File request id. Might be missing due to historical data gap.
    @objc
    public var fileRequestId: String? { swift.fileRequestId }
    /// Previous file request details. Might be missing due to historical data gap.
    @objc
    public var previousDetails: DBXTeamLogFileRequestDetails? { guard let swift = swift.previousDetails else { return nil }
        return DBXTeamLogFileRequestDetails(swift: swift)
    }

    /// New file request details.
    @objc
    public var newDetails: DBXTeamLogFileRequestDetails { DBXTeamLogFileRequestDetails(swift: swift.newDetails) }

    @objc
    public init(newDetails: DBXTeamLogFileRequestDetails, fileRequestId: String?, previousDetails: DBXTeamLogFileRequestDetails?) {
        self.swift = TeamLog.FileRequestChangeDetails(newDetails: newDetails.swift, fileRequestId: fileRequestId, previousDetails: previousDetails?.swift)
    }

    let swift: TeamLog.FileRequestChangeDetails

    public init(swift: TeamLog.FileRequestChangeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestChangeType struct
@objc
public class DBXTeamLogFileRequestChangeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestChangeType(description_: description_)
    }

    let swift: TeamLog.FileRequestChangeType

    public init(swift: TeamLog.FileRequestChangeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Closed file request.
@objc
public class DBXTeamLogFileRequestCloseDetails: NSObject {
    /// File request id. Might be missing due to historical data gap.
    @objc
    public var fileRequestId: String? { swift.fileRequestId }
    /// Previous file request details. Might be missing due to historical data gap.
    @objc
    public var previousDetails: DBXTeamLogFileRequestDetails? { guard let swift = swift.previousDetails else { return nil }
        return DBXTeamLogFileRequestDetails(swift: swift)
    }

    @objc
    public init(fileRequestId: String?, previousDetails: DBXTeamLogFileRequestDetails?) {
        self.swift = TeamLog.FileRequestCloseDetails(fileRequestId: fileRequestId, previousDetails: previousDetails?.swift)
    }

    let swift: TeamLog.FileRequestCloseDetails

    public init(swift: TeamLog.FileRequestCloseDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestCloseType struct
@objc
public class DBXTeamLogFileRequestCloseType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestCloseType(description_: description_)
    }

    let swift: TeamLog.FileRequestCloseType

    public init(swift: TeamLog.FileRequestCloseType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created file request.
@objc
public class DBXTeamLogFileRequestCreateDetails: NSObject {
    /// File request id. Might be missing due to historical data gap.
    @objc
    public var fileRequestId: String? { swift.fileRequestId }
    /// File request details. Might be missing due to historical data gap.
    @objc
    public var requestDetails: DBXTeamLogFileRequestDetails? { guard let swift = swift.requestDetails else { return nil }
        return DBXTeamLogFileRequestDetails(swift: swift)
    }

    @objc
    public init(fileRequestId: String?, requestDetails: DBXTeamLogFileRequestDetails?) {
        self.swift = TeamLog.FileRequestCreateDetails(fileRequestId: fileRequestId, requestDetails: requestDetails?.swift)
    }

    let swift: TeamLog.FileRequestCreateDetails

    public init(swift: TeamLog.FileRequestCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestCreateType struct
@objc
public class DBXTeamLogFileRequestCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestCreateType(description_: description_)
    }

    let swift: TeamLog.FileRequestCreateType

    public init(swift: TeamLog.FileRequestCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File request deadline
@objc
public class DBXTeamLogFileRequestDeadline: NSObject {
    /// The deadline for this file request. Might be missing due to historical data gap.
    @objc
    public var deadline: Date? { swift.deadline }
    /// If set, allow uploads after the deadline has passed.
    @objc
    public var allowLateUploads: String? { swift.allowLateUploads }

    @objc
    public init(deadline: Date?, allowLateUploads: String?) {
        self.swift = TeamLog.FileRequestDeadline(deadline: deadline, allowLateUploads: allowLateUploads)
    }

    let swift: TeamLog.FileRequestDeadline

    public init(swift: TeamLog.FileRequestDeadline) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Delete file request.
@objc
public class DBXTeamLogFileRequestDeleteDetails: NSObject {
    /// File request id. Might be missing due to historical data gap.
    @objc
    public var fileRequestId: String? { swift.fileRequestId }
    /// Previous file request details. Might be missing due to historical data gap.
    @objc
    public var previousDetails: DBXTeamLogFileRequestDetails? { guard let swift = swift.previousDetails else { return nil }
        return DBXTeamLogFileRequestDetails(swift: swift)
    }

    @objc
    public init(fileRequestId: String?, previousDetails: DBXTeamLogFileRequestDetails?) {
        self.swift = TeamLog.FileRequestDeleteDetails(fileRequestId: fileRequestId, previousDetails: previousDetails?.swift)
    }

    let swift: TeamLog.FileRequestDeleteDetails

    public init(swift: TeamLog.FileRequestDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestDeleteType struct
@objc
public class DBXTeamLogFileRequestDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestDeleteType(description_: description_)
    }

    let swift: TeamLog.FileRequestDeleteType

    public init(swift: TeamLog.FileRequestDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File request details
@objc
public class DBXTeamLogFileRequestDetails: NSObject {
    /// Asset position in the Assets list.
    @objc
    public var assetIndex: NSNumber { swift.assetIndex as NSNumber }
    /// File request deadline.
    @objc
    public var deadline: DBXTeamLogFileRequestDeadline? { guard let swift = swift.deadline else { return nil }
        return DBXTeamLogFileRequestDeadline(swift: swift)
    }

    @objc
    public init(assetIndex: NSNumber, deadline: DBXTeamLogFileRequestDeadline?) {
        self.swift = TeamLog.FileRequestDetails(assetIndex: assetIndex.uint64Value, deadline: deadline?.swift)
    }

    let swift: TeamLog.FileRequestDetails

    public init(swift: TeamLog.FileRequestDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Received files for file request.
@objc
public class DBXTeamLogFileRequestReceiveFileDetails: NSObject {
    /// File request id. Might be missing due to historical data gap.
    @objc
    public var fileRequestId: String? { swift.fileRequestId }
    /// File request details. Might be missing due to historical data gap.
    @objc
    public var fileRequestDetails: DBXTeamLogFileRequestDetails? { guard let swift = swift.fileRequestDetails else { return nil }
        return DBXTeamLogFileRequestDetails(swift: swift)
    }

    /// Submitted file names.
    @objc
    public var submittedFileNames: [String] { swift.submittedFileNames }
    /// The name as provided by the submitter.
    @objc
    public var submitterName: String? { swift.submitterName }
    /// The email as provided by the submitter.
    @objc
    public var submitterEmail: String? { swift.submitterEmail }

    @objc
    public init(
        submittedFileNames: [String],
        fileRequestId: String?,
        fileRequestDetails: DBXTeamLogFileRequestDetails?,
        submitterName: String?,
        submitterEmail: String?
    ) {
        self.swift = TeamLog.FileRequestReceiveFileDetails(
            submittedFileNames: submittedFileNames,
            fileRequestId: fileRequestId,
            fileRequestDetails: fileRequestDetails?.swift,
            submitterName: submitterName,
            submitterEmail: submitterEmail
        )
    }

    let swift: TeamLog.FileRequestReceiveFileDetails

    public init(swift: TeamLog.FileRequestReceiveFileDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestReceiveFileType struct
@objc
public class DBXTeamLogFileRequestReceiveFileType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestReceiveFileType(description_: description_)
    }

    let swift: TeamLog.FileRequestReceiveFileType

    public init(swift: TeamLog.FileRequestReceiveFileType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled file requests.
@objc
public class DBXTeamLogFileRequestsChangePolicyDetails: NSObject {
    /// New file requests policy.
    @objc
    public var newValue: DBXTeamLogFileRequestsPolicy { DBXTeamLogFileRequestsPolicy(swift: swift.newValue) }
    /// Previous file requests policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogFileRequestsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogFileRequestsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogFileRequestsPolicy, previousValue: DBXTeamLogFileRequestsPolicy?) {
        self.swift = TeamLog.FileRequestsChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.FileRequestsChangePolicyDetails

    public init(swift: TeamLog.FileRequestsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestsChangePolicyType struct
@objc
public class DBXTeamLogFileRequestsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.FileRequestsChangePolicyType

    public init(swift: TeamLog.FileRequestsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled file request emails for everyone.
@objc
public class DBXTeamLogFileRequestsEmailsEnabledDetails: NSObject {
    let swift: TeamLog.FileRequestsEmailsEnabledDetails

    public init(swift: TeamLog.FileRequestsEmailsEnabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestsEmailsEnabledType struct
@objc
public class DBXTeamLogFileRequestsEmailsEnabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestsEmailsEnabledType(description_: description_)
    }

    let swift: TeamLog.FileRequestsEmailsEnabledType

    public init(swift: TeamLog.FileRequestsEmailsEnabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled file request emails for team.
@objc
public class DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails: NSObject {
    let swift: TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetails

    public init(swift: TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestsEmailsRestrictedToTeamOnlyType struct
@objc
public class DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRequestsEmailsRestrictedToTeamOnlyType(description_: description_)
    }

    let swift: TeamLog.FileRequestsEmailsRestrictedToTeamOnlyType

    public init(swift: TeamLog.FileRequestsEmailsRestrictedToTeamOnlyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File requests policy
@objc
public class DBXTeamLogFileRequestsPolicy: NSObject {
    let swift: TeamLog.FileRequestsPolicy

    public init(swift: TeamLog.FileRequestsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FileRequestsPolicy) -> DBXTeamLogFileRequestsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogFileRequestsPolicyDisabled()
        case .enabled:
            return DBXTeamLogFileRequestsPolicyEnabled()
        case .other:
            return DBXTeamLogFileRequestsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogFileRequestsPolicyDisabled? {
        self as? DBXTeamLogFileRequestsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogFileRequestsPolicyEnabled? {
        self as? DBXTeamLogFileRequestsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogFileRequestsPolicyOther? {
        self as? DBXTeamLogFileRequestsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileRequestsPolicyDisabled: DBXTeamLogFileRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileRequestsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileRequestsPolicyEnabled: DBXTeamLogFileRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileRequestsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileRequestsPolicyOther: DBXTeamLogFileRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileRequestsPolicy.other
        super.init(swift: swift)
    }
}

/// Resolved file comment.
@objc
public class DBXTeamLogFileResolveCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileResolveCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileResolveCommentDetails

    public init(swift: TeamLog.FileResolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileResolveCommentType struct
@objc
public class DBXTeamLogFileResolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileResolveCommentType(description_: description_)
    }

    let swift: TeamLog.FileResolveCommentType

    public init(swift: TeamLog.FileResolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored deleted files and/or folders.
@objc
public class DBXTeamLogFileRestoreDetails: NSObject {
    let swift: TeamLog.FileRestoreDetails

    public init(swift: TeamLog.FileRestoreDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRestoreType struct
@objc
public class DBXTeamLogFileRestoreType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRestoreType(description_: description_)
    }

    let swift: TeamLog.FileRestoreType

    public init(swift: TeamLog.FileRestoreType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reverted files to previous version.
@objc
public class DBXTeamLogFileRevertDetails: NSObject {
    let swift: TeamLog.FileRevertDetails

    public init(swift: TeamLog.FileRevertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRevertType struct
@objc
public class DBXTeamLogFileRevertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRevertType(description_: description_)
    }

    let swift: TeamLog.FileRevertType

    public init(swift: TeamLog.FileRevertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Rolled back file actions.
@objc
public class DBXTeamLogFileRollbackChangesDetails: NSObject {
    let swift: TeamLog.FileRollbackChangesDetails

    public init(swift: TeamLog.FileRollbackChangesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRollbackChangesType struct
@objc
public class DBXTeamLogFileRollbackChangesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileRollbackChangesType(description_: description_)
    }

    let swift: TeamLog.FileRollbackChangesType

    public init(swift: TeamLog.FileRollbackChangesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Saved file/folder using copy reference.
@objc
public class DBXTeamLogFileSaveCopyReferenceDetails: NSObject {
    /// Relocate action details.
    @objc
    public var relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo] {
        swift.relocateActionDetails.map { DBXTeamLogRelocateAssetReferencesLogInfo(swift: $0) }
    }

    @objc
    public init(relocateActionDetails: [DBXTeamLogRelocateAssetReferencesLogInfo]) {
        self.swift = TeamLog.FileSaveCopyReferenceDetails(relocateActionDetails: relocateActionDetails.map(\.swift))
    }

    let swift: TeamLog.FileSaveCopyReferenceDetails

    public init(swift: TeamLog.FileSaveCopyReferenceDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileSaveCopyReferenceType struct
@objc
public class DBXTeamLogFileSaveCopyReferenceType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileSaveCopyReferenceType(description_: description_)
    }

    let swift: TeamLog.FileSaveCopyReferenceType

    public init(swift: TeamLog.FileSaveCopyReferenceType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Transfer files added.
@objc
public class DBXTeamLogFileTransfersFileAddDetails: NSObject {
    /// Transfer id.
    @objc
    public var fileTransferId: String { swift.fileTransferId }

    @objc
    public init(fileTransferId: String) {
        self.swift = TeamLog.FileTransfersFileAddDetails(fileTransferId: fileTransferId)
    }

    let swift: TeamLog.FileTransfersFileAddDetails

    public init(swift: TeamLog.FileTransfersFileAddDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersFileAddType struct
@objc
public class DBXTeamLogFileTransfersFileAddType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersFileAddType(description_: description_)
    }

    let swift: TeamLog.FileTransfersFileAddType

    public init(swift: TeamLog.FileTransfersFileAddType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// File transfers policy
@objc
public class DBXTeamLogFileTransfersPolicy: NSObject {
    let swift: TeamLog.FileTransfersPolicy

    public init(swift: TeamLog.FileTransfersPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FileTransfersPolicy) -> DBXTeamLogFileTransfersPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogFileTransfersPolicyDisabled()
        case .enabled:
            return DBXTeamLogFileTransfersPolicyEnabled()
        case .other:
            return DBXTeamLogFileTransfersPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogFileTransfersPolicyDisabled? {
        self as? DBXTeamLogFileTransfersPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogFileTransfersPolicyEnabled? {
        self as? DBXTeamLogFileTransfersPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogFileTransfersPolicyOther? {
        self as? DBXTeamLogFileTransfersPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileTransfersPolicyDisabled: DBXTeamLogFileTransfersPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileTransfersPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileTransfersPolicyEnabled: DBXTeamLogFileTransfersPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileTransfersPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFileTransfersPolicyOther: DBXTeamLogFileTransfersPolicy {
    @objc
    public init() {
        let swift = TeamLog.FileTransfersPolicy.other
        super.init(swift: swift)
    }
}

/// Changed file transfers policy for team.
@objc
public class DBXTeamLogFileTransfersPolicyChangedDetails: NSObject {
    /// New file transfers policy.
    @objc
    public var newValue: DBXTeamLogFileTransfersPolicy { DBXTeamLogFileTransfersPolicy(swift: swift.newValue) }
    /// Previous file transfers policy.
    @objc
    public var previousValue: DBXTeamLogFileTransfersPolicy { DBXTeamLogFileTransfersPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogFileTransfersPolicy, previousValue: DBXTeamLogFileTransfersPolicy) {
        self.swift = TeamLog.FileTransfersPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.FileTransfersPolicyChangedDetails

    public init(swift: TeamLog.FileTransfersPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersPolicyChangedType struct
@objc
public class DBXTeamLogFileTransfersPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.FileTransfersPolicyChangedType

    public init(swift: TeamLog.FileTransfersPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted transfer.
@objc
public class DBXTeamLogFileTransfersTransferDeleteDetails: NSObject {
    /// Transfer id.
    @objc
    public var fileTransferId: String { swift.fileTransferId }

    @objc
    public init(fileTransferId: String) {
        self.swift = TeamLog.FileTransfersTransferDeleteDetails(fileTransferId: fileTransferId)
    }

    let swift: TeamLog.FileTransfersTransferDeleteDetails

    public init(swift: TeamLog.FileTransfersTransferDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersTransferDeleteType struct
@objc
public class DBXTeamLogFileTransfersTransferDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersTransferDeleteType(description_: description_)
    }

    let swift: TeamLog.FileTransfersTransferDeleteType

    public init(swift: TeamLog.FileTransfersTransferDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Transfer downloaded.
@objc
public class DBXTeamLogFileTransfersTransferDownloadDetails: NSObject {
    /// Transfer id.
    @objc
    public var fileTransferId: String { swift.fileTransferId }

    @objc
    public init(fileTransferId: String) {
        self.swift = TeamLog.FileTransfersTransferDownloadDetails(fileTransferId: fileTransferId)
    }

    let swift: TeamLog.FileTransfersTransferDownloadDetails

    public init(swift: TeamLog.FileTransfersTransferDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersTransferDownloadType struct
@objc
public class DBXTeamLogFileTransfersTransferDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersTransferDownloadType(description_: description_)
    }

    let swift: TeamLog.FileTransfersTransferDownloadType

    public init(swift: TeamLog.FileTransfersTransferDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Sent transfer.
@objc
public class DBXTeamLogFileTransfersTransferSendDetails: NSObject {
    /// Transfer id.
    @objc
    public var fileTransferId: String { swift.fileTransferId }

    @objc
    public init(fileTransferId: String) {
        self.swift = TeamLog.FileTransfersTransferSendDetails(fileTransferId: fileTransferId)
    }

    let swift: TeamLog.FileTransfersTransferSendDetails

    public init(swift: TeamLog.FileTransfersTransferSendDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersTransferSendType struct
@objc
public class DBXTeamLogFileTransfersTransferSendType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersTransferSendType(description_: description_)
    }

    let swift: TeamLog.FileTransfersTransferSendType

    public init(swift: TeamLog.FileTransfersTransferSendType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Viewed transfer.
@objc
public class DBXTeamLogFileTransfersTransferViewDetails: NSObject {
    /// Transfer id.
    @objc
    public var fileTransferId: String { swift.fileTransferId }

    @objc
    public init(fileTransferId: String) {
        self.swift = TeamLog.FileTransfersTransferViewDetails(fileTransferId: fileTransferId)
    }

    let swift: TeamLog.FileTransfersTransferViewDetails

    public init(swift: TeamLog.FileTransfersTransferViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileTransfersTransferViewType struct
@objc
public class DBXTeamLogFileTransfersTransferViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileTransfersTransferViewType(description_: description_)
    }

    let swift: TeamLog.FileTransfersTransferViewType

    public init(swift: TeamLog.FileTransfersTransferViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unliked file comment.
@objc
public class DBXTeamLogFileUnlikeCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileUnlikeCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileUnlikeCommentDetails

    public init(swift: TeamLog.FileUnlikeCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileUnlikeCommentType struct
@objc
public class DBXTeamLogFileUnlikeCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileUnlikeCommentType(description_: description_)
    }

    let swift: TeamLog.FileUnlikeCommentType

    public init(swift: TeamLog.FileUnlikeCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unresolved file comment.
@objc
public class DBXTeamLogFileUnresolveCommentDetails: NSObject {
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(commentText: String?) {
        self.swift = TeamLog.FileUnresolveCommentDetails(commentText: commentText)
    }

    let swift: TeamLog.FileUnresolveCommentDetails

    public init(swift: TeamLog.FileUnresolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileUnresolveCommentType struct
@objc
public class DBXTeamLogFileUnresolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FileUnresolveCommentType(description_: description_)
    }

    let swift: TeamLog.FileUnresolveCommentType

    public init(swift: TeamLog.FileUnresolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether applying link restrictions on all team owned folders
@objc
public class DBXTeamLogFolderLinkRestrictionPolicy: NSObject {
    let swift: TeamLog.FolderLinkRestrictionPolicy

    public init(swift: TeamLog.FolderLinkRestrictionPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.FolderLinkRestrictionPolicy) -> DBXTeamLogFolderLinkRestrictionPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogFolderLinkRestrictionPolicyDisabled()
        case .enabled:
            return DBXTeamLogFolderLinkRestrictionPolicyEnabled()
        case .other:
            return DBXTeamLogFolderLinkRestrictionPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogFolderLinkRestrictionPolicyDisabled? {
        self as? DBXTeamLogFolderLinkRestrictionPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogFolderLinkRestrictionPolicyEnabled? {
        self as? DBXTeamLogFolderLinkRestrictionPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogFolderLinkRestrictionPolicyOther? {
        self as? DBXTeamLogFolderLinkRestrictionPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFolderLinkRestrictionPolicyDisabled: DBXTeamLogFolderLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamLog.FolderLinkRestrictionPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFolderLinkRestrictionPolicyEnabled: DBXTeamLogFolderLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamLog.FolderLinkRestrictionPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogFolderLinkRestrictionPolicyOther: DBXTeamLogFolderLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamLog.FolderLinkRestrictionPolicy.other
        super.init(swift: swift)
    }
}

/// Changed folder link restrictions policy for team.
@objc
public class DBXTeamLogFolderLinkRestrictionPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogFolderLinkRestrictionPolicy { DBXTeamLogFolderLinkRestrictionPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogFolderLinkRestrictionPolicy { DBXTeamLogFolderLinkRestrictionPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogFolderLinkRestrictionPolicy, previousValue: DBXTeamLogFolderLinkRestrictionPolicy) {
        self.swift = TeamLog.FolderLinkRestrictionPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.FolderLinkRestrictionPolicyChangedDetails

    public init(swift: TeamLog.FolderLinkRestrictionPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FolderLinkRestrictionPolicyChangedType struct
@objc
public class DBXTeamLogFolderLinkRestrictionPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FolderLinkRestrictionPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.FolderLinkRestrictionPolicyChangedType

    public init(swift: TeamLog.FolderLinkRestrictionPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Folder's logged information.
@objc
public class DBXTeamLogFolderLogInfo: DBXTeamLogFileOrFolderLogInfo {
    /// Number of files within the folder.
    @objc
    public var fileCount: NSNumber? { subSwift.fileCount as NSNumber? }

    @objc
    public init(path: DBXTeamLogPathLogInfo, displayName: String?, fileId: String?, fileSize: NSNumber?, fileCount: NSNumber?) {
        let swift = TeamLog.FolderLogInfo(
            path: path.swift,
            displayName: displayName,
            fileId: fileId,
            fileSize: fileSize?.uint64Value,
            fileCount: fileCount?.uint64Value
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.FolderLogInfo

    public init(swift: TeamLog.FolderLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Updated folder overview.
@objc
public class DBXTeamLogFolderOverviewDescriptionChangedDetails: NSObject {
    /// Folder Overview location position in the Assets list.
    @objc
    public var folderOverviewLocationAsset: NSNumber { swift.folderOverviewLocationAsset as NSNumber }

    @objc
    public init(folderOverviewLocationAsset: NSNumber) {
        self.swift = TeamLog.FolderOverviewDescriptionChangedDetails(folderOverviewLocationAsset: folderOverviewLocationAsset.uint64Value)
    }

    let swift: TeamLog.FolderOverviewDescriptionChangedDetails

    public init(swift: TeamLog.FolderOverviewDescriptionChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FolderOverviewDescriptionChangedType struct
@objc
public class DBXTeamLogFolderOverviewDescriptionChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FolderOverviewDescriptionChangedType(description_: description_)
    }

    let swift: TeamLog.FolderOverviewDescriptionChangedType

    public init(swift: TeamLog.FolderOverviewDescriptionChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Pinned item to folder overview.
@objc
public class DBXTeamLogFolderOverviewItemPinnedDetails: NSObject {
    /// Folder Overview location position in the Assets list.
    @objc
    public var folderOverviewLocationAsset: NSNumber { swift.folderOverviewLocationAsset as NSNumber }
    /// Pinned items positions in the Assets list.
    @objc
    public var pinnedItemsAssetIndices: [NSNumber] { swift.pinnedItemsAssetIndices.map { $0 as NSNumber } }

    @objc
    public init(folderOverviewLocationAsset: NSNumber, pinnedItemsAssetIndices: [NSNumber]) {
        self.swift = TeamLog.FolderOverviewItemPinnedDetails(
            folderOverviewLocationAsset: folderOverviewLocationAsset.uint64Value,
            pinnedItemsAssetIndices: pinnedItemsAssetIndices.map(\.uint64Value)
        )
    }

    let swift: TeamLog.FolderOverviewItemPinnedDetails

    public init(swift: TeamLog.FolderOverviewItemPinnedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FolderOverviewItemPinnedType struct
@objc
public class DBXTeamLogFolderOverviewItemPinnedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FolderOverviewItemPinnedType(description_: description_)
    }

    let swift: TeamLog.FolderOverviewItemPinnedType

    public init(swift: TeamLog.FolderOverviewItemPinnedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unpinned item from folder overview.
@objc
public class DBXTeamLogFolderOverviewItemUnpinnedDetails: NSObject {
    /// Folder Overview location position in the Assets list.
    @objc
    public var folderOverviewLocationAsset: NSNumber { swift.folderOverviewLocationAsset as NSNumber }
    /// Pinned items positions in the Assets list.
    @objc
    public var pinnedItemsAssetIndices: [NSNumber] { swift.pinnedItemsAssetIndices.map { $0 as NSNumber } }

    @objc
    public init(folderOverviewLocationAsset: NSNumber, pinnedItemsAssetIndices: [NSNumber]) {
        self.swift = TeamLog.FolderOverviewItemUnpinnedDetails(
            folderOverviewLocationAsset: folderOverviewLocationAsset.uint64Value,
            pinnedItemsAssetIndices: pinnedItemsAssetIndices.map(\.uint64Value)
        )
    }

    let swift: TeamLog.FolderOverviewItemUnpinnedDetails

    public init(swift: TeamLog.FolderOverviewItemUnpinnedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FolderOverviewItemUnpinnedType struct
@objc
public class DBXTeamLogFolderOverviewItemUnpinnedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.FolderOverviewItemUnpinnedType(description_: description_)
    }

    let swift: TeamLog.FolderOverviewItemUnpinnedType

    public init(swift: TeamLog.FolderOverviewItemUnpinnedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Geographic location details.
@objc
public class DBXTeamLogGeoLocationLogInfo: NSObject {
    /// City name.
    @objc
    public var city: String? { swift.city }
    /// Region name.
    @objc
    public var region: String? { swift.region }
    /// Country code.
    @objc
    public var country: String? { swift.country }
    /// IP address.
    @objc
    public var ipAddress: String { swift.ipAddress }

    @objc
    public init(ipAddress: String, city: String?, region: String?, country: String?) {
        self.swift = TeamLog.GeoLocationLogInfo(ipAddress: ipAddress, city: city, region: region, country: country)
    }

    let swift: TeamLog.GeoLocationLogInfo

    public init(swift: TeamLog.GeoLocationLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GetTeamEventsArg struct
@objc
public class DBXTeamLogGetTeamEventsArg: NSObject {
    /// The maximal number of results to return per call. Note that some calls may not return limit number of
    /// events, and may even return no events, even with `has_more` set to true. In this case, callers should
    /// fetch again using getEventsContinue.
    @objc
    public var limit: NSNumber { swift.limit as NSNumber }
    /// Filter the events by account ID. Return only events with this account_id as either Actor, Context, or
    /// Participants.
    @objc
    public var accountId: String? { swift.accountId }
    /// Filter by time range.
    @objc
    public var time: DBXTeamCommonTimeRange? { guard let swift = swift.time else { return nil }
        return DBXTeamCommonTimeRange(swift: swift)
    }

    /// Filter the returned events to a single category. Note that category shouldn't be provided together with
    /// event_type.
    @objc
    public var category: DBXTeamLogEventCategory? { guard let swift = swift.category else { return nil }
        return DBXTeamLogEventCategory(swift: swift)
    }

    /// Filter the returned events to a single event type. Note that event_type shouldn't be provided together with
    /// category.
    @objc
    public var eventType: DBXTeamLogEventTypeArg? { guard let swift = swift.eventType else { return nil }
        return DBXTeamLogEventTypeArg(swift: swift)
    }

    @objc
    public init(limit: NSNumber, accountId: String?, time: DBXTeamCommonTimeRange?, category: DBXTeamLogEventCategory?, eventType: DBXTeamLogEventTypeArg?) {
        self.swift = TeamLog.GetTeamEventsArg(
            limit: limit.uint32Value,
            accountId: accountId,
            time: time?.swift,
            category: category?.swift,
            eventType: eventType?.swift
        )
    }

    let swift: TeamLog.GetTeamEventsArg

    public init(swift: TeamLog.GetTeamEventsArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GetTeamEventsContinueArg struct
@objc
public class DBXTeamLogGetTeamEventsContinueArg: NSObject {
    /// Indicates from what point to get the next set of events.
    @objc
    public var cursor: String { swift.cursor }

    @objc
    public init(cursor: String) {
        self.swift = TeamLog.GetTeamEventsContinueArg(cursor: cursor)
    }

    let swift: TeamLog.GetTeamEventsContinueArg

    public init(swift: TeamLog.GetTeamEventsContinueArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Errors that can be raised when calling getEventsContinue.
@objc
public class DBXTeamLogGetTeamEventsContinueError: NSObject {
    let swift: TeamLog.GetTeamEventsContinueError

    public init(swift: TeamLog.GetTeamEventsContinueError) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.GetTeamEventsContinueError) -> DBXTeamLogGetTeamEventsContinueError {
        switch swift {
        case .badCursor:
            return DBXTeamLogGetTeamEventsContinueErrorBadCursor()
        case .reset(let swiftArg):
            let arg = swiftArg
            return DBXTeamLogGetTeamEventsContinueErrorReset(arg)
        case .other:
            return DBXTeamLogGetTeamEventsContinueErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asBadCursor: DBXTeamLogGetTeamEventsContinueErrorBadCursor? {
        self as? DBXTeamLogGetTeamEventsContinueErrorBadCursor
    }

    @objc
    public var asReset: DBXTeamLogGetTeamEventsContinueErrorReset? {
        self as? DBXTeamLogGetTeamEventsContinueErrorReset
    }

    @objc
    public var asOther: DBXTeamLogGetTeamEventsContinueErrorOther? {
        self as? DBXTeamLogGetTeamEventsContinueErrorOther
    }
}

/// Bad cursor.
@objc
public class DBXTeamLogGetTeamEventsContinueErrorBadCursor: DBXTeamLogGetTeamEventsContinueError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsContinueError.badCursor
        super.init(swift: swift)
    }
}

/// Cursors are intended to be used quickly. Individual cursor values are normally valid for days, but in rare
/// cases may be reset sooner. Cursor reset errors should be handled by fetching a new cursor from
/// getEvents. The associated value is the approximate timestamp of the most recent event returned by
/// the cursor. This should be used as a resumption point when calling getEvents to obtain a new cursor.
@objc
public class DBXTeamLogGetTeamEventsContinueErrorReset: DBXTeamLogGetTeamEventsContinueError {
    @objc
    public var reset: Date

    @objc
    public init(_ arg: Date) {
        self.reset = arg
        let swift = TeamLog.GetTeamEventsContinueError.reset(arg)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGetTeamEventsContinueErrorOther: DBXTeamLogGetTeamEventsContinueError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsContinueError.other
        super.init(swift: swift)
    }
}

/// Errors that can be raised when calling getEvents.
@objc
public class DBXTeamLogGetTeamEventsError: NSObject {
    let swift: TeamLog.GetTeamEventsError

    public init(swift: TeamLog.GetTeamEventsError) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.GetTeamEventsError) -> DBXTeamLogGetTeamEventsError {
        switch swift {
        case .accountIdNotFound:
            return DBXTeamLogGetTeamEventsErrorAccountIdNotFound()
        case .invalidTimeRange:
            return DBXTeamLogGetTeamEventsErrorInvalidTimeRange()
        case .invalidFilters:
            return DBXTeamLogGetTeamEventsErrorInvalidFilters()
        case .other:
            return DBXTeamLogGetTeamEventsErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAccountIdNotFound: DBXTeamLogGetTeamEventsErrorAccountIdNotFound? {
        self as? DBXTeamLogGetTeamEventsErrorAccountIdNotFound
    }

    @objc
    public var asInvalidTimeRange: DBXTeamLogGetTeamEventsErrorInvalidTimeRange? {
        self as? DBXTeamLogGetTeamEventsErrorInvalidTimeRange
    }

    @objc
    public var asInvalidFilters: DBXTeamLogGetTeamEventsErrorInvalidFilters? {
        self as? DBXTeamLogGetTeamEventsErrorInvalidFilters
    }

    @objc
    public var asOther: DBXTeamLogGetTeamEventsErrorOther? {
        self as? DBXTeamLogGetTeamEventsErrorOther
    }
}

/// No user found matching the provided account_id.
@objc
public class DBXTeamLogGetTeamEventsErrorAccountIdNotFound: DBXTeamLogGetTeamEventsError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsError.accountIdNotFound
        super.init(swift: swift)
    }
}

/// Invalid time range.
@objc
public class DBXTeamLogGetTeamEventsErrorInvalidTimeRange: DBXTeamLogGetTeamEventsError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsError.invalidTimeRange
        super.init(swift: swift)
    }
}

/// Invalid filters. Do not specify both event_type and category parameters for the same call.
@objc
public class DBXTeamLogGetTeamEventsErrorInvalidFilters: DBXTeamLogGetTeamEventsError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsError.invalidFilters
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGetTeamEventsErrorOther: DBXTeamLogGetTeamEventsError {
    @objc
    public init() {
        let swift = TeamLog.GetTeamEventsError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible GetTeamEventsResult struct
@objc
public class DBXTeamLogGetTeamEventsResult: NSObject {
    /// List of events. Note that events are not guaranteed to be sorted by their timestamp value.
    @objc
    public var events: [DBXTeamLogTeamEvent] { swift.events.map { DBXTeamLogTeamEvent(swift: $0) } }
    /// Pass the cursor into getEventsContinue to obtain additional events. The value of cursor may change for each
    /// response from getEventsContinue, regardless of the value of hasMore; older cursor strings may expire.
    /// Thus, callers should ensure that they update their cursor based on the latest value of cursor after each
    /// call, and poll regularly if they wish to poll for new events. Callers should handle reset exceptions for
    /// expired cursors.
    @objc
    public var cursor: String { swift.cursor }
    /// Is true if there may be additional events that have not been returned yet. An additional call to
    /// getEventsContinue can retrieve them. Note that hasMore may be true, even if events is empty.
    @objc
    public var hasMore: NSNumber { swift.hasMore as NSNumber }

    @objc
    public init(events: [DBXTeamLogTeamEvent], cursor: String, hasMore: NSNumber) {
        self.swift = TeamLog.GetTeamEventsResult(events: events.map(\.swift), cursor: cursor, hasMore: hasMore.boolValue)
    }

    let swift: TeamLog.GetTeamEventsResult

    public init(swift: TeamLog.GetTeamEventsResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled Google single sign-on for team.
@objc
public class DBXTeamLogGoogleSsoChangePolicyDetails: NSObject {
    /// New Google single sign-on policy.
    @objc
    public var newValue: DBXTeamLogGoogleSsoPolicy { DBXTeamLogGoogleSsoPolicy(swift: swift.newValue) }
    /// Previous Google single sign-on policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogGoogleSsoPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogGoogleSsoPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogGoogleSsoPolicy, previousValue: DBXTeamLogGoogleSsoPolicy?) {
        self.swift = TeamLog.GoogleSsoChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.GoogleSsoChangePolicyDetails

    public init(swift: TeamLog.GoogleSsoChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GoogleSsoChangePolicyType struct
@objc
public class DBXTeamLogGoogleSsoChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GoogleSsoChangePolicyType(description_: description_)
    }

    let swift: TeamLog.GoogleSsoChangePolicyType

    public init(swift: TeamLog.GoogleSsoChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Google SSO policy
@objc
public class DBXTeamLogGoogleSsoPolicy: NSObject {
    let swift: TeamLog.GoogleSsoPolicy

    public init(swift: TeamLog.GoogleSsoPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.GoogleSsoPolicy) -> DBXTeamLogGoogleSsoPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogGoogleSsoPolicyDisabled()
        case .enabled:
            return DBXTeamLogGoogleSsoPolicyEnabled()
        case .other:
            return DBXTeamLogGoogleSsoPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogGoogleSsoPolicyDisabled? {
        self as? DBXTeamLogGoogleSsoPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogGoogleSsoPolicyEnabled? {
        self as? DBXTeamLogGoogleSsoPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogGoogleSsoPolicyOther? {
        self as? DBXTeamLogGoogleSsoPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGoogleSsoPolicyDisabled: DBXTeamLogGoogleSsoPolicy {
    @objc
    public init() {
        let swift = TeamLog.GoogleSsoPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGoogleSsoPolicyEnabled: DBXTeamLogGoogleSsoPolicy {
    @objc
    public init() {
        let swift = TeamLog.GoogleSsoPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGoogleSsoPolicyOther: DBXTeamLogGoogleSsoPolicy {
    @objc
    public init() {
        let swift = TeamLog.GoogleSsoPolicy.other
        super.init(swift: swift)
    }
}

/// Couldn't add a folder to a policy.
@objc
public class DBXTeamLogGovernancePolicyAddFolderFailedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Folder.
    @objc
    public var folder: String { swift.folder }
    /// Reason.
    @objc
    public var reason: String? { swift.reason }

    @objc
    public init(governancePolicyId: String, name: String, folder: String, policyType: DBXTeamLogPolicyType?, reason: String?) {
        self.swift = TeamLog.GovernancePolicyAddFolderFailedDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            folder: folder,
            policyType: policyType?.swift,
            reason: reason
        )
    }

    let swift: TeamLog.GovernancePolicyAddFolderFailedDetails

    public init(swift: TeamLog.GovernancePolicyAddFolderFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyAddFolderFailedType struct
@objc
public class DBXTeamLogGovernancePolicyAddFolderFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyAddFolderFailedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyAddFolderFailedType

    public init(swift: TeamLog.GovernancePolicyAddFolderFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added folders to policy.
@objc
public class DBXTeamLogGovernancePolicyAddFoldersDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Folders.
    @objc
    public var folders: [String]? { swift.folders }

    @objc
    public init(governancePolicyId: String, name: String, policyType: DBXTeamLogPolicyType?, folders: [String]?) {
        self.swift = TeamLog.GovernancePolicyAddFoldersDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            policyType: policyType?.swift,
            folders: folders
        )
    }

    let swift: TeamLog.GovernancePolicyAddFoldersDetails

    public init(swift: TeamLog.GovernancePolicyAddFoldersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyAddFoldersType struct
@objc
public class DBXTeamLogGovernancePolicyAddFoldersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyAddFoldersType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyAddFoldersType

    public init(swift: TeamLog.GovernancePolicyAddFoldersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Content disposed.
@objc
public class DBXTeamLogGovernancePolicyContentDisposedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Disposition type.
    @objc
    public var dispositionType: DBXTeamLogDispositionActionType { DBXTeamLogDispositionActionType(swift: swift.dispositionType) }

    @objc
    public init(governancePolicyId: String, name: String, dispositionType: DBXTeamLogDispositionActionType, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyContentDisposedDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            dispositionType: dispositionType.swift,
            policyType: policyType?.swift
        )
    }

    let swift: TeamLog.GovernancePolicyContentDisposedDetails

    public init(swift: TeamLog.GovernancePolicyContentDisposedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyContentDisposedType struct
@objc
public class DBXTeamLogGovernancePolicyContentDisposedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyContentDisposedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyContentDisposedType

    public init(swift: TeamLog.GovernancePolicyContentDisposedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Activated a new policy.
@objc
public class DBXTeamLogGovernancePolicyCreateDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Duration in days.
    @objc
    public var duration: DBXTeamLogDurationLogInfo { DBXTeamLogDurationLogInfo(swift: swift.duration) }
    /// Folders.
    @objc
    public var folders: [String]? { swift.folders }

    @objc
    public init(governancePolicyId: String, name: String, duration: DBXTeamLogDurationLogInfo, policyType: DBXTeamLogPolicyType?, folders: [String]?) {
        self.swift = TeamLog.GovernancePolicyCreateDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            duration: duration.swift,
            policyType: policyType?.swift,
            folders: folders
        )
    }

    let swift: TeamLog.GovernancePolicyCreateDetails

    public init(swift: TeamLog.GovernancePolicyCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyCreateType struct
@objc
public class DBXTeamLogGovernancePolicyCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyCreateType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyCreateType

    public init(swift: TeamLog.GovernancePolicyCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted a policy.
@objc
public class DBXTeamLogGovernancePolicyDeleteDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    @objc
    public init(governancePolicyId: String, name: String, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyDeleteDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType?.swift)
    }

    let swift: TeamLog.GovernancePolicyDeleteDetails

    public init(swift: TeamLog.GovernancePolicyDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyDeleteType struct
@objc
public class DBXTeamLogGovernancePolicyDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyDeleteType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyDeleteType

    public init(swift: TeamLog.GovernancePolicyDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited policy.
@objc
public class DBXTeamLogGovernancePolicyEditDetailsDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Attribute.
    @objc
    public var attribute: String { swift.attribute }
    /// From.
    @objc
    public var previousValue: String { swift.previousValue }
    /// To.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(governancePolicyId: String, name: String, attribute: String, previousValue: String, newValue: String, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyEditDetailsDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            attribute: attribute,
            previousValue: previousValue,
            newValue: newValue,
            policyType: policyType?.swift
        )
    }

    let swift: TeamLog.GovernancePolicyEditDetailsDetails

    public init(swift: TeamLog.GovernancePolicyEditDetailsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyEditDetailsType struct
@objc
public class DBXTeamLogGovernancePolicyEditDetailsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyEditDetailsType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyEditDetailsType

    public init(swift: TeamLog.GovernancePolicyEditDetailsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed policy duration.
@objc
public class DBXTeamLogGovernancePolicyEditDurationDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// From.
    @objc
    public var previousValue: DBXTeamLogDurationLogInfo { DBXTeamLogDurationLogInfo(swift: swift.previousValue) }
    /// To.
    @objc
    public var newValue: DBXTeamLogDurationLogInfo { DBXTeamLogDurationLogInfo(swift: swift.newValue) }

    @objc
    public init(
        governancePolicyId: String,
        name: String,
        previousValue: DBXTeamLogDurationLogInfo,
        newValue: DBXTeamLogDurationLogInfo,
        policyType: DBXTeamLogPolicyType?
    ) {
        self.swift = TeamLog.GovernancePolicyEditDurationDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            previousValue: previousValue.swift,
            newValue: newValue.swift,
            policyType: policyType?.swift
        )
    }

    let swift: TeamLog.GovernancePolicyEditDurationDetails

    public init(swift: TeamLog.GovernancePolicyEditDurationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyEditDurationType struct
@objc
public class DBXTeamLogGovernancePolicyEditDurationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyEditDurationType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyEditDurationType

    public init(swift: TeamLog.GovernancePolicyEditDurationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created a policy download.
@objc
public class DBXTeamLogGovernancePolicyExportCreatedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Export name.
    @objc
    public var exportName: String { swift.exportName }

    @objc
    public init(governancePolicyId: String, name: String, exportName: String, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyExportCreatedDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            exportName: exportName,
            policyType: policyType?.swift
        )
    }

    let swift: TeamLog.GovernancePolicyExportCreatedDetails

    public init(swift: TeamLog.GovernancePolicyExportCreatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyExportCreatedType struct
@objc
public class DBXTeamLogGovernancePolicyExportCreatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyExportCreatedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyExportCreatedType

    public init(swift: TeamLog.GovernancePolicyExportCreatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed a policy download.
@objc
public class DBXTeamLogGovernancePolicyExportRemovedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Export name.
    @objc
    public var exportName: String { swift.exportName }

    @objc
    public init(governancePolicyId: String, name: String, exportName: String, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyExportRemovedDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            exportName: exportName,
            policyType: policyType?.swift
        )
    }

    let swift: TeamLog.GovernancePolicyExportRemovedDetails

    public init(swift: TeamLog.GovernancePolicyExportRemovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyExportRemovedType struct
@objc
public class DBXTeamLogGovernancePolicyExportRemovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyExportRemovedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyExportRemovedType

    public init(swift: TeamLog.GovernancePolicyExportRemovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed folders from policy.
@objc
public class DBXTeamLogGovernancePolicyRemoveFoldersDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Folders.
    @objc
    public var folders: [String]? { swift.folders }
    /// Reason.
    @objc
    public var reason: String? { swift.reason }

    @objc
    public init(governancePolicyId: String, name: String, policyType: DBXTeamLogPolicyType?, folders: [String]?, reason: String?) {
        self.swift = TeamLog.GovernancePolicyRemoveFoldersDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            policyType: policyType?.swift,
            folders: folders,
            reason: reason
        )
    }

    let swift: TeamLog.GovernancePolicyRemoveFoldersDetails

    public init(swift: TeamLog.GovernancePolicyRemoveFoldersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyRemoveFoldersType struct
@objc
public class DBXTeamLogGovernancePolicyRemoveFoldersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyRemoveFoldersType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyRemoveFoldersType

    public init(swift: TeamLog.GovernancePolicyRemoveFoldersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created a summary report for a policy.
@objc
public class DBXTeamLogGovernancePolicyReportCreatedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    @objc
    public init(governancePolicyId: String, name: String, policyType: DBXTeamLogPolicyType?) {
        self.swift = TeamLog.GovernancePolicyReportCreatedDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType?.swift)
    }

    let swift: TeamLog.GovernancePolicyReportCreatedDetails

    public init(swift: TeamLog.GovernancePolicyReportCreatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyReportCreatedType struct
@objc
public class DBXTeamLogGovernancePolicyReportCreatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyReportCreatedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyReportCreatedType

    public init(swift: TeamLog.GovernancePolicyReportCreatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded content from a policy.
@objc
public class DBXTeamLogGovernancePolicyZipPartDownloadedDetails: NSObject {
    /// Policy ID.
    @objc
    public var governancePolicyId: String { swift.governancePolicyId }
    /// Policy name.
    @objc
    public var name: String { swift.name }
    /// Policy type.
    @objc
    public var policyType: DBXTeamLogPolicyType? { guard let swift = swift.policyType else { return nil }
        return DBXTeamLogPolicyType(swift: swift)
    }

    /// Export name.
    @objc
    public var exportName: String { swift.exportName }
    /// Part.
    @objc
    public var part: String? { swift.part }

    @objc
    public init(governancePolicyId: String, name: String, exportName: String, policyType: DBXTeamLogPolicyType?, part: String?) {
        self.swift = TeamLog.GovernancePolicyZipPartDownloadedDetails(
            governancePolicyId: governancePolicyId,
            name: name,
            exportName: exportName,
            policyType: policyType?.swift,
            part: part
        )
    }

    let swift: TeamLog.GovernancePolicyZipPartDownloadedDetails

    public init(swift: TeamLog.GovernancePolicyZipPartDownloadedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GovernancePolicyZipPartDownloadedType struct
@objc
public class DBXTeamLogGovernancePolicyZipPartDownloadedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GovernancePolicyZipPartDownloadedType(description_: description_)
    }

    let swift: TeamLog.GovernancePolicyZipPartDownloadedType

    public init(swift: TeamLog.GovernancePolicyZipPartDownloadedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added external ID for group.
@objc
public class DBXTeamLogGroupAddExternalIdDetails: NSObject {
    /// Current external id.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(newValue: String) {
        self.swift = TeamLog.GroupAddExternalIdDetails(newValue: newValue)
    }

    let swift: TeamLog.GroupAddExternalIdDetails

    public init(swift: TeamLog.GroupAddExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupAddExternalIdType struct
@objc
public class DBXTeamLogGroupAddExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupAddExternalIdType(description_: description_)
    }

    let swift: TeamLog.GroupAddExternalIdType

    public init(swift: TeamLog.GroupAddExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added team members to group.
@objc
public class DBXTeamLogGroupAddMemberDetails: NSObject {
    /// Is group owner.
    @objc
    public var isGroupOwner: NSNumber { swift.isGroupOwner as NSNumber }

    @objc
    public init(isGroupOwner: NSNumber) {
        self.swift = TeamLog.GroupAddMemberDetails(isGroupOwner: isGroupOwner.boolValue)
    }

    let swift: TeamLog.GroupAddMemberDetails

    public init(swift: TeamLog.GroupAddMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupAddMemberType struct
@objc
public class DBXTeamLogGroupAddMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupAddMemberType(description_: description_)
    }

    let swift: TeamLog.GroupAddMemberType

    public init(swift: TeamLog.GroupAddMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed external ID for group.
@objc
public class DBXTeamLogGroupChangeExternalIdDetails: NSObject {
    /// Current external id.
    @objc
    public var newValue: String { swift.newValue }
    /// Old external id.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(newValue: String, previousValue: String) {
        self.swift = TeamLog.GroupChangeExternalIdDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.GroupChangeExternalIdDetails

    public init(swift: TeamLog.GroupChangeExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupChangeExternalIdType struct
@objc
public class DBXTeamLogGroupChangeExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupChangeExternalIdType(description_: description_)
    }

    let swift: TeamLog.GroupChangeExternalIdType

    public init(swift: TeamLog.GroupChangeExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed group management type.
@objc
public class DBXTeamLogGroupChangeManagementTypeDetails: NSObject {
    /// New group management type.
    @objc
    public var newValue: DBXTeamCommonGroupManagementType { DBXTeamCommonGroupManagementType(swift: swift.newValue) }
    /// Previous group management type. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamCommonGroupManagementType? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamCommonGroupManagementType(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamCommonGroupManagementType, previousValue: DBXTeamCommonGroupManagementType?) {
        self.swift = TeamLog.GroupChangeManagementTypeDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.GroupChangeManagementTypeDetails

    public init(swift: TeamLog.GroupChangeManagementTypeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupChangeManagementTypeType struct
@objc
public class DBXTeamLogGroupChangeManagementTypeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupChangeManagementTypeType(description_: description_)
    }

    let swift: TeamLog.GroupChangeManagementTypeType

    public init(swift: TeamLog.GroupChangeManagementTypeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed manager permissions of group member.
@objc
public class DBXTeamLogGroupChangeMemberRoleDetails: NSObject {
    /// Is group owner.
    @objc
    public var isGroupOwner: NSNumber { swift.isGroupOwner as NSNumber }

    @objc
    public init(isGroupOwner: NSNumber) {
        self.swift = TeamLog.GroupChangeMemberRoleDetails(isGroupOwner: isGroupOwner.boolValue)
    }

    let swift: TeamLog.GroupChangeMemberRoleDetails

    public init(swift: TeamLog.GroupChangeMemberRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupChangeMemberRoleType struct
@objc
public class DBXTeamLogGroupChangeMemberRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupChangeMemberRoleType(description_: description_)
    }

    let swift: TeamLog.GroupChangeMemberRoleType

    public init(swift: TeamLog.GroupChangeMemberRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created group.
@objc
public class DBXTeamLogGroupCreateDetails: NSObject {
    /// Is company managed group.
    @objc
    public var isCompanyManaged: NSNumber? { swift.isCompanyManaged as NSNumber? }
    /// Group join policy.
    @objc
    public var joinPolicy: DBXTeamLogGroupJoinPolicy? { guard let swift = swift.joinPolicy else { return nil }
        return DBXTeamLogGroupJoinPolicy(swift: swift)
    }

    @objc
    public init(isCompanyManaged: NSNumber?, joinPolicy: DBXTeamLogGroupJoinPolicy?) {
        self.swift = TeamLog.GroupCreateDetails(isCompanyManaged: isCompanyManaged?.boolValue, joinPolicy: joinPolicy?.swift)
    }

    let swift: TeamLog.GroupCreateDetails

    public init(swift: TeamLog.GroupCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupCreateType struct
@objc
public class DBXTeamLogGroupCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupCreateType(description_: description_)
    }

    let swift: TeamLog.GroupCreateType

    public init(swift: TeamLog.GroupCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted group.
@objc
public class DBXTeamLogGroupDeleteDetails: NSObject {
    /// Is company managed group.
    @objc
    public var isCompanyManaged: NSNumber? { swift.isCompanyManaged as NSNumber? }

    @objc
    public init(isCompanyManaged: NSNumber?) {
        self.swift = TeamLog.GroupDeleteDetails(isCompanyManaged: isCompanyManaged?.boolValue)
    }

    let swift: TeamLog.GroupDeleteDetails

    public init(swift: TeamLog.GroupDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupDeleteType struct
@objc
public class DBXTeamLogGroupDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupDeleteType(description_: description_)
    }

    let swift: TeamLog.GroupDeleteType

    public init(swift: TeamLog.GroupDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Updated group.
@objc
public class DBXTeamLogGroupDescriptionUpdatedDetails: NSObject {
    let swift: TeamLog.GroupDescriptionUpdatedDetails

    public init(swift: TeamLog.GroupDescriptionUpdatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupDescriptionUpdatedType struct
@objc
public class DBXTeamLogGroupDescriptionUpdatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupDescriptionUpdatedType(description_: description_)
    }

    let swift: TeamLog.GroupDescriptionUpdatedType

    public init(swift: TeamLog.GroupDescriptionUpdatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupJoinPolicy union
@objc
public class DBXTeamLogGroupJoinPolicy: NSObject {
    let swift: TeamLog.GroupJoinPolicy

    public init(swift: TeamLog.GroupJoinPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.GroupJoinPolicy) -> DBXTeamLogGroupJoinPolicy {
        switch swift {
        case .open:
            return DBXTeamLogGroupJoinPolicyOpen()
        case .requestToJoin:
            return DBXTeamLogGroupJoinPolicyRequestToJoin()
        case .other:
            return DBXTeamLogGroupJoinPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOpen: DBXTeamLogGroupJoinPolicyOpen? {
        self as? DBXTeamLogGroupJoinPolicyOpen
    }

    @objc
    public var asRequestToJoin: DBXTeamLogGroupJoinPolicyRequestToJoin? {
        self as? DBXTeamLogGroupJoinPolicyRequestToJoin
    }

    @objc
    public var asOther: DBXTeamLogGroupJoinPolicyOther? {
        self as? DBXTeamLogGroupJoinPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGroupJoinPolicyOpen: DBXTeamLogGroupJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.GroupJoinPolicy.open
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGroupJoinPolicyRequestToJoin: DBXTeamLogGroupJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.GroupJoinPolicy.requestToJoin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogGroupJoinPolicyOther: DBXTeamLogGroupJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.GroupJoinPolicy.other
        super.init(swift: swift)
    }
}

/// Updated group join policy.
@objc
public class DBXTeamLogGroupJoinPolicyUpdatedDetails: NSObject {
    /// Is company managed group.
    @objc
    public var isCompanyManaged: NSNumber? { swift.isCompanyManaged as NSNumber? }
    /// Group join policy.
    @objc
    public var joinPolicy: DBXTeamLogGroupJoinPolicy? { guard let swift = swift.joinPolicy else { return nil }
        return DBXTeamLogGroupJoinPolicy(swift: swift)
    }

    @objc
    public init(isCompanyManaged: NSNumber?, joinPolicy: DBXTeamLogGroupJoinPolicy?) {
        self.swift = TeamLog.GroupJoinPolicyUpdatedDetails(isCompanyManaged: isCompanyManaged?.boolValue, joinPolicy: joinPolicy?.swift)
    }

    let swift: TeamLog.GroupJoinPolicyUpdatedDetails

    public init(swift: TeamLog.GroupJoinPolicyUpdatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupJoinPolicyUpdatedType struct
@objc
public class DBXTeamLogGroupJoinPolicyUpdatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupJoinPolicyUpdatedType(description_: description_)
    }

    let swift: TeamLog.GroupJoinPolicyUpdatedType

    public init(swift: TeamLog.GroupJoinPolicyUpdatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Group's logged information.
@objc
public class DBXTeamLogGroupLogInfo: NSObject {
    /// The unique id of this group.
    @objc
    public var groupId: String? { swift.groupId }
    /// The name of this group.
    @objc
    public var displayName: String { swift.displayName }
    /// External group ID.
    @objc
    public var externalId: String? { swift.externalId }

    @objc
    public init(displayName: String, groupId: String?, externalId: String?) {
        self.swift = TeamLog.GroupLogInfo(displayName: displayName, groupId: groupId, externalId: externalId)
    }

    let swift: TeamLog.GroupLogInfo

    public init(swift: TeamLog.GroupLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Moved group.
@objc
public class DBXTeamLogGroupMovedDetails: NSObject {
    let swift: TeamLog.GroupMovedDetails

    public init(swift: TeamLog.GroupMovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupMovedType struct
@objc
public class DBXTeamLogGroupMovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupMovedType(description_: description_)
    }

    let swift: TeamLog.GroupMovedType

    public init(swift: TeamLog.GroupMovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed external ID for group.
@objc
public class DBXTeamLogGroupRemoveExternalIdDetails: NSObject {
    /// Old external id.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(previousValue: String) {
        self.swift = TeamLog.GroupRemoveExternalIdDetails(previousValue: previousValue)
    }

    let swift: TeamLog.GroupRemoveExternalIdDetails

    public init(swift: TeamLog.GroupRemoveExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupRemoveExternalIdType struct
@objc
public class DBXTeamLogGroupRemoveExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupRemoveExternalIdType(description_: description_)
    }

    let swift: TeamLog.GroupRemoveExternalIdType

    public init(swift: TeamLog.GroupRemoveExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed team members from group.
@objc
public class DBXTeamLogGroupRemoveMemberDetails: NSObject {
    let swift: TeamLog.GroupRemoveMemberDetails

    public init(swift: TeamLog.GroupRemoveMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupRemoveMemberType struct
@objc
public class DBXTeamLogGroupRemoveMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupRemoveMemberType(description_: description_)
    }

    let swift: TeamLog.GroupRemoveMemberType

    public init(swift: TeamLog.GroupRemoveMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed group.
@objc
public class DBXTeamLogGroupRenameDetails: NSObject {
    /// Previous display name.
    @objc
    public var previousValue: String { swift.previousValue }
    /// New display name.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(previousValue: String, newValue: String) {
        self.swift = TeamLog.GroupRenameDetails(previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.GroupRenameDetails

    public init(swift: TeamLog.GroupRenameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupRenameType struct
@objc
public class DBXTeamLogGroupRenameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupRenameType(description_: description_)
    }

    let swift: TeamLog.GroupRenameType

    public init(swift: TeamLog.GroupRenameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed who can create groups.
@objc
public class DBXTeamLogGroupUserManagementChangePolicyDetails: NSObject {
    /// New group users management policy.
    @objc
    public var newValue: DBXTeamPoliciesGroupCreation { DBXTeamPoliciesGroupCreation(swift: swift.newValue) }
    /// Previous group users management policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesGroupCreation? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesGroupCreation(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesGroupCreation, previousValue: DBXTeamPoliciesGroupCreation?) {
        self.swift = TeamLog.GroupUserManagementChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.GroupUserManagementChangePolicyDetails

    public init(swift: TeamLog.GroupUserManagementChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GroupUserManagementChangePolicyType struct
@objc
public class DBXTeamLogGroupUserManagementChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GroupUserManagementChangePolicyType(description_: description_)
    }

    let swift: TeamLog.GroupUserManagementChangePolicyType

    public init(swift: TeamLog.GroupUserManagementChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed guest team admin status.
@objc
public class DBXTeamLogGuestAdminChangeStatusDetails: NSObject {
    /// True for guest, false for host.
    @objc
    public var isGuest: NSNumber { swift.isGuest as NSNumber }
    /// The name of the guest team.
    @objc
    public var guestTeamName: String? { swift.guestTeamName }
    /// The name of the host team.
    @objc
    public var hostTeamName: String? { swift.hostTeamName }
    /// Previous request state.
    @objc
    public var previousValue: DBXTeamLogTrustedTeamsRequestState { DBXTeamLogTrustedTeamsRequestState(swift: swift.previousValue) }
    /// New request state.
    @objc
    public var newValue: DBXTeamLogTrustedTeamsRequestState { DBXTeamLogTrustedTeamsRequestState(swift: swift.newValue) }
    /// Action details.
    @objc
    public var actionDetails: DBXTeamLogTrustedTeamsRequestAction { DBXTeamLogTrustedTeamsRequestAction(swift: swift.actionDetails) }

    @objc
    public init(
        isGuest: NSNumber,
        previousValue: DBXTeamLogTrustedTeamsRequestState,
        newValue: DBXTeamLogTrustedTeamsRequestState,
        actionDetails: DBXTeamLogTrustedTeamsRequestAction,
        guestTeamName: String?,
        hostTeamName: String?
    ) {
        self.swift = TeamLog.GuestAdminChangeStatusDetails(
            isGuest: isGuest.boolValue,
            previousValue: previousValue.swift,
            newValue: newValue.swift,
            actionDetails: actionDetails.swift,
            guestTeamName: guestTeamName,
            hostTeamName: hostTeamName
        )
    }

    let swift: TeamLog.GuestAdminChangeStatusDetails

    public init(swift: TeamLog.GuestAdminChangeStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GuestAdminChangeStatusType struct
@objc
public class DBXTeamLogGuestAdminChangeStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GuestAdminChangeStatusType(description_: description_)
    }

    let swift: TeamLog.GuestAdminChangeStatusType

    public init(swift: TeamLog.GuestAdminChangeStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Started trusted team admin session.
@objc
public class DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails: NSObject {
    /// Host team name.
    @objc
    public var teamName: String? { swift.teamName }
    /// Trusted team name.
    @objc
    public var trustedTeamName: String? { swift.trustedTeamName }

    @objc
    public init(teamName: String?, trustedTeamName: String?) {
        self.swift = TeamLog.GuestAdminSignedInViaTrustedTeamsDetails(teamName: teamName, trustedTeamName: trustedTeamName)
    }

    let swift: TeamLog.GuestAdminSignedInViaTrustedTeamsDetails

    public init(swift: TeamLog.GuestAdminSignedInViaTrustedTeamsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GuestAdminSignedInViaTrustedTeamsType struct
@objc
public class DBXTeamLogGuestAdminSignedInViaTrustedTeamsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GuestAdminSignedInViaTrustedTeamsType(description_: description_)
    }

    let swift: TeamLog.GuestAdminSignedInViaTrustedTeamsType

    public init(swift: TeamLog.GuestAdminSignedInViaTrustedTeamsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Ended trusted team admin session.
@objc
public class DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails: NSObject {
    /// Host team name.
    @objc
    public var teamName: String? { swift.teamName }
    /// Trusted team name.
    @objc
    public var trustedTeamName: String? { swift.trustedTeamName }

    @objc
    public init(teamName: String?, trustedTeamName: String?) {
        self.swift = TeamLog.GuestAdminSignedOutViaTrustedTeamsDetails(teamName: teamName, trustedTeamName: trustedTeamName)
    }

    let swift: TeamLog.GuestAdminSignedOutViaTrustedTeamsDetails

    public init(swift: TeamLog.GuestAdminSignedOutViaTrustedTeamsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible GuestAdminSignedOutViaTrustedTeamsType struct
@objc
public class DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.GuestAdminSignedOutViaTrustedTeamsType(description_: description_)
    }

    let swift: TeamLog.GuestAdminSignedOutViaTrustedTeamsType

    public init(swift: TeamLog.GuestAdminSignedOutViaTrustedTeamsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible IdentifierType union
@objc
public class DBXTeamLogIdentifierType: NSObject {
    let swift: TeamLog.IdentifierType

    public init(swift: TeamLog.IdentifierType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.IdentifierType) -> DBXTeamLogIdentifierType {
        switch swift {
        case .email:
            return DBXTeamLogIdentifierTypeEmail()
        case .facebookProfileName:
            return DBXTeamLogIdentifierTypeFacebookProfileName()
        case .other:
            return DBXTeamLogIdentifierTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asEmail: DBXTeamLogIdentifierTypeEmail? {
        self as? DBXTeamLogIdentifierTypeEmail
    }

    @objc
    public var asFacebookProfileName: DBXTeamLogIdentifierTypeFacebookProfileName? {
        self as? DBXTeamLogIdentifierTypeFacebookProfileName
    }

    @objc
    public var asOther: DBXTeamLogIdentifierTypeOther? {
        self as? DBXTeamLogIdentifierTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIdentifierTypeEmail: DBXTeamLogIdentifierType {
    @objc
    public init() {
        let swift = TeamLog.IdentifierType.email
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIdentifierTypeFacebookProfileName: DBXTeamLogIdentifierType {
    @objc
    public init() {
        let swift = TeamLog.IdentifierType.facebookProfileName
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIdentifierTypeOther: DBXTeamLogIdentifierType {
    @objc
    public init() {
        let swift = TeamLog.IdentifierType.other
        super.init(swift: swift)
    }
}

/// Connected integration for member.
@objc
public class DBXTeamLogIntegrationConnectedDetails: NSObject {
    /// Name of the third-party integration.
    @objc
    public var integrationName: String { swift.integrationName }

    @objc
    public init(integrationName: String) {
        self.swift = TeamLog.IntegrationConnectedDetails(integrationName: integrationName)
    }

    let swift: TeamLog.IntegrationConnectedDetails

    public init(swift: TeamLog.IntegrationConnectedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible IntegrationConnectedType struct
@objc
public class DBXTeamLogIntegrationConnectedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.IntegrationConnectedType(description_: description_)
    }

    let swift: TeamLog.IntegrationConnectedType

    public init(swift: TeamLog.IntegrationConnectedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disconnected integration for member.
@objc
public class DBXTeamLogIntegrationDisconnectedDetails: NSObject {
    /// Name of the third-party integration.
    @objc
    public var integrationName: String { swift.integrationName }

    @objc
    public init(integrationName: String) {
        self.swift = TeamLog.IntegrationDisconnectedDetails(integrationName: integrationName)
    }

    let swift: TeamLog.IntegrationDisconnectedDetails

    public init(swift: TeamLog.IntegrationDisconnectedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible IntegrationDisconnectedType struct
@objc
public class DBXTeamLogIntegrationDisconnectedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.IntegrationDisconnectedType(description_: description_)
    }

    let swift: TeamLog.IntegrationDisconnectedType

    public init(swift: TeamLog.IntegrationDisconnectedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether a service integration is enabled for the team.
@objc
public class DBXTeamLogIntegrationPolicy: NSObject {
    let swift: TeamLog.IntegrationPolicy

    public init(swift: TeamLog.IntegrationPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.IntegrationPolicy) -> DBXTeamLogIntegrationPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogIntegrationPolicyDisabled()
        case .enabled:
            return DBXTeamLogIntegrationPolicyEnabled()
        case .other:
            return DBXTeamLogIntegrationPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogIntegrationPolicyDisabled? {
        self as? DBXTeamLogIntegrationPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogIntegrationPolicyEnabled? {
        self as? DBXTeamLogIntegrationPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogIntegrationPolicyOther? {
        self as? DBXTeamLogIntegrationPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIntegrationPolicyDisabled: DBXTeamLogIntegrationPolicy {
    @objc
    public init() {
        let swift = TeamLog.IntegrationPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIntegrationPolicyEnabled: DBXTeamLogIntegrationPolicy {
    @objc
    public init() {
        let swift = TeamLog.IntegrationPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogIntegrationPolicyOther: DBXTeamLogIntegrationPolicy {
    @objc
    public init() {
        let swift = TeamLog.IntegrationPolicy.other
        super.init(swift: swift)
    }
}

/// Changed integration policy for team.
@objc
public class DBXTeamLogIntegrationPolicyChangedDetails: NSObject {
    /// Name of the third-party integration.
    @objc
    public var integrationName: String { swift.integrationName }
    /// New integration policy.
    @objc
    public var newValue: DBXTeamLogIntegrationPolicy { DBXTeamLogIntegrationPolicy(swift: swift.newValue) }
    /// Previous integration policy.
    @objc
    public var previousValue: DBXTeamLogIntegrationPolicy { DBXTeamLogIntegrationPolicy(swift: swift.previousValue) }

    @objc
    public init(integrationName: String, newValue: DBXTeamLogIntegrationPolicy, previousValue: DBXTeamLogIntegrationPolicy) {
        self.swift = TeamLog.IntegrationPolicyChangedDetails(integrationName: integrationName, newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.IntegrationPolicyChangedDetails

    public init(swift: TeamLog.IntegrationPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible IntegrationPolicyChangedType struct
@objc
public class DBXTeamLogIntegrationPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.IntegrationPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.IntegrationPolicyChangedType

    public init(swift: TeamLog.IntegrationPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for deciding whether team admins receive email when an invitation to join the team is accepted
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicy: NSObject {
    let swift: TeamLog.InviteAcceptanceEmailPolicy

    public init(swift: TeamLog.InviteAcceptanceEmailPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.InviteAcceptanceEmailPolicy) -> DBXTeamLogInviteAcceptanceEmailPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogInviteAcceptanceEmailPolicyDisabled()
        case .enabled:
            return DBXTeamLogInviteAcceptanceEmailPolicyEnabled()
        case .other:
            return DBXTeamLogInviteAcceptanceEmailPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogInviteAcceptanceEmailPolicyDisabled? {
        self as? DBXTeamLogInviteAcceptanceEmailPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogInviteAcceptanceEmailPolicyEnabled? {
        self as? DBXTeamLogInviteAcceptanceEmailPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogInviteAcceptanceEmailPolicyOther? {
        self as? DBXTeamLogInviteAcceptanceEmailPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicyDisabled: DBXTeamLogInviteAcceptanceEmailPolicy {
    @objc
    public init() {
        let swift = TeamLog.InviteAcceptanceEmailPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicyEnabled: DBXTeamLogInviteAcceptanceEmailPolicy {
    @objc
    public init() {
        let swift = TeamLog.InviteAcceptanceEmailPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicyOther: DBXTeamLogInviteAcceptanceEmailPolicy {
    @objc
    public init() {
        let swift = TeamLog.InviteAcceptanceEmailPolicy.other
        super.init(swift: swift)
    }
}

/// Changed invite accept email policy for team.
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogInviteAcceptanceEmailPolicy { DBXTeamLogInviteAcceptanceEmailPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogInviteAcceptanceEmailPolicy { DBXTeamLogInviteAcceptanceEmailPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogInviteAcceptanceEmailPolicy, previousValue: DBXTeamLogInviteAcceptanceEmailPolicy) {
        self.swift = TeamLog.InviteAcceptanceEmailPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.InviteAcceptanceEmailPolicyChangedDetails

    public init(swift: TeamLog.InviteAcceptanceEmailPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible InviteAcceptanceEmailPolicyChangedType struct
@objc
public class DBXTeamLogInviteAcceptanceEmailPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.InviteAcceptanceEmailPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.InviteAcceptanceEmailPolicyChangedType

    public init(swift: TeamLog.InviteAcceptanceEmailPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible InviteMethod union
@objc
public class DBXTeamLogInviteMethod: NSObject {
    let swift: TeamLog.InviteMethod

    public init(swift: TeamLog.InviteMethod) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.InviteMethod) -> DBXTeamLogInviteMethod {
        switch swift {
        case .autoApprove:
            return DBXTeamLogInviteMethodAutoApprove()
        case .inviteLink:
            return DBXTeamLogInviteMethodInviteLink()
        case .memberInvite:
            return DBXTeamLogInviteMethodMemberInvite()
        case .movedFromAnotherTeam:
            return DBXTeamLogInviteMethodMovedFromAnotherTeam()
        case .other:
            return DBXTeamLogInviteMethodOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAutoApprove: DBXTeamLogInviteMethodAutoApprove? {
        self as? DBXTeamLogInviteMethodAutoApprove
    }

    @objc
    public var asInviteLink: DBXTeamLogInviteMethodInviteLink? {
        self as? DBXTeamLogInviteMethodInviteLink
    }

    @objc
    public var asMemberInvite: DBXTeamLogInviteMethodMemberInvite? {
        self as? DBXTeamLogInviteMethodMemberInvite
    }

    @objc
    public var asMovedFromAnotherTeam: DBXTeamLogInviteMethodMovedFromAnotherTeam? {
        self as? DBXTeamLogInviteMethodMovedFromAnotherTeam
    }

    @objc
    public var asOther: DBXTeamLogInviteMethodOther? {
        self as? DBXTeamLogInviteMethodOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteMethodAutoApprove: DBXTeamLogInviteMethod {
    @objc
    public init() {
        let swift = TeamLog.InviteMethod.autoApprove
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteMethodInviteLink: DBXTeamLogInviteMethod {
    @objc
    public init() {
        let swift = TeamLog.InviteMethod.inviteLink
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteMethodMemberInvite: DBXTeamLogInviteMethod {
    @objc
    public init() {
        let swift = TeamLog.InviteMethod.memberInvite
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteMethodMovedFromAnotherTeam: DBXTeamLogInviteMethod {
    @objc
    public init() {
        let swift = TeamLog.InviteMethod.movedFromAnotherTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogInviteMethodOther: DBXTeamLogInviteMethod {
    @objc
    public init() {
        let swift = TeamLog.InviteMethod.other
        super.init(swift: swift)
    }
}

/// Additional information relevant when a new member joins the team.
@objc
public class DBXTeamLogJoinTeamDetails: NSObject {
    /// Linked applications. (Deprecated) Please use has_linked_apps boolean field instead.
    @objc
    public var linkedApps: [DBXTeamLogUserLinkedAppLogInfo] { swift.linkedApps.map { DBXTeamLogUserLinkedAppLogInfo(swift: $0) } }
    /// Linked devices. (Deprecated) Please use has_linked_devices boolean field instead.
    @objc
    public var linkedDevices: [DBXTeamLogLinkedDeviceLogInfo] { swift.linkedDevices.map { DBXTeamLogLinkedDeviceLogInfo(swift: $0) } }
    /// Linked shared folders. (Deprecated) Please use has_linked_shared_folders boolean field instead.
    @objc
    public var linkedSharedFolders: [DBXTeamLogFolderLogInfo] { swift.linkedSharedFolders.map { DBXTeamLogFolderLogInfo(swift: $0) } }
    /// (Deprecated) True if the linked_apps list was truncated to the maximum supported length (50).
    @objc
    public var wasLinkedAppsTruncated: NSNumber? { swift.wasLinkedAppsTruncated as NSNumber? }
    /// (Deprecated) True if the linked_devices list was truncated to the maximum supported length (50).
    @objc
    public var wasLinkedDevicesTruncated: NSNumber? { swift.wasLinkedDevicesTruncated as NSNumber? }
    /// (Deprecated) True if the linked_shared_folders list was truncated to the maximum supported length (50).
    @objc
    public var wasLinkedSharedFoldersTruncated: NSNumber? { swift.wasLinkedSharedFoldersTruncated as NSNumber? }
    /// True if the user had linked apps at event time.
    @objc
    public var hasLinkedApps: NSNumber? { swift.hasLinkedApps as NSNumber? }
    /// True if the user had linked apps at event time.
    @objc
    public var hasLinkedDevices: NSNumber? { swift.hasLinkedDevices as NSNumber? }
    /// True if the user had linked shared folders at event time.
    @objc
    public var hasLinkedSharedFolders: NSNumber? { swift.hasLinkedSharedFolders as NSNumber? }

    @objc
    public init(
        linkedApps: [DBXTeamLogUserLinkedAppLogInfo],
        linkedDevices: [DBXTeamLogLinkedDeviceLogInfo],
        linkedSharedFolders: [DBXTeamLogFolderLogInfo],
        wasLinkedAppsTruncated: NSNumber?,
        wasLinkedDevicesTruncated: NSNumber?,
        wasLinkedSharedFoldersTruncated: NSNumber?,
        hasLinkedApps: NSNumber?,
        hasLinkedDevices: NSNumber?,
        hasLinkedSharedFolders: NSNumber?
    ) {
        self.swift = TeamLog.JoinTeamDetails(
            linkedApps: linkedApps.map(\.subSwift),
            linkedDevices: linkedDevices.map(\.swift),
            linkedSharedFolders: linkedSharedFolders.map(\.subSwift),
            wasLinkedAppsTruncated: wasLinkedAppsTruncated?.boolValue,
            wasLinkedDevicesTruncated: wasLinkedDevicesTruncated?.boolValue,
            wasLinkedSharedFoldersTruncated: wasLinkedSharedFoldersTruncated?.boolValue,
            hasLinkedApps: hasLinkedApps?.boolValue,
            hasLinkedDevices: hasLinkedDevices?.boolValue,
            hasLinkedSharedFolders: hasLinkedSharedFolders?.boolValue
        )
    }

    let swift: TeamLog.JoinTeamDetails

    public init(swift: TeamLog.JoinTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Label type
@objc
public class DBXTeamLogLabelType: NSObject {
    let swift: TeamLog.LabelType

    public init(swift: TeamLog.LabelType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.LabelType) -> DBXTeamLogLabelType {
        switch swift {
        case .personalInformation:
            return DBXTeamLogLabelTypePersonalInformation()
        case .testOnly:
            return DBXTeamLogLabelTypeTestOnly()
        case .userDefinedTag:
            return DBXTeamLogLabelTypeUserDefinedTag()
        case .other:
            return DBXTeamLogLabelTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPersonalInformation: DBXTeamLogLabelTypePersonalInformation? {
        self as? DBXTeamLogLabelTypePersonalInformation
    }

    @objc
    public var asTestOnly: DBXTeamLogLabelTypeTestOnly? {
        self as? DBXTeamLogLabelTypeTestOnly
    }

    @objc
    public var asUserDefinedTag: DBXTeamLogLabelTypeUserDefinedTag? {
        self as? DBXTeamLogLabelTypeUserDefinedTag
    }

    @objc
    public var asOther: DBXTeamLogLabelTypeOther? {
        self as? DBXTeamLogLabelTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLabelTypePersonalInformation: DBXTeamLogLabelType {
    @objc
    public init() {
        let swift = TeamLog.LabelType.personalInformation
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLabelTypeTestOnly: DBXTeamLogLabelType {
    @objc
    public init() {
        let swift = TeamLog.LabelType.testOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLabelTypeUserDefinedTag: DBXTeamLogLabelType {
    @objc
    public init() {
        let swift = TeamLog.LabelType.userDefinedTag
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLabelTypeOther: DBXTeamLogLabelType {
    @objc
    public init() {
        let swift = TeamLog.LabelType.other
        super.init(swift: swift)
    }
}

/// Information on sessions, in legacy format
@objc
public class DBXTeamLogLegacyDeviceSessionLogInfo: DBXTeamLogDeviceSessionLogInfo {
    /// Session unique id.
    @objc
    public var sessionInfo: DBXTeamLogSessionLogInfo? { guard let swift = subSwift.sessionInfo else { return nil }
        return DBXTeamLogSessionLogInfo(swift: swift)
    }

    /// The device name. Might be missing due to historical data gap.
    @objc
    public var displayName: String? { subSwift.displayName }
    /// Is device managed by emm. Might be missing due to historical data gap.
    @objc
    public var isEmmManaged: NSNumber? { subSwift.isEmmManaged as NSNumber? }
    /// Information on the hosting platform. Might be missing due to historical data gap.
    @objc
    public var platform: String? { subSwift.platform }
    /// The mac address of the last activity from this session. Might be missing due to historical data gap.
    @objc
    public var macAddress: String? { subSwift.macAddress }
    /// The hosting OS version. Might be missing due to historical data gap.
    @objc
    public var osVersion: String? { subSwift.osVersion }
    /// Information on the hosting device type. Might be missing due to historical data gap.
    @objc
    public var deviceType: String? { subSwift.deviceType }
    /// The Dropbox client version. Might be missing due to historical data gap.
    @objc
    public var clientVersion: String? { subSwift.clientVersion }
    /// Alternative unique device session id, instead of session id field. Might be missing due to historical data
    /// gap.
    @objc
    public var legacyUniqId: String? { subSwift.legacyUniqId }

    @objc
    public init(
        ipAddress: String?,
        created: Date?,
        updated: Date?,
        sessionInfo: DBXTeamLogSessionLogInfo?,
        displayName: String?,
        isEmmManaged: NSNumber?,
        platform: String?,
        macAddress: String?,
        osVersion: String?,
        deviceType: String?,
        clientVersion: String?,
        legacyUniqId: String?
    ) {
        let swift = TeamLog.LegacyDeviceSessionLogInfo(
            ipAddress: ipAddress,
            created: created,
            updated: updated,
            sessionInfo: sessionInfo?.swift,
            displayName: displayName,
            isEmmManaged: isEmmManaged?.boolValue,
            platform: platform,
            macAddress: macAddress,
            osVersion: osVersion,
            deviceType: deviceType,
            clientVersion: clientVersion,
            legacyUniqId: legacyUniqId
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.LegacyDeviceSessionLogInfo

    public init(swift: TeamLog.LegacyDeviceSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Activated a hold.
@objc
public class DBXTeamLogLegalHoldsActivateAHoldDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Hold start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Hold end date.
    @objc
    public var endDate: Date? { swift.endDate }

    @objc
    public init(legalHoldId: String, name: String, startDate: Date, endDate: Date?) {
        self.swift = TeamLog.LegalHoldsActivateAHoldDetails(legalHoldId: legalHoldId, name: name, startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.LegalHoldsActivateAHoldDetails

    public init(swift: TeamLog.LegalHoldsActivateAHoldDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsActivateAHoldType struct
@objc
public class DBXTeamLogLegalHoldsActivateAHoldType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsActivateAHoldType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsActivateAHoldType

    public init(swift: TeamLog.LegalHoldsActivateAHoldType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members to a hold.
@objc
public class DBXTeamLogLegalHoldsAddMembersDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }

    @objc
    public init(legalHoldId: String, name: String) {
        self.swift = TeamLog.LegalHoldsAddMembersDetails(legalHoldId: legalHoldId, name: name)
    }

    let swift: TeamLog.LegalHoldsAddMembersDetails

    public init(swift: TeamLog.LegalHoldsAddMembersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsAddMembersType struct
@objc
public class DBXTeamLogLegalHoldsAddMembersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsAddMembersType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsAddMembersType

    public init(swift: TeamLog.LegalHoldsAddMembersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited details for a hold.
@objc
public class DBXTeamLogLegalHoldsChangeHoldDetailsDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Previous details.
    @objc
    public var previousValue: String { swift.previousValue }
    /// New details.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(legalHoldId: String, name: String, previousValue: String, newValue: String) {
        self.swift = TeamLog.LegalHoldsChangeHoldDetailsDetails(legalHoldId: legalHoldId, name: name, previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.LegalHoldsChangeHoldDetailsDetails

    public init(swift: TeamLog.LegalHoldsChangeHoldDetailsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsChangeHoldDetailsType struct
@objc
public class DBXTeamLogLegalHoldsChangeHoldDetailsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsChangeHoldDetailsType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsChangeHoldDetailsType

    public init(swift: TeamLog.LegalHoldsChangeHoldDetailsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed a hold.
@objc
public class DBXTeamLogLegalHoldsChangeHoldNameDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Previous Name.
    @objc
    public var previousValue: String { swift.previousValue }
    /// New Name.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(legalHoldId: String, previousValue: String, newValue: String) {
        self.swift = TeamLog.LegalHoldsChangeHoldNameDetails(legalHoldId: legalHoldId, previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.LegalHoldsChangeHoldNameDetails

    public init(swift: TeamLog.LegalHoldsChangeHoldNameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsChangeHoldNameType struct
@objc
public class DBXTeamLogLegalHoldsChangeHoldNameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsChangeHoldNameType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsChangeHoldNameType

    public init(swift: TeamLog.LegalHoldsChangeHoldNameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Exported hold.
@objc
public class DBXTeamLogLegalHoldsExportAHoldDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Export name.
    @objc
    public var exportName: String? { swift.exportName }

    @objc
    public init(legalHoldId: String, name: String, exportName: String?) {
        self.swift = TeamLog.LegalHoldsExportAHoldDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
    }

    let swift: TeamLog.LegalHoldsExportAHoldDetails

    public init(swift: TeamLog.LegalHoldsExportAHoldDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsExportAHoldType struct
@objc
public class DBXTeamLogLegalHoldsExportAHoldType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsExportAHoldType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsExportAHoldType

    public init(swift: TeamLog.LegalHoldsExportAHoldType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Canceled export for a hold.
@objc
public class DBXTeamLogLegalHoldsExportCancelledDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Export name.
    @objc
    public var exportName: String { swift.exportName }

    @objc
    public init(legalHoldId: String, name: String, exportName: String) {
        self.swift = TeamLog.LegalHoldsExportCancelledDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
    }

    let swift: TeamLog.LegalHoldsExportCancelledDetails

    public init(swift: TeamLog.LegalHoldsExportCancelledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsExportCancelledType struct
@objc
public class DBXTeamLogLegalHoldsExportCancelledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsExportCancelledType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsExportCancelledType

    public init(swift: TeamLog.LegalHoldsExportCancelledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded export for a hold.
@objc
public class DBXTeamLogLegalHoldsExportDownloadedDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Export name.
    @objc
    public var exportName: String { swift.exportName }
    /// Part.
    @objc
    public var part: String? { swift.part }
    /// Filename.
    @objc
    public var fileName: String? { swift.fileName }

    @objc
    public init(legalHoldId: String, name: String, exportName: String, part: String?, fileName: String?) {
        self.swift = TeamLog.LegalHoldsExportDownloadedDetails(legalHoldId: legalHoldId, name: name, exportName: exportName, part: part, fileName: fileName)
    }

    let swift: TeamLog.LegalHoldsExportDownloadedDetails

    public init(swift: TeamLog.LegalHoldsExportDownloadedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsExportDownloadedType struct
@objc
public class DBXTeamLogLegalHoldsExportDownloadedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsExportDownloadedType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsExportDownloadedType

    public init(swift: TeamLog.LegalHoldsExportDownloadedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed export for a hold.
@objc
public class DBXTeamLogLegalHoldsExportRemovedDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }
    /// Export name.
    @objc
    public var exportName: String { swift.exportName }

    @objc
    public init(legalHoldId: String, name: String, exportName: String) {
        self.swift = TeamLog.LegalHoldsExportRemovedDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
    }

    let swift: TeamLog.LegalHoldsExportRemovedDetails

    public init(swift: TeamLog.LegalHoldsExportRemovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsExportRemovedType struct
@objc
public class DBXTeamLogLegalHoldsExportRemovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsExportRemovedType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsExportRemovedType

    public init(swift: TeamLog.LegalHoldsExportRemovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Released a hold.
@objc
public class DBXTeamLogLegalHoldsReleaseAHoldDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }

    @objc
    public init(legalHoldId: String, name: String) {
        self.swift = TeamLog.LegalHoldsReleaseAHoldDetails(legalHoldId: legalHoldId, name: name)
    }

    let swift: TeamLog.LegalHoldsReleaseAHoldDetails

    public init(swift: TeamLog.LegalHoldsReleaseAHoldDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsReleaseAHoldType struct
@objc
public class DBXTeamLogLegalHoldsReleaseAHoldType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsReleaseAHoldType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsReleaseAHoldType

    public init(swift: TeamLog.LegalHoldsReleaseAHoldType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed members from a hold.
@objc
public class DBXTeamLogLegalHoldsRemoveMembersDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }

    @objc
    public init(legalHoldId: String, name: String) {
        self.swift = TeamLog.LegalHoldsRemoveMembersDetails(legalHoldId: legalHoldId, name: name)
    }

    let swift: TeamLog.LegalHoldsRemoveMembersDetails

    public init(swift: TeamLog.LegalHoldsRemoveMembersDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsRemoveMembersType struct
@objc
public class DBXTeamLogLegalHoldsRemoveMembersType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsRemoveMembersType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsRemoveMembersType

    public init(swift: TeamLog.LegalHoldsRemoveMembersType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created a summary report for a hold.
@objc
public class DBXTeamLogLegalHoldsReportAHoldDetails: NSObject {
    /// Hold ID.
    @objc
    public var legalHoldId: String { swift.legalHoldId }
    /// Hold name.
    @objc
    public var name: String { swift.name }

    @objc
    public init(legalHoldId: String, name: String) {
        self.swift = TeamLog.LegalHoldsReportAHoldDetails(legalHoldId: legalHoldId, name: name)
    }

    let swift: TeamLog.LegalHoldsReportAHoldDetails

    public init(swift: TeamLog.LegalHoldsReportAHoldDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LegalHoldsReportAHoldType struct
@objc
public class DBXTeamLogLegalHoldsReportAHoldType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LegalHoldsReportAHoldType(description_: description_)
    }

    let swift: TeamLog.LegalHoldsReportAHoldType

    public init(swift: TeamLog.LegalHoldsReportAHoldType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// The device sessions that user is linked to.
@objc
public class DBXTeamLogLinkedDeviceLogInfo: NSObject {
    let swift: TeamLog.LinkedDeviceLogInfo

    public init(swift: TeamLog.LinkedDeviceLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.LinkedDeviceLogInfo) -> DBXTeamLogLinkedDeviceLogInfo {
        switch swift {
        case .desktopDeviceSession(let swiftArg):
            let arg = DBXTeamLogDesktopDeviceSessionLogInfo(swift: swiftArg)
            return DBXTeamLogLinkedDeviceLogInfoDesktopDeviceSession(arg)
        case .legacyDeviceSession(let swiftArg):
            let arg = DBXTeamLogLegacyDeviceSessionLogInfo(swift: swiftArg)
            return DBXTeamLogLinkedDeviceLogInfoLegacyDeviceSession(arg)
        case .mobileDeviceSession(let swiftArg):
            let arg = DBXTeamLogMobileDeviceSessionLogInfo(swift: swiftArg)
            return DBXTeamLogLinkedDeviceLogInfoMobileDeviceSession(arg)
        case .webDeviceSession(let swiftArg):
            let arg = DBXTeamLogWebDeviceSessionLogInfo(swift: swiftArg)
            return DBXTeamLogLinkedDeviceLogInfoWebDeviceSession(arg)
        case .other:
            return DBXTeamLogLinkedDeviceLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDesktopDeviceSession: DBXTeamLogLinkedDeviceLogInfoDesktopDeviceSession? {
        self as? DBXTeamLogLinkedDeviceLogInfoDesktopDeviceSession
    }

    @objc
    public var asLegacyDeviceSession: DBXTeamLogLinkedDeviceLogInfoLegacyDeviceSession? {
        self as? DBXTeamLogLinkedDeviceLogInfoLegacyDeviceSession
    }

    @objc
    public var asMobileDeviceSession: DBXTeamLogLinkedDeviceLogInfoMobileDeviceSession? {
        self as? DBXTeamLogLinkedDeviceLogInfoMobileDeviceSession
    }

    @objc
    public var asWebDeviceSession: DBXTeamLogLinkedDeviceLogInfoWebDeviceSession? {
        self as? DBXTeamLogLinkedDeviceLogInfoWebDeviceSession
    }

    @objc
    public var asOther: DBXTeamLogLinkedDeviceLogInfoOther? {
        self as? DBXTeamLogLinkedDeviceLogInfoOther
    }
}

/// desktop device session's details.
@objc
public class DBXTeamLogLinkedDeviceLogInfoDesktopDeviceSession: DBXTeamLogLinkedDeviceLogInfo {
    @objc
    public var desktopDeviceSession: DBXTeamLogDesktopDeviceSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogDesktopDeviceSessionLogInfo) {
        self.desktopDeviceSession = arg
        let swift = TeamLog.LinkedDeviceLogInfo.desktopDeviceSession(arg.subSwift)
        super.init(swift: swift)
    }
}

/// legacy device session's details.
@objc
public class DBXTeamLogLinkedDeviceLogInfoLegacyDeviceSession: DBXTeamLogLinkedDeviceLogInfo {
    @objc
    public var legacyDeviceSession: DBXTeamLogLegacyDeviceSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogLegacyDeviceSessionLogInfo) {
        self.legacyDeviceSession = arg
        let swift = TeamLog.LinkedDeviceLogInfo.legacyDeviceSession(arg.subSwift)
        super.init(swift: swift)
    }
}

/// mobile device session's details.
@objc
public class DBXTeamLogLinkedDeviceLogInfoMobileDeviceSession: DBXTeamLogLinkedDeviceLogInfo {
    @objc
    public var mobileDeviceSession: DBXTeamLogMobileDeviceSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogMobileDeviceSessionLogInfo) {
        self.mobileDeviceSession = arg
        let swift = TeamLog.LinkedDeviceLogInfo.mobileDeviceSession(arg.subSwift)
        super.init(swift: swift)
    }
}

/// web device session's details.
@objc
public class DBXTeamLogLinkedDeviceLogInfoWebDeviceSession: DBXTeamLogLinkedDeviceLogInfo {
    @objc
    public var webDeviceSession: DBXTeamLogWebDeviceSessionLogInfo

    @objc
    public init(_ arg: DBXTeamLogWebDeviceSessionLogInfo) {
        self.webDeviceSession = arg
        let swift = TeamLog.LinkedDeviceLogInfo.webDeviceSession(arg.subSwift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLinkedDeviceLogInfoOther: DBXTeamLogLinkedDeviceLogInfo {
    @objc
    public init() {
        let swift = TeamLog.LinkedDeviceLogInfo.other
        super.init(swift: swift)
    }
}

/// File lock status
@objc
public class DBXTeamLogLockStatus: NSObject {
    let swift: TeamLog.LockStatus

    public init(swift: TeamLog.LockStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.LockStatus) -> DBXTeamLogLockStatus {
        switch swift {
        case .locked:
            return DBXTeamLogLockStatusLocked()
        case .unlocked:
            return DBXTeamLogLockStatusUnlocked()
        case .other:
            return DBXTeamLogLockStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asLocked: DBXTeamLogLockStatusLocked? {
        self as? DBXTeamLogLockStatusLocked
    }

    @objc
    public var asUnlocked: DBXTeamLogLockStatusUnlocked? {
        self as? DBXTeamLogLockStatusUnlocked
    }

    @objc
    public var asOther: DBXTeamLogLockStatusOther? {
        self as? DBXTeamLogLockStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLockStatusLocked: DBXTeamLogLockStatus {
    @objc
    public init() {
        let swift = TeamLog.LockStatus.locked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLockStatusUnlocked: DBXTeamLogLockStatus {
    @objc
    public init() {
        let swift = TeamLog.LockStatus.unlocked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLockStatusOther: DBXTeamLogLockStatus {
    @objc
    public init() {
        let swift = TeamLog.LockStatus.other
        super.init(swift: swift)
    }
}

/// Failed to sign in.
@objc
public class DBXTeamLogLoginFailDetails: NSObject {
    /// Tells if the login device is EMM managed. Might be missing due to historical data gap.
    @objc
    public var isEmmManaged: NSNumber? { swift.isEmmManaged as NSNumber? }
    /// Login method.
    @objc
    public var loginMethod: DBXTeamLogLoginMethod { DBXTeamLogLoginMethod(swift: swift.loginMethod) }
    /// Error details.
    @objc
    public var errorDetails: DBXTeamLogFailureDetailsLogInfo { DBXTeamLogFailureDetailsLogInfo(swift: swift.errorDetails) }

    @objc
    public init(loginMethod: DBXTeamLogLoginMethod, errorDetails: DBXTeamLogFailureDetailsLogInfo, isEmmManaged: NSNumber?) {
        self.swift = TeamLog.LoginFailDetails(loginMethod: loginMethod.swift, errorDetails: errorDetails.swift, isEmmManaged: isEmmManaged?.boolValue)
    }

    let swift: TeamLog.LoginFailDetails

    public init(swift: TeamLog.LoginFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LoginFailType struct
@objc
public class DBXTeamLogLoginFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LoginFailType(description_: description_)
    }

    let swift: TeamLog.LoginFailType

    public init(swift: TeamLog.LoginFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LoginMethod union
@objc
public class DBXTeamLogLoginMethod: NSObject {
    let swift: TeamLog.LoginMethod

    public init(swift: TeamLog.LoginMethod) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.LoginMethod) -> DBXTeamLogLoginMethod {
        switch swift {
        case .appleOauth:
            return DBXTeamLogLoginMethodAppleOauth()
        case .firstPartyTokenExchange:
            return DBXTeamLogLoginMethodFirstPartyTokenExchange()
        case .googleOauth:
            return DBXTeamLogLoginMethodGoogleOauth()
        case .lenovoOauth:
            return DBXTeamLogLoginMethodLenovoOauth()
        case .password:
            return DBXTeamLogLoginMethodPassword()
        case .qrCode:
            return DBXTeamLogLoginMethodQrCode()
        case .saml:
            return DBXTeamLogLoginMethodSaml()
        case .twoFactorAuthentication:
            return DBXTeamLogLoginMethodTwoFactorAuthentication()
        case .webSession:
            return DBXTeamLogLoginMethodWebSession()
        case .other:
            return DBXTeamLogLoginMethodOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAppleOauth: DBXTeamLogLoginMethodAppleOauth? {
        self as? DBXTeamLogLoginMethodAppleOauth
    }

    @objc
    public var asFirstPartyTokenExchange: DBXTeamLogLoginMethodFirstPartyTokenExchange? {
        self as? DBXTeamLogLoginMethodFirstPartyTokenExchange
    }

    @objc
    public var asGoogleOauth: DBXTeamLogLoginMethodGoogleOauth? {
        self as? DBXTeamLogLoginMethodGoogleOauth
    }

    @objc
    public var asLenovoOauth: DBXTeamLogLoginMethodLenovoOauth? {
        self as? DBXTeamLogLoginMethodLenovoOauth
    }

    @objc
    public var asPassword: DBXTeamLogLoginMethodPassword? {
        self as? DBXTeamLogLoginMethodPassword
    }

    @objc
    public var asQrCode: DBXTeamLogLoginMethodQrCode? {
        self as? DBXTeamLogLoginMethodQrCode
    }

    @objc
    public var asSaml: DBXTeamLogLoginMethodSaml? {
        self as? DBXTeamLogLoginMethodSaml
    }

    @objc
    public var asTwoFactorAuthentication: DBXTeamLogLoginMethodTwoFactorAuthentication? {
        self as? DBXTeamLogLoginMethodTwoFactorAuthentication
    }

    @objc
    public var asWebSession: DBXTeamLogLoginMethodWebSession? {
        self as? DBXTeamLogLoginMethodWebSession
    }

    @objc
    public var asOther: DBXTeamLogLoginMethodOther? {
        self as? DBXTeamLogLoginMethodOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodAppleOauth: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.appleOauth
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodFirstPartyTokenExchange: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.firstPartyTokenExchange
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodGoogleOauth: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.googleOauth
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodLenovoOauth: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.lenovoOauth
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodPassword: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.password
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodQrCode: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.qrCode
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodSaml: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.saml
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodTwoFactorAuthentication: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.twoFactorAuthentication
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodWebSession: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.webSession
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogLoginMethodOther: DBXTeamLogLoginMethod {
    @objc
    public init() {
        let swift = TeamLog.LoginMethod.other
        super.init(swift: swift)
    }
}

/// Signed in.
@objc
public class DBXTeamLogLoginSuccessDetails: NSObject {
    /// Tells if the login device is EMM managed. Might be missing due to historical data gap.
    @objc
    public var isEmmManaged: NSNumber? { swift.isEmmManaged as NSNumber? }
    /// Login method.
    @objc
    public var loginMethod: DBXTeamLogLoginMethod { DBXTeamLogLoginMethod(swift: swift.loginMethod) }

    @objc
    public init(loginMethod: DBXTeamLogLoginMethod, isEmmManaged: NSNumber?) {
        self.swift = TeamLog.LoginSuccessDetails(loginMethod: loginMethod.swift, isEmmManaged: isEmmManaged?.boolValue)
    }

    let swift: TeamLog.LoginSuccessDetails

    public init(swift: TeamLog.LoginSuccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LoginSuccessType struct
@objc
public class DBXTeamLogLoginSuccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LoginSuccessType(description_: description_)
    }

    let swift: TeamLog.LoginSuccessType

    public init(swift: TeamLog.LoginSuccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Signed out.
@objc
public class DBXTeamLogLogoutDetails: NSObject {
    /// Login session id.
    @objc
    public var loginId: String? { swift.loginId }

    @objc
    public init(loginId: String?) {
        self.swift = TeamLog.LogoutDetails(loginId: loginId)
    }

    let swift: TeamLog.LogoutDetails

    public init(swift: TeamLog.LogoutDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible LogoutType struct
@objc
public class DBXTeamLogLogoutType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.LogoutType(description_: description_)
    }

    let swift: TeamLog.LogoutType

    public init(swift: TeamLog.LogoutType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added an external ID for team member.
@objc
public class DBXTeamLogMemberAddExternalIdDetails: NSObject {
    /// Current external id.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(newValue: String) {
        self.swift = TeamLog.MemberAddExternalIdDetails(newValue: newValue)
    }

    let swift: TeamLog.MemberAddExternalIdDetails

    public init(swift: TeamLog.MemberAddExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberAddExternalIdType struct
@objc
public class DBXTeamLogMemberAddExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberAddExternalIdType(description_: description_)
    }

    let swift: TeamLog.MemberAddExternalIdType

    public init(swift: TeamLog.MemberAddExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added team member name.
@objc
public class DBXTeamLogMemberAddNameDetails: NSObject {
    /// New user's name.
    @objc
    public var newValue: DBXTeamLogUserNameLogInfo { DBXTeamLogUserNameLogInfo(swift: swift.newValue) }

    @objc
    public init(newValue: DBXTeamLogUserNameLogInfo) {
        self.swift = TeamLog.MemberAddNameDetails(newValue: newValue.swift)
    }

    let swift: TeamLog.MemberAddNameDetails

    public init(swift: TeamLog.MemberAddNameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberAddNameType struct
@objc
public class DBXTeamLogMemberAddNameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberAddNameType(description_: description_)
    }

    let swift: TeamLog.MemberAddNameType

    public init(swift: TeamLog.MemberAddNameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team member admin role.
@objc
public class DBXTeamLogMemberChangeAdminRoleDetails: NSObject {
    /// New admin role. This field is relevant when the admin role is changed or whenthe user role changes from no
    /// admin rights to with admin rights.
    @objc
    public var newValue: DBXTeamLogAdminRole? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogAdminRole(swift: swift)
    }

    /// Previous admin role. This field is relevant when the admin role is changed or when the admin role is
    /// removed.
    @objc
    public var previousValue: DBXTeamLogAdminRole? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogAdminRole(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogAdminRole?, previousValue: DBXTeamLogAdminRole?) {
        self.swift = TeamLog.MemberChangeAdminRoleDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.MemberChangeAdminRoleDetails

    public init(swift: TeamLog.MemberChangeAdminRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeAdminRoleType struct
@objc
public class DBXTeamLogMemberChangeAdminRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeAdminRoleType(description_: description_)
    }

    let swift: TeamLog.MemberChangeAdminRoleType

    public init(swift: TeamLog.MemberChangeAdminRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team member email.
@objc
public class DBXTeamLogMemberChangeEmailDetails: NSObject {
    /// New email.
    @objc
    public var newValue: String { swift.newValue }
    /// Previous email. Might be missing due to historical data gap.
    @objc
    public var previousValue: String? { swift.previousValue }

    @objc
    public init(newValue: String, previousValue: String?) {
        self.swift = TeamLog.MemberChangeEmailDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.MemberChangeEmailDetails

    public init(swift: TeamLog.MemberChangeEmailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeEmailType struct
@objc
public class DBXTeamLogMemberChangeEmailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeEmailType(description_: description_)
    }

    let swift: TeamLog.MemberChangeEmailType

    public init(swift: TeamLog.MemberChangeEmailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the external ID for team member.
@objc
public class DBXTeamLogMemberChangeExternalIdDetails: NSObject {
    /// Current external id.
    @objc
    public var newValue: String { swift.newValue }
    /// Old external id.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(newValue: String, previousValue: String) {
        self.swift = TeamLog.MemberChangeExternalIdDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.MemberChangeExternalIdDetails

    public init(swift: TeamLog.MemberChangeExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeExternalIdType struct
@objc
public class DBXTeamLogMemberChangeExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeExternalIdType(description_: description_)
    }

    let swift: TeamLog.MemberChangeExternalIdType

    public init(swift: TeamLog.MemberChangeExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed membership type (limited/full) of member.
@objc
public class DBXTeamLogMemberChangeMembershipTypeDetails: NSObject {
    /// Previous membership type.
    @objc
    public var prevValue: DBXTeamLogTeamMembershipType { DBXTeamLogTeamMembershipType(swift: swift.prevValue) }
    /// New membership type.
    @objc
    public var newValue: DBXTeamLogTeamMembershipType { DBXTeamLogTeamMembershipType(swift: swift.newValue) }

    @objc
    public init(prevValue: DBXTeamLogTeamMembershipType, newValue: DBXTeamLogTeamMembershipType) {
        self.swift = TeamLog.MemberChangeMembershipTypeDetails(prevValue: prevValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.MemberChangeMembershipTypeDetails

    public init(swift: TeamLog.MemberChangeMembershipTypeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeMembershipTypeType struct
@objc
public class DBXTeamLogMemberChangeMembershipTypeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeMembershipTypeType(description_: description_)
    }

    let swift: TeamLog.MemberChangeMembershipTypeType

    public init(swift: TeamLog.MemberChangeMembershipTypeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team member name.
@objc
public class DBXTeamLogMemberChangeNameDetails: NSObject {
    /// New user's name.
    @objc
    public var newValue: DBXTeamLogUserNameLogInfo { DBXTeamLogUserNameLogInfo(swift: swift.newValue) }
    /// Previous user's name. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogUserNameLogInfo? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogUserNameLogInfo(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogUserNameLogInfo, previousValue: DBXTeamLogUserNameLogInfo?) {
        self.swift = TeamLog.MemberChangeNameDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.MemberChangeNameDetails

    public init(swift: TeamLog.MemberChangeNameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeNameType struct
@objc
public class DBXTeamLogMemberChangeNameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeNameType(description_: description_)
    }

    let swift: TeamLog.MemberChangeNameType

    public init(swift: TeamLog.MemberChangeNameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team member reseller role.
@objc
public class DBXTeamLogMemberChangeResellerRoleDetails: NSObject {
    /// New reseller role. This field is relevant when the reseller role is changed.
    @objc
    public var newValue: DBXTeamLogResellerRole { DBXTeamLogResellerRole(swift: swift.newValue) }
    /// Previous reseller role. This field is relevant when the reseller role is changed or when the reseller role
    /// is removed.
    @objc
    public var previousValue: DBXTeamLogResellerRole { DBXTeamLogResellerRole(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogResellerRole, previousValue: DBXTeamLogResellerRole) {
        self.swift = TeamLog.MemberChangeResellerRoleDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.MemberChangeResellerRoleDetails

    public init(swift: TeamLog.MemberChangeResellerRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeResellerRoleType struct
@objc
public class DBXTeamLogMemberChangeResellerRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeResellerRoleType(description_: description_)
    }

    let swift: TeamLog.MemberChangeResellerRoleType

    public init(swift: TeamLog.MemberChangeResellerRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed member status (invited, joined, suspended, etc.).
@objc
public class DBXTeamLogMemberChangeStatusDetails: NSObject {
    /// Previous member status. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogMemberStatus? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogMemberStatus(swift: swift)
    }

    /// New member status.
    @objc
    public var newValue: DBXTeamLogMemberStatus { DBXTeamLogMemberStatus(swift: swift.newValue) }
    /// Additional information indicating the action taken that caused status change.
    @objc
    public var action: DBXTeamLogActionDetails? { guard let swift = swift.action else { return nil }
        return DBXTeamLogActionDetails(swift: swift)
    }

    /// The user's new team name. This field is relevant when the user is transferred off the team.
    @objc
    public var newTeam: String? { swift.newTeam }
    /// The user's previous team name. This field is relevant when the user is transferred onto the team.
    @objc
    public var previousTeam: String? { swift.previousTeam }

    @objc
    public init(
        newValue: DBXTeamLogMemberStatus,
        previousValue: DBXTeamLogMemberStatus?,
        action: DBXTeamLogActionDetails?,
        newTeam: String?,
        previousTeam: String?
    ) {
        self.swift = TeamLog.MemberChangeStatusDetails(
            newValue: newValue.swift,
            previousValue: previousValue?.swift,
            action: action?.swift,
            newTeam: newTeam,
            previousTeam: previousTeam
        )
    }

    let swift: TeamLog.MemberChangeStatusDetails

    public init(swift: TeamLog.MemberChangeStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberChangeStatusType struct
@objc
public class DBXTeamLogMemberChangeStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberChangeStatusType(description_: description_)
    }

    let swift: TeamLog.MemberChangeStatusType

    public init(swift: TeamLog.MemberChangeStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Cleared manually added contacts.
@objc
public class DBXTeamLogMemberDeleteManualContactsDetails: NSObject {
    let swift: TeamLog.MemberDeleteManualContactsDetails

    public init(swift: TeamLog.MemberDeleteManualContactsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberDeleteManualContactsType struct
@objc
public class DBXTeamLogMemberDeleteManualContactsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberDeleteManualContactsType(description_: description_)
    }

    let swift: TeamLog.MemberDeleteManualContactsType

    public init(swift: TeamLog.MemberDeleteManualContactsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted team member profile photo.
@objc
public class DBXTeamLogMemberDeleteProfilePhotoDetails: NSObject {
    let swift: TeamLog.MemberDeleteProfilePhotoDetails

    public init(swift: TeamLog.MemberDeleteProfilePhotoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberDeleteProfilePhotoType struct
@objc
public class DBXTeamLogMemberDeleteProfilePhotoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberDeleteProfilePhotoType(description_: description_)
    }

    let swift: TeamLog.MemberDeleteProfilePhotoType

    public init(swift: TeamLog.MemberDeleteProfilePhotoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Permanently deleted contents of deleted team member account.
@objc
public class DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails: NSObject {
    let swift: TeamLog.MemberPermanentlyDeleteAccountContentsDetails

    public init(swift: TeamLog.MemberPermanentlyDeleteAccountContentsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberPermanentlyDeleteAccountContentsType struct
@objc
public class DBXTeamLogMemberPermanentlyDeleteAccountContentsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberPermanentlyDeleteAccountContentsType(description_: description_)
    }

    let swift: TeamLog.MemberPermanentlyDeleteAccountContentsType

    public init(swift: TeamLog.MemberPermanentlyDeleteAccountContentsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberRemoveActionType union
@objc
public class DBXTeamLogMemberRemoveActionType: NSObject {
    let swift: TeamLog.MemberRemoveActionType

    public init(swift: TeamLog.MemberRemoveActionType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MemberRemoveActionType) -> DBXTeamLogMemberRemoveActionType {
        switch swift {
        case .delete:
            return DBXTeamLogMemberRemoveActionTypeDelete()
        case .leave:
            return DBXTeamLogMemberRemoveActionTypeLeave()
        case .offboard:
            return DBXTeamLogMemberRemoveActionTypeOffboard()
        case .offboardAndRetainTeamFolders:
            return DBXTeamLogMemberRemoveActionTypeOffboardAndRetainTeamFolders()
        case .other:
            return DBXTeamLogMemberRemoveActionTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDelete: DBXTeamLogMemberRemoveActionTypeDelete? {
        self as? DBXTeamLogMemberRemoveActionTypeDelete
    }

    @objc
    public var asLeave: DBXTeamLogMemberRemoveActionTypeLeave? {
        self as? DBXTeamLogMemberRemoveActionTypeLeave
    }

    @objc
    public var asOffboard: DBXTeamLogMemberRemoveActionTypeOffboard? {
        self as? DBXTeamLogMemberRemoveActionTypeOffboard
    }

    @objc
    public var asOffboardAndRetainTeamFolders: DBXTeamLogMemberRemoveActionTypeOffboardAndRetainTeamFolders? {
        self as? DBXTeamLogMemberRemoveActionTypeOffboardAndRetainTeamFolders
    }

    @objc
    public var asOther: DBXTeamLogMemberRemoveActionTypeOther? {
        self as? DBXTeamLogMemberRemoveActionTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRemoveActionTypeDelete: DBXTeamLogMemberRemoveActionType {
    @objc
    public init() {
        let swift = TeamLog.MemberRemoveActionType.delete
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRemoveActionTypeLeave: DBXTeamLogMemberRemoveActionType {
    @objc
    public init() {
        let swift = TeamLog.MemberRemoveActionType.leave
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRemoveActionTypeOffboard: DBXTeamLogMemberRemoveActionType {
    @objc
    public init() {
        let swift = TeamLog.MemberRemoveActionType.offboard
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRemoveActionTypeOffboardAndRetainTeamFolders: DBXTeamLogMemberRemoveActionType {
    @objc
    public init() {
        let swift = TeamLog.MemberRemoveActionType.offboardAndRetainTeamFolders
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRemoveActionTypeOther: DBXTeamLogMemberRemoveActionType {
    @objc
    public init() {
        let swift = TeamLog.MemberRemoveActionType.other
        super.init(swift: swift)
    }
}

/// Removed the external ID for team member.
@objc
public class DBXTeamLogMemberRemoveExternalIdDetails: NSObject {
    /// Old external id.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(previousValue: String) {
        self.swift = TeamLog.MemberRemoveExternalIdDetails(previousValue: previousValue)
    }

    let swift: TeamLog.MemberRemoveExternalIdDetails

    public init(swift: TeamLog.MemberRemoveExternalIdDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberRemoveExternalIdType struct
@objc
public class DBXTeamLogMemberRemoveExternalIdType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberRemoveExternalIdType(description_: description_)
    }

    let swift: TeamLog.MemberRemoveExternalIdType

    public init(swift: TeamLog.MemberRemoveExternalIdType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether users can find team when not invited.
@objc
public class DBXTeamLogMemberRequestsChangePolicyDetails: NSObject {
    /// New member change requests policy.
    @objc
    public var newValue: DBXTeamLogMemberRequestsPolicy { DBXTeamLogMemberRequestsPolicy(swift: swift.newValue) }
    /// Previous member change requests policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogMemberRequestsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogMemberRequestsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogMemberRequestsPolicy, previousValue: DBXTeamLogMemberRequestsPolicy?) {
        self.swift = TeamLog.MemberRequestsChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.MemberRequestsChangePolicyDetails

    public init(swift: TeamLog.MemberRequestsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberRequestsChangePolicyType struct
@objc
public class DBXTeamLogMemberRequestsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberRequestsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.MemberRequestsChangePolicyType

    public init(swift: TeamLog.MemberRequestsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberRequestsPolicy union
@objc
public class DBXTeamLogMemberRequestsPolicy: NSObject {
    let swift: TeamLog.MemberRequestsPolicy

    public init(swift: TeamLog.MemberRequestsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MemberRequestsPolicy) -> DBXTeamLogMemberRequestsPolicy {
        switch swift {
        case .autoAccept:
            return DBXTeamLogMemberRequestsPolicyAutoAccept()
        case .disabled:
            return DBXTeamLogMemberRequestsPolicyDisabled()
        case .requireApproval:
            return DBXTeamLogMemberRequestsPolicyRequireApproval()
        case .other:
            return DBXTeamLogMemberRequestsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAutoAccept: DBXTeamLogMemberRequestsPolicyAutoAccept? {
        self as? DBXTeamLogMemberRequestsPolicyAutoAccept
    }

    @objc
    public var asDisabled: DBXTeamLogMemberRequestsPolicyDisabled? {
        self as? DBXTeamLogMemberRequestsPolicyDisabled
    }

    @objc
    public var asRequireApproval: DBXTeamLogMemberRequestsPolicyRequireApproval? {
        self as? DBXTeamLogMemberRequestsPolicyRequireApproval
    }

    @objc
    public var asOther: DBXTeamLogMemberRequestsPolicyOther? {
        self as? DBXTeamLogMemberRequestsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRequestsPolicyAutoAccept: DBXTeamLogMemberRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberRequestsPolicy.autoAccept
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRequestsPolicyDisabled: DBXTeamLogMemberRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberRequestsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRequestsPolicyRequireApproval: DBXTeamLogMemberRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberRequestsPolicy.requireApproval
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberRequestsPolicyOther: DBXTeamLogMemberRequestsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberRequestsPolicy.other
        super.init(swift: swift)
    }
}

/// Policy for controlling whether team members can send team invites
@objc
public class DBXTeamLogMemberSendInvitePolicy: NSObject {
    let swift: TeamLog.MemberSendInvitePolicy

    public init(swift: TeamLog.MemberSendInvitePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MemberSendInvitePolicy) -> DBXTeamLogMemberSendInvitePolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogMemberSendInvitePolicyDisabled()
        case .everyone:
            return DBXTeamLogMemberSendInvitePolicyEveryone()
        case .specificMembers:
            return DBXTeamLogMemberSendInvitePolicySpecificMembers()
        case .other:
            return DBXTeamLogMemberSendInvitePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogMemberSendInvitePolicyDisabled? {
        self as? DBXTeamLogMemberSendInvitePolicyDisabled
    }

    @objc
    public var asEveryone: DBXTeamLogMemberSendInvitePolicyEveryone? {
        self as? DBXTeamLogMemberSendInvitePolicyEveryone
    }

    @objc
    public var asSpecificMembers: DBXTeamLogMemberSendInvitePolicySpecificMembers? {
        self as? DBXTeamLogMemberSendInvitePolicySpecificMembers
    }

    @objc
    public var asOther: DBXTeamLogMemberSendInvitePolicyOther? {
        self as? DBXTeamLogMemberSendInvitePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSendInvitePolicyDisabled: DBXTeamLogMemberSendInvitePolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSendInvitePolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSendInvitePolicyEveryone: DBXTeamLogMemberSendInvitePolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSendInvitePolicy.everyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSendInvitePolicySpecificMembers: DBXTeamLogMemberSendInvitePolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSendInvitePolicy.specificMembers
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSendInvitePolicyOther: DBXTeamLogMemberSendInvitePolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSendInvitePolicy.other
        super.init(swift: swift)
    }
}

/// Changed member send invite policy for team.
@objc
public class DBXTeamLogMemberSendInvitePolicyChangedDetails: NSObject {
    /// New team member send invite policy.
    @objc
    public var newValue: DBXTeamLogMemberSendInvitePolicy { DBXTeamLogMemberSendInvitePolicy(swift: swift.newValue) }
    /// Previous team member send invite policy.
    @objc
    public var previousValue: DBXTeamLogMemberSendInvitePolicy { DBXTeamLogMemberSendInvitePolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogMemberSendInvitePolicy, previousValue: DBXTeamLogMemberSendInvitePolicy) {
        self.swift = TeamLog.MemberSendInvitePolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.MemberSendInvitePolicyChangedDetails

    public init(swift: TeamLog.MemberSendInvitePolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSendInvitePolicyChangedType struct
@objc
public class DBXTeamLogMemberSendInvitePolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSendInvitePolicyChangedType(description_: description_)
    }

    let swift: TeamLog.MemberSendInvitePolicyChangedType

    public init(swift: TeamLog.MemberSendInvitePolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set team member profile photo.
@objc
public class DBXTeamLogMemberSetProfilePhotoDetails: NSObject {
    let swift: TeamLog.MemberSetProfilePhotoDetails

    public init(swift: TeamLog.MemberSetProfilePhotoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSetProfilePhotoType struct
@objc
public class DBXTeamLogMemberSetProfilePhotoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSetProfilePhotoType(description_: description_)
    }

    let swift: TeamLog.MemberSetProfilePhotoType

    public init(swift: TeamLog.MemberSetProfilePhotoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set custom member space limit.
@objc
public class DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails: NSObject {
    /// New custom quota value in bytes.
    @objc
    public var newValue: NSNumber { swift.newValue as NSNumber }

    @objc
    public init(newValue: NSNumber) {
        self.swift = TeamLog.MemberSpaceLimitsAddCustomQuotaDetails(newValue: newValue.uint64Value)
    }

    let swift: TeamLog.MemberSpaceLimitsAddCustomQuotaDetails

    public init(swift: TeamLog.MemberSpaceLimitsAddCustomQuotaDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsAddCustomQuotaType struct
@objc
public class DBXTeamLogMemberSpaceLimitsAddCustomQuotaType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsAddCustomQuotaType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsAddCustomQuotaType

    public init(swift: TeamLog.MemberSpaceLimitsAddCustomQuotaType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members to member space limit exception list.
@objc
public class DBXTeamLogMemberSpaceLimitsAddExceptionDetails: NSObject {
    let swift: TeamLog.MemberSpaceLimitsAddExceptionDetails

    public init(swift: TeamLog.MemberSpaceLimitsAddExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsAddExceptionType struct
@objc
public class DBXTeamLogMemberSpaceLimitsAddExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsAddExceptionType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsAddExceptionType

    public init(swift: TeamLog.MemberSpaceLimitsAddExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed member space limit type for team.
@objc
public class DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails: NSObject {
    /// Previous space limit type.
    @objc
    public var previousValue: DBXTeamLogSpaceCapsType { DBXTeamLogSpaceCapsType(swift: swift.previousValue) }
    /// New space limit type.
    @objc
    public var newValue: DBXTeamLogSpaceCapsType { DBXTeamLogSpaceCapsType(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogSpaceCapsType, newValue: DBXTeamLogSpaceCapsType) {
        self.swift = TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetails

    public init(swift: TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsChangeCapsTypePolicyType struct
@objc
public class DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsChangeCapsTypePolicyType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeCapsTypePolicyType

    public init(swift: TeamLog.MemberSpaceLimitsChangeCapsTypePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed custom member space limit.
@objc
public class DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails: NSObject {
    /// Previous custom quota value in bytes.
    @objc
    public var previousValue: NSNumber { swift.previousValue as NSNumber }
    /// New custom quota value in bytes.
    @objc
    public var newValue: NSNumber { swift.newValue as NSNumber }

    @objc
    public init(previousValue: NSNumber, newValue: NSNumber) {
        self.swift = TeamLog.MemberSpaceLimitsChangeCustomQuotaDetails(previousValue: previousValue.uint64Value, newValue: newValue.uint64Value)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeCustomQuotaDetails

    public init(swift: TeamLog.MemberSpaceLimitsChangeCustomQuotaDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsChangeCustomQuotaType struct
@objc
public class DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsChangeCustomQuotaType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeCustomQuotaType

    public init(swift: TeamLog.MemberSpaceLimitsChangeCustomQuotaType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team default member space limit.
@objc
public class DBXTeamLogMemberSpaceLimitsChangePolicyDetails: NSObject {
    /// Previous team default limit value in bytes. Might be missing due to historical data gap.
    @objc
    public var previousValue: NSNumber? { swift.previousValue as NSNumber? }
    /// New team default limit value in bytes. Might be missing due to historical data gap.
    @objc
    public var newValue: NSNumber? { swift.newValue as NSNumber? }

    @objc
    public init(previousValue: NSNumber?, newValue: NSNumber?) {
        self.swift = TeamLog.MemberSpaceLimitsChangePolicyDetails(previousValue: previousValue?.uint64Value, newValue: newValue?.uint64Value)
    }

    let swift: TeamLog.MemberSpaceLimitsChangePolicyDetails

    public init(swift: TeamLog.MemberSpaceLimitsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsChangePolicyType struct
@objc
public class DBXTeamLogMemberSpaceLimitsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsChangePolicyType

    public init(swift: TeamLog.MemberSpaceLimitsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed space limit status.
@objc
public class DBXTeamLogMemberSpaceLimitsChangeStatusDetails: NSObject {
    /// Previous storage quota status.
    @objc
    public var previousValue: DBXTeamLogSpaceLimitsStatus { DBXTeamLogSpaceLimitsStatus(swift: swift.previousValue) }
    /// New storage quota status.
    @objc
    public var newValue: DBXTeamLogSpaceLimitsStatus { DBXTeamLogSpaceLimitsStatus(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogSpaceLimitsStatus, newValue: DBXTeamLogSpaceLimitsStatus) {
        self.swift = TeamLog.MemberSpaceLimitsChangeStatusDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeStatusDetails

    public init(swift: TeamLog.MemberSpaceLimitsChangeStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsChangeStatusType struct
@objc
public class DBXTeamLogMemberSpaceLimitsChangeStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsChangeStatusType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsChangeStatusType

    public init(swift: TeamLog.MemberSpaceLimitsChangeStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed custom member space limit.
@objc
public class DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails: NSObject {
    let swift: TeamLog.MemberSpaceLimitsRemoveCustomQuotaDetails

    public init(swift: TeamLog.MemberSpaceLimitsRemoveCustomQuotaDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsRemoveCustomQuotaType struct
@objc
public class DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsRemoveCustomQuotaType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsRemoveCustomQuotaType

    public init(swift: TeamLog.MemberSpaceLimitsRemoveCustomQuotaType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed members from member space limit exception list.
@objc
public class DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails: NSObject {
    let swift: TeamLog.MemberSpaceLimitsRemoveExceptionDetails

    public init(swift: TeamLog.MemberSpaceLimitsRemoveExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSpaceLimitsRemoveExceptionType struct
@objc
public class DBXTeamLogMemberSpaceLimitsRemoveExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSpaceLimitsRemoveExceptionType(description_: description_)
    }

    let swift: TeamLog.MemberSpaceLimitsRemoveExceptionType

    public init(swift: TeamLog.MemberSpaceLimitsRemoveExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberStatus union
@objc
public class DBXTeamLogMemberStatus: NSObject {
    let swift: TeamLog.MemberStatus

    public init(swift: TeamLog.MemberStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MemberStatus) -> DBXTeamLogMemberStatus {
        switch swift {
        case .active:
            return DBXTeamLogMemberStatusActive()
        case .invited:
            return DBXTeamLogMemberStatusInvited()
        case .movedToAnotherTeam:
            return DBXTeamLogMemberStatusMovedToAnotherTeam()
        case .notJoined:
            return DBXTeamLogMemberStatusNotJoined()
        case .removed:
            return DBXTeamLogMemberStatusRemoved()
        case .suspended:
            return DBXTeamLogMemberStatusSuspended()
        case .other:
            return DBXTeamLogMemberStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asActive: DBXTeamLogMemberStatusActive? {
        self as? DBXTeamLogMemberStatusActive
    }

    @objc
    public var asInvited: DBXTeamLogMemberStatusInvited? {
        self as? DBXTeamLogMemberStatusInvited
    }

    @objc
    public var asMovedToAnotherTeam: DBXTeamLogMemberStatusMovedToAnotherTeam? {
        self as? DBXTeamLogMemberStatusMovedToAnotherTeam
    }

    @objc
    public var asNotJoined: DBXTeamLogMemberStatusNotJoined? {
        self as? DBXTeamLogMemberStatusNotJoined
    }

    @objc
    public var asRemoved: DBXTeamLogMemberStatusRemoved? {
        self as? DBXTeamLogMemberStatusRemoved
    }

    @objc
    public var asSuspended: DBXTeamLogMemberStatusSuspended? {
        self as? DBXTeamLogMemberStatusSuspended
    }

    @objc
    public var asOther: DBXTeamLogMemberStatusOther? {
        self as? DBXTeamLogMemberStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusActive: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.active
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusInvited: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.invited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusMovedToAnotherTeam: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.movedToAnotherTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusNotJoined: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.notJoined
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusRemoved: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.removed
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusSuspended: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.suspended
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberStatusOther: DBXTeamLogMemberStatus {
    @objc
    public init() {
        let swift = TeamLog.MemberStatus.other
        super.init(swift: swift)
    }
}

/// Suggested person to add to team.
@objc
public class DBXTeamLogMemberSuggestDetails: NSObject {
    /// suggested users emails.
    @objc
    public var suggestedMembers: [String] { swift.suggestedMembers }

    @objc
    public init(suggestedMembers: [String]) {
        self.swift = TeamLog.MemberSuggestDetails(suggestedMembers: suggestedMembers)
    }

    let swift: TeamLog.MemberSuggestDetails

    public init(swift: TeamLog.MemberSuggestDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSuggestType struct
@objc
public class DBXTeamLogMemberSuggestType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSuggestType(description_: description_)
    }

    let swift: TeamLog.MemberSuggestType

    public init(swift: TeamLog.MemberSuggestType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled option for team members to suggest people to add to team.
@objc
public class DBXTeamLogMemberSuggestionsChangePolicyDetails: NSObject {
    /// New team member suggestions policy.
    @objc
    public var newValue: DBXTeamLogMemberSuggestionsPolicy { DBXTeamLogMemberSuggestionsPolicy(swift: swift.newValue) }
    /// Previous team member suggestions policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogMemberSuggestionsPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogMemberSuggestionsPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogMemberSuggestionsPolicy, previousValue: DBXTeamLogMemberSuggestionsPolicy?) {
        self.swift = TeamLog.MemberSuggestionsChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.MemberSuggestionsChangePolicyDetails

    public init(swift: TeamLog.MemberSuggestionsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberSuggestionsChangePolicyType struct
@objc
public class DBXTeamLogMemberSuggestionsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberSuggestionsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.MemberSuggestionsChangePolicyType

    public init(swift: TeamLog.MemberSuggestionsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Member suggestions policy
@objc
public class DBXTeamLogMemberSuggestionsPolicy: NSObject {
    let swift: TeamLog.MemberSuggestionsPolicy

    public init(swift: TeamLog.MemberSuggestionsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MemberSuggestionsPolicy) -> DBXTeamLogMemberSuggestionsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogMemberSuggestionsPolicyDisabled()
        case .enabled:
            return DBXTeamLogMemberSuggestionsPolicyEnabled()
        case .other:
            return DBXTeamLogMemberSuggestionsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogMemberSuggestionsPolicyDisabled? {
        self as? DBXTeamLogMemberSuggestionsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogMemberSuggestionsPolicyEnabled? {
        self as? DBXTeamLogMemberSuggestionsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogMemberSuggestionsPolicyOther? {
        self as? DBXTeamLogMemberSuggestionsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSuggestionsPolicyDisabled: DBXTeamLogMemberSuggestionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSuggestionsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSuggestionsPolicyEnabled: DBXTeamLogMemberSuggestionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSuggestionsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMemberSuggestionsPolicyOther: DBXTeamLogMemberSuggestionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.MemberSuggestionsPolicy.other
        super.init(swift: swift)
    }
}

/// Transferred contents of deleted member account to another member.
@objc
public class DBXTeamLogMemberTransferAccountContentsDetails: NSObject {
    let swift: TeamLog.MemberTransferAccountContentsDetails

    public init(swift: TeamLog.MemberTransferAccountContentsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MemberTransferAccountContentsType struct
@objc
public class DBXTeamLogMemberTransferAccountContentsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MemberTransferAccountContentsType(description_: description_)
    }

    let swift: TeamLog.MemberTransferAccountContentsType

    public init(swift: TeamLog.MemberTransferAccountContentsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Internal only - fields for target team computations
@objc
public class DBXTeamLogMemberTransferredInternalFields: NSObject {
    /// Internal only - team user was moved from.
    @objc
    public var sourceTeamId: String { swift.sourceTeamId }
    /// Internal only - team user was moved to.
    @objc
    public var targetTeamId: String { swift.targetTeamId }

    @objc
    public init(sourceTeamId: String, targetTeamId: String) {
        self.swift = TeamLog.MemberTransferredInternalFields(sourceTeamId: sourceTeamId, targetTeamId: targetTeamId)
    }

    let swift: TeamLog.MemberTransferredInternalFields

    public init(swift: TeamLog.MemberTransferredInternalFields) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled Microsoft Office add-in.
@objc
public class DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails: NSObject {
    /// New Microsoft Office addin policy.
    @objc
    public var newValue: DBXTeamLogMicrosoftOfficeAddinPolicy { DBXTeamLogMicrosoftOfficeAddinPolicy(swift: swift.newValue) }
    /// Previous Microsoft Office addin policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogMicrosoftOfficeAddinPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogMicrosoftOfficeAddinPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogMicrosoftOfficeAddinPolicy, previousValue: DBXTeamLogMicrosoftOfficeAddinPolicy?) {
        self.swift = TeamLog.MicrosoftOfficeAddinChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.MicrosoftOfficeAddinChangePolicyDetails

    public init(swift: TeamLog.MicrosoftOfficeAddinChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible MicrosoftOfficeAddinChangePolicyType struct
@objc
public class DBXTeamLogMicrosoftOfficeAddinChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.MicrosoftOfficeAddinChangePolicyType(description_: description_)
    }

    let swift: TeamLog.MicrosoftOfficeAddinChangePolicyType

    public init(swift: TeamLog.MicrosoftOfficeAddinChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Microsoft Office addin policy
@objc
public class DBXTeamLogMicrosoftOfficeAddinPolicy: NSObject {
    let swift: TeamLog.MicrosoftOfficeAddinPolicy

    public init(swift: TeamLog.MicrosoftOfficeAddinPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.MicrosoftOfficeAddinPolicy) -> DBXTeamLogMicrosoftOfficeAddinPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogMicrosoftOfficeAddinPolicyDisabled()
        case .enabled:
            return DBXTeamLogMicrosoftOfficeAddinPolicyEnabled()
        case .other:
            return DBXTeamLogMicrosoftOfficeAddinPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogMicrosoftOfficeAddinPolicyDisabled? {
        self as? DBXTeamLogMicrosoftOfficeAddinPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogMicrosoftOfficeAddinPolicyEnabled? {
        self as? DBXTeamLogMicrosoftOfficeAddinPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogMicrosoftOfficeAddinPolicyOther? {
        self as? DBXTeamLogMicrosoftOfficeAddinPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMicrosoftOfficeAddinPolicyDisabled: DBXTeamLogMicrosoftOfficeAddinPolicy {
    @objc
    public init() {
        let swift = TeamLog.MicrosoftOfficeAddinPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMicrosoftOfficeAddinPolicyEnabled: DBXTeamLogMicrosoftOfficeAddinPolicy {
    @objc
    public init() {
        let swift = TeamLog.MicrosoftOfficeAddinPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogMicrosoftOfficeAddinPolicyOther: DBXTeamLogMicrosoftOfficeAddinPolicy {
    @objc
    public init() {
        let swift = TeamLog.MicrosoftOfficeAddinPolicy.other
        super.init(swift: swift)
    }
}

/// An indication that an error occurred while retrieving the event. Some attributes of the event may be omitted as
/// a result.
@objc
public class DBXTeamLogMissingDetails: NSObject {
    /// All the data that could be retrieved and converted from the source event.
    @objc
    public var sourceEventFields: String? { swift.sourceEventFields }

    @objc
    public init(sourceEventFields: String?) {
        self.swift = TeamLog.MissingDetails(sourceEventFields: sourceEventFields)
    }

    let swift: TeamLog.MissingDetails

    public init(swift: TeamLog.MissingDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Information about linked Dropbox mobile client sessions
@objc
public class DBXTeamLogMobileDeviceSessionLogInfo: DBXTeamLogDeviceSessionLogInfo {
    /// Mobile session unique id.
    @objc
    public var sessionInfo: DBXTeamLogMobileSessionLogInfo? { guard let swift = subSwift.sessionInfo else { return nil }
        return DBXTeamLogMobileSessionLogInfo(swift: swift)
    }

    /// The device name.
    @objc
    public var deviceName: String { subSwift.deviceName }
    /// The mobile application type.
    @objc
    public var clientType: DBXTeamMobileClientPlatform { DBXTeamMobileClientPlatform(swift: subSwift.clientType) }
    /// The Dropbox client version.
    @objc
    public var clientVersion: String? { subSwift.clientVersion }
    /// The hosting OS version.
    @objc
    public var osVersion: String? { subSwift.osVersion }
    /// last carrier used by the device.
    @objc
    public var lastCarrier: String? { subSwift.lastCarrier }

    @objc
    public init(
        deviceName: String,
        clientType: DBXTeamMobileClientPlatform,
        ipAddress: String?,
        created: Date?,
        updated: Date?,
        sessionInfo: DBXTeamLogMobileSessionLogInfo?,
        clientVersion: String?,
        osVersion: String?,
        lastCarrier: String?
    ) {
        let swift = TeamLog.MobileDeviceSessionLogInfo(
            deviceName: deviceName,
            clientType: clientType.swift,
            ipAddress: ipAddress,
            created: created,
            updated: updated,
            sessionInfo: sessionInfo?.subSwift,
            clientVersion: clientVersion,
            osVersion: osVersion,
            lastCarrier: lastCarrier
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.MobileDeviceSessionLogInfo

    public init(swift: TeamLog.MobileDeviceSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Mobile session.
@objc
public class DBXTeamLogMobileSessionLogInfo: DBXTeamLogSessionLogInfo {
    let subSwift: TeamLog.MobileSessionLogInfo

    public init(swift: TeamLog.MobileSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Namespace relative path details.
@objc
public class DBXTeamLogNamespaceRelativePathLogInfo: NSObject {
    /// Namespace ID.
    @objc
    public var nsId: String? { swift.nsId }
    /// A path relative to the specified namespace ID.
    @objc
    public var relativePath: String? { swift.relativePath }
    /// True if the namespace is shared.
    @objc
    public var isSharedNamespace: NSNumber? { swift.isSharedNamespace as NSNumber? }

    @objc
    public init(nsId: String?, relativePath: String?, isSharedNamespace: NSNumber?) {
        self.swift = TeamLog.NamespaceRelativePathLogInfo(nsId: nsId, relativePath: relativePath, isSharedNamespace: isSharedNamespace?.boolValue)
    }

    let swift: TeamLog.NamespaceRelativePathLogInfo

    public init(swift: TeamLog.NamespaceRelativePathLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled network control.
@objc
public class DBXTeamLogNetworkControlChangePolicyDetails: NSObject {
    /// New network control policy.
    @objc
    public var newValue: DBXTeamLogNetworkControlPolicy { DBXTeamLogNetworkControlPolicy(swift: swift.newValue) }
    /// Previous network control policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogNetworkControlPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogNetworkControlPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogNetworkControlPolicy, previousValue: DBXTeamLogNetworkControlPolicy?) {
        self.swift = TeamLog.NetworkControlChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.NetworkControlChangePolicyDetails

    public init(swift: TeamLog.NetworkControlChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NetworkControlChangePolicyType struct
@objc
public class DBXTeamLogNetworkControlChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NetworkControlChangePolicyType(description_: description_)
    }

    let swift: TeamLog.NetworkControlChangePolicyType

    public init(swift: TeamLog.NetworkControlChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Network control policy
@objc
public class DBXTeamLogNetworkControlPolicy: NSObject {
    let swift: TeamLog.NetworkControlPolicy

    public init(swift: TeamLog.NetworkControlPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.NetworkControlPolicy) -> DBXTeamLogNetworkControlPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogNetworkControlPolicyDisabled()
        case .enabled:
            return DBXTeamLogNetworkControlPolicyEnabled()
        case .other:
            return DBXTeamLogNetworkControlPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogNetworkControlPolicyDisabled? {
        self as? DBXTeamLogNetworkControlPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogNetworkControlPolicyEnabled? {
        self as? DBXTeamLogNetworkControlPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogNetworkControlPolicyOther? {
        self as? DBXTeamLogNetworkControlPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogNetworkControlPolicyDisabled: DBXTeamLogNetworkControlPolicy {
    @objc
    public init() {
        let swift = TeamLog.NetworkControlPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogNetworkControlPolicyEnabled: DBXTeamLogNetworkControlPolicy {
    @objc
    public init() {
        let swift = TeamLog.NetworkControlPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogNetworkControlPolicyOther: DBXTeamLogNetworkControlPolicy {
    @objc
    public init() {
        let swift = TeamLog.NetworkControlPolicy.other
        super.init(swift: swift)
    }
}

/// Report created: Links created with no expiration.
@objc
public class DBXTeamLogNoExpirationLinkGenCreateReportDetails: NSObject {
    /// Report start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Report end date.
    @objc
    public var endDate: Date { swift.endDate }

    @objc
    public init(startDate: Date, endDate: Date) {
        self.swift = TeamLog.NoExpirationLinkGenCreateReportDetails(startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.NoExpirationLinkGenCreateReportDetails

    public init(swift: TeamLog.NoExpirationLinkGenCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoExpirationLinkGenCreateReportType struct
@objc
public class DBXTeamLogNoExpirationLinkGenCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoExpirationLinkGenCreateReportType(description_: description_)
    }

    let swift: TeamLog.NoExpirationLinkGenCreateReportType

    public init(swift: TeamLog.NoExpirationLinkGenCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create report: Links created with no expiration.
@objc
public class DBXTeamLogNoExpirationLinkGenReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.NoExpirationLinkGenReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.NoExpirationLinkGenReportFailedDetails

    public init(swift: TeamLog.NoExpirationLinkGenReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoExpirationLinkGenReportFailedType struct
@objc
public class DBXTeamLogNoExpirationLinkGenReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoExpirationLinkGenReportFailedType(description_: description_)
    }

    let swift: TeamLog.NoExpirationLinkGenReportFailedType

    public init(swift: TeamLog.NoExpirationLinkGenReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Report created: Links created without passwords.
@objc
public class DBXTeamLogNoPasswordLinkGenCreateReportDetails: NSObject {
    /// Report start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Report end date.
    @objc
    public var endDate: Date { swift.endDate }

    @objc
    public init(startDate: Date, endDate: Date) {
        self.swift = TeamLog.NoPasswordLinkGenCreateReportDetails(startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.NoPasswordLinkGenCreateReportDetails

    public init(swift: TeamLog.NoPasswordLinkGenCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoPasswordLinkGenCreateReportType struct
@objc
public class DBXTeamLogNoPasswordLinkGenCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoPasswordLinkGenCreateReportType(description_: description_)
    }

    let swift: TeamLog.NoPasswordLinkGenCreateReportType

    public init(swift: TeamLog.NoPasswordLinkGenCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create report: Links created without passwords.
@objc
public class DBXTeamLogNoPasswordLinkGenReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.NoPasswordLinkGenReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.NoPasswordLinkGenReportFailedDetails

    public init(swift: TeamLog.NoPasswordLinkGenReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoPasswordLinkGenReportFailedType struct
@objc
public class DBXTeamLogNoPasswordLinkGenReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoPasswordLinkGenReportFailedType(description_: description_)
    }

    let swift: TeamLog.NoPasswordLinkGenReportFailedType

    public init(swift: TeamLog.NoPasswordLinkGenReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Report created: Views of links without passwords.
@objc
public class DBXTeamLogNoPasswordLinkViewCreateReportDetails: NSObject {
    /// Report start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Report end date.
    @objc
    public var endDate: Date { swift.endDate }

    @objc
    public init(startDate: Date, endDate: Date) {
        self.swift = TeamLog.NoPasswordLinkViewCreateReportDetails(startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.NoPasswordLinkViewCreateReportDetails

    public init(swift: TeamLog.NoPasswordLinkViewCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoPasswordLinkViewCreateReportType struct
@objc
public class DBXTeamLogNoPasswordLinkViewCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoPasswordLinkViewCreateReportType(description_: description_)
    }

    let swift: TeamLog.NoPasswordLinkViewCreateReportType

    public init(swift: TeamLog.NoPasswordLinkViewCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create report: Views of links without passwords.
@objc
public class DBXTeamLogNoPasswordLinkViewReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.NoPasswordLinkViewReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.NoPasswordLinkViewReportFailedDetails

    public init(swift: TeamLog.NoPasswordLinkViewReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoPasswordLinkViewReportFailedType struct
@objc
public class DBXTeamLogNoPasswordLinkViewReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoPasswordLinkViewReportFailedType(description_: description_)
    }

    let swift: TeamLog.NoPasswordLinkViewReportFailedType

    public init(swift: TeamLog.NoPasswordLinkViewReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// User's logged information.
@objc
public class DBXTeamLogUserLogInfo: NSObject {
    /// User unique ID.
    @objc
    public var accountId: String? { swift.accountId }
    /// User display name.
    @objc
    public var displayName: String? { swift.displayName }
    /// User email address.
    @objc
    public var email: String? { swift.email }

    @objc
    public init(accountId: String?, displayName: String?, email: String?) {
        self.swift = TeamLog.UserLogInfo(accountId: accountId, displayName: displayName, email: email)
    }

    let swift: TeamLog.UserLogInfo

    public init(swift: TeamLog.UserLogInfo) {
        self.swift = swift
    }

    public static func wrapPreservingSubtypes(swift: TeamLog.UserLogInfo) -> DBXTeamLogUserLogInfo {
        switch swift {
        case let teamMemberLogInfo as TeamLog.TeamMemberLogInfo:
            return DBXTeamLogTeamMemberLogInfo(swift: teamMemberLogInfo)
        case let trustedNonTeamMemberLogInfo as TeamLog.TrustedNonTeamMemberLogInfo:
            return DBXTeamLogTrustedNonTeamMemberLogInfo(swift: trustedNonTeamMemberLogInfo)
        case let nonTeamMemberLogInfo as TeamLog.NonTeamMemberLogInfo:
            return DBXTeamLogNonTeamMemberLogInfo(swift: nonTeamMemberLogInfo)
        default:
            return DBXTeamLogUserLogInfo(swift: swift)
        }
    }

    @objc
    public override var description: String { swift.description }
}

/// Non team member's logged information.
@objc
public class DBXTeamLogNonTeamMemberLogInfo: DBXTeamLogUserLogInfo {
    let subSwift: TeamLog.NonTeamMemberLogInfo

    public init(swift: TeamLog.NonTeamMemberLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// The email to which the request was sent
@objc
public class DBXTeamLogNonTrustedTeamDetails: NSObject {
    /// The email to which the request was sent.
    @objc
    public var team: String { swift.team }

    @objc
    public init(team: String) {
        self.swift = TeamLog.NonTrustedTeamDetails(team: team)
    }

    let swift: TeamLog.NonTrustedTeamDetails

    public init(swift: TeamLog.NonTrustedTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper doc to invite-only.
@objc
public class DBXTeamLogNoteAclInviteOnlyDetails: NSObject {
    let swift: TeamLog.NoteAclInviteOnlyDetails

    public init(swift: TeamLog.NoteAclInviteOnlyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoteAclInviteOnlyType struct
@objc
public class DBXTeamLogNoteAclInviteOnlyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoteAclInviteOnlyType(description_: description_)
    }

    let swift: TeamLog.NoteAclInviteOnlyType

    public init(swift: TeamLog.NoteAclInviteOnlyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper doc to link-accessible.
@objc
public class DBXTeamLogNoteAclLinkDetails: NSObject {
    let swift: TeamLog.NoteAclLinkDetails

    public init(swift: TeamLog.NoteAclLinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoteAclLinkType struct
@objc
public class DBXTeamLogNoteAclLinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoteAclLinkType(description_: description_)
    }

    let swift: TeamLog.NoteAclLinkType

    public init(swift: TeamLog.NoteAclLinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper doc to link-accessible for team.
@objc
public class DBXTeamLogNoteAclTeamLinkDetails: NSObject {
    let swift: TeamLog.NoteAclTeamLinkDetails

    public init(swift: TeamLog.NoteAclTeamLinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoteAclTeamLinkType struct
@objc
public class DBXTeamLogNoteAclTeamLinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoteAclTeamLinkType(description_: description_)
    }

    let swift: TeamLog.NoteAclTeamLinkType

    public init(swift: TeamLog.NoteAclTeamLinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared received Paper doc.
@objc
public class DBXTeamLogNoteShareReceiveDetails: NSObject {
    let swift: TeamLog.NoteShareReceiveDetails

    public init(swift: TeamLog.NoteShareReceiveDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoteShareReceiveType struct
@objc
public class DBXTeamLogNoteShareReceiveType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoteShareReceiveType(description_: description_)
    }

    let swift: TeamLog.NoteShareReceiveType

    public init(swift: TeamLog.NoteShareReceiveType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared Paper doc.
@objc
public class DBXTeamLogNoteSharedDetails: NSObject {
    let swift: TeamLog.NoteSharedDetails

    public init(swift: TeamLog.NoteSharedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible NoteSharedType struct
@objc
public class DBXTeamLogNoteSharedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.NoteSharedType(description_: description_)
    }

    let swift: TeamLog.NoteSharedType

    public init(swift: TeamLog.NoteSharedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added a label.
@objc
public class DBXTeamLogObjectLabelAddedDetails: NSObject {
    /// Labels mark a file or folder.
    @objc
    public var labelType: DBXTeamLogLabelType { DBXTeamLogLabelType(swift: swift.labelType) }

    @objc
    public init(labelType: DBXTeamLogLabelType) {
        self.swift = TeamLog.ObjectLabelAddedDetails(labelType: labelType.swift)
    }

    let swift: TeamLog.ObjectLabelAddedDetails

    public init(swift: TeamLog.ObjectLabelAddedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ObjectLabelAddedType struct
@objc
public class DBXTeamLogObjectLabelAddedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ObjectLabelAddedType(description_: description_)
    }

    let swift: TeamLog.ObjectLabelAddedType

    public init(swift: TeamLog.ObjectLabelAddedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed a label.
@objc
public class DBXTeamLogObjectLabelRemovedDetails: NSObject {
    /// Labels mark a file or folder.
    @objc
    public var labelType: DBXTeamLogLabelType { DBXTeamLogLabelType(swift: swift.labelType) }

    @objc
    public init(labelType: DBXTeamLogLabelType) {
        self.swift = TeamLog.ObjectLabelRemovedDetails(labelType: labelType.swift)
    }

    let swift: TeamLog.ObjectLabelRemovedDetails

    public init(swift: TeamLog.ObjectLabelRemovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ObjectLabelRemovedType struct
@objc
public class DBXTeamLogObjectLabelRemovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ObjectLabelRemovedType(description_: description_)
    }

    let swift: TeamLog.ObjectLabelRemovedType

    public init(swift: TeamLog.ObjectLabelRemovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Updated a label's value.
@objc
public class DBXTeamLogObjectLabelUpdatedValueDetails: NSObject {
    /// Labels mark a file or folder.
    @objc
    public var labelType: DBXTeamLogLabelType { DBXTeamLogLabelType(swift: swift.labelType) }

    @objc
    public init(labelType: DBXTeamLogLabelType) {
        self.swift = TeamLog.ObjectLabelUpdatedValueDetails(labelType: labelType.swift)
    }

    let swift: TeamLog.ObjectLabelUpdatedValueDetails

    public init(swift: TeamLog.ObjectLabelUpdatedValueDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ObjectLabelUpdatedValueType struct
@objc
public class DBXTeamLogObjectLabelUpdatedValueType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ObjectLabelUpdatedValueType(description_: description_)
    }

    let swift: TeamLog.ObjectLabelUpdatedValueType

    public init(swift: TeamLog.ObjectLabelUpdatedValueType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Opened shared Paper doc.
@objc
public class DBXTeamLogOpenNoteSharedDetails: NSObject {
    let swift: TeamLog.OpenNoteSharedDetails

    public init(swift: TeamLog.OpenNoteSharedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible OpenNoteSharedType struct
@objc
public class DBXTeamLogOpenNoteSharedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.OpenNoteSharedType(description_: description_)
    }

    let swift: TeamLog.OpenNoteSharedType

    public init(swift: TeamLog.OpenNoteSharedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// More details about the organization.
@objc
public class DBXTeamLogOrganizationDetails: NSObject {
    /// The name of the organization.
    @objc
    public var organization: String { swift.organization }

    @objc
    public init(organization: String) {
        self.swift = TeamLog.OrganizationDetails(organization: organization)
    }

    let swift: TeamLog.OrganizationDetails

    public init(swift: TeamLog.OrganizationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// The name of the organization
@objc
public class DBXTeamLogOrganizationName: NSObject {
    /// The name of the organization.
    @objc
    public var organization: String { swift.organization }

    @objc
    public init(organization: String) {
        self.swift = TeamLog.OrganizationName(organization: organization)
    }

    let swift: TeamLog.OrganizationName

    public init(swift: TeamLog.OrganizationName) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Organized a folder with multi-file organize.
@objc
public class DBXTeamLogOrganizeFolderWithTidyDetails: NSObject {
    let swift: TeamLog.OrganizeFolderWithTidyDetails

    public init(swift: TeamLog.OrganizeFolderWithTidyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible OrganizeFolderWithTidyType struct
@objc
public class DBXTeamLogOrganizeFolderWithTidyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.OrganizeFolderWithTidyType(description_: description_)
    }

    let swift: TeamLog.OrganizeFolderWithTidyType

    public init(swift: TeamLog.OrganizeFolderWithTidyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// The origin from which the actor performed the action.
@objc
public class DBXTeamLogOriginLogInfo: NSObject {
    /// Geographic location details.
    @objc
    public var geoLocation: DBXTeamLogGeoLocationLogInfo? { guard let swift = swift.geoLocation else { return nil }
        return DBXTeamLogGeoLocationLogInfo(swift: swift)
    }

    /// The method that was used to perform the action.
    @objc
    public var accessMethod: DBXTeamLogAccessMethodLogInfo { DBXTeamLogAccessMethodLogInfo(swift: swift.accessMethod) }

    @objc
    public init(accessMethod: DBXTeamLogAccessMethodLogInfo, geoLocation: DBXTeamLogGeoLocationLogInfo?) {
        self.swift = TeamLog.OriginLogInfo(accessMethod: accessMethod.swift, geoLocation: geoLocation?.swift)
    }

    let swift: TeamLog.OriginLogInfo

    public init(swift: TeamLog.OriginLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Report created: Views of old links.
@objc
public class DBXTeamLogOutdatedLinkViewCreateReportDetails: NSObject {
    /// Report start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Report end date.
    @objc
    public var endDate: Date { swift.endDate }

    @objc
    public init(startDate: Date, endDate: Date) {
        self.swift = TeamLog.OutdatedLinkViewCreateReportDetails(startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.OutdatedLinkViewCreateReportDetails

    public init(swift: TeamLog.OutdatedLinkViewCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible OutdatedLinkViewCreateReportType struct
@objc
public class DBXTeamLogOutdatedLinkViewCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.OutdatedLinkViewCreateReportType(description_: description_)
    }

    let swift: TeamLog.OutdatedLinkViewCreateReportType

    public init(swift: TeamLog.OutdatedLinkViewCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't create report: Views of old links.
@objc
public class DBXTeamLogOutdatedLinkViewReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.OutdatedLinkViewReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.OutdatedLinkViewReportFailedDetails

    public init(swift: TeamLog.OutdatedLinkViewReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible OutdatedLinkViewReportFailedType struct
@objc
public class DBXTeamLogOutdatedLinkViewReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.OutdatedLinkViewReportFailedType(description_: description_)
    }

    let swift: TeamLog.OutdatedLinkViewReportFailedType

    public init(swift: TeamLog.OutdatedLinkViewReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperAccessType union
@objc
public class DBXTeamLogPaperAccessType: NSObject {
    let swift: TeamLog.PaperAccessType

    public init(swift: TeamLog.PaperAccessType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PaperAccessType) -> DBXTeamLogPaperAccessType {
        switch swift {
        case .commenter:
            return DBXTeamLogPaperAccessTypeCommenter()
        case .editor:
            return DBXTeamLogPaperAccessTypeEditor()
        case .viewer:
            return DBXTeamLogPaperAccessTypeViewer()
        case .other:
            return DBXTeamLogPaperAccessTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asCommenter: DBXTeamLogPaperAccessTypeCommenter? {
        self as? DBXTeamLogPaperAccessTypeCommenter
    }

    @objc
    public var asEditor: DBXTeamLogPaperAccessTypeEditor? {
        self as? DBXTeamLogPaperAccessTypeEditor
    }

    @objc
    public var asViewer: DBXTeamLogPaperAccessTypeViewer? {
        self as? DBXTeamLogPaperAccessTypeViewer
    }

    @objc
    public var asOther: DBXTeamLogPaperAccessTypeOther? {
        self as? DBXTeamLogPaperAccessTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperAccessTypeCommenter: DBXTeamLogPaperAccessType {
    @objc
    public init() {
        let swift = TeamLog.PaperAccessType.commenter
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperAccessTypeEditor: DBXTeamLogPaperAccessType {
    @objc
    public init() {
        let swift = TeamLog.PaperAccessType.editor
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperAccessTypeViewer: DBXTeamLogPaperAccessType {
    @objc
    public init() {
        let swift = TeamLog.PaperAccessType.viewer
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperAccessTypeOther: DBXTeamLogPaperAccessType {
    @objc
    public init() {
        let swift = TeamLog.PaperAccessType.other
        super.init(swift: swift)
    }
}

/// Exported all team Paper docs.
@objc
public class DBXTeamLogPaperAdminExportStartDetails: NSObject {
    let swift: TeamLog.PaperAdminExportStartDetails

    public init(swift: TeamLog.PaperAdminExportStartDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperAdminExportStartType struct
@objc
public class DBXTeamLogPaperAdminExportStartType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperAdminExportStartType(description_: description_)
    }

    let swift: TeamLog.PaperAdminExportStartType

    public init(swift: TeamLog.PaperAdminExportStartType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific members.
@objc
public class DBXTeamLogPaperChangeDeploymentPolicyDetails: NSObject {
    /// New Dropbox Paper deployment policy.
    @objc
    public var newValue: DBXTeamPoliciesPaperDeploymentPolicy { DBXTeamPoliciesPaperDeploymentPolicy(swift: swift.newValue) }
    /// Previous Dropbox Paper deployment policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesPaperDeploymentPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesPaperDeploymentPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesPaperDeploymentPolicy, previousValue: DBXTeamPoliciesPaperDeploymentPolicy?) {
        self.swift = TeamLog.PaperChangeDeploymentPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.PaperChangeDeploymentPolicyDetails

    public init(swift: TeamLog.PaperChangeDeploymentPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperChangeDeploymentPolicyType struct
@objc
public class DBXTeamLogPaperChangeDeploymentPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperChangeDeploymentPolicyType(description_: description_)
    }

    let swift: TeamLog.PaperChangeDeploymentPolicyType

    public init(swift: TeamLog.PaperChangeDeploymentPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether non-members can view Paper docs with link.
@objc
public class DBXTeamLogPaperChangeMemberLinkPolicyDetails: NSObject {
    /// New paper external link accessibility policy.
    @objc
    public var newValue: DBXTeamLogPaperMemberPolicy { DBXTeamLogPaperMemberPolicy(swift: swift.newValue) }

    @objc
    public init(newValue: DBXTeamLogPaperMemberPolicy) {
        self.swift = TeamLog.PaperChangeMemberLinkPolicyDetails(newValue: newValue.swift)
    }

    let swift: TeamLog.PaperChangeMemberLinkPolicyDetails

    public init(swift: TeamLog.PaperChangeMemberLinkPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperChangeMemberLinkPolicyType struct
@objc
public class DBXTeamLogPaperChangeMemberLinkPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperChangeMemberLinkPolicyType(description_: description_)
    }

    let swift: TeamLog.PaperChangeMemberLinkPolicyType

    public init(swift: TeamLog.PaperChangeMemberLinkPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether members can share Paper docs outside team, and if docs are accessible only by team members or
/// anyone by default.
@objc
public class DBXTeamLogPaperChangeMemberPolicyDetails: NSObject {
    /// New paper external accessibility policy.
    @objc
    public var newValue: DBXTeamLogPaperMemberPolicy { DBXTeamLogPaperMemberPolicy(swift: swift.newValue) }
    /// Previous paper external accessibility policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogPaperMemberPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogPaperMemberPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogPaperMemberPolicy, previousValue: DBXTeamLogPaperMemberPolicy?) {
        self.swift = TeamLog.PaperChangeMemberPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.PaperChangeMemberPolicyDetails

    public init(swift: TeamLog.PaperChangeMemberPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperChangeMemberPolicyType struct
@objc
public class DBXTeamLogPaperChangeMemberPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperChangeMemberPolicyType(description_: description_)
    }

    let swift: TeamLog.PaperChangeMemberPolicyType

    public init(swift: TeamLog.PaperChangeMemberPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled Dropbox Paper for team.
@objc
public class DBXTeamLogPaperChangePolicyDetails: NSObject {
    /// New Dropbox Paper policy.
    @objc
    public var newValue: DBXTeamPoliciesPaperEnabledPolicy { DBXTeamPoliciesPaperEnabledPolicy(swift: swift.newValue) }
    /// Previous Dropbox Paper policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesPaperEnabledPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesPaperEnabledPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesPaperEnabledPolicy, previousValue: DBXTeamPoliciesPaperEnabledPolicy?) {
        self.swift = TeamLog.PaperChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.PaperChangePolicyDetails

    public init(swift: TeamLog.PaperChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperChangePolicyType struct
@objc
public class DBXTeamLogPaperChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperChangePolicyType(description_: description_)
    }

    let swift: TeamLog.PaperChangePolicyType

    public init(swift: TeamLog.PaperChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added users and/or groups to Paper doc/folder.
@objc
public class DBXTeamLogPaperContentAddMemberDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentAddMemberDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentAddMemberDetails

    public init(swift: TeamLog.PaperContentAddMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentAddMemberType struct
@objc
public class DBXTeamLogPaperContentAddMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentAddMemberType(description_: description_)
    }

    let swift: TeamLog.PaperContentAddMemberType

    public init(swift: TeamLog.PaperContentAddMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added Paper doc/folder to folder.
@objc
public class DBXTeamLogPaperContentAddToFolderDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Parent asset position in the Assets list.
    @objc
    public var parentAssetIndex: NSNumber { swift.parentAssetIndex as NSNumber }

    @objc
    public init(eventUuid: String, targetAssetIndex: NSNumber, parentAssetIndex: NSNumber) {
        self.swift = TeamLog.PaperContentAddToFolderDetails(
            eventUuid: eventUuid,
            targetAssetIndex: targetAssetIndex.uint64Value,
            parentAssetIndex: parentAssetIndex.uint64Value
        )
    }

    let swift: TeamLog.PaperContentAddToFolderDetails

    public init(swift: TeamLog.PaperContentAddToFolderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentAddToFolderType struct
@objc
public class DBXTeamLogPaperContentAddToFolderType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentAddToFolderType(description_: description_)
    }

    let swift: TeamLog.PaperContentAddToFolderType

    public init(swift: TeamLog.PaperContentAddToFolderType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Archived Paper doc/folder.
@objc
public class DBXTeamLogPaperContentArchiveDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentArchiveDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentArchiveDetails

    public init(swift: TeamLog.PaperContentArchiveDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentArchiveType struct
@objc
public class DBXTeamLogPaperContentArchiveType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentArchiveType(description_: description_)
    }

    let swift: TeamLog.PaperContentArchiveType

    public init(swift: TeamLog.PaperContentArchiveType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created Paper doc/folder.
@objc
public class DBXTeamLogPaperContentCreateDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentCreateDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentCreateDetails

    public init(swift: TeamLog.PaperContentCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentCreateType struct
@objc
public class DBXTeamLogPaperContentCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentCreateType(description_: description_)
    }

    let swift: TeamLog.PaperContentCreateType

    public init(swift: TeamLog.PaperContentCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Permanently deleted Paper doc/folder.
@objc
public class DBXTeamLogPaperContentPermanentlyDeleteDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentPermanentlyDeleteDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentPermanentlyDeleteDetails

    public init(swift: TeamLog.PaperContentPermanentlyDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentPermanentlyDeleteType struct
@objc
public class DBXTeamLogPaperContentPermanentlyDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentPermanentlyDeleteType(description_: description_)
    }

    let swift: TeamLog.PaperContentPermanentlyDeleteType

    public init(swift: TeamLog.PaperContentPermanentlyDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed Paper doc/folder from folder.
@objc
public class DBXTeamLogPaperContentRemoveFromFolderDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber? { swift.targetAssetIndex as NSNumber? }
    /// Parent asset position in the Assets list.
    @objc
    public var parentAssetIndex: NSNumber? { swift.parentAssetIndex as NSNumber? }

    @objc
    public init(eventUuid: String, targetAssetIndex: NSNumber?, parentAssetIndex: NSNumber?) {
        self.swift = TeamLog.PaperContentRemoveFromFolderDetails(
            eventUuid: eventUuid,
            targetAssetIndex: targetAssetIndex?.uint64Value,
            parentAssetIndex: parentAssetIndex?.uint64Value
        )
    }

    let swift: TeamLog.PaperContentRemoveFromFolderDetails

    public init(swift: TeamLog.PaperContentRemoveFromFolderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentRemoveFromFolderType struct
@objc
public class DBXTeamLogPaperContentRemoveFromFolderType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentRemoveFromFolderType(description_: description_)
    }

    let swift: TeamLog.PaperContentRemoveFromFolderType

    public init(swift: TeamLog.PaperContentRemoveFromFolderType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed users and/or groups from Paper doc/folder.
@objc
public class DBXTeamLogPaperContentRemoveMemberDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentRemoveMemberDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentRemoveMemberDetails

    public init(swift: TeamLog.PaperContentRemoveMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentRemoveMemberType struct
@objc
public class DBXTeamLogPaperContentRemoveMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentRemoveMemberType(description_: description_)
    }

    let swift: TeamLog.PaperContentRemoveMemberType

    public init(swift: TeamLog.PaperContentRemoveMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed Paper doc/folder.
@objc
public class DBXTeamLogPaperContentRenameDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentRenameDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentRenameDetails

    public init(swift: TeamLog.PaperContentRenameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentRenameType struct
@objc
public class DBXTeamLogPaperContentRenameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentRenameType(description_: description_)
    }

    let swift: TeamLog.PaperContentRenameType

    public init(swift: TeamLog.PaperContentRenameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored archived Paper doc/folder.
@objc
public class DBXTeamLogPaperContentRestoreDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperContentRestoreDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperContentRestoreDetails

    public init(swift: TeamLog.PaperContentRestoreDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperContentRestoreType struct
@objc
public class DBXTeamLogPaperContentRestoreType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperContentRestoreType(description_: description_)
    }

    let swift: TeamLog.PaperContentRestoreType

    public init(swift: TeamLog.PaperContentRestoreType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy to set default access for newly created Paper folders.
@objc
public class DBXTeamLogPaperDefaultFolderPolicy: NSObject {
    let swift: TeamLog.PaperDefaultFolderPolicy

    public init(swift: TeamLog.PaperDefaultFolderPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PaperDefaultFolderPolicy) -> DBXTeamLogPaperDefaultFolderPolicy {
        switch swift {
        case .everyoneInTeam:
            return DBXTeamLogPaperDefaultFolderPolicyEveryoneInTeam()
        case .inviteOnly:
            return DBXTeamLogPaperDefaultFolderPolicyInviteOnly()
        case .other:
            return DBXTeamLogPaperDefaultFolderPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asEveryoneInTeam: DBXTeamLogPaperDefaultFolderPolicyEveryoneInTeam? {
        self as? DBXTeamLogPaperDefaultFolderPolicyEveryoneInTeam
    }

    @objc
    public var asInviteOnly: DBXTeamLogPaperDefaultFolderPolicyInviteOnly? {
        self as? DBXTeamLogPaperDefaultFolderPolicyInviteOnly
    }

    @objc
    public var asOther: DBXTeamLogPaperDefaultFolderPolicyOther? {
        self as? DBXTeamLogPaperDefaultFolderPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDefaultFolderPolicyEveryoneInTeam: DBXTeamLogPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDefaultFolderPolicy.everyoneInTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDefaultFolderPolicyInviteOnly: DBXTeamLogPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDefaultFolderPolicy.inviteOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDefaultFolderPolicyOther: DBXTeamLogPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDefaultFolderPolicy.other
        super.init(swift: swift)
    }
}

/// Changed Paper Default Folder Policy setting for team.
@objc
public class DBXTeamLogPaperDefaultFolderPolicyChangedDetails: NSObject {
    /// New Paper Default Folder Policy.
    @objc
    public var newValue: DBXTeamLogPaperDefaultFolderPolicy { DBXTeamLogPaperDefaultFolderPolicy(swift: swift.newValue) }
    /// Previous Paper Default Folder Policy.
    @objc
    public var previousValue: DBXTeamLogPaperDefaultFolderPolicy { DBXTeamLogPaperDefaultFolderPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogPaperDefaultFolderPolicy, previousValue: DBXTeamLogPaperDefaultFolderPolicy) {
        self.swift = TeamLog.PaperDefaultFolderPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.PaperDefaultFolderPolicyChangedDetails

    public init(swift: TeamLog.PaperDefaultFolderPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDefaultFolderPolicyChangedType struct
@objc
public class DBXTeamLogPaperDefaultFolderPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDefaultFolderPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.PaperDefaultFolderPolicyChangedType

    public init(swift: TeamLog.PaperDefaultFolderPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if team members can use Paper Desktop
@objc
public class DBXTeamLogPaperDesktopPolicy: NSObject {
    let swift: TeamLog.PaperDesktopPolicy

    public init(swift: TeamLog.PaperDesktopPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PaperDesktopPolicy) -> DBXTeamLogPaperDesktopPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogPaperDesktopPolicyDisabled()
        case .enabled:
            return DBXTeamLogPaperDesktopPolicyEnabled()
        case .other:
            return DBXTeamLogPaperDesktopPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogPaperDesktopPolicyDisabled? {
        self as? DBXTeamLogPaperDesktopPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogPaperDesktopPolicyEnabled? {
        self as? DBXTeamLogPaperDesktopPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogPaperDesktopPolicyOther? {
        self as? DBXTeamLogPaperDesktopPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDesktopPolicyDisabled: DBXTeamLogPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDesktopPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDesktopPolicyEnabled: DBXTeamLogPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDesktopPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDesktopPolicyOther: DBXTeamLogPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperDesktopPolicy.other
        super.init(swift: swift)
    }
}

/// Enabled/disabled Paper Desktop for team.
@objc
public class DBXTeamLogPaperDesktopPolicyChangedDetails: NSObject {
    /// New Paper Desktop policy.
    @objc
    public var newValue: DBXTeamLogPaperDesktopPolicy { DBXTeamLogPaperDesktopPolicy(swift: swift.newValue) }
    /// Previous Paper Desktop policy.
    @objc
    public var previousValue: DBXTeamLogPaperDesktopPolicy { DBXTeamLogPaperDesktopPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogPaperDesktopPolicy, previousValue: DBXTeamLogPaperDesktopPolicy) {
        self.swift = TeamLog.PaperDesktopPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.PaperDesktopPolicyChangedDetails

    public init(swift: TeamLog.PaperDesktopPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDesktopPolicyChangedType struct
@objc
public class DBXTeamLogPaperDesktopPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDesktopPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.PaperDesktopPolicyChangedType

    public init(swift: TeamLog.PaperDesktopPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added Paper doc comment.
@objc
public class DBXTeamLogPaperDocAddCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.PaperDocAddCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.PaperDocAddCommentDetails

    public init(swift: TeamLog.PaperDocAddCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocAddCommentType struct
@objc
public class DBXTeamLogPaperDocAddCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocAddCommentType(description_: description_)
    }

    let swift: TeamLog.PaperDocAddCommentType

    public init(swift: TeamLog.PaperDocAddCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed member permissions for Paper doc.
@objc
public class DBXTeamLogPaperDocChangeMemberRoleDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Paper doc access type.
    @objc
    public var accessType: DBXTeamLogPaperAccessType { DBXTeamLogPaperAccessType(swift: swift.accessType) }

    @objc
    public init(eventUuid: String, accessType: DBXTeamLogPaperAccessType) {
        self.swift = TeamLog.PaperDocChangeMemberRoleDetails(eventUuid: eventUuid, accessType: accessType.swift)
    }

    let swift: TeamLog.PaperDocChangeMemberRoleDetails

    public init(swift: TeamLog.PaperDocChangeMemberRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocChangeMemberRoleType struct
@objc
public class DBXTeamLogPaperDocChangeMemberRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocChangeMemberRoleType(description_: description_)
    }

    let swift: TeamLog.PaperDocChangeMemberRoleType

    public init(swift: TeamLog.PaperDocChangeMemberRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed sharing setting for Paper doc.
@objc
public class DBXTeamLogPaperDocChangeSharingPolicyDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Sharing policy with external users.
    @objc
    public var publicSharingPolicy: String? { swift.publicSharingPolicy }
    /// Sharing policy with team.
    @objc
    public var teamSharingPolicy: String? { swift.teamSharingPolicy }

    @objc
    public init(eventUuid: String, publicSharingPolicy: String?, teamSharingPolicy: String?) {
        self.swift = TeamLog.PaperDocChangeSharingPolicyDetails(
            eventUuid: eventUuid,
            publicSharingPolicy: publicSharingPolicy,
            teamSharingPolicy: teamSharingPolicy
        )
    }

    let swift: TeamLog.PaperDocChangeSharingPolicyDetails

    public init(swift: TeamLog.PaperDocChangeSharingPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocChangeSharingPolicyType struct
@objc
public class DBXTeamLogPaperDocChangeSharingPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocChangeSharingPolicyType(description_: description_)
    }

    let swift: TeamLog.PaperDocChangeSharingPolicyType

    public init(swift: TeamLog.PaperDocChangeSharingPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Followed/unfollowed Paper doc.
@objc
public class DBXTeamLogPaperDocChangeSubscriptionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// New doc subscription level.
    @objc
    public var newSubscriptionLevel: String { swift.newSubscriptionLevel }
    /// Previous doc subscription level. Might be missing due to historical data gap.
    @objc
    public var previousSubscriptionLevel: String? { swift.previousSubscriptionLevel }

    @objc
    public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String?) {
        self.swift = TeamLog.PaperDocChangeSubscriptionDetails(
            eventUuid: eventUuid,
            newSubscriptionLevel: newSubscriptionLevel,
            previousSubscriptionLevel: previousSubscriptionLevel
        )
    }

    let swift: TeamLog.PaperDocChangeSubscriptionDetails

    public init(swift: TeamLog.PaperDocChangeSubscriptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocChangeSubscriptionType struct
@objc
public class DBXTeamLogPaperDocChangeSubscriptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocChangeSubscriptionType(description_: description_)
    }

    let swift: TeamLog.PaperDocChangeSubscriptionType

    public init(swift: TeamLog.PaperDocChangeSubscriptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted Paper doc comment.
@objc
public class DBXTeamLogPaperDocDeleteCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.PaperDocDeleteCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.PaperDocDeleteCommentDetails

    public init(swift: TeamLog.PaperDocDeleteCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocDeleteCommentType struct
@objc
public class DBXTeamLogPaperDocDeleteCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocDeleteCommentType(description_: description_)
    }

    let swift: TeamLog.PaperDocDeleteCommentType

    public init(swift: TeamLog.PaperDocDeleteCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Archived Paper doc.
@objc
public class DBXTeamLogPaperDocDeletedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocDeletedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocDeletedDetails

    public init(swift: TeamLog.PaperDocDeletedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocDeletedType struct
@objc
public class DBXTeamLogPaperDocDeletedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocDeletedType(description_: description_)
    }

    let swift: TeamLog.PaperDocDeletedType

    public init(swift: TeamLog.PaperDocDeletedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded Paper doc in specific format.
@objc
public class DBXTeamLogPaperDocDownloadDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Export file format.
    @objc
    public var exportFileFormat: DBXTeamLogPaperDownloadFormat { DBXTeamLogPaperDownloadFormat(swift: swift.exportFileFormat) }

    @objc
    public init(eventUuid: String, exportFileFormat: DBXTeamLogPaperDownloadFormat) {
        self.swift = TeamLog.PaperDocDownloadDetails(eventUuid: eventUuid, exportFileFormat: exportFileFormat.swift)
    }

    let swift: TeamLog.PaperDocDownloadDetails

    public init(swift: TeamLog.PaperDocDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocDownloadType struct
@objc
public class DBXTeamLogPaperDocDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocDownloadType(description_: description_)
    }

    let swift: TeamLog.PaperDocDownloadType

    public init(swift: TeamLog.PaperDocDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited Paper doc comment.
@objc
public class DBXTeamLogPaperDocEditCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.PaperDocEditCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.PaperDocEditCommentDetails

    public init(swift: TeamLog.PaperDocEditCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocEditCommentType struct
@objc
public class DBXTeamLogPaperDocEditCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocEditCommentType(description_: description_)
    }

    let swift: TeamLog.PaperDocEditCommentType

    public init(swift: TeamLog.PaperDocEditCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited Paper doc.
@objc
public class DBXTeamLogPaperDocEditDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocEditDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocEditDetails

    public init(swift: TeamLog.PaperDocEditDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocEditType struct
@objc
public class DBXTeamLogPaperDocEditType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocEditType(description_: description_)
    }

    let swift: TeamLog.PaperDocEditType

    public init(swift: TeamLog.PaperDocEditType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Followed Paper doc.
@objc
public class DBXTeamLogPaperDocFollowedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocFollowedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocFollowedDetails

    public init(swift: TeamLog.PaperDocFollowedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocFollowedType struct
@objc
public class DBXTeamLogPaperDocFollowedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocFollowedType(description_: description_)
    }

    let swift: TeamLog.PaperDocFollowedType

    public init(swift: TeamLog.PaperDocFollowedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Mentioned user in Paper doc.
@objc
public class DBXTeamLogPaperDocMentionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocMentionDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocMentionDetails

    public init(swift: TeamLog.PaperDocMentionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocMentionType struct
@objc
public class DBXTeamLogPaperDocMentionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocMentionType(description_: description_)
    }

    let swift: TeamLog.PaperDocMentionType

    public init(swift: TeamLog.PaperDocMentionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Transferred ownership of Paper doc.
@objc
public class DBXTeamLogPaperDocOwnershipChangedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Previous owner.
    @objc
    public var oldOwnerUserId: String? { swift.oldOwnerUserId }
    /// New owner.
    @objc
    public var newOwnerUserId: String { swift.newOwnerUserId }

    @objc
    public init(eventUuid: String, newOwnerUserId: String, oldOwnerUserId: String?) {
        self.swift = TeamLog.PaperDocOwnershipChangedDetails(eventUuid: eventUuid, newOwnerUserId: newOwnerUserId, oldOwnerUserId: oldOwnerUserId)
    }

    let swift: TeamLog.PaperDocOwnershipChangedDetails

    public init(swift: TeamLog.PaperDocOwnershipChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocOwnershipChangedType struct
@objc
public class DBXTeamLogPaperDocOwnershipChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocOwnershipChangedType(description_: description_)
    }

    let swift: TeamLog.PaperDocOwnershipChangedType

    public init(swift: TeamLog.PaperDocOwnershipChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested access to Paper doc.
@objc
public class DBXTeamLogPaperDocRequestAccessDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocRequestAccessDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocRequestAccessDetails

    public init(swift: TeamLog.PaperDocRequestAccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocRequestAccessType struct
@objc
public class DBXTeamLogPaperDocRequestAccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocRequestAccessType(description_: description_)
    }

    let swift: TeamLog.PaperDocRequestAccessType

    public init(swift: TeamLog.PaperDocRequestAccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Resolved Paper doc comment.
@objc
public class DBXTeamLogPaperDocResolveCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.PaperDocResolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.PaperDocResolveCommentDetails

    public init(swift: TeamLog.PaperDocResolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocResolveCommentType struct
@objc
public class DBXTeamLogPaperDocResolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocResolveCommentType(description_: description_)
    }

    let swift: TeamLog.PaperDocResolveCommentType

    public init(swift: TeamLog.PaperDocResolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored Paper doc to previous version.
@objc
public class DBXTeamLogPaperDocRevertDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocRevertDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocRevertDetails

    public init(swift: TeamLog.PaperDocRevertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocRevertType struct
@objc
public class DBXTeamLogPaperDocRevertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocRevertType(description_: description_)
    }

    let swift: TeamLog.PaperDocRevertType

    public init(swift: TeamLog.PaperDocRevertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared Paper doc via Slack.
@objc
public class DBXTeamLogPaperDocSlackShareDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocSlackShareDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocSlackShareDetails

    public init(swift: TeamLog.PaperDocSlackShareDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocSlackShareType struct
@objc
public class DBXTeamLogPaperDocSlackShareType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocSlackShareType(description_: description_)
    }

    let swift: TeamLog.PaperDocSlackShareType

    public init(swift: TeamLog.PaperDocSlackShareType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared Paper doc with users and/or groups.
@objc
public class DBXTeamLogPaperDocTeamInviteDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocTeamInviteDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocTeamInviteDetails

    public init(swift: TeamLog.PaperDocTeamInviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocTeamInviteType struct
@objc
public class DBXTeamLogPaperDocTeamInviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocTeamInviteType(description_: description_)
    }

    let swift: TeamLog.PaperDocTeamInviteType

    public init(swift: TeamLog.PaperDocTeamInviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted Paper doc.
@objc
public class DBXTeamLogPaperDocTrashedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocTrashedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocTrashedDetails

    public init(swift: TeamLog.PaperDocTrashedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocTrashedType struct
@objc
public class DBXTeamLogPaperDocTrashedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocTrashedType(description_: description_)
    }

    let swift: TeamLog.PaperDocTrashedType

    public init(swift: TeamLog.PaperDocTrashedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unresolved Paper doc comment.
@objc
public class DBXTeamLogPaperDocUnresolveCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.PaperDocUnresolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.PaperDocUnresolveCommentDetails

    public init(swift: TeamLog.PaperDocUnresolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocUnresolveCommentType struct
@objc
public class DBXTeamLogPaperDocUnresolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocUnresolveCommentType(description_: description_)
    }

    let swift: TeamLog.PaperDocUnresolveCommentType

    public init(swift: TeamLog.PaperDocUnresolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored Paper doc.
@objc
public class DBXTeamLogPaperDocUntrashedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocUntrashedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocUntrashedDetails

    public init(swift: TeamLog.PaperDocUntrashedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocUntrashedType struct
@objc
public class DBXTeamLogPaperDocUntrashedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocUntrashedType(description_: description_)
    }

    let swift: TeamLog.PaperDocUntrashedType

    public init(swift: TeamLog.PaperDocUntrashedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Viewed Paper doc.
@objc
public class DBXTeamLogPaperDocViewDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperDocViewDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperDocViewDetails

    public init(swift: TeamLog.PaperDocViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDocViewType struct
@objc
public class DBXTeamLogPaperDocViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperDocViewType(description_: description_)
    }

    let swift: TeamLog.PaperDocViewType

    public init(swift: TeamLog.PaperDocViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Paper document's logged information.
@objc
public class DBXTeamLogPaperDocumentLogInfo: NSObject {
    /// Papers document Id.
    @objc
    public var docId: String { swift.docId }
    /// Paper document title.
    @objc
    public var docTitle: String { swift.docTitle }

    @objc
    public init(docId: String, docTitle: String) {
        self.swift = TeamLog.PaperDocumentLogInfo(docId: docId, docTitle: docTitle)
    }

    let swift: TeamLog.PaperDocumentLogInfo

    public init(swift: TeamLog.PaperDocumentLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperDownloadFormat union
@objc
public class DBXTeamLogPaperDownloadFormat: NSObject {
    let swift: TeamLog.PaperDownloadFormat

    public init(swift: TeamLog.PaperDownloadFormat) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PaperDownloadFormat) -> DBXTeamLogPaperDownloadFormat {
        switch swift {
        case .docx:
            return DBXTeamLogPaperDownloadFormatDocx()
        case .html:
            return DBXTeamLogPaperDownloadFormatHtml()
        case .markdown:
            return DBXTeamLogPaperDownloadFormatMarkdown()
        case .pdf:
            return DBXTeamLogPaperDownloadFormatPdf()
        case .other:
            return DBXTeamLogPaperDownloadFormatOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDocx: DBXTeamLogPaperDownloadFormatDocx? {
        self as? DBXTeamLogPaperDownloadFormatDocx
    }

    @objc
    public var asHtml: DBXTeamLogPaperDownloadFormatHtml? {
        self as? DBXTeamLogPaperDownloadFormatHtml
    }

    @objc
    public var asMarkdown: DBXTeamLogPaperDownloadFormatMarkdown? {
        self as? DBXTeamLogPaperDownloadFormatMarkdown
    }

    @objc
    public var asPdf: DBXTeamLogPaperDownloadFormatPdf? {
        self as? DBXTeamLogPaperDownloadFormatPdf
    }

    @objc
    public var asOther: DBXTeamLogPaperDownloadFormatOther? {
        self as? DBXTeamLogPaperDownloadFormatOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDownloadFormatDocx: DBXTeamLogPaperDownloadFormat {
    @objc
    public init() {
        let swift = TeamLog.PaperDownloadFormat.docx
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDownloadFormatHtml: DBXTeamLogPaperDownloadFormat {
    @objc
    public init() {
        let swift = TeamLog.PaperDownloadFormat.html
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDownloadFormatMarkdown: DBXTeamLogPaperDownloadFormat {
    @objc
    public init() {
        let swift = TeamLog.PaperDownloadFormat.markdown
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDownloadFormatPdf: DBXTeamLogPaperDownloadFormat {
    @objc
    public init() {
        let swift = TeamLog.PaperDownloadFormat.pdf
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperDownloadFormatOther: DBXTeamLogPaperDownloadFormat {
    @objc
    public init() {
        let swift = TeamLog.PaperDownloadFormat.other
        super.init(swift: swift)
    }
}

/// Added users to Paper-enabled users list.
@objc
public class DBXTeamLogPaperEnabledUsersGroupAdditionDetails: NSObject {
    let swift: TeamLog.PaperEnabledUsersGroupAdditionDetails

    public init(swift: TeamLog.PaperEnabledUsersGroupAdditionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperEnabledUsersGroupAdditionType struct
@objc
public class DBXTeamLogPaperEnabledUsersGroupAdditionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperEnabledUsersGroupAdditionType(description_: description_)
    }

    let swift: TeamLog.PaperEnabledUsersGroupAdditionType

    public init(swift: TeamLog.PaperEnabledUsersGroupAdditionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed users from Paper-enabled users list.
@objc
public class DBXTeamLogPaperEnabledUsersGroupRemovalDetails: NSObject {
    let swift: TeamLog.PaperEnabledUsersGroupRemovalDetails

    public init(swift: TeamLog.PaperEnabledUsersGroupRemovalDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperEnabledUsersGroupRemovalType struct
@objc
public class DBXTeamLogPaperEnabledUsersGroupRemovalType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperEnabledUsersGroupRemovalType(description_: description_)
    }

    let swift: TeamLog.PaperEnabledUsersGroupRemovalType

    public init(swift: TeamLog.PaperEnabledUsersGroupRemovalType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper external sharing setting to anyone.
@objc
public class DBXTeamLogPaperExternalViewAllowDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperExternalViewAllowDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperExternalViewAllowDetails

    public init(swift: TeamLog.PaperExternalViewAllowDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperExternalViewAllowType struct
@objc
public class DBXTeamLogPaperExternalViewAllowType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperExternalViewAllowType(description_: description_)
    }

    let swift: TeamLog.PaperExternalViewAllowType

    public init(swift: TeamLog.PaperExternalViewAllowType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper external sharing setting to default team.
@objc
public class DBXTeamLogPaperExternalViewDefaultTeamDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperExternalViewDefaultTeamDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperExternalViewDefaultTeamDetails

    public init(swift: TeamLog.PaperExternalViewDefaultTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperExternalViewDefaultTeamType struct
@objc
public class DBXTeamLogPaperExternalViewDefaultTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperExternalViewDefaultTeamType(description_: description_)
    }

    let swift: TeamLog.PaperExternalViewDefaultTeamType

    public init(swift: TeamLog.PaperExternalViewDefaultTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Paper external sharing setting to team-only.
@objc
public class DBXTeamLogPaperExternalViewForbidDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperExternalViewForbidDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperExternalViewForbidDetails

    public init(swift: TeamLog.PaperExternalViewForbidDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperExternalViewForbidType struct
@objc
public class DBXTeamLogPaperExternalViewForbidType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperExternalViewForbidType(description_: description_)
    }

    let swift: TeamLog.PaperExternalViewForbidType

    public init(swift: TeamLog.PaperExternalViewForbidType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Followed/unfollowed Paper folder.
@objc
public class DBXTeamLogPaperFolderChangeSubscriptionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// New folder subscription level.
    @objc
    public var newSubscriptionLevel: String { swift.newSubscriptionLevel }
    /// Previous folder subscription level. Might be missing due to historical data gap.
    @objc
    public var previousSubscriptionLevel: String? { swift.previousSubscriptionLevel }

    @objc
    public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String?) {
        self.swift = TeamLog.PaperFolderChangeSubscriptionDetails(
            eventUuid: eventUuid,
            newSubscriptionLevel: newSubscriptionLevel,
            previousSubscriptionLevel: previousSubscriptionLevel
        )
    }

    let swift: TeamLog.PaperFolderChangeSubscriptionDetails

    public init(swift: TeamLog.PaperFolderChangeSubscriptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperFolderChangeSubscriptionType struct
@objc
public class DBXTeamLogPaperFolderChangeSubscriptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperFolderChangeSubscriptionType(description_: description_)
    }

    let swift: TeamLog.PaperFolderChangeSubscriptionType

    public init(swift: TeamLog.PaperFolderChangeSubscriptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Archived Paper folder.
@objc
public class DBXTeamLogPaperFolderDeletedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperFolderDeletedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperFolderDeletedDetails

    public init(swift: TeamLog.PaperFolderDeletedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperFolderDeletedType struct
@objc
public class DBXTeamLogPaperFolderDeletedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperFolderDeletedType(description_: description_)
    }

    let swift: TeamLog.PaperFolderDeletedType

    public init(swift: TeamLog.PaperFolderDeletedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Followed Paper folder.
@objc
public class DBXTeamLogPaperFolderFollowedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperFolderFollowedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperFolderFollowedDetails

    public init(swift: TeamLog.PaperFolderFollowedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperFolderFollowedType struct
@objc
public class DBXTeamLogPaperFolderFollowedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperFolderFollowedType(description_: description_)
    }

    let swift: TeamLog.PaperFolderFollowedType

    public init(swift: TeamLog.PaperFolderFollowedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Paper folder's logged information.
@objc
public class DBXTeamLogPaperFolderLogInfo: NSObject {
    /// Papers folder Id.
    @objc
    public var folderId: String { swift.folderId }
    /// Paper folder name.
    @objc
    public var folderName: String { swift.folderName }

    @objc
    public init(folderId: String, folderName: String) {
        self.swift = TeamLog.PaperFolderLogInfo(folderId: folderId, folderName: folderName)
    }

    let swift: TeamLog.PaperFolderLogInfo

    public init(swift: TeamLog.PaperFolderLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared Paper folder with users and/or groups.
@objc
public class DBXTeamLogPaperFolderTeamInviteDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperFolderTeamInviteDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperFolderTeamInviteDetails

    public init(swift: TeamLog.PaperFolderTeamInviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperFolderTeamInviteType struct
@objc
public class DBXTeamLogPaperFolderTeamInviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperFolderTeamInviteType(description_: description_)
    }

    let swift: TeamLog.PaperFolderTeamInviteType

    public init(swift: TeamLog.PaperFolderTeamInviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if team members can share Paper documents externally.
@objc
public class DBXTeamLogPaperMemberPolicy: NSObject {
    let swift: TeamLog.PaperMemberPolicy

    public init(swift: TeamLog.PaperMemberPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PaperMemberPolicy) -> DBXTeamLogPaperMemberPolicy {
        switch swift {
        case .anyoneWithLink:
            return DBXTeamLogPaperMemberPolicyAnyoneWithLink()
        case .onlyTeam:
            return DBXTeamLogPaperMemberPolicyOnlyTeam()
        case .teamAndExplicitlyShared:
            return DBXTeamLogPaperMemberPolicyTeamAndExplicitlyShared()
        case .other:
            return DBXTeamLogPaperMemberPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAnyoneWithLink: DBXTeamLogPaperMemberPolicyAnyoneWithLink? {
        self as? DBXTeamLogPaperMemberPolicyAnyoneWithLink
    }

    @objc
    public var asOnlyTeam: DBXTeamLogPaperMemberPolicyOnlyTeam? {
        self as? DBXTeamLogPaperMemberPolicyOnlyTeam
    }

    @objc
    public var asTeamAndExplicitlyShared: DBXTeamLogPaperMemberPolicyTeamAndExplicitlyShared? {
        self as? DBXTeamLogPaperMemberPolicyTeamAndExplicitlyShared
    }

    @objc
    public var asOther: DBXTeamLogPaperMemberPolicyOther? {
        self as? DBXTeamLogPaperMemberPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperMemberPolicyAnyoneWithLink: DBXTeamLogPaperMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperMemberPolicy.anyoneWithLink
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperMemberPolicyOnlyTeam: DBXTeamLogPaperMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperMemberPolicy.onlyTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperMemberPolicyTeamAndExplicitlyShared: DBXTeamLogPaperMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperMemberPolicy.teamAndExplicitlyShared
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPaperMemberPolicyOther: DBXTeamLogPaperMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.PaperMemberPolicy.other
        super.init(swift: swift)
    }
}

/// Changed permissions for published doc.
@objc
public class DBXTeamLogPaperPublishedLinkChangePermissionDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// New permission level.
    @objc
    public var newPermissionLevel: String { swift.newPermissionLevel }
    /// Previous permission level.
    @objc
    public var previousPermissionLevel: String { swift.previousPermissionLevel }

    @objc
    public init(eventUuid: String, newPermissionLevel: String, previousPermissionLevel: String) {
        self.swift = TeamLog.PaperPublishedLinkChangePermissionDetails(
            eventUuid: eventUuid,
            newPermissionLevel: newPermissionLevel,
            previousPermissionLevel: previousPermissionLevel
        )
    }

    let swift: TeamLog.PaperPublishedLinkChangePermissionDetails

    public init(swift: TeamLog.PaperPublishedLinkChangePermissionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperPublishedLinkChangePermissionType struct
@objc
public class DBXTeamLogPaperPublishedLinkChangePermissionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperPublishedLinkChangePermissionType(description_: description_)
    }

    let swift: TeamLog.PaperPublishedLinkChangePermissionType

    public init(swift: TeamLog.PaperPublishedLinkChangePermissionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Published doc.
@objc
public class DBXTeamLogPaperPublishedLinkCreateDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperPublishedLinkCreateDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperPublishedLinkCreateDetails

    public init(swift: TeamLog.PaperPublishedLinkCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperPublishedLinkCreateType struct
@objc
public class DBXTeamLogPaperPublishedLinkCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperPublishedLinkCreateType(description_: description_)
    }

    let swift: TeamLog.PaperPublishedLinkCreateType

    public init(swift: TeamLog.PaperPublishedLinkCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unpublished doc.
@objc
public class DBXTeamLogPaperPublishedLinkDisabledDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperPublishedLinkDisabledDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperPublishedLinkDisabledDetails

    public init(swift: TeamLog.PaperPublishedLinkDisabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperPublishedLinkDisabledType struct
@objc
public class DBXTeamLogPaperPublishedLinkDisabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperPublishedLinkDisabledType(description_: description_)
    }

    let swift: TeamLog.PaperPublishedLinkDisabledType

    public init(swift: TeamLog.PaperPublishedLinkDisabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Viewed published doc.
@objc
public class DBXTeamLogPaperPublishedLinkViewDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.PaperPublishedLinkViewDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.PaperPublishedLinkViewDetails

    public init(swift: TeamLog.PaperPublishedLinkViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PaperPublishedLinkViewType struct
@objc
public class DBXTeamLogPaperPublishedLinkViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PaperPublishedLinkViewType(description_: description_)
    }

    let swift: TeamLog.PaperPublishedLinkViewType

    public init(swift: TeamLog.PaperPublishedLinkViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// A user or group
@objc
public class DBXTeamLogParticipantLogInfo: NSObject {
    let swift: TeamLog.ParticipantLogInfo

    public init(swift: TeamLog.ParticipantLogInfo) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ParticipantLogInfo) -> DBXTeamLogParticipantLogInfo {
        switch swift {
        case .group(let swiftArg):
            let arg = DBXTeamLogGroupLogInfo(swift: swiftArg)
            return DBXTeamLogParticipantLogInfoGroup(arg)
        case .user(let swiftArg):
            let arg = DBXTeamLogUserLogInfo(swift: swiftArg)
            return DBXTeamLogParticipantLogInfoUser(arg)
        case .other:
            return DBXTeamLogParticipantLogInfoOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asGroup: DBXTeamLogParticipantLogInfoGroup? {
        self as? DBXTeamLogParticipantLogInfoGroup
    }

    @objc
    public var asUser: DBXTeamLogParticipantLogInfoUser? {
        self as? DBXTeamLogParticipantLogInfoUser
    }

    @objc
    public var asOther: DBXTeamLogParticipantLogInfoOther? {
        self as? DBXTeamLogParticipantLogInfoOther
    }
}

/// Group details.
@objc
public class DBXTeamLogParticipantLogInfoGroup: DBXTeamLogParticipantLogInfo {
    @objc
    public var group: DBXTeamLogGroupLogInfo

    @objc
    public init(_ arg: DBXTeamLogGroupLogInfo) {
        self.group = arg
        let swift = TeamLog.ParticipantLogInfo.group(arg.swift)
        super.init(swift: swift)
    }
}

/// A user with a Dropbox account.
@objc
public class DBXTeamLogParticipantLogInfoUser: DBXTeamLogParticipantLogInfo {
    @objc
    public var user: DBXTeamLogUserLogInfo

    @objc
    public init(_ arg: DBXTeamLogUserLogInfo) {
        self.user = arg
        let swift = TeamLog.ParticipantLogInfo.user(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogParticipantLogInfoOther: DBXTeamLogParticipantLogInfo {
    @objc
    public init() {
        let swift = TeamLog.ParticipantLogInfo.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PassPolicy union
@objc
public class DBXTeamLogPassPolicy: NSObject {
    let swift: TeamLog.PassPolicy

    public init(swift: TeamLog.PassPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PassPolicy) -> DBXTeamLogPassPolicy {
        switch swift {
        case .allow:
            return DBXTeamLogPassPolicyAllow()
        case .disabled:
            return DBXTeamLogPassPolicyDisabled()
        case .enabled:
            return DBXTeamLogPassPolicyEnabled()
        case .other:
            return DBXTeamLogPassPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllow: DBXTeamLogPassPolicyAllow? {
        self as? DBXTeamLogPassPolicyAllow
    }

    @objc
    public var asDisabled: DBXTeamLogPassPolicyDisabled? {
        self as? DBXTeamLogPassPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogPassPolicyEnabled? {
        self as? DBXTeamLogPassPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogPassPolicyOther? {
        self as? DBXTeamLogPassPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPassPolicyAllow: DBXTeamLogPassPolicy {
    @objc
    public init() {
        let swift = TeamLog.PassPolicy.allow
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPassPolicyDisabled: DBXTeamLogPassPolicy {
    @objc
    public init() {
        let swift = TeamLog.PassPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPassPolicyEnabled: DBXTeamLogPassPolicy {
    @objc
    public init() {
        let swift = TeamLog.PassPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPassPolicyOther: DBXTeamLogPassPolicy {
    @objc
    public init() {
        let swift = TeamLog.PassPolicy.other
        super.init(swift: swift)
    }
}

/// Changed password.
@objc
public class DBXTeamLogPasswordChangeDetails: NSObject {
    let swift: TeamLog.PasswordChangeDetails

    public init(swift: TeamLog.PasswordChangeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PasswordChangeType struct
@objc
public class DBXTeamLogPasswordChangeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PasswordChangeType(description_: description_)
    }

    let swift: TeamLog.PasswordChangeType

    public init(swift: TeamLog.PasswordChangeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reset all team member passwords.
@objc
public class DBXTeamLogPasswordResetAllDetails: NSObject {
    let swift: TeamLog.PasswordResetAllDetails

    public init(swift: TeamLog.PasswordResetAllDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PasswordResetAllType struct
@objc
public class DBXTeamLogPasswordResetAllType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PasswordResetAllType(description_: description_)
    }

    let swift: TeamLog.PasswordResetAllType

    public init(swift: TeamLog.PasswordResetAllType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reset password.
@objc
public class DBXTeamLogPasswordResetDetails: NSObject {
    let swift: TeamLog.PasswordResetDetails

    public init(swift: TeamLog.PasswordResetDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PasswordResetType struct
@objc
public class DBXTeamLogPasswordResetType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PasswordResetType(description_: description_)
    }

    let swift: TeamLog.PasswordResetType

    public init(swift: TeamLog.PasswordResetType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team password strength requirements.
@objc
public class DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails: NSObject {
    /// Old password strength policy.
    @objc
    public var previousValue: DBXTeamPoliciesPasswordStrengthPolicy { DBXTeamPoliciesPasswordStrengthPolicy(swift: swift.previousValue) }
    /// New password strength policy.
    @objc
    public var newValue: DBXTeamPoliciesPasswordStrengthPolicy { DBXTeamPoliciesPasswordStrengthPolicy(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamPoliciesPasswordStrengthPolicy, newValue: DBXTeamPoliciesPasswordStrengthPolicy) {
        self.swift = TeamLog.PasswordStrengthRequirementsChangePolicyDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.PasswordStrengthRequirementsChangePolicyDetails

    public init(swift: TeamLog.PasswordStrengthRequirementsChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PasswordStrengthRequirementsChangePolicyType struct
@objc
public class DBXTeamLogPasswordStrengthRequirementsChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PasswordStrengthRequirementsChangePolicyType(description_: description_)
    }

    let swift: TeamLog.PasswordStrengthRequirementsChangePolicyType

    public init(swift: TeamLog.PasswordStrengthRequirementsChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Path's details.
@objc
public class DBXTeamLogPathLogInfo: NSObject {
    /// Fully qualified path relative to event's context.
    @objc
    public var contextual: String? { swift.contextual }
    /// Path relative to the namespace containing the content.
    @objc
    public var namespaceRelative: DBXTeamLogNamespaceRelativePathLogInfo { DBXTeamLogNamespaceRelativePathLogInfo(swift: swift.namespaceRelative) }

    @objc
    public init(namespaceRelative: DBXTeamLogNamespaceRelativePathLogInfo, contextual: String?) {
        self.swift = TeamLog.PathLogInfo(namespaceRelative: namespaceRelative.swift, contextual: contextual)
    }

    let swift: TeamLog.PathLogInfo

    public init(swift: TeamLog.PathLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added pending secondary email.
@objc
public class DBXTeamLogPendingSecondaryEmailAddedDetails: NSObject {
    /// New pending secondary email.
    @objc
    public var secondaryEmail: String { swift.secondaryEmail }

    @objc
    public init(secondaryEmail: String) {
        self.swift = TeamLog.PendingSecondaryEmailAddedDetails(secondaryEmail: secondaryEmail)
    }

    let swift: TeamLog.PendingSecondaryEmailAddedDetails

    public init(swift: TeamLog.PendingSecondaryEmailAddedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PendingSecondaryEmailAddedType struct
@objc
public class DBXTeamLogPendingSecondaryEmailAddedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PendingSecondaryEmailAddedType(description_: description_)
    }

    let swift: TeamLog.PendingSecondaryEmailAddedType

    public init(swift: TeamLog.PendingSecondaryEmailAddedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled ability of team members to permanently delete content.
@objc
public class DBXTeamLogPermanentDeleteChangePolicyDetails: NSObject {
    /// New permanent delete content policy.
    @objc
    public var newValue: DBXTeamLogContentPermanentDeletePolicy { DBXTeamLogContentPermanentDeletePolicy(swift: swift.newValue) }
    /// Previous permanent delete content policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogContentPermanentDeletePolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogContentPermanentDeletePolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogContentPermanentDeletePolicy, previousValue: DBXTeamLogContentPermanentDeletePolicy?) {
        self.swift = TeamLog.PermanentDeleteChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.PermanentDeleteChangePolicyDetails

    public init(swift: TeamLog.PermanentDeleteChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PermanentDeleteChangePolicyType struct
@objc
public class DBXTeamLogPermanentDeleteChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.PermanentDeleteChangePolicyType(description_: description_)
    }

    let swift: TeamLog.PermanentDeleteChangePolicyType

    public init(swift: TeamLog.PermanentDeleteChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible PlacementRestriction union
@objc
public class DBXTeamLogPlacementRestriction: NSObject {
    let swift: TeamLog.PlacementRestriction

    public init(swift: TeamLog.PlacementRestriction) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PlacementRestriction) -> DBXTeamLogPlacementRestriction {
        switch swift {
        case .australiaOnly:
            return DBXTeamLogPlacementRestrictionAustraliaOnly()
        case .europeOnly:
            return DBXTeamLogPlacementRestrictionEuropeOnly()
        case .japanOnly:
            return DBXTeamLogPlacementRestrictionJapanOnly()
        case .none:
            return DBXTeamLogPlacementRestrictionNone()
        case .ukOnly:
            return DBXTeamLogPlacementRestrictionUkOnly()
        case .usS3Only:
            return DBXTeamLogPlacementRestrictionUsS3Only()
        case .other:
            return DBXTeamLogPlacementRestrictionOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAustraliaOnly: DBXTeamLogPlacementRestrictionAustraliaOnly? {
        self as? DBXTeamLogPlacementRestrictionAustraliaOnly
    }

    @objc
    public var asEuropeOnly: DBXTeamLogPlacementRestrictionEuropeOnly? {
        self as? DBXTeamLogPlacementRestrictionEuropeOnly
    }

    @objc
    public var asJapanOnly: DBXTeamLogPlacementRestrictionJapanOnly? {
        self as? DBXTeamLogPlacementRestrictionJapanOnly
    }

    @objc
    public var asNone: DBXTeamLogPlacementRestrictionNone? {
        self as? DBXTeamLogPlacementRestrictionNone
    }

    @objc
    public var asUkOnly: DBXTeamLogPlacementRestrictionUkOnly? {
        self as? DBXTeamLogPlacementRestrictionUkOnly
    }

    @objc
    public var asUsS3Only: DBXTeamLogPlacementRestrictionUsS3Only? {
        self as? DBXTeamLogPlacementRestrictionUsS3Only
    }

    @objc
    public var asOther: DBXTeamLogPlacementRestrictionOther? {
        self as? DBXTeamLogPlacementRestrictionOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionAustraliaOnly: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.australiaOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionEuropeOnly: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.europeOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionJapanOnly: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.japanOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionNone: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.none
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionUkOnly: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.ukOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionUsS3Only: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.usS3Only
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPlacementRestrictionOther: DBXTeamLogPlacementRestriction {
    @objc
    public init() {
        let swift = TeamLog.PlacementRestriction.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PolicyType union
@objc
public class DBXTeamLogPolicyType: NSObject {
    let swift: TeamLog.PolicyType

    public init(swift: TeamLog.PolicyType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.PolicyType) -> DBXTeamLogPolicyType {
        switch swift {
        case .disposition:
            return DBXTeamLogPolicyTypeDisposition()
        case .retention:
            return DBXTeamLogPolicyTypeRetention()
        case .other:
            return DBXTeamLogPolicyTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisposition: DBXTeamLogPolicyTypeDisposition? {
        self as? DBXTeamLogPolicyTypeDisposition
    }

    @objc
    public var asRetention: DBXTeamLogPolicyTypeRetention? {
        self as? DBXTeamLogPolicyTypeRetention
    }

    @objc
    public var asOther: DBXTeamLogPolicyTypeOther? {
        self as? DBXTeamLogPolicyTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPolicyTypeDisposition: DBXTeamLogPolicyType {
    @objc
    public init() {
        let swift = TeamLog.PolicyType.disposition
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPolicyTypeRetention: DBXTeamLogPolicyType {
    @objc
    public init() {
        let swift = TeamLog.PolicyType.retention
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogPolicyTypeOther: DBXTeamLogPolicyType {
    @objc
    public init() {
        let swift = TeamLog.PolicyType.other
        super.init(swift: swift)
    }
}

/// Team merge request acceptance details shown to the primary team
@objc
public class DBXTeamLogPrimaryTeamRequestAcceptedDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.PrimaryTeamRequestAcceptedDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.PrimaryTeamRequestAcceptedDetails

    public init(swift: TeamLog.PrimaryTeamRequestAcceptedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request cancellation details shown to the primary team
@objc
public class DBXTeamLogPrimaryTeamRequestCanceledDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.PrimaryTeamRequestCanceledDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.PrimaryTeamRequestCanceledDetails

    public init(swift: TeamLog.PrimaryTeamRequestCanceledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request expiration details shown to the primary team
@objc
public class DBXTeamLogPrimaryTeamRequestExpiredDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.PrimaryTeamRequestExpiredDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.PrimaryTeamRequestExpiredDetails

    public init(swift: TeamLog.PrimaryTeamRequestExpiredDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request reminder details shown to the primary team
@objc
public class DBXTeamLogPrimaryTeamRequestReminderDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(secondaryTeam: String, sentTo: String) {
        self.swift = TeamLog.PrimaryTeamRequestReminderDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
    }

    let swift: TeamLog.PrimaryTeamRequestReminderDetails

    public init(swift: TeamLog.PrimaryTeamRequestReminderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Quick action type.
@objc
public class DBXTeamLogQuickActionType: NSObject {
    let swift: TeamLog.QuickActionType

    public init(swift: TeamLog.QuickActionType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.QuickActionType) -> DBXTeamLogQuickActionType {
        switch swift {
        case .deleteSharedLink:
            return DBXTeamLogQuickActionTypeDeleteSharedLink()
        case .resetPassword:
            return DBXTeamLogQuickActionTypeResetPassword()
        case .restoreFileOrFolder:
            return DBXTeamLogQuickActionTypeRestoreFileOrFolder()
        case .unlinkApp:
            return DBXTeamLogQuickActionTypeUnlinkApp()
        case .unlinkDevice:
            return DBXTeamLogQuickActionTypeUnlinkDevice()
        case .unlinkSession:
            return DBXTeamLogQuickActionTypeUnlinkSession()
        case .other:
            return DBXTeamLogQuickActionTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDeleteSharedLink: DBXTeamLogQuickActionTypeDeleteSharedLink? {
        self as? DBXTeamLogQuickActionTypeDeleteSharedLink
    }

    @objc
    public var asResetPassword: DBXTeamLogQuickActionTypeResetPassword? {
        self as? DBXTeamLogQuickActionTypeResetPassword
    }

    @objc
    public var asRestoreFileOrFolder: DBXTeamLogQuickActionTypeRestoreFileOrFolder? {
        self as? DBXTeamLogQuickActionTypeRestoreFileOrFolder
    }

    @objc
    public var asUnlinkApp: DBXTeamLogQuickActionTypeUnlinkApp? {
        self as? DBXTeamLogQuickActionTypeUnlinkApp
    }

    @objc
    public var asUnlinkDevice: DBXTeamLogQuickActionTypeUnlinkDevice? {
        self as? DBXTeamLogQuickActionTypeUnlinkDevice
    }

    @objc
    public var asUnlinkSession: DBXTeamLogQuickActionTypeUnlinkSession? {
        self as? DBXTeamLogQuickActionTypeUnlinkSession
    }

    @objc
    public var asOther: DBXTeamLogQuickActionTypeOther? {
        self as? DBXTeamLogQuickActionTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeDeleteSharedLink: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.deleteSharedLink
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeResetPassword: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.resetPassword
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeRestoreFileOrFolder: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.restoreFileOrFolder
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeUnlinkApp: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.unlinkApp
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeUnlinkDevice: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.unlinkDevice
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeUnlinkSession: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.unlinkSession
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogQuickActionTypeOther: DBXTeamLogQuickActionType {
    @objc
    public init() {
        let swift = TeamLog.QuickActionType.other
        super.init(swift: swift)
    }
}

/// Created ransomware report.
@objc
public class DBXTeamLogRansomwareAlertCreateReportDetails: NSObject {
    let swift: TeamLog.RansomwareAlertCreateReportDetails

    public init(swift: TeamLog.RansomwareAlertCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't generate ransomware report.
@objc
public class DBXTeamLogRansomwareAlertCreateReportFailedDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.RansomwareAlertCreateReportFailedDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.RansomwareAlertCreateReportFailedDetails

    public init(swift: TeamLog.RansomwareAlertCreateReportFailedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RansomwareAlertCreateReportFailedType struct
@objc
public class DBXTeamLogRansomwareAlertCreateReportFailedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RansomwareAlertCreateReportFailedType(description_: description_)
    }

    let swift: TeamLog.RansomwareAlertCreateReportFailedType

    public init(swift: TeamLog.RansomwareAlertCreateReportFailedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RansomwareAlertCreateReportType struct
@objc
public class DBXTeamLogRansomwareAlertCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RansomwareAlertCreateReportType(description_: description_)
    }

    let swift: TeamLog.RansomwareAlertCreateReportType

    public init(swift: TeamLog.RansomwareAlertCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Completed ransomware restore process.
@objc
public class DBXTeamLogRansomwareRestoreProcessCompletedDetails: NSObject {
    /// The status of the restore process.
    @objc
    public var status: String { swift.status }
    /// Restored files count.
    @objc
    public var restoredFilesCount: NSNumber { swift.restoredFilesCount as NSNumber }
    /// Restored files failed count.
    @objc
    public var restoredFilesFailedCount: NSNumber { swift.restoredFilesFailedCount as NSNumber }

    @objc
    public init(status: String, restoredFilesCount: NSNumber, restoredFilesFailedCount: NSNumber) {
        self.swift = TeamLog.RansomwareRestoreProcessCompletedDetails(
            status: status,
            restoredFilesCount: restoredFilesCount.int64Value,
            restoredFilesFailedCount: restoredFilesFailedCount.int64Value
        )
    }

    let swift: TeamLog.RansomwareRestoreProcessCompletedDetails

    public init(swift: TeamLog.RansomwareRestoreProcessCompletedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RansomwareRestoreProcessCompletedType struct
@objc
public class DBXTeamLogRansomwareRestoreProcessCompletedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RansomwareRestoreProcessCompletedType(description_: description_)
    }

    let swift: TeamLog.RansomwareRestoreProcessCompletedType

    public init(swift: TeamLog.RansomwareRestoreProcessCompletedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Started ransomware restore process.
@objc
public class DBXTeamLogRansomwareRestoreProcessStartedDetails: NSObject {
    /// Ransomware filename extension.
    @objc
    public var extension_: String { swift.extension_ }

    @objc
    public init(extension_: String) {
        self.swift = TeamLog.RansomwareRestoreProcessStartedDetails(extension_: extension_)
    }

    let swift: TeamLog.RansomwareRestoreProcessStartedDetails

    public init(swift: TeamLog.RansomwareRestoreProcessStartedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RansomwareRestoreProcessStartedType struct
@objc
public class DBXTeamLogRansomwareRestoreProcessStartedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RansomwareRestoreProcessStartedType(description_: description_)
    }

    let swift: TeamLog.RansomwareRestoreProcessStartedType

    public init(swift: TeamLog.RansomwareRestoreProcessStartedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Recipients Configuration
@objc
public class DBXTeamLogRecipientsConfiguration: NSObject {
    /// Recipients setting type.
    @objc
    public var recipientSettingType: DBXTeamLogAlertRecipientsSettingType? { guard let swift = swift.recipientSettingType else { return nil }
        return DBXTeamLogAlertRecipientsSettingType(swift: swift)
    }

    /// A list of user emails to notify.
    @objc
    public var emails: [String]? { swift.emails }
    /// A list of groups to notify.
    @objc
    public var groups: [String]? { swift.groups }

    @objc
    public init(recipientSettingType: DBXTeamLogAlertRecipientsSettingType?, emails: [String]?, groups: [String]?) {
        self.swift = TeamLog.RecipientsConfiguration(recipientSettingType: recipientSettingType?.swift, emails: emails, groups: groups)
    }

    let swift: TeamLog.RecipientsConfiguration

    public init(swift: TeamLog.RecipientsConfiguration) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Provides the indices of the source asset and the destination asset for a relocate action.
@objc
public class DBXTeamLogRelocateAssetReferencesLogInfo: NSObject {
    /// Source asset position in the Assets list.
    @objc
    public var srcAssetIndex: NSNumber { swift.srcAssetIndex as NSNumber }
    /// Destination asset position in the Assets list.
    @objc
    public var destAssetIndex: NSNumber { swift.destAssetIndex as NSNumber }

    @objc
    public init(srcAssetIndex: NSNumber, destAssetIndex: NSNumber) {
        self.swift = TeamLog.RelocateAssetReferencesLogInfo(srcAssetIndex: srcAssetIndex.uint64Value, destAssetIndex: destAssetIndex.uint64Value)
    }

    let swift: TeamLog.RelocateAssetReferencesLogInfo

    public init(swift: TeamLog.RelocateAssetReferencesLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted files in Replay.
@objc
public class DBXTeamLogReplayFileDeleteDetails: NSObject {
    let swift: TeamLog.ReplayFileDeleteDetails

    public init(swift: TeamLog.ReplayFileDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ReplayFileDeleteType struct
@objc
public class DBXTeamLogReplayFileDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ReplayFileDeleteType(description_: description_)
    }

    let swift: TeamLog.ReplayFileDeleteType

    public init(swift: TeamLog.ReplayFileDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created shared link in Replay.
@objc
public class DBXTeamLogReplayFileSharedLinkCreatedDetails: NSObject {
    let swift: TeamLog.ReplayFileSharedLinkCreatedDetails

    public init(swift: TeamLog.ReplayFileSharedLinkCreatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ReplayFileSharedLinkCreatedType struct
@objc
public class DBXTeamLogReplayFileSharedLinkCreatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ReplayFileSharedLinkCreatedType(description_: description_)
    }

    let swift: TeamLog.ReplayFileSharedLinkCreatedType

    public init(swift: TeamLog.ReplayFileSharedLinkCreatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Modified shared link in Replay.
@objc
public class DBXTeamLogReplayFileSharedLinkModifiedDetails: NSObject {
    let swift: TeamLog.ReplayFileSharedLinkModifiedDetails

    public init(swift: TeamLog.ReplayFileSharedLinkModifiedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ReplayFileSharedLinkModifiedType struct
@objc
public class DBXTeamLogReplayFileSharedLinkModifiedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ReplayFileSharedLinkModifiedType(description_: description_)
    }

    let swift: TeamLog.ReplayFileSharedLinkModifiedType

    public init(swift: TeamLog.ReplayFileSharedLinkModifiedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added member to Replay Project.
@objc
public class DBXTeamLogReplayProjectTeamAddDetails: NSObject {
    let swift: TeamLog.ReplayProjectTeamAddDetails

    public init(swift: TeamLog.ReplayProjectTeamAddDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ReplayProjectTeamAddType struct
@objc
public class DBXTeamLogReplayProjectTeamAddType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ReplayProjectTeamAddType(description_: description_)
    }

    let swift: TeamLog.ReplayProjectTeamAddType

    public init(swift: TeamLog.ReplayProjectTeamAddType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed member from Replay Project.
@objc
public class DBXTeamLogReplayProjectTeamDeleteDetails: NSObject {
    let swift: TeamLog.ReplayProjectTeamDeleteDetails

    public init(swift: TeamLog.ReplayProjectTeamDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ReplayProjectTeamDeleteType struct
@objc
public class DBXTeamLogReplayProjectTeamDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ReplayProjectTeamDeleteType(description_: description_)
    }

    let swift: TeamLog.ReplayProjectTeamDeleteType

    public init(swift: TeamLog.ReplayProjectTeamDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reseller information.
@objc
public class DBXTeamLogResellerLogInfo: NSObject {
    /// Reseller name.
    @objc
    public var resellerName: String { swift.resellerName }
    /// Reseller email.
    @objc
    public var resellerEmail: String { swift.resellerEmail }

    @objc
    public init(resellerName: String, resellerEmail: String) {
        self.swift = TeamLog.ResellerLogInfo(resellerName: resellerName, resellerEmail: resellerEmail)
    }

    let swift: TeamLog.ResellerLogInfo

    public init(swift: TeamLog.ResellerLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ResellerRole union
@objc
public class DBXTeamLogResellerRole: NSObject {
    let swift: TeamLog.ResellerRole

    public init(swift: TeamLog.ResellerRole) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ResellerRole) -> DBXTeamLogResellerRole {
        switch swift {
        case .notReseller:
            return DBXTeamLogResellerRoleNotReseller()
        case .resellerAdmin:
            return DBXTeamLogResellerRoleResellerAdmin()
        case .other:
            return DBXTeamLogResellerRoleOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asNotReseller: DBXTeamLogResellerRoleNotReseller? {
        self as? DBXTeamLogResellerRoleNotReseller
    }

    @objc
    public var asResellerAdmin: DBXTeamLogResellerRoleResellerAdmin? {
        self as? DBXTeamLogResellerRoleResellerAdmin
    }

    @objc
    public var asOther: DBXTeamLogResellerRoleOther? {
        self as? DBXTeamLogResellerRoleOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerRoleNotReseller: DBXTeamLogResellerRole {
    @objc
    public init() {
        let swift = TeamLog.ResellerRole.notReseller
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerRoleResellerAdmin: DBXTeamLogResellerRole {
    @objc
    public init() {
        let swift = TeamLog.ResellerRole.resellerAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerRoleOther: DBXTeamLogResellerRole {
    @objc
    public init() {
        let swift = TeamLog.ResellerRole.other
        super.init(swift: swift)
    }
}

/// Enabled/disabled reseller support.
@objc
public class DBXTeamLogResellerSupportChangePolicyDetails: NSObject {
    /// New Reseller support policy.
    @objc
    public var newValue: DBXTeamLogResellerSupportPolicy { DBXTeamLogResellerSupportPolicy(swift: swift.newValue) }
    /// Previous Reseller support policy.
    @objc
    public var previousValue: DBXTeamLogResellerSupportPolicy { DBXTeamLogResellerSupportPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogResellerSupportPolicy, previousValue: DBXTeamLogResellerSupportPolicy) {
        self.swift = TeamLog.ResellerSupportChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ResellerSupportChangePolicyDetails

    public init(swift: TeamLog.ResellerSupportChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ResellerSupportChangePolicyType struct
@objc
public class DBXTeamLogResellerSupportChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ResellerSupportChangePolicyType(description_: description_)
    }

    let swift: TeamLog.ResellerSupportChangePolicyType

    public init(swift: TeamLog.ResellerSupportChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if reseller can access the admin console as administrator
@objc
public class DBXTeamLogResellerSupportPolicy: NSObject {
    let swift: TeamLog.ResellerSupportPolicy

    public init(swift: TeamLog.ResellerSupportPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ResellerSupportPolicy) -> DBXTeamLogResellerSupportPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogResellerSupportPolicyDisabled()
        case .enabled:
            return DBXTeamLogResellerSupportPolicyEnabled()
        case .other:
            return DBXTeamLogResellerSupportPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogResellerSupportPolicyDisabled? {
        self as? DBXTeamLogResellerSupportPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogResellerSupportPolicyEnabled? {
        self as? DBXTeamLogResellerSupportPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogResellerSupportPolicyOther? {
        self as? DBXTeamLogResellerSupportPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerSupportPolicyDisabled: DBXTeamLogResellerSupportPolicy {
    @objc
    public init() {
        let swift = TeamLog.ResellerSupportPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerSupportPolicyEnabled: DBXTeamLogResellerSupportPolicy {
    @objc
    public init() {
        let swift = TeamLog.ResellerSupportPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogResellerSupportPolicyOther: DBXTeamLogResellerSupportPolicy {
    @objc
    public init() {
        let swift = TeamLog.ResellerSupportPolicy.other
        super.init(swift: swift)
    }
}

/// Ended reseller support session.
@objc
public class DBXTeamLogResellerSupportSessionEndDetails: NSObject {
    let swift: TeamLog.ResellerSupportSessionEndDetails

    public init(swift: TeamLog.ResellerSupportSessionEndDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ResellerSupportSessionEndType struct
@objc
public class DBXTeamLogResellerSupportSessionEndType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ResellerSupportSessionEndType(description_: description_)
    }

    let swift: TeamLog.ResellerSupportSessionEndType

    public init(swift: TeamLog.ResellerSupportSessionEndType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Started reseller support session.
@objc
public class DBXTeamLogResellerSupportSessionStartDetails: NSObject {
    let swift: TeamLog.ResellerSupportSessionStartDetails

    public init(swift: TeamLog.ResellerSupportSessionStartDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ResellerSupportSessionStartType struct
@objc
public class DBXTeamLogResellerSupportSessionStartType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ResellerSupportSessionStartType(description_: description_)
    }

    let swift: TeamLog.ResellerSupportSessionStartType

    public init(swift: TeamLog.ResellerSupportSessionStartType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Rewound a folder.
@objc
public class DBXTeamLogRewindFolderDetails: NSObject {
    /// Folder was Rewound to this date.
    @objc
    public var rewindFolderTargetTsMs: Date { swift.rewindFolderTargetTsMs }

    @objc
    public init(rewindFolderTargetTsMs: Date) {
        self.swift = TeamLog.RewindFolderDetails(rewindFolderTargetTsMs: rewindFolderTargetTsMs)
    }

    let swift: TeamLog.RewindFolderDetails

    public init(swift: TeamLog.RewindFolderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RewindFolderType struct
@objc
public class DBXTeamLogRewindFolderType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RewindFolderType(description_: description_)
    }

    let swift: TeamLog.RewindFolderType

    public init(swift: TeamLog.RewindFolderType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether team members can rewind
@objc
public class DBXTeamLogRewindPolicy: NSObject {
    let swift: TeamLog.RewindPolicy

    public init(swift: TeamLog.RewindPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.RewindPolicy) -> DBXTeamLogRewindPolicy {
        switch swift {
        case .adminsOnly:
            return DBXTeamLogRewindPolicyAdminsOnly()
        case .everyone:
            return DBXTeamLogRewindPolicyEveryone()
        case .other:
            return DBXTeamLogRewindPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminsOnly: DBXTeamLogRewindPolicyAdminsOnly? {
        self as? DBXTeamLogRewindPolicyAdminsOnly
    }

    @objc
    public var asEveryone: DBXTeamLogRewindPolicyEveryone? {
        self as? DBXTeamLogRewindPolicyEveryone
    }

    @objc
    public var asOther: DBXTeamLogRewindPolicyOther? {
        self as? DBXTeamLogRewindPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogRewindPolicyAdminsOnly: DBXTeamLogRewindPolicy {
    @objc
    public init() {
        let swift = TeamLog.RewindPolicy.adminsOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogRewindPolicyEveryone: DBXTeamLogRewindPolicy {
    @objc
    public init() {
        let swift = TeamLog.RewindPolicy.everyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogRewindPolicyOther: DBXTeamLogRewindPolicy {
    @objc
    public init() {
        let swift = TeamLog.RewindPolicy.other
        super.init(swift: swift)
    }
}

/// Changed Rewind policy for team.
@objc
public class DBXTeamLogRewindPolicyChangedDetails: NSObject {
    /// New Dropbox Rewind policy.
    @objc
    public var newValue: DBXTeamLogRewindPolicy { DBXTeamLogRewindPolicy(swift: swift.newValue) }
    /// Previous Dropbox Rewind policy.
    @objc
    public var previousValue: DBXTeamLogRewindPolicy { DBXTeamLogRewindPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogRewindPolicy, previousValue: DBXTeamLogRewindPolicy) {
        self.swift = TeamLog.RewindPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.RewindPolicyChangedDetails

    public init(swift: TeamLog.RewindPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible RewindPolicyChangedType struct
@objc
public class DBXTeamLogRewindPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.RewindPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.RewindPolicyChangedType

    public init(swift: TeamLog.RewindPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted secondary email.
@objc
public class DBXTeamLogSecondaryEmailDeletedDetails: NSObject {
    /// Deleted secondary email.
    @objc
    public var secondaryEmail: String { swift.secondaryEmail }

    @objc
    public init(secondaryEmail: String) {
        self.swift = TeamLog.SecondaryEmailDeletedDetails(secondaryEmail: secondaryEmail)
    }

    let swift: TeamLog.SecondaryEmailDeletedDetails

    public init(swift: TeamLog.SecondaryEmailDeletedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SecondaryEmailDeletedType struct
@objc
public class DBXTeamLogSecondaryEmailDeletedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SecondaryEmailDeletedType(description_: description_)
    }

    let swift: TeamLog.SecondaryEmailDeletedType

    public init(swift: TeamLog.SecondaryEmailDeletedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Verified secondary email.
@objc
public class DBXTeamLogSecondaryEmailVerifiedDetails: NSObject {
    /// Verified secondary email.
    @objc
    public var secondaryEmail: String { swift.secondaryEmail }

    @objc
    public init(secondaryEmail: String) {
        self.swift = TeamLog.SecondaryEmailVerifiedDetails(secondaryEmail: secondaryEmail)
    }

    let swift: TeamLog.SecondaryEmailVerifiedDetails

    public init(swift: TeamLog.SecondaryEmailVerifiedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SecondaryEmailVerifiedType struct
@objc
public class DBXTeamLogSecondaryEmailVerifiedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SecondaryEmailVerifiedType(description_: description_)
    }

    let swift: TeamLog.SecondaryEmailVerifiedType

    public init(swift: TeamLog.SecondaryEmailVerifiedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SecondaryMailsPolicy union
@objc
public class DBXTeamLogSecondaryMailsPolicy: NSObject {
    let swift: TeamLog.SecondaryMailsPolicy

    public init(swift: TeamLog.SecondaryMailsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SecondaryMailsPolicy) -> DBXTeamLogSecondaryMailsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogSecondaryMailsPolicyDisabled()
        case .enabled:
            return DBXTeamLogSecondaryMailsPolicyEnabled()
        case .other:
            return DBXTeamLogSecondaryMailsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogSecondaryMailsPolicyDisabled? {
        self as? DBXTeamLogSecondaryMailsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogSecondaryMailsPolicyEnabled? {
        self as? DBXTeamLogSecondaryMailsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogSecondaryMailsPolicyOther? {
        self as? DBXTeamLogSecondaryMailsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSecondaryMailsPolicyDisabled: DBXTeamLogSecondaryMailsPolicy {
    @objc
    public init() {
        let swift = TeamLog.SecondaryMailsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSecondaryMailsPolicyEnabled: DBXTeamLogSecondaryMailsPolicy {
    @objc
    public init() {
        let swift = TeamLog.SecondaryMailsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSecondaryMailsPolicyOther: DBXTeamLogSecondaryMailsPolicy {
    @objc
    public init() {
        let swift = TeamLog.SecondaryMailsPolicy.other
        super.init(swift: swift)
    }
}

/// Secondary mails policy changed.
@objc
public class DBXTeamLogSecondaryMailsPolicyChangedDetails: NSObject {
    /// Previous secondary mails policy.
    @objc
    public var previousValue: DBXTeamLogSecondaryMailsPolicy { DBXTeamLogSecondaryMailsPolicy(swift: swift.previousValue) }
    /// New secondary mails policy.
    @objc
    public var newValue: DBXTeamLogSecondaryMailsPolicy { DBXTeamLogSecondaryMailsPolicy(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogSecondaryMailsPolicy, newValue: DBXTeamLogSecondaryMailsPolicy) {
        self.swift = TeamLog.SecondaryMailsPolicyChangedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.SecondaryMailsPolicyChangedDetails

    public init(swift: TeamLog.SecondaryMailsPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SecondaryMailsPolicyChangedType struct
@objc
public class DBXTeamLogSecondaryMailsPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SecondaryMailsPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.SecondaryMailsPolicyChangedType

    public init(swift: TeamLog.SecondaryMailsPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request acceptance details shown to the secondary team
@objc
public class DBXTeamLogSecondaryTeamRequestAcceptedDetails: NSObject {
    /// The primary team name.
    @objc
    public var primaryTeam: String { swift.primaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(primaryTeam: String, sentBy: String) {
        self.swift = TeamLog.SecondaryTeamRequestAcceptedDetails(primaryTeam: primaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.SecondaryTeamRequestAcceptedDetails

    public init(swift: TeamLog.SecondaryTeamRequestAcceptedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request cancellation details shown to the secondary team
@objc
public class DBXTeamLogSecondaryTeamRequestCanceledDetails: NSObject {
    /// The email of the primary team admin that the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(sentTo: String, sentBy: String) {
        self.swift = TeamLog.SecondaryTeamRequestCanceledDetails(sentTo: sentTo, sentBy: sentBy)
    }

    let swift: TeamLog.SecondaryTeamRequestCanceledDetails

    public init(swift: TeamLog.SecondaryTeamRequestCanceledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request expiration details shown to the secondary team
@objc
public class DBXTeamLogSecondaryTeamRequestExpiredDetails: NSObject {
    /// The email of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(sentTo: String) {
        self.swift = TeamLog.SecondaryTeamRequestExpiredDetails(sentTo: sentTo)
    }

    let swift: TeamLog.SecondaryTeamRequestExpiredDetails

    public init(swift: TeamLog.SecondaryTeamRequestExpiredDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request reminder details shown to the secondary team
@objc
public class DBXTeamLogSecondaryTeamRequestReminderDetails: NSObject {
    /// The email of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(sentTo: String) {
        self.swift = TeamLog.SecondaryTeamRequestReminderDetails(sentTo: sentTo)
    }

    let swift: TeamLog.SecondaryTeamRequestReminderDetails

    public init(swift: TeamLog.SecondaryTeamRequestReminderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to send for signature feature
@objc
public class DBXTeamLogSendForSignaturePolicy: NSObject {
    let swift: TeamLog.SendForSignaturePolicy

    public init(swift: TeamLog.SendForSignaturePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SendForSignaturePolicy) -> DBXTeamLogSendForSignaturePolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogSendForSignaturePolicyDisabled()
        case .enabled:
            return DBXTeamLogSendForSignaturePolicyEnabled()
        case .other:
            return DBXTeamLogSendForSignaturePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogSendForSignaturePolicyDisabled? {
        self as? DBXTeamLogSendForSignaturePolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogSendForSignaturePolicyEnabled? {
        self as? DBXTeamLogSendForSignaturePolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogSendForSignaturePolicyOther? {
        self as? DBXTeamLogSendForSignaturePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSendForSignaturePolicyDisabled: DBXTeamLogSendForSignaturePolicy {
    @objc
    public init() {
        let swift = TeamLog.SendForSignaturePolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSendForSignaturePolicyEnabled: DBXTeamLogSendForSignaturePolicy {
    @objc
    public init() {
        let swift = TeamLog.SendForSignaturePolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSendForSignaturePolicyOther: DBXTeamLogSendForSignaturePolicy {
    @objc
    public init() {
        let swift = TeamLog.SendForSignaturePolicy.other
        super.init(swift: swift)
    }
}

/// Changed send for signature policy for team.
@objc
public class DBXTeamLogSendForSignaturePolicyChangedDetails: NSObject {
    /// New send for signature policy.
    @objc
    public var newValue: DBXTeamLogSendForSignaturePolicy { DBXTeamLogSendForSignaturePolicy(swift: swift.newValue) }
    /// Previous send for signature policy.
    @objc
    public var previousValue: DBXTeamLogSendForSignaturePolicy { DBXTeamLogSendForSignaturePolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogSendForSignaturePolicy, previousValue: DBXTeamLogSendForSignaturePolicy) {
        self.swift = TeamLog.SendForSignaturePolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.SendForSignaturePolicyChangedDetails

    public init(swift: TeamLog.SendForSignaturePolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SendForSignaturePolicyChangedType struct
@objc
public class DBXTeamLogSendForSignaturePolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SendForSignaturePolicyChangedType(description_: description_)
    }

    let swift: TeamLog.SendForSignaturePolicyChangedType

    public init(swift: TeamLog.SendForSignaturePolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added team to shared folder.
@objc
public class DBXTeamLogSfAddGroupDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Sharing permission.
    @objc
    public var sharingPermission: String? { swift.sharingPermission }
    /// Team name.
    @objc
    public var teamName: String { swift.teamName }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, teamName: String, sharingPermission: String?) {
        self.swift = TeamLog.SfAddGroupDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            teamName: teamName,
            sharingPermission: sharingPermission
        )
    }

    let swift: TeamLog.SfAddGroupDetails

    public init(swift: TeamLog.SfAddGroupDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfAddGroupType struct
@objc
public class DBXTeamLogSfAddGroupType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfAddGroupType(description_: description_)
    }

    let swift: TeamLog.SfAddGroupType

    public init(swift: TeamLog.SfAddGroupType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Allowed non-collaborators to view links to files in shared folder.
@objc
public class DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Shared folder type.
    @objc
    public var sharedFolderType: String? { swift.sharedFolderType }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, sharedFolderType: String?) {
        self.swift = TeamLog.SfAllowNonMembersToViewSharedLinksDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            sharedFolderType: sharedFolderType
        )
    }

    let swift: TeamLog.SfAllowNonMembersToViewSharedLinksDetails

    public init(swift: TeamLog.SfAllowNonMembersToViewSharedLinksDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfAllowNonMembersToViewSharedLinksType struct
@objc
public class DBXTeamLogSfAllowNonMembersToViewSharedLinksType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfAllowNonMembersToViewSharedLinksType(description_: description_)
    }

    let swift: TeamLog.SfAllowNonMembersToViewSharedLinksType

    public init(swift: TeamLog.SfAllowNonMembersToViewSharedLinksType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Set team members to see warning before sharing folders outside team.
@objc
public class DBXTeamLogSfExternalInviteWarnDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// New sharing permission.
    @objc
    public var newSharingPermission: String? { swift.newSharingPermission }
    /// Previous sharing permission.
    @objc
    public var previousSharingPermission: String? { swift.previousSharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, newSharingPermission: String?, previousSharingPermission: String?) {
        self.swift = TeamLog.SfExternalInviteWarnDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            newSharingPermission: newSharingPermission,
            previousSharingPermission: previousSharingPermission
        )
    }

    let swift: TeamLog.SfExternalInviteWarnDetails

    public init(swift: TeamLog.SfExternalInviteWarnDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfExternalInviteWarnType struct
@objc
public class DBXTeamLogSfExternalInviteWarnType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfExternalInviteWarnType(description_: description_)
    }

    let swift: TeamLog.SfExternalInviteWarnType

    public init(swift: TeamLog.SfExternalInviteWarnType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed Facebook user's role in shared folder.
@objc
public class DBXTeamLogSfFbInviteChangeRoleDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Previous sharing permission.
    @objc
    public var previousSharingPermission: String? { swift.previousSharingPermission }
    /// New sharing permission.
    @objc
    public var newSharingPermission: String? { swift.newSharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, previousSharingPermission: String?, newSharingPermission: String?) {
        self.swift = TeamLog.SfFbInviteChangeRoleDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            previousSharingPermission: previousSharingPermission,
            newSharingPermission: newSharingPermission
        )
    }

    let swift: TeamLog.SfFbInviteChangeRoleDetails

    public init(swift: TeamLog.SfFbInviteChangeRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfFbInviteChangeRoleType struct
@objc
public class DBXTeamLogSfFbInviteChangeRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfFbInviteChangeRoleType(description_: description_)
    }

    let swift: TeamLog.SfFbInviteChangeRoleType

    public init(swift: TeamLog.SfFbInviteChangeRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Invited Facebook users to shared folder.
@objc
public class DBXTeamLogSfFbInviteDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Sharing permission.
    @objc
    public var sharingPermission: String? { swift.sharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, sharingPermission: String?) {
        self.swift = TeamLog.SfFbInviteDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            sharingPermission: sharingPermission
        )
    }

    let swift: TeamLog.SfFbInviteDetails

    public init(swift: TeamLog.SfFbInviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfFbInviteType struct
@objc
public class DBXTeamLogSfFbInviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfFbInviteType(description_: description_)
    }

    let swift: TeamLog.SfFbInviteType

    public init(swift: TeamLog.SfFbInviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Uninvited Facebook user from shared folder.
@objc
public class DBXTeamLogSfFbUninviteDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String) {
        self.swift = TeamLog.SfFbUninviteDetails(targetAssetIndex: targetAssetIndex.uint64Value, originalFolderName: originalFolderName)
    }

    let swift: TeamLog.SfFbUninviteDetails

    public init(swift: TeamLog.SfFbUninviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfFbUninviteType struct
@objc
public class DBXTeamLogSfFbUninviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfFbUninviteType(description_: description_)
    }

    let swift: TeamLog.SfFbUninviteType

    public init(swift: TeamLog.SfFbUninviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Invited group to shared folder.
@objc
public class DBXTeamLogSfInviteGroupDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }

    @objc
    public init(targetAssetIndex: NSNumber) {
        self.swift = TeamLog.SfInviteGroupDetails(targetAssetIndex: targetAssetIndex.uint64Value)
    }

    let swift: TeamLog.SfInviteGroupDetails

    public init(swift: TeamLog.SfInviteGroupDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfInviteGroupType struct
@objc
public class DBXTeamLogSfInviteGroupType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfInviteGroupType(description_: description_)
    }

    let swift: TeamLog.SfInviteGroupType

    public init(swift: TeamLog.SfInviteGroupType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Granted access to shared folder.
@objc
public class DBXTeamLogSfTeamGrantAccessDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String) {
        self.swift = TeamLog.SfTeamGrantAccessDetails(targetAssetIndex: targetAssetIndex.uint64Value, originalFolderName: originalFolderName)
    }

    let swift: TeamLog.SfTeamGrantAccessDetails

    public init(swift: TeamLog.SfTeamGrantAccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamGrantAccessType struct
@objc
public class DBXTeamLogSfTeamGrantAccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamGrantAccessType(description_: description_)
    }

    let swift: TeamLog.SfTeamGrantAccessType

    public init(swift: TeamLog.SfTeamGrantAccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team member's role in shared folder.
@objc
public class DBXTeamLogSfTeamInviteChangeRoleDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// New sharing permission.
    @objc
    public var newSharingPermission: String? { swift.newSharingPermission }
    /// Previous sharing permission.
    @objc
    public var previousSharingPermission: String? { swift.previousSharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, newSharingPermission: String?, previousSharingPermission: String?) {
        self.swift = TeamLog.SfTeamInviteChangeRoleDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            newSharingPermission: newSharingPermission,
            previousSharingPermission: previousSharingPermission
        )
    }

    let swift: TeamLog.SfTeamInviteChangeRoleDetails

    public init(swift: TeamLog.SfTeamInviteChangeRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamInviteChangeRoleType struct
@objc
public class DBXTeamLogSfTeamInviteChangeRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamInviteChangeRoleType(description_: description_)
    }

    let swift: TeamLog.SfTeamInviteChangeRoleType

    public init(swift: TeamLog.SfTeamInviteChangeRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Invited team members to shared folder.
@objc
public class DBXTeamLogSfTeamInviteDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Sharing permission.
    @objc
    public var sharingPermission: String? { swift.sharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, sharingPermission: String?) {
        self.swift = TeamLog.SfTeamInviteDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            sharingPermission: sharingPermission
        )
    }

    let swift: TeamLog.SfTeamInviteDetails

    public init(swift: TeamLog.SfTeamInviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamInviteType struct
@objc
public class DBXTeamLogSfTeamInviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamInviteType(description_: description_)
    }

    let swift: TeamLog.SfTeamInviteType

    public init(swift: TeamLog.SfTeamInviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Joined team member's shared folder.
@objc
public class DBXTeamLogSfTeamJoinDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String) {
        self.swift = TeamLog.SfTeamJoinDetails(targetAssetIndex: targetAssetIndex.uint64Value, originalFolderName: originalFolderName)
    }

    let swift: TeamLog.SfTeamJoinDetails

    public init(swift: TeamLog.SfTeamJoinDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Joined team member's shared folder from link.
@objc
public class DBXTeamLogSfTeamJoinFromOobLinkDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }
    /// Shared link token key.
    @objc
    public var tokenKey: String? { swift.tokenKey }
    /// Sharing permission.
    @objc
    public var sharingPermission: String? { swift.sharingPermission }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String, tokenKey: String?, sharingPermission: String?) {
        self.swift = TeamLog.SfTeamJoinFromOobLinkDetails(
            targetAssetIndex: targetAssetIndex.uint64Value,
            originalFolderName: originalFolderName,
            tokenKey: tokenKey,
            sharingPermission: sharingPermission
        )
    }

    let swift: TeamLog.SfTeamJoinFromOobLinkDetails

    public init(swift: TeamLog.SfTeamJoinFromOobLinkDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamJoinFromOobLinkType struct
@objc
public class DBXTeamLogSfTeamJoinFromOobLinkType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamJoinFromOobLinkType(description_: description_)
    }

    let swift: TeamLog.SfTeamJoinFromOobLinkType

    public init(swift: TeamLog.SfTeamJoinFromOobLinkType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamJoinType struct
@objc
public class DBXTeamLogSfTeamJoinType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamJoinType(description_: description_)
    }

    let swift: TeamLog.SfTeamJoinType

    public init(swift: TeamLog.SfTeamJoinType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unshared folder with team member.
@objc
public class DBXTeamLogSfTeamUninviteDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }
    /// Original shared folder name.
    @objc
    public var originalFolderName: String { swift.originalFolderName }

    @objc
    public init(targetAssetIndex: NSNumber, originalFolderName: String) {
        self.swift = TeamLog.SfTeamUninviteDetails(targetAssetIndex: targetAssetIndex.uint64Value, originalFolderName: originalFolderName)
    }

    let swift: TeamLog.SfTeamUninviteDetails

    public init(swift: TeamLog.SfTeamUninviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SfTeamUninviteType struct
@objc
public class DBXTeamLogSfTeamUninviteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SfTeamUninviteType(description_: description_)
    }

    let swift: TeamLog.SfTeamUninviteType

    public init(swift: TeamLog.SfTeamUninviteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Invited user to Dropbox and added them to shared file/folder.
@objc
public class DBXTeamLogSharedContentAddInviteesDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// A list of invitees.
    @objc
    public var invitees: [String] { swift.invitees }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, invitees: [String]) {
        self.swift = TeamLog.SharedContentAddInviteesDetails(sharedContentAccessLevel: sharedContentAccessLevel.swift, invitees: invitees)
    }

    let swift: TeamLog.SharedContentAddInviteesDetails

    public init(swift: TeamLog.SharedContentAddInviteesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentAddInviteesType struct
@objc
public class DBXTeamLogSharedContentAddInviteesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentAddInviteesType(description_: description_)
    }

    let swift: TeamLog.SharedContentAddInviteesType

    public init(swift: TeamLog.SharedContentAddInviteesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added expiration date to link for shared file/folder.
@objc
public class DBXTeamLogSharedContentAddLinkExpiryDetails: NSObject {
    /// New shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var newValue: Date? { swift.newValue }

    @objc
    public init(newValue: Date?) {
        self.swift = TeamLog.SharedContentAddLinkExpiryDetails(newValue: newValue)
    }

    let swift: TeamLog.SharedContentAddLinkExpiryDetails

    public init(swift: TeamLog.SharedContentAddLinkExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentAddLinkExpiryType struct
@objc
public class DBXTeamLogSharedContentAddLinkExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentAddLinkExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedContentAddLinkExpiryType

    public init(swift: TeamLog.SharedContentAddLinkExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added password to link for shared file/folder.
@objc
public class DBXTeamLogSharedContentAddLinkPasswordDetails: NSObject {
    let swift: TeamLog.SharedContentAddLinkPasswordDetails

    public init(swift: TeamLog.SharedContentAddLinkPasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentAddLinkPasswordType struct
@objc
public class DBXTeamLogSharedContentAddLinkPasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentAddLinkPasswordType(description_: description_)
    }

    let swift: TeamLog.SharedContentAddLinkPasswordType

    public init(swift: TeamLog.SharedContentAddLinkPasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added users and/or groups to shared file/folder.
@objc
public class DBXTeamLogSharedContentAddMemberDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel) {
        self.swift = TeamLog.SharedContentAddMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel.swift)
    }

    let swift: TeamLog.SharedContentAddMemberDetails

    public init(swift: TeamLog.SharedContentAddMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentAddMemberType struct
@objc
public class DBXTeamLogSharedContentAddMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentAddMemberType(description_: description_)
    }

    let swift: TeamLog.SharedContentAddMemberType

    public init(swift: TeamLog.SharedContentAddMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether members can download shared file/folder.
@objc
public class DBXTeamLogSharedContentChangeDownloadsPolicyDetails: NSObject {
    /// New downloads policy.
    @objc
    public var newValue: DBXTeamLogDownloadPolicyType { DBXTeamLogDownloadPolicyType(swift: swift.newValue) }
    /// Previous downloads policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogDownloadPolicyType? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogDownloadPolicyType(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogDownloadPolicyType, previousValue: DBXTeamLogDownloadPolicyType?) {
        self.swift = TeamLog.SharedContentChangeDownloadsPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedContentChangeDownloadsPolicyDetails

    public init(swift: TeamLog.SharedContentChangeDownloadsPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeDownloadsPolicyType struct
@objc
public class DBXTeamLogSharedContentChangeDownloadsPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeDownloadsPolicyType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeDownloadsPolicyType

    public init(swift: TeamLog.SharedContentChangeDownloadsPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed access type of invitee to shared file/folder before invite was accepted.
@objc
public class DBXTeamLogSharedContentChangeInviteeRoleDetails: NSObject {
    /// Previous access level. Might be missing due to historical data gap.
    @objc
    public var previousAccessLevel: DBXSharingAccessLevel? { guard let swift = swift.previousAccessLevel else { return nil }
        return DBXSharingAccessLevel(swift: swift)
    }

    /// New access level.
    @objc
    public var newAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.newAccessLevel) }
    /// The invitee whose role was changed.
    @objc
    public var invitee: String { swift.invitee }

    @objc
    public init(newAccessLevel: DBXSharingAccessLevel, invitee: String, previousAccessLevel: DBXSharingAccessLevel?) {
        self.swift = TeamLog.SharedContentChangeInviteeRoleDetails(
            newAccessLevel: newAccessLevel.swift,
            invitee: invitee,
            previousAccessLevel: previousAccessLevel?.swift
        )
    }

    let swift: TeamLog.SharedContentChangeInviteeRoleDetails

    public init(swift: TeamLog.SharedContentChangeInviteeRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeInviteeRoleType struct
@objc
public class DBXTeamLogSharedContentChangeInviteeRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeInviteeRoleType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeInviteeRoleType

    public init(swift: TeamLog.SharedContentChangeInviteeRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed link audience of shared file/folder.
@objc
public class DBXTeamLogSharedContentChangeLinkAudienceDetails: NSObject {
    /// New link audience value.
    @objc
    public var newValue: DBXSharingLinkAudience { DBXSharingLinkAudience(swift: swift.newValue) }
    /// Previous link audience value.
    @objc
    public var previousValue: DBXSharingLinkAudience? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingLinkAudience(swift: swift)
    }

    @objc
    public init(newValue: DBXSharingLinkAudience, previousValue: DBXSharingLinkAudience?) {
        self.swift = TeamLog.SharedContentChangeLinkAudienceDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedContentChangeLinkAudienceDetails

    public init(swift: TeamLog.SharedContentChangeLinkAudienceDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeLinkAudienceType struct
@objc
public class DBXTeamLogSharedContentChangeLinkAudienceType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeLinkAudienceType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeLinkAudienceType

    public init(swift: TeamLog.SharedContentChangeLinkAudienceType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed link expiration of shared file/folder.
@objc
public class DBXTeamLogSharedContentChangeLinkExpiryDetails: NSObject {
    /// New shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var newValue: Date? { swift.newValue }
    /// Previous shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(newValue: Date?, previousValue: Date?) {
        self.swift = TeamLog.SharedContentChangeLinkExpiryDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.SharedContentChangeLinkExpiryDetails

    public init(swift: TeamLog.SharedContentChangeLinkExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeLinkExpiryType struct
@objc
public class DBXTeamLogSharedContentChangeLinkExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeLinkExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeLinkExpiryType

    public init(swift: TeamLog.SharedContentChangeLinkExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed link password of shared file/folder.
@objc
public class DBXTeamLogSharedContentChangeLinkPasswordDetails: NSObject {
    let swift: TeamLog.SharedContentChangeLinkPasswordDetails

    public init(swift: TeamLog.SharedContentChangeLinkPasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeLinkPasswordType struct
@objc
public class DBXTeamLogSharedContentChangeLinkPasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeLinkPasswordType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeLinkPasswordType

    public init(swift: TeamLog.SharedContentChangeLinkPasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed access type of shared file/folder member.
@objc
public class DBXTeamLogSharedContentChangeMemberRoleDetails: NSObject {
    /// Previous access level. Might be missing due to historical data gap.
    @objc
    public var previousAccessLevel: DBXSharingAccessLevel? { guard let swift = swift.previousAccessLevel else { return nil }
        return DBXSharingAccessLevel(swift: swift)
    }

    /// New access level.
    @objc
    public var newAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.newAccessLevel) }

    @objc
    public init(newAccessLevel: DBXSharingAccessLevel, previousAccessLevel: DBXSharingAccessLevel?) {
        self.swift = TeamLog.SharedContentChangeMemberRoleDetails(newAccessLevel: newAccessLevel.swift, previousAccessLevel: previousAccessLevel?.swift)
    }

    let swift: TeamLog.SharedContentChangeMemberRoleDetails

    public init(swift: TeamLog.SharedContentChangeMemberRoleDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeMemberRoleType struct
@objc
public class DBXTeamLogSharedContentChangeMemberRoleType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeMemberRoleType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeMemberRoleType

    public init(swift: TeamLog.SharedContentChangeMemberRoleType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether members can see who viewed shared file/folder.
@objc
public class DBXTeamLogSharedContentChangeViewerInfoPolicyDetails: NSObject {
    /// New viewer info policy.
    @objc
    public var newValue: DBXSharingViewerInfoPolicy { DBXSharingViewerInfoPolicy(swift: swift.newValue) }
    /// Previous view info policy.
    @objc
    public var previousValue: DBXSharingViewerInfoPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingViewerInfoPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXSharingViewerInfoPolicy, previousValue: DBXSharingViewerInfoPolicy?) {
        self.swift = TeamLog.SharedContentChangeViewerInfoPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedContentChangeViewerInfoPolicyDetails

    public init(swift: TeamLog.SharedContentChangeViewerInfoPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentChangeViewerInfoPolicyType struct
@objc
public class DBXTeamLogSharedContentChangeViewerInfoPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentChangeViewerInfoPolicyType(description_: description_)
    }

    let swift: TeamLog.SharedContentChangeViewerInfoPolicyType

    public init(swift: TeamLog.SharedContentChangeViewerInfoPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Acquired membership of shared file/folder by accepting invite.
@objc
public class DBXTeamLogSharedContentClaimInvitationDetails: NSObject {
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentLink: String?) {
        self.swift = TeamLog.SharedContentClaimInvitationDetails(sharedContentLink: sharedContentLink)
    }

    let swift: TeamLog.SharedContentClaimInvitationDetails

    public init(swift: TeamLog.SharedContentClaimInvitationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentClaimInvitationType struct
@objc
public class DBXTeamLogSharedContentClaimInvitationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentClaimInvitationType(description_: description_)
    }

    let swift: TeamLog.SharedContentClaimInvitationType

    public init(swift: TeamLog.SharedContentClaimInvitationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Copied shared file/folder to own Dropbox.
@objc
public class DBXTeamLogSharedContentCopyDetails: NSObject {
    /// Shared content link.
    @objc
    public var sharedContentLink: String { swift.sharedContentLink }
    /// The shared content owner.
    @objc
    public var sharedContentOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedContentOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// The path where the member saved the content.
    @objc
    public var destinationPath: String { swift.destinationPath }

    @objc
    public init(
        sharedContentLink: String,
        sharedContentAccessLevel: DBXSharingAccessLevel,
        destinationPath: String,
        sharedContentOwner: DBXTeamLogUserLogInfo?
    ) {
        self.swift = TeamLog.SharedContentCopyDetails(
            sharedContentLink: sharedContentLink,
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            destinationPath: destinationPath,
            sharedContentOwner: sharedContentOwner?.swift
        )
    }

    let swift: TeamLog.SharedContentCopyDetails

    public init(swift: TeamLog.SharedContentCopyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentCopyType struct
@objc
public class DBXTeamLogSharedContentCopyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentCopyType(description_: description_)
    }

    let swift: TeamLog.SharedContentCopyType

    public init(swift: TeamLog.SharedContentCopyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded shared file/folder.
@objc
public class DBXTeamLogSharedContentDownloadDetails: NSObject {
    /// Shared content link.
    @objc
    public var sharedContentLink: String { swift.sharedContentLink }
    /// The shared content owner.
    @objc
    public var sharedContentOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedContentOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }

    @objc
    public init(sharedContentLink: String, sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedContentDownloadDetails(
            sharedContentLink: sharedContentLink,
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentOwner: sharedContentOwner?.swift
        )
    }

    let swift: TeamLog.SharedContentDownloadDetails

    public init(swift: TeamLog.SharedContentDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentDownloadType struct
@objc
public class DBXTeamLogSharedContentDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentDownloadType(description_: description_)
    }

    let swift: TeamLog.SharedContentDownloadType

    public init(swift: TeamLog.SharedContentDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Left shared file/folder.
@objc
public class DBXTeamLogSharedContentRelinquishMembershipDetails: NSObject {
    let swift: TeamLog.SharedContentRelinquishMembershipDetails

    public init(swift: TeamLog.SharedContentRelinquishMembershipDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRelinquishMembershipType struct
@objc
public class DBXTeamLogSharedContentRelinquishMembershipType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRelinquishMembershipType(description_: description_)
    }

    let swift: TeamLog.SharedContentRelinquishMembershipType

    public init(swift: TeamLog.SharedContentRelinquishMembershipType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed invitee from shared file/folder before invite was accepted.
@objc
public class DBXTeamLogSharedContentRemoveInviteesDetails: NSObject {
    /// A list of invitees.
    @objc
    public var invitees: [String] { swift.invitees }

    @objc
    public init(invitees: [String]) {
        self.swift = TeamLog.SharedContentRemoveInviteesDetails(invitees: invitees)
    }

    let swift: TeamLog.SharedContentRemoveInviteesDetails

    public init(swift: TeamLog.SharedContentRemoveInviteesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRemoveInviteesType struct
@objc
public class DBXTeamLogSharedContentRemoveInviteesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRemoveInviteesType(description_: description_)
    }

    let swift: TeamLog.SharedContentRemoveInviteesType

    public init(swift: TeamLog.SharedContentRemoveInviteesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed link expiration date of shared file/folder.
@objc
public class DBXTeamLogSharedContentRemoveLinkExpiryDetails: NSObject {
    /// Previous shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(previousValue: Date?) {
        self.swift = TeamLog.SharedContentRemoveLinkExpiryDetails(previousValue: previousValue)
    }

    let swift: TeamLog.SharedContentRemoveLinkExpiryDetails

    public init(swift: TeamLog.SharedContentRemoveLinkExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRemoveLinkExpiryType struct
@objc
public class DBXTeamLogSharedContentRemoveLinkExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRemoveLinkExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedContentRemoveLinkExpiryType

    public init(swift: TeamLog.SharedContentRemoveLinkExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed link password of shared file/folder.
@objc
public class DBXTeamLogSharedContentRemoveLinkPasswordDetails: NSObject {
    let swift: TeamLog.SharedContentRemoveLinkPasswordDetails

    public init(swift: TeamLog.SharedContentRemoveLinkPasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRemoveLinkPasswordType struct
@objc
public class DBXTeamLogSharedContentRemoveLinkPasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRemoveLinkPasswordType(description_: description_)
    }

    let swift: TeamLog.SharedContentRemoveLinkPasswordType

    public init(swift: TeamLog.SharedContentRemoveLinkPasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed user/group from shared file/folder.
@objc
public class DBXTeamLogSharedContentRemoveMemberDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel? { guard let swift = swift.sharedContentAccessLevel else { return nil }
        return DBXSharingAccessLevel(swift: swift)
    }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel?) {
        self.swift = TeamLog.SharedContentRemoveMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel?.swift)
    }

    let swift: TeamLog.SharedContentRemoveMemberDetails

    public init(swift: TeamLog.SharedContentRemoveMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRemoveMemberType struct
@objc
public class DBXTeamLogSharedContentRemoveMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRemoveMemberType(description_: description_)
    }

    let swift: TeamLog.SharedContentRemoveMemberType

    public init(swift: TeamLog.SharedContentRemoveMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested access to shared file/folder.
@objc
public class DBXTeamLogSharedContentRequestAccessDetails: NSObject {
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentLink: String?) {
        self.swift = TeamLog.SharedContentRequestAccessDetails(sharedContentLink: sharedContentLink)
    }

    let swift: TeamLog.SharedContentRequestAccessDetails

    public init(swift: TeamLog.SharedContentRequestAccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRequestAccessType struct
@objc
public class DBXTeamLogSharedContentRequestAccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRequestAccessType(description_: description_)
    }

    let swift: TeamLog.SharedContentRequestAccessType

    public init(swift: TeamLog.SharedContentRequestAccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored shared file/folder invitees.
@objc
public class DBXTeamLogSharedContentRestoreInviteesDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// A list of invitees.
    @objc
    public var invitees: [String] { swift.invitees }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, invitees: [String]) {
        self.swift = TeamLog.SharedContentRestoreInviteesDetails(sharedContentAccessLevel: sharedContentAccessLevel.swift, invitees: invitees)
    }

    let swift: TeamLog.SharedContentRestoreInviteesDetails

    public init(swift: TeamLog.SharedContentRestoreInviteesDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRestoreInviteesType struct
@objc
public class DBXTeamLogSharedContentRestoreInviteesType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRestoreInviteesType(description_: description_)
    }

    let swift: TeamLog.SharedContentRestoreInviteesType

    public init(swift: TeamLog.SharedContentRestoreInviteesType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored users and/or groups to membership of shared file/folder.
@objc
public class DBXTeamLogSharedContentRestoreMemberDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel) {
        self.swift = TeamLog.SharedContentRestoreMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel.swift)
    }

    let swift: TeamLog.SharedContentRestoreMemberDetails

    public init(swift: TeamLog.SharedContentRestoreMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentRestoreMemberType struct
@objc
public class DBXTeamLogSharedContentRestoreMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentRestoreMemberType(description_: description_)
    }

    let swift: TeamLog.SharedContentRestoreMemberType

    public init(swift: TeamLog.SharedContentRestoreMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unshared file/folder by clearing membership.
@objc
public class DBXTeamLogSharedContentUnshareDetails: NSObject {
    let swift: TeamLog.SharedContentUnshareDetails

    public init(swift: TeamLog.SharedContentUnshareDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentUnshareType struct
@objc
public class DBXTeamLogSharedContentUnshareType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentUnshareType(description_: description_)
    }

    let swift: TeamLog.SharedContentUnshareType

    public init(swift: TeamLog.SharedContentUnshareType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Previewed shared file/folder.
@objc
public class DBXTeamLogSharedContentViewDetails: NSObject {
    /// Shared content link.
    @objc
    public var sharedContentLink: String { swift.sharedContentLink }
    /// The shared content owner.
    @objc
    public var sharedContentOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedContentOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }

    @objc
    public init(sharedContentLink: String, sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedContentViewDetails(
            sharedContentLink: sharedContentLink,
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentOwner: sharedContentOwner?.swift
        )
    }

    let swift: TeamLog.SharedContentViewDetails

    public init(swift: TeamLog.SharedContentViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedContentViewType struct
@objc
public class DBXTeamLogSharedContentViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedContentViewType(description_: description_)
    }

    let swift: TeamLog.SharedContentViewType

    public init(swift: TeamLog.SharedContentViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed who can access shared folder via link.
@objc
public class DBXTeamLogSharedFolderChangeLinkPolicyDetails: NSObject {
    /// New shared folder link policy.
    @objc
    public var newValue: DBXSharingSharedLinkPolicy { DBXSharingSharedLinkPolicy(swift: swift.newValue) }
    /// Previous shared folder link policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXSharingSharedLinkPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingSharedLinkPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXSharingSharedLinkPolicy, previousValue: DBXSharingSharedLinkPolicy?) {
        self.swift = TeamLog.SharedFolderChangeLinkPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedFolderChangeLinkPolicyDetails

    public init(swift: TeamLog.SharedFolderChangeLinkPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderChangeLinkPolicyType struct
@objc
public class DBXTeamLogSharedFolderChangeLinkPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderChangeLinkPolicyType(description_: description_)
    }

    let swift: TeamLog.SharedFolderChangeLinkPolicyType

    public init(swift: TeamLog.SharedFolderChangeLinkPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether shared folder inherits members from parent folder.
@objc
public class DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails: NSObject {
    /// New member inheritance policy.
    @objc
    public var newValue: DBXTeamLogSharedFolderMembersInheritancePolicy { DBXTeamLogSharedFolderMembersInheritancePolicy(swift: swift.newValue) }
    /// Previous member inheritance policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogSharedFolderMembersInheritancePolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogSharedFolderMembersInheritancePolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogSharedFolderMembersInheritancePolicy, previousValue: DBXTeamLogSharedFolderMembersInheritancePolicy?) {
        self.swift = TeamLog.SharedFolderChangeMembersInheritancePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedFolderChangeMembersInheritancePolicyDetails

    public init(swift: TeamLog.SharedFolderChangeMembersInheritancePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderChangeMembersInheritancePolicyType struct
@objc
public class DBXTeamLogSharedFolderChangeMembersInheritancePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderChangeMembersInheritancePolicyType(description_: description_)
    }

    let swift: TeamLog.SharedFolderChangeMembersInheritancePolicyType

    public init(swift: TeamLog.SharedFolderChangeMembersInheritancePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed who can add/remove members of shared folder.
@objc
public class DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails: NSObject {
    /// New members management policy.
    @objc
    public var newValue: DBXSharingAclUpdatePolicy { DBXSharingAclUpdatePolicy(swift: swift.newValue) }
    /// Previous members management policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXSharingAclUpdatePolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingAclUpdatePolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXSharingAclUpdatePolicy, previousValue: DBXSharingAclUpdatePolicy?) {
        self.swift = TeamLog.SharedFolderChangeMembersManagementPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedFolderChangeMembersManagementPolicyDetails

    public init(swift: TeamLog.SharedFolderChangeMembersManagementPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderChangeMembersManagementPolicyType struct
@objc
public class DBXTeamLogSharedFolderChangeMembersManagementPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderChangeMembersManagementPolicyType(description_: description_)
    }

    let swift: TeamLog.SharedFolderChangeMembersManagementPolicyType

    public init(swift: TeamLog.SharedFolderChangeMembersManagementPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed who can become member of shared folder.
@objc
public class DBXTeamLogSharedFolderChangeMembersPolicyDetails: NSObject {
    /// New external invite policy.
    @objc
    public var newValue: DBXSharingMemberPolicy { DBXSharingMemberPolicy(swift: swift.newValue) }
    /// Previous external invite policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXSharingMemberPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingMemberPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXSharingMemberPolicy, previousValue: DBXSharingMemberPolicy?) {
        self.swift = TeamLog.SharedFolderChangeMembersPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedFolderChangeMembersPolicyDetails

    public init(swift: TeamLog.SharedFolderChangeMembersPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderChangeMembersPolicyType struct
@objc
public class DBXTeamLogSharedFolderChangeMembersPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderChangeMembersPolicyType(description_: description_)
    }

    let swift: TeamLog.SharedFolderChangeMembersPolicyType

    public init(swift: TeamLog.SharedFolderChangeMembersPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created shared folder.
@objc
public class DBXTeamLogSharedFolderCreateDetails: NSObject {
    /// Target namespace ID.
    @objc
    public var targetNsId: String? { swift.targetNsId }

    @objc
    public init(targetNsId: String?) {
        self.swift = TeamLog.SharedFolderCreateDetails(targetNsId: targetNsId)
    }

    let swift: TeamLog.SharedFolderCreateDetails

    public init(swift: TeamLog.SharedFolderCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderCreateType struct
@objc
public class DBXTeamLogSharedFolderCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderCreateType(description_: description_)
    }

    let swift: TeamLog.SharedFolderCreateType

    public init(swift: TeamLog.SharedFolderCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Declined team member's invite to shared folder.
@objc
public class DBXTeamLogSharedFolderDeclineInvitationDetails: NSObject {
    let swift: TeamLog.SharedFolderDeclineInvitationDetails

    public init(swift: TeamLog.SharedFolderDeclineInvitationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderDeclineInvitationType struct
@objc
public class DBXTeamLogSharedFolderDeclineInvitationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderDeclineInvitationType(description_: description_)
    }

    let swift: TeamLog.SharedFolderDeclineInvitationType

    public init(swift: TeamLog.SharedFolderDeclineInvitationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Specifies if a shared folder inherits its members from the parent folder.
@objc
public class DBXTeamLogSharedFolderMembersInheritancePolicy: NSObject {
    let swift: TeamLog.SharedFolderMembersInheritancePolicy

    public init(swift: TeamLog.SharedFolderMembersInheritancePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharedFolderMembersInheritancePolicy) -> DBXTeamLogSharedFolderMembersInheritancePolicy {
        switch swift {
        case .dontInheritMembers:
            return DBXTeamLogSharedFolderMembersInheritancePolicyDontInheritMembers()
        case .inheritMembers:
            return DBXTeamLogSharedFolderMembersInheritancePolicyInheritMembers()
        case .other:
            return DBXTeamLogSharedFolderMembersInheritancePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDontInheritMembers: DBXTeamLogSharedFolderMembersInheritancePolicyDontInheritMembers? {
        self as? DBXTeamLogSharedFolderMembersInheritancePolicyDontInheritMembers
    }

    @objc
    public var asInheritMembers: DBXTeamLogSharedFolderMembersInheritancePolicyInheritMembers? {
        self as? DBXTeamLogSharedFolderMembersInheritancePolicyInheritMembers
    }

    @objc
    public var asOther: DBXTeamLogSharedFolderMembersInheritancePolicyOther? {
        self as? DBXTeamLogSharedFolderMembersInheritancePolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedFolderMembersInheritancePolicyDontInheritMembers: DBXTeamLogSharedFolderMembersInheritancePolicy {
    @objc
    public init() {
        let swift = TeamLog.SharedFolderMembersInheritancePolicy.dontInheritMembers
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedFolderMembersInheritancePolicyInheritMembers: DBXTeamLogSharedFolderMembersInheritancePolicy {
    @objc
    public init() {
        let swift = TeamLog.SharedFolderMembersInheritancePolicy.inheritMembers
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedFolderMembersInheritancePolicyOther: DBXTeamLogSharedFolderMembersInheritancePolicy {
    @objc
    public init() {
        let swift = TeamLog.SharedFolderMembersInheritancePolicy.other
        super.init(swift: swift)
    }
}

/// Added shared folder to own Dropbox.
@objc
public class DBXTeamLogSharedFolderMountDetails: NSObject {
    let swift: TeamLog.SharedFolderMountDetails

    public init(swift: TeamLog.SharedFolderMountDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderMountType struct
@objc
public class DBXTeamLogSharedFolderMountType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderMountType(description_: description_)
    }

    let swift: TeamLog.SharedFolderMountType

    public init(swift: TeamLog.SharedFolderMountType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed parent of shared folder.
@objc
public class DBXTeamLogSharedFolderNestDetails: NSObject {
    /// Previous parent namespace ID.
    @objc
    public var previousParentNsId: String? { swift.previousParentNsId }
    /// New parent namespace ID.
    @objc
    public var newParentNsId: String? { swift.newParentNsId }
    /// Previous namespace path.
    @objc
    public var previousNsPath: String? { swift.previousNsPath }
    /// New namespace path.
    @objc
    public var newNsPath: String? { swift.newNsPath }

    @objc
    public init(previousParentNsId: String?, newParentNsId: String?, previousNsPath: String?, newNsPath: String?) {
        self.swift = TeamLog.SharedFolderNestDetails(
            previousParentNsId: previousParentNsId,
            newParentNsId: newParentNsId,
            previousNsPath: previousNsPath,
            newNsPath: newNsPath
        )
    }

    let swift: TeamLog.SharedFolderNestDetails

    public init(swift: TeamLog.SharedFolderNestDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderNestType struct
@objc
public class DBXTeamLogSharedFolderNestType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderNestType(description_: description_)
    }

    let swift: TeamLog.SharedFolderNestType

    public init(swift: TeamLog.SharedFolderNestType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Transferred ownership of shared folder to another member.
@objc
public class DBXTeamLogSharedFolderTransferOwnershipDetails: NSObject {
    /// The email address of the previous shared folder owner.
    @objc
    public var previousOwnerEmail: String? { swift.previousOwnerEmail }
    /// The email address of the new shared folder owner.
    @objc
    public var newOwnerEmail: String { swift.newOwnerEmail }

    @objc
    public init(newOwnerEmail: String, previousOwnerEmail: String?) {
        self.swift = TeamLog.SharedFolderTransferOwnershipDetails(newOwnerEmail: newOwnerEmail, previousOwnerEmail: previousOwnerEmail)
    }

    let swift: TeamLog.SharedFolderTransferOwnershipDetails

    public init(swift: TeamLog.SharedFolderTransferOwnershipDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderTransferOwnershipType struct
@objc
public class DBXTeamLogSharedFolderTransferOwnershipType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderTransferOwnershipType(description_: description_)
    }

    let swift: TeamLog.SharedFolderTransferOwnershipType

    public init(swift: TeamLog.SharedFolderTransferOwnershipType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted shared folder from Dropbox.
@objc
public class DBXTeamLogSharedFolderUnmountDetails: NSObject {
    let swift: TeamLog.SharedFolderUnmountDetails

    public init(swift: TeamLog.SharedFolderUnmountDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedFolderUnmountType struct
@objc
public class DBXTeamLogSharedFolderUnmountType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedFolderUnmountType(description_: description_)
    }

    let swift: TeamLog.SharedFolderUnmountType

    public init(swift: TeamLog.SharedFolderUnmountType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared link access level.
@objc
public class DBXTeamLogSharedLinkAccessLevel: NSObject {
    let swift: TeamLog.SharedLinkAccessLevel

    public init(swift: TeamLog.SharedLinkAccessLevel) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharedLinkAccessLevel) -> DBXTeamLogSharedLinkAccessLevel {
        switch swift {
        case .none:
            return DBXTeamLogSharedLinkAccessLevelNone()
        case .reader:
            return DBXTeamLogSharedLinkAccessLevelReader()
        case .writer:
            return DBXTeamLogSharedLinkAccessLevelWriter()
        case .other:
            return DBXTeamLogSharedLinkAccessLevelOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asNone: DBXTeamLogSharedLinkAccessLevelNone? {
        self as? DBXTeamLogSharedLinkAccessLevelNone
    }

    @objc
    public var asReader: DBXTeamLogSharedLinkAccessLevelReader? {
        self as? DBXTeamLogSharedLinkAccessLevelReader
    }

    @objc
    public var asWriter: DBXTeamLogSharedLinkAccessLevelWriter? {
        self as? DBXTeamLogSharedLinkAccessLevelWriter
    }

    @objc
    public var asOther: DBXTeamLogSharedLinkAccessLevelOther? {
        self as? DBXTeamLogSharedLinkAccessLevelOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkAccessLevelNone: DBXTeamLogSharedLinkAccessLevel {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkAccessLevel.none
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkAccessLevelReader: DBXTeamLogSharedLinkAccessLevel {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkAccessLevel.reader
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkAccessLevelWriter: DBXTeamLogSharedLinkAccessLevel {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkAccessLevel.writer
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkAccessLevelOther: DBXTeamLogSharedLinkAccessLevel {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkAccessLevel.other
        super.init(swift: swift)
    }
}

/// Added shared link expiration date.
@objc
public class DBXTeamLogSharedLinkAddExpiryDetails: NSObject {
    /// New shared link expiration date.
    @objc
    public var newValue: Date { swift.newValue }

    @objc
    public init(newValue: Date) {
        self.swift = TeamLog.SharedLinkAddExpiryDetails(newValue: newValue)
    }

    let swift: TeamLog.SharedLinkAddExpiryDetails

    public init(swift: TeamLog.SharedLinkAddExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkAddExpiryType struct
@objc
public class DBXTeamLogSharedLinkAddExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkAddExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedLinkAddExpiryType

    public init(swift: TeamLog.SharedLinkAddExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed shared link expiration date.
@objc
public class DBXTeamLogSharedLinkChangeExpiryDetails: NSObject {
    /// New shared link expiration date. Might be missing due to historical data gap.
    @objc
    public var newValue: Date? { swift.newValue }
    /// Previous shared link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(newValue: Date?, previousValue: Date?) {
        self.swift = TeamLog.SharedLinkChangeExpiryDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.SharedLinkChangeExpiryDetails

    public init(swift: TeamLog.SharedLinkChangeExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkChangeExpiryType struct
@objc
public class DBXTeamLogSharedLinkChangeExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkChangeExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedLinkChangeExpiryType

    public init(swift: TeamLog.SharedLinkChangeExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed visibility of shared link.
@objc
public class DBXTeamLogSharedLinkChangeVisibilityDetails: NSObject {
    /// New shared link visibility.
    @objc
    public var newValue: DBXTeamLogSharedLinkVisibility { DBXTeamLogSharedLinkVisibility(swift: swift.newValue) }
    /// Previous shared link visibility. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogSharedLinkVisibility? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogSharedLinkVisibility(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogSharedLinkVisibility, previousValue: DBXTeamLogSharedLinkVisibility?) {
        self.swift = TeamLog.SharedLinkChangeVisibilityDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharedLinkChangeVisibilityDetails

    public init(swift: TeamLog.SharedLinkChangeVisibilityDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkChangeVisibilityType struct
@objc
public class DBXTeamLogSharedLinkChangeVisibilityType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkChangeVisibilityType(description_: description_)
    }

    let swift: TeamLog.SharedLinkChangeVisibilityType

    public init(swift: TeamLog.SharedLinkChangeVisibilityType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added file/folder to Dropbox from shared link.
@objc
public class DBXTeamLogSharedLinkCopyDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedLinkCopyDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.SharedLinkCopyDetails

    public init(swift: TeamLog.SharedLinkCopyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkCopyType struct
@objc
public class DBXTeamLogSharedLinkCopyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkCopyType(description_: description_)
    }

    let swift: TeamLog.SharedLinkCopyType

    public init(swift: TeamLog.SharedLinkCopyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created shared link.
@objc
public class DBXTeamLogSharedLinkCreateDetails: NSObject {
    /// Defines who can access the shared link. Might be missing due to historical data gap.
    @objc
    public var sharedLinkAccessLevel: DBXTeamLogSharedLinkAccessLevel? { guard let swift = swift.sharedLinkAccessLevel else { return nil }
        return DBXTeamLogSharedLinkAccessLevel(swift: swift)
    }

    @objc
    public init(sharedLinkAccessLevel: DBXTeamLogSharedLinkAccessLevel?) {
        self.swift = TeamLog.SharedLinkCreateDetails(sharedLinkAccessLevel: sharedLinkAccessLevel?.swift)
    }

    let swift: TeamLog.SharedLinkCreateDetails

    public init(swift: TeamLog.SharedLinkCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkCreateType struct
@objc
public class DBXTeamLogSharedLinkCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkCreateType(description_: description_)
    }

    let swift: TeamLog.SharedLinkCreateType

    public init(swift: TeamLog.SharedLinkCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed shared link.
@objc
public class DBXTeamLogSharedLinkDisableDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedLinkDisableDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.SharedLinkDisableDetails

    public init(swift: TeamLog.SharedLinkDisableDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkDisableType struct
@objc
public class DBXTeamLogSharedLinkDisableType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkDisableType(description_: description_)
    }

    let swift: TeamLog.SharedLinkDisableType

    public init(swift: TeamLog.SharedLinkDisableType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded file/folder from shared link.
@objc
public class DBXTeamLogSharedLinkDownloadDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedLinkDownloadDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.SharedLinkDownloadDetails

    public init(swift: TeamLog.SharedLinkDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkDownloadType struct
@objc
public class DBXTeamLogSharedLinkDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkDownloadType(description_: description_)
    }

    let swift: TeamLog.SharedLinkDownloadType

    public init(swift: TeamLog.SharedLinkDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed shared link expiration date.
@objc
public class DBXTeamLogSharedLinkRemoveExpiryDetails: NSObject {
    /// Previous shared link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(previousValue: Date?) {
        self.swift = TeamLog.SharedLinkRemoveExpiryDetails(previousValue: previousValue)
    }

    let swift: TeamLog.SharedLinkRemoveExpiryDetails

    public init(swift: TeamLog.SharedLinkRemoveExpiryDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkRemoveExpiryType struct
@objc
public class DBXTeamLogSharedLinkRemoveExpiryType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkRemoveExpiryType(description_: description_)
    }

    let swift: TeamLog.SharedLinkRemoveExpiryType

    public init(swift: TeamLog.SharedLinkRemoveExpiryType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added an expiration date to the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsAddExpirationDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }
    /// New shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var newValue: Date? { swift.newValue }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?, newValue: Date?) {
        self.swift = TeamLog.SharedLinkSettingsAddExpirationDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink,
            newValue: newValue
        )
    }

    let swift: TeamLog.SharedLinkSettingsAddExpirationDetails

    public init(swift: TeamLog.SharedLinkSettingsAddExpirationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsAddExpirationType struct
@objc
public class DBXTeamLogSharedLinkSettingsAddExpirationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsAddExpirationType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsAddExpirationType

    public init(swift: TeamLog.SharedLinkSettingsAddExpirationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added a password to the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsAddPasswordDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?) {
        self.swift = TeamLog.SharedLinkSettingsAddPasswordDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink
        )
    }

    let swift: TeamLog.SharedLinkSettingsAddPasswordDetails

    public init(swift: TeamLog.SharedLinkSettingsAddPasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsAddPasswordType struct
@objc
public class DBXTeamLogSharedLinkSettingsAddPasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsAddPasswordType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsAddPasswordType

    public init(swift: TeamLog.SharedLinkSettingsAddPasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disabled downloads.
@objc
public class DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?) {
        self.swift = TeamLog.SharedLinkSettingsAllowDownloadDisabledDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink
        )
    }

    let swift: TeamLog.SharedLinkSettingsAllowDownloadDisabledDetails

    public init(swift: TeamLog.SharedLinkSettingsAllowDownloadDisabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsAllowDownloadDisabledType struct
@objc
public class DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsAllowDownloadDisabledType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsAllowDownloadDisabledType

    public init(swift: TeamLog.SharedLinkSettingsAllowDownloadDisabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled downloads.
@objc
public class DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?) {
        self.swift = TeamLog.SharedLinkSettingsAllowDownloadEnabledDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink
        )
    }

    let swift: TeamLog.SharedLinkSettingsAllowDownloadEnabledDetails

    public init(swift: TeamLog.SharedLinkSettingsAllowDownloadEnabledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsAllowDownloadEnabledType struct
@objc
public class DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsAllowDownloadEnabledType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsAllowDownloadEnabledType

    public init(swift: TeamLog.SharedLinkSettingsAllowDownloadEnabledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the audience of the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsChangeAudienceDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }
    /// New link audience value.
    @objc
    public var newValue: DBXSharingLinkAudience { DBXSharingLinkAudience(swift: swift.newValue) }
    /// Previous link audience value.
    @objc
    public var previousValue: DBXSharingLinkAudience? { guard let swift = swift.previousValue else { return nil }
        return DBXSharingLinkAudience(swift: swift)
    }

    @objc
    public init(
        sharedContentAccessLevel: DBXSharingAccessLevel,
        newValue: DBXSharingLinkAudience,
        sharedContentLink: String?,
        previousValue: DBXSharingLinkAudience?
    ) {
        self.swift = TeamLog.SharedLinkSettingsChangeAudienceDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            newValue: newValue.swift,
            sharedContentLink: sharedContentLink,
            previousValue: previousValue?.swift
        )
    }

    let swift: TeamLog.SharedLinkSettingsChangeAudienceDetails

    public init(swift: TeamLog.SharedLinkSettingsChangeAudienceDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsChangeAudienceType struct
@objc
public class DBXTeamLogSharedLinkSettingsChangeAudienceType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsChangeAudienceType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsChangeAudienceType

    public init(swift: TeamLog.SharedLinkSettingsChangeAudienceType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the expiration date of the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsChangeExpirationDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }
    /// New shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var newValue: Date? { swift.newValue }
    /// Previous shared content link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?, newValue: Date?, previousValue: Date?) {
        self.swift = TeamLog.SharedLinkSettingsChangeExpirationDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink,
            newValue: newValue,
            previousValue: previousValue
        )
    }

    let swift: TeamLog.SharedLinkSettingsChangeExpirationDetails

    public init(swift: TeamLog.SharedLinkSettingsChangeExpirationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsChangeExpirationType struct
@objc
public class DBXTeamLogSharedLinkSettingsChangeExpirationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsChangeExpirationType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsChangeExpirationType

    public init(swift: TeamLog.SharedLinkSettingsChangeExpirationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the password of the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsChangePasswordDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?) {
        self.swift = TeamLog.SharedLinkSettingsChangePasswordDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink
        )
    }

    let swift: TeamLog.SharedLinkSettingsChangePasswordDetails

    public init(swift: TeamLog.SharedLinkSettingsChangePasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsChangePasswordType struct
@objc
public class DBXTeamLogSharedLinkSettingsChangePasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsChangePasswordType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsChangePasswordType

    public init(swift: TeamLog.SharedLinkSettingsChangePasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed the expiration date from the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsRemoveExpirationDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }
    /// Previous shared link expiration date. Might be missing due to historical data gap.
    @objc
    public var previousValue: Date? { swift.previousValue }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?, previousValue: Date?) {
        self.swift = TeamLog.SharedLinkSettingsRemoveExpirationDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink,
            previousValue: previousValue
        )
    }

    let swift: TeamLog.SharedLinkSettingsRemoveExpirationDetails

    public init(swift: TeamLog.SharedLinkSettingsRemoveExpirationDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsRemoveExpirationType struct
@objc
public class DBXTeamLogSharedLinkSettingsRemoveExpirationType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsRemoveExpirationType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsRemoveExpirationType

    public init(swift: TeamLog.SharedLinkSettingsRemoveExpirationType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed the password from the shared link.
@objc
public class DBXTeamLogSharedLinkSettingsRemovePasswordDetails: NSObject {
    /// Shared content access level.
    @objc
    public var sharedContentAccessLevel: DBXSharingAccessLevel { DBXSharingAccessLevel(swift: swift.sharedContentAccessLevel) }
    /// Shared content link.
    @objc
    public var sharedContentLink: String? { swift.sharedContentLink }

    @objc
    public init(sharedContentAccessLevel: DBXSharingAccessLevel, sharedContentLink: String?) {
        self.swift = TeamLog.SharedLinkSettingsRemovePasswordDetails(
            sharedContentAccessLevel: sharedContentAccessLevel.swift,
            sharedContentLink: sharedContentLink
        )
    }

    let swift: TeamLog.SharedLinkSettingsRemovePasswordDetails

    public init(swift: TeamLog.SharedLinkSettingsRemovePasswordDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkSettingsRemovePasswordType struct
@objc
public class DBXTeamLogSharedLinkSettingsRemovePasswordType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkSettingsRemovePasswordType(description_: description_)
    }

    let swift: TeamLog.SharedLinkSettingsRemovePasswordType

    public init(swift: TeamLog.SharedLinkSettingsRemovePasswordType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members as audience of shared link.
@objc
public class DBXTeamLogSharedLinkShareDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    /// Users without a Dropbox account that were added as shared link audience.
    @objc
    public var externalUsers: [DBXTeamLogExternalUserLogInfo]? { swift.externalUsers?.map { DBXTeamLogExternalUserLogInfo(swift: $0) } }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?, externalUsers: [DBXTeamLogExternalUserLogInfo]?) {
        self.swift = TeamLog.SharedLinkShareDetails(sharedLinkOwner: sharedLinkOwner?.swift, externalUsers: externalUsers?.map(\.swift))
    }

    let swift: TeamLog.SharedLinkShareDetails

    public init(swift: TeamLog.SharedLinkShareDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkShareType struct
@objc
public class DBXTeamLogSharedLinkShareType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkShareType(description_: description_)
    }

    let swift: TeamLog.SharedLinkShareType

    public init(swift: TeamLog.SharedLinkShareType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Opened shared link.
@objc
public class DBXTeamLogSharedLinkViewDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.SharedLinkViewDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.SharedLinkViewDetails

    public init(swift: TeamLog.SharedLinkViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedLinkViewType struct
@objc
public class DBXTeamLogSharedLinkViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedLinkViewType(description_: description_)
    }

    let swift: TeamLog.SharedLinkViewType

    public init(swift: TeamLog.SharedLinkViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Defines who has access to a shared link.
@objc
public class DBXTeamLogSharedLinkVisibility: NSObject {
    let swift: TeamLog.SharedLinkVisibility

    public init(swift: TeamLog.SharedLinkVisibility) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharedLinkVisibility) -> DBXTeamLogSharedLinkVisibility {
        switch swift {
        case .noOne:
            return DBXTeamLogSharedLinkVisibilityNoOne()
        case .password:
            return DBXTeamLogSharedLinkVisibilityPassword()
        case .public_:
            return DBXTeamLogSharedLinkVisibilityPublic_()
        case .teamOnly:
            return DBXTeamLogSharedLinkVisibilityTeamOnly()
        case .other:
            return DBXTeamLogSharedLinkVisibilityOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asNoOne: DBXTeamLogSharedLinkVisibilityNoOne? {
        self as? DBXTeamLogSharedLinkVisibilityNoOne
    }

    @objc
    public var asPassword: DBXTeamLogSharedLinkVisibilityPassword? {
        self as? DBXTeamLogSharedLinkVisibilityPassword
    }

    @objc
    public var asPublic_: DBXTeamLogSharedLinkVisibilityPublic_? {
        self as? DBXTeamLogSharedLinkVisibilityPublic_
    }

    @objc
    public var asTeamOnly: DBXTeamLogSharedLinkVisibilityTeamOnly? {
        self as? DBXTeamLogSharedLinkVisibilityTeamOnly
    }

    @objc
    public var asOther: DBXTeamLogSharedLinkVisibilityOther? {
        self as? DBXTeamLogSharedLinkVisibilityOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkVisibilityNoOne: DBXTeamLogSharedLinkVisibility {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkVisibility.noOne
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkVisibilityPassword: DBXTeamLogSharedLinkVisibility {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkVisibility.password
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkVisibilityPublic_: DBXTeamLogSharedLinkVisibility {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkVisibility.public_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkVisibilityTeamOnly: DBXTeamLogSharedLinkVisibility {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkVisibility.teamOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharedLinkVisibilityOther: DBXTeamLogSharedLinkVisibility {
    @objc
    public init() {
        let swift = TeamLog.SharedLinkVisibility.other
        super.init(swift: swift)
    }
}

/// Opened shared Paper doc.
@objc
public class DBXTeamLogSharedNoteOpenedDetails: NSObject {
    let swift: TeamLog.SharedNoteOpenedDetails

    public init(swift: TeamLog.SharedNoteOpenedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharedNoteOpenedType struct
@objc
public class DBXTeamLogSharedNoteOpenedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharedNoteOpenedType(description_: description_)
    }

    let swift: TeamLog.SharedNoteOpenedType

    public init(swift: TeamLog.SharedNoteOpenedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether team members can join shared folders owned outside team.
@objc
public class DBXTeamLogSharingChangeFolderJoinPolicyDetails: NSObject {
    /// New external join policy.
    @objc
    public var newValue: DBXTeamLogSharingFolderJoinPolicy { DBXTeamLogSharingFolderJoinPolicy(swift: swift.newValue) }
    /// Previous external join policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogSharingFolderJoinPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogSharingFolderJoinPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogSharingFolderJoinPolicy, previousValue: DBXTeamLogSharingFolderJoinPolicy?) {
        self.swift = TeamLog.SharingChangeFolderJoinPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeFolderJoinPolicyDetails

    public init(swift: TeamLog.SharingChangeFolderJoinPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeFolderJoinPolicyType struct
@objc
public class DBXTeamLogSharingChangeFolderJoinPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeFolderJoinPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeFolderJoinPolicyType

    public init(swift: TeamLog.SharingChangeFolderJoinPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the allow remove or change expiration policy for the links shared outside of the team.
@objc
public class DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogEnforceLinkPasswordPolicy { DBXTeamLogEnforceLinkPasswordPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogEnforceLinkPasswordPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogEnforceLinkPasswordPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogEnforceLinkPasswordPolicy, previousValue: DBXTeamLogEnforceLinkPasswordPolicy?) {
        self.swift = TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetails

    public init(swift: TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeLinkAllowChangeExpirationPolicyType struct
@objc
public class DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeLinkAllowChangeExpirationPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeLinkAllowChangeExpirationPolicyType

    public init(swift: TeamLog.SharingChangeLinkAllowChangeExpirationPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the default expiration for the links shared outside of the team.
@objc
public class DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogDefaultLinkExpirationDaysPolicy { DBXTeamLogDefaultLinkExpirationDaysPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogDefaultLinkExpirationDaysPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogDefaultLinkExpirationDaysPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogDefaultLinkExpirationDaysPolicy, previousValue: DBXTeamLogDefaultLinkExpirationDaysPolicy?) {
        self.swift = TeamLog.SharingChangeLinkDefaultExpirationPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeLinkDefaultExpirationPolicyDetails

    public init(swift: TeamLog.SharingChangeLinkDefaultExpirationPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeLinkDefaultExpirationPolicyType struct
@objc
public class DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeLinkDefaultExpirationPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeLinkDefaultExpirationPolicyType

    public init(swift: TeamLog.SharingChangeLinkDefaultExpirationPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed the password requirement for the links shared outside of the team.
@objc
public class DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails: NSObject {
    /// To.
    @objc
    public var newValue: DBXTeamLogChangeLinkExpirationPolicy { DBXTeamLogChangeLinkExpirationPolicy(swift: swift.newValue) }
    /// From.
    @objc
    public var previousValue: DBXTeamLogChangeLinkExpirationPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogChangeLinkExpirationPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogChangeLinkExpirationPolicy, previousValue: DBXTeamLogChangeLinkExpirationPolicy?) {
        self.swift = TeamLog.SharingChangeLinkEnforcePasswordPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeLinkEnforcePasswordPolicyDetails

    public init(swift: TeamLog.SharingChangeLinkEnforcePasswordPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeLinkEnforcePasswordPolicyType struct
@objc
public class DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeLinkEnforcePasswordPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeLinkEnforcePasswordPolicyType

    public init(swift: TeamLog.SharingChangeLinkEnforcePasswordPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether members can share links outside team, and if links are accessible only by team members or anyone
/// by default.
@objc
public class DBXTeamLogSharingChangeLinkPolicyDetails: NSObject {
    /// New external link accessibility policy.
    @objc
    public var newValue: DBXTeamLogSharingLinkPolicy { DBXTeamLogSharingLinkPolicy(swift: swift.newValue) }
    /// Previous external link accessibility policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogSharingLinkPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogSharingLinkPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogSharingLinkPolicy, previousValue: DBXTeamLogSharingLinkPolicy?) {
        self.swift = TeamLog.SharingChangeLinkPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeLinkPolicyDetails

    public init(swift: TeamLog.SharingChangeLinkPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeLinkPolicyType struct
@objc
public class DBXTeamLogSharingChangeLinkPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeLinkPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeLinkPolicyType

    public init(swift: TeamLog.SharingChangeLinkPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed whether members can share files/folders outside team.
@objc
public class DBXTeamLogSharingChangeMemberPolicyDetails: NSObject {
    /// New external invite policy.
    @objc
    public var newValue: DBXTeamLogSharingMemberPolicy { DBXTeamLogSharingMemberPolicy(swift: swift.newValue) }
    /// Previous external invite policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogSharingMemberPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogSharingMemberPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogSharingMemberPolicy, previousValue: DBXTeamLogSharingMemberPolicy?) {
        self.swift = TeamLog.SharingChangeMemberPolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SharingChangeMemberPolicyDetails

    public init(swift: TeamLog.SharingChangeMemberPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SharingChangeMemberPolicyType struct
@objc
public class DBXTeamLogSharingChangeMemberPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SharingChangeMemberPolicyType(description_: description_)
    }

    let swift: TeamLog.SharingChangeMemberPolicyType

    public init(swift: TeamLog.SharingChangeMemberPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if team members can join shared folders owned by non team members.
@objc
public class DBXTeamLogSharingFolderJoinPolicy: NSObject {
    let swift: TeamLog.SharingFolderJoinPolicy

    public init(swift: TeamLog.SharingFolderJoinPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharingFolderJoinPolicy) -> DBXTeamLogSharingFolderJoinPolicy {
        switch swift {
        case .fromAnyone:
            return DBXTeamLogSharingFolderJoinPolicyFromAnyone()
        case .fromTeamOnly:
            return DBXTeamLogSharingFolderJoinPolicyFromTeamOnly()
        case .other:
            return DBXTeamLogSharingFolderJoinPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFromAnyone: DBXTeamLogSharingFolderJoinPolicyFromAnyone? {
        self as? DBXTeamLogSharingFolderJoinPolicyFromAnyone
    }

    @objc
    public var asFromTeamOnly: DBXTeamLogSharingFolderJoinPolicyFromTeamOnly? {
        self as? DBXTeamLogSharingFolderJoinPolicyFromTeamOnly
    }

    @objc
    public var asOther: DBXTeamLogSharingFolderJoinPolicyOther? {
        self as? DBXTeamLogSharingFolderJoinPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingFolderJoinPolicyFromAnyone: DBXTeamLogSharingFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingFolderJoinPolicy.fromAnyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingFolderJoinPolicyFromTeamOnly: DBXTeamLogSharingFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingFolderJoinPolicy.fromTeamOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingFolderJoinPolicyOther: DBXTeamLogSharingFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingFolderJoinPolicy.other
        super.init(swift: swift)
    }
}

/// Policy for controlling if team members can share links externally
@objc
public class DBXTeamLogSharingLinkPolicy: NSObject {
    let swift: TeamLog.SharingLinkPolicy

    public init(swift: TeamLog.SharingLinkPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharingLinkPolicy) -> DBXTeamLogSharingLinkPolicy {
        switch swift {
        case .defaultNoOne:
            return DBXTeamLogSharingLinkPolicyDefaultNoOne()
        case .defaultPrivate:
            return DBXTeamLogSharingLinkPolicyDefaultPrivate()
        case .defaultPublic:
            return DBXTeamLogSharingLinkPolicyDefaultPublic()
        case .onlyPrivate:
            return DBXTeamLogSharingLinkPolicyOnlyPrivate()
        case .other:
            return DBXTeamLogSharingLinkPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefaultNoOne: DBXTeamLogSharingLinkPolicyDefaultNoOne? {
        self as? DBXTeamLogSharingLinkPolicyDefaultNoOne
    }

    @objc
    public var asDefaultPrivate: DBXTeamLogSharingLinkPolicyDefaultPrivate? {
        self as? DBXTeamLogSharingLinkPolicyDefaultPrivate
    }

    @objc
    public var asDefaultPublic: DBXTeamLogSharingLinkPolicyDefaultPublic? {
        self as? DBXTeamLogSharingLinkPolicyDefaultPublic
    }

    @objc
    public var asOnlyPrivate: DBXTeamLogSharingLinkPolicyOnlyPrivate? {
        self as? DBXTeamLogSharingLinkPolicyOnlyPrivate
    }

    @objc
    public var asOther: DBXTeamLogSharingLinkPolicyOther? {
        self as? DBXTeamLogSharingLinkPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingLinkPolicyDefaultNoOne: DBXTeamLogSharingLinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingLinkPolicy.defaultNoOne
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingLinkPolicyDefaultPrivate: DBXTeamLogSharingLinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingLinkPolicy.defaultPrivate
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingLinkPolicyDefaultPublic: DBXTeamLogSharingLinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingLinkPolicy.defaultPublic
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingLinkPolicyOnlyPrivate: DBXTeamLogSharingLinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingLinkPolicy.onlyPrivate
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingLinkPolicyOther: DBXTeamLogSharingLinkPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingLinkPolicy.other
        super.init(swift: swift)
    }
}

/// External sharing policy
@objc
public class DBXTeamLogSharingMemberPolicy: NSObject {
    let swift: TeamLog.SharingMemberPolicy

    public init(swift: TeamLog.SharingMemberPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SharingMemberPolicy) -> DBXTeamLogSharingMemberPolicy {
        switch swift {
        case .allow:
            return DBXTeamLogSharingMemberPolicyAllow()
        case .forbid:
            return DBXTeamLogSharingMemberPolicyForbid()
        case .forbidWithExclusions:
            return DBXTeamLogSharingMemberPolicyForbidWithExclusions()
        case .other:
            return DBXTeamLogSharingMemberPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAllow: DBXTeamLogSharingMemberPolicyAllow? {
        self as? DBXTeamLogSharingMemberPolicyAllow
    }

    @objc
    public var asForbid: DBXTeamLogSharingMemberPolicyForbid? {
        self as? DBXTeamLogSharingMemberPolicyForbid
    }

    @objc
    public var asForbidWithExclusions: DBXTeamLogSharingMemberPolicyForbidWithExclusions? {
        self as? DBXTeamLogSharingMemberPolicyForbidWithExclusions
    }

    @objc
    public var asOther: DBXTeamLogSharingMemberPolicyOther? {
        self as? DBXTeamLogSharingMemberPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingMemberPolicyAllow: DBXTeamLogSharingMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingMemberPolicy.allow
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingMemberPolicyForbid: DBXTeamLogSharingMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingMemberPolicy.forbid
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingMemberPolicyForbidWithExclusions: DBXTeamLogSharingMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingMemberPolicy.forbidWithExclusions
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSharingMemberPolicyOther: DBXTeamLogSharingMemberPolicy {
    @objc
    public init() {
        let swift = TeamLog.SharingMemberPolicy.other
        super.init(swift: swift)
    }
}

/// Disabled downloads for link.
@objc
public class DBXTeamLogShmodelDisableDownloadsDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.ShmodelDisableDownloadsDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.ShmodelDisableDownloadsDetails

    public init(swift: TeamLog.ShmodelDisableDownloadsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShmodelDisableDownloadsType struct
@objc
public class DBXTeamLogShmodelDisableDownloadsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShmodelDisableDownloadsType(description_: description_)
    }

    let swift: TeamLog.ShmodelDisableDownloadsType

    public init(swift: TeamLog.ShmodelDisableDownloadsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled downloads for link.
@objc
public class DBXTeamLogShmodelEnableDownloadsDetails: NSObject {
    /// Shared link owner details. Might be missing due to historical data gap.
    @objc
    public var sharedLinkOwner: DBXTeamLogUserLogInfo? { guard let swift = swift.sharedLinkOwner else { return nil }
        return DBXTeamLogUserLogInfo(swift: swift)
    }

    @objc
    public init(sharedLinkOwner: DBXTeamLogUserLogInfo?) {
        self.swift = TeamLog.ShmodelEnableDownloadsDetails(sharedLinkOwner: sharedLinkOwner?.swift)
    }

    let swift: TeamLog.ShmodelEnableDownloadsDetails

    public init(swift: TeamLog.ShmodelEnableDownloadsDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShmodelEnableDownloadsType struct
@objc
public class DBXTeamLogShmodelEnableDownloadsType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShmodelEnableDownloadsType(description_: description_)
    }

    let swift: TeamLog.ShmodelEnableDownloadsType

    public init(swift: TeamLog.ShmodelEnableDownloadsType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Shared link with group.
@objc
public class DBXTeamLogShmodelGroupShareDetails: NSObject {
    let swift: TeamLog.ShmodelGroupShareDetails

    public init(swift: TeamLog.ShmodelGroupShareDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShmodelGroupShareType struct
@objc
public class DBXTeamLogShmodelGroupShareType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShmodelGroupShareType(description_: description_)
    }

    let swift: TeamLog.ShmodelGroupShareType

    public init(swift: TeamLog.ShmodelGroupShareType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Granted access to showcase.
@objc
public class DBXTeamLogShowcaseAccessGrantedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseAccessGrantedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseAccessGrantedDetails

    public init(swift: TeamLog.ShowcaseAccessGrantedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseAccessGrantedType struct
@objc
public class DBXTeamLogShowcaseAccessGrantedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseAccessGrantedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseAccessGrantedType

    public init(swift: TeamLog.ShowcaseAccessGrantedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added member to showcase.
@objc
public class DBXTeamLogShowcaseAddMemberDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseAddMemberDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseAddMemberDetails

    public init(swift: TeamLog.ShowcaseAddMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseAddMemberType struct
@objc
public class DBXTeamLogShowcaseAddMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseAddMemberType(description_: description_)
    }

    let swift: TeamLog.ShowcaseAddMemberType

    public init(swift: TeamLog.ShowcaseAddMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Archived showcase.
@objc
public class DBXTeamLogShowcaseArchivedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseArchivedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseArchivedDetails

    public init(swift: TeamLog.ShowcaseArchivedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseArchivedType struct
@objc
public class DBXTeamLogShowcaseArchivedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseArchivedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseArchivedType

    public init(swift: TeamLog.ShowcaseArchivedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled downloading files from Dropbox Showcase for team.
@objc
public class DBXTeamLogShowcaseChangeDownloadPolicyDetails: NSObject {
    /// New Dropbox Showcase download policy.
    @objc
    public var newValue: DBXTeamLogShowcaseDownloadPolicy { DBXTeamLogShowcaseDownloadPolicy(swift: swift.newValue) }
    /// Previous Dropbox Showcase download policy.
    @objc
    public var previousValue: DBXTeamLogShowcaseDownloadPolicy { DBXTeamLogShowcaseDownloadPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogShowcaseDownloadPolicy, previousValue: DBXTeamLogShowcaseDownloadPolicy) {
        self.swift = TeamLog.ShowcaseChangeDownloadPolicyDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ShowcaseChangeDownloadPolicyDetails

    public init(swift: TeamLog.ShowcaseChangeDownloadPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseChangeDownloadPolicyType struct
@objc
public class DBXTeamLogShowcaseChangeDownloadPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseChangeDownloadPolicyType(description_: description_)
    }

    let swift: TeamLog.ShowcaseChangeDownloadPolicyType

    public init(swift: TeamLog.ShowcaseChangeDownloadPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled Dropbox Showcase for team.
@objc
public class DBXTeamLogShowcaseChangeEnabledPolicyDetails: NSObject {
    /// New Dropbox Showcase policy.
    @objc
    public var newValue: DBXTeamLogShowcaseEnabledPolicy { DBXTeamLogShowcaseEnabledPolicy(swift: swift.newValue) }
    /// Previous Dropbox Showcase policy.
    @objc
    public var previousValue: DBXTeamLogShowcaseEnabledPolicy { DBXTeamLogShowcaseEnabledPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogShowcaseEnabledPolicy, previousValue: DBXTeamLogShowcaseEnabledPolicy) {
        self.swift = TeamLog.ShowcaseChangeEnabledPolicyDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ShowcaseChangeEnabledPolicyDetails

    public init(swift: TeamLog.ShowcaseChangeEnabledPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseChangeEnabledPolicyType struct
@objc
public class DBXTeamLogShowcaseChangeEnabledPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseChangeEnabledPolicyType(description_: description_)
    }

    let swift: TeamLog.ShowcaseChangeEnabledPolicyType

    public init(swift: TeamLog.ShowcaseChangeEnabledPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled sharing Dropbox Showcase externally for team.
@objc
public class DBXTeamLogShowcaseChangeExternalSharingPolicyDetails: NSObject {
    /// New Dropbox Showcase external sharing policy.
    @objc
    public var newValue: DBXTeamLogShowcaseExternalSharingPolicy { DBXTeamLogShowcaseExternalSharingPolicy(swift: swift.newValue) }
    /// Previous Dropbox Showcase external sharing policy.
    @objc
    public var previousValue: DBXTeamLogShowcaseExternalSharingPolicy { DBXTeamLogShowcaseExternalSharingPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogShowcaseExternalSharingPolicy, previousValue: DBXTeamLogShowcaseExternalSharingPolicy) {
        self.swift = TeamLog.ShowcaseChangeExternalSharingPolicyDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.ShowcaseChangeExternalSharingPolicyDetails

    public init(swift: TeamLog.ShowcaseChangeExternalSharingPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseChangeExternalSharingPolicyType struct
@objc
public class DBXTeamLogShowcaseChangeExternalSharingPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseChangeExternalSharingPolicyType(description_: description_)
    }

    let swift: TeamLog.ShowcaseChangeExternalSharingPolicyType

    public init(swift: TeamLog.ShowcaseChangeExternalSharingPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created showcase.
@objc
public class DBXTeamLogShowcaseCreatedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseCreatedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseCreatedDetails

    public init(swift: TeamLog.ShowcaseCreatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseCreatedType struct
@objc
public class DBXTeamLogShowcaseCreatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseCreatedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseCreatedType

    public init(swift: TeamLog.ShowcaseCreatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted showcase comment.
@objc
public class DBXTeamLogShowcaseDeleteCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.ShowcaseDeleteCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.ShowcaseDeleteCommentDetails

    public init(swift: TeamLog.ShowcaseDeleteCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseDeleteCommentType struct
@objc
public class DBXTeamLogShowcaseDeleteCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseDeleteCommentType(description_: description_)
    }

    let swift: TeamLog.ShowcaseDeleteCommentType

    public init(swift: TeamLog.ShowcaseDeleteCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Showcase document's logged information.
@objc
public class DBXTeamLogShowcaseDocumentLogInfo: NSObject {
    /// Showcase document Id.
    @objc
    public var showcaseId: String { swift.showcaseId }
    /// Showcase document title.
    @objc
    public var showcaseTitle: String { swift.showcaseTitle }

    @objc
    public init(showcaseId: String, showcaseTitle: String) {
        self.swift = TeamLog.ShowcaseDocumentLogInfo(showcaseId: showcaseId, showcaseTitle: showcaseTitle)
    }

    let swift: TeamLog.ShowcaseDocumentLogInfo

    public init(swift: TeamLog.ShowcaseDocumentLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling if files can be downloaded from Showcases by team members
@objc
public class DBXTeamLogShowcaseDownloadPolicy: NSObject {
    let swift: TeamLog.ShowcaseDownloadPolicy

    public init(swift: TeamLog.ShowcaseDownloadPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ShowcaseDownloadPolicy) -> DBXTeamLogShowcaseDownloadPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogShowcaseDownloadPolicyDisabled()
        case .enabled:
            return DBXTeamLogShowcaseDownloadPolicyEnabled()
        case .other:
            return DBXTeamLogShowcaseDownloadPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogShowcaseDownloadPolicyDisabled? {
        self as? DBXTeamLogShowcaseDownloadPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogShowcaseDownloadPolicyEnabled? {
        self as? DBXTeamLogShowcaseDownloadPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogShowcaseDownloadPolicyOther? {
        self as? DBXTeamLogShowcaseDownloadPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseDownloadPolicyDisabled: DBXTeamLogShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseDownloadPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseDownloadPolicyEnabled: DBXTeamLogShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseDownloadPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseDownloadPolicyOther: DBXTeamLogShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseDownloadPolicy.other
        super.init(swift: swift)
    }
}

/// Edited showcase comment.
@objc
public class DBXTeamLogShowcaseEditCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.ShowcaseEditCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.ShowcaseEditCommentDetails

    public init(swift: TeamLog.ShowcaseEditCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseEditCommentType struct
@objc
public class DBXTeamLogShowcaseEditCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseEditCommentType(description_: description_)
    }

    let swift: TeamLog.ShowcaseEditCommentType

    public init(swift: TeamLog.ShowcaseEditCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited showcase.
@objc
public class DBXTeamLogShowcaseEditedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseEditedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseEditedDetails

    public init(swift: TeamLog.ShowcaseEditedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseEditedType struct
@objc
public class DBXTeamLogShowcaseEditedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseEditedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseEditedType

    public init(swift: TeamLog.ShowcaseEditedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether Showcase is enabled.
@objc
public class DBXTeamLogShowcaseEnabledPolicy: NSObject {
    let swift: TeamLog.ShowcaseEnabledPolicy

    public init(swift: TeamLog.ShowcaseEnabledPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ShowcaseEnabledPolicy) -> DBXTeamLogShowcaseEnabledPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogShowcaseEnabledPolicyDisabled()
        case .enabled:
            return DBXTeamLogShowcaseEnabledPolicyEnabled()
        case .other:
            return DBXTeamLogShowcaseEnabledPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogShowcaseEnabledPolicyDisabled? {
        self as? DBXTeamLogShowcaseEnabledPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogShowcaseEnabledPolicyEnabled? {
        self as? DBXTeamLogShowcaseEnabledPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogShowcaseEnabledPolicyOther? {
        self as? DBXTeamLogShowcaseEnabledPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseEnabledPolicyDisabled: DBXTeamLogShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseEnabledPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseEnabledPolicyEnabled: DBXTeamLogShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseEnabledPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseEnabledPolicyOther: DBXTeamLogShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseEnabledPolicy.other
        super.init(swift: swift)
    }
}

/// Policy for controlling if team members can share Showcases externally.
@objc
public class DBXTeamLogShowcaseExternalSharingPolicy: NSObject {
    let swift: TeamLog.ShowcaseExternalSharingPolicy

    public init(swift: TeamLog.ShowcaseExternalSharingPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.ShowcaseExternalSharingPolicy) -> DBXTeamLogShowcaseExternalSharingPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogShowcaseExternalSharingPolicyDisabled()
        case .enabled:
            return DBXTeamLogShowcaseExternalSharingPolicyEnabled()
        case .other:
            return DBXTeamLogShowcaseExternalSharingPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogShowcaseExternalSharingPolicyDisabled? {
        self as? DBXTeamLogShowcaseExternalSharingPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogShowcaseExternalSharingPolicyEnabled? {
        self as? DBXTeamLogShowcaseExternalSharingPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogShowcaseExternalSharingPolicyOther? {
        self as? DBXTeamLogShowcaseExternalSharingPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseExternalSharingPolicyDisabled: DBXTeamLogShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseExternalSharingPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseExternalSharingPolicyEnabled: DBXTeamLogShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseExternalSharingPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogShowcaseExternalSharingPolicyOther: DBXTeamLogShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamLog.ShowcaseExternalSharingPolicy.other
        super.init(swift: swift)
    }
}

/// Added file to showcase.
@objc
public class DBXTeamLogShowcaseFileAddedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseFileAddedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseFileAddedDetails

    public init(swift: TeamLog.ShowcaseFileAddedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseFileAddedType struct
@objc
public class DBXTeamLogShowcaseFileAddedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseFileAddedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseFileAddedType

    public init(swift: TeamLog.ShowcaseFileAddedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downloaded file from showcase.
@objc
public class DBXTeamLogShowcaseFileDownloadDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Showcase download type.
    @objc
    public var downloadType: String { swift.downloadType }

    @objc
    public init(eventUuid: String, downloadType: String) {
        self.swift = TeamLog.ShowcaseFileDownloadDetails(eventUuid: eventUuid, downloadType: downloadType)
    }

    let swift: TeamLog.ShowcaseFileDownloadDetails

    public init(swift: TeamLog.ShowcaseFileDownloadDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseFileDownloadType struct
@objc
public class DBXTeamLogShowcaseFileDownloadType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseFileDownloadType(description_: description_)
    }

    let swift: TeamLog.ShowcaseFileDownloadType

    public init(swift: TeamLog.ShowcaseFileDownloadType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed file from showcase.
@objc
public class DBXTeamLogShowcaseFileRemovedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseFileRemovedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseFileRemovedDetails

    public init(swift: TeamLog.ShowcaseFileRemovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseFileRemovedType struct
@objc
public class DBXTeamLogShowcaseFileRemovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseFileRemovedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseFileRemovedType

    public init(swift: TeamLog.ShowcaseFileRemovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Viewed file in showcase.
@objc
public class DBXTeamLogShowcaseFileViewDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseFileViewDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseFileViewDetails

    public init(swift: TeamLog.ShowcaseFileViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseFileViewType struct
@objc
public class DBXTeamLogShowcaseFileViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseFileViewType(description_: description_)
    }

    let swift: TeamLog.ShowcaseFileViewType

    public init(swift: TeamLog.ShowcaseFileViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Permanently deleted showcase.
@objc
public class DBXTeamLogShowcasePermanentlyDeletedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcasePermanentlyDeletedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcasePermanentlyDeletedDetails

    public init(swift: TeamLog.ShowcasePermanentlyDeletedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcasePermanentlyDeletedType struct
@objc
public class DBXTeamLogShowcasePermanentlyDeletedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcasePermanentlyDeletedType(description_: description_)
    }

    let swift: TeamLog.ShowcasePermanentlyDeletedType

    public init(swift: TeamLog.ShowcasePermanentlyDeletedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added showcase comment.
@objc
public class DBXTeamLogShowcasePostCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.ShowcasePostCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.ShowcasePostCommentDetails

    public init(swift: TeamLog.ShowcasePostCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcasePostCommentType struct
@objc
public class DBXTeamLogShowcasePostCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcasePostCommentType(description_: description_)
    }

    let swift: TeamLog.ShowcasePostCommentType

    public init(swift: TeamLog.ShowcasePostCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed member from showcase.
@objc
public class DBXTeamLogShowcaseRemoveMemberDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseRemoveMemberDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseRemoveMemberDetails

    public init(swift: TeamLog.ShowcaseRemoveMemberDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseRemoveMemberType struct
@objc
public class DBXTeamLogShowcaseRemoveMemberType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseRemoveMemberType(description_: description_)
    }

    let swift: TeamLog.ShowcaseRemoveMemberType

    public init(swift: TeamLog.ShowcaseRemoveMemberType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed showcase.
@objc
public class DBXTeamLogShowcaseRenamedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseRenamedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseRenamedDetails

    public init(swift: TeamLog.ShowcaseRenamedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseRenamedType struct
@objc
public class DBXTeamLogShowcaseRenamedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseRenamedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseRenamedType

    public init(swift: TeamLog.ShowcaseRenamedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested access to showcase.
@objc
public class DBXTeamLogShowcaseRequestAccessDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseRequestAccessDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseRequestAccessDetails

    public init(swift: TeamLog.ShowcaseRequestAccessDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseRequestAccessType struct
@objc
public class DBXTeamLogShowcaseRequestAccessType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseRequestAccessType(description_: description_)
    }

    let swift: TeamLog.ShowcaseRequestAccessType

    public init(swift: TeamLog.ShowcaseRequestAccessType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Resolved showcase comment.
@objc
public class DBXTeamLogShowcaseResolveCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.ShowcaseResolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.ShowcaseResolveCommentDetails

    public init(swift: TeamLog.ShowcaseResolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseResolveCommentType struct
@objc
public class DBXTeamLogShowcaseResolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseResolveCommentType(description_: description_)
    }

    let swift: TeamLog.ShowcaseResolveCommentType

    public init(swift: TeamLog.ShowcaseResolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unarchived showcase.
@objc
public class DBXTeamLogShowcaseRestoredDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseRestoredDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseRestoredDetails

    public init(swift: TeamLog.ShowcaseRestoredDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseRestoredType struct
@objc
public class DBXTeamLogShowcaseRestoredType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseRestoredType(description_: description_)
    }

    let swift: TeamLog.ShowcaseRestoredType

    public init(swift: TeamLog.ShowcaseRestoredType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted showcase (old version).
@objc
public class DBXTeamLogShowcaseTrashedDeprecatedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseTrashedDeprecatedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseTrashedDeprecatedDetails

    public init(swift: TeamLog.ShowcaseTrashedDeprecatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseTrashedDeprecatedType struct
@objc
public class DBXTeamLogShowcaseTrashedDeprecatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseTrashedDeprecatedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseTrashedDeprecatedType

    public init(swift: TeamLog.ShowcaseTrashedDeprecatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted showcase.
@objc
public class DBXTeamLogShowcaseTrashedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseTrashedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseTrashedDetails

    public init(swift: TeamLog.ShowcaseTrashedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseTrashedType struct
@objc
public class DBXTeamLogShowcaseTrashedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseTrashedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseTrashedType

    public init(swift: TeamLog.ShowcaseTrashedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Unresolved showcase comment.
@objc
public class DBXTeamLogShowcaseUnresolveCommentDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }
    /// Comment text.
    @objc
    public var commentText: String? { swift.commentText }

    @objc
    public init(eventUuid: String, commentText: String?) {
        self.swift = TeamLog.ShowcaseUnresolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
    }

    let swift: TeamLog.ShowcaseUnresolveCommentDetails

    public init(swift: TeamLog.ShowcaseUnresolveCommentDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseUnresolveCommentType struct
@objc
public class DBXTeamLogShowcaseUnresolveCommentType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseUnresolveCommentType(description_: description_)
    }

    let swift: TeamLog.ShowcaseUnresolveCommentType

    public init(swift: TeamLog.ShowcaseUnresolveCommentType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored showcase (old version).
@objc
public class DBXTeamLogShowcaseUntrashedDeprecatedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseUntrashedDeprecatedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseUntrashedDeprecatedDetails

    public init(swift: TeamLog.ShowcaseUntrashedDeprecatedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseUntrashedDeprecatedType struct
@objc
public class DBXTeamLogShowcaseUntrashedDeprecatedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseUntrashedDeprecatedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseUntrashedDeprecatedType

    public init(swift: TeamLog.ShowcaseUntrashedDeprecatedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Restored showcase.
@objc
public class DBXTeamLogShowcaseUntrashedDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseUntrashedDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseUntrashedDetails

    public init(swift: TeamLog.ShowcaseUntrashedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseUntrashedType struct
@objc
public class DBXTeamLogShowcaseUntrashedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseUntrashedType(description_: description_)
    }

    let swift: TeamLog.ShowcaseUntrashedType

    public init(swift: TeamLog.ShowcaseUntrashedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Viewed showcase.
@objc
public class DBXTeamLogShowcaseViewDetails: NSObject {
    /// Event unique identifier.
    @objc
    public var eventUuid: String { swift.eventUuid }

    @objc
    public init(eventUuid: String) {
        self.swift = TeamLog.ShowcaseViewDetails(eventUuid: eventUuid)
    }

    let swift: TeamLog.ShowcaseViewDetails

    public init(swift: TeamLog.ShowcaseViewDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ShowcaseViewType struct
@objc
public class DBXTeamLogShowcaseViewType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ShowcaseViewType(description_: description_)
    }

    let swift: TeamLog.ShowcaseViewType

    public init(swift: TeamLog.ShowcaseViewType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Ended admin sign-in-as session.
@objc
public class DBXTeamLogSignInAsSessionEndDetails: NSObject {
    let swift: TeamLog.SignInAsSessionEndDetails

    public init(swift: TeamLog.SignInAsSessionEndDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SignInAsSessionEndType struct
@objc
public class DBXTeamLogSignInAsSessionEndType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SignInAsSessionEndType(description_: description_)
    }

    let swift: TeamLog.SignInAsSessionEndType

    public init(swift: TeamLog.SignInAsSessionEndType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Started admin sign-in-as session.
@objc
public class DBXTeamLogSignInAsSessionStartDetails: NSObject {
    let swift: TeamLog.SignInAsSessionStartDetails

    public init(swift: TeamLog.SignInAsSessionStartDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SignInAsSessionStartType struct
@objc
public class DBXTeamLogSignInAsSessionStartType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SignInAsSessionStartType(description_: description_)
    }

    let swift: TeamLog.SignInAsSessionStartType

    public init(swift: TeamLog.SignInAsSessionStartType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed default Smart Sync setting for team members.
@objc
public class DBXTeamLogSmartSyncChangePolicyDetails: NSObject {
    /// New smart sync policy.
    @objc
    public var newValue: DBXTeamPoliciesSmartSyncPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamPoliciesSmartSyncPolicy(swift: swift)
    }

    /// Previous smart sync policy.
    @objc
    public var previousValue: DBXTeamPoliciesSmartSyncPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesSmartSyncPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesSmartSyncPolicy?, previousValue: DBXTeamPoliciesSmartSyncPolicy?) {
        self.swift = TeamLog.SmartSyncChangePolicyDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SmartSyncChangePolicyDetails

    public init(swift: TeamLog.SmartSyncChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SmartSyncChangePolicyType struct
@objc
public class DBXTeamLogSmartSyncChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SmartSyncChangePolicyType(description_: description_)
    }

    let swift: TeamLog.SmartSyncChangePolicyType

    public init(swift: TeamLog.SmartSyncChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created Smart Sync non-admin devices report.
@objc
public class DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails: NSObject {
    let swift: TeamLog.SmartSyncCreateAdminPrivilegeReportDetails

    public init(swift: TeamLog.SmartSyncCreateAdminPrivilegeReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SmartSyncCreateAdminPrivilegeReportType struct
@objc
public class DBXTeamLogSmartSyncCreateAdminPrivilegeReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SmartSyncCreateAdminPrivilegeReportType(description_: description_)
    }

    let swift: TeamLog.SmartSyncCreateAdminPrivilegeReportType

    public init(swift: TeamLog.SmartSyncCreateAdminPrivilegeReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Opted team into Smart Sync.
@objc
public class DBXTeamLogSmartSyncNotOptOutDetails: NSObject {
    /// Previous Smart Sync opt out policy.
    @objc
    public var previousValue: DBXTeamLogSmartSyncOptOutPolicy { DBXTeamLogSmartSyncOptOutPolicy(swift: swift.previousValue) }
    /// New Smart Sync opt out policy.
    @objc
    public var newValue: DBXTeamLogSmartSyncOptOutPolicy { DBXTeamLogSmartSyncOptOutPolicy(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogSmartSyncOptOutPolicy, newValue: DBXTeamLogSmartSyncOptOutPolicy) {
        self.swift = TeamLog.SmartSyncNotOptOutDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.SmartSyncNotOptOutDetails

    public init(swift: TeamLog.SmartSyncNotOptOutDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SmartSyncNotOptOutType struct
@objc
public class DBXTeamLogSmartSyncNotOptOutType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SmartSyncNotOptOutType(description_: description_)
    }

    let swift: TeamLog.SmartSyncNotOptOutType

    public init(swift: TeamLog.SmartSyncNotOptOutType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Opted team out of Smart Sync.
@objc
public class DBXTeamLogSmartSyncOptOutDetails: NSObject {
    /// Previous Smart Sync opt out policy.
    @objc
    public var previousValue: DBXTeamLogSmartSyncOptOutPolicy { DBXTeamLogSmartSyncOptOutPolicy(swift: swift.previousValue) }
    /// New Smart Sync opt out policy.
    @objc
    public var newValue: DBXTeamLogSmartSyncOptOutPolicy { DBXTeamLogSmartSyncOptOutPolicy(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogSmartSyncOptOutPolicy, newValue: DBXTeamLogSmartSyncOptOutPolicy) {
        self.swift = TeamLog.SmartSyncOptOutDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.SmartSyncOptOutDetails

    public init(swift: TeamLog.SmartSyncOptOutDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SmartSyncOptOutPolicy union
@objc
public class DBXTeamLogSmartSyncOptOutPolicy: NSObject {
    let swift: TeamLog.SmartSyncOptOutPolicy

    public init(swift: TeamLog.SmartSyncOptOutPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SmartSyncOptOutPolicy) -> DBXTeamLogSmartSyncOptOutPolicy {
        switch swift {
        case .default_:
            return DBXTeamLogSmartSyncOptOutPolicyDefault_()
        case .optedOut:
            return DBXTeamLogSmartSyncOptOutPolicyOptedOut()
        case .other:
            return DBXTeamLogSmartSyncOptOutPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefault_: DBXTeamLogSmartSyncOptOutPolicyDefault_? {
        self as? DBXTeamLogSmartSyncOptOutPolicyDefault_
    }

    @objc
    public var asOptedOut: DBXTeamLogSmartSyncOptOutPolicyOptedOut? {
        self as? DBXTeamLogSmartSyncOptOutPolicyOptedOut
    }

    @objc
    public var asOther: DBXTeamLogSmartSyncOptOutPolicyOther? {
        self as? DBXTeamLogSmartSyncOptOutPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSmartSyncOptOutPolicyDefault_: DBXTeamLogSmartSyncOptOutPolicy {
    @objc
    public init() {
        let swift = TeamLog.SmartSyncOptOutPolicy.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSmartSyncOptOutPolicyOptedOut: DBXTeamLogSmartSyncOptOutPolicy {
    @objc
    public init() {
        let swift = TeamLog.SmartSyncOptOutPolicy.optedOut
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSmartSyncOptOutPolicyOther: DBXTeamLogSmartSyncOptOutPolicy {
    @objc
    public init() {
        let swift = TeamLog.SmartSyncOptOutPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SmartSyncOptOutType struct
@objc
public class DBXTeamLogSmartSyncOptOutType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SmartSyncOptOutType(description_: description_)
    }

    let swift: TeamLog.SmartSyncOptOutType

    public init(swift: TeamLog.SmartSyncOptOutType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed automatic Smart Sync setting for team.
@objc
public class DBXTeamLogSmarterSmartSyncPolicyChangedDetails: NSObject {
    /// Previous automatic Smart Sync setting.
    @objc
    public var previousValue: DBXTeamPoliciesSmarterSmartSyncPolicyState { DBXTeamPoliciesSmarterSmartSyncPolicyState(swift: swift.previousValue) }
    /// New automatic Smart Sync setting.
    @objc
    public var newValue: DBXTeamPoliciesSmarterSmartSyncPolicyState { DBXTeamPoliciesSmarterSmartSyncPolicyState(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamPoliciesSmarterSmartSyncPolicyState, newValue: DBXTeamPoliciesSmarterSmartSyncPolicyState) {
        self.swift = TeamLog.SmarterSmartSyncPolicyChangedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.SmarterSmartSyncPolicyChangedDetails

    public init(swift: TeamLog.SmarterSmartSyncPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SmarterSmartSyncPolicyChangedType struct
@objc
public class DBXTeamLogSmarterSmartSyncPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SmarterSmartSyncPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.SmarterSmartSyncPolicyChangedType

    public init(swift: TeamLog.SmarterSmartSyncPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Space limit alert policy
@objc
public class DBXTeamLogSpaceCapsType: NSObject {
    let swift: TeamLog.SpaceCapsType

    public init(swift: TeamLog.SpaceCapsType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SpaceCapsType) -> DBXTeamLogSpaceCapsType {
        switch swift {
        case .hard:
            return DBXTeamLogSpaceCapsTypeHard()
        case .off:
            return DBXTeamLogSpaceCapsTypeOff()
        case .soft:
            return DBXTeamLogSpaceCapsTypeSoft()
        case .other:
            return DBXTeamLogSpaceCapsTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asHard: DBXTeamLogSpaceCapsTypeHard? {
        self as? DBXTeamLogSpaceCapsTypeHard
    }

    @objc
    public var asOff: DBXTeamLogSpaceCapsTypeOff? {
        self as? DBXTeamLogSpaceCapsTypeOff
    }

    @objc
    public var asSoft: DBXTeamLogSpaceCapsTypeSoft? {
        self as? DBXTeamLogSpaceCapsTypeSoft
    }

    @objc
    public var asOther: DBXTeamLogSpaceCapsTypeOther? {
        self as? DBXTeamLogSpaceCapsTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceCapsTypeHard: DBXTeamLogSpaceCapsType {
    @objc
    public init() {
        let swift = TeamLog.SpaceCapsType.hard
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceCapsTypeOff: DBXTeamLogSpaceCapsType {
    @objc
    public init() {
        let swift = TeamLog.SpaceCapsType.off
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceCapsTypeSoft: DBXTeamLogSpaceCapsType {
    @objc
    public init() {
        let swift = TeamLog.SpaceCapsType.soft
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceCapsTypeOther: DBXTeamLogSpaceCapsType {
    @objc
    public init() {
        let swift = TeamLog.SpaceCapsType.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SpaceLimitsStatus union
@objc
public class DBXTeamLogSpaceLimitsStatus: NSObject {
    let swift: TeamLog.SpaceLimitsStatus

    public init(swift: TeamLog.SpaceLimitsStatus) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.SpaceLimitsStatus) -> DBXTeamLogSpaceLimitsStatus {
        switch swift {
        case .nearQuota:
            return DBXTeamLogSpaceLimitsStatusNearQuota()
        case .overQuota:
            return DBXTeamLogSpaceLimitsStatusOverQuota()
        case .withinQuota:
            return DBXTeamLogSpaceLimitsStatusWithinQuota()
        case .other:
            return DBXTeamLogSpaceLimitsStatusOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asNearQuota: DBXTeamLogSpaceLimitsStatusNearQuota? {
        self as? DBXTeamLogSpaceLimitsStatusNearQuota
    }

    @objc
    public var asOverQuota: DBXTeamLogSpaceLimitsStatusOverQuota? {
        self as? DBXTeamLogSpaceLimitsStatusOverQuota
    }

    @objc
    public var asWithinQuota: DBXTeamLogSpaceLimitsStatusWithinQuota? {
        self as? DBXTeamLogSpaceLimitsStatusWithinQuota
    }

    @objc
    public var asOther: DBXTeamLogSpaceLimitsStatusOther? {
        self as? DBXTeamLogSpaceLimitsStatusOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceLimitsStatusNearQuota: DBXTeamLogSpaceLimitsStatus {
    @objc
    public init() {
        let swift = TeamLog.SpaceLimitsStatus.nearQuota
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceLimitsStatusOverQuota: DBXTeamLogSpaceLimitsStatus {
    @objc
    public init() {
        let swift = TeamLog.SpaceLimitsStatus.overQuota
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceLimitsStatusWithinQuota: DBXTeamLogSpaceLimitsStatus {
    @objc
    public init() {
        let swift = TeamLog.SpaceLimitsStatus.withinQuota
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogSpaceLimitsStatusOther: DBXTeamLogSpaceLimitsStatus {
    @objc
    public init() {
        let swift = TeamLog.SpaceLimitsStatus.other
        super.init(swift: swift)
    }
}

/// Added X.509 certificate for SSO.
@objc
public class DBXTeamLogSsoAddCertDetails: NSObject {
    /// SSO certificate details.
    @objc
    public var certificateDetails: DBXTeamLogCertificate { DBXTeamLogCertificate(swift: swift.certificateDetails) }

    @objc
    public init(certificateDetails: DBXTeamLogCertificate) {
        self.swift = TeamLog.SsoAddCertDetails(certificateDetails: certificateDetails.swift)
    }

    let swift: TeamLog.SsoAddCertDetails

    public init(swift: TeamLog.SsoAddCertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoAddCertType struct
@objc
public class DBXTeamLogSsoAddCertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoAddCertType(description_: description_)
    }

    let swift: TeamLog.SsoAddCertType

    public init(swift: TeamLog.SsoAddCertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added sign-in URL for SSO.
@objc
public class DBXTeamLogSsoAddLoginUrlDetails: NSObject {
    /// New single sign-on login URL.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(newValue: String) {
        self.swift = TeamLog.SsoAddLoginUrlDetails(newValue: newValue)
    }

    let swift: TeamLog.SsoAddLoginUrlDetails

    public init(swift: TeamLog.SsoAddLoginUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoAddLoginUrlType struct
@objc
public class DBXTeamLogSsoAddLoginUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoAddLoginUrlType(description_: description_)
    }

    let swift: TeamLog.SsoAddLoginUrlType

    public init(swift: TeamLog.SsoAddLoginUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added sign-out URL for SSO.
@objc
public class DBXTeamLogSsoAddLogoutUrlDetails: NSObject {
    /// New single sign-on logout URL.
    @objc
    public var newValue: String? { swift.newValue }

    @objc
    public init(newValue: String?) {
        self.swift = TeamLog.SsoAddLogoutUrlDetails(newValue: newValue)
    }

    let swift: TeamLog.SsoAddLogoutUrlDetails

    public init(swift: TeamLog.SsoAddLogoutUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoAddLogoutUrlType struct
@objc
public class DBXTeamLogSsoAddLogoutUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoAddLogoutUrlType(description_: description_)
    }

    let swift: TeamLog.SsoAddLogoutUrlType

    public init(swift: TeamLog.SsoAddLogoutUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed X.509 certificate for SSO.
@objc
public class DBXTeamLogSsoChangeCertDetails: NSObject {
    /// Previous SSO certificate details. Might be missing due to historical data gap.
    @objc
    public var previousCertificateDetails: DBXTeamLogCertificate? { guard let swift = swift.previousCertificateDetails else { return nil }
        return DBXTeamLogCertificate(swift: swift)
    }

    /// New SSO certificate details.
    @objc
    public var newCertificateDetails: DBXTeamLogCertificate { DBXTeamLogCertificate(swift: swift.newCertificateDetails) }

    @objc
    public init(newCertificateDetails: DBXTeamLogCertificate, previousCertificateDetails: DBXTeamLogCertificate?) {
        self.swift = TeamLog.SsoChangeCertDetails(
            newCertificateDetails: newCertificateDetails.swift,
            previousCertificateDetails: previousCertificateDetails?.swift
        )
    }

    let swift: TeamLog.SsoChangeCertDetails

    public init(swift: TeamLog.SsoChangeCertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoChangeCertType struct
@objc
public class DBXTeamLogSsoChangeCertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoChangeCertType(description_: description_)
    }

    let swift: TeamLog.SsoChangeCertType

    public init(swift: TeamLog.SsoChangeCertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed sign-in URL for SSO.
@objc
public class DBXTeamLogSsoChangeLoginUrlDetails: NSObject {
    /// Previous single sign-on login URL.
    @objc
    public var previousValue: String { swift.previousValue }
    /// New single sign-on login URL.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(previousValue: String, newValue: String) {
        self.swift = TeamLog.SsoChangeLoginUrlDetails(previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.SsoChangeLoginUrlDetails

    public init(swift: TeamLog.SsoChangeLoginUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoChangeLoginUrlType struct
@objc
public class DBXTeamLogSsoChangeLoginUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoChangeLoginUrlType(description_: description_)
    }

    let swift: TeamLog.SsoChangeLoginUrlType

    public init(swift: TeamLog.SsoChangeLoginUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed sign-out URL for SSO.
@objc
public class DBXTeamLogSsoChangeLogoutUrlDetails: NSObject {
    /// Previous single sign-on logout URL. Might be missing due to historical data gap.
    @objc
    public var previousValue: String? { swift.previousValue }
    /// New single sign-on logout URL.
    @objc
    public var newValue: String? { swift.newValue }

    @objc
    public init(previousValue: String?, newValue: String?) {
        self.swift = TeamLog.SsoChangeLogoutUrlDetails(previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.SsoChangeLogoutUrlDetails

    public init(swift: TeamLog.SsoChangeLogoutUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoChangeLogoutUrlType struct
@objc
public class DBXTeamLogSsoChangeLogoutUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoChangeLogoutUrlType(description_: description_)
    }

    let swift: TeamLog.SsoChangeLogoutUrlType

    public init(swift: TeamLog.SsoChangeLogoutUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed single sign-on setting for team.
@objc
public class DBXTeamLogSsoChangePolicyDetails: NSObject {
    /// New single sign-on policy.
    @objc
    public var newValue: DBXTeamPoliciesSsoPolicy { DBXTeamPoliciesSsoPolicy(swift: swift.newValue) }
    /// Previous single sign-on policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesSsoPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesSsoPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesSsoPolicy, previousValue: DBXTeamPoliciesSsoPolicy?) {
        self.swift = TeamLog.SsoChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.SsoChangePolicyDetails

    public init(swift: TeamLog.SsoChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoChangePolicyType struct
@objc
public class DBXTeamLogSsoChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoChangePolicyType(description_: description_)
    }

    let swift: TeamLog.SsoChangePolicyType

    public init(swift: TeamLog.SsoChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed SAML identity mode for SSO.
@objc
public class DBXTeamLogSsoChangeSamlIdentityModeDetails: NSObject {
    /// Previous single sign-on identity mode.
    @objc
    public var previousValue: NSNumber { swift.previousValue as NSNumber }
    /// New single sign-on identity mode.
    @objc
    public var newValue: NSNumber { swift.newValue as NSNumber }

    @objc
    public init(previousValue: NSNumber, newValue: NSNumber) {
        self.swift = TeamLog.SsoChangeSamlIdentityModeDetails(previousValue: previousValue.int64Value, newValue: newValue.int64Value)
    }

    let swift: TeamLog.SsoChangeSamlIdentityModeDetails

    public init(swift: TeamLog.SsoChangeSamlIdentityModeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoChangeSamlIdentityModeType struct
@objc
public class DBXTeamLogSsoChangeSamlIdentityModeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoChangeSamlIdentityModeType(description_: description_)
    }

    let swift: TeamLog.SsoChangeSamlIdentityModeType

    public init(swift: TeamLog.SsoChangeSamlIdentityModeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Failed to sign in via SSO.
@objc
public class DBXTeamLogSsoErrorDetails: NSObject {
    /// Error details.
    @objc
    public var errorDetails: DBXTeamLogFailureDetailsLogInfo { DBXTeamLogFailureDetailsLogInfo(swift: swift.errorDetails) }

    @objc
    public init(errorDetails: DBXTeamLogFailureDetailsLogInfo) {
        self.swift = TeamLog.SsoErrorDetails(errorDetails: errorDetails.swift)
    }

    let swift: TeamLog.SsoErrorDetails

    public init(swift: TeamLog.SsoErrorDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoErrorType struct
@objc
public class DBXTeamLogSsoErrorType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoErrorType(description_: description_)
    }

    let swift: TeamLog.SsoErrorType

    public init(swift: TeamLog.SsoErrorType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed X.509 certificate for SSO.
@objc
public class DBXTeamLogSsoRemoveCertDetails: NSObject {
    let swift: TeamLog.SsoRemoveCertDetails

    public init(swift: TeamLog.SsoRemoveCertDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoRemoveCertType struct
@objc
public class DBXTeamLogSsoRemoveCertType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoRemoveCertType(description_: description_)
    }

    let swift: TeamLog.SsoRemoveCertType

    public init(swift: TeamLog.SsoRemoveCertType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed sign-in URL for SSO.
@objc
public class DBXTeamLogSsoRemoveLoginUrlDetails: NSObject {
    /// Previous single sign-on login URL.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(previousValue: String) {
        self.swift = TeamLog.SsoRemoveLoginUrlDetails(previousValue: previousValue)
    }

    let swift: TeamLog.SsoRemoveLoginUrlDetails

    public init(swift: TeamLog.SsoRemoveLoginUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoRemoveLoginUrlType struct
@objc
public class DBXTeamLogSsoRemoveLoginUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoRemoveLoginUrlType(description_: description_)
    }

    let swift: TeamLog.SsoRemoveLoginUrlType

    public init(swift: TeamLog.SsoRemoveLoginUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed sign-out URL for SSO.
@objc
public class DBXTeamLogSsoRemoveLogoutUrlDetails: NSObject {
    /// Previous single sign-on logout URL.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(previousValue: String) {
        self.swift = TeamLog.SsoRemoveLogoutUrlDetails(previousValue: previousValue)
    }

    let swift: TeamLog.SsoRemoveLogoutUrlDetails

    public init(swift: TeamLog.SsoRemoveLogoutUrlDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible SsoRemoveLogoutUrlType struct
@objc
public class DBXTeamLogSsoRemoveLogoutUrlType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.SsoRemoveLogoutUrlType(description_: description_)
    }

    let swift: TeamLog.SsoRemoveLogoutUrlType

    public init(swift: TeamLog.SsoRemoveLogoutUrlType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Started enterprise admin session.
@objc
public class DBXTeamLogStartedEnterpriseAdminSessionDetails: NSObject {
    /// More information about the organization or team.
    @objc
    public var federationExtraDetails: DBXTeamLogFedExtraDetails { DBXTeamLogFedExtraDetails(swift: swift.federationExtraDetails) }

    @objc
    public init(federationExtraDetails: DBXTeamLogFedExtraDetails) {
        self.swift = TeamLog.StartedEnterpriseAdminSessionDetails(federationExtraDetails: federationExtraDetails.swift)
    }

    let swift: TeamLog.StartedEnterpriseAdminSessionDetails

    public init(swift: TeamLog.StartedEnterpriseAdminSessionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible StartedEnterpriseAdminSessionType struct
@objc
public class DBXTeamLogStartedEnterpriseAdminSessionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.StartedEnterpriseAdminSessionType(description_: description_)
    }

    let swift: TeamLog.StartedEnterpriseAdminSessionType

    public init(swift: TeamLog.StartedEnterpriseAdminSessionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created team activity report.
@objc
public class DBXTeamLogTeamActivityCreateReportDetails: NSObject {
    /// Report start date.
    @objc
    public var startDate: Date { swift.startDate }
    /// Report end date.
    @objc
    public var endDate: Date { swift.endDate }

    @objc
    public init(startDate: Date, endDate: Date) {
        self.swift = TeamLog.TeamActivityCreateReportDetails(startDate: startDate, endDate: endDate)
    }

    let swift: TeamLog.TeamActivityCreateReportDetails

    public init(swift: TeamLog.TeamActivityCreateReportDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Couldn't generate team activity report.
@objc
public class DBXTeamLogTeamActivityCreateReportFailDetails: NSObject {
    /// Failure reason.
    @objc
    public var failureReason: DBXTeamTeamReportFailureReason { DBXTeamTeamReportFailureReason(swift: swift.failureReason) }

    @objc
    public init(failureReason: DBXTeamTeamReportFailureReason) {
        self.swift = TeamLog.TeamActivityCreateReportFailDetails(failureReason: failureReason.swift)
    }

    let swift: TeamLog.TeamActivityCreateReportFailDetails

    public init(swift: TeamLog.TeamActivityCreateReportFailDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamActivityCreateReportFailType struct
@objc
public class DBXTeamLogTeamActivityCreateReportFailType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamActivityCreateReportFailType(description_: description_)
    }

    let swift: TeamLog.TeamActivityCreateReportFailType

    public init(swift: TeamLog.TeamActivityCreateReportFailType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamActivityCreateReportType struct
@objc
public class DBXTeamLogTeamActivityCreateReportType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamActivityCreateReportType(description_: description_)
    }

    let swift: TeamLog.TeamActivityCreateReportType

    public init(swift: TeamLog.TeamActivityCreateReportType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to setting up branding feature
@objc
public class DBXTeamLogTeamBrandingPolicy: NSObject {
    let swift: TeamLog.TeamBrandingPolicy

    public init(swift: TeamLog.TeamBrandingPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamBrandingPolicy) -> DBXTeamLogTeamBrandingPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogTeamBrandingPolicyDisabled()
        case .enabled:
            return DBXTeamLogTeamBrandingPolicyEnabled()
        case .other:
            return DBXTeamLogTeamBrandingPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogTeamBrandingPolicyDisabled? {
        self as? DBXTeamLogTeamBrandingPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogTeamBrandingPolicyEnabled? {
        self as? DBXTeamLogTeamBrandingPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogTeamBrandingPolicyOther? {
        self as? DBXTeamLogTeamBrandingPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamBrandingPolicyDisabled: DBXTeamLogTeamBrandingPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamBrandingPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamBrandingPolicyEnabled: DBXTeamLogTeamBrandingPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamBrandingPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamBrandingPolicyOther: DBXTeamLogTeamBrandingPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamBrandingPolicy.other
        super.init(swift: swift)
    }
}

/// Changed team branding policy for team.
@objc
public class DBXTeamLogTeamBrandingPolicyChangedDetails: NSObject {
    /// New team branding policy.
    @objc
    public var newValue: DBXTeamLogTeamBrandingPolicy { DBXTeamLogTeamBrandingPolicy(swift: swift.newValue) }
    /// Previous team branding policy.
    @objc
    public var previousValue: DBXTeamLogTeamBrandingPolicy { DBXTeamLogTeamBrandingPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogTeamBrandingPolicy, previousValue: DBXTeamLogTeamBrandingPolicy) {
        self.swift = TeamLog.TeamBrandingPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.TeamBrandingPolicyChangedDetails

    public init(swift: TeamLog.TeamBrandingPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamBrandingPolicyChangedType struct
@objc
public class DBXTeamLogTeamBrandingPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamBrandingPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.TeamBrandingPolicyChangedType

    public init(swift: TeamLog.TeamBrandingPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// More details about the team.
@objc
public class DBXTeamLogTeamDetails: NSObject {
    /// The name of the team.
    @objc
    public var team: String { swift.team }

    @objc
    public init(team: String) {
        self.swift = TeamLog.TeamDetails(team: team)
    }

    let swift: TeamLog.TeamDetails

    public init(swift: TeamLog.TeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Canceled team encryption key deletion.
@objc
public class DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyCancelKeyDeletionDetails

    public init(swift: TeamLog.TeamEncryptionKeyCancelKeyDeletionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyCancelKeyDeletionType struct
@objc
public class DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyCancelKeyDeletionType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyCancelKeyDeletionType

    public init(swift: TeamLog.TeamEncryptionKeyCancelKeyDeletionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created team encryption key.
@objc
public class DBXTeamLogTeamEncryptionKeyCreateKeyDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyCreateKeyDetails

    public init(swift: TeamLog.TeamEncryptionKeyCreateKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyCreateKeyType struct
@objc
public class DBXTeamLogTeamEncryptionKeyCreateKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyCreateKeyType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyCreateKeyType

    public init(swift: TeamLog.TeamEncryptionKeyCreateKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Deleted team encryption key.
@objc
public class DBXTeamLogTeamEncryptionKeyDeleteKeyDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyDeleteKeyDetails

    public init(swift: TeamLog.TeamEncryptionKeyDeleteKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyDeleteKeyType struct
@objc
public class DBXTeamLogTeamEncryptionKeyDeleteKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyDeleteKeyType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyDeleteKeyType

    public init(swift: TeamLog.TeamEncryptionKeyDeleteKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Disabled team encryption key.
@objc
public class DBXTeamLogTeamEncryptionKeyDisableKeyDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyDisableKeyDetails

    public init(swift: TeamLog.TeamEncryptionKeyDisableKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyDisableKeyType struct
@objc
public class DBXTeamLogTeamEncryptionKeyDisableKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyDisableKeyType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyDisableKeyType

    public init(swift: TeamLog.TeamEncryptionKeyDisableKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled team encryption key.
@objc
public class DBXTeamLogTeamEncryptionKeyEnableKeyDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyEnableKeyDetails

    public init(swift: TeamLog.TeamEncryptionKeyEnableKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyEnableKeyType struct
@objc
public class DBXTeamLogTeamEncryptionKeyEnableKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyEnableKeyType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyEnableKeyType

    public init(swift: TeamLog.TeamEncryptionKeyEnableKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Rotated team encryption key.
@objc
public class DBXTeamLogTeamEncryptionKeyRotateKeyDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyRotateKeyDetails

    public init(swift: TeamLog.TeamEncryptionKeyRotateKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyRotateKeyType struct
@objc
public class DBXTeamLogTeamEncryptionKeyRotateKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyRotateKeyType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyRotateKeyType

    public init(swift: TeamLog.TeamEncryptionKeyRotateKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Scheduled encryption key deletion.
@objc
public class DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails: NSObject {
    let swift: TeamLog.TeamEncryptionKeyScheduleKeyDeletionDetails

    public init(swift: TeamLog.TeamEncryptionKeyScheduleKeyDeletionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamEncryptionKeyScheduleKeyDeletionType struct
@objc
public class DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamEncryptionKeyScheduleKeyDeletionType(description_: description_)
    }

    let swift: TeamLog.TeamEncryptionKeyScheduleKeyDeletionType

    public init(swift: TeamLog.TeamEncryptionKeyScheduleKeyDeletionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// An audit log event.
@objc
public class DBXTeamLogTeamEvent: NSObject {
    /// The Dropbox timestamp representing when the action was taken.
    @objc
    public var timestamp_: Date { swift.timestamp_ }
    /// The category that this type of action belongs to.
    @objc
    public var eventCategory: DBXTeamLogEventCategory { DBXTeamLogEventCategory(swift: swift.eventCategory) }
    /// The entity who actually performed the action. Might be missing due to historical data gap.
    @objc
    public var actor: DBXTeamLogActorLogInfo? { guard let swift = swift.actor else { return nil }
        return DBXTeamLogActorLogInfo(swift: swift)
    }

    /// The origin from which the actor performed the action including information about host, ip address, location,
    /// session, etc. If the action was performed programmatically via the API the origin represents the API
    /// client.
    @objc
    public var origin: DBXTeamLogOriginLogInfo? { guard let swift = swift.origin else { return nil }
        return DBXTeamLogOriginLogInfo(swift: swift)
    }

    /// True if the action involved a non team member either as the actor or as one of the affected users. Might be
    /// missing due to historical data gap.
    @objc
    public var involveNonTeamMember: NSNumber? { swift.involveNonTeamMember as NSNumber? }
    /// The user or team on whose behalf the actor performed the action. Might be missing due to historical data
    /// gap.
    @objc
    public var context: DBXTeamLogContextLogInfo? { guard let swift = swift.context else { return nil }
        return DBXTeamLogContextLogInfo(swift: swift)
    }

    /// Zero or more users and/or groups that are affected by the action. Note that this list doesn't include any
    /// actors or users in context.
    @objc
    public var participants: [DBXTeamLogParticipantLogInfo]? { swift.participants?.map { DBXTeamLogParticipantLogInfo(swift: $0) } }
    /// Zero or more content assets involved in the action. Currently these include Dropbox files and folders but in
    /// the future we might add other asset types such as Paper documents, folders, projects, etc.
    @objc
    public var assets: [DBXTeamLogAssetLogInfo]? { swift.assets?.map { DBXTeamLogAssetLogInfo(swift: $0) } }
    /// The particular type of action taken.
    @objc
    public var eventType: DBXTeamLogEventType { DBXTeamLogEventType(swift: swift.eventType) }
    /// The variable event schema applicable to this type of action, instantiated with respect to this particular
    /// action.
    @objc
    public var details: DBXTeamLogEventDetails { DBXTeamLogEventDetails(swift: swift.details) }

    @objc
    public init(
        timestamp_: Date,
        eventCategory: DBXTeamLogEventCategory,
        eventType: DBXTeamLogEventType,
        details: DBXTeamLogEventDetails,
        actor: DBXTeamLogActorLogInfo?,
        origin: DBXTeamLogOriginLogInfo?,
        involveNonTeamMember: NSNumber?,
        context: DBXTeamLogContextLogInfo?,
        participants: [DBXTeamLogParticipantLogInfo]?,
        assets: [DBXTeamLogAssetLogInfo]?
    ) {
        self.swift = TeamLog.TeamEvent(
            timestamp_: timestamp_,
            eventCategory: eventCategory.swift,
            eventType: eventType.swift,
            details: details.swift,
            actor: actor?.swift,
            origin: origin?.swift,
            involveNonTeamMember: involveNonTeamMember?.boolValue,
            context: context?.swift,
            participants: participants?.map(\.swift),
            assets: assets?.map(\.swift)
        )
    }

    let swift: TeamLog.TeamEvent

    public init(swift: TeamLog.TeamEvent) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether App Integrations are enabled for the team.
@objc
public class DBXTeamLogTeamExtensionsPolicy: NSObject {
    let swift: TeamLog.TeamExtensionsPolicy

    public init(swift: TeamLog.TeamExtensionsPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamExtensionsPolicy) -> DBXTeamLogTeamExtensionsPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogTeamExtensionsPolicyDisabled()
        case .enabled:
            return DBXTeamLogTeamExtensionsPolicyEnabled()
        case .other:
            return DBXTeamLogTeamExtensionsPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogTeamExtensionsPolicyDisabled? {
        self as? DBXTeamLogTeamExtensionsPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogTeamExtensionsPolicyEnabled? {
        self as? DBXTeamLogTeamExtensionsPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogTeamExtensionsPolicyOther? {
        self as? DBXTeamLogTeamExtensionsPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamExtensionsPolicyDisabled: DBXTeamLogTeamExtensionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamExtensionsPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamExtensionsPolicyEnabled: DBXTeamLogTeamExtensionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamExtensionsPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamExtensionsPolicyOther: DBXTeamLogTeamExtensionsPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamExtensionsPolicy.other
        super.init(swift: swift)
    }
}

/// Changed App Integrations setting for team.
@objc
public class DBXTeamLogTeamExtensionsPolicyChangedDetails: NSObject {
    /// New Extensions policy.
    @objc
    public var newValue: DBXTeamLogTeamExtensionsPolicy { DBXTeamLogTeamExtensionsPolicy(swift: swift.newValue) }
    /// Previous Extensions policy.
    @objc
    public var previousValue: DBXTeamLogTeamExtensionsPolicy { DBXTeamLogTeamExtensionsPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogTeamExtensionsPolicy, previousValue: DBXTeamLogTeamExtensionsPolicy) {
        self.swift = TeamLog.TeamExtensionsPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.TeamExtensionsPolicyChangedDetails

    public init(swift: TeamLog.TeamExtensionsPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamExtensionsPolicyChangedType struct
@objc
public class DBXTeamLogTeamExtensionsPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamExtensionsPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.TeamExtensionsPolicyChangedType

    public init(swift: TeamLog.TeamExtensionsPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed archival status of team folder.
@objc
public class DBXTeamLogTeamFolderChangeStatusDetails: NSObject {
    /// New team folder status.
    @objc
    public var newValue: DBXTeamTeamFolderStatus { DBXTeamTeamFolderStatus(swift: swift.newValue) }
    /// Previous team folder status. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamTeamFolderStatus? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamTeamFolderStatus(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamTeamFolderStatus, previousValue: DBXTeamTeamFolderStatus?) {
        self.swift = TeamLog.TeamFolderChangeStatusDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.TeamFolderChangeStatusDetails

    public init(swift: TeamLog.TeamFolderChangeStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamFolderChangeStatusType struct
@objc
public class DBXTeamLogTeamFolderChangeStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamFolderChangeStatusType(description_: description_)
    }

    let swift: TeamLog.TeamFolderChangeStatusType

    public init(swift: TeamLog.TeamFolderChangeStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Created team folder in active status.
@objc
public class DBXTeamLogTeamFolderCreateDetails: NSObject {
    let swift: TeamLog.TeamFolderCreateDetails

    public init(swift: TeamLog.TeamFolderCreateDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamFolderCreateType struct
@objc
public class DBXTeamLogTeamFolderCreateType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamFolderCreateType(description_: description_)
    }

    let swift: TeamLog.TeamFolderCreateType

    public init(swift: TeamLog.TeamFolderCreateType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Downgraded team folder to regular shared folder.
@objc
public class DBXTeamLogTeamFolderDowngradeDetails: NSObject {
    /// Target asset position in the Assets list.
    @objc
    public var targetAssetIndex: NSNumber { swift.targetAssetIndex as NSNumber }

    @objc
    public init(targetAssetIndex: NSNumber) {
        self.swift = TeamLog.TeamFolderDowngradeDetails(targetAssetIndex: targetAssetIndex.uint64Value)
    }

    let swift: TeamLog.TeamFolderDowngradeDetails

    public init(swift: TeamLog.TeamFolderDowngradeDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamFolderDowngradeType struct
@objc
public class DBXTeamLogTeamFolderDowngradeType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamFolderDowngradeType(description_: description_)
    }

    let swift: TeamLog.TeamFolderDowngradeType

    public init(swift: TeamLog.TeamFolderDowngradeType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Permanently deleted archived team folder.
@objc
public class DBXTeamLogTeamFolderPermanentlyDeleteDetails: NSObject {
    let swift: TeamLog.TeamFolderPermanentlyDeleteDetails

    public init(swift: TeamLog.TeamFolderPermanentlyDeleteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamFolderPermanentlyDeleteType struct
@objc
public class DBXTeamLogTeamFolderPermanentlyDeleteType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamFolderPermanentlyDeleteType(description_: description_)
    }

    let swift: TeamLog.TeamFolderPermanentlyDeleteType

    public init(swift: TeamLog.TeamFolderPermanentlyDeleteType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Renamed active/archived team folder.
@objc
public class DBXTeamLogTeamFolderRenameDetails: NSObject {
    /// Previous folder name.
    @objc
    public var previousFolderName: String { swift.previousFolderName }
    /// New folder name.
    @objc
    public var newFolderName: String { swift.newFolderName }

    @objc
    public init(previousFolderName: String, newFolderName: String) {
        self.swift = TeamLog.TeamFolderRenameDetails(previousFolderName: previousFolderName, newFolderName: newFolderName)
    }

    let swift: TeamLog.TeamFolderRenameDetails

    public init(swift: TeamLog.TeamFolderRenameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamFolderRenameType struct
@objc
public class DBXTeamLogTeamFolderRenameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamFolderRenameType(description_: description_)
    }

    let swift: TeamLog.TeamFolderRenameType

    public init(swift: TeamLog.TeamFolderRenameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Details about team invites
@objc
public class DBXTeamLogTeamInviteDetails: NSObject {
    /// How the user was invited to the team.
    @objc
    public var inviteMethod: DBXTeamLogInviteMethod { DBXTeamLogInviteMethod(swift: swift.inviteMethod) }
    /// True if the invitation incurred an additional license purchase.
    @objc
    public var additionalLicensePurchase: NSNumber? { swift.additionalLicensePurchase as NSNumber? }

    @objc
    public init(inviteMethod: DBXTeamLogInviteMethod, additionalLicensePurchase: NSNumber?) {
        self.swift = TeamLog.TeamInviteDetails(inviteMethod: inviteMethod.swift, additionalLicensePurchase: additionalLicensePurchase?.boolValue)
    }

    let swift: TeamLog.TeamInviteDetails

    public init(swift: TeamLog.TeamInviteDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team linked app
@objc
public class DBXTeamLogTeamLinkedAppLogInfo: DBXTeamLogAppLogInfo {
    let subSwift: TeamLog.TeamLinkedAppLogInfo

    public init(swift: TeamLog.TeamLinkedAppLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Team's logged information.
@objc
public class DBXTeamLogTeamLogInfo: NSObject {
    /// Team display name.
    @objc
    public var displayName: String { swift.displayName }

    @objc
    public init(displayName: String) {
        self.swift = TeamLog.TeamLogInfo(displayName: displayName)
    }

    let swift: TeamLog.TeamLogInfo

    public init(swift: TeamLog.TeamLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team member's logged information.
@objc
public class DBXTeamLogTeamMemberLogInfo: DBXTeamLogUserLogInfo {
    /// Team member ID.
    @objc
    public var teamMemberId: String? { subSwift.teamMemberId }
    /// Team member external ID.
    @objc
    public var memberExternalId: String? { subSwift.memberExternalId }
    /// Details about this user&#x2019s team for enterprise event.
    @objc
    public var team: DBXTeamLogTeamLogInfo? { guard let swift = subSwift.team else { return nil }
        return DBXTeamLogTeamLogInfo(swift: swift)
    }

    @objc
    public init(accountId: String?, displayName: String?, email: String?, teamMemberId: String?, memberExternalId: String?, team: DBXTeamLogTeamLogInfo?) {
        let swift = TeamLog.TeamMemberLogInfo(
            accountId: accountId,
            displayName: displayName,
            email: email,
            teamMemberId: teamMemberId,
            memberExternalId: memberExternalId,
            team: team?.swift
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.TeamMemberLogInfo

    public init(swift: TeamLog.TeamMemberLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Objective-C compatible TeamMembershipType union
@objc
public class DBXTeamLogTeamMembershipType: NSObject {
    let swift: TeamLog.TeamMembershipType

    public init(swift: TeamLog.TeamMembershipType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamMembershipType) -> DBXTeamLogTeamMembershipType {
        switch swift {
        case .free:
            return DBXTeamLogTeamMembershipTypeFree()
        case .full:
            return DBXTeamLogTeamMembershipTypeFull()
        case .guest:
            return DBXTeamLogTeamMembershipTypeGuest()
        case .other:
            return DBXTeamLogTeamMembershipTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFree: DBXTeamLogTeamMembershipTypeFree? {
        self as? DBXTeamLogTeamMembershipTypeFree
    }

    @objc
    public var asFull: DBXTeamLogTeamMembershipTypeFull? {
        self as? DBXTeamLogTeamMembershipTypeFull
    }

    @objc
    public var asGuest: DBXTeamLogTeamMembershipTypeGuest? {
        self as? DBXTeamLogTeamMembershipTypeGuest
    }

    @objc
    public var asOther: DBXTeamLogTeamMembershipTypeOther? {
        self as? DBXTeamLogTeamMembershipTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMembershipTypeFree: DBXTeamLogTeamMembershipType {
    @objc
    public init() {
        let swift = TeamLog.TeamMembershipType.free
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMembershipTypeFull: DBXTeamLogTeamMembershipType {
    @objc
    public init() {
        let swift = TeamLog.TeamMembershipType.full
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMembershipTypeGuest: DBXTeamLogTeamMembershipType {
    @objc
    public init() {
        let swift = TeamLog.TeamMembershipType.guest
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMembershipTypeOther: DBXTeamLogTeamMembershipType {
    @objc
    public init() {
        let swift = TeamLog.TeamMembershipType.other
        super.init(swift: swift)
    }
}

/// Merged another team into this team.
@objc
public class DBXTeamLogTeamMergeFromDetails: NSObject {
    /// The name of the team that was merged into this team.
    @objc
    public var teamName: String { swift.teamName }

    @objc
    public init(teamName: String) {
        self.swift = TeamLog.TeamMergeFromDetails(teamName: teamName)
    }

    let swift: TeamLog.TeamMergeFromDetails

    public init(swift: TeamLog.TeamMergeFromDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeFromType struct
@objc
public class DBXTeamLogTeamMergeFromType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeFromType(description_: description_)
    }

    let swift: TeamLog.TeamMergeFromType

    public init(swift: TeamLog.TeamMergeFromType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Accepted a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedDetails: NSObject {
    /// Team merge request acceptance details.
    @objc
    public var requestAcceptedDetails: DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
        DBXTeamLogTeamMergeRequestAcceptedExtraDetails(swift: swift.requestAcceptedDetails)
    }

    @objc
    public init(requestAcceptedDetails: DBXTeamLogTeamMergeRequestAcceptedExtraDetails) {
        self.swift = TeamLog.TeamMergeRequestAcceptedDetails(requestAcceptedDetails: requestAcceptedDetails.swift)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedDetails

    public init(swift: TeamLog.TeamMergeRequestAcceptedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request acceptance details
@objc
public class DBXTeamLogTeamMergeRequestAcceptedExtraDetails: NSObject {
    let swift: TeamLog.TeamMergeRequestAcceptedExtraDetails

    public init(swift: TeamLog.TeamMergeRequestAcceptedExtraDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamMergeRequestAcceptedExtraDetails) -> DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
        switch swift {
        case .primaryTeam(let swiftArg):
            let arg = DBXTeamLogPrimaryTeamRequestAcceptedDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestAcceptedExtraDetailsPrimaryTeam(arg)
        case .secondaryTeam(let swiftArg):
            let arg = DBXTeamLogSecondaryTeamRequestAcceptedDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestAcceptedExtraDetailsSecondaryTeam(arg)
        case .other:
            return DBXTeamLogTeamMergeRequestAcceptedExtraDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPrimaryTeam: DBXTeamLogTeamMergeRequestAcceptedExtraDetailsPrimaryTeam? {
        self as? DBXTeamLogTeamMergeRequestAcceptedExtraDetailsPrimaryTeam
    }

    @objc
    public var asSecondaryTeam: DBXTeamLogTeamMergeRequestAcceptedExtraDetailsSecondaryTeam? {
        self as? DBXTeamLogTeamMergeRequestAcceptedExtraDetailsSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogTeamMergeRequestAcceptedExtraDetailsOther? {
        self as? DBXTeamLogTeamMergeRequestAcceptedExtraDetailsOther
    }
}

/// Team merge request accepted details shown to the primary team.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedExtraDetailsPrimaryTeam: DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
    @objc
    public var primaryTeam: DBXTeamLogPrimaryTeamRequestAcceptedDetails

    @objc
    public init(_ arg: DBXTeamLogPrimaryTeamRequestAcceptedDetails) {
        self.primaryTeam = arg
        let swift = TeamLog.TeamMergeRequestAcceptedExtraDetails.primaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// Team merge request accepted details shown to the secondary team.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedExtraDetailsSecondaryTeam: DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
    @objc
    public var secondaryTeam: DBXTeamLogSecondaryTeamRequestAcceptedDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryTeamRequestAcceptedDetails) {
        self.secondaryTeam = arg
        let swift = TeamLog.TeamMergeRequestAcceptedExtraDetails.secondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedExtraDetailsOther: DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
    @objc
    public init() {
        let swift = TeamLog.TeamMergeRequestAcceptedExtraDetails.other
        super.init(swift: swift)
    }
}

/// Accepted a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestAcceptedShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Accepted a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails: NSObject {
    /// The primary team name.
    @objc
    public var primaryTeam: String { swift.primaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(primaryTeam: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetails(primaryTeam: primaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestAcceptedShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestAcceptedType struct
@objc
public class DBXTeamLogTeamMergeRequestAcceptedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestAcceptedType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestAcceptedType

    public init(swift: TeamLog.TeamMergeRequestAcceptedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Automatically canceled team merge request.
@objc
public class DBXTeamLogTeamMergeRequestAutoCanceledDetails: NSObject {
    /// The cancellation reason.
    @objc
    public var details: String? { swift.details }

    @objc
    public init(details: String?) {
        self.swift = TeamLog.TeamMergeRequestAutoCanceledDetails(details: details)
    }

    let swift: TeamLog.TeamMergeRequestAutoCanceledDetails

    public init(swift: TeamLog.TeamMergeRequestAutoCanceledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestAutoCanceledType struct
@objc
public class DBXTeamLogTeamMergeRequestAutoCanceledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestAutoCanceledType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestAutoCanceledType

    public init(swift: TeamLog.TeamMergeRequestAutoCanceledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Canceled a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestCanceledDetails: NSObject {
    /// Team merge request cancellation details.
    @objc
    public var requestCanceledDetails: DBXTeamLogTeamMergeRequestCanceledExtraDetails {
        DBXTeamLogTeamMergeRequestCanceledExtraDetails(swift: swift.requestCanceledDetails)
    }

    @objc
    public init(requestCanceledDetails: DBXTeamLogTeamMergeRequestCanceledExtraDetails) {
        self.swift = TeamLog.TeamMergeRequestCanceledDetails(requestCanceledDetails: requestCanceledDetails.swift)
    }

    let swift: TeamLog.TeamMergeRequestCanceledDetails

    public init(swift: TeamLog.TeamMergeRequestCanceledDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request cancellation details
@objc
public class DBXTeamLogTeamMergeRequestCanceledExtraDetails: NSObject {
    let swift: TeamLog.TeamMergeRequestCanceledExtraDetails

    public init(swift: TeamLog.TeamMergeRequestCanceledExtraDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamMergeRequestCanceledExtraDetails) -> DBXTeamLogTeamMergeRequestCanceledExtraDetails {
        switch swift {
        case .primaryTeam(let swiftArg):
            let arg = DBXTeamLogPrimaryTeamRequestCanceledDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestCanceledExtraDetailsPrimaryTeam(arg)
        case .secondaryTeam(let swiftArg):
            let arg = DBXTeamLogSecondaryTeamRequestCanceledDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestCanceledExtraDetailsSecondaryTeam(arg)
        case .other:
            return DBXTeamLogTeamMergeRequestCanceledExtraDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPrimaryTeam: DBXTeamLogTeamMergeRequestCanceledExtraDetailsPrimaryTeam? {
        self as? DBXTeamLogTeamMergeRequestCanceledExtraDetailsPrimaryTeam
    }

    @objc
    public var asSecondaryTeam: DBXTeamLogTeamMergeRequestCanceledExtraDetailsSecondaryTeam? {
        self as? DBXTeamLogTeamMergeRequestCanceledExtraDetailsSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogTeamMergeRequestCanceledExtraDetailsOther? {
        self as? DBXTeamLogTeamMergeRequestCanceledExtraDetailsOther
    }
}

/// Team merge request cancellation details shown to the primary team.
@objc
public class DBXTeamLogTeamMergeRequestCanceledExtraDetailsPrimaryTeam: DBXTeamLogTeamMergeRequestCanceledExtraDetails {
    @objc
    public var primaryTeam: DBXTeamLogPrimaryTeamRequestCanceledDetails

    @objc
    public init(_ arg: DBXTeamLogPrimaryTeamRequestCanceledDetails) {
        self.primaryTeam = arg
        let swift = TeamLog.TeamMergeRequestCanceledExtraDetails.primaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// Team merge request cancellation details shown to the secondary team.
@objc
public class DBXTeamLogTeamMergeRequestCanceledExtraDetailsSecondaryTeam: DBXTeamLogTeamMergeRequestCanceledExtraDetails {
    @objc
    public var secondaryTeam: DBXTeamLogSecondaryTeamRequestCanceledDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryTeamRequestCanceledDetails) {
        self.secondaryTeam = arg
        let swift = TeamLog.TeamMergeRequestCanceledExtraDetails.secondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMergeRequestCanceledExtraDetailsOther: DBXTeamLogTeamMergeRequestCanceledExtraDetails {
    @objc
    public init() {
        let swift = TeamLog.TeamMergeRequestCanceledExtraDetails.other
        super.init(swift: swift)
    }
}

/// Canceled a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestCanceledShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Canceled a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails: NSObject {
    /// The email of the primary team admin that the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(sentTo: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetails(sentTo: sentTo, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestCanceledShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestCanceledType struct
@objc
public class DBXTeamLogTeamMergeRequestCanceledType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestCanceledType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestCanceledType

    public init(swift: TeamLog.TeamMergeRequestCanceledType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request expired.
@objc
public class DBXTeamLogTeamMergeRequestExpiredDetails: NSObject {
    /// Team merge request expiration details.
    @objc
    public var requestExpiredDetails: DBXTeamLogTeamMergeRequestExpiredExtraDetails {
        DBXTeamLogTeamMergeRequestExpiredExtraDetails(swift: swift.requestExpiredDetails)
    }

    @objc
    public init(requestExpiredDetails: DBXTeamLogTeamMergeRequestExpiredExtraDetails) {
        self.swift = TeamLog.TeamMergeRequestExpiredDetails(requestExpiredDetails: requestExpiredDetails.swift)
    }

    let swift: TeamLog.TeamMergeRequestExpiredDetails

    public init(swift: TeamLog.TeamMergeRequestExpiredDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request expiration details
@objc
public class DBXTeamLogTeamMergeRequestExpiredExtraDetails: NSObject {
    let swift: TeamLog.TeamMergeRequestExpiredExtraDetails

    public init(swift: TeamLog.TeamMergeRequestExpiredExtraDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamMergeRequestExpiredExtraDetails) -> DBXTeamLogTeamMergeRequestExpiredExtraDetails {
        switch swift {
        case .primaryTeam(let swiftArg):
            let arg = DBXTeamLogPrimaryTeamRequestExpiredDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestExpiredExtraDetailsPrimaryTeam(arg)
        case .secondaryTeam(let swiftArg):
            let arg = DBXTeamLogSecondaryTeamRequestExpiredDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestExpiredExtraDetailsSecondaryTeam(arg)
        case .other:
            return DBXTeamLogTeamMergeRequestExpiredExtraDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPrimaryTeam: DBXTeamLogTeamMergeRequestExpiredExtraDetailsPrimaryTeam? {
        self as? DBXTeamLogTeamMergeRequestExpiredExtraDetailsPrimaryTeam
    }

    @objc
    public var asSecondaryTeam: DBXTeamLogTeamMergeRequestExpiredExtraDetailsSecondaryTeam? {
        self as? DBXTeamLogTeamMergeRequestExpiredExtraDetailsSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogTeamMergeRequestExpiredExtraDetailsOther? {
        self as? DBXTeamLogTeamMergeRequestExpiredExtraDetailsOther
    }
}

/// Team merge request canceled details shown to the primary team.
@objc
public class DBXTeamLogTeamMergeRequestExpiredExtraDetailsPrimaryTeam: DBXTeamLogTeamMergeRequestExpiredExtraDetails {
    @objc
    public var primaryTeam: DBXTeamLogPrimaryTeamRequestExpiredDetails

    @objc
    public init(_ arg: DBXTeamLogPrimaryTeamRequestExpiredDetails) {
        self.primaryTeam = arg
        let swift = TeamLog.TeamMergeRequestExpiredExtraDetails.primaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// Team merge request canceled details shown to the secondary team.
@objc
public class DBXTeamLogTeamMergeRequestExpiredExtraDetailsSecondaryTeam: DBXTeamLogTeamMergeRequestExpiredExtraDetails {
    @objc
    public var secondaryTeam: DBXTeamLogSecondaryTeamRequestExpiredDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryTeamRequestExpiredDetails) {
        self.secondaryTeam = arg
        let swift = TeamLog.TeamMergeRequestExpiredExtraDetails.secondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMergeRequestExpiredExtraDetailsOther: DBXTeamLogTeamMergeRequestExpiredExtraDetails {
    @objc
    public init() {
        let swift = TeamLog.TeamMergeRequestExpiredExtraDetails.other
        super.init(swift: swift)
    }
}

/// Team merge request expired.
@objc
public class DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestExpiredShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request expired.
@objc
public class DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails: NSObject {
    /// The email of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(sentTo: String) {
        self.swift = TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetails(sentTo: sentTo)
    }

    let swift: TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestExpiredShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestExpiredType struct
@objc
public class DBXTeamLogTeamMergeRequestExpiredType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestExpiredType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestExpiredType

    public init(swift: TeamLog.TeamMergeRequestExpiredType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Rejected a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(secondaryTeam: String, sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestRejectedShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Rejected a team merge request.
@objc
public class DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails: NSObject {
    /// The name of the secondary team admin who sent the request originally.
    @objc
    public var sentBy: String { swift.sentBy }

    @objc
    public init(sentBy: String) {
        self.swift = TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetails(sentBy: sentBy)
    }

    let swift: TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestRejectedShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Sent a team merge request reminder.
@objc
public class DBXTeamLogTeamMergeRequestReminderDetails: NSObject {
    /// Team merge request reminder details.
    @objc
    public var requestReminderDetails: DBXTeamLogTeamMergeRequestReminderExtraDetails {
        DBXTeamLogTeamMergeRequestReminderExtraDetails(swift: swift.requestReminderDetails)
    }

    @objc
    public init(requestReminderDetails: DBXTeamLogTeamMergeRequestReminderExtraDetails) {
        self.swift = TeamLog.TeamMergeRequestReminderDetails(requestReminderDetails: requestReminderDetails.swift)
    }

    let swift: TeamLog.TeamMergeRequestReminderDetails

    public init(swift: TeamLog.TeamMergeRequestReminderDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team merge request reminder details
@objc
public class DBXTeamLogTeamMergeRequestReminderExtraDetails: NSObject {
    let swift: TeamLog.TeamMergeRequestReminderExtraDetails

    public init(swift: TeamLog.TeamMergeRequestReminderExtraDetails) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamMergeRequestReminderExtraDetails) -> DBXTeamLogTeamMergeRequestReminderExtraDetails {
        switch swift {
        case .primaryTeam(let swiftArg):
            let arg = DBXTeamLogPrimaryTeamRequestReminderDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestReminderExtraDetailsPrimaryTeam(arg)
        case .secondaryTeam(let swiftArg):
            let arg = DBXTeamLogSecondaryTeamRequestReminderDetails(swift: swiftArg)
            return DBXTeamLogTeamMergeRequestReminderExtraDetailsSecondaryTeam(arg)
        case .other:
            return DBXTeamLogTeamMergeRequestReminderExtraDetailsOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asPrimaryTeam: DBXTeamLogTeamMergeRequestReminderExtraDetailsPrimaryTeam? {
        self as? DBXTeamLogTeamMergeRequestReminderExtraDetailsPrimaryTeam
    }

    @objc
    public var asSecondaryTeam: DBXTeamLogTeamMergeRequestReminderExtraDetailsSecondaryTeam? {
        self as? DBXTeamLogTeamMergeRequestReminderExtraDetailsSecondaryTeam
    }

    @objc
    public var asOther: DBXTeamLogTeamMergeRequestReminderExtraDetailsOther? {
        self as? DBXTeamLogTeamMergeRequestReminderExtraDetailsOther
    }
}

/// Team merge request reminder details shown to the primary team.
@objc
public class DBXTeamLogTeamMergeRequestReminderExtraDetailsPrimaryTeam: DBXTeamLogTeamMergeRequestReminderExtraDetails {
    @objc
    public var primaryTeam: DBXTeamLogPrimaryTeamRequestReminderDetails

    @objc
    public init(_ arg: DBXTeamLogPrimaryTeamRequestReminderDetails) {
        self.primaryTeam = arg
        let swift = TeamLog.TeamMergeRequestReminderExtraDetails.primaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// Team merge request reminder details shown to the secondary team.
@objc
public class DBXTeamLogTeamMergeRequestReminderExtraDetailsSecondaryTeam: DBXTeamLogTeamMergeRequestReminderExtraDetails {
    @objc
    public var secondaryTeam: DBXTeamLogSecondaryTeamRequestReminderDetails

    @objc
    public init(_ arg: DBXTeamLogSecondaryTeamRequestReminderDetails) {
        self.secondaryTeam = arg
        let swift = TeamLog.TeamMergeRequestReminderExtraDetails.secondaryTeam(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamMergeRequestReminderExtraDetailsOther: DBXTeamLogTeamMergeRequestReminderExtraDetails {
    @objc
    public init() {
        let swift = TeamLog.TeamMergeRequestReminderExtraDetails.other
        super.init(swift: swift)
    }
}

/// Sent a team merge request reminder.
@objc
public class DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(secondaryTeam: String, sentTo: String) {
        self.swift = TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
    }

    let swift: TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestReminderShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestReminderShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestReminderShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestReminderShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Sent a team merge request reminder.
@objc
public class DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails: NSObject {
    /// The email of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(sentTo: String) {
        self.swift = TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetails(sentTo: sentTo)
    }

    let swift: TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestReminderShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestReminderShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestReminderShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestReminderShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestReminderType struct
@objc
public class DBXTeamLogTeamMergeRequestReminderType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestReminderType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestReminderType

    public init(swift: TeamLog.TeamMergeRequestReminderType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Canceled the team merge.
@objc
public class DBXTeamLogTeamMergeRequestRevokedDetails: NSObject {
    /// The name of the other team.
    @objc
    public var team: String { swift.team }

    @objc
    public init(team: String) {
        self.swift = TeamLog.TeamMergeRequestRevokedDetails(team: team)
    }

    let swift: TeamLog.TeamMergeRequestRevokedDetails

    public init(swift: TeamLog.TeamMergeRequestRevokedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestRevokedType struct
@objc
public class DBXTeamLogTeamMergeRequestRevokedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestRevokedType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestRevokedType

    public init(swift: TeamLog.TeamMergeRequestRevokedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested to merge their Dropbox team into yours.
@objc
public class DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails: NSObject {
    /// The secondary team name.
    @objc
    public var secondaryTeam: String { swift.secondaryTeam }
    /// The name of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(secondaryTeam: String, sentTo: String) {
        self.swift = TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
    }

    let swift: TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestSentShownToPrimaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestSentShownToPrimaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestSentShownToPrimaryTeamType

    public init(swift: TeamLog.TeamMergeRequestSentShownToPrimaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Requested to merge your team into another Dropbox team.
@objc
public class DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails: NSObject {
    /// The email of the primary team admin the request was sent to.
    @objc
    public var sentTo: String { swift.sentTo }

    @objc
    public init(sentTo: String) {
        self.swift = TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetails(sentTo: sentTo)
    }

    let swift: TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetails

    public init(swift: TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeRequestSentShownToSecondaryTeamType struct
@objc
public class DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeRequestSentShownToSecondaryTeamType(description_: description_)
    }

    let swift: TeamLog.TeamMergeRequestSentShownToSecondaryTeamType

    public init(swift: TeamLog.TeamMergeRequestSentShownToSecondaryTeamType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Merged this team into another team.
@objc
public class DBXTeamLogTeamMergeToDetails: NSObject {
    /// The name of the team that this team was merged into.
    @objc
    public var teamName: String { swift.teamName }

    @objc
    public init(teamName: String) {
        self.swift = TeamLog.TeamMergeToDetails(teamName: teamName)
    }

    let swift: TeamLog.TeamMergeToDetails

    public init(swift: TeamLog.TeamMergeToDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamMergeToType struct
@objc
public class DBXTeamLogTeamMergeToType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamMergeToType(description_: description_)
    }

    let swift: TeamLog.TeamMergeToType

    public init(swift: TeamLog.TeamMergeToType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Team name details
@objc
public class DBXTeamLogTeamName: NSObject {
    /// Team's display name.
    @objc
    public var teamDisplayName: String { swift.teamDisplayName }
    /// Team's legal name.
    @objc
    public var teamLegalName: String { swift.teamLegalName }

    @objc
    public init(teamDisplayName: String, teamLegalName: String) {
        self.swift = TeamLog.TeamName(teamDisplayName: teamDisplayName, teamLegalName: teamLegalName)
    }

    let swift: TeamLog.TeamName

    public init(swift: TeamLog.TeamName) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added team background to display on shared link headers.
@objc
public class DBXTeamLogTeamProfileAddBackgroundDetails: NSObject {
    let swift: TeamLog.TeamProfileAddBackgroundDetails

    public init(swift: TeamLog.TeamProfileAddBackgroundDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileAddBackgroundType struct
@objc
public class DBXTeamLogTeamProfileAddBackgroundType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileAddBackgroundType(description_: description_)
    }

    let swift: TeamLog.TeamProfileAddBackgroundType

    public init(swift: TeamLog.TeamProfileAddBackgroundType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added team logo to display on shared link headers.
@objc
public class DBXTeamLogTeamProfileAddLogoDetails: NSObject {
    let swift: TeamLog.TeamProfileAddLogoDetails

    public init(swift: TeamLog.TeamProfileAddLogoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileAddLogoType struct
@objc
public class DBXTeamLogTeamProfileAddLogoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileAddLogoType(description_: description_)
    }

    let swift: TeamLog.TeamProfileAddLogoType

    public init(swift: TeamLog.TeamProfileAddLogoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team background displayed on shared link headers.
@objc
public class DBXTeamLogTeamProfileChangeBackgroundDetails: NSObject {
    let swift: TeamLog.TeamProfileChangeBackgroundDetails

    public init(swift: TeamLog.TeamProfileChangeBackgroundDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileChangeBackgroundType struct
@objc
public class DBXTeamLogTeamProfileChangeBackgroundType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileChangeBackgroundType(description_: description_)
    }

    let swift: TeamLog.TeamProfileChangeBackgroundType

    public init(swift: TeamLog.TeamProfileChangeBackgroundType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed default language for team.
@objc
public class DBXTeamLogTeamProfileChangeDefaultLanguageDetails: NSObject {
    /// New team's default language.
    @objc
    public var newValue: String { swift.newValue }
    /// Previous team's default language.
    @objc
    public var previousValue: String { swift.previousValue }

    @objc
    public init(newValue: String, previousValue: String) {
        self.swift = TeamLog.TeamProfileChangeDefaultLanguageDetails(newValue: newValue, previousValue: previousValue)
    }

    let swift: TeamLog.TeamProfileChangeDefaultLanguageDetails

    public init(swift: TeamLog.TeamProfileChangeDefaultLanguageDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileChangeDefaultLanguageType struct
@objc
public class DBXTeamLogTeamProfileChangeDefaultLanguageType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileChangeDefaultLanguageType(description_: description_)
    }

    let swift: TeamLog.TeamProfileChangeDefaultLanguageType

    public init(swift: TeamLog.TeamProfileChangeDefaultLanguageType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team logo displayed on shared link headers.
@objc
public class DBXTeamLogTeamProfileChangeLogoDetails: NSObject {
    let swift: TeamLog.TeamProfileChangeLogoDetails

    public init(swift: TeamLog.TeamProfileChangeLogoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileChangeLogoType struct
@objc
public class DBXTeamLogTeamProfileChangeLogoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileChangeLogoType(description_: description_)
    }

    let swift: TeamLog.TeamProfileChangeLogoType

    public init(swift: TeamLog.TeamProfileChangeLogoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team name.
@objc
public class DBXTeamLogTeamProfileChangeNameDetails: NSObject {
    /// Previous teams name. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogTeamName? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogTeamName(swift: swift)
    }

    /// New team name.
    @objc
    public var newValue: DBXTeamLogTeamName { DBXTeamLogTeamName(swift: swift.newValue) }

    @objc
    public init(newValue: DBXTeamLogTeamName, previousValue: DBXTeamLogTeamName?) {
        self.swift = TeamLog.TeamProfileChangeNameDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.TeamProfileChangeNameDetails

    public init(swift: TeamLog.TeamProfileChangeNameDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileChangeNameType struct
@objc
public class DBXTeamLogTeamProfileChangeNameType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileChangeNameType(description_: description_)
    }

    let swift: TeamLog.TeamProfileChangeNameType

    public init(swift: TeamLog.TeamProfileChangeNameType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed team background displayed on shared link headers.
@objc
public class DBXTeamLogTeamProfileRemoveBackgroundDetails: NSObject {
    let swift: TeamLog.TeamProfileRemoveBackgroundDetails

    public init(swift: TeamLog.TeamProfileRemoveBackgroundDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileRemoveBackgroundType struct
@objc
public class DBXTeamLogTeamProfileRemoveBackgroundType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileRemoveBackgroundType(description_: description_)
    }

    let swift: TeamLog.TeamProfileRemoveBackgroundType

    public init(swift: TeamLog.TeamProfileRemoveBackgroundType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed team logo displayed on shared link headers.
@objc
public class DBXTeamLogTeamProfileRemoveLogoDetails: NSObject {
    let swift: TeamLog.TeamProfileRemoveLogoDetails

    public init(swift: TeamLog.TeamProfileRemoveLogoDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamProfileRemoveLogoType struct
@objc
public class DBXTeamLogTeamProfileRemoveLogoType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamProfileRemoveLogoType(description_: description_)
    }

    let swift: TeamLog.TeamProfileRemoveLogoType

    public init(swift: TeamLog.TeamProfileRemoveLogoType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling whether team selective sync is enabled for team.
@objc
public class DBXTeamLogTeamSelectiveSyncPolicy: NSObject {
    let swift: TeamLog.TeamSelectiveSyncPolicy

    public init(swift: TeamLog.TeamSelectiveSyncPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TeamSelectiveSyncPolicy) -> DBXTeamLogTeamSelectiveSyncPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogTeamSelectiveSyncPolicyDisabled()
        case .enabled:
            return DBXTeamLogTeamSelectiveSyncPolicyEnabled()
        case .other:
            return DBXTeamLogTeamSelectiveSyncPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogTeamSelectiveSyncPolicyDisabled? {
        self as? DBXTeamLogTeamSelectiveSyncPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogTeamSelectiveSyncPolicyEnabled? {
        self as? DBXTeamLogTeamSelectiveSyncPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogTeamSelectiveSyncPolicyOther? {
        self as? DBXTeamLogTeamSelectiveSyncPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamSelectiveSyncPolicyDisabled: DBXTeamLogTeamSelectiveSyncPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamSelectiveSyncPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamSelectiveSyncPolicyEnabled: DBXTeamLogTeamSelectiveSyncPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamSelectiveSyncPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTeamSelectiveSyncPolicyOther: DBXTeamLogTeamSelectiveSyncPolicy {
    @objc
    public init() {
        let swift = TeamLog.TeamSelectiveSyncPolicy.other
        super.init(swift: swift)
    }
}

/// Enabled/disabled Team Selective Sync for team.
@objc
public class DBXTeamLogTeamSelectiveSyncPolicyChangedDetails: NSObject {
    /// New Team Selective Sync policy.
    @objc
    public var newValue: DBXTeamLogTeamSelectiveSyncPolicy { DBXTeamLogTeamSelectiveSyncPolicy(swift: swift.newValue) }
    /// Previous Team Selective Sync policy.
    @objc
    public var previousValue: DBXTeamLogTeamSelectiveSyncPolicy { DBXTeamLogTeamSelectiveSyncPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogTeamSelectiveSyncPolicy, previousValue: DBXTeamLogTeamSelectiveSyncPolicy) {
        self.swift = TeamLog.TeamSelectiveSyncPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.TeamSelectiveSyncPolicyChangedDetails

    public init(swift: TeamLog.TeamSelectiveSyncPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamSelectiveSyncPolicyChangedType struct
@objc
public class DBXTeamLogTeamSelectiveSyncPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamSelectiveSyncPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.TeamSelectiveSyncPolicyChangedType

    public init(swift: TeamLog.TeamSelectiveSyncPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed sync default.
@objc
public class DBXTeamLogTeamSelectiveSyncSettingsChangedDetails: NSObject {
    /// Previous value.
    @objc
    public var previousValue: DBXFilesSyncSetting { DBXFilesSyncSetting(swift: swift.previousValue) }
    /// New value.
    @objc
    public var newValue: DBXFilesSyncSetting { DBXFilesSyncSetting(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXFilesSyncSetting, newValue: DBXFilesSyncSetting) {
        self.swift = TeamLog.TeamSelectiveSyncSettingsChangedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.TeamSelectiveSyncSettingsChangedDetails

    public init(swift: TeamLog.TeamSelectiveSyncSettingsChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamSelectiveSyncSettingsChangedType struct
@objc
public class DBXTeamLogTeamSelectiveSyncSettingsChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamSelectiveSyncSettingsChangedType(description_: description_)
    }

    let swift: TeamLog.TeamSelectiveSyncSettingsChangedType

    public init(swift: TeamLog.TeamSelectiveSyncSettingsChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Edited the approved list for sharing externally.
@objc
public class DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails: NSObject {
    /// Domains or emails added to the approved list for sharing externally.
    @objc
    public var addedWhitelistSubjects: [String] { swift.addedWhitelistSubjects }
    /// Domains or emails removed from the approved list for sharing externally.
    @objc
    public var removedWhitelistSubjects: [String] { swift.removedWhitelistSubjects }

    @objc
    public init(addedWhitelistSubjects: [String], removedWhitelistSubjects: [String]) {
        self.swift = TeamLog.TeamSharingWhitelistSubjectsChangedDetails(
            addedWhitelistSubjects: addedWhitelistSubjects,
            removedWhitelistSubjects: removedWhitelistSubjects
        )
    }

    let swift: TeamLog.TeamSharingWhitelistSubjectsChangedDetails

    public init(swift: TeamLog.TeamSharingWhitelistSubjectsChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TeamSharingWhitelistSubjectsChangedType struct
@objc
public class DBXTeamLogTeamSharingWhitelistSubjectsChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TeamSharingWhitelistSubjectsChangedType(description_: description_)
    }

    let swift: TeamLog.TeamSharingWhitelistSubjectsChangedType

    public init(swift: TeamLog.TeamSharingWhitelistSubjectsChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added backup phone for two-step verification.
@objc
public class DBXTeamLogTfaAddBackupPhoneDetails: NSObject {
    let swift: TeamLog.TfaAddBackupPhoneDetails

    public init(swift: TeamLog.TfaAddBackupPhoneDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaAddBackupPhoneType struct
@objc
public class DBXTeamLogTfaAddBackupPhoneType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaAddBackupPhoneType(description_: description_)
    }

    let swift: TeamLog.TfaAddBackupPhoneType

    public init(swift: TeamLog.TfaAddBackupPhoneType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added members to two factor authentication exception list.
@objc
public class DBXTeamLogTfaAddExceptionDetails: NSObject {
    let swift: TeamLog.TfaAddExceptionDetails

    public init(swift: TeamLog.TfaAddExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaAddExceptionType struct
@objc
public class DBXTeamLogTfaAddExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaAddExceptionType(description_: description_)
    }

    let swift: TeamLog.TfaAddExceptionType

    public init(swift: TeamLog.TfaAddExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Added security key for two-step verification.
@objc
public class DBXTeamLogTfaAddSecurityKeyDetails: NSObject {
    let swift: TeamLog.TfaAddSecurityKeyDetails

    public init(swift: TeamLog.TfaAddSecurityKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaAddSecurityKeyType struct
@objc
public class DBXTeamLogTfaAddSecurityKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaAddSecurityKeyType(description_: description_)
    }

    let swift: TeamLog.TfaAddSecurityKeyType

    public init(swift: TeamLog.TfaAddSecurityKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed backup phone for two-step verification.
@objc
public class DBXTeamLogTfaChangeBackupPhoneDetails: NSObject {
    let swift: TeamLog.TfaChangeBackupPhoneDetails

    public init(swift: TeamLog.TfaChangeBackupPhoneDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaChangeBackupPhoneType struct
@objc
public class DBXTeamLogTfaChangeBackupPhoneType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaChangeBackupPhoneType(description_: description_)
    }

    let swift: TeamLog.TfaChangeBackupPhoneType

    public init(swift: TeamLog.TfaChangeBackupPhoneType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed two-step verification setting for team.
@objc
public class DBXTeamLogTfaChangePolicyDetails: NSObject {
    /// New change policy.
    @objc
    public var newValue: DBXTeamPoliciesTwoStepVerificationPolicy { DBXTeamPoliciesTwoStepVerificationPolicy(swift: swift.newValue) }
    /// Previous change policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamPoliciesTwoStepVerificationPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamPoliciesTwoStepVerificationPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamPoliciesTwoStepVerificationPolicy, previousValue: DBXTeamPoliciesTwoStepVerificationPolicy?) {
        self.swift = TeamLog.TfaChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.TfaChangePolicyDetails

    public init(swift: TeamLog.TfaChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaChangePolicyType struct
@objc
public class DBXTeamLogTfaChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaChangePolicyType(description_: description_)
    }

    let swift: TeamLog.TfaChangePolicyType

    public init(swift: TeamLog.TfaChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Enabled/disabled/changed two-step verification setting.
@objc
public class DBXTeamLogTfaChangeStatusDetails: NSObject {
    /// The new two factor authentication configuration.
    @objc
    public var newValue: DBXTeamLogTfaConfiguration { DBXTeamLogTfaConfiguration(swift: swift.newValue) }
    /// The previous two factor authentication configuration. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogTfaConfiguration? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogTfaConfiguration(swift: swift)
    }

    /// Used two factor authentication rescue code. This flag is relevant when the two factor authentication
    /// configuration is disabled.
    @objc
    public var usedRescueCode: NSNumber? { swift.usedRescueCode as NSNumber? }

    @objc
    public init(newValue: DBXTeamLogTfaConfiguration, previousValue: DBXTeamLogTfaConfiguration?, usedRescueCode: NSNumber?) {
        self.swift = TeamLog.TfaChangeStatusDetails(newValue: newValue.swift, previousValue: previousValue?.swift, usedRescueCode: usedRescueCode?.boolValue)
    }

    let swift: TeamLog.TfaChangeStatusDetails

    public init(swift: TeamLog.TfaChangeStatusDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaChangeStatusType struct
@objc
public class DBXTeamLogTfaChangeStatusType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaChangeStatusType(description_: description_)
    }

    let swift: TeamLog.TfaChangeStatusType

    public init(swift: TeamLog.TfaChangeStatusType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Two factor authentication configuration. Note: the enabled option is deprecated.
@objc
public class DBXTeamLogTfaConfiguration: NSObject {
    let swift: TeamLog.TfaConfiguration

    public init(swift: TeamLog.TfaConfiguration) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TfaConfiguration) -> DBXTeamLogTfaConfiguration {
        switch swift {
        case .authenticator:
            return DBXTeamLogTfaConfigurationAuthenticator()
        case .disabled:
            return DBXTeamLogTfaConfigurationDisabled()
        case .enabled:
            return DBXTeamLogTfaConfigurationEnabled()
        case .sms:
            return DBXTeamLogTfaConfigurationSms()
        case .other:
            return DBXTeamLogTfaConfigurationOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAuthenticator: DBXTeamLogTfaConfigurationAuthenticator? {
        self as? DBXTeamLogTfaConfigurationAuthenticator
    }

    @objc
    public var asDisabled: DBXTeamLogTfaConfigurationDisabled? {
        self as? DBXTeamLogTfaConfigurationDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogTfaConfigurationEnabled? {
        self as? DBXTeamLogTfaConfigurationEnabled
    }

    @objc
    public var asSms: DBXTeamLogTfaConfigurationSms? {
        self as? DBXTeamLogTfaConfigurationSms
    }

    @objc
    public var asOther: DBXTeamLogTfaConfigurationOther? {
        self as? DBXTeamLogTfaConfigurationOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTfaConfigurationAuthenticator: DBXTeamLogTfaConfiguration {
    @objc
    public init() {
        let swift = TeamLog.TfaConfiguration.authenticator
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTfaConfigurationDisabled: DBXTeamLogTfaConfiguration {
    @objc
    public init() {
        let swift = TeamLog.TfaConfiguration.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTfaConfigurationEnabled: DBXTeamLogTfaConfiguration {
    @objc
    public init() {
        let swift = TeamLog.TfaConfiguration.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTfaConfigurationSms: DBXTeamLogTfaConfiguration {
    @objc
    public init() {
        let swift = TeamLog.TfaConfiguration.sms
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTfaConfigurationOther: DBXTeamLogTfaConfiguration {
    @objc
    public init() {
        let swift = TeamLog.TfaConfiguration.other
        super.init(swift: swift)
    }
}

/// Removed backup phone for two-step verification.
@objc
public class DBXTeamLogTfaRemoveBackupPhoneDetails: NSObject {
    let swift: TeamLog.TfaRemoveBackupPhoneDetails

    public init(swift: TeamLog.TfaRemoveBackupPhoneDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaRemoveBackupPhoneType struct
@objc
public class DBXTeamLogTfaRemoveBackupPhoneType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaRemoveBackupPhoneType(description_: description_)
    }

    let swift: TeamLog.TfaRemoveBackupPhoneType

    public init(swift: TeamLog.TfaRemoveBackupPhoneType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed members from two factor authentication exception list.
@objc
public class DBXTeamLogTfaRemoveExceptionDetails: NSObject {
    let swift: TeamLog.TfaRemoveExceptionDetails

    public init(swift: TeamLog.TfaRemoveExceptionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaRemoveExceptionType struct
@objc
public class DBXTeamLogTfaRemoveExceptionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaRemoveExceptionType(description_: description_)
    }

    let swift: TeamLog.TfaRemoveExceptionType

    public init(swift: TeamLog.TfaRemoveExceptionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed security key for two-step verification.
@objc
public class DBXTeamLogTfaRemoveSecurityKeyDetails: NSObject {
    let swift: TeamLog.TfaRemoveSecurityKeyDetails

    public init(swift: TeamLog.TfaRemoveSecurityKeyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaRemoveSecurityKeyType struct
@objc
public class DBXTeamLogTfaRemoveSecurityKeyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaRemoveSecurityKeyType(description_: description_)
    }

    let swift: TeamLog.TfaRemoveSecurityKeyType

    public init(swift: TeamLog.TfaRemoveSecurityKeyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Reset two-step verification for team member.
@objc
public class DBXTeamLogTfaResetDetails: NSObject {
    let swift: TeamLog.TfaResetDetails

    public init(swift: TeamLog.TfaResetDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TfaResetType struct
@objc
public class DBXTeamLogTfaResetType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TfaResetType(description_: description_)
    }

    let swift: TeamLog.TfaResetType

    public init(swift: TeamLog.TfaResetType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TimeUnit union
@objc
public class DBXTeamLogTimeUnit: NSObject {
    let swift: TeamLog.TimeUnit

    public init(swift: TeamLog.TimeUnit) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TimeUnit) -> DBXTeamLogTimeUnit {
        switch swift {
        case .days:
            return DBXTeamLogTimeUnitDays()
        case .hours:
            return DBXTeamLogTimeUnitHours()
        case .milliseconds:
            return DBXTeamLogTimeUnitMilliseconds()
        case .minutes:
            return DBXTeamLogTimeUnitMinutes()
        case .months:
            return DBXTeamLogTimeUnitMonths()
        case .seconds:
            return DBXTeamLogTimeUnitSeconds()
        case .weeks:
            return DBXTeamLogTimeUnitWeeks()
        case .years:
            return DBXTeamLogTimeUnitYears()
        case .other:
            return DBXTeamLogTimeUnitOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDays: DBXTeamLogTimeUnitDays? {
        self as? DBXTeamLogTimeUnitDays
    }

    @objc
    public var asHours: DBXTeamLogTimeUnitHours? {
        self as? DBXTeamLogTimeUnitHours
    }

    @objc
    public var asMilliseconds: DBXTeamLogTimeUnitMilliseconds? {
        self as? DBXTeamLogTimeUnitMilliseconds
    }

    @objc
    public var asMinutes: DBXTeamLogTimeUnitMinutes? {
        self as? DBXTeamLogTimeUnitMinutes
    }

    @objc
    public var asMonths: DBXTeamLogTimeUnitMonths? {
        self as? DBXTeamLogTimeUnitMonths
    }

    @objc
    public var asSeconds: DBXTeamLogTimeUnitSeconds? {
        self as? DBXTeamLogTimeUnitSeconds
    }

    @objc
    public var asWeeks: DBXTeamLogTimeUnitWeeks? {
        self as? DBXTeamLogTimeUnitWeeks
    }

    @objc
    public var asYears: DBXTeamLogTimeUnitYears? {
        self as? DBXTeamLogTimeUnitYears
    }

    @objc
    public var asOther: DBXTeamLogTimeUnitOther? {
        self as? DBXTeamLogTimeUnitOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitDays: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.days
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitHours: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.hours
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitMilliseconds: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.milliseconds
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitMinutes: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.minutes
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitMonths: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.months
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitSeconds: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.seconds
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitWeeks: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.weeks
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitYears: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.years
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTimeUnitOther: DBXTeamLogTimeUnit {
    @objc
    public init() {
        let swift = TeamLog.TimeUnit.other
        super.init(swift: swift)
    }
}

/// User that is not a member of the team but considered trusted.
@objc
public class DBXTeamLogTrustedNonTeamMemberLogInfo: DBXTeamLogUserLogInfo {
    /// Indicates the type of the member of a trusted team.
    @objc
    public var trustedNonTeamMemberType: DBXTeamLogTrustedNonTeamMemberType { DBXTeamLogTrustedNonTeamMemberType(swift: subSwift.trustedNonTeamMemberType) }
    /// Details about this user's trusted team.
    @objc
    public var team: DBXTeamLogTeamLogInfo? { guard let swift = subSwift.team else { return nil }
        return DBXTeamLogTeamLogInfo(swift: swift)
    }

    @objc
    public init(
        trustedNonTeamMemberType: DBXTeamLogTrustedNonTeamMemberType,
        accountId: String?,
        displayName: String?,
        email: String?,
        team: DBXTeamLogTeamLogInfo?
    ) {
        let swift = TeamLog.TrustedNonTeamMemberLogInfo(
            trustedNonTeamMemberType: trustedNonTeamMemberType.swift,
            accountId: accountId,
            displayName: displayName,
            email: email,
            team: team?.swift
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.TrustedNonTeamMemberLogInfo

    public init(swift: TeamLog.TrustedNonTeamMemberLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Objective-C compatible TrustedNonTeamMemberType union
@objc
public class DBXTeamLogTrustedNonTeamMemberType: NSObject {
    let swift: TeamLog.TrustedNonTeamMemberType

    public init(swift: TeamLog.TrustedNonTeamMemberType) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TrustedNonTeamMemberType) -> DBXTeamLogTrustedNonTeamMemberType {
        switch swift {
        case .enterpriseAdmin:
            return DBXTeamLogTrustedNonTeamMemberTypeEnterpriseAdmin()
        case .multiInstanceAdmin:
            return DBXTeamLogTrustedNonTeamMemberTypeMultiInstanceAdmin()
        case .other:
            return DBXTeamLogTrustedNonTeamMemberTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asEnterpriseAdmin: DBXTeamLogTrustedNonTeamMemberTypeEnterpriseAdmin? {
        self as? DBXTeamLogTrustedNonTeamMemberTypeEnterpriseAdmin
    }

    @objc
    public var asMultiInstanceAdmin: DBXTeamLogTrustedNonTeamMemberTypeMultiInstanceAdmin? {
        self as? DBXTeamLogTrustedNonTeamMemberTypeMultiInstanceAdmin
    }

    @objc
    public var asOther: DBXTeamLogTrustedNonTeamMemberTypeOther? {
        self as? DBXTeamLogTrustedNonTeamMemberTypeOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedNonTeamMemberTypeEnterpriseAdmin: DBXTeamLogTrustedNonTeamMemberType {
    @objc
    public init() {
        let swift = TeamLog.TrustedNonTeamMemberType.enterpriseAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedNonTeamMemberTypeMultiInstanceAdmin: DBXTeamLogTrustedNonTeamMemberType {
    @objc
    public init() {
        let swift = TeamLog.TrustedNonTeamMemberType.multiInstanceAdmin
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedNonTeamMemberTypeOther: DBXTeamLogTrustedNonTeamMemberType {
    @objc
    public init() {
        let swift = TeamLog.TrustedNonTeamMemberType.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible TrustedTeamsRequestAction union
@objc
public class DBXTeamLogTrustedTeamsRequestAction: NSObject {
    let swift: TeamLog.TrustedTeamsRequestAction

    public init(swift: TeamLog.TrustedTeamsRequestAction) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TrustedTeamsRequestAction) -> DBXTeamLogTrustedTeamsRequestAction {
        switch swift {
        case .accepted:
            return DBXTeamLogTrustedTeamsRequestActionAccepted()
        case .declined:
            return DBXTeamLogTrustedTeamsRequestActionDeclined()
        case .expired:
            return DBXTeamLogTrustedTeamsRequestActionExpired()
        case .invited:
            return DBXTeamLogTrustedTeamsRequestActionInvited()
        case .revoked:
            return DBXTeamLogTrustedTeamsRequestActionRevoked()
        case .other:
            return DBXTeamLogTrustedTeamsRequestActionOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAccepted: DBXTeamLogTrustedTeamsRequestActionAccepted? {
        self as? DBXTeamLogTrustedTeamsRequestActionAccepted
    }

    @objc
    public var asDeclined: DBXTeamLogTrustedTeamsRequestActionDeclined? {
        self as? DBXTeamLogTrustedTeamsRequestActionDeclined
    }

    @objc
    public var asExpired: DBXTeamLogTrustedTeamsRequestActionExpired? {
        self as? DBXTeamLogTrustedTeamsRequestActionExpired
    }

    @objc
    public var asInvited: DBXTeamLogTrustedTeamsRequestActionInvited? {
        self as? DBXTeamLogTrustedTeamsRequestActionInvited
    }

    @objc
    public var asRevoked: DBXTeamLogTrustedTeamsRequestActionRevoked? {
        self as? DBXTeamLogTrustedTeamsRequestActionRevoked
    }

    @objc
    public var asOther: DBXTeamLogTrustedTeamsRequestActionOther? {
        self as? DBXTeamLogTrustedTeamsRequestActionOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionAccepted: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.accepted
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionDeclined: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.declined
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionExpired: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.expired
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionInvited: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.invited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionRevoked: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.revoked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestActionOther: DBXTeamLogTrustedTeamsRequestAction {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestAction.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible TrustedTeamsRequestState union
@objc
public class DBXTeamLogTrustedTeamsRequestState: NSObject {
    let swift: TeamLog.TrustedTeamsRequestState

    public init(swift: TeamLog.TrustedTeamsRequestState) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TrustedTeamsRequestState) -> DBXTeamLogTrustedTeamsRequestState {
        switch swift {
        case .invited:
            return DBXTeamLogTrustedTeamsRequestStateInvited()
        case .linked:
            return DBXTeamLogTrustedTeamsRequestStateLinked()
        case .unlinked:
            return DBXTeamLogTrustedTeamsRequestStateUnlinked()
        case .other:
            return DBXTeamLogTrustedTeamsRequestStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asInvited: DBXTeamLogTrustedTeamsRequestStateInvited? {
        self as? DBXTeamLogTrustedTeamsRequestStateInvited
    }

    @objc
    public var asLinked: DBXTeamLogTrustedTeamsRequestStateLinked? {
        self as? DBXTeamLogTrustedTeamsRequestStateLinked
    }

    @objc
    public var asUnlinked: DBXTeamLogTrustedTeamsRequestStateUnlinked? {
        self as? DBXTeamLogTrustedTeamsRequestStateUnlinked
    }

    @objc
    public var asOther: DBXTeamLogTrustedTeamsRequestStateOther? {
        self as? DBXTeamLogTrustedTeamsRequestStateOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestStateInvited: DBXTeamLogTrustedTeamsRequestState {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestState.invited
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestStateLinked: DBXTeamLogTrustedTeamsRequestState {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestState.linked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestStateUnlinked: DBXTeamLogTrustedTeamsRequestState {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestState.unlinked
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTrustedTeamsRequestStateOther: DBXTeamLogTrustedTeamsRequestState {
    @objc
    public init() {
        let swift = TeamLog.TrustedTeamsRequestState.other
        super.init(swift: swift)
    }
}

/// Enabled/disabled option for members to link personal Dropbox account and team account to same computer.
@objc
public class DBXTeamLogTwoAccountChangePolicyDetails: NSObject {
    /// New two account policy.
    @objc
    public var newValue: DBXTeamLogTwoAccountPolicy { DBXTeamLogTwoAccountPolicy(swift: swift.newValue) }
    /// Previous two account policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogTwoAccountPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogTwoAccountPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogTwoAccountPolicy, previousValue: DBXTeamLogTwoAccountPolicy?) {
        self.swift = TeamLog.TwoAccountChangePolicyDetails(newValue: newValue.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.TwoAccountChangePolicyDetails

    public init(swift: TeamLog.TwoAccountChangePolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TwoAccountChangePolicyType struct
@objc
public class DBXTeamLogTwoAccountChangePolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.TwoAccountChangePolicyType(description_: description_)
    }

    let swift: TeamLog.TwoAccountChangePolicyType

    public init(swift: TeamLog.TwoAccountChangePolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for pairing personal account to work account
@objc
public class DBXTeamLogTwoAccountPolicy: NSObject {
    let swift: TeamLog.TwoAccountPolicy

    public init(swift: TeamLog.TwoAccountPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.TwoAccountPolicy) -> DBXTeamLogTwoAccountPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogTwoAccountPolicyDisabled()
        case .enabled:
            return DBXTeamLogTwoAccountPolicyEnabled()
        case .other:
            return DBXTeamLogTwoAccountPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogTwoAccountPolicyDisabled? {
        self as? DBXTeamLogTwoAccountPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogTwoAccountPolicyEnabled? {
        self as? DBXTeamLogTwoAccountPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogTwoAccountPolicyOther? {
        self as? DBXTeamLogTwoAccountPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTwoAccountPolicyDisabled: DBXTeamLogTwoAccountPolicy {
    @objc
    public init() {
        let swift = TeamLog.TwoAccountPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTwoAccountPolicyEnabled: DBXTeamLogTwoAccountPolicy {
    @objc
    public init() {
        let swift = TeamLog.TwoAccountPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogTwoAccountPolicyOther: DBXTeamLogTwoAccountPolicy {
    @objc
    public init() {
        let swift = TeamLog.TwoAccountPolicy.other
        super.init(swift: swift)
    }
}

/// Reverted naming convention.
@objc
public class DBXTeamLogUndoNamingConventionDetails: NSObject {
    let swift: TeamLog.UndoNamingConventionDetails

    public init(swift: TeamLog.UndoNamingConventionDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UndoNamingConventionType struct
@objc
public class DBXTeamLogUndoNamingConventionType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.UndoNamingConventionType(description_: description_)
    }

    let swift: TeamLog.UndoNamingConventionType

    public init(swift: TeamLog.UndoNamingConventionType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed multi-file organize.
@objc
public class DBXTeamLogUndoOrganizeFolderWithTidyDetails: NSObject {
    let swift: TeamLog.UndoOrganizeFolderWithTidyDetails

    public init(swift: TeamLog.UndoOrganizeFolderWithTidyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UndoOrganizeFolderWithTidyType struct
@objc
public class DBXTeamLogUndoOrganizeFolderWithTidyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.UndoOrganizeFolderWithTidyType(description_: description_)
    }

    let swift: TeamLog.UndoOrganizeFolderWithTidyType

    public init(swift: TeamLog.UndoOrganizeFolderWithTidyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// User linked app
@objc
public class DBXTeamLogUserLinkedAppLogInfo: DBXTeamLogAppLogInfo {
    let subSwift: TeamLog.UserLinkedAppLogInfo

    public init(swift: TeamLog.UserLinkedAppLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// User's name logged information
@objc
public class DBXTeamLogUserNameLogInfo: NSObject {
    /// Given name.
    @objc
    public var givenName: String { swift.givenName }
    /// Surname.
    @objc
    public var surname: String { swift.surname }
    /// Locale. Might be missing due to historical data gap.
    @objc
    public var locale: String? { swift.locale }

    @objc
    public init(givenName: String, surname: String, locale: String?) {
        self.swift = TeamLog.UserNameLogInfo(givenName: givenName, surname: surname, locale: locale)
    }

    let swift: TeamLog.UserNameLogInfo

    public init(swift: TeamLog.UserNameLogInfo) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// User or team linked app. Used when linked type is missing due to historical data gap.
@objc
public class DBXTeamLogUserOrTeamLinkedAppLogInfo: DBXTeamLogAppLogInfo {
    let subSwift: TeamLog.UserOrTeamLinkedAppLogInfo

    public init(swift: TeamLog.UserOrTeamLinkedAppLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Tagged a file.
@objc
public class DBXTeamLogUserTagsAddedDetails: NSObject {
    /// values.
    @objc
    public var values: [String] { swift.values }

    @objc
    public init(values: [String]) {
        self.swift = TeamLog.UserTagsAddedDetails(values: values)
    }

    let swift: TeamLog.UserTagsAddedDetails

    public init(swift: TeamLog.UserTagsAddedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UserTagsAddedType struct
@objc
public class DBXTeamLogUserTagsAddedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.UserTagsAddedType(description_: description_)
    }

    let swift: TeamLog.UserTagsAddedType

    public init(swift: TeamLog.UserTagsAddedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Removed tags.
@objc
public class DBXTeamLogUserTagsRemovedDetails: NSObject {
    /// values.
    @objc
    public var values: [String] { swift.values }

    @objc
    public init(values: [String]) {
        self.swift = TeamLog.UserTagsRemovedDetails(values: values)
    }

    let swift: TeamLog.UserTagsRemovedDetails

    public init(swift: TeamLog.UserTagsRemovedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UserTagsRemovedType struct
@objc
public class DBXTeamLogUserTagsRemovedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.UserTagsRemovedType(description_: description_)
    }

    let swift: TeamLog.UserTagsRemovedType

    public init(swift: TeamLog.UserTagsRemovedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed team policy for viewer info.
@objc
public class DBXTeamLogViewerInfoPolicyChangedDetails: NSObject {
    /// Previous Viewer Info policy.
    @objc
    public var previousValue: DBXTeamLogPassPolicy { DBXTeamLogPassPolicy(swift: swift.previousValue) }
    /// New Viewer Info policy.
    @objc
    public var newValue: DBXTeamLogPassPolicy { DBXTeamLogPassPolicy(swift: swift.newValue) }

    @objc
    public init(previousValue: DBXTeamLogPassPolicy, newValue: DBXTeamLogPassPolicy) {
        self.swift = TeamLog.ViewerInfoPolicyChangedDetails(previousValue: previousValue.swift, newValue: newValue.swift)
    }

    let swift: TeamLog.ViewerInfoPolicyChangedDetails

    public init(swift: TeamLog.ViewerInfoPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ViewerInfoPolicyChangedType struct
@objc
public class DBXTeamLogViewerInfoPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.ViewerInfoPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.ViewerInfoPolicyChangedType

    public init(swift: TeamLog.ViewerInfoPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policy for controlling team access to watermarking feature
@objc
public class DBXTeamLogWatermarkingPolicy: NSObject {
    let swift: TeamLog.WatermarkingPolicy

    public init(swift: TeamLog.WatermarkingPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.WatermarkingPolicy) -> DBXTeamLogWatermarkingPolicy {
        switch swift {
        case .disabled:
            return DBXTeamLogWatermarkingPolicyDisabled()
        case .enabled:
            return DBXTeamLogWatermarkingPolicyEnabled()
        case .other:
            return DBXTeamLogWatermarkingPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamLogWatermarkingPolicyDisabled? {
        self as? DBXTeamLogWatermarkingPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamLogWatermarkingPolicyEnabled? {
        self as? DBXTeamLogWatermarkingPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamLogWatermarkingPolicyOther? {
        self as? DBXTeamLogWatermarkingPolicyOther
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogWatermarkingPolicyDisabled: DBXTeamLogWatermarkingPolicy {
    @objc
    public init() {
        let swift = TeamLog.WatermarkingPolicy.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogWatermarkingPolicyEnabled: DBXTeamLogWatermarkingPolicy {
    @objc
    public init() {
        let swift = TeamLog.WatermarkingPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogWatermarkingPolicyOther: DBXTeamLogWatermarkingPolicy {
    @objc
    public init() {
        let swift = TeamLog.WatermarkingPolicy.other
        super.init(swift: swift)
    }
}

/// Changed watermarking policy for team.
@objc
public class DBXTeamLogWatermarkingPolicyChangedDetails: NSObject {
    /// New watermarking policy.
    @objc
    public var newValue: DBXTeamLogWatermarkingPolicy { DBXTeamLogWatermarkingPolicy(swift: swift.newValue) }
    /// Previous watermarking policy.
    @objc
    public var previousValue: DBXTeamLogWatermarkingPolicy { DBXTeamLogWatermarkingPolicy(swift: swift.previousValue) }

    @objc
    public init(newValue: DBXTeamLogWatermarkingPolicy, previousValue: DBXTeamLogWatermarkingPolicy) {
        self.swift = TeamLog.WatermarkingPolicyChangedDetails(newValue: newValue.swift, previousValue: previousValue.swift)
    }

    let swift: TeamLog.WatermarkingPolicyChangedDetails

    public init(swift: TeamLog.WatermarkingPolicyChangedDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible WatermarkingPolicyChangedType struct
@objc
public class DBXTeamLogWatermarkingPolicyChangedType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.WatermarkingPolicyChangedType(description_: description_)
    }

    let swift: TeamLog.WatermarkingPolicyChangedType

    public init(swift: TeamLog.WatermarkingPolicyChangedType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Information on active web sessions
@objc
public class DBXTeamLogWebDeviceSessionLogInfo: DBXTeamLogDeviceSessionLogInfo {
    /// Web session unique id.
    @objc
    public var sessionInfo: DBXTeamLogWebSessionLogInfo? { guard let swift = subSwift.sessionInfo else { return nil }
        return DBXTeamLogWebSessionLogInfo(swift: swift)
    }

    /// Information on the hosting device.
    @objc
    public var userAgent: String { subSwift.userAgent }
    /// Information on the hosting operating system.
    @objc
    public var os: String { subSwift.os }
    /// Information on the browser used for this web session.
    @objc
    public var browser: String { subSwift.browser }

    @objc
    public init(userAgent: String, os: String, browser: String, ipAddress: String?, created: Date?, updated: Date?, sessionInfo: DBXTeamLogWebSessionLogInfo?) {
        let swift = TeamLog.WebDeviceSessionLogInfo(
            userAgent: userAgent,
            os: os,
            browser: browser,
            ipAddress: ipAddress,
            created: created,
            updated: updated,
            sessionInfo: sessionInfo?.subSwift
        )
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: TeamLog.WebDeviceSessionLogInfo

    public init(swift: TeamLog.WebDeviceSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Web session.
@objc
public class DBXTeamLogWebSessionLogInfo: DBXTeamLogSessionLogInfo {
    let subSwift: TeamLog.WebSessionLogInfo

    public init(swift: TeamLog.WebSessionLogInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Changed limit on active sessions per member.
@objc
public class DBXTeamLogWebSessionsChangeActiveSessionLimitDetails: NSObject {
    /// Previous max number of concurrent active sessions policy.
    @objc
    public var previousValue: String { swift.previousValue }
    /// New max number of concurrent active sessions policy.
    @objc
    public var newValue: String { swift.newValue }

    @objc
    public init(previousValue: String, newValue: String) {
        self.swift = TeamLog.WebSessionsChangeActiveSessionLimitDetails(previousValue: previousValue, newValue: newValue)
    }

    let swift: TeamLog.WebSessionsChangeActiveSessionLimitDetails

    public init(swift: TeamLog.WebSessionsChangeActiveSessionLimitDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible WebSessionsChangeActiveSessionLimitType struct
@objc
public class DBXTeamLogWebSessionsChangeActiveSessionLimitType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.WebSessionsChangeActiveSessionLimitType(description_: description_)
    }

    let swift: TeamLog.WebSessionsChangeActiveSessionLimitType

    public init(swift: TeamLog.WebSessionsChangeActiveSessionLimitType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed how long members can stay signed in to Dropbox.com.
@objc
public class DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails: NSObject {
    /// New session length policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamLogWebSessionsFixedLengthPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogWebSessionsFixedLengthPolicy(swift: swift)
    }

    /// Previous session length policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogWebSessionsFixedLengthPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogWebSessionsFixedLengthPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogWebSessionsFixedLengthPolicy?, previousValue: DBXTeamLogWebSessionsFixedLengthPolicy?) {
        self.swift = TeamLog.WebSessionsChangeFixedLengthPolicyDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.WebSessionsChangeFixedLengthPolicyDetails

    public init(swift: TeamLog.WebSessionsChangeFixedLengthPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible WebSessionsChangeFixedLengthPolicyType struct
@objc
public class DBXTeamLogWebSessionsChangeFixedLengthPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.WebSessionsChangeFixedLengthPolicyType(description_: description_)
    }

    let swift: TeamLog.WebSessionsChangeFixedLengthPolicyType

    public init(swift: TeamLog.WebSessionsChangeFixedLengthPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Changed how long team members can be idle while signed in to Dropbox.com.
@objc
public class DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails: NSObject {
    /// New idle length policy. Might be missing due to historical data gap.
    @objc
    public var newValue: DBXTeamLogWebSessionsIdleLengthPolicy? { guard let swift = swift.newValue else { return nil }
        return DBXTeamLogWebSessionsIdleLengthPolicy(swift: swift)
    }

    /// Previous idle length policy. Might be missing due to historical data gap.
    @objc
    public var previousValue: DBXTeamLogWebSessionsIdleLengthPolicy? { guard let swift = swift.previousValue else { return nil }
        return DBXTeamLogWebSessionsIdleLengthPolicy(swift: swift)
    }

    @objc
    public init(newValue: DBXTeamLogWebSessionsIdleLengthPolicy?, previousValue: DBXTeamLogWebSessionsIdleLengthPolicy?) {
        self.swift = TeamLog.WebSessionsChangeIdleLengthPolicyDetails(newValue: newValue?.swift, previousValue: previousValue?.swift)
    }

    let swift: TeamLog.WebSessionsChangeIdleLengthPolicyDetails

    public init(swift: TeamLog.WebSessionsChangeIdleLengthPolicyDetails) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible WebSessionsChangeIdleLengthPolicyType struct
@objc
public class DBXTeamLogWebSessionsChangeIdleLengthPolicyType: NSObject {
    /// (no description)
    @objc
    public var description_: String { swift.description_ }

    @objc
    public init(description_: String) {
        self.swift = TeamLog.WebSessionsChangeIdleLengthPolicyType(description_: description_)
    }

    let swift: TeamLog.WebSessionsChangeIdleLengthPolicyType

    public init(swift: TeamLog.WebSessionsChangeIdleLengthPolicyType) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Web sessions fixed length policy.
@objc
public class DBXTeamLogWebSessionsFixedLengthPolicy: NSObject {
    let swift: TeamLog.WebSessionsFixedLengthPolicy

    public init(swift: TeamLog.WebSessionsFixedLengthPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.WebSessionsFixedLengthPolicy) -> DBXTeamLogWebSessionsFixedLengthPolicy {
        switch swift {
        case .defined(let swiftArg):
            let arg = DBXTeamLogDurationLogInfo(swift: swiftArg)
            return DBXTeamLogWebSessionsFixedLengthPolicyDefined(arg)
        case .undefined:
            return DBXTeamLogWebSessionsFixedLengthPolicyUndefined()
        case .other:
            return DBXTeamLogWebSessionsFixedLengthPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefined: DBXTeamLogWebSessionsFixedLengthPolicyDefined? {
        self as? DBXTeamLogWebSessionsFixedLengthPolicyDefined
    }

    @objc
    public var asUndefined: DBXTeamLogWebSessionsFixedLengthPolicyUndefined? {
        self as? DBXTeamLogWebSessionsFixedLengthPolicyUndefined
    }

    @objc
    public var asOther: DBXTeamLogWebSessionsFixedLengthPolicyOther? {
        self as? DBXTeamLogWebSessionsFixedLengthPolicyOther
    }
}

/// Defined fixed session length.
@objc
public class DBXTeamLogWebSessionsFixedLengthPolicyDefined: DBXTeamLogWebSessionsFixedLengthPolicy {
    @objc
    public var defined: DBXTeamLogDurationLogInfo

    @objc
    public init(_ arg: DBXTeamLogDurationLogInfo) {
        self.defined = arg
        let swift = TeamLog.WebSessionsFixedLengthPolicy.defined(arg.swift)
        super.init(swift: swift)
    }
}

/// Undefined fixed session length.
@objc
public class DBXTeamLogWebSessionsFixedLengthPolicyUndefined: DBXTeamLogWebSessionsFixedLengthPolicy {
    @objc
    public init() {
        let swift = TeamLog.WebSessionsFixedLengthPolicy.undefined
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogWebSessionsFixedLengthPolicyOther: DBXTeamLogWebSessionsFixedLengthPolicy {
    @objc
    public init() {
        let swift = TeamLog.WebSessionsFixedLengthPolicy.other
        super.init(swift: swift)
    }
}

/// Web sessions idle length policy.
@objc
public class DBXTeamLogWebSessionsIdleLengthPolicy: NSObject {
    let swift: TeamLog.WebSessionsIdleLengthPolicy

    public init(swift: TeamLog.WebSessionsIdleLengthPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamLog.WebSessionsIdleLengthPolicy) -> DBXTeamLogWebSessionsIdleLengthPolicy {
        switch swift {
        case .defined(let swiftArg):
            let arg = DBXTeamLogDurationLogInfo(swift: swiftArg)
            return DBXTeamLogWebSessionsIdleLengthPolicyDefined(arg)
        case .undefined:
            return DBXTeamLogWebSessionsIdleLengthPolicyUndefined()
        case .other:
            return DBXTeamLogWebSessionsIdleLengthPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefined: DBXTeamLogWebSessionsIdleLengthPolicyDefined? {
        self as? DBXTeamLogWebSessionsIdleLengthPolicyDefined
    }

    @objc
    public var asUndefined: DBXTeamLogWebSessionsIdleLengthPolicyUndefined? {
        self as? DBXTeamLogWebSessionsIdleLengthPolicyUndefined
    }

    @objc
    public var asOther: DBXTeamLogWebSessionsIdleLengthPolicyOther? {
        self as? DBXTeamLogWebSessionsIdleLengthPolicyOther
    }
}

/// Defined idle session length.
@objc
public class DBXTeamLogWebSessionsIdleLengthPolicyDefined: DBXTeamLogWebSessionsIdleLengthPolicy {
    @objc
    public var defined: DBXTeamLogDurationLogInfo

    @objc
    public init(_ arg: DBXTeamLogDurationLogInfo) {
        self.defined = arg
        let swift = TeamLog.WebSessionsIdleLengthPolicy.defined(arg.swift)
        super.init(swift: swift)
    }
}

/// Undefined idle session length.
@objc
public class DBXTeamLogWebSessionsIdleLengthPolicyUndefined: DBXTeamLogWebSessionsIdleLengthPolicy {
    @objc
    public init() {
        let swift = TeamLog.WebSessionsIdleLengthPolicy.undefined
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamLogWebSessionsIdleLengthPolicyOther: DBXTeamLogWebSessionsIdleLengthPolicy {
    @objc
    public init() {
        let swift = TeamLog.WebSessionsIdleLengthPolicy.other
        super.init(swift: swift)
    }
}
