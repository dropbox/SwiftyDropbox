///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the file_requests namespace
/// For Swift see file_requests

/// There is an error accessing the file requests functionality.
@objc
public class DBXFileRequestsGeneralFileRequestsError: NSObject {
    let swift: FileRequests.GeneralFileRequestsError

    public init(swift: FileRequests.GeneralFileRequestsError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.GeneralFileRequestsError) -> DBXFileRequestsGeneralFileRequestsError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsGeneralFileRequestsErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsGeneralFileRequestsErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsGeneralFileRequestsErrorDisabledForTeam? {
        self as? DBXFileRequestsGeneralFileRequestsErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsGeneralFileRequestsErrorOther? {
        self as? DBXFileRequestsGeneralFileRequestsErrorOther
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsGeneralFileRequestsErrorDisabledForTeam: DBXFileRequestsGeneralFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.GeneralFileRequestsError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGeneralFileRequestsErrorOther: DBXFileRequestsGeneralFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.GeneralFileRequestsError.other
        super.init(swift: swift)
    }
}

/// There was an error counting the file requests.
@objc
public class DBXFileRequestsCountFileRequestsError: NSObject {
    let swift: FileRequests.CountFileRequestsError

    public init(swift: FileRequests.CountFileRequestsError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.CountFileRequestsError) -> DBXFileRequestsCountFileRequestsError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsCountFileRequestsErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsCountFileRequestsErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsCountFileRequestsErrorDisabledForTeam? {
        self as? DBXFileRequestsCountFileRequestsErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsCountFileRequestsErrorOther? {
        self as? DBXFileRequestsCountFileRequestsErrorOther
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsCountFileRequestsErrorDisabledForTeam: DBXFileRequestsCountFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.CountFileRequestsError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsCountFileRequestsErrorOther: DBXFileRequestsCountFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.CountFileRequestsError.other
        super.init(swift: swift)
    }
}

/// Result for count.
@objc
public class DBXFileRequestsCountFileRequestsResult: NSObject {
    /// The number file requests owner by this user.
    @objc
    public var fileRequestCount: NSNumber { swift.fileRequestCount as NSNumber }

    @objc
    public init(fileRequestCount: NSNumber) {
        self.swift = FileRequests.CountFileRequestsResult(fileRequestCount: fileRequestCount.uint64Value)
    }

    let swift: FileRequests.CountFileRequestsResult

    public init(swift: FileRequests.CountFileRequestsResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Arguments for create.
@objc
public class DBXFileRequestsCreateFileRequestArgs: NSObject {
    /// The title of the file request. Must not be empty.
    @objc
    public var title: String { swift.title }
    /// The path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder
    /// permission, this will be relative to the app folder.
    @objc
    public var destination: String { swift.destination }
    /// The deadline for the file request. Deadlines can only be set by Professional and Business accounts.
    @objc
    public var deadline: DBXFileRequestsFileRequestDeadline? { guard let swift = swift.deadline else { return nil }
        return DBXFileRequestsFileRequestDeadline(swift: swift)
    }

    /// Whether or not the file request should be open. If the file request is closed, it will not accept any file
    /// submissions, but it can be opened later.
    @objc
    public var open: NSNumber { swift.open as NSNumber }
    /// A description of the file request.
    @objc
    public var description_: String? { swift.description_ }

    @objc
    public init(title: String, destination: String, deadline: DBXFileRequestsFileRequestDeadline?, open: NSNumber, description_: String?) {
        self.swift = FileRequests.CreateFileRequestArgs(
            title: title,
            destination: destination,
            deadline: deadline?.swift,
            open: open.boolValue,
            description_: description_
        )
    }

    let swift: FileRequests.CreateFileRequestArgs

    public init(swift: FileRequests.CreateFileRequestArgs) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// There is an error with the file request.
@objc
public class DBXFileRequestsFileRequestError: NSObject {
    let swift: FileRequests.FileRequestError

    public init(swift: FileRequests.FileRequestError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.FileRequestError) -> DBXFileRequestsFileRequestError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsFileRequestErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsFileRequestErrorOther()
        case .notFound:
            return DBXFileRequestsFileRequestErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsFileRequestErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsFileRequestErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsFileRequestErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsFileRequestErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsFileRequestErrorValidationError()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsFileRequestErrorDisabledForTeam? {
        self as? DBXFileRequestsFileRequestErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsFileRequestErrorOther? {
        self as? DBXFileRequestsFileRequestErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsFileRequestErrorNotFound? {
        self as? DBXFileRequestsFileRequestErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsFileRequestErrorNotAFolder? {
        self as? DBXFileRequestsFileRequestErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsFileRequestErrorAppLacksAccess? {
        self as? DBXFileRequestsFileRequestErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsFileRequestErrorNoPermission? {
        self as? DBXFileRequestsFileRequestErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsFileRequestErrorEmailUnverified? {
        self as? DBXFileRequestsFileRequestErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsFileRequestErrorValidationError? {
        self as? DBXFileRequestsFileRequestErrorValidationError
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsFileRequestErrorDisabledForTeam: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsFileRequestErrorOther: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsFileRequestErrorNotFound: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsFileRequestErrorNotAFolder: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsFileRequestErrorAppLacksAccess: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsFileRequestErrorNoPermission: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsFileRequestErrorEmailUnverified: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsFileRequestErrorValidationError: DBXFileRequestsFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.FileRequestError.validationError
        super.init(swift: swift)
    }
}

/// There was an error creating the file request.
@objc
public class DBXFileRequestsCreateFileRequestError: NSObject {
    let swift: FileRequests.CreateFileRequestError

    public init(swift: FileRequests.CreateFileRequestError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.CreateFileRequestError) -> DBXFileRequestsCreateFileRequestError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsCreateFileRequestErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsCreateFileRequestErrorOther()
        case .notFound:
            return DBXFileRequestsCreateFileRequestErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsCreateFileRequestErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsCreateFileRequestErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsCreateFileRequestErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsCreateFileRequestErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsCreateFileRequestErrorValidationError()
        case .invalidLocation:
            return DBXFileRequestsCreateFileRequestErrorInvalidLocation()
        case .rateLimit:
            return DBXFileRequestsCreateFileRequestErrorRateLimit()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsCreateFileRequestErrorDisabledForTeam? {
        self as? DBXFileRequestsCreateFileRequestErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsCreateFileRequestErrorOther? {
        self as? DBXFileRequestsCreateFileRequestErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsCreateFileRequestErrorNotFound? {
        self as? DBXFileRequestsCreateFileRequestErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsCreateFileRequestErrorNotAFolder? {
        self as? DBXFileRequestsCreateFileRequestErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsCreateFileRequestErrorAppLacksAccess? {
        self as? DBXFileRequestsCreateFileRequestErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsCreateFileRequestErrorNoPermission? {
        self as? DBXFileRequestsCreateFileRequestErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsCreateFileRequestErrorEmailUnverified? {
        self as? DBXFileRequestsCreateFileRequestErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsCreateFileRequestErrorValidationError? {
        self as? DBXFileRequestsCreateFileRequestErrorValidationError
    }

    @objc
    public var asInvalidLocation: DBXFileRequestsCreateFileRequestErrorInvalidLocation? {
        self as? DBXFileRequestsCreateFileRequestErrorInvalidLocation
    }

    @objc
    public var asRateLimit: DBXFileRequestsCreateFileRequestErrorRateLimit? {
        self as? DBXFileRequestsCreateFileRequestErrorRateLimit
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsCreateFileRequestErrorDisabledForTeam: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsCreateFileRequestErrorOther: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsCreateFileRequestErrorNotFound: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsCreateFileRequestErrorNotAFolder: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsCreateFileRequestErrorAppLacksAccess: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsCreateFileRequestErrorNoPermission: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsCreateFileRequestErrorEmailUnverified: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsCreateFileRequestErrorValidationError: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.validationError
        super.init(swift: swift)
    }
}

/// File requests are not available on the specified folder.
@objc
public class DBXFileRequestsCreateFileRequestErrorInvalidLocation: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.invalidLocation
        super.init(swift: swift)
    }
}

/// The user has reached the rate limit for creating file requests. The limit is currently 4000 file requests
/// total.
@objc
public class DBXFileRequestsCreateFileRequestErrorRateLimit: DBXFileRequestsCreateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.CreateFileRequestError.rateLimit
        super.init(swift: swift)
    }
}

/// There was an error deleting all closed file requests.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsError: NSObject {
    let swift: FileRequests.DeleteAllClosedFileRequestsError

    public init(swift: FileRequests.DeleteAllClosedFileRequestsError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.DeleteAllClosedFileRequestsError) -> DBXFileRequestsDeleteAllClosedFileRequestsError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorOther()
        case .notFound:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsDeleteAllClosedFileRequestsErrorValidationError()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsDeleteAllClosedFileRequestsErrorDisabledForTeam? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsDeleteAllClosedFileRequestsErrorOther? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsDeleteAllClosedFileRequestsErrorNotFound? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsDeleteAllClosedFileRequestsErrorNotAFolder? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsDeleteAllClosedFileRequestsErrorAppLacksAccess? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsDeleteAllClosedFileRequestsErrorNoPermission? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsDeleteAllClosedFileRequestsErrorEmailUnverified? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsDeleteAllClosedFileRequestsErrorValidationError? {
        self as? DBXFileRequestsDeleteAllClosedFileRequestsErrorValidationError
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorDisabledForTeam: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorOther: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorNotFound: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorNotAFolder: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorAppLacksAccess: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorNoPermission: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorEmailUnverified: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsErrorValidationError: DBXFileRequestsDeleteAllClosedFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.DeleteAllClosedFileRequestsError.validationError
        super.init(swift: swift)
    }
}

/// Result for deleteAllClosed.
@objc
public class DBXFileRequestsDeleteAllClosedFileRequestsResult: NSObject {
    /// The file requests deleted for this user.
    @objc
    public var fileRequests: [DBXFileRequestsFileRequest] { swift.fileRequests.map { DBXFileRequestsFileRequest(swift: $0) } }

    @objc
    public init(fileRequests: [DBXFileRequestsFileRequest]) {
        self.swift = FileRequests.DeleteAllClosedFileRequestsResult(fileRequests: fileRequests.map(\.swift))
    }

    let swift: FileRequests.DeleteAllClosedFileRequestsResult

    public init(swift: FileRequests.DeleteAllClosedFileRequestsResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Arguments for delete.
@objc
public class DBXFileRequestsDeleteFileRequestArgs: NSObject {
    /// List IDs of the file requests to delete.
    @objc
    public var ids: [String] { swift.ids }

    @objc
    public init(ids: [String]) {
        self.swift = FileRequests.DeleteFileRequestArgs(ids: ids)
    }

    let swift: FileRequests.DeleteFileRequestArgs

    public init(swift: FileRequests.DeleteFileRequestArgs) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// There was an error deleting these file requests.
@objc
public class DBXFileRequestsDeleteFileRequestError: NSObject {
    let swift: FileRequests.DeleteFileRequestError

    public init(swift: FileRequests.DeleteFileRequestError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.DeleteFileRequestError) -> DBXFileRequestsDeleteFileRequestError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsDeleteFileRequestErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsDeleteFileRequestErrorOther()
        case .notFound:
            return DBXFileRequestsDeleteFileRequestErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsDeleteFileRequestErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsDeleteFileRequestErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsDeleteFileRequestErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsDeleteFileRequestErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsDeleteFileRequestErrorValidationError()
        case .fileRequestOpen:
            return DBXFileRequestsDeleteFileRequestErrorFileRequestOpen()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsDeleteFileRequestErrorDisabledForTeam? {
        self as? DBXFileRequestsDeleteFileRequestErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsDeleteFileRequestErrorOther? {
        self as? DBXFileRequestsDeleteFileRequestErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsDeleteFileRequestErrorNotFound? {
        self as? DBXFileRequestsDeleteFileRequestErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsDeleteFileRequestErrorNotAFolder? {
        self as? DBXFileRequestsDeleteFileRequestErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsDeleteFileRequestErrorAppLacksAccess? {
        self as? DBXFileRequestsDeleteFileRequestErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsDeleteFileRequestErrorNoPermission? {
        self as? DBXFileRequestsDeleteFileRequestErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsDeleteFileRequestErrorEmailUnverified? {
        self as? DBXFileRequestsDeleteFileRequestErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsDeleteFileRequestErrorValidationError? {
        self as? DBXFileRequestsDeleteFileRequestErrorValidationError
    }

    @objc
    public var asFileRequestOpen: DBXFileRequestsDeleteFileRequestErrorFileRequestOpen? {
        self as? DBXFileRequestsDeleteFileRequestErrorFileRequestOpen
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsDeleteFileRequestErrorDisabledForTeam: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsDeleteFileRequestErrorOther: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsDeleteFileRequestErrorNotFound: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsDeleteFileRequestErrorNotAFolder: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsDeleteFileRequestErrorAppLacksAccess: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsDeleteFileRequestErrorNoPermission: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsDeleteFileRequestErrorEmailUnverified: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsDeleteFileRequestErrorValidationError: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.validationError
        super.init(swift: swift)
    }
}

/// One or more file requests currently open.
@objc
public class DBXFileRequestsDeleteFileRequestErrorFileRequestOpen: DBXFileRequestsDeleteFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.DeleteFileRequestError.fileRequestOpen
        super.init(swift: swift)
    }
}

/// Result for delete.
@objc
public class DBXFileRequestsDeleteFileRequestsResult: NSObject {
    /// The file requests deleted by the request.
    @objc
    public var fileRequests: [DBXFileRequestsFileRequest] { swift.fileRequests.map { DBXFileRequestsFileRequest(swift: $0) } }

    @objc
    public init(fileRequests: [DBXFileRequestsFileRequest]) {
        self.swift = FileRequests.DeleteFileRequestsResult(fileRequests: fileRequests.map(\.swift))
    }

    let swift: FileRequests.DeleteFileRequestsResult

    public init(swift: FileRequests.DeleteFileRequestsResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// A file request https://www.dropbox.com/help/9090 for receiving files into the user's Dropbox account.
@objc
public class DBXFileRequestsFileRequest: NSObject {
    /// The ID of the file request.
    @objc
    public var id: String { swift.id }
    /// The URL of the file request.
    @objc
    public var url: String { swift.url }
    /// The title of the file request.
    @objc
    public var title: String { swift.title }
    /// The path of the folder in the Dropbox where uploaded files will be sent. This can be null if the destination
    /// was removed. For apps with the app folder permission, this will be relative to the app folder.
    @objc
    public var destination: String? { swift.destination }
    /// When this file request was created.
    @objc
    public var created: Date { swift.created }
    /// The deadline for this file request. Only set if the request has a deadline.
    @objc
    public var deadline: DBXFileRequestsFileRequestDeadline? { guard let swift = swift.deadline else { return nil }
        return DBXFileRequestsFileRequestDeadline(swift: swift)
    }

    /// Whether or not the file request is open. If the file request is closed, it will not accept any more file
    /// submissions.
    @objc
    public var isOpen: NSNumber { swift.isOpen as NSNumber }
    /// The number of files this file request has received.
    @objc
    public var fileCount: NSNumber { swift.fileCount as NSNumber }
    /// A description of the file request.
    @objc
    public var description_: String? { swift.description_ }

    @objc
    public init(
        id: String,
        url: String,
        title: String,
        created: Date,
        isOpen: NSNumber,
        fileCount: NSNumber,
        destination: String?,
        deadline: DBXFileRequestsFileRequestDeadline?,
        description_: String?
    ) {
        self.swift = FileRequests.FileRequest(
            id: id,
            url: url,
            title: title,
            created: created,
            isOpen: isOpen.boolValue,
            fileCount: fileCount.int64Value,
            destination: destination,
            deadline: deadline?.swift,
            description_: description_
        )
    }

    let swift: FileRequests.FileRequest

    public init(swift: FileRequests.FileRequest) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible FileRequestDeadline struct
@objc
public class DBXFileRequestsFileRequestDeadline: NSObject {
    /// The deadline for this file request.
    @objc
    public var deadline: Date { swift.deadline }
    /// If set, allow uploads after the deadline has passed. These     uploads will be marked overdue.
    @objc
    public var allowLateUploads: DBXFileRequestsGracePeriod? { guard let swift = swift.allowLateUploads else { return nil }
        return DBXFileRequestsGracePeriod(swift: swift)
    }

    @objc
    public init(deadline: Date, allowLateUploads: DBXFileRequestsGracePeriod?) {
        self.swift = FileRequests.FileRequestDeadline(deadline: deadline, allowLateUploads: allowLateUploads?.swift)
    }

    let swift: FileRequests.FileRequestDeadline

    public init(swift: FileRequests.FileRequestDeadline) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Arguments for get.
@objc
public class DBXFileRequestsGetFileRequestArgs: NSObject {
    /// The ID of the file request to retrieve.
    @objc
    public var id: String { swift.id }

    @objc
    public init(id: String) {
        self.swift = FileRequests.GetFileRequestArgs(id: id)
    }

    let swift: FileRequests.GetFileRequestArgs

    public init(swift: FileRequests.GetFileRequestArgs) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// There was an error retrieving the specified file request.
@objc
public class DBXFileRequestsGetFileRequestError: NSObject {
    let swift: FileRequests.GetFileRequestError

    public init(swift: FileRequests.GetFileRequestError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.GetFileRequestError) -> DBXFileRequestsGetFileRequestError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsGetFileRequestErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsGetFileRequestErrorOther()
        case .notFound:
            return DBXFileRequestsGetFileRequestErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsGetFileRequestErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsGetFileRequestErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsGetFileRequestErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsGetFileRequestErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsGetFileRequestErrorValidationError()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsGetFileRequestErrorDisabledForTeam? {
        self as? DBXFileRequestsGetFileRequestErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsGetFileRequestErrorOther? {
        self as? DBXFileRequestsGetFileRequestErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsGetFileRequestErrorNotFound? {
        self as? DBXFileRequestsGetFileRequestErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsGetFileRequestErrorNotAFolder? {
        self as? DBXFileRequestsGetFileRequestErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsGetFileRequestErrorAppLacksAccess? {
        self as? DBXFileRequestsGetFileRequestErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsGetFileRequestErrorNoPermission? {
        self as? DBXFileRequestsGetFileRequestErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsGetFileRequestErrorEmailUnverified? {
        self as? DBXFileRequestsGetFileRequestErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsGetFileRequestErrorValidationError? {
        self as? DBXFileRequestsGetFileRequestErrorValidationError
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsGetFileRequestErrorDisabledForTeam: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGetFileRequestErrorOther: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsGetFileRequestErrorNotFound: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsGetFileRequestErrorNotAFolder: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsGetFileRequestErrorAppLacksAccess: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsGetFileRequestErrorNoPermission: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsGetFileRequestErrorEmailUnverified: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsGetFileRequestErrorValidationError: DBXFileRequestsGetFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.GetFileRequestError.validationError
        super.init(swift: swift)
    }
}

/// Objective-C compatible GracePeriod union
@objc
public class DBXFileRequestsGracePeriod: NSObject {
    let swift: FileRequests.GracePeriod

    public init(swift: FileRequests.GracePeriod) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.GracePeriod) -> DBXFileRequestsGracePeriod {
        switch swift {
        case .oneDay:
            return DBXFileRequestsGracePeriodOneDay()
        case .twoDays:
            return DBXFileRequestsGracePeriodTwoDays()
        case .sevenDays:
            return DBXFileRequestsGracePeriodSevenDays()
        case .thirtyDays:
            return DBXFileRequestsGracePeriodThirtyDays()
        case .always:
            return DBXFileRequestsGracePeriodAlways()
        case .other:
            return DBXFileRequestsGracePeriodOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOneDay: DBXFileRequestsGracePeriodOneDay? {
        self as? DBXFileRequestsGracePeriodOneDay
    }

    @objc
    public var asTwoDays: DBXFileRequestsGracePeriodTwoDays? {
        self as? DBXFileRequestsGracePeriodTwoDays
    }

    @objc
    public var asSevenDays: DBXFileRequestsGracePeriodSevenDays? {
        self as? DBXFileRequestsGracePeriodSevenDays
    }

    @objc
    public var asThirtyDays: DBXFileRequestsGracePeriodThirtyDays? {
        self as? DBXFileRequestsGracePeriodThirtyDays
    }

    @objc
    public var asAlways: DBXFileRequestsGracePeriodAlways? {
        self as? DBXFileRequestsGracePeriodAlways
    }

    @objc
    public var asOther: DBXFileRequestsGracePeriodOther? {
        self as? DBXFileRequestsGracePeriodOther
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodOneDay: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.oneDay
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodTwoDays: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.twoDays
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodSevenDays: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.sevenDays
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodThirtyDays: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.thirtyDays
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodAlways: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.always
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsGracePeriodOther: DBXFileRequestsGracePeriod {
    @objc
    public init() {
        let swift = FileRequests.GracePeriod.other
        super.init(swift: swift)
    }
}

/// Arguments for listV2.
@objc
public class DBXFileRequestsListFileRequestsArg: NSObject {
    /// The maximum number of file requests that should be returned per request.
    @objc
    public var limit: NSNumber { swift.limit as NSNumber }

    @objc
    public init(limit: NSNumber) {
        self.swift = FileRequests.ListFileRequestsArg(limit: limit.uint64Value)
    }

    let swift: FileRequests.ListFileRequestsArg

    public init(swift: FileRequests.ListFileRequestsArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible ListFileRequestsContinueArg struct
@objc
public class DBXFileRequestsListFileRequestsContinueArg: NSObject {
    /// The cursor returned by the previous API call specified in the endpoint description.
    @objc
    public var cursor: String { swift.cursor }

    @objc
    public init(cursor: String) {
        self.swift = FileRequests.ListFileRequestsContinueArg(cursor: cursor)
    }

    let swift: FileRequests.ListFileRequestsContinueArg

    public init(swift: FileRequests.ListFileRequestsContinueArg) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// There was an error retrieving the file requests.
@objc
public class DBXFileRequestsListFileRequestsContinueError: NSObject {
    let swift: FileRequests.ListFileRequestsContinueError

    public init(swift: FileRequests.ListFileRequestsContinueError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.ListFileRequestsContinueError) -> DBXFileRequestsListFileRequestsContinueError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsListFileRequestsContinueErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsListFileRequestsContinueErrorOther()
        case .invalidCursor:
            return DBXFileRequestsListFileRequestsContinueErrorInvalidCursor()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsListFileRequestsContinueErrorDisabledForTeam? {
        self as? DBXFileRequestsListFileRequestsContinueErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsListFileRequestsContinueErrorOther? {
        self as? DBXFileRequestsListFileRequestsContinueErrorOther
    }

    @objc
    public var asInvalidCursor: DBXFileRequestsListFileRequestsContinueErrorInvalidCursor? {
        self as? DBXFileRequestsListFileRequestsContinueErrorInvalidCursor
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsListFileRequestsContinueErrorDisabledForTeam: DBXFileRequestsListFileRequestsContinueError {
    @objc
    public init() {
        let swift = FileRequests.ListFileRequestsContinueError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsListFileRequestsContinueErrorOther: DBXFileRequestsListFileRequestsContinueError {
    @objc
    public init() {
        let swift = FileRequests.ListFileRequestsContinueError.other
        super.init(swift: swift)
    }
}

/// The cursor is invalid.
@objc
public class DBXFileRequestsListFileRequestsContinueErrorInvalidCursor: DBXFileRequestsListFileRequestsContinueError {
    @objc
    public init() {
        let swift = FileRequests.ListFileRequestsContinueError.invalidCursor
        super.init(swift: swift)
    }
}

/// There was an error retrieving the file requests.
@objc
public class DBXFileRequestsListFileRequestsError: NSObject {
    let swift: FileRequests.ListFileRequestsError

    public init(swift: FileRequests.ListFileRequestsError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.ListFileRequestsError) -> DBXFileRequestsListFileRequestsError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsListFileRequestsErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsListFileRequestsErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsListFileRequestsErrorDisabledForTeam? {
        self as? DBXFileRequestsListFileRequestsErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsListFileRequestsErrorOther? {
        self as? DBXFileRequestsListFileRequestsErrorOther
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsListFileRequestsErrorDisabledForTeam: DBXFileRequestsListFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.ListFileRequestsError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsListFileRequestsErrorOther: DBXFileRequestsListFileRequestsError {
    @objc
    public init() {
        let swift = FileRequests.ListFileRequestsError.other
        super.init(swift: swift)
    }
}

/// Result for list_.
@objc
public class DBXFileRequestsListFileRequestsResult: NSObject {
    /// The file requests owned by this user. Apps with the app folder permission will only see file requests in
    /// their app folder.
    @objc
    public var fileRequests: [DBXFileRequestsFileRequest] { swift.fileRequests.map { DBXFileRequestsFileRequest(swift: $0) } }

    @objc
    public init(fileRequests: [DBXFileRequestsFileRequest]) {
        self.swift = FileRequests.ListFileRequestsResult(fileRequests: fileRequests.map(\.swift))
    }

    let swift: FileRequests.ListFileRequestsResult

    public init(swift: FileRequests.ListFileRequestsResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Result for listV2 and listContinue.
@objc
public class DBXFileRequestsListFileRequestsV2Result: NSObject {
    /// The file requests owned by this user. Apps with the app folder permission will only see file requests in
    /// their app folder.
    @objc
    public var fileRequests: [DBXFileRequestsFileRequest] { swift.fileRequests.map { DBXFileRequestsFileRequest(swift: $0) } }
    /// Pass the cursor into listContinue to obtain additional file requests.
    @objc
    public var cursor: String { swift.cursor }
    /// Is true if there are additional file requests that have not been returned yet. An additional call to
    /// :route:list/continue` can retrieve them.
    @objc
    public var hasMore: NSNumber { swift.hasMore as NSNumber }

    @objc
    public init(fileRequests: [DBXFileRequestsFileRequest], cursor: String, hasMore: NSNumber) {
        self.swift = FileRequests.ListFileRequestsV2Result(fileRequests: fileRequests.map(\.swift), cursor: cursor, hasMore: hasMore.boolValue)
    }

    let swift: FileRequests.ListFileRequestsV2Result

    public init(swift: FileRequests.ListFileRequestsV2Result) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Arguments for update.
@objc
public class DBXFileRequestsUpdateFileRequestArgs: NSObject {
    /// The ID of the file request to update.
    @objc
    public var id: String { swift.id }
    /// The new title of the file request. Must not be empty.
    @objc
    public var title: String? { swift.title }
    /// The new path of the folder in the Dropbox where uploaded files will be sent. For apps with the app folder
    /// permission, this will be relative to the app folder.
    @objc
    public var destination: String? { swift.destination }
    /// The new deadline for the file request. Deadlines can only be set by Professional and Business accounts.
    @objc
    public var deadline: DBXFileRequestsUpdateFileRequestDeadline { DBXFileRequestsUpdateFileRequestDeadline(swift: swift.deadline) }
    /// Whether to set this file request as open or closed.
    @objc
    public var open: NSNumber? { swift.open as NSNumber? }
    /// The description of the file request.
    @objc
    public var description_: String? { swift.description_ }

    @objc
    public init(id: String, title: String?, destination: String?, deadline: DBXFileRequestsUpdateFileRequestDeadline, open: NSNumber?, description_: String?) {
        self.swift = FileRequests.UpdateFileRequestArgs(
            id: id,
            title: title,
            destination: destination,
            deadline: deadline.swift,
            open: open?.boolValue,
            description_: description_
        )
    }

    let swift: FileRequests.UpdateFileRequestArgs

    public init(swift: FileRequests.UpdateFileRequestArgs) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UpdateFileRequestDeadline union
@objc
public class DBXFileRequestsUpdateFileRequestDeadline: NSObject {
    let swift: FileRequests.UpdateFileRequestDeadline

    public init(swift: FileRequests.UpdateFileRequestDeadline) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.UpdateFileRequestDeadline) -> DBXFileRequestsUpdateFileRequestDeadline {
        switch swift {
        case .noUpdate:
            return DBXFileRequestsUpdateFileRequestDeadlineNoUpdate()
        case .update(let swiftArg):
            guard let swiftArg = swiftArg else { return DBXFileRequestsUpdateFileRequestDeadlineUpdate(nil) }
            let arg = DBXFileRequestsFileRequestDeadline(swift: swiftArg)
            return DBXFileRequestsUpdateFileRequestDeadlineUpdate(arg)
        case .other:
            return DBXFileRequestsUpdateFileRequestDeadlineOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asNoUpdate: DBXFileRequestsUpdateFileRequestDeadlineNoUpdate? {
        self as? DBXFileRequestsUpdateFileRequestDeadlineNoUpdate
    }

    @objc
    public var asUpdate: DBXFileRequestsUpdateFileRequestDeadlineUpdate? {
        self as? DBXFileRequestsUpdateFileRequestDeadlineUpdate
    }

    @objc
    public var asOther: DBXFileRequestsUpdateFileRequestDeadlineOther? {
        self as? DBXFileRequestsUpdateFileRequestDeadlineOther
    }
}

/// Do not change the file request's deadline.
@objc
public class DBXFileRequestsUpdateFileRequestDeadlineNoUpdate: DBXFileRequestsUpdateFileRequestDeadline {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestDeadline.noUpdate
        super.init(swift: swift)
    }
}

/// If null, the file request's deadline is cleared.
@objc
public class DBXFileRequestsUpdateFileRequestDeadlineUpdate: DBXFileRequestsUpdateFileRequestDeadline {
    @objc
    public var update: DBXFileRequestsFileRequestDeadline?

    @objc
    public init(_ arg: DBXFileRequestsFileRequestDeadline?) {
        self.update = arg
        let swift = FileRequests.UpdateFileRequestDeadline.update(arg?.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsUpdateFileRequestDeadlineOther: DBXFileRequestsUpdateFileRequestDeadline {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestDeadline.other
        super.init(swift: swift)
    }
}

/// There is an error updating the file request.
@objc
public class DBXFileRequestsUpdateFileRequestError: NSObject {
    let swift: FileRequests.UpdateFileRequestError

    public init(swift: FileRequests.UpdateFileRequestError) {
        self.swift = swift
    }

    public static func factory(swift: FileRequests.UpdateFileRequestError) -> DBXFileRequestsUpdateFileRequestError {
        switch swift {
        case .disabledForTeam:
            return DBXFileRequestsUpdateFileRequestErrorDisabledForTeam()
        case .other:
            return DBXFileRequestsUpdateFileRequestErrorOther()
        case .notFound:
            return DBXFileRequestsUpdateFileRequestErrorNotFound()
        case .notAFolder:
            return DBXFileRequestsUpdateFileRequestErrorNotAFolder()
        case .appLacksAccess:
            return DBXFileRequestsUpdateFileRequestErrorAppLacksAccess()
        case .noPermission:
            return DBXFileRequestsUpdateFileRequestErrorNoPermission()
        case .emailUnverified:
            return DBXFileRequestsUpdateFileRequestErrorEmailUnverified()
        case .validationError:
            return DBXFileRequestsUpdateFileRequestErrorValidationError()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabledForTeam: DBXFileRequestsUpdateFileRequestErrorDisabledForTeam? {
        self as? DBXFileRequestsUpdateFileRequestErrorDisabledForTeam
    }

    @objc
    public var asOther: DBXFileRequestsUpdateFileRequestErrorOther? {
        self as? DBXFileRequestsUpdateFileRequestErrorOther
    }

    @objc
    public var asNotFound: DBXFileRequestsUpdateFileRequestErrorNotFound? {
        self as? DBXFileRequestsUpdateFileRequestErrorNotFound
    }

    @objc
    public var asNotAFolder: DBXFileRequestsUpdateFileRequestErrorNotAFolder? {
        self as? DBXFileRequestsUpdateFileRequestErrorNotAFolder
    }

    @objc
    public var asAppLacksAccess: DBXFileRequestsUpdateFileRequestErrorAppLacksAccess? {
        self as? DBXFileRequestsUpdateFileRequestErrorAppLacksAccess
    }

    @objc
    public var asNoPermission: DBXFileRequestsUpdateFileRequestErrorNoPermission? {
        self as? DBXFileRequestsUpdateFileRequestErrorNoPermission
    }

    @objc
    public var asEmailUnverified: DBXFileRequestsUpdateFileRequestErrorEmailUnverified? {
        self as? DBXFileRequestsUpdateFileRequestErrorEmailUnverified
    }

    @objc
    public var asValidationError: DBXFileRequestsUpdateFileRequestErrorValidationError? {
        self as? DBXFileRequestsUpdateFileRequestErrorValidationError
    }
}

/// This user's Dropbox Business team doesn't allow file requests.
@objc
public class DBXFileRequestsUpdateFileRequestErrorDisabledForTeam: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.disabledForTeam
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXFileRequestsUpdateFileRequestErrorOther: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.other
        super.init(swift: swift)
    }
}

/// This file request ID was not found.
@objc
public class DBXFileRequestsUpdateFileRequestErrorNotFound: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.notFound
        super.init(swift: swift)
    }
}

/// The specified path is not a folder.
@objc
public class DBXFileRequestsUpdateFileRequestErrorNotAFolder: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.notAFolder
        super.init(swift: swift)
    }
}

/// This file request is not accessible to this app. Apps with the app folder permission can only access file
/// requests in their app folder.
@objc
public class DBXFileRequestsUpdateFileRequestErrorAppLacksAccess: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.appLacksAccess
        super.init(swift: swift)
    }
}

/// This user doesn't have permission to access or modify this file request.
@objc
public class DBXFileRequestsUpdateFileRequestErrorNoPermission: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.noPermission
        super.init(swift: swift)
    }
}

/// This user's email address is not verified. File requests are only available on accounts with a verified
/// email address. Users can verify their email address here https://www.dropbox.com/help/317.
@objc
public class DBXFileRequestsUpdateFileRequestErrorEmailUnverified: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.emailUnverified
        super.init(swift: swift)
    }
}

/// There was an error validating the request. For example, the title was invalid, or there were disallowed
/// characters in the destination path.
@objc
public class DBXFileRequestsUpdateFileRequestErrorValidationError: DBXFileRequestsUpdateFileRequestError {
    @objc
    public init() {
        let swift = FileRequests.UpdateFileRequestError.validationError
        super.init(swift: swift)
    }
}
