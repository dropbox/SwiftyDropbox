///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the openid namespace
/// For Swift see openid

/// Objective-C compatible OpenIdError union
@objc
public class DBXOpenidOpenIdError: NSObject {
    let swift: Openid.OpenIdError

    public init(swift: Openid.OpenIdError) {
        self.swift = swift
    }

    public static func factory(swift: Openid.OpenIdError) -> DBXOpenidOpenIdError {
        switch swift {
        case .incorrectOpenidScopes:
            return DBXOpenidOpenIdErrorIncorrectOpenidScopes()
        case .other:
            return DBXOpenidOpenIdErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asIncorrectOpenidScopes: DBXOpenidOpenIdErrorIncorrectOpenidScopes? {
        self as? DBXOpenidOpenIdErrorIncorrectOpenidScopes
    }

    @objc
    public var asOther: DBXOpenidOpenIdErrorOther? {
        self as? DBXOpenidOpenIdErrorOther
    }
}

/// Missing openid claims for the associated access token.
@objc
public class DBXOpenidOpenIdErrorIncorrectOpenidScopes: DBXOpenidOpenIdError {
    @objc
    public init() {
        let swift = Openid.OpenIdError.incorrectOpenidScopes
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXOpenidOpenIdErrorOther: DBXOpenidOpenIdError {
    @objc
    public init() {
        let swift = Openid.OpenIdError.other
        super.init(swift: swift)
    }
}

/// No Parameters
@objc
public class DBXOpenidUserInfoArgs: NSObject {
    let swift: Openid.UserInfoArgs

    public init(swift: Openid.UserInfoArgs) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible UserInfoError union
@objc
public class DBXOpenidUserInfoError: NSObject {
    let swift: Openid.UserInfoError

    public init(swift: Openid.UserInfoError) {
        self.swift = swift
    }

    public static func factory(swift: Openid.UserInfoError) -> DBXOpenidUserInfoError {
        switch swift {
        case .openidError(let swiftArg):
            let arg = DBXOpenidOpenIdError(swift: swiftArg)
            return DBXOpenidUserInfoErrorOpenidError(arg)
        case .other:
            return DBXOpenidUserInfoErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOpenidError: DBXOpenidUserInfoErrorOpenidError? {
        self as? DBXOpenidUserInfoErrorOpenidError
    }

    @objc
    public var asOther: DBXOpenidUserInfoErrorOther? {
        self as? DBXOpenidUserInfoErrorOther
    }
}

/// An unspecified error.
@objc
public class DBXOpenidUserInfoErrorOpenidError: DBXOpenidUserInfoError {
    @objc
    public var openidError: DBXOpenidOpenIdError

    @objc
    public init(_ arg: DBXOpenidOpenIdError) {
        self.openidError = arg
        let swift = Openid.UserInfoError.openidError(arg.swift)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXOpenidUserInfoErrorOther: DBXOpenidUserInfoError {
    @objc
    public init() {
        let swift = Openid.UserInfoError.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible UserInfoResult struct
@objc
public class DBXOpenidUserInfoResult: NSObject {
    /// Last name of user.
    @objc
    public var familyName: String? { swift.familyName }
    /// First name of user.
    @objc
    public var givenName: String? { swift.givenName }
    /// Email address of user.
    @objc
    public var email: String? { swift.email }
    /// If user is email verified.
    @objc
    public var emailVerified: NSNumber? { swift.emailVerified as NSNumber? }
    /// Issuer of token (in this case Dropbox).
    @objc
    public var iss: String { swift.iss }
    /// An identifier for the user. This is the Dropbox account_id, a string value such as
    /// dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc.
    @objc
    public var sub: String { swift.sub }

    @objc
    public init(familyName: String?, givenName: String?, email: String?, emailVerified: NSNumber?, iss: String, sub: String) {
        self.swift = Openid.UserInfoResult(
            familyName: familyName,
            givenName: givenName,
            email: email,
            emailVerified: emailVerified?.boolValue,
            iss: iss,
            sub: sub
        )
    }

    let swift: Openid.UserInfoResult

    public init(swift: Openid.UserInfoResult) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}
