///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

extension DropboxBaseRequestBox {
    var objc: DBXRequest {
        if case .files_alphaUpload(let swift) = self {
            return DBXFilesAlphaUploadUploadRequest(swift: swift)
        }
        if case .files_download(let swift) = self {
            return DBXFilesDownloadDownloadRequestFile(swift: swift)
        }
        if case .files_downloadZip(let swift) = self {
            return DBXFilesDownloadZipDownloadRequestFile(swift: swift)
        }
        if case .files_export(let swift) = self {
            return DBXFilesExportDownloadRequestFile(swift: swift)
        }
        if case .files_getPreview(let swift) = self {
            return DBXFilesGetPreviewDownloadRequestFile(swift: swift)
        }
        if case .files_getThumbnail(let swift) = self {
            return DBXFilesGetThumbnailDownloadRequestFile(swift: swift)
        }
        if case .files_getThumbnailV2(let swift) = self {
            return DBXFilesGetThumbnailDownloadRequestFileV2(swift: swift)
        }
        if case .files_paperCreate(let swift) = self {
            return DBXFilesPaperCreateUploadRequest(swift: swift)
        }
        if case .files_paperUpdate(let swift) = self {
            return DBXFilesPaperUpdateUploadRequest(swift: swift)
        }
        if case .files_upload(let swift) = self {
            return DBXFilesUploadUploadRequest(swift: swift)
        }
        if case .files_uploadSessionAppend(let swift) = self {
            return DBXFilesUploadSessionAppendUploadRequest(swift: swift)
        }
        if case .files_uploadSessionAppendV2(let swift) = self {
            return DBXFilesUploadSessionAppendUploadRequestV2(swift: swift)
        }
        if case .files_uploadSessionFinish(let swift) = self {
            return DBXFilesUploadSessionFinishUploadRequest(swift: swift)
        }
        if case .files_uploadSessionStart(let swift) = self {
            return DBXFilesUploadSessionStartUploadRequest(swift: swift)
        }
        if case .paper_docsCreate(let swift) = self {
            return DBXPaperDocsCreateUploadRequest(swift: swift)
        }
        if case .paper_docsDownload(let swift) = self {
            return DBXPaperDocsDownloadDownloadRequestFile(swift: swift)
        }
        if case .paper_docsUpdate(let swift) = self {
            return DBXPaperDocsUpdateUploadRequest(swift: swift)
        }
        if case .sharing_getSharedLinkFile(let swift) = self {
            return DBXSharingGetSharedLinkFileDownloadRequestFile(swift: swift)
        } else {
            fatalError("For Obj-C compatibility, add this route to the Objective-C compatibility module allow-list")
        }
    }
}
