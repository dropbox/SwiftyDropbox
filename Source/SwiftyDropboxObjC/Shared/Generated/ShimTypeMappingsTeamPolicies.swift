///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXTeamPoliciesCameraUploadsPolicyStateToDBOptional(object: DBXTeamPoliciesCameraUploadsPolicyState?) -> DBTEAMPOLICIESCameraUploadsPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesCameraUploadsPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesCameraUploadsPolicyStateToDB(object: DBXTeamPoliciesCameraUploadsPolicyState) -> DBTEAMPOLICIESCameraUploadsPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESCameraUploadsPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESCameraUploadsPolicyState(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESCameraUploadsPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesComputerBackupPolicyStateToDBOptional(object: DBXTeamPoliciesComputerBackupPolicyState?) -> DBTEAMPOLICIESComputerBackupPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesComputerBackupPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesComputerBackupPolicyStateToDB(object: DBXTeamPoliciesComputerBackupPolicyState) -> DBTEAMPOLICIESComputerBackupPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESComputerBackupPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESComputerBackupPolicyState(enabled: ())
    }
    if object.asDefault_ != nil {
        return DBTEAMPOLICIESComputerBackupPolicyState(default_: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESComputerBackupPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesEmmStateToDBOptional(object: DBXTeamPoliciesEmmState?) -> DBTEAMPOLICIESEmmState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesEmmStateToDB(object: object)
}

func mapDBXTeamPoliciesEmmStateToDB(object: DBXTeamPoliciesEmmState) -> DBTEAMPOLICIESEmmState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESEmmState(disabled: ())
    }
    if object.asOptional != nil {
        return DBTEAMPOLICIESEmmState(optional: ())
    }
    if object.asRequired != nil {
        return DBTEAMPOLICIESEmmState(required: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESEmmState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesExternalDriveBackupPolicyStateToDBOptional(object: DBXTeamPoliciesExternalDriveBackupPolicyState?)
    -> DBTEAMPOLICIESExternalDriveBackupPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesExternalDriveBackupPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesExternalDriveBackupPolicyStateToDB(object: DBXTeamPoliciesExternalDriveBackupPolicyState)
    -> DBTEAMPOLICIESExternalDriveBackupPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESExternalDriveBackupPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESExternalDriveBackupPolicyState(enabled: ())
    }
    if object.asDefault_ != nil {
        return DBTEAMPOLICIESExternalDriveBackupPolicyState(default_: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESExternalDriveBackupPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesFileLockingPolicyStateToDBOptional(object: DBXTeamPoliciesFileLockingPolicyState?) -> DBTEAMPOLICIESFileLockingPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesFileLockingPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesFileLockingPolicyStateToDB(object: DBXTeamPoliciesFileLockingPolicyState) -> DBTEAMPOLICIESFileLockingPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESFileLockingPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESFileLockingPolicyState(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESFileLockingPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesFileProviderMigrationPolicyStateToDBOptional(object: DBXTeamPoliciesFileProviderMigrationPolicyState?)
    -> DBTEAMPOLICIESFileProviderMigrationPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesFileProviderMigrationPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesFileProviderMigrationPolicyStateToDB(object: DBXTeamPoliciesFileProviderMigrationPolicyState)
    -> DBTEAMPOLICIESFileProviderMigrationPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESFileProviderMigrationPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESFileProviderMigrationPolicyState(enabled: ())
    }
    if object.asDefault_ != nil {
        return DBTEAMPOLICIESFileProviderMigrationPolicyState(default_: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESFileProviderMigrationPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesGroupCreationToDBOptional(object: DBXTeamPoliciesGroupCreation?) -> DBTEAMPOLICIESGroupCreation? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesGroupCreationToDB(object: object)
}

func mapDBXTeamPoliciesGroupCreationToDB(object: DBXTeamPoliciesGroupCreation) -> DBTEAMPOLICIESGroupCreation {
    if object.asAdminsAndMembers != nil {
        return DBTEAMPOLICIESGroupCreation(adminsAndMembers: ())
    }
    if object.asAdminsOnly != nil {
        return DBTEAMPOLICIESGroupCreation(adminsOnly: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesOfficeAddInPolicyToDBOptional(object: DBXTeamPoliciesOfficeAddInPolicy?) -> DBTEAMPOLICIESOfficeAddInPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesOfficeAddInPolicyToDB(object: object)
}

func mapDBXTeamPoliciesOfficeAddInPolicyToDB(object: DBXTeamPoliciesOfficeAddInPolicy) -> DBTEAMPOLICIESOfficeAddInPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESOfficeAddInPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESOfficeAddInPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESOfficeAddInPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPaperDefaultFolderPolicyToDBOptional(object: DBXTeamPoliciesPaperDefaultFolderPolicy?) -> DBTEAMPOLICIESPaperDefaultFolderPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPaperDefaultFolderPolicyToDB(object: object)
}

func mapDBXTeamPoliciesPaperDefaultFolderPolicyToDB(object: DBXTeamPoliciesPaperDefaultFolderPolicy) -> DBTEAMPOLICIESPaperDefaultFolderPolicy {
    if object.asEveryoneInTeam != nil {
        return DBTEAMPOLICIESPaperDefaultFolderPolicy(everyoneInTeam: ())
    }
    if object.asInviteOnly != nil {
        return DBTEAMPOLICIESPaperDefaultFolderPolicy(inviteOnly: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPaperDefaultFolderPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPaperDeploymentPolicyToDBOptional(object: DBXTeamPoliciesPaperDeploymentPolicy?) -> DBTEAMPOLICIESPaperDeploymentPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPaperDeploymentPolicyToDB(object: object)
}

func mapDBXTeamPoliciesPaperDeploymentPolicyToDB(object: DBXTeamPoliciesPaperDeploymentPolicy) -> DBTEAMPOLICIESPaperDeploymentPolicy {
    if object.asFull != nil {
        return DBTEAMPOLICIESPaperDeploymentPolicy(full: ())
    }
    if object.asPartial != nil {
        return DBTEAMPOLICIESPaperDeploymentPolicy(partial: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPaperDeploymentPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPaperDesktopPolicyToDBOptional(object: DBXTeamPoliciesPaperDesktopPolicy?) -> DBTEAMPOLICIESPaperDesktopPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPaperDesktopPolicyToDB(object: object)
}

func mapDBXTeamPoliciesPaperDesktopPolicyToDB(object: DBXTeamPoliciesPaperDesktopPolicy) -> DBTEAMPOLICIESPaperDesktopPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESPaperDesktopPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESPaperDesktopPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPaperDesktopPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPaperEnabledPolicyToDBOptional(object: DBXTeamPoliciesPaperEnabledPolicy?) -> DBTEAMPOLICIESPaperEnabledPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPaperEnabledPolicyToDB(object: object)
}

func mapDBXTeamPoliciesPaperEnabledPolicyToDB(object: DBXTeamPoliciesPaperEnabledPolicy) -> DBTEAMPOLICIESPaperEnabledPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESPaperEnabledPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESPaperEnabledPolicy(enabled: ())
    }
    if object.asUnspecified != nil {
        return DBTEAMPOLICIESPaperEnabledPolicy(unspecified: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPaperEnabledPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPasswordControlModeToDBOptional(object: DBXTeamPoliciesPasswordControlMode?) -> DBTEAMPOLICIESPasswordControlMode? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPasswordControlModeToDB(object: object)
}

func mapDBXTeamPoliciesPasswordControlModeToDB(object: DBXTeamPoliciesPasswordControlMode) -> DBTEAMPOLICIESPasswordControlMode {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESPasswordControlMode(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESPasswordControlMode(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPasswordControlMode(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesPasswordStrengthPolicyToDBOptional(object: DBXTeamPoliciesPasswordStrengthPolicy?) -> DBTEAMPOLICIESPasswordStrengthPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesPasswordStrengthPolicyToDB(object: object)
}

func mapDBXTeamPoliciesPasswordStrengthPolicyToDB(object: DBXTeamPoliciesPasswordStrengthPolicy) -> DBTEAMPOLICIESPasswordStrengthPolicy {
    if object.asMinimalRequirements != nil {
        return DBTEAMPOLICIESPasswordStrengthPolicy(minimalRequirements: ())
    }
    if object.asModeratePassword != nil {
        return DBTEAMPOLICIESPasswordStrengthPolicy(moderatePassword: ())
    }
    if object.asStrongPassword != nil {
        return DBTEAMPOLICIESPasswordStrengthPolicy(strongPassword: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESPasswordStrengthPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesRolloutMethodToDBOptional(object: DBXTeamPoliciesRolloutMethod?) -> DBTEAMPOLICIESRolloutMethod? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesRolloutMethodToDB(object: object)
}

func mapDBXTeamPoliciesRolloutMethodToDB(object: DBXTeamPoliciesRolloutMethod) -> DBTEAMPOLICIESRolloutMethod {
    if object.asUnlinkAll != nil {
        return DBTEAMPOLICIESRolloutMethod(unlinkAll: ())
    }
    if object.asUnlinkMostInactive != nil {
        return DBTEAMPOLICIESRolloutMethod(unlinkMostInactive: ())
    }
    if object.asAddMemberToExceptions != nil {
        return DBTEAMPOLICIESRolloutMethod(addMemberToExceptions: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyToDBOptional(object: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy?)
    -> DBTEAMPOLICIESSharedFolderBlanketLinkRestrictionPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyToDB(object: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy)
    -> DBTEAMPOLICIESSharedFolderBlanketLinkRestrictionPolicy {
    if object.asMembers != nil {
        return DBTEAMPOLICIESSharedFolderBlanketLinkRestrictionPolicy(members: ())
    }
    if object.asAnyone != nil {
        return DBTEAMPOLICIESSharedFolderBlanketLinkRestrictionPolicy(anyone: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSharedFolderBlanketLinkRestrictionPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSharedFolderJoinPolicyToDBOptional(object: DBXTeamPoliciesSharedFolderJoinPolicy?) -> DBTEAMPOLICIESSharedFolderJoinPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSharedFolderJoinPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSharedFolderJoinPolicyToDB(object: DBXTeamPoliciesSharedFolderJoinPolicy) -> DBTEAMPOLICIESSharedFolderJoinPolicy {
    if object.asFromTeamOnly != nil {
        return DBTEAMPOLICIESSharedFolderJoinPolicy(fromTeamOnly: ())
    }
    if object.asFromAnyone != nil {
        return DBTEAMPOLICIESSharedFolderJoinPolicy(fromAnyone: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSharedFolderJoinPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSharedFolderMemberPolicyToDBOptional(object: DBXTeamPoliciesSharedFolderMemberPolicy?) -> DBTEAMPOLICIESSharedFolderMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSharedFolderMemberPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSharedFolderMemberPolicyToDB(object: DBXTeamPoliciesSharedFolderMemberPolicy) -> DBTEAMPOLICIESSharedFolderMemberPolicy {
    if object.asTeam != nil {
        return DBTEAMPOLICIESSharedFolderMemberPolicy(team: ())
    }
    if object.asAnyone != nil {
        return DBTEAMPOLICIESSharedFolderMemberPolicy(anyone: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSharedFolderMemberPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSharedLinkCreatePolicyToDBOptional(object: DBXTeamPoliciesSharedLinkCreatePolicy?) -> DBTEAMPOLICIESSharedLinkCreatePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSharedLinkCreatePolicyToDB(object: object)
}

func mapDBXTeamPoliciesSharedLinkCreatePolicyToDB(object: DBXTeamPoliciesSharedLinkCreatePolicy) -> DBTEAMPOLICIESSharedLinkCreatePolicy {
    if object.asDefaultPublic != nil {
        return DBTEAMPOLICIESSharedLinkCreatePolicy(defaultPublic: ())
    }
    if object.asDefaultTeamOnly != nil {
        return DBTEAMPOLICIESSharedLinkCreatePolicy(defaultTeamOnly: ())
    }
    if object.asTeamOnly != nil {
        return DBTEAMPOLICIESSharedLinkCreatePolicy(teamOnly: ())
    }
    if object.asDefaultNoOne != nil {
        return DBTEAMPOLICIESSharedLinkCreatePolicy(defaultNoOne: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSharedLinkCreatePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesShowcaseDownloadPolicyToDBOptional(object: DBXTeamPoliciesShowcaseDownloadPolicy?) -> DBTEAMPOLICIESShowcaseDownloadPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesShowcaseDownloadPolicyToDB(object: object)
}

func mapDBXTeamPoliciesShowcaseDownloadPolicyToDB(object: DBXTeamPoliciesShowcaseDownloadPolicy) -> DBTEAMPOLICIESShowcaseDownloadPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESShowcaseDownloadPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESShowcaseDownloadPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESShowcaseDownloadPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesShowcaseEnabledPolicyToDBOptional(object: DBXTeamPoliciesShowcaseEnabledPolicy?) -> DBTEAMPOLICIESShowcaseEnabledPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesShowcaseEnabledPolicyToDB(object: object)
}

func mapDBXTeamPoliciesShowcaseEnabledPolicyToDB(object: DBXTeamPoliciesShowcaseEnabledPolicy) -> DBTEAMPOLICIESShowcaseEnabledPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESShowcaseEnabledPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESShowcaseEnabledPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESShowcaseEnabledPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesShowcaseExternalSharingPolicyToDBOptional(object: DBXTeamPoliciesShowcaseExternalSharingPolicy?)
    -> DBTEAMPOLICIESShowcaseExternalSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesShowcaseExternalSharingPolicyToDB(object: object)
}

func mapDBXTeamPoliciesShowcaseExternalSharingPolicyToDB(object: DBXTeamPoliciesShowcaseExternalSharingPolicy) -> DBTEAMPOLICIESShowcaseExternalSharingPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESShowcaseExternalSharingPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESShowcaseExternalSharingPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESShowcaseExternalSharingPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSmartSyncPolicyToDBOptional(object: DBXTeamPoliciesSmartSyncPolicy?) -> DBTEAMPOLICIESSmartSyncPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSmartSyncPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSmartSyncPolicyToDB(object: DBXTeamPoliciesSmartSyncPolicy) -> DBTEAMPOLICIESSmartSyncPolicy {
    if object.asLocal != nil {
        return DBTEAMPOLICIESSmartSyncPolicy(local: ())
    }
    if object.asOnDemand != nil {
        return DBTEAMPOLICIESSmartSyncPolicy(onDemand: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSmartSyncPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSmarterSmartSyncPolicyStateToDBOptional(object: DBXTeamPoliciesSmarterSmartSyncPolicyState?)
    -> DBTEAMPOLICIESSmarterSmartSyncPolicyState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSmarterSmartSyncPolicyStateToDB(object: object)
}

func mapDBXTeamPoliciesSmarterSmartSyncPolicyStateToDB(object: DBXTeamPoliciesSmarterSmartSyncPolicyState) -> DBTEAMPOLICIESSmarterSmartSyncPolicyState {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESSmarterSmartSyncPolicyState(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESSmarterSmartSyncPolicyState(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSmarterSmartSyncPolicyState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSsoPolicyToDBOptional(object: DBXTeamPoliciesSsoPolicy?) -> DBTEAMPOLICIESSsoPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSsoPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSsoPolicyToDB(object: DBXTeamPoliciesSsoPolicy) -> DBTEAMPOLICIESSsoPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESSsoPolicy(disabled: ())
    }
    if object.asOptional != nil {
        return DBTEAMPOLICIESSsoPolicy(optional: ())
    }
    if object.asRequired != nil {
        return DBTEAMPOLICIESSsoPolicy(required: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSsoPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesSuggestMembersPolicyToDBOptional(object: DBXTeamPoliciesSuggestMembersPolicy?) -> DBTEAMPOLICIESSuggestMembersPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesSuggestMembersPolicyToDB(object: object)
}

func mapDBXTeamPoliciesSuggestMembersPolicyToDB(object: DBXTeamPoliciesSuggestMembersPolicy) -> DBTEAMPOLICIESSuggestMembersPolicy {
    if object.asDisabled != nil {
        return DBTEAMPOLICIESSuggestMembersPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMPOLICIESSuggestMembersPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESSuggestMembersPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesTeamMemberPoliciesToDBOptional(object: DBXTeamPoliciesTeamMemberPolicies?) -> DBTEAMPOLICIESTeamMemberPolicies? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesTeamMemberPoliciesToDB(object: object)
}

func mapDBXTeamPoliciesTeamMemberPoliciesToDB(object: DBXTeamPoliciesTeamMemberPolicies) -> DBTEAMPOLICIESTeamMemberPolicies {
    DBTEAMPOLICIESTeamMemberPolicies(
        sharing: mapDBXTeamPoliciesTeamSharingPoliciesToDB(object: object.sharing),
        emmState: mapDBXTeamPoliciesEmmStateToDB(object: object.emmState),
        officeAddin: mapDBXTeamPoliciesOfficeAddInPolicyToDB(object: object.officeAddin),
        suggestMembersPolicy: mapDBXTeamPoliciesSuggestMembersPolicyToDB(object: object.suggestMembersPolicy)
    )
}

func mapDBXTeamPoliciesTeamSharingPoliciesToDBOptional(object: DBXTeamPoliciesTeamSharingPolicies?) -> DBTEAMPOLICIESTeamSharingPolicies? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesTeamSharingPoliciesToDB(object: object)
}

func mapDBXTeamPoliciesTeamSharingPoliciesToDB(object: DBXTeamPoliciesTeamSharingPolicies) -> DBTEAMPOLICIESTeamSharingPolicies {
    DBTEAMPOLICIESTeamSharingPolicies(
        sharedFolderMemberPolicy: mapDBXTeamPoliciesSharedFolderMemberPolicyToDB(object: object.sharedFolderMemberPolicy),
        sharedFolderJoinPolicy: mapDBXTeamPoliciesSharedFolderJoinPolicyToDB(object: object.sharedFolderJoinPolicy),
        sharedLinkCreatePolicy: mapDBXTeamPoliciesSharedLinkCreatePolicyToDB(object: object.sharedLinkCreatePolicy),
        groupCreationPolicy: mapDBXTeamPoliciesGroupCreationToDB(object: object.groupCreationPolicy),
        sharedFolderLinkRestrictionPolicy: mapDBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyToDB(object: object.sharedFolderLinkRestrictionPolicy)
    )
}

func mapDBXTeamPoliciesTwoStepVerificationPolicyToDBOptional(object: DBXTeamPoliciesTwoStepVerificationPolicy?) -> DBTEAMPOLICIESTwoStepVerificationPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesTwoStepVerificationPolicyToDB(object: object)
}

func mapDBXTeamPoliciesTwoStepVerificationPolicyToDB(object: DBXTeamPoliciesTwoStepVerificationPolicy) -> DBTEAMPOLICIESTwoStepVerificationPolicy {
    if object.asRequireTfaEnable != nil {
        return DBTEAMPOLICIESTwoStepVerificationPolicy(requireTfaEnable: ())
    }
    if object.asRequireTfaDisable != nil {
        return DBTEAMPOLICIESTwoStepVerificationPolicy(requireTfaDisable: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESTwoStepVerificationPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamPoliciesTwoStepVerificationStateToDBOptional(object: DBXTeamPoliciesTwoStepVerificationState?) -> DBTEAMPOLICIESTwoStepVerificationState? {
    guard let object = object else { return nil }
    return mapDBXTeamPoliciesTwoStepVerificationStateToDB(object: object)
}

func mapDBXTeamPoliciesTwoStepVerificationStateToDB(object: DBXTeamPoliciesTwoStepVerificationState) -> DBTEAMPOLICIESTwoStepVerificationState {
    if object.asRequired != nil {
        return DBTEAMPOLICIESTwoStepVerificationState(required: ())
    }
    if object.asOptional != nil {
        return DBTEAMPOLICIESTwoStepVerificationState(optional: ())
    }
    if object.asDisabled != nil {
        return DBTEAMPOLICIESTwoStepVerificationState(disabled: ())
    }
    if object.asOther != nil {
        return DBTEAMPOLICIESTwoStepVerificationState(other: ())
    }
    fatalError("codegen error")
}
