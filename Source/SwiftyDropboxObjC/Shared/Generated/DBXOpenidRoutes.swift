///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible routes for the openid namespace
/// For Swift routes see OpenidRoutes
@objc
public class DBXOpenidRoutes: NSObject {
    private let swift: OpenidRoutes
    init(swift: OpenidRoutes) {
        self.swift = swift
        self.client = swift.client.objc
    }

    public let client: DBXDropboxTransportClient

    /// This route is used for refreshing the info that is found in the id_token during the OIDC flow. This route
    /// doesn't require any arguments and will use the scopes approved for the given access token.
    ///
    /// - scope: openid
    ///
    ///
    /// - returns: Through the response callback, the caller will receive a `Openid.UserInfoResult` object on success or
    /// a `Openid.UserInfoError` object on failure.
    @objc
    @discardableResult public func userinfo() -> DBXOpenidUserinfoRpcRequest {
        let swift = swift.userinfo()
        return DBXOpenidUserinfoRpcRequest(swift: swift)
    }
}

@objc
public class DBXOpenidUserinfoRpcRequest: NSObject, DBXRequest {
    var swift: RpcRequest<Openid.UserInfoResultSerializer, Openid.UserInfoErrorSerializer>

    init(swift: RpcRequest<Openid.UserInfoResultSerializer, Openid.UserInfoErrorSerializer>) {
        self.swift = swift
    }

    @objc
    @discardableResult public func response(
        completionHandler: @escaping (DBXOpenidUserInfoResult?, DBXOpenidUserInfoError?, DBXCallError?) -> Void
    ) -> Self {
        response(queue: nil, completionHandler: completionHandler)
    }

    @objc
    @discardableResult public func response(
        queue: DispatchQueue?,
        completionHandler: @escaping (DBXOpenidUserInfoResult?, DBXOpenidUserInfoError?, DBXCallError?) -> Void
    ) -> Self {
        swift.response(queue: queue) { result, error in
            var routeError: DBXOpenidUserInfoError?
            var callError: DBXCallError?
            switch error {
            case .routeError(let box, _, _, _):
                routeError = DBXOpenidUserInfoError(swift: box.unboxed)
                callError = nil
            default:
                routeError = nil
                callError = error?.objc
            }

            var objc: DBXOpenidUserInfoResult?
            if let swift = result {
                objc = DBXOpenidUserInfoResult(swift: swift)
            }
            completionHandler(objc, routeError, callError)
        }
        return self
    }

    @objc
    public var clientPersistedString: String? { swift.clientPersistedString }

    @available(iOS 13.0, macOS 10.13, *)
    @objc
    public var earliestBeginDate: Date? { swift.earliestBeginDate }

    @objc
    public func persistingString(string: String?) -> Self {
        swift.persistingString(string: string)
        return self
    }

    @available(iOS 13.0, macOS 10.13, *)
    @objc
    public func settingEarliestBeginDate(date: Date?) -> Self {
        swift.settingEarliestBeginDate(date: date)
        return self
    }

    @objc
    public func cancel() {
        swift.cancel()
    }
}
