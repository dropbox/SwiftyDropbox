///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the team_policies namespace
/// For Swift see team_policies

/// Objective-C compatible CameraUploadsPolicyState union
@objc
public class DBXTeamPoliciesCameraUploadsPolicyState: NSObject {
    let swift: TeamPolicies.CameraUploadsPolicyState

    public init(swift: TeamPolicies.CameraUploadsPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.CameraUploadsPolicyState) -> DBXTeamPoliciesCameraUploadsPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesCameraUploadsPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesCameraUploadsPolicyStateEnabled()
        case .other:
            return DBXTeamPoliciesCameraUploadsPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesCameraUploadsPolicyStateDisabled? {
        self as? DBXTeamPoliciesCameraUploadsPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesCameraUploadsPolicyStateEnabled? {
        self as? DBXTeamPoliciesCameraUploadsPolicyStateEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesCameraUploadsPolicyStateOther? {
        self as? DBXTeamPoliciesCameraUploadsPolicyStateOther
    }
}

/// Background camera uploads are disabled.
@objc
public class DBXTeamPoliciesCameraUploadsPolicyStateDisabled: DBXTeamPoliciesCameraUploadsPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.CameraUploadsPolicyState.disabled
        super.init(swift: swift)
    }
}

/// Background camera uploads are allowed.
@objc
public class DBXTeamPoliciesCameraUploadsPolicyStateEnabled: DBXTeamPoliciesCameraUploadsPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.CameraUploadsPolicyState.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesCameraUploadsPolicyStateOther: DBXTeamPoliciesCameraUploadsPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.CameraUploadsPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ComputerBackupPolicyState union
@objc
public class DBXTeamPoliciesComputerBackupPolicyState: NSObject {
    let swift: TeamPolicies.ComputerBackupPolicyState

    public init(swift: TeamPolicies.ComputerBackupPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.ComputerBackupPolicyState) -> DBXTeamPoliciesComputerBackupPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesComputerBackupPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesComputerBackupPolicyStateEnabled()
        case .default_:
            return DBXTeamPoliciesComputerBackupPolicyStateDefault_()
        case .other:
            return DBXTeamPoliciesComputerBackupPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesComputerBackupPolicyStateDisabled? {
        self as? DBXTeamPoliciesComputerBackupPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesComputerBackupPolicyStateEnabled? {
        self as? DBXTeamPoliciesComputerBackupPolicyStateEnabled
    }

    @objc
    public var asDefault_: DBXTeamPoliciesComputerBackupPolicyStateDefault_? {
        self as? DBXTeamPoliciesComputerBackupPolicyStateDefault_
    }

    @objc
    public var asOther: DBXTeamPoliciesComputerBackupPolicyStateOther? {
        self as? DBXTeamPoliciesComputerBackupPolicyStateOther
    }
}

/// Computer Backup feature is disabled.
@objc
public class DBXTeamPoliciesComputerBackupPolicyStateDisabled: DBXTeamPoliciesComputerBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ComputerBackupPolicyState.disabled
        super.init(swift: swift)
    }
}

/// Computer Backup feature is enabled.
@objc
public class DBXTeamPoliciesComputerBackupPolicyStateEnabled: DBXTeamPoliciesComputerBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ComputerBackupPolicyState.enabled
        super.init(swift: swift)
    }
}

/// Computer Backup defaults to ON for SSB teams, and OFF for Enterprise teams.
@objc
public class DBXTeamPoliciesComputerBackupPolicyStateDefault_: DBXTeamPoliciesComputerBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ComputerBackupPolicyState.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesComputerBackupPolicyStateOther: DBXTeamPoliciesComputerBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ComputerBackupPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible EmmState union
@objc
public class DBXTeamPoliciesEmmState: NSObject {
    let swift: TeamPolicies.EmmState

    public init(swift: TeamPolicies.EmmState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.EmmState) -> DBXTeamPoliciesEmmState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesEmmStateDisabled()
        case .optional:
            return DBXTeamPoliciesEmmStateOptional()
        case .required:
            return DBXTeamPoliciesEmmStateRequired()
        case .other:
            return DBXTeamPoliciesEmmStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesEmmStateDisabled? {
        self as? DBXTeamPoliciesEmmStateDisabled
    }

    @objc
    public var asOptional: DBXTeamPoliciesEmmStateOptional? {
        self as? DBXTeamPoliciesEmmStateOptional
    }

    @objc
    public var asRequired: DBXTeamPoliciesEmmStateRequired? {
        self as? DBXTeamPoliciesEmmStateRequired
    }

    @objc
    public var asOther: DBXTeamPoliciesEmmStateOther? {
        self as? DBXTeamPoliciesEmmStateOther
    }
}

/// Emm token is disabled.
@objc
public class DBXTeamPoliciesEmmStateDisabled: DBXTeamPoliciesEmmState {
    @objc
    public init() {
        let swift = TeamPolicies.EmmState.disabled
        super.init(swift: swift)
    }
}

/// Emm token is optional.
@objc
public class DBXTeamPoliciesEmmStateOptional: DBXTeamPoliciesEmmState {
    @objc
    public init() {
        let swift = TeamPolicies.EmmState.optional
        super.init(swift: swift)
    }
}

/// Emm token is required.
@objc
public class DBXTeamPoliciesEmmStateRequired: DBXTeamPoliciesEmmState {
    @objc
    public init() {
        let swift = TeamPolicies.EmmState.required
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesEmmStateOther: DBXTeamPoliciesEmmState {
    @objc
    public init() {
        let swift = TeamPolicies.EmmState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ExternalDriveBackupPolicyState union
@objc
public class DBXTeamPoliciesExternalDriveBackupPolicyState: NSObject {
    let swift: TeamPolicies.ExternalDriveBackupPolicyState

    public init(swift: TeamPolicies.ExternalDriveBackupPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.ExternalDriveBackupPolicyState) -> DBXTeamPoliciesExternalDriveBackupPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesExternalDriveBackupPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesExternalDriveBackupPolicyStateEnabled()
        case .default_:
            return DBXTeamPoliciesExternalDriveBackupPolicyStateDefault_()
        case .other:
            return DBXTeamPoliciesExternalDriveBackupPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesExternalDriveBackupPolicyStateDisabled? {
        self as? DBXTeamPoliciesExternalDriveBackupPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesExternalDriveBackupPolicyStateEnabled? {
        self as? DBXTeamPoliciesExternalDriveBackupPolicyStateEnabled
    }

    @objc
    public var asDefault_: DBXTeamPoliciesExternalDriveBackupPolicyStateDefault_? {
        self as? DBXTeamPoliciesExternalDriveBackupPolicyStateDefault_
    }

    @objc
    public var asOther: DBXTeamPoliciesExternalDriveBackupPolicyStateOther? {
        self as? DBXTeamPoliciesExternalDriveBackupPolicyStateOther
    }
}

/// External Drive Backup feature is disabled.
@objc
public class DBXTeamPoliciesExternalDriveBackupPolicyStateDisabled: DBXTeamPoliciesExternalDriveBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ExternalDriveBackupPolicyState.disabled
        super.init(swift: swift)
    }
}

/// External Drive Backup feature is enabled.
@objc
public class DBXTeamPoliciesExternalDriveBackupPolicyStateEnabled: DBXTeamPoliciesExternalDriveBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ExternalDriveBackupPolicyState.enabled
        super.init(swift: swift)
    }
}

/// External Drive Backup default value based on team tier.
@objc
public class DBXTeamPoliciesExternalDriveBackupPolicyStateDefault_: DBXTeamPoliciesExternalDriveBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ExternalDriveBackupPolicyState.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesExternalDriveBackupPolicyStateOther: DBXTeamPoliciesExternalDriveBackupPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.ExternalDriveBackupPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible FileLockingPolicyState union
@objc
public class DBXTeamPoliciesFileLockingPolicyState: NSObject {
    let swift: TeamPolicies.FileLockingPolicyState

    public init(swift: TeamPolicies.FileLockingPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.FileLockingPolicyState) -> DBXTeamPoliciesFileLockingPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesFileLockingPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesFileLockingPolicyStateEnabled()
        case .other:
            return DBXTeamPoliciesFileLockingPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesFileLockingPolicyStateDisabled? {
        self as? DBXTeamPoliciesFileLockingPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesFileLockingPolicyStateEnabled? {
        self as? DBXTeamPoliciesFileLockingPolicyStateEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesFileLockingPolicyStateOther? {
        self as? DBXTeamPoliciesFileLockingPolicyStateOther
    }
}

/// File locking feature is disabled.
@objc
public class DBXTeamPoliciesFileLockingPolicyStateDisabled: DBXTeamPoliciesFileLockingPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileLockingPolicyState.disabled
        super.init(swift: swift)
    }
}

/// File locking feature is allowed.
@objc
public class DBXTeamPoliciesFileLockingPolicyStateEnabled: DBXTeamPoliciesFileLockingPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileLockingPolicyState.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesFileLockingPolicyStateOther: DBXTeamPoliciesFileLockingPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileLockingPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible FileProviderMigrationPolicyState union
@objc
public class DBXTeamPoliciesFileProviderMigrationPolicyState: NSObject {
    let swift: TeamPolicies.FileProviderMigrationPolicyState

    public init(swift: TeamPolicies.FileProviderMigrationPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.FileProviderMigrationPolicyState) -> DBXTeamPoliciesFileProviderMigrationPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesFileProviderMigrationPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesFileProviderMigrationPolicyStateEnabled()
        case .default_:
            return DBXTeamPoliciesFileProviderMigrationPolicyStateDefault_()
        case .other:
            return DBXTeamPoliciesFileProviderMigrationPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesFileProviderMigrationPolicyStateDisabled? {
        self as? DBXTeamPoliciesFileProviderMigrationPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesFileProviderMigrationPolicyStateEnabled? {
        self as? DBXTeamPoliciesFileProviderMigrationPolicyStateEnabled
    }

    @objc
    public var asDefault_: DBXTeamPoliciesFileProviderMigrationPolicyStateDefault_? {
        self as? DBXTeamPoliciesFileProviderMigrationPolicyStateDefault_
    }

    @objc
    public var asOther: DBXTeamPoliciesFileProviderMigrationPolicyStateOther? {
        self as? DBXTeamPoliciesFileProviderMigrationPolicyStateOther
    }
}

/// Team admin has opted out of File Provider Migration for team members.
@objc
public class DBXTeamPoliciesFileProviderMigrationPolicyStateDisabled: DBXTeamPoliciesFileProviderMigrationPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileProviderMigrationPolicyState.disabled
        super.init(swift: swift)
    }
}

/// Team admin has not opted out of File Provider Migration for team members.
@objc
public class DBXTeamPoliciesFileProviderMigrationPolicyStateEnabled: DBXTeamPoliciesFileProviderMigrationPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileProviderMigrationPolicyState.enabled
        super.init(swift: swift)
    }
}

/// Team admin has default value based on team tier.
@objc
public class DBXTeamPoliciesFileProviderMigrationPolicyStateDefault_: DBXTeamPoliciesFileProviderMigrationPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileProviderMigrationPolicyState.default_
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesFileProviderMigrationPolicyStateOther: DBXTeamPoliciesFileProviderMigrationPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.FileProviderMigrationPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible GroupCreation union
@objc
public class DBXTeamPoliciesGroupCreation: NSObject {
    let swift: TeamPolicies.GroupCreation

    public init(swift: TeamPolicies.GroupCreation) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.GroupCreation) -> DBXTeamPoliciesGroupCreation {
        switch swift {
        case .adminsAndMembers:
            return DBXTeamPoliciesGroupCreationAdminsAndMembers()
        case .adminsOnly:
            return DBXTeamPoliciesGroupCreationAdminsOnly()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asAdminsAndMembers: DBXTeamPoliciesGroupCreationAdminsAndMembers? {
        self as? DBXTeamPoliciesGroupCreationAdminsAndMembers
    }

    @objc
    public var asAdminsOnly: DBXTeamPoliciesGroupCreationAdminsOnly? {
        self as? DBXTeamPoliciesGroupCreationAdminsOnly
    }
}

/// Team admins and members can create groups.
@objc
public class DBXTeamPoliciesGroupCreationAdminsAndMembers: DBXTeamPoliciesGroupCreation {
    @objc
    public init() {
        let swift = TeamPolicies.GroupCreation.adminsAndMembers
        super.init(swift: swift)
    }
}

/// Only team admins can create groups.
@objc
public class DBXTeamPoliciesGroupCreationAdminsOnly: DBXTeamPoliciesGroupCreation {
    @objc
    public init() {
        let swift = TeamPolicies.GroupCreation.adminsOnly
        super.init(swift: swift)
    }
}

/// Objective-C compatible OfficeAddInPolicy union
@objc
public class DBXTeamPoliciesOfficeAddInPolicy: NSObject {
    let swift: TeamPolicies.OfficeAddInPolicy

    public init(swift: TeamPolicies.OfficeAddInPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.OfficeAddInPolicy) -> DBXTeamPoliciesOfficeAddInPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesOfficeAddInPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesOfficeAddInPolicyEnabled()
        case .other:
            return DBXTeamPoliciesOfficeAddInPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesOfficeAddInPolicyDisabled? {
        self as? DBXTeamPoliciesOfficeAddInPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesOfficeAddInPolicyEnabled? {
        self as? DBXTeamPoliciesOfficeAddInPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesOfficeAddInPolicyOther? {
        self as? DBXTeamPoliciesOfficeAddInPolicyOther
    }
}

/// Office Add-In is disabled.
@objc
public class DBXTeamPoliciesOfficeAddInPolicyDisabled: DBXTeamPoliciesOfficeAddInPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.OfficeAddInPolicy.disabled
        super.init(swift: swift)
    }
}

/// Office Add-In is enabled.
@objc
public class DBXTeamPoliciesOfficeAddInPolicyEnabled: DBXTeamPoliciesOfficeAddInPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.OfficeAddInPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesOfficeAddInPolicyOther: DBXTeamPoliciesOfficeAddInPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.OfficeAddInPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PaperDefaultFolderPolicy union
@objc
public class DBXTeamPoliciesPaperDefaultFolderPolicy: NSObject {
    let swift: TeamPolicies.PaperDefaultFolderPolicy

    public init(swift: TeamPolicies.PaperDefaultFolderPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PaperDefaultFolderPolicy) -> DBXTeamPoliciesPaperDefaultFolderPolicy {
        switch swift {
        case .everyoneInTeam:
            return DBXTeamPoliciesPaperDefaultFolderPolicyEveryoneInTeam()
        case .inviteOnly:
            return DBXTeamPoliciesPaperDefaultFolderPolicyInviteOnly()
        case .other:
            return DBXTeamPoliciesPaperDefaultFolderPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asEveryoneInTeam: DBXTeamPoliciesPaperDefaultFolderPolicyEveryoneInTeam? {
        self as? DBXTeamPoliciesPaperDefaultFolderPolicyEveryoneInTeam
    }

    @objc
    public var asInviteOnly: DBXTeamPoliciesPaperDefaultFolderPolicyInviteOnly? {
        self as? DBXTeamPoliciesPaperDefaultFolderPolicyInviteOnly
    }

    @objc
    public var asOther: DBXTeamPoliciesPaperDefaultFolderPolicyOther? {
        self as? DBXTeamPoliciesPaperDefaultFolderPolicyOther
    }
}

/// Everyone in team will be the default option when creating a folder in Paper.
@objc
public class DBXTeamPoliciesPaperDefaultFolderPolicyEveryoneInTeam: DBXTeamPoliciesPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDefaultFolderPolicy.everyoneInTeam
        super.init(swift: swift)
    }
}

/// Invite only will be the default option when creating a folder in Paper.
@objc
public class DBXTeamPoliciesPaperDefaultFolderPolicyInviteOnly: DBXTeamPoliciesPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDefaultFolderPolicy.inviteOnly
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPaperDefaultFolderPolicyOther: DBXTeamPoliciesPaperDefaultFolderPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDefaultFolderPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PaperDeploymentPolicy union
@objc
public class DBXTeamPoliciesPaperDeploymentPolicy: NSObject {
    let swift: TeamPolicies.PaperDeploymentPolicy

    public init(swift: TeamPolicies.PaperDeploymentPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PaperDeploymentPolicy) -> DBXTeamPoliciesPaperDeploymentPolicy {
        switch swift {
        case .full:
            return DBXTeamPoliciesPaperDeploymentPolicyFull()
        case .partial:
            return DBXTeamPoliciesPaperDeploymentPolicyPartial()
        case .other:
            return DBXTeamPoliciesPaperDeploymentPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFull: DBXTeamPoliciesPaperDeploymentPolicyFull? {
        self as? DBXTeamPoliciesPaperDeploymentPolicyFull
    }

    @objc
    public var asPartial: DBXTeamPoliciesPaperDeploymentPolicyPartial? {
        self as? DBXTeamPoliciesPaperDeploymentPolicyPartial
    }

    @objc
    public var asOther: DBXTeamPoliciesPaperDeploymentPolicyOther? {
        self as? DBXTeamPoliciesPaperDeploymentPolicyOther
    }
}

/// All team members have access to Paper.
@objc
public class DBXTeamPoliciesPaperDeploymentPolicyFull: DBXTeamPoliciesPaperDeploymentPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDeploymentPolicy.full
        super.init(swift: swift)
    }
}

/// Only whitelisted team members can access Paper. To see which user is whitelisted, check
/// 'is_paper_whitelisted' on 'account/info'.
@objc
public class DBXTeamPoliciesPaperDeploymentPolicyPartial: DBXTeamPoliciesPaperDeploymentPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDeploymentPolicy.partial
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPaperDeploymentPolicyOther: DBXTeamPoliciesPaperDeploymentPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDeploymentPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PaperDesktopPolicy union
@objc
public class DBXTeamPoliciesPaperDesktopPolicy: NSObject {
    let swift: TeamPolicies.PaperDesktopPolicy

    public init(swift: TeamPolicies.PaperDesktopPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PaperDesktopPolicy) -> DBXTeamPoliciesPaperDesktopPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesPaperDesktopPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesPaperDesktopPolicyEnabled()
        case .other:
            return DBXTeamPoliciesPaperDesktopPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesPaperDesktopPolicyDisabled? {
        self as? DBXTeamPoliciesPaperDesktopPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesPaperDesktopPolicyEnabled? {
        self as? DBXTeamPoliciesPaperDesktopPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesPaperDesktopPolicyOther? {
        self as? DBXTeamPoliciesPaperDesktopPolicyOther
    }
}

/// Do not allow team members to use Paper Desktop.
@objc
public class DBXTeamPoliciesPaperDesktopPolicyDisabled: DBXTeamPoliciesPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDesktopPolicy.disabled
        super.init(swift: swift)
    }
}

/// Allow team members to use Paper Desktop.
@objc
public class DBXTeamPoliciesPaperDesktopPolicyEnabled: DBXTeamPoliciesPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDesktopPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPaperDesktopPolicyOther: DBXTeamPoliciesPaperDesktopPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperDesktopPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PaperEnabledPolicy union
@objc
public class DBXTeamPoliciesPaperEnabledPolicy: NSObject {
    let swift: TeamPolicies.PaperEnabledPolicy

    public init(swift: TeamPolicies.PaperEnabledPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PaperEnabledPolicy) -> DBXTeamPoliciesPaperEnabledPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesPaperEnabledPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesPaperEnabledPolicyEnabled()
        case .unspecified:
            return DBXTeamPoliciesPaperEnabledPolicyUnspecified()
        case .other:
            return DBXTeamPoliciesPaperEnabledPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesPaperEnabledPolicyDisabled? {
        self as? DBXTeamPoliciesPaperEnabledPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesPaperEnabledPolicyEnabled? {
        self as? DBXTeamPoliciesPaperEnabledPolicyEnabled
    }

    @objc
    public var asUnspecified: DBXTeamPoliciesPaperEnabledPolicyUnspecified? {
        self as? DBXTeamPoliciesPaperEnabledPolicyUnspecified
    }

    @objc
    public var asOther: DBXTeamPoliciesPaperEnabledPolicyOther? {
        self as? DBXTeamPoliciesPaperEnabledPolicyOther
    }
}

/// Paper is disabled.
@objc
public class DBXTeamPoliciesPaperEnabledPolicyDisabled: DBXTeamPoliciesPaperEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperEnabledPolicy.disabled
        super.init(swift: swift)
    }
}

/// Paper is enabled.
@objc
public class DBXTeamPoliciesPaperEnabledPolicyEnabled: DBXTeamPoliciesPaperEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperEnabledPolicy.enabled
        super.init(swift: swift)
    }
}

/// Unspecified policy.
@objc
public class DBXTeamPoliciesPaperEnabledPolicyUnspecified: DBXTeamPoliciesPaperEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperEnabledPolicy.unspecified
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPaperEnabledPolicyOther: DBXTeamPoliciesPaperEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PaperEnabledPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PasswordControlMode union
@objc
public class DBXTeamPoliciesPasswordControlMode: NSObject {
    let swift: TeamPolicies.PasswordControlMode

    public init(swift: TeamPolicies.PasswordControlMode) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PasswordControlMode) -> DBXTeamPoliciesPasswordControlMode {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesPasswordControlModeDisabled()
        case .enabled:
            return DBXTeamPoliciesPasswordControlModeEnabled()
        case .other:
            return DBXTeamPoliciesPasswordControlModeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesPasswordControlModeDisabled? {
        self as? DBXTeamPoliciesPasswordControlModeDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesPasswordControlModeEnabled? {
        self as? DBXTeamPoliciesPasswordControlModeEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesPasswordControlModeOther? {
        self as? DBXTeamPoliciesPasswordControlModeOther
    }
}

/// Password is disabled.
@objc
public class DBXTeamPoliciesPasswordControlModeDisabled: DBXTeamPoliciesPasswordControlMode {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordControlMode.disabled
        super.init(swift: swift)
    }
}

/// Password is enabled.
@objc
public class DBXTeamPoliciesPasswordControlModeEnabled: DBXTeamPoliciesPasswordControlMode {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordControlMode.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPasswordControlModeOther: DBXTeamPoliciesPasswordControlMode {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordControlMode.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PasswordStrengthPolicy union
@objc
public class DBXTeamPoliciesPasswordStrengthPolicy: NSObject {
    let swift: TeamPolicies.PasswordStrengthPolicy

    public init(swift: TeamPolicies.PasswordStrengthPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.PasswordStrengthPolicy) -> DBXTeamPoliciesPasswordStrengthPolicy {
        switch swift {
        case .minimalRequirements:
            return DBXTeamPoliciesPasswordStrengthPolicyMinimalRequirements()
        case .moderatePassword:
            return DBXTeamPoliciesPasswordStrengthPolicyModeratePassword()
        case .strongPassword:
            return DBXTeamPoliciesPasswordStrengthPolicyStrongPassword()
        case .other:
            return DBXTeamPoliciesPasswordStrengthPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asMinimalRequirements: DBXTeamPoliciesPasswordStrengthPolicyMinimalRequirements? {
        self as? DBXTeamPoliciesPasswordStrengthPolicyMinimalRequirements
    }

    @objc
    public var asModeratePassword: DBXTeamPoliciesPasswordStrengthPolicyModeratePassword? {
        self as? DBXTeamPoliciesPasswordStrengthPolicyModeratePassword
    }

    @objc
    public var asStrongPassword: DBXTeamPoliciesPasswordStrengthPolicyStrongPassword? {
        self as? DBXTeamPoliciesPasswordStrengthPolicyStrongPassword
    }

    @objc
    public var asOther: DBXTeamPoliciesPasswordStrengthPolicyOther? {
        self as? DBXTeamPoliciesPasswordStrengthPolicyOther
    }
}

/// User passwords will adhere to the minimal password strength policy.
@objc
public class DBXTeamPoliciesPasswordStrengthPolicyMinimalRequirements: DBXTeamPoliciesPasswordStrengthPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordStrengthPolicy.minimalRequirements
        super.init(swift: swift)
    }
}

/// User passwords will adhere to the moderate password strength policy.
@objc
public class DBXTeamPoliciesPasswordStrengthPolicyModeratePassword: DBXTeamPoliciesPasswordStrengthPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordStrengthPolicy.moderatePassword
        super.init(swift: swift)
    }
}

/// User passwords will adhere to the very strong password strength policy.
@objc
public class DBXTeamPoliciesPasswordStrengthPolicyStrongPassword: DBXTeamPoliciesPasswordStrengthPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordStrengthPolicy.strongPassword
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesPasswordStrengthPolicyOther: DBXTeamPoliciesPasswordStrengthPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.PasswordStrengthPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible RolloutMethod union
@objc
public class DBXTeamPoliciesRolloutMethod: NSObject {
    let swift: TeamPolicies.RolloutMethod

    public init(swift: TeamPolicies.RolloutMethod) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.RolloutMethod) -> DBXTeamPoliciesRolloutMethod {
        switch swift {
        case .unlinkAll:
            return DBXTeamPoliciesRolloutMethodUnlinkAll()
        case .unlinkMostInactive:
            return DBXTeamPoliciesRolloutMethodUnlinkMostInactive()
        case .addMemberToExceptions:
            return DBXTeamPoliciesRolloutMethodAddMemberToExceptions()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asUnlinkAll: DBXTeamPoliciesRolloutMethodUnlinkAll? {
        self as? DBXTeamPoliciesRolloutMethodUnlinkAll
    }

    @objc
    public var asUnlinkMostInactive: DBXTeamPoliciesRolloutMethodUnlinkMostInactive? {
        self as? DBXTeamPoliciesRolloutMethodUnlinkMostInactive
    }

    @objc
    public var asAddMemberToExceptions: DBXTeamPoliciesRolloutMethodAddMemberToExceptions? {
        self as? DBXTeamPoliciesRolloutMethodAddMemberToExceptions
    }
}

/// Unlink all.
@objc
public class DBXTeamPoliciesRolloutMethodUnlinkAll: DBXTeamPoliciesRolloutMethod {
    @objc
    public init() {
        let swift = TeamPolicies.RolloutMethod.unlinkAll
        super.init(swift: swift)
    }
}

/// Unlink devices with the most inactivity.
@objc
public class DBXTeamPoliciesRolloutMethodUnlinkMostInactive: DBXTeamPoliciesRolloutMethod {
    @objc
    public init() {
        let swift = TeamPolicies.RolloutMethod.unlinkMostInactive
        super.init(swift: swift)
    }
}

/// Add member to Exceptions.
@objc
public class DBXTeamPoliciesRolloutMethodAddMemberToExceptions: DBXTeamPoliciesRolloutMethod {
    @objc
    public init() {
        let swift = TeamPolicies.RolloutMethod.addMemberToExceptions
        super.init(swift: swift)
    }
}

/// Policy governing whether shared folder membership is required to access shared links.
@objc
public class DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy: NSObject {
    let swift: TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy

    public init(swift: TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy) -> DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy {
        switch swift {
        case .members:
            return DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyMembers()
        case .anyone:
            return DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyAnyone()
        case .other:
            return DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asMembers: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyMembers? {
        self as? DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyMembers
    }

    @objc
    public var asAnyone: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyAnyone? {
        self as? DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyAnyone
    }

    @objc
    public var asOther: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyOther? {
        self as? DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyOther
    }
}

/// Only members of shared folders can access folder content via shared link.
@objc
public class DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyMembers: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy.members
        super.init(swift: swift)
    }
}

/// Anyone can access folder content via shared link.
@objc
public class DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyAnyone: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy.anyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicyOther: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy.other
        super.init(swift: swift)
    }
}

/// Policy governing which shared folders a team member can join.
@objc
public class DBXTeamPoliciesSharedFolderJoinPolicy: NSObject {
    let swift: TeamPolicies.SharedFolderJoinPolicy

    public init(swift: TeamPolicies.SharedFolderJoinPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SharedFolderJoinPolicy) -> DBXTeamPoliciesSharedFolderJoinPolicy {
        switch swift {
        case .fromTeamOnly:
            return DBXTeamPoliciesSharedFolderJoinPolicyFromTeamOnly()
        case .fromAnyone:
            return DBXTeamPoliciesSharedFolderJoinPolicyFromAnyone()
        case .other:
            return DBXTeamPoliciesSharedFolderJoinPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asFromTeamOnly: DBXTeamPoliciesSharedFolderJoinPolicyFromTeamOnly? {
        self as? DBXTeamPoliciesSharedFolderJoinPolicyFromTeamOnly
    }

    @objc
    public var asFromAnyone: DBXTeamPoliciesSharedFolderJoinPolicyFromAnyone? {
        self as? DBXTeamPoliciesSharedFolderJoinPolicyFromAnyone
    }

    @objc
    public var asOther: DBXTeamPoliciesSharedFolderJoinPolicyOther? {
        self as? DBXTeamPoliciesSharedFolderJoinPolicyOther
    }
}

/// Team members can only join folders shared by teammates.
@objc
public class DBXTeamPoliciesSharedFolderJoinPolicyFromTeamOnly: DBXTeamPoliciesSharedFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderJoinPolicy.fromTeamOnly
        super.init(swift: swift)
    }
}

/// Team members can join any shared folder, including those shared by users outside the team.
@objc
public class DBXTeamPoliciesSharedFolderJoinPolicyFromAnyone: DBXTeamPoliciesSharedFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderJoinPolicy.fromAnyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSharedFolderJoinPolicyOther: DBXTeamPoliciesSharedFolderJoinPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderJoinPolicy.other
        super.init(swift: swift)
    }
}

/// Policy governing who can be a member of a folder shared by a team member.
@objc
public class DBXTeamPoliciesSharedFolderMemberPolicy: NSObject {
    let swift: TeamPolicies.SharedFolderMemberPolicy

    public init(swift: TeamPolicies.SharedFolderMemberPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SharedFolderMemberPolicy) -> DBXTeamPoliciesSharedFolderMemberPolicy {
        switch swift {
        case .team:
            return DBXTeamPoliciesSharedFolderMemberPolicyTeam()
        case .anyone:
            return DBXTeamPoliciesSharedFolderMemberPolicyAnyone()
        case .other:
            return DBXTeamPoliciesSharedFolderMemberPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTeam: DBXTeamPoliciesSharedFolderMemberPolicyTeam? {
        self as? DBXTeamPoliciesSharedFolderMemberPolicyTeam
    }

    @objc
    public var asAnyone: DBXTeamPoliciesSharedFolderMemberPolicyAnyone? {
        self as? DBXTeamPoliciesSharedFolderMemberPolicyAnyone
    }

    @objc
    public var asOther: DBXTeamPoliciesSharedFolderMemberPolicyOther? {
        self as? DBXTeamPoliciesSharedFolderMemberPolicyOther
    }
}

/// Only a teammate can be a member of a folder shared by a team member.
@objc
public class DBXTeamPoliciesSharedFolderMemberPolicyTeam: DBXTeamPoliciesSharedFolderMemberPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderMemberPolicy.team
        super.init(swift: swift)
    }
}

/// Anyone can be a member of a folder shared by a team member.
@objc
public class DBXTeamPoliciesSharedFolderMemberPolicyAnyone: DBXTeamPoliciesSharedFolderMemberPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderMemberPolicy.anyone
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSharedFolderMemberPolicyOther: DBXTeamPoliciesSharedFolderMemberPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedFolderMemberPolicy.other
        super.init(swift: swift)
    }
}

/// Policy governing the visibility of shared links. This policy can apply to newly created shared links, or all
/// shared links.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicy: NSObject {
    let swift: TeamPolicies.SharedLinkCreatePolicy

    public init(swift: TeamPolicies.SharedLinkCreatePolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SharedLinkCreatePolicy) -> DBXTeamPoliciesSharedLinkCreatePolicy {
        switch swift {
        case .defaultPublic:
            return DBXTeamPoliciesSharedLinkCreatePolicyDefaultPublic()
        case .defaultTeamOnly:
            return DBXTeamPoliciesSharedLinkCreatePolicyDefaultTeamOnly()
        case .teamOnly:
            return DBXTeamPoliciesSharedLinkCreatePolicyTeamOnly()
        case .defaultNoOne:
            return DBXTeamPoliciesSharedLinkCreatePolicyDefaultNoOne()
        case .other:
            return DBXTeamPoliciesSharedLinkCreatePolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDefaultPublic: DBXTeamPoliciesSharedLinkCreatePolicyDefaultPublic? {
        self as? DBXTeamPoliciesSharedLinkCreatePolicyDefaultPublic
    }

    @objc
    public var asDefaultTeamOnly: DBXTeamPoliciesSharedLinkCreatePolicyDefaultTeamOnly? {
        self as? DBXTeamPoliciesSharedLinkCreatePolicyDefaultTeamOnly
    }

    @objc
    public var asTeamOnly: DBXTeamPoliciesSharedLinkCreatePolicyTeamOnly? {
        self as? DBXTeamPoliciesSharedLinkCreatePolicyTeamOnly
    }

    @objc
    public var asDefaultNoOne: DBXTeamPoliciesSharedLinkCreatePolicyDefaultNoOne? {
        self as? DBXTeamPoliciesSharedLinkCreatePolicyDefaultNoOne
    }

    @objc
    public var asOther: DBXTeamPoliciesSharedLinkCreatePolicyOther? {
        self as? DBXTeamPoliciesSharedLinkCreatePolicyOther
    }
}

/// By default, anyone can access newly created shared links. No login will be required to access the shared
/// links unless overridden.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicyDefaultPublic: DBXTeamPoliciesSharedLinkCreatePolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedLinkCreatePolicy.defaultPublic
        super.init(swift: swift)
    }
}

/// By default, only members of the same team can access newly created shared links. Login will be required to
/// access the shared links unless overridden.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicyDefaultTeamOnly: DBXTeamPoliciesSharedLinkCreatePolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedLinkCreatePolicy.defaultTeamOnly
        super.init(swift: swift)
    }
}

/// Only members of the same team can access all shared links. Login will be required to access all shared
/// links.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicyTeamOnly: DBXTeamPoliciesSharedLinkCreatePolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedLinkCreatePolicy.teamOnly
        super.init(swift: swift)
    }
}

/// Only people invited can access newly created links. Login will be required to access the shared links unless
/// overridden.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicyDefaultNoOne: DBXTeamPoliciesSharedLinkCreatePolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedLinkCreatePolicy.defaultNoOne
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSharedLinkCreatePolicyOther: DBXTeamPoliciesSharedLinkCreatePolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SharedLinkCreatePolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ShowcaseDownloadPolicy union
@objc
public class DBXTeamPoliciesShowcaseDownloadPolicy: NSObject {
    let swift: TeamPolicies.ShowcaseDownloadPolicy

    public init(swift: TeamPolicies.ShowcaseDownloadPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.ShowcaseDownloadPolicy) -> DBXTeamPoliciesShowcaseDownloadPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesShowcaseDownloadPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesShowcaseDownloadPolicyEnabled()
        case .other:
            return DBXTeamPoliciesShowcaseDownloadPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesShowcaseDownloadPolicyDisabled? {
        self as? DBXTeamPoliciesShowcaseDownloadPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesShowcaseDownloadPolicyEnabled? {
        self as? DBXTeamPoliciesShowcaseDownloadPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesShowcaseDownloadPolicyOther? {
        self as? DBXTeamPoliciesShowcaseDownloadPolicyOther
    }
}

/// Do not allow files to be downloaded from Showcases.
@objc
public class DBXTeamPoliciesShowcaseDownloadPolicyDisabled: DBXTeamPoliciesShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseDownloadPolicy.disabled
        super.init(swift: swift)
    }
}

/// Allow files to be downloaded from Showcases.
@objc
public class DBXTeamPoliciesShowcaseDownloadPolicyEnabled: DBXTeamPoliciesShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseDownloadPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesShowcaseDownloadPolicyOther: DBXTeamPoliciesShowcaseDownloadPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseDownloadPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ShowcaseEnabledPolicy union
@objc
public class DBXTeamPoliciesShowcaseEnabledPolicy: NSObject {
    let swift: TeamPolicies.ShowcaseEnabledPolicy

    public init(swift: TeamPolicies.ShowcaseEnabledPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.ShowcaseEnabledPolicy) -> DBXTeamPoliciesShowcaseEnabledPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesShowcaseEnabledPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesShowcaseEnabledPolicyEnabled()
        case .other:
            return DBXTeamPoliciesShowcaseEnabledPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesShowcaseEnabledPolicyDisabled? {
        self as? DBXTeamPoliciesShowcaseEnabledPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesShowcaseEnabledPolicyEnabled? {
        self as? DBXTeamPoliciesShowcaseEnabledPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesShowcaseEnabledPolicyOther? {
        self as? DBXTeamPoliciesShowcaseEnabledPolicyOther
    }
}

/// Showcase is disabled.
@objc
public class DBXTeamPoliciesShowcaseEnabledPolicyDisabled: DBXTeamPoliciesShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseEnabledPolicy.disabled
        super.init(swift: swift)
    }
}

/// Showcase is enabled.
@objc
public class DBXTeamPoliciesShowcaseEnabledPolicyEnabled: DBXTeamPoliciesShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseEnabledPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesShowcaseEnabledPolicyOther: DBXTeamPoliciesShowcaseEnabledPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseEnabledPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible ShowcaseExternalSharingPolicy union
@objc
public class DBXTeamPoliciesShowcaseExternalSharingPolicy: NSObject {
    let swift: TeamPolicies.ShowcaseExternalSharingPolicy

    public init(swift: TeamPolicies.ShowcaseExternalSharingPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.ShowcaseExternalSharingPolicy) -> DBXTeamPoliciesShowcaseExternalSharingPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesShowcaseExternalSharingPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesShowcaseExternalSharingPolicyEnabled()
        case .other:
            return DBXTeamPoliciesShowcaseExternalSharingPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesShowcaseExternalSharingPolicyDisabled? {
        self as? DBXTeamPoliciesShowcaseExternalSharingPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesShowcaseExternalSharingPolicyEnabled? {
        self as? DBXTeamPoliciesShowcaseExternalSharingPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesShowcaseExternalSharingPolicyOther? {
        self as? DBXTeamPoliciesShowcaseExternalSharingPolicyOther
    }
}

/// Do not allow showcases to be shared with people not on the team.
@objc
public class DBXTeamPoliciesShowcaseExternalSharingPolicyDisabled: DBXTeamPoliciesShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseExternalSharingPolicy.disabled
        super.init(swift: swift)
    }
}

/// Allow showcases to be shared with people not on the team.
@objc
public class DBXTeamPoliciesShowcaseExternalSharingPolicyEnabled: DBXTeamPoliciesShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseExternalSharingPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesShowcaseExternalSharingPolicyOther: DBXTeamPoliciesShowcaseExternalSharingPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.ShowcaseExternalSharingPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SmartSyncPolicy union
@objc
public class DBXTeamPoliciesSmartSyncPolicy: NSObject {
    let swift: TeamPolicies.SmartSyncPolicy

    public init(swift: TeamPolicies.SmartSyncPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SmartSyncPolicy) -> DBXTeamPoliciesSmartSyncPolicy {
        switch swift {
        case .local:
            return DBXTeamPoliciesSmartSyncPolicyLocal()
        case .onDemand:
            return DBXTeamPoliciesSmartSyncPolicyOnDemand()
        case .other:
            return DBXTeamPoliciesSmartSyncPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asLocal: DBXTeamPoliciesSmartSyncPolicyLocal? {
        self as? DBXTeamPoliciesSmartSyncPolicyLocal
    }

    @objc
    public var asOnDemand: DBXTeamPoliciesSmartSyncPolicyOnDemand? {
        self as? DBXTeamPoliciesSmartSyncPolicyOnDemand
    }

    @objc
    public var asOther: DBXTeamPoliciesSmartSyncPolicyOther? {
        self as? DBXTeamPoliciesSmartSyncPolicyOther
    }
}

/// The specified content will be synced as local files by default.
@objc
public class DBXTeamPoliciesSmartSyncPolicyLocal: DBXTeamPoliciesSmartSyncPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SmartSyncPolicy.local
        super.init(swift: swift)
    }
}

/// The specified content will be synced as on-demand files by default.
@objc
public class DBXTeamPoliciesSmartSyncPolicyOnDemand: DBXTeamPoliciesSmartSyncPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SmartSyncPolicy.onDemand
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSmartSyncPolicyOther: DBXTeamPoliciesSmartSyncPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SmartSyncPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SmarterSmartSyncPolicyState union
@objc
public class DBXTeamPoliciesSmarterSmartSyncPolicyState: NSObject {
    let swift: TeamPolicies.SmarterSmartSyncPolicyState

    public init(swift: TeamPolicies.SmarterSmartSyncPolicyState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SmarterSmartSyncPolicyState) -> DBXTeamPoliciesSmarterSmartSyncPolicyState {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesSmarterSmartSyncPolicyStateDisabled()
        case .enabled:
            return DBXTeamPoliciesSmarterSmartSyncPolicyStateEnabled()
        case .other:
            return DBXTeamPoliciesSmarterSmartSyncPolicyStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesSmarterSmartSyncPolicyStateDisabled? {
        self as? DBXTeamPoliciesSmarterSmartSyncPolicyStateDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesSmarterSmartSyncPolicyStateEnabled? {
        self as? DBXTeamPoliciesSmarterSmartSyncPolicyStateEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesSmarterSmartSyncPolicyStateOther? {
        self as? DBXTeamPoliciesSmarterSmartSyncPolicyStateOther
    }
}

/// Smarter Smart Sync feature is disabled.
@objc
public class DBXTeamPoliciesSmarterSmartSyncPolicyStateDisabled: DBXTeamPoliciesSmarterSmartSyncPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.SmarterSmartSyncPolicyState.disabled
        super.init(swift: swift)
    }
}

/// Smarter Smart Sync feature is enabled.
@objc
public class DBXTeamPoliciesSmarterSmartSyncPolicyStateEnabled: DBXTeamPoliciesSmarterSmartSyncPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.SmarterSmartSyncPolicyState.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSmarterSmartSyncPolicyStateOther: DBXTeamPoliciesSmarterSmartSyncPolicyState {
    @objc
    public init() {
        let swift = TeamPolicies.SmarterSmartSyncPolicyState.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SsoPolicy union
@objc
public class DBXTeamPoliciesSsoPolicy: NSObject {
    let swift: TeamPolicies.SsoPolicy

    public init(swift: TeamPolicies.SsoPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SsoPolicy) -> DBXTeamPoliciesSsoPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesSsoPolicyDisabled()
        case .optional:
            return DBXTeamPoliciesSsoPolicyOptional()
        case .required:
            return DBXTeamPoliciesSsoPolicyRequired()
        case .other:
            return DBXTeamPoliciesSsoPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesSsoPolicyDisabled? {
        self as? DBXTeamPoliciesSsoPolicyDisabled
    }

    @objc
    public var asOptional: DBXTeamPoliciesSsoPolicyOptional? {
        self as? DBXTeamPoliciesSsoPolicyOptional
    }

    @objc
    public var asRequired: DBXTeamPoliciesSsoPolicyRequired? {
        self as? DBXTeamPoliciesSsoPolicyRequired
    }

    @objc
    public var asOther: DBXTeamPoliciesSsoPolicyOther? {
        self as? DBXTeamPoliciesSsoPolicyOther
    }
}

/// Users will be able to sign in with their Dropbox credentials.
@objc
public class DBXTeamPoliciesSsoPolicyDisabled: DBXTeamPoliciesSsoPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SsoPolicy.disabled
        super.init(swift: swift)
    }
}

/// Users will be able to sign in with either their Dropbox or single sign-on credentials.
@objc
public class DBXTeamPoliciesSsoPolicyOptional: DBXTeamPoliciesSsoPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SsoPolicy.optional
        super.init(swift: swift)
    }
}

/// Users will be required to sign in with their single sign-on credentials.
@objc
public class DBXTeamPoliciesSsoPolicyRequired: DBXTeamPoliciesSsoPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SsoPolicy.required
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSsoPolicyOther: DBXTeamPoliciesSsoPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SsoPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible SuggestMembersPolicy union
@objc
public class DBXTeamPoliciesSuggestMembersPolicy: NSObject {
    let swift: TeamPolicies.SuggestMembersPolicy

    public init(swift: TeamPolicies.SuggestMembersPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.SuggestMembersPolicy) -> DBXTeamPoliciesSuggestMembersPolicy {
        switch swift {
        case .disabled:
            return DBXTeamPoliciesSuggestMembersPolicyDisabled()
        case .enabled:
            return DBXTeamPoliciesSuggestMembersPolicyEnabled()
        case .other:
            return DBXTeamPoliciesSuggestMembersPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asDisabled: DBXTeamPoliciesSuggestMembersPolicyDisabled? {
        self as? DBXTeamPoliciesSuggestMembersPolicyDisabled
    }

    @objc
    public var asEnabled: DBXTeamPoliciesSuggestMembersPolicyEnabled? {
        self as? DBXTeamPoliciesSuggestMembersPolicyEnabled
    }

    @objc
    public var asOther: DBXTeamPoliciesSuggestMembersPolicyOther? {
        self as? DBXTeamPoliciesSuggestMembersPolicyOther
    }
}

/// Suggest members is disabled.
@objc
public class DBXTeamPoliciesSuggestMembersPolicyDisabled: DBXTeamPoliciesSuggestMembersPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SuggestMembersPolicy.disabled
        super.init(swift: swift)
    }
}

/// Suggest members is enabled.
@objc
public class DBXTeamPoliciesSuggestMembersPolicyEnabled: DBXTeamPoliciesSuggestMembersPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SuggestMembersPolicy.enabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesSuggestMembersPolicyOther: DBXTeamPoliciesSuggestMembersPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.SuggestMembersPolicy.other
        super.init(swift: swift)
    }
}

/// Policies governing team members.
@objc
public class DBXTeamPoliciesTeamMemberPolicies: NSObject {
    /// Policies governing sharing.
    @objc
    public var sharing: DBXTeamPoliciesTeamSharingPolicies { DBXTeamPoliciesTeamSharingPolicies(swift: swift.sharing) }
    /// This describes the Enterprise Mobility Management (EMM) state for this team. This information can be used to
    /// understand if an organization is integrating with a third-party EMM vendor to further manage and apply
    /// restrictions upon the team's Dropbox usage on mobile devices. This is a new feature and in the future
    /// we'll be adding more new fields and additional documentation.
    @objc
    public var emmState: DBXTeamPoliciesEmmState { DBXTeamPoliciesEmmState(swift: swift.emmState) }
    /// The admin policy around the Dropbox Office Add-In for this team.
    @objc
    public var officeAddin: DBXTeamPoliciesOfficeAddInPolicy { DBXTeamPoliciesOfficeAddInPolicy(swift: swift.officeAddin) }
    /// The team policy on if teammembers are allowed to suggest users for admins to invite to the team.
    @objc
    public var suggestMembersPolicy: DBXTeamPoliciesSuggestMembersPolicy { DBXTeamPoliciesSuggestMembersPolicy(swift: swift.suggestMembersPolicy) }

    @objc
    public init(
        sharing: DBXTeamPoliciesTeamSharingPolicies,
        emmState: DBXTeamPoliciesEmmState,
        officeAddin: DBXTeamPoliciesOfficeAddInPolicy,
        suggestMembersPolicy: DBXTeamPoliciesSuggestMembersPolicy
    ) {
        self.swift = TeamPolicies.TeamMemberPolicies(
            sharing: sharing.swift,
            emmState: emmState.swift,
            officeAddin: officeAddin.swift,
            suggestMembersPolicy: suggestMembersPolicy.swift
        )
    }

    let swift: TeamPolicies.TeamMemberPolicies

    public init(swift: TeamPolicies.TeamMemberPolicies) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Policies governing sharing within and outside of the team.
@objc
public class DBXTeamPoliciesTeamSharingPolicies: NSObject {
    /// Who can join folders shared by team members.
    @objc
    public var sharedFolderMemberPolicy: DBXTeamPoliciesSharedFolderMemberPolicy {
        DBXTeamPoliciesSharedFolderMemberPolicy(swift: swift.sharedFolderMemberPolicy)
    }

    /// Which shared folders team members can join.
    @objc
    public var sharedFolderJoinPolicy: DBXTeamPoliciesSharedFolderJoinPolicy { DBXTeamPoliciesSharedFolderJoinPolicy(swift: swift.sharedFolderJoinPolicy) }
    /// Who can view shared links owned by team members.
    @objc
    public var sharedLinkCreatePolicy: DBXTeamPoliciesSharedLinkCreatePolicy { DBXTeamPoliciesSharedLinkCreatePolicy(swift: swift.sharedLinkCreatePolicy) }
    /// Who can create groups.
    @objc
    public var groupCreationPolicy: DBXTeamPoliciesGroupCreation { DBXTeamPoliciesGroupCreation(swift: swift.groupCreationPolicy) }
    /// Who can view links to content in shared folders.
    @objc
    public var sharedFolderLinkRestrictionPolicy: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy {
        DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy(swift: swift.sharedFolderLinkRestrictionPolicy)
    }

    @objc
    public init(
        sharedFolderMemberPolicy: DBXTeamPoliciesSharedFolderMemberPolicy,
        sharedFolderJoinPolicy: DBXTeamPoliciesSharedFolderJoinPolicy,
        sharedLinkCreatePolicy: DBXTeamPoliciesSharedLinkCreatePolicy,
        groupCreationPolicy: DBXTeamPoliciesGroupCreation,
        sharedFolderLinkRestrictionPolicy: DBXTeamPoliciesSharedFolderBlanketLinkRestrictionPolicy
    ) {
        self.swift = TeamPolicies.TeamSharingPolicies(
            sharedFolderMemberPolicy: sharedFolderMemberPolicy.swift,
            sharedFolderJoinPolicy: sharedFolderJoinPolicy.swift,
            sharedLinkCreatePolicy: sharedLinkCreatePolicy.swift,
            groupCreationPolicy: groupCreationPolicy.swift,
            sharedFolderLinkRestrictionPolicy: sharedFolderLinkRestrictionPolicy.swift
        )
    }

    let swift: TeamPolicies.TeamSharingPolicies

    public init(swift: TeamPolicies.TeamSharingPolicies) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// Objective-C compatible TwoStepVerificationPolicy union
@objc
public class DBXTeamPoliciesTwoStepVerificationPolicy: NSObject {
    let swift: TeamPolicies.TwoStepVerificationPolicy

    public init(swift: TeamPolicies.TwoStepVerificationPolicy) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.TwoStepVerificationPolicy) -> DBXTeamPoliciesTwoStepVerificationPolicy {
        switch swift {
        case .requireTfaEnable:
            return DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaEnable()
        case .requireTfaDisable:
            return DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaDisable()
        case .other:
            return DBXTeamPoliciesTwoStepVerificationPolicyOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asRequireTfaEnable: DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaEnable? {
        self as? DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaEnable
    }

    @objc
    public var asRequireTfaDisable: DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaDisable? {
        self as? DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaDisable
    }

    @objc
    public var asOther: DBXTeamPoliciesTwoStepVerificationPolicyOther? {
        self as? DBXTeamPoliciesTwoStepVerificationPolicyOther
    }
}

/// Enabled require two factor authorization.
@objc
public class DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaEnable: DBXTeamPoliciesTwoStepVerificationPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationPolicy.requireTfaEnable
        super.init(swift: swift)
    }
}

/// Disabled require two factor authorization.
@objc
public class DBXTeamPoliciesTwoStepVerificationPolicyRequireTfaDisable: DBXTeamPoliciesTwoStepVerificationPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationPolicy.requireTfaDisable
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesTwoStepVerificationPolicyOther: DBXTeamPoliciesTwoStepVerificationPolicy {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationPolicy.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible TwoStepVerificationState union
@objc
public class DBXTeamPoliciesTwoStepVerificationState: NSObject {
    let swift: TeamPolicies.TwoStepVerificationState

    public init(swift: TeamPolicies.TwoStepVerificationState) {
        self.swift = swift
    }

    public static func factory(swift: TeamPolicies.TwoStepVerificationState) -> DBXTeamPoliciesTwoStepVerificationState {
        switch swift {
        case .required:
            return DBXTeamPoliciesTwoStepVerificationStateRequired()
        case .optional:
            return DBXTeamPoliciesTwoStepVerificationStateOptional()
        case .disabled:
            return DBXTeamPoliciesTwoStepVerificationStateDisabled()
        case .other:
            return DBXTeamPoliciesTwoStepVerificationStateOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asRequired: DBXTeamPoliciesTwoStepVerificationStateRequired? {
        self as? DBXTeamPoliciesTwoStepVerificationStateRequired
    }

    @objc
    public var asOptional: DBXTeamPoliciesTwoStepVerificationStateOptional? {
        self as? DBXTeamPoliciesTwoStepVerificationStateOptional
    }

    @objc
    public var asDisabled: DBXTeamPoliciesTwoStepVerificationStateDisabled? {
        self as? DBXTeamPoliciesTwoStepVerificationStateDisabled
    }

    @objc
    public var asOther: DBXTeamPoliciesTwoStepVerificationStateOther? {
        self as? DBXTeamPoliciesTwoStepVerificationStateOther
    }
}

/// Enabled require two factor authorization.
@objc
public class DBXTeamPoliciesTwoStepVerificationStateRequired: DBXTeamPoliciesTwoStepVerificationState {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationState.required
        super.init(swift: swift)
    }
}

/// Optional require two factor authorization.
@objc
public class DBXTeamPoliciesTwoStepVerificationStateOptional: DBXTeamPoliciesTwoStepVerificationState {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationState.optional
        super.init(swift: swift)
    }
}

/// Disabled require two factor authorization.
@objc
public class DBXTeamPoliciesTwoStepVerificationStateDisabled: DBXTeamPoliciesTwoStepVerificationState {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationState.disabled
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamPoliciesTwoStepVerificationStateOther: DBXTeamPoliciesTwoStepVerificationState {
    @objc
    public init() {
        let swift = TeamPolicies.TwoStepVerificationState.other
        super.init(swift: swift)
    }
}
