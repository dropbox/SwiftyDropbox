///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXAccountPhotoSourceArgToDBOptional(object: DBXAccountPhotoSourceArg?) -> DBACCOUNTPhotoSourceArg? {
    guard let object = object else { return nil }
    return mapDBXAccountPhotoSourceArgToDB(object: object)
}

func mapDBXAccountPhotoSourceArgToDB(object: DBXAccountPhotoSourceArg) -> DBACCOUNTPhotoSourceArg {
    if let object = object.asBase64Data {
        let base64Data = object.base64Data
        return DBACCOUNTPhotoSourceArg(base64Data: base64Data)
    }
    if object.asOther != nil {
        return DBACCOUNTPhotoSourceArg(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAccountSetProfilePhotoArgToDBOptional(object: DBXAccountSetProfilePhotoArg?) -> DBACCOUNTSetProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBXAccountSetProfilePhotoArgToDB(object: object)
}

func mapDBXAccountSetProfilePhotoArgToDB(object: DBXAccountSetProfilePhotoArg) -> DBACCOUNTSetProfilePhotoArg {
    DBACCOUNTSetProfilePhotoArg(photo: mapDBXAccountPhotoSourceArgToDB(object: object.photo))
}

func mapDBXAccountSetProfilePhotoErrorToDBOptional(object: DBXAccountSetProfilePhotoError?) -> DBACCOUNTSetProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBXAccountSetProfilePhotoErrorToDB(object: object)
}

func mapDBXAccountSetProfilePhotoErrorToDB(object: DBXAccountSetProfilePhotoError) -> DBACCOUNTSetProfilePhotoError {
    if object.asFileTypeError != nil {
        return DBACCOUNTSetProfilePhotoError(fileTypeError: ())
    }
    if object.asFileSizeError != nil {
        return DBACCOUNTSetProfilePhotoError(fileSizeError: ())
    }
    if object.asDimensionError != nil {
        return DBACCOUNTSetProfilePhotoError(dimensionError: ())
    }
    if object.asThumbnailError != nil {
        return DBACCOUNTSetProfilePhotoError(thumbnailError: ())
    }
    if object.asTransientError != nil {
        return DBACCOUNTSetProfilePhotoError(transientError: ())
    }
    if object.asOther != nil {
        return DBACCOUNTSetProfilePhotoError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXAccountSetProfilePhotoResultToDBOptional(object: DBXAccountSetProfilePhotoResult?) -> DBACCOUNTSetProfilePhotoResult? {
    guard let object = object else { return nil }
    return mapDBXAccountSetProfilePhotoResultToDB(object: object)
}

func mapDBXAccountSetProfilePhotoResultToDB(object: DBXAccountSetProfilePhotoResult) -> DBACCOUNTSetProfilePhotoResult {
    DBACCOUNTSetProfilePhotoResult(profilePhotoUrl: object.profilePhotoUrl)
}
