///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBTEAMCOMMONGroupManagementTypeToDBXOptional(object: DBTEAMCOMMONGroupManagementType?) -> DBXTeamCommonGroupManagementType? {
    guard let object = object else { return nil }
    return mapDBTEAMCOMMONGroupManagementTypeToDBX(object: object)
}

func mapDBTEAMCOMMONGroupManagementTypeToDBX(object: DBTEAMCOMMONGroupManagementType) -> DBXTeamCommonGroupManagementType {
    if object.isUserManaged() {
        return DBXTeamCommonGroupManagementTypeUserManaged()
    }
    if object.isCompanyManaged() {
        return DBXTeamCommonGroupManagementTypeCompanyManaged()
    }
    if object.isSystemManaged() {
        return DBXTeamCommonGroupManagementTypeSystemManaged()
    }
    if object.isOther() {
        return DBXTeamCommonGroupManagementTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCOMMONGroupSummaryToDBXOptional(object: DBTEAMCOMMONGroupSummary?) -> DBXTeamCommonGroupSummary? {
    guard let object = object else { return nil }
    return mapDBTEAMCOMMONGroupSummaryToDBX(object: object)
}

func mapDBTEAMCOMMONGroupSummaryToDBX(object: DBTEAMCOMMONGroupSummary) -> DBXTeamCommonGroupSummary {
    DBXTeamCommonGroupSummary(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBTEAMCOMMONGroupManagementTypeToDBX(object: object.groupManagementType),
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount
    )
}

func mapDBTEAMCOMMONGroupTypeToDBXOptional(object: DBTEAMCOMMONGroupType?) -> DBXTeamCommonGroupType? {
    guard let object = object else { return nil }
    return mapDBTEAMCOMMONGroupTypeToDBX(object: object)
}

func mapDBTEAMCOMMONGroupTypeToDBX(object: DBTEAMCOMMONGroupType) -> DBXTeamCommonGroupType {
    if object.isTeam() {
        return DBXTeamCommonGroupTypeTeam()
    }
    if object.isUserManaged() {
        return DBXTeamCommonGroupTypeUserManaged()
    }
    if object.isOther() {
        return DBXTeamCommonGroupTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCOMMONMemberSpaceLimitTypeToDBXOptional(object: DBTEAMCOMMONMemberSpaceLimitType?) -> DBXTeamCommonMemberSpaceLimitType? {
    guard let object = object else { return nil }
    return mapDBTEAMCOMMONMemberSpaceLimitTypeToDBX(object: object)
}

func mapDBTEAMCOMMONMemberSpaceLimitTypeToDBX(object: DBTEAMCOMMONMemberSpaceLimitType) -> DBXTeamCommonMemberSpaceLimitType {
    if object.isOff() {
        return DBXTeamCommonMemberSpaceLimitTypeOff()
    }
    if object.isAlertOnly() {
        return DBXTeamCommonMemberSpaceLimitTypeAlertOnly()
    }
    if object.isStopSync() {
        return DBXTeamCommonMemberSpaceLimitTypeStopSync()
    }
    if object.isOther() {
        return DBXTeamCommonMemberSpaceLimitTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMCOMMONTimeRangeToDBXOptional(object: DBTEAMCOMMONTimeRange?) -> DBXTeamCommonTimeRange? {
    guard let object = object else { return nil }
    return mapDBTEAMCOMMONTimeRangeToDBX(object: object)
}

func mapDBTEAMCOMMONTimeRangeToDBX(object: DBTEAMCOMMONTimeRange) -> DBXTeamCommonTimeRange {
    DBXTeamCommonTimeRange(startTime: object.startTime, endTime: object.endTime)
}
