///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the common namespace
/// For Swift see common

/// Objective-C compatible PathRoot union
@objc
public class DBXCommonPathRoot: NSObject {
    let swift: Common.PathRoot

    public init(swift: Common.PathRoot) {
        self.swift = swift
    }

    public static func factory(swift: Common.PathRoot) -> DBXCommonPathRoot {
        switch swift {
        case .home:
            return DBXCommonPathRootHome()
        case .root(let swiftArg):
            let arg = swiftArg
            return DBXCommonPathRootRoot(arg)
        case .namespaceId(let swiftArg):
            let arg = swiftArg
            return DBXCommonPathRootNamespaceId(arg)
        case .other:
            return DBXCommonPathRootOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asHome: DBXCommonPathRootHome? {
        self as? DBXCommonPathRootHome
    }

    @objc
    public var asRoot: DBXCommonPathRootRoot? {
        self as? DBXCommonPathRootRoot
    }

    @objc
    public var asNamespaceId: DBXCommonPathRootNamespaceId? {
        self as? DBXCommonPathRootNamespaceId
    }

    @objc
    public var asOther: DBXCommonPathRootOther? {
        self as? DBXCommonPathRootOther
    }
}

/// Paths are relative to the authenticating user's home namespace, whether or not that user belongs to a team.
@objc
public class DBXCommonPathRootHome: DBXCommonPathRoot {
    @objc
    public init() {
        let swift = Common.PathRoot.home
        super.init(swift: swift)
    }
}

/// Paths are relative to the authenticating user's root namespace (This results in invalidRoot in PathRootError
/// if the user's root namespace has changed.).
@objc
public class DBXCommonPathRootRoot: DBXCommonPathRoot {
    @objc
    public var root: String

    @objc
    public init(_ arg: String) {
        self.root = arg
        let swift = Common.PathRoot.root(arg)
        super.init(swift: swift)
    }
}

/// Paths are relative to given namespace id (This results in noPermission in PathRootError if you don't have
/// access to this namespace.).
@objc
public class DBXCommonPathRootNamespaceId: DBXCommonPathRoot {
    @objc
    public var namespaceId: String

    @objc
    public init(_ arg: String) {
        self.namespaceId = arg
        let swift = Common.PathRoot.namespaceId(arg)
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXCommonPathRootOther: DBXCommonPathRoot {
    @objc
    public init() {
        let swift = Common.PathRoot.other
        super.init(swift: swift)
    }
}

/// Objective-C compatible PathRootError union
@objc
public class DBXCommonPathRootError: NSObject {
    let swift: Common.PathRootError

    public init(swift: Common.PathRootError) {
        self.swift = swift
    }

    public static func factory(swift: Common.PathRootError) -> DBXCommonPathRootError {
        switch swift {
        case .invalidRoot(let swiftArg):
            let arg = DBXCommonRootInfo(swift: swiftArg)
            return DBXCommonPathRootErrorInvalidRoot(arg)
        case .noPermission:
            return DBXCommonPathRootErrorNoPermission()
        case .other:
            return DBXCommonPathRootErrorOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asInvalidRoot: DBXCommonPathRootErrorInvalidRoot? {
        self as? DBXCommonPathRootErrorInvalidRoot
    }

    @objc
    public var asNoPermission: DBXCommonPathRootErrorNoPermission? {
        self as? DBXCommonPathRootErrorNoPermission
    }

    @objc
    public var asOther: DBXCommonPathRootErrorOther? {
        self as? DBXCommonPathRootErrorOther
    }
}

/// The root namespace id in Dropbox-API-Path-Root header is not valid. The value of this error is the user's
/// latest root info.
@objc
public class DBXCommonPathRootErrorInvalidRoot: DBXCommonPathRootError {
    @objc
    public var invalidRoot: DBXCommonRootInfo

    @objc
    public init(_ arg: DBXCommonRootInfo) {
        self.invalidRoot = arg
        let swift = Common.PathRootError.invalidRoot(arg.swift)
        super.init(swift: swift)
    }
}

/// You don't have permission to access the namespace id in Dropbox-API-Path-Root  header.
@objc
public class DBXCommonPathRootErrorNoPermission: DBXCommonPathRootError {
    @objc
    public init() {
        let swift = Common.PathRootError.noPermission
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXCommonPathRootErrorOther: DBXCommonPathRootError {
    @objc
    public init() {
        let swift = Common.PathRootError.other
        super.init(swift: swift)
    }
}

/// Information about current user's root.
@objc
public class DBXCommonRootInfo: NSObject {
    /// The namespace ID for user's root namespace. It will be the namespace ID of the shared team root if the user
    /// is member of a team with a separate team root. Otherwise it will be same as homeNamespaceId in RootInfo.
    @objc
    public var rootNamespaceId: String { swift.rootNamespaceId }
    /// The namespace ID for user's home namespace.
    @objc
    public var homeNamespaceId: String { swift.homeNamespaceId }

    @objc
    public init(rootNamespaceId: String, homeNamespaceId: String) {
        self.swift = Common.RootInfo(rootNamespaceId: rootNamespaceId, homeNamespaceId: homeNamespaceId)
    }

    let swift: Common.RootInfo

    public init(swift: Common.RootInfo) {
        self.swift = swift
    }

    public static func wrapPreservingSubtypes(swift: Common.RootInfo) -> DBXCommonRootInfo {
        switch swift {
        case let teamRootInfo as Common.TeamRootInfo:
            return DBXCommonTeamRootInfo(swift: teamRootInfo)
        case let userRootInfo as Common.UserRootInfo:
            return DBXCommonUserRootInfo(swift: userRootInfo)
        default:
            return DBXCommonRootInfo(swift: swift)
        }
    }

    @objc
    public override var description: String { swift.description }
}

/// Root info when user is member of a team with a separate root namespace ID.
@objc
public class DBXCommonTeamRootInfo: DBXCommonRootInfo {
    /// The path for user's home directory under the shared team root.
    @objc
    public var homePath: String { subSwift.homePath }

    @objc
    public init(rootNamespaceId: String, homeNamespaceId: String, homePath: String) {
        let swift = Common.TeamRootInfo(rootNamespaceId: rootNamespaceId, homeNamespaceId: homeNamespaceId, homePath: homePath)
        self.subSwift = swift
        super.init(swift: swift)
    }

    let subSwift: Common.TeamRootInfo

    public init(swift: Common.TeamRootInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}

/// Root info when user is not member of a team or the user is a member of a team and the team does not have a
/// separate root namespace.
@objc
public class DBXCommonUserRootInfo: DBXCommonRootInfo {
    let subSwift: Common.UserRootInfo

    public init(swift: Common.UserRootInfo) {
        self.subSwift = swift
        super.init(swift: swift)
    }

    @objc
    public override var description: String { subSwift.description }
}
