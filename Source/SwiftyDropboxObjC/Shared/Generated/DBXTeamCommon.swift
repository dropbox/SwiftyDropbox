///
/// Copyright (c) 2022 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import SwiftyDropbox

/// Objective-C compatible datatypes for the team_common namespace
/// For Swift see team_common

/// The group type determines how a group is managed.
@objc
public class DBXTeamCommonGroupManagementType: NSObject {
    let swift: TeamCommon.GroupManagementType

    public init(swift: TeamCommon.GroupManagementType) {
        self.swift = swift
    }

    public static func factory(swift: TeamCommon.GroupManagementType) -> DBXTeamCommonGroupManagementType {
        switch swift {
        case .userManaged:
            return DBXTeamCommonGroupManagementTypeUserManaged()
        case .companyManaged:
            return DBXTeamCommonGroupManagementTypeCompanyManaged()
        case .systemManaged:
            return DBXTeamCommonGroupManagementTypeSystemManaged()
        case .other:
            return DBXTeamCommonGroupManagementTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asUserManaged: DBXTeamCommonGroupManagementTypeUserManaged? {
        self as? DBXTeamCommonGroupManagementTypeUserManaged
    }

    @objc
    public var asCompanyManaged: DBXTeamCommonGroupManagementTypeCompanyManaged? {
        self as? DBXTeamCommonGroupManagementTypeCompanyManaged
    }

    @objc
    public var asSystemManaged: DBXTeamCommonGroupManagementTypeSystemManaged? {
        self as? DBXTeamCommonGroupManagementTypeSystemManaged
    }

    @objc
    public var asOther: DBXTeamCommonGroupManagementTypeOther? {
        self as? DBXTeamCommonGroupManagementTypeOther
    }
}

/// A group which is managed by selected users.
@objc
public class DBXTeamCommonGroupManagementTypeUserManaged: DBXTeamCommonGroupManagementType {
    @objc
    public init() {
        let swift = TeamCommon.GroupManagementType.userManaged
        super.init(swift: swift)
    }
}

/// A group which is managed by team admins only.
@objc
public class DBXTeamCommonGroupManagementTypeCompanyManaged: DBXTeamCommonGroupManagementType {
    @objc
    public init() {
        let swift = TeamCommon.GroupManagementType.companyManaged
        super.init(swift: swift)
    }
}

/// A group which is managed automatically by Dropbox.
@objc
public class DBXTeamCommonGroupManagementTypeSystemManaged: DBXTeamCommonGroupManagementType {
    @objc
    public init() {
        let swift = TeamCommon.GroupManagementType.systemManaged
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamCommonGroupManagementTypeOther: DBXTeamCommonGroupManagementType {
    @objc
    public init() {
        let swift = TeamCommon.GroupManagementType.other
        super.init(swift: swift)
    }
}

/// Information about a group.
@objc
public class DBXTeamCommonGroupSummary: NSObject {
    /// (no description)
    @objc
    public var groupName: String { swift.groupName }
    /// (no description)
    @objc
    public var groupId: String { swift.groupId }
    /// External ID of group. This is an arbitrary ID that an admin can attach to a group.
    @objc
    public var groupExternalId: String? { swift.groupExternalId }
    /// The number of members in the group.
    @objc
    public var memberCount: NSNumber? { swift.memberCount as NSNumber? }
    /// Who is allowed to manage the group.
    @objc
    public var groupManagementType: DBXTeamCommonGroupManagementType { DBXTeamCommonGroupManagementType(swift: swift.groupManagementType) }

    @objc
    public init(groupName: String, groupId: String, groupManagementType: DBXTeamCommonGroupManagementType, groupExternalId: String?, memberCount: NSNumber?) {
        self.swift = TeamCommon.GroupSummary(
            groupName: groupName,
            groupId: groupId,
            groupManagementType: groupManagementType.swift,
            groupExternalId: groupExternalId,
            memberCount: memberCount?.uint32Value
        )
    }

    let swift: TeamCommon.GroupSummary

    public init(swift: TeamCommon.GroupSummary) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}

/// The group type determines how a group is created and managed.
@objc
public class DBXTeamCommonGroupType: NSObject {
    let swift: TeamCommon.GroupType

    public init(swift: TeamCommon.GroupType) {
        self.swift = swift
    }

    public static func factory(swift: TeamCommon.GroupType) -> DBXTeamCommonGroupType {
        switch swift {
        case .team:
            return DBXTeamCommonGroupTypeTeam()
        case .userManaged:
            return DBXTeamCommonGroupTypeUserManaged()
        case .other:
            return DBXTeamCommonGroupTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asTeam: DBXTeamCommonGroupTypeTeam? {
        self as? DBXTeamCommonGroupTypeTeam
    }

    @objc
    public var asUserManaged: DBXTeamCommonGroupTypeUserManaged? {
        self as? DBXTeamCommonGroupTypeUserManaged
    }

    @objc
    public var asOther: DBXTeamCommonGroupTypeOther? {
        self as? DBXTeamCommonGroupTypeOther
    }
}

/// A group to which team members are automatically added. Applicable to team folders
/// https://www.dropbox.com/help/986 only.
@objc
public class DBXTeamCommonGroupTypeTeam: DBXTeamCommonGroupType {
    @objc
    public init() {
        let swift = TeamCommon.GroupType.team
        super.init(swift: swift)
    }
}

/// A group is created and managed by a user.
@objc
public class DBXTeamCommonGroupTypeUserManaged: DBXTeamCommonGroupType {
    @objc
    public init() {
        let swift = TeamCommon.GroupType.userManaged
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamCommonGroupTypeOther: DBXTeamCommonGroupType {
    @objc
    public init() {
        let swift = TeamCommon.GroupType.other
        super.init(swift: swift)
    }
}

/// The type of the space limit imposed on a team member.
@objc
public class DBXTeamCommonMemberSpaceLimitType: NSObject {
    let swift: TeamCommon.MemberSpaceLimitType

    public init(swift: TeamCommon.MemberSpaceLimitType) {
        self.swift = swift
    }

    public static func factory(swift: TeamCommon.MemberSpaceLimitType) -> DBXTeamCommonMemberSpaceLimitType {
        switch swift {
        case .off:
            return DBXTeamCommonMemberSpaceLimitTypeOff()
        case .alertOnly:
            return DBXTeamCommonMemberSpaceLimitTypeAlertOnly()
        case .stopSync:
            return DBXTeamCommonMemberSpaceLimitTypeStopSync()
        case .other:
            return DBXTeamCommonMemberSpaceLimitTypeOther()
        }
    }

    @objc
    public override var description: String { swift.description }

    @objc
    public var asOff: DBXTeamCommonMemberSpaceLimitTypeOff? {
        self as? DBXTeamCommonMemberSpaceLimitTypeOff
    }

    @objc
    public var asAlertOnly: DBXTeamCommonMemberSpaceLimitTypeAlertOnly? {
        self as? DBXTeamCommonMemberSpaceLimitTypeAlertOnly
    }

    @objc
    public var asStopSync: DBXTeamCommonMemberSpaceLimitTypeStopSync? {
        self as? DBXTeamCommonMemberSpaceLimitTypeStopSync
    }

    @objc
    public var asOther: DBXTeamCommonMemberSpaceLimitTypeOther? {
        self as? DBXTeamCommonMemberSpaceLimitTypeOther
    }
}

/// The team member does not have imposed space limit.
@objc
public class DBXTeamCommonMemberSpaceLimitTypeOff: DBXTeamCommonMemberSpaceLimitType {
    @objc
    public init() {
        let swift = TeamCommon.MemberSpaceLimitType.off
        super.init(swift: swift)
    }
}

/// The team member has soft imposed space limit - the limit is used for display and for notifications.
@objc
public class DBXTeamCommonMemberSpaceLimitTypeAlertOnly: DBXTeamCommonMemberSpaceLimitType {
    @objc
    public init() {
        let swift = TeamCommon.MemberSpaceLimitType.alertOnly
        super.init(swift: swift)
    }
}

/// The team member has hard imposed space limit - Dropbox file sync will stop after the limit is reached.
@objc
public class DBXTeamCommonMemberSpaceLimitTypeStopSync: DBXTeamCommonMemberSpaceLimitType {
    @objc
    public init() {
        let swift = TeamCommon.MemberSpaceLimitType.stopSync
        super.init(swift: swift)
    }
}

/// An unspecified error.
@objc
public class DBXTeamCommonMemberSpaceLimitTypeOther: DBXTeamCommonMemberSpaceLimitType {
    @objc
    public init() {
        let swift = TeamCommon.MemberSpaceLimitType.other
        super.init(swift: swift)
    }
}

/// Time range.
@objc
public class DBXTeamCommonTimeRange: NSObject {
    /// Optional starting time (inclusive).
    @objc
    public var startTime: Date? { swift.startTime }
    /// Optional ending time (exclusive).
    @objc
    public var endTime: Date? { swift.endTime }

    @objc
    public init(startTime: Date?, endTime: Date?) {
        self.swift = TeamCommon.TimeRange(startTime: startTime, endTime: endTime)
    }

    let swift: TeamCommon.TimeRange

    public init(swift: TeamCommon.TimeRange) {
        self.swift = swift
    }

    @objc
    public override var description: String { swift.description }
}
