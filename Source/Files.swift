///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the files namespace
public class Files {
    /// The PropertiesError union
    public enum PropertiesError: CustomStringConvertible {
        /// Property template does not exist for given identifier.
        case TemplateNotFound(String)
        /// You do not have the permissions to modify this property template.
        case RestrictedContent
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case Path(Files.LookupError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PropertiesErrorSerializer().serialize(self)))"
        }
    }
    public class PropertiesErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PropertiesError) -> JSON {
            switch value {
                case .TemplateNotFound(let arg):
                    var d = ["template_not_found": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("template_not_found")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> PropertiesError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "template_not_found":
                            let v = Serialization._StringSerializer.deserialize(d["template_not_found"] ?? .Null)
                            return PropertiesError.TemplateNotFound(v)
                        case "restricted_content":
                            return PropertiesError.RestrictedContent
                        case "other":
                            return PropertiesError.Other
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return PropertiesError.Path(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The InvalidPropertyGroupError union
    public enum InvalidPropertyGroupError: CustomStringConvertible {
        /// Property template does not exist for given identifier.
        case TemplateNotFound(String)
        /// You do not have the permissions to modify this property template.
        case RestrictedContent
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case Path(Files.LookupError)
        /// A field value in this property group is too large.
        case PropertyFieldTooLarge
        /// The property group specified does not conform to the property template.
        case DoesNotFitTemplate

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(InvalidPropertyGroupErrorSerializer().serialize(self)))"
        }
    }
    public class InvalidPropertyGroupErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: InvalidPropertyGroupError) -> JSON {
            switch value {
                case .TemplateNotFound(let arg):
                    var d = ["template_not_found": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("template_not_found")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .PropertyFieldTooLarge:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("property_field_too_large")
                    return .Dictionary(d)
                case .DoesNotFitTemplate:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("does_not_fit_template")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> InvalidPropertyGroupError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "template_not_found":
                            let v = Serialization._StringSerializer.deserialize(d["template_not_found"] ?? .Null)
                            return InvalidPropertyGroupError.TemplateNotFound(v)
                        case "restricted_content":
                            return InvalidPropertyGroupError.RestrictedContent
                        case "other":
                            return InvalidPropertyGroupError.Other
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return InvalidPropertyGroupError.Path(v)
                        case "property_field_too_large":
                            return InvalidPropertyGroupError.PropertyFieldTooLarge
                        case "does_not_fit_template":
                            return InvalidPropertyGroupError.DoesNotFitTemplate
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AddPropertiesError union
    public enum AddPropertiesError: CustomStringConvertible {
        /// Property template does not exist for given identifier.
        case TemplateNotFound(String)
        /// You do not have the permissions to modify this property template.
        case RestrictedContent
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case Path(Files.LookupError)
        /// A field value in this property group is too large.
        case PropertyFieldTooLarge
        /// The property group specified does not conform to the property template.
        case DoesNotFitTemplate
        /// This property group already exists for this file.
        case PropertyGroupAlreadyExists

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AddPropertiesErrorSerializer().serialize(self)))"
        }
    }
    public class AddPropertiesErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: AddPropertiesError) -> JSON {
            switch value {
                case .TemplateNotFound(let arg):
                    var d = ["template_not_found": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("template_not_found")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .PropertyFieldTooLarge:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("property_field_too_large")
                    return .Dictionary(d)
                case .DoesNotFitTemplate:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("does_not_fit_template")
                    return .Dictionary(d)
                case .PropertyGroupAlreadyExists:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("property_group_already_exists")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> AddPropertiesError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "template_not_found":
                            let v = Serialization._StringSerializer.deserialize(d["template_not_found"] ?? .Null)
                            return AddPropertiesError.TemplateNotFound(v)
                        case "restricted_content":
                            return AddPropertiesError.RestrictedContent
                        case "other":
                            return AddPropertiesError.Other
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return AddPropertiesError.Path(v)
                        case "property_field_too_large":
                            return AddPropertiesError.PropertyFieldTooLarge
                        case "does_not_fit_template":
                            return AddPropertiesError.DoesNotFitTemplate
                        case "property_group_already_exists":
                            return AddPropertiesError.PropertyGroupAlreadyExists
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The GetMetadataArg struct
    public class GetMetadataArg: CustomStringConvertible {
        /// The path of a file or folder on Dropbox.
        public let path: String
        /// If true, mediaInfo in FileMetadata is set for photo and video.
        public let includeMediaInfo: Bool
        /// If true, DeletedMetadata will be returned for deleted file or folder, otherwise notFound in LookupError will
        /// be returned.
        public let includeDeleted: Bool
        /// If true, the results will include a flag for each file indicating whether or not  that file has any explicit
        /// members.
        public let includeHasExplicitSharedMembers: Bool
        public init(path: String, includeMediaInfo: Bool = false, includeDeleted: Bool = false, includeHasExplicitSharedMembers: Bool = false) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.includeMediaInfo = includeMediaInfo
            self.includeDeleted = includeDeleted
            self.includeHasExplicitSharedMembers = includeHasExplicitSharedMembers
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetMetadataArgSerializer().serialize(self)))"
        }
    }
    public class GetMetadataArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetMetadataArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "include_media_info": Serialization._BoolSerializer.serialize(value.includeMediaInfo),
            "include_deleted": Serialization._BoolSerializer.serialize(value.includeDeleted),
            "include_has_explicit_shared_members": Serialization._BoolSerializer.serialize(value.includeHasExplicitSharedMembers),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GetMetadataArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let includeMediaInfo = Serialization._BoolSerializer.deserialize(dict["include_media_info"] ?? .Null)
                    let includeDeleted = Serialization._BoolSerializer.deserialize(dict["include_deleted"] ?? .Null)
                    let includeHasExplicitSharedMembers = Serialization._BoolSerializer.deserialize(dict["include_has_explicit_shared_members"] ?? .Null)
                    return GetMetadataArg(path: path, includeMediaInfo: includeMediaInfo, includeDeleted: includeDeleted, includeHasExplicitSharedMembers: includeHasExplicitSharedMembers)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AlphaGetMetadataArg struct
    public class AlphaGetMetadataArg: Files.GetMetadataArg {
        /// If true, propertyGroups in FileMetadata is set for files with custom properties.
        public let includePropertyTemplates: Array<String>?
        public init(path: String, includeMediaInfo: Bool = false, includeDeleted: Bool = false, includeHasExplicitSharedMembers: Bool = false, includePropertyTemplates: Array<String>? = nil) {
            nullableValidator(arrayValidator(itemValidator: stringValidator(minLength: 1, pattern: "(/|ptid:).*")))(includePropertyTemplates)
            self.includePropertyTemplates = includePropertyTemplates
            super.init(path: path, includeMediaInfo: includeMediaInfo, includeDeleted: includeDeleted, includeHasExplicitSharedMembers: includeHasExplicitSharedMembers)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AlphaGetMetadataArgSerializer().serialize(self)))"
        }
    }
    public class AlphaGetMetadataArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: AlphaGetMetadataArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "include_media_info": Serialization._BoolSerializer.serialize(value.includeMediaInfo),
            "include_deleted": Serialization._BoolSerializer.serialize(value.includeDeleted),
            "include_has_explicit_shared_members": Serialization._BoolSerializer.serialize(value.includeHasExplicitSharedMembers),
            "include_property_templates": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.includePropertyTemplates),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> AlphaGetMetadataArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let includeMediaInfo = Serialization._BoolSerializer.deserialize(dict["include_media_info"] ?? .Null)
                    let includeDeleted = Serialization._BoolSerializer.deserialize(dict["include_deleted"] ?? .Null)
                    let includeHasExplicitSharedMembers = Serialization._BoolSerializer.deserialize(dict["include_has_explicit_shared_members"] ?? .Null)
                    let includePropertyTemplates = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["include_property_templates"] ?? .Null)
                    return AlphaGetMetadataArg(path: path, includeMediaInfo: includeMediaInfo, includeDeleted: includeDeleted, includeHasExplicitSharedMembers: includeHasExplicitSharedMembers, includePropertyTemplates: includePropertyTemplates)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetMetadataError union
    public enum GetMetadataError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetMetadataErrorSerializer().serialize(self)))"
        }
    }
    public class GetMetadataErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetMetadataError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> GetMetadataError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return GetMetadataError.Path(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AlphaGetMetadataError union
    public enum AlphaGetMetadataError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case PropertiesError(Files.LookUpPropertiesError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AlphaGetMetadataErrorSerializer().serialize(self)))"
        }
    }
    public class AlphaGetMetadataErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: AlphaGetMetadataError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .PropertiesError(let arg):
                    var d = ["properties_error": Files.LookUpPropertiesErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("properties_error")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> AlphaGetMetadataError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return AlphaGetMetadataError.Path(v)
                        case "properties_error":
                            let v = Files.LookUpPropertiesErrorSerializer().deserialize(d["properties_error"] ?? .Null)
                            return AlphaGetMetadataError.PropertiesError(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The CommitInfo struct
    public class CommitInfo: CustomStringConvertible {
        /// Path in the user's Dropbox to save the file.
        public let path: String
        /// Selects what to do if the file already exists.
        public let mode: Files.WriteMode
        /// If there's a conflict, as determined by mode, have the Dropbox server try to autorename the file to avoid
        /// conflict.
        public let autorename: Bool
        /// The value to store as the clientModified timestamp. Dropbox automatically records the time at which the file
        /// was written to the Dropbox servers. It can also record an additional timestamp, provided by Dropbox desktop
        /// clients, mobile clients, and API apps of when the file was actually created or modified.
        public let clientModified: NSDate?
        /// Normally, users are made aware of any file modifications in their Dropbox account via notifications in the
        /// client software. If true, this tells the clients that this modification shouldn't result in a user
        /// notification.
        public let mute: Bool
        public init(path: String, mode: Files.WriteMode = .Add, autorename: Bool = false, clientModified: NSDate? = nil, mute: Bool = false) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.mode = mode
            self.autorename = autorename
            self.clientModified = clientModified
            self.mute = mute
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CommitInfoSerializer().serialize(self)))"
        }
    }
    public class CommitInfoSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: CommitInfo) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "mode": Files.WriteModeSerializer().serialize(value.mode),
            "autorename": Serialization._BoolSerializer.serialize(value.autorename),
            "client_modified": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.clientModified),
            "mute": Serialization._BoolSerializer.serialize(value.mute),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> CommitInfo {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let mode = Files.WriteModeSerializer().deserialize(dict["mode"] ?? .Null)
                    let autorename = Serialization._BoolSerializer.deserialize(dict["autorename"] ?? .Null)
                    let clientModified = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["client_modified"] ?? .Null)
                    let mute = Serialization._BoolSerializer.deserialize(dict["mute"] ?? .Null)
                    return CommitInfo(path: path, mode: mode, autorename: autorename, clientModified: clientModified, mute: mute)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CommitInfoWithProperties struct
    public class CommitInfoWithProperties: Files.CommitInfo {
        /// List of custom properties to add to file.
        public let propertyGroups: Array<Properties.PropertyGroup>?
        public init(path: String, mode: Files.WriteMode = .Add, autorename: Bool = false, clientModified: NSDate? = nil, mute: Bool = false, propertyGroups: Array<Properties.PropertyGroup>? = nil) {
            self.propertyGroups = propertyGroups
            super.init(path: path, mode: mode, autorename: autorename, clientModified: clientModified, mute: mute)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CommitInfoWithPropertiesSerializer().serialize(self)))"
        }
    }
    public class CommitInfoWithPropertiesSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: CommitInfoWithProperties) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "mode": Files.WriteModeSerializer().serialize(value.mode),
            "autorename": Serialization._BoolSerializer.serialize(value.autorename),
            "client_modified": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.clientModified),
            "mute": Serialization._BoolSerializer.serialize(value.mute),
            "property_groups": NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).serialize(value.propertyGroups),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> CommitInfoWithProperties {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let mode = Files.WriteModeSerializer().deserialize(dict["mode"] ?? .Null)
                    let autorename = Serialization._BoolSerializer.deserialize(dict["autorename"] ?? .Null)
                    let clientModified = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["client_modified"] ?? .Null)
                    let mute = Serialization._BoolSerializer.deserialize(dict["mute"] ?? .Null)
                    let propertyGroups = NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).deserialize(dict["property_groups"] ?? .Null)
                    return CommitInfoWithProperties(path: path, mode: mode, autorename: autorename, clientModified: clientModified, mute: mute, propertyGroups: propertyGroups)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CreateFolderArg struct
    public class CreateFolderArg: CustomStringConvertible {
        /// Path in the user's Dropbox to create.
        public let path: String
        public init(path: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateFolderArgSerializer().serialize(self)))"
        }
    }
    public class CreateFolderArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: CreateFolderArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> CreateFolderArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    return CreateFolderArg(path: path)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CreateFolderError union
    public enum CreateFolderError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.WriteError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateFolderErrorSerializer().serialize(self)))"
        }
    }
    public class CreateFolderErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: CreateFolderError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> CreateFolderError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.WriteErrorSerializer().deserialize(d["path"] ?? .Null)
                            return CreateFolderError.Path(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The DeleteArg struct
    public class DeleteArg: CustomStringConvertible {
        /// Path in the user's Dropbox to delete.
        public let path: String
        public init(path: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeleteArgSerializer().serialize(self)))"
        }
    }
    public class DeleteArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: DeleteArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> DeleteArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    return DeleteArg(path: path)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeleteError union
    public enum DeleteError: CustomStringConvertible {
        /// An unspecified error.
        case PathLookup(Files.LookupError)
        /// An unspecified error.
        case PathWrite(Files.WriteError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeleteErrorSerializer().serialize(self)))"
        }
    }
    public class DeleteErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: DeleteError) -> JSON {
            switch value {
                case .PathLookup(let arg):
                    var d = ["path_lookup": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path_lookup")
                    return .Dictionary(d)
                case .PathWrite(let arg):
                    var d = ["path_write": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path_write")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> DeleteError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path_lookup":
                            let v = Files.LookupErrorSerializer().deserialize(d["path_lookup"] ?? .Null)
                            return DeleteError.PathLookup(v)
                        case "path_write":
                            let v = Files.WriteErrorSerializer().deserialize(d["path_write"] ?? .Null)
                            return DeleteError.PathWrite(v)
                        case "other":
                            return DeleteError.Other
                        default:
                            return DeleteError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Metadata for a file or folder.
    public class Metadata: CustomStringConvertible {
        /// The last component of the path (including extension). This never contains a slash.
        public let name: String
        /// The lowercased full path in the user's Dropbox. This always starts with a slash. This field will be null if
        /// the file or folder is not mounted.
        public let pathLower: String?
        /// The cased path to be used for display purposes only. In rare instances the casing will not correctly match
        /// the user's filesystem, but this behavior will match the path provided in the Core API v1. Changes to the
        /// casing of paths won't be returned by listFolderContinue. This field will be null if the file or folder is
        /// not mounted.
        public let pathDisplay: String?
        /// Deprecated. Please use parentSharedFolderId in FileSharingInfo or parentSharedFolderId in FolderSharingInfo
        /// instead.
        public let parentSharedFolderId: String?
        public init(name: String, pathLower: String? = nil, pathDisplay: String? = nil, parentSharedFolderId: String? = nil) {
            stringValidator()(name)
            self.name = name
            nullableValidator(stringValidator())(pathLower)
            self.pathLower = pathLower
            nullableValidator(stringValidator())(pathDisplay)
            self.pathDisplay = pathDisplay
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(parentSharedFolderId)
            self.parentSharedFolderId = parentSharedFolderId
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MetadataSerializer().serialize(self)))"
        }
    }
    public class MetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: Metadata) -> JSON {
            var output = [ 
            "name": Serialization._StringSerializer.serialize(value.name),
            "path_lower": NullableSerializer(Serialization._StringSerializer).serialize(value.pathLower),
            "path_display": NullableSerializer(Serialization._StringSerializer).serialize(value.pathDisplay),
            "parent_shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentSharedFolderId),
            ]
            switch value {
                case let file as Files.FileMetadata:
                    for (k,v) in Serialization.getFields(Files.FileMetadataSerializer().serialize(file)) {
                        output[k] = v
                    }
                    output[".tag"] = .Str("file")
                case let folder as Files.FolderMetadata:
                    for (k,v) in Serialization.getFields(Files.FolderMetadataSerializer().serialize(folder)) {
                        output[k] = v
                    }
                    output[".tag"] = .Str("folder")
                case let deleted as Files.DeletedMetadata:
                    for (k,v) in Serialization.getFields(Files.DeletedMetadataSerializer().serialize(deleted)) {
                        output[k] = v
                    }
                    output[".tag"] = .Str("deleted")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> Metadata {
            switch json {
                case .Dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "file":
                            return Files.FileMetadataSerializer().deserialize(json)
                        case "folder":
                            return Files.FolderMetadataSerializer().deserialize(json)
                        case "deleted":
                            return Files.DeletedMetadataSerializer().deserialize(json)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Indicates that there used to be a file or folder at this path, but it no longer exists.
    public class DeletedMetadata: Files.Metadata {
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeletedMetadataSerializer().serialize(self)))"
        }
    }
    public class DeletedMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: DeletedMetadata) -> JSON {
            let output = [ 
            "name": Serialization._StringSerializer.serialize(value.name),
            "path_lower": NullableSerializer(Serialization._StringSerializer).serialize(value.pathLower),
            "path_display": NullableSerializer(Serialization._StringSerializer).serialize(value.pathDisplay),
            "parent_shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentSharedFolderId),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> DeletedMetadata {
            switch json {
                case .Dictionary(let dict):
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .Null)
                    let pathLower = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_lower"] ?? .Null)
                    let pathDisplay = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_display"] ?? .Null)
                    let parentSharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["parent_shared_folder_id"] ?? .Null)
                    return DeletedMetadata(name: name, pathLower: pathLower, pathDisplay: pathDisplay, parentSharedFolderId: parentSharedFolderId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Dimensions for a photo or video.
    public class Dimensions: CustomStringConvertible {
        /// Height of the photo/video.
        public let height: UInt64
        /// Width of the photo/video.
        public let width: UInt64
        public init(height: UInt64, width: UInt64) {
            comparableValidator()(height)
            self.height = height
            comparableValidator()(width)
            self.width = width
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DimensionsSerializer().serialize(self)))"
        }
    }
    public class DimensionsSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: Dimensions) -> JSON {
            let output = [ 
            "height": Serialization._UInt64Serializer.serialize(value.height),
            "width": Serialization._UInt64Serializer.serialize(value.width),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> Dimensions {
            switch json {
                case .Dictionary(let dict):
                    let height = Serialization._UInt64Serializer.deserialize(dict["height"] ?? .Null)
                    let width = Serialization._UInt64Serializer.deserialize(dict["width"] ?? .Null)
                    return Dimensions(height: height, width: width)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DownloadArg struct
    public class DownloadArg: CustomStringConvertible {
        /// The path of the file to download.
        public let path: String
        /// Deprecated. Please specify revision in path instead
        public let rev: String?
        public init(path: String, rev: String? = nil) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            nullableValidator(stringValidator(minLength: 9, pattern: "[0-9a-f]+"))(rev)
            self.rev = rev
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DownloadArgSerializer().serialize(self)))"
        }
    }
    public class DownloadArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: DownloadArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "rev": NullableSerializer(Serialization._StringSerializer).serialize(value.rev),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> DownloadArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let rev = NullableSerializer(Serialization._StringSerializer).deserialize(dict["rev"] ?? .Null)
                    return DownloadArg(path: path, rev: rev)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DownloadError union
    public enum DownloadError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DownloadErrorSerializer().serialize(self)))"
        }
    }
    public class DownloadErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: DownloadError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> DownloadError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return DownloadError.Path(v)
                        case "other":
                            return DownloadError.Other
                        default:
                            return DownloadError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The FileMetadata struct
    public class FileMetadata: Files.Metadata {
        /// A unique identifier for the file.
        public let id: String
        /// For files, this is the modification time set by the desktop client when the file was added to Dropbox. Since
        /// this time is not verified (the Dropbox server stores whatever the desktop client sends up), this should only
        /// be used for display purposes (such as sorting) and not, for example, to determine if a file has changed or
        /// not.
        public let clientModified: NSDate
        /// The last time the file was modified on Dropbox.
        public let serverModified: NSDate
        /// A unique identifier for the current revision of a file. This field is the same rev as elsewhere in the API
        /// and can be used to detect changes and avoid conflicts.
        public let rev: String
        /// The file size in bytes.
        public let size: UInt64
        /// Additional information if the file is a photo or video.
        public let mediaInfo: Files.MediaInfo?
        /// Set if this file is contained in a shared folder.
        public let sharingInfo: Files.FileSharingInfo?
        /// Additional information if the file has custom properties with the property template specified.
        public let propertyGroups: Array<Properties.PropertyGroup>?
        /// This flag will only be present if include_has_explicit_shared_members  is true in listFolder or getMetadata.
        /// If this  flag is present, it will be true if this file has any explicit shared  members. This is different
        /// from sharing_info in that this could be true  in the case where a file has explicit members but is not
        /// contained within  a shared folder.
        public let hasExplicitSharedMembers: Bool?
        public init(name: String, id: String, clientModified: NSDate, serverModified: NSDate, rev: String, size: UInt64, pathLower: String? = nil, pathDisplay: String? = nil, parentSharedFolderId: String? = nil, mediaInfo: Files.MediaInfo? = nil, sharingInfo: Files.FileSharingInfo? = nil, propertyGroups: Array<Properties.PropertyGroup>? = nil, hasExplicitSharedMembers: Bool? = nil) {
            stringValidator(minLength: 1)(id)
            self.id = id
            self.clientModified = clientModified
            self.serverModified = serverModified
            stringValidator(minLength: 9, pattern: "[0-9a-f]+")(rev)
            self.rev = rev
            comparableValidator()(size)
            self.size = size
            self.mediaInfo = mediaInfo
            self.sharingInfo = sharingInfo
            self.propertyGroups = propertyGroups
            self.hasExplicitSharedMembers = hasExplicitSharedMembers
            super.init(name: name, pathLower: pathLower, pathDisplay: pathDisplay, parentSharedFolderId: parentSharedFolderId)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileMetadataSerializer().serialize(self)))"
        }
    }
    public class FileMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: FileMetadata) -> JSON {
            let output = [ 
            "name": Serialization._StringSerializer.serialize(value.name),
            "id": Serialization._StringSerializer.serialize(value.id),
            "client_modified": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.clientModified),
            "server_modified": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.serverModified),
            "rev": Serialization._StringSerializer.serialize(value.rev),
            "size": Serialization._UInt64Serializer.serialize(value.size),
            "path_lower": NullableSerializer(Serialization._StringSerializer).serialize(value.pathLower),
            "path_display": NullableSerializer(Serialization._StringSerializer).serialize(value.pathDisplay),
            "parent_shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentSharedFolderId),
            "media_info": NullableSerializer(Files.MediaInfoSerializer()).serialize(value.mediaInfo),
            "sharing_info": NullableSerializer(Files.FileSharingInfoSerializer()).serialize(value.sharingInfo),
            "property_groups": NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).serialize(value.propertyGroups),
            "has_explicit_shared_members": NullableSerializer(Serialization._BoolSerializer).serialize(value.hasExplicitSharedMembers),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> FileMetadata {
            switch json {
                case .Dictionary(let dict):
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .Null)
                    let id = Serialization._StringSerializer.deserialize(dict["id"] ?? .Null)
                    let clientModified = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["client_modified"] ?? .Null)
                    let serverModified = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["server_modified"] ?? .Null)
                    let rev = Serialization._StringSerializer.deserialize(dict["rev"] ?? .Null)
                    let size = Serialization._UInt64Serializer.deserialize(dict["size"] ?? .Null)
                    let pathLower = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_lower"] ?? .Null)
                    let pathDisplay = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_display"] ?? .Null)
                    let parentSharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["parent_shared_folder_id"] ?? .Null)
                    let mediaInfo = NullableSerializer(Files.MediaInfoSerializer()).deserialize(dict["media_info"] ?? .Null)
                    let sharingInfo = NullableSerializer(Files.FileSharingInfoSerializer()).deserialize(dict["sharing_info"] ?? .Null)
                    let propertyGroups = NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).deserialize(dict["property_groups"] ?? .Null)
                    let hasExplicitSharedMembers = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["has_explicit_shared_members"] ?? .Null)
                    return FileMetadata(name: name, id: id, clientModified: clientModified, serverModified: serverModified, rev: rev, size: size, pathLower: pathLower, pathDisplay: pathDisplay, parentSharedFolderId: parentSharedFolderId, mediaInfo: mediaInfo, sharingInfo: sharingInfo, propertyGroups: propertyGroups, hasExplicitSharedMembers: hasExplicitSharedMembers)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sharing info for a file or folder.
    public class SharingInfo: CustomStringConvertible {
        /// True if the file or folder is inside a read-only shared folder.
        public let readOnly: Bool
        public init(readOnly: Bool) {
            self.readOnly = readOnly
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingInfoSerializer().serialize(self)))"
        }
    }
    public class SharingInfoSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SharingInfo) -> JSON {
            let output = [ 
            "read_only": Serialization._BoolSerializer.serialize(value.readOnly),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SharingInfo {
            switch json {
                case .Dictionary(let dict):
                    let readOnly = Serialization._BoolSerializer.deserialize(dict["read_only"] ?? .Null)
                    return SharingInfo(readOnly: readOnly)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sharing info for a file which is contained by a shared folder.
    public class FileSharingInfo: Files.SharingInfo {
        /// ID of shared folder that holds this file.
        public let parentSharedFolderId: String
        /// The last user who modified the file. This field will be null if the user's account has been deleted.
        public let modifiedBy: String?
        public init(readOnly: Bool, parentSharedFolderId: String, modifiedBy: String? = nil) {
            stringValidator(pattern: "[-_0-9a-zA-Z:]+")(parentSharedFolderId)
            self.parentSharedFolderId = parentSharedFolderId
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(modifiedBy)
            self.modifiedBy = modifiedBy
            super.init(readOnly: readOnly)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileSharingInfoSerializer().serialize(self)))"
        }
    }
    public class FileSharingInfoSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: FileSharingInfo) -> JSON {
            let output = [ 
            "read_only": Serialization._BoolSerializer.serialize(value.readOnly),
            "parent_shared_folder_id": Serialization._StringSerializer.serialize(value.parentSharedFolderId),
            "modified_by": NullableSerializer(Serialization._StringSerializer).serialize(value.modifiedBy),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> FileSharingInfo {
            switch json {
                case .Dictionary(let dict):
                    let readOnly = Serialization._BoolSerializer.deserialize(dict["read_only"] ?? .Null)
                    let parentSharedFolderId = Serialization._StringSerializer.deserialize(dict["parent_shared_folder_id"] ?? .Null)
                    let modifiedBy = NullableSerializer(Serialization._StringSerializer).deserialize(dict["modified_by"] ?? .Null)
                    return FileSharingInfo(readOnly: readOnly, parentSharedFolderId: parentSharedFolderId, modifiedBy: modifiedBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FolderMetadata struct
    public class FolderMetadata: Files.Metadata {
        /// A unique identifier for the folder.
        public let id: String
        /// Deprecated. Please use sharingInfo instead.
        public let sharedFolderId: String?
        /// Set if the folder is contained in a shared folder or is a shared folder mount point.
        public let sharingInfo: Files.FolderSharingInfo?
        /// Additional information if the file has custom properties with the property template specified.
        public let propertyGroups: Array<Properties.PropertyGroup>?
        public init(name: String, id: String, pathLower: String? = nil, pathDisplay: String? = nil, parentSharedFolderId: String? = nil, sharedFolderId: String? = nil, sharingInfo: Files.FolderSharingInfo? = nil, propertyGroups: Array<Properties.PropertyGroup>? = nil) {
            stringValidator(minLength: 1)(id)
            self.id = id
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(sharedFolderId)
            self.sharedFolderId = sharedFolderId
            self.sharingInfo = sharingInfo
            self.propertyGroups = propertyGroups
            super.init(name: name, pathLower: pathLower, pathDisplay: pathDisplay, parentSharedFolderId: parentSharedFolderId)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderMetadataSerializer().serialize(self)))"
        }
    }
    public class FolderMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: FolderMetadata) -> JSON {
            let output = [ 
            "name": Serialization._StringSerializer.serialize(value.name),
            "id": Serialization._StringSerializer.serialize(value.id),
            "path_lower": NullableSerializer(Serialization._StringSerializer).serialize(value.pathLower),
            "path_display": NullableSerializer(Serialization._StringSerializer).serialize(value.pathDisplay),
            "parent_shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentSharedFolderId),
            "shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderId),
            "sharing_info": NullableSerializer(Files.FolderSharingInfoSerializer()).serialize(value.sharingInfo),
            "property_groups": NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).serialize(value.propertyGroups),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> FolderMetadata {
            switch json {
                case .Dictionary(let dict):
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .Null)
                    let id = Serialization._StringSerializer.deserialize(dict["id"] ?? .Null)
                    let pathLower = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_lower"] ?? .Null)
                    let pathDisplay = NullableSerializer(Serialization._StringSerializer).deserialize(dict["path_display"] ?? .Null)
                    let parentSharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["parent_shared_folder_id"] ?? .Null)
                    let sharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_id"] ?? .Null)
                    let sharingInfo = NullableSerializer(Files.FolderSharingInfoSerializer()).deserialize(dict["sharing_info"] ?? .Null)
                    let propertyGroups = NullableSerializer(ArraySerializer(Properties.PropertyGroupSerializer())).deserialize(dict["property_groups"] ?? .Null)
                    return FolderMetadata(name: name, id: id, pathLower: pathLower, pathDisplay: pathDisplay, parentSharedFolderId: parentSharedFolderId, sharedFolderId: sharedFolderId, sharingInfo: sharingInfo, propertyGroups: propertyGroups)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sharing info for a folder which is contained in a shared folder or is a shared folder mount point.
    public class FolderSharingInfo: Files.SharingInfo {
        /// Set if the folder is contained by a shared folder.
        public let parentSharedFolderId: String?
        /// If this folder is a shared folder mount point, the ID of the shared folder mounted at this location.
        public let sharedFolderId: String?
        public init(readOnly: Bool, parentSharedFolderId: String? = nil, sharedFolderId: String? = nil) {
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(parentSharedFolderId)
            self.parentSharedFolderId = parentSharedFolderId
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(sharedFolderId)
            self.sharedFolderId = sharedFolderId
            super.init(readOnly: readOnly)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderSharingInfoSerializer().serialize(self)))"
        }
    }
    public class FolderSharingInfoSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: FolderSharingInfo) -> JSON {
            let output = [ 
            "read_only": Serialization._BoolSerializer.serialize(value.readOnly),
            "parent_shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentSharedFolderId),
            "shared_folder_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderId),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> FolderSharingInfo {
            switch json {
                case .Dictionary(let dict):
                    let readOnly = Serialization._BoolSerializer.deserialize(dict["read_only"] ?? .Null)
                    let parentSharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["parent_shared_folder_id"] ?? .Null)
                    let sharedFolderId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_id"] ?? .Null)
                    return FolderSharingInfo(readOnly: readOnly, parentSharedFolderId: parentSharedFolderId, sharedFolderId: sharedFolderId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetCopyReferenceArg struct
    public class GetCopyReferenceArg: CustomStringConvertible {
        /// The path to the file or folder you want to get a copy reference to.
        public let path: String
        public init(path: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetCopyReferenceArgSerializer().serialize(self)))"
        }
    }
    public class GetCopyReferenceArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetCopyReferenceArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GetCopyReferenceArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    return GetCopyReferenceArg(path: path)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetCopyReferenceError union
    public enum GetCopyReferenceError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetCopyReferenceErrorSerializer().serialize(self)))"
        }
    }
    public class GetCopyReferenceErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetCopyReferenceError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> GetCopyReferenceError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return GetCopyReferenceError.Path(v)
                        case "other":
                            return GetCopyReferenceError.Other
                        default:
                            return GetCopyReferenceError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The GetCopyReferenceResult struct
    public class GetCopyReferenceResult: CustomStringConvertible {
        /// Metadata of the file or folder.
        public let metadata: Files.Metadata
        /// A copy reference to the file or folder.
        public let copyReference: String
        /// The expiration date of the copy reference. This value is currently set to be far enough in the future so
        /// that expiration is effectively not an issue.
        public let expires: NSDate
        public init(metadata: Files.Metadata, copyReference: String, expires: NSDate) {
            self.metadata = metadata
            stringValidator()(copyReference)
            self.copyReference = copyReference
            self.expires = expires
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetCopyReferenceResultSerializer().serialize(self)))"
        }
    }
    public class GetCopyReferenceResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetCopyReferenceResult) -> JSON {
            let output = [ 
            "metadata": Files.MetadataSerializer().serialize(value.metadata),
            "copy_reference": Serialization._StringSerializer.serialize(value.copyReference),
            "expires": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.expires),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GetCopyReferenceResult {
            switch json {
                case .Dictionary(let dict):
                    let metadata = Files.MetadataSerializer().deserialize(dict["metadata"] ?? .Null)
                    let copyReference = Serialization._StringSerializer.deserialize(dict["copy_reference"] ?? .Null)
                    let expires = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["expires"] ?? .Null)
                    return GetCopyReferenceResult(metadata: metadata, copyReference: copyReference, expires: expires)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTemporaryLinkArg struct
    public class GetTemporaryLinkArg: CustomStringConvertible {
        /// The path to the file you want a temporary link to.
        public let path: String
        public init(path: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTemporaryLinkArgSerializer().serialize(self)))"
        }
    }
    public class GetTemporaryLinkArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetTemporaryLinkArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GetTemporaryLinkArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    return GetTemporaryLinkArg(path: path)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTemporaryLinkError union
    public enum GetTemporaryLinkError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTemporaryLinkErrorSerializer().serialize(self)))"
        }
    }
    public class GetTemporaryLinkErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetTemporaryLinkError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> GetTemporaryLinkError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return GetTemporaryLinkError.Path(v)
                        case "other":
                            return GetTemporaryLinkError.Other
                        default:
                            return GetTemporaryLinkError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The GetTemporaryLinkResult struct
    public class GetTemporaryLinkResult: CustomStringConvertible {
        /// Metadata of the file.
        public let metadata: Files.FileMetadata
        /// The temporary link which can be used to stream content the file.
        public let link: String
        public init(metadata: Files.FileMetadata, link: String) {
            self.metadata = metadata
            stringValidator()(link)
            self.link = link
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTemporaryLinkResultSerializer().serialize(self)))"
        }
    }
    public class GetTemporaryLinkResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GetTemporaryLinkResult) -> JSON {
            let output = [ 
            "metadata": Files.FileMetadataSerializer().serialize(value.metadata),
            "link": Serialization._StringSerializer.serialize(value.link),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GetTemporaryLinkResult {
            switch json {
                case .Dictionary(let dict):
                    let metadata = Files.FileMetadataSerializer().deserialize(dict["metadata"] ?? .Null)
                    let link = Serialization._StringSerializer.deserialize(dict["link"] ?? .Null)
                    return GetTemporaryLinkResult(metadata: metadata, link: link)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// GPS coordinates for a photo or video.
    public class GpsCoordinates: CustomStringConvertible {
        /// Latitude of the GPS coordinates.
        public let latitude: Double
        /// Longitude of the GPS coordinates.
        public let longitude: Double
        public init(latitude: Double, longitude: Double) {
            comparableValidator()(latitude)
            self.latitude = latitude
            comparableValidator()(longitude)
            self.longitude = longitude
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GpsCoordinatesSerializer().serialize(self)))"
        }
    }
    public class GpsCoordinatesSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: GpsCoordinates) -> JSON {
            let output = [ 
            "latitude": Serialization._DoubleSerializer.serialize(value.latitude),
            "longitude": Serialization._DoubleSerializer.serialize(value.longitude),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> GpsCoordinates {
            switch json {
                case .Dictionary(let dict):
                    let latitude = Serialization._DoubleSerializer.deserialize(dict["latitude"] ?? .Null)
                    let longitude = Serialization._DoubleSerializer.deserialize(dict["longitude"] ?? .Null)
                    return GpsCoordinates(latitude: latitude, longitude: longitude)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderArg struct
    public class ListFolderArg: CustomStringConvertible {
        /// The path to the folder you want to see the contents of.
        public let path: String
        /// If true, the list folder operation will be applied recursively to all subfolders and the response will
        /// contain contents of all subfolders.
        public let recursive: Bool
        /// If true, mediaInfo in FileMetadata is set for photo and video.
        public let includeMediaInfo: Bool
        /// If true, the results will include entries for files and folders that used to exist but were deleted.
        public let includeDeleted: Bool
        /// If true, the results will include a flag for each file indicating whether or not  that file has any explicit
        /// members.
        public let includeHasExplicitSharedMembers: Bool
        public init(path: String, recursive: Bool = false, includeMediaInfo: Bool = false, includeDeleted: Bool = false, includeHasExplicitSharedMembers: Bool = false) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)?|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.recursive = recursive
            self.includeMediaInfo = includeMediaInfo
            self.includeDeleted = includeDeleted
            self.includeHasExplicitSharedMembers = includeHasExplicitSharedMembers
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderArgSerializer().serialize(self)))"
        }
    }
    public class ListFolderArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "recursive": Serialization._BoolSerializer.serialize(value.recursive),
            "include_media_info": Serialization._BoolSerializer.serialize(value.includeMediaInfo),
            "include_deleted": Serialization._BoolSerializer.serialize(value.includeDeleted),
            "include_has_explicit_shared_members": Serialization._BoolSerializer.serialize(value.includeHasExplicitSharedMembers),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let recursive = Serialization._BoolSerializer.deserialize(dict["recursive"] ?? .Null)
                    let includeMediaInfo = Serialization._BoolSerializer.deserialize(dict["include_media_info"] ?? .Null)
                    let includeDeleted = Serialization._BoolSerializer.deserialize(dict["include_deleted"] ?? .Null)
                    let includeHasExplicitSharedMembers = Serialization._BoolSerializer.deserialize(dict["include_has_explicit_shared_members"] ?? .Null)
                    return ListFolderArg(path: path, recursive: recursive, includeMediaInfo: includeMediaInfo, includeDeleted: includeDeleted, includeHasExplicitSharedMembers: includeHasExplicitSharedMembers)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderContinueArg struct
    public class ListFolderContinueArg: CustomStringConvertible {
        /// The cursor returned by your last call to listFolder or listFolderContinue.
        public let cursor: String
        public init(cursor: String) {
            stringValidator(minLength: 1)(cursor)
            self.cursor = cursor
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderContinueArgSerializer().serialize(self)))"
        }
    }
    public class ListFolderContinueArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderContinueArg) -> JSON {
            let output = [ 
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderContinueArg {
            switch json {
                case .Dictionary(let dict):
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .Null)
                    return ListFolderContinueArg(cursor: cursor)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderContinueError union
    public enum ListFolderContinueError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// Indicates that the cursor has been invalidated. Call listFolder to obtain a new cursor.
        case Reset
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderContinueErrorSerializer().serialize(self)))"
        }
    }
    public class ListFolderContinueErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderContinueError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Reset:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("reset")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ListFolderContinueError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return ListFolderContinueError.Path(v)
                        case "reset":
                            return ListFolderContinueError.Reset
                        case "other":
                            return ListFolderContinueError.Other
                        default:
                            return ListFolderContinueError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ListFolderError union
    public enum ListFolderError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderErrorSerializer().serialize(self)))"
        }
    }
    public class ListFolderErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ListFolderError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return ListFolderError.Path(v)
                        case "other":
                            return ListFolderError.Other
                        default:
                            return ListFolderError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ListFolderGetLatestCursorResult struct
    public class ListFolderGetLatestCursorResult: CustomStringConvertible {
        /// Pass the cursor into listFolderContinue to see what's changed in the folder since your previous query.
        public let cursor: String
        public init(cursor: String) {
            stringValidator(minLength: 1)(cursor)
            self.cursor = cursor
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderGetLatestCursorResultSerializer().serialize(self)))"
        }
    }
    public class ListFolderGetLatestCursorResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderGetLatestCursorResult) -> JSON {
            let output = [ 
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderGetLatestCursorResult {
            switch json {
                case .Dictionary(let dict):
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .Null)
                    return ListFolderGetLatestCursorResult(cursor: cursor)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderLongpollArg struct
    public class ListFolderLongpollArg: CustomStringConvertible {
        /// A cursor as returned by listFolder or listFolderContinue. Cursors retrieved by setting includeMediaInfo in
        /// ListFolderArg to true are not supported.
        public let cursor: String
        /// A timeout in seconds. The request will block for at most this length of time, plus up to 90 seconds of
        /// random jitter added to avoid the thundering herd problem. Care should be taken when using this parameter, as
        /// some network infrastructure does not support long timeouts.
        public let timeout: UInt64
        public init(cursor: String, timeout: UInt64 = 30) {
            stringValidator(minLength: 1)(cursor)
            self.cursor = cursor
            comparableValidator(minValue: 30, maxValue: 480)(timeout)
            self.timeout = timeout
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderLongpollArgSerializer().serialize(self)))"
        }
    }
    public class ListFolderLongpollArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderLongpollArg) -> JSON {
            let output = [ 
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            "timeout": Serialization._UInt64Serializer.serialize(value.timeout),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderLongpollArg {
            switch json {
                case .Dictionary(let dict):
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .Null)
                    let timeout = Serialization._UInt64Serializer.deserialize(dict["timeout"] ?? .Null)
                    return ListFolderLongpollArg(cursor: cursor, timeout: timeout)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderLongpollError union
    public enum ListFolderLongpollError: CustomStringConvertible {
        /// Indicates that the cursor has been invalidated. Call listFolder to obtain a new cursor.
        case Reset
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderLongpollErrorSerializer().serialize(self)))"
        }
    }
    public class ListFolderLongpollErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderLongpollError) -> JSON {
            switch value {
                case .Reset:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("reset")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ListFolderLongpollError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "reset":
                            return ListFolderLongpollError.Reset
                        case "other":
                            return ListFolderLongpollError.Other
                        default:
                            return ListFolderLongpollError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ListFolderLongpollResult struct
    public class ListFolderLongpollResult: CustomStringConvertible {
        /// Indicates whether new changes are available. If true, call listFolderContinue to retrieve the changes.
        public let changes: Bool
        /// If present, backoff for at least this many seconds before calling listFolderLongpoll again.
        public let backoff: UInt64?
        public init(changes: Bool, backoff: UInt64? = nil) {
            self.changes = changes
            nullableValidator(comparableValidator())(backoff)
            self.backoff = backoff
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderLongpollResultSerializer().serialize(self)))"
        }
    }
    public class ListFolderLongpollResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderLongpollResult) -> JSON {
            let output = [ 
            "changes": Serialization._BoolSerializer.serialize(value.changes),
            "backoff": NullableSerializer(Serialization._UInt64Serializer).serialize(value.backoff),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderLongpollResult {
            switch json {
                case .Dictionary(let dict):
                    let changes = Serialization._BoolSerializer.deserialize(dict["changes"] ?? .Null)
                    let backoff = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["backoff"] ?? .Null)
                    return ListFolderLongpollResult(changes: changes, backoff: backoff)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListFolderResult struct
    public class ListFolderResult: CustomStringConvertible {
        /// The files and (direct) subfolders in the folder.
        public let entries: Array<Files.Metadata>
        /// Pass the cursor into listFolderContinue to see what's changed in the folder since your previous query.
        public let cursor: String
        /// If true, then there are more entries available. Pass the cursor to listFolderContinue to retrieve the rest.
        public let hasMore: Bool
        public init(entries: Array<Files.Metadata>, cursor: String, hasMore: Bool) {
            self.entries = entries
            stringValidator(minLength: 1)(cursor)
            self.cursor = cursor
            self.hasMore = hasMore
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListFolderResultSerializer().serialize(self)))"
        }
    }
    public class ListFolderResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListFolderResult) -> JSON {
            let output = [ 
            "entries": ArraySerializer(Files.MetadataSerializer()).serialize(value.entries),
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            "has_more": Serialization._BoolSerializer.serialize(value.hasMore),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListFolderResult {
            switch json {
                case .Dictionary(let dict):
                    let entries = ArraySerializer(Files.MetadataSerializer()).deserialize(dict["entries"] ?? .Null)
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .Null)
                    let hasMore = Serialization._BoolSerializer.deserialize(dict["has_more"] ?? .Null)
                    return ListFolderResult(entries: entries, cursor: cursor, hasMore: hasMore)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListRevisionsArg struct
    public class ListRevisionsArg: CustomStringConvertible {
        /// The path to the file you want to see the revisions of.
        public let path: String
        /// The maximum number of revision entries returned.
        public let limit: UInt64
        public init(path: String, limit: UInt64 = 10) {
            stringValidator(pattern: "/(.|[\\r\\n])*|id:.*|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            comparableValidator(minValue: 1, maxValue: 100)(limit)
            self.limit = limit
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListRevisionsArgSerializer().serialize(self)))"
        }
    }
    public class ListRevisionsArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListRevisionsArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "limit": Serialization._UInt64Serializer.serialize(value.limit),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListRevisionsArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let limit = Serialization._UInt64Serializer.deserialize(dict["limit"] ?? .Null)
                    return ListRevisionsArg(path: path, limit: limit)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ListRevisionsError union
    public enum ListRevisionsError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListRevisionsErrorSerializer().serialize(self)))"
        }
    }
    public class ListRevisionsErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListRevisionsError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ListRevisionsError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return ListRevisionsError.Path(v)
                        case "other":
                            return ListRevisionsError.Other
                        default:
                            return ListRevisionsError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ListRevisionsResult struct
    public class ListRevisionsResult: CustomStringConvertible {
        /// If the file is deleted.
        public let isDeleted: Bool
        /// The revisions for the file. Only non-delete revisions will show up here.
        public let entries: Array<Files.FileMetadata>
        public init(isDeleted: Bool, entries: Array<Files.FileMetadata>) {
            self.isDeleted = isDeleted
            self.entries = entries
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ListRevisionsResultSerializer().serialize(self)))"
        }
    }
    public class ListRevisionsResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ListRevisionsResult) -> JSON {
            let output = [ 
            "is_deleted": Serialization._BoolSerializer.serialize(value.isDeleted),
            "entries": ArraySerializer(Files.FileMetadataSerializer()).serialize(value.entries),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ListRevisionsResult {
            switch json {
                case .Dictionary(let dict):
                    let isDeleted = Serialization._BoolSerializer.deserialize(dict["is_deleted"] ?? .Null)
                    let entries = ArraySerializer(Files.FileMetadataSerializer()).deserialize(dict["entries"] ?? .Null)
                    return ListRevisionsResult(isDeleted: isDeleted, entries: entries)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LookUpPropertiesError union
    public enum LookUpPropertiesError: CustomStringConvertible {
        /// This property group does not exist for this file.
        case PropertyGroupNotFound

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LookUpPropertiesErrorSerializer().serialize(self)))"
        }
    }
    public class LookUpPropertiesErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: LookUpPropertiesError) -> JSON {
            switch value {
                case .PropertyGroupNotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("property_group_not_found")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> LookUpPropertiesError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "property_group_not_found":
                            return LookUpPropertiesError.PropertyGroupNotFound
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The LookupError union
    public enum LookupError: CustomStringConvertible {
        /// An unspecified error.
        case MalformedPath(String?)
        /// There is nothing at the given path.
        case NotFound
        /// We were expecting a file, but the given path refers to something that isn't a file.
        case NotFile
        /// We were expecting a folder, but the given path refers to something that isn't a folder.
        case NotFolder
        /// The file cannot be transferred because the content is restricted.  For example, sometimes there are legal
        /// restrictions due to copyright claims.
        case RestrictedContent
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LookupErrorSerializer().serialize(self)))"
        }
    }
    public class LookupErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: LookupError) -> JSON {
            switch value {
                case .MalformedPath(let arg):
                    var d = ["malformed_path": NullableSerializer(Serialization._StringSerializer).serialize(arg)]
                    d[".tag"] = .Str("malformed_path")
                    return .Dictionary(d)
                case .NotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_found")
                    return .Dictionary(d)
                case .NotFile:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_file")
                    return .Dictionary(d)
                case .NotFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_folder")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> LookupError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "malformed_path":
                            let v = NullableSerializer(Serialization._StringSerializer).deserialize(d["malformed_path"] ?? .Null)
                            return LookupError.MalformedPath(v)
                        case "not_found":
                            return LookupError.NotFound
                        case "not_file":
                            return LookupError.NotFile
                        case "not_folder":
                            return LookupError.NotFolder
                        case "restricted_content":
                            return LookupError.RestrictedContent
                        case "other":
                            return LookupError.Other
                        default:
                            return LookupError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The MediaInfo union
    public enum MediaInfo: CustomStringConvertible {
        /// Indicate the photo/video is still under processing and metadata is not available yet.
        case Pending
        /// The metadata for the photo/video.
        case Metadata(Files.MediaMetadata)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MediaInfoSerializer().serialize(self)))"
        }
    }
    public class MediaInfoSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: MediaInfo) -> JSON {
            switch value {
                case .Pending:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("pending")
                    return .Dictionary(d)
                case .Metadata(let arg):
                    var d = ["metadata": Files.MediaMetadataSerializer().serialize(arg)]
                    d[".tag"] = .Str("metadata")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> MediaInfo {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "pending":
                            return MediaInfo.Pending
                        case "metadata":
                            let v = Files.MediaMetadataSerializer().deserialize(d["metadata"] ?? .Null)
                            return MediaInfo.Metadata(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Metadata for a photo or video.
    public class MediaMetadata: CustomStringConvertible {
        /// Dimension of the photo/video.
        public let dimensions: Files.Dimensions?
        /// The GPS coordinate of the photo/video.
        public let location: Files.GpsCoordinates?
        /// The timestamp when the photo/video is taken.
        public let timeTaken: NSDate?
        public init(dimensions: Files.Dimensions? = nil, location: Files.GpsCoordinates? = nil, timeTaken: NSDate? = nil) {
            self.dimensions = dimensions
            self.location = location
            self.timeTaken = timeTaken
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MediaMetadataSerializer().serialize(self)))"
        }
    }
    public class MediaMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: MediaMetadata) -> JSON {
            var output = [ 
            "dimensions": NullableSerializer(Files.DimensionsSerializer()).serialize(value.dimensions),
            "location": NullableSerializer(Files.GpsCoordinatesSerializer()).serialize(value.location),
            "time_taken": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.timeTaken),
            ]
            switch value {
                case let photo as Files.PhotoMetadata:
                    for (k,v) in Serialization.getFields(Files.PhotoMetadataSerializer().serialize(photo)) {
                        output[k] = v
                    }
                    output[".tag"] = .Str("photo")
                case let video as Files.VideoMetadata:
                    for (k,v) in Serialization.getFields(Files.VideoMetadataSerializer().serialize(video)) {
                        output[k] = v
                    }
                    output[".tag"] = .Str("video")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> MediaMetadata {
            switch json {
                case .Dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "photo":
                            return Files.PhotoMetadataSerializer().deserialize(json)
                        case "video":
                            return Files.VideoMetadataSerializer().deserialize(json)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Metadata for a photo.
    public class PhotoMetadata: Files.MediaMetadata {
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PhotoMetadataSerializer().serialize(self)))"
        }
    }
    public class PhotoMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PhotoMetadata) -> JSON {
            let output = [ 
            "dimensions": NullableSerializer(Files.DimensionsSerializer()).serialize(value.dimensions),
            "location": NullableSerializer(Files.GpsCoordinatesSerializer()).serialize(value.location),
            "time_taken": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.timeTaken),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> PhotoMetadata {
            switch json {
                case .Dictionary(let dict):
                    let dimensions = NullableSerializer(Files.DimensionsSerializer()).deserialize(dict["dimensions"] ?? .Null)
                    let location = NullableSerializer(Files.GpsCoordinatesSerializer()).deserialize(dict["location"] ?? .Null)
                    let timeTaken = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["time_taken"] ?? .Null)
                    return PhotoMetadata(dimensions: dimensions, location: location, timeTaken: timeTaken)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PreviewArg struct
    public class PreviewArg: CustomStringConvertible {
        /// The path of the file to preview.
        public let path: String
        /// Deprecated. Please specify revision in path instead
        public let rev: String?
        public init(path: String, rev: String? = nil) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            nullableValidator(stringValidator(minLength: 9, pattern: "[0-9a-f]+"))(rev)
            self.rev = rev
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PreviewArgSerializer().serialize(self)))"
        }
    }
    public class PreviewArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PreviewArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "rev": NullableSerializer(Serialization._StringSerializer).serialize(value.rev),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> PreviewArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let rev = NullableSerializer(Serialization._StringSerializer).deserialize(dict["rev"] ?? .Null)
                    return PreviewArg(path: path, rev: rev)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PreviewError union
    public enum PreviewError: CustomStringConvertible {
        /// An error occurs when downloading metadata for the file.
        case Path(Files.LookupError)
        /// This preview generation is still in progress and the file is not ready  for preview yet.
        case InProgress
        /// The file extension is not supported preview generation.
        case UnsupportedExtension
        /// The file content is not supported for preview generation.
        case UnsupportedContent

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PreviewErrorSerializer().serialize(self)))"
        }
    }
    public class PreviewErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PreviewError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .InProgress:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("in_progress")
                    return .Dictionary(d)
                case .UnsupportedExtension:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("unsupported_extension")
                    return .Dictionary(d)
                case .UnsupportedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("unsupported_content")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> PreviewError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return PreviewError.Path(v)
                        case "in_progress":
                            return PreviewError.InProgress
                        case "unsupported_extension":
                            return PreviewError.UnsupportedExtension
                        case "unsupported_content":
                            return PreviewError.UnsupportedContent
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The PropertyGroupUpdate struct
    public class PropertyGroupUpdate: CustomStringConvertible {
        /// A unique identifier for a property template.
        public let templateId: String
        /// List of property fields to update if the field already exists. If the field doesn't exist, add the field to
        /// the property group.
        public let addOrUpdateFields: Array<Properties.PropertyField>?
        /// List of property field names to remove from property group if the field exists.
        public let removeFields: Array<String>?
        public init(templateId: String, addOrUpdateFields: Array<Properties.PropertyField>? = nil, removeFields: Array<String>? = nil) {
            stringValidator(minLength: 1, pattern: "(/|ptid:).*")(templateId)
            self.templateId = templateId
            self.addOrUpdateFields = addOrUpdateFields
            nullableValidator(arrayValidator(itemValidator: stringValidator()))(removeFields)
            self.removeFields = removeFields
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PropertyGroupUpdateSerializer().serialize(self)))"
        }
    }
    public class PropertyGroupUpdateSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PropertyGroupUpdate) -> JSON {
            let output = [ 
            "template_id": Serialization._StringSerializer.serialize(value.templateId),
            "add_or_update_fields": NullableSerializer(ArraySerializer(Properties.PropertyFieldSerializer())).serialize(value.addOrUpdateFields),
            "remove_fields": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.removeFields),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> PropertyGroupUpdate {
            switch json {
                case .Dictionary(let dict):
                    let templateId = Serialization._StringSerializer.deserialize(dict["template_id"] ?? .Null)
                    let addOrUpdateFields = NullableSerializer(ArraySerializer(Properties.PropertyFieldSerializer())).deserialize(dict["add_or_update_fields"] ?? .Null)
                    let removeFields = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["remove_fields"] ?? .Null)
                    return PropertyGroupUpdate(templateId: templateId, addOrUpdateFields: addOrUpdateFields, removeFields: removeFields)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PropertyGroupWithPath struct
    public class PropertyGroupWithPath: CustomStringConvertible {
        /// A unique identifier for the file.
        public let path: String
        /// Filled custom property templates associated with a file.
        public let propertyGroups: Array<Properties.PropertyGroup>
        public init(path: String, propertyGroups: Array<Properties.PropertyGroup>) {
            stringValidator(pattern: "/(.|[\\r\\n])*|id:.*|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.propertyGroups = propertyGroups
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PropertyGroupWithPathSerializer().serialize(self)))"
        }
    }
    public class PropertyGroupWithPathSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: PropertyGroupWithPath) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "property_groups": ArraySerializer(Properties.PropertyGroupSerializer()).serialize(value.propertyGroups),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> PropertyGroupWithPath {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let propertyGroups = ArraySerializer(Properties.PropertyGroupSerializer()).deserialize(dict["property_groups"] ?? .Null)
                    return PropertyGroupWithPath(path: path, propertyGroups: propertyGroups)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RelocationArg struct
    public class RelocationArg: CustomStringConvertible {
        /// Path in the user's Dropbox to be copied or moved.
        public let fromPath: String
        /// Path in the user's Dropbox that is the destination.
        public let toPath: String
        public init(fromPath: String, toPath: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(fromPath)
            self.fromPath = fromPath
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(toPath)
            self.toPath = toPath
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RelocationArgSerializer().serialize(self)))"
        }
    }
    public class RelocationArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RelocationArg) -> JSON {
            let output = [ 
            "from_path": Serialization._StringSerializer.serialize(value.fromPath),
            "to_path": Serialization._StringSerializer.serialize(value.toPath),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> RelocationArg {
            switch json {
                case .Dictionary(let dict):
                    let fromPath = Serialization._StringSerializer.deserialize(dict["from_path"] ?? .Null)
                    let toPath = Serialization._StringSerializer.deserialize(dict["to_path"] ?? .Null)
                    return RelocationArg(fromPath: fromPath, toPath: toPath)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RelocationError union
    public enum RelocationError: CustomStringConvertible {
        /// An unspecified error.
        case FromLookup(Files.LookupError)
        /// An unspecified error.
        case FromWrite(Files.WriteError)
        /// An unspecified error.
        case To(Files.WriteError)
        /// Shared folders can't be copied.
        case CantCopySharedFolder
        /// Your move operation would result in nested shared folders.  This is not allowed.
        case CantNestSharedFolder
        /// You cannot move a folder into itself.
        case CantMoveFolderIntoItself
        /// The operation would involve more than 10,000 files and folders.
        case TooManyFiles
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RelocationErrorSerializer().serialize(self)))"
        }
    }
    public class RelocationErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RelocationError) -> JSON {
            switch value {
                case .FromLookup(let arg):
                    var d = ["from_lookup": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("from_lookup")
                    return .Dictionary(d)
                case .FromWrite(let arg):
                    var d = ["from_write": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("from_write")
                    return .Dictionary(d)
                case .To(let arg):
                    var d = ["to": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("to")
                    return .Dictionary(d)
                case .CantCopySharedFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("cant_copy_shared_folder")
                    return .Dictionary(d)
                case .CantNestSharedFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("cant_nest_shared_folder")
                    return .Dictionary(d)
                case .CantMoveFolderIntoItself:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("cant_move_folder_into_itself")
                    return .Dictionary(d)
                case .TooManyFiles:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("too_many_files")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> RelocationError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "from_lookup":
                            let v = Files.LookupErrorSerializer().deserialize(d["from_lookup"] ?? .Null)
                            return RelocationError.FromLookup(v)
                        case "from_write":
                            let v = Files.WriteErrorSerializer().deserialize(d["from_write"] ?? .Null)
                            return RelocationError.FromWrite(v)
                        case "to":
                            let v = Files.WriteErrorSerializer().deserialize(d["to"] ?? .Null)
                            return RelocationError.To(v)
                        case "cant_copy_shared_folder":
                            return RelocationError.CantCopySharedFolder
                        case "cant_nest_shared_folder":
                            return RelocationError.CantNestSharedFolder
                        case "cant_move_folder_into_itself":
                            return RelocationError.CantMoveFolderIntoItself
                        case "too_many_files":
                            return RelocationError.TooManyFiles
                        case "other":
                            return RelocationError.Other
                        default:
                            return RelocationError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The RemovePropertiesArg struct
    public class RemovePropertiesArg: CustomStringConvertible {
        /// A unique identifier for the file.
        public let path: String
        /// A list of identifiers for a property template created by route properties/template/add.
        public let propertyTemplateIds: Array<String>
        public init(path: String, propertyTemplateIds: Array<String>) {
            stringValidator(pattern: "/(.|[\\r\\n])*|id:.*|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            arrayValidator(itemValidator: stringValidator(minLength: 1, pattern: "(/|ptid:).*"))(propertyTemplateIds)
            self.propertyTemplateIds = propertyTemplateIds
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RemovePropertiesArgSerializer().serialize(self)))"
        }
    }
    public class RemovePropertiesArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RemovePropertiesArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "property_template_ids": ArraySerializer(Serialization._StringSerializer).serialize(value.propertyTemplateIds),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> RemovePropertiesArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let propertyTemplateIds = ArraySerializer(Serialization._StringSerializer).deserialize(dict["property_template_ids"] ?? .Null)
                    return RemovePropertiesArg(path: path, propertyTemplateIds: propertyTemplateIds)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RemovePropertiesError union
    public enum RemovePropertiesError: CustomStringConvertible {
        /// Property template does not exist for given identifier.
        case TemplateNotFound(String)
        /// You do not have the permissions to modify this property template.
        case RestrictedContent
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case PropertyGroupLookup(Files.LookUpPropertiesError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RemovePropertiesErrorSerializer().serialize(self)))"
        }
    }
    public class RemovePropertiesErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RemovePropertiesError) -> JSON {
            switch value {
                case .TemplateNotFound(let arg):
                    var d = ["template_not_found": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("template_not_found")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .PropertyGroupLookup(let arg):
                    var d = ["property_group_lookup": Files.LookUpPropertiesErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("property_group_lookup")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> RemovePropertiesError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "template_not_found":
                            let v = Serialization._StringSerializer.deserialize(d["template_not_found"] ?? .Null)
                            return RemovePropertiesError.TemplateNotFound(v)
                        case "restricted_content":
                            return RemovePropertiesError.RestrictedContent
                        case "other":
                            return RemovePropertiesError.Other
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return RemovePropertiesError.Path(v)
                        case "property_group_lookup":
                            let v = Files.LookUpPropertiesErrorSerializer().deserialize(d["property_group_lookup"] ?? .Null)
                            return RemovePropertiesError.PropertyGroupLookup(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The RestoreArg struct
    public class RestoreArg: CustomStringConvertible {
        /// The path to the file you want to restore.
        public let path: String
        /// The revision to restore for the file.
        public let rev: String
        public init(path: String, rev: String) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            stringValidator(minLength: 9, pattern: "[0-9a-f]+")(rev)
            self.rev = rev
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RestoreArgSerializer().serialize(self)))"
        }
    }
    public class RestoreArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RestoreArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "rev": Serialization._StringSerializer.serialize(value.rev),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> RestoreArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let rev = Serialization._StringSerializer.deserialize(dict["rev"] ?? .Null)
                    return RestoreArg(path: path, rev: rev)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RestoreError union
    public enum RestoreError: CustomStringConvertible {
        /// An error occurs when downloading metadata for the file.
        case PathLookup(Files.LookupError)
        /// An error occurs when trying to restore the file to that path.
        case PathWrite(Files.WriteError)
        /// The revision is invalid. It may point to a different file.
        case InvalidRevision
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RestoreErrorSerializer().serialize(self)))"
        }
    }
    public class RestoreErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: RestoreError) -> JSON {
            switch value {
                case .PathLookup(let arg):
                    var d = ["path_lookup": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path_lookup")
                    return .Dictionary(d)
                case .PathWrite(let arg):
                    var d = ["path_write": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path_write")
                    return .Dictionary(d)
                case .InvalidRevision:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("invalid_revision")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> RestoreError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path_lookup":
                            let v = Files.LookupErrorSerializer().deserialize(d["path_lookup"] ?? .Null)
                            return RestoreError.PathLookup(v)
                        case "path_write":
                            let v = Files.WriteErrorSerializer().deserialize(d["path_write"] ?? .Null)
                            return RestoreError.PathWrite(v)
                        case "invalid_revision":
                            return RestoreError.InvalidRevision
                        case "other":
                            return RestoreError.Other
                        default:
                            return RestoreError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SaveCopyReferenceArg struct
    public class SaveCopyReferenceArg: CustomStringConvertible {
        /// A copy reference returned by copyReferenceGet.
        public let copyReference: String
        /// Path in the user's Dropbox that is the destination.
        public let path: String
        public init(copyReference: String, path: String) {
            stringValidator()(copyReference)
            self.copyReference = copyReference
            stringValidator(pattern: "/(.|[\\r\\n])*")(path)
            self.path = path
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveCopyReferenceArgSerializer().serialize(self)))"
        }
    }
    public class SaveCopyReferenceArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveCopyReferenceArg) -> JSON {
            let output = [ 
            "copy_reference": Serialization._StringSerializer.serialize(value.copyReference),
            "path": Serialization._StringSerializer.serialize(value.path),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SaveCopyReferenceArg {
            switch json {
                case .Dictionary(let dict):
                    let copyReference = Serialization._StringSerializer.deserialize(dict["copy_reference"] ?? .Null)
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    return SaveCopyReferenceArg(copyReference: copyReference, path: path)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SaveCopyReferenceError union
    public enum SaveCopyReferenceError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.WriteError)
        /// The copy reference is invalid.
        case InvalidCopyReference
        /// You don't have permission to save the given copy reference. Please make sure this app is same app which
        /// created the copy reference and the source user is still linked to the app.
        case NoPermission
        /// The file referenced by the copy reference cannot be found.
        case NotFound
        /// The operation would involve more than 10,000 files and folders.
        case TooManyFiles
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveCopyReferenceErrorSerializer().serialize(self)))"
        }
    }
    public class SaveCopyReferenceErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveCopyReferenceError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .InvalidCopyReference:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("invalid_copy_reference")
                    return .Dictionary(d)
                case .NoPermission:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("no_permission")
                    return .Dictionary(d)
                case .NotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_found")
                    return .Dictionary(d)
                case .TooManyFiles:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("too_many_files")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SaveCopyReferenceError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.WriteErrorSerializer().deserialize(d["path"] ?? .Null)
                            return SaveCopyReferenceError.Path(v)
                        case "invalid_copy_reference":
                            return SaveCopyReferenceError.InvalidCopyReference
                        case "no_permission":
                            return SaveCopyReferenceError.NoPermission
                        case "not_found":
                            return SaveCopyReferenceError.NotFound
                        case "too_many_files":
                            return SaveCopyReferenceError.TooManyFiles
                        case "other":
                            return SaveCopyReferenceError.Other
                        default:
                            return SaveCopyReferenceError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SaveCopyReferenceResult struct
    public class SaveCopyReferenceResult: CustomStringConvertible {
        /// The metadata of the saved file or folder in the user's Dropbox.
        public let metadata: Files.Metadata
        public init(metadata: Files.Metadata) {
            self.metadata = metadata
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveCopyReferenceResultSerializer().serialize(self)))"
        }
    }
    public class SaveCopyReferenceResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveCopyReferenceResult) -> JSON {
            let output = [ 
            "metadata": Files.MetadataSerializer().serialize(value.metadata),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SaveCopyReferenceResult {
            switch json {
                case .Dictionary(let dict):
                    let metadata = Files.MetadataSerializer().deserialize(dict["metadata"] ?? .Null)
                    return SaveCopyReferenceResult(metadata: metadata)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SaveUrlArg struct
    public class SaveUrlArg: CustomStringConvertible {
        /// The path in Dropbox where the URL will be saved to.
        public let path: String
        /// The URL to be saved.
        public let url: String
        public init(path: String, url: String) {
            stringValidator(pattern: "/(.|[\\r\\n])*")(path)
            self.path = path
            stringValidator()(url)
            self.url = url
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveUrlArgSerializer().serialize(self)))"
        }
    }
    public class SaveUrlArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveUrlArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "url": Serialization._StringSerializer.serialize(value.url),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SaveUrlArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let url = Serialization._StringSerializer.deserialize(dict["url"] ?? .Null)
                    return SaveUrlArg(path: path, url: url)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SaveUrlError union
    public enum SaveUrlError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.WriteError)
        /// Failed downloading the given URL.
        case DownloadFailed
        /// The given URL is invalid.
        case InvalidUrl
        /// The file where the URL is saved to no longer exists.
        case NotFound
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveUrlErrorSerializer().serialize(self)))"
        }
    }
    public class SaveUrlErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveUrlError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .DownloadFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("download_failed")
                    return .Dictionary(d)
                case .InvalidUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("invalid_url")
                    return .Dictionary(d)
                case .NotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_found")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SaveUrlError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.WriteErrorSerializer().deserialize(d["path"] ?? .Null)
                            return SaveUrlError.Path(v)
                        case "download_failed":
                            return SaveUrlError.DownloadFailed
                        case "invalid_url":
                            return SaveUrlError.InvalidUrl
                        case "not_found":
                            return SaveUrlError.NotFound
                        case "other":
                            return SaveUrlError.Other
                        default:
                            return SaveUrlError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SaveUrlJobStatus union
    public enum SaveUrlJobStatus: CustomStringConvertible {
        /// The asynchronous job is still in progress.
        case InProgress
        /// Metadata of the file where the URL is saved to.
        case Complete(Files.FileMetadata)
        /// An unspecified error.
        case Failed(Files.SaveUrlError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveUrlJobStatusSerializer().serialize(self)))"
        }
    }
    public class SaveUrlJobStatusSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveUrlJobStatus) -> JSON {
            switch value {
                case .InProgress:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("in_progress")
                    return .Dictionary(d)
                case .Complete(let arg):
                    var d = Serialization.getFields(Files.FileMetadataSerializer().serialize(arg))
                    d[".tag"] = .Str("complete")
                    return .Dictionary(d)
                case .Failed(let arg):
                    var d = ["failed": Files.SaveUrlErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("failed")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SaveUrlJobStatus {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "in_progress":
                            return SaveUrlJobStatus.InProgress
                        case "complete":
                            let v = Files.FileMetadataSerializer().deserialize(json)
                            return SaveUrlJobStatus.Complete(v)
                        case "failed":
                            let v = Files.SaveUrlErrorSerializer().deserialize(d["failed"] ?? .Null)
                            return SaveUrlJobStatus.Failed(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SaveUrlResult union
    public enum SaveUrlResult: CustomStringConvertible {
        /// This response indicates that the processing is asynchronous. The string is an id that can be used to obtain
        /// the status of the asynchronous job.
        case AsyncJobId(String)
        /// Metadata of the file where the URL is saved to.
        case Complete(Files.FileMetadata)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SaveUrlResultSerializer().serialize(self)))"
        }
    }
    public class SaveUrlResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SaveUrlResult) -> JSON {
            switch value {
                case .AsyncJobId(let arg):
                    var d = ["async_job_id": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("async_job_id")
                    return .Dictionary(d)
                case .Complete(let arg):
                    var d = Serialization.getFields(Files.FileMetadataSerializer().serialize(arg))
                    d[".tag"] = .Str("complete")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SaveUrlResult {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "async_job_id":
                            let v = Serialization._StringSerializer.deserialize(d["async_job_id"] ?? .Null)
                            return SaveUrlResult.AsyncJobId(v)
                        case "complete":
                            let v = Files.FileMetadataSerializer().deserialize(json)
                            return SaveUrlResult.Complete(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SearchArg struct
    public class SearchArg: CustomStringConvertible {
        /// The path in the user's Dropbox to search. Should probably be a folder.
        public let path: String
        /// The string to search for. The search string is split on spaces into multiple tokens. For file name
        /// searching, the last token is used for prefix matching (i.e. "bat c" matches "bat cave" but not "batman
        /// car").
        public let query: String
        /// The starting index within the search results (used for paging).
        public let start: UInt64
        /// The maximum number of search results to return.
        public let maxResults: UInt64
        /// The search mode (filename, filename_and_content, or deleted_filename). Note that searching file content is
        /// only available for Dropbox Business accounts.
        public let mode: Files.SearchMode
        public init(path: String, query: String, start: UInt64 = 0, maxResults: UInt64 = 100, mode: Files.SearchMode = .Filename) {
            stringValidator(pattern: "(/(.|[\\r\\n])*)?|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            stringValidator()(query)
            self.query = query
            comparableValidator()(start)
            self.start = start
            comparableValidator(minValue: 1, maxValue: 1000)(maxResults)
            self.maxResults = maxResults
            self.mode = mode
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchArgSerializer().serialize(self)))"
        }
    }
    public class SearchArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "query": Serialization._StringSerializer.serialize(value.query),
            "start": Serialization._UInt64Serializer.serialize(value.start),
            "max_results": Serialization._UInt64Serializer.serialize(value.maxResults),
            "mode": Files.SearchModeSerializer().serialize(value.mode),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SearchArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let query = Serialization._StringSerializer.deserialize(dict["query"] ?? .Null)
                    let start = Serialization._UInt64Serializer.deserialize(dict["start"] ?? .Null)
                    let maxResults = Serialization._UInt64Serializer.deserialize(dict["max_results"] ?? .Null)
                    let mode = Files.SearchModeSerializer().deserialize(dict["mode"] ?? .Null)
                    return SearchArg(path: path, query: query, start: start, maxResults: maxResults, mode: mode)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SearchError union
    public enum SearchError: CustomStringConvertible {
        /// An unspecified error.
        case Path(Files.LookupError)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchErrorSerializer().serialize(self)))"
        }
    }
    public class SearchErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SearchError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return SearchError.Path(v)
                        case "other":
                            return SearchError.Other
                        default:
                            return SearchError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SearchMatch struct
    public class SearchMatch: CustomStringConvertible {
        /// The type of the match.
        public let matchType: Files.SearchMatchType
        /// The metadata for the matched file or folder.
        public let metadata: Files.Metadata
        public init(matchType: Files.SearchMatchType, metadata: Files.Metadata) {
            self.matchType = matchType
            self.metadata = metadata
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchMatchSerializer().serialize(self)))"
        }
    }
    public class SearchMatchSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchMatch) -> JSON {
            let output = [ 
            "match_type": Files.SearchMatchTypeSerializer().serialize(value.matchType),
            "metadata": Files.MetadataSerializer().serialize(value.metadata),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SearchMatch {
            switch json {
                case .Dictionary(let dict):
                    let matchType = Files.SearchMatchTypeSerializer().deserialize(dict["match_type"] ?? .Null)
                    let metadata = Files.MetadataSerializer().deserialize(dict["metadata"] ?? .Null)
                    return SearchMatch(matchType: matchType, metadata: metadata)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Indicates what type of match was found for a given item.
    public enum SearchMatchType: CustomStringConvertible {
        /// This item was matched on its file or folder name.
        case Filename
        /// This item was matched based on its file contents.
        case Content
        /// This item was matched based on both its contents and its file name.
        case Both

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchMatchTypeSerializer().serialize(self)))"
        }
    }
    public class SearchMatchTypeSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchMatchType) -> JSON {
            switch value {
                case .Filename:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("filename")
                    return .Dictionary(d)
                case .Content:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("content")
                    return .Dictionary(d)
                case .Both:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("both")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SearchMatchType {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "filename":
                            return SearchMatchType.Filename
                        case "content":
                            return SearchMatchType.Content
                        case "both":
                            return SearchMatchType.Both
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SearchMode union
    public enum SearchMode: CustomStringConvertible {
        /// Search file and folder names.
        case Filename
        /// Search file and folder names as well as file contents.
        case FilenameAndContent
        /// Search for deleted file and folder names.
        case DeletedFilename

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchModeSerializer().serialize(self)))"
        }
    }
    public class SearchModeSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchMode) -> JSON {
            switch value {
                case .Filename:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("filename")
                    return .Dictionary(d)
                case .FilenameAndContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("filename_and_content")
                    return .Dictionary(d)
                case .DeletedFilename:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("deleted_filename")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> SearchMode {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "filename":
                            return SearchMode.Filename
                        case "filename_and_content":
                            return SearchMode.FilenameAndContent
                        case "deleted_filename":
                            return SearchMode.DeletedFilename
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SearchResult struct
    public class SearchResult: CustomStringConvertible {
        /// A list (possibly empty) of matches for the query.
        public let matches: Array<Files.SearchMatch>
        /// Used for paging. If true, indicates there is another page of results available that can be fetched by
        /// calling search again.
        public let more: Bool
        /// Used for paging. Value to set the start argument to when calling search to fetch the next page of results.
        public let start: UInt64
        public init(matches: Array<Files.SearchMatch>, more: Bool, start: UInt64) {
            self.matches = matches
            self.more = more
            comparableValidator()(start)
            self.start = start
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SearchResultSerializer().serialize(self)))"
        }
    }
    public class SearchResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: SearchResult) -> JSON {
            let output = [ 
            "matches": ArraySerializer(Files.SearchMatchSerializer()).serialize(value.matches),
            "more": Serialization._BoolSerializer.serialize(value.more),
            "start": Serialization._UInt64Serializer.serialize(value.start),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> SearchResult {
            switch json {
                case .Dictionary(let dict):
                    let matches = ArraySerializer(Files.SearchMatchSerializer()).deserialize(dict["matches"] ?? .Null)
                    let more = Serialization._BoolSerializer.deserialize(dict["more"] ?? .Null)
                    let start = Serialization._UInt64Serializer.deserialize(dict["start"] ?? .Null)
                    return SearchResult(matches: matches, more: more, start: start)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ThumbnailArg struct
    public class ThumbnailArg: CustomStringConvertible {
        /// The path to the image file you want to thumbnail.
        public let path: String
        /// The format for the thumbnail image, jpeg (default) or png. For  images that are photos, jpeg should be
        /// preferred, while png is  better for screenshots and digital arts.
        public let format: Files.ThumbnailFormat
        /// The size for the thumbnail image.
        public let size: Files.ThumbnailSize
        public init(path: String, format: Files.ThumbnailFormat = .Jpeg, size: Files.ThumbnailSize = .W64h64) {
            stringValidator(pattern: "(/(.|[\\r\\n])*|id:.*)|(rev:[0-9a-f]{9,})|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.format = format
            self.size = size
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ThumbnailArgSerializer().serialize(self)))"
        }
    }
    public class ThumbnailArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ThumbnailArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "format": Files.ThumbnailFormatSerializer().serialize(value.format),
            "size": Files.ThumbnailSizeSerializer().serialize(value.size),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> ThumbnailArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let format = Files.ThumbnailFormatSerializer().deserialize(dict["format"] ?? .Null)
                    let size = Files.ThumbnailSizeSerializer().deserialize(dict["size"] ?? .Null)
                    return ThumbnailArg(path: path, format: format, size: size)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ThumbnailError union
    public enum ThumbnailError: CustomStringConvertible {
        /// An error occurs when downloading metadata for the image.
        case Path(Files.LookupError)
        /// The file extension doesn't allow conversion to a thumbnail.
        case UnsupportedExtension
        /// The image cannot be converted to a thumbnail.
        case UnsupportedImage
        /// An error occurs during thumbnail conversion.
        case ConversionError

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ThumbnailErrorSerializer().serialize(self)))"
        }
    }
    public class ThumbnailErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ThumbnailError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .UnsupportedExtension:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("unsupported_extension")
                    return .Dictionary(d)
                case .UnsupportedImage:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("unsupported_image")
                    return .Dictionary(d)
                case .ConversionError:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("conversion_error")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ThumbnailError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return ThumbnailError.Path(v)
                        case "unsupported_extension":
                            return ThumbnailError.UnsupportedExtension
                        case "unsupported_image":
                            return ThumbnailError.UnsupportedImage
                        case "conversion_error":
                            return ThumbnailError.ConversionError
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ThumbnailFormat union
    public enum ThumbnailFormat: CustomStringConvertible {
        /// An unspecified error.
        case Jpeg
        /// An unspecified error.
        case Png

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ThumbnailFormatSerializer().serialize(self)))"
        }
    }
    public class ThumbnailFormatSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ThumbnailFormat) -> JSON {
            switch value {
                case .Jpeg:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("jpeg")
                    return .Dictionary(d)
                case .Png:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("png")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ThumbnailFormat {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "jpeg":
                            return ThumbnailFormat.Jpeg
                        case "png":
                            return ThumbnailFormat.Png
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The ThumbnailSize union
    public enum ThumbnailSize: CustomStringConvertible {
        /// 32 by 32 px.
        case W32h32
        /// 64 by 64 px.
        case W64h64
        /// 128 by 128 px.
        case W128h128
        /// 640 by 480 px.
        case W640h480
        /// 1024 by 768
        case W1024h768

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ThumbnailSizeSerializer().serialize(self)))"
        }
    }
    public class ThumbnailSizeSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: ThumbnailSize) -> JSON {
            switch value {
                case .W32h32:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("w32h32")
                    return .Dictionary(d)
                case .W64h64:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("w64h64")
                    return .Dictionary(d)
                case .W128h128:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("w128h128")
                    return .Dictionary(d)
                case .W640h480:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("w640h480")
                    return .Dictionary(d)
                case .W1024h768:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("w1024h768")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> ThumbnailSize {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "w32h32":
                            return ThumbnailSize.W32h32
                        case "w64h64":
                            return ThumbnailSize.W64h64
                        case "w128h128":
                            return ThumbnailSize.W128h128
                        case "w640h480":
                            return ThumbnailSize.W640h480
                        case "w1024h768":
                            return ThumbnailSize.W1024h768
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UpdatePropertiesError union
    public enum UpdatePropertiesError: CustomStringConvertible {
        /// Property template does not exist for given identifier.
        case TemplateNotFound(String)
        /// You do not have the permissions to modify this property template.
        case RestrictedContent
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case Path(Files.LookupError)
        /// A field value in this property group is too large.
        case PropertyFieldTooLarge
        /// The property group specified does not conform to the property template.
        case DoesNotFitTemplate
        /// An unspecified error.
        case PropertyGroupLookup(Files.LookUpPropertiesError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UpdatePropertiesErrorSerializer().serialize(self)))"
        }
    }
    public class UpdatePropertiesErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UpdatePropertiesError) -> JSON {
            switch value {
                case .TemplateNotFound(let arg):
                    var d = ["template_not_found": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("template_not_found")
                    return .Dictionary(d)
                case .RestrictedContent:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("restricted_content")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.LookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .PropertyFieldTooLarge:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("property_field_too_large")
                    return .Dictionary(d)
                case .DoesNotFitTemplate:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("does_not_fit_template")
                    return .Dictionary(d)
                case .PropertyGroupLookup(let arg):
                    var d = ["property_group_lookup": Files.LookUpPropertiesErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("property_group_lookup")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UpdatePropertiesError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "template_not_found":
                            let v = Serialization._StringSerializer.deserialize(d["template_not_found"] ?? .Null)
                            return UpdatePropertiesError.TemplateNotFound(v)
                        case "restricted_content":
                            return UpdatePropertiesError.RestrictedContent
                        case "other":
                            return UpdatePropertiesError.Other
                        case "path":
                            let v = Files.LookupErrorSerializer().deserialize(d["path"] ?? .Null)
                            return UpdatePropertiesError.Path(v)
                        case "property_field_too_large":
                            return UpdatePropertiesError.PropertyFieldTooLarge
                        case "does_not_fit_template":
                            return UpdatePropertiesError.DoesNotFitTemplate
                        case "property_group_lookup":
                            let v = Files.LookUpPropertiesErrorSerializer().deserialize(d["property_group_lookup"] ?? .Null)
                            return UpdatePropertiesError.PropertyGroupLookup(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UpdatePropertyGroupArg struct
    public class UpdatePropertyGroupArg: CustomStringConvertible {
        /// A unique identifier for the file.
        public let path: String
        /// Filled custom property templates associated with a file.
        public let updatePropertyGroups: Array<Files.PropertyGroupUpdate>
        public init(path: String, updatePropertyGroups: Array<Files.PropertyGroupUpdate>) {
            stringValidator(pattern: "/(.|[\\r\\n])*|id:.*|(ns:[0-9]+(/.*)?)")(path)
            self.path = path
            self.updatePropertyGroups = updatePropertyGroups
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UpdatePropertyGroupArgSerializer().serialize(self)))"
        }
    }
    public class UpdatePropertyGroupArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UpdatePropertyGroupArg) -> JSON {
            let output = [ 
            "path": Serialization._StringSerializer.serialize(value.path),
            "update_property_groups": ArraySerializer(Files.PropertyGroupUpdateSerializer()).serialize(value.updatePropertyGroups),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UpdatePropertyGroupArg {
            switch json {
                case .Dictionary(let dict):
                    let path = Serialization._StringSerializer.deserialize(dict["path"] ?? .Null)
                    let updatePropertyGroups = ArraySerializer(Files.PropertyGroupUpdateSerializer()).deserialize(dict["update_property_groups"] ?? .Null)
                    return UpdatePropertyGroupArg(path: path, updatePropertyGroups: updatePropertyGroups)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadError union
    public enum UploadError: CustomStringConvertible {
        /// Unable to save the uploaded contents to a file.
        case Path(Files.UploadWriteFailed)
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadErrorSerializer().serialize(self)))"
        }
    }
    public class UploadErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadError) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = Serialization.getFields(Files.UploadWriteFailedSerializer().serialize(arg))
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.UploadWriteFailedSerializer().deserialize(json)
                            return UploadError.Path(v)
                        case "other":
                            return UploadError.Other
                        default:
                            return UploadError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadErrorWithProperties union
    public enum UploadErrorWithProperties: CustomStringConvertible {
        /// Unable to save the uploaded contents to a file.
        case Path(Files.UploadWriteFailed)
        /// An unspecified error.
        case Other
        /// An unspecified error.
        case PropertiesError(Files.InvalidPropertyGroupError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadErrorWithPropertiesSerializer().serialize(self)))"
        }
    }
    public class UploadErrorWithPropertiesSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadErrorWithProperties) -> JSON {
            switch value {
                case .Path(let arg):
                    var d = Serialization.getFields(Files.UploadWriteFailedSerializer().serialize(arg))
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
                case .PropertiesError(let arg):
                    var d = ["properties_error": Files.InvalidPropertyGroupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("properties_error")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadErrorWithProperties {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "path":
                            let v = Files.UploadWriteFailedSerializer().deserialize(json)
                            return UploadErrorWithProperties.Path(v)
                        case "other":
                            return UploadErrorWithProperties.Other
                        case "properties_error":
                            let v = Files.InvalidPropertyGroupErrorSerializer().deserialize(d["properties_error"] ?? .Null)
                            return UploadErrorWithProperties.PropertiesError(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadSessionAppendArg struct
    public class UploadSessionAppendArg: CustomStringConvertible {
        /// Contains the upload session ID and the offset.
        public let cursor: Files.UploadSessionCursor
        /// If true, the current session will be closed, at which point you won't be able to call uploadSessionAppendV2
        /// anymore with the current session.
        public let close: Bool
        public init(cursor: Files.UploadSessionCursor, close: Bool = false) {
            self.cursor = cursor
            self.close = close
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionAppendArgSerializer().serialize(self)))"
        }
    }
    public class UploadSessionAppendArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionAppendArg) -> JSON {
            let output = [ 
            "cursor": Files.UploadSessionCursorSerializer().serialize(value.cursor),
            "close": Serialization._BoolSerializer.serialize(value.close),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionAppendArg {
            switch json {
                case .Dictionary(let dict):
                    let cursor = Files.UploadSessionCursorSerializer().deserialize(dict["cursor"] ?? .Null)
                    let close = Serialization._BoolSerializer.deserialize(dict["close"] ?? .Null)
                    return UploadSessionAppendArg(cursor: cursor, close: close)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionCursor struct
    public class UploadSessionCursor: CustomStringConvertible {
        /// The upload session ID (returned by uploadSessionStart).
        public let sessionId: String
        /// The amount of data that has been uploaded so far. We use this to make sure upload data isn't lost or
        /// duplicated in the event of a network error.
        public let offset: UInt64
        public init(sessionId: String, offset: UInt64) {
            stringValidator()(sessionId)
            self.sessionId = sessionId
            comparableValidator()(offset)
            self.offset = offset
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionCursorSerializer().serialize(self)))"
        }
    }
    public class UploadSessionCursorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionCursor) -> JSON {
            let output = [ 
            "session_id": Serialization._StringSerializer.serialize(value.sessionId),
            "offset": Serialization._UInt64Serializer.serialize(value.offset),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionCursor {
            switch json {
                case .Dictionary(let dict):
                    let sessionId = Serialization._StringSerializer.deserialize(dict["session_id"] ?? .Null)
                    let offset = Serialization._UInt64Serializer.deserialize(dict["offset"] ?? .Null)
                    return UploadSessionCursor(sessionId: sessionId, offset: offset)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionFinishArg struct
    public class UploadSessionFinishArg: CustomStringConvertible {
        /// Contains the upload session ID and the offset.
        public let cursor: Files.UploadSessionCursor
        /// Contains the path and other optional modifiers for the commit.
        public let commit: Files.CommitInfo
        public init(cursor: Files.UploadSessionCursor, commit: Files.CommitInfo) {
            self.cursor = cursor
            self.commit = commit
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishArgSerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishArg) -> JSON {
            let output = [ 
            "cursor": Files.UploadSessionCursorSerializer().serialize(value.cursor),
            "commit": Files.CommitInfoSerializer().serialize(value.commit),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionFinishArg {
            switch json {
                case .Dictionary(let dict):
                    let cursor = Files.UploadSessionCursorSerializer().deserialize(dict["cursor"] ?? .Null)
                    let commit = Files.CommitInfoSerializer().deserialize(dict["commit"] ?? .Null)
                    return UploadSessionFinishArg(cursor: cursor, commit: commit)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionFinishBatchArg struct
    public class UploadSessionFinishBatchArg: CustomStringConvertible {
        /// Commit information for each file in the batch.
        public let entries: Array<Files.UploadSessionFinishArg>
        public init(entries: Array<Files.UploadSessionFinishArg>) {
            self.entries = entries
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishBatchArgSerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishBatchArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishBatchArg) -> JSON {
            let output = [ 
            "entries": ArraySerializer(Files.UploadSessionFinishArgSerializer()).serialize(value.entries),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionFinishBatchArg {
            switch json {
                case .Dictionary(let dict):
                    let entries = ArraySerializer(Files.UploadSessionFinishArgSerializer()).deserialize(dict["entries"] ?? .Null)
                    return UploadSessionFinishBatchArg(entries: entries)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionFinishBatchJobStatus union
    public enum UploadSessionFinishBatchJobStatus: CustomStringConvertible {
        /// The asynchronous job is still in progress.
        case InProgress
        /// The uploadSessionFinishBatch has finished.
        case Complete(Files.UploadSessionFinishBatchResult)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishBatchJobStatusSerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishBatchJobStatusSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishBatchJobStatus) -> JSON {
            switch value {
                case .InProgress:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("in_progress")
                    return .Dictionary(d)
                case .Complete(let arg):
                    var d = Serialization.getFields(Files.UploadSessionFinishBatchResultSerializer().serialize(arg))
                    d[".tag"] = .Str("complete")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadSessionFinishBatchJobStatus {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "in_progress":
                            return UploadSessionFinishBatchJobStatus.InProgress
                        case "complete":
                            let v = Files.UploadSessionFinishBatchResultSerializer().deserialize(json)
                            return UploadSessionFinishBatchJobStatus.Complete(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadSessionFinishBatchResult struct
    public class UploadSessionFinishBatchResult: CustomStringConvertible {
        /// Commit result for each file in the batch.
        public let entries: Array<Files.UploadSessionFinishBatchResultEntry>
        public init(entries: Array<Files.UploadSessionFinishBatchResultEntry>) {
            self.entries = entries
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishBatchResultSerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishBatchResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishBatchResult) -> JSON {
            let output = [ 
            "entries": ArraySerializer(Files.UploadSessionFinishBatchResultEntrySerializer()).serialize(value.entries),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionFinishBatchResult {
            switch json {
                case .Dictionary(let dict):
                    let entries = ArraySerializer(Files.UploadSessionFinishBatchResultEntrySerializer()).deserialize(dict["entries"] ?? .Null)
                    return UploadSessionFinishBatchResult(entries: entries)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionFinishBatchResultEntry union
    public enum UploadSessionFinishBatchResultEntry: CustomStringConvertible {
        /// An unspecified error.
        case Success(Files.FileMetadata)
        /// An unspecified error.
        case Failure(Files.UploadSessionFinishError)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishBatchResultEntrySerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishBatchResultEntrySerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishBatchResultEntry) -> JSON {
            switch value {
                case .Success(let arg):
                    var d = Serialization.getFields(Files.FileMetadataSerializer().serialize(arg))
                    d[".tag"] = .Str("success")
                    return .Dictionary(d)
                case .Failure(let arg):
                    var d = ["failure": Files.UploadSessionFinishErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("failure")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadSessionFinishBatchResultEntry {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "success":
                            let v = Files.FileMetadataSerializer().deserialize(json)
                            return UploadSessionFinishBatchResultEntry.Success(v)
                        case "failure":
                            let v = Files.UploadSessionFinishErrorSerializer().deserialize(d["failure"] ?? .Null)
                            return UploadSessionFinishBatchResultEntry.Failure(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadSessionFinishError union
    public enum UploadSessionFinishError: CustomStringConvertible {
        /// The session arguments are incorrect; the value explains the reason.
        case LookupFailed(Files.UploadSessionLookupError)
        /// Unable to save the uploaded contents to a file.
        case Path(Files.WriteError)
        /// The batch request commits files into too many different shared folders. Please limit your batch request to
        /// files contained in a single shared folder.
        case TooManySharedFolderTargets
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionFinishErrorSerializer().serialize(self)))"
        }
    }
    public class UploadSessionFinishErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionFinishError) -> JSON {
            switch value {
                case .LookupFailed(let arg):
                    var d = ["lookup_failed": Files.UploadSessionLookupErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("lookup_failed")
                    return .Dictionary(d)
                case .Path(let arg):
                    var d = ["path": Files.WriteErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("path")
                    return .Dictionary(d)
                case .TooManySharedFolderTargets:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("too_many_shared_folder_targets")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadSessionFinishError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "lookup_failed":
                            let v = Files.UploadSessionLookupErrorSerializer().deserialize(d["lookup_failed"] ?? .Null)
                            return UploadSessionFinishError.LookupFailed(v)
                        case "path":
                            let v = Files.WriteErrorSerializer().deserialize(d["path"] ?? .Null)
                            return UploadSessionFinishError.Path(v)
                        case "too_many_shared_folder_targets":
                            return UploadSessionFinishError.TooManySharedFolderTargets
                        case "other":
                            return UploadSessionFinishError.Other
                        default:
                            return UploadSessionFinishError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadSessionLookupError union
    public enum UploadSessionLookupError: CustomStringConvertible {
        /// The upload session id was not found.
        case NotFound
        /// The specified offset was incorrect. See the value for the correct offset. (This error may occur when a
        /// previous request was received and processed successfully but the client did not receive the response, e.g.
        /// due to a network error.)
        case IncorrectOffset(Files.UploadSessionOffsetError)
        /// You are attempting to append data to an upload session that has alread been closed (i.e. committed).
        case Closed
        /// The session must be closed before calling upload_session/finish_batch.
        case NotClosed
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionLookupErrorSerializer().serialize(self)))"
        }
    }
    public class UploadSessionLookupErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionLookupError) -> JSON {
            switch value {
                case .NotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_found")
                    return .Dictionary(d)
                case .IncorrectOffset(let arg):
                    var d = Serialization.getFields(Files.UploadSessionOffsetErrorSerializer().serialize(arg))
                    d[".tag"] = .Str("incorrect_offset")
                    return .Dictionary(d)
                case .Closed:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("closed")
                    return .Dictionary(d)
                case .NotClosed:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("not_closed")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> UploadSessionLookupError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "not_found":
                            return UploadSessionLookupError.NotFound
                        case "incorrect_offset":
                            let v = Files.UploadSessionOffsetErrorSerializer().deserialize(json)
                            return UploadSessionLookupError.IncorrectOffset(v)
                        case "closed":
                            return UploadSessionLookupError.Closed
                        case "not_closed":
                            return UploadSessionLookupError.NotClosed
                        case "other":
                            return UploadSessionLookupError.Other
                        default:
                            return UploadSessionLookupError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The UploadSessionOffsetError struct
    public class UploadSessionOffsetError: CustomStringConvertible {
        /// The offset up to which data has been collected.
        public let correctOffset: UInt64
        public init(correctOffset: UInt64) {
            comparableValidator()(correctOffset)
            self.correctOffset = correctOffset
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionOffsetErrorSerializer().serialize(self)))"
        }
    }
    public class UploadSessionOffsetErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionOffsetError) -> JSON {
            let output = [ 
            "correct_offset": Serialization._UInt64Serializer.serialize(value.correctOffset),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionOffsetError {
            switch json {
                case .Dictionary(let dict):
                    let correctOffset = Serialization._UInt64Serializer.deserialize(dict["correct_offset"] ?? .Null)
                    return UploadSessionOffsetError(correctOffset: correctOffset)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionStartArg struct
    public class UploadSessionStartArg: CustomStringConvertible {
        /// If true, the current session will be closed, at which point you won't be able to call uploadSessionAppendV2
        /// anymore with the current session.
        public let close: Bool
        public init(close: Bool = false) {
            self.close = close
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionStartArgSerializer().serialize(self)))"
        }
    }
    public class UploadSessionStartArgSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionStartArg) -> JSON {
            let output = [ 
            "close": Serialization._BoolSerializer.serialize(value.close),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionStartArg {
            switch json {
                case .Dictionary(let dict):
                    let close = Serialization._BoolSerializer.deserialize(dict["close"] ?? .Null)
                    return UploadSessionStartArg(close: close)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadSessionStartResult struct
    public class UploadSessionStartResult: CustomStringConvertible {
        /// A unique identifier for the upload session. Pass this to uploadSessionAppendV2 and uploadSessionFinish.
        public let sessionId: String
        public init(sessionId: String) {
            stringValidator()(sessionId)
            self.sessionId = sessionId
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadSessionStartResultSerializer().serialize(self)))"
        }
    }
    public class UploadSessionStartResultSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadSessionStartResult) -> JSON {
            let output = [ 
            "session_id": Serialization._StringSerializer.serialize(value.sessionId),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadSessionStartResult {
            switch json {
                case .Dictionary(let dict):
                    let sessionId = Serialization._StringSerializer.deserialize(dict["session_id"] ?? .Null)
                    return UploadSessionStartResult(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UploadWriteFailed struct
    public class UploadWriteFailed: CustomStringConvertible {
        /// The reason why the file couldn't be saved.
        public let reason: Files.WriteError
        /// The upload session ID; this may be used to retry the commit.
        public let uploadSessionId: String
        public init(reason: Files.WriteError, uploadSessionId: String) {
            self.reason = reason
            stringValidator()(uploadSessionId)
            self.uploadSessionId = uploadSessionId
        }
        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UploadWriteFailedSerializer().serialize(self)))"
        }
    }
    public class UploadWriteFailedSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: UploadWriteFailed) -> JSON {
            let output = [ 
            "reason": Files.WriteErrorSerializer().serialize(value.reason),
            "upload_session_id": Serialization._StringSerializer.serialize(value.uploadSessionId),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> UploadWriteFailed {
            switch json {
                case .Dictionary(let dict):
                    let reason = Files.WriteErrorSerializer().deserialize(dict["reason"] ?? .Null)
                    let uploadSessionId = Serialization._StringSerializer.deserialize(dict["upload_session_id"] ?? .Null)
                    return UploadWriteFailed(reason: reason, uploadSessionId: uploadSessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Metadata for a video.
    public class VideoMetadata: Files.MediaMetadata {
        /// The duration of the video in milliseconds.
        public let duration: UInt64?
        public init(dimensions: Files.Dimensions? = nil, location: Files.GpsCoordinates? = nil, timeTaken: NSDate? = nil, duration: UInt64? = nil) {
            nullableValidator(comparableValidator())(duration)
            self.duration = duration
            super.init(dimensions: dimensions, location: location, timeTaken: timeTaken)
        }
        public override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(VideoMetadataSerializer().serialize(self)))"
        }
    }
    public class VideoMetadataSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: VideoMetadata) -> JSON {
            let output = [ 
            "dimensions": NullableSerializer(Files.DimensionsSerializer()).serialize(value.dimensions),
            "location": NullableSerializer(Files.GpsCoordinatesSerializer()).serialize(value.location),
            "time_taken": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.timeTaken),
            "duration": NullableSerializer(Serialization._UInt64Serializer).serialize(value.duration),
            ]
            return .Dictionary(output)
        }
        public func deserialize(json: JSON) -> VideoMetadata {
            switch json {
                case .Dictionary(let dict):
                    let dimensions = NullableSerializer(Files.DimensionsSerializer()).deserialize(dict["dimensions"] ?? .Null)
                    let location = NullableSerializer(Files.GpsCoordinatesSerializer()).deserialize(dict["location"] ?? .Null)
                    let timeTaken = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["time_taken"] ?? .Null)
                    let duration = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["duration"] ?? .Null)
                    return VideoMetadata(dimensions: dimensions, location: location, timeTaken: timeTaken, duration: duration)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The WriteConflictError union
    public enum WriteConflictError: CustomStringConvertible {
        /// There's a file in the way.
        case File
        /// There's a folder in the way.
        case Folder
        /// There's a file at an ancestor path, so we couldn't create the required parent folders.
        case FileAncestor
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WriteConflictErrorSerializer().serialize(self)))"
        }
    }
    public class WriteConflictErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: WriteConflictError) -> JSON {
            switch value {
                case .File:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("file")
                    return .Dictionary(d)
                case .Folder:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("folder")
                    return .Dictionary(d)
                case .FileAncestor:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("file_ancestor")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> WriteConflictError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "file":
                            return WriteConflictError.File
                        case "folder":
                            return WriteConflictError.Folder
                        case "file_ancestor":
                            return WriteConflictError.FileAncestor
                        case "other":
                            return WriteConflictError.Other
                        default:
                            return WriteConflictError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The WriteError union
    public enum WriteError: CustomStringConvertible {
        /// An unspecified error.
        case MalformedPath(String?)
        /// Couldn't write to the target path because there was something in the way.
        case Conflict(Files.WriteConflictError)
        /// The user doesn't have permissions to write to the target location.
        case NoWritePermission
        /// The user doesn't have enough available space (bytes) to write more data.
        case InsufficientSpace
        /// Dropbox will not save the file or folder because of its name.
        case DisallowedName
        /// An unspecified error.
        case Other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WriteErrorSerializer().serialize(self)))"
        }
    }
    public class WriteErrorSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: WriteError) -> JSON {
            switch value {
                case .MalformedPath(let arg):
                    var d = ["malformed_path": NullableSerializer(Serialization._StringSerializer).serialize(arg)]
                    d[".tag"] = .Str("malformed_path")
                    return .Dictionary(d)
                case .Conflict(let arg):
                    var d = ["conflict": Files.WriteConflictErrorSerializer().serialize(arg)]
                    d[".tag"] = .Str("conflict")
                    return .Dictionary(d)
                case .NoWritePermission:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("no_write_permission")
                    return .Dictionary(d)
                case .InsufficientSpace:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("insufficient_space")
                    return .Dictionary(d)
                case .DisallowedName:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("disallowed_name")
                    return .Dictionary(d)
                case .Other:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("other")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> WriteError {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "malformed_path":
                            let v = NullableSerializer(Serialization._StringSerializer).deserialize(d["malformed_path"] ?? .Null)
                            return WriteError.MalformedPath(v)
                        case "conflict":
                            let v = Files.WriteConflictErrorSerializer().deserialize(d["conflict"] ?? .Null)
                            return WriteError.Conflict(v)
                        case "no_write_permission":
                            return WriteError.NoWritePermission
                        case "insufficient_space":
                            return WriteError.InsufficientSpace
                        case "disallowed_name":
                            return WriteError.DisallowedName
                        case "other":
                            return WriteError.Other
                        default:
                            return WriteError.Other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Your intent when writing a file to some path. This is used to determine what constitutes a conflict and what the
    /// autorename strategy is. In some situations, the conflict behavior is identical: (a) If the target path doesn't
    /// contain anything, the file is always written; no conflict. (b) If the target path contains a folder, it's always
    /// a conflict. (c) If the target path contains a file with identical contents, nothing gets written; no conflict.
    /// The conflict checking differs in the case where there's a file at the target path with contents different from
    /// the contents you're trying to write.
    public enum WriteMode: CustomStringConvertible {
        /// Never overwrite the existing file. The autorename strategy is to append a number to the file name. For
        /// example, "document.txt" might become "document (2).txt".
        case Add
        /// Always overwrite the existing file. The autorename strategy is the same as it is for add.
        case Overwrite
        /// Overwrite if the given "rev" matches the existing file's "rev". The autorename strategy is to append the
        /// string "conflicted copy" to the file name. For example, "document.txt" might become "document (conflicted
        /// copy).txt" or "document (Panda's conflicted copy).txt".
        case Update(String)

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WriteModeSerializer().serialize(self)))"
        }
    }
    public class WriteModeSerializer: JSONSerializer {
        public init() { }
        public func serialize(value: WriteMode) -> JSON {
            switch value {
                case .Add:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("add")
                    return .Dictionary(d)
                case .Overwrite:
                    var d = [String: JSON]()
                    d[".tag"] = .Str("overwrite")
                    return .Dictionary(d)
                case .Update(let arg):
                    var d = ["update": Serialization._StringSerializer.serialize(arg)]
                    d[".tag"] = .Str("update")
                    return .Dictionary(d)
            }
        }
        public func deserialize(json: JSON) -> WriteMode {
            switch json {
                case .Dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "add":
                            return WriteMode.Add
                        case "overwrite":
                            return WriteMode.Overwrite
                        case "update":
                            let v = Serialization._StringSerializer.deserialize(d["update"] ?? .Null)
                            return WriteMode.Update(v)
                        default:
                            fatalError("Unknown tag \(tag)")
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }


    /// Stone Route Objects

    static let alphaGetMetadata = Route(
        name: "alpha/get_metadata",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.AlphaGetMetadataArgSerializer(),
        responseSerializer: Files.MetadataSerializer(),
        errorSerializer: Files.AlphaGetMetadataErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let alphaUpload = Route(
        name: "alpha/upload",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.CommitInfoWithPropertiesSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.UploadErrorWithPropertiesSerializer(),
        attrs: ["host": "content",
                "style": "upload"]
    )
    static let copy = Route(
        name: "copy",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.RelocationArgSerializer(),
        responseSerializer: Files.MetadataSerializer(),
        errorSerializer: Files.RelocationErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let copyReferenceGet = Route(
        name: "copy_reference/get",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.GetCopyReferenceArgSerializer(),
        responseSerializer: Files.GetCopyReferenceResultSerializer(),
        errorSerializer: Files.GetCopyReferenceErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let copyReferenceSave = Route(
        name: "copy_reference/save",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.SaveCopyReferenceArgSerializer(),
        responseSerializer: Files.SaveCopyReferenceResultSerializer(),
        errorSerializer: Files.SaveCopyReferenceErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let createFolder = Route(
        name: "create_folder",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.CreateFolderArgSerializer(),
        responseSerializer: Files.FolderMetadataSerializer(),
        errorSerializer: Files.CreateFolderErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let delete = Route(
        name: "delete",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.DeleteArgSerializer(),
        responseSerializer: Files.MetadataSerializer(),
        errorSerializer: Files.DeleteErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let download = Route(
        name: "download",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.DownloadArgSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.DownloadErrorSerializer(),
        attrs: ["host": "content",
                "style": "download"]
    )
    static let getMetadata = Route(
        name: "get_metadata",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.GetMetadataArgSerializer(),
        responseSerializer: Files.MetadataSerializer(),
        errorSerializer: Files.GetMetadataErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let getPreview = Route(
        name: "get_preview",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.PreviewArgSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.PreviewErrorSerializer(),
        attrs: ["host": "content",
                "style": "download"]
    )
    static let getTemporaryLink = Route(
        name: "get_temporary_link",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.GetTemporaryLinkArgSerializer(),
        responseSerializer: Files.GetTemporaryLinkResultSerializer(),
        errorSerializer: Files.GetTemporaryLinkErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let getThumbnail = Route(
        name: "get_thumbnail",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ThumbnailArgSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.ThumbnailErrorSerializer(),
        attrs: ["host": "content",
                "style": "download"]
    )
    static let listFolder = Route(
        name: "list_folder",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ListFolderArgSerializer(),
        responseSerializer: Files.ListFolderResultSerializer(),
        errorSerializer: Files.ListFolderErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let listFolderContinue = Route(
        name: "list_folder/continue",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ListFolderContinueArgSerializer(),
        responseSerializer: Files.ListFolderResultSerializer(),
        errorSerializer: Files.ListFolderContinueErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let listFolderGetLatestCursor = Route(
        name: "list_folder/get_latest_cursor",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ListFolderArgSerializer(),
        responseSerializer: Files.ListFolderGetLatestCursorResultSerializer(),
        errorSerializer: Files.ListFolderErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let listFolderLongpoll = Route(
        name: "list_folder/longpoll",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ListFolderLongpollArgSerializer(),
        responseSerializer: Files.ListFolderLongpollResultSerializer(),
        errorSerializer: Files.ListFolderLongpollErrorSerializer(),
        attrs: ["host": "notify",
                "style": "rpc"]
    )
    static let listRevisions = Route(
        name: "list_revisions",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.ListRevisionsArgSerializer(),
        responseSerializer: Files.ListRevisionsResultSerializer(),
        errorSerializer: Files.ListRevisionsErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let move = Route(
        name: "move",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.RelocationArgSerializer(),
        responseSerializer: Files.MetadataSerializer(),
        errorSerializer: Files.RelocationErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let permanentlyDelete = Route(
        name: "permanently_delete",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.DeleteArgSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.DeleteErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesAdd = Route(
        name: "properties/add",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.PropertyGroupWithPathSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.AddPropertiesErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesOverwrite = Route(
        name: "properties/overwrite",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.PropertyGroupWithPathSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.InvalidPropertyGroupErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesRemove = Route(
        name: "properties/remove",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.RemovePropertiesArgSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.RemovePropertiesErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesTemplateGet = Route(
        name: "properties/template/get",
        namespace: "files",
        deprecated: false,
        argSerializer: Properties.GetPropertyTemplateArgSerializer(),
        responseSerializer: Properties.GetPropertyTemplateResultSerializer(),
        errorSerializer: Properties.PropertyTemplateErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesTemplateList = Route(
        name: "properties/template/list",
        namespace: "files",
        deprecated: false,
        argSerializer: Serialization._VoidSerializer,
        responseSerializer: Properties.ListPropertyTemplateIdsSerializer(),
        errorSerializer: Properties.PropertyTemplateErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let propertiesUpdate = Route(
        name: "properties/update",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.UpdatePropertyGroupArgSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.UpdatePropertiesErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let restore = Route(
        name: "restore",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.RestoreArgSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.RestoreErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let saveUrl = Route(
        name: "save_url",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.SaveUrlArgSerializer(),
        responseSerializer: Files.SaveUrlResultSerializer(),
        errorSerializer: Files.SaveUrlErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let saveUrlCheckJobStatus = Route(
        name: "save_url/check_job_status",
        namespace: "files",
        deprecated: false,
        argSerializer: Async.PollArgSerializer(),
        responseSerializer: Files.SaveUrlJobStatusSerializer(),
        errorSerializer: Async.PollErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let search = Route(
        name: "search",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.SearchArgSerializer(),
        responseSerializer: Files.SearchResultSerializer(),
        errorSerializer: Files.SearchErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let upload = Route(
        name: "upload",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.CommitInfoSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.UploadErrorSerializer(),
        attrs: ["host": "content",
                "style": "upload"]
    )
    static let uploadSessionAppend = Route(
        name: "upload_session/append",
        namespace: "files",
        deprecated: true,
        argSerializer: Files.UploadSessionCursorSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.UploadSessionLookupErrorSerializer(),
        attrs: ["host": "content",
                "style": "upload"]
    )
    static let uploadSessionAppendV2 = Route(
        name: "upload_session/append_v2",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.UploadSessionAppendArgSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Files.UploadSessionLookupErrorSerializer(),
        attrs: ["host": "content",
                "style": "upload"]
    )
    static let uploadSessionFinish = Route(
        name: "upload_session/finish",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.UploadSessionFinishArgSerializer(),
        responseSerializer: Files.FileMetadataSerializer(),
        errorSerializer: Files.UploadSessionFinishErrorSerializer(),
        attrs: ["host": "content",
                "style": "upload"]
    )
    static let uploadSessionFinishBatch = Route(
        name: "upload_session/finish_batch",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.UploadSessionFinishBatchArgSerializer(),
        responseSerializer: Async.LaunchEmptyResultSerializer(),
        errorSerializer: Serialization._VoidSerializer,
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let uploadSessionFinishBatchCheck = Route(
        name: "upload_session/finish_batch/check",
        namespace: "files",
        deprecated: false,
        argSerializer: Async.PollArgSerializer(),
        responseSerializer: Files.UploadSessionFinishBatchJobStatusSerializer(),
        errorSerializer: Async.PollErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let uploadSessionStart = Route(
        name: "upload_session/start",
        namespace: "files",
        deprecated: false,
        argSerializer: Files.UploadSessionStartArgSerializer(),
        responseSerializer: Files.UploadSessionStartResultSerializer(),
        errorSerializer: Serialization._VoidSerializer,
        attrs: ["host": "content",
                "style": "upload"]
    )
}
