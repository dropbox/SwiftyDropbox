///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBAUTHAccessErrorToDBXOptional(object: DBAUTHAccessError?) -> DBXAuthAccessError? {
    guard let object = object else { return nil }
    return mapDBAUTHAccessErrorToDBX(object: object)
}

func mapDBAUTHAccessErrorToDBX(object: DBAUTHAccessError) -> DBXAuthAccessError {
    if object.isInvalidAccountType() {
        let invalidAccountType = mapDBAUTHInvalidAccountTypeErrorToDBX(object: object.invalidAccountType)
        return DBXAuthAccessError.factory(swift: .invalidAccountType(invalidAccountType.swift))
    }
    if object.isPaperAccessDenied() {
        let paperAccessDenied = mapDBAUTHPaperAccessErrorToDBX(object: object.paperAccessDenied)
        return DBXAuthAccessError.factory(swift: .paperAccessDenied(paperAccessDenied.swift))
    }
    if object.isOther() {
        return DBXAuthAccessErrorOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHAuthErrorToDBXOptional(object: DBAUTHAuthError?) -> DBXAuthAuthError? {
    guard let object = object else { return nil }
    return mapDBAUTHAuthErrorToDBX(object: object)
}

func mapDBAUTHAuthErrorToDBX(object: DBAUTHAuthError) -> DBXAuthAuthError {
    if object.isInvalidAccessToken() {
        return DBXAuthAuthErrorInvalidAccessToken()
    }
    if object.isInvalidSelectUser() {
        return DBXAuthAuthErrorInvalidSelectUser()
    }
    if object.isInvalidSelectAdmin() {
        return DBXAuthAuthErrorInvalidSelectAdmin()
    }
    if object.isUserSuspended() {
        return DBXAuthAuthErrorUserSuspended()
    }
    if object.isExpiredAccessToken() {
        return DBXAuthAuthErrorExpiredAccessToken()
    }
    if object.isMissingScope() {
        let missingScope = mapDBAUTHTokenScopeErrorToDBX(object: object.missingScope)
        return DBXAuthAuthError.factory(swift: .missingScope(missingScope.swift))
    }
    if object.isRouteAccessDenied() {
        return DBXAuthAuthErrorRouteAccessDenied()
    }
    if object.isOther() {
        return DBXAuthAuthErrorOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHInvalidAccountTypeErrorToDBXOptional(object: DBAUTHInvalidAccountTypeError?) -> DBXAuthInvalidAccountTypeError? {
    guard let object = object else { return nil }
    return mapDBAUTHInvalidAccountTypeErrorToDBX(object: object)
}

func mapDBAUTHInvalidAccountTypeErrorToDBX(object: DBAUTHInvalidAccountTypeError) -> DBXAuthInvalidAccountTypeError {
    if object.isEndpoint() {
        return DBXAuthInvalidAccountTypeErrorEndpoint()
    }
    if object.isFeature() {
        return DBXAuthInvalidAccountTypeErrorFeature()
    }
    if object.isOther() {
        return DBXAuthInvalidAccountTypeErrorOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHPaperAccessErrorToDBXOptional(object: DBAUTHPaperAccessError?) -> DBXAuthPaperAccessError? {
    guard let object = object else { return nil }
    return mapDBAUTHPaperAccessErrorToDBX(object: object)
}

func mapDBAUTHPaperAccessErrorToDBX(object: DBAUTHPaperAccessError) -> DBXAuthPaperAccessError {
    if object.isPaperDisabled() {
        return DBXAuthPaperAccessErrorPaperDisabled()
    }
    if object.isNotPaperUser() {
        return DBXAuthPaperAccessErrorNotPaperUser()
    }
    if object.isOther() {
        return DBXAuthPaperAccessErrorOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHRateLimitErrorToDBXOptional(object: DBAUTHRateLimitError?) -> DBXAuthRateLimitError? {
    guard let object = object else { return nil }
    return mapDBAUTHRateLimitErrorToDBX(object: object)
}

func mapDBAUTHRateLimitErrorToDBX(object: DBAUTHRateLimitError) -> DBXAuthRateLimitError {
    DBXAuthRateLimitError(reason: mapDBAUTHRateLimitReasonToDBX(object: object.reason), retryAfter: object.retryAfter)
}

func mapDBAUTHRateLimitReasonToDBXOptional(object: DBAUTHRateLimitReason?) -> DBXAuthRateLimitReason? {
    guard let object = object else { return nil }
    return mapDBAUTHRateLimitReasonToDBX(object: object)
}

func mapDBAUTHRateLimitReasonToDBX(object: DBAUTHRateLimitReason) -> DBXAuthRateLimitReason {
    if object.isTooManyRequests() {
        return DBXAuthRateLimitReasonTooManyRequests()
    }
    if object.isTooManyWriteOperations() {
        return DBXAuthRateLimitReasonTooManyWriteOperations()
    }
    if object.isOther() {
        return DBXAuthRateLimitReasonOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHTokenFromOAuth1ArgToDBXOptional(object: DBAUTHTokenFromOAuth1Arg?) -> DBXAuthTokenFromOAuth1Arg? {
    guard let object = object else { return nil }
    return mapDBAUTHTokenFromOAuth1ArgToDBX(object: object)
}

func mapDBAUTHTokenFromOAuth1ArgToDBX(object: DBAUTHTokenFromOAuth1Arg) -> DBXAuthTokenFromOAuth1Arg {
    DBXAuthTokenFromOAuth1Arg(oauth1Token: object.oauth1Token, oauth1TokenSecret: object.oauth1TokenSecret)
}

func mapDBAUTHTokenFromOAuth1ErrorToDBXOptional(object: DBAUTHTokenFromOAuth1Error?) -> DBXAuthTokenFromOAuth1Error? {
    guard let object = object else { return nil }
    return mapDBAUTHTokenFromOAuth1ErrorToDBX(object: object)
}

func mapDBAUTHTokenFromOAuth1ErrorToDBX(object: DBAUTHTokenFromOAuth1Error) -> DBXAuthTokenFromOAuth1Error {
    if object.isInvalidOauth1TokenInfo() {
        return DBXAuthTokenFromOAuth1ErrorInvalidOauth1TokenInfo()
    }
    if object.isAppIdMismatch() {
        return DBXAuthTokenFromOAuth1ErrorAppIdMismatch()
    }
    if object.isOther() {
        return DBXAuthTokenFromOAuth1ErrorOther()
    }
    fatalError("codegen error")
}

func mapDBAUTHTokenFromOAuth1ResultToDBXOptional(object: DBAUTHTokenFromOAuth1Result?) -> DBXAuthTokenFromOAuth1Result? {
    guard let object = object else { return nil }
    return mapDBAUTHTokenFromOAuth1ResultToDBX(object: object)
}

func mapDBAUTHTokenFromOAuth1ResultToDBX(object: DBAUTHTokenFromOAuth1Result) -> DBXAuthTokenFromOAuth1Result {
    DBXAuthTokenFromOAuth1Result(oauth2Token: object.oauth2Token)
}

func mapDBAUTHTokenScopeErrorToDBXOptional(object: DBAUTHTokenScopeError?) -> DBXAuthTokenScopeError? {
    guard let object = object else { return nil }
    return mapDBAUTHTokenScopeErrorToDBX(object: object)
}

func mapDBAUTHTokenScopeErrorToDBX(object: DBAUTHTokenScopeError) -> DBXAuthTokenScopeError {
    DBXAuthTokenScopeError(requiredScope: object.requiredScope)
}
