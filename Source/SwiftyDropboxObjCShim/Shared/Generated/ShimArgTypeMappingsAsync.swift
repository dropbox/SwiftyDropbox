///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBASYNCLaunchResultBaseToDBXOptional(object: DBASYNCLaunchResultBase?) -> DBXAsyncLaunchResultBase? {
    guard let object = object else { return nil }
    return mapDBASYNCLaunchResultBaseToDBX(object: object)
}

func mapDBASYNCLaunchResultBaseToDBX(object: DBASYNCLaunchResultBase) -> DBXAsyncLaunchResultBase {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXAsyncLaunchResultBase.factory(swift: .asyncJobId(asyncJobId))
    }
    fatalError("codegen error")
}

func mapDBASYNCLaunchEmptyResultToDBXOptional(object: DBASYNCLaunchEmptyResult?) -> DBXAsyncLaunchEmptyResult? {
    guard let object = object else { return nil }
    return mapDBASYNCLaunchEmptyResultToDBX(object: object)
}

func mapDBASYNCLaunchEmptyResultToDBX(object: DBASYNCLaunchEmptyResult) -> DBXAsyncLaunchEmptyResult {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXAsyncLaunchEmptyResult.factory(swift: .asyncJobId(asyncJobId))
    }
    if object.isComplete() {
        return DBXAsyncLaunchEmptyResultComplete()
    }
    fatalError("codegen error")
}

func mapDBASYNCPollArgToDBXOptional(object: DBASYNCPollArg?) -> DBXAsyncPollArg? {
    guard let object = object else { return nil }
    return mapDBASYNCPollArgToDBX(object: object)
}

func mapDBASYNCPollArgToDBX(object: DBASYNCPollArg) -> DBXAsyncPollArg {
    DBXAsyncPollArg(asyncJobId: object.asyncJobId)
}

func mapDBASYNCPollResultBaseToDBXOptional(object: DBASYNCPollResultBase?) -> DBXAsyncPollResultBase? {
    guard let object = object else { return nil }
    return mapDBASYNCPollResultBaseToDBX(object: object)
}

func mapDBASYNCPollResultBaseToDBX(object: DBASYNCPollResultBase) -> DBXAsyncPollResultBase {
    if object.isInProgress() {
        return DBXAsyncPollResultBaseInProgress()
    }
    fatalError("codegen error")
}

func mapDBASYNCPollEmptyResultToDBXOptional(object: DBASYNCPollEmptyResult?) -> DBXAsyncPollEmptyResult? {
    guard let object = object else { return nil }
    return mapDBASYNCPollEmptyResultToDBX(object: object)
}

func mapDBASYNCPollEmptyResultToDBX(object: DBASYNCPollEmptyResult) -> DBXAsyncPollEmptyResult {
    if object.isInProgress() {
        return DBXAsyncPollEmptyResultInProgress()
    }
    if object.isComplete() {
        return DBXAsyncPollEmptyResultComplete()
    }
    fatalError("codegen error")
}

func mapDBASYNCPollErrorToDBXOptional(object: DBASYNCPollError?) -> DBXAsyncPollError? {
    guard let object = object else { return nil }
    return mapDBASYNCPollErrorToDBX(object: object)
}

func mapDBASYNCPollErrorToDBX(object: DBASYNCPollError) -> DBXAsyncPollError {
    if object.isInvalidAsyncJobId() {
        return DBXAsyncPollErrorInvalidAsyncJobId()
    }
    if object.isInternalError() {
        return DBXAsyncPollErrorInternalError()
    }
    if object.isOther() {
        return DBXAsyncPollErrorOther()
    }
    fatalError("codegen error")
}
