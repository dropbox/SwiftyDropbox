///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBPAPERAddMemberToDBXOptional(object: DBPAPERAddMember?) -> DBXPaperAddMember? {
    guard let object = object else { return nil }
    return mapDBPAPERAddMemberToDBX(object: object)
}

func mapDBPAPERAddMemberToDBX(object: DBPAPERAddMember) -> DBXPaperAddMember {
    DBXPaperAddMember(
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        permissionLevel: mapDBPAPERPaperDocPermissionLevelToDBX(object: object.permissionLevel)
    )
}

func mapDBPAPERRefPaperDocToDBXOptional(object: DBPAPERRefPaperDoc?) -> DBXPaperRefPaperDoc? {
    guard let object = object else { return nil }
    return mapDBPAPERRefPaperDocToDBX(object: object)
}

func mapDBPAPERRefPaperDocToDBX(object: DBPAPERRefPaperDoc) -> DBXPaperRefPaperDoc {
    DBXPaperRefPaperDoc(docId: object.docId)
}

func mapDBPAPERAddPaperDocUserToDBXOptional(object: DBPAPERAddPaperDocUser?) -> DBXPaperAddPaperDocUser? {
    guard let object = object else { return nil }
    return mapDBPAPERAddPaperDocUserToDBX(object: object)
}

func mapDBPAPERAddPaperDocUserToDBX(object: DBPAPERAddPaperDocUser) -> DBXPaperAddPaperDocUser {
    DBXPaperAddPaperDocUser(
        docId: object.docId,
        members: object.members.compactMap { mapDBPAPERAddMemberToDBX(object: $0) },
        customMessage: object.customMessage,
        quiet: object.quiet
    )
}

func mapDBPAPERAddPaperDocUserMemberResultToDBXOptional(object: DBPAPERAddPaperDocUserMemberResult?) -> DBXPaperAddPaperDocUserMemberResult? {
    guard let object = object else { return nil }
    return mapDBPAPERAddPaperDocUserMemberResultToDBX(object: object)
}

func mapDBPAPERAddPaperDocUserMemberResultToDBX(object: DBPAPERAddPaperDocUserMemberResult) -> DBXPaperAddPaperDocUserMemberResult {
    DBXPaperAddPaperDocUserMemberResult(
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        result: mapDBPAPERAddPaperDocUserResultToDBX(object: object.result)
    )
}

func mapDBPAPERAddPaperDocUserResultToDBXOptional(object: DBPAPERAddPaperDocUserResult?) -> DBXPaperAddPaperDocUserResult? {
    guard let object = object else { return nil }
    return mapDBPAPERAddPaperDocUserResultToDBX(object: object)
}

func mapDBPAPERAddPaperDocUserResultToDBX(object: DBPAPERAddPaperDocUserResult) -> DBXPaperAddPaperDocUserResult {
    if object.isSuccess() {
        return DBXPaperAddPaperDocUserResultSuccess()
    }
    if object.isUnknownError() {
        return DBXPaperAddPaperDocUserResultUnknownError()
    }
    if object.isSharingOutsideTeamDisabled() {
        return DBXPaperAddPaperDocUserResultSharingOutsideTeamDisabled()
    }
    if object.isDailyLimitReached() {
        return DBXPaperAddPaperDocUserResultDailyLimitReached()
    }
    if object.isUserIsOwner() {
        return DBXPaperAddPaperDocUserResultUserIsOwner()
    }
    if object.isFailedUserDataRetrieval() {
        return DBXPaperAddPaperDocUserResultFailedUserDataRetrieval()
    }
    if object.isPermissionAlreadyGranted() {
        return DBXPaperAddPaperDocUserResultPermissionAlreadyGranted()
    }
    if object.isOther() {
        return DBXPaperAddPaperDocUserResultOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERCursorToDBXOptional(object: DBPAPERCursor?) -> DBXPaperCursor? {
    guard let object = object else { return nil }
    return mapDBPAPERCursorToDBX(object: object)
}

func mapDBPAPERCursorToDBX(object: DBPAPERCursor) -> DBXPaperCursor {
    DBXPaperCursor(value: object.value, expiration: object.expiration)
}

func mapDBPAPERPaperApiBaseErrorToDBXOptional(object: DBPAPERPaperApiBaseError?) -> DBXPaperPaperApiBaseError? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperApiBaseErrorToDBX(object: object)
}

func mapDBPAPERPaperApiBaseErrorToDBX(object: DBPAPERPaperApiBaseError) -> DBXPaperPaperApiBaseError {
    if object.isInsufficientPermissions() {
        return DBXPaperPaperApiBaseErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperPaperApiBaseErrorOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERDocLookupErrorToDBXOptional(object: DBPAPERDocLookupError?) -> DBXPaperDocLookupError? {
    guard let object = object else { return nil }
    return mapDBPAPERDocLookupErrorToDBX(object: object)
}

func mapDBPAPERDocLookupErrorToDBX(object: DBPAPERDocLookupError) -> DBXPaperDocLookupError {
    if object.isInsufficientPermissions() {
        return DBXPaperDocLookupErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperDocLookupErrorOther()
    }
    if object.isDocNotFound() {
        return DBXPaperDocLookupErrorDocNotFound()
    }
    fatalError("codegen error")
}

func mapDBPAPERDocSubscriptionLevelToDBXOptional(object: DBPAPERDocSubscriptionLevel?) -> DBXPaperDocSubscriptionLevel? {
    guard let object = object else { return nil }
    return mapDBPAPERDocSubscriptionLevelToDBX(object: object)
}

func mapDBPAPERDocSubscriptionLevelToDBX(object: DBPAPERDocSubscriptionLevel) -> DBXPaperDocSubscriptionLevel {
    if object.isDefault_() {
        return DBXPaperDocSubscriptionLevelDefault_()
    }
    if object.isIgnore() {
        return DBXPaperDocSubscriptionLevelIgnore()
    }
    if object.isEvery() {
        return DBXPaperDocSubscriptionLevelEvery()
    }
    if object.isNoEmail() {
        return DBXPaperDocSubscriptionLevelNoEmail()
    }
    fatalError("codegen error")
}

func mapDBPAPERExportFormatToDBXOptional(object: DBPAPERExportFormat?) -> DBXPaperExportFormat? {
    guard let object = object else { return nil }
    return mapDBPAPERExportFormatToDBX(object: object)
}

func mapDBPAPERExportFormatToDBX(object: DBPAPERExportFormat) -> DBXPaperExportFormat {
    if object.isHtml() {
        return DBXPaperExportFormatHtml()
    }
    if object.isMarkdown() {
        return DBXPaperExportFormatMarkdown()
    }
    if object.isOther() {
        return DBXPaperExportFormatOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERFolderToDBXOptional(object: DBPAPERFolder?) -> DBXPaperFolder? {
    guard let object = object else { return nil }
    return mapDBPAPERFolderToDBX(object: object)
}

func mapDBPAPERFolderToDBX(object: DBPAPERFolder) -> DBXPaperFolder {
    DBXPaperFolder(id: object.id_, name: object.name)
}

func mapDBPAPERFolderSharingPolicyTypeToDBXOptional(object: DBPAPERFolderSharingPolicyType?) -> DBXPaperFolderSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBPAPERFolderSharingPolicyTypeToDBX(object: object)
}

func mapDBPAPERFolderSharingPolicyTypeToDBX(object: DBPAPERFolderSharingPolicyType) -> DBXPaperFolderSharingPolicyType {
    if object.isTeam() {
        return DBXPaperFolderSharingPolicyTypeTeam()
    }
    if object.isInviteOnly() {
        return DBXPaperFolderSharingPolicyTypeInviteOnly()
    }
    fatalError("codegen error")
}

func mapDBPAPERFolderSubscriptionLevelToDBXOptional(object: DBPAPERFolderSubscriptionLevel?) -> DBXPaperFolderSubscriptionLevel? {
    guard let object = object else { return nil }
    return mapDBPAPERFolderSubscriptionLevelToDBX(object: object)
}

func mapDBPAPERFolderSubscriptionLevelToDBX(object: DBPAPERFolderSubscriptionLevel) -> DBXPaperFolderSubscriptionLevel {
    if object.isNone() {
        return DBXPaperFolderSubscriptionLevelNone()
    }
    if object.isActivityOnly() {
        return DBXPaperFolderSubscriptionLevelActivityOnly()
    }
    if object.isDailyEmails() {
        return DBXPaperFolderSubscriptionLevelDailyEmails()
    }
    if object.isWeeklyEmails() {
        return DBXPaperFolderSubscriptionLevelWeeklyEmails()
    }
    fatalError("codegen error")
}

func mapDBPAPERFoldersContainingPaperDocToDBXOptional(object: DBPAPERFoldersContainingPaperDoc?) -> DBXPaperFoldersContainingPaperDoc? {
    guard let object = object else { return nil }
    return mapDBPAPERFoldersContainingPaperDocToDBX(object: object)
}

func mapDBPAPERFoldersContainingPaperDocToDBX(object: DBPAPERFoldersContainingPaperDoc) -> DBXPaperFoldersContainingPaperDoc {
    DBXPaperFoldersContainingPaperDoc(
        folderSharingPolicyType: mapDBPAPERFolderSharingPolicyTypeToDBXOptional(object: object.folderSharingPolicyType),
        folders: object.folders?.compactMap { mapDBPAPERFolderToDBX(object: $0) }
    )
}

func mapDBPAPERImportFormatToDBXOptional(object: DBPAPERImportFormat?) -> DBXPaperImportFormat? {
    guard let object = object else { return nil }
    return mapDBPAPERImportFormatToDBX(object: object)
}

func mapDBPAPERImportFormatToDBX(object: DBPAPERImportFormat) -> DBXPaperImportFormat {
    if object.isHtml() {
        return DBXPaperImportFormatHtml()
    }
    if object.isMarkdown() {
        return DBXPaperImportFormatMarkdown()
    }
    if object.isPlainText() {
        return DBXPaperImportFormatPlainText()
    }
    if object.isOther() {
        return DBXPaperImportFormatOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERInviteeInfoWithPermissionLevelToDBXOptional(object: DBPAPERInviteeInfoWithPermissionLevel?) -> DBXPaperInviteeInfoWithPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBPAPERInviteeInfoWithPermissionLevelToDBX(object: object)
}

func mapDBPAPERInviteeInfoWithPermissionLevelToDBX(object: DBPAPERInviteeInfoWithPermissionLevel) -> DBXPaperInviteeInfoWithPermissionLevel {
    DBXPaperInviteeInfoWithPermissionLevel(
        invitee: mapDBSHARINGInviteeInfoToDBX(object: object.invitee),
        permissionLevel: mapDBPAPERPaperDocPermissionLevelToDBX(object: object.permissionLevel)
    )
}

func mapDBPAPERListDocsCursorErrorToDBXOptional(object: DBPAPERListDocsCursorError?) -> DBXPaperListDocsCursorError? {
    guard let object = object else { return nil }
    return mapDBPAPERListDocsCursorErrorToDBX(object: object)
}

func mapDBPAPERListDocsCursorErrorToDBX(object: DBPAPERListDocsCursorError) -> DBXPaperListDocsCursorError {
    if object.isCursorError() {
        let cursorError = mapDBPAPERPaperApiCursorErrorToDBX(object: object.cursorError)
        return DBXPaperListDocsCursorError.factory(swift: .cursorError(cursorError.swift))
    }
    if object.isOther() {
        return DBXPaperListDocsCursorErrorOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERListPaperDocsArgsToDBXOptional(object: DBPAPERListPaperDocsArgs?) -> DBXPaperListPaperDocsArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsArgsToDBX(object: object)
}

func mapDBPAPERListPaperDocsArgsToDBX(object: DBPAPERListPaperDocsArgs) -> DBXPaperListPaperDocsArgs {
    DBXPaperListPaperDocsArgs(
        filterBy: mapDBPAPERListPaperDocsFilterByToDBX(object: object.filterBy),
        sortBy: mapDBPAPERListPaperDocsSortByToDBX(object: object.sortBy),
        sortOrder: mapDBPAPERListPaperDocsSortOrderToDBX(object: object.sortOrder),
        limit: object.limit
    )
}

func mapDBPAPERListPaperDocsContinueArgsToDBXOptional(object: DBPAPERListPaperDocsContinueArgs?) -> DBXPaperListPaperDocsContinueArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsContinueArgsToDBX(object: object)
}

func mapDBPAPERListPaperDocsContinueArgsToDBX(object: DBPAPERListPaperDocsContinueArgs) -> DBXPaperListPaperDocsContinueArgs {
    DBXPaperListPaperDocsContinueArgs(cursor: object.cursor)
}

func mapDBPAPERListPaperDocsFilterByToDBXOptional(object: DBPAPERListPaperDocsFilterBy?) -> DBXPaperListPaperDocsFilterBy? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsFilterByToDBX(object: object)
}

func mapDBPAPERListPaperDocsFilterByToDBX(object: DBPAPERListPaperDocsFilterBy) -> DBXPaperListPaperDocsFilterBy {
    if object.isDocsAccessed() {
        return DBXPaperListPaperDocsFilterByDocsAccessed()
    }
    if object.isDocsCreated() {
        return DBXPaperListPaperDocsFilterByDocsCreated()
    }
    if object.isOther() {
        return DBXPaperListPaperDocsFilterByOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERListPaperDocsResponseToDBXOptional(object: DBPAPERListPaperDocsResponse?) -> DBXPaperListPaperDocsResponse? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsResponseToDBX(object: object)
}

func mapDBPAPERListPaperDocsResponseToDBX(object: DBPAPERListPaperDocsResponse) -> DBXPaperListPaperDocsResponse {
    DBXPaperListPaperDocsResponse(docIds: object.docIds, cursor: mapDBPAPERCursorToDBX(object: object.cursor), hasMore: object.hasMore)
}

func mapDBPAPERListPaperDocsSortByToDBXOptional(object: DBPAPERListPaperDocsSortBy?) -> DBXPaperListPaperDocsSortBy? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsSortByToDBX(object: object)
}

func mapDBPAPERListPaperDocsSortByToDBX(object: DBPAPERListPaperDocsSortBy) -> DBXPaperListPaperDocsSortBy {
    if object.isAccessed() {
        return DBXPaperListPaperDocsSortByAccessed()
    }
    if object.isModified() {
        return DBXPaperListPaperDocsSortByModified()
    }
    if object.isCreated() {
        return DBXPaperListPaperDocsSortByCreated()
    }
    if object.isOther() {
        return DBXPaperListPaperDocsSortByOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERListPaperDocsSortOrderToDBXOptional(object: DBPAPERListPaperDocsSortOrder?) -> DBXPaperListPaperDocsSortOrder? {
    guard let object = object else { return nil }
    return mapDBPAPERListPaperDocsSortOrderToDBX(object: object)
}

func mapDBPAPERListPaperDocsSortOrderToDBX(object: DBPAPERListPaperDocsSortOrder) -> DBXPaperListPaperDocsSortOrder {
    if object.isAscending() {
        return DBXPaperListPaperDocsSortOrderAscending()
    }
    if object.isDescending() {
        return DBXPaperListPaperDocsSortOrderDescending()
    }
    if object.isOther() {
        return DBXPaperListPaperDocsSortOrderOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERListUsersCursorErrorToDBXOptional(object: DBPAPERListUsersCursorError?) -> DBXPaperListUsersCursorError? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersCursorErrorToDBX(object: object)
}

func mapDBPAPERListUsersCursorErrorToDBX(object: DBPAPERListUsersCursorError) -> DBXPaperListUsersCursorError {
    if object.isInsufficientPermissions() {
        return DBXPaperListUsersCursorErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperListUsersCursorErrorOther()
    }
    if object.isDocNotFound() {
        return DBXPaperListUsersCursorErrorDocNotFound()
    }
    if object.isCursorError() {
        let cursorError = mapDBPAPERPaperApiCursorErrorToDBX(object: object.cursorError)
        return DBXPaperListUsersCursorError.factory(swift: .cursorError(cursorError.swift))
    }
    fatalError("codegen error")
}

func mapDBPAPERListUsersOnFolderArgsToDBXOptional(object: DBPAPERListUsersOnFolderArgs?) -> DBXPaperListUsersOnFolderArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnFolderArgsToDBX(object: object)
}

func mapDBPAPERListUsersOnFolderArgsToDBX(object: DBPAPERListUsersOnFolderArgs) -> DBXPaperListUsersOnFolderArgs {
    DBXPaperListUsersOnFolderArgs(docId: object.docId, limit: object.limit)
}

func mapDBPAPERListUsersOnFolderContinueArgsToDBXOptional(object: DBPAPERListUsersOnFolderContinueArgs?) -> DBXPaperListUsersOnFolderContinueArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnFolderContinueArgsToDBX(object: object)
}

func mapDBPAPERListUsersOnFolderContinueArgsToDBX(object: DBPAPERListUsersOnFolderContinueArgs) -> DBXPaperListUsersOnFolderContinueArgs {
    DBXPaperListUsersOnFolderContinueArgs(docId: object.docId, cursor: object.cursor)
}

func mapDBPAPERListUsersOnFolderResponseToDBXOptional(object: DBPAPERListUsersOnFolderResponse?) -> DBXPaperListUsersOnFolderResponse? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnFolderResponseToDBX(object: object)
}

func mapDBPAPERListUsersOnFolderResponseToDBX(object: DBPAPERListUsersOnFolderResponse) -> DBXPaperListUsersOnFolderResponse {
    DBXPaperListUsersOnFolderResponse(
        invitees: object.invitees.compactMap { mapDBSHARINGInviteeInfoToDBX(object: $0) },
        users: object.users.compactMap { mapDBSHARINGUserInfoToDBX(object: $0) },
        cursor: mapDBPAPERCursorToDBX(object: object.cursor),
        hasMore: object.hasMore
    )
}

func mapDBPAPERListUsersOnPaperDocArgsToDBXOptional(object: DBPAPERListUsersOnPaperDocArgs?) -> DBXPaperListUsersOnPaperDocArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnPaperDocArgsToDBX(object: object)
}

func mapDBPAPERListUsersOnPaperDocArgsToDBX(object: DBPAPERListUsersOnPaperDocArgs) -> DBXPaperListUsersOnPaperDocArgs {
    DBXPaperListUsersOnPaperDocArgs(docId: object.docId, limit: object.limit, filterBy: mapDBPAPERUserOnPaperDocFilterToDBX(object: object.filterBy))
}

func mapDBPAPERListUsersOnPaperDocContinueArgsToDBXOptional(object: DBPAPERListUsersOnPaperDocContinueArgs?) -> DBXPaperListUsersOnPaperDocContinueArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnPaperDocContinueArgsToDBX(object: object)
}

func mapDBPAPERListUsersOnPaperDocContinueArgsToDBX(object: DBPAPERListUsersOnPaperDocContinueArgs) -> DBXPaperListUsersOnPaperDocContinueArgs {
    DBXPaperListUsersOnPaperDocContinueArgs(docId: object.docId, cursor: object.cursor)
}

func mapDBPAPERListUsersOnPaperDocResponseToDBXOptional(object: DBPAPERListUsersOnPaperDocResponse?) -> DBXPaperListUsersOnPaperDocResponse? {
    guard let object = object else { return nil }
    return mapDBPAPERListUsersOnPaperDocResponseToDBX(object: object)
}

func mapDBPAPERListUsersOnPaperDocResponseToDBX(object: DBPAPERListUsersOnPaperDocResponse) -> DBXPaperListUsersOnPaperDocResponse {
    DBXPaperListUsersOnPaperDocResponse(
        invitees: object.invitees.compactMap { mapDBPAPERInviteeInfoWithPermissionLevelToDBX(object: $0) },
        users: object.users.compactMap { mapDBPAPERUserInfoWithPermissionLevelToDBX(object: $0) },
        docOwner: mapDBSHARINGUserInfoToDBX(object: object.docOwner),
        cursor: mapDBPAPERCursorToDBX(object: object.cursor),
        hasMore: object.hasMore
    )
}

func mapDBPAPERPaperApiCursorErrorToDBXOptional(object: DBPAPERPaperApiCursorError?) -> DBXPaperPaperApiCursorError? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperApiCursorErrorToDBX(object: object)
}

func mapDBPAPERPaperApiCursorErrorToDBX(object: DBPAPERPaperApiCursorError) -> DBXPaperPaperApiCursorError {
    if object.isExpiredCursor() {
        return DBXPaperPaperApiCursorErrorExpiredCursor()
    }
    if object.isInvalidCursor() {
        return DBXPaperPaperApiCursorErrorInvalidCursor()
    }
    if object.isWrongUserInCursor() {
        return DBXPaperPaperApiCursorErrorWrongUserInCursor()
    }
    if object.isReset() {
        return DBXPaperPaperApiCursorErrorReset()
    }
    if object.isOther() {
        return DBXPaperPaperApiCursorErrorOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperDocCreateArgsToDBXOptional(object: DBPAPERPaperDocCreateArgs?) -> DBXPaperPaperDocCreateArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocCreateArgsToDBX(object: object)
}

func mapDBPAPERPaperDocCreateArgsToDBX(object: DBPAPERPaperDocCreateArgs) -> DBXPaperPaperDocCreateArgs {
    DBXPaperPaperDocCreateArgs(importFormat: mapDBPAPERImportFormatToDBX(object: object.importFormat), parentFolderId: object.parentFolderId)
}

func mapDBPAPERPaperDocCreateErrorToDBXOptional(object: DBPAPERPaperDocCreateError?) -> DBXPaperPaperDocCreateError? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocCreateErrorToDBX(object: object)
}

func mapDBPAPERPaperDocCreateErrorToDBX(object: DBPAPERPaperDocCreateError) -> DBXPaperPaperDocCreateError {
    if object.isInsufficientPermissions() {
        return DBXPaperPaperDocCreateErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperPaperDocCreateErrorOther()
    }
    if object.isContentMalformed() {
        return DBXPaperPaperDocCreateErrorContentMalformed()
    }
    if object.isFolderNotFound() {
        return DBXPaperPaperDocCreateErrorFolderNotFound()
    }
    if object.isDocLengthExceeded() {
        return DBXPaperPaperDocCreateErrorDocLengthExceeded()
    }
    if object.isImageSizeExceeded() {
        return DBXPaperPaperDocCreateErrorImageSizeExceeded()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperDocCreateUpdateResultToDBXOptional(object: DBPAPERPaperDocCreateUpdateResult?) -> DBXPaperPaperDocCreateUpdateResult? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocCreateUpdateResultToDBX(object: object)
}

func mapDBPAPERPaperDocCreateUpdateResultToDBX(object: DBPAPERPaperDocCreateUpdateResult) -> DBXPaperPaperDocCreateUpdateResult {
    DBXPaperPaperDocCreateUpdateResult(docId: object.docId, revision: object.revision, title: object.title)
}

func mapDBPAPERPaperDocExportToDBXOptional(object: DBPAPERPaperDocExport?) -> DBXPaperPaperDocExport? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocExportToDBX(object: object)
}

func mapDBPAPERPaperDocExportToDBX(object: DBPAPERPaperDocExport) -> DBXPaperPaperDocExport {
    DBXPaperPaperDocExport(docId: object.docId, exportFormat: mapDBPAPERExportFormatToDBX(object: object.exportFormat))
}

func mapDBPAPERPaperDocExportResultToDBXOptional(object: DBPAPERPaperDocExportResult?) -> DBXPaperPaperDocExportResult? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocExportResultToDBX(object: object)
}

func mapDBPAPERPaperDocExportResultToDBX(object: DBPAPERPaperDocExportResult) -> DBXPaperPaperDocExportResult {
    DBXPaperPaperDocExportResult(owner: object.owner, title: object.title, revision: object.revision, mimeType: object.mimeType)
}

func mapDBPAPERPaperDocPermissionLevelToDBXOptional(object: DBPAPERPaperDocPermissionLevel?) -> DBXPaperPaperDocPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocPermissionLevelToDBX(object: object)
}

func mapDBPAPERPaperDocPermissionLevelToDBX(object: DBPAPERPaperDocPermissionLevel) -> DBXPaperPaperDocPermissionLevel {
    if object.isEdit() {
        return DBXPaperPaperDocPermissionLevelEdit()
    }
    if object.isViewAndComment() {
        return DBXPaperPaperDocPermissionLevelViewAndComment()
    }
    if object.isOther() {
        return DBXPaperPaperDocPermissionLevelOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperDocSharingPolicyToDBXOptional(object: DBPAPERPaperDocSharingPolicy?) -> DBXPaperPaperDocSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocSharingPolicyToDBX(object: object)
}

func mapDBPAPERPaperDocSharingPolicyToDBX(object: DBPAPERPaperDocSharingPolicy) -> DBXPaperPaperDocSharingPolicy {
    DBXPaperPaperDocSharingPolicy(docId: object.docId, sharingPolicy: mapDBPAPERSharingPolicyToDBX(object: object.sharingPolicy))
}

func mapDBPAPERPaperDocUpdateArgsToDBXOptional(object: DBPAPERPaperDocUpdateArgs?) -> DBXPaperPaperDocUpdateArgs? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocUpdateArgsToDBX(object: object)
}

func mapDBPAPERPaperDocUpdateArgsToDBX(object: DBPAPERPaperDocUpdateArgs) -> DBXPaperPaperDocUpdateArgs {
    DBXPaperPaperDocUpdateArgs(
        docId: object.docId,
        docUpdatePolicy: mapDBPAPERPaperDocUpdatePolicyToDBX(object: object.docUpdatePolicy),
        revision: object.revision,
        importFormat: mapDBPAPERImportFormatToDBX(object: object.importFormat)
    )
}

func mapDBPAPERPaperDocUpdateErrorToDBXOptional(object: DBPAPERPaperDocUpdateError?) -> DBXPaperPaperDocUpdateError? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocUpdateErrorToDBX(object: object)
}

func mapDBPAPERPaperDocUpdateErrorToDBX(object: DBPAPERPaperDocUpdateError) -> DBXPaperPaperDocUpdateError {
    if object.isInsufficientPermissions() {
        return DBXPaperPaperDocUpdateErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperPaperDocUpdateErrorOther()
    }
    if object.isDocNotFound() {
        return DBXPaperPaperDocUpdateErrorDocNotFound()
    }
    if object.isContentMalformed() {
        return DBXPaperPaperDocUpdateErrorContentMalformed()
    }
    if object.isRevisionMismatch() {
        return DBXPaperPaperDocUpdateErrorRevisionMismatch()
    }
    if object.isDocLengthExceeded() {
        return DBXPaperPaperDocUpdateErrorDocLengthExceeded()
    }
    if object.isImageSizeExceeded() {
        return DBXPaperPaperDocUpdateErrorImageSizeExceeded()
    }
    if object.isDocArchived() {
        return DBXPaperPaperDocUpdateErrorDocArchived()
    }
    if object.isDocDeleted() {
        return DBXPaperPaperDocUpdateErrorDocDeleted()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperDocUpdatePolicyToDBXOptional(object: DBPAPERPaperDocUpdatePolicy?) -> DBXPaperPaperDocUpdatePolicy? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperDocUpdatePolicyToDBX(object: object)
}

func mapDBPAPERPaperDocUpdatePolicyToDBX(object: DBPAPERPaperDocUpdatePolicy) -> DBXPaperPaperDocUpdatePolicy {
    if object.isAppend() {
        return DBXPaperPaperDocUpdatePolicyAppend()
    }
    if object.isPrepend() {
        return DBXPaperPaperDocUpdatePolicyPrepend()
    }
    if object.isOverwriteAll() {
        return DBXPaperPaperDocUpdatePolicyOverwriteAll()
    }
    if object.isOther() {
        return DBXPaperPaperDocUpdatePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperFolderCreateArgToDBXOptional(object: DBPAPERPaperFolderCreateArg?) -> DBXPaperPaperFolderCreateArg? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperFolderCreateArgToDBX(object: object)
}

func mapDBPAPERPaperFolderCreateArgToDBX(object: DBPAPERPaperFolderCreateArg) -> DBXPaperPaperFolderCreateArg {
    DBXPaperPaperFolderCreateArg(name: object.name, parentFolderId: object.parentFolderId, isTeamFolder: object.isTeamFolder)
}

func mapDBPAPERPaperFolderCreateErrorToDBXOptional(object: DBPAPERPaperFolderCreateError?) -> DBXPaperPaperFolderCreateError? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperFolderCreateErrorToDBX(object: object)
}

func mapDBPAPERPaperFolderCreateErrorToDBX(object: DBPAPERPaperFolderCreateError) -> DBXPaperPaperFolderCreateError {
    if object.isInsufficientPermissions() {
        return DBXPaperPaperFolderCreateErrorInsufficientPermissions()
    }
    if object.isOther() {
        return DBXPaperPaperFolderCreateErrorOther()
    }
    if object.isFolderNotFound() {
        return DBXPaperPaperFolderCreateErrorFolderNotFound()
    }
    if object.isInvalidFolderId() {
        return DBXPaperPaperFolderCreateErrorInvalidFolderId()
    }
    fatalError("codegen error")
}

func mapDBPAPERPaperFolderCreateResultToDBXOptional(object: DBPAPERPaperFolderCreateResult?) -> DBXPaperPaperFolderCreateResult? {
    guard let object = object else { return nil }
    return mapDBPAPERPaperFolderCreateResultToDBX(object: object)
}

func mapDBPAPERPaperFolderCreateResultToDBX(object: DBPAPERPaperFolderCreateResult) -> DBXPaperPaperFolderCreateResult {
    DBXPaperPaperFolderCreateResult(folderId: object.folderId)
}

func mapDBPAPERRemovePaperDocUserToDBXOptional(object: DBPAPERRemovePaperDocUser?) -> DBXPaperRemovePaperDocUser? {
    guard let object = object else { return nil }
    return mapDBPAPERRemovePaperDocUserToDBX(object: object)
}

func mapDBPAPERRemovePaperDocUserToDBX(object: DBPAPERRemovePaperDocUser) -> DBXPaperRemovePaperDocUser {
    DBXPaperRemovePaperDocUser(docId: object.docId, member: mapDBSHARINGMemberSelectorToDBX(object: object.member))
}

func mapDBPAPERSharingPolicyToDBXOptional(object: DBPAPERSharingPolicy?) -> DBXPaperSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBPAPERSharingPolicyToDBX(object: object)
}

func mapDBPAPERSharingPolicyToDBX(object: DBPAPERSharingPolicy) -> DBXPaperSharingPolicy {
    DBXPaperSharingPolicy(
        publicSharingPolicy: mapDBPAPERSharingPublicPolicyTypeToDBXOptional(object: object.publicSharingPolicy),
        teamSharingPolicy: mapDBPAPERSharingTeamPolicyTypeToDBXOptional(object: object.teamSharingPolicy)
    )
}

func mapDBPAPERSharingTeamPolicyTypeToDBXOptional(object: DBPAPERSharingTeamPolicyType?) -> DBXPaperSharingTeamPolicyType? {
    guard let object = object else { return nil }
    return mapDBPAPERSharingTeamPolicyTypeToDBX(object: object)
}

func mapDBPAPERSharingTeamPolicyTypeToDBX(object: DBPAPERSharingTeamPolicyType) -> DBXPaperSharingTeamPolicyType {
    if object.isPeopleWithLinkCanEdit() {
        return DBXPaperSharingTeamPolicyTypePeopleWithLinkCanEdit()
    }
    if object.isPeopleWithLinkCanViewAndComment() {
        return DBXPaperSharingTeamPolicyTypePeopleWithLinkCanViewAndComment()
    }
    if object.isInviteOnly() {
        return DBXPaperSharingTeamPolicyTypeInviteOnly()
    }
    fatalError("codegen error")
}

func mapDBPAPERSharingPublicPolicyTypeToDBXOptional(object: DBPAPERSharingPublicPolicyType?) -> DBXPaperSharingPublicPolicyType? {
    guard let object = object else { return nil }
    return mapDBPAPERSharingPublicPolicyTypeToDBX(object: object)
}

func mapDBPAPERSharingPublicPolicyTypeToDBX(object: DBPAPERSharingPublicPolicyType) -> DBXPaperSharingPublicPolicyType {
    if object.isPeopleWithLinkCanEdit() {
        return DBXPaperSharingPublicPolicyTypePeopleWithLinkCanEdit()
    }
    if object.isPeopleWithLinkCanViewAndComment() {
        return DBXPaperSharingPublicPolicyTypePeopleWithLinkCanViewAndComment()
    }
    if object.isInviteOnly() {
        return DBXPaperSharingPublicPolicyTypeInviteOnly()
    }
    if object.isDisabled() {
        return DBXPaperSharingPublicPolicyTypeDisabled()
    }
    fatalError("codegen error")
}

func mapDBPAPERUserInfoWithPermissionLevelToDBXOptional(object: DBPAPERUserInfoWithPermissionLevel?) -> DBXPaperUserInfoWithPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBPAPERUserInfoWithPermissionLevelToDBX(object: object)
}

func mapDBPAPERUserInfoWithPermissionLevelToDBX(object: DBPAPERUserInfoWithPermissionLevel) -> DBXPaperUserInfoWithPermissionLevel {
    DBXPaperUserInfoWithPermissionLevel(
        user: mapDBSHARINGUserInfoToDBX(object: object.user),
        permissionLevel: mapDBPAPERPaperDocPermissionLevelToDBX(object: object.permissionLevel)
    )
}

func mapDBPAPERUserOnPaperDocFilterToDBXOptional(object: DBPAPERUserOnPaperDocFilter?) -> DBXPaperUserOnPaperDocFilter? {
    guard let object = object else { return nil }
    return mapDBPAPERUserOnPaperDocFilterToDBX(object: object)
}

func mapDBPAPERUserOnPaperDocFilterToDBX(object: DBPAPERUserOnPaperDocFilter) -> DBXPaperUserOnPaperDocFilter {
    if object.isVisited() {
        return DBXPaperUserOnPaperDocFilterVisited()
    }
    if object.isShared() {
        return DBXPaperUserOnPaperDocFilterShared()
    }
    if object.isOther() {
        return DBXPaperUserOnPaperDocFilterOther()
    }
    fatalError("codegen error")
}
