///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBUSERSAccountToDBXOptional(object: DBUSERSAccount?) -> DBXUsersAccount? {
    guard let object = object else { return nil }
    return mapDBUSERSAccountToDBX(object: object)
}

func mapDBUSERSAccountToDBX(object: DBUSERSAccount) -> DBXUsersAccount {
    DBXUsersAccount(
        accountId: object.accountId,
        name: mapDBUSERSNameToDBX(object: object.name),
        email: object.email,
        emailVerified: object.emailVerified,
        disabled: object.disabled,
        profilePhotoUrl: object.profilePhotoUrl
    )
}

func mapDBUSERSBasicAccountToDBXOptional(object: DBUSERSBasicAccount?) -> DBXUsersBasicAccount? {
    guard let object = object else { return nil }
    return mapDBUSERSBasicAccountToDBX(object: object)
}

func mapDBUSERSBasicAccountToDBX(object: DBUSERSBasicAccount) -> DBXUsersBasicAccount {
    DBXUsersBasicAccount(
        accountId: object.accountId,
        name: mapDBUSERSNameToDBX(object: object.name),
        email: object.email,
        emailVerified: object.emailVerified,
        disabled: object.disabled,
        isTeammate: object.isTeammate,
        profilePhotoUrl: object.profilePhotoUrl,
        teamMemberId: object.teamMemberId
    )
}

func mapDBUSERSFileLockingValueToDBXOptional(object: DBUSERSFileLockingValue?) -> DBXUsersFileLockingValue? {
    guard let object = object else { return nil }
    return mapDBUSERSFileLockingValueToDBX(object: object)
}

func mapDBUSERSFileLockingValueToDBX(object: DBUSERSFileLockingValue) -> DBXUsersFileLockingValue {
    if object.isEnabled() {
        let enabled = object.enabled
        return DBXUsersFileLockingValue.factory(swift: .enabled(enabled.boolValue))
    }
    if object.isOther() {
        return DBXUsersFileLockingValueOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSFullAccountToDBXOptional(object: DBUSERSFullAccount?) -> DBXUsersFullAccount? {
    guard let object = object else { return nil }
    return mapDBUSERSFullAccountToDBX(object: object)
}

func mapDBUSERSFullAccountToDBX(object: DBUSERSFullAccount) -> DBXUsersFullAccount {
    DBXUsersFullAccount(
        accountId: object.accountId,
        name: mapDBUSERSNameToDBX(object: object.name),
        email: object.email,
        emailVerified: object.emailVerified,
        disabled: object.disabled,
        locale: object.locale,
        referralLink: object.referralLink,
        isPaired: object.isPaired,
        accountType: mapDBUSERSCOMMONAccountTypeToDBX(object: object.accountType),
        rootInfo: mapDBCOMMONRootInfoToDBX(object: object.rootInfo),
        profilePhotoUrl: object.profilePhotoUrl,
        country: object.country,
        team: mapDBUSERSFullTeamToDBXOptional(object: object.team),
        teamMemberId: object.teamMemberId
    )
}

func mapDBUSERSTeamToDBXOptional(object: DBUSERSTeam?) -> DBXUsersTeam? {
    guard let object = object else { return nil }
    return mapDBUSERSTeamToDBX(object: object)
}

func mapDBUSERSTeamToDBX(object: DBUSERSTeam) -> DBXUsersTeam {
    DBXUsersTeam(id: object.id_, name: object.name)
}

func mapDBUSERSFullTeamToDBXOptional(object: DBUSERSFullTeam?) -> DBXUsersFullTeam? {
    guard let object = object else { return nil }
    return mapDBUSERSFullTeamToDBX(object: object)
}

func mapDBUSERSFullTeamToDBX(object: DBUSERSFullTeam) -> DBXUsersFullTeam {
    DBXUsersFullTeam(
        id: object.id_,
        name: object.name,
        sharingPolicies: mapDBTEAMPOLICIESTeamSharingPoliciesToDBX(object: object.sharingPolicies),
        officeAddinPolicy: mapDBTEAMPOLICIESOfficeAddInPolicyToDBX(object: object.officeAddinPolicy)
    )
}

func mapDBUSERSGetAccountArgToDBXOptional(object: DBUSERSGetAccountArg?) -> DBXUsersGetAccountArg? {
    guard let object = object else { return nil }
    return mapDBUSERSGetAccountArgToDBX(object: object)
}

func mapDBUSERSGetAccountArgToDBX(object: DBUSERSGetAccountArg) -> DBXUsersGetAccountArg {
    DBXUsersGetAccountArg(accountId: object.accountId)
}

func mapDBUSERSGetAccountBatchArgToDBXOptional(object: DBUSERSGetAccountBatchArg?) -> DBXUsersGetAccountBatchArg? {
    guard let object = object else { return nil }
    return mapDBUSERSGetAccountBatchArgToDBX(object: object)
}

func mapDBUSERSGetAccountBatchArgToDBX(object: DBUSERSGetAccountBatchArg) -> DBXUsersGetAccountBatchArg {
    DBXUsersGetAccountBatchArg(accountIds: object.accountIds)
}

func mapDBUSERSGetAccountBatchErrorToDBXOptional(object: DBUSERSGetAccountBatchError?) -> DBXUsersGetAccountBatchError? {
    guard let object = object else { return nil }
    return mapDBUSERSGetAccountBatchErrorToDBX(object: object)
}

func mapDBUSERSGetAccountBatchErrorToDBX(object: DBUSERSGetAccountBatchError) -> DBXUsersGetAccountBatchError {
    if object.isNoAccount() {
        let noAccount = object.noAccount
        return DBXUsersGetAccountBatchError.factory(swift: .noAccount(noAccount))
    }
    if object.isOther() {
        return DBXUsersGetAccountBatchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSGetAccountErrorToDBXOptional(object: DBUSERSGetAccountError?) -> DBXUsersGetAccountError? {
    guard let object = object else { return nil }
    return mapDBUSERSGetAccountErrorToDBX(object: object)
}

func mapDBUSERSGetAccountErrorToDBX(object: DBUSERSGetAccountError) -> DBXUsersGetAccountError {
    if object.isNoAccount() {
        return DBXUsersGetAccountErrorNoAccount()
    }
    if object.isOther() {
        return DBXUsersGetAccountErrorOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSIndividualSpaceAllocationToDBXOptional(object: DBUSERSIndividualSpaceAllocation?) -> DBXUsersIndividualSpaceAllocation? {
    guard let object = object else { return nil }
    return mapDBUSERSIndividualSpaceAllocationToDBX(object: object)
}

func mapDBUSERSIndividualSpaceAllocationToDBX(object: DBUSERSIndividualSpaceAllocation) -> DBXUsersIndividualSpaceAllocation {
    DBXUsersIndividualSpaceAllocation(allocated: object.allocated)
}

func mapDBUSERSNameToDBXOptional(object: DBUSERSName?) -> DBXUsersName? {
    guard let object = object else { return nil }
    return mapDBUSERSNameToDBX(object: object)
}

func mapDBUSERSNameToDBX(object: DBUSERSName) -> DBXUsersName {
    DBXUsersName(
        givenName: object.givenName,
        surname: object.surname,
        familiarName: object.familiarName,
        displayName: object.displayName,
        abbreviatedName: object.abbreviatedName
    )
}

func mapDBUSERSPaperAsFilesValueToDBXOptional(object: DBUSERSPaperAsFilesValue?) -> DBXUsersPaperAsFilesValue? {
    guard let object = object else { return nil }
    return mapDBUSERSPaperAsFilesValueToDBX(object: object)
}

func mapDBUSERSPaperAsFilesValueToDBX(object: DBUSERSPaperAsFilesValue) -> DBXUsersPaperAsFilesValue {
    if object.isEnabled() {
        let enabled = object.enabled
        return DBXUsersPaperAsFilesValue.factory(swift: .enabled(enabled.boolValue))
    }
    if object.isOther() {
        return DBXUsersPaperAsFilesValueOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSSpaceAllocationToDBXOptional(object: DBUSERSSpaceAllocation?) -> DBXUsersSpaceAllocation? {
    guard let object = object else { return nil }
    return mapDBUSERSSpaceAllocationToDBX(object: object)
}

func mapDBUSERSSpaceAllocationToDBX(object: DBUSERSSpaceAllocation) -> DBXUsersSpaceAllocation {
    if object.isIndividual() {
        let individual = mapDBUSERSIndividualSpaceAllocationToDBX(object: object.individual)
        return DBXUsersSpaceAllocation.factory(swift: .individual(individual.swift))
    }
    if object.isTeam() {
        let team = mapDBUSERSTeamSpaceAllocationToDBX(object: object.team)
        return DBXUsersSpaceAllocation.factory(swift: .team(team.swift))
    }
    if object.isOther() {
        return DBXUsersSpaceAllocationOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSSpaceUsageToDBXOptional(object: DBUSERSSpaceUsage?) -> DBXUsersSpaceUsage? {
    guard let object = object else { return nil }
    return mapDBUSERSSpaceUsageToDBX(object: object)
}

func mapDBUSERSSpaceUsageToDBX(object: DBUSERSSpaceUsage) -> DBXUsersSpaceUsage {
    DBXUsersSpaceUsage(used: object.used, allocation: mapDBUSERSSpaceAllocationToDBX(object: object.allocation))
}

func mapDBUSERSTeamSpaceAllocationToDBXOptional(object: DBUSERSTeamSpaceAllocation?) -> DBXUsersTeamSpaceAllocation? {
    guard let object = object else { return nil }
    return mapDBUSERSTeamSpaceAllocationToDBX(object: object)
}

func mapDBUSERSTeamSpaceAllocationToDBX(object: DBUSERSTeamSpaceAllocation) -> DBXUsersTeamSpaceAllocation {
    DBXUsersTeamSpaceAllocation(
        used: object.used,
        allocated: object.allocated,
        userWithinTeamSpaceAllocated: object.userWithinTeamSpaceAllocated,
        userWithinTeamSpaceLimitType: mapDBTEAMCOMMONMemberSpaceLimitTypeToDBX(object: object.userWithinTeamSpaceLimitType),
        userWithinTeamSpaceUsedCached: object.userWithinTeamSpaceUsedCached
    )
}

func mapDBUSERSUserFeatureToDBXOptional(object: DBUSERSUserFeature?) -> DBXUsersUserFeature? {
    guard let object = object else { return nil }
    return mapDBUSERSUserFeatureToDBX(object: object)
}

func mapDBUSERSUserFeatureToDBX(object: DBUSERSUserFeature) -> DBXUsersUserFeature {
    if object.isPaperAsFiles() {
        return DBXUsersUserFeaturePaperAsFiles()
    }
    if object.isFileLocking() {
        return DBXUsersUserFeatureFileLocking()
    }
    if object.isOther() {
        return DBXUsersUserFeatureOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSUserFeatureValueToDBXOptional(object: DBUSERSUserFeatureValue?) -> DBXUsersUserFeatureValue? {
    guard let object = object else { return nil }
    return mapDBUSERSUserFeatureValueToDBX(object: object)
}

func mapDBUSERSUserFeatureValueToDBX(object: DBUSERSUserFeatureValue) -> DBXUsersUserFeatureValue {
    if object.isPaperAsFiles() {
        let paperAsFiles = mapDBUSERSPaperAsFilesValueToDBX(object: object.paperAsFiles)
        return DBXUsersUserFeatureValue.factory(swift: .paperAsFiles(paperAsFiles.swift))
    }
    if object.isFileLocking() {
        let fileLocking = mapDBUSERSFileLockingValueToDBX(object: object.fileLocking)
        return DBXUsersUserFeatureValue.factory(swift: .fileLocking(fileLocking.swift))
    }
    if object.isOther() {
        return DBXUsersUserFeatureValueOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSUserFeaturesGetValuesBatchArgToDBXOptional(object: DBUSERSUserFeaturesGetValuesBatchArg?) -> DBXUsersUserFeaturesGetValuesBatchArg? {
    guard let object = object else { return nil }
    return mapDBUSERSUserFeaturesGetValuesBatchArgToDBX(object: object)
}

func mapDBUSERSUserFeaturesGetValuesBatchArgToDBX(object: DBUSERSUserFeaturesGetValuesBatchArg) -> DBXUsersUserFeaturesGetValuesBatchArg {
    DBXUsersUserFeaturesGetValuesBatchArg(features: object.features.compactMap { mapDBUSERSUserFeatureToDBX(object: $0) })
}

func mapDBUSERSUserFeaturesGetValuesBatchErrorToDBXOptional(object: DBUSERSUserFeaturesGetValuesBatchError?) -> DBXUsersUserFeaturesGetValuesBatchError? {
    guard let object = object else { return nil }
    return mapDBUSERSUserFeaturesGetValuesBatchErrorToDBX(object: object)
}

func mapDBUSERSUserFeaturesGetValuesBatchErrorToDBX(object: DBUSERSUserFeaturesGetValuesBatchError) -> DBXUsersUserFeaturesGetValuesBatchError {
    if object.isEmptyFeaturesList() {
        return DBXUsersUserFeaturesGetValuesBatchErrorEmptyFeaturesList()
    }
    if object.isOther() {
        return DBXUsersUserFeaturesGetValuesBatchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBUSERSUserFeaturesGetValuesBatchResultToDBXOptional(object: DBUSERSUserFeaturesGetValuesBatchResult?) -> DBXUsersUserFeaturesGetValuesBatchResult? {
    guard let object = object else { return nil }
    return mapDBUSERSUserFeaturesGetValuesBatchResultToDBX(object: object)
}

func mapDBUSERSUserFeaturesGetValuesBatchResultToDBX(object: DBUSERSUserFeaturesGetValuesBatchResult) -> DBXUsersUserFeaturesGetValuesBatchResult {
    DBXUsersUserFeaturesGetValuesBatchResult(values: object.values.compactMap { mapDBUSERSUserFeatureValueToDBX(object: $0) })
}
