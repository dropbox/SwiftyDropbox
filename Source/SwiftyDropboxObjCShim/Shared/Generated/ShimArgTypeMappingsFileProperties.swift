///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBFILEPROPERTIESAddPropertiesArgToDBXOptional(object: DBFILEPROPERTIESAddPropertiesArg?) -> DBXFilePropertiesAddPropertiesArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESAddPropertiesArgToDBX(object: object)
}

func mapDBFILEPROPERTIESAddPropertiesArgToDBX(object: DBFILEPROPERTIESAddPropertiesArg) -> DBXFilePropertiesAddPropertiesArg {
    DBXFilePropertiesAddPropertiesArg(path: object.path, propertyGroups: object.propertyGroups.compactMap { mapDBFILEPROPERTIESPropertyGroupToDBX(object: $0) })
}

func mapDBFILEPROPERTIESTemplateErrorToDBXOptional(object: DBFILEPROPERTIESTemplateError?) -> DBXFilePropertiesTemplateError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESTemplateErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESTemplateErrorToDBX(object: DBFILEPROPERTIESTemplateError) -> DBXFilePropertiesTemplateError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesTemplateError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesTemplateErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesTemplateErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESPropertiesErrorToDBXOptional(object: DBFILEPROPERTIESPropertiesError?) -> DBXFilePropertiesPropertiesError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesErrorToDBX(object: DBFILEPROPERTIESPropertiesError) -> DBXFilePropertiesPropertiesError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesPropertiesError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesPropertiesErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesPropertiesErrorOther()
    }
    if object.isPath() {
        let path = mapDBFILEPROPERTIESLookupErrorToDBX(object: object.path)
        return DBXFilePropertiesPropertiesError.factory(swift: .path(path.swift))
    }
    if object.isUnsupportedFolder() {
        return DBXFilePropertiesPropertiesErrorUnsupportedFolder()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESInvalidPropertyGroupErrorToDBXOptional(object: DBFILEPROPERTIESInvalidPropertyGroupError?)
    -> DBXFilePropertiesInvalidPropertyGroupError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESInvalidPropertyGroupErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESInvalidPropertyGroupErrorToDBX(object: DBFILEPROPERTIESInvalidPropertyGroupError) -> DBXFilePropertiesInvalidPropertyGroupError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesInvalidPropertyGroupError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesInvalidPropertyGroupErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesInvalidPropertyGroupErrorOther()
    }
    if object.isPath() {
        let path = mapDBFILEPROPERTIESLookupErrorToDBX(object: object.path)
        return DBXFilePropertiesInvalidPropertyGroupError.factory(swift: .path(path.swift))
    }
    if object.isUnsupportedFolder() {
        return DBXFilePropertiesInvalidPropertyGroupErrorUnsupportedFolder()
    }
    if object.isPropertyFieldTooLarge() {
        return DBXFilePropertiesInvalidPropertyGroupErrorPropertyFieldTooLarge()
    }
    if object.isDoesNotFitTemplate() {
        return DBXFilePropertiesInvalidPropertyGroupErrorDoesNotFitTemplate()
    }
    if object.isDuplicatePropertyGroups() {
        return DBXFilePropertiesInvalidPropertyGroupErrorDuplicatePropertyGroups()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESAddPropertiesErrorToDBXOptional(object: DBFILEPROPERTIESAddPropertiesError?) -> DBXFilePropertiesAddPropertiesError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESAddPropertiesErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESAddPropertiesErrorToDBX(object: DBFILEPROPERTIESAddPropertiesError) -> DBXFilePropertiesAddPropertiesError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesAddPropertiesError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesAddPropertiesErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesAddPropertiesErrorOther()
    }
    if object.isPath() {
        let path = mapDBFILEPROPERTIESLookupErrorToDBX(object: object.path)
        return DBXFilePropertiesAddPropertiesError.factory(swift: .path(path.swift))
    }
    if object.isUnsupportedFolder() {
        return DBXFilePropertiesAddPropertiesErrorUnsupportedFolder()
    }
    if object.isPropertyFieldTooLarge() {
        return DBXFilePropertiesAddPropertiesErrorPropertyFieldTooLarge()
    }
    if object.isDoesNotFitTemplate() {
        return DBXFilePropertiesAddPropertiesErrorDoesNotFitTemplate()
    }
    if object.isDuplicatePropertyGroups() {
        return DBXFilePropertiesAddPropertiesErrorDuplicatePropertyGroups()
    }
    if object.isPropertyGroupAlreadyExists() {
        return DBXFilePropertiesAddPropertiesErrorPropertyGroupAlreadyExists()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESPropertyGroupTemplateToDBXOptional(object: DBFILEPROPERTIESPropertyGroupTemplate?) -> DBXFilePropertiesPropertyGroupTemplate? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyGroupTemplateToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyGroupTemplateToDBX(object: DBFILEPROPERTIESPropertyGroupTemplate) -> DBXFilePropertiesPropertyGroupTemplate {
    DBXFilePropertiesPropertyGroupTemplate(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESAddTemplateArgToDBXOptional(object: DBFILEPROPERTIESAddTemplateArg?) -> DBXFilePropertiesAddTemplateArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESAddTemplateArgToDBX(object: object)
}

func mapDBFILEPROPERTIESAddTemplateArgToDBX(object: DBFILEPROPERTIESAddTemplateArg) -> DBXFilePropertiesAddTemplateArg {
    DBXFilePropertiesAddTemplateArg(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESAddTemplateResultToDBXOptional(object: DBFILEPROPERTIESAddTemplateResult?) -> DBXFilePropertiesAddTemplateResult? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESAddTemplateResultToDBX(object: object)
}

func mapDBFILEPROPERTIESAddTemplateResultToDBX(object: DBFILEPROPERTIESAddTemplateResult) -> DBXFilePropertiesAddTemplateResult {
    DBXFilePropertiesAddTemplateResult(templateId: object.templateId)
}

func mapDBFILEPROPERTIESGetTemplateArgToDBXOptional(object: DBFILEPROPERTIESGetTemplateArg?) -> DBXFilePropertiesGetTemplateArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESGetTemplateArgToDBX(object: object)
}

func mapDBFILEPROPERTIESGetTemplateArgToDBX(object: DBFILEPROPERTIESGetTemplateArg) -> DBXFilePropertiesGetTemplateArg {
    DBXFilePropertiesGetTemplateArg(templateId: object.templateId)
}

func mapDBFILEPROPERTIESGetTemplateResultToDBXOptional(object: DBFILEPROPERTIESGetTemplateResult?) -> DBXFilePropertiesGetTemplateResult? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESGetTemplateResultToDBX(object: object)
}

func mapDBFILEPROPERTIESGetTemplateResultToDBX(object: DBFILEPROPERTIESGetTemplateResult) -> DBXFilePropertiesGetTemplateResult {
    DBXFilePropertiesGetTemplateResult(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESListTemplateResultToDBXOptional(object: DBFILEPROPERTIESListTemplateResult?) -> DBXFilePropertiesListTemplateResult? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESListTemplateResultToDBX(object: object)
}

func mapDBFILEPROPERTIESListTemplateResultToDBX(object: DBFILEPROPERTIESListTemplateResult) -> DBXFilePropertiesListTemplateResult {
    DBXFilePropertiesListTemplateResult(templateIds: object.templateIds)
}

func mapDBFILEPROPERTIESLogicalOperatorToDBXOptional(object: DBFILEPROPERTIESLogicalOperator?) -> DBXFilePropertiesLogicalOperator? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESLogicalOperatorToDBX(object: object)
}

func mapDBFILEPROPERTIESLogicalOperatorToDBX(object: DBFILEPROPERTIESLogicalOperator) -> DBXFilePropertiesLogicalOperator {
    if object.isOrOperator() {
        return DBXFilePropertiesLogicalOperatorOrOperator()
    }
    if object.isOther() {
        return DBXFilePropertiesLogicalOperatorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESLookUpPropertiesErrorToDBXOptional(object: DBFILEPROPERTIESLookUpPropertiesError?) -> DBXFilePropertiesLookUpPropertiesError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESLookUpPropertiesErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESLookUpPropertiesErrorToDBX(object: DBFILEPROPERTIESLookUpPropertiesError) -> DBXFilePropertiesLookUpPropertiesError {
    if object.isPropertyGroupNotFound() {
        return DBXFilePropertiesLookUpPropertiesErrorPropertyGroupNotFound()
    }
    if object.isOther() {
        return DBXFilePropertiesLookUpPropertiesErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESLookupErrorToDBXOptional(object: DBFILEPROPERTIESLookupError?) -> DBXFilePropertiesLookupError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESLookupErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESLookupErrorToDBX(object: DBFILEPROPERTIESLookupError) -> DBXFilePropertiesLookupError {
    if object.isMalformedPath() {
        let malformedPath = object.malformedPath
        return DBXFilePropertiesLookupError.factory(swift: .malformedPath(malformedPath))
    }
    if object.isNotFound() {
        return DBXFilePropertiesLookupErrorNotFound()
    }
    if object.isNotFile() {
        return DBXFilePropertiesLookupErrorNotFile()
    }
    if object.isNotFolder() {
        return DBXFilePropertiesLookupErrorNotFolder()
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesLookupErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesLookupErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESModifyTemplateErrorToDBXOptional(object: DBFILEPROPERTIESModifyTemplateError?) -> DBXFilePropertiesModifyTemplateError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESModifyTemplateErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESModifyTemplateErrorToDBX(object: DBFILEPROPERTIESModifyTemplateError) -> DBXFilePropertiesModifyTemplateError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesModifyTemplateError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesModifyTemplateErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesModifyTemplateErrorOther()
    }
    if object.isConflictingPropertyNames() {
        return DBXFilePropertiesModifyTemplateErrorConflictingPropertyNames()
    }
    if object.isTooManyProperties() {
        return DBXFilePropertiesModifyTemplateErrorTooManyProperties()
    }
    if object.isTooManyTemplates() {
        return DBXFilePropertiesModifyTemplateErrorTooManyTemplates()
    }
    if object.isTemplateAttributeTooLarge() {
        return DBXFilePropertiesModifyTemplateErrorTemplateAttributeTooLarge()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESOverwritePropertyGroupArgToDBXOptional(object: DBFILEPROPERTIESOverwritePropertyGroupArg?)
    -> DBXFilePropertiesOverwritePropertyGroupArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESOverwritePropertyGroupArgToDBX(object: object)
}

func mapDBFILEPROPERTIESOverwritePropertyGroupArgToDBX(object: DBFILEPROPERTIESOverwritePropertyGroupArg) -> DBXFilePropertiesOverwritePropertyGroupArg {
    DBXFilePropertiesOverwritePropertyGroupArg(
        path: object.path,
        propertyGroups: object.propertyGroups.compactMap { mapDBFILEPROPERTIESPropertyGroupToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESPropertiesSearchArgToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchArg?) -> DBXFilePropertiesPropertiesSearchArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchArgToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchArgToDBX(object: DBFILEPROPERTIESPropertiesSearchArg) -> DBXFilePropertiesPropertiesSearchArg {
    DBXFilePropertiesPropertiesSearchArg(
        queries: object.queries.compactMap { mapDBFILEPROPERTIESPropertiesSearchQueryToDBX(object: $0) },
        templateFilter: mapDBFILEPROPERTIESTemplateFilterToDBX(object: object.templateFilter)
    )
}

func mapDBFILEPROPERTIESPropertiesSearchContinueArgToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchContinueArg?)
    -> DBXFilePropertiesPropertiesSearchContinueArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchContinueArgToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchContinueArgToDBX(object: DBFILEPROPERTIESPropertiesSearchContinueArg) -> DBXFilePropertiesPropertiesSearchContinueArg {
    DBXFilePropertiesPropertiesSearchContinueArg(cursor: object.cursor)
}

func mapDBFILEPROPERTIESPropertiesSearchContinueErrorToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchContinueError?)
    -> DBXFilePropertiesPropertiesSearchContinueError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchContinueErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchContinueErrorToDBX(object: DBFILEPROPERTIESPropertiesSearchContinueError)
    -> DBXFilePropertiesPropertiesSearchContinueError {
    if object.isReset() {
        return DBXFilePropertiesPropertiesSearchContinueErrorReset()
    }
    if object.isOther() {
        return DBXFilePropertiesPropertiesSearchContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESPropertiesSearchErrorToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchError?) -> DBXFilePropertiesPropertiesSearchError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchErrorToDBX(object: DBFILEPROPERTIESPropertiesSearchError) -> DBXFilePropertiesPropertiesSearchError {
    if object.isPropertyGroupLookup() {
        let propertyGroupLookup = mapDBFILEPROPERTIESLookUpPropertiesErrorToDBX(object: object.propertyGroupLookup)
        return DBXFilePropertiesPropertiesSearchError.factory(swift: .propertyGroupLookup(propertyGroupLookup.swift))
    }
    if object.isOther() {
        return DBXFilePropertiesPropertiesSearchErrorOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESPropertiesSearchMatchToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchMatch?) -> DBXFilePropertiesPropertiesSearchMatch? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchMatchToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchMatchToDBX(object: DBFILEPROPERTIESPropertiesSearchMatch) -> DBXFilePropertiesPropertiesSearchMatch {
    DBXFilePropertiesPropertiesSearchMatch(
        id: object.id_,
        path: object.path,
        isDeleted: object.isDeleted,
        propertyGroups: object.propertyGroups.compactMap { mapDBFILEPROPERTIESPropertyGroupToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESPropertiesSearchModeToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchMode?) -> DBXFilePropertiesPropertiesSearchMode? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchModeToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchModeToDBX(object: DBFILEPROPERTIESPropertiesSearchMode) -> DBXFilePropertiesPropertiesSearchMode {
    if object.isFieldName() {
        let fieldName = object.fieldName
        return DBXFilePropertiesPropertiesSearchMode.factory(swift: .fieldName(fieldName))
    }
    if object.isOther() {
        return DBXFilePropertiesPropertiesSearchModeOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESPropertiesSearchQueryToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchQuery?) -> DBXFilePropertiesPropertiesSearchQuery? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchQueryToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchQueryToDBX(object: DBFILEPROPERTIESPropertiesSearchQuery) -> DBXFilePropertiesPropertiesSearchQuery {
    DBXFilePropertiesPropertiesSearchQuery(
        query: object.query,
        mode: mapDBFILEPROPERTIESPropertiesSearchModeToDBX(object: object.mode),
        logicalOperator: mapDBFILEPROPERTIESLogicalOperatorToDBX(object: object.logicalOperator)
    )
}

func mapDBFILEPROPERTIESPropertiesSearchResultToDBXOptional(object: DBFILEPROPERTIESPropertiesSearchResult?) -> DBXFilePropertiesPropertiesSearchResult? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertiesSearchResultToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertiesSearchResultToDBX(object: DBFILEPROPERTIESPropertiesSearchResult) -> DBXFilePropertiesPropertiesSearchResult {
    DBXFilePropertiesPropertiesSearchResult(
        matches: object.matches.compactMap { mapDBFILEPROPERTIESPropertiesSearchMatchToDBX(object: $0) },
        cursor: object.cursor
    )
}

func mapDBFILEPROPERTIESPropertyFieldToDBXOptional(object: DBFILEPROPERTIESPropertyField?) -> DBXFilePropertiesPropertyField? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyFieldToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyFieldToDBX(object: DBFILEPROPERTIESPropertyField) -> DBXFilePropertiesPropertyField {
    DBXFilePropertiesPropertyField(name: object.name, value: object.value)
}

func mapDBFILEPROPERTIESPropertyFieldTemplateToDBXOptional(object: DBFILEPROPERTIESPropertyFieldTemplate?) -> DBXFilePropertiesPropertyFieldTemplate? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: DBFILEPROPERTIESPropertyFieldTemplate) -> DBXFilePropertiesPropertyFieldTemplate {
    DBXFilePropertiesPropertyFieldTemplate(
        name: object.name,
        description_: object.description_,
        type: mapDBFILEPROPERTIESPropertyTypeToDBX(object: object.type)
    )
}

func mapDBFILEPROPERTIESPropertyGroupToDBXOptional(object: DBFILEPROPERTIESPropertyGroup?) -> DBXFilePropertiesPropertyGroup? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyGroupToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyGroupToDBX(object: DBFILEPROPERTIESPropertyGroup) -> DBXFilePropertiesPropertyGroup {
    DBXFilePropertiesPropertyGroup(templateId: object.templateId, fields: object.fields.compactMap { mapDBFILEPROPERTIESPropertyFieldToDBX(object: $0) })
}

func mapDBFILEPROPERTIESPropertyGroupUpdateToDBXOptional(object: DBFILEPROPERTIESPropertyGroupUpdate?) -> DBXFilePropertiesPropertyGroupUpdate? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyGroupUpdateToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyGroupUpdateToDBX(object: DBFILEPROPERTIESPropertyGroupUpdate) -> DBXFilePropertiesPropertyGroupUpdate {
    DBXFilePropertiesPropertyGroupUpdate(
        templateId: object.templateId,
        addOrUpdateFields: object.addOrUpdateFields?.compactMap { mapDBFILEPROPERTIESPropertyFieldToDBX(object: $0) },
        removeFields: object.removeFields
    )
}

func mapDBFILEPROPERTIESPropertyTypeToDBXOptional(object: DBFILEPROPERTIESPropertyType?) -> DBXFilePropertiesPropertyType? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESPropertyTypeToDBX(object: object)
}

func mapDBFILEPROPERTIESPropertyTypeToDBX(object: DBFILEPROPERTIESPropertyType) -> DBXFilePropertiesPropertyType {
    if object.isString() {
        return DBXFilePropertiesPropertyTypeString_()
    }
    if object.isOther() {
        return DBXFilePropertiesPropertyTypeOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESRemovePropertiesArgToDBXOptional(object: DBFILEPROPERTIESRemovePropertiesArg?) -> DBXFilePropertiesRemovePropertiesArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESRemovePropertiesArgToDBX(object: object)
}

func mapDBFILEPROPERTIESRemovePropertiesArgToDBX(object: DBFILEPROPERTIESRemovePropertiesArg) -> DBXFilePropertiesRemovePropertiesArg {
    DBXFilePropertiesRemovePropertiesArg(path: object.path, propertyTemplateIds: object.propertyTemplateIds)
}

func mapDBFILEPROPERTIESRemovePropertiesErrorToDBXOptional(object: DBFILEPROPERTIESRemovePropertiesError?) -> DBXFilePropertiesRemovePropertiesError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESRemovePropertiesErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESRemovePropertiesErrorToDBX(object: DBFILEPROPERTIESRemovePropertiesError) -> DBXFilePropertiesRemovePropertiesError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesRemovePropertiesError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesRemovePropertiesErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesRemovePropertiesErrorOther()
    }
    if object.isPath() {
        let path = mapDBFILEPROPERTIESLookupErrorToDBX(object: object.path)
        return DBXFilePropertiesRemovePropertiesError.factory(swift: .path(path.swift))
    }
    if object.isUnsupportedFolder() {
        return DBXFilePropertiesRemovePropertiesErrorUnsupportedFolder()
    }
    if object.isPropertyGroupLookup() {
        let propertyGroupLookup = mapDBFILEPROPERTIESLookUpPropertiesErrorToDBX(object: object.propertyGroupLookup)
        return DBXFilePropertiesRemovePropertiesError.factory(swift: .propertyGroupLookup(propertyGroupLookup.swift))
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESRemoveTemplateArgToDBXOptional(object: DBFILEPROPERTIESRemoveTemplateArg?) -> DBXFilePropertiesRemoveTemplateArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESRemoveTemplateArgToDBX(object: object)
}

func mapDBFILEPROPERTIESRemoveTemplateArgToDBX(object: DBFILEPROPERTIESRemoveTemplateArg) -> DBXFilePropertiesRemoveTemplateArg {
    DBXFilePropertiesRemoveTemplateArg(templateId: object.templateId)
}

func mapDBFILEPROPERTIESTemplateFilterBaseToDBXOptional(object: DBFILEPROPERTIESTemplateFilterBase?) -> DBXFilePropertiesTemplateFilterBase? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESTemplateFilterBaseToDBX(object: object)
}

func mapDBFILEPROPERTIESTemplateFilterBaseToDBX(object: DBFILEPROPERTIESTemplateFilterBase) -> DBXFilePropertiesTemplateFilterBase {
    if object.isFilterSome() {
        let filterSome = object.filterSome
        return DBXFilePropertiesTemplateFilterBase.factory(swift: .filterSome(filterSome))
    }
    if object.isOther() {
        return DBXFilePropertiesTemplateFilterBaseOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESTemplateFilterToDBXOptional(object: DBFILEPROPERTIESTemplateFilter?) -> DBXFilePropertiesTemplateFilter? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESTemplateFilterToDBX(object: object)
}

func mapDBFILEPROPERTIESTemplateFilterToDBX(object: DBFILEPROPERTIESTemplateFilter) -> DBXFilePropertiesTemplateFilter {
    if object.isFilterSome() {
        let filterSome = object.filterSome
        return DBXFilePropertiesTemplateFilter.factory(swift: .filterSome(filterSome))
    }
    if object.isOther() {
        return DBXFilePropertiesTemplateFilterOther()
    }
    if object.isFilterNone() {
        return DBXFilePropertiesTemplateFilterFilterNone()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESTemplateOwnerTypeToDBXOptional(object: DBFILEPROPERTIESTemplateOwnerType?) -> DBXFilePropertiesTemplateOwnerType? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESTemplateOwnerTypeToDBX(object: object)
}

func mapDBFILEPROPERTIESTemplateOwnerTypeToDBX(object: DBFILEPROPERTIESTemplateOwnerType) -> DBXFilePropertiesTemplateOwnerType {
    if object.isUser() {
        return DBXFilePropertiesTemplateOwnerTypeUser()
    }
    if object.isTeam() {
        return DBXFilePropertiesTemplateOwnerTypeTeam()
    }
    if object.isOther() {
        return DBXFilePropertiesTemplateOwnerTypeOther()
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESUpdatePropertiesArgToDBXOptional(object: DBFILEPROPERTIESUpdatePropertiesArg?) -> DBXFilePropertiesUpdatePropertiesArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESUpdatePropertiesArgToDBX(object: object)
}

func mapDBFILEPROPERTIESUpdatePropertiesArgToDBX(object: DBFILEPROPERTIESUpdatePropertiesArg) -> DBXFilePropertiesUpdatePropertiesArg {
    DBXFilePropertiesUpdatePropertiesArg(
        path: object.path,
        updatePropertyGroups: object.updatePropertyGroups.compactMap { mapDBFILEPROPERTIESPropertyGroupUpdateToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESUpdatePropertiesErrorToDBXOptional(object: DBFILEPROPERTIESUpdatePropertiesError?) -> DBXFilePropertiesUpdatePropertiesError? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESUpdatePropertiesErrorToDBX(object: object)
}

func mapDBFILEPROPERTIESUpdatePropertiesErrorToDBX(object: DBFILEPROPERTIESUpdatePropertiesError) -> DBXFilePropertiesUpdatePropertiesError {
    if object.isTemplateNotFound() {
        let templateNotFound = object.templateNotFound
        return DBXFilePropertiesUpdatePropertiesError.factory(swift: .templateNotFound(templateNotFound))
    }
    if object.isRestrictedContent() {
        return DBXFilePropertiesUpdatePropertiesErrorRestrictedContent()
    }
    if object.isOther() {
        return DBXFilePropertiesUpdatePropertiesErrorOther()
    }
    if object.isPath() {
        let path = mapDBFILEPROPERTIESLookupErrorToDBX(object: object.path)
        return DBXFilePropertiesUpdatePropertiesError.factory(swift: .path(path.swift))
    }
    if object.isUnsupportedFolder() {
        return DBXFilePropertiesUpdatePropertiesErrorUnsupportedFolder()
    }
    if object.isPropertyFieldTooLarge() {
        return DBXFilePropertiesUpdatePropertiesErrorPropertyFieldTooLarge()
    }
    if object.isDoesNotFitTemplate() {
        return DBXFilePropertiesUpdatePropertiesErrorDoesNotFitTemplate()
    }
    if object.isDuplicatePropertyGroups() {
        return DBXFilePropertiesUpdatePropertiesErrorDuplicatePropertyGroups()
    }
    if object.isPropertyGroupLookup() {
        let propertyGroupLookup = mapDBFILEPROPERTIESLookUpPropertiesErrorToDBX(object: object.propertyGroupLookup)
        return DBXFilePropertiesUpdatePropertiesError.factory(swift: .propertyGroupLookup(propertyGroupLookup.swift))
    }
    fatalError("codegen error")
}

func mapDBFILEPROPERTIESUpdateTemplateArgToDBXOptional(object: DBFILEPROPERTIESUpdateTemplateArg?) -> DBXFilePropertiesUpdateTemplateArg? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESUpdateTemplateArgToDBX(object: object)
}

func mapDBFILEPROPERTIESUpdateTemplateArgToDBX(object: DBFILEPROPERTIESUpdateTemplateArg) -> DBXFilePropertiesUpdateTemplateArg {
    DBXFilePropertiesUpdateTemplateArg(
        templateId: object.templateId,
        name: object.name,
        description_: object.description_,
        addFields: object.addFields?.compactMap { mapDBFILEPROPERTIESPropertyFieldTemplateToDBX(object: $0) }
    )
}

func mapDBFILEPROPERTIESUpdateTemplateResultToDBXOptional(object: DBFILEPROPERTIESUpdateTemplateResult?) -> DBXFilePropertiesUpdateTemplateResult? {
    guard let object = object else { return nil }
    return mapDBFILEPROPERTIESUpdateTemplateResultToDBX(object: object)
}

func mapDBFILEPROPERTIESUpdateTemplateResultToDBX(object: DBFILEPROPERTIESUpdateTemplateResult) -> DBXFilePropertiesUpdateTemplateResult {
    DBXFilePropertiesUpdateTemplateResult(templateId: object.templateId)
}
