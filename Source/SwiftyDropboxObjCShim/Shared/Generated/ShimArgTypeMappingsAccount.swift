///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBACCOUNTPhotoSourceArgToDBXOptional(object: DBACCOUNTPhotoSourceArg?) -> DBXAccountPhotoSourceArg? {
    guard let object = object else { return nil }
    return mapDBACCOUNTPhotoSourceArgToDBX(object: object)
}

func mapDBACCOUNTPhotoSourceArgToDBX(object: DBACCOUNTPhotoSourceArg) -> DBXAccountPhotoSourceArg {
    if object.isBase64Data() {
        let base64Data = object.base64Data
        return DBXAccountPhotoSourceArg.factory(swift: .base64Data(base64Data))
    }
    if object.isOther() {
        return DBXAccountPhotoSourceArgOther()
    }
    fatalError("codegen error")
}

func mapDBACCOUNTSetProfilePhotoArgToDBXOptional(object: DBACCOUNTSetProfilePhotoArg?) -> DBXAccountSetProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBACCOUNTSetProfilePhotoArgToDBX(object: object)
}

func mapDBACCOUNTSetProfilePhotoArgToDBX(object: DBACCOUNTSetProfilePhotoArg) -> DBXAccountSetProfilePhotoArg {
    DBXAccountSetProfilePhotoArg(photo: mapDBACCOUNTPhotoSourceArgToDBX(object: object.photo))
}

func mapDBACCOUNTSetProfilePhotoErrorToDBXOptional(object: DBACCOUNTSetProfilePhotoError?) -> DBXAccountSetProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBACCOUNTSetProfilePhotoErrorToDBX(object: object)
}

func mapDBACCOUNTSetProfilePhotoErrorToDBX(object: DBACCOUNTSetProfilePhotoError) -> DBXAccountSetProfilePhotoError {
    if object.isFileTypeError() {
        return DBXAccountSetProfilePhotoErrorFileTypeError()
    }
    if object.isFileSizeError() {
        return DBXAccountSetProfilePhotoErrorFileSizeError()
    }
    if object.isDimensionError() {
        return DBXAccountSetProfilePhotoErrorDimensionError()
    }
    if object.isThumbnailError() {
        return DBXAccountSetProfilePhotoErrorThumbnailError()
    }
    if object.isTransientError() {
        return DBXAccountSetProfilePhotoErrorTransientError()
    }
    if object.isOther() {
        return DBXAccountSetProfilePhotoErrorOther()
    }
    fatalError("codegen error")
}

func mapDBACCOUNTSetProfilePhotoResultToDBXOptional(object: DBACCOUNTSetProfilePhotoResult?) -> DBXAccountSetProfilePhotoResult? {
    guard let object = object else { return nil }
    return mapDBACCOUNTSetProfilePhotoResultToDBX(object: object)
}

func mapDBACCOUNTSetProfilePhotoResultToDBX(object: DBACCOUNTSetProfilePhotoResult) -> DBXAccountSetProfilePhotoResult {
    DBXAccountSetProfilePhotoResult(profilePhotoUrl: object.profilePhotoUrl)
}
