///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXFilePropertiesAddPropertiesArgToDBOptional(object: DBXFilePropertiesAddPropertiesArg?) -> DBFILEPROPERTIESAddPropertiesArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesAddPropertiesArgToDB(object: object)
}

func mapDBXFilePropertiesAddPropertiesArgToDB(object: DBXFilePropertiesAddPropertiesArg) -> DBFILEPROPERTIESAddPropertiesArg {
    DBFILEPROPERTIESAddPropertiesArg(path: object.path, propertyGroups: object.propertyGroups.compactMap { mapDBXFilePropertiesPropertyGroupToDB(object: $0) })
}

func mapDBXFilePropertiesTemplateErrorToDBOptional(object: DBXFilePropertiesTemplateError?) -> DBFILEPROPERTIESTemplateError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesTemplateErrorToDB(object: object)
}

func mapDBXFilePropertiesTemplateErrorToDB(object: DBXFilePropertiesTemplateError) -> DBFILEPROPERTIESTemplateError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESTemplateError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESTemplateError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESTemplateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesPropertiesErrorToDBOptional(object: DBXFilePropertiesPropertiesError?) -> DBFILEPROPERTIESPropertiesError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesErrorToDB(object: object)
}

func mapDBXFilePropertiesPropertiesErrorToDB(object: DBXFilePropertiesPropertiesError) -> DBFILEPROPERTIESPropertiesError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESPropertiesError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESPropertiesError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESPropertiesError(other: ())
    }
    if let object = object.asPath {
        let path = mapDBXFilePropertiesLookupErrorToDB(object: object.path)
        return DBFILEPROPERTIESPropertiesError(path: path)
    }
    if object.asUnsupportedFolder != nil {
        return DBFILEPROPERTIESPropertiesError(unsupportedFolder: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesInvalidPropertyGroupErrorToDBOptional(object: DBXFilePropertiesInvalidPropertyGroupError?)
    -> DBFILEPROPERTIESInvalidPropertyGroupError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesInvalidPropertyGroupErrorToDB(object: object)
}

func mapDBXFilePropertiesInvalidPropertyGroupErrorToDB(object: DBXFilePropertiesInvalidPropertyGroupError) -> DBFILEPROPERTIESInvalidPropertyGroupError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESInvalidPropertyGroupError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(other: ())
    }
    if let object = object.asPath {
        let path = mapDBXFilePropertiesLookupErrorToDB(object: object.path)
        return DBFILEPROPERTIESInvalidPropertyGroupError(path: path)
    }
    if object.asUnsupportedFolder != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(unsupportedFolder: ())
    }
    if object.asPropertyFieldTooLarge != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(propertyFieldTooLarge: ())
    }
    if object.asDoesNotFitTemplate != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(doesNotFitTemplate: ())
    }
    if object.asDuplicatePropertyGroups != nil {
        return DBFILEPROPERTIESInvalidPropertyGroupError(duplicatePropertyGroups: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesAddPropertiesErrorToDBOptional(object: DBXFilePropertiesAddPropertiesError?) -> DBFILEPROPERTIESAddPropertiesError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesAddPropertiesErrorToDB(object: object)
}

func mapDBXFilePropertiesAddPropertiesErrorToDB(object: DBXFilePropertiesAddPropertiesError) -> DBFILEPROPERTIESAddPropertiesError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESAddPropertiesError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESAddPropertiesError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESAddPropertiesError(other: ())
    }
    if let object = object.asPath {
        let path = mapDBXFilePropertiesLookupErrorToDB(object: object.path)
        return DBFILEPROPERTIESAddPropertiesError(path: path)
    }
    if object.asUnsupportedFolder != nil {
        return DBFILEPROPERTIESAddPropertiesError(unsupportedFolder: ())
    }
    if object.asPropertyFieldTooLarge != nil {
        return DBFILEPROPERTIESAddPropertiesError(propertyFieldTooLarge: ())
    }
    if object.asDoesNotFitTemplate != nil {
        return DBFILEPROPERTIESAddPropertiesError(doesNotFitTemplate: ())
    }
    if object.asDuplicatePropertyGroups != nil {
        return DBFILEPROPERTIESAddPropertiesError(duplicatePropertyGroups: ())
    }
    if object.asPropertyGroupAlreadyExists != nil {
        return DBFILEPROPERTIESAddPropertiesError(propertyGroupAlreadyExists: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesPropertyGroupTemplateToDBOptional(object: DBXFilePropertiesPropertyGroupTemplate?) -> DBFILEPROPERTIESPropertyGroupTemplate? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyGroupTemplateToDB(object: object)
}

func mapDBXFilePropertiesPropertyGroupTemplateToDB(object: DBXFilePropertiesPropertyGroupTemplate) -> DBFILEPROPERTIESPropertyGroupTemplate {
    DBFILEPROPERTIESPropertyGroupTemplate(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBXFilePropertiesPropertyFieldTemplateToDB(object: $0) }
    )
}

func mapDBXFilePropertiesAddTemplateArgToDBOptional(object: DBXFilePropertiesAddTemplateArg?) -> DBFILEPROPERTIESAddTemplateArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesAddTemplateArgToDB(object: object)
}

func mapDBXFilePropertiesAddTemplateArgToDB(object: DBXFilePropertiesAddTemplateArg) -> DBFILEPROPERTIESAddTemplateArg {
    DBFILEPROPERTIESAddTemplateArg(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBXFilePropertiesPropertyFieldTemplateToDB(object: $0) }
    )
}

func mapDBXFilePropertiesAddTemplateResultToDBOptional(object: DBXFilePropertiesAddTemplateResult?) -> DBFILEPROPERTIESAddTemplateResult? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesAddTemplateResultToDB(object: object)
}

func mapDBXFilePropertiesAddTemplateResultToDB(object: DBXFilePropertiesAddTemplateResult) -> DBFILEPROPERTIESAddTemplateResult {
    DBFILEPROPERTIESAddTemplateResult(templateId: object.templateId)
}

func mapDBXFilePropertiesGetTemplateArgToDBOptional(object: DBXFilePropertiesGetTemplateArg?) -> DBFILEPROPERTIESGetTemplateArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesGetTemplateArgToDB(object: object)
}

func mapDBXFilePropertiesGetTemplateArgToDB(object: DBXFilePropertiesGetTemplateArg) -> DBFILEPROPERTIESGetTemplateArg {
    DBFILEPROPERTIESGetTemplateArg(templateId: object.templateId)
}

func mapDBXFilePropertiesGetTemplateResultToDBOptional(object: DBXFilePropertiesGetTemplateResult?) -> DBFILEPROPERTIESGetTemplateResult? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesGetTemplateResultToDB(object: object)
}

func mapDBXFilePropertiesGetTemplateResultToDB(object: DBXFilePropertiesGetTemplateResult) -> DBFILEPROPERTIESGetTemplateResult {
    DBFILEPROPERTIESGetTemplateResult(
        name: object.name,
        description_: object.description_,
        fields: object.fields.compactMap { mapDBXFilePropertiesPropertyFieldTemplateToDB(object: $0) }
    )
}

func mapDBXFilePropertiesListTemplateResultToDBOptional(object: DBXFilePropertiesListTemplateResult?) -> DBFILEPROPERTIESListTemplateResult? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesListTemplateResultToDB(object: object)
}

func mapDBXFilePropertiesListTemplateResultToDB(object: DBXFilePropertiesListTemplateResult) -> DBFILEPROPERTIESListTemplateResult {
    DBFILEPROPERTIESListTemplateResult(templateIds: object.templateIds)
}

func mapDBXFilePropertiesLogicalOperatorToDBOptional(object: DBXFilePropertiesLogicalOperator?) -> DBFILEPROPERTIESLogicalOperator? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesLogicalOperatorToDB(object: object)
}

func mapDBXFilePropertiesLogicalOperatorToDB(object: DBXFilePropertiesLogicalOperator) -> DBFILEPROPERTIESLogicalOperator {
    if object.asOrOperator != nil {
        return DBFILEPROPERTIESLogicalOperator(orOperator: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESLogicalOperator(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesLookUpPropertiesErrorToDBOptional(object: DBXFilePropertiesLookUpPropertiesError?) -> DBFILEPROPERTIESLookUpPropertiesError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesLookUpPropertiesErrorToDB(object: object)
}

func mapDBXFilePropertiesLookUpPropertiesErrorToDB(object: DBXFilePropertiesLookUpPropertiesError) -> DBFILEPROPERTIESLookUpPropertiesError {
    if object.asPropertyGroupNotFound != nil {
        return DBFILEPROPERTIESLookUpPropertiesError(propertyGroupNotFound: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESLookUpPropertiesError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesLookupErrorToDBOptional(object: DBXFilePropertiesLookupError?) -> DBFILEPROPERTIESLookupError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesLookupErrorToDB(object: object)
}

func mapDBXFilePropertiesLookupErrorToDB(object: DBXFilePropertiesLookupError) -> DBFILEPROPERTIESLookupError {
    if let object = object.asMalformedPath {
        let malformedPath = object.malformedPath
        return DBFILEPROPERTIESLookupError(malformedPath: malformedPath)
    }
    if object.asNotFound != nil {
        return DBFILEPROPERTIESLookupError(notFound: ())
    }
    if object.asNotFile != nil {
        return DBFILEPROPERTIESLookupError(notFile: ())
    }
    if object.asNotFolder != nil {
        return DBFILEPROPERTIESLookupError(notFolder: ())
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESLookupError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESLookupError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesModifyTemplateErrorToDBOptional(object: DBXFilePropertiesModifyTemplateError?) -> DBFILEPROPERTIESModifyTemplateError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesModifyTemplateErrorToDB(object: object)
}

func mapDBXFilePropertiesModifyTemplateErrorToDB(object: DBXFilePropertiesModifyTemplateError) -> DBFILEPROPERTIESModifyTemplateError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESModifyTemplateError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESModifyTemplateError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESModifyTemplateError(other: ())
    }
    if object.asConflictingPropertyNames != nil {
        return DBFILEPROPERTIESModifyTemplateError(conflictingPropertyNames: ())
    }
    if object.asTooManyProperties != nil {
        return DBFILEPROPERTIESModifyTemplateError(tooManyProperties: ())
    }
    if object.asTooManyTemplates != nil {
        return DBFILEPROPERTIESModifyTemplateError(tooManyTemplates: ())
    }
    if object.asTemplateAttributeTooLarge != nil {
        return DBFILEPROPERTIESModifyTemplateError(templateAttributeTooLarge: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesOverwritePropertyGroupArgToDBOptional(object: DBXFilePropertiesOverwritePropertyGroupArg?)
    -> DBFILEPROPERTIESOverwritePropertyGroupArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesOverwritePropertyGroupArgToDB(object: object)
}

func mapDBXFilePropertiesOverwritePropertyGroupArgToDB(object: DBXFilePropertiesOverwritePropertyGroupArg) -> DBFILEPROPERTIESOverwritePropertyGroupArg {
    DBFILEPROPERTIESOverwritePropertyGroupArg(
        path: object.path,
        propertyGroups: object.propertyGroups.compactMap { mapDBXFilePropertiesPropertyGroupToDB(object: $0) }
    )
}

func mapDBXFilePropertiesPropertiesSearchArgToDBOptional(object: DBXFilePropertiesPropertiesSearchArg?) -> DBFILEPROPERTIESPropertiesSearchArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchArgToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchArgToDB(object: DBXFilePropertiesPropertiesSearchArg) -> DBFILEPROPERTIESPropertiesSearchArg {
    DBFILEPROPERTIESPropertiesSearchArg(
        queries: object.queries.compactMap { mapDBXFilePropertiesPropertiesSearchQueryToDB(object: $0) },
        templateFilter: mapDBXFilePropertiesTemplateFilterToDB(object: object.templateFilter)
    )
}

func mapDBXFilePropertiesPropertiesSearchContinueArgToDBOptional(object: DBXFilePropertiesPropertiesSearchContinueArg?)
    -> DBFILEPROPERTIESPropertiesSearchContinueArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchContinueArgToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchContinueArgToDB(object: DBXFilePropertiesPropertiesSearchContinueArg) -> DBFILEPROPERTIESPropertiesSearchContinueArg {
    DBFILEPROPERTIESPropertiesSearchContinueArg(cursor: object.cursor)
}

func mapDBXFilePropertiesPropertiesSearchContinueErrorToDBOptional(object: DBXFilePropertiesPropertiesSearchContinueError?)
    -> DBFILEPROPERTIESPropertiesSearchContinueError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchContinueErrorToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchContinueErrorToDB(object: DBXFilePropertiesPropertiesSearchContinueError)
    -> DBFILEPROPERTIESPropertiesSearchContinueError {
    if object.asReset != nil {
        return DBFILEPROPERTIESPropertiesSearchContinueError(reset: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESPropertiesSearchContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesPropertiesSearchErrorToDBOptional(object: DBXFilePropertiesPropertiesSearchError?) -> DBFILEPROPERTIESPropertiesSearchError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchErrorToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchErrorToDB(object: DBXFilePropertiesPropertiesSearchError) -> DBFILEPROPERTIESPropertiesSearchError {
    if let object = object.asPropertyGroupLookup {
        let propertyGroupLookup = mapDBXFilePropertiesLookUpPropertiesErrorToDB(object: object.propertyGroupLookup)
        return DBFILEPROPERTIESPropertiesSearchError(propertyGroupLookup: propertyGroupLookup)
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESPropertiesSearchError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesPropertiesSearchMatchToDBOptional(object: DBXFilePropertiesPropertiesSearchMatch?) -> DBFILEPROPERTIESPropertiesSearchMatch? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchMatchToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchMatchToDB(object: DBXFilePropertiesPropertiesSearchMatch) -> DBFILEPROPERTIESPropertiesSearchMatch {
    DBFILEPROPERTIESPropertiesSearchMatch(
        id_: object.id,
        path: object.path,
        isDeleted: object.isDeleted,
        propertyGroups: object.propertyGroups.compactMap { mapDBXFilePropertiesPropertyGroupToDB(object: $0) }
    )
}

func mapDBXFilePropertiesPropertiesSearchModeToDBOptional(object: DBXFilePropertiesPropertiesSearchMode?) -> DBFILEPROPERTIESPropertiesSearchMode? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchModeToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchModeToDB(object: DBXFilePropertiesPropertiesSearchMode) -> DBFILEPROPERTIESPropertiesSearchMode {
    if let object = object.asFieldName {
        let fieldName = object.fieldName
        return DBFILEPROPERTIESPropertiesSearchMode(fieldName: fieldName)
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESPropertiesSearchMode(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesPropertiesSearchQueryToDBOptional(object: DBXFilePropertiesPropertiesSearchQuery?) -> DBFILEPROPERTIESPropertiesSearchQuery? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchQueryToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchQueryToDB(object: DBXFilePropertiesPropertiesSearchQuery) -> DBFILEPROPERTIESPropertiesSearchQuery {
    DBFILEPROPERTIESPropertiesSearchQuery(
        query: object.query,
        mode: mapDBXFilePropertiesPropertiesSearchModeToDB(object: object.mode),
        logicalOperator: mapDBXFilePropertiesLogicalOperatorToDB(object: object.logicalOperator)
    )
}

func mapDBXFilePropertiesPropertiesSearchResultToDBOptional(object: DBXFilePropertiesPropertiesSearchResult?) -> DBFILEPROPERTIESPropertiesSearchResult? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertiesSearchResultToDB(object: object)
}

func mapDBXFilePropertiesPropertiesSearchResultToDB(object: DBXFilePropertiesPropertiesSearchResult) -> DBFILEPROPERTIESPropertiesSearchResult {
    DBFILEPROPERTIESPropertiesSearchResult(
        matches: object.matches.compactMap { mapDBXFilePropertiesPropertiesSearchMatchToDB(object: $0) },
        cursor: object.cursor
    )
}

func mapDBXFilePropertiesPropertyFieldToDBOptional(object: DBXFilePropertiesPropertyField?) -> DBFILEPROPERTIESPropertyField? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyFieldToDB(object: object)
}

func mapDBXFilePropertiesPropertyFieldToDB(object: DBXFilePropertiesPropertyField) -> DBFILEPROPERTIESPropertyField {
    DBFILEPROPERTIESPropertyField(name: object.name, value: object.value)
}

func mapDBXFilePropertiesPropertyFieldTemplateToDBOptional(object: DBXFilePropertiesPropertyFieldTemplate?) -> DBFILEPROPERTIESPropertyFieldTemplate? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyFieldTemplateToDB(object: object)
}

func mapDBXFilePropertiesPropertyFieldTemplateToDB(object: DBXFilePropertiesPropertyFieldTemplate) -> DBFILEPROPERTIESPropertyFieldTemplate {
    DBFILEPROPERTIESPropertyFieldTemplate(name: object.name, description_: object.description_, type: mapDBXFilePropertiesPropertyTypeToDB(object: object.type))
}

func mapDBXFilePropertiesPropertyGroupToDBOptional(object: DBXFilePropertiesPropertyGroup?) -> DBFILEPROPERTIESPropertyGroup? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyGroupToDB(object: object)
}

func mapDBXFilePropertiesPropertyGroupToDB(object: DBXFilePropertiesPropertyGroup) -> DBFILEPROPERTIESPropertyGroup {
    DBFILEPROPERTIESPropertyGroup(templateId: object.templateId, fields: object.fields.compactMap { mapDBXFilePropertiesPropertyFieldToDB(object: $0) })
}

func mapDBXFilePropertiesPropertyGroupUpdateToDBOptional(object: DBXFilePropertiesPropertyGroupUpdate?) -> DBFILEPROPERTIESPropertyGroupUpdate? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyGroupUpdateToDB(object: object)
}

func mapDBXFilePropertiesPropertyGroupUpdateToDB(object: DBXFilePropertiesPropertyGroupUpdate) -> DBFILEPROPERTIESPropertyGroupUpdate {
    DBFILEPROPERTIESPropertyGroupUpdate(
        templateId: object.templateId,
        addOrUpdateFields: object.addOrUpdateFields?.compactMap { mapDBXFilePropertiesPropertyFieldToDB(object: $0) },
        removeFields: object.removeFields
    )
}

func mapDBXFilePropertiesPropertyTypeToDBOptional(object: DBXFilePropertiesPropertyType?) -> DBFILEPROPERTIESPropertyType? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesPropertyTypeToDB(object: object)
}

func mapDBXFilePropertiesPropertyTypeToDB(object: DBXFilePropertiesPropertyType) -> DBFILEPROPERTIESPropertyType {
    if object.asString_ != nil {
        return DBFILEPROPERTIESPropertyType(string: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESPropertyType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesRemovePropertiesArgToDBOptional(object: DBXFilePropertiesRemovePropertiesArg?) -> DBFILEPROPERTIESRemovePropertiesArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesRemovePropertiesArgToDB(object: object)
}

func mapDBXFilePropertiesRemovePropertiesArgToDB(object: DBXFilePropertiesRemovePropertiesArg) -> DBFILEPROPERTIESRemovePropertiesArg {
    DBFILEPROPERTIESRemovePropertiesArg(path: object.path, propertyTemplateIds: object.propertyTemplateIds)
}

func mapDBXFilePropertiesRemovePropertiesErrorToDBOptional(object: DBXFilePropertiesRemovePropertiesError?) -> DBFILEPROPERTIESRemovePropertiesError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesRemovePropertiesErrorToDB(object: object)
}

func mapDBXFilePropertiesRemovePropertiesErrorToDB(object: DBXFilePropertiesRemovePropertiesError) -> DBFILEPROPERTIESRemovePropertiesError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESRemovePropertiesError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESRemovePropertiesError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESRemovePropertiesError(other: ())
    }
    if let object = object.asPath {
        let path = mapDBXFilePropertiesLookupErrorToDB(object: object.path)
        return DBFILEPROPERTIESRemovePropertiesError(path: path)
    }
    if object.asUnsupportedFolder != nil {
        return DBFILEPROPERTIESRemovePropertiesError(unsupportedFolder: ())
    }
    if let object = object.asPropertyGroupLookup {
        let propertyGroupLookup = mapDBXFilePropertiesLookUpPropertiesErrorToDB(object: object.propertyGroupLookup)
        return DBFILEPROPERTIESRemovePropertiesError(propertyGroupLookup: propertyGroupLookup)
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesRemoveTemplateArgToDBOptional(object: DBXFilePropertiesRemoveTemplateArg?) -> DBFILEPROPERTIESRemoveTemplateArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesRemoveTemplateArgToDB(object: object)
}

func mapDBXFilePropertiesRemoveTemplateArgToDB(object: DBXFilePropertiesRemoveTemplateArg) -> DBFILEPROPERTIESRemoveTemplateArg {
    DBFILEPROPERTIESRemoveTemplateArg(templateId: object.templateId)
}

func mapDBXFilePropertiesTemplateFilterBaseToDBOptional(object: DBXFilePropertiesTemplateFilterBase?) -> DBFILEPROPERTIESTemplateFilterBase? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesTemplateFilterBaseToDB(object: object)
}

func mapDBXFilePropertiesTemplateFilterBaseToDB(object: DBXFilePropertiesTemplateFilterBase) -> DBFILEPROPERTIESTemplateFilterBase {
    if let object = object.asFilterSome {
        let filterSome = object.filterSome
        return DBFILEPROPERTIESTemplateFilterBase(filterSome: filterSome)
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESTemplateFilterBase(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesTemplateFilterToDBOptional(object: DBXFilePropertiesTemplateFilter?) -> DBFILEPROPERTIESTemplateFilter? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesTemplateFilterToDB(object: object)
}

func mapDBXFilePropertiesTemplateFilterToDB(object: DBXFilePropertiesTemplateFilter) -> DBFILEPROPERTIESTemplateFilter {
    if let object = object.asFilterSome {
        let filterSome = object.filterSome
        return DBFILEPROPERTIESTemplateFilter(filterSome: filterSome)
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESTemplateFilter(other: ())
    }
    if object.asFilterNone != nil {
        return DBFILEPROPERTIESTemplateFilter(filterNone: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesTemplateOwnerTypeToDBOptional(object: DBXFilePropertiesTemplateOwnerType?) -> DBFILEPROPERTIESTemplateOwnerType? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesTemplateOwnerTypeToDB(object: object)
}

func mapDBXFilePropertiesTemplateOwnerTypeToDB(object: DBXFilePropertiesTemplateOwnerType) -> DBFILEPROPERTIESTemplateOwnerType {
    if object.asUser != nil {
        return DBFILEPROPERTIESTemplateOwnerType(user: ())
    }
    if object.asTeam != nil {
        return DBFILEPROPERTIESTemplateOwnerType(team: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESTemplateOwnerType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesUpdatePropertiesArgToDBOptional(object: DBXFilePropertiesUpdatePropertiesArg?) -> DBFILEPROPERTIESUpdatePropertiesArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesUpdatePropertiesArgToDB(object: object)
}

func mapDBXFilePropertiesUpdatePropertiesArgToDB(object: DBXFilePropertiesUpdatePropertiesArg) -> DBFILEPROPERTIESUpdatePropertiesArg {
    DBFILEPROPERTIESUpdatePropertiesArg(
        path: object.path,
        updatePropertyGroups: object.updatePropertyGroups.compactMap { mapDBXFilePropertiesPropertyGroupUpdateToDB(object: $0) }
    )
}

func mapDBXFilePropertiesUpdatePropertiesErrorToDBOptional(object: DBXFilePropertiesUpdatePropertiesError?) -> DBFILEPROPERTIESUpdatePropertiesError? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesUpdatePropertiesErrorToDB(object: object)
}

func mapDBXFilePropertiesUpdatePropertiesErrorToDB(object: DBXFilePropertiesUpdatePropertiesError) -> DBFILEPROPERTIESUpdatePropertiesError {
    if let object = object.asTemplateNotFound {
        let templateNotFound = object.templateNotFound
        return DBFILEPROPERTIESUpdatePropertiesError(templateNotFound: templateNotFound)
    }
    if object.asRestrictedContent != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(restrictedContent: ())
    }
    if object.asOther != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(other: ())
    }
    if let object = object.asPath {
        let path = mapDBXFilePropertiesLookupErrorToDB(object: object.path)
        return DBFILEPROPERTIESUpdatePropertiesError(path: path)
    }
    if object.asUnsupportedFolder != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(unsupportedFolder: ())
    }
    if object.asPropertyFieldTooLarge != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(propertyFieldTooLarge: ())
    }
    if object.asDoesNotFitTemplate != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(doesNotFitTemplate: ())
    }
    if object.asDuplicatePropertyGroups != nil {
        return DBFILEPROPERTIESUpdatePropertiesError(duplicatePropertyGroups: ())
    }
    if let object = object.asPropertyGroupLookup {
        let propertyGroupLookup = mapDBXFilePropertiesLookUpPropertiesErrorToDB(object: object.propertyGroupLookup)
        return DBFILEPROPERTIESUpdatePropertiesError(propertyGroupLookup: propertyGroupLookup)
    }
    fatalError("codegen error")
}

func mapDBXFilePropertiesUpdateTemplateArgToDBOptional(object: DBXFilePropertiesUpdateTemplateArg?) -> DBFILEPROPERTIESUpdateTemplateArg? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesUpdateTemplateArgToDB(object: object)
}

func mapDBXFilePropertiesUpdateTemplateArgToDB(object: DBXFilePropertiesUpdateTemplateArg) -> DBFILEPROPERTIESUpdateTemplateArg {
    DBFILEPROPERTIESUpdateTemplateArg(
        templateId: object.templateId,
        name: object.name,
        description_: object.description_,
        addFields: object.addFields?.compactMap { mapDBXFilePropertiesPropertyFieldTemplateToDB(object: $0) }
    )
}

func mapDBXFilePropertiesUpdateTemplateResultToDBOptional(object: DBXFilePropertiesUpdateTemplateResult?) -> DBFILEPROPERTIESUpdateTemplateResult? {
    guard let object = object else { return nil }
    return mapDBXFilePropertiesUpdateTemplateResultToDB(object: object)
}

func mapDBXFilePropertiesUpdateTemplateResultToDB(object: DBXFilePropertiesUpdateTemplateResult) -> DBFILEPROPERTIESUpdateTemplateResult {
    DBFILEPROPERTIESUpdateTemplateResult(templateId: object.templateId)
}
