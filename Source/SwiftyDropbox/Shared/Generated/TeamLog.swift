///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the team_log namespace
open class TeamLog {
    /// Indicates the method in which the action was performed.
    public enum AccessMethodLogInfo: CustomStringConvertible {
        /// Admin console session details.
        case adminConsole(TeamLog.WebSessionLogInfo)
        /// Api session details.
        case api(TeamLog.ApiSessionLogInfo)
        /// Content manager session details.
        case contentManager(TeamLog.WebSessionLogInfo)
        /// End user session details.
        case endUser(TeamLog.SessionLogInfo)
        /// Enterprise console session details.
        case enterpriseConsole(TeamLog.WebSessionLogInfo)
        /// Sign in as session details.
        case signInAs(TeamLog.WebSessionLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccessMethodLogInfoSerializer().serialize(self)))"
        }
    }
    open class AccessMethodLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccessMethodLogInfo) -> JSON {
            switch value {
                case .adminConsole(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("admin_console")
                    return .dictionary(d)
                case .api(let arg):
                    var d = Serialization.getFields(TeamLog.ApiSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("api")
                    return .dictionary(d)
                case .contentManager(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("content_manager")
                    return .dictionary(d)
                case .endUser(let arg):
                    var d = ["end_user": TeamLog.SessionLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("end_user")
                    return .dictionary(d)
                case .enterpriseConsole(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("enterprise_console")
                    return .dictionary(d)
                case .signInAs(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccessMethodLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin_console":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.adminConsole(v)
                        case "api":
                            let v = TeamLog.ApiSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.api(v)
                        case "content_manager":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.contentManager(v)
                        case "end_user":
                            let v = TeamLog.SessionLogInfoSerializer().deserialize(d["end_user"] ?? .null)
                            return AccessMethodLogInfo.endUser(v)
                        case "enterprise_console":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.enterpriseConsole(v)
                        case "sign_in_as":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.signInAs(v)
                        case "other":
                            return AccessMethodLogInfo.other
                        default:
                            return AccessMethodLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AccountCaptureAvailability union
    public enum AccountCaptureAvailability: CustomStringConvertible {
        /// An unspecified error.
        case available
        /// An unspecified error.
        case unavailable
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureAvailabilitySerializer().serialize(self)))"
        }
    }
    open class AccountCaptureAvailabilitySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureAvailability) -> JSON {
            switch value {
                case .available:
                    var d = [String: JSON]()
                    d[".tag"] = .str("available")
                    return .dictionary(d)
                case .unavailable:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unavailable")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountCaptureAvailability {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "available":
                            return AccountCaptureAvailability.available
                        case "unavailable":
                            return AccountCaptureAvailability.unavailable
                        case "other":
                            return AccountCaptureAvailability.other
                        default:
                            return AccountCaptureAvailability.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Granted/revoked option to enable account capture on team domains.
    open class AccountCaptureChangeAvailabilityDetails: CustomStringConvertible {
        /// New account capture availabilty value.
        public let newValue: TeamLog.AccountCaptureAvailability
        /// Previous account capture availabilty value. Might be missing due to historical data gap.
        public let previousValue: TeamLog.AccountCaptureAvailability?
        public init(newValue: TeamLog.AccountCaptureAvailability, previousValue: TeamLog.AccountCaptureAvailability? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangeAvailabilityDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangeAvailabilityDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangeAvailabilityDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.AccountCaptureAvailabilitySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AccountCaptureAvailabilitySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangeAvailabilityDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.AccountCaptureAvailabilitySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AccountCaptureAvailabilitySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return AccountCaptureChangeAvailabilityDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureChangeAvailabilityType struct
    open class AccountCaptureChangeAvailabilityType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangeAvailabilityTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangeAvailabilityTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangeAvailabilityType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangeAvailabilityType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountCaptureChangeAvailabilityType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed account capture setting on team domain.
    open class AccountCaptureChangePolicyDetails: CustomStringConvertible {
        /// New account capture policy.
        public let newValue: TeamLog.AccountCapturePolicy
        /// Previous account capture policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.AccountCapturePolicy?
        public init(newValue: TeamLog.AccountCapturePolicy, previousValue: TeamLog.AccountCapturePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.AccountCapturePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AccountCapturePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.AccountCapturePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AccountCapturePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return AccountCaptureChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureChangePolicyType struct
    open class AccountCaptureChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountCaptureChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Account-captured user migrated account to team.
    open class AccountCaptureMigrateAccountDetails: CustomStringConvertible {
        /// Domain name.
        public let domainName: String
        public init(domainName: String) {
            stringValidator()(domainName)
            self.domainName = domainName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureMigrateAccountDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureMigrateAccountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureMigrateAccountDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureMigrateAccountDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    return AccountCaptureMigrateAccountDetails(domainName: domainName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureMigrateAccountType struct
    open class AccountCaptureMigrateAccountType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureMigrateAccountTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureMigrateAccountTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureMigrateAccountType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureMigrateAccountType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountCaptureMigrateAccountType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent account capture email to all unmanaged members.
    open class AccountCaptureNotificationEmailsSentDetails: CustomStringConvertible {
        /// Domain name.
        public let domainName: String
        /// Account-capture email notification type.
        public let notificationType: TeamLog.AccountCaptureNotificationType?
        public init(domainName: String, notificationType: TeamLog.AccountCaptureNotificationType? = nil) {
            stringValidator()(domainName)
            self.domainName = domainName
            self.notificationType = notificationType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureNotificationEmailsSentDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureNotificationEmailsSentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureNotificationEmailsSentDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            "notification_type": NullableSerializer(TeamLog.AccountCaptureNotificationTypeSerializer()).serialize(value.notificationType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureNotificationEmailsSentDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    let notificationType = NullableSerializer(TeamLog.AccountCaptureNotificationTypeSerializer()).deserialize(dict["notification_type"] ?? .null)
                    return AccountCaptureNotificationEmailsSentDetails(domainName: domainName, notificationType: notificationType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureNotificationEmailsSentType struct
    open class AccountCaptureNotificationEmailsSentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureNotificationEmailsSentTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureNotificationEmailsSentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureNotificationEmailsSentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureNotificationEmailsSentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountCaptureNotificationEmailsSentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureNotificationType union
    public enum AccountCaptureNotificationType: CustomStringConvertible {
        /// An unspecified error.
        case actionableNotification
        /// An unspecified error.
        case proactiveWarningNotification
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureNotificationTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureNotificationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureNotificationType) -> JSON {
            switch value {
                case .actionableNotification:
                    var d = [String: JSON]()
                    d[".tag"] = .str("actionable_notification")
                    return .dictionary(d)
                case .proactiveWarningNotification:
                    var d = [String: JSON]()
                    d[".tag"] = .str("proactive_warning_notification")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountCaptureNotificationType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "actionable_notification":
                            return AccountCaptureNotificationType.actionableNotification
                        case "proactive_warning_notification":
                            return AccountCaptureNotificationType.proactiveWarningNotification
                        case "other":
                            return AccountCaptureNotificationType.other
                        default:
                            return AccountCaptureNotificationType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AccountCapturePolicy union
    public enum AccountCapturePolicy: CustomStringConvertible {
        /// An unspecified error.
        case allUsers
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case invitedUsers
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCapturePolicySerializer().serialize(self)))"
        }
    }
    open class AccountCapturePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCapturePolicy) -> JSON {
            switch value {
                case .allUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("all_users")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .invitedUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited_users")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountCapturePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "all_users":
                            return AccountCapturePolicy.allUsers
                        case "disabled":
                            return AccountCapturePolicy.disabled
                        case "invited_users":
                            return AccountCapturePolicy.invitedUsers
                        case "other":
                            return AccountCapturePolicy.other
                        default:
                            return AccountCapturePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Account-captured user changed account email to personal email.
    open class AccountCaptureRelinquishAccountDetails: CustomStringConvertible {
        /// Domain name.
        public let domainName: String
        public init(domainName: String) {
            stringValidator()(domainName)
            self.domainName = domainName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureRelinquishAccountDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureRelinquishAccountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureRelinquishAccountDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureRelinquishAccountDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    return AccountCaptureRelinquishAccountDetails(domainName: domainName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCaptureRelinquishAccountType struct
    open class AccountCaptureRelinquishAccountType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureRelinquishAccountTypeSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureRelinquishAccountTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureRelinquishAccountType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureRelinquishAccountType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountCaptureRelinquishAccountType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unlocked/locked account after failed sign in attempts.
    open class AccountLockOrUnlockedDetails: CustomStringConvertible {
        /// The previous account status.
        public let previousValue: TeamLog.AccountState
        /// The new account status.
        public let newValue: TeamLog.AccountState
        public init(previousValue: TeamLog.AccountState, newValue: TeamLog.AccountState) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountLockOrUnlockedDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountLockOrUnlockedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountLockOrUnlockedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.AccountStateSerializer().serialize(value.previousValue),
            "new_value": TeamLog.AccountStateSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountLockOrUnlockedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.AccountStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.AccountStateSerializer().deserialize(dict["new_value"] ?? .null)
                    return AccountLockOrUnlockedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountLockOrUnlockedType struct
    open class AccountLockOrUnlockedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountLockOrUnlockedTypeSerializer().serialize(self)))"
        }
    }
    open class AccountLockOrUnlockedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountLockOrUnlockedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountLockOrUnlockedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AccountLockOrUnlockedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountState union
    public enum AccountState: CustomStringConvertible {
        /// An unspecified error.
        case locked
        /// An unspecified error.
        case unlocked
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountStateSerializer().serialize(self)))"
        }
    }
    open class AccountStateSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountState) -> JSON {
            switch value {
                case .locked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("locked")
                    return .dictionary(d)
                case .unlocked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlocked")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountState {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "locked":
                            return AccountState.locked
                        case "unlocked":
                            return AccountState.unlocked
                        case "other":
                            return AccountState.other
                        default:
                            return AccountState.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Additional information indicating the action taken that caused status change.
    public enum ActionDetails: CustomStringConvertible {
        /// Define how the user was removed from the team.
        case removeAction(TeamLog.MemberRemoveActionType)
        /// Additional information relevant when someone is invited to the team.
        case teamInviteDetails(TeamLog.TeamInviteDetails)
        /// Additional information relevant when a new member joins the team.
        case teamJoinDetails(TeamLog.JoinTeamDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ActionDetailsSerializer().serialize(self)))"
        }
    }
    open class ActionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ActionDetails) -> JSON {
            switch value {
                case .removeAction(let arg):
                    var d = ["remove_action": TeamLog.MemberRemoveActionTypeSerializer().serialize(arg)]
                    d[".tag"] = .str("remove_action")
                    return .dictionary(d)
                case .teamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_invite_details")
                    return .dictionary(d)
                case .teamJoinDetails(let arg):
                    var d = Serialization.getFields(TeamLog.JoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_join_details")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ActionDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "remove_action":
                            let v = TeamLog.MemberRemoveActionTypeSerializer().deserialize(d["remove_action"] ?? .null)
                            return ActionDetails.removeAction(v)
                        case "team_invite_details":
                            let v = TeamLog.TeamInviteDetailsSerializer().deserialize(json)
                            return ActionDetails.teamInviteDetails(v)
                        case "team_join_details":
                            let v = TeamLog.JoinTeamDetailsSerializer().deserialize(json)
                            return ActionDetails.teamJoinDetails(v)
                        case "other":
                            return ActionDetails.other
                        default:
                            return ActionDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The entity who performed the action.
    public enum ActorLogInfo: CustomStringConvertible {
        /// The admin who did the action.
        case admin(TeamLog.UserLogInfo)
        /// Anonymous actor.
        case anonymous
        /// The application who did the action.
        case app(TeamLog.AppLogInfo)
        /// Action done by Dropbox.
        case dropbox
        /// Action done by reseller.
        case reseller(TeamLog.ResellerLogInfo)
        /// The user who did the action.
        case user(TeamLog.UserLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ActorLogInfoSerializer().serialize(self)))"
        }
    }
    open class ActorLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ActorLogInfo) -> JSON {
            switch value {
                case .admin(let arg):
                    var d = ["admin": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("admin")
                    return .dictionary(d)
                case .anonymous:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anonymous")
                    return .dictionary(d)
                case .app(let arg):
                    var d = ["app": TeamLog.AppLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("app")
                    return .dictionary(d)
                case .dropbox:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dropbox")
                    return .dictionary(d)
                case .reseller(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("reseller")
                    return .dictionary(d)
                case .user(let arg):
                    var d = ["user": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("user")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ActorLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["admin"] ?? .null)
                            return ActorLogInfo.admin(v)
                        case "anonymous":
                            return ActorLogInfo.anonymous
                        case "app":
                            let v = TeamLog.AppLogInfoSerializer().deserialize(d["app"] ?? .null)
                            return ActorLogInfo.app(v)
                        case "dropbox":
                            return ActorLogInfo.dropbox
                        case "reseller":
                            let v = TeamLog.ResellerLogInfoSerializer().deserialize(json)
                            return ActorLogInfo.reseller(v)
                        case "user":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["user"] ?? .null)
                            return ActorLogInfo.user(v)
                        case "other":
                            return ActorLogInfo.other
                        default:
                            return ActorLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Alert category
    public enum AdminAlertCategoryEnum: CustomStringConvertible {
        /// An unspecified error.
        case accountTakeover
        /// An unspecified error.
        case dataLossProtection
        /// An unspecified error.
        case informationGovernance
        /// An unspecified error.
        case malwareSharing
        /// An unspecified error.
        case massiveFileOperation
        /// An unspecified error.
        case na
        /// An unspecified error.
        case threatManagement
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertCategoryEnumSerializer().serialize(self)))"
        }
    }
    open class AdminAlertCategoryEnumSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertCategoryEnum) -> JSON {
            switch value {
                case .accountTakeover:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_takeover")
                    return .dictionary(d)
                case .dataLossProtection:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_loss_protection")
                    return .dictionary(d)
                case .informationGovernance:
                    var d = [String: JSON]()
                    d[".tag"] = .str("information_governance")
                    return .dictionary(d)
                case .malwareSharing:
                    var d = [String: JSON]()
                    d[".tag"] = .str("malware_sharing")
                    return .dictionary(d)
                case .massiveFileOperation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("massive_file_operation")
                    return .dictionary(d)
                case .na:
                    var d = [String: JSON]()
                    d[".tag"] = .str("na")
                    return .dictionary(d)
                case .threatManagement:
                    var d = [String: JSON]()
                    d[".tag"] = .str("threat_management")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminAlertCategoryEnum {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "account_takeover":
                            return AdminAlertCategoryEnum.accountTakeover
                        case "data_loss_protection":
                            return AdminAlertCategoryEnum.dataLossProtection
                        case "information_governance":
                            return AdminAlertCategoryEnum.informationGovernance
                        case "malware_sharing":
                            return AdminAlertCategoryEnum.malwareSharing
                        case "massive_file_operation":
                            return AdminAlertCategoryEnum.massiveFileOperation
                        case "na":
                            return AdminAlertCategoryEnum.na
                        case "threat_management":
                            return AdminAlertCategoryEnum.threatManagement
                        case "other":
                            return AdminAlertCategoryEnum.other
                        default:
                            return AdminAlertCategoryEnum.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Alert state
    public enum AdminAlertGeneralStateEnum: CustomStringConvertible {
        /// An unspecified error.
        case active
        /// An unspecified error.
        case dismissed
        /// An unspecified error.
        case inProgress
        /// An unspecified error.
        case na
        /// An unspecified error.
        case resolved
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertGeneralStateEnumSerializer().serialize(self)))"
        }
    }
    open class AdminAlertGeneralStateEnumSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertGeneralStateEnum) -> JSON {
            switch value {
                case .active:
                    var d = [String: JSON]()
                    d[".tag"] = .str("active")
                    return .dictionary(d)
                case .dismissed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dismissed")
                    return .dictionary(d)
                case .inProgress:
                    var d = [String: JSON]()
                    d[".tag"] = .str("in_progress")
                    return .dictionary(d)
                case .na:
                    var d = [String: JSON]()
                    d[".tag"] = .str("na")
                    return .dictionary(d)
                case .resolved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("resolved")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminAlertGeneralStateEnum {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "active":
                            return AdminAlertGeneralStateEnum.active
                        case "dismissed":
                            return AdminAlertGeneralStateEnum.dismissed
                        case "in_progress":
                            return AdminAlertGeneralStateEnum.inProgress
                        case "na":
                            return AdminAlertGeneralStateEnum.na
                        case "resolved":
                            return AdminAlertGeneralStateEnum.resolved
                        case "other":
                            return AdminAlertGeneralStateEnum.other
                        default:
                            return AdminAlertGeneralStateEnum.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Alert severity
    public enum AdminAlertSeverityEnum: CustomStringConvertible {
        /// An unspecified error.
        case high
        /// An unspecified error.
        case info
        /// An unspecified error.
        case low
        /// An unspecified error.
        case medium
        /// An unspecified error.
        case na
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertSeverityEnumSerializer().serialize(self)))"
        }
    }
    open class AdminAlertSeverityEnumSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertSeverityEnum) -> JSON {
            switch value {
                case .high:
                    var d = [String: JSON]()
                    d[".tag"] = .str("high")
                    return .dictionary(d)
                case .info:
                    var d = [String: JSON]()
                    d[".tag"] = .str("info")
                    return .dictionary(d)
                case .low:
                    var d = [String: JSON]()
                    d[".tag"] = .str("low")
                    return .dictionary(d)
                case .medium:
                    var d = [String: JSON]()
                    d[".tag"] = .str("medium")
                    return .dictionary(d)
                case .na:
                    var d = [String: JSON]()
                    d[".tag"] = .str("na")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminAlertSeverityEnum {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "high":
                            return AdminAlertSeverityEnum.high
                        case "info":
                            return AdminAlertSeverityEnum.info
                        case "low":
                            return AdminAlertSeverityEnum.low
                        case "medium":
                            return AdminAlertSeverityEnum.medium
                        case "na":
                            return AdminAlertSeverityEnum.na
                        case "other":
                            return AdminAlertSeverityEnum.other
                        default:
                            return AdminAlertSeverityEnum.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Alert configurations
    open class AdminAlertingAlertConfiguration: CustomStringConvertible {
        /// Alert state.
        public let alertState: TeamLog.AdminAlertingAlertStatePolicy?
        /// Sensitivity level.
        public let sensitivityLevel: TeamLog.AdminAlertingAlertSensitivity?
        /// Recipient settings.
        public let recipientsSettings: TeamLog.RecipientsConfiguration?
        /// Text.
        public let text: String?
        /// Excluded file extensions.
        public let excludedFileExtensions: String?
        public init(alertState: TeamLog.AdminAlertingAlertStatePolicy? = nil, sensitivityLevel: TeamLog.AdminAlertingAlertSensitivity? = nil, recipientsSettings: TeamLog.RecipientsConfiguration? = nil, text: String? = nil, excludedFileExtensions: String? = nil) {
            self.alertState = alertState
            self.sensitivityLevel = sensitivityLevel
            self.recipientsSettings = recipientsSettings
            nullableValidator(stringValidator())(text)
            self.text = text
            nullableValidator(stringValidator())(excludedFileExtensions)
            self.excludedFileExtensions = excludedFileExtensions
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingAlertConfigurationSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingAlertConfigurationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingAlertConfiguration) -> JSON {
            let output = [ 
            "alert_state": NullableSerializer(TeamLog.AdminAlertingAlertStatePolicySerializer()).serialize(value.alertState),
            "sensitivity_level": NullableSerializer(TeamLog.AdminAlertingAlertSensitivitySerializer()).serialize(value.sensitivityLevel),
            "recipients_settings": NullableSerializer(TeamLog.RecipientsConfigurationSerializer()).serialize(value.recipientsSettings),
            "text": NullableSerializer(Serialization._StringSerializer).serialize(value.text),
            "excluded_file_extensions": NullableSerializer(Serialization._StringSerializer).serialize(value.excludedFileExtensions),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingAlertConfiguration {
            switch json {
                case .dictionary(let dict):
                    let alertState = NullableSerializer(TeamLog.AdminAlertingAlertStatePolicySerializer()).deserialize(dict["alert_state"] ?? .null)
                    let sensitivityLevel = NullableSerializer(TeamLog.AdminAlertingAlertSensitivitySerializer()).deserialize(dict["sensitivity_level"] ?? .null)
                    let recipientsSettings = NullableSerializer(TeamLog.RecipientsConfigurationSerializer()).deserialize(dict["recipients_settings"] ?? .null)
                    let text = NullableSerializer(Serialization._StringSerializer).deserialize(dict["text"] ?? .null)
                    let excludedFileExtensions = NullableSerializer(Serialization._StringSerializer).deserialize(dict["excluded_file_extensions"] ?? .null)
                    return AdminAlertingAlertConfiguration(alertState: alertState, sensitivityLevel: sensitivityLevel, recipientsSettings: recipientsSettings, text: text, excludedFileExtensions: excludedFileExtensions)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Alert sensitivity
    public enum AdminAlertingAlertSensitivity: CustomStringConvertible {
        /// An unspecified error.
        case high
        /// An unspecified error.
        case highest
        /// An unspecified error.
        case invalid
        /// An unspecified error.
        case low
        /// An unspecified error.
        case lowest
        /// An unspecified error.
        case medium
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingAlertSensitivitySerializer().serialize(self)))"
        }
    }
    open class AdminAlertingAlertSensitivitySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingAlertSensitivity) -> JSON {
            switch value {
                case .high:
                    var d = [String: JSON]()
                    d[".tag"] = .str("high")
                    return .dictionary(d)
                case .highest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("highest")
                    return .dictionary(d)
                case .invalid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invalid")
                    return .dictionary(d)
                case .low:
                    var d = [String: JSON]()
                    d[".tag"] = .str("low")
                    return .dictionary(d)
                case .lowest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("lowest")
                    return .dictionary(d)
                case .medium:
                    var d = [String: JSON]()
                    d[".tag"] = .str("medium")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminAlertingAlertSensitivity {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "high":
                            return AdminAlertingAlertSensitivity.high
                        case "highest":
                            return AdminAlertingAlertSensitivity.highest
                        case "invalid":
                            return AdminAlertingAlertSensitivity.invalid
                        case "low":
                            return AdminAlertingAlertSensitivity.low
                        case "lowest":
                            return AdminAlertingAlertSensitivity.lowest
                        case "medium":
                            return AdminAlertingAlertSensitivity.medium
                        case "other":
                            return AdminAlertingAlertSensitivity.other
                        default:
                            return AdminAlertingAlertSensitivity.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed an alert state.
    open class AdminAlertingAlertStateChangedDetails: CustomStringConvertible {
        /// Alert name.
        public let alertName: String
        /// Alert severity.
        public let alertSeverity: TeamLog.AdminAlertSeverityEnum
        /// Alert category.
        public let alertCategory: TeamLog.AdminAlertCategoryEnum
        /// Alert ID.
        public let alertInstanceId: String
        /// Alert state before the change.
        public let previousValue: TeamLog.AdminAlertGeneralStateEnum
        /// Alert state after the change.
        public let newValue: TeamLog.AdminAlertGeneralStateEnum
        public init(alertName: String, alertSeverity: TeamLog.AdminAlertSeverityEnum, alertCategory: TeamLog.AdminAlertCategoryEnum, alertInstanceId: String, previousValue: TeamLog.AdminAlertGeneralStateEnum, newValue: TeamLog.AdminAlertGeneralStateEnum) {
            stringValidator()(alertName)
            self.alertName = alertName
            self.alertSeverity = alertSeverity
            self.alertCategory = alertCategory
            stringValidator()(alertInstanceId)
            self.alertInstanceId = alertInstanceId
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingAlertStateChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingAlertStateChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingAlertStateChangedDetails) -> JSON {
            let output = [ 
            "alert_name": Serialization._StringSerializer.serialize(value.alertName),
            "alert_severity": TeamLog.AdminAlertSeverityEnumSerializer().serialize(value.alertSeverity),
            "alert_category": TeamLog.AdminAlertCategoryEnumSerializer().serialize(value.alertCategory),
            "alert_instance_id": Serialization._StringSerializer.serialize(value.alertInstanceId),
            "previous_value": TeamLog.AdminAlertGeneralStateEnumSerializer().serialize(value.previousValue),
            "new_value": TeamLog.AdminAlertGeneralStateEnumSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingAlertStateChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let alertName = Serialization._StringSerializer.deserialize(dict["alert_name"] ?? .null)
                    let alertSeverity = TeamLog.AdminAlertSeverityEnumSerializer().deserialize(dict["alert_severity"] ?? .null)
                    let alertCategory = TeamLog.AdminAlertCategoryEnumSerializer().deserialize(dict["alert_category"] ?? .null)
                    let alertInstanceId = Serialization._StringSerializer.deserialize(dict["alert_instance_id"] ?? .null)
                    let previousValue = TeamLog.AdminAlertGeneralStateEnumSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.AdminAlertGeneralStateEnumSerializer().deserialize(dict["new_value"] ?? .null)
                    return AdminAlertingAlertStateChangedDetails(alertName: alertName, alertSeverity: alertSeverity, alertCategory: alertCategory, alertInstanceId: alertInstanceId, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AdminAlertingAlertStateChangedType struct
    open class AdminAlertingAlertStateChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingAlertStateChangedTypeSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingAlertStateChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingAlertStateChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingAlertStateChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AdminAlertingAlertStateChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether an alert can be triggered or not
    public enum AdminAlertingAlertStatePolicy: CustomStringConvertible {
        /// An unspecified error.
        case off
        /// An unspecified error.
        case on
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingAlertStatePolicySerializer().serialize(self)))"
        }
    }
    open class AdminAlertingAlertStatePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingAlertStatePolicy) -> JSON {
            switch value {
                case .off:
                    var d = [String: JSON]()
                    d[".tag"] = .str("off")
                    return .dictionary(d)
                case .on:
                    var d = [String: JSON]()
                    d[".tag"] = .str("on")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminAlertingAlertStatePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "off":
                            return AdminAlertingAlertStatePolicy.off
                        case "on":
                            return AdminAlertingAlertStatePolicy.on
                        case "other":
                            return AdminAlertingAlertStatePolicy.other
                        default:
                            return AdminAlertingAlertStatePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed an alert setting.
    open class AdminAlertingChangedAlertConfigDetails: CustomStringConvertible {
        /// Alert Name.
        public let alertName: String
        /// Previous alert configuration.
        public let previousAlertConfig: TeamLog.AdminAlertingAlertConfiguration
        /// New alert configuration.
        public let newAlertConfig: TeamLog.AdminAlertingAlertConfiguration
        public init(alertName: String, previousAlertConfig: TeamLog.AdminAlertingAlertConfiguration, newAlertConfig: TeamLog.AdminAlertingAlertConfiguration) {
            stringValidator()(alertName)
            self.alertName = alertName
            self.previousAlertConfig = previousAlertConfig
            self.newAlertConfig = newAlertConfig
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingChangedAlertConfigDetailsSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingChangedAlertConfigDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingChangedAlertConfigDetails) -> JSON {
            let output = [ 
            "alert_name": Serialization._StringSerializer.serialize(value.alertName),
            "previous_alert_config": TeamLog.AdminAlertingAlertConfigurationSerializer().serialize(value.previousAlertConfig),
            "new_alert_config": TeamLog.AdminAlertingAlertConfigurationSerializer().serialize(value.newAlertConfig),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingChangedAlertConfigDetails {
            switch json {
                case .dictionary(let dict):
                    let alertName = Serialization._StringSerializer.deserialize(dict["alert_name"] ?? .null)
                    let previousAlertConfig = TeamLog.AdminAlertingAlertConfigurationSerializer().deserialize(dict["previous_alert_config"] ?? .null)
                    let newAlertConfig = TeamLog.AdminAlertingAlertConfigurationSerializer().deserialize(dict["new_alert_config"] ?? .null)
                    return AdminAlertingChangedAlertConfigDetails(alertName: alertName, previousAlertConfig: previousAlertConfig, newAlertConfig: newAlertConfig)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AdminAlertingChangedAlertConfigType struct
    open class AdminAlertingChangedAlertConfigType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingChangedAlertConfigTypeSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingChangedAlertConfigTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingChangedAlertConfigType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingChangedAlertConfigType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AdminAlertingChangedAlertConfigType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Triggered security alert.
    open class AdminAlertingTriggeredAlertDetails: CustomStringConvertible {
        /// Alert name.
        public let alertName: String
        /// Alert severity.
        public let alertSeverity: TeamLog.AdminAlertSeverityEnum
        /// Alert category.
        public let alertCategory: TeamLog.AdminAlertCategoryEnum
        /// Alert ID.
        public let alertInstanceId: String
        public init(alertName: String, alertSeverity: TeamLog.AdminAlertSeverityEnum, alertCategory: TeamLog.AdminAlertCategoryEnum, alertInstanceId: String) {
            stringValidator()(alertName)
            self.alertName = alertName
            self.alertSeverity = alertSeverity
            self.alertCategory = alertCategory
            stringValidator()(alertInstanceId)
            self.alertInstanceId = alertInstanceId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingTriggeredAlertDetailsSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingTriggeredAlertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingTriggeredAlertDetails) -> JSON {
            let output = [ 
            "alert_name": Serialization._StringSerializer.serialize(value.alertName),
            "alert_severity": TeamLog.AdminAlertSeverityEnumSerializer().serialize(value.alertSeverity),
            "alert_category": TeamLog.AdminAlertCategoryEnumSerializer().serialize(value.alertCategory),
            "alert_instance_id": Serialization._StringSerializer.serialize(value.alertInstanceId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingTriggeredAlertDetails {
            switch json {
                case .dictionary(let dict):
                    let alertName = Serialization._StringSerializer.deserialize(dict["alert_name"] ?? .null)
                    let alertSeverity = TeamLog.AdminAlertSeverityEnumSerializer().deserialize(dict["alert_severity"] ?? .null)
                    let alertCategory = TeamLog.AdminAlertCategoryEnumSerializer().deserialize(dict["alert_category"] ?? .null)
                    let alertInstanceId = Serialization._StringSerializer.deserialize(dict["alert_instance_id"] ?? .null)
                    return AdminAlertingTriggeredAlertDetails(alertName: alertName, alertSeverity: alertSeverity, alertCategory: alertCategory, alertInstanceId: alertInstanceId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AdminAlertingTriggeredAlertType struct
    open class AdminAlertingTriggeredAlertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminAlertingTriggeredAlertTypeSerializer().serialize(self)))"
        }
    }
    open class AdminAlertingTriggeredAlertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminAlertingTriggeredAlertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminAlertingTriggeredAlertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AdminAlertingTriggeredAlertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AdminConsoleAppPermission union
    public enum AdminConsoleAppPermission: CustomStringConvertible {
        /// An unspecified error.
        case defaultForListedApps
        /// An unspecified error.
        case defaultForUnlistedApps
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminConsoleAppPermissionSerializer().serialize(self)))"
        }
    }
    open class AdminConsoleAppPermissionSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminConsoleAppPermission) -> JSON {
            switch value {
                case .defaultForListedApps:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_for_listed_apps")
                    return .dictionary(d)
                case .defaultForUnlistedApps:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_for_unlisted_apps")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminConsoleAppPermission {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default_for_listed_apps":
                            return AdminConsoleAppPermission.defaultForListedApps
                        case "default_for_unlisted_apps":
                            return AdminConsoleAppPermission.defaultForUnlistedApps
                        case "other":
                            return AdminConsoleAppPermission.other
                        default:
                            return AdminConsoleAppPermission.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AdminConsoleAppPolicy union
    public enum AdminConsoleAppPolicy: CustomStringConvertible {
        /// An unspecified error.
        case allow
        /// An unspecified error.
        case block
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminConsoleAppPolicySerializer().serialize(self)))"
        }
    }
    open class AdminConsoleAppPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminConsoleAppPolicy) -> JSON {
            switch value {
                case .allow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow")
                    return .dictionary(d)
                case .block:
                    var d = [String: JSON]()
                    d[".tag"] = .str("block")
                    return .dictionary(d)
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminConsoleAppPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allow":
                            return AdminConsoleAppPolicy.allow
                        case "block":
                            return AdminConsoleAppPolicy.block
                        case "default":
                            return AdminConsoleAppPolicy.default_
                        case "other":
                            return AdminConsoleAppPolicy.other
                        default:
                            return AdminConsoleAppPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed admin reminder settings for requests to join the team.
    open class AdminEmailRemindersChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.AdminEmailRemindersPolicy
        /// From.
        public let previousValue: TeamLog.AdminEmailRemindersPolicy
        public init(newValue: TeamLog.AdminEmailRemindersPolicy, previousValue: TeamLog.AdminEmailRemindersPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminEmailRemindersChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class AdminEmailRemindersChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminEmailRemindersChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.AdminEmailRemindersPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.AdminEmailRemindersPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminEmailRemindersChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.AdminEmailRemindersPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.AdminEmailRemindersPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return AdminEmailRemindersChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AdminEmailRemindersChangedType struct
    open class AdminEmailRemindersChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminEmailRemindersChangedTypeSerializer().serialize(self)))"
        }
    }
    open class AdminEmailRemindersChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminEmailRemindersChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AdminEmailRemindersChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AdminEmailRemindersChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether team admins receive reminder emails for requests to join the team
    public enum AdminEmailRemindersPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminEmailRemindersPolicySerializer().serialize(self)))"
        }
    }
    open class AdminEmailRemindersPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminEmailRemindersPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminEmailRemindersPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return AdminEmailRemindersPolicy.default_
                        case "disabled":
                            return AdminEmailRemindersPolicy.disabled
                        case "enabled":
                            return AdminEmailRemindersPolicy.enabled
                        case "other":
                            return AdminEmailRemindersPolicy.other
                        default:
                            return AdminEmailRemindersPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AdminRole union
    public enum AdminRole: CustomStringConvertible {
        /// An unspecified error.
        case billingAdmin
        /// An unspecified error.
        case complianceAdmin
        /// An unspecified error.
        case contentAdmin
        /// An unspecified error.
        case limitedAdmin
        /// An unspecified error.
        case memberOnly
        /// An unspecified error.
        case reportingAdmin
        /// An unspecified error.
        case securityAdmin
        /// An unspecified error.
        case supportAdmin
        /// An unspecified error.
        case teamAdmin
        /// An unspecified error.
        case userManagementAdmin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminRoleSerializer().serialize(self)))"
        }
    }
    open class AdminRoleSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminRole) -> JSON {
            switch value {
                case .billingAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("billing_admin")
                    return .dictionary(d)
                case .complianceAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("compliance_admin")
                    return .dictionary(d)
                case .contentAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("content_admin")
                    return .dictionary(d)
                case .limitedAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("limited_admin")
                    return .dictionary(d)
                case .memberOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_only")
                    return .dictionary(d)
                case .reportingAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reporting_admin")
                    return .dictionary(d)
                case .securityAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("security_admin")
                    return .dictionary(d)
                case .supportAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("support_admin")
                    return .dictionary(d)
                case .teamAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_admin")
                    return .dictionary(d)
                case .userManagementAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user_management_admin")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminRole {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "billing_admin":
                            return AdminRole.billingAdmin
                        case "compliance_admin":
                            return AdminRole.complianceAdmin
                        case "content_admin":
                            return AdminRole.contentAdmin
                        case "limited_admin":
                            return AdminRole.limitedAdmin
                        case "member_only":
                            return AdminRole.memberOnly
                        case "reporting_admin":
                            return AdminRole.reportingAdmin
                        case "security_admin":
                            return AdminRole.securityAdmin
                        case "support_admin":
                            return AdminRole.supportAdmin
                        case "team_admin":
                            return AdminRole.teamAdmin
                        case "user_management_admin":
                            return AdminRole.userManagementAdmin
                        case "other":
                            return AdminRole.other
                        default:
                            return AdminRole.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Alert recipients setting type
    public enum AlertRecipientsSettingType: CustomStringConvertible {
        /// An unspecified error.
        case customList
        /// An unspecified error.
        case invalid
        /// An unspecified error.
        case none
        /// An unspecified error.
        case teamAdmins
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AlertRecipientsSettingTypeSerializer().serialize(self)))"
        }
    }
    open class AlertRecipientsSettingTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AlertRecipientsSettingType) -> JSON {
            switch value {
                case .customList:
                    var d = [String: JSON]()
                    d[".tag"] = .str("custom_list")
                    return .dictionary(d)
                case .invalid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invalid")
                    return .dictionary(d)
                case .none:
                    var d = [String: JSON]()
                    d[".tag"] = .str("none")
                    return .dictionary(d)
                case .teamAdmins:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_admins")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AlertRecipientsSettingType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "custom_list":
                            return AlertRecipientsSettingType.customList
                        case "invalid":
                            return AlertRecipientsSettingType.invalid
                        case "none":
                            return AlertRecipientsSettingType.none
                        case "team_admins":
                            return AlertRecipientsSettingType.teamAdmins
                        case "other":
                            return AlertRecipientsSettingType.other
                        default:
                            return AlertRecipientsSettingType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disabled downloads.
    open class AllowDownloadDisabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadDisabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadDisabledDetails {
            switch json {
                case .dictionary(_):
                    return AllowDownloadDisabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AllowDownloadDisabledType struct
    open class AllowDownloadDisabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadDisabledTypeSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadDisabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadDisabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadDisabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AllowDownloadDisabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled downloads.
    open class AllowDownloadEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadEnabledDetails {
            switch json {
                case .dictionary(_):
                    return AllowDownloadEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AllowDownloadEnabledType struct
    open class AllowDownloadEnabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadEnabledTypeSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadEnabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadEnabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadEnabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AllowDownloadEnabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Api session.
    open class ApiSessionLogInfo: CustomStringConvertible {
        /// Api request ID.
        public let requestId: String
        public init(requestId: String) {
            stringValidator()(requestId)
            self.requestId = requestId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ApiSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class ApiSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ApiSessionLogInfo) -> JSON {
            let output = [ 
            "request_id": Serialization._StringSerializer.serialize(value.requestId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ApiSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let requestId = Serialization._StringSerializer.deserialize(dict["request_id"] ?? .null)
                    return ApiSessionLogInfo(requestId: requestId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to connect app for member.
    open class AppBlockedByPermissionsDetails: CustomStringConvertible {
        /// Relevant application details.
        public let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppBlockedByPermissionsDetailsSerializer().serialize(self)))"
        }
    }
    open class AppBlockedByPermissionsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppBlockedByPermissionsDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppBlockedByPermissionsDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppBlockedByPermissionsDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppBlockedByPermissionsType struct
    open class AppBlockedByPermissionsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppBlockedByPermissionsTypeSerializer().serialize(self)))"
        }
    }
    open class AppBlockedByPermissionsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppBlockedByPermissionsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppBlockedByPermissionsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppBlockedByPermissionsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked app for team.
    open class AppLinkTeamDetails: CustomStringConvertible {
        /// Relevant application details.
        public let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class AppLinkTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkTeamDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppLinkTeamDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppLinkTeamType struct
    open class AppLinkTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkTeamTypeSerializer().serialize(self)))"
        }
    }
    open class AppLinkTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppLinkTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked app for member.
    open class AppLinkUserDetails: CustomStringConvertible {
        /// Relevant application details.
        public let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkUserDetailsSerializer().serialize(self)))"
        }
    }
    open class AppLinkUserDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkUserDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkUserDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppLinkUserDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppLinkUserType struct
    open class AppLinkUserType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkUserTypeSerializer().serialize(self)))"
        }
    }
    open class AppLinkUserTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkUserType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkUserType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppLinkUserType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// App's logged information.
    open class AppLogInfo: CustomStringConvertible {
        /// App unique ID.
        public let appId: String?
        /// App display name.
        public let displayName: String?
        public init(appId: String? = nil, displayName: String? = nil) {
            nullableValidator(stringValidator())(appId)
            self.appId = appId
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLogInfoSerializer().serialize(self)))"
        }
    }
    open class AppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLogInfo) -> JSON {
            var output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            switch value {
                case let userOrTeamLinkedApp as TeamLog.UserOrTeamLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.UserOrTeamLinkedAppLogInfoSerializer().serialize(userOrTeamLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("user_or_team_linked_app")
                case let userLinkedApp as TeamLog.UserLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.UserLinkedAppLogInfoSerializer().serialize(userLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("user_linked_app")
                case let teamLinkedApp as TeamLog.TeamLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.TeamLinkedAppLogInfoSerializer().serialize(teamLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("team_linked_app")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "user_or_team_linked_app":
                            return TeamLog.UserOrTeamLinkedAppLogInfoSerializer().deserialize(json)
                        case "user_linked_app":
                            return TeamLog.UserLinkedAppLogInfoSerializer().deserialize(json)
                        case "team_linked_app":
                            return TeamLog.TeamLinkedAppLogInfoSerializer().deserialize(json)
                        default:
                            let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                            let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                            return AppLogInfo(appId: appId, displayName: displayName)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed app permissions.
    open class AppPermissionsChangedDetails: CustomStringConvertible {
        /// Name of the app.
        public let appName: String?
        /// Permission that was changed.
        public let permission: TeamLog.AdminConsoleAppPermission?
        /// Previous policy.
        public let previousValue: TeamLog.AdminConsoleAppPolicy
        /// New policy.
        public let newValue: TeamLog.AdminConsoleAppPolicy
        public init(previousValue: TeamLog.AdminConsoleAppPolicy, newValue: TeamLog.AdminConsoleAppPolicy, appName: String? = nil, permission: TeamLog.AdminConsoleAppPermission? = nil) {
            nullableValidator(stringValidator())(appName)
            self.appName = appName
            self.permission = permission
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppPermissionsChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class AppPermissionsChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppPermissionsChangedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.AdminConsoleAppPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.AdminConsoleAppPolicySerializer().serialize(value.newValue),
            "app_name": NullableSerializer(Serialization._StringSerializer).serialize(value.appName),
            "permission": NullableSerializer(TeamLog.AdminConsoleAppPermissionSerializer()).serialize(value.permission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppPermissionsChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.AdminConsoleAppPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.AdminConsoleAppPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let appName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_name"] ?? .null)
                    let permission = NullableSerializer(TeamLog.AdminConsoleAppPermissionSerializer()).deserialize(dict["permission"] ?? .null)
                    return AppPermissionsChangedDetails(previousValue: previousValue, newValue: newValue, appName: appName, permission: permission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppPermissionsChangedType struct
    open class AppPermissionsChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppPermissionsChangedTypeSerializer().serialize(self)))"
        }
    }
    open class AppPermissionsChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppPermissionsChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppPermissionsChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppPermissionsChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unlinked app for team.
    open class AppUnlinkTeamDetails: CustomStringConvertible {
        /// Relevant application details.
        public let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkTeamDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppUnlinkTeamDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppUnlinkTeamType struct
    open class AppUnlinkTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkTeamTypeSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppUnlinkTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unlinked app for member.
    open class AppUnlinkUserDetails: CustomStringConvertible {
        /// Relevant application details.
        public let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkUserDetailsSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkUserDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkUserDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkUserDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppUnlinkUserDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AppUnlinkUserType struct
    open class AppUnlinkUserType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkUserTypeSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkUserTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkUserType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkUserType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return AppUnlinkUserType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Applied naming convention.
    open class ApplyNamingConventionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ApplyNamingConventionDetailsSerializer().serialize(self)))"
        }
    }
    open class ApplyNamingConventionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ApplyNamingConventionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ApplyNamingConventionDetails {
            switch json {
                case .dictionary(_):
                    return ApplyNamingConventionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ApplyNamingConventionType struct
    open class ApplyNamingConventionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ApplyNamingConventionTypeSerializer().serialize(self)))"
        }
    }
    open class ApplyNamingConventionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ApplyNamingConventionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ApplyNamingConventionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ApplyNamingConventionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Asset details.
    public enum AssetLogInfo: CustomStringConvertible {
        /// File's details.
        case file(TeamLog.FileLogInfo)
        /// Folder's details.
        case folder(TeamLog.FolderLogInfo)
        /// Paper document's details.
        case paperDocument(TeamLog.PaperDocumentLogInfo)
        /// Paper folder's details.
        case paperFolder(TeamLog.PaperFolderLogInfo)
        /// Showcase document's details.
        case showcaseDocument(TeamLog.ShowcaseDocumentLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AssetLogInfoSerializer().serialize(self)))"
        }
    }
    open class AssetLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AssetLogInfo) -> JSON {
            switch value {
                case .file(let arg):
                    var d = Serialization.getFields(TeamLog.FileLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("file")
                    return .dictionary(d)
                case .folder(let arg):
                    var d = Serialization.getFields(TeamLog.FolderLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("folder")
                    return .dictionary(d)
                case .paperDocument(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocumentLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("paper_document")
                    return .dictionary(d)
                case .paperFolder(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder")
                    return .dictionary(d)
                case .showcaseDocument(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseDocumentLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_document")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AssetLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "file":
                            let v = TeamLog.FileLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.file(v)
                        case "folder":
                            let v = TeamLog.FolderLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.folder(v)
                        case "paper_document":
                            let v = TeamLog.PaperDocumentLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.paperDocument(v)
                        case "paper_folder":
                            let v = TeamLog.PaperFolderLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.paperFolder(v)
                        case "showcase_document":
                            let v = TeamLog.ShowcaseDocumentLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.showcaseDocument(v)
                        case "other":
                            return AssetLogInfo.other
                        default:
                            return AssetLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Backup status
    public enum BackupStatus: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BackupStatusSerializer().serialize(self)))"
        }
    }
    open class BackupStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BackupStatus) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> BackupStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return BackupStatus.disabled
                        case "enabled":
                            return BackupStatus.enabled
                        case "other":
                            return BackupStatus.other
                        default:
                            return BackupStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added Binder page.
    open class BinderAddPageDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderAddPageDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderAddPageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderAddPageDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderAddPageDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderAddPageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderAddPageType struct
    open class BinderAddPageType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderAddPageTypeSerializer().serialize(self)))"
        }
    }
    open class BinderAddPageTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderAddPageType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderAddPageType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderAddPageType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added Binder section.
    open class BinderAddSectionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderAddSectionDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderAddSectionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderAddSectionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderAddSectionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderAddSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderAddSectionType struct
    open class BinderAddSectionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderAddSectionTypeSerializer().serialize(self)))"
        }
    }
    open class BinderAddSectionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderAddSectionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderAddSectionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderAddSectionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed Binder page.
    open class BinderRemovePageDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRemovePageDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderRemovePageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRemovePageDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRemovePageDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderRemovePageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderRemovePageType struct
    open class BinderRemovePageType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRemovePageTypeSerializer().serialize(self)))"
        }
    }
    open class BinderRemovePageTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRemovePageType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRemovePageType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderRemovePageType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed Binder section.
    open class BinderRemoveSectionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRemoveSectionDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderRemoveSectionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRemoveSectionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRemoveSectionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderRemoveSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderRemoveSectionType struct
    open class BinderRemoveSectionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRemoveSectionTypeSerializer().serialize(self)))"
        }
    }
    open class BinderRemoveSectionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRemoveSectionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRemoveSectionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderRemoveSectionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed Binder page.
    open class BinderRenamePageDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        /// Previous name of the Binder page/section.
        public let previousBinderItemName: String?
        public init(eventUuid: String, docTitle: String, binderItemName: String, previousBinderItemName: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
            nullableValidator(stringValidator())(previousBinderItemName)
            self.previousBinderItemName = previousBinderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRenamePageDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderRenamePageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRenamePageDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            "previous_binder_item_name": NullableSerializer(Serialization._StringSerializer).serialize(value.previousBinderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRenamePageDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    let previousBinderItemName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_binder_item_name"] ?? .null)
                    return BinderRenamePageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName, previousBinderItemName: previousBinderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderRenamePageType struct
    open class BinderRenamePageType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRenamePageTypeSerializer().serialize(self)))"
        }
    }
    open class BinderRenamePageTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRenamePageType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRenamePageType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderRenamePageType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed Binder section.
    open class BinderRenameSectionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        /// Previous name of the Binder page/section.
        public let previousBinderItemName: String?
        public init(eventUuid: String, docTitle: String, binderItemName: String, previousBinderItemName: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
            nullableValidator(stringValidator())(previousBinderItemName)
            self.previousBinderItemName = previousBinderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRenameSectionDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderRenameSectionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRenameSectionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            "previous_binder_item_name": NullableSerializer(Serialization._StringSerializer).serialize(value.previousBinderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRenameSectionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    let previousBinderItemName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_binder_item_name"] ?? .null)
                    return BinderRenameSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName, previousBinderItemName: previousBinderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderRenameSectionType struct
    open class BinderRenameSectionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderRenameSectionTypeSerializer().serialize(self)))"
        }
    }
    open class BinderRenameSectionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderRenameSectionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderRenameSectionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderRenameSectionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reordered Binder page.
    open class BinderReorderPageDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderReorderPageDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderReorderPageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderReorderPageDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderReorderPageDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderReorderPageDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderReorderPageType struct
    open class BinderReorderPageType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderReorderPageTypeSerializer().serialize(self)))"
        }
    }
    open class BinderReorderPageTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderReorderPageType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderReorderPageType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderReorderPageType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reordered Binder section.
    open class BinderReorderSectionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Title of the Binder doc.
        public let docTitle: String
        /// Name of the Binder page/section.
        public let binderItemName: String
        public init(eventUuid: String, docTitle: String, binderItemName: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(docTitle)
            self.docTitle = docTitle
            stringValidator()(binderItemName)
            self.binderItemName = binderItemName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderReorderSectionDetailsSerializer().serialize(self)))"
        }
    }
    open class BinderReorderSectionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderReorderSectionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            "binder_item_name": Serialization._StringSerializer.serialize(value.binderItemName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderReorderSectionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    let binderItemName = Serialization._StringSerializer.deserialize(dict["binder_item_name"] ?? .null)
                    return BinderReorderSectionDetails(eventUuid: eventUuid, docTitle: docTitle, binderItemName: binderItemName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The BinderReorderSectionType struct
    open class BinderReorderSectionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(BinderReorderSectionTypeSerializer().serialize(self)))"
        }
    }
    open class BinderReorderSectionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: BinderReorderSectionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> BinderReorderSectionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return BinderReorderSectionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can activate camera uploads
    public enum CameraUploadsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CameraUploadsPolicySerializer().serialize(self)))"
        }
    }
    open class CameraUploadsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CameraUploadsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> CameraUploadsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return CameraUploadsPolicy.disabled
                        case "enabled":
                            return CameraUploadsPolicy.enabled
                        case "other":
                            return CameraUploadsPolicy.other
                        default:
                            return CameraUploadsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed camera uploads setting for team.
    open class CameraUploadsPolicyChangedDetails: CustomStringConvertible {
        /// New camera uploads setting.
        public let newValue: TeamLog.CameraUploadsPolicy
        /// Previous camera uploads setting.
        public let previousValue: TeamLog.CameraUploadsPolicy
        public init(newValue: TeamLog.CameraUploadsPolicy, previousValue: TeamLog.CameraUploadsPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CameraUploadsPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class CameraUploadsPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CameraUploadsPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.CameraUploadsPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.CameraUploadsPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CameraUploadsPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.CameraUploadsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.CameraUploadsPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return CameraUploadsPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CameraUploadsPolicyChangedType struct
    open class CameraUploadsPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CameraUploadsPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class CameraUploadsPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CameraUploadsPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CameraUploadsPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return CameraUploadsPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether team users can transcription in Capture
    public enum CaptureTranscriptPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CaptureTranscriptPolicySerializer().serialize(self)))"
        }
    }
    open class CaptureTranscriptPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CaptureTranscriptPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> CaptureTranscriptPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return CaptureTranscriptPolicy.default_
                        case "disabled":
                            return CaptureTranscriptPolicy.disabled
                        case "enabled":
                            return CaptureTranscriptPolicy.enabled
                        case "other":
                            return CaptureTranscriptPolicy.other
                        default:
                            return CaptureTranscriptPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed Capture transcription policy for team.
    open class CaptureTranscriptPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.CaptureTranscriptPolicy
        /// From.
        public let previousValue: TeamLog.CaptureTranscriptPolicy
        public init(newValue: TeamLog.CaptureTranscriptPolicy, previousValue: TeamLog.CaptureTranscriptPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CaptureTranscriptPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class CaptureTranscriptPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CaptureTranscriptPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.CaptureTranscriptPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.CaptureTranscriptPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CaptureTranscriptPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.CaptureTranscriptPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.CaptureTranscriptPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return CaptureTranscriptPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CaptureTranscriptPolicyChangedType struct
    open class CaptureTranscriptPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CaptureTranscriptPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class CaptureTranscriptPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CaptureTranscriptPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CaptureTranscriptPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return CaptureTranscriptPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Certificate details.
    open class Certificate: CustomStringConvertible {
        /// Certificate subject.
        public let subject: String
        /// Certificate issuer.
        public let issuer: String
        /// Certificate issue date.
        public let issueDate: String
        /// Certificate expiration date.
        public let expirationDate: String
        /// Certificate serial number.
        public let serialNumber: String
        /// Certificate sha1 fingerprint.
        public let sha1Fingerprint: String
        /// Certificate common name.
        public let commonName: String?
        public init(subject: String, issuer: String, issueDate: String, expirationDate: String, serialNumber: String, sha1Fingerprint: String, commonName: String? = nil) {
            stringValidator()(subject)
            self.subject = subject
            stringValidator()(issuer)
            self.issuer = issuer
            stringValidator()(issueDate)
            self.issueDate = issueDate
            stringValidator()(expirationDate)
            self.expirationDate = expirationDate
            stringValidator()(serialNumber)
            self.serialNumber = serialNumber
            stringValidator()(sha1Fingerprint)
            self.sha1Fingerprint = sha1Fingerprint
            nullableValidator(stringValidator())(commonName)
            self.commonName = commonName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CertificateSerializer().serialize(self)))"
        }
    }
    open class CertificateSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Certificate) -> JSON {
            let output = [ 
            "subject": Serialization._StringSerializer.serialize(value.subject),
            "issuer": Serialization._StringSerializer.serialize(value.issuer),
            "issue_date": Serialization._StringSerializer.serialize(value.issueDate),
            "expiration_date": Serialization._StringSerializer.serialize(value.expirationDate),
            "serial_number": Serialization._StringSerializer.serialize(value.serialNumber),
            "sha1_fingerprint": Serialization._StringSerializer.serialize(value.sha1Fingerprint),
            "common_name": NullableSerializer(Serialization._StringSerializer).serialize(value.commonName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> Certificate {
            switch json {
                case .dictionary(let dict):
                    let subject = Serialization._StringSerializer.deserialize(dict["subject"] ?? .null)
                    let issuer = Serialization._StringSerializer.deserialize(dict["issuer"] ?? .null)
                    let issueDate = Serialization._StringSerializer.deserialize(dict["issue_date"] ?? .null)
                    let expirationDate = Serialization._StringSerializer.deserialize(dict["expiration_date"] ?? .null)
                    let serialNumber = Serialization._StringSerializer.deserialize(dict["serial_number"] ?? .null)
                    let sha1Fingerprint = Serialization._StringSerializer.deserialize(dict["sha1_fingerprint"] ?? .null)
                    let commonName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["common_name"] ?? .null)
                    return Certificate(subject: subject, issuer: issuer, issueDate: issueDate, expirationDate: expirationDate, serialNumber: serialNumber, sha1Fingerprint: sha1Fingerprint, commonName: commonName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether the team's default expiration days policy must be enforced when an externally shared
    /// link is updated
    public enum ChangeLinkExpirationPolicy: CustomStringConvertible {
        /// An unspecified error.
        case allowed
        /// An unspecified error.
        case notAllowed
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ChangeLinkExpirationPolicySerializer().serialize(self)))"
        }
    }
    open class ChangeLinkExpirationPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ChangeLinkExpirationPolicy) -> JSON {
            switch value {
                case .allowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allowed")
                    return .dictionary(d)
                case .notAllowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("not_allowed")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ChangeLinkExpirationPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allowed":
                            return ChangeLinkExpirationPolicy.allowed
                        case "not_allowed":
                            return ChangeLinkExpirationPolicy.notAllowed
                        case "other":
                            return ChangeLinkExpirationPolicy.other
                        default:
                            return ChangeLinkExpirationPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed enterprise admin role.
    open class ChangedEnterpriseAdminRoleDetails: CustomStringConvertible {
        /// The member&#x2019s previous enterprise admin role.
        public let previousValue: TeamLog.FedAdminRole
        /// The member&#x2019s new enterprise admin role.
        public let newValue: TeamLog.FedAdminRole
        /// The name of the member&#x2019s team.
        public let teamName: String
        public init(previousValue: TeamLog.FedAdminRole, newValue: TeamLog.FedAdminRole, teamName: String) {
            self.previousValue = previousValue
            self.newValue = newValue
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ChangedEnterpriseAdminRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class ChangedEnterpriseAdminRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ChangedEnterpriseAdminRoleDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.FedAdminRoleSerializer().serialize(value.previousValue),
            "new_value": TeamLog.FedAdminRoleSerializer().serialize(value.newValue),
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ChangedEnterpriseAdminRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.FedAdminRoleSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.FedAdminRoleSerializer().deserialize(dict["new_value"] ?? .null)
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    return ChangedEnterpriseAdminRoleDetails(previousValue: previousValue, newValue: newValue, teamName: teamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ChangedEnterpriseAdminRoleType struct
    open class ChangedEnterpriseAdminRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ChangedEnterpriseAdminRoleTypeSerializer().serialize(self)))"
        }
    }
    open class ChangedEnterpriseAdminRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ChangedEnterpriseAdminRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ChangedEnterpriseAdminRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ChangedEnterpriseAdminRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed enterprise-connected team status.
    open class ChangedEnterpriseConnectedTeamStatusDetails: CustomStringConvertible {
        /// The preformed change in the team&#x2019s connection status.
        public let action: TeamLog.FedHandshakeAction
        /// Additional information about the organization or team.
        public let additionalInfo: TeamLog.FederationStatusChangeAdditionalInfo
        /// Previous request state.
        public let previousValue: TeamLog.TrustedTeamsRequestState
        /// New request state.
        public let newValue: TeamLog.TrustedTeamsRequestState
        public init(action: TeamLog.FedHandshakeAction, additionalInfo: TeamLog.FederationStatusChangeAdditionalInfo, previousValue: TeamLog.TrustedTeamsRequestState, newValue: TeamLog.TrustedTeamsRequestState) {
            self.action = action
            self.additionalInfo = additionalInfo
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ChangedEnterpriseConnectedTeamStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class ChangedEnterpriseConnectedTeamStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ChangedEnterpriseConnectedTeamStatusDetails) -> JSON {
            let output = [ 
            "action": TeamLog.FedHandshakeActionSerializer().serialize(value.action),
            "additional_info": TeamLog.FederationStatusChangeAdditionalInfoSerializer().serialize(value.additionalInfo),
            "previous_value": TeamLog.TrustedTeamsRequestStateSerializer().serialize(value.previousValue),
            "new_value": TeamLog.TrustedTeamsRequestStateSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ChangedEnterpriseConnectedTeamStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let action = TeamLog.FedHandshakeActionSerializer().deserialize(dict["action"] ?? .null)
                    let additionalInfo = TeamLog.FederationStatusChangeAdditionalInfoSerializer().deserialize(dict["additional_info"] ?? .null)
                    let previousValue = TeamLog.TrustedTeamsRequestStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.TrustedTeamsRequestStateSerializer().deserialize(dict["new_value"] ?? .null)
                    return ChangedEnterpriseConnectedTeamStatusDetails(action: action, additionalInfo: additionalInfo, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ChangedEnterpriseConnectedTeamStatusType struct
    open class ChangedEnterpriseConnectedTeamStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ChangedEnterpriseConnectedTeamStatusTypeSerializer().serialize(self)))"
        }
    }
    open class ChangedEnterpriseConnectedTeamStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ChangedEnterpriseConnectedTeamStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ChangedEnterpriseConnectedTeamStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ChangedEnterpriseConnectedTeamStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed classification policy for team.
    open class ClassificationChangePolicyDetails: CustomStringConvertible {
        /// Previous classification policy.
        public let previousValue: TeamLog.ClassificationPolicyEnumWrapper
        /// New classification policy.
        public let newValue: TeamLog.ClassificationPolicyEnumWrapper
        /// Policy type.
        public let classificationType: TeamLog.ClassificationType
        public init(previousValue: TeamLog.ClassificationPolicyEnumWrapper, newValue: TeamLog.ClassificationPolicyEnumWrapper, classificationType: TeamLog.ClassificationType) {
            self.previousValue = previousValue
            self.newValue = newValue
            self.classificationType = classificationType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ClassificationChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.ClassificationPolicyEnumWrapperSerializer().serialize(value.previousValue),
            "new_value": TeamLog.ClassificationPolicyEnumWrapperSerializer().serialize(value.newValue),
            "classification_type": TeamLog.ClassificationTypeSerializer().serialize(value.classificationType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.ClassificationPolicyEnumWrapperSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.ClassificationPolicyEnumWrapperSerializer().deserialize(dict["new_value"] ?? .null)
                    let classificationType = TeamLog.ClassificationTypeSerializer().deserialize(dict["classification_type"] ?? .null)
                    return ClassificationChangePolicyDetails(previousValue: previousValue, newValue: newValue, classificationType: classificationType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ClassificationChangePolicyType struct
    open class ClassificationChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ClassificationChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ClassificationChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created Classification report.
    open class ClassificationCreateReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class ClassificationCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationCreateReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationCreateReportDetails {
            switch json {
                case .dictionary(_):
                    return ClassificationCreateReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create Classification report.
    open class ClassificationCreateReportFailDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationCreateReportFailDetailsSerializer().serialize(self)))"
        }
    }
    open class ClassificationCreateReportFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationCreateReportFailDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationCreateReportFailDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return ClassificationCreateReportFailDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ClassificationCreateReportFailType struct
    open class ClassificationCreateReportFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationCreateReportFailTypeSerializer().serialize(self)))"
        }
    }
    open class ClassificationCreateReportFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationCreateReportFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationCreateReportFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ClassificationCreateReportFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ClassificationCreateReportType struct
    open class ClassificationCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class ClassificationCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ClassificationCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ClassificationCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to the classification feature
    public enum ClassificationPolicyEnumWrapper: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case memberAndTeamFolders
        /// An unspecified error.
        case teamFolders
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationPolicyEnumWrapperSerializer().serialize(self)))"
        }
    }
    open class ClassificationPolicyEnumWrapperSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationPolicyEnumWrapper) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .memberAndTeamFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_and_team_folders")
                    return .dictionary(d)
                case .teamFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folders")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ClassificationPolicyEnumWrapper {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ClassificationPolicyEnumWrapper.disabled
                        case "enabled":
                            return ClassificationPolicyEnumWrapper.enabled
                        case "member_and_team_folders":
                            return ClassificationPolicyEnumWrapper.memberAndTeamFolders
                        case "team_folders":
                            return ClassificationPolicyEnumWrapper.teamFolders
                        case "other":
                            return ClassificationPolicyEnumWrapper.other
                        default:
                            return ClassificationPolicyEnumWrapper.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The type of classification (currently only personal information)
    public enum ClassificationType: CustomStringConvertible {
        /// An unspecified error.
        case personalInformation
        /// An unspecified error.
        case pii
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ClassificationTypeSerializer().serialize(self)))"
        }
    }
    open class ClassificationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ClassificationType) -> JSON {
            switch value {
                case .personalInformation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("personal_information")
                    return .dictionary(d)
                case .pii:
                    var d = [String: JSON]()
                    d[".tag"] = .str("pii")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ClassificationType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "personal_information":
                            return ClassificationType.personalInformation
                        case "pii":
                            return ClassificationType.pii
                        case "other":
                            return ClassificationType.other
                        default:
                            return ClassificationType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Shared album.
    open class CollectionShareDetails: CustomStringConvertible {
        /// Album name.
        public let albumName: String
        public init(albumName: String) {
            stringValidator()(albumName)
            self.albumName = albumName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CollectionShareDetailsSerializer().serialize(self)))"
        }
    }
    open class CollectionShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CollectionShareDetails) -> JSON {
            let output = [ 
            "album_name": Serialization._StringSerializer.serialize(value.albumName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CollectionShareDetails {
            switch json {
                case .dictionary(let dict):
                    let albumName = Serialization._StringSerializer.deserialize(dict["album_name"] ?? .null)
                    return CollectionShareDetails(albumName: albumName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CollectionShareType struct
    open class CollectionShareType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CollectionShareTypeSerializer().serialize(self)))"
        }
    }
    open class CollectionShareTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CollectionShareType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CollectionShareType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return CollectionShareType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to computer backup feature
    public enum ComputerBackupPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ComputerBackupPolicySerializer().serialize(self)))"
        }
    }
    open class ComputerBackupPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ComputerBackupPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ComputerBackupPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return ComputerBackupPolicy.default_
                        case "disabled":
                            return ComputerBackupPolicy.disabled
                        case "enabled":
                            return ComputerBackupPolicy.enabled
                        case "other":
                            return ComputerBackupPolicy.other
                        default:
                            return ComputerBackupPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed computer backup policy for team.
    open class ComputerBackupPolicyChangedDetails: CustomStringConvertible {
        /// New computer backup policy.
        public let newValue: TeamLog.ComputerBackupPolicy
        /// Previous computer backup policy.
        public let previousValue: TeamLog.ComputerBackupPolicy
        public init(newValue: TeamLog.ComputerBackupPolicy, previousValue: TeamLog.ComputerBackupPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ComputerBackupPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class ComputerBackupPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ComputerBackupPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ComputerBackupPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ComputerBackupPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ComputerBackupPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ComputerBackupPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ComputerBackupPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ComputerBackupPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ComputerBackupPolicyChangedType struct
    open class ComputerBackupPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ComputerBackupPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class ComputerBackupPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ComputerBackupPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ComputerBackupPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ComputerBackupPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The name of the team
    open class ConnectedTeamName: CustomStringConvertible {
        /// The name of the team.
        public let team: String
        public init(team: String) {
            stringValidator()(team)
            self.team = team
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ConnectedTeamNameSerializer().serialize(self)))"
        }
    }
    open class ConnectedTeamNameSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ConnectedTeamName) -> JSON {
            let output = [ 
            "team": Serialization._StringSerializer.serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ConnectedTeamName {
            switch json {
                case .dictionary(let dict):
                    let team = Serialization._StringSerializer.deserialize(dict["team"] ?? .null)
                    return ConnectedTeamName(team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed content management setting.
    open class ContentAdministrationPolicyChangedDetails: CustomStringConvertible {
        /// New content administration policy.
        public let newValue: String
        /// Previous content administration policy.
        public let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContentAdministrationPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class ContentAdministrationPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContentAdministrationPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ContentAdministrationPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return ContentAdministrationPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ContentAdministrationPolicyChangedType struct
    open class ContentAdministrationPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContentAdministrationPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class ContentAdministrationPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContentAdministrationPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ContentAdministrationPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ContentAdministrationPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for pemanent content deletion
    public enum ContentPermanentDeletePolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContentPermanentDeletePolicySerializer().serialize(self)))"
        }
    }
    open class ContentPermanentDeletePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContentPermanentDeletePolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ContentPermanentDeletePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ContentPermanentDeletePolicy.disabled
                        case "enabled":
                            return ContentPermanentDeletePolicy.enabled
                        case "other":
                            return ContentPermanentDeletePolicy.other
                        default:
                            return ContentPermanentDeletePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The primary entity on which the action was done.
    public enum ContextLogInfo: CustomStringConvertible {
        /// Anonymous context.
        case anonymous
        /// Action was done on behalf of a non team member.
        case nonTeamMember(TeamLog.NonTeamMemberLogInfo)
        /// Action was done on behalf of a team that's part of an organization.
        case organizationTeam(TeamLog.TeamLogInfo)
        /// Action was done on behalf of the team.
        case team
        /// Action was done on behalf of a team member.
        case teamMember(TeamLog.TeamMemberLogInfo)
        /// Action was done on behalf of a trusted non team member.
        case trustedNonTeamMember(TeamLog.TrustedNonTeamMemberLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContextLogInfoSerializer().serialize(self)))"
        }
    }
    open class ContextLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContextLogInfo) -> JSON {
            switch value {
                case .anonymous:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anonymous")
                    return .dictionary(d)
                case .nonTeamMember(let arg):
                    var d = Serialization.getFields(TeamLog.NonTeamMemberLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("non_team_member")
                    return .dictionary(d)
                case .organizationTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("organization_team")
                    return .dictionary(d)
                case .team:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team")
                    return .dictionary(d)
                case .teamMember(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMemberLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("team_member")
                    return .dictionary(d)
                case .trustedNonTeamMember(let arg):
                    var d = Serialization.getFields(TeamLog.TrustedNonTeamMemberLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("trusted_non_team_member")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ContextLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "anonymous":
                            return ContextLogInfo.anonymous
                        case "non_team_member":
                            let v = TeamLog.NonTeamMemberLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.nonTeamMember(v)
                        case "organization_team":
                            let v = TeamLog.TeamLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.organizationTeam(v)
                        case "team":
                            return ContextLogInfo.team
                        case "team_member":
                            let v = TeamLog.TeamMemberLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.teamMember(v)
                        case "trusted_non_team_member":
                            let v = TeamLog.TrustedNonTeamMemberLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.trustedNonTeamMember(v)
                        case "other":
                            return ContextLogInfo.other
                        default:
                            return ContextLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Created folders.
    open class CreateFolderDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class CreateFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CreateFolderDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CreateFolderDetails {
            switch json {
                case .dictionary(_):
                    return CreateFolderDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CreateFolderType struct
    open class CreateFolderType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateFolderTypeSerializer().serialize(self)))"
        }
    }
    open class CreateFolderTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CreateFolderType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CreateFolderType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return CreateFolderType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created team invite link.
    open class CreateTeamInviteLinkDetails: CustomStringConvertible {
        /// The invite link url that was created.
        public let linkUrl: String
        /// The expiration date of the invite link.
        public let expiryDate: String
        public init(linkUrl: String, expiryDate: String) {
            stringValidator()(linkUrl)
            self.linkUrl = linkUrl
            stringValidator()(expiryDate)
            self.expiryDate = expiryDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateTeamInviteLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class CreateTeamInviteLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CreateTeamInviteLinkDetails) -> JSON {
            let output = [ 
            "link_url": Serialization._StringSerializer.serialize(value.linkUrl),
            "expiry_date": Serialization._StringSerializer.serialize(value.expiryDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CreateTeamInviteLinkDetails {
            switch json {
                case .dictionary(let dict):
                    let linkUrl = Serialization._StringSerializer.deserialize(dict["link_url"] ?? .null)
                    let expiryDate = Serialization._StringSerializer.deserialize(dict["expiry_date"] ?? .null)
                    return CreateTeamInviteLinkDetails(linkUrl: linkUrl, expiryDate: expiryDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The CreateTeamInviteLinkType struct
    open class CreateTeamInviteLinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateTeamInviteLinkTypeSerializer().serialize(self)))"
        }
    }
    open class CreateTeamInviteLinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CreateTeamInviteLinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CreateTeamInviteLinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return CreateTeamInviteLinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set restrictions on data center locations where team data resides.
    open class DataPlacementRestrictionChangePolicyDetails: CustomStringConvertible {
        /// Previous placement restriction.
        public let previousValue: TeamLog.PlacementRestriction
        /// New placement restriction.
        public let newValue: TeamLog.PlacementRestriction
        public init(previousValue: TeamLog.PlacementRestriction, newValue: TeamLog.PlacementRestriction) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.PlacementRestrictionSerializer().serialize(value.previousValue),
            "new_value": TeamLog.PlacementRestrictionSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.PlacementRestrictionSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.PlacementRestrictionSerializer().deserialize(dict["new_value"] ?? .null)
                    return DataPlacementRestrictionChangePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DataPlacementRestrictionChangePolicyType struct
    open class DataPlacementRestrictionChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DataPlacementRestrictionChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Completed restrictions on data center locations where team data resides.
    open class DataPlacementRestrictionSatisfyPolicyDetails: CustomStringConvertible {
        /// Placement restriction.
        public let placementRestriction: TeamLog.PlacementRestriction
        public init(placementRestriction: TeamLog.PlacementRestriction) {
            self.placementRestriction = placementRestriction
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionSatisfyPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionSatisfyPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionSatisfyPolicyDetails) -> JSON {
            let output = [ 
            "placement_restriction": TeamLog.PlacementRestrictionSerializer().serialize(value.placementRestriction),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionSatisfyPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let placementRestriction = TeamLog.PlacementRestrictionSerializer().deserialize(dict["placement_restriction"] ?? .null)
                    return DataPlacementRestrictionSatisfyPolicyDetails(placementRestriction: placementRestriction)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DataPlacementRestrictionSatisfyPolicyType struct
    open class DataPlacementRestrictionSatisfyPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionSatisfyPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionSatisfyPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionSatisfyPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionSatisfyPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DataPlacementRestrictionSatisfyPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested data residency migration for team data.
    open class DataResidencyMigrationRequestSuccessfulDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataResidencyMigrationRequestSuccessfulDetailsSerializer().serialize(self)))"
        }
    }
    open class DataResidencyMigrationRequestSuccessfulDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataResidencyMigrationRequestSuccessfulDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataResidencyMigrationRequestSuccessfulDetails {
            switch json {
                case .dictionary(_):
                    return DataResidencyMigrationRequestSuccessfulDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DataResidencyMigrationRequestSuccessfulType struct
    open class DataResidencyMigrationRequestSuccessfulType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataResidencyMigrationRequestSuccessfulTypeSerializer().serialize(self)))"
        }
    }
    open class DataResidencyMigrationRequestSuccessfulTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataResidencyMigrationRequestSuccessfulType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataResidencyMigrationRequestSuccessfulType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DataResidencyMigrationRequestSuccessfulType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Request for data residency migration for team data has failed.
    open class DataResidencyMigrationRequestUnsuccessfulDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataResidencyMigrationRequestUnsuccessfulDetailsSerializer().serialize(self)))"
        }
    }
    open class DataResidencyMigrationRequestUnsuccessfulDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataResidencyMigrationRequestUnsuccessfulDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataResidencyMigrationRequestUnsuccessfulDetails {
            switch json {
                case .dictionary(_):
                    return DataResidencyMigrationRequestUnsuccessfulDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DataResidencyMigrationRequestUnsuccessfulType struct
    open class DataResidencyMigrationRequestUnsuccessfulType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataResidencyMigrationRequestUnsuccessfulTypeSerializer().serialize(self)))"
        }
    }
    open class DataResidencyMigrationRequestUnsuccessfulTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataResidencyMigrationRequestUnsuccessfulType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataResidencyMigrationRequestUnsuccessfulType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DataResidencyMigrationRequestUnsuccessfulType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for the default number of days until an externally shared link expires
    public enum DefaultLinkExpirationDaysPolicy: CustomStringConvertible {
        /// An unspecified error.
        case day1
        /// An unspecified error.
        case day180
        /// An unspecified error.
        case day3
        /// An unspecified error.
        case day30
        /// An unspecified error.
        case day7
        /// An unspecified error.
        case day90
        /// An unspecified error.
        case none
        /// An unspecified error.
        case year1
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DefaultLinkExpirationDaysPolicySerializer().serialize(self)))"
        }
    }
    open class DefaultLinkExpirationDaysPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DefaultLinkExpirationDaysPolicy) -> JSON {
            switch value {
                case .day1:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_1")
                    return .dictionary(d)
                case .day180:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_180")
                    return .dictionary(d)
                case .day3:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_3")
                    return .dictionary(d)
                case .day30:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_30")
                    return .dictionary(d)
                case .day7:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_7")
                    return .dictionary(d)
                case .day90:
                    var d = [String: JSON]()
                    d[".tag"] = .str("day_90")
                    return .dictionary(d)
                case .none:
                    var d = [String: JSON]()
                    d[".tag"] = .str("none")
                    return .dictionary(d)
                case .year1:
                    var d = [String: JSON]()
                    d[".tag"] = .str("year_1")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DefaultLinkExpirationDaysPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "day_1":
                            return DefaultLinkExpirationDaysPolicy.day1
                        case "day_180":
                            return DefaultLinkExpirationDaysPolicy.day180
                        case "day_3":
                            return DefaultLinkExpirationDaysPolicy.day3
                        case "day_30":
                            return DefaultLinkExpirationDaysPolicy.day30
                        case "day_7":
                            return DefaultLinkExpirationDaysPolicy.day7
                        case "day_90":
                            return DefaultLinkExpirationDaysPolicy.day90
                        case "none":
                            return DefaultLinkExpirationDaysPolicy.none
                        case "year_1":
                            return DefaultLinkExpirationDaysPolicy.year1
                        case "other":
                            return DefaultLinkExpirationDaysPolicy.other
                        default:
                            return DefaultLinkExpirationDaysPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Deleted team invite link.
    open class DeleteTeamInviteLinkDetails: CustomStringConvertible {
        /// The invite link url that was deleted.
        public let linkUrl: String
        public init(linkUrl: String) {
            stringValidator()(linkUrl)
            self.linkUrl = linkUrl
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeleteTeamInviteLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class DeleteTeamInviteLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeleteTeamInviteLinkDetails) -> JSON {
            let output = [ 
            "link_url": Serialization._StringSerializer.serialize(value.linkUrl),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeleteTeamInviteLinkDetails {
            switch json {
                case .dictionary(let dict):
                    let linkUrl = Serialization._StringSerializer.deserialize(dict["link_url"] ?? .null)
                    return DeleteTeamInviteLinkDetails(linkUrl: linkUrl)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeleteTeamInviteLinkType struct
    open class DeleteTeamInviteLinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeleteTeamInviteLinkTypeSerializer().serialize(self)))"
        }
    }
    open class DeleteTeamInviteLinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeleteTeamInviteLinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeleteTeamInviteLinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeleteTeamInviteLinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Device's session logged information.
    open class DeviceSessionLogInfo: CustomStringConvertible {
        /// The IP address of the last activity from this session.
        public let ipAddress: String?
        /// The time this session was created.
        public let created: Date?
        /// The time of the last activity from this session.
        public let updated: Date?
        public init(ipAddress: String? = nil, created: Date? = nil, updated: Date? = nil) {
            nullableValidator(stringValidator())(ipAddress)
            self.ipAddress = ipAddress
            self.created = created
            self.updated = updated
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class DeviceSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceSessionLogInfo) -> JSON {
            var output = [ 
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "created": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.created),
            "updated": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.updated),
            ]
            switch value {
                case let desktopDeviceSession as TeamLog.DesktopDeviceSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.DesktopDeviceSessionLogInfoSerializer().serialize(desktopDeviceSession)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("desktop_device_session")
                case let mobileDeviceSession as TeamLog.MobileDeviceSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.MobileDeviceSessionLogInfoSerializer().serialize(mobileDeviceSession)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("mobile_device_session")
                case let webDeviceSession as TeamLog.WebDeviceSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.WebDeviceSessionLogInfoSerializer().serialize(webDeviceSession)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("web_device_session")
                case let legacyDeviceSession as TeamLog.LegacyDeviceSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.LegacyDeviceSessionLogInfoSerializer().serialize(legacyDeviceSession)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("legacy_device_session")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "desktop_device_session":
                            return TeamLog.DesktopDeviceSessionLogInfoSerializer().deserialize(json)
                        case "mobile_device_session":
                            return TeamLog.MobileDeviceSessionLogInfoSerializer().deserialize(json)
                        case "web_device_session":
                            return TeamLog.WebDeviceSessionLogInfoSerializer().deserialize(json)
                        case "legacy_device_session":
                            return TeamLog.LegacyDeviceSessionLogInfoSerializer().deserialize(json)
                        default:
                            let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                            let created = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["created"] ?? .null)
                            let updated = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["updated"] ?? .null)
                            return DeviceSessionLogInfo(ipAddress: ipAddress, created: created, updated: updated)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Information about linked Dropbox desktop client sessions
    open class DesktopDeviceSessionLogInfo: TeamLog.DeviceSessionLogInfo {
        /// Desktop session unique id.
        public let sessionInfo: TeamLog.DesktopSessionLogInfo?
        /// Name of the hosting desktop.
        public let hostName: String
        /// The Dropbox desktop client type.
        public let clientType: Team.DesktopPlatform
        /// The Dropbox client version.
        public let clientVersion: String?
        /// Information on the hosting platform.
        public let platform: String
        /// Whether itu2019s possible to delete all of the account files upon unlinking.
        public let isDeleteOnUnlinkSupported: Bool
        public init(hostName: String, clientType: Team.DesktopPlatform, platform: String, isDeleteOnUnlinkSupported: Bool, ipAddress: String? = nil, created: Date? = nil, updated: Date? = nil, sessionInfo: TeamLog.DesktopSessionLogInfo? = nil, clientVersion: String? = nil) {
            self.sessionInfo = sessionInfo
            stringValidator()(hostName)
            self.hostName = hostName
            self.clientType = clientType
            nullableValidator(stringValidator())(clientVersion)
            self.clientVersion = clientVersion
            stringValidator()(platform)
            self.platform = platform
            self.isDeleteOnUnlinkSupported = isDeleteOnUnlinkSupported
            super.init(ipAddress: ipAddress, created: created, updated: updated)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DesktopDeviceSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class DesktopDeviceSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DesktopDeviceSessionLogInfo) -> JSON {
            let output = [ 
            "host_name": Serialization._StringSerializer.serialize(value.hostName),
            "client_type": Team.DesktopPlatformSerializer().serialize(value.clientType),
            "platform": Serialization._StringSerializer.serialize(value.platform),
            "is_delete_on_unlink_supported": Serialization._BoolSerializer.serialize(value.isDeleteOnUnlinkSupported),
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "created": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.created),
            "updated": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.updated),
            "session_info": NullableSerializer(TeamLog.DesktopSessionLogInfoSerializer()).serialize(value.sessionInfo),
            "client_version": NullableSerializer(Serialization._StringSerializer).serialize(value.clientVersion),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DesktopDeviceSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let hostName = Serialization._StringSerializer.deserialize(dict["host_name"] ?? .null)
                    let clientType = Team.DesktopPlatformSerializer().deserialize(dict["client_type"] ?? .null)
                    let platform = Serialization._StringSerializer.deserialize(dict["platform"] ?? .null)
                    let isDeleteOnUnlinkSupported = Serialization._BoolSerializer.deserialize(dict["is_delete_on_unlink_supported"] ?? .null)
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    let created = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["created"] ?? .null)
                    let updated = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["updated"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.DesktopSessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let clientVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["client_version"] ?? .null)
                    return DesktopDeviceSessionLogInfo(hostName: hostName, clientType: clientType, platform: platform, isDeleteOnUnlinkSupported: isDeleteOnUnlinkSupported, ipAddress: ipAddress, created: created, updated: updated, sessionInfo: sessionInfo, clientVersion: clientVersion)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Session's logged information.
    open class SessionLogInfo: CustomStringConvertible {
        /// Session ID.
        public let sessionId: String?
        public init(sessionId: String? = nil) {
            nullableValidator(stringValidator())(sessionId)
            self.sessionId = sessionId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class SessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SessionLogInfo) -> JSON {
            var output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            switch value {
                case let web as TeamLog.WebSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(web)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("web")
                case let desktop as TeamLog.DesktopSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.DesktopSessionLogInfoSerializer().serialize(desktop)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("desktop")
                case let mobile as TeamLog.MobileSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.MobileSessionLogInfoSerializer().serialize(mobile)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("mobile")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "web":
                            return TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                        case "desktop":
                            return TeamLog.DesktopSessionLogInfoSerializer().deserialize(json)
                        case "mobile":
                            return TeamLog.MobileSessionLogInfoSerializer().deserialize(json)
                        default:
                            let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                            return SessionLogInfo(sessionId: sessionId)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Desktop session.
    open class DesktopSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DesktopSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class DesktopSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DesktopSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DesktopSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return DesktopSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to device approvals exception list.
    open class DeviceApprovalsAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return DeviceApprovalsAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsAddExceptionType struct
    open class DeviceApprovalsAddExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsAddExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsAddExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsAddExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsAddExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsAddExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set/removed limit on number of computers member can link to team Dropbox account.
    open class DeviceApprovalsChangeDesktopPolicyDetails: CustomStringConvertible {
        /// New desktop device approvals policy. Might be missing due to historical data gap.
        public let newValue: TeamLog.DeviceApprovalsPolicy?
        /// Previous desktop device approvals policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.DeviceApprovalsPolicy?
        public init(newValue: TeamLog.DeviceApprovalsPolicy? = nil, previousValue: TeamLog.DeviceApprovalsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeDesktopPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeDesktopPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeDesktopPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeDesktopPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeDesktopPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsChangeDesktopPolicyType struct
    open class DeviceApprovalsChangeDesktopPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeDesktopPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeDesktopPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeDesktopPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeDesktopPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsChangeDesktopPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set/removed limit on number of mobile devices member can link to team Dropbox account.
    open class DeviceApprovalsChangeMobilePolicyDetails: CustomStringConvertible {
        /// New mobile device approvals policy. Might be missing due to historical data gap.
        public let newValue: TeamLog.DeviceApprovalsPolicy?
        /// Previous mobile device approvals policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.DeviceApprovalsPolicy?
        public init(newValue: TeamLog.DeviceApprovalsPolicy? = nil, previousValue: TeamLog.DeviceApprovalsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeMobilePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeMobilePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeMobilePolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeMobilePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeMobilePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsChangeMobilePolicyType struct
    open class DeviceApprovalsChangeMobilePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeMobilePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeMobilePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeMobilePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeMobilePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsChangeMobilePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed device approvals setting when member is over limit.
    open class DeviceApprovalsChangeOverageActionDetails: CustomStringConvertible {
        /// New over the limits policy. Might be missing due to historical data gap.
        public let newValue: TeamPolicies.RolloutMethod?
        /// Previous over the limit policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.RolloutMethod?
        public init(newValue: TeamPolicies.RolloutMethod? = nil, previousValue: TeamPolicies.RolloutMethod? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeOverageActionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeOverageActionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeOverageActionDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamPolicies.RolloutMethodSerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.RolloutMethodSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeOverageActionDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamPolicies.RolloutMethodSerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.RolloutMethodSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeOverageActionDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsChangeOverageActionType struct
    open class DeviceApprovalsChangeOverageActionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeOverageActionTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeOverageActionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeOverageActionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeOverageActionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsChangeOverageActionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed device approvals setting when member unlinks approved device.
    open class DeviceApprovalsChangeUnlinkActionDetails: CustomStringConvertible {
        /// New device unlink policy. Might be missing due to historical data gap.
        public let newValue: TeamLog.DeviceUnlinkPolicy?
        /// Previous device unlink policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.DeviceUnlinkPolicy?
        public init(newValue: TeamLog.DeviceUnlinkPolicy? = nil, previousValue: TeamLog.DeviceUnlinkPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeUnlinkActionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeUnlinkActionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeUnlinkActionDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeUnlinkActionDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeUnlinkActionDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsChangeUnlinkActionType struct
    open class DeviceApprovalsChangeUnlinkActionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeUnlinkActionTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeUnlinkActionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeUnlinkActionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeUnlinkActionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsChangeUnlinkActionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsPolicy union
    public enum DeviceApprovalsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case limited
        /// An unspecified error.
        case unlimited
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsPolicySerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsPolicy) -> JSON {
            switch value {
                case .limited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("limited")
                    return .dictionary(d)
                case .unlimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlimited")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "limited":
                            return DeviceApprovalsPolicy.limited
                        case "unlimited":
                            return DeviceApprovalsPolicy.unlimited
                        case "other":
                            return DeviceApprovalsPolicy.other
                        default:
                            return DeviceApprovalsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Removed members from device approvals exception list.
    open class DeviceApprovalsRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return DeviceApprovalsRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsRemoveExceptionType struct
    open class DeviceApprovalsRemoveExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsRemoveExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsRemoveExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsRemoveExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsRemoveExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceApprovalsRemoveExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed IP address associated with active desktop session.
    open class DeviceChangeIpDesktopDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let deviceSessionInfo: TeamLog.DeviceSessionLogInfo
        public init(deviceSessionInfo: TeamLog.DeviceSessionLogInfo) {
            self.deviceSessionInfo = deviceSessionInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpDesktopDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpDesktopDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpDesktopDetails) -> JSON {
            let output = [ 
            "device_session_info": TeamLog.DeviceSessionLogInfoSerializer().serialize(value.deviceSessionInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpDesktopDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceSessionInfo = TeamLog.DeviceSessionLogInfoSerializer().deserialize(dict["device_session_info"] ?? .null)
                    return DeviceChangeIpDesktopDetails(deviceSessionInfo: deviceSessionInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceChangeIpDesktopType struct
    open class DeviceChangeIpDesktopType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpDesktopTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpDesktopTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpDesktopType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpDesktopType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceChangeIpDesktopType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed IP address associated with active mobile session.
    open class DeviceChangeIpMobileDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let deviceSessionInfo: TeamLog.DeviceSessionLogInfo?
        public init(deviceSessionInfo: TeamLog.DeviceSessionLogInfo? = nil) {
            self.deviceSessionInfo = deviceSessionInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpMobileDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpMobileDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpMobileDetails) -> JSON {
            let output = [ 
            "device_session_info": NullableSerializer(TeamLog.DeviceSessionLogInfoSerializer()).serialize(value.deviceSessionInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpMobileDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceSessionInfo = NullableSerializer(TeamLog.DeviceSessionLogInfoSerializer()).deserialize(dict["device_session_info"] ?? .null)
                    return DeviceChangeIpMobileDetails(deviceSessionInfo: deviceSessionInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceChangeIpMobileType struct
    open class DeviceChangeIpMobileType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpMobileTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpMobileTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpMobileType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpMobileType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceChangeIpMobileType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed IP address associated with active web session.
    open class DeviceChangeIpWebDetails: CustomStringConvertible {
        /// Web browser name.
        public let userAgent: String
        public init(userAgent: String) {
            stringValidator()(userAgent)
            self.userAgent = userAgent
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpWebDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpWebDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpWebDetails) -> JSON {
            let output = [ 
            "user_agent": Serialization._StringSerializer.serialize(value.userAgent),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpWebDetails {
            switch json {
                case .dictionary(let dict):
                    let userAgent = Serialization._StringSerializer.deserialize(dict["user_agent"] ?? .null)
                    return DeviceChangeIpWebDetails(userAgent: userAgent)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceChangeIpWebType struct
    open class DeviceChangeIpWebType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpWebTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpWebTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpWebType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpWebType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceChangeIpWebType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to delete all files from unlinked device.
    open class DeviceDeleteOnUnlinkFailDetails: CustomStringConvertible {
        /// Session unique id.
        public let sessionInfo: TeamLog.SessionLogInfo?
        /// The device name. Might be missing due to historical data gap.
        public let displayName: String?
        /// The number of times that remote file deletion failed.
        public let numFailures: Int64
        public init(numFailures: Int64, sessionInfo: TeamLog.SessionLogInfo? = nil, displayName: String? = nil) {
            self.sessionInfo = sessionInfo
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            comparableValidator()(numFailures)
            self.numFailures = numFailures
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkFailDetails) -> JSON {
            let output = [ 
            "num_failures": Serialization._Int64Serializer.serialize(value.numFailures),
            "session_info": NullableSerializer(TeamLog.SessionLogInfoSerializer()).serialize(value.sessionInfo),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkFailDetails {
            switch json {
                case .dictionary(let dict):
                    let numFailures = Serialization._Int64Serializer.deserialize(dict["num_failures"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.SessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return DeviceDeleteOnUnlinkFailDetails(numFailures: numFailures, sessionInfo: sessionInfo, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceDeleteOnUnlinkFailType struct
    open class DeviceDeleteOnUnlinkFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkFailTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceDeleteOnUnlinkFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted all files from unlinked device.
    open class DeviceDeleteOnUnlinkSuccessDetails: CustomStringConvertible {
        /// Session unique id.
        public let sessionInfo: TeamLog.SessionLogInfo?
        /// The device name. Might be missing due to historical data gap.
        public let displayName: String?
        public init(sessionInfo: TeamLog.SessionLogInfo? = nil, displayName: String? = nil) {
            self.sessionInfo = sessionInfo
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkSuccessDetails) -> JSON {
            let output = [ 
            "session_info": NullableSerializer(TeamLog.SessionLogInfoSerializer()).serialize(value.sessionInfo),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let sessionInfo = NullableSerializer(TeamLog.SessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return DeviceDeleteOnUnlinkSuccessDetails(sessionInfo: sessionInfo, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceDeleteOnUnlinkSuccessType struct
    open class DeviceDeleteOnUnlinkSuccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkSuccessTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkSuccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkSuccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkSuccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceDeleteOnUnlinkSuccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to link device.
    open class DeviceLinkFailDetails: CustomStringConvertible {
        /// IP address. Might be missing due to historical data gap.
        public let ipAddress: String?
        /// A description of the device used while user approval blocked.
        public let deviceType: TeamLog.DeviceType
        public init(deviceType: TeamLog.DeviceType, ipAddress: String? = nil) {
            nullableValidator(stringValidator())(ipAddress)
            self.ipAddress = ipAddress
            self.deviceType = deviceType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkFailDetails) -> JSON {
            let output = [ 
            "device_type": TeamLog.DeviceTypeSerializer().serialize(value.deviceType),
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkFailDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceType = TeamLog.DeviceTypeSerializer().deserialize(dict["device_type"] ?? .null)
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    return DeviceLinkFailDetails(deviceType: deviceType, ipAddress: ipAddress)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceLinkFailType struct
    open class DeviceLinkFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkFailTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceLinkFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked device.
    open class DeviceLinkSuccessDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let deviceSessionInfo: TeamLog.DeviceSessionLogInfo?
        public init(deviceSessionInfo: TeamLog.DeviceSessionLogInfo? = nil) {
            self.deviceSessionInfo = deviceSessionInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkSuccessDetails) -> JSON {
            let output = [ 
            "device_session_info": NullableSerializer(TeamLog.DeviceSessionLogInfoSerializer()).serialize(value.deviceSessionInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceSessionInfo = NullableSerializer(TeamLog.DeviceSessionLogInfoSerializer()).deserialize(dict["device_session_info"] ?? .null)
                    return DeviceLinkSuccessDetails(deviceSessionInfo: deviceSessionInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceLinkSuccessType struct
    open class DeviceLinkSuccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkSuccessTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkSuccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkSuccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkSuccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceLinkSuccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disabled device management.
    open class DeviceManagementDisabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementDisabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementDisabledDetails {
            switch json {
                case .dictionary(_):
                    return DeviceManagementDisabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceManagementDisabledType struct
    open class DeviceManagementDisabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementDisabledTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementDisabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementDisabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementDisabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceManagementDisabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled device management.
    open class DeviceManagementEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementEnabledDetails {
            switch json {
                case .dictionary(_):
                    return DeviceManagementEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceManagementEnabledType struct
    open class DeviceManagementEnabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementEnabledTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementEnabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementEnabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementEnabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceManagementEnabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled backup for computer.
    open class DeviceSyncBackupStatusChangedDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo
        /// Previous status of computer backup on the device.
        public let previousValue: TeamLog.BackupStatus
        /// Next status of computer backup on the device.
        public let newValue: TeamLog.BackupStatus
        public init(desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo, previousValue: TeamLog.BackupStatus, newValue: TeamLog.BackupStatus) {
            self.desktopDeviceSessionInfo = desktopDeviceSessionInfo
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceSyncBackupStatusChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceSyncBackupStatusChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceSyncBackupStatusChangedDetails) -> JSON {
            let output = [ 
            "desktop_device_session_info": TeamLog.DesktopDeviceSessionLogInfoSerializer().serialize(value.desktopDeviceSessionInfo),
            "previous_value": TeamLog.BackupStatusSerializer().serialize(value.previousValue),
            "new_value": TeamLog.BackupStatusSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceSyncBackupStatusChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let desktopDeviceSessionInfo = TeamLog.DesktopDeviceSessionLogInfoSerializer().deserialize(dict["desktop_device_session_info"] ?? .null)
                    let previousValue = TeamLog.BackupStatusSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.BackupStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    return DeviceSyncBackupStatusChangedDetails(desktopDeviceSessionInfo: desktopDeviceSessionInfo, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceSyncBackupStatusChangedType struct
    open class DeviceSyncBackupStatusChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceSyncBackupStatusChangedTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceSyncBackupStatusChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceSyncBackupStatusChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceSyncBackupStatusChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceSyncBackupStatusChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceType union
    public enum DeviceType: CustomStringConvertible {
        /// An unspecified error.
        case desktop
        /// An unspecified error.
        case mobile
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceType) -> JSON {
            switch value {
                case .desktop:
                    var d = [String: JSON]()
                    d[".tag"] = .str("desktop")
                    return .dictionary(d)
                case .mobile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("mobile")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "desktop":
                            return DeviceType.desktop
                        case "mobile":
                            return DeviceType.mobile
                        case "other":
                            return DeviceType.other
                        default:
                            return DeviceType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disconnected device.
    open class DeviceUnlinkDetails: CustomStringConvertible {
        /// Session unique id.
        public let sessionInfo: TeamLog.SessionLogInfo?
        /// The device name. Might be missing due to historical data gap.
        public let displayName: String?
        /// True if the user requested to delete data after device unlink, false otherwise.
        public let deleteData: Bool
        public init(deleteData: Bool, sessionInfo: TeamLog.SessionLogInfo? = nil, displayName: String? = nil) {
            self.sessionInfo = sessionInfo
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            self.deleteData = deleteData
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceUnlinkDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceUnlinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceUnlinkDetails) -> JSON {
            let output = [ 
            "delete_data": Serialization._BoolSerializer.serialize(value.deleteData),
            "session_info": NullableSerializer(TeamLog.SessionLogInfoSerializer()).serialize(value.sessionInfo),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceUnlinkDetails {
            switch json {
                case .dictionary(let dict):
                    let deleteData = Serialization._BoolSerializer.deserialize(dict["delete_data"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.SessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return DeviceUnlinkDetails(deleteData: deleteData, sessionInfo: sessionInfo, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceUnlinkPolicy union
    public enum DeviceUnlinkPolicy: CustomStringConvertible {
        /// An unspecified error.
        case keep
        /// An unspecified error.
        case remove
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceUnlinkPolicySerializer().serialize(self)))"
        }
    }
    open class DeviceUnlinkPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceUnlinkPolicy) -> JSON {
            switch value {
                case .keep:
                    var d = [String: JSON]()
                    d[".tag"] = .str("keep")
                    return .dictionary(d)
                case .remove:
                    var d = [String: JSON]()
                    d[".tag"] = .str("remove")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceUnlinkPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "keep":
                            return DeviceUnlinkPolicy.keep
                        case "remove":
                            return DeviceUnlinkPolicy.remove
                        case "other":
                            return DeviceUnlinkPolicy.other
                        default:
                            return DeviceUnlinkPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The DeviceUnlinkType struct
    open class DeviceUnlinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceUnlinkTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceUnlinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceUnlinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceUnlinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DeviceUnlinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to directory restrictions list.
    open class DirectoryRestrictionsAddMembersDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DirectoryRestrictionsAddMembersDetailsSerializer().serialize(self)))"
        }
    }
    open class DirectoryRestrictionsAddMembersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DirectoryRestrictionsAddMembersDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DirectoryRestrictionsAddMembersDetails {
            switch json {
                case .dictionary(_):
                    return DirectoryRestrictionsAddMembersDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DirectoryRestrictionsAddMembersType struct
    open class DirectoryRestrictionsAddMembersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DirectoryRestrictionsAddMembersTypeSerializer().serialize(self)))"
        }
    }
    open class DirectoryRestrictionsAddMembersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DirectoryRestrictionsAddMembersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DirectoryRestrictionsAddMembersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DirectoryRestrictionsAddMembersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed members from directory restrictions list.
    open class DirectoryRestrictionsRemoveMembersDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DirectoryRestrictionsRemoveMembersDetailsSerializer().serialize(self)))"
        }
    }
    open class DirectoryRestrictionsRemoveMembersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DirectoryRestrictionsRemoveMembersDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DirectoryRestrictionsRemoveMembersDetails {
            switch json {
                case .dictionary(_):
                    return DirectoryRestrictionsRemoveMembersDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DirectoryRestrictionsRemoveMembersType struct
    open class DirectoryRestrictionsRemoveMembersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DirectoryRestrictionsRemoveMembersTypeSerializer().serialize(self)))"
        }
    }
    open class DirectoryRestrictionsRemoveMembersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DirectoryRestrictionsRemoveMembersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DirectoryRestrictionsRemoveMembersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DirectoryRestrictionsRemoveMembersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disabled domain invites.
    open class DisabledDomainInvitesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DisabledDomainInvitesDetailsSerializer().serialize(self)))"
        }
    }
    open class DisabledDomainInvitesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DisabledDomainInvitesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DisabledDomainInvitesDetails {
            switch json {
                case .dictionary(_):
                    return DisabledDomainInvitesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DisabledDomainInvitesType struct
    open class DisabledDomainInvitesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DisabledDomainInvitesTypeSerializer().serialize(self)))"
        }
    }
    open class DisabledDomainInvitesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DisabledDomainInvitesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DisabledDomainInvitesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DisabledDomainInvitesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DispositionActionType union
    public enum DispositionActionType: CustomStringConvertible {
        /// An unspecified error.
        case automaticDelete
        /// An unspecified error.
        case automaticPermanentlyDelete
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DispositionActionTypeSerializer().serialize(self)))"
        }
    }
    open class DispositionActionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DispositionActionType) -> JSON {
            switch value {
                case .automaticDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("automatic_delete")
                    return .dictionary(d)
                case .automaticPermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("automatic_permanently_delete")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DispositionActionType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "automatic_delete":
                            return DispositionActionType.automaticDelete
                        case "automatic_permanently_delete":
                            return DispositionActionType.automaticPermanentlyDelete
                        case "other":
                            return DispositionActionType.other
                        default:
                            return DispositionActionType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Approved user's request to join team.
    open class DomainInvitesApproveRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesApproveRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesApproveRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesApproveRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesApproveRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesApproveRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesApproveRequestToJoinTeamType struct
    open class DomainInvitesApproveRequestToJoinTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesApproveRequestToJoinTeamTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesApproveRequestToJoinTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesApproveRequestToJoinTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesApproveRequestToJoinTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesApproveRequestToJoinTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Declined user's request to join team.
    open class DomainInvitesDeclineRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesDeclineRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesDeclineRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesDeclineRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesDeclineRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesDeclineRequestToJoinTeamType struct
    open class DomainInvitesDeclineRequestToJoinTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesDeclineRequestToJoinTeamTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesDeclineRequestToJoinTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesDeclineRequestToJoinTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesDeclineRequestToJoinTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesDeclineRequestToJoinTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent domain invites to existing domain accounts.
    open class DomainInvitesEmailExistingUsersDetails: CustomStringConvertible {
        /// Domain names.
        public let domainName: String
        /// Number of recipients.
        public let numRecipients: UInt64
        public init(domainName: String, numRecipients: UInt64) {
            stringValidator()(domainName)
            self.domainName = domainName
            comparableValidator()(numRecipients)
            self.numRecipients = numRecipients
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesEmailExistingUsersDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesEmailExistingUsersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesEmailExistingUsersDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            "num_recipients": Serialization._UInt64Serializer.serialize(value.numRecipients),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesEmailExistingUsersDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    let numRecipients = Serialization._UInt64Serializer.deserialize(dict["num_recipients"] ?? .null)
                    return DomainInvitesEmailExistingUsersDetails(domainName: domainName, numRecipients: numRecipients)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesEmailExistingUsersType struct
    open class DomainInvitesEmailExistingUsersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesEmailExistingUsersTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesEmailExistingUsersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesEmailExistingUsersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesEmailExistingUsersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesEmailExistingUsersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested to join team.
    open class DomainInvitesRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesRequestToJoinTeamType struct
    open class DomainInvitesRequestToJoinTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesRequestToJoinTeamTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesRequestToJoinTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesRequestToJoinTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesRequestToJoinTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesRequestToJoinTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disabled "Automatically invite new users".
    open class DomainInvitesSetInviteNewUserPrefToNoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToNoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToNoDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesSetInviteNewUserPrefToNoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesSetInviteNewUserPrefToNoType struct
    open class DomainInvitesSetInviteNewUserPrefToNoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToNoTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToNoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToNoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToNoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesSetInviteNewUserPrefToNoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled "Automatically invite new users".
    open class DomainInvitesSetInviteNewUserPrefToYesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToYesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToYesDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesSetInviteNewUserPrefToYesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainInvitesSetInviteNewUserPrefToYesType struct
    open class DomainInvitesSetInviteNewUserPrefToYesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToYesTypeSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToYesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToYesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToYesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainInvitesSetInviteNewUserPrefToYesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to verify team domain.
    open class DomainVerificationAddDomainFailDetails: CustomStringConvertible {
        /// Domain name.
        public let domainName: String
        /// Domain name verification method. Might be missing due to historical data gap.
        public let verificationMethod: String?
        public init(domainName: String, verificationMethod: String? = nil) {
            stringValidator()(domainName)
            self.domainName = domainName
            nullableValidator(stringValidator())(verificationMethod)
            self.verificationMethod = verificationMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainFailDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            "verification_method": NullableSerializer(Serialization._StringSerializer).serialize(value.verificationMethod),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainFailDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    let verificationMethod = NullableSerializer(Serialization._StringSerializer).deserialize(dict["verification_method"] ?? .null)
                    return DomainVerificationAddDomainFailDetails(domainName: domainName, verificationMethod: verificationMethod)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainVerificationAddDomainFailType struct
    open class DomainVerificationAddDomainFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainFailTypeSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainVerificationAddDomainFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Verified team domain.
    open class DomainVerificationAddDomainSuccessDetails: CustomStringConvertible {
        /// Domain names.
        public let domainNames: Array<String>
        /// Domain name verification method. Might be missing due to historical data gap.
        public let verificationMethod: String?
        public init(domainNames: Array<String>, verificationMethod: String? = nil) {
            arrayValidator(itemValidator: stringValidator())(domainNames)
            self.domainNames = domainNames
            nullableValidator(stringValidator())(verificationMethod)
            self.verificationMethod = verificationMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainSuccessDetails) -> JSON {
            let output = [ 
            "domain_names": ArraySerializer(Serialization._StringSerializer).serialize(value.domainNames),
            "verification_method": NullableSerializer(Serialization._StringSerializer).serialize(value.verificationMethod),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let domainNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["domain_names"] ?? .null)
                    let verificationMethod = NullableSerializer(Serialization._StringSerializer).deserialize(dict["verification_method"] ?? .null)
                    return DomainVerificationAddDomainSuccessDetails(domainNames: domainNames, verificationMethod: verificationMethod)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainVerificationAddDomainSuccessType struct
    open class DomainVerificationAddDomainSuccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainSuccessTypeSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainSuccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainSuccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainSuccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainVerificationAddDomainSuccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed domain from list of verified team domains.
    open class DomainVerificationRemoveDomainDetails: CustomStringConvertible {
        /// Domain names.
        public let domainNames: Array<String>
        public init(domainNames: Array<String>) {
            arrayValidator(itemValidator: stringValidator())(domainNames)
            self.domainNames = domainNames
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationRemoveDomainDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationRemoveDomainDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationRemoveDomainDetails) -> JSON {
            let output = [ 
            "domain_names": ArraySerializer(Serialization._StringSerializer).serialize(value.domainNames),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationRemoveDomainDetails {
            switch json {
                case .dictionary(let dict):
                    let domainNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["domain_names"] ?? .null)
                    return DomainVerificationRemoveDomainDetails(domainNames: domainNames)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DomainVerificationRemoveDomainType struct
    open class DomainVerificationRemoveDomainType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationRemoveDomainTypeSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationRemoveDomainTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationRemoveDomainType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationRemoveDomainType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DomainVerificationRemoveDomainType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared content downloads policy
    public enum DownloadPolicyType: CustomStringConvertible {
        /// An unspecified error.
        case allow
        /// An unspecified error.
        case disallow
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DownloadPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class DownloadPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DownloadPolicyType) -> JSON {
            switch value {
                case .allow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow")
                    return .dictionary(d)
                case .disallow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disallow")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DownloadPolicyType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allow":
                            return DownloadPolicyType.allow
                        case "disallow":
                            return DownloadPolicyType.disallow
                        case "other":
                            return DownloadPolicyType.other
                        default:
                            return DownloadPolicyType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Exported passwords.
    open class DropboxPasswordsExportedDetails: CustomStringConvertible {
        /// The platform the device runs export.
        public let platform: String
        public init(platform: String) {
            stringValidator()(platform)
            self.platform = platform
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsExportedDetailsSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsExportedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsExportedDetails) -> JSON {
            let output = [ 
            "platform": Serialization._StringSerializer.serialize(value.platform),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsExportedDetails {
            switch json {
                case .dictionary(let dict):
                    let platform = Serialization._StringSerializer.deserialize(dict["platform"] ?? .null)
                    return DropboxPasswordsExportedDetails(platform: platform)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DropboxPasswordsExportedType struct
    open class DropboxPasswordsExportedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsExportedTypeSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsExportedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsExportedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsExportedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DropboxPasswordsExportedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enrolled new Dropbox Passwords device.
    open class DropboxPasswordsNewDeviceEnrolledDetails: CustomStringConvertible {
        /// Whether it's a first device enrolled.
        public let isFirstDevice: Bool
        /// The platform the device is enrolled.
        public let platform: String
        public init(isFirstDevice: Bool, platform: String) {
            self.isFirstDevice = isFirstDevice
            stringValidator()(platform)
            self.platform = platform
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsNewDeviceEnrolledDetailsSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsNewDeviceEnrolledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsNewDeviceEnrolledDetails) -> JSON {
            let output = [ 
            "is_first_device": Serialization._BoolSerializer.serialize(value.isFirstDevice),
            "platform": Serialization._StringSerializer.serialize(value.platform),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsNewDeviceEnrolledDetails {
            switch json {
                case .dictionary(let dict):
                    let isFirstDevice = Serialization._BoolSerializer.deserialize(dict["is_first_device"] ?? .null)
                    let platform = Serialization._StringSerializer.deserialize(dict["platform"] ?? .null)
                    return DropboxPasswordsNewDeviceEnrolledDetails(isFirstDevice: isFirstDevice, platform: platform)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DropboxPasswordsNewDeviceEnrolledType struct
    open class DropboxPasswordsNewDeviceEnrolledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsNewDeviceEnrolledTypeSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsNewDeviceEnrolledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsNewDeviceEnrolledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsNewDeviceEnrolledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DropboxPasswordsNewDeviceEnrolledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether team users can use Dropbox Passwords
    public enum DropboxPasswordsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsPolicySerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return DropboxPasswordsPolicy.default_
                        case "disabled":
                            return DropboxPasswordsPolicy.disabled
                        case "enabled":
                            return DropboxPasswordsPolicy.enabled
                        case "other":
                            return DropboxPasswordsPolicy.other
                        default:
                            return DropboxPasswordsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed Dropbox Passwords policy for team.
    open class DropboxPasswordsPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.DropboxPasswordsPolicy
        /// From.
        public let previousValue: TeamLog.DropboxPasswordsPolicy
        public init(newValue: TeamLog.DropboxPasswordsPolicy, previousValue: TeamLog.DropboxPasswordsPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.DropboxPasswordsPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.DropboxPasswordsPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.DropboxPasswordsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.DropboxPasswordsPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return DropboxPasswordsPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DropboxPasswordsPolicyChangedType struct
    open class DropboxPasswordsPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DropboxPasswordsPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class DropboxPasswordsPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DropboxPasswordsPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DropboxPasswordsPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return DropboxPasswordsPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Represents a time duration: unit and amount
    open class DurationLogInfo: CustomStringConvertible {
        /// Time unit.
        public let unit: TeamLog.TimeUnit
        /// Amount of time.
        public let amount: UInt64
        public init(unit: TeamLog.TimeUnit, amount: UInt64) {
            self.unit = unit
            comparableValidator()(amount)
            self.amount = amount
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DurationLogInfoSerializer().serialize(self)))"
        }
    }
    open class DurationLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DurationLogInfo) -> JSON {
            let output = [ 
            "unit": TeamLog.TimeUnitSerializer().serialize(value.unit),
            "amount": Serialization._UInt64Serializer.serialize(value.amount),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DurationLogInfo {
            switch json {
                case .dictionary(let dict):
                    let unit = TeamLog.TimeUnitSerializer().deserialize(dict["unit"] ?? .null)
                    let amount = Serialization._UInt64Serializer.deserialize(dict["amount"] ?? .null)
                    return DurationLogInfo(unit: unit, amount: amount)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether a team can use Email to Dropbox feature
    public enum EmailIngestPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmailIngestPolicySerializer().serialize(self)))"
        }
    }
    open class EmailIngestPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmailIngestPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EmailIngestPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return EmailIngestPolicy.disabled
                        case "enabled":
                            return EmailIngestPolicy.enabled
                        case "other":
                            return EmailIngestPolicy.other
                        default:
                            return EmailIngestPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed email to Dropbox policy for team.
    open class EmailIngestPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.EmailIngestPolicy
        /// From.
        public let previousValue: TeamLog.EmailIngestPolicy
        public init(newValue: TeamLog.EmailIngestPolicy, previousValue: TeamLog.EmailIngestPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmailIngestPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class EmailIngestPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmailIngestPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.EmailIngestPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.EmailIngestPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmailIngestPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.EmailIngestPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.EmailIngestPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return EmailIngestPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmailIngestPolicyChangedType struct
    open class EmailIngestPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmailIngestPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class EmailIngestPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmailIngestPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmailIngestPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmailIngestPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Received files via Email to Dropbox.
    open class EmailIngestReceiveFileDetails: CustomStringConvertible {
        /// Inbox name.
        public let inboxName: String
        /// Submitted file names.
        public let attachmentNames: Array<String>
        /// Subject of the email.
        public let subject: String?
        /// The name as provided by the submitter.
        public let fromName: String?
        /// The email as provided by the submitter.
        public let fromEmail: String?
        public init(inboxName: String, attachmentNames: Array<String>, subject: String? = nil, fromName: String? = nil, fromEmail: String? = nil) {
            stringValidator()(inboxName)
            self.inboxName = inboxName
            arrayValidator(itemValidator: stringValidator())(attachmentNames)
            self.attachmentNames = attachmentNames
            nullableValidator(stringValidator())(subject)
            self.subject = subject
            nullableValidator(stringValidator())(fromName)
            self.fromName = fromName
            nullableValidator(stringValidator(maxLength: 255))(fromEmail)
            self.fromEmail = fromEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmailIngestReceiveFileDetailsSerializer().serialize(self)))"
        }
    }
    open class EmailIngestReceiveFileDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmailIngestReceiveFileDetails) -> JSON {
            let output = [ 
            "inbox_name": Serialization._StringSerializer.serialize(value.inboxName),
            "attachment_names": ArraySerializer(Serialization._StringSerializer).serialize(value.attachmentNames),
            "subject": NullableSerializer(Serialization._StringSerializer).serialize(value.subject),
            "from_name": NullableSerializer(Serialization._StringSerializer).serialize(value.fromName),
            "from_email": NullableSerializer(Serialization._StringSerializer).serialize(value.fromEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmailIngestReceiveFileDetails {
            switch json {
                case .dictionary(let dict):
                    let inboxName = Serialization._StringSerializer.deserialize(dict["inbox_name"] ?? .null)
                    let attachmentNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["attachment_names"] ?? .null)
                    let subject = NullableSerializer(Serialization._StringSerializer).deserialize(dict["subject"] ?? .null)
                    let fromName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["from_name"] ?? .null)
                    let fromEmail = NullableSerializer(Serialization._StringSerializer).deserialize(dict["from_email"] ?? .null)
                    return EmailIngestReceiveFileDetails(inboxName: inboxName, attachmentNames: attachmentNames, subject: subject, fromName: fromName, fromEmail: fromEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmailIngestReceiveFileType struct
    open class EmailIngestReceiveFileType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmailIngestReceiveFileTypeSerializer().serialize(self)))"
        }
    }
    open class EmailIngestReceiveFileTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmailIngestReceiveFileType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmailIngestReceiveFileType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmailIngestReceiveFileType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to EMM exception list.
    open class EmmAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return EmmAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmAddExceptionType struct
    open class EmmAddExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmAddExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class EmmAddExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmAddExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmAddExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmAddExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled enterprise mobility management for members.
    open class EmmChangePolicyDetails: CustomStringConvertible {
        /// New enterprise mobility management policy.
        public let newValue: TeamPolicies.EmmState
        /// Previous enterprise mobility management policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.EmmState?
        public init(newValue: TeamPolicies.EmmState, previousValue: TeamPolicies.EmmState? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.EmmStateSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.EmmStateSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.EmmStateSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.EmmStateSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return EmmChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmChangePolicyType struct
    open class EmmChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class EmmChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created EMM-excluded users report.
    open class EmmCreateExceptionsReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateExceptionsReportDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmCreateExceptionsReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateExceptionsReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateExceptionsReportDetails {
            switch json {
                case .dictionary(_):
                    return EmmCreateExceptionsReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmCreateExceptionsReportType struct
    open class EmmCreateExceptionsReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateExceptionsReportTypeSerializer().serialize(self)))"
        }
    }
    open class EmmCreateExceptionsReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateExceptionsReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateExceptionsReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmCreateExceptionsReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created EMM mobile app usage report.
    open class EmmCreateUsageReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateUsageReportDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmCreateUsageReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateUsageReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateUsageReportDetails {
            switch json {
                case .dictionary(_):
                    return EmmCreateUsageReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmCreateUsageReportType struct
    open class EmmCreateUsageReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateUsageReportTypeSerializer().serialize(self)))"
        }
    }
    open class EmmCreateUsageReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateUsageReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateUsageReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmCreateUsageReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to sign in via EMM.
    open class EmmErrorDetails: CustomStringConvertible {
        /// Error details.
        public let errorDetails: TeamLog.FailureDetailsLogInfo
        public init(errorDetails: TeamLog.FailureDetailsLogInfo) {
            self.errorDetails = errorDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmErrorDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmErrorDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmErrorDetails) -> JSON {
            let output = [ 
            "error_details": TeamLog.FailureDetailsLogInfoSerializer().serialize(value.errorDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmErrorDetails {
            switch json {
                case .dictionary(let dict):
                    let errorDetails = TeamLog.FailureDetailsLogInfoSerializer().deserialize(dict["error_details"] ?? .null)
                    return EmmErrorDetails(errorDetails: errorDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmErrorType struct
    open class EmmErrorType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmErrorTypeSerializer().serialize(self)))"
        }
    }
    open class EmmErrorTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmErrorType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmErrorType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmErrorType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Refreshed auth token used for setting up EMM.
    open class EmmRefreshAuthTokenDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRefreshAuthTokenDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmRefreshAuthTokenDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRefreshAuthTokenDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRefreshAuthTokenDetails {
            switch json {
                case .dictionary(_):
                    return EmmRefreshAuthTokenDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmRefreshAuthTokenType struct
    open class EmmRefreshAuthTokenType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRefreshAuthTokenTypeSerializer().serialize(self)))"
        }
    }
    open class EmmRefreshAuthTokenTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRefreshAuthTokenType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRefreshAuthTokenType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmRefreshAuthTokenType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed members from EMM exception list.
    open class EmmRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return EmmRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EmmRemoveExceptionType struct
    open class EmmRemoveExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRemoveExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class EmmRemoveExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRemoveExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRemoveExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EmmRemoveExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled domain invites.
    open class EnabledDomainInvitesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnabledDomainInvitesDetailsSerializer().serialize(self)))"
        }
    }
    open class EnabledDomainInvitesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnabledDomainInvitesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EnabledDomainInvitesDetails {
            switch json {
                case .dictionary(_):
                    return EnabledDomainInvitesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EnabledDomainInvitesType struct
    open class EnabledDomainInvitesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnabledDomainInvitesTypeSerializer().serialize(self)))"
        }
    }
    open class EnabledDomainInvitesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnabledDomainInvitesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EnabledDomainInvitesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EnabledDomainInvitesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended enterprise admin session.
    open class EndedEnterpriseAdminSessionDeprecatedDetails: CustomStringConvertible {
        /// More information about the organization or team.
        public let federationExtraDetails: TeamLog.FedExtraDetails
        public init(federationExtraDetails: TeamLog.FedExtraDetails) {
            self.federationExtraDetails = federationExtraDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EndedEnterpriseAdminSessionDeprecatedDetailsSerializer().serialize(self)))"
        }
    }
    open class EndedEnterpriseAdminSessionDeprecatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EndedEnterpriseAdminSessionDeprecatedDetails) -> JSON {
            let output = [ 
            "federation_extra_details": TeamLog.FedExtraDetailsSerializer().serialize(value.federationExtraDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EndedEnterpriseAdminSessionDeprecatedDetails {
            switch json {
                case .dictionary(let dict):
                    let federationExtraDetails = TeamLog.FedExtraDetailsSerializer().deserialize(dict["federation_extra_details"] ?? .null)
                    return EndedEnterpriseAdminSessionDeprecatedDetails(federationExtraDetails: federationExtraDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EndedEnterpriseAdminSessionDeprecatedType struct
    open class EndedEnterpriseAdminSessionDeprecatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EndedEnterpriseAdminSessionDeprecatedTypeSerializer().serialize(self)))"
        }
    }
    open class EndedEnterpriseAdminSessionDeprecatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EndedEnterpriseAdminSessionDeprecatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EndedEnterpriseAdminSessionDeprecatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EndedEnterpriseAdminSessionDeprecatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended enterprise admin session.
    open class EndedEnterpriseAdminSessionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EndedEnterpriseAdminSessionDetailsSerializer().serialize(self)))"
        }
    }
    open class EndedEnterpriseAdminSessionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EndedEnterpriseAdminSessionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EndedEnterpriseAdminSessionDetails {
            switch json {
                case .dictionary(_):
                    return EndedEnterpriseAdminSessionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EndedEnterpriseAdminSessionType struct
    open class EndedEnterpriseAdminSessionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EndedEnterpriseAdminSessionTypeSerializer().serialize(self)))"
        }
    }
    open class EndedEnterpriseAdminSessionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EndedEnterpriseAdminSessionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EndedEnterpriseAdminSessionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EndedEnterpriseAdminSessionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether password must be enforced when an externally shared link is updated
    public enum EnforceLinkPasswordPolicy: CustomStringConvertible {
        /// An unspecified error.
        case optional
        /// An unspecified error.
        case required
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnforceLinkPasswordPolicySerializer().serialize(self)))"
        }
    }
    open class EnforceLinkPasswordPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnforceLinkPasswordPolicy) -> JSON {
            switch value {
                case .optional:
                    var d = [String: JSON]()
                    d[".tag"] = .str("optional")
                    return .dictionary(d)
                case .required:
                    var d = [String: JSON]()
                    d[".tag"] = .str("required")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EnforceLinkPasswordPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "optional":
                            return EnforceLinkPasswordPolicy.optional
                        case "required":
                            return EnforceLinkPasswordPolicy.required
                        case "other":
                            return EnforceLinkPasswordPolicy.other
                        default:
                            return EnforceLinkPasswordPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed who can update a setting.
    open class EnterpriseSettingsLockingDetails: CustomStringConvertible {
        /// The secondary team name.
        public let teamName: String
        /// Settings page name.
        public let settingsPageName: String
        /// Previous locked settings page state.
        public let previousSettingsPageLockingState: String
        /// New locked settings page state.
        public let newSettingsPageLockingState: String
        public init(teamName: String, settingsPageName: String, previousSettingsPageLockingState: String, newSettingsPageLockingState: String) {
            stringValidator()(teamName)
            self.teamName = teamName
            stringValidator()(settingsPageName)
            self.settingsPageName = settingsPageName
            stringValidator()(previousSettingsPageLockingState)
            self.previousSettingsPageLockingState = previousSettingsPageLockingState
            stringValidator()(newSettingsPageLockingState)
            self.newSettingsPageLockingState = newSettingsPageLockingState
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnterpriseSettingsLockingDetailsSerializer().serialize(self)))"
        }
    }
    open class EnterpriseSettingsLockingDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnterpriseSettingsLockingDetails) -> JSON {
            let output = [ 
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            "settings_page_name": Serialization._StringSerializer.serialize(value.settingsPageName),
            "previous_settings_page_locking_state": Serialization._StringSerializer.serialize(value.previousSettingsPageLockingState),
            "new_settings_page_locking_state": Serialization._StringSerializer.serialize(value.newSettingsPageLockingState),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EnterpriseSettingsLockingDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    let settingsPageName = Serialization._StringSerializer.deserialize(dict["settings_page_name"] ?? .null)
                    let previousSettingsPageLockingState = Serialization._StringSerializer.deserialize(dict["previous_settings_page_locking_state"] ?? .null)
                    let newSettingsPageLockingState = Serialization._StringSerializer.deserialize(dict["new_settings_page_locking_state"] ?? .null)
                    return EnterpriseSettingsLockingDetails(teamName: teamName, settingsPageName: settingsPageName, previousSettingsPageLockingState: previousSettingsPageLockingState, newSettingsPageLockingState: newSettingsPageLockingState)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The EnterpriseSettingsLockingType struct
    open class EnterpriseSettingsLockingType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnterpriseSettingsLockingTypeSerializer().serialize(self)))"
        }
    }
    open class EnterpriseSettingsLockingTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnterpriseSettingsLockingType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EnterpriseSettingsLockingType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return EnterpriseSettingsLockingType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Category of events in event audit log.
    public enum EventCategory: CustomStringConvertible {
        /// Events that involve team related alerts.
        case adminAlerting
        /// Events that apply to management of linked apps.
        case apps
        /// Events that have to do with comments on files and Paper documents.
        case comments
        /// Events that involve data governance actions
        case dataGovernance
        /// Events that apply to linked devices on mobile, desktop and Web platforms.
        case devices
        /// Events that involve domain management feature: domain verification, invite enforcement and account capture.
        case domains
        /// Events that have to do with filesystem operations on files and folders: copy, move, delete, etc.
        case fileOperations
        /// Events that apply to the file requests feature.
        case fileRequests
        /// Events that involve group management.
        case groups
        /// Events that involve users signing in to or out of Dropbox.
        case logins
        /// Events that involve team member management.
        case members
        /// Events that apply to Dropbox Paper.
        case paper
        /// Events that involve using, changing or resetting passwords.
        case passwords
        /// Events that concern generation of admin reports, including team activity and device usage.
        case reports
        /// Events that apply to all types of sharing and collaboration.
        case sharing
        /// Events that apply to Dropbox Showcase.
        case showcase
        /// Events that involve using or configuring single sign-on as well as administrative policies concerning single
        /// sign-on.
        case sso
        /// Events that involve team folder management.
        case teamFolders
        /// Events that involve a change in team-wide policies.
        case teamPolicies
        /// Events that involve a change in the team profile.
        case teamProfile
        /// Events that involve using or configuring two factor authentication as well as administrative policies
        /// concerning two factor authentication.
        case tfa
        /// Events that apply to cross-team trust establishment.
        case trustedTeams
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventCategorySerializer().serialize(self)))"
        }
    }
    open class EventCategorySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventCategory) -> JSON {
            switch value {
                case .adminAlerting:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admin_alerting")
                    return .dictionary(d)
                case .apps:
                    var d = [String: JSON]()
                    d[".tag"] = .str("apps")
                    return .dictionary(d)
                case .comments:
                    var d = [String: JSON]()
                    d[".tag"] = .str("comments")
                    return .dictionary(d)
                case .dataGovernance:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_governance")
                    return .dictionary(d)
                case .devices:
                    var d = [String: JSON]()
                    d[".tag"] = .str("devices")
                    return .dictionary(d)
                case .domains:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domains")
                    return .dictionary(d)
                case .fileOperations:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_operations")
                    return .dictionary(d)
                case .fileRequests:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests")
                    return .dictionary(d)
                case .groups:
                    var d = [String: JSON]()
                    d[".tag"] = .str("groups")
                    return .dictionary(d)
                case .logins:
                    var d = [String: JSON]()
                    d[".tag"] = .str("logins")
                    return .dictionary(d)
                case .members:
                    var d = [String: JSON]()
                    d[".tag"] = .str("members")
                    return .dictionary(d)
                case .paper:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper")
                    return .dictionary(d)
                case .passwords:
                    var d = [String: JSON]()
                    d[".tag"] = .str("passwords")
                    return .dictionary(d)
                case .reports:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reports")
                    return .dictionary(d)
                case .sharing:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing")
                    return .dictionary(d)
                case .showcase:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase")
                    return .dictionary(d)
                case .sso:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso")
                    return .dictionary(d)
                case .teamFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folders")
                    return .dictionary(d)
                case .teamPolicies:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_policies")
                    return .dictionary(d)
                case .teamProfile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile")
                    return .dictionary(d)
                case .tfa:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa")
                    return .dictionary(d)
                case .trustedTeams:
                    var d = [String: JSON]()
                    d[".tag"] = .str("trusted_teams")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventCategory {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin_alerting":
                            return EventCategory.adminAlerting
                        case "apps":
                            return EventCategory.apps
                        case "comments":
                            return EventCategory.comments
                        case "data_governance":
                            return EventCategory.dataGovernance
                        case "devices":
                            return EventCategory.devices
                        case "domains":
                            return EventCategory.domains
                        case "file_operations":
                            return EventCategory.fileOperations
                        case "file_requests":
                            return EventCategory.fileRequests
                        case "groups":
                            return EventCategory.groups
                        case "logins":
                            return EventCategory.logins
                        case "members":
                            return EventCategory.members
                        case "paper":
                            return EventCategory.paper
                        case "passwords":
                            return EventCategory.passwords
                        case "reports":
                            return EventCategory.reports
                        case "sharing":
                            return EventCategory.sharing
                        case "showcase":
                            return EventCategory.showcase
                        case "sso":
                            return EventCategory.sso
                        case "team_folders":
                            return EventCategory.teamFolders
                        case "team_policies":
                            return EventCategory.teamPolicies
                        case "team_profile":
                            return EventCategory.teamProfile
                        case "tfa":
                            return EventCategory.tfa
                        case "trusted_teams":
                            return EventCategory.trustedTeams
                        case "other":
                            return EventCategory.other
                        default:
                            return EventCategory.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Additional fields depending on the event type.
    public enum EventDetails: CustomStringConvertible {
        /// An unspecified error.
        case adminAlertingAlertStateChangedDetails(TeamLog.AdminAlertingAlertStateChangedDetails)
        /// An unspecified error.
        case adminAlertingChangedAlertConfigDetails(TeamLog.AdminAlertingChangedAlertConfigDetails)
        /// An unspecified error.
        case adminAlertingTriggeredAlertDetails(TeamLog.AdminAlertingTriggeredAlertDetails)
        /// An unspecified error.
        case appBlockedByPermissionsDetails(TeamLog.AppBlockedByPermissionsDetails)
        /// An unspecified error.
        case appLinkTeamDetails(TeamLog.AppLinkTeamDetails)
        /// An unspecified error.
        case appLinkUserDetails(TeamLog.AppLinkUserDetails)
        /// An unspecified error.
        case appUnlinkTeamDetails(TeamLog.AppUnlinkTeamDetails)
        /// An unspecified error.
        case appUnlinkUserDetails(TeamLog.AppUnlinkUserDetails)
        /// An unspecified error.
        case integrationConnectedDetails(TeamLog.IntegrationConnectedDetails)
        /// An unspecified error.
        case integrationDisconnectedDetails(TeamLog.IntegrationDisconnectedDetails)
        /// An unspecified error.
        case fileAddCommentDetails(TeamLog.FileAddCommentDetails)
        /// An unspecified error.
        case fileChangeCommentSubscriptionDetails(TeamLog.FileChangeCommentSubscriptionDetails)
        /// An unspecified error.
        case fileDeleteCommentDetails(TeamLog.FileDeleteCommentDetails)
        /// An unspecified error.
        case fileEditCommentDetails(TeamLog.FileEditCommentDetails)
        /// An unspecified error.
        case fileLikeCommentDetails(TeamLog.FileLikeCommentDetails)
        /// An unspecified error.
        case fileResolveCommentDetails(TeamLog.FileResolveCommentDetails)
        /// An unspecified error.
        case fileUnlikeCommentDetails(TeamLog.FileUnlikeCommentDetails)
        /// An unspecified error.
        case fileUnresolveCommentDetails(TeamLog.FileUnresolveCommentDetails)
        /// An unspecified error.
        case governancePolicyAddFoldersDetails(TeamLog.GovernancePolicyAddFoldersDetails)
        /// An unspecified error.
        case governancePolicyAddFolderFailedDetails(TeamLog.GovernancePolicyAddFolderFailedDetails)
        /// An unspecified error.
        case governancePolicyContentDisposedDetails(TeamLog.GovernancePolicyContentDisposedDetails)
        /// An unspecified error.
        case governancePolicyCreateDetails(TeamLog.GovernancePolicyCreateDetails)
        /// An unspecified error.
        case governancePolicyDeleteDetails(TeamLog.GovernancePolicyDeleteDetails)
        /// An unspecified error.
        case governancePolicyEditDetailsDetails(TeamLog.GovernancePolicyEditDetailsDetails)
        /// An unspecified error.
        case governancePolicyEditDurationDetails(TeamLog.GovernancePolicyEditDurationDetails)
        /// An unspecified error.
        case governancePolicyExportCreatedDetails(TeamLog.GovernancePolicyExportCreatedDetails)
        /// An unspecified error.
        case governancePolicyExportRemovedDetails(TeamLog.GovernancePolicyExportRemovedDetails)
        /// An unspecified error.
        case governancePolicyRemoveFoldersDetails(TeamLog.GovernancePolicyRemoveFoldersDetails)
        /// An unspecified error.
        case governancePolicyReportCreatedDetails(TeamLog.GovernancePolicyReportCreatedDetails)
        /// An unspecified error.
        case governancePolicyZipPartDownloadedDetails(TeamLog.GovernancePolicyZipPartDownloadedDetails)
        /// An unspecified error.
        case legalHoldsActivateAHoldDetails(TeamLog.LegalHoldsActivateAHoldDetails)
        /// An unspecified error.
        case legalHoldsAddMembersDetails(TeamLog.LegalHoldsAddMembersDetails)
        /// An unspecified error.
        case legalHoldsChangeHoldDetailsDetails(TeamLog.LegalHoldsChangeHoldDetailsDetails)
        /// An unspecified error.
        case legalHoldsChangeHoldNameDetails(TeamLog.LegalHoldsChangeHoldNameDetails)
        /// An unspecified error.
        case legalHoldsExportAHoldDetails(TeamLog.LegalHoldsExportAHoldDetails)
        /// An unspecified error.
        case legalHoldsExportCancelledDetails(TeamLog.LegalHoldsExportCancelledDetails)
        /// An unspecified error.
        case legalHoldsExportDownloadedDetails(TeamLog.LegalHoldsExportDownloadedDetails)
        /// An unspecified error.
        case legalHoldsExportRemovedDetails(TeamLog.LegalHoldsExportRemovedDetails)
        /// An unspecified error.
        case legalHoldsReleaseAHoldDetails(TeamLog.LegalHoldsReleaseAHoldDetails)
        /// An unspecified error.
        case legalHoldsRemoveMembersDetails(TeamLog.LegalHoldsRemoveMembersDetails)
        /// An unspecified error.
        case legalHoldsReportAHoldDetails(TeamLog.LegalHoldsReportAHoldDetails)
        /// An unspecified error.
        case deviceChangeIpDesktopDetails(TeamLog.DeviceChangeIpDesktopDetails)
        /// An unspecified error.
        case deviceChangeIpMobileDetails(TeamLog.DeviceChangeIpMobileDetails)
        /// An unspecified error.
        case deviceChangeIpWebDetails(TeamLog.DeviceChangeIpWebDetails)
        /// An unspecified error.
        case deviceDeleteOnUnlinkFailDetails(TeamLog.DeviceDeleteOnUnlinkFailDetails)
        /// An unspecified error.
        case deviceDeleteOnUnlinkSuccessDetails(TeamLog.DeviceDeleteOnUnlinkSuccessDetails)
        /// An unspecified error.
        case deviceLinkFailDetails(TeamLog.DeviceLinkFailDetails)
        /// An unspecified error.
        case deviceLinkSuccessDetails(TeamLog.DeviceLinkSuccessDetails)
        /// An unspecified error.
        case deviceManagementDisabledDetails(TeamLog.DeviceManagementDisabledDetails)
        /// An unspecified error.
        case deviceManagementEnabledDetails(TeamLog.DeviceManagementEnabledDetails)
        /// An unspecified error.
        case deviceSyncBackupStatusChangedDetails(TeamLog.DeviceSyncBackupStatusChangedDetails)
        /// An unspecified error.
        case deviceUnlinkDetails(TeamLog.DeviceUnlinkDetails)
        /// An unspecified error.
        case dropboxPasswordsExportedDetails(TeamLog.DropboxPasswordsExportedDetails)
        /// An unspecified error.
        case dropboxPasswordsNewDeviceEnrolledDetails(TeamLog.DropboxPasswordsNewDeviceEnrolledDetails)
        /// An unspecified error.
        case emmRefreshAuthTokenDetails(TeamLog.EmmRefreshAuthTokenDetails)
        /// An unspecified error.
        case externalDriveBackupEligibilityStatusCheckedDetails(TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetails)
        /// An unspecified error.
        case externalDriveBackupStatusChangedDetails(TeamLog.ExternalDriveBackupStatusChangedDetails)
        /// An unspecified error.
        case accountCaptureChangeAvailabilityDetails(TeamLog.AccountCaptureChangeAvailabilityDetails)
        /// An unspecified error.
        case accountCaptureMigrateAccountDetails(TeamLog.AccountCaptureMigrateAccountDetails)
        /// An unspecified error.
        case accountCaptureNotificationEmailsSentDetails(TeamLog.AccountCaptureNotificationEmailsSentDetails)
        /// An unspecified error.
        case accountCaptureRelinquishAccountDetails(TeamLog.AccountCaptureRelinquishAccountDetails)
        /// An unspecified error.
        case disabledDomainInvitesDetails(TeamLog.DisabledDomainInvitesDetails)
        /// An unspecified error.
        case domainInvitesApproveRequestToJoinTeamDetails(TeamLog.DomainInvitesApproveRequestToJoinTeamDetails)
        /// An unspecified error.
        case domainInvitesDeclineRequestToJoinTeamDetails(TeamLog.DomainInvitesDeclineRequestToJoinTeamDetails)
        /// An unspecified error.
        case domainInvitesEmailExistingUsersDetails(TeamLog.DomainInvitesEmailExistingUsersDetails)
        /// An unspecified error.
        case domainInvitesRequestToJoinTeamDetails(TeamLog.DomainInvitesRequestToJoinTeamDetails)
        /// An unspecified error.
        case domainInvitesSetInviteNewUserPrefToNoDetails(TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetails)
        /// An unspecified error.
        case domainInvitesSetInviteNewUserPrefToYesDetails(TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetails)
        /// An unspecified error.
        case domainVerificationAddDomainFailDetails(TeamLog.DomainVerificationAddDomainFailDetails)
        /// An unspecified error.
        case domainVerificationAddDomainSuccessDetails(TeamLog.DomainVerificationAddDomainSuccessDetails)
        /// An unspecified error.
        case domainVerificationRemoveDomainDetails(TeamLog.DomainVerificationRemoveDomainDetails)
        /// An unspecified error.
        case enabledDomainInvitesDetails(TeamLog.EnabledDomainInvitesDetails)
        /// An unspecified error.
        case applyNamingConventionDetails(TeamLog.ApplyNamingConventionDetails)
        /// An unspecified error.
        case createFolderDetails(TeamLog.CreateFolderDetails)
        /// An unspecified error.
        case fileAddDetails(TeamLog.FileAddDetails)
        /// An unspecified error.
        case fileCopyDetails(TeamLog.FileCopyDetails)
        /// An unspecified error.
        case fileDeleteDetails(TeamLog.FileDeleteDetails)
        /// An unspecified error.
        case fileDownloadDetails(TeamLog.FileDownloadDetails)
        /// An unspecified error.
        case fileEditDetails(TeamLog.FileEditDetails)
        /// An unspecified error.
        case fileGetCopyReferenceDetails(TeamLog.FileGetCopyReferenceDetails)
        /// An unspecified error.
        case fileLockingLockStatusChangedDetails(TeamLog.FileLockingLockStatusChangedDetails)
        /// An unspecified error.
        case fileMoveDetails(TeamLog.FileMoveDetails)
        /// An unspecified error.
        case filePermanentlyDeleteDetails(TeamLog.FilePermanentlyDeleteDetails)
        /// An unspecified error.
        case filePreviewDetails(TeamLog.FilePreviewDetails)
        /// An unspecified error.
        case fileRenameDetails(TeamLog.FileRenameDetails)
        /// An unspecified error.
        case fileRestoreDetails(TeamLog.FileRestoreDetails)
        /// An unspecified error.
        case fileRevertDetails(TeamLog.FileRevertDetails)
        /// An unspecified error.
        case fileRollbackChangesDetails(TeamLog.FileRollbackChangesDetails)
        /// An unspecified error.
        case fileSaveCopyReferenceDetails(TeamLog.FileSaveCopyReferenceDetails)
        /// An unspecified error.
        case folderOverviewDescriptionChangedDetails(TeamLog.FolderOverviewDescriptionChangedDetails)
        /// An unspecified error.
        case folderOverviewItemPinnedDetails(TeamLog.FolderOverviewItemPinnedDetails)
        /// An unspecified error.
        case folderOverviewItemUnpinnedDetails(TeamLog.FolderOverviewItemUnpinnedDetails)
        /// An unspecified error.
        case objectLabelAddedDetails(TeamLog.ObjectLabelAddedDetails)
        /// An unspecified error.
        case objectLabelRemovedDetails(TeamLog.ObjectLabelRemovedDetails)
        /// An unspecified error.
        case objectLabelUpdatedValueDetails(TeamLog.ObjectLabelUpdatedValueDetails)
        /// An unspecified error.
        case organizeFolderWithTidyDetails(TeamLog.OrganizeFolderWithTidyDetails)
        /// An unspecified error.
        case rewindFolderDetails(TeamLog.RewindFolderDetails)
        /// An unspecified error.
        case undoNamingConventionDetails(TeamLog.UndoNamingConventionDetails)
        /// An unspecified error.
        case undoOrganizeFolderWithTidyDetails(TeamLog.UndoOrganizeFolderWithTidyDetails)
        /// An unspecified error.
        case userTagsAddedDetails(TeamLog.UserTagsAddedDetails)
        /// An unspecified error.
        case userTagsRemovedDetails(TeamLog.UserTagsRemovedDetails)
        /// An unspecified error.
        case emailIngestReceiveFileDetails(TeamLog.EmailIngestReceiveFileDetails)
        /// An unspecified error.
        case fileRequestChangeDetails(TeamLog.FileRequestChangeDetails)
        /// An unspecified error.
        case fileRequestCloseDetails(TeamLog.FileRequestCloseDetails)
        /// An unspecified error.
        case fileRequestCreateDetails(TeamLog.FileRequestCreateDetails)
        /// An unspecified error.
        case fileRequestDeleteDetails(TeamLog.FileRequestDeleteDetails)
        /// An unspecified error.
        case fileRequestReceiveFileDetails(TeamLog.FileRequestReceiveFileDetails)
        /// An unspecified error.
        case groupAddExternalIdDetails(TeamLog.GroupAddExternalIdDetails)
        /// An unspecified error.
        case groupAddMemberDetails(TeamLog.GroupAddMemberDetails)
        /// An unspecified error.
        case groupChangeExternalIdDetails(TeamLog.GroupChangeExternalIdDetails)
        /// An unspecified error.
        case groupChangeManagementTypeDetails(TeamLog.GroupChangeManagementTypeDetails)
        /// An unspecified error.
        case groupChangeMemberRoleDetails(TeamLog.GroupChangeMemberRoleDetails)
        /// An unspecified error.
        case groupCreateDetails(TeamLog.GroupCreateDetails)
        /// An unspecified error.
        case groupDeleteDetails(TeamLog.GroupDeleteDetails)
        /// An unspecified error.
        case groupDescriptionUpdatedDetails(TeamLog.GroupDescriptionUpdatedDetails)
        /// An unspecified error.
        case groupJoinPolicyUpdatedDetails(TeamLog.GroupJoinPolicyUpdatedDetails)
        /// An unspecified error.
        case groupMovedDetails(TeamLog.GroupMovedDetails)
        /// An unspecified error.
        case groupRemoveExternalIdDetails(TeamLog.GroupRemoveExternalIdDetails)
        /// An unspecified error.
        case groupRemoveMemberDetails(TeamLog.GroupRemoveMemberDetails)
        /// An unspecified error.
        case groupRenameDetails(TeamLog.GroupRenameDetails)
        /// An unspecified error.
        case accountLockOrUnlockedDetails(TeamLog.AccountLockOrUnlockedDetails)
        /// An unspecified error.
        case emmErrorDetails(TeamLog.EmmErrorDetails)
        /// An unspecified error.
        case guestAdminSignedInViaTrustedTeamsDetails(TeamLog.GuestAdminSignedInViaTrustedTeamsDetails)
        /// An unspecified error.
        case guestAdminSignedOutViaTrustedTeamsDetails(TeamLog.GuestAdminSignedOutViaTrustedTeamsDetails)
        /// An unspecified error.
        case loginFailDetails(TeamLog.LoginFailDetails)
        /// An unspecified error.
        case loginSuccessDetails(TeamLog.LoginSuccessDetails)
        /// An unspecified error.
        case logoutDetails(TeamLog.LogoutDetails)
        /// An unspecified error.
        case resellerSupportSessionEndDetails(TeamLog.ResellerSupportSessionEndDetails)
        /// An unspecified error.
        case resellerSupportSessionStartDetails(TeamLog.ResellerSupportSessionStartDetails)
        /// An unspecified error.
        case signInAsSessionEndDetails(TeamLog.SignInAsSessionEndDetails)
        /// An unspecified error.
        case signInAsSessionStartDetails(TeamLog.SignInAsSessionStartDetails)
        /// An unspecified error.
        case ssoErrorDetails(TeamLog.SsoErrorDetails)
        /// An unspecified error.
        case createTeamInviteLinkDetails(TeamLog.CreateTeamInviteLinkDetails)
        /// An unspecified error.
        case deleteTeamInviteLinkDetails(TeamLog.DeleteTeamInviteLinkDetails)
        /// An unspecified error.
        case memberAddExternalIdDetails(TeamLog.MemberAddExternalIdDetails)
        /// An unspecified error.
        case memberAddNameDetails(TeamLog.MemberAddNameDetails)
        /// An unspecified error.
        case memberChangeAdminRoleDetails(TeamLog.MemberChangeAdminRoleDetails)
        /// An unspecified error.
        case memberChangeEmailDetails(TeamLog.MemberChangeEmailDetails)
        /// An unspecified error.
        case memberChangeExternalIdDetails(TeamLog.MemberChangeExternalIdDetails)
        /// An unspecified error.
        case memberChangeMembershipTypeDetails(TeamLog.MemberChangeMembershipTypeDetails)
        /// An unspecified error.
        case memberChangeNameDetails(TeamLog.MemberChangeNameDetails)
        /// An unspecified error.
        case memberChangeResellerRoleDetails(TeamLog.MemberChangeResellerRoleDetails)
        /// An unspecified error.
        case memberChangeStatusDetails(TeamLog.MemberChangeStatusDetails)
        /// An unspecified error.
        case memberDeleteManualContactsDetails(TeamLog.MemberDeleteManualContactsDetails)
        /// An unspecified error.
        case memberDeleteProfilePhotoDetails(TeamLog.MemberDeleteProfilePhotoDetails)
        /// An unspecified error.
        case memberPermanentlyDeleteAccountContentsDetails(TeamLog.MemberPermanentlyDeleteAccountContentsDetails)
        /// An unspecified error.
        case memberRemoveExternalIdDetails(TeamLog.MemberRemoveExternalIdDetails)
        /// An unspecified error.
        case memberSetProfilePhotoDetails(TeamLog.MemberSetProfilePhotoDetails)
        /// An unspecified error.
        case memberSpaceLimitsAddCustomQuotaDetails(TeamLog.MemberSpaceLimitsAddCustomQuotaDetails)
        /// An unspecified error.
        case memberSpaceLimitsChangeCustomQuotaDetails(TeamLog.MemberSpaceLimitsChangeCustomQuotaDetails)
        /// An unspecified error.
        case memberSpaceLimitsChangeStatusDetails(TeamLog.MemberSpaceLimitsChangeStatusDetails)
        /// An unspecified error.
        case memberSpaceLimitsRemoveCustomQuotaDetails(TeamLog.MemberSpaceLimitsRemoveCustomQuotaDetails)
        /// An unspecified error.
        case memberSuggestDetails(TeamLog.MemberSuggestDetails)
        /// An unspecified error.
        case memberTransferAccountContentsDetails(TeamLog.MemberTransferAccountContentsDetails)
        /// An unspecified error.
        case pendingSecondaryEmailAddedDetails(TeamLog.PendingSecondaryEmailAddedDetails)
        /// An unspecified error.
        case secondaryEmailDeletedDetails(TeamLog.SecondaryEmailDeletedDetails)
        /// An unspecified error.
        case secondaryEmailVerifiedDetails(TeamLog.SecondaryEmailVerifiedDetails)
        /// An unspecified error.
        case secondaryMailsPolicyChangedDetails(TeamLog.SecondaryMailsPolicyChangedDetails)
        /// An unspecified error.
        case binderAddPageDetails(TeamLog.BinderAddPageDetails)
        /// An unspecified error.
        case binderAddSectionDetails(TeamLog.BinderAddSectionDetails)
        /// An unspecified error.
        case binderRemovePageDetails(TeamLog.BinderRemovePageDetails)
        /// An unspecified error.
        case binderRemoveSectionDetails(TeamLog.BinderRemoveSectionDetails)
        /// An unspecified error.
        case binderRenamePageDetails(TeamLog.BinderRenamePageDetails)
        /// An unspecified error.
        case binderRenameSectionDetails(TeamLog.BinderRenameSectionDetails)
        /// An unspecified error.
        case binderReorderPageDetails(TeamLog.BinderReorderPageDetails)
        /// An unspecified error.
        case binderReorderSectionDetails(TeamLog.BinderReorderSectionDetails)
        /// An unspecified error.
        case paperContentAddMemberDetails(TeamLog.PaperContentAddMemberDetails)
        /// An unspecified error.
        case paperContentAddToFolderDetails(TeamLog.PaperContentAddToFolderDetails)
        /// An unspecified error.
        case paperContentArchiveDetails(TeamLog.PaperContentArchiveDetails)
        /// An unspecified error.
        case paperContentCreateDetails(TeamLog.PaperContentCreateDetails)
        /// An unspecified error.
        case paperContentPermanentlyDeleteDetails(TeamLog.PaperContentPermanentlyDeleteDetails)
        /// An unspecified error.
        case paperContentRemoveFromFolderDetails(TeamLog.PaperContentRemoveFromFolderDetails)
        /// An unspecified error.
        case paperContentRemoveMemberDetails(TeamLog.PaperContentRemoveMemberDetails)
        /// An unspecified error.
        case paperContentRenameDetails(TeamLog.PaperContentRenameDetails)
        /// An unspecified error.
        case paperContentRestoreDetails(TeamLog.PaperContentRestoreDetails)
        /// An unspecified error.
        case paperDocAddCommentDetails(TeamLog.PaperDocAddCommentDetails)
        /// An unspecified error.
        case paperDocChangeMemberRoleDetails(TeamLog.PaperDocChangeMemberRoleDetails)
        /// An unspecified error.
        case paperDocChangeSharingPolicyDetails(TeamLog.PaperDocChangeSharingPolicyDetails)
        /// An unspecified error.
        case paperDocChangeSubscriptionDetails(TeamLog.PaperDocChangeSubscriptionDetails)
        /// An unspecified error.
        case paperDocDeletedDetails(TeamLog.PaperDocDeletedDetails)
        /// An unspecified error.
        case paperDocDeleteCommentDetails(TeamLog.PaperDocDeleteCommentDetails)
        /// An unspecified error.
        case paperDocDownloadDetails(TeamLog.PaperDocDownloadDetails)
        /// An unspecified error.
        case paperDocEditDetails(TeamLog.PaperDocEditDetails)
        /// An unspecified error.
        case paperDocEditCommentDetails(TeamLog.PaperDocEditCommentDetails)
        /// An unspecified error.
        case paperDocFollowedDetails(TeamLog.PaperDocFollowedDetails)
        /// An unspecified error.
        case paperDocMentionDetails(TeamLog.PaperDocMentionDetails)
        /// An unspecified error.
        case paperDocOwnershipChangedDetails(TeamLog.PaperDocOwnershipChangedDetails)
        /// An unspecified error.
        case paperDocRequestAccessDetails(TeamLog.PaperDocRequestAccessDetails)
        /// An unspecified error.
        case paperDocResolveCommentDetails(TeamLog.PaperDocResolveCommentDetails)
        /// An unspecified error.
        case paperDocRevertDetails(TeamLog.PaperDocRevertDetails)
        /// An unspecified error.
        case paperDocSlackShareDetails(TeamLog.PaperDocSlackShareDetails)
        /// An unspecified error.
        case paperDocTeamInviteDetails(TeamLog.PaperDocTeamInviteDetails)
        /// An unspecified error.
        case paperDocTrashedDetails(TeamLog.PaperDocTrashedDetails)
        /// An unspecified error.
        case paperDocUnresolveCommentDetails(TeamLog.PaperDocUnresolveCommentDetails)
        /// An unspecified error.
        case paperDocUntrashedDetails(TeamLog.PaperDocUntrashedDetails)
        /// An unspecified error.
        case paperDocViewDetails(TeamLog.PaperDocViewDetails)
        /// An unspecified error.
        case paperExternalViewAllowDetails(TeamLog.PaperExternalViewAllowDetails)
        /// An unspecified error.
        case paperExternalViewDefaultTeamDetails(TeamLog.PaperExternalViewDefaultTeamDetails)
        /// An unspecified error.
        case paperExternalViewForbidDetails(TeamLog.PaperExternalViewForbidDetails)
        /// An unspecified error.
        case paperFolderChangeSubscriptionDetails(TeamLog.PaperFolderChangeSubscriptionDetails)
        /// An unspecified error.
        case paperFolderDeletedDetails(TeamLog.PaperFolderDeletedDetails)
        /// An unspecified error.
        case paperFolderFollowedDetails(TeamLog.PaperFolderFollowedDetails)
        /// An unspecified error.
        case paperFolderTeamInviteDetails(TeamLog.PaperFolderTeamInviteDetails)
        /// An unspecified error.
        case paperPublishedLinkChangePermissionDetails(TeamLog.PaperPublishedLinkChangePermissionDetails)
        /// An unspecified error.
        case paperPublishedLinkCreateDetails(TeamLog.PaperPublishedLinkCreateDetails)
        /// An unspecified error.
        case paperPublishedLinkDisabledDetails(TeamLog.PaperPublishedLinkDisabledDetails)
        /// An unspecified error.
        case paperPublishedLinkViewDetails(TeamLog.PaperPublishedLinkViewDetails)
        /// An unspecified error.
        case passwordChangeDetails(TeamLog.PasswordChangeDetails)
        /// An unspecified error.
        case passwordResetDetails(TeamLog.PasswordResetDetails)
        /// An unspecified error.
        case passwordResetAllDetails(TeamLog.PasswordResetAllDetails)
        /// An unspecified error.
        case classificationCreateReportDetails(TeamLog.ClassificationCreateReportDetails)
        /// An unspecified error.
        case classificationCreateReportFailDetails(TeamLog.ClassificationCreateReportFailDetails)
        /// An unspecified error.
        case emmCreateExceptionsReportDetails(TeamLog.EmmCreateExceptionsReportDetails)
        /// An unspecified error.
        case emmCreateUsageReportDetails(TeamLog.EmmCreateUsageReportDetails)
        /// An unspecified error.
        case exportMembersReportDetails(TeamLog.ExportMembersReportDetails)
        /// An unspecified error.
        case exportMembersReportFailDetails(TeamLog.ExportMembersReportFailDetails)
        /// An unspecified error.
        case externalSharingCreateReportDetails(TeamLog.ExternalSharingCreateReportDetails)
        /// An unspecified error.
        case externalSharingReportFailedDetails(TeamLog.ExternalSharingReportFailedDetails)
        /// An unspecified error.
        case noExpirationLinkGenCreateReportDetails(TeamLog.NoExpirationLinkGenCreateReportDetails)
        /// An unspecified error.
        case noExpirationLinkGenReportFailedDetails(TeamLog.NoExpirationLinkGenReportFailedDetails)
        /// An unspecified error.
        case noPasswordLinkGenCreateReportDetails(TeamLog.NoPasswordLinkGenCreateReportDetails)
        /// An unspecified error.
        case noPasswordLinkGenReportFailedDetails(TeamLog.NoPasswordLinkGenReportFailedDetails)
        /// An unspecified error.
        case noPasswordLinkViewCreateReportDetails(TeamLog.NoPasswordLinkViewCreateReportDetails)
        /// An unspecified error.
        case noPasswordLinkViewReportFailedDetails(TeamLog.NoPasswordLinkViewReportFailedDetails)
        /// An unspecified error.
        case outdatedLinkViewCreateReportDetails(TeamLog.OutdatedLinkViewCreateReportDetails)
        /// An unspecified error.
        case outdatedLinkViewReportFailedDetails(TeamLog.OutdatedLinkViewReportFailedDetails)
        /// An unspecified error.
        case paperAdminExportStartDetails(TeamLog.PaperAdminExportStartDetails)
        /// An unspecified error.
        case smartSyncCreateAdminPrivilegeReportDetails(TeamLog.SmartSyncCreateAdminPrivilegeReportDetails)
        /// An unspecified error.
        case teamActivityCreateReportDetails(TeamLog.TeamActivityCreateReportDetails)
        /// An unspecified error.
        case teamActivityCreateReportFailDetails(TeamLog.TeamActivityCreateReportFailDetails)
        /// An unspecified error.
        case collectionShareDetails(TeamLog.CollectionShareDetails)
        /// An unspecified error.
        case fileTransfersFileAddDetails(TeamLog.FileTransfersFileAddDetails)
        /// An unspecified error.
        case fileTransfersTransferDeleteDetails(TeamLog.FileTransfersTransferDeleteDetails)
        /// An unspecified error.
        case fileTransfersTransferDownloadDetails(TeamLog.FileTransfersTransferDownloadDetails)
        /// An unspecified error.
        case fileTransfersTransferSendDetails(TeamLog.FileTransfersTransferSendDetails)
        /// An unspecified error.
        case fileTransfersTransferViewDetails(TeamLog.FileTransfersTransferViewDetails)
        /// An unspecified error.
        case noteAclInviteOnlyDetails(TeamLog.NoteAclInviteOnlyDetails)
        /// An unspecified error.
        case noteAclLinkDetails(TeamLog.NoteAclLinkDetails)
        /// An unspecified error.
        case noteAclTeamLinkDetails(TeamLog.NoteAclTeamLinkDetails)
        /// An unspecified error.
        case noteSharedDetails(TeamLog.NoteSharedDetails)
        /// An unspecified error.
        case noteShareReceiveDetails(TeamLog.NoteShareReceiveDetails)
        /// An unspecified error.
        case openNoteSharedDetails(TeamLog.OpenNoteSharedDetails)
        /// An unspecified error.
        case sfAddGroupDetails(TeamLog.SfAddGroupDetails)
        /// An unspecified error.
        case sfAllowNonMembersToViewSharedLinksDetails(TeamLog.SfAllowNonMembersToViewSharedLinksDetails)
        /// An unspecified error.
        case sfExternalInviteWarnDetails(TeamLog.SfExternalInviteWarnDetails)
        /// An unspecified error.
        case sfFbInviteDetails(TeamLog.SfFbInviteDetails)
        /// An unspecified error.
        case sfFbInviteChangeRoleDetails(TeamLog.SfFbInviteChangeRoleDetails)
        /// An unspecified error.
        case sfFbUninviteDetails(TeamLog.SfFbUninviteDetails)
        /// An unspecified error.
        case sfInviteGroupDetails(TeamLog.SfInviteGroupDetails)
        /// An unspecified error.
        case sfTeamGrantAccessDetails(TeamLog.SfTeamGrantAccessDetails)
        /// An unspecified error.
        case sfTeamInviteDetails(TeamLog.SfTeamInviteDetails)
        /// An unspecified error.
        case sfTeamInviteChangeRoleDetails(TeamLog.SfTeamInviteChangeRoleDetails)
        /// An unspecified error.
        case sfTeamJoinDetails(TeamLog.SfTeamJoinDetails)
        /// An unspecified error.
        case sfTeamJoinFromOobLinkDetails(TeamLog.SfTeamJoinFromOobLinkDetails)
        /// An unspecified error.
        case sfTeamUninviteDetails(TeamLog.SfTeamUninviteDetails)
        /// An unspecified error.
        case sharedContentAddInviteesDetails(TeamLog.SharedContentAddInviteesDetails)
        /// An unspecified error.
        case sharedContentAddLinkExpiryDetails(TeamLog.SharedContentAddLinkExpiryDetails)
        /// An unspecified error.
        case sharedContentAddLinkPasswordDetails(TeamLog.SharedContentAddLinkPasswordDetails)
        /// An unspecified error.
        case sharedContentAddMemberDetails(TeamLog.SharedContentAddMemberDetails)
        /// An unspecified error.
        case sharedContentChangeDownloadsPolicyDetails(TeamLog.SharedContentChangeDownloadsPolicyDetails)
        /// An unspecified error.
        case sharedContentChangeInviteeRoleDetails(TeamLog.SharedContentChangeInviteeRoleDetails)
        /// An unspecified error.
        case sharedContentChangeLinkAudienceDetails(TeamLog.SharedContentChangeLinkAudienceDetails)
        /// An unspecified error.
        case sharedContentChangeLinkExpiryDetails(TeamLog.SharedContentChangeLinkExpiryDetails)
        /// An unspecified error.
        case sharedContentChangeLinkPasswordDetails(TeamLog.SharedContentChangeLinkPasswordDetails)
        /// An unspecified error.
        case sharedContentChangeMemberRoleDetails(TeamLog.SharedContentChangeMemberRoleDetails)
        /// An unspecified error.
        case sharedContentChangeViewerInfoPolicyDetails(TeamLog.SharedContentChangeViewerInfoPolicyDetails)
        /// An unspecified error.
        case sharedContentClaimInvitationDetails(TeamLog.SharedContentClaimInvitationDetails)
        /// An unspecified error.
        case sharedContentCopyDetails(TeamLog.SharedContentCopyDetails)
        /// An unspecified error.
        case sharedContentDownloadDetails(TeamLog.SharedContentDownloadDetails)
        /// An unspecified error.
        case sharedContentRelinquishMembershipDetails(TeamLog.SharedContentRelinquishMembershipDetails)
        /// An unspecified error.
        case sharedContentRemoveInviteesDetails(TeamLog.SharedContentRemoveInviteesDetails)
        /// An unspecified error.
        case sharedContentRemoveLinkExpiryDetails(TeamLog.SharedContentRemoveLinkExpiryDetails)
        /// An unspecified error.
        case sharedContentRemoveLinkPasswordDetails(TeamLog.SharedContentRemoveLinkPasswordDetails)
        /// An unspecified error.
        case sharedContentRemoveMemberDetails(TeamLog.SharedContentRemoveMemberDetails)
        /// An unspecified error.
        case sharedContentRequestAccessDetails(TeamLog.SharedContentRequestAccessDetails)
        /// An unspecified error.
        case sharedContentRestoreInviteesDetails(TeamLog.SharedContentRestoreInviteesDetails)
        /// An unspecified error.
        case sharedContentRestoreMemberDetails(TeamLog.SharedContentRestoreMemberDetails)
        /// An unspecified error.
        case sharedContentUnshareDetails(TeamLog.SharedContentUnshareDetails)
        /// An unspecified error.
        case sharedContentViewDetails(TeamLog.SharedContentViewDetails)
        /// An unspecified error.
        case sharedFolderChangeLinkPolicyDetails(TeamLog.SharedFolderChangeLinkPolicyDetails)
        /// An unspecified error.
        case sharedFolderChangeMembersInheritancePolicyDetails(TeamLog.SharedFolderChangeMembersInheritancePolicyDetails)
        /// An unspecified error.
        case sharedFolderChangeMembersManagementPolicyDetails(TeamLog.SharedFolderChangeMembersManagementPolicyDetails)
        /// An unspecified error.
        case sharedFolderChangeMembersPolicyDetails(TeamLog.SharedFolderChangeMembersPolicyDetails)
        /// An unspecified error.
        case sharedFolderCreateDetails(TeamLog.SharedFolderCreateDetails)
        /// An unspecified error.
        case sharedFolderDeclineInvitationDetails(TeamLog.SharedFolderDeclineInvitationDetails)
        /// An unspecified error.
        case sharedFolderMountDetails(TeamLog.SharedFolderMountDetails)
        /// An unspecified error.
        case sharedFolderNestDetails(TeamLog.SharedFolderNestDetails)
        /// An unspecified error.
        case sharedFolderTransferOwnershipDetails(TeamLog.SharedFolderTransferOwnershipDetails)
        /// An unspecified error.
        case sharedFolderUnmountDetails(TeamLog.SharedFolderUnmountDetails)
        /// An unspecified error.
        case sharedLinkAddExpiryDetails(TeamLog.SharedLinkAddExpiryDetails)
        /// An unspecified error.
        case sharedLinkChangeExpiryDetails(TeamLog.SharedLinkChangeExpiryDetails)
        /// An unspecified error.
        case sharedLinkChangeVisibilityDetails(TeamLog.SharedLinkChangeVisibilityDetails)
        /// An unspecified error.
        case sharedLinkCopyDetails(TeamLog.SharedLinkCopyDetails)
        /// An unspecified error.
        case sharedLinkCreateDetails(TeamLog.SharedLinkCreateDetails)
        /// An unspecified error.
        case sharedLinkDisableDetails(TeamLog.SharedLinkDisableDetails)
        /// An unspecified error.
        case sharedLinkDownloadDetails(TeamLog.SharedLinkDownloadDetails)
        /// An unspecified error.
        case sharedLinkRemoveExpiryDetails(TeamLog.SharedLinkRemoveExpiryDetails)
        /// An unspecified error.
        case sharedLinkSettingsAddExpirationDetails(TeamLog.SharedLinkSettingsAddExpirationDetails)
        /// An unspecified error.
        case sharedLinkSettingsAddPasswordDetails(TeamLog.SharedLinkSettingsAddPasswordDetails)
        /// An unspecified error.
        case sharedLinkSettingsAllowDownloadDisabledDetails(TeamLog.SharedLinkSettingsAllowDownloadDisabledDetails)
        /// An unspecified error.
        case sharedLinkSettingsAllowDownloadEnabledDetails(TeamLog.SharedLinkSettingsAllowDownloadEnabledDetails)
        /// An unspecified error.
        case sharedLinkSettingsChangeAudienceDetails(TeamLog.SharedLinkSettingsChangeAudienceDetails)
        /// An unspecified error.
        case sharedLinkSettingsChangeExpirationDetails(TeamLog.SharedLinkSettingsChangeExpirationDetails)
        /// An unspecified error.
        case sharedLinkSettingsChangePasswordDetails(TeamLog.SharedLinkSettingsChangePasswordDetails)
        /// An unspecified error.
        case sharedLinkSettingsRemoveExpirationDetails(TeamLog.SharedLinkSettingsRemoveExpirationDetails)
        /// An unspecified error.
        case sharedLinkSettingsRemovePasswordDetails(TeamLog.SharedLinkSettingsRemovePasswordDetails)
        /// An unspecified error.
        case sharedLinkShareDetails(TeamLog.SharedLinkShareDetails)
        /// An unspecified error.
        case sharedLinkViewDetails(TeamLog.SharedLinkViewDetails)
        /// An unspecified error.
        case sharedNoteOpenedDetails(TeamLog.SharedNoteOpenedDetails)
        /// An unspecified error.
        case shmodelDisableDownloadsDetails(TeamLog.ShmodelDisableDownloadsDetails)
        /// An unspecified error.
        case shmodelEnableDownloadsDetails(TeamLog.ShmodelEnableDownloadsDetails)
        /// An unspecified error.
        case shmodelGroupShareDetails(TeamLog.ShmodelGroupShareDetails)
        /// An unspecified error.
        case showcaseAccessGrantedDetails(TeamLog.ShowcaseAccessGrantedDetails)
        /// An unspecified error.
        case showcaseAddMemberDetails(TeamLog.ShowcaseAddMemberDetails)
        /// An unspecified error.
        case showcaseArchivedDetails(TeamLog.ShowcaseArchivedDetails)
        /// An unspecified error.
        case showcaseCreatedDetails(TeamLog.ShowcaseCreatedDetails)
        /// An unspecified error.
        case showcaseDeleteCommentDetails(TeamLog.ShowcaseDeleteCommentDetails)
        /// An unspecified error.
        case showcaseEditedDetails(TeamLog.ShowcaseEditedDetails)
        /// An unspecified error.
        case showcaseEditCommentDetails(TeamLog.ShowcaseEditCommentDetails)
        /// An unspecified error.
        case showcaseFileAddedDetails(TeamLog.ShowcaseFileAddedDetails)
        /// An unspecified error.
        case showcaseFileDownloadDetails(TeamLog.ShowcaseFileDownloadDetails)
        /// An unspecified error.
        case showcaseFileRemovedDetails(TeamLog.ShowcaseFileRemovedDetails)
        /// An unspecified error.
        case showcaseFileViewDetails(TeamLog.ShowcaseFileViewDetails)
        /// An unspecified error.
        case showcasePermanentlyDeletedDetails(TeamLog.ShowcasePermanentlyDeletedDetails)
        /// An unspecified error.
        case showcasePostCommentDetails(TeamLog.ShowcasePostCommentDetails)
        /// An unspecified error.
        case showcaseRemoveMemberDetails(TeamLog.ShowcaseRemoveMemberDetails)
        /// An unspecified error.
        case showcaseRenamedDetails(TeamLog.ShowcaseRenamedDetails)
        /// An unspecified error.
        case showcaseRequestAccessDetails(TeamLog.ShowcaseRequestAccessDetails)
        /// An unspecified error.
        case showcaseResolveCommentDetails(TeamLog.ShowcaseResolveCommentDetails)
        /// An unspecified error.
        case showcaseRestoredDetails(TeamLog.ShowcaseRestoredDetails)
        /// An unspecified error.
        case showcaseTrashedDetails(TeamLog.ShowcaseTrashedDetails)
        /// An unspecified error.
        case showcaseTrashedDeprecatedDetails(TeamLog.ShowcaseTrashedDeprecatedDetails)
        /// An unspecified error.
        case showcaseUnresolveCommentDetails(TeamLog.ShowcaseUnresolveCommentDetails)
        /// An unspecified error.
        case showcaseUntrashedDetails(TeamLog.ShowcaseUntrashedDetails)
        /// An unspecified error.
        case showcaseUntrashedDeprecatedDetails(TeamLog.ShowcaseUntrashedDeprecatedDetails)
        /// An unspecified error.
        case showcaseViewDetails(TeamLog.ShowcaseViewDetails)
        /// An unspecified error.
        case ssoAddCertDetails(TeamLog.SsoAddCertDetails)
        /// An unspecified error.
        case ssoAddLoginUrlDetails(TeamLog.SsoAddLoginUrlDetails)
        /// An unspecified error.
        case ssoAddLogoutUrlDetails(TeamLog.SsoAddLogoutUrlDetails)
        /// An unspecified error.
        case ssoChangeCertDetails(TeamLog.SsoChangeCertDetails)
        /// An unspecified error.
        case ssoChangeLoginUrlDetails(TeamLog.SsoChangeLoginUrlDetails)
        /// An unspecified error.
        case ssoChangeLogoutUrlDetails(TeamLog.SsoChangeLogoutUrlDetails)
        /// An unspecified error.
        case ssoChangeSamlIdentityModeDetails(TeamLog.SsoChangeSamlIdentityModeDetails)
        /// An unspecified error.
        case ssoRemoveCertDetails(TeamLog.SsoRemoveCertDetails)
        /// An unspecified error.
        case ssoRemoveLoginUrlDetails(TeamLog.SsoRemoveLoginUrlDetails)
        /// An unspecified error.
        case ssoRemoveLogoutUrlDetails(TeamLog.SsoRemoveLogoutUrlDetails)
        /// An unspecified error.
        case teamFolderChangeStatusDetails(TeamLog.TeamFolderChangeStatusDetails)
        /// An unspecified error.
        case teamFolderCreateDetails(TeamLog.TeamFolderCreateDetails)
        /// An unspecified error.
        case teamFolderDowngradeDetails(TeamLog.TeamFolderDowngradeDetails)
        /// An unspecified error.
        case teamFolderPermanentlyDeleteDetails(TeamLog.TeamFolderPermanentlyDeleteDetails)
        /// An unspecified error.
        case teamFolderRenameDetails(TeamLog.TeamFolderRenameDetails)
        /// An unspecified error.
        case teamSelectiveSyncSettingsChangedDetails(TeamLog.TeamSelectiveSyncSettingsChangedDetails)
        /// An unspecified error.
        case accountCaptureChangePolicyDetails(TeamLog.AccountCaptureChangePolicyDetails)
        /// An unspecified error.
        case adminEmailRemindersChangedDetails(TeamLog.AdminEmailRemindersChangedDetails)
        /// An unspecified error.
        case allowDownloadDisabledDetails(TeamLog.AllowDownloadDisabledDetails)
        /// An unspecified error.
        case allowDownloadEnabledDetails(TeamLog.AllowDownloadEnabledDetails)
        /// An unspecified error.
        case appPermissionsChangedDetails(TeamLog.AppPermissionsChangedDetails)
        /// An unspecified error.
        case cameraUploadsPolicyChangedDetails(TeamLog.CameraUploadsPolicyChangedDetails)
        /// An unspecified error.
        case captureTranscriptPolicyChangedDetails(TeamLog.CaptureTranscriptPolicyChangedDetails)
        /// An unspecified error.
        case classificationChangePolicyDetails(TeamLog.ClassificationChangePolicyDetails)
        /// An unspecified error.
        case computerBackupPolicyChangedDetails(TeamLog.ComputerBackupPolicyChangedDetails)
        /// An unspecified error.
        case contentAdministrationPolicyChangedDetails(TeamLog.ContentAdministrationPolicyChangedDetails)
        /// An unspecified error.
        case dataPlacementRestrictionChangePolicyDetails(TeamLog.DataPlacementRestrictionChangePolicyDetails)
        /// An unspecified error.
        case dataPlacementRestrictionSatisfyPolicyDetails(TeamLog.DataPlacementRestrictionSatisfyPolicyDetails)
        /// An unspecified error.
        case deviceApprovalsAddExceptionDetails(TeamLog.DeviceApprovalsAddExceptionDetails)
        /// An unspecified error.
        case deviceApprovalsChangeDesktopPolicyDetails(TeamLog.DeviceApprovalsChangeDesktopPolicyDetails)
        /// An unspecified error.
        case deviceApprovalsChangeMobilePolicyDetails(TeamLog.DeviceApprovalsChangeMobilePolicyDetails)
        /// An unspecified error.
        case deviceApprovalsChangeOverageActionDetails(TeamLog.DeviceApprovalsChangeOverageActionDetails)
        /// An unspecified error.
        case deviceApprovalsChangeUnlinkActionDetails(TeamLog.DeviceApprovalsChangeUnlinkActionDetails)
        /// An unspecified error.
        case deviceApprovalsRemoveExceptionDetails(TeamLog.DeviceApprovalsRemoveExceptionDetails)
        /// An unspecified error.
        case directoryRestrictionsAddMembersDetails(TeamLog.DirectoryRestrictionsAddMembersDetails)
        /// An unspecified error.
        case directoryRestrictionsRemoveMembersDetails(TeamLog.DirectoryRestrictionsRemoveMembersDetails)
        /// An unspecified error.
        case dropboxPasswordsPolicyChangedDetails(TeamLog.DropboxPasswordsPolicyChangedDetails)
        /// An unspecified error.
        case emailIngestPolicyChangedDetails(TeamLog.EmailIngestPolicyChangedDetails)
        /// An unspecified error.
        case emmAddExceptionDetails(TeamLog.EmmAddExceptionDetails)
        /// An unspecified error.
        case emmChangePolicyDetails(TeamLog.EmmChangePolicyDetails)
        /// An unspecified error.
        case emmRemoveExceptionDetails(TeamLog.EmmRemoveExceptionDetails)
        /// An unspecified error.
        case extendedVersionHistoryChangePolicyDetails(TeamLog.ExtendedVersionHistoryChangePolicyDetails)
        /// An unspecified error.
        case externalDriveBackupPolicyChangedDetails(TeamLog.ExternalDriveBackupPolicyChangedDetails)
        /// An unspecified error.
        case fileCommentsChangePolicyDetails(TeamLog.FileCommentsChangePolicyDetails)
        /// An unspecified error.
        case fileLockingPolicyChangedDetails(TeamLog.FileLockingPolicyChangedDetails)
        /// An unspecified error.
        case fileProviderMigrationPolicyChangedDetails(TeamLog.FileProviderMigrationPolicyChangedDetails)
        /// An unspecified error.
        case fileRequestsChangePolicyDetails(TeamLog.FileRequestsChangePolicyDetails)
        /// An unspecified error.
        case fileRequestsEmailsEnabledDetails(TeamLog.FileRequestsEmailsEnabledDetails)
        /// An unspecified error.
        case fileRequestsEmailsRestrictedToTeamOnlyDetails(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetails)
        /// An unspecified error.
        case fileTransfersPolicyChangedDetails(TeamLog.FileTransfersPolicyChangedDetails)
        /// An unspecified error.
        case folderLinkRestrictionPolicyChangedDetails(TeamLog.FolderLinkRestrictionPolicyChangedDetails)
        /// An unspecified error.
        case googleSsoChangePolicyDetails(TeamLog.GoogleSsoChangePolicyDetails)
        /// An unspecified error.
        case groupUserManagementChangePolicyDetails(TeamLog.GroupUserManagementChangePolicyDetails)
        /// An unspecified error.
        case integrationPolicyChangedDetails(TeamLog.IntegrationPolicyChangedDetails)
        /// An unspecified error.
        case inviteAcceptanceEmailPolicyChangedDetails(TeamLog.InviteAcceptanceEmailPolicyChangedDetails)
        /// An unspecified error.
        case memberRequestsChangePolicyDetails(TeamLog.MemberRequestsChangePolicyDetails)
        /// An unspecified error.
        case memberSendInvitePolicyChangedDetails(TeamLog.MemberSendInvitePolicyChangedDetails)
        /// An unspecified error.
        case memberSpaceLimitsAddExceptionDetails(TeamLog.MemberSpaceLimitsAddExceptionDetails)
        /// An unspecified error.
        case memberSpaceLimitsChangeCapsTypePolicyDetails(TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetails)
        /// An unspecified error.
        case memberSpaceLimitsChangePolicyDetails(TeamLog.MemberSpaceLimitsChangePolicyDetails)
        /// An unspecified error.
        case memberSpaceLimitsRemoveExceptionDetails(TeamLog.MemberSpaceLimitsRemoveExceptionDetails)
        /// An unspecified error.
        case memberSuggestionsChangePolicyDetails(TeamLog.MemberSuggestionsChangePolicyDetails)
        /// An unspecified error.
        case microsoftOfficeAddinChangePolicyDetails(TeamLog.MicrosoftOfficeAddinChangePolicyDetails)
        /// An unspecified error.
        case networkControlChangePolicyDetails(TeamLog.NetworkControlChangePolicyDetails)
        /// An unspecified error.
        case paperChangeDeploymentPolicyDetails(TeamLog.PaperChangeDeploymentPolicyDetails)
        /// An unspecified error.
        case paperChangeMemberLinkPolicyDetails(TeamLog.PaperChangeMemberLinkPolicyDetails)
        /// An unspecified error.
        case paperChangeMemberPolicyDetails(TeamLog.PaperChangeMemberPolicyDetails)
        /// An unspecified error.
        case paperChangePolicyDetails(TeamLog.PaperChangePolicyDetails)
        /// An unspecified error.
        case paperDefaultFolderPolicyChangedDetails(TeamLog.PaperDefaultFolderPolicyChangedDetails)
        /// An unspecified error.
        case paperDesktopPolicyChangedDetails(TeamLog.PaperDesktopPolicyChangedDetails)
        /// An unspecified error.
        case paperEnabledUsersGroupAdditionDetails(TeamLog.PaperEnabledUsersGroupAdditionDetails)
        /// An unspecified error.
        case paperEnabledUsersGroupRemovalDetails(TeamLog.PaperEnabledUsersGroupRemovalDetails)
        /// An unspecified error.
        case passwordStrengthRequirementsChangePolicyDetails(TeamLog.PasswordStrengthRequirementsChangePolicyDetails)
        /// An unspecified error.
        case permanentDeleteChangePolicyDetails(TeamLog.PermanentDeleteChangePolicyDetails)
        /// An unspecified error.
        case resellerSupportChangePolicyDetails(TeamLog.ResellerSupportChangePolicyDetails)
        /// An unspecified error.
        case rewindPolicyChangedDetails(TeamLog.RewindPolicyChangedDetails)
        /// An unspecified error.
        case sendForSignaturePolicyChangedDetails(TeamLog.SendForSignaturePolicyChangedDetails)
        /// An unspecified error.
        case sharingChangeFolderJoinPolicyDetails(TeamLog.SharingChangeFolderJoinPolicyDetails)
        /// An unspecified error.
        case sharingChangeLinkAllowChangeExpirationPolicyDetails(TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetails)
        /// An unspecified error.
        case sharingChangeLinkDefaultExpirationPolicyDetails(TeamLog.SharingChangeLinkDefaultExpirationPolicyDetails)
        /// An unspecified error.
        case sharingChangeLinkEnforcePasswordPolicyDetails(TeamLog.SharingChangeLinkEnforcePasswordPolicyDetails)
        /// An unspecified error.
        case sharingChangeLinkPolicyDetails(TeamLog.SharingChangeLinkPolicyDetails)
        /// An unspecified error.
        case sharingChangeMemberPolicyDetails(TeamLog.SharingChangeMemberPolicyDetails)
        /// An unspecified error.
        case showcaseChangeDownloadPolicyDetails(TeamLog.ShowcaseChangeDownloadPolicyDetails)
        /// An unspecified error.
        case showcaseChangeEnabledPolicyDetails(TeamLog.ShowcaseChangeEnabledPolicyDetails)
        /// An unspecified error.
        case showcaseChangeExternalSharingPolicyDetails(TeamLog.ShowcaseChangeExternalSharingPolicyDetails)
        /// An unspecified error.
        case smarterSmartSyncPolicyChangedDetails(TeamLog.SmarterSmartSyncPolicyChangedDetails)
        /// An unspecified error.
        case smartSyncChangePolicyDetails(TeamLog.SmartSyncChangePolicyDetails)
        /// An unspecified error.
        case smartSyncNotOptOutDetails(TeamLog.SmartSyncNotOptOutDetails)
        /// An unspecified error.
        case smartSyncOptOutDetails(TeamLog.SmartSyncOptOutDetails)
        /// An unspecified error.
        case ssoChangePolicyDetails(TeamLog.SsoChangePolicyDetails)
        /// An unspecified error.
        case teamBrandingPolicyChangedDetails(TeamLog.TeamBrandingPolicyChangedDetails)
        /// An unspecified error.
        case teamExtensionsPolicyChangedDetails(TeamLog.TeamExtensionsPolicyChangedDetails)
        /// An unspecified error.
        case teamSelectiveSyncPolicyChangedDetails(TeamLog.TeamSelectiveSyncPolicyChangedDetails)
        /// An unspecified error.
        case teamSharingWhitelistSubjectsChangedDetails(TeamLog.TeamSharingWhitelistSubjectsChangedDetails)
        /// An unspecified error.
        case tfaAddExceptionDetails(TeamLog.TfaAddExceptionDetails)
        /// An unspecified error.
        case tfaChangePolicyDetails(TeamLog.TfaChangePolicyDetails)
        /// An unspecified error.
        case tfaRemoveExceptionDetails(TeamLog.TfaRemoveExceptionDetails)
        /// An unspecified error.
        case twoAccountChangePolicyDetails(TeamLog.TwoAccountChangePolicyDetails)
        /// An unspecified error.
        case viewerInfoPolicyChangedDetails(TeamLog.ViewerInfoPolicyChangedDetails)
        /// An unspecified error.
        case watermarkingPolicyChangedDetails(TeamLog.WatermarkingPolicyChangedDetails)
        /// An unspecified error.
        case webSessionsChangeActiveSessionLimitDetails(TeamLog.WebSessionsChangeActiveSessionLimitDetails)
        /// An unspecified error.
        case webSessionsChangeFixedLengthPolicyDetails(TeamLog.WebSessionsChangeFixedLengthPolicyDetails)
        /// An unspecified error.
        case webSessionsChangeIdleLengthPolicyDetails(TeamLog.WebSessionsChangeIdleLengthPolicyDetails)
        /// An unspecified error.
        case dataResidencyMigrationRequestSuccessfulDetails(TeamLog.DataResidencyMigrationRequestSuccessfulDetails)
        /// An unspecified error.
        case dataResidencyMigrationRequestUnsuccessfulDetails(TeamLog.DataResidencyMigrationRequestUnsuccessfulDetails)
        /// An unspecified error.
        case teamMergeFromDetails(TeamLog.TeamMergeFromDetails)
        /// An unspecified error.
        case teamMergeToDetails(TeamLog.TeamMergeToDetails)
        /// An unspecified error.
        case teamProfileAddBackgroundDetails(TeamLog.TeamProfileAddBackgroundDetails)
        /// An unspecified error.
        case teamProfileAddLogoDetails(TeamLog.TeamProfileAddLogoDetails)
        /// An unspecified error.
        case teamProfileChangeBackgroundDetails(TeamLog.TeamProfileChangeBackgroundDetails)
        /// An unspecified error.
        case teamProfileChangeDefaultLanguageDetails(TeamLog.TeamProfileChangeDefaultLanguageDetails)
        /// An unspecified error.
        case teamProfileChangeLogoDetails(TeamLog.TeamProfileChangeLogoDetails)
        /// An unspecified error.
        case teamProfileChangeNameDetails(TeamLog.TeamProfileChangeNameDetails)
        /// An unspecified error.
        case teamProfileRemoveBackgroundDetails(TeamLog.TeamProfileRemoveBackgroundDetails)
        /// An unspecified error.
        case teamProfileRemoveLogoDetails(TeamLog.TeamProfileRemoveLogoDetails)
        /// An unspecified error.
        case tfaAddBackupPhoneDetails(TeamLog.TfaAddBackupPhoneDetails)
        /// An unspecified error.
        case tfaAddSecurityKeyDetails(TeamLog.TfaAddSecurityKeyDetails)
        /// An unspecified error.
        case tfaChangeBackupPhoneDetails(TeamLog.TfaChangeBackupPhoneDetails)
        /// An unspecified error.
        case tfaChangeStatusDetails(TeamLog.TfaChangeStatusDetails)
        /// An unspecified error.
        case tfaRemoveBackupPhoneDetails(TeamLog.TfaRemoveBackupPhoneDetails)
        /// An unspecified error.
        case tfaRemoveSecurityKeyDetails(TeamLog.TfaRemoveSecurityKeyDetails)
        /// An unspecified error.
        case tfaResetDetails(TeamLog.TfaResetDetails)
        /// An unspecified error.
        case changedEnterpriseAdminRoleDetails(TeamLog.ChangedEnterpriseAdminRoleDetails)
        /// An unspecified error.
        case changedEnterpriseConnectedTeamStatusDetails(TeamLog.ChangedEnterpriseConnectedTeamStatusDetails)
        /// An unspecified error.
        case endedEnterpriseAdminSessionDetails(TeamLog.EndedEnterpriseAdminSessionDetails)
        /// An unspecified error.
        case endedEnterpriseAdminSessionDeprecatedDetails(TeamLog.EndedEnterpriseAdminSessionDeprecatedDetails)
        /// An unspecified error.
        case enterpriseSettingsLockingDetails(TeamLog.EnterpriseSettingsLockingDetails)
        /// An unspecified error.
        case guestAdminChangeStatusDetails(TeamLog.GuestAdminChangeStatusDetails)
        /// An unspecified error.
        case startedEnterpriseAdminSessionDetails(TeamLog.StartedEnterpriseAdminSessionDetails)
        /// An unspecified error.
        case teamMergeRequestAcceptedDetails(TeamLog.TeamMergeRequestAcceptedDetails)
        /// An unspecified error.
        case teamMergeRequestAcceptedShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestAcceptedShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestAutoCanceledDetails(TeamLog.TeamMergeRequestAutoCanceledDetails)
        /// An unspecified error.
        case teamMergeRequestCanceledDetails(TeamLog.TeamMergeRequestCanceledDetails)
        /// An unspecified error.
        case teamMergeRequestCanceledShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestCanceledShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestExpiredDetails(TeamLog.TeamMergeRequestExpiredDetails)
        /// An unspecified error.
        case teamMergeRequestExpiredShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestExpiredShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestRejectedShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestRejectedShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestReminderDetails(TeamLog.TeamMergeRequestReminderDetails)
        /// An unspecified error.
        case teamMergeRequestReminderShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestReminderShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestRevokedDetails(TeamLog.TeamMergeRequestRevokedDetails)
        /// An unspecified error.
        case teamMergeRequestSentShownToPrimaryTeamDetails(TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetails)
        /// An unspecified error.
        case teamMergeRequestSentShownToSecondaryTeamDetails(TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetails)
        /// Hints that this event was returned with missing details due to an internal error.
        case missingDetails(TeamLog.MissingDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventDetailsSerializer().serialize(self)))"
        }
    }
    open class EventDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventDetails) -> JSON {
            switch value {
                case .adminAlertingAlertStateChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingAlertStateChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_alert_state_changed_details")
                    return .dictionary(d)
                case .adminAlertingChangedAlertConfigDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingChangedAlertConfigDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_changed_alert_config_details")
                    return .dictionary(d)
                case .adminAlertingTriggeredAlertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingTriggeredAlertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_triggered_alert_details")
                    return .dictionary(d)
                case .appBlockedByPermissionsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppBlockedByPermissionsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_blocked_by_permissions_details")
                    return .dictionary(d)
                case .appLinkTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_team_details")
                    return .dictionary(d)
                case .appLinkUserDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkUserDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_user_details")
                    return .dictionary(d)
                case .appUnlinkTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_team_details")
                    return .dictionary(d)
                case .appUnlinkUserDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkUserDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_user_details")
                    return .dictionary(d)
                case .integrationConnectedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationConnectedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("integration_connected_details")
                    return .dictionary(d)
                case .integrationDisconnectedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationDisconnectedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("integration_disconnected_details")
                    return .dictionary(d)
                case .fileAddCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_add_comment_details")
                    return .dictionary(d)
                case .fileChangeCommentSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileChangeCommentSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_change_comment_subscription_details")
                    return .dictionary(d)
                case .fileDeleteCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete_comment_details")
                    return .dictionary(d)
                case .fileEditCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileEditCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_edit_comment_details")
                    return .dictionary(d)
                case .fileLikeCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileLikeCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_like_comment_details")
                    return .dictionary(d)
                case .fileResolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileResolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_resolve_comment_details")
                    return .dictionary(d)
                case .fileUnlikeCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnlikeCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_unlike_comment_details")
                    return .dictionary(d)
                case .fileUnresolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnresolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_unresolve_comment_details")
                    return .dictionary(d)
                case .governancePolicyAddFoldersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyAddFoldersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_add_folders_details")
                    return .dictionary(d)
                case .governancePolicyAddFolderFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyAddFolderFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_add_folder_failed_details")
                    return .dictionary(d)
                case .governancePolicyContentDisposedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyContentDisposedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_content_disposed_details")
                    return .dictionary(d)
                case .governancePolicyCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_create_details")
                    return .dictionary(d)
                case .governancePolicyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_delete_details")
                    return .dictionary(d)
                case .governancePolicyEditDetailsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyEditDetailsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_edit_details_details")
                    return .dictionary(d)
                case .governancePolicyEditDurationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyEditDurationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_edit_duration_details")
                    return .dictionary(d)
                case .governancePolicyExportCreatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyExportCreatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_export_created_details")
                    return .dictionary(d)
                case .governancePolicyExportRemovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyExportRemovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_export_removed_details")
                    return .dictionary(d)
                case .governancePolicyRemoveFoldersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyRemoveFoldersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_remove_folders_details")
                    return .dictionary(d)
                case .governancePolicyReportCreatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyReportCreatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_report_created_details")
                    return .dictionary(d)
                case .governancePolicyZipPartDownloadedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyZipPartDownloadedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_zip_part_downloaded_details")
                    return .dictionary(d)
                case .legalHoldsActivateAHoldDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsActivateAHoldDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_activate_a_hold_details")
                    return .dictionary(d)
                case .legalHoldsAddMembersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsAddMembersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_add_members_details")
                    return .dictionary(d)
                case .legalHoldsChangeHoldDetailsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsChangeHoldDetailsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_change_hold_details_details")
                    return .dictionary(d)
                case .legalHoldsChangeHoldNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsChangeHoldNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_change_hold_name_details")
                    return .dictionary(d)
                case .legalHoldsExportAHoldDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportAHoldDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_a_hold_details")
                    return .dictionary(d)
                case .legalHoldsExportCancelledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportCancelledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_cancelled_details")
                    return .dictionary(d)
                case .legalHoldsExportDownloadedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportDownloadedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_downloaded_details")
                    return .dictionary(d)
                case .legalHoldsExportRemovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportRemovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_removed_details")
                    return .dictionary(d)
                case .legalHoldsReleaseAHoldDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsReleaseAHoldDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_release_a_hold_details")
                    return .dictionary(d)
                case .legalHoldsRemoveMembersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsRemoveMembersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_remove_members_details")
                    return .dictionary(d)
                case .legalHoldsReportAHoldDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsReportAHoldDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_report_a_hold_details")
                    return .dictionary(d)
                case .deviceChangeIpDesktopDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpDesktopDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_desktop_details")
                    return .dictionary(d)
                case .deviceChangeIpMobileDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpMobileDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_mobile_details")
                    return .dictionary(d)
                case .deviceChangeIpWebDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpWebDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_web_details")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_fail_details")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_success_details")
                    return .dictionary(d)
                case .deviceLinkFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_fail_details")
                    return .dictionary(d)
                case .deviceLinkSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_success_details")
                    return .dictionary(d)
                case .deviceManagementDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_disabled_details")
                    return .dictionary(d)
                case .deviceManagementEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_enabled_details")
                    return .dictionary(d)
                case .deviceSyncBackupStatusChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceSyncBackupStatusChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_sync_backup_status_changed_details")
                    return .dictionary(d)
                case .deviceUnlinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceUnlinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_unlink_details")
                    return .dictionary(d)
                case .dropboxPasswordsExportedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsExportedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_exported_details")
                    return .dictionary(d)
                case .dropboxPasswordsNewDeviceEnrolledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsNewDeviceEnrolledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_new_device_enrolled_details")
                    return .dictionary(d)
                case .emmRefreshAuthTokenDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRefreshAuthTokenDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_refresh_auth_token_details")
                    return .dictionary(d)
                case .externalDriveBackupEligibilityStatusCheckedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_eligibility_status_checked_details")
                    return .dictionary(d)
                case .externalDriveBackupStatusChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupStatusChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_status_changed_details")
                    return .dictionary(d)
                case .accountCaptureChangeAvailabilityDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangeAvailabilityDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_availability_details")
                    return .dictionary(d)
                case .accountCaptureMigrateAccountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureMigrateAccountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_migrate_account_details")
                    return .dictionary(d)
                case .accountCaptureNotificationEmailsSentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureNotificationEmailsSentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_notification_emails_sent_details")
                    return .dictionary(d)
                case .accountCaptureRelinquishAccountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureRelinquishAccountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_relinquish_account_details")
                    return .dictionary(d)
                case .disabledDomainInvitesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DisabledDomainInvitesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("disabled_domain_invites_details")
                    return .dictionary(d)
                case .domainInvitesApproveRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesApproveRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_approve_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesDeclineRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_decline_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesEmailExistingUsersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesEmailExistingUsersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_email_existing_users_details")
                    return .dictionary(d)
                case .domainInvitesRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToNoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_no_details")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToYesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_yes_details")
                    return .dictionary(d)
                case .domainVerificationAddDomainFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_fail_details")
                    return .dictionary(d)
                case .domainVerificationAddDomainSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_success_details")
                    return .dictionary(d)
                case .domainVerificationRemoveDomainDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationRemoveDomainDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_remove_domain_details")
                    return .dictionary(d)
                case .enabledDomainInvitesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EnabledDomainInvitesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("enabled_domain_invites_details")
                    return .dictionary(d)
                case .applyNamingConventionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ApplyNamingConventionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("apply_naming_convention_details")
                    return .dictionary(d)
                case .createFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CreateFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("create_folder_details")
                    return .dictionary(d)
                case .fileAddDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_add_details")
                    return .dictionary(d)
                case .fileCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_copy_details")
                    return .dictionary(d)
                case .fileDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete_details")
                    return .dictionary(d)
                case .fileDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_download_details")
                    return .dictionary(d)
                case .fileEditDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileEditDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_edit_details")
                    return .dictionary(d)
                case .fileGetCopyReferenceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileGetCopyReferenceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_get_copy_reference_details")
                    return .dictionary(d)
                case .fileLockingLockStatusChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileLockingLockStatusChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_locking_lock_status_changed_details")
                    return .dictionary(d)
                case .fileMoveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileMoveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_move_details")
                    return .dictionary(d)
                case .filePermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FilePermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_permanently_delete_details")
                    return .dictionary(d)
                case .filePreviewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FilePreviewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_preview_details")
                    return .dictionary(d)
                case .fileRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_rename_details")
                    return .dictionary(d)
                case .fileRestoreDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRestoreDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_restore_details")
                    return .dictionary(d)
                case .fileRevertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRevertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_revert_details")
                    return .dictionary(d)
                case .fileRollbackChangesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRollbackChangesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_rollback_changes_details")
                    return .dictionary(d)
                case .fileSaveCopyReferenceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileSaveCopyReferenceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_save_copy_reference_details")
                    return .dictionary(d)
                case .folderOverviewDescriptionChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewDescriptionChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_description_changed_details")
                    return .dictionary(d)
                case .folderOverviewItemPinnedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewItemPinnedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_item_pinned_details")
                    return .dictionary(d)
                case .folderOverviewItemUnpinnedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewItemUnpinnedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_item_unpinned_details")
                    return .dictionary(d)
                case .objectLabelAddedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelAddedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_added_details")
                    return .dictionary(d)
                case .objectLabelRemovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelRemovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_removed_details")
                    return .dictionary(d)
                case .objectLabelUpdatedValueDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelUpdatedValueDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_updated_value_details")
                    return .dictionary(d)
                case .organizeFolderWithTidyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.OrganizeFolderWithTidyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("organize_folder_with_tidy_details")
                    return .dictionary(d)
                case .rewindFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.RewindFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("rewind_folder_details")
                    return .dictionary(d)
                case .undoNamingConventionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.UndoNamingConventionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("undo_naming_convention_details")
                    return .dictionary(d)
                case .undoOrganizeFolderWithTidyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.UndoOrganizeFolderWithTidyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("undo_organize_folder_with_tidy_details")
                    return .dictionary(d)
                case .userTagsAddedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.UserTagsAddedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("user_tags_added_details")
                    return .dictionary(d)
                case .userTagsRemovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.UserTagsRemovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("user_tags_removed_details")
                    return .dictionary(d)
                case .emailIngestReceiveFileDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmailIngestReceiveFileDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("email_ingest_receive_file_details")
                    return .dictionary(d)
                case .fileRequestChangeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestChangeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_change_details")
                    return .dictionary(d)
                case .fileRequestCloseDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCloseDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_close_details")
                    return .dictionary(d)
                case .fileRequestCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_create_details")
                    return .dictionary(d)
                case .fileRequestDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_delete_details")
                    return .dictionary(d)
                case .fileRequestReceiveFileDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestReceiveFileDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_receive_file_details")
                    return .dictionary(d)
                case .groupAddExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_external_id_details")
                    return .dictionary(d)
                case .groupAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_member_details")
                    return .dictionary(d)
                case .groupChangeExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_external_id_details")
                    return .dictionary(d)
                case .groupChangeManagementTypeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeManagementTypeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_management_type_details")
                    return .dictionary(d)
                case .groupChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_member_role_details")
                    return .dictionary(d)
                case .groupCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_create_details")
                    return .dictionary(d)
                case .groupDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_delete_details")
                    return .dictionary(d)
                case .groupDescriptionUpdatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupDescriptionUpdatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_description_updated_details")
                    return .dictionary(d)
                case .groupJoinPolicyUpdatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupJoinPolicyUpdatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_join_policy_updated_details")
                    return .dictionary(d)
                case .groupMovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupMovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_moved_details")
                    return .dictionary(d)
                case .groupRemoveExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_external_id_details")
                    return .dictionary(d)
                case .groupRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_member_details")
                    return .dictionary(d)
                case .groupRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_rename_details")
                    return .dictionary(d)
                case .accountLockOrUnlockedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountLockOrUnlockedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_lock_or_unlocked_details")
                    return .dictionary(d)
                case .emmErrorDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmErrorDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_error_details")
                    return .dictionary(d)
                case .guestAdminSignedInViaTrustedTeamsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminSignedInViaTrustedTeamsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_signed_in_via_trusted_teams_details")
                    return .dictionary(d)
                case .guestAdminSignedOutViaTrustedTeamsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminSignedOutViaTrustedTeamsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_signed_out_via_trusted_teams_details")
                    return .dictionary(d)
                case .loginFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LoginFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("login_fail_details")
                    return .dictionary(d)
                case .loginSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LoginSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("login_success_details")
                    return .dictionary(d)
                case .logoutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LogoutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("logout_details")
                    return .dictionary(d)
                case .resellerSupportSessionEndDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionEndDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_end_details")
                    return .dictionary(d)
                case .resellerSupportSessionStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_start_details")
                    return .dictionary(d)
                case .signInAsSessionEndDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionEndDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_end_details")
                    return .dictionary(d)
                case .signInAsSessionStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_start_details")
                    return .dictionary(d)
                case .ssoErrorDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoErrorDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_error_details")
                    return .dictionary(d)
                case .createTeamInviteLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CreateTeamInviteLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("create_team_invite_link_details")
                    return .dictionary(d)
                case .deleteTeamInviteLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeleteTeamInviteLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("delete_team_invite_link_details")
                    return .dictionary(d)
                case .memberAddExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberAddExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_add_external_id_details")
                    return .dictionary(d)
                case .memberAddNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberAddNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_add_name_details")
                    return .dictionary(d)
                case .memberChangeAdminRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeAdminRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_admin_role_details")
                    return .dictionary(d)
                case .memberChangeEmailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeEmailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_email_details")
                    return .dictionary(d)
                case .memberChangeExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_external_id_details")
                    return .dictionary(d)
                case .memberChangeMembershipTypeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeMembershipTypeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_membership_type_details")
                    return .dictionary(d)
                case .memberChangeNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_name_details")
                    return .dictionary(d)
                case .memberChangeResellerRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeResellerRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_reseller_role_details")
                    return .dictionary(d)
                case .memberChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_status_details")
                    return .dictionary(d)
                case .memberDeleteManualContactsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberDeleteManualContactsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_delete_manual_contacts_details")
                    return .dictionary(d)
                case .memberDeleteProfilePhotoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberDeleteProfilePhotoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_delete_profile_photo_details")
                    return .dictionary(d)
                case .memberPermanentlyDeleteAccountContentsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberPermanentlyDeleteAccountContentsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_permanently_delete_account_contents_details")
                    return .dictionary(d)
                case .memberRemoveExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberRemoveExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_remove_external_id_details")
                    return .dictionary(d)
                case .memberSetProfilePhotoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSetProfilePhotoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_set_profile_photo_details")
                    return .dictionary(d)
                case .memberSpaceLimitsAddCustomQuotaDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsAddCustomQuotaDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_add_custom_quota_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCustomQuotaDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeCustomQuotaDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_custom_quota_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_status_details")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveCustomQuotaDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsRemoveCustomQuotaDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_remove_custom_quota_details")
                    return .dictionary(d)
                case .memberSuggestDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggest_details")
                    return .dictionary(d)
                case .memberTransferAccountContentsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberTransferAccountContentsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_transfer_account_contents_details")
                    return .dictionary(d)
                case .pendingSecondaryEmailAddedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PendingSecondaryEmailAddedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("pending_secondary_email_added_details")
                    return .dictionary(d)
                case .secondaryEmailDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryEmailDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_email_deleted_details")
                    return .dictionary(d)
                case .secondaryEmailVerifiedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryEmailVerifiedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_email_verified_details")
                    return .dictionary(d)
                case .secondaryMailsPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryMailsPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_mails_policy_changed_details")
                    return .dictionary(d)
                case .binderAddPageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderAddPageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_add_page_details")
                    return .dictionary(d)
                case .binderAddSectionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderAddSectionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_add_section_details")
                    return .dictionary(d)
                case .binderRemovePageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRemovePageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_remove_page_details")
                    return .dictionary(d)
                case .binderRemoveSectionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRemoveSectionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_remove_section_details")
                    return .dictionary(d)
                case .binderRenamePageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRenamePageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_rename_page_details")
                    return .dictionary(d)
                case .binderRenameSectionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRenameSectionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_rename_section_details")
                    return .dictionary(d)
                case .binderReorderPageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderReorderPageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_reorder_page_details")
                    return .dictionary(d)
                case .binderReorderSectionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.BinderReorderSectionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("binder_reorder_section_details")
                    return .dictionary(d)
                case .paperContentAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_member_details")
                    return .dictionary(d)
                case .paperContentAddToFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddToFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_to_folder_details")
                    return .dictionary(d)
                case .paperContentArchiveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentArchiveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_archive_details")
                    return .dictionary(d)
                case .paperContentCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_create_details")
                    return .dictionary(d)
                case .paperContentPermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentPermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_permanently_delete_details")
                    return .dictionary(d)
                case .paperContentRemoveFromFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveFromFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_from_folder_details")
                    return .dictionary(d)
                case .paperContentRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_member_details")
                    return .dictionary(d)
                case .paperContentRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_rename_details")
                    return .dictionary(d)
                case .paperContentRestoreDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRestoreDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_restore_details")
                    return .dictionary(d)
                case .paperDocAddCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocAddCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_add_comment_details")
                    return .dictionary(d)
                case .paperDocChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_member_role_details")
                    return .dictionary(d)
                case .paperDocChangeSharingPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSharingPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_sharing_policy_details")
                    return .dictionary(d)
                case .paperDocChangeSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_subscription_details")
                    return .dictionary(d)
                case .paperDocDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_deleted_details")
                    return .dictionary(d)
                case .paperDocDeleteCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeleteCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_delete_comment_details")
                    return .dictionary(d)
                case .paperDocDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_download_details")
                    return .dictionary(d)
                case .paperDocEditDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit_details")
                    return .dictionary(d)
                case .paperDocEditCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit_comment_details")
                    return .dictionary(d)
                case .paperDocFollowedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocFollowedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_followed_details")
                    return .dictionary(d)
                case .paperDocMentionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocMentionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_mention_details")
                    return .dictionary(d)
                case .paperDocOwnershipChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocOwnershipChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_ownership_changed_details")
                    return .dictionary(d)
                case .paperDocRequestAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRequestAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_request_access_details")
                    return .dictionary(d)
                case .paperDocResolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocResolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_resolve_comment_details")
                    return .dictionary(d)
                case .paperDocRevertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRevertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_revert_details")
                    return .dictionary(d)
                case .paperDocSlackShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocSlackShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_slack_share_details")
                    return .dictionary(d)
                case .paperDocTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_team_invite_details")
                    return .dictionary(d)
                case .paperDocTrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_trashed_details")
                    return .dictionary(d)
                case .paperDocUnresolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUnresolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_unresolve_comment_details")
                    return .dictionary(d)
                case .paperDocUntrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUntrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_untrashed_details")
                    return .dictionary(d)
                case .paperDocViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_view_details")
                    return .dictionary(d)
                case .paperExternalViewAllowDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewAllowDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_allow_details")
                    return .dictionary(d)
                case .paperExternalViewDefaultTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewDefaultTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_default_team_details")
                    return .dictionary(d)
                case .paperExternalViewForbidDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewForbidDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_forbid_details")
                    return .dictionary(d)
                case .paperFolderChangeSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderChangeSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_change_subscription_details")
                    return .dictionary(d)
                case .paperFolderDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_deleted_details")
                    return .dictionary(d)
                case .paperFolderFollowedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderFollowedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_followed_details")
                    return .dictionary(d)
                case .paperFolderTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_team_invite_details")
                    return .dictionary(d)
                case .paperPublishedLinkChangePermissionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkChangePermissionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_change_permission_details")
                    return .dictionary(d)
                case .paperPublishedLinkCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_create_details")
                    return .dictionary(d)
                case .paperPublishedLinkDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_disabled_details")
                    return .dictionary(d)
                case .paperPublishedLinkViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_view_details")
                    return .dictionary(d)
                case .passwordChangeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordChangeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_change_details")
                    return .dictionary(d)
                case .passwordResetDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset_details")
                    return .dictionary(d)
                case .passwordResetAllDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetAllDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset_all_details")
                    return .dictionary(d)
                case .classificationCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("classification_create_report_details")
                    return .dictionary(d)
                case .classificationCreateReportFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationCreateReportFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("classification_create_report_fail_details")
                    return .dictionary(d)
                case .emmCreateExceptionsReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateExceptionsReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_exceptions_report_details")
                    return .dictionary(d)
                case .emmCreateUsageReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateUsageReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_usage_report_details")
                    return .dictionary(d)
                case .exportMembersReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExportMembersReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("export_members_report_details")
                    return .dictionary(d)
                case .exportMembersReportFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExportMembersReportFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("export_members_report_fail_details")
                    return .dictionary(d)
                case .externalSharingCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalSharingCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("external_sharing_create_report_details")
                    return .dictionary(d)
                case .externalSharingReportFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalSharingReportFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("external_sharing_report_failed_details")
                    return .dictionary(d)
                case .noExpirationLinkGenCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoExpirationLinkGenCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_expiration_link_gen_create_report_details")
                    return .dictionary(d)
                case .noExpirationLinkGenReportFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoExpirationLinkGenReportFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_expiration_link_gen_report_failed_details")
                    return .dictionary(d)
                case .noPasswordLinkGenCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkGenCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_gen_create_report_details")
                    return .dictionary(d)
                case .noPasswordLinkGenReportFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkGenReportFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_gen_report_failed_details")
                    return .dictionary(d)
                case .noPasswordLinkViewCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkViewCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_view_create_report_details")
                    return .dictionary(d)
                case .noPasswordLinkViewReportFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkViewReportFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_view_report_failed_details")
                    return .dictionary(d)
                case .outdatedLinkViewCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.OutdatedLinkViewCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("outdated_link_view_create_report_details")
                    return .dictionary(d)
                case .outdatedLinkViewReportFailedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.OutdatedLinkViewReportFailedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("outdated_link_view_report_failed_details")
                    return .dictionary(d)
                case .paperAdminExportStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperAdminExportStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_admin_export_start_details")
                    return .dictionary(d)
                case .smartSyncCreateAdminPrivilegeReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncCreateAdminPrivilegeReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_create_admin_privilege_report_details")
                    return .dictionary(d)
                case .teamActivityCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamActivityCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_activity_create_report_details")
                    return .dictionary(d)
                case .teamActivityCreateReportFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamActivityCreateReportFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_activity_create_report_fail_details")
                    return .dictionary(d)
                case .collectionShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CollectionShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("collection_share_details")
                    return .dictionary(d)
                case .fileTransfersFileAddDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersFileAddDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_file_add_details")
                    return .dictionary(d)
                case .fileTransfersTransferDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_delete_details")
                    return .dictionary(d)
                case .fileTransfersTransferDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_download_details")
                    return .dictionary(d)
                case .fileTransfersTransferSendDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferSendDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_send_details")
                    return .dictionary(d)
                case .fileTransfersTransferViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_view_details")
                    return .dictionary(d)
                case .noteAclInviteOnlyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclInviteOnlyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_invite_only_details")
                    return .dictionary(d)
                case .noteAclLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_link_details")
                    return .dictionary(d)
                case .noteAclTeamLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclTeamLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_team_link_details")
                    return .dictionary(d)
                case .noteSharedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteSharedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_shared_details")
                    return .dictionary(d)
                case .noteShareReceiveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteShareReceiveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_share_receive_details")
                    return .dictionary(d)
                case .openNoteSharedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.OpenNoteSharedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("open_note_shared_details")
                    return .dictionary(d)
                case .sfAddGroupDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfAddGroupDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_add_group_details")
                    return .dictionary(d)
                case .sfAllowNonMembersToViewSharedLinksDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfAllowNonMembersToViewSharedLinksDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_allow_non_members_to_view_shared_links_details")
                    return .dictionary(d)
                case .sfExternalInviteWarnDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfExternalInviteWarnDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_external_invite_warn_details")
                    return .dictionary(d)
                case .sfFbInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_invite_details")
                    return .dictionary(d)
                case .sfFbInviteChangeRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbInviteChangeRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_invite_change_role_details")
                    return .dictionary(d)
                case .sfFbUninviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbUninviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_uninvite_details")
                    return .dictionary(d)
                case .sfInviteGroupDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfInviteGroupDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_invite_group_details")
                    return .dictionary(d)
                case .sfTeamGrantAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamGrantAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_grant_access_details")
                    return .dictionary(d)
                case .sfTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite_details")
                    return .dictionary(d)
                case .sfTeamInviteChangeRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteChangeRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite_change_role_details")
                    return .dictionary(d)
                case .sfTeamJoinDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join_details")
                    return .dictionary(d)
                case .sfTeamJoinFromOobLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinFromOobLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join_from_oob_link_details")
                    return .dictionary(d)
                case .sfTeamUninviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamUninviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_uninvite_details")
                    return .dictionary(d)
                case .sharedContentAddInviteesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddInviteesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_invitees_details")
                    return .dictionary(d)
                case .sharedContentAddLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentAddLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_password_details")
                    return .dictionary(d)
                case .sharedContentAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_member_details")
                    return .dictionary(d)
                case .sharedContentChangeDownloadsPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeDownloadsPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_downloads_policy_details")
                    return .dictionary(d)
                case .sharedContentChangeInviteeRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeInviteeRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_invitee_role_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkAudienceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkAudienceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_audience_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_password_details")
                    return .dictionary(d)
                case .sharedContentChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_member_role_details")
                    return .dictionary(d)
                case .sharedContentChangeViewerInfoPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeViewerInfoPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_viewer_info_policy_details")
                    return .dictionary(d)
                case .sharedContentClaimInvitationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentClaimInvitationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_claim_invitation_details")
                    return .dictionary(d)
                case .sharedContentCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_copy_details")
                    return .dictionary(d)
                case .sharedContentDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_download_details")
                    return .dictionary(d)
                case .sharedContentRelinquishMembershipDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRelinquishMembershipDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_relinquish_membership_details")
                    return .dictionary(d)
                case .sharedContentRemoveInviteesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveInviteesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_invitees_details")
                    return .dictionary(d)
                case .sharedContentRemoveLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentRemoveLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_password_details")
                    return .dictionary(d)
                case .sharedContentRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_member_details")
                    return .dictionary(d)
                case .sharedContentRequestAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRequestAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_request_access_details")
                    return .dictionary(d)
                case .sharedContentRestoreInviteesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRestoreInviteesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_restore_invitees_details")
                    return .dictionary(d)
                case .sharedContentRestoreMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRestoreMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_restore_member_details")
                    return .dictionary(d)
                case .sharedContentUnshareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentUnshareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_unshare_details")
                    return .dictionary(d)
                case .sharedContentViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_view_details")
                    return .dictionary(d)
                case .sharedFolderChangeLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_link_policy_details")
                    return .dictionary(d)
                case .sharedFolderChangeMembersInheritancePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersInheritancePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_inheritance_policy_details")
                    return .dictionary(d)
                case .sharedFolderChangeMembersManagementPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersManagementPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_management_policy_details")
                    return .dictionary(d)
                case .sharedFolderChangeMembersPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_policy_details")
                    return .dictionary(d)
                case .sharedFolderCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_create_details")
                    return .dictionary(d)
                case .sharedFolderDeclineInvitationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderDeclineInvitationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_decline_invitation_details")
                    return .dictionary(d)
                case .sharedFolderMountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderMountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_mount_details")
                    return .dictionary(d)
                case .sharedFolderNestDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderNestDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_nest_details")
                    return .dictionary(d)
                case .sharedFolderTransferOwnershipDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderTransferOwnershipDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_transfer_ownership_details")
                    return .dictionary(d)
                case .sharedFolderUnmountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderUnmountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_unmount_details")
                    return .dictionary(d)
                case .sharedLinkAddExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkAddExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_add_expiry_details")
                    return .dictionary(d)
                case .sharedLinkChangeExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkChangeExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_change_expiry_details")
                    return .dictionary(d)
                case .sharedLinkChangeVisibilityDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkChangeVisibilityDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_change_visibility_details")
                    return .dictionary(d)
                case .sharedLinkCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_copy_details")
                    return .dictionary(d)
                case .sharedLinkCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_create_details")
                    return .dictionary(d)
                case .sharedLinkDisableDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkDisableDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_disable_details")
                    return .dictionary(d)
                case .sharedLinkDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_download_details")
                    return .dictionary(d)
                case .sharedLinkRemoveExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkRemoveExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_remove_expiry_details")
                    return .dictionary(d)
                case .sharedLinkSettingsAddExpirationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAddExpirationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_add_expiration_details")
                    return .dictionary(d)
                case .sharedLinkSettingsAddPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAddPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_add_password_details")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAllowDownloadDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_allow_download_disabled_details")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAllowDownloadEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_allow_download_enabled_details")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeAudienceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangeAudienceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_audience_details")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeExpirationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangeExpirationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_expiration_details")
                    return .dictionary(d)
                case .sharedLinkSettingsChangePasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangePasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_password_details")
                    return .dictionary(d)
                case .sharedLinkSettingsRemoveExpirationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsRemoveExpirationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_remove_expiration_details")
                    return .dictionary(d)
                case .sharedLinkSettingsRemovePasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsRemovePasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_remove_password_details")
                    return .dictionary(d)
                case .sharedLinkShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_share_details")
                    return .dictionary(d)
                case .sharedLinkViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_view_details")
                    return .dictionary(d)
                case .sharedNoteOpenedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedNoteOpenedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_note_opened_details")
                    return .dictionary(d)
                case .shmodelDisableDownloadsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelDisableDownloadsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_disable_downloads_details")
                    return .dictionary(d)
                case .shmodelEnableDownloadsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelEnableDownloadsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_enable_downloads_details")
                    return .dictionary(d)
                case .shmodelGroupShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelGroupShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_group_share_details")
                    return .dictionary(d)
                case .showcaseAccessGrantedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseAccessGrantedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_access_granted_details")
                    return .dictionary(d)
                case .showcaseAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_add_member_details")
                    return .dictionary(d)
                case .showcaseArchivedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseArchivedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_archived_details")
                    return .dictionary(d)
                case .showcaseCreatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseCreatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_created_details")
                    return .dictionary(d)
                case .showcaseDeleteCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseDeleteCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_delete_comment_details")
                    return .dictionary(d)
                case .showcaseEditedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseEditedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_edited_details")
                    return .dictionary(d)
                case .showcaseEditCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseEditCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_edit_comment_details")
                    return .dictionary(d)
                case .showcaseFileAddedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileAddedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_added_details")
                    return .dictionary(d)
                case .showcaseFileDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_download_details")
                    return .dictionary(d)
                case .showcaseFileRemovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileRemovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_removed_details")
                    return .dictionary(d)
                case .showcaseFileViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_view_details")
                    return .dictionary(d)
                case .showcasePermanentlyDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcasePermanentlyDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_permanently_deleted_details")
                    return .dictionary(d)
                case .showcasePostCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcasePostCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_post_comment_details")
                    return .dictionary(d)
                case .showcaseRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_remove_member_details")
                    return .dictionary(d)
                case .showcaseRenamedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRenamedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_renamed_details")
                    return .dictionary(d)
                case .showcaseRequestAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRequestAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_request_access_details")
                    return .dictionary(d)
                case .showcaseResolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseResolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_resolve_comment_details")
                    return .dictionary(d)
                case .showcaseRestoredDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRestoredDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_restored_details")
                    return .dictionary(d)
                case .showcaseTrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseTrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_trashed_details")
                    return .dictionary(d)
                case .showcaseTrashedDeprecatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseTrashedDeprecatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_trashed_deprecated_details")
                    return .dictionary(d)
                case .showcaseUnresolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUnresolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_unresolve_comment_details")
                    return .dictionary(d)
                case .showcaseUntrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUntrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_untrashed_details")
                    return .dictionary(d)
                case .showcaseUntrashedDeprecatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUntrashedDeprecatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_untrashed_deprecated_details")
                    return .dictionary(d)
                case .showcaseViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_view_details")
                    return .dictionary(d)
                case .ssoAddCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_cert_details")
                    return .dictionary(d)
                case .ssoAddLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_login_url_details")
                    return .dictionary(d)
                case .ssoAddLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_logout_url_details")
                    return .dictionary(d)
                case .ssoChangeCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_cert_details")
                    return .dictionary(d)
                case .ssoChangeLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_login_url_details")
                    return .dictionary(d)
                case .ssoChangeLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_logout_url_details")
                    return .dictionary(d)
                case .ssoChangeSamlIdentityModeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeSamlIdentityModeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_saml_identity_mode_details")
                    return .dictionary(d)
                case .ssoRemoveCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_cert_details")
                    return .dictionary(d)
                case .ssoRemoveLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_login_url_details")
                    return .dictionary(d)
                case .ssoRemoveLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_logout_url_details")
                    return .dictionary(d)
                case .teamFolderChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_change_status_details")
                    return .dictionary(d)
                case .teamFolderCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_create_details")
                    return .dictionary(d)
                case .teamFolderDowngradeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderDowngradeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_downgrade_details")
                    return .dictionary(d)
                case .teamFolderPermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderPermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_permanently_delete_details")
                    return .dictionary(d)
                case .teamFolderRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_rename_details")
                    return .dictionary(d)
                case .teamSelectiveSyncSettingsChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSelectiveSyncSettingsChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_selective_sync_settings_changed_details")
                    return .dictionary(d)
                case .accountCaptureChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_policy_details")
                    return .dictionary(d)
                case .adminEmailRemindersChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AdminEmailRemindersChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("admin_email_reminders_changed_details")
                    return .dictionary(d)
                case .allowDownloadDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_disabled_details")
                    return .dictionary(d)
                case .allowDownloadEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_enabled_details")
                    return .dictionary(d)
                case .appPermissionsChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppPermissionsChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_permissions_changed_details")
                    return .dictionary(d)
                case .cameraUploadsPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CameraUploadsPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("camera_uploads_policy_changed_details")
                    return .dictionary(d)
                case .captureTranscriptPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CaptureTranscriptPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("capture_transcript_policy_changed_details")
                    return .dictionary(d)
                case .classificationChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("classification_change_policy_details")
                    return .dictionary(d)
                case .computerBackupPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ComputerBackupPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("computer_backup_policy_changed_details")
                    return .dictionary(d)
                case .contentAdministrationPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ContentAdministrationPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("content_administration_policy_changed_details")
                    return .dictionary(d)
                case .dataPlacementRestrictionChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_change_policy_details")
                    return .dictionary(d)
                case .dataPlacementRestrictionSatisfyPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionSatisfyPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_satisfy_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_add_exception_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeDesktopPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeDesktopPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_desktop_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeMobilePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeMobilePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_mobile_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeOverageActionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeOverageActionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_overage_action_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeUnlinkActionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeUnlinkActionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_unlink_action_details")
                    return .dictionary(d)
                case .deviceApprovalsRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_remove_exception_details")
                    return .dictionary(d)
                case .directoryRestrictionsAddMembersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DirectoryRestrictionsAddMembersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("directory_restrictions_add_members_details")
                    return .dictionary(d)
                case .directoryRestrictionsRemoveMembersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DirectoryRestrictionsRemoveMembersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("directory_restrictions_remove_members_details")
                    return .dictionary(d)
                case .dropboxPasswordsPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_policy_changed_details")
                    return .dictionary(d)
                case .emailIngestPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmailIngestPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("email_ingest_policy_changed_details")
                    return .dictionary(d)
                case .emmAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_add_exception_details")
                    return .dictionary(d)
                case .emmChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_change_policy_details")
                    return .dictionary(d)
                case .emmRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_remove_exception_details")
                    return .dictionary(d)
                case .extendedVersionHistoryChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExtendedVersionHistoryChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("extended_version_history_change_policy_details")
                    return .dictionary(d)
                case .externalDriveBackupPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_policy_changed_details")
                    return .dictionary(d)
                case .fileCommentsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileCommentsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_comments_change_policy_details")
                    return .dictionary(d)
                case .fileLockingPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileLockingPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_locking_policy_changed_details")
                    return .dictionary(d)
                case .fileProviderMigrationPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileProviderMigrationPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_provider_migration_policy_changed_details")
                    return .dictionary(d)
                case .fileRequestsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_change_policy_details")
                    return .dictionary(d)
                case .fileRequestsEmailsEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_enabled_details")
                    return .dictionary(d)
                case .fileRequestsEmailsRestrictedToTeamOnlyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_restricted_to_team_only_details")
                    return .dictionary(d)
                case .fileTransfersPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_policy_changed_details")
                    return .dictionary(d)
                case .folderLinkRestrictionPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FolderLinkRestrictionPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("folder_link_restriction_policy_changed_details")
                    return .dictionary(d)
                case .googleSsoChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GoogleSsoChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("google_sso_change_policy_details")
                    return .dictionary(d)
                case .groupUserManagementChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupUserManagementChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_user_management_change_policy_details")
                    return .dictionary(d)
                case .integrationPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("integration_policy_changed_details")
                    return .dictionary(d)
                case .inviteAcceptanceEmailPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.InviteAcceptanceEmailPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("invite_acceptance_email_policy_changed_details")
                    return .dictionary(d)
                case .memberRequestsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberRequestsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_requests_change_policy_details")
                    return .dictionary(d)
                case .memberSendInvitePolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSendInvitePolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_send_invite_policy_changed_details")
                    return .dictionary(d)
                case .memberSpaceLimitsAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_add_exception_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCapsTypePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_caps_type_policy_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_policy_details")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_remove_exception_details")
                    return .dictionary(d)
                case .memberSuggestionsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestionsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggestions_change_policy_details")
                    return .dictionary(d)
                case .microsoftOfficeAddinChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MicrosoftOfficeAddinChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("microsoft_office_addin_change_policy_details")
                    return .dictionary(d)
                case .networkControlChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NetworkControlChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("network_control_change_policy_details")
                    return .dictionary(d)
                case .paperChangeDeploymentPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeDeploymentPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_deployment_policy_details")
                    return .dictionary(d)
                case .paperChangeMemberLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_link_policy_details")
                    return .dictionary(d)
                case .paperChangeMemberPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_policy_details")
                    return .dictionary(d)
                case .paperChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_policy_details")
                    return .dictionary(d)
                case .paperDefaultFolderPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDefaultFolderPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_default_folder_policy_changed_details")
                    return .dictionary(d)
                case .paperDesktopPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDesktopPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_desktop_policy_changed_details")
                    return .dictionary(d)
                case .paperEnabledUsersGroupAdditionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupAdditionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_addition_details")
                    return .dictionary(d)
                case .paperEnabledUsersGroupRemovalDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupRemovalDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_removal_details")
                    return .dictionary(d)
                case .passwordStrengthRequirementsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordStrengthRequirementsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_strength_requirements_change_policy_details")
                    return .dictionary(d)
                case .permanentDeleteChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PermanentDeleteChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("permanent_delete_change_policy_details")
                    return .dictionary(d)
                case .resellerSupportChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_change_policy_details")
                    return .dictionary(d)
                case .rewindPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.RewindPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("rewind_policy_changed_details")
                    return .dictionary(d)
                case .sendForSignaturePolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SendForSignaturePolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("send_for_signature_policy_changed_details")
                    return .dictionary(d)
                case .sharingChangeFolderJoinPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeFolderJoinPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_folder_join_policy_details")
                    return .dictionary(d)
                case .sharingChangeLinkAllowChangeExpirationPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_allow_change_expiration_policy_details")
                    return .dictionary(d)
                case .sharingChangeLinkDefaultExpirationPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkDefaultExpirationPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_default_expiration_policy_details")
                    return .dictionary(d)
                case .sharingChangeLinkEnforcePasswordPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkEnforcePasswordPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_enforce_password_policy_details")
                    return .dictionary(d)
                case .sharingChangeLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_policy_details")
                    return .dictionary(d)
                case .sharingChangeMemberPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeMemberPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_member_policy_details")
                    return .dictionary(d)
                case .showcaseChangeDownloadPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeDownloadPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_download_policy_details")
                    return .dictionary(d)
                case .showcaseChangeEnabledPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeEnabledPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_enabled_policy_details")
                    return .dictionary(d)
                case .showcaseChangeExternalSharingPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeExternalSharingPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_external_sharing_policy_details")
                    return .dictionary(d)
                case .smarterSmartSyncPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmarterSmartSyncPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smarter_smart_sync_policy_changed_details")
                    return .dictionary(d)
                case .smartSyncChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_change_policy_details")
                    return .dictionary(d)
                case .smartSyncNotOptOutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncNotOptOutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_not_opt_out_details")
                    return .dictionary(d)
                case .smartSyncOptOutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncOptOutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_opt_out_details")
                    return .dictionary(d)
                case .ssoChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_policy_details")
                    return .dictionary(d)
                case .teamBrandingPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamBrandingPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_branding_policy_changed_details")
                    return .dictionary(d)
                case .teamExtensionsPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamExtensionsPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_extensions_policy_changed_details")
                    return .dictionary(d)
                case .teamSelectiveSyncPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSelectiveSyncPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_selective_sync_policy_changed_details")
                    return .dictionary(d)
                case .teamSharingWhitelistSubjectsChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSharingWhitelistSubjectsChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_sharing_whitelist_subjects_changed_details")
                    return .dictionary(d)
                case .tfaAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_exception_details")
                    return .dictionary(d)
                case .tfaChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_policy_details")
                    return .dictionary(d)
                case .tfaRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_exception_details")
                    return .dictionary(d)
                case .twoAccountChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TwoAccountChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("two_account_change_policy_details")
                    return .dictionary(d)
                case .viewerInfoPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ViewerInfoPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("viewer_info_policy_changed_details")
                    return .dictionary(d)
                case .watermarkingPolicyChangedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WatermarkingPolicyChangedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("watermarking_policy_changed_details")
                    return .dictionary(d)
                case .webSessionsChangeActiveSessionLimitDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeActiveSessionLimitDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_active_session_limit_details")
                    return .dictionary(d)
                case .webSessionsChangeFixedLengthPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeFixedLengthPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_fixed_length_policy_details")
                    return .dictionary(d)
                case .webSessionsChangeIdleLengthPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeIdleLengthPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_idle_length_policy_details")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestSuccessfulDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataResidencyMigrationRequestSuccessfulDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_residency_migration_request_successful_details")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestUnsuccessfulDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataResidencyMigrationRequestUnsuccessfulDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_residency_migration_request_unsuccessful_details")
                    return .dictionary(d)
                case .teamMergeFromDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeFromDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_from_details")
                    return .dictionary(d)
                case .teamMergeToDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeToDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_to_details")
                    return .dictionary(d)
                case .teamProfileAddBackgroundDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileAddBackgroundDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_add_background_details")
                    return .dictionary(d)
                case .teamProfileAddLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileAddLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_add_logo_details")
                    return .dictionary(d)
                case .teamProfileChangeBackgroundDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeBackgroundDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_background_details")
                    return .dictionary(d)
                case .teamProfileChangeDefaultLanguageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeDefaultLanguageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_default_language_details")
                    return .dictionary(d)
                case .teamProfileChangeLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_logo_details")
                    return .dictionary(d)
                case .teamProfileChangeNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_name_details")
                    return .dictionary(d)
                case .teamProfileRemoveBackgroundDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileRemoveBackgroundDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_remove_background_details")
                    return .dictionary(d)
                case .teamProfileRemoveLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileRemoveLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_remove_logo_details")
                    return .dictionary(d)
                case .tfaAddBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_backup_phone_details")
                    return .dictionary(d)
                case .tfaAddSecurityKeyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddSecurityKeyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_security_key_details")
                    return .dictionary(d)
                case .tfaChangeBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_backup_phone_details")
                    return .dictionary(d)
                case .tfaChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_status_details")
                    return .dictionary(d)
                case .tfaRemoveBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_backup_phone_details")
                    return .dictionary(d)
                case .tfaRemoveSecurityKeyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveSecurityKeyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_security_key_details")
                    return .dictionary(d)
                case .tfaResetDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaResetDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_reset_details")
                    return .dictionary(d)
                case .changedEnterpriseAdminRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ChangedEnterpriseAdminRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("changed_enterprise_admin_role_details")
                    return .dictionary(d)
                case .changedEnterpriseConnectedTeamStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ChangedEnterpriseConnectedTeamStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("changed_enterprise_connected_team_status_details")
                    return .dictionary(d)
                case .endedEnterpriseAdminSessionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EndedEnterpriseAdminSessionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("ended_enterprise_admin_session_details")
                    return .dictionary(d)
                case .endedEnterpriseAdminSessionDeprecatedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EndedEnterpriseAdminSessionDeprecatedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("ended_enterprise_admin_session_deprecated_details")
                    return .dictionary(d)
                case .enterpriseSettingsLockingDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EnterpriseSettingsLockingDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("enterprise_settings_locking_details")
                    return .dictionary(d)
                case .guestAdminChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_change_status_details")
                    return .dictionary(d)
                case .startedEnterpriseAdminSessionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.StartedEnterpriseAdminSessionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("started_enterprise_admin_session_details")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted_details")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestAutoCanceledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAutoCanceledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_auto_canceled_details")
                    return .dictionary(d)
                case .teamMergeRequestCanceledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled_details")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestExpiredDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired_details")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestReminderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder_details")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestRevokedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRevokedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_revoked_details")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToPrimaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_sent_shown_to_primary_team_details")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToSecondaryTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_sent_shown_to_secondary_team_details")
                    return .dictionary(d)
                case .missingDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MissingDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("missing_details")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin_alerting_alert_state_changed_details":
                            let v = TeamLog.AdminAlertingAlertStateChangedDetailsSerializer().deserialize(json)
                            return EventDetails.adminAlertingAlertStateChangedDetails(v)
                        case "admin_alerting_changed_alert_config_details":
                            let v = TeamLog.AdminAlertingChangedAlertConfigDetailsSerializer().deserialize(json)
                            return EventDetails.adminAlertingChangedAlertConfigDetails(v)
                        case "admin_alerting_triggered_alert_details":
                            let v = TeamLog.AdminAlertingTriggeredAlertDetailsSerializer().deserialize(json)
                            return EventDetails.adminAlertingTriggeredAlertDetails(v)
                        case "app_blocked_by_permissions_details":
                            let v = TeamLog.AppBlockedByPermissionsDetailsSerializer().deserialize(json)
                            return EventDetails.appBlockedByPermissionsDetails(v)
                        case "app_link_team_details":
                            let v = TeamLog.AppLinkTeamDetailsSerializer().deserialize(json)
                            return EventDetails.appLinkTeamDetails(v)
                        case "app_link_user_details":
                            let v = TeamLog.AppLinkUserDetailsSerializer().deserialize(json)
                            return EventDetails.appLinkUserDetails(v)
                        case "app_unlink_team_details":
                            let v = TeamLog.AppUnlinkTeamDetailsSerializer().deserialize(json)
                            return EventDetails.appUnlinkTeamDetails(v)
                        case "app_unlink_user_details":
                            let v = TeamLog.AppUnlinkUserDetailsSerializer().deserialize(json)
                            return EventDetails.appUnlinkUserDetails(v)
                        case "integration_connected_details":
                            let v = TeamLog.IntegrationConnectedDetailsSerializer().deserialize(json)
                            return EventDetails.integrationConnectedDetails(v)
                        case "integration_disconnected_details":
                            let v = TeamLog.IntegrationDisconnectedDetailsSerializer().deserialize(json)
                            return EventDetails.integrationDisconnectedDetails(v)
                        case "file_add_comment_details":
                            let v = TeamLog.FileAddCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileAddCommentDetails(v)
                        case "file_change_comment_subscription_details":
                            let v = TeamLog.FileChangeCommentSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.fileChangeCommentSubscriptionDetails(v)
                        case "file_delete_comment_details":
                            let v = TeamLog.FileDeleteCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileDeleteCommentDetails(v)
                        case "file_edit_comment_details":
                            let v = TeamLog.FileEditCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileEditCommentDetails(v)
                        case "file_like_comment_details":
                            let v = TeamLog.FileLikeCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileLikeCommentDetails(v)
                        case "file_resolve_comment_details":
                            let v = TeamLog.FileResolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileResolveCommentDetails(v)
                        case "file_unlike_comment_details":
                            let v = TeamLog.FileUnlikeCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileUnlikeCommentDetails(v)
                        case "file_unresolve_comment_details":
                            let v = TeamLog.FileUnresolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileUnresolveCommentDetails(v)
                        case "governance_policy_add_folders_details":
                            let v = TeamLog.GovernancePolicyAddFoldersDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyAddFoldersDetails(v)
                        case "governance_policy_add_folder_failed_details":
                            let v = TeamLog.GovernancePolicyAddFolderFailedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyAddFolderFailedDetails(v)
                        case "governance_policy_content_disposed_details":
                            let v = TeamLog.GovernancePolicyContentDisposedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyContentDisposedDetails(v)
                        case "governance_policy_create_details":
                            let v = TeamLog.GovernancePolicyCreateDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyCreateDetails(v)
                        case "governance_policy_delete_details":
                            let v = TeamLog.GovernancePolicyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyDeleteDetails(v)
                        case "governance_policy_edit_details_details":
                            let v = TeamLog.GovernancePolicyEditDetailsDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyEditDetailsDetails(v)
                        case "governance_policy_edit_duration_details":
                            let v = TeamLog.GovernancePolicyEditDurationDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyEditDurationDetails(v)
                        case "governance_policy_export_created_details":
                            let v = TeamLog.GovernancePolicyExportCreatedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyExportCreatedDetails(v)
                        case "governance_policy_export_removed_details":
                            let v = TeamLog.GovernancePolicyExportRemovedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyExportRemovedDetails(v)
                        case "governance_policy_remove_folders_details":
                            let v = TeamLog.GovernancePolicyRemoveFoldersDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyRemoveFoldersDetails(v)
                        case "governance_policy_report_created_details":
                            let v = TeamLog.GovernancePolicyReportCreatedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyReportCreatedDetails(v)
                        case "governance_policy_zip_part_downloaded_details":
                            let v = TeamLog.GovernancePolicyZipPartDownloadedDetailsSerializer().deserialize(json)
                            return EventDetails.governancePolicyZipPartDownloadedDetails(v)
                        case "legal_holds_activate_a_hold_details":
                            let v = TeamLog.LegalHoldsActivateAHoldDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsActivateAHoldDetails(v)
                        case "legal_holds_add_members_details":
                            let v = TeamLog.LegalHoldsAddMembersDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsAddMembersDetails(v)
                        case "legal_holds_change_hold_details_details":
                            let v = TeamLog.LegalHoldsChangeHoldDetailsDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsChangeHoldDetailsDetails(v)
                        case "legal_holds_change_hold_name_details":
                            let v = TeamLog.LegalHoldsChangeHoldNameDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsChangeHoldNameDetails(v)
                        case "legal_holds_export_a_hold_details":
                            let v = TeamLog.LegalHoldsExportAHoldDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsExportAHoldDetails(v)
                        case "legal_holds_export_cancelled_details":
                            let v = TeamLog.LegalHoldsExportCancelledDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsExportCancelledDetails(v)
                        case "legal_holds_export_downloaded_details":
                            let v = TeamLog.LegalHoldsExportDownloadedDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsExportDownloadedDetails(v)
                        case "legal_holds_export_removed_details":
                            let v = TeamLog.LegalHoldsExportRemovedDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsExportRemovedDetails(v)
                        case "legal_holds_release_a_hold_details":
                            let v = TeamLog.LegalHoldsReleaseAHoldDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsReleaseAHoldDetails(v)
                        case "legal_holds_remove_members_details":
                            let v = TeamLog.LegalHoldsRemoveMembersDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsRemoveMembersDetails(v)
                        case "legal_holds_report_a_hold_details":
                            let v = TeamLog.LegalHoldsReportAHoldDetailsSerializer().deserialize(json)
                            return EventDetails.legalHoldsReportAHoldDetails(v)
                        case "device_change_ip_desktop_details":
                            let v = TeamLog.DeviceChangeIpDesktopDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpDesktopDetails(v)
                        case "device_change_ip_mobile_details":
                            let v = TeamLog.DeviceChangeIpMobileDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpMobileDetails(v)
                        case "device_change_ip_web_details":
                            let v = TeamLog.DeviceChangeIpWebDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpWebDetails(v)
                        case "device_delete_on_unlink_fail_details":
                            let v = TeamLog.DeviceDeleteOnUnlinkFailDetailsSerializer().deserialize(json)
                            return EventDetails.deviceDeleteOnUnlinkFailDetails(v)
                        case "device_delete_on_unlink_success_details":
                            let v = TeamLog.DeviceDeleteOnUnlinkSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.deviceDeleteOnUnlinkSuccessDetails(v)
                        case "device_link_fail_details":
                            let v = TeamLog.DeviceLinkFailDetailsSerializer().deserialize(json)
                            return EventDetails.deviceLinkFailDetails(v)
                        case "device_link_success_details":
                            let v = TeamLog.DeviceLinkSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.deviceLinkSuccessDetails(v)
                        case "device_management_disabled_details":
                            let v = TeamLog.DeviceManagementDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.deviceManagementDisabledDetails(v)
                        case "device_management_enabled_details":
                            let v = TeamLog.DeviceManagementEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.deviceManagementEnabledDetails(v)
                        case "device_sync_backup_status_changed_details":
                            let v = TeamLog.DeviceSyncBackupStatusChangedDetailsSerializer().deserialize(json)
                            return EventDetails.deviceSyncBackupStatusChangedDetails(v)
                        case "device_unlink_details":
                            let v = TeamLog.DeviceUnlinkDetailsSerializer().deserialize(json)
                            return EventDetails.deviceUnlinkDetails(v)
                        case "dropbox_passwords_exported_details":
                            let v = TeamLog.DropboxPasswordsExportedDetailsSerializer().deserialize(json)
                            return EventDetails.dropboxPasswordsExportedDetails(v)
                        case "dropbox_passwords_new_device_enrolled_details":
                            let v = TeamLog.DropboxPasswordsNewDeviceEnrolledDetailsSerializer().deserialize(json)
                            return EventDetails.dropboxPasswordsNewDeviceEnrolledDetails(v)
                        case "emm_refresh_auth_token_details":
                            let v = TeamLog.EmmRefreshAuthTokenDetailsSerializer().deserialize(json)
                            return EventDetails.emmRefreshAuthTokenDetails(v)
                        case "external_drive_backup_eligibility_status_checked_details":
                            let v = TeamLog.ExternalDriveBackupEligibilityStatusCheckedDetailsSerializer().deserialize(json)
                            return EventDetails.externalDriveBackupEligibilityStatusCheckedDetails(v)
                        case "external_drive_backup_status_changed_details":
                            let v = TeamLog.ExternalDriveBackupStatusChangedDetailsSerializer().deserialize(json)
                            return EventDetails.externalDriveBackupStatusChangedDetails(v)
                        case "account_capture_change_availability_details":
                            let v = TeamLog.AccountCaptureChangeAvailabilityDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureChangeAvailabilityDetails(v)
                        case "account_capture_migrate_account_details":
                            let v = TeamLog.AccountCaptureMigrateAccountDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureMigrateAccountDetails(v)
                        case "account_capture_notification_emails_sent_details":
                            let v = TeamLog.AccountCaptureNotificationEmailsSentDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureNotificationEmailsSentDetails(v)
                        case "account_capture_relinquish_account_details":
                            let v = TeamLog.AccountCaptureRelinquishAccountDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureRelinquishAccountDetails(v)
                        case "disabled_domain_invites_details":
                            let v = TeamLog.DisabledDomainInvitesDetailsSerializer().deserialize(json)
                            return EventDetails.disabledDomainInvitesDetails(v)
                        case "domain_invites_approve_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesApproveRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesApproveRequestToJoinTeamDetails(v)
                        case "domain_invites_decline_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesDeclineRequestToJoinTeamDetails(v)
                        case "domain_invites_email_existing_users_details":
                            let v = TeamLog.DomainInvitesEmailExistingUsersDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesEmailExistingUsersDetails(v)
                        case "domain_invites_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesRequestToJoinTeamDetails(v)
                        case "domain_invites_set_invite_new_user_pref_to_no_details":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesSetInviteNewUserPrefToNoDetails(v)
                        case "domain_invites_set_invite_new_user_pref_to_yes_details":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesSetInviteNewUserPrefToYesDetails(v)
                        case "domain_verification_add_domain_fail_details":
                            let v = TeamLog.DomainVerificationAddDomainFailDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationAddDomainFailDetails(v)
                        case "domain_verification_add_domain_success_details":
                            let v = TeamLog.DomainVerificationAddDomainSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationAddDomainSuccessDetails(v)
                        case "domain_verification_remove_domain_details":
                            let v = TeamLog.DomainVerificationRemoveDomainDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationRemoveDomainDetails(v)
                        case "enabled_domain_invites_details":
                            let v = TeamLog.EnabledDomainInvitesDetailsSerializer().deserialize(json)
                            return EventDetails.enabledDomainInvitesDetails(v)
                        case "apply_naming_convention_details":
                            let v = TeamLog.ApplyNamingConventionDetailsSerializer().deserialize(json)
                            return EventDetails.applyNamingConventionDetails(v)
                        case "create_folder_details":
                            let v = TeamLog.CreateFolderDetailsSerializer().deserialize(json)
                            return EventDetails.createFolderDetails(v)
                        case "file_add_details":
                            let v = TeamLog.FileAddDetailsSerializer().deserialize(json)
                            return EventDetails.fileAddDetails(v)
                        case "file_copy_details":
                            let v = TeamLog.FileCopyDetailsSerializer().deserialize(json)
                            return EventDetails.fileCopyDetails(v)
                        case "file_delete_details":
                            let v = TeamLog.FileDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.fileDeleteDetails(v)
                        case "file_download_details":
                            let v = TeamLog.FileDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.fileDownloadDetails(v)
                        case "file_edit_details":
                            let v = TeamLog.FileEditDetailsSerializer().deserialize(json)
                            return EventDetails.fileEditDetails(v)
                        case "file_get_copy_reference_details":
                            let v = TeamLog.FileGetCopyReferenceDetailsSerializer().deserialize(json)
                            return EventDetails.fileGetCopyReferenceDetails(v)
                        case "file_locking_lock_status_changed_details":
                            let v = TeamLog.FileLockingLockStatusChangedDetailsSerializer().deserialize(json)
                            return EventDetails.fileLockingLockStatusChangedDetails(v)
                        case "file_move_details":
                            let v = TeamLog.FileMoveDetailsSerializer().deserialize(json)
                            return EventDetails.fileMoveDetails(v)
                        case "file_permanently_delete_details":
                            let v = TeamLog.FilePermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.filePermanentlyDeleteDetails(v)
                        case "file_preview_details":
                            let v = TeamLog.FilePreviewDetailsSerializer().deserialize(json)
                            return EventDetails.filePreviewDetails(v)
                        case "file_rename_details":
                            let v = TeamLog.FileRenameDetailsSerializer().deserialize(json)
                            return EventDetails.fileRenameDetails(v)
                        case "file_restore_details":
                            let v = TeamLog.FileRestoreDetailsSerializer().deserialize(json)
                            return EventDetails.fileRestoreDetails(v)
                        case "file_revert_details":
                            let v = TeamLog.FileRevertDetailsSerializer().deserialize(json)
                            return EventDetails.fileRevertDetails(v)
                        case "file_rollback_changes_details":
                            let v = TeamLog.FileRollbackChangesDetailsSerializer().deserialize(json)
                            return EventDetails.fileRollbackChangesDetails(v)
                        case "file_save_copy_reference_details":
                            let v = TeamLog.FileSaveCopyReferenceDetailsSerializer().deserialize(json)
                            return EventDetails.fileSaveCopyReferenceDetails(v)
                        case "folder_overview_description_changed_details":
                            let v = TeamLog.FolderOverviewDescriptionChangedDetailsSerializer().deserialize(json)
                            return EventDetails.folderOverviewDescriptionChangedDetails(v)
                        case "folder_overview_item_pinned_details":
                            let v = TeamLog.FolderOverviewItemPinnedDetailsSerializer().deserialize(json)
                            return EventDetails.folderOverviewItemPinnedDetails(v)
                        case "folder_overview_item_unpinned_details":
                            let v = TeamLog.FolderOverviewItemUnpinnedDetailsSerializer().deserialize(json)
                            return EventDetails.folderOverviewItemUnpinnedDetails(v)
                        case "object_label_added_details":
                            let v = TeamLog.ObjectLabelAddedDetailsSerializer().deserialize(json)
                            return EventDetails.objectLabelAddedDetails(v)
                        case "object_label_removed_details":
                            let v = TeamLog.ObjectLabelRemovedDetailsSerializer().deserialize(json)
                            return EventDetails.objectLabelRemovedDetails(v)
                        case "object_label_updated_value_details":
                            let v = TeamLog.ObjectLabelUpdatedValueDetailsSerializer().deserialize(json)
                            return EventDetails.objectLabelUpdatedValueDetails(v)
                        case "organize_folder_with_tidy_details":
                            let v = TeamLog.OrganizeFolderWithTidyDetailsSerializer().deserialize(json)
                            return EventDetails.organizeFolderWithTidyDetails(v)
                        case "rewind_folder_details":
                            let v = TeamLog.RewindFolderDetailsSerializer().deserialize(json)
                            return EventDetails.rewindFolderDetails(v)
                        case "undo_naming_convention_details":
                            let v = TeamLog.UndoNamingConventionDetailsSerializer().deserialize(json)
                            return EventDetails.undoNamingConventionDetails(v)
                        case "undo_organize_folder_with_tidy_details":
                            let v = TeamLog.UndoOrganizeFolderWithTidyDetailsSerializer().deserialize(json)
                            return EventDetails.undoOrganizeFolderWithTidyDetails(v)
                        case "user_tags_added_details":
                            let v = TeamLog.UserTagsAddedDetailsSerializer().deserialize(json)
                            return EventDetails.userTagsAddedDetails(v)
                        case "user_tags_removed_details":
                            let v = TeamLog.UserTagsRemovedDetailsSerializer().deserialize(json)
                            return EventDetails.userTagsRemovedDetails(v)
                        case "email_ingest_receive_file_details":
                            let v = TeamLog.EmailIngestReceiveFileDetailsSerializer().deserialize(json)
                            return EventDetails.emailIngestReceiveFileDetails(v)
                        case "file_request_change_details":
                            let v = TeamLog.FileRequestChangeDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestChangeDetails(v)
                        case "file_request_close_details":
                            let v = TeamLog.FileRequestCloseDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestCloseDetails(v)
                        case "file_request_create_details":
                            let v = TeamLog.FileRequestCreateDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestCreateDetails(v)
                        case "file_request_delete_details":
                            let v = TeamLog.FileRequestDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestDeleteDetails(v)
                        case "file_request_receive_file_details":
                            let v = TeamLog.FileRequestReceiveFileDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestReceiveFileDetails(v)
                        case "group_add_external_id_details":
                            let v = TeamLog.GroupAddExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupAddExternalIdDetails(v)
                        case "group_add_member_details":
                            let v = TeamLog.GroupAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.groupAddMemberDetails(v)
                        case "group_change_external_id_details":
                            let v = TeamLog.GroupChangeExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeExternalIdDetails(v)
                        case "group_change_management_type_details":
                            let v = TeamLog.GroupChangeManagementTypeDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeManagementTypeDetails(v)
                        case "group_change_member_role_details":
                            let v = TeamLog.GroupChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeMemberRoleDetails(v)
                        case "group_create_details":
                            let v = TeamLog.GroupCreateDetailsSerializer().deserialize(json)
                            return EventDetails.groupCreateDetails(v)
                        case "group_delete_details":
                            let v = TeamLog.GroupDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.groupDeleteDetails(v)
                        case "group_description_updated_details":
                            let v = TeamLog.GroupDescriptionUpdatedDetailsSerializer().deserialize(json)
                            return EventDetails.groupDescriptionUpdatedDetails(v)
                        case "group_join_policy_updated_details":
                            let v = TeamLog.GroupJoinPolicyUpdatedDetailsSerializer().deserialize(json)
                            return EventDetails.groupJoinPolicyUpdatedDetails(v)
                        case "group_moved_details":
                            let v = TeamLog.GroupMovedDetailsSerializer().deserialize(json)
                            return EventDetails.groupMovedDetails(v)
                        case "group_remove_external_id_details":
                            let v = TeamLog.GroupRemoveExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupRemoveExternalIdDetails(v)
                        case "group_remove_member_details":
                            let v = TeamLog.GroupRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.groupRemoveMemberDetails(v)
                        case "group_rename_details":
                            let v = TeamLog.GroupRenameDetailsSerializer().deserialize(json)
                            return EventDetails.groupRenameDetails(v)
                        case "account_lock_or_unlocked_details":
                            let v = TeamLog.AccountLockOrUnlockedDetailsSerializer().deserialize(json)
                            return EventDetails.accountLockOrUnlockedDetails(v)
                        case "emm_error_details":
                            let v = TeamLog.EmmErrorDetailsSerializer().deserialize(json)
                            return EventDetails.emmErrorDetails(v)
                        case "guest_admin_signed_in_via_trusted_teams_details":
                            let v = TeamLog.GuestAdminSignedInViaTrustedTeamsDetailsSerializer().deserialize(json)
                            return EventDetails.guestAdminSignedInViaTrustedTeamsDetails(v)
                        case "guest_admin_signed_out_via_trusted_teams_details":
                            let v = TeamLog.GuestAdminSignedOutViaTrustedTeamsDetailsSerializer().deserialize(json)
                            return EventDetails.guestAdminSignedOutViaTrustedTeamsDetails(v)
                        case "login_fail_details":
                            let v = TeamLog.LoginFailDetailsSerializer().deserialize(json)
                            return EventDetails.loginFailDetails(v)
                        case "login_success_details":
                            let v = TeamLog.LoginSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.loginSuccessDetails(v)
                        case "logout_details":
                            let v = TeamLog.LogoutDetailsSerializer().deserialize(json)
                            return EventDetails.logoutDetails(v)
                        case "reseller_support_session_end_details":
                            let v = TeamLog.ResellerSupportSessionEndDetailsSerializer().deserialize(json)
                            return EventDetails.resellerSupportSessionEndDetails(v)
                        case "reseller_support_session_start_details":
                            let v = TeamLog.ResellerSupportSessionStartDetailsSerializer().deserialize(json)
                            return EventDetails.resellerSupportSessionStartDetails(v)
                        case "sign_in_as_session_end_details":
                            let v = TeamLog.SignInAsSessionEndDetailsSerializer().deserialize(json)
                            return EventDetails.signInAsSessionEndDetails(v)
                        case "sign_in_as_session_start_details":
                            let v = TeamLog.SignInAsSessionStartDetailsSerializer().deserialize(json)
                            return EventDetails.signInAsSessionStartDetails(v)
                        case "sso_error_details":
                            let v = TeamLog.SsoErrorDetailsSerializer().deserialize(json)
                            return EventDetails.ssoErrorDetails(v)
                        case "create_team_invite_link_details":
                            let v = TeamLog.CreateTeamInviteLinkDetailsSerializer().deserialize(json)
                            return EventDetails.createTeamInviteLinkDetails(v)
                        case "delete_team_invite_link_details":
                            let v = TeamLog.DeleteTeamInviteLinkDetailsSerializer().deserialize(json)
                            return EventDetails.deleteTeamInviteLinkDetails(v)
                        case "member_add_external_id_details":
                            let v = TeamLog.MemberAddExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.memberAddExternalIdDetails(v)
                        case "member_add_name_details":
                            let v = TeamLog.MemberAddNameDetailsSerializer().deserialize(json)
                            return EventDetails.memberAddNameDetails(v)
                        case "member_change_admin_role_details":
                            let v = TeamLog.MemberChangeAdminRoleDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeAdminRoleDetails(v)
                        case "member_change_email_details":
                            let v = TeamLog.MemberChangeEmailDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeEmailDetails(v)
                        case "member_change_external_id_details":
                            let v = TeamLog.MemberChangeExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeExternalIdDetails(v)
                        case "member_change_membership_type_details":
                            let v = TeamLog.MemberChangeMembershipTypeDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeMembershipTypeDetails(v)
                        case "member_change_name_details":
                            let v = TeamLog.MemberChangeNameDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeNameDetails(v)
                        case "member_change_reseller_role_details":
                            let v = TeamLog.MemberChangeResellerRoleDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeResellerRoleDetails(v)
                        case "member_change_status_details":
                            let v = TeamLog.MemberChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeStatusDetails(v)
                        case "member_delete_manual_contacts_details":
                            let v = TeamLog.MemberDeleteManualContactsDetailsSerializer().deserialize(json)
                            return EventDetails.memberDeleteManualContactsDetails(v)
                        case "member_delete_profile_photo_details":
                            let v = TeamLog.MemberDeleteProfilePhotoDetailsSerializer().deserialize(json)
                            return EventDetails.memberDeleteProfilePhotoDetails(v)
                        case "member_permanently_delete_account_contents_details":
                            let v = TeamLog.MemberPermanentlyDeleteAccountContentsDetailsSerializer().deserialize(json)
                            return EventDetails.memberPermanentlyDeleteAccountContentsDetails(v)
                        case "member_remove_external_id_details":
                            let v = TeamLog.MemberRemoveExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.memberRemoveExternalIdDetails(v)
                        case "member_set_profile_photo_details":
                            let v = TeamLog.MemberSetProfilePhotoDetailsSerializer().deserialize(json)
                            return EventDetails.memberSetProfilePhotoDetails(v)
                        case "member_space_limits_add_custom_quota_details":
                            let v = TeamLog.MemberSpaceLimitsAddCustomQuotaDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsAddCustomQuotaDetails(v)
                        case "member_space_limits_change_custom_quota_details":
                            let v = TeamLog.MemberSpaceLimitsChangeCustomQuotaDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangeCustomQuotaDetails(v)
                        case "member_space_limits_change_status_details":
                            let v = TeamLog.MemberSpaceLimitsChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangeStatusDetails(v)
                        case "member_space_limits_remove_custom_quota_details":
                            let v = TeamLog.MemberSpaceLimitsRemoveCustomQuotaDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsRemoveCustomQuotaDetails(v)
                        case "member_suggest_details":
                            let v = TeamLog.MemberSuggestDetailsSerializer().deserialize(json)
                            return EventDetails.memberSuggestDetails(v)
                        case "member_transfer_account_contents_details":
                            let v = TeamLog.MemberTransferAccountContentsDetailsSerializer().deserialize(json)
                            return EventDetails.memberTransferAccountContentsDetails(v)
                        case "pending_secondary_email_added_details":
                            let v = TeamLog.PendingSecondaryEmailAddedDetailsSerializer().deserialize(json)
                            return EventDetails.pendingSecondaryEmailAddedDetails(v)
                        case "secondary_email_deleted_details":
                            let v = TeamLog.SecondaryEmailDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.secondaryEmailDeletedDetails(v)
                        case "secondary_email_verified_details":
                            let v = TeamLog.SecondaryEmailVerifiedDetailsSerializer().deserialize(json)
                            return EventDetails.secondaryEmailVerifiedDetails(v)
                        case "secondary_mails_policy_changed_details":
                            let v = TeamLog.SecondaryMailsPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.secondaryMailsPolicyChangedDetails(v)
                        case "binder_add_page_details":
                            let v = TeamLog.BinderAddPageDetailsSerializer().deserialize(json)
                            return EventDetails.binderAddPageDetails(v)
                        case "binder_add_section_details":
                            let v = TeamLog.BinderAddSectionDetailsSerializer().deserialize(json)
                            return EventDetails.binderAddSectionDetails(v)
                        case "binder_remove_page_details":
                            let v = TeamLog.BinderRemovePageDetailsSerializer().deserialize(json)
                            return EventDetails.binderRemovePageDetails(v)
                        case "binder_remove_section_details":
                            let v = TeamLog.BinderRemoveSectionDetailsSerializer().deserialize(json)
                            return EventDetails.binderRemoveSectionDetails(v)
                        case "binder_rename_page_details":
                            let v = TeamLog.BinderRenamePageDetailsSerializer().deserialize(json)
                            return EventDetails.binderRenamePageDetails(v)
                        case "binder_rename_section_details":
                            let v = TeamLog.BinderRenameSectionDetailsSerializer().deserialize(json)
                            return EventDetails.binderRenameSectionDetails(v)
                        case "binder_reorder_page_details":
                            let v = TeamLog.BinderReorderPageDetailsSerializer().deserialize(json)
                            return EventDetails.binderReorderPageDetails(v)
                        case "binder_reorder_section_details":
                            let v = TeamLog.BinderReorderSectionDetailsSerializer().deserialize(json)
                            return EventDetails.binderReorderSectionDetails(v)
                        case "paper_content_add_member_details":
                            let v = TeamLog.PaperContentAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentAddMemberDetails(v)
                        case "paper_content_add_to_folder_details":
                            let v = TeamLog.PaperContentAddToFolderDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentAddToFolderDetails(v)
                        case "paper_content_archive_details":
                            let v = TeamLog.PaperContentArchiveDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentArchiveDetails(v)
                        case "paper_content_create_details":
                            let v = TeamLog.PaperContentCreateDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentCreateDetails(v)
                        case "paper_content_permanently_delete_details":
                            let v = TeamLog.PaperContentPermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentPermanentlyDeleteDetails(v)
                        case "paper_content_remove_from_folder_details":
                            let v = TeamLog.PaperContentRemoveFromFolderDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRemoveFromFolderDetails(v)
                        case "paper_content_remove_member_details":
                            let v = TeamLog.PaperContentRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRemoveMemberDetails(v)
                        case "paper_content_rename_details":
                            let v = TeamLog.PaperContentRenameDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRenameDetails(v)
                        case "paper_content_restore_details":
                            let v = TeamLog.PaperContentRestoreDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRestoreDetails(v)
                        case "paper_doc_add_comment_details":
                            let v = TeamLog.PaperDocAddCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocAddCommentDetails(v)
                        case "paper_doc_change_member_role_details":
                            let v = TeamLog.PaperDocChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeMemberRoleDetails(v)
                        case "paper_doc_change_sharing_policy_details":
                            let v = TeamLog.PaperDocChangeSharingPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeSharingPolicyDetails(v)
                        case "paper_doc_change_subscription_details":
                            let v = TeamLog.PaperDocChangeSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeSubscriptionDetails(v)
                        case "paper_doc_deleted_details":
                            let v = TeamLog.PaperDocDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDeletedDetails(v)
                        case "paper_doc_delete_comment_details":
                            let v = TeamLog.PaperDocDeleteCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDeleteCommentDetails(v)
                        case "paper_doc_download_details":
                            let v = TeamLog.PaperDocDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDownloadDetails(v)
                        case "paper_doc_edit_details":
                            let v = TeamLog.PaperDocEditDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocEditDetails(v)
                        case "paper_doc_edit_comment_details":
                            let v = TeamLog.PaperDocEditCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocEditCommentDetails(v)
                        case "paper_doc_followed_details":
                            let v = TeamLog.PaperDocFollowedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocFollowedDetails(v)
                        case "paper_doc_mention_details":
                            let v = TeamLog.PaperDocMentionDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocMentionDetails(v)
                        case "paper_doc_ownership_changed_details":
                            let v = TeamLog.PaperDocOwnershipChangedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocOwnershipChangedDetails(v)
                        case "paper_doc_request_access_details":
                            let v = TeamLog.PaperDocRequestAccessDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocRequestAccessDetails(v)
                        case "paper_doc_resolve_comment_details":
                            let v = TeamLog.PaperDocResolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocResolveCommentDetails(v)
                        case "paper_doc_revert_details":
                            let v = TeamLog.PaperDocRevertDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocRevertDetails(v)
                        case "paper_doc_slack_share_details":
                            let v = TeamLog.PaperDocSlackShareDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocSlackShareDetails(v)
                        case "paper_doc_team_invite_details":
                            let v = TeamLog.PaperDocTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocTeamInviteDetails(v)
                        case "paper_doc_trashed_details":
                            let v = TeamLog.PaperDocTrashedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocTrashedDetails(v)
                        case "paper_doc_unresolve_comment_details":
                            let v = TeamLog.PaperDocUnresolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocUnresolveCommentDetails(v)
                        case "paper_doc_untrashed_details":
                            let v = TeamLog.PaperDocUntrashedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocUntrashedDetails(v)
                        case "paper_doc_view_details":
                            let v = TeamLog.PaperDocViewDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocViewDetails(v)
                        case "paper_external_view_allow_details":
                            let v = TeamLog.PaperExternalViewAllowDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewAllowDetails(v)
                        case "paper_external_view_default_team_details":
                            let v = TeamLog.PaperExternalViewDefaultTeamDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewDefaultTeamDetails(v)
                        case "paper_external_view_forbid_details":
                            let v = TeamLog.PaperExternalViewForbidDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewForbidDetails(v)
                        case "paper_folder_change_subscription_details":
                            let v = TeamLog.PaperFolderChangeSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderChangeSubscriptionDetails(v)
                        case "paper_folder_deleted_details":
                            let v = TeamLog.PaperFolderDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderDeletedDetails(v)
                        case "paper_folder_followed_details":
                            let v = TeamLog.PaperFolderFollowedDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderFollowedDetails(v)
                        case "paper_folder_team_invite_details":
                            let v = TeamLog.PaperFolderTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderTeamInviteDetails(v)
                        case "paper_published_link_change_permission_details":
                            let v = TeamLog.PaperPublishedLinkChangePermissionDetailsSerializer().deserialize(json)
                            return EventDetails.paperPublishedLinkChangePermissionDetails(v)
                        case "paper_published_link_create_details":
                            let v = TeamLog.PaperPublishedLinkCreateDetailsSerializer().deserialize(json)
                            return EventDetails.paperPublishedLinkCreateDetails(v)
                        case "paper_published_link_disabled_details":
                            let v = TeamLog.PaperPublishedLinkDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.paperPublishedLinkDisabledDetails(v)
                        case "paper_published_link_view_details":
                            let v = TeamLog.PaperPublishedLinkViewDetailsSerializer().deserialize(json)
                            return EventDetails.paperPublishedLinkViewDetails(v)
                        case "password_change_details":
                            let v = TeamLog.PasswordChangeDetailsSerializer().deserialize(json)
                            return EventDetails.passwordChangeDetails(v)
                        case "password_reset_details":
                            let v = TeamLog.PasswordResetDetailsSerializer().deserialize(json)
                            return EventDetails.passwordResetDetails(v)
                        case "password_reset_all_details":
                            let v = TeamLog.PasswordResetAllDetailsSerializer().deserialize(json)
                            return EventDetails.passwordResetAllDetails(v)
                        case "classification_create_report_details":
                            let v = TeamLog.ClassificationCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.classificationCreateReportDetails(v)
                        case "classification_create_report_fail_details":
                            let v = TeamLog.ClassificationCreateReportFailDetailsSerializer().deserialize(json)
                            return EventDetails.classificationCreateReportFailDetails(v)
                        case "emm_create_exceptions_report_details":
                            let v = TeamLog.EmmCreateExceptionsReportDetailsSerializer().deserialize(json)
                            return EventDetails.emmCreateExceptionsReportDetails(v)
                        case "emm_create_usage_report_details":
                            let v = TeamLog.EmmCreateUsageReportDetailsSerializer().deserialize(json)
                            return EventDetails.emmCreateUsageReportDetails(v)
                        case "export_members_report_details":
                            let v = TeamLog.ExportMembersReportDetailsSerializer().deserialize(json)
                            return EventDetails.exportMembersReportDetails(v)
                        case "export_members_report_fail_details":
                            let v = TeamLog.ExportMembersReportFailDetailsSerializer().deserialize(json)
                            return EventDetails.exportMembersReportFailDetails(v)
                        case "external_sharing_create_report_details":
                            let v = TeamLog.ExternalSharingCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.externalSharingCreateReportDetails(v)
                        case "external_sharing_report_failed_details":
                            let v = TeamLog.ExternalSharingReportFailedDetailsSerializer().deserialize(json)
                            return EventDetails.externalSharingReportFailedDetails(v)
                        case "no_expiration_link_gen_create_report_details":
                            let v = TeamLog.NoExpirationLinkGenCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.noExpirationLinkGenCreateReportDetails(v)
                        case "no_expiration_link_gen_report_failed_details":
                            let v = TeamLog.NoExpirationLinkGenReportFailedDetailsSerializer().deserialize(json)
                            return EventDetails.noExpirationLinkGenReportFailedDetails(v)
                        case "no_password_link_gen_create_report_details":
                            let v = TeamLog.NoPasswordLinkGenCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.noPasswordLinkGenCreateReportDetails(v)
                        case "no_password_link_gen_report_failed_details":
                            let v = TeamLog.NoPasswordLinkGenReportFailedDetailsSerializer().deserialize(json)
                            return EventDetails.noPasswordLinkGenReportFailedDetails(v)
                        case "no_password_link_view_create_report_details":
                            let v = TeamLog.NoPasswordLinkViewCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.noPasswordLinkViewCreateReportDetails(v)
                        case "no_password_link_view_report_failed_details":
                            let v = TeamLog.NoPasswordLinkViewReportFailedDetailsSerializer().deserialize(json)
                            return EventDetails.noPasswordLinkViewReportFailedDetails(v)
                        case "outdated_link_view_create_report_details":
                            let v = TeamLog.OutdatedLinkViewCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.outdatedLinkViewCreateReportDetails(v)
                        case "outdated_link_view_report_failed_details":
                            let v = TeamLog.OutdatedLinkViewReportFailedDetailsSerializer().deserialize(json)
                            return EventDetails.outdatedLinkViewReportFailedDetails(v)
                        case "paper_admin_export_start_details":
                            let v = TeamLog.PaperAdminExportStartDetailsSerializer().deserialize(json)
                            return EventDetails.paperAdminExportStartDetails(v)
                        case "smart_sync_create_admin_privilege_report_details":
                            let v = TeamLog.SmartSyncCreateAdminPrivilegeReportDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncCreateAdminPrivilegeReportDetails(v)
                        case "team_activity_create_report_details":
                            let v = TeamLog.TeamActivityCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.teamActivityCreateReportDetails(v)
                        case "team_activity_create_report_fail_details":
                            let v = TeamLog.TeamActivityCreateReportFailDetailsSerializer().deserialize(json)
                            return EventDetails.teamActivityCreateReportFailDetails(v)
                        case "collection_share_details":
                            let v = TeamLog.CollectionShareDetailsSerializer().deserialize(json)
                            return EventDetails.collectionShareDetails(v)
                        case "file_transfers_file_add_details":
                            let v = TeamLog.FileTransfersFileAddDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersFileAddDetails(v)
                        case "file_transfers_transfer_delete_details":
                            let v = TeamLog.FileTransfersTransferDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersTransferDeleteDetails(v)
                        case "file_transfers_transfer_download_details":
                            let v = TeamLog.FileTransfersTransferDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersTransferDownloadDetails(v)
                        case "file_transfers_transfer_send_details":
                            let v = TeamLog.FileTransfersTransferSendDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersTransferSendDetails(v)
                        case "file_transfers_transfer_view_details":
                            let v = TeamLog.FileTransfersTransferViewDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersTransferViewDetails(v)
                        case "note_acl_invite_only_details":
                            let v = TeamLog.NoteAclInviteOnlyDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclInviteOnlyDetails(v)
                        case "note_acl_link_details":
                            let v = TeamLog.NoteAclLinkDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclLinkDetails(v)
                        case "note_acl_team_link_details":
                            let v = TeamLog.NoteAclTeamLinkDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclTeamLinkDetails(v)
                        case "note_shared_details":
                            let v = TeamLog.NoteSharedDetailsSerializer().deserialize(json)
                            return EventDetails.noteSharedDetails(v)
                        case "note_share_receive_details":
                            let v = TeamLog.NoteShareReceiveDetailsSerializer().deserialize(json)
                            return EventDetails.noteShareReceiveDetails(v)
                        case "open_note_shared_details":
                            let v = TeamLog.OpenNoteSharedDetailsSerializer().deserialize(json)
                            return EventDetails.openNoteSharedDetails(v)
                        case "sf_add_group_details":
                            let v = TeamLog.SfAddGroupDetailsSerializer().deserialize(json)
                            return EventDetails.sfAddGroupDetails(v)
                        case "sf_allow_non_members_to_view_shared_links_details":
                            let v = TeamLog.SfAllowNonMembersToViewSharedLinksDetailsSerializer().deserialize(json)
                            return EventDetails.sfAllowNonMembersToViewSharedLinksDetails(v)
                        case "sf_external_invite_warn_details":
                            let v = TeamLog.SfExternalInviteWarnDetailsSerializer().deserialize(json)
                            return EventDetails.sfExternalInviteWarnDetails(v)
                        case "sf_fb_invite_details":
                            let v = TeamLog.SfFbInviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfFbInviteDetails(v)
                        case "sf_fb_invite_change_role_details":
                            let v = TeamLog.SfFbInviteChangeRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sfFbInviteChangeRoleDetails(v)
                        case "sf_fb_uninvite_details":
                            let v = TeamLog.SfFbUninviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfFbUninviteDetails(v)
                        case "sf_invite_group_details":
                            let v = TeamLog.SfInviteGroupDetailsSerializer().deserialize(json)
                            return EventDetails.sfInviteGroupDetails(v)
                        case "sf_team_grant_access_details":
                            let v = TeamLog.SfTeamGrantAccessDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamGrantAccessDetails(v)
                        case "sf_team_invite_details":
                            let v = TeamLog.SfTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamInviteDetails(v)
                        case "sf_team_invite_change_role_details":
                            let v = TeamLog.SfTeamInviteChangeRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamInviteChangeRoleDetails(v)
                        case "sf_team_join_details":
                            let v = TeamLog.SfTeamJoinDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamJoinDetails(v)
                        case "sf_team_join_from_oob_link_details":
                            let v = TeamLog.SfTeamJoinFromOobLinkDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamJoinFromOobLinkDetails(v)
                        case "sf_team_uninvite_details":
                            let v = TeamLog.SfTeamUninviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamUninviteDetails(v)
                        case "shared_content_add_invitees_details":
                            let v = TeamLog.SharedContentAddInviteesDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddInviteesDetails(v)
                        case "shared_content_add_link_expiry_details":
                            let v = TeamLog.SharedContentAddLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddLinkExpiryDetails(v)
                        case "shared_content_add_link_password_details":
                            let v = TeamLog.SharedContentAddLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddLinkPasswordDetails(v)
                        case "shared_content_add_member_details":
                            let v = TeamLog.SharedContentAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddMemberDetails(v)
                        case "shared_content_change_downloads_policy_details":
                            let v = TeamLog.SharedContentChangeDownloadsPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeDownloadsPolicyDetails(v)
                        case "shared_content_change_invitee_role_details":
                            let v = TeamLog.SharedContentChangeInviteeRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeInviteeRoleDetails(v)
                        case "shared_content_change_link_audience_details":
                            let v = TeamLog.SharedContentChangeLinkAudienceDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkAudienceDetails(v)
                        case "shared_content_change_link_expiry_details":
                            let v = TeamLog.SharedContentChangeLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkExpiryDetails(v)
                        case "shared_content_change_link_password_details":
                            let v = TeamLog.SharedContentChangeLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkPasswordDetails(v)
                        case "shared_content_change_member_role_details":
                            let v = TeamLog.SharedContentChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeMemberRoleDetails(v)
                        case "shared_content_change_viewer_info_policy_details":
                            let v = TeamLog.SharedContentChangeViewerInfoPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeViewerInfoPolicyDetails(v)
                        case "shared_content_claim_invitation_details":
                            let v = TeamLog.SharedContentClaimInvitationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentClaimInvitationDetails(v)
                        case "shared_content_copy_details":
                            let v = TeamLog.SharedContentCopyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentCopyDetails(v)
                        case "shared_content_download_details":
                            let v = TeamLog.SharedContentDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentDownloadDetails(v)
                        case "shared_content_relinquish_membership_details":
                            let v = TeamLog.SharedContentRelinquishMembershipDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRelinquishMembershipDetails(v)
                        case "shared_content_remove_invitees_details":
                            let v = TeamLog.SharedContentRemoveInviteesDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveInviteesDetails(v)
                        case "shared_content_remove_link_expiry_details":
                            let v = TeamLog.SharedContentRemoveLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveLinkExpiryDetails(v)
                        case "shared_content_remove_link_password_details":
                            let v = TeamLog.SharedContentRemoveLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveLinkPasswordDetails(v)
                        case "shared_content_remove_member_details":
                            let v = TeamLog.SharedContentRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveMemberDetails(v)
                        case "shared_content_request_access_details":
                            let v = TeamLog.SharedContentRequestAccessDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRequestAccessDetails(v)
                        case "shared_content_restore_invitees_details":
                            let v = TeamLog.SharedContentRestoreInviteesDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRestoreInviteesDetails(v)
                        case "shared_content_restore_member_details":
                            let v = TeamLog.SharedContentRestoreMemberDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRestoreMemberDetails(v)
                        case "shared_content_unshare_details":
                            let v = TeamLog.SharedContentUnshareDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentUnshareDetails(v)
                        case "shared_content_view_details":
                            let v = TeamLog.SharedContentViewDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentViewDetails(v)
                        case "shared_folder_change_link_policy_details":
                            let v = TeamLog.SharedFolderChangeLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeLinkPolicyDetails(v)
                        case "shared_folder_change_members_inheritance_policy_details":
                            let v = TeamLog.SharedFolderChangeMembersInheritancePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeMembersInheritancePolicyDetails(v)
                        case "shared_folder_change_members_management_policy_details":
                            let v = TeamLog.SharedFolderChangeMembersManagementPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeMembersManagementPolicyDetails(v)
                        case "shared_folder_change_members_policy_details":
                            let v = TeamLog.SharedFolderChangeMembersPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeMembersPolicyDetails(v)
                        case "shared_folder_create_details":
                            let v = TeamLog.SharedFolderCreateDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderCreateDetails(v)
                        case "shared_folder_decline_invitation_details":
                            let v = TeamLog.SharedFolderDeclineInvitationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderDeclineInvitationDetails(v)
                        case "shared_folder_mount_details":
                            let v = TeamLog.SharedFolderMountDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderMountDetails(v)
                        case "shared_folder_nest_details":
                            let v = TeamLog.SharedFolderNestDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderNestDetails(v)
                        case "shared_folder_transfer_ownership_details":
                            let v = TeamLog.SharedFolderTransferOwnershipDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderTransferOwnershipDetails(v)
                        case "shared_folder_unmount_details":
                            let v = TeamLog.SharedFolderUnmountDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderUnmountDetails(v)
                        case "shared_link_add_expiry_details":
                            let v = TeamLog.SharedLinkAddExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkAddExpiryDetails(v)
                        case "shared_link_change_expiry_details":
                            let v = TeamLog.SharedLinkChangeExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkChangeExpiryDetails(v)
                        case "shared_link_change_visibility_details":
                            let v = TeamLog.SharedLinkChangeVisibilityDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkChangeVisibilityDetails(v)
                        case "shared_link_copy_details":
                            let v = TeamLog.SharedLinkCopyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkCopyDetails(v)
                        case "shared_link_create_details":
                            let v = TeamLog.SharedLinkCreateDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkCreateDetails(v)
                        case "shared_link_disable_details":
                            let v = TeamLog.SharedLinkDisableDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkDisableDetails(v)
                        case "shared_link_download_details":
                            let v = TeamLog.SharedLinkDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkDownloadDetails(v)
                        case "shared_link_remove_expiry_details":
                            let v = TeamLog.SharedLinkRemoveExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkRemoveExpiryDetails(v)
                        case "shared_link_settings_add_expiration_details":
                            let v = TeamLog.SharedLinkSettingsAddExpirationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsAddExpirationDetails(v)
                        case "shared_link_settings_add_password_details":
                            let v = TeamLog.SharedLinkSettingsAddPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsAddPasswordDetails(v)
                        case "shared_link_settings_allow_download_disabled_details":
                            let v = TeamLog.SharedLinkSettingsAllowDownloadDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsAllowDownloadDisabledDetails(v)
                        case "shared_link_settings_allow_download_enabled_details":
                            let v = TeamLog.SharedLinkSettingsAllowDownloadEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsAllowDownloadEnabledDetails(v)
                        case "shared_link_settings_change_audience_details":
                            let v = TeamLog.SharedLinkSettingsChangeAudienceDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsChangeAudienceDetails(v)
                        case "shared_link_settings_change_expiration_details":
                            let v = TeamLog.SharedLinkSettingsChangeExpirationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsChangeExpirationDetails(v)
                        case "shared_link_settings_change_password_details":
                            let v = TeamLog.SharedLinkSettingsChangePasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsChangePasswordDetails(v)
                        case "shared_link_settings_remove_expiration_details":
                            let v = TeamLog.SharedLinkSettingsRemoveExpirationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsRemoveExpirationDetails(v)
                        case "shared_link_settings_remove_password_details":
                            let v = TeamLog.SharedLinkSettingsRemovePasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkSettingsRemovePasswordDetails(v)
                        case "shared_link_share_details":
                            let v = TeamLog.SharedLinkShareDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkShareDetails(v)
                        case "shared_link_view_details":
                            let v = TeamLog.SharedLinkViewDetailsSerializer().deserialize(json)
                            return EventDetails.sharedLinkViewDetails(v)
                        case "shared_note_opened_details":
                            let v = TeamLog.SharedNoteOpenedDetailsSerializer().deserialize(json)
                            return EventDetails.sharedNoteOpenedDetails(v)
                        case "shmodel_disable_downloads_details":
                            let v = TeamLog.ShmodelDisableDownloadsDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelDisableDownloadsDetails(v)
                        case "shmodel_enable_downloads_details":
                            let v = TeamLog.ShmodelEnableDownloadsDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelEnableDownloadsDetails(v)
                        case "shmodel_group_share_details":
                            let v = TeamLog.ShmodelGroupShareDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelGroupShareDetails(v)
                        case "showcase_access_granted_details":
                            let v = TeamLog.ShowcaseAccessGrantedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseAccessGrantedDetails(v)
                        case "showcase_add_member_details":
                            let v = TeamLog.ShowcaseAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseAddMemberDetails(v)
                        case "showcase_archived_details":
                            let v = TeamLog.ShowcaseArchivedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseArchivedDetails(v)
                        case "showcase_created_details":
                            let v = TeamLog.ShowcaseCreatedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseCreatedDetails(v)
                        case "showcase_delete_comment_details":
                            let v = TeamLog.ShowcaseDeleteCommentDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseDeleteCommentDetails(v)
                        case "showcase_edited_details":
                            let v = TeamLog.ShowcaseEditedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseEditedDetails(v)
                        case "showcase_edit_comment_details":
                            let v = TeamLog.ShowcaseEditCommentDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseEditCommentDetails(v)
                        case "showcase_file_added_details":
                            let v = TeamLog.ShowcaseFileAddedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseFileAddedDetails(v)
                        case "showcase_file_download_details":
                            let v = TeamLog.ShowcaseFileDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseFileDownloadDetails(v)
                        case "showcase_file_removed_details":
                            let v = TeamLog.ShowcaseFileRemovedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseFileRemovedDetails(v)
                        case "showcase_file_view_details":
                            let v = TeamLog.ShowcaseFileViewDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseFileViewDetails(v)
                        case "showcase_permanently_deleted_details":
                            let v = TeamLog.ShowcasePermanentlyDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.showcasePermanentlyDeletedDetails(v)
                        case "showcase_post_comment_details":
                            let v = TeamLog.ShowcasePostCommentDetailsSerializer().deserialize(json)
                            return EventDetails.showcasePostCommentDetails(v)
                        case "showcase_remove_member_details":
                            let v = TeamLog.ShowcaseRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseRemoveMemberDetails(v)
                        case "showcase_renamed_details":
                            let v = TeamLog.ShowcaseRenamedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseRenamedDetails(v)
                        case "showcase_request_access_details":
                            let v = TeamLog.ShowcaseRequestAccessDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseRequestAccessDetails(v)
                        case "showcase_resolve_comment_details":
                            let v = TeamLog.ShowcaseResolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseResolveCommentDetails(v)
                        case "showcase_restored_details":
                            let v = TeamLog.ShowcaseRestoredDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseRestoredDetails(v)
                        case "showcase_trashed_details":
                            let v = TeamLog.ShowcaseTrashedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseTrashedDetails(v)
                        case "showcase_trashed_deprecated_details":
                            let v = TeamLog.ShowcaseTrashedDeprecatedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseTrashedDeprecatedDetails(v)
                        case "showcase_unresolve_comment_details":
                            let v = TeamLog.ShowcaseUnresolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseUnresolveCommentDetails(v)
                        case "showcase_untrashed_details":
                            let v = TeamLog.ShowcaseUntrashedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseUntrashedDetails(v)
                        case "showcase_untrashed_deprecated_details":
                            let v = TeamLog.ShowcaseUntrashedDeprecatedDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseUntrashedDeprecatedDetails(v)
                        case "showcase_view_details":
                            let v = TeamLog.ShowcaseViewDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseViewDetails(v)
                        case "sso_add_cert_details":
                            let v = TeamLog.SsoAddCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddCertDetails(v)
                        case "sso_add_login_url_details":
                            let v = TeamLog.SsoAddLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddLoginUrlDetails(v)
                        case "sso_add_logout_url_details":
                            let v = TeamLog.SsoAddLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddLogoutUrlDetails(v)
                        case "sso_change_cert_details":
                            let v = TeamLog.SsoChangeCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeCertDetails(v)
                        case "sso_change_login_url_details":
                            let v = TeamLog.SsoChangeLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeLoginUrlDetails(v)
                        case "sso_change_logout_url_details":
                            let v = TeamLog.SsoChangeLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeLogoutUrlDetails(v)
                        case "sso_change_saml_identity_mode_details":
                            let v = TeamLog.SsoChangeSamlIdentityModeDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeSamlIdentityModeDetails(v)
                        case "sso_remove_cert_details":
                            let v = TeamLog.SsoRemoveCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveCertDetails(v)
                        case "sso_remove_login_url_details":
                            let v = TeamLog.SsoRemoveLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveLoginUrlDetails(v)
                        case "sso_remove_logout_url_details":
                            let v = TeamLog.SsoRemoveLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveLogoutUrlDetails(v)
                        case "team_folder_change_status_details":
                            let v = TeamLog.TeamFolderChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderChangeStatusDetails(v)
                        case "team_folder_create_details":
                            let v = TeamLog.TeamFolderCreateDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderCreateDetails(v)
                        case "team_folder_downgrade_details":
                            let v = TeamLog.TeamFolderDowngradeDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderDowngradeDetails(v)
                        case "team_folder_permanently_delete_details":
                            let v = TeamLog.TeamFolderPermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderPermanentlyDeleteDetails(v)
                        case "team_folder_rename_details":
                            let v = TeamLog.TeamFolderRenameDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderRenameDetails(v)
                        case "team_selective_sync_settings_changed_details":
                            let v = TeamLog.TeamSelectiveSyncSettingsChangedDetailsSerializer().deserialize(json)
                            return EventDetails.teamSelectiveSyncSettingsChangedDetails(v)
                        case "account_capture_change_policy_details":
                            let v = TeamLog.AccountCaptureChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureChangePolicyDetails(v)
                        case "admin_email_reminders_changed_details":
                            let v = TeamLog.AdminEmailRemindersChangedDetailsSerializer().deserialize(json)
                            return EventDetails.adminEmailRemindersChangedDetails(v)
                        case "allow_download_disabled_details":
                            let v = TeamLog.AllowDownloadDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.allowDownloadDisabledDetails(v)
                        case "allow_download_enabled_details":
                            let v = TeamLog.AllowDownloadEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.allowDownloadEnabledDetails(v)
                        case "app_permissions_changed_details":
                            let v = TeamLog.AppPermissionsChangedDetailsSerializer().deserialize(json)
                            return EventDetails.appPermissionsChangedDetails(v)
                        case "camera_uploads_policy_changed_details":
                            let v = TeamLog.CameraUploadsPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.cameraUploadsPolicyChangedDetails(v)
                        case "capture_transcript_policy_changed_details":
                            let v = TeamLog.CaptureTranscriptPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.captureTranscriptPolicyChangedDetails(v)
                        case "classification_change_policy_details":
                            let v = TeamLog.ClassificationChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.classificationChangePolicyDetails(v)
                        case "computer_backup_policy_changed_details":
                            let v = TeamLog.ComputerBackupPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.computerBackupPolicyChangedDetails(v)
                        case "content_administration_policy_changed_details":
                            let v = TeamLog.ContentAdministrationPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.contentAdministrationPolicyChangedDetails(v)
                        case "data_placement_restriction_change_policy_details":
                            let v = TeamLog.DataPlacementRestrictionChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.dataPlacementRestrictionChangePolicyDetails(v)
                        case "data_placement_restriction_satisfy_policy_details":
                            let v = TeamLog.DataPlacementRestrictionSatisfyPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.dataPlacementRestrictionSatisfyPolicyDetails(v)
                        case "device_approvals_add_exception_details":
                            let v = TeamLog.DeviceApprovalsAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsAddExceptionDetails(v)
                        case "device_approvals_change_desktop_policy_details":
                            let v = TeamLog.DeviceApprovalsChangeDesktopPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeDesktopPolicyDetails(v)
                        case "device_approvals_change_mobile_policy_details":
                            let v = TeamLog.DeviceApprovalsChangeMobilePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeMobilePolicyDetails(v)
                        case "device_approvals_change_overage_action_details":
                            let v = TeamLog.DeviceApprovalsChangeOverageActionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeOverageActionDetails(v)
                        case "device_approvals_change_unlink_action_details":
                            let v = TeamLog.DeviceApprovalsChangeUnlinkActionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeUnlinkActionDetails(v)
                        case "device_approvals_remove_exception_details":
                            let v = TeamLog.DeviceApprovalsRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsRemoveExceptionDetails(v)
                        case "directory_restrictions_add_members_details":
                            let v = TeamLog.DirectoryRestrictionsAddMembersDetailsSerializer().deserialize(json)
                            return EventDetails.directoryRestrictionsAddMembersDetails(v)
                        case "directory_restrictions_remove_members_details":
                            let v = TeamLog.DirectoryRestrictionsRemoveMembersDetailsSerializer().deserialize(json)
                            return EventDetails.directoryRestrictionsRemoveMembersDetails(v)
                        case "dropbox_passwords_policy_changed_details":
                            let v = TeamLog.DropboxPasswordsPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.dropboxPasswordsPolicyChangedDetails(v)
                        case "email_ingest_policy_changed_details":
                            let v = TeamLog.EmailIngestPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.emailIngestPolicyChangedDetails(v)
                        case "emm_add_exception_details":
                            let v = TeamLog.EmmAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.emmAddExceptionDetails(v)
                        case "emm_change_policy_details":
                            let v = TeamLog.EmmChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.emmChangePolicyDetails(v)
                        case "emm_remove_exception_details":
                            let v = TeamLog.EmmRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.emmRemoveExceptionDetails(v)
                        case "extended_version_history_change_policy_details":
                            let v = TeamLog.ExtendedVersionHistoryChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.extendedVersionHistoryChangePolicyDetails(v)
                        case "external_drive_backup_policy_changed_details":
                            let v = TeamLog.ExternalDriveBackupPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.externalDriveBackupPolicyChangedDetails(v)
                        case "file_comments_change_policy_details":
                            let v = TeamLog.FileCommentsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.fileCommentsChangePolicyDetails(v)
                        case "file_locking_policy_changed_details":
                            let v = TeamLog.FileLockingPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.fileLockingPolicyChangedDetails(v)
                        case "file_provider_migration_policy_changed_details":
                            let v = TeamLog.FileProviderMigrationPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.fileProviderMigrationPolicyChangedDetails(v)
                        case "file_requests_change_policy_details":
                            let v = TeamLog.FileRequestsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsChangePolicyDetails(v)
                        case "file_requests_emails_enabled_details":
                            let v = TeamLog.FileRequestsEmailsEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsEmailsEnabledDetails(v)
                        case "file_requests_emails_restricted_to_team_only_details":
                            let v = TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails(v)
                        case "file_transfers_policy_changed_details":
                            let v = TeamLog.FileTransfersPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.fileTransfersPolicyChangedDetails(v)
                        case "folder_link_restriction_policy_changed_details":
                            let v = TeamLog.FolderLinkRestrictionPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.folderLinkRestrictionPolicyChangedDetails(v)
                        case "google_sso_change_policy_details":
                            let v = TeamLog.GoogleSsoChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.googleSsoChangePolicyDetails(v)
                        case "group_user_management_change_policy_details":
                            let v = TeamLog.GroupUserManagementChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.groupUserManagementChangePolicyDetails(v)
                        case "integration_policy_changed_details":
                            let v = TeamLog.IntegrationPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.integrationPolicyChangedDetails(v)
                        case "invite_acceptance_email_policy_changed_details":
                            let v = TeamLog.InviteAcceptanceEmailPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.inviteAcceptanceEmailPolicyChangedDetails(v)
                        case "member_requests_change_policy_details":
                            let v = TeamLog.MemberRequestsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberRequestsChangePolicyDetails(v)
                        case "member_send_invite_policy_changed_details":
                            let v = TeamLog.MemberSendInvitePolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.memberSendInvitePolicyChangedDetails(v)
                        case "member_space_limits_add_exception_details":
                            let v = TeamLog.MemberSpaceLimitsAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsAddExceptionDetails(v)
                        case "member_space_limits_change_caps_type_policy_details":
                            let v = TeamLog.MemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangeCapsTypePolicyDetails(v)
                        case "member_space_limits_change_policy_details":
                            let v = TeamLog.MemberSpaceLimitsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangePolicyDetails(v)
                        case "member_space_limits_remove_exception_details":
                            let v = TeamLog.MemberSpaceLimitsRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsRemoveExceptionDetails(v)
                        case "member_suggestions_change_policy_details":
                            let v = TeamLog.MemberSuggestionsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberSuggestionsChangePolicyDetails(v)
                        case "microsoft_office_addin_change_policy_details":
                            let v = TeamLog.MicrosoftOfficeAddinChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.microsoftOfficeAddinChangePolicyDetails(v)
                        case "network_control_change_policy_details":
                            let v = TeamLog.NetworkControlChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.networkControlChangePolicyDetails(v)
                        case "paper_change_deployment_policy_details":
                            let v = TeamLog.PaperChangeDeploymentPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeDeploymentPolicyDetails(v)
                        case "paper_change_member_link_policy_details":
                            let v = TeamLog.PaperChangeMemberLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeMemberLinkPolicyDetails(v)
                        case "paper_change_member_policy_details":
                            let v = TeamLog.PaperChangeMemberPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeMemberPolicyDetails(v)
                        case "paper_change_policy_details":
                            let v = TeamLog.PaperChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangePolicyDetails(v)
                        case "paper_default_folder_policy_changed_details":
                            let v = TeamLog.PaperDefaultFolderPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDefaultFolderPolicyChangedDetails(v)
                        case "paper_desktop_policy_changed_details":
                            let v = TeamLog.PaperDesktopPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDesktopPolicyChangedDetails(v)
                        case "paper_enabled_users_group_addition_details":
                            let v = TeamLog.PaperEnabledUsersGroupAdditionDetailsSerializer().deserialize(json)
                            return EventDetails.paperEnabledUsersGroupAdditionDetails(v)
                        case "paper_enabled_users_group_removal_details":
                            let v = TeamLog.PaperEnabledUsersGroupRemovalDetailsSerializer().deserialize(json)
                            return EventDetails.paperEnabledUsersGroupRemovalDetails(v)
                        case "password_strength_requirements_change_policy_details":
                            let v = TeamLog.PasswordStrengthRequirementsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.passwordStrengthRequirementsChangePolicyDetails(v)
                        case "permanent_delete_change_policy_details":
                            let v = TeamLog.PermanentDeleteChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.permanentDeleteChangePolicyDetails(v)
                        case "reseller_support_change_policy_details":
                            let v = TeamLog.ResellerSupportChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.resellerSupportChangePolicyDetails(v)
                        case "rewind_policy_changed_details":
                            let v = TeamLog.RewindPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.rewindPolicyChangedDetails(v)
                        case "send_for_signature_policy_changed_details":
                            let v = TeamLog.SendForSignaturePolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.sendForSignaturePolicyChangedDetails(v)
                        case "sharing_change_folder_join_policy_details":
                            let v = TeamLog.SharingChangeFolderJoinPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeFolderJoinPolicyDetails(v)
                        case "sharing_change_link_allow_change_expiration_policy_details":
                            let v = TeamLog.SharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeLinkAllowChangeExpirationPolicyDetails(v)
                        case "sharing_change_link_default_expiration_policy_details":
                            let v = TeamLog.SharingChangeLinkDefaultExpirationPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeLinkDefaultExpirationPolicyDetails(v)
                        case "sharing_change_link_enforce_password_policy_details":
                            let v = TeamLog.SharingChangeLinkEnforcePasswordPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeLinkEnforcePasswordPolicyDetails(v)
                        case "sharing_change_link_policy_details":
                            let v = TeamLog.SharingChangeLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeLinkPolicyDetails(v)
                        case "sharing_change_member_policy_details":
                            let v = TeamLog.SharingChangeMemberPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeMemberPolicyDetails(v)
                        case "showcase_change_download_policy_details":
                            let v = TeamLog.ShowcaseChangeDownloadPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseChangeDownloadPolicyDetails(v)
                        case "showcase_change_enabled_policy_details":
                            let v = TeamLog.ShowcaseChangeEnabledPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseChangeEnabledPolicyDetails(v)
                        case "showcase_change_external_sharing_policy_details":
                            let v = TeamLog.ShowcaseChangeExternalSharingPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.showcaseChangeExternalSharingPolicyDetails(v)
                        case "smarter_smart_sync_policy_changed_details":
                            let v = TeamLog.SmarterSmartSyncPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.smarterSmartSyncPolicyChangedDetails(v)
                        case "smart_sync_change_policy_details":
                            let v = TeamLog.SmartSyncChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncChangePolicyDetails(v)
                        case "smart_sync_not_opt_out_details":
                            let v = TeamLog.SmartSyncNotOptOutDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncNotOptOutDetails(v)
                        case "smart_sync_opt_out_details":
                            let v = TeamLog.SmartSyncOptOutDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncOptOutDetails(v)
                        case "sso_change_policy_details":
                            let v = TeamLog.SsoChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangePolicyDetails(v)
                        case "team_branding_policy_changed_details":
                            let v = TeamLog.TeamBrandingPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.teamBrandingPolicyChangedDetails(v)
                        case "team_extensions_policy_changed_details":
                            let v = TeamLog.TeamExtensionsPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.teamExtensionsPolicyChangedDetails(v)
                        case "team_selective_sync_policy_changed_details":
                            let v = TeamLog.TeamSelectiveSyncPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.teamSelectiveSyncPolicyChangedDetails(v)
                        case "team_sharing_whitelist_subjects_changed_details":
                            let v = TeamLog.TeamSharingWhitelistSubjectsChangedDetailsSerializer().deserialize(json)
                            return EventDetails.teamSharingWhitelistSubjectsChangedDetails(v)
                        case "tfa_add_exception_details":
                            let v = TeamLog.TfaAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.tfaAddExceptionDetails(v)
                        case "tfa_change_policy_details":
                            let v = TeamLog.TfaChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangePolicyDetails(v)
                        case "tfa_remove_exception_details":
                            let v = TeamLog.TfaRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.tfaRemoveExceptionDetails(v)
                        case "two_account_change_policy_details":
                            let v = TeamLog.TwoAccountChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.twoAccountChangePolicyDetails(v)
                        case "viewer_info_policy_changed_details":
                            let v = TeamLog.ViewerInfoPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.viewerInfoPolicyChangedDetails(v)
                        case "watermarking_policy_changed_details":
                            let v = TeamLog.WatermarkingPolicyChangedDetailsSerializer().deserialize(json)
                            return EventDetails.watermarkingPolicyChangedDetails(v)
                        case "web_sessions_change_active_session_limit_details":
                            let v = TeamLog.WebSessionsChangeActiveSessionLimitDetailsSerializer().deserialize(json)
                            return EventDetails.webSessionsChangeActiveSessionLimitDetails(v)
                        case "web_sessions_change_fixed_length_policy_details":
                            let v = TeamLog.WebSessionsChangeFixedLengthPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.webSessionsChangeFixedLengthPolicyDetails(v)
                        case "web_sessions_change_idle_length_policy_details":
                            let v = TeamLog.WebSessionsChangeIdleLengthPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.webSessionsChangeIdleLengthPolicyDetails(v)
                        case "data_residency_migration_request_successful_details":
                            let v = TeamLog.DataResidencyMigrationRequestSuccessfulDetailsSerializer().deserialize(json)
                            return EventDetails.dataResidencyMigrationRequestSuccessfulDetails(v)
                        case "data_residency_migration_request_unsuccessful_details":
                            let v = TeamLog.DataResidencyMigrationRequestUnsuccessfulDetailsSerializer().deserialize(json)
                            return EventDetails.dataResidencyMigrationRequestUnsuccessfulDetails(v)
                        case "team_merge_from_details":
                            let v = TeamLog.TeamMergeFromDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeFromDetails(v)
                        case "team_merge_to_details":
                            let v = TeamLog.TeamMergeToDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeToDetails(v)
                        case "team_profile_add_background_details":
                            let v = TeamLog.TeamProfileAddBackgroundDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileAddBackgroundDetails(v)
                        case "team_profile_add_logo_details":
                            let v = TeamLog.TeamProfileAddLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileAddLogoDetails(v)
                        case "team_profile_change_background_details":
                            let v = TeamLog.TeamProfileChangeBackgroundDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeBackgroundDetails(v)
                        case "team_profile_change_default_language_details":
                            let v = TeamLog.TeamProfileChangeDefaultLanguageDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeDefaultLanguageDetails(v)
                        case "team_profile_change_logo_details":
                            let v = TeamLog.TeamProfileChangeLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeLogoDetails(v)
                        case "team_profile_change_name_details":
                            let v = TeamLog.TeamProfileChangeNameDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeNameDetails(v)
                        case "team_profile_remove_background_details":
                            let v = TeamLog.TeamProfileRemoveBackgroundDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileRemoveBackgroundDetails(v)
                        case "team_profile_remove_logo_details":
                            let v = TeamLog.TeamProfileRemoveLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileRemoveLogoDetails(v)
                        case "tfa_add_backup_phone_details":
                            let v = TeamLog.TfaAddBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaAddBackupPhoneDetails(v)
                        case "tfa_add_security_key_details":
                            let v = TeamLog.TfaAddSecurityKeyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaAddSecurityKeyDetails(v)
                        case "tfa_change_backup_phone_details":
                            let v = TeamLog.TfaChangeBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangeBackupPhoneDetails(v)
                        case "tfa_change_status_details":
                            let v = TeamLog.TfaChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangeStatusDetails(v)
                        case "tfa_remove_backup_phone_details":
                            let v = TeamLog.TfaRemoveBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaRemoveBackupPhoneDetails(v)
                        case "tfa_remove_security_key_details":
                            let v = TeamLog.TfaRemoveSecurityKeyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaRemoveSecurityKeyDetails(v)
                        case "tfa_reset_details":
                            let v = TeamLog.TfaResetDetailsSerializer().deserialize(json)
                            return EventDetails.tfaResetDetails(v)
                        case "changed_enterprise_admin_role_details":
                            let v = TeamLog.ChangedEnterpriseAdminRoleDetailsSerializer().deserialize(json)
                            return EventDetails.changedEnterpriseAdminRoleDetails(v)
                        case "changed_enterprise_connected_team_status_details":
                            let v = TeamLog.ChangedEnterpriseConnectedTeamStatusDetailsSerializer().deserialize(json)
                            return EventDetails.changedEnterpriseConnectedTeamStatusDetails(v)
                        case "ended_enterprise_admin_session_details":
                            let v = TeamLog.EndedEnterpriseAdminSessionDetailsSerializer().deserialize(json)
                            return EventDetails.endedEnterpriseAdminSessionDetails(v)
                        case "ended_enterprise_admin_session_deprecated_details":
                            let v = TeamLog.EndedEnterpriseAdminSessionDeprecatedDetailsSerializer().deserialize(json)
                            return EventDetails.endedEnterpriseAdminSessionDeprecatedDetails(v)
                        case "enterprise_settings_locking_details":
                            let v = TeamLog.EnterpriseSettingsLockingDetailsSerializer().deserialize(json)
                            return EventDetails.enterpriseSettingsLockingDetails(v)
                        case "guest_admin_change_status_details":
                            let v = TeamLog.GuestAdminChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.guestAdminChangeStatusDetails(v)
                        case "started_enterprise_admin_session_details":
                            let v = TeamLog.StartedEnterpriseAdminSessionDetailsSerializer().deserialize(json)
                            return EventDetails.startedEnterpriseAdminSessionDetails(v)
                        case "team_merge_request_accepted_details":
                            let v = TeamLog.TeamMergeRequestAcceptedDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestAcceptedDetails(v)
                        case "team_merge_request_accepted_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestAcceptedShownToPrimaryTeamDetails(v)
                        case "team_merge_request_accepted_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestAcceptedShownToSecondaryTeamDetails(v)
                        case "team_merge_request_auto_canceled_details":
                            let v = TeamLog.TeamMergeRequestAutoCanceledDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestAutoCanceledDetails(v)
                        case "team_merge_request_canceled_details":
                            let v = TeamLog.TeamMergeRequestCanceledDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestCanceledDetails(v)
                        case "team_merge_request_canceled_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestCanceledShownToPrimaryTeamDetails(v)
                        case "team_merge_request_canceled_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestCanceledShownToSecondaryTeamDetails(v)
                        case "team_merge_request_expired_details":
                            let v = TeamLog.TeamMergeRequestExpiredDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestExpiredDetails(v)
                        case "team_merge_request_expired_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestExpiredShownToPrimaryTeamDetails(v)
                        case "team_merge_request_expired_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestExpiredShownToSecondaryTeamDetails(v)
                        case "team_merge_request_rejected_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestRejectedShownToPrimaryTeamDetails(v)
                        case "team_merge_request_rejected_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestRejectedShownToSecondaryTeamDetails(v)
                        case "team_merge_request_reminder_details":
                            let v = TeamLog.TeamMergeRequestReminderDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestReminderDetails(v)
                        case "team_merge_request_reminder_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestReminderShownToPrimaryTeamDetails(v)
                        case "team_merge_request_reminder_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestReminderShownToSecondaryTeamDetails(v)
                        case "team_merge_request_revoked_details":
                            let v = TeamLog.TeamMergeRequestRevokedDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestRevokedDetails(v)
                        case "team_merge_request_sent_shown_to_primary_team_details":
                            let v = TeamLog.TeamMergeRequestSentShownToPrimaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestSentShownToPrimaryTeamDetails(v)
                        case "team_merge_request_sent_shown_to_secondary_team_details":
                            let v = TeamLog.TeamMergeRequestSentShownToSecondaryTeamDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeRequestSentShownToSecondaryTeamDetails(v)
                        case "missing_details":
                            let v = TeamLog.MissingDetailsSerializer().deserialize(json)
                            return EventDetails.missingDetails(v)
                        case "other":
                            return EventDetails.other
                        default:
                            return EventDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The type of the event with description.
    public enum EventType: CustomStringConvertible {
        /// (admin_alerting) Changed an alert state
        case adminAlertingAlertStateChanged(TeamLog.AdminAlertingAlertStateChangedType)
        /// (admin_alerting) Changed an alert setting
        case adminAlertingChangedAlertConfig(TeamLog.AdminAlertingChangedAlertConfigType)
        /// (admin_alerting) Triggered security alert
        case adminAlertingTriggeredAlert(TeamLog.AdminAlertingTriggeredAlertType)
        /// (apps) Failed to connect app for member
        case appBlockedByPermissions(TeamLog.AppBlockedByPermissionsType)
        /// (apps) Linked app for team
        case appLinkTeam(TeamLog.AppLinkTeamType)
        /// (apps) Linked app for member
        case appLinkUser(TeamLog.AppLinkUserType)
        /// (apps) Unlinked app for team
        case appUnlinkTeam(TeamLog.AppUnlinkTeamType)
        /// (apps) Unlinked app for member
        case appUnlinkUser(TeamLog.AppUnlinkUserType)
        /// (apps) Connected integration for member
        case integrationConnected(TeamLog.IntegrationConnectedType)
        /// (apps) Disconnected integration for member
        case integrationDisconnected(TeamLog.IntegrationDisconnectedType)
        /// (comments) Added file comment
        case fileAddComment(TeamLog.FileAddCommentType)
        /// (comments) Subscribed to or unsubscribed from comment notifications for file
        case fileChangeCommentSubscription(TeamLog.FileChangeCommentSubscriptionType)
        /// (comments) Deleted file comment
        case fileDeleteComment(TeamLog.FileDeleteCommentType)
        /// (comments) Edited file comment
        case fileEditComment(TeamLog.FileEditCommentType)
        /// (comments) Liked file comment (deprecated, no longer logged)
        case fileLikeComment(TeamLog.FileLikeCommentType)
        /// (comments) Resolved file comment
        case fileResolveComment(TeamLog.FileResolveCommentType)
        /// (comments) Unliked file comment (deprecated, no longer logged)
        case fileUnlikeComment(TeamLog.FileUnlikeCommentType)
        /// (comments) Unresolved file comment
        case fileUnresolveComment(TeamLog.FileUnresolveCommentType)
        /// (data_governance) Added folders to policy
        case governancePolicyAddFolders(TeamLog.GovernancePolicyAddFoldersType)
        /// (data_governance) Couldn't add a folder to a policy
        case governancePolicyAddFolderFailed(TeamLog.GovernancePolicyAddFolderFailedType)
        /// (data_governance) Content disposed
        case governancePolicyContentDisposed(TeamLog.GovernancePolicyContentDisposedType)
        /// (data_governance) Activated a new policy
        case governancePolicyCreate(TeamLog.GovernancePolicyCreateType)
        /// (data_governance) Deleted a policy
        case governancePolicyDelete(TeamLog.GovernancePolicyDeleteType)
        /// (data_governance) Edited policy
        case governancePolicyEditDetails(TeamLog.GovernancePolicyEditDetailsType)
        /// (data_governance) Changed policy duration
        case governancePolicyEditDuration(TeamLog.GovernancePolicyEditDurationType)
        /// (data_governance) Created a policy download
        case governancePolicyExportCreated(TeamLog.GovernancePolicyExportCreatedType)
        /// (data_governance) Removed a policy download
        case governancePolicyExportRemoved(TeamLog.GovernancePolicyExportRemovedType)
        /// (data_governance) Removed folders from policy
        case governancePolicyRemoveFolders(TeamLog.GovernancePolicyRemoveFoldersType)
        /// (data_governance) Created a summary report for a policy
        case governancePolicyReportCreated(TeamLog.GovernancePolicyReportCreatedType)
        /// (data_governance) Downloaded content from a policy
        case governancePolicyZipPartDownloaded(TeamLog.GovernancePolicyZipPartDownloadedType)
        /// (data_governance) Activated a hold
        case legalHoldsActivateAHold(TeamLog.LegalHoldsActivateAHoldType)
        /// (data_governance) Added members to a hold
        case legalHoldsAddMembers(TeamLog.LegalHoldsAddMembersType)
        /// (data_governance) Edited details for a hold
        case legalHoldsChangeHoldDetails(TeamLog.LegalHoldsChangeHoldDetailsType)
        /// (data_governance) Renamed a hold
        case legalHoldsChangeHoldName(TeamLog.LegalHoldsChangeHoldNameType)
        /// (data_governance) Exported hold
        case legalHoldsExportAHold(TeamLog.LegalHoldsExportAHoldType)
        /// (data_governance) Canceled export for a hold
        case legalHoldsExportCancelled(TeamLog.LegalHoldsExportCancelledType)
        /// (data_governance) Downloaded export for a hold
        case legalHoldsExportDownloaded(TeamLog.LegalHoldsExportDownloadedType)
        /// (data_governance) Removed export for a hold
        case legalHoldsExportRemoved(TeamLog.LegalHoldsExportRemovedType)
        /// (data_governance) Released a hold
        case legalHoldsReleaseAHold(TeamLog.LegalHoldsReleaseAHoldType)
        /// (data_governance) Removed members from a hold
        case legalHoldsRemoveMembers(TeamLog.LegalHoldsRemoveMembersType)
        /// (data_governance) Created a summary report for a hold
        case legalHoldsReportAHold(TeamLog.LegalHoldsReportAHoldType)
        /// (devices) Changed IP address associated with active desktop session
        case deviceChangeIpDesktop(TeamLog.DeviceChangeIpDesktopType)
        /// (devices) Changed IP address associated with active mobile session
        case deviceChangeIpMobile(TeamLog.DeviceChangeIpMobileType)
        /// (devices) Changed IP address associated with active web session
        case deviceChangeIpWeb(TeamLog.DeviceChangeIpWebType)
        /// (devices) Failed to delete all files from unlinked device
        case deviceDeleteOnUnlinkFail(TeamLog.DeviceDeleteOnUnlinkFailType)
        /// (devices) Deleted all files from unlinked device
        case deviceDeleteOnUnlinkSuccess(TeamLog.DeviceDeleteOnUnlinkSuccessType)
        /// (devices) Failed to link device
        case deviceLinkFail(TeamLog.DeviceLinkFailType)
        /// (devices) Linked device
        case deviceLinkSuccess(TeamLog.DeviceLinkSuccessType)
        /// (devices) Disabled device management (deprecated, no longer logged)
        case deviceManagementDisabled(TeamLog.DeviceManagementDisabledType)
        /// (devices) Enabled device management (deprecated, no longer logged)
        case deviceManagementEnabled(TeamLog.DeviceManagementEnabledType)
        /// (devices) Enabled/disabled backup for computer
        case deviceSyncBackupStatusChanged(TeamLog.DeviceSyncBackupStatusChangedType)
        /// (devices) Disconnected device
        case deviceUnlink(TeamLog.DeviceUnlinkType)
        /// (devices) Exported passwords
        case dropboxPasswordsExported(TeamLog.DropboxPasswordsExportedType)
        /// (devices) Enrolled new Dropbox Passwords device
        case dropboxPasswordsNewDeviceEnrolled(TeamLog.DropboxPasswordsNewDeviceEnrolledType)
        /// (devices) Refreshed auth token used for setting up EMM
        case emmRefreshAuthToken(TeamLog.EmmRefreshAuthTokenType)
        /// (devices) Checked external drive backup eligibility status
        case externalDriveBackupEligibilityStatusChecked(TeamLog.ExternalDriveBackupEligibilityStatusCheckedType)
        /// (devices) Modified external drive backup
        case externalDriveBackupStatusChanged(TeamLog.ExternalDriveBackupStatusChangedType)
        /// (domains) Granted/revoked option to enable account capture on team domains
        case accountCaptureChangeAvailability(TeamLog.AccountCaptureChangeAvailabilityType)
        /// (domains) Account-captured user migrated account to team
        case accountCaptureMigrateAccount(TeamLog.AccountCaptureMigrateAccountType)
        /// (domains) Sent account capture email to all unmanaged members
        case accountCaptureNotificationEmailsSent(TeamLog.AccountCaptureNotificationEmailsSentType)
        /// (domains) Account-captured user changed account email to personal email
        case accountCaptureRelinquishAccount(TeamLog.AccountCaptureRelinquishAccountType)
        /// (domains) Disabled domain invites (deprecated, no longer logged)
        case disabledDomainInvites(TeamLog.DisabledDomainInvitesType)
        /// (domains) Approved user's request to join team
        case domainInvitesApproveRequestToJoinTeam(TeamLog.DomainInvitesApproveRequestToJoinTeamType)
        /// (domains) Declined user's request to join team
        case domainInvitesDeclineRequestToJoinTeam(TeamLog.DomainInvitesDeclineRequestToJoinTeamType)
        /// (domains) Sent domain invites to existing domain accounts (deprecated, no longer logged)
        case domainInvitesEmailExistingUsers(TeamLog.DomainInvitesEmailExistingUsersType)
        /// (domains) Requested to join team
        case domainInvitesRequestToJoinTeam(TeamLog.DomainInvitesRequestToJoinTeamType)
        /// (domains) Disabled "Automatically invite new users" (deprecated, no longer logged)
        case domainInvitesSetInviteNewUserPrefToNo(TeamLog.DomainInvitesSetInviteNewUserPrefToNoType)
        /// (domains) Enabled "Automatically invite new users" (deprecated, no longer logged)
        case domainInvitesSetInviteNewUserPrefToYes(TeamLog.DomainInvitesSetInviteNewUserPrefToYesType)
        /// (domains) Failed to verify team domain
        case domainVerificationAddDomainFail(TeamLog.DomainVerificationAddDomainFailType)
        /// (domains) Verified team domain
        case domainVerificationAddDomainSuccess(TeamLog.DomainVerificationAddDomainSuccessType)
        /// (domains) Removed domain from list of verified team domains
        case domainVerificationRemoveDomain(TeamLog.DomainVerificationRemoveDomainType)
        /// (domains) Enabled domain invites (deprecated, no longer logged)
        case enabledDomainInvites(TeamLog.EnabledDomainInvitesType)
        /// (file_operations) Applied naming convention
        case applyNamingConvention(TeamLog.ApplyNamingConventionType)
        /// (file_operations) Created folders (deprecated, no longer logged)
        case createFolder(TeamLog.CreateFolderType)
        /// (file_operations) Added files and/or folders
        case fileAdd(TeamLog.FileAddType)
        /// (file_operations) Copied files and/or folders
        case fileCopy(TeamLog.FileCopyType)
        /// (file_operations) Deleted files and/or folders
        case fileDelete(TeamLog.FileDeleteType)
        /// (file_operations) Downloaded files and/or folders
        case fileDownload(TeamLog.FileDownloadType)
        /// (file_operations) Edited files
        case fileEdit(TeamLog.FileEditType)
        /// (file_operations) Created copy reference to file/folder
        case fileGetCopyReference(TeamLog.FileGetCopyReferenceType)
        /// (file_operations) Locked/unlocked editing for a file
        case fileLockingLockStatusChanged(TeamLog.FileLockingLockStatusChangedType)
        /// (file_operations) Moved files and/or folders
        case fileMove(TeamLog.FileMoveType)
        /// (file_operations) Permanently deleted files and/or folders
        case filePermanentlyDelete(TeamLog.FilePermanentlyDeleteType)
        /// (file_operations) Previewed files and/or folders
        case filePreview(TeamLog.FilePreviewType)
        /// (file_operations) Renamed files and/or folders
        case fileRename(TeamLog.FileRenameType)
        /// (file_operations) Restored deleted files and/or folders
        case fileRestore(TeamLog.FileRestoreType)
        /// (file_operations) Reverted files to previous version
        case fileRevert(TeamLog.FileRevertType)
        /// (file_operations) Rolled back file actions
        case fileRollbackChanges(TeamLog.FileRollbackChangesType)
        /// (file_operations) Saved file/folder using copy reference
        case fileSaveCopyReference(TeamLog.FileSaveCopyReferenceType)
        /// (file_operations) Updated folder overview
        case folderOverviewDescriptionChanged(TeamLog.FolderOverviewDescriptionChangedType)
        /// (file_operations) Pinned item to folder overview
        case folderOverviewItemPinned(TeamLog.FolderOverviewItemPinnedType)
        /// (file_operations) Unpinned item from folder overview
        case folderOverviewItemUnpinned(TeamLog.FolderOverviewItemUnpinnedType)
        /// (file_operations) Added a label
        case objectLabelAdded(TeamLog.ObjectLabelAddedType)
        /// (file_operations) Removed a label
        case objectLabelRemoved(TeamLog.ObjectLabelRemovedType)
        /// (file_operations) Updated a label's value
        case objectLabelUpdatedValue(TeamLog.ObjectLabelUpdatedValueType)
        /// (file_operations) Organized a folder with multi-file organize
        case organizeFolderWithTidy(TeamLog.OrganizeFolderWithTidyType)
        /// (file_operations) Rewound a folder
        case rewindFolder(TeamLog.RewindFolderType)
        /// (file_operations) Reverted naming convention
        case undoNamingConvention(TeamLog.UndoNamingConventionType)
        /// (file_operations) Removed multi-file organize
        case undoOrganizeFolderWithTidy(TeamLog.UndoOrganizeFolderWithTidyType)
        /// (file_operations) Tagged a file
        case userTagsAdded(TeamLog.UserTagsAddedType)
        /// (file_operations) Removed tags
        case userTagsRemoved(TeamLog.UserTagsRemovedType)
        /// (file_requests) Received files via Email to Dropbox
        case emailIngestReceiveFile(TeamLog.EmailIngestReceiveFileType)
        /// (file_requests) Changed file request
        case fileRequestChange(TeamLog.FileRequestChangeType)
        /// (file_requests) Closed file request
        case fileRequestClose(TeamLog.FileRequestCloseType)
        /// (file_requests) Created file request
        case fileRequestCreate(TeamLog.FileRequestCreateType)
        /// (file_requests) Delete file request
        case fileRequestDelete(TeamLog.FileRequestDeleteType)
        /// (file_requests) Received files for file request
        case fileRequestReceiveFile(TeamLog.FileRequestReceiveFileType)
        /// (groups) Added external ID for group
        case groupAddExternalId(TeamLog.GroupAddExternalIdType)
        /// (groups) Added team members to group
        case groupAddMember(TeamLog.GroupAddMemberType)
        /// (groups) Changed external ID for group
        case groupChangeExternalId(TeamLog.GroupChangeExternalIdType)
        /// (groups) Changed group management type
        case groupChangeManagementType(TeamLog.GroupChangeManagementTypeType)
        /// (groups) Changed manager permissions of group member
        case groupChangeMemberRole(TeamLog.GroupChangeMemberRoleType)
        /// (groups) Created group
        case groupCreate(TeamLog.GroupCreateType)
        /// (groups) Deleted group
        case groupDelete(TeamLog.GroupDeleteType)
        /// (groups) Updated group (deprecated, no longer logged)
        case groupDescriptionUpdated(TeamLog.GroupDescriptionUpdatedType)
        /// (groups) Updated group join policy (deprecated, no longer logged)
        case groupJoinPolicyUpdated(TeamLog.GroupJoinPolicyUpdatedType)
        /// (groups) Moved group (deprecated, no longer logged)
        case groupMoved(TeamLog.GroupMovedType)
        /// (groups) Removed external ID for group
        case groupRemoveExternalId(TeamLog.GroupRemoveExternalIdType)
        /// (groups) Removed team members from group
        case groupRemoveMember(TeamLog.GroupRemoveMemberType)
        /// (groups) Renamed group
        case groupRename(TeamLog.GroupRenameType)
        /// (logins) Unlocked/locked account after failed sign in attempts
        case accountLockOrUnlocked(TeamLog.AccountLockOrUnlockedType)
        /// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign in')
        case emmError(TeamLog.EmmErrorType)
        /// (logins) Started trusted team admin session
        case guestAdminSignedInViaTrustedTeams(TeamLog.GuestAdminSignedInViaTrustedTeamsType)
        /// (logins) Ended trusted team admin session
        case guestAdminSignedOutViaTrustedTeams(TeamLog.GuestAdminSignedOutViaTrustedTeamsType)
        /// (logins) Failed to sign in
        case loginFail(TeamLog.LoginFailType)
        /// (logins) Signed in
        case loginSuccess(TeamLog.LoginSuccessType)
        /// (logins) Signed out
        case logout(TeamLog.LogoutType)
        /// (logins) Ended reseller support session
        case resellerSupportSessionEnd(TeamLog.ResellerSupportSessionEndType)
        /// (logins) Started reseller support session
        case resellerSupportSessionStart(TeamLog.ResellerSupportSessionStartType)
        /// (logins) Ended admin sign-in-as session
        case signInAsSessionEnd(TeamLog.SignInAsSessionEndType)
        /// (logins) Started admin sign-in-as session
        case signInAsSessionStart(TeamLog.SignInAsSessionStartType)
        /// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign in')
        case ssoError(TeamLog.SsoErrorType)
        /// (members) Created team invite link
        case createTeamInviteLink(TeamLog.CreateTeamInviteLinkType)
        /// (members) Deleted team invite link
        case deleteTeamInviteLink(TeamLog.DeleteTeamInviteLinkType)
        /// (members) Added an external ID for team member
        case memberAddExternalId(TeamLog.MemberAddExternalIdType)
        /// (members) Added team member name
        case memberAddName(TeamLog.MemberAddNameType)
        /// (members) Changed team member admin role
        case memberChangeAdminRole(TeamLog.MemberChangeAdminRoleType)
        /// (members) Changed team member email
        case memberChangeEmail(TeamLog.MemberChangeEmailType)
        /// (members) Changed the external ID for team member
        case memberChangeExternalId(TeamLog.MemberChangeExternalIdType)
        /// (members) Changed membership type (limited/full) of member (deprecated, no longer logged)
        case memberChangeMembershipType(TeamLog.MemberChangeMembershipTypeType)
        /// (members) Changed team member name
        case memberChangeName(TeamLog.MemberChangeNameType)
        /// (members) Changed team member reseller role
        case memberChangeResellerRole(TeamLog.MemberChangeResellerRoleType)
        /// (members) Changed member status (invited, joined, suspended, etc.)
        case memberChangeStatus(TeamLog.MemberChangeStatusType)
        /// (members) Cleared manually added contacts
        case memberDeleteManualContacts(TeamLog.MemberDeleteManualContactsType)
        /// (members) Deleted team member profile photo
        case memberDeleteProfilePhoto(TeamLog.MemberDeleteProfilePhotoType)
        /// (members) Permanently deleted contents of deleted team member account
        case memberPermanentlyDeleteAccountContents(TeamLog.MemberPermanentlyDeleteAccountContentsType)
        /// (members) Removed the external ID for team member
        case memberRemoveExternalId(TeamLog.MemberRemoveExternalIdType)
        /// (members) Set team member profile photo
        case memberSetProfilePhoto(TeamLog.MemberSetProfilePhotoType)
        /// (members) Set custom member space limit
        case memberSpaceLimitsAddCustomQuota(TeamLog.MemberSpaceLimitsAddCustomQuotaType)
        /// (members) Changed custom member space limit
        case memberSpaceLimitsChangeCustomQuota(TeamLog.MemberSpaceLimitsChangeCustomQuotaType)
        /// (members) Changed space limit status
        case memberSpaceLimitsChangeStatus(TeamLog.MemberSpaceLimitsChangeStatusType)
        /// (members) Removed custom member space limit
        case memberSpaceLimitsRemoveCustomQuota(TeamLog.MemberSpaceLimitsRemoveCustomQuotaType)
        /// (members) Suggested person to add to team
        case memberSuggest(TeamLog.MemberSuggestType)
        /// (members) Transferred contents of deleted member account to another member
        case memberTransferAccountContents(TeamLog.MemberTransferAccountContentsType)
        /// (members) Added pending secondary email
        case pendingSecondaryEmailAdded(TeamLog.PendingSecondaryEmailAddedType)
        /// (members) Deleted secondary email
        case secondaryEmailDeleted(TeamLog.SecondaryEmailDeletedType)
        /// (members) Verified secondary email
        case secondaryEmailVerified(TeamLog.SecondaryEmailVerifiedType)
        /// (members) Secondary mails policy changed
        case secondaryMailsPolicyChanged(TeamLog.SecondaryMailsPolicyChangedType)
        /// (paper) Added Binder page (deprecated, replaced by 'Edited files')
        case binderAddPage(TeamLog.BinderAddPageType)
        /// (paper) Added Binder section (deprecated, replaced by 'Edited files')
        case binderAddSection(TeamLog.BinderAddSectionType)
        /// (paper) Removed Binder page (deprecated, replaced by 'Edited files')
        case binderRemovePage(TeamLog.BinderRemovePageType)
        /// (paper) Removed Binder section (deprecated, replaced by 'Edited files')
        case binderRemoveSection(TeamLog.BinderRemoveSectionType)
        /// (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
        case binderRenamePage(TeamLog.BinderRenamePageType)
        /// (paper) Renamed Binder section (deprecated, replaced by 'Edited files')
        case binderRenameSection(TeamLog.BinderRenameSectionType)
        /// (paper) Reordered Binder page (deprecated, replaced by 'Edited files')
        case binderReorderPage(TeamLog.BinderReorderPageType)
        /// (paper) Reordered Binder section (deprecated, replaced by 'Edited files')
        case binderReorderSection(TeamLog.BinderReorderSectionType)
        /// (paper) Added users and/or groups to Paper doc/folder
        case paperContentAddMember(TeamLog.PaperContentAddMemberType)
        /// (paper) Added Paper doc/folder to folder
        case paperContentAddToFolder(TeamLog.PaperContentAddToFolderType)
        /// (paper) Archived Paper doc/folder
        case paperContentArchive(TeamLog.PaperContentArchiveType)
        /// (paper) Created Paper doc/folder
        case paperContentCreate(TeamLog.PaperContentCreateType)
        /// (paper) Permanently deleted Paper doc/folder
        case paperContentPermanentlyDelete(TeamLog.PaperContentPermanentlyDeleteType)
        /// (paper) Removed Paper doc/folder from folder
        case paperContentRemoveFromFolder(TeamLog.PaperContentRemoveFromFolderType)
        /// (paper) Removed users and/or groups from Paper doc/folder
        case paperContentRemoveMember(TeamLog.PaperContentRemoveMemberType)
        /// (paper) Renamed Paper doc/folder
        case paperContentRename(TeamLog.PaperContentRenameType)
        /// (paper) Restored archived Paper doc/folder
        case paperContentRestore(TeamLog.PaperContentRestoreType)
        /// (paper) Added Paper doc comment
        case paperDocAddComment(TeamLog.PaperDocAddCommentType)
        /// (paper) Changed member permissions for Paper doc
        case paperDocChangeMemberRole(TeamLog.PaperDocChangeMemberRoleType)
        /// (paper) Changed sharing setting for Paper doc
        case paperDocChangeSharingPolicy(TeamLog.PaperDocChangeSharingPolicyType)
        /// (paper) Followed/unfollowed Paper doc
        case paperDocChangeSubscription(TeamLog.PaperDocChangeSubscriptionType)
        /// (paper) Archived Paper doc (deprecated, no longer logged)
        case paperDocDeleted(TeamLog.PaperDocDeletedType)
        /// (paper) Deleted Paper doc comment
        case paperDocDeleteComment(TeamLog.PaperDocDeleteCommentType)
        /// (paper) Downloaded Paper doc in specific format
        case paperDocDownload(TeamLog.PaperDocDownloadType)
        /// (paper) Edited Paper doc
        case paperDocEdit(TeamLog.PaperDocEditType)
        /// (paper) Edited Paper doc comment
        case paperDocEditComment(TeamLog.PaperDocEditCommentType)
        /// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
        case paperDocFollowed(TeamLog.PaperDocFollowedType)
        /// (paper) Mentioned user in Paper doc
        case paperDocMention(TeamLog.PaperDocMentionType)
        /// (paper) Transferred ownership of Paper doc
        case paperDocOwnershipChanged(TeamLog.PaperDocOwnershipChangedType)
        /// (paper) Requested access to Paper doc
        case paperDocRequestAccess(TeamLog.PaperDocRequestAccessType)
        /// (paper) Resolved Paper doc comment
        case paperDocResolveComment(TeamLog.PaperDocResolveCommentType)
        /// (paper) Restored Paper doc to previous version
        case paperDocRevert(TeamLog.PaperDocRevertType)
        /// (paper) Shared Paper doc via Slack
        case paperDocSlackShare(TeamLog.PaperDocSlackShareType)
        /// (paper) Shared Paper doc with users and/or groups (deprecated, no longer logged)
        case paperDocTeamInvite(TeamLog.PaperDocTeamInviteType)
        /// (paper) Deleted Paper doc
        case paperDocTrashed(TeamLog.PaperDocTrashedType)
        /// (paper) Unresolved Paper doc comment
        case paperDocUnresolveComment(TeamLog.PaperDocUnresolveCommentType)
        /// (paper) Restored Paper doc
        case paperDocUntrashed(TeamLog.PaperDocUntrashedType)
        /// (paper) Viewed Paper doc
        case paperDocView(TeamLog.PaperDocViewType)
        /// (paper) Changed Paper external sharing setting to anyone (deprecated, no longer logged)
        case paperExternalViewAllow(TeamLog.PaperExternalViewAllowType)
        /// (paper) Changed Paper external sharing setting to default team (deprecated, no longer logged)
        case paperExternalViewDefaultTeam(TeamLog.PaperExternalViewDefaultTeamType)
        /// (paper) Changed Paper external sharing setting to team-only (deprecated, no longer logged)
        case paperExternalViewForbid(TeamLog.PaperExternalViewForbidType)
        /// (paper) Followed/unfollowed Paper folder
        case paperFolderChangeSubscription(TeamLog.PaperFolderChangeSubscriptionType)
        /// (paper) Archived Paper folder (deprecated, no longer logged)
        case paperFolderDeleted(TeamLog.PaperFolderDeletedType)
        /// (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
        case paperFolderFollowed(TeamLog.PaperFolderFollowedType)
        /// (paper) Shared Paper folder with users and/or groups (deprecated, no longer logged)
        case paperFolderTeamInvite(TeamLog.PaperFolderTeamInviteType)
        /// (paper) Changed permissions for published doc
        case paperPublishedLinkChangePermission(TeamLog.PaperPublishedLinkChangePermissionType)
        /// (paper) Published doc
        case paperPublishedLinkCreate(TeamLog.PaperPublishedLinkCreateType)
        /// (paper) Unpublished doc
        case paperPublishedLinkDisabled(TeamLog.PaperPublishedLinkDisabledType)
        /// (paper) Viewed published doc
        case paperPublishedLinkView(TeamLog.PaperPublishedLinkViewType)
        /// (passwords) Changed password
        case passwordChange(TeamLog.PasswordChangeType)
        /// (passwords) Reset password
        case passwordReset(TeamLog.PasswordResetType)
        /// (passwords) Reset all team member passwords
        case passwordResetAll(TeamLog.PasswordResetAllType)
        /// (reports) Created Classification report
        case classificationCreateReport(TeamLog.ClassificationCreateReportType)
        /// (reports) Couldn't create Classification report
        case classificationCreateReportFail(TeamLog.ClassificationCreateReportFailType)
        /// (reports) Created EMM-excluded users report
        case emmCreateExceptionsReport(TeamLog.EmmCreateExceptionsReportType)
        /// (reports) Created EMM mobile app usage report
        case emmCreateUsageReport(TeamLog.EmmCreateUsageReportType)
        /// (reports) Created member data report
        case exportMembersReport(TeamLog.ExportMembersReportType)
        /// (reports) Failed to create members data report
        case exportMembersReportFail(TeamLog.ExportMembersReportFailType)
        /// (reports) Created External sharing report
        case externalSharingCreateReport(TeamLog.ExternalSharingCreateReportType)
        /// (reports) Couldn't create External sharing report
        case externalSharingReportFailed(TeamLog.ExternalSharingReportFailedType)
        /// (reports) Report created: Links created with no expiration
        case noExpirationLinkGenCreateReport(TeamLog.NoExpirationLinkGenCreateReportType)
        /// (reports) Couldn't create report: Links created with no expiration
        case noExpirationLinkGenReportFailed(TeamLog.NoExpirationLinkGenReportFailedType)
        /// (reports) Report created: Links created without passwords
        case noPasswordLinkGenCreateReport(TeamLog.NoPasswordLinkGenCreateReportType)
        /// (reports) Couldn't create report: Links created without passwords
        case noPasswordLinkGenReportFailed(TeamLog.NoPasswordLinkGenReportFailedType)
        /// (reports) Report created: Views of links without passwords
        case noPasswordLinkViewCreateReport(TeamLog.NoPasswordLinkViewCreateReportType)
        /// (reports) Couldn't create report: Views of links without passwords
        case noPasswordLinkViewReportFailed(TeamLog.NoPasswordLinkViewReportFailedType)
        /// (reports) Report created: Views of old links
        case outdatedLinkViewCreateReport(TeamLog.OutdatedLinkViewCreateReportType)
        /// (reports) Couldn't create report: Views of old links
        case outdatedLinkViewReportFailed(TeamLog.OutdatedLinkViewReportFailedType)
        /// (reports) Exported all team Paper docs
        case paperAdminExportStart(TeamLog.PaperAdminExportStartType)
        /// (reports) Created Smart Sync non-admin devices report
        case smartSyncCreateAdminPrivilegeReport(TeamLog.SmartSyncCreateAdminPrivilegeReportType)
        /// (reports) Created team activity report
        case teamActivityCreateReport(TeamLog.TeamActivityCreateReportType)
        /// (reports) Couldn't generate team activity report
        case teamActivityCreateReportFail(TeamLog.TeamActivityCreateReportFailType)
        /// (sharing) Shared album
        case collectionShare(TeamLog.CollectionShareType)
        /// (sharing) Transfer files added
        case fileTransfersFileAdd(TeamLog.FileTransfersFileAddType)
        /// (sharing) Deleted transfer
        case fileTransfersTransferDelete(TeamLog.FileTransfersTransferDeleteType)
        /// (sharing) Transfer downloaded
        case fileTransfersTransferDownload(TeamLog.FileTransfersTransferDownloadType)
        /// (sharing) Sent transfer
        case fileTransfersTransferSend(TeamLog.FileTransfersTransferSendType)
        /// (sharing) Viewed transfer
        case fileTransfersTransferView(TeamLog.FileTransfersTransferViewType)
        /// (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
        case noteAclInviteOnly(TeamLog.NoteAclInviteOnlyType)
        /// (sharing) Changed Paper doc to link-accessible (deprecated, no longer logged)
        case noteAclLink(TeamLog.NoteAclLinkType)
        /// (sharing) Changed Paper doc to link-accessible for team (deprecated, no longer logged)
        case noteAclTeamLink(TeamLog.NoteAclTeamLinkType)
        /// (sharing) Shared Paper doc (deprecated, no longer logged)
        case noteShared(TeamLog.NoteSharedType)
        /// (sharing) Shared received Paper doc (deprecated, no longer logged)
        case noteShareReceive(TeamLog.NoteShareReceiveType)
        /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
        case openNoteShared(TeamLog.OpenNoteSharedType)
        /// (sharing) Added team to shared folder (deprecated, no longer logged)
        case sfAddGroup(TeamLog.SfAddGroupType)
        /// (sharing) Allowed non-collaborators to view links to files in shared folder (deprecated, no longer logged)
        case sfAllowNonMembersToViewSharedLinks(TeamLog.SfAllowNonMembersToViewSharedLinksType)
        /// (sharing) Set team members to see warning before sharing folders outside team (deprecated, no longer logged)
        case sfExternalInviteWarn(TeamLog.SfExternalInviteWarnType)
        /// (sharing) Invited Facebook users to shared folder (deprecated, no longer logged)
        case sfFbInvite(TeamLog.SfFbInviteType)
        /// (sharing) Changed Facebook user's role in shared folder (deprecated, no longer logged)
        case sfFbInviteChangeRole(TeamLog.SfFbInviteChangeRoleType)
        /// (sharing) Uninvited Facebook user from shared folder (deprecated, no longer logged)
        case sfFbUninvite(TeamLog.SfFbUninviteType)
        /// (sharing) Invited group to shared folder (deprecated, no longer logged)
        case sfInviteGroup(TeamLog.SfInviteGroupType)
        /// (sharing) Granted access to shared folder (deprecated, no longer logged)
        case sfTeamGrantAccess(TeamLog.SfTeamGrantAccessType)
        /// (sharing) Invited team members to shared folder (deprecated, replaced by 'Invited user to Dropbox and added
        /// them to shared file/folder')
        case sfTeamInvite(TeamLog.SfTeamInviteType)
        /// (sharing) Changed team member's role in shared folder (deprecated, no longer logged)
        case sfTeamInviteChangeRole(TeamLog.SfTeamInviteChangeRoleType)
        /// (sharing) Joined team member's shared folder (deprecated, no longer logged)
        case sfTeamJoin(TeamLog.SfTeamJoinType)
        /// (sharing) Joined team member's shared folder from link (deprecated, no longer logged)
        case sfTeamJoinFromOobLink(TeamLog.SfTeamJoinFromOobLinkType)
        /// (sharing) Unshared folder with team member (deprecated, replaced by 'Removed invitee from shared file/folder
        /// before invite was accepted')
        case sfTeamUninvite(TeamLog.SfTeamUninviteType)
        /// (sharing) Invited user to Dropbox and added them to shared file/folder
        case sharedContentAddInvitees(TeamLog.SharedContentAddInviteesType)
        /// (sharing) Added expiration date to link for shared file/folder (deprecated, no longer logged)
        case sharedContentAddLinkExpiry(TeamLog.SharedContentAddLinkExpiryType)
        /// (sharing) Added password to link for shared file/folder (deprecated, no longer logged)
        case sharedContentAddLinkPassword(TeamLog.SharedContentAddLinkPasswordType)
        /// (sharing) Added users and/or groups to shared file/folder
        case sharedContentAddMember(TeamLog.SharedContentAddMemberType)
        /// (sharing) Changed whether members can download shared file/folder (deprecated, no longer logged)
        case sharedContentChangeDownloadsPolicy(TeamLog.SharedContentChangeDownloadsPolicyType)
        /// (sharing) Changed access type of invitee to shared file/folder before invite was accepted
        case sharedContentChangeInviteeRole(TeamLog.SharedContentChangeInviteeRoleType)
        /// (sharing) Changed link audience of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkAudience(TeamLog.SharedContentChangeLinkAudienceType)
        /// (sharing) Changed link expiration of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkExpiry(TeamLog.SharedContentChangeLinkExpiryType)
        /// (sharing) Changed link password of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkPassword(TeamLog.SharedContentChangeLinkPasswordType)
        /// (sharing) Changed access type of shared file/folder member
        case sharedContentChangeMemberRole(TeamLog.SharedContentChangeMemberRoleType)
        /// (sharing) Changed whether members can see who viewed shared file/folder
        case sharedContentChangeViewerInfoPolicy(TeamLog.SharedContentChangeViewerInfoPolicyType)
        /// (sharing) Acquired membership of shared file/folder by accepting invite
        case sharedContentClaimInvitation(TeamLog.SharedContentClaimInvitationType)
        /// (sharing) Copied shared file/folder to own Dropbox
        case sharedContentCopy(TeamLog.SharedContentCopyType)
        /// (sharing) Downloaded shared file/folder
        case sharedContentDownload(TeamLog.SharedContentDownloadType)
        /// (sharing) Left shared file/folder
        case sharedContentRelinquishMembership(TeamLog.SharedContentRelinquishMembershipType)
        /// (sharing) Removed invitee from shared file/folder before invite was accepted
        case sharedContentRemoveInvitees(TeamLog.SharedContentRemoveInviteesType)
        /// (sharing) Removed link expiration date of shared file/folder (deprecated, no longer logged)
        case sharedContentRemoveLinkExpiry(TeamLog.SharedContentRemoveLinkExpiryType)
        /// (sharing) Removed link password of shared file/folder (deprecated, no longer logged)
        case sharedContentRemoveLinkPassword(TeamLog.SharedContentRemoveLinkPasswordType)
        /// (sharing) Removed user/group from shared file/folder
        case sharedContentRemoveMember(TeamLog.SharedContentRemoveMemberType)
        /// (sharing) Requested access to shared file/folder
        case sharedContentRequestAccess(TeamLog.SharedContentRequestAccessType)
        /// (sharing) Restored shared file/folder invitees
        case sharedContentRestoreInvitees(TeamLog.SharedContentRestoreInviteesType)
        /// (sharing) Restored users and/or groups to membership of shared file/folder
        case sharedContentRestoreMember(TeamLog.SharedContentRestoreMemberType)
        /// (sharing) Unshared file/folder by clearing membership
        case sharedContentUnshare(TeamLog.SharedContentUnshareType)
        /// (sharing) Previewed shared file/folder
        case sharedContentView(TeamLog.SharedContentViewType)
        /// (sharing) Changed who can access shared folder via link
        case sharedFolderChangeLinkPolicy(TeamLog.SharedFolderChangeLinkPolicyType)
        /// (sharing) Changed whether shared folder inherits members from parent folder
        case sharedFolderChangeMembersInheritancePolicy(TeamLog.SharedFolderChangeMembersInheritancePolicyType)
        /// (sharing) Changed who can add/remove members of shared folder
        case sharedFolderChangeMembersManagementPolicy(TeamLog.SharedFolderChangeMembersManagementPolicyType)
        /// (sharing) Changed who can become member of shared folder
        case sharedFolderChangeMembersPolicy(TeamLog.SharedFolderChangeMembersPolicyType)
        /// (sharing) Created shared folder
        case sharedFolderCreate(TeamLog.SharedFolderCreateType)
        /// (sharing) Declined team member's invite to shared folder
        case sharedFolderDeclineInvitation(TeamLog.SharedFolderDeclineInvitationType)
        /// (sharing) Added shared folder to own Dropbox
        case sharedFolderMount(TeamLog.SharedFolderMountType)
        /// (sharing) Changed parent of shared folder
        case sharedFolderNest(TeamLog.SharedFolderNestType)
        /// (sharing) Transferred ownership of shared folder to another member
        case sharedFolderTransferOwnership(TeamLog.SharedFolderTransferOwnershipType)
        /// (sharing) Deleted shared folder from Dropbox
        case sharedFolderUnmount(TeamLog.SharedFolderUnmountType)
        /// (sharing) Added shared link expiration date
        case sharedLinkAddExpiry(TeamLog.SharedLinkAddExpiryType)
        /// (sharing) Changed shared link expiration date
        case sharedLinkChangeExpiry(TeamLog.SharedLinkChangeExpiryType)
        /// (sharing) Changed visibility of shared link
        case sharedLinkChangeVisibility(TeamLog.SharedLinkChangeVisibilityType)
        /// (sharing) Added file/folder to Dropbox from shared link
        case sharedLinkCopy(TeamLog.SharedLinkCopyType)
        /// (sharing) Created shared link
        case sharedLinkCreate(TeamLog.SharedLinkCreateType)
        /// (sharing) Removed shared link
        case sharedLinkDisable(TeamLog.SharedLinkDisableType)
        /// (sharing) Downloaded file/folder from shared link
        case sharedLinkDownload(TeamLog.SharedLinkDownloadType)
        /// (sharing) Removed shared link expiration date
        case sharedLinkRemoveExpiry(TeamLog.SharedLinkRemoveExpiryType)
        /// (sharing) Added an expiration date to the shared link
        case sharedLinkSettingsAddExpiration(TeamLog.SharedLinkSettingsAddExpirationType)
        /// (sharing) Added a password to the shared link
        case sharedLinkSettingsAddPassword(TeamLog.SharedLinkSettingsAddPasswordType)
        /// (sharing) Disabled downloads
        case sharedLinkSettingsAllowDownloadDisabled(TeamLog.SharedLinkSettingsAllowDownloadDisabledType)
        /// (sharing) Enabled downloads
        case sharedLinkSettingsAllowDownloadEnabled(TeamLog.SharedLinkSettingsAllowDownloadEnabledType)
        /// (sharing) Changed the audience of the shared link
        case sharedLinkSettingsChangeAudience(TeamLog.SharedLinkSettingsChangeAudienceType)
        /// (sharing) Changed the expiration date of the shared link
        case sharedLinkSettingsChangeExpiration(TeamLog.SharedLinkSettingsChangeExpirationType)
        /// (sharing) Changed the password of the shared link
        case sharedLinkSettingsChangePassword(TeamLog.SharedLinkSettingsChangePasswordType)
        /// (sharing) Removed the expiration date from the shared link
        case sharedLinkSettingsRemoveExpiration(TeamLog.SharedLinkSettingsRemoveExpirationType)
        /// (sharing) Removed the password from the shared link
        case sharedLinkSettingsRemovePassword(TeamLog.SharedLinkSettingsRemovePasswordType)
        /// (sharing) Added members as audience of shared link
        case sharedLinkShare(TeamLog.SharedLinkShareType)
        /// (sharing) Opened shared link
        case sharedLinkView(TeamLog.SharedLinkViewType)
        /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
        case sharedNoteOpened(TeamLog.SharedNoteOpenedType)
        /// (sharing) Disabled downloads for link (deprecated, no longer logged)
        case shmodelDisableDownloads(TeamLog.ShmodelDisableDownloadsType)
        /// (sharing) Enabled downloads for link (deprecated, no longer logged)
        case shmodelEnableDownloads(TeamLog.ShmodelEnableDownloadsType)
        /// (sharing) Shared link with group (deprecated, no longer logged)
        case shmodelGroupShare(TeamLog.ShmodelGroupShareType)
        /// (showcase) Granted access to showcase
        case showcaseAccessGranted(TeamLog.ShowcaseAccessGrantedType)
        /// (showcase) Added member to showcase
        case showcaseAddMember(TeamLog.ShowcaseAddMemberType)
        /// (showcase) Archived showcase
        case showcaseArchived(TeamLog.ShowcaseArchivedType)
        /// (showcase) Created showcase
        case showcaseCreated(TeamLog.ShowcaseCreatedType)
        /// (showcase) Deleted showcase comment
        case showcaseDeleteComment(TeamLog.ShowcaseDeleteCommentType)
        /// (showcase) Edited showcase
        case showcaseEdited(TeamLog.ShowcaseEditedType)
        /// (showcase) Edited showcase comment
        case showcaseEditComment(TeamLog.ShowcaseEditCommentType)
        /// (showcase) Added file to showcase
        case showcaseFileAdded(TeamLog.ShowcaseFileAddedType)
        /// (showcase) Downloaded file from showcase
        case showcaseFileDownload(TeamLog.ShowcaseFileDownloadType)
        /// (showcase) Removed file from showcase
        case showcaseFileRemoved(TeamLog.ShowcaseFileRemovedType)
        /// (showcase) Viewed file in showcase
        case showcaseFileView(TeamLog.ShowcaseFileViewType)
        /// (showcase) Permanently deleted showcase
        case showcasePermanentlyDeleted(TeamLog.ShowcasePermanentlyDeletedType)
        /// (showcase) Added showcase comment
        case showcasePostComment(TeamLog.ShowcasePostCommentType)
        /// (showcase) Removed member from showcase
        case showcaseRemoveMember(TeamLog.ShowcaseRemoveMemberType)
        /// (showcase) Renamed showcase
        case showcaseRenamed(TeamLog.ShowcaseRenamedType)
        /// (showcase) Requested access to showcase
        case showcaseRequestAccess(TeamLog.ShowcaseRequestAccessType)
        /// (showcase) Resolved showcase comment
        case showcaseResolveComment(TeamLog.ShowcaseResolveCommentType)
        /// (showcase) Unarchived showcase
        case showcaseRestored(TeamLog.ShowcaseRestoredType)
        /// (showcase) Deleted showcase
        case showcaseTrashed(TeamLog.ShowcaseTrashedType)
        /// (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')
        case showcaseTrashedDeprecated(TeamLog.ShowcaseTrashedDeprecatedType)
        /// (showcase) Unresolved showcase comment
        case showcaseUnresolveComment(TeamLog.ShowcaseUnresolveCommentType)
        /// (showcase) Restored showcase
        case showcaseUntrashed(TeamLog.ShowcaseUntrashedType)
        /// (showcase) Restored showcase (old version) (deprecated, replaced by 'Restored showcase')
        case showcaseUntrashedDeprecated(TeamLog.ShowcaseUntrashedDeprecatedType)
        /// (showcase) Viewed showcase
        case showcaseView(TeamLog.ShowcaseViewType)
        /// (sso) Added X.509 certificate for SSO
        case ssoAddCert(TeamLog.SsoAddCertType)
        /// (sso) Added sign-in URL for SSO
        case ssoAddLoginUrl(TeamLog.SsoAddLoginUrlType)
        /// (sso) Added sign-out URL for SSO
        case ssoAddLogoutUrl(TeamLog.SsoAddLogoutUrlType)
        /// (sso) Changed X.509 certificate for SSO
        case ssoChangeCert(TeamLog.SsoChangeCertType)
        /// (sso) Changed sign-in URL for SSO
        case ssoChangeLoginUrl(TeamLog.SsoChangeLoginUrlType)
        /// (sso) Changed sign-out URL for SSO
        case ssoChangeLogoutUrl(TeamLog.SsoChangeLogoutUrlType)
        /// (sso) Changed SAML identity mode for SSO
        case ssoChangeSamlIdentityMode(TeamLog.SsoChangeSamlIdentityModeType)
        /// (sso) Removed X.509 certificate for SSO
        case ssoRemoveCert(TeamLog.SsoRemoveCertType)
        /// (sso) Removed sign-in URL for SSO
        case ssoRemoveLoginUrl(TeamLog.SsoRemoveLoginUrlType)
        /// (sso) Removed sign-out URL for SSO
        case ssoRemoveLogoutUrl(TeamLog.SsoRemoveLogoutUrlType)
        /// (team_folders) Changed archival status of team folder
        case teamFolderChangeStatus(TeamLog.TeamFolderChangeStatusType)
        /// (team_folders) Created team folder in active status
        case teamFolderCreate(TeamLog.TeamFolderCreateType)
        /// (team_folders) Downgraded team folder to regular shared folder
        case teamFolderDowngrade(TeamLog.TeamFolderDowngradeType)
        /// (team_folders) Permanently deleted archived team folder
        case teamFolderPermanentlyDelete(TeamLog.TeamFolderPermanentlyDeleteType)
        /// (team_folders) Renamed active/archived team folder
        case teamFolderRename(TeamLog.TeamFolderRenameType)
        /// (team_folders) Changed sync default
        case teamSelectiveSyncSettingsChanged(TeamLog.TeamSelectiveSyncSettingsChangedType)
        /// (team_policies) Changed account capture setting on team domain
        case accountCaptureChangePolicy(TeamLog.AccountCaptureChangePolicyType)
        /// (team_policies) Changed admin reminder settings for requests to join the team
        case adminEmailRemindersChanged(TeamLog.AdminEmailRemindersChangedType)
        /// (team_policies) Disabled downloads (deprecated, no longer logged)
        case allowDownloadDisabled(TeamLog.AllowDownloadDisabledType)
        /// (team_policies) Enabled downloads (deprecated, no longer logged)
        case allowDownloadEnabled(TeamLog.AllowDownloadEnabledType)
        /// (team_policies) Changed app permissions
        case appPermissionsChanged(TeamLog.AppPermissionsChangedType)
        /// (team_policies) Changed camera uploads setting for team
        case cameraUploadsPolicyChanged(TeamLog.CameraUploadsPolicyChangedType)
        /// (team_policies) Changed Capture transcription policy for team
        case captureTranscriptPolicyChanged(TeamLog.CaptureTranscriptPolicyChangedType)
        /// (team_policies) Changed classification policy for team
        case classificationChangePolicy(TeamLog.ClassificationChangePolicyType)
        /// (team_policies) Changed computer backup policy for team
        case computerBackupPolicyChanged(TeamLog.ComputerBackupPolicyChangedType)
        /// (team_policies) Changed content management setting
        case contentAdministrationPolicyChanged(TeamLog.ContentAdministrationPolicyChangedType)
        /// (team_policies) Set restrictions on data center locations where team data resides
        case dataPlacementRestrictionChangePolicy(TeamLog.DataPlacementRestrictionChangePolicyType)
        /// (team_policies) Completed restrictions on data center locations where team data resides
        case dataPlacementRestrictionSatisfyPolicy(TeamLog.DataPlacementRestrictionSatisfyPolicyType)
        /// (team_policies) Added members to device approvals exception list
        case deviceApprovalsAddException(TeamLog.DeviceApprovalsAddExceptionType)
        /// (team_policies) Set/removed limit on number of computers member can link to team Dropbox account
        case deviceApprovalsChangeDesktopPolicy(TeamLog.DeviceApprovalsChangeDesktopPolicyType)
        /// (team_policies) Set/removed limit on number of mobile devices member can link to team Dropbox account
        case deviceApprovalsChangeMobilePolicy(TeamLog.DeviceApprovalsChangeMobilePolicyType)
        /// (team_policies) Changed device approvals setting when member is over limit
        case deviceApprovalsChangeOverageAction(TeamLog.DeviceApprovalsChangeOverageActionType)
        /// (team_policies) Changed device approvals setting when member unlinks approved device
        case deviceApprovalsChangeUnlinkAction(TeamLog.DeviceApprovalsChangeUnlinkActionType)
        /// (team_policies) Removed members from device approvals exception list
        case deviceApprovalsRemoveException(TeamLog.DeviceApprovalsRemoveExceptionType)
        /// (team_policies) Added members to directory restrictions list
        case directoryRestrictionsAddMembers(TeamLog.DirectoryRestrictionsAddMembersType)
        /// (team_policies) Removed members from directory restrictions list
        case directoryRestrictionsRemoveMembers(TeamLog.DirectoryRestrictionsRemoveMembersType)
        /// (team_policies) Changed Dropbox Passwords policy for team
        case dropboxPasswordsPolicyChanged(TeamLog.DropboxPasswordsPolicyChangedType)
        /// (team_policies) Changed email to Dropbox policy for team
        case emailIngestPolicyChanged(TeamLog.EmailIngestPolicyChangedType)
        /// (team_policies) Added members to EMM exception list
        case emmAddException(TeamLog.EmmAddExceptionType)
        /// (team_policies) Enabled/disabled enterprise mobility management for members
        case emmChangePolicy(TeamLog.EmmChangePolicyType)
        /// (team_policies) Removed members from EMM exception list
        case emmRemoveException(TeamLog.EmmRemoveExceptionType)
        /// (team_policies) Accepted/opted out of extended version history
        case extendedVersionHistoryChangePolicy(TeamLog.ExtendedVersionHistoryChangePolicyType)
        /// (team_policies) Changed external drive backup policy for team
        case externalDriveBackupPolicyChanged(TeamLog.ExternalDriveBackupPolicyChangedType)
        /// (team_policies) Enabled/disabled commenting on team files
        case fileCommentsChangePolicy(TeamLog.FileCommentsChangePolicyType)
        /// (team_policies) Changed file locking policy for team
        case fileLockingPolicyChanged(TeamLog.FileLockingPolicyChangedType)
        /// (team_policies) Changed File Provider Migration policy for team
        case fileProviderMigrationPolicyChanged(TeamLog.FileProviderMigrationPolicyChangedType)
        /// (team_policies) Enabled/disabled file requests
        case fileRequestsChangePolicy(TeamLog.FileRequestsChangePolicyType)
        /// (team_policies) Enabled file request emails for everyone (deprecated, no longer logged)
        case fileRequestsEmailsEnabled(TeamLog.FileRequestsEmailsEnabledType)
        /// (team_policies) Enabled file request emails for team (deprecated, no longer logged)
        case fileRequestsEmailsRestrictedToTeamOnly(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyType)
        /// (team_policies) Changed file transfers policy for team
        case fileTransfersPolicyChanged(TeamLog.FileTransfersPolicyChangedType)
        /// (team_policies) Changed folder link restrictions policy for team
        case folderLinkRestrictionPolicyChanged(TeamLog.FolderLinkRestrictionPolicyChangedType)
        /// (team_policies) Enabled/disabled Google single sign-on for team
        case googleSsoChangePolicy(TeamLog.GoogleSsoChangePolicyType)
        /// (team_policies) Changed who can create groups
        case groupUserManagementChangePolicy(TeamLog.GroupUserManagementChangePolicyType)
        /// (team_policies) Changed integration policy for team
        case integrationPolicyChanged(TeamLog.IntegrationPolicyChangedType)
        /// (team_policies) Changed invite accept email policy for team
        case inviteAcceptanceEmailPolicyChanged(TeamLog.InviteAcceptanceEmailPolicyChangedType)
        /// (team_policies) Changed whether users can find team when not invited
        case memberRequestsChangePolicy(TeamLog.MemberRequestsChangePolicyType)
        /// (team_policies) Changed member send invite policy for team
        case memberSendInvitePolicyChanged(TeamLog.MemberSendInvitePolicyChangedType)
        /// (team_policies) Added members to member space limit exception list
        case memberSpaceLimitsAddException(TeamLog.MemberSpaceLimitsAddExceptionType)
        /// (team_policies) Changed member space limit type for team
        case memberSpaceLimitsChangeCapsTypePolicy(TeamLog.MemberSpaceLimitsChangeCapsTypePolicyType)
        /// (team_policies) Changed team default member space limit
        case memberSpaceLimitsChangePolicy(TeamLog.MemberSpaceLimitsChangePolicyType)
        /// (team_policies) Removed members from member space limit exception list
        case memberSpaceLimitsRemoveException(TeamLog.MemberSpaceLimitsRemoveExceptionType)
        /// (team_policies) Enabled/disabled option for team members to suggest people to add to team
        case memberSuggestionsChangePolicy(TeamLog.MemberSuggestionsChangePolicyType)
        /// (team_policies) Enabled/disabled Microsoft Office add-in
        case microsoftOfficeAddinChangePolicy(TeamLog.MicrosoftOfficeAddinChangePolicyType)
        /// (team_policies) Enabled/disabled network control
        case networkControlChangePolicy(TeamLog.NetworkControlChangePolicyType)
        /// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific
        /// members
        case paperChangeDeploymentPolicy(TeamLog.PaperChangeDeploymentPolicyType)
        /// (team_policies) Changed whether non-members can view Paper docs with link (deprecated, no longer logged)
        case paperChangeMemberLinkPolicy(TeamLog.PaperChangeMemberLinkPolicyType)
        /// (team_policies) Changed whether members can share Paper docs outside team, and if docs are accessible only
        /// by team members or anyone by default
        case paperChangeMemberPolicy(TeamLog.PaperChangeMemberPolicyType)
        /// (team_policies) Enabled/disabled Dropbox Paper for team
        case paperChangePolicy(TeamLog.PaperChangePolicyType)
        /// (team_policies) Changed Paper Default Folder Policy setting for team
        case paperDefaultFolderPolicyChanged(TeamLog.PaperDefaultFolderPolicyChangedType)
        /// (team_policies) Enabled/disabled Paper Desktop for team
        case paperDesktopPolicyChanged(TeamLog.PaperDesktopPolicyChangedType)
        /// (team_policies) Added users to Paper-enabled users list
        case paperEnabledUsersGroupAddition(TeamLog.PaperEnabledUsersGroupAdditionType)
        /// (team_policies) Removed users from Paper-enabled users list
        case paperEnabledUsersGroupRemoval(TeamLog.PaperEnabledUsersGroupRemovalType)
        /// (team_policies) Changed team password strength requirements
        case passwordStrengthRequirementsChangePolicy(TeamLog.PasswordStrengthRequirementsChangePolicyType)
        /// (team_policies) Enabled/disabled ability of team members to permanently delete content
        case permanentDeleteChangePolicy(TeamLog.PermanentDeleteChangePolicyType)
        /// (team_policies) Enabled/disabled reseller support
        case resellerSupportChangePolicy(TeamLog.ResellerSupportChangePolicyType)
        /// (team_policies) Changed Rewind policy for team
        case rewindPolicyChanged(TeamLog.RewindPolicyChangedType)
        /// (team_policies) Changed send for signature policy for team
        case sendForSignaturePolicyChanged(TeamLog.SendForSignaturePolicyChangedType)
        /// (team_policies) Changed whether team members can join shared folders owned outside team
        case sharingChangeFolderJoinPolicy(TeamLog.SharingChangeFolderJoinPolicyType)
        /// (team_policies) Changed the allow remove or change expiration policy for the links shared outside of the
        /// team
        case sharingChangeLinkAllowChangeExpirationPolicy(TeamLog.SharingChangeLinkAllowChangeExpirationPolicyType)
        /// (team_policies) Changed the default expiration for the links shared outside of the team
        case sharingChangeLinkDefaultExpirationPolicy(TeamLog.SharingChangeLinkDefaultExpirationPolicyType)
        /// (team_policies) Changed the password requirement for the links shared outside of the team
        case sharingChangeLinkEnforcePasswordPolicy(TeamLog.SharingChangeLinkEnforcePasswordPolicyType)
        /// (team_policies) Changed whether members can share links outside team, and if links are accessible only by
        /// team members or anyone by default
        case sharingChangeLinkPolicy(TeamLog.SharingChangeLinkPolicyType)
        /// (team_policies) Changed whether members can share files/folders outside team
        case sharingChangeMemberPolicy(TeamLog.SharingChangeMemberPolicyType)
        /// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for team
        case showcaseChangeDownloadPolicy(TeamLog.ShowcaseChangeDownloadPolicyType)
        /// (team_policies) Enabled/disabled Dropbox Showcase for team
        case showcaseChangeEnabledPolicy(TeamLog.ShowcaseChangeEnabledPolicyType)
        /// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for team
        case showcaseChangeExternalSharingPolicy(TeamLog.ShowcaseChangeExternalSharingPolicyType)
        /// (team_policies) Changed automatic Smart Sync setting for team
        case smarterSmartSyncPolicyChanged(TeamLog.SmarterSmartSyncPolicyChangedType)
        /// (team_policies) Changed default Smart Sync setting for team members
        case smartSyncChangePolicy(TeamLog.SmartSyncChangePolicyType)
        /// (team_policies) Opted team into Smart Sync
        case smartSyncNotOptOut(TeamLog.SmartSyncNotOptOutType)
        /// (team_policies) Opted team out of Smart Sync
        case smartSyncOptOut(TeamLog.SmartSyncOptOutType)
        /// (team_policies) Changed single sign-on setting for team
        case ssoChangePolicy(TeamLog.SsoChangePolicyType)
        /// (team_policies) Changed team branding policy for team
        case teamBrandingPolicyChanged(TeamLog.TeamBrandingPolicyChangedType)
        /// (team_policies) Changed App Integrations setting for team
        case teamExtensionsPolicyChanged(TeamLog.TeamExtensionsPolicyChangedType)
        /// (team_policies) Enabled/disabled Team Selective Sync for team
        case teamSelectiveSyncPolicyChanged(TeamLog.TeamSelectiveSyncPolicyChangedType)
        /// (team_policies) Edited the approved list for sharing externally
        case teamSharingWhitelistSubjectsChanged(TeamLog.TeamSharingWhitelistSubjectsChangedType)
        /// (team_policies) Added members to two factor authentication exception list
        case tfaAddException(TeamLog.TfaAddExceptionType)
        /// (team_policies) Changed two-step verification setting for team
        case tfaChangePolicy(TeamLog.TfaChangePolicyType)
        /// (team_policies) Removed members from two factor authentication exception list
        case tfaRemoveException(TeamLog.TfaRemoveExceptionType)
        /// (team_policies) Enabled/disabled option for members to link personal Dropbox account and team account to
        /// same computer
        case twoAccountChangePolicy(TeamLog.TwoAccountChangePolicyType)
        /// (team_policies) Changed team policy for viewer info
        case viewerInfoPolicyChanged(TeamLog.ViewerInfoPolicyChangedType)
        /// (team_policies) Changed watermarking policy for team
        case watermarkingPolicyChanged(TeamLog.WatermarkingPolicyChangedType)
        /// (team_policies) Changed limit on active sessions per member
        case webSessionsChangeActiveSessionLimit(TeamLog.WebSessionsChangeActiveSessionLimitType)
        /// (team_policies) Changed how long members can stay signed in to Dropbox.com
        case webSessionsChangeFixedLengthPolicy(TeamLog.WebSessionsChangeFixedLengthPolicyType)
        /// (team_policies) Changed how long team members can be idle while signed in to Dropbox.com
        case webSessionsChangeIdleLengthPolicy(TeamLog.WebSessionsChangeIdleLengthPolicyType)
        /// (team_profile) Requested data residency migration for team data
        case dataResidencyMigrationRequestSuccessful(TeamLog.DataResidencyMigrationRequestSuccessfulType)
        /// (team_profile) Request for data residency migration for team data has failed
        case dataResidencyMigrationRequestUnsuccessful(TeamLog.DataResidencyMigrationRequestUnsuccessfulType)
        /// (team_profile) Merged another team into this team
        case teamMergeFrom(TeamLog.TeamMergeFromType)
        /// (team_profile) Merged this team into another team
        case teamMergeTo(TeamLog.TeamMergeToType)
        /// (team_profile) Added team background to display on shared link headers
        case teamProfileAddBackground(TeamLog.TeamProfileAddBackgroundType)
        /// (team_profile) Added team logo to display on shared link headers
        case teamProfileAddLogo(TeamLog.TeamProfileAddLogoType)
        /// (team_profile) Changed team background displayed on shared link headers
        case teamProfileChangeBackground(TeamLog.TeamProfileChangeBackgroundType)
        /// (team_profile) Changed default language for team
        case teamProfileChangeDefaultLanguage(TeamLog.TeamProfileChangeDefaultLanguageType)
        /// (team_profile) Changed team logo displayed on shared link headers
        case teamProfileChangeLogo(TeamLog.TeamProfileChangeLogoType)
        /// (team_profile) Changed team name
        case teamProfileChangeName(TeamLog.TeamProfileChangeNameType)
        /// (team_profile) Removed team background displayed on shared link headers
        case teamProfileRemoveBackground(TeamLog.TeamProfileRemoveBackgroundType)
        /// (team_profile) Removed team logo displayed on shared link headers
        case teamProfileRemoveLogo(TeamLog.TeamProfileRemoveLogoType)
        /// (tfa) Added backup phone for two-step verification
        case tfaAddBackupPhone(TeamLog.TfaAddBackupPhoneType)
        /// (tfa) Added security key for two-step verification
        case tfaAddSecurityKey(TeamLog.TfaAddSecurityKeyType)
        /// (tfa) Changed backup phone for two-step verification
        case tfaChangeBackupPhone(TeamLog.TfaChangeBackupPhoneType)
        /// (tfa) Enabled/disabled/changed two-step verification setting
        case tfaChangeStatus(TeamLog.TfaChangeStatusType)
        /// (tfa) Removed backup phone for two-step verification
        case tfaRemoveBackupPhone(TeamLog.TfaRemoveBackupPhoneType)
        /// (tfa) Removed security key for two-step verification
        case tfaRemoveSecurityKey(TeamLog.TfaRemoveSecurityKeyType)
        /// (tfa) Reset two-step verification for team member
        case tfaReset(TeamLog.TfaResetType)
        /// (trusted_teams) Changed enterprise admin role
        case changedEnterpriseAdminRole(TeamLog.ChangedEnterpriseAdminRoleType)
        /// (trusted_teams) Changed enterprise-connected team status
        case changedEnterpriseConnectedTeamStatus(TeamLog.ChangedEnterpriseConnectedTeamStatusType)
        /// (trusted_teams) Ended enterprise admin session
        case endedEnterpriseAdminSession(TeamLog.EndedEnterpriseAdminSessionType)
        /// (trusted_teams) Ended enterprise admin session (deprecated, replaced by 'Ended enterprise admin session')
        case endedEnterpriseAdminSessionDeprecated(TeamLog.EndedEnterpriseAdminSessionDeprecatedType)
        /// (trusted_teams) Changed who can update a setting
        case enterpriseSettingsLocking(TeamLog.EnterpriseSettingsLockingType)
        /// (trusted_teams) Changed guest team admin status
        case guestAdminChangeStatus(TeamLog.GuestAdminChangeStatusType)
        /// (trusted_teams) Started enterprise admin session
        case startedEnterpriseAdminSession(TeamLog.StartedEnterpriseAdminSessionType)
        /// (trusted_teams) Accepted a team merge request
        case teamMergeRequestAccepted(TeamLog.TeamMergeRequestAcceptedType)
        /// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
        case teamMergeRequestAcceptedShownToPrimaryTeam(TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamType)
        /// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
        case teamMergeRequestAcceptedShownToSecondaryTeam(TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamType)
        /// (trusted_teams) Automatically canceled team merge request
        case teamMergeRequestAutoCanceled(TeamLog.TeamMergeRequestAutoCanceledType)
        /// (trusted_teams) Canceled a team merge request
        case teamMergeRequestCanceled(TeamLog.TeamMergeRequestCanceledType)
        /// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
        case teamMergeRequestCanceledShownToPrimaryTeam(TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamType)
        /// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
        case teamMergeRequestCanceledShownToSecondaryTeam(TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamType)
        /// (trusted_teams) Team merge request expired
        case teamMergeRequestExpired(TeamLog.TeamMergeRequestExpiredType)
        /// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
        case teamMergeRequestExpiredShownToPrimaryTeam(TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamType)
        /// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
        case teamMergeRequestExpiredShownToSecondaryTeam(TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamType)
        /// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
        case teamMergeRequestRejectedShownToPrimaryTeam(TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamType)
        /// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
        case teamMergeRequestRejectedShownToSecondaryTeam(TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamType)
        /// (trusted_teams) Sent a team merge request reminder
        case teamMergeRequestReminder(TeamLog.TeamMergeRequestReminderType)
        /// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
        /// reminder')
        case teamMergeRequestReminderShownToPrimaryTeam(TeamLog.TeamMergeRequestReminderShownToPrimaryTeamType)
        /// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
        /// reminder')
        case teamMergeRequestReminderShownToSecondaryTeam(TeamLog.TeamMergeRequestReminderShownToSecondaryTeamType)
        /// (trusted_teams) Canceled the team merge
        case teamMergeRequestRevoked(TeamLog.TeamMergeRequestRevokedType)
        /// (trusted_teams) Requested to merge their Dropbox team into yours
        case teamMergeRequestSentShownToPrimaryTeam(TeamLog.TeamMergeRequestSentShownToPrimaryTeamType)
        /// (trusted_teams) Requested to merge your team into another Dropbox team
        case teamMergeRequestSentShownToSecondaryTeam(TeamLog.TeamMergeRequestSentShownToSecondaryTeamType)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventTypeSerializer().serialize(self)))"
        }
    }
    open class EventTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventType) -> JSON {
            switch value {
                case .adminAlertingAlertStateChanged(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingAlertStateChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_alert_state_changed")
                    return .dictionary(d)
                case .adminAlertingChangedAlertConfig(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingChangedAlertConfigTypeSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_changed_alert_config")
                    return .dictionary(d)
                case .adminAlertingTriggeredAlert(let arg):
                    var d = Serialization.getFields(TeamLog.AdminAlertingTriggeredAlertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("admin_alerting_triggered_alert")
                    return .dictionary(d)
                case .appBlockedByPermissions(let arg):
                    var d = Serialization.getFields(TeamLog.AppBlockedByPermissionsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_blocked_by_permissions")
                    return .dictionary(d)
                case .appLinkTeam(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_team")
                    return .dictionary(d)
                case .appLinkUser(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkUserTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_user")
                    return .dictionary(d)
                case .appUnlinkTeam(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_team")
                    return .dictionary(d)
                case .appUnlinkUser(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkUserTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_user")
                    return .dictionary(d)
                case .integrationConnected(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationConnectedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("integration_connected")
                    return .dictionary(d)
                case .integrationDisconnected(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationDisconnectedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("integration_disconnected")
                    return .dictionary(d)
                case .fileAddComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_add_comment")
                    return .dictionary(d)
                case .fileChangeCommentSubscription(let arg):
                    var d = Serialization.getFields(TeamLog.FileChangeCommentSubscriptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_change_comment_subscription")
                    return .dictionary(d)
                case .fileDeleteComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete_comment")
                    return .dictionary(d)
                case .fileEditComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileEditCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_edit_comment")
                    return .dictionary(d)
                case .fileLikeComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileLikeCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_like_comment")
                    return .dictionary(d)
                case .fileResolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileResolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_resolve_comment")
                    return .dictionary(d)
                case .fileUnlikeComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnlikeCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_unlike_comment")
                    return .dictionary(d)
                case .fileUnresolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnresolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_unresolve_comment")
                    return .dictionary(d)
                case .governancePolicyAddFolders(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyAddFoldersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_add_folders")
                    return .dictionary(d)
                case .governancePolicyAddFolderFailed(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyAddFolderFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_add_folder_failed")
                    return .dictionary(d)
                case .governancePolicyContentDisposed(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyContentDisposedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_content_disposed")
                    return .dictionary(d)
                case .governancePolicyCreate(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_create")
                    return .dictionary(d)
                case .governancePolicyDelete(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_delete")
                    return .dictionary(d)
                case .governancePolicyEditDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyEditDetailsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_edit_details")
                    return .dictionary(d)
                case .governancePolicyEditDuration(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyEditDurationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_edit_duration")
                    return .dictionary(d)
                case .governancePolicyExportCreated(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyExportCreatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_export_created")
                    return .dictionary(d)
                case .governancePolicyExportRemoved(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyExportRemovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_export_removed")
                    return .dictionary(d)
                case .governancePolicyRemoveFolders(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyRemoveFoldersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_remove_folders")
                    return .dictionary(d)
                case .governancePolicyReportCreated(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyReportCreatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_report_created")
                    return .dictionary(d)
                case .governancePolicyZipPartDownloaded(let arg):
                    var d = Serialization.getFields(TeamLog.GovernancePolicyZipPartDownloadedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("governance_policy_zip_part_downloaded")
                    return .dictionary(d)
                case .legalHoldsActivateAHold(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsActivateAHoldTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_activate_a_hold")
                    return .dictionary(d)
                case .legalHoldsAddMembers(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsAddMembersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_add_members")
                    return .dictionary(d)
                case .legalHoldsChangeHoldDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsChangeHoldDetailsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_change_hold_details")
                    return .dictionary(d)
                case .legalHoldsChangeHoldName(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsChangeHoldNameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_change_hold_name")
                    return .dictionary(d)
                case .legalHoldsExportAHold(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportAHoldTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_a_hold")
                    return .dictionary(d)
                case .legalHoldsExportCancelled(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportCancelledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_cancelled")
                    return .dictionary(d)
                case .legalHoldsExportDownloaded(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportDownloadedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_downloaded")
                    return .dictionary(d)
                case .legalHoldsExportRemoved(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsExportRemovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_export_removed")
                    return .dictionary(d)
                case .legalHoldsReleaseAHold(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsReleaseAHoldTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_release_a_hold")
                    return .dictionary(d)
                case .legalHoldsRemoveMembers(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsRemoveMembersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_remove_members")
                    return .dictionary(d)
                case .legalHoldsReportAHold(let arg):
                    var d = Serialization.getFields(TeamLog.LegalHoldsReportAHoldTypeSerializer().serialize(arg))
                    d[".tag"] = .str("legal_holds_report_a_hold")
                    return .dictionary(d)
                case .deviceChangeIpDesktop(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpDesktopTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_desktop")
                    return .dictionary(d)
                case .deviceChangeIpMobile(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpMobileTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_mobile")
                    return .dictionary(d)
                case .deviceChangeIpWeb(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpWebTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_web")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkFail(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_fail")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkSuccess(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkSuccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_success")
                    return .dictionary(d)
                case .deviceLinkFail(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_fail")
                    return .dictionary(d)
                case .deviceLinkSuccess(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkSuccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_success")
                    return .dictionary(d)
                case .deviceManagementDisabled(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementDisabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_disabled")
                    return .dictionary(d)
                case .deviceManagementEnabled(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementEnabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_enabled")
                    return .dictionary(d)
                case .deviceSyncBackupStatusChanged(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceSyncBackupStatusChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_sync_backup_status_changed")
                    return .dictionary(d)
                case .deviceUnlink(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceUnlinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_unlink")
                    return .dictionary(d)
                case .dropboxPasswordsExported(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsExportedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_exported")
                    return .dictionary(d)
                case .dropboxPasswordsNewDeviceEnrolled(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsNewDeviceEnrolledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_new_device_enrolled")
                    return .dictionary(d)
                case .emmRefreshAuthToken(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRefreshAuthTokenTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_refresh_auth_token")
                    return .dictionary(d)
                case .externalDriveBackupEligibilityStatusChecked(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupEligibilityStatusCheckedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_eligibility_status_checked")
                    return .dictionary(d)
                case .externalDriveBackupStatusChanged(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupStatusChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_status_changed")
                    return .dictionary(d)
                case .accountCaptureChangeAvailability(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangeAvailabilityTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_availability")
                    return .dictionary(d)
                case .accountCaptureMigrateAccount(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureMigrateAccountTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_migrate_account")
                    return .dictionary(d)
                case .accountCaptureNotificationEmailsSent(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureNotificationEmailsSentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_notification_emails_sent")
                    return .dictionary(d)
                case .accountCaptureRelinquishAccount(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureRelinquishAccountTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_relinquish_account")
                    return .dictionary(d)
                case .disabledDomainInvites(let arg):
                    var d = Serialization.getFields(TeamLog.DisabledDomainInvitesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("disabled_domain_invites")
                    return .dictionary(d)
                case .domainInvitesApproveRequestToJoinTeam(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesApproveRequestToJoinTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_approve_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesDeclineRequestToJoinTeam(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesDeclineRequestToJoinTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_decline_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesEmailExistingUsers(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesEmailExistingUsersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_email_existing_users")
                    return .dictionary(d)
                case .domainInvitesRequestToJoinTeam(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesRequestToJoinTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToNo(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToNoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_no")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToYes(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToYesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_yes")
                    return .dictionary(d)
                case .domainVerificationAddDomainFail(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_fail")
                    return .dictionary(d)
                case .domainVerificationAddDomainSuccess(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainSuccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_success")
                    return .dictionary(d)
                case .domainVerificationRemoveDomain(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationRemoveDomainTypeSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_remove_domain")
                    return .dictionary(d)
                case .enabledDomainInvites(let arg):
                    var d = Serialization.getFields(TeamLog.EnabledDomainInvitesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("enabled_domain_invites")
                    return .dictionary(d)
                case .applyNamingConvention(let arg):
                    var d = Serialization.getFields(TeamLog.ApplyNamingConventionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("apply_naming_convention")
                    return .dictionary(d)
                case .createFolder(let arg):
                    var d = Serialization.getFields(TeamLog.CreateFolderTypeSerializer().serialize(arg))
                    d[".tag"] = .str("create_folder")
                    return .dictionary(d)
                case .fileAdd(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_add")
                    return .dictionary(d)
                case .fileCopy(let arg):
                    var d = Serialization.getFields(TeamLog.FileCopyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_copy")
                    return .dictionary(d)
                case .fileDelete(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete")
                    return .dictionary(d)
                case .fileDownload(let arg):
                    var d = Serialization.getFields(TeamLog.FileDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_download")
                    return .dictionary(d)
                case .fileEdit(let arg):
                    var d = Serialization.getFields(TeamLog.FileEditTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_edit")
                    return .dictionary(d)
                case .fileGetCopyReference(let arg):
                    var d = Serialization.getFields(TeamLog.FileGetCopyReferenceTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_get_copy_reference")
                    return .dictionary(d)
                case .fileLockingLockStatusChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FileLockingLockStatusChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_locking_lock_status_changed")
                    return .dictionary(d)
                case .fileMove(let arg):
                    var d = Serialization.getFields(TeamLog.FileMoveTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_move")
                    return .dictionary(d)
                case .filePermanentlyDelete(let arg):
                    var d = Serialization.getFields(TeamLog.FilePermanentlyDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_permanently_delete")
                    return .dictionary(d)
                case .filePreview(let arg):
                    var d = Serialization.getFields(TeamLog.FilePreviewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_preview")
                    return .dictionary(d)
                case .fileRename(let arg):
                    var d = Serialization.getFields(TeamLog.FileRenameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_rename")
                    return .dictionary(d)
                case .fileRestore(let arg):
                    var d = Serialization.getFields(TeamLog.FileRestoreTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_restore")
                    return .dictionary(d)
                case .fileRevert(let arg):
                    var d = Serialization.getFields(TeamLog.FileRevertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_revert")
                    return .dictionary(d)
                case .fileRollbackChanges(let arg):
                    var d = Serialization.getFields(TeamLog.FileRollbackChangesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_rollback_changes")
                    return .dictionary(d)
                case .fileSaveCopyReference(let arg):
                    var d = Serialization.getFields(TeamLog.FileSaveCopyReferenceTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_save_copy_reference")
                    return .dictionary(d)
                case .folderOverviewDescriptionChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewDescriptionChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_description_changed")
                    return .dictionary(d)
                case .folderOverviewItemPinned(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewItemPinnedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_item_pinned")
                    return .dictionary(d)
                case .folderOverviewItemUnpinned(let arg):
                    var d = Serialization.getFields(TeamLog.FolderOverviewItemUnpinnedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("folder_overview_item_unpinned")
                    return .dictionary(d)
                case .objectLabelAdded(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelAddedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_added")
                    return .dictionary(d)
                case .objectLabelRemoved(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelRemovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_removed")
                    return .dictionary(d)
                case .objectLabelUpdatedValue(let arg):
                    var d = Serialization.getFields(TeamLog.ObjectLabelUpdatedValueTypeSerializer().serialize(arg))
                    d[".tag"] = .str("object_label_updated_value")
                    return .dictionary(d)
                case .organizeFolderWithTidy(let arg):
                    var d = Serialization.getFields(TeamLog.OrganizeFolderWithTidyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("organize_folder_with_tidy")
                    return .dictionary(d)
                case .rewindFolder(let arg):
                    var d = Serialization.getFields(TeamLog.RewindFolderTypeSerializer().serialize(arg))
                    d[".tag"] = .str("rewind_folder")
                    return .dictionary(d)
                case .undoNamingConvention(let arg):
                    var d = Serialization.getFields(TeamLog.UndoNamingConventionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("undo_naming_convention")
                    return .dictionary(d)
                case .undoOrganizeFolderWithTidy(let arg):
                    var d = Serialization.getFields(TeamLog.UndoOrganizeFolderWithTidyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("undo_organize_folder_with_tidy")
                    return .dictionary(d)
                case .userTagsAdded(let arg):
                    var d = Serialization.getFields(TeamLog.UserTagsAddedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("user_tags_added")
                    return .dictionary(d)
                case .userTagsRemoved(let arg):
                    var d = Serialization.getFields(TeamLog.UserTagsRemovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("user_tags_removed")
                    return .dictionary(d)
                case .emailIngestReceiveFile(let arg):
                    var d = Serialization.getFields(TeamLog.EmailIngestReceiveFileTypeSerializer().serialize(arg))
                    d[".tag"] = .str("email_ingest_receive_file")
                    return .dictionary(d)
                case .fileRequestChange(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestChangeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_change")
                    return .dictionary(d)
                case .fileRequestClose(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCloseTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_close")
                    return .dictionary(d)
                case .fileRequestCreate(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_create")
                    return .dictionary(d)
                case .fileRequestDelete(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_delete")
                    return .dictionary(d)
                case .fileRequestReceiveFile(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestReceiveFileTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_receive_file")
                    return .dictionary(d)
                case .groupAddExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_external_id")
                    return .dictionary(d)
                case .groupAddMember(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_member")
                    return .dictionary(d)
                case .groupChangeExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_external_id")
                    return .dictionary(d)
                case .groupChangeManagementType(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeManagementTypeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_management_type")
                    return .dictionary(d)
                case .groupChangeMemberRole(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeMemberRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_member_role")
                    return .dictionary(d)
                case .groupCreate(let arg):
                    var d = Serialization.getFields(TeamLog.GroupCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_create")
                    return .dictionary(d)
                case .groupDelete(let arg):
                    var d = Serialization.getFields(TeamLog.GroupDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_delete")
                    return .dictionary(d)
                case .groupDescriptionUpdated(let arg):
                    var d = Serialization.getFields(TeamLog.GroupDescriptionUpdatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_description_updated")
                    return .dictionary(d)
                case .groupJoinPolicyUpdated(let arg):
                    var d = Serialization.getFields(TeamLog.GroupJoinPolicyUpdatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_join_policy_updated")
                    return .dictionary(d)
                case .groupMoved(let arg):
                    var d = Serialization.getFields(TeamLog.GroupMovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_moved")
                    return .dictionary(d)
                case .groupRemoveExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_external_id")
                    return .dictionary(d)
                case .groupRemoveMember(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_member")
                    return .dictionary(d)
                case .groupRename(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRenameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_rename")
                    return .dictionary(d)
                case .accountLockOrUnlocked(let arg):
                    var d = Serialization.getFields(TeamLog.AccountLockOrUnlockedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_lock_or_unlocked")
                    return .dictionary(d)
                case .emmError(let arg):
                    var d = Serialization.getFields(TeamLog.EmmErrorTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_error")
                    return .dictionary(d)
                case .guestAdminSignedInViaTrustedTeams(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminSignedInViaTrustedTeamsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_signed_in_via_trusted_teams")
                    return .dictionary(d)
                case .guestAdminSignedOutViaTrustedTeams(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminSignedOutViaTrustedTeamsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_signed_out_via_trusted_teams")
                    return .dictionary(d)
                case .loginFail(let arg):
                    var d = Serialization.getFields(TeamLog.LoginFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("login_fail")
                    return .dictionary(d)
                case .loginSuccess(let arg):
                    var d = Serialization.getFields(TeamLog.LoginSuccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("login_success")
                    return .dictionary(d)
                case .logout(let arg):
                    var d = Serialization.getFields(TeamLog.LogoutTypeSerializer().serialize(arg))
                    d[".tag"] = .str("logout")
                    return .dictionary(d)
                case .resellerSupportSessionEnd(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionEndTypeSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_end")
                    return .dictionary(d)
                case .resellerSupportSessionStart(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionStartTypeSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_start")
                    return .dictionary(d)
                case .signInAsSessionEnd(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionEndTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_end")
                    return .dictionary(d)
                case .signInAsSessionStart(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionStartTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_start")
                    return .dictionary(d)
                case .ssoError(let arg):
                    var d = Serialization.getFields(TeamLog.SsoErrorTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_error")
                    return .dictionary(d)
                case .createTeamInviteLink(let arg):
                    var d = Serialization.getFields(TeamLog.CreateTeamInviteLinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("create_team_invite_link")
                    return .dictionary(d)
                case .deleteTeamInviteLink(let arg):
                    var d = Serialization.getFields(TeamLog.DeleteTeamInviteLinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("delete_team_invite_link")
                    return .dictionary(d)
                case .memberAddExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.MemberAddExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_add_external_id")
                    return .dictionary(d)
                case .memberAddName(let arg):
                    var d = Serialization.getFields(TeamLog.MemberAddNameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_add_name")
                    return .dictionary(d)
                case .memberChangeAdminRole(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeAdminRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_admin_role")
                    return .dictionary(d)
                case .memberChangeEmail(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeEmailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_email")
                    return .dictionary(d)
                case .memberChangeExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_external_id")
                    return .dictionary(d)
                case .memberChangeMembershipType(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeMembershipTypeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_membership_type")
                    return .dictionary(d)
                case .memberChangeName(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeNameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_name")
                    return .dictionary(d)
                case .memberChangeResellerRole(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeResellerRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_reseller_role")
                    return .dictionary(d)
                case .memberChangeStatus(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_status")
                    return .dictionary(d)
                case .memberDeleteManualContacts(let arg):
                    var d = Serialization.getFields(TeamLog.MemberDeleteManualContactsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_delete_manual_contacts")
                    return .dictionary(d)
                case .memberDeleteProfilePhoto(let arg):
                    var d = Serialization.getFields(TeamLog.MemberDeleteProfilePhotoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_delete_profile_photo")
                    return .dictionary(d)
                case .memberPermanentlyDeleteAccountContents(let arg):
                    var d = Serialization.getFields(TeamLog.MemberPermanentlyDeleteAccountContentsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_permanently_delete_account_contents")
                    return .dictionary(d)
                case .memberRemoveExternalId(let arg):
                    var d = Serialization.getFields(TeamLog.MemberRemoveExternalIdTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_remove_external_id")
                    return .dictionary(d)
                case .memberSetProfilePhoto(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSetProfilePhotoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_set_profile_photo")
                    return .dictionary(d)
                case .memberSpaceLimitsAddCustomQuota(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsAddCustomQuotaTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_add_custom_quota")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCustomQuota(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeCustomQuotaTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_custom_quota")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeStatus(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_status")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveCustomQuota(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsRemoveCustomQuotaTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_remove_custom_quota")
                    return .dictionary(d)
                case .memberSuggest(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggest")
                    return .dictionary(d)
                case .memberTransferAccountContents(let arg):
                    var d = Serialization.getFields(TeamLog.MemberTransferAccountContentsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_transfer_account_contents")
                    return .dictionary(d)
                case .pendingSecondaryEmailAdded(let arg):
                    var d = Serialization.getFields(TeamLog.PendingSecondaryEmailAddedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("pending_secondary_email_added")
                    return .dictionary(d)
                case .secondaryEmailDeleted(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryEmailDeletedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_email_deleted")
                    return .dictionary(d)
                case .secondaryEmailVerified(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryEmailVerifiedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_email_verified")
                    return .dictionary(d)
                case .secondaryMailsPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryMailsPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_mails_policy_changed")
                    return .dictionary(d)
                case .binderAddPage(let arg):
                    var d = Serialization.getFields(TeamLog.BinderAddPageTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_add_page")
                    return .dictionary(d)
                case .binderAddSection(let arg):
                    var d = Serialization.getFields(TeamLog.BinderAddSectionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_add_section")
                    return .dictionary(d)
                case .binderRemovePage(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRemovePageTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_remove_page")
                    return .dictionary(d)
                case .binderRemoveSection(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRemoveSectionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_remove_section")
                    return .dictionary(d)
                case .binderRenamePage(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRenamePageTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_rename_page")
                    return .dictionary(d)
                case .binderRenameSection(let arg):
                    var d = Serialization.getFields(TeamLog.BinderRenameSectionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_rename_section")
                    return .dictionary(d)
                case .binderReorderPage(let arg):
                    var d = Serialization.getFields(TeamLog.BinderReorderPageTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_reorder_page")
                    return .dictionary(d)
                case .binderReorderSection(let arg):
                    var d = Serialization.getFields(TeamLog.BinderReorderSectionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("binder_reorder_section")
                    return .dictionary(d)
                case .paperContentAddMember(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_member")
                    return .dictionary(d)
                case .paperContentAddToFolder(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddToFolderTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_to_folder")
                    return .dictionary(d)
                case .paperContentArchive(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentArchiveTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_archive")
                    return .dictionary(d)
                case .paperContentCreate(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_create")
                    return .dictionary(d)
                case .paperContentPermanentlyDelete(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentPermanentlyDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_permanently_delete")
                    return .dictionary(d)
                case .paperContentRemoveFromFolder(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveFromFolderTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_from_folder")
                    return .dictionary(d)
                case .paperContentRemoveMember(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_member")
                    return .dictionary(d)
                case .paperContentRename(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRenameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_rename")
                    return .dictionary(d)
                case .paperContentRestore(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRestoreTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_restore")
                    return .dictionary(d)
                case .paperDocAddComment(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocAddCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_add_comment")
                    return .dictionary(d)
                case .paperDocChangeMemberRole(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeMemberRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_member_role")
                    return .dictionary(d)
                case .paperDocChangeSharingPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSharingPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_sharing_policy")
                    return .dictionary(d)
                case .paperDocChangeSubscription(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSubscriptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_subscription")
                    return .dictionary(d)
                case .paperDocDeleted(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeletedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_deleted")
                    return .dictionary(d)
                case .paperDocDeleteComment(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeleteCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_delete_comment")
                    return .dictionary(d)
                case .paperDocDownload(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_download")
                    return .dictionary(d)
                case .paperDocEdit(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit")
                    return .dictionary(d)
                case .paperDocEditComment(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit_comment")
                    return .dictionary(d)
                case .paperDocFollowed(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocFollowedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_followed")
                    return .dictionary(d)
                case .paperDocMention(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocMentionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_mention")
                    return .dictionary(d)
                case .paperDocOwnershipChanged(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocOwnershipChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_ownership_changed")
                    return .dictionary(d)
                case .paperDocRequestAccess(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRequestAccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_request_access")
                    return .dictionary(d)
                case .paperDocResolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocResolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_resolve_comment")
                    return .dictionary(d)
                case .paperDocRevert(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRevertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_revert")
                    return .dictionary(d)
                case .paperDocSlackShare(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocSlackShareTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_slack_share")
                    return .dictionary(d)
                case .paperDocTeamInvite(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTeamInviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_team_invite")
                    return .dictionary(d)
                case .paperDocTrashed(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTrashedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_trashed")
                    return .dictionary(d)
                case .paperDocUnresolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUnresolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_unresolve_comment")
                    return .dictionary(d)
                case .paperDocUntrashed(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUntrashedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_untrashed")
                    return .dictionary(d)
                case .paperDocView(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_view")
                    return .dictionary(d)
                case .paperExternalViewAllow(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewAllowTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_allow")
                    return .dictionary(d)
                case .paperExternalViewDefaultTeam(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewDefaultTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_default_team")
                    return .dictionary(d)
                case .paperExternalViewForbid(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewForbidTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_forbid")
                    return .dictionary(d)
                case .paperFolderChangeSubscription(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderChangeSubscriptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_change_subscription")
                    return .dictionary(d)
                case .paperFolderDeleted(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderDeletedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_deleted")
                    return .dictionary(d)
                case .paperFolderFollowed(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderFollowedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_followed")
                    return .dictionary(d)
                case .paperFolderTeamInvite(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderTeamInviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_team_invite")
                    return .dictionary(d)
                case .paperPublishedLinkChangePermission(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkChangePermissionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_change_permission")
                    return .dictionary(d)
                case .paperPublishedLinkCreate(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_create")
                    return .dictionary(d)
                case .paperPublishedLinkDisabled(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkDisabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_disabled")
                    return .dictionary(d)
                case .paperPublishedLinkView(let arg):
                    var d = Serialization.getFields(TeamLog.PaperPublishedLinkViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_published_link_view")
                    return .dictionary(d)
                case .passwordChange(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordChangeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("password_change")
                    return .dictionary(d)
                case .passwordReset(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetTypeSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset")
                    return .dictionary(d)
                case .passwordResetAll(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetAllTypeSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset_all")
                    return .dictionary(d)
                case .classificationCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("classification_create_report")
                    return .dictionary(d)
                case .classificationCreateReportFail(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationCreateReportFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("classification_create_report_fail")
                    return .dictionary(d)
                case .emmCreateExceptionsReport(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateExceptionsReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_exceptions_report")
                    return .dictionary(d)
                case .emmCreateUsageReport(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateUsageReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_usage_report")
                    return .dictionary(d)
                case .exportMembersReport(let arg):
                    var d = Serialization.getFields(TeamLog.ExportMembersReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("export_members_report")
                    return .dictionary(d)
                case .exportMembersReportFail(let arg):
                    var d = Serialization.getFields(TeamLog.ExportMembersReportFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("export_members_report_fail")
                    return .dictionary(d)
                case .externalSharingCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalSharingCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("external_sharing_create_report")
                    return .dictionary(d)
                case .externalSharingReportFailed(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalSharingReportFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("external_sharing_report_failed")
                    return .dictionary(d)
                case .noExpirationLinkGenCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.NoExpirationLinkGenCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_expiration_link_gen_create_report")
                    return .dictionary(d)
                case .noExpirationLinkGenReportFailed(let arg):
                    var d = Serialization.getFields(TeamLog.NoExpirationLinkGenReportFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_expiration_link_gen_report_failed")
                    return .dictionary(d)
                case .noPasswordLinkGenCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkGenCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_gen_create_report")
                    return .dictionary(d)
                case .noPasswordLinkGenReportFailed(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkGenReportFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_gen_report_failed")
                    return .dictionary(d)
                case .noPasswordLinkViewCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkViewCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_view_create_report")
                    return .dictionary(d)
                case .noPasswordLinkViewReportFailed(let arg):
                    var d = Serialization.getFields(TeamLog.NoPasswordLinkViewReportFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("no_password_link_view_report_failed")
                    return .dictionary(d)
                case .outdatedLinkViewCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.OutdatedLinkViewCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("outdated_link_view_create_report")
                    return .dictionary(d)
                case .outdatedLinkViewReportFailed(let arg):
                    var d = Serialization.getFields(TeamLog.OutdatedLinkViewReportFailedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("outdated_link_view_report_failed")
                    return .dictionary(d)
                case .paperAdminExportStart(let arg):
                    var d = Serialization.getFields(TeamLog.PaperAdminExportStartTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_admin_export_start")
                    return .dictionary(d)
                case .smartSyncCreateAdminPrivilegeReport(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncCreateAdminPrivilegeReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_create_admin_privilege_report")
                    return .dictionary(d)
                case .teamActivityCreateReport(let arg):
                    var d = Serialization.getFields(TeamLog.TeamActivityCreateReportTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_activity_create_report")
                    return .dictionary(d)
                case .teamActivityCreateReportFail(let arg):
                    var d = Serialization.getFields(TeamLog.TeamActivityCreateReportFailTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_activity_create_report_fail")
                    return .dictionary(d)
                case .collectionShare(let arg):
                    var d = Serialization.getFields(TeamLog.CollectionShareTypeSerializer().serialize(arg))
                    d[".tag"] = .str("collection_share")
                    return .dictionary(d)
                case .fileTransfersFileAdd(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersFileAddTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_file_add")
                    return .dictionary(d)
                case .fileTransfersTransferDelete(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_delete")
                    return .dictionary(d)
                case .fileTransfersTransferDownload(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_download")
                    return .dictionary(d)
                case .fileTransfersTransferSend(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferSendTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_send")
                    return .dictionary(d)
                case .fileTransfersTransferView(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersTransferViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_transfer_view")
                    return .dictionary(d)
                case .noteAclInviteOnly(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclInviteOnlyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_invite_only")
                    return .dictionary(d)
                case .noteAclLink(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclLinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_link")
                    return .dictionary(d)
                case .noteAclTeamLink(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclTeamLinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_team_link")
                    return .dictionary(d)
                case .noteShared(let arg):
                    var d = Serialization.getFields(TeamLog.NoteSharedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("note_shared")
                    return .dictionary(d)
                case .noteShareReceive(let arg):
                    var d = Serialization.getFields(TeamLog.NoteShareReceiveTypeSerializer().serialize(arg))
                    d[".tag"] = .str("note_share_receive")
                    return .dictionary(d)
                case .openNoteShared(let arg):
                    var d = Serialization.getFields(TeamLog.OpenNoteSharedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("open_note_shared")
                    return .dictionary(d)
                case .sfAddGroup(let arg):
                    var d = Serialization.getFields(TeamLog.SfAddGroupTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_add_group")
                    return .dictionary(d)
                case .sfAllowNonMembersToViewSharedLinks(let arg):
                    var d = Serialization.getFields(TeamLog.SfAllowNonMembersToViewSharedLinksTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_allow_non_members_to_view_shared_links")
                    return .dictionary(d)
                case .sfExternalInviteWarn(let arg):
                    var d = Serialization.getFields(TeamLog.SfExternalInviteWarnTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_external_invite_warn")
                    return .dictionary(d)
                case .sfFbInvite(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbInviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_invite")
                    return .dictionary(d)
                case .sfFbInviteChangeRole(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbInviteChangeRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_invite_change_role")
                    return .dictionary(d)
                case .sfFbUninvite(let arg):
                    var d = Serialization.getFields(TeamLog.SfFbUninviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_fb_uninvite")
                    return .dictionary(d)
                case .sfInviteGroup(let arg):
                    var d = Serialization.getFields(TeamLog.SfInviteGroupTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_invite_group")
                    return .dictionary(d)
                case .sfTeamGrantAccess(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamGrantAccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_grant_access")
                    return .dictionary(d)
                case .sfTeamInvite(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite")
                    return .dictionary(d)
                case .sfTeamInviteChangeRole(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteChangeRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite_change_role")
                    return .dictionary(d)
                case .sfTeamJoin(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join")
                    return .dictionary(d)
                case .sfTeamJoinFromOobLink(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinFromOobLinkTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join_from_oob_link")
                    return .dictionary(d)
                case .sfTeamUninvite(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamUninviteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_uninvite")
                    return .dictionary(d)
                case .sharedContentAddInvitees(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddInviteesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_invitees")
                    return .dictionary(d)
                case .sharedContentAddLinkExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_expiry")
                    return .dictionary(d)
                case .sharedContentAddLinkPassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkPasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_password")
                    return .dictionary(d)
                case .sharedContentAddMember(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_member")
                    return .dictionary(d)
                case .sharedContentChangeDownloadsPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeDownloadsPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_downloads_policy")
                    return .dictionary(d)
                case .sharedContentChangeInviteeRole(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeInviteeRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_invitee_role")
                    return .dictionary(d)
                case .sharedContentChangeLinkAudience(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkAudienceTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_audience")
                    return .dictionary(d)
                case .sharedContentChangeLinkExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_expiry")
                    return .dictionary(d)
                case .sharedContentChangeLinkPassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkPasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_password")
                    return .dictionary(d)
                case .sharedContentChangeMemberRole(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeMemberRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_member_role")
                    return .dictionary(d)
                case .sharedContentChangeViewerInfoPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeViewerInfoPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_viewer_info_policy")
                    return .dictionary(d)
                case .sharedContentClaimInvitation(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentClaimInvitationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_claim_invitation")
                    return .dictionary(d)
                case .sharedContentCopy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentCopyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_copy")
                    return .dictionary(d)
                case .sharedContentDownload(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_download")
                    return .dictionary(d)
                case .sharedContentRelinquishMembership(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRelinquishMembershipTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_relinquish_membership")
                    return .dictionary(d)
                case .sharedContentRemoveInvitees(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveInviteesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_invitees")
                    return .dictionary(d)
                case .sharedContentRemoveLinkExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_expiry")
                    return .dictionary(d)
                case .sharedContentRemoveLinkPassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkPasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_password")
                    return .dictionary(d)
                case .sharedContentRemoveMember(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_member")
                    return .dictionary(d)
                case .sharedContentRequestAccess(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRequestAccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_request_access")
                    return .dictionary(d)
                case .sharedContentRestoreInvitees(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRestoreInviteesTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_restore_invitees")
                    return .dictionary(d)
                case .sharedContentRestoreMember(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRestoreMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_restore_member")
                    return .dictionary(d)
                case .sharedContentUnshare(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentUnshareTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_unshare")
                    return .dictionary(d)
                case .sharedContentView(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_view")
                    return .dictionary(d)
                case .sharedFolderChangeLinkPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeLinkPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_link_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersInheritancePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersInheritancePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_inheritance_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersManagementPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersManagementPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_management_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMembersPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_members_policy")
                    return .dictionary(d)
                case .sharedFolderCreate(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_create")
                    return .dictionary(d)
                case .sharedFolderDeclineInvitation(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderDeclineInvitationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_decline_invitation")
                    return .dictionary(d)
                case .sharedFolderMount(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderMountTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_mount")
                    return .dictionary(d)
                case .sharedFolderNest(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderNestTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_nest")
                    return .dictionary(d)
                case .sharedFolderTransferOwnership(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderTransferOwnershipTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_transfer_ownership")
                    return .dictionary(d)
                case .sharedFolderUnmount(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderUnmountTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_unmount")
                    return .dictionary(d)
                case .sharedLinkAddExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkAddExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_add_expiry")
                    return .dictionary(d)
                case .sharedLinkChangeExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkChangeExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_change_expiry")
                    return .dictionary(d)
                case .sharedLinkChangeVisibility(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkChangeVisibilityTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_change_visibility")
                    return .dictionary(d)
                case .sharedLinkCopy(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkCopyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_copy")
                    return .dictionary(d)
                case .sharedLinkCreate(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_create")
                    return .dictionary(d)
                case .sharedLinkDisable(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkDisableTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_disable")
                    return .dictionary(d)
                case .sharedLinkDownload(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_download")
                    return .dictionary(d)
                case .sharedLinkRemoveExpiry(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkRemoveExpiryTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_remove_expiry")
                    return .dictionary(d)
                case .sharedLinkSettingsAddExpiration(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAddExpirationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_add_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsAddPassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAddPasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_add_password")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadDisabled(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAllowDownloadDisabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_allow_download_disabled")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadEnabled(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsAllowDownloadEnabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_allow_download_enabled")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeAudience(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangeAudienceTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_audience")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeExpiration(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangeExpirationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsChangePassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsChangePasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_change_password")
                    return .dictionary(d)
                case .sharedLinkSettingsRemoveExpiration(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsRemoveExpirationTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_remove_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsRemovePassword(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkSettingsRemovePasswordTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_settings_remove_password")
                    return .dictionary(d)
                case .sharedLinkShare(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkShareTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_share")
                    return .dictionary(d)
                case .sharedLinkView(let arg):
                    var d = Serialization.getFields(TeamLog.SharedLinkViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_link_view")
                    return .dictionary(d)
                case .sharedNoteOpened(let arg):
                    var d = Serialization.getFields(TeamLog.SharedNoteOpenedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shared_note_opened")
                    return .dictionary(d)
                case .shmodelDisableDownloads(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelDisableDownloadsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_disable_downloads")
                    return .dictionary(d)
                case .shmodelEnableDownloads(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelEnableDownloadsTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_enable_downloads")
                    return .dictionary(d)
                case .shmodelGroupShare(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelGroupShareTypeSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_group_share")
                    return .dictionary(d)
                case .showcaseAccessGranted(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseAccessGrantedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_access_granted")
                    return .dictionary(d)
                case .showcaseAddMember(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseAddMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_add_member")
                    return .dictionary(d)
                case .showcaseArchived(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseArchivedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_archived")
                    return .dictionary(d)
                case .showcaseCreated(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseCreatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_created")
                    return .dictionary(d)
                case .showcaseDeleteComment(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseDeleteCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_delete_comment")
                    return .dictionary(d)
                case .showcaseEdited(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseEditedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_edited")
                    return .dictionary(d)
                case .showcaseEditComment(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseEditCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_edit_comment")
                    return .dictionary(d)
                case .showcaseFileAdded(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileAddedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_added")
                    return .dictionary(d)
                case .showcaseFileDownload(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileDownloadTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_download")
                    return .dictionary(d)
                case .showcaseFileRemoved(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileRemovedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_removed")
                    return .dictionary(d)
                case .showcaseFileView(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseFileViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_file_view")
                    return .dictionary(d)
                case .showcasePermanentlyDeleted(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcasePermanentlyDeletedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_permanently_deleted")
                    return .dictionary(d)
                case .showcasePostComment(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcasePostCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_post_comment")
                    return .dictionary(d)
                case .showcaseRemoveMember(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRemoveMemberTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_remove_member")
                    return .dictionary(d)
                case .showcaseRenamed(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRenamedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_renamed")
                    return .dictionary(d)
                case .showcaseRequestAccess(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRequestAccessTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_request_access")
                    return .dictionary(d)
                case .showcaseResolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseResolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_resolve_comment")
                    return .dictionary(d)
                case .showcaseRestored(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseRestoredTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_restored")
                    return .dictionary(d)
                case .showcaseTrashed(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseTrashedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_trashed")
                    return .dictionary(d)
                case .showcaseTrashedDeprecated(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseTrashedDeprecatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_trashed_deprecated")
                    return .dictionary(d)
                case .showcaseUnresolveComment(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUnresolveCommentTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_unresolve_comment")
                    return .dictionary(d)
                case .showcaseUntrashed(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUntrashedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_untrashed")
                    return .dictionary(d)
                case .showcaseUntrashedDeprecated(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseUntrashedDeprecatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_untrashed_deprecated")
                    return .dictionary(d)
                case .showcaseView(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseViewTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_view")
                    return .dictionary(d)
                case .ssoAddCert(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddCertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_cert")
                    return .dictionary(d)
                case .ssoAddLoginUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLoginUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_login_url")
                    return .dictionary(d)
                case .ssoAddLogoutUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLogoutUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_logout_url")
                    return .dictionary(d)
                case .ssoChangeCert(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeCertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_cert")
                    return .dictionary(d)
                case .ssoChangeLoginUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLoginUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_login_url")
                    return .dictionary(d)
                case .ssoChangeLogoutUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLogoutUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_logout_url")
                    return .dictionary(d)
                case .ssoChangeSamlIdentityMode(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeSamlIdentityModeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_saml_identity_mode")
                    return .dictionary(d)
                case .ssoRemoveCert(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveCertTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_cert")
                    return .dictionary(d)
                case .ssoRemoveLoginUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLoginUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_login_url")
                    return .dictionary(d)
                case .ssoRemoveLogoutUrl(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLogoutUrlTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_logout_url")
                    return .dictionary(d)
                case .teamFolderChangeStatus(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderChangeStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_change_status")
                    return .dictionary(d)
                case .teamFolderCreate(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderCreateTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_create")
                    return .dictionary(d)
                case .teamFolderDowngrade(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderDowngradeTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_downgrade")
                    return .dictionary(d)
                case .teamFolderPermanentlyDelete(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderPermanentlyDeleteTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_permanently_delete")
                    return .dictionary(d)
                case .teamFolderRename(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderRenameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_rename")
                    return .dictionary(d)
                case .teamSelectiveSyncSettingsChanged(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSelectiveSyncSettingsChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_selective_sync_settings_changed")
                    return .dictionary(d)
                case .accountCaptureChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_policy")
                    return .dictionary(d)
                case .adminEmailRemindersChanged(let arg):
                    var d = Serialization.getFields(TeamLog.AdminEmailRemindersChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("admin_email_reminders_changed")
                    return .dictionary(d)
                case .allowDownloadDisabled(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadDisabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_disabled")
                    return .dictionary(d)
                case .allowDownloadEnabled(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadEnabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_enabled")
                    return .dictionary(d)
                case .appPermissionsChanged(let arg):
                    var d = Serialization.getFields(TeamLog.AppPermissionsChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("app_permissions_changed")
                    return .dictionary(d)
                case .cameraUploadsPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.CameraUploadsPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("camera_uploads_policy_changed")
                    return .dictionary(d)
                case .captureTranscriptPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.CaptureTranscriptPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("capture_transcript_policy_changed")
                    return .dictionary(d)
                case .classificationChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ClassificationChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("classification_change_policy")
                    return .dictionary(d)
                case .computerBackupPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.ComputerBackupPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("computer_backup_policy_changed")
                    return .dictionary(d)
                case .contentAdministrationPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.ContentAdministrationPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("content_administration_policy_changed")
                    return .dictionary(d)
                case .dataPlacementRestrictionChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_change_policy")
                    return .dictionary(d)
                case .dataPlacementRestrictionSatisfyPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionSatisfyPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_satisfy_policy")
                    return .dictionary(d)
                case .deviceApprovalsAddException(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsAddExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_add_exception")
                    return .dictionary(d)
                case .deviceApprovalsChangeDesktopPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeDesktopPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_desktop_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeMobilePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeMobilePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_mobile_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeOverageAction(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeOverageActionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_overage_action")
                    return .dictionary(d)
                case .deviceApprovalsChangeUnlinkAction(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeUnlinkActionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_unlink_action")
                    return .dictionary(d)
                case .deviceApprovalsRemoveException(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsRemoveExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_remove_exception")
                    return .dictionary(d)
                case .directoryRestrictionsAddMembers(let arg):
                    var d = Serialization.getFields(TeamLog.DirectoryRestrictionsAddMembersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("directory_restrictions_add_members")
                    return .dictionary(d)
                case .directoryRestrictionsRemoveMembers(let arg):
                    var d = Serialization.getFields(TeamLog.DirectoryRestrictionsRemoveMembersTypeSerializer().serialize(arg))
                    d[".tag"] = .str("directory_restrictions_remove_members")
                    return .dictionary(d)
                case .dropboxPasswordsPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.DropboxPasswordsPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("dropbox_passwords_policy_changed")
                    return .dictionary(d)
                case .emailIngestPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.EmailIngestPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("email_ingest_policy_changed")
                    return .dictionary(d)
                case .emmAddException(let arg):
                    var d = Serialization.getFields(TeamLog.EmmAddExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_add_exception")
                    return .dictionary(d)
                case .emmChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.EmmChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_change_policy")
                    return .dictionary(d)
                case .emmRemoveException(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRemoveExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("emm_remove_exception")
                    return .dictionary(d)
                case .extendedVersionHistoryChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ExtendedVersionHistoryChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("extended_version_history_change_policy")
                    return .dictionary(d)
                case .externalDriveBackupPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.ExternalDriveBackupPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("external_drive_backup_policy_changed")
                    return .dictionary(d)
                case .fileCommentsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.FileCommentsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_comments_change_policy")
                    return .dictionary(d)
                case .fileLockingPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FileLockingPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_locking_policy_changed")
                    return .dictionary(d)
                case .fileProviderMigrationPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FileProviderMigrationPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_provider_migration_policy_changed")
                    return .dictionary(d)
                case .fileRequestsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_change_policy")
                    return .dictionary(d)
                case .fileRequestsEmailsEnabled(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsEnabledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_enabled")
                    return .dictionary(d)
                case .fileRequestsEmailsRestrictedToTeamOnly(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_restricted_to_team_only")
                    return .dictionary(d)
                case .fileTransfersPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FileTransfersPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("file_transfers_policy_changed")
                    return .dictionary(d)
                case .folderLinkRestrictionPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.FolderLinkRestrictionPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("folder_link_restriction_policy_changed")
                    return .dictionary(d)
                case .googleSsoChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.GoogleSsoChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("google_sso_change_policy")
                    return .dictionary(d)
                case .groupUserManagementChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.GroupUserManagementChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("group_user_management_change_policy")
                    return .dictionary(d)
                case .integrationPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.IntegrationPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("integration_policy_changed")
                    return .dictionary(d)
                case .inviteAcceptanceEmailPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.InviteAcceptanceEmailPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("invite_acceptance_email_policy_changed")
                    return .dictionary(d)
                case .memberRequestsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.MemberRequestsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_requests_change_policy")
                    return .dictionary(d)
                case .memberSendInvitePolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSendInvitePolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_send_invite_policy_changed")
                    return .dictionary(d)
                case .memberSpaceLimitsAddException(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsAddExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_add_exception")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCapsTypePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeCapsTypePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_caps_type_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveException(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsRemoveExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_remove_exception")
                    return .dictionary(d)
                case .memberSuggestionsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestionsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggestions_change_policy")
                    return .dictionary(d)
                case .microsoftOfficeAddinChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.MicrosoftOfficeAddinChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("microsoft_office_addin_change_policy")
                    return .dictionary(d)
                case .networkControlChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.NetworkControlChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("network_control_change_policy")
                    return .dictionary(d)
                case .paperChangeDeploymentPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeDeploymentPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_deployment_policy")
                    return .dictionary(d)
                case .paperChangeMemberLinkPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberLinkPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_link_policy")
                    return .dictionary(d)
                case .paperChangeMemberPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_policy")
                    return .dictionary(d)
                case .paperChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_policy")
                    return .dictionary(d)
                case .paperDefaultFolderPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDefaultFolderPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_default_folder_policy_changed")
                    return .dictionary(d)
                case .paperDesktopPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDesktopPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_desktop_policy_changed")
                    return .dictionary(d)
                case .paperEnabledUsersGroupAddition(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupAdditionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_addition")
                    return .dictionary(d)
                case .paperEnabledUsersGroupRemoval(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupRemovalTypeSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_removal")
                    return .dictionary(d)
                case .passwordStrengthRequirementsChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordStrengthRequirementsChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("password_strength_requirements_change_policy")
                    return .dictionary(d)
                case .permanentDeleteChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.PermanentDeleteChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("permanent_delete_change_policy")
                    return .dictionary(d)
                case .resellerSupportChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_change_policy")
                    return .dictionary(d)
                case .rewindPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.RewindPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("rewind_policy_changed")
                    return .dictionary(d)
                case .sendForSignaturePolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.SendForSignaturePolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("send_for_signature_policy_changed")
                    return .dictionary(d)
                case .sharingChangeFolderJoinPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeFolderJoinPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_folder_join_policy")
                    return .dictionary(d)
                case .sharingChangeLinkAllowChangeExpirationPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkAllowChangeExpirationPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_allow_change_expiration_policy")
                    return .dictionary(d)
                case .sharingChangeLinkDefaultExpirationPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkDefaultExpirationPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_default_expiration_policy")
                    return .dictionary(d)
                case .sharingChangeLinkEnforcePasswordPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkEnforcePasswordPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_enforce_password_policy")
                    return .dictionary(d)
                case .sharingChangeLinkPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_policy")
                    return .dictionary(d)
                case .sharingChangeMemberPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeMemberPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_member_policy")
                    return .dictionary(d)
                case .showcaseChangeDownloadPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeDownloadPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_download_policy")
                    return .dictionary(d)
                case .showcaseChangeEnabledPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeEnabledPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_enabled_policy")
                    return .dictionary(d)
                case .showcaseChangeExternalSharingPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.ShowcaseChangeExternalSharingPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("showcase_change_external_sharing_policy")
                    return .dictionary(d)
                case .smarterSmartSyncPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.SmarterSmartSyncPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("smarter_smart_sync_policy_changed")
                    return .dictionary(d)
                case .smartSyncChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_change_policy")
                    return .dictionary(d)
                case .smartSyncNotOptOut(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncNotOptOutTypeSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_not_opt_out")
                    return .dictionary(d)
                case .smartSyncOptOut(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncOptOutTypeSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_opt_out")
                    return .dictionary(d)
                case .ssoChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_policy")
                    return .dictionary(d)
                case .teamBrandingPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.TeamBrandingPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_branding_policy_changed")
                    return .dictionary(d)
                case .teamExtensionsPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.TeamExtensionsPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_extensions_policy_changed")
                    return .dictionary(d)
                case .teamSelectiveSyncPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSelectiveSyncPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_selective_sync_policy_changed")
                    return .dictionary(d)
                case .teamSharingWhitelistSubjectsChanged(let arg):
                    var d = Serialization.getFields(TeamLog.TeamSharingWhitelistSubjectsChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_sharing_whitelist_subjects_changed")
                    return .dictionary(d)
                case .tfaAddException(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_exception")
                    return .dictionary(d)
                case .tfaChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_policy")
                    return .dictionary(d)
                case .tfaRemoveException(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveExceptionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_exception")
                    return .dictionary(d)
                case .twoAccountChangePolicy(let arg):
                    var d = Serialization.getFields(TeamLog.TwoAccountChangePolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("two_account_change_policy")
                    return .dictionary(d)
                case .viewerInfoPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.ViewerInfoPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("viewer_info_policy_changed")
                    return .dictionary(d)
                case .watermarkingPolicyChanged(let arg):
                    var d = Serialization.getFields(TeamLog.WatermarkingPolicyChangedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("watermarking_policy_changed")
                    return .dictionary(d)
                case .webSessionsChangeActiveSessionLimit(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeActiveSessionLimitTypeSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_active_session_limit")
                    return .dictionary(d)
                case .webSessionsChangeFixedLengthPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeFixedLengthPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_fixed_length_policy")
                    return .dictionary(d)
                case .webSessionsChangeIdleLengthPolicy(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeIdleLengthPolicyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_idle_length_policy")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestSuccessful(let arg):
                    var d = Serialization.getFields(TeamLog.DataResidencyMigrationRequestSuccessfulTypeSerializer().serialize(arg))
                    d[".tag"] = .str("data_residency_migration_request_successful")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestUnsuccessful(let arg):
                    var d = Serialization.getFields(TeamLog.DataResidencyMigrationRequestUnsuccessfulTypeSerializer().serialize(arg))
                    d[".tag"] = .str("data_residency_migration_request_unsuccessful")
                    return .dictionary(d)
                case .teamMergeFrom(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeFromTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_from")
                    return .dictionary(d)
                case .teamMergeTo(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeToTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_to")
                    return .dictionary(d)
                case .teamProfileAddBackground(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileAddBackgroundTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_add_background")
                    return .dictionary(d)
                case .teamProfileAddLogo(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileAddLogoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_add_logo")
                    return .dictionary(d)
                case .teamProfileChangeBackground(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeBackgroundTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_background")
                    return .dictionary(d)
                case .teamProfileChangeDefaultLanguage(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeDefaultLanguageTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_default_language")
                    return .dictionary(d)
                case .teamProfileChangeLogo(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeLogoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_logo")
                    return .dictionary(d)
                case .teamProfileChangeName(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeNameTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_name")
                    return .dictionary(d)
                case .teamProfileRemoveBackground(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileRemoveBackgroundTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_remove_background")
                    return .dictionary(d)
                case .teamProfileRemoveLogo(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileRemoveLogoTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_remove_logo")
                    return .dictionary(d)
                case .tfaAddBackupPhone(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddBackupPhoneTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_backup_phone")
                    return .dictionary(d)
                case .tfaAddSecurityKey(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddSecurityKeyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_security_key")
                    return .dictionary(d)
                case .tfaChangeBackupPhone(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeBackupPhoneTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_backup_phone")
                    return .dictionary(d)
                case .tfaChangeStatus(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_status")
                    return .dictionary(d)
                case .tfaRemoveBackupPhone(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveBackupPhoneTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_backup_phone")
                    return .dictionary(d)
                case .tfaRemoveSecurityKey(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveSecurityKeyTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_security_key")
                    return .dictionary(d)
                case .tfaReset(let arg):
                    var d = Serialization.getFields(TeamLog.TfaResetTypeSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_reset")
                    return .dictionary(d)
                case .changedEnterpriseAdminRole(let arg):
                    var d = Serialization.getFields(TeamLog.ChangedEnterpriseAdminRoleTypeSerializer().serialize(arg))
                    d[".tag"] = .str("changed_enterprise_admin_role")
                    return .dictionary(d)
                case .changedEnterpriseConnectedTeamStatus(let arg):
                    var d = Serialization.getFields(TeamLog.ChangedEnterpriseConnectedTeamStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("changed_enterprise_connected_team_status")
                    return .dictionary(d)
                case .endedEnterpriseAdminSession(let arg):
                    var d = Serialization.getFields(TeamLog.EndedEnterpriseAdminSessionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("ended_enterprise_admin_session")
                    return .dictionary(d)
                case .endedEnterpriseAdminSessionDeprecated(let arg):
                    var d = Serialization.getFields(TeamLog.EndedEnterpriseAdminSessionDeprecatedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("ended_enterprise_admin_session_deprecated")
                    return .dictionary(d)
                case .enterpriseSettingsLocking(let arg):
                    var d = Serialization.getFields(TeamLog.EnterpriseSettingsLockingTypeSerializer().serialize(arg))
                    d[".tag"] = .str("enterprise_settings_locking")
                    return .dictionary(d)
                case .guestAdminChangeStatus(let arg):
                    var d = Serialization.getFields(TeamLog.GuestAdminChangeStatusTypeSerializer().serialize(arg))
                    d[".tag"] = .str("guest_admin_change_status")
                    return .dictionary(d)
                case .startedEnterpriseAdminSession(let arg):
                    var d = Serialization.getFields(TeamLog.StartedEnterpriseAdminSessionTypeSerializer().serialize(arg))
                    d[".tag"] = .str("started_enterprise_admin_session")
                    return .dictionary(d)
                case .teamMergeRequestAccepted(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestAutoCanceled(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestAutoCanceledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_auto_canceled")
                    return .dictionary(d)
                case .teamMergeRequestCanceled(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestExpired(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_expired_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestReminder(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestReminderShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestRevoked(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestRevokedTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_revoked")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToPrimaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestSentShownToPrimaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_sent_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToSecondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeRequestSentShownToSecondaryTeamTypeSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_request_sent_shown_to_secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin_alerting_alert_state_changed":
                            let v = TeamLog.AdminAlertingAlertStateChangedTypeSerializer().deserialize(json)
                            return EventType.adminAlertingAlertStateChanged(v)
                        case "admin_alerting_changed_alert_config":
                            let v = TeamLog.AdminAlertingChangedAlertConfigTypeSerializer().deserialize(json)
                            return EventType.adminAlertingChangedAlertConfig(v)
                        case "admin_alerting_triggered_alert":
                            let v = TeamLog.AdminAlertingTriggeredAlertTypeSerializer().deserialize(json)
                            return EventType.adminAlertingTriggeredAlert(v)
                        case "app_blocked_by_permissions":
                            let v = TeamLog.AppBlockedByPermissionsTypeSerializer().deserialize(json)
                            return EventType.appBlockedByPermissions(v)
                        case "app_link_team":
                            let v = TeamLog.AppLinkTeamTypeSerializer().deserialize(json)
                            return EventType.appLinkTeam(v)
                        case "app_link_user":
                            let v = TeamLog.AppLinkUserTypeSerializer().deserialize(json)
                            return EventType.appLinkUser(v)
                        case "app_unlink_team":
                            let v = TeamLog.AppUnlinkTeamTypeSerializer().deserialize(json)
                            return EventType.appUnlinkTeam(v)
                        case "app_unlink_user":
                            let v = TeamLog.AppUnlinkUserTypeSerializer().deserialize(json)
                            return EventType.appUnlinkUser(v)
                        case "integration_connected":
                            let v = TeamLog.IntegrationConnectedTypeSerializer().deserialize(json)
                            return EventType.integrationConnected(v)
                        case "integration_disconnected":
                            let v = TeamLog.IntegrationDisconnectedTypeSerializer().deserialize(json)
                            return EventType.integrationDisconnected(v)
                        case "file_add_comment":
                            let v = TeamLog.FileAddCommentTypeSerializer().deserialize(json)
                            return EventType.fileAddComment(v)
                        case "file_change_comment_subscription":
                            let v = TeamLog.FileChangeCommentSubscriptionTypeSerializer().deserialize(json)
                            return EventType.fileChangeCommentSubscription(v)
                        case "file_delete_comment":
                            let v = TeamLog.FileDeleteCommentTypeSerializer().deserialize(json)
                            return EventType.fileDeleteComment(v)
                        case "file_edit_comment":
                            let v = TeamLog.FileEditCommentTypeSerializer().deserialize(json)
                            return EventType.fileEditComment(v)
                        case "file_like_comment":
                            let v = TeamLog.FileLikeCommentTypeSerializer().deserialize(json)
                            return EventType.fileLikeComment(v)
                        case "file_resolve_comment":
                            let v = TeamLog.FileResolveCommentTypeSerializer().deserialize(json)
                            return EventType.fileResolveComment(v)
                        case "file_unlike_comment":
                            let v = TeamLog.FileUnlikeCommentTypeSerializer().deserialize(json)
                            return EventType.fileUnlikeComment(v)
                        case "file_unresolve_comment":
                            let v = TeamLog.FileUnresolveCommentTypeSerializer().deserialize(json)
                            return EventType.fileUnresolveComment(v)
                        case "governance_policy_add_folders":
                            let v = TeamLog.GovernancePolicyAddFoldersTypeSerializer().deserialize(json)
                            return EventType.governancePolicyAddFolders(v)
                        case "governance_policy_add_folder_failed":
                            let v = TeamLog.GovernancePolicyAddFolderFailedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyAddFolderFailed(v)
                        case "governance_policy_content_disposed":
                            let v = TeamLog.GovernancePolicyContentDisposedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyContentDisposed(v)
                        case "governance_policy_create":
                            let v = TeamLog.GovernancePolicyCreateTypeSerializer().deserialize(json)
                            return EventType.governancePolicyCreate(v)
                        case "governance_policy_delete":
                            let v = TeamLog.GovernancePolicyDeleteTypeSerializer().deserialize(json)
                            return EventType.governancePolicyDelete(v)
                        case "governance_policy_edit_details":
                            let v = TeamLog.GovernancePolicyEditDetailsTypeSerializer().deserialize(json)
                            return EventType.governancePolicyEditDetails(v)
                        case "governance_policy_edit_duration":
                            let v = TeamLog.GovernancePolicyEditDurationTypeSerializer().deserialize(json)
                            return EventType.governancePolicyEditDuration(v)
                        case "governance_policy_export_created":
                            let v = TeamLog.GovernancePolicyExportCreatedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyExportCreated(v)
                        case "governance_policy_export_removed":
                            let v = TeamLog.GovernancePolicyExportRemovedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyExportRemoved(v)
                        case "governance_policy_remove_folders":
                            let v = TeamLog.GovernancePolicyRemoveFoldersTypeSerializer().deserialize(json)
                            return EventType.governancePolicyRemoveFolders(v)
                        case "governance_policy_report_created":
                            let v = TeamLog.GovernancePolicyReportCreatedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyReportCreated(v)
                        case "governance_policy_zip_part_downloaded":
                            let v = TeamLog.GovernancePolicyZipPartDownloadedTypeSerializer().deserialize(json)
                            return EventType.governancePolicyZipPartDownloaded(v)
                        case "legal_holds_activate_a_hold":
                            let v = TeamLog.LegalHoldsActivateAHoldTypeSerializer().deserialize(json)
                            return EventType.legalHoldsActivateAHold(v)
                        case "legal_holds_add_members":
                            let v = TeamLog.LegalHoldsAddMembersTypeSerializer().deserialize(json)
                            return EventType.legalHoldsAddMembers(v)
                        case "legal_holds_change_hold_details":
                            let v = TeamLog.LegalHoldsChangeHoldDetailsTypeSerializer().deserialize(json)
                            return EventType.legalHoldsChangeHoldDetails(v)
                        case "legal_holds_change_hold_name":
                            let v = TeamLog.LegalHoldsChangeHoldNameTypeSerializer().deserialize(json)
                            return EventType.legalHoldsChangeHoldName(v)
                        case "legal_holds_export_a_hold":
                            let v = TeamLog.LegalHoldsExportAHoldTypeSerializer().deserialize(json)
                            return EventType.legalHoldsExportAHold(v)
                        case "legal_holds_export_cancelled":
                            let v = TeamLog.LegalHoldsExportCancelledTypeSerializer().deserialize(json)
                            return EventType.legalHoldsExportCancelled(v)
                        case "legal_holds_export_downloaded":
                            let v = TeamLog.LegalHoldsExportDownloadedTypeSerializer().deserialize(json)
                            return EventType.legalHoldsExportDownloaded(v)
                        case "legal_holds_export_removed":
                            let v = TeamLog.LegalHoldsExportRemovedTypeSerializer().deserialize(json)
                            return EventType.legalHoldsExportRemoved(v)
                        case "legal_holds_release_a_hold":
                            let v = TeamLog.LegalHoldsReleaseAHoldTypeSerializer().deserialize(json)
                            return EventType.legalHoldsReleaseAHold(v)
                        case "legal_holds_remove_members":
                            let v = TeamLog.LegalHoldsRemoveMembersTypeSerializer().deserialize(json)
                            return EventType.legalHoldsRemoveMembers(v)
                        case "legal_holds_report_a_hold":
                            let v = TeamLog.LegalHoldsReportAHoldTypeSerializer().deserialize(json)
                            return EventType.legalHoldsReportAHold(v)
                        case "device_change_ip_desktop":
                            let v = TeamLog.DeviceChangeIpDesktopTypeSerializer().deserialize(json)
                            return EventType.deviceChangeIpDesktop(v)
                        case "device_change_ip_mobile":
                            let v = TeamLog.DeviceChangeIpMobileTypeSerializer().deserialize(json)
                            return EventType.deviceChangeIpMobile(v)
                        case "device_change_ip_web":
                            let v = TeamLog.DeviceChangeIpWebTypeSerializer().deserialize(json)
                            return EventType.deviceChangeIpWeb(v)
                        case "device_delete_on_unlink_fail":
                            let v = TeamLog.DeviceDeleteOnUnlinkFailTypeSerializer().deserialize(json)
                            return EventType.deviceDeleteOnUnlinkFail(v)
                        case "device_delete_on_unlink_success":
                            let v = TeamLog.DeviceDeleteOnUnlinkSuccessTypeSerializer().deserialize(json)
                            return EventType.deviceDeleteOnUnlinkSuccess(v)
                        case "device_link_fail":
                            let v = TeamLog.DeviceLinkFailTypeSerializer().deserialize(json)
                            return EventType.deviceLinkFail(v)
                        case "device_link_success":
                            let v = TeamLog.DeviceLinkSuccessTypeSerializer().deserialize(json)
                            return EventType.deviceLinkSuccess(v)
                        case "device_management_disabled":
                            let v = TeamLog.DeviceManagementDisabledTypeSerializer().deserialize(json)
                            return EventType.deviceManagementDisabled(v)
                        case "device_management_enabled":
                            let v = TeamLog.DeviceManagementEnabledTypeSerializer().deserialize(json)
                            return EventType.deviceManagementEnabled(v)
                        case "device_sync_backup_status_changed":
                            let v = TeamLog.DeviceSyncBackupStatusChangedTypeSerializer().deserialize(json)
                            return EventType.deviceSyncBackupStatusChanged(v)
                        case "device_unlink":
                            let v = TeamLog.DeviceUnlinkTypeSerializer().deserialize(json)
                            return EventType.deviceUnlink(v)
                        case "dropbox_passwords_exported":
                            let v = TeamLog.DropboxPasswordsExportedTypeSerializer().deserialize(json)
                            return EventType.dropboxPasswordsExported(v)
                        case "dropbox_passwords_new_device_enrolled":
                            let v = TeamLog.DropboxPasswordsNewDeviceEnrolledTypeSerializer().deserialize(json)
                            return EventType.dropboxPasswordsNewDeviceEnrolled(v)
                        case "emm_refresh_auth_token":
                            let v = TeamLog.EmmRefreshAuthTokenTypeSerializer().deserialize(json)
                            return EventType.emmRefreshAuthToken(v)
                        case "external_drive_backup_eligibility_status_checked":
                            let v = TeamLog.ExternalDriveBackupEligibilityStatusCheckedTypeSerializer().deserialize(json)
                            return EventType.externalDriveBackupEligibilityStatusChecked(v)
                        case "external_drive_backup_status_changed":
                            let v = TeamLog.ExternalDriveBackupStatusChangedTypeSerializer().deserialize(json)
                            return EventType.externalDriveBackupStatusChanged(v)
                        case "account_capture_change_availability":
                            let v = TeamLog.AccountCaptureChangeAvailabilityTypeSerializer().deserialize(json)
                            return EventType.accountCaptureChangeAvailability(v)
                        case "account_capture_migrate_account":
                            let v = TeamLog.AccountCaptureMigrateAccountTypeSerializer().deserialize(json)
                            return EventType.accountCaptureMigrateAccount(v)
                        case "account_capture_notification_emails_sent":
                            let v = TeamLog.AccountCaptureNotificationEmailsSentTypeSerializer().deserialize(json)
                            return EventType.accountCaptureNotificationEmailsSent(v)
                        case "account_capture_relinquish_account":
                            let v = TeamLog.AccountCaptureRelinquishAccountTypeSerializer().deserialize(json)
                            return EventType.accountCaptureRelinquishAccount(v)
                        case "disabled_domain_invites":
                            let v = TeamLog.DisabledDomainInvitesTypeSerializer().deserialize(json)
                            return EventType.disabledDomainInvites(v)
                        case "domain_invites_approve_request_to_join_team":
                            let v = TeamLog.DomainInvitesApproveRequestToJoinTeamTypeSerializer().deserialize(json)
                            return EventType.domainInvitesApproveRequestToJoinTeam(v)
                        case "domain_invites_decline_request_to_join_team":
                            let v = TeamLog.DomainInvitesDeclineRequestToJoinTeamTypeSerializer().deserialize(json)
                            return EventType.domainInvitesDeclineRequestToJoinTeam(v)
                        case "domain_invites_email_existing_users":
                            let v = TeamLog.DomainInvitesEmailExistingUsersTypeSerializer().deserialize(json)
                            return EventType.domainInvitesEmailExistingUsers(v)
                        case "domain_invites_request_to_join_team":
                            let v = TeamLog.DomainInvitesRequestToJoinTeamTypeSerializer().deserialize(json)
                            return EventType.domainInvitesRequestToJoinTeam(v)
                        case "domain_invites_set_invite_new_user_pref_to_no":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToNoTypeSerializer().deserialize(json)
                            return EventType.domainInvitesSetInviteNewUserPrefToNo(v)
                        case "domain_invites_set_invite_new_user_pref_to_yes":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToYesTypeSerializer().deserialize(json)
                            return EventType.domainInvitesSetInviteNewUserPrefToYes(v)
                        case "domain_verification_add_domain_fail":
                            let v = TeamLog.DomainVerificationAddDomainFailTypeSerializer().deserialize(json)
                            return EventType.domainVerificationAddDomainFail(v)
                        case "domain_verification_add_domain_success":
                            let v = TeamLog.DomainVerificationAddDomainSuccessTypeSerializer().deserialize(json)
                            return EventType.domainVerificationAddDomainSuccess(v)
                        case "domain_verification_remove_domain":
                            let v = TeamLog.DomainVerificationRemoveDomainTypeSerializer().deserialize(json)
                            return EventType.domainVerificationRemoveDomain(v)
                        case "enabled_domain_invites":
                            let v = TeamLog.EnabledDomainInvitesTypeSerializer().deserialize(json)
                            return EventType.enabledDomainInvites(v)
                        case "apply_naming_convention":
                            let v = TeamLog.ApplyNamingConventionTypeSerializer().deserialize(json)
                            return EventType.applyNamingConvention(v)
                        case "create_folder":
                            let v = TeamLog.CreateFolderTypeSerializer().deserialize(json)
                            return EventType.createFolder(v)
                        case "file_add":
                            let v = TeamLog.FileAddTypeSerializer().deserialize(json)
                            return EventType.fileAdd(v)
                        case "file_copy":
                            let v = TeamLog.FileCopyTypeSerializer().deserialize(json)
                            return EventType.fileCopy(v)
                        case "file_delete":
                            let v = TeamLog.FileDeleteTypeSerializer().deserialize(json)
                            return EventType.fileDelete(v)
                        case "file_download":
                            let v = TeamLog.FileDownloadTypeSerializer().deserialize(json)
                            return EventType.fileDownload(v)
                        case "file_edit":
                            let v = TeamLog.FileEditTypeSerializer().deserialize(json)
                            return EventType.fileEdit(v)
                        case "file_get_copy_reference":
                            let v = TeamLog.FileGetCopyReferenceTypeSerializer().deserialize(json)
                            return EventType.fileGetCopyReference(v)
                        case "file_locking_lock_status_changed":
                            let v = TeamLog.FileLockingLockStatusChangedTypeSerializer().deserialize(json)
                            return EventType.fileLockingLockStatusChanged(v)
                        case "file_move":
                            let v = TeamLog.FileMoveTypeSerializer().deserialize(json)
                            return EventType.fileMove(v)
                        case "file_permanently_delete":
                            let v = TeamLog.FilePermanentlyDeleteTypeSerializer().deserialize(json)
                            return EventType.filePermanentlyDelete(v)
                        case "file_preview":
                            let v = TeamLog.FilePreviewTypeSerializer().deserialize(json)
                            return EventType.filePreview(v)
                        case "file_rename":
                            let v = TeamLog.FileRenameTypeSerializer().deserialize(json)
                            return EventType.fileRename(v)
                        case "file_restore":
                            let v = TeamLog.FileRestoreTypeSerializer().deserialize(json)
                            return EventType.fileRestore(v)
                        case "file_revert":
                            let v = TeamLog.FileRevertTypeSerializer().deserialize(json)
                            return EventType.fileRevert(v)
                        case "file_rollback_changes":
                            let v = TeamLog.FileRollbackChangesTypeSerializer().deserialize(json)
                            return EventType.fileRollbackChanges(v)
                        case "file_save_copy_reference":
                            let v = TeamLog.FileSaveCopyReferenceTypeSerializer().deserialize(json)
                            return EventType.fileSaveCopyReference(v)
                        case "folder_overview_description_changed":
                            let v = TeamLog.FolderOverviewDescriptionChangedTypeSerializer().deserialize(json)
                            return EventType.folderOverviewDescriptionChanged(v)
                        case "folder_overview_item_pinned":
                            let v = TeamLog.FolderOverviewItemPinnedTypeSerializer().deserialize(json)
                            return EventType.folderOverviewItemPinned(v)
                        case "folder_overview_item_unpinned":
                            let v = TeamLog.FolderOverviewItemUnpinnedTypeSerializer().deserialize(json)
                            return EventType.folderOverviewItemUnpinned(v)
                        case "object_label_added":
                            let v = TeamLog.ObjectLabelAddedTypeSerializer().deserialize(json)
                            return EventType.objectLabelAdded(v)
                        case "object_label_removed":
                            let v = TeamLog.ObjectLabelRemovedTypeSerializer().deserialize(json)
                            return EventType.objectLabelRemoved(v)
                        case "object_label_updated_value":
                            let v = TeamLog.ObjectLabelUpdatedValueTypeSerializer().deserialize(json)
                            return EventType.objectLabelUpdatedValue(v)
                        case "organize_folder_with_tidy":
                            let v = TeamLog.OrganizeFolderWithTidyTypeSerializer().deserialize(json)
                            return EventType.organizeFolderWithTidy(v)
                        case "rewind_folder":
                            let v = TeamLog.RewindFolderTypeSerializer().deserialize(json)
                            return EventType.rewindFolder(v)
                        case "undo_naming_convention":
                            let v = TeamLog.UndoNamingConventionTypeSerializer().deserialize(json)
                            return EventType.undoNamingConvention(v)
                        case "undo_organize_folder_with_tidy":
                            let v = TeamLog.UndoOrganizeFolderWithTidyTypeSerializer().deserialize(json)
                            return EventType.undoOrganizeFolderWithTidy(v)
                        case "user_tags_added":
                            let v = TeamLog.UserTagsAddedTypeSerializer().deserialize(json)
                            return EventType.userTagsAdded(v)
                        case "user_tags_removed":
                            let v = TeamLog.UserTagsRemovedTypeSerializer().deserialize(json)
                            return EventType.userTagsRemoved(v)
                        case "email_ingest_receive_file":
                            let v = TeamLog.EmailIngestReceiveFileTypeSerializer().deserialize(json)
                            return EventType.emailIngestReceiveFile(v)
                        case "file_request_change":
                            let v = TeamLog.FileRequestChangeTypeSerializer().deserialize(json)
                            return EventType.fileRequestChange(v)
                        case "file_request_close":
                            let v = TeamLog.FileRequestCloseTypeSerializer().deserialize(json)
                            return EventType.fileRequestClose(v)
                        case "file_request_create":
                            let v = TeamLog.FileRequestCreateTypeSerializer().deserialize(json)
                            return EventType.fileRequestCreate(v)
                        case "file_request_delete":
                            let v = TeamLog.FileRequestDeleteTypeSerializer().deserialize(json)
                            return EventType.fileRequestDelete(v)
                        case "file_request_receive_file":
                            let v = TeamLog.FileRequestReceiveFileTypeSerializer().deserialize(json)
                            return EventType.fileRequestReceiveFile(v)
                        case "group_add_external_id":
                            let v = TeamLog.GroupAddExternalIdTypeSerializer().deserialize(json)
                            return EventType.groupAddExternalId(v)
                        case "group_add_member":
                            let v = TeamLog.GroupAddMemberTypeSerializer().deserialize(json)
                            return EventType.groupAddMember(v)
                        case "group_change_external_id":
                            let v = TeamLog.GroupChangeExternalIdTypeSerializer().deserialize(json)
                            return EventType.groupChangeExternalId(v)
                        case "group_change_management_type":
                            let v = TeamLog.GroupChangeManagementTypeTypeSerializer().deserialize(json)
                            return EventType.groupChangeManagementType(v)
                        case "group_change_member_role":
                            let v = TeamLog.GroupChangeMemberRoleTypeSerializer().deserialize(json)
                            return EventType.groupChangeMemberRole(v)
                        case "group_create":
                            let v = TeamLog.GroupCreateTypeSerializer().deserialize(json)
                            return EventType.groupCreate(v)
                        case "group_delete":
                            let v = TeamLog.GroupDeleteTypeSerializer().deserialize(json)
                            return EventType.groupDelete(v)
                        case "group_description_updated":
                            let v = TeamLog.GroupDescriptionUpdatedTypeSerializer().deserialize(json)
                            return EventType.groupDescriptionUpdated(v)
                        case "group_join_policy_updated":
                            let v = TeamLog.GroupJoinPolicyUpdatedTypeSerializer().deserialize(json)
                            return EventType.groupJoinPolicyUpdated(v)
                        case "group_moved":
                            let v = TeamLog.GroupMovedTypeSerializer().deserialize(json)
                            return EventType.groupMoved(v)
                        case "group_remove_external_id":
                            let v = TeamLog.GroupRemoveExternalIdTypeSerializer().deserialize(json)
                            return EventType.groupRemoveExternalId(v)
                        case "group_remove_member":
                            let v = TeamLog.GroupRemoveMemberTypeSerializer().deserialize(json)
                            return EventType.groupRemoveMember(v)
                        case "group_rename":
                            let v = TeamLog.GroupRenameTypeSerializer().deserialize(json)
                            return EventType.groupRename(v)
                        case "account_lock_or_unlocked":
                            let v = TeamLog.AccountLockOrUnlockedTypeSerializer().deserialize(json)
                            return EventType.accountLockOrUnlocked(v)
                        case "emm_error":
                            let v = TeamLog.EmmErrorTypeSerializer().deserialize(json)
                            return EventType.emmError(v)
                        case "guest_admin_signed_in_via_trusted_teams":
                            let v = TeamLog.GuestAdminSignedInViaTrustedTeamsTypeSerializer().deserialize(json)
                            return EventType.guestAdminSignedInViaTrustedTeams(v)
                        case "guest_admin_signed_out_via_trusted_teams":
                            let v = TeamLog.GuestAdminSignedOutViaTrustedTeamsTypeSerializer().deserialize(json)
                            return EventType.guestAdminSignedOutViaTrustedTeams(v)
                        case "login_fail":
                            let v = TeamLog.LoginFailTypeSerializer().deserialize(json)
                            return EventType.loginFail(v)
                        case "login_success":
                            let v = TeamLog.LoginSuccessTypeSerializer().deserialize(json)
                            return EventType.loginSuccess(v)
                        case "logout":
                            let v = TeamLog.LogoutTypeSerializer().deserialize(json)
                            return EventType.logout(v)
                        case "reseller_support_session_end":
                            let v = TeamLog.ResellerSupportSessionEndTypeSerializer().deserialize(json)
                            return EventType.resellerSupportSessionEnd(v)
                        case "reseller_support_session_start":
                            let v = TeamLog.ResellerSupportSessionStartTypeSerializer().deserialize(json)
                            return EventType.resellerSupportSessionStart(v)
                        case "sign_in_as_session_end":
                            let v = TeamLog.SignInAsSessionEndTypeSerializer().deserialize(json)
                            return EventType.signInAsSessionEnd(v)
                        case "sign_in_as_session_start":
                            let v = TeamLog.SignInAsSessionStartTypeSerializer().deserialize(json)
                            return EventType.signInAsSessionStart(v)
                        case "sso_error":
                            let v = TeamLog.SsoErrorTypeSerializer().deserialize(json)
                            return EventType.ssoError(v)
                        case "create_team_invite_link":
                            let v = TeamLog.CreateTeamInviteLinkTypeSerializer().deserialize(json)
                            return EventType.createTeamInviteLink(v)
                        case "delete_team_invite_link":
                            let v = TeamLog.DeleteTeamInviteLinkTypeSerializer().deserialize(json)
                            return EventType.deleteTeamInviteLink(v)
                        case "member_add_external_id":
                            let v = TeamLog.MemberAddExternalIdTypeSerializer().deserialize(json)
                            return EventType.memberAddExternalId(v)
                        case "member_add_name":
                            let v = TeamLog.MemberAddNameTypeSerializer().deserialize(json)
                            return EventType.memberAddName(v)
                        case "member_change_admin_role":
                            let v = TeamLog.MemberChangeAdminRoleTypeSerializer().deserialize(json)
                            return EventType.memberChangeAdminRole(v)
                        case "member_change_email":
                            let v = TeamLog.MemberChangeEmailTypeSerializer().deserialize(json)
                            return EventType.memberChangeEmail(v)
                        case "member_change_external_id":
                            let v = TeamLog.MemberChangeExternalIdTypeSerializer().deserialize(json)
                            return EventType.memberChangeExternalId(v)
                        case "member_change_membership_type":
                            let v = TeamLog.MemberChangeMembershipTypeTypeSerializer().deserialize(json)
                            return EventType.memberChangeMembershipType(v)
                        case "member_change_name":
                            let v = TeamLog.MemberChangeNameTypeSerializer().deserialize(json)
                            return EventType.memberChangeName(v)
                        case "member_change_reseller_role":
                            let v = TeamLog.MemberChangeResellerRoleTypeSerializer().deserialize(json)
                            return EventType.memberChangeResellerRole(v)
                        case "member_change_status":
                            let v = TeamLog.MemberChangeStatusTypeSerializer().deserialize(json)
                            return EventType.memberChangeStatus(v)
                        case "member_delete_manual_contacts":
                            let v = TeamLog.MemberDeleteManualContactsTypeSerializer().deserialize(json)
                            return EventType.memberDeleteManualContacts(v)
                        case "member_delete_profile_photo":
                            let v = TeamLog.MemberDeleteProfilePhotoTypeSerializer().deserialize(json)
                            return EventType.memberDeleteProfilePhoto(v)
                        case "member_permanently_delete_account_contents":
                            let v = TeamLog.MemberPermanentlyDeleteAccountContentsTypeSerializer().deserialize(json)
                            return EventType.memberPermanentlyDeleteAccountContents(v)
                        case "member_remove_external_id":
                            let v = TeamLog.MemberRemoveExternalIdTypeSerializer().deserialize(json)
                            return EventType.memberRemoveExternalId(v)
                        case "member_set_profile_photo":
                            let v = TeamLog.MemberSetProfilePhotoTypeSerializer().deserialize(json)
                            return EventType.memberSetProfilePhoto(v)
                        case "member_space_limits_add_custom_quota":
                            let v = TeamLog.MemberSpaceLimitsAddCustomQuotaTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsAddCustomQuota(v)
                        case "member_space_limits_change_custom_quota":
                            let v = TeamLog.MemberSpaceLimitsChangeCustomQuotaTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsChangeCustomQuota(v)
                        case "member_space_limits_change_status":
                            let v = TeamLog.MemberSpaceLimitsChangeStatusTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsChangeStatus(v)
                        case "member_space_limits_remove_custom_quota":
                            let v = TeamLog.MemberSpaceLimitsRemoveCustomQuotaTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsRemoveCustomQuota(v)
                        case "member_suggest":
                            let v = TeamLog.MemberSuggestTypeSerializer().deserialize(json)
                            return EventType.memberSuggest(v)
                        case "member_transfer_account_contents":
                            let v = TeamLog.MemberTransferAccountContentsTypeSerializer().deserialize(json)
                            return EventType.memberTransferAccountContents(v)
                        case "pending_secondary_email_added":
                            let v = TeamLog.PendingSecondaryEmailAddedTypeSerializer().deserialize(json)
                            return EventType.pendingSecondaryEmailAdded(v)
                        case "secondary_email_deleted":
                            let v = TeamLog.SecondaryEmailDeletedTypeSerializer().deserialize(json)
                            return EventType.secondaryEmailDeleted(v)
                        case "secondary_email_verified":
                            let v = TeamLog.SecondaryEmailVerifiedTypeSerializer().deserialize(json)
                            return EventType.secondaryEmailVerified(v)
                        case "secondary_mails_policy_changed":
                            let v = TeamLog.SecondaryMailsPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.secondaryMailsPolicyChanged(v)
                        case "binder_add_page":
                            let v = TeamLog.BinderAddPageTypeSerializer().deserialize(json)
                            return EventType.binderAddPage(v)
                        case "binder_add_section":
                            let v = TeamLog.BinderAddSectionTypeSerializer().deserialize(json)
                            return EventType.binderAddSection(v)
                        case "binder_remove_page":
                            let v = TeamLog.BinderRemovePageTypeSerializer().deserialize(json)
                            return EventType.binderRemovePage(v)
                        case "binder_remove_section":
                            let v = TeamLog.BinderRemoveSectionTypeSerializer().deserialize(json)
                            return EventType.binderRemoveSection(v)
                        case "binder_rename_page":
                            let v = TeamLog.BinderRenamePageTypeSerializer().deserialize(json)
                            return EventType.binderRenamePage(v)
                        case "binder_rename_section":
                            let v = TeamLog.BinderRenameSectionTypeSerializer().deserialize(json)
                            return EventType.binderRenameSection(v)
                        case "binder_reorder_page":
                            let v = TeamLog.BinderReorderPageTypeSerializer().deserialize(json)
                            return EventType.binderReorderPage(v)
                        case "binder_reorder_section":
                            let v = TeamLog.BinderReorderSectionTypeSerializer().deserialize(json)
                            return EventType.binderReorderSection(v)
                        case "paper_content_add_member":
                            let v = TeamLog.PaperContentAddMemberTypeSerializer().deserialize(json)
                            return EventType.paperContentAddMember(v)
                        case "paper_content_add_to_folder":
                            let v = TeamLog.PaperContentAddToFolderTypeSerializer().deserialize(json)
                            return EventType.paperContentAddToFolder(v)
                        case "paper_content_archive":
                            let v = TeamLog.PaperContentArchiveTypeSerializer().deserialize(json)
                            return EventType.paperContentArchive(v)
                        case "paper_content_create":
                            let v = TeamLog.PaperContentCreateTypeSerializer().deserialize(json)
                            return EventType.paperContentCreate(v)
                        case "paper_content_permanently_delete":
                            let v = TeamLog.PaperContentPermanentlyDeleteTypeSerializer().deserialize(json)
                            return EventType.paperContentPermanentlyDelete(v)
                        case "paper_content_remove_from_folder":
                            let v = TeamLog.PaperContentRemoveFromFolderTypeSerializer().deserialize(json)
                            return EventType.paperContentRemoveFromFolder(v)
                        case "paper_content_remove_member":
                            let v = TeamLog.PaperContentRemoveMemberTypeSerializer().deserialize(json)
                            return EventType.paperContentRemoveMember(v)
                        case "paper_content_rename":
                            let v = TeamLog.PaperContentRenameTypeSerializer().deserialize(json)
                            return EventType.paperContentRename(v)
                        case "paper_content_restore":
                            let v = TeamLog.PaperContentRestoreTypeSerializer().deserialize(json)
                            return EventType.paperContentRestore(v)
                        case "paper_doc_add_comment":
                            let v = TeamLog.PaperDocAddCommentTypeSerializer().deserialize(json)
                            return EventType.paperDocAddComment(v)
                        case "paper_doc_change_member_role":
                            let v = TeamLog.PaperDocChangeMemberRoleTypeSerializer().deserialize(json)
                            return EventType.paperDocChangeMemberRole(v)
                        case "paper_doc_change_sharing_policy":
                            let v = TeamLog.PaperDocChangeSharingPolicyTypeSerializer().deserialize(json)
                            return EventType.paperDocChangeSharingPolicy(v)
                        case "paper_doc_change_subscription":
                            let v = TeamLog.PaperDocChangeSubscriptionTypeSerializer().deserialize(json)
                            return EventType.paperDocChangeSubscription(v)
                        case "paper_doc_deleted":
                            let v = TeamLog.PaperDocDeletedTypeSerializer().deserialize(json)
                            return EventType.paperDocDeleted(v)
                        case "paper_doc_delete_comment":
                            let v = TeamLog.PaperDocDeleteCommentTypeSerializer().deserialize(json)
                            return EventType.paperDocDeleteComment(v)
                        case "paper_doc_download":
                            let v = TeamLog.PaperDocDownloadTypeSerializer().deserialize(json)
                            return EventType.paperDocDownload(v)
                        case "paper_doc_edit":
                            let v = TeamLog.PaperDocEditTypeSerializer().deserialize(json)
                            return EventType.paperDocEdit(v)
                        case "paper_doc_edit_comment":
                            let v = TeamLog.PaperDocEditCommentTypeSerializer().deserialize(json)
                            return EventType.paperDocEditComment(v)
                        case "paper_doc_followed":
                            let v = TeamLog.PaperDocFollowedTypeSerializer().deserialize(json)
                            return EventType.paperDocFollowed(v)
                        case "paper_doc_mention":
                            let v = TeamLog.PaperDocMentionTypeSerializer().deserialize(json)
                            return EventType.paperDocMention(v)
                        case "paper_doc_ownership_changed":
                            let v = TeamLog.PaperDocOwnershipChangedTypeSerializer().deserialize(json)
                            return EventType.paperDocOwnershipChanged(v)
                        case "paper_doc_request_access":
                            let v = TeamLog.PaperDocRequestAccessTypeSerializer().deserialize(json)
                            return EventType.paperDocRequestAccess(v)
                        case "paper_doc_resolve_comment":
                            let v = TeamLog.PaperDocResolveCommentTypeSerializer().deserialize(json)
                            return EventType.paperDocResolveComment(v)
                        case "paper_doc_revert":
                            let v = TeamLog.PaperDocRevertTypeSerializer().deserialize(json)
                            return EventType.paperDocRevert(v)
                        case "paper_doc_slack_share":
                            let v = TeamLog.PaperDocSlackShareTypeSerializer().deserialize(json)
                            return EventType.paperDocSlackShare(v)
                        case "paper_doc_team_invite":
                            let v = TeamLog.PaperDocTeamInviteTypeSerializer().deserialize(json)
                            return EventType.paperDocTeamInvite(v)
                        case "paper_doc_trashed":
                            let v = TeamLog.PaperDocTrashedTypeSerializer().deserialize(json)
                            return EventType.paperDocTrashed(v)
                        case "paper_doc_unresolve_comment":
                            let v = TeamLog.PaperDocUnresolveCommentTypeSerializer().deserialize(json)
                            return EventType.paperDocUnresolveComment(v)
                        case "paper_doc_untrashed":
                            let v = TeamLog.PaperDocUntrashedTypeSerializer().deserialize(json)
                            return EventType.paperDocUntrashed(v)
                        case "paper_doc_view":
                            let v = TeamLog.PaperDocViewTypeSerializer().deserialize(json)
                            return EventType.paperDocView(v)
                        case "paper_external_view_allow":
                            let v = TeamLog.PaperExternalViewAllowTypeSerializer().deserialize(json)
                            return EventType.paperExternalViewAllow(v)
                        case "paper_external_view_default_team":
                            let v = TeamLog.PaperExternalViewDefaultTeamTypeSerializer().deserialize(json)
                            return EventType.paperExternalViewDefaultTeam(v)
                        case "paper_external_view_forbid":
                            let v = TeamLog.PaperExternalViewForbidTypeSerializer().deserialize(json)
                            return EventType.paperExternalViewForbid(v)
                        case "paper_folder_change_subscription":
                            let v = TeamLog.PaperFolderChangeSubscriptionTypeSerializer().deserialize(json)
                            return EventType.paperFolderChangeSubscription(v)
                        case "paper_folder_deleted":
                            let v = TeamLog.PaperFolderDeletedTypeSerializer().deserialize(json)
                            return EventType.paperFolderDeleted(v)
                        case "paper_folder_followed":
                            let v = TeamLog.PaperFolderFollowedTypeSerializer().deserialize(json)
                            return EventType.paperFolderFollowed(v)
                        case "paper_folder_team_invite":
                            let v = TeamLog.PaperFolderTeamInviteTypeSerializer().deserialize(json)
                            return EventType.paperFolderTeamInvite(v)
                        case "paper_published_link_change_permission":
                            let v = TeamLog.PaperPublishedLinkChangePermissionTypeSerializer().deserialize(json)
                            return EventType.paperPublishedLinkChangePermission(v)
                        case "paper_published_link_create":
                            let v = TeamLog.PaperPublishedLinkCreateTypeSerializer().deserialize(json)
                            return EventType.paperPublishedLinkCreate(v)
                        case "paper_published_link_disabled":
                            let v = TeamLog.PaperPublishedLinkDisabledTypeSerializer().deserialize(json)
                            return EventType.paperPublishedLinkDisabled(v)
                        case "paper_published_link_view":
                            let v = TeamLog.PaperPublishedLinkViewTypeSerializer().deserialize(json)
                            return EventType.paperPublishedLinkView(v)
                        case "password_change":
                            let v = TeamLog.PasswordChangeTypeSerializer().deserialize(json)
                            return EventType.passwordChange(v)
                        case "password_reset":
                            let v = TeamLog.PasswordResetTypeSerializer().deserialize(json)
                            return EventType.passwordReset(v)
                        case "password_reset_all":
                            let v = TeamLog.PasswordResetAllTypeSerializer().deserialize(json)
                            return EventType.passwordResetAll(v)
                        case "classification_create_report":
                            let v = TeamLog.ClassificationCreateReportTypeSerializer().deserialize(json)
                            return EventType.classificationCreateReport(v)
                        case "classification_create_report_fail":
                            let v = TeamLog.ClassificationCreateReportFailTypeSerializer().deserialize(json)
                            return EventType.classificationCreateReportFail(v)
                        case "emm_create_exceptions_report":
                            let v = TeamLog.EmmCreateExceptionsReportTypeSerializer().deserialize(json)
                            return EventType.emmCreateExceptionsReport(v)
                        case "emm_create_usage_report":
                            let v = TeamLog.EmmCreateUsageReportTypeSerializer().deserialize(json)
                            return EventType.emmCreateUsageReport(v)
                        case "export_members_report":
                            let v = TeamLog.ExportMembersReportTypeSerializer().deserialize(json)
                            return EventType.exportMembersReport(v)
                        case "export_members_report_fail":
                            let v = TeamLog.ExportMembersReportFailTypeSerializer().deserialize(json)
                            return EventType.exportMembersReportFail(v)
                        case "external_sharing_create_report":
                            let v = TeamLog.ExternalSharingCreateReportTypeSerializer().deserialize(json)
                            return EventType.externalSharingCreateReport(v)
                        case "external_sharing_report_failed":
                            let v = TeamLog.ExternalSharingReportFailedTypeSerializer().deserialize(json)
                            return EventType.externalSharingReportFailed(v)
                        case "no_expiration_link_gen_create_report":
                            let v = TeamLog.NoExpirationLinkGenCreateReportTypeSerializer().deserialize(json)
                            return EventType.noExpirationLinkGenCreateReport(v)
                        case "no_expiration_link_gen_report_failed":
                            let v = TeamLog.NoExpirationLinkGenReportFailedTypeSerializer().deserialize(json)
                            return EventType.noExpirationLinkGenReportFailed(v)
                        case "no_password_link_gen_create_report":
                            let v = TeamLog.NoPasswordLinkGenCreateReportTypeSerializer().deserialize(json)
                            return EventType.noPasswordLinkGenCreateReport(v)
                        case "no_password_link_gen_report_failed":
                            let v = TeamLog.NoPasswordLinkGenReportFailedTypeSerializer().deserialize(json)
                            return EventType.noPasswordLinkGenReportFailed(v)
                        case "no_password_link_view_create_report":
                            let v = TeamLog.NoPasswordLinkViewCreateReportTypeSerializer().deserialize(json)
                            return EventType.noPasswordLinkViewCreateReport(v)
                        case "no_password_link_view_report_failed":
                            let v = TeamLog.NoPasswordLinkViewReportFailedTypeSerializer().deserialize(json)
                            return EventType.noPasswordLinkViewReportFailed(v)
                        case "outdated_link_view_create_report":
                            let v = TeamLog.OutdatedLinkViewCreateReportTypeSerializer().deserialize(json)
                            return EventType.outdatedLinkViewCreateReport(v)
                        case "outdated_link_view_report_failed":
                            let v = TeamLog.OutdatedLinkViewReportFailedTypeSerializer().deserialize(json)
                            return EventType.outdatedLinkViewReportFailed(v)
                        case "paper_admin_export_start":
                            let v = TeamLog.PaperAdminExportStartTypeSerializer().deserialize(json)
                            return EventType.paperAdminExportStart(v)
                        case "smart_sync_create_admin_privilege_report":
                            let v = TeamLog.SmartSyncCreateAdminPrivilegeReportTypeSerializer().deserialize(json)
                            return EventType.smartSyncCreateAdminPrivilegeReport(v)
                        case "team_activity_create_report":
                            let v = TeamLog.TeamActivityCreateReportTypeSerializer().deserialize(json)
                            return EventType.teamActivityCreateReport(v)
                        case "team_activity_create_report_fail":
                            let v = TeamLog.TeamActivityCreateReportFailTypeSerializer().deserialize(json)
                            return EventType.teamActivityCreateReportFail(v)
                        case "collection_share":
                            let v = TeamLog.CollectionShareTypeSerializer().deserialize(json)
                            return EventType.collectionShare(v)
                        case "file_transfers_file_add":
                            let v = TeamLog.FileTransfersFileAddTypeSerializer().deserialize(json)
                            return EventType.fileTransfersFileAdd(v)
                        case "file_transfers_transfer_delete":
                            let v = TeamLog.FileTransfersTransferDeleteTypeSerializer().deserialize(json)
                            return EventType.fileTransfersTransferDelete(v)
                        case "file_transfers_transfer_download":
                            let v = TeamLog.FileTransfersTransferDownloadTypeSerializer().deserialize(json)
                            return EventType.fileTransfersTransferDownload(v)
                        case "file_transfers_transfer_send":
                            let v = TeamLog.FileTransfersTransferSendTypeSerializer().deserialize(json)
                            return EventType.fileTransfersTransferSend(v)
                        case "file_transfers_transfer_view":
                            let v = TeamLog.FileTransfersTransferViewTypeSerializer().deserialize(json)
                            return EventType.fileTransfersTransferView(v)
                        case "note_acl_invite_only":
                            let v = TeamLog.NoteAclInviteOnlyTypeSerializer().deserialize(json)
                            return EventType.noteAclInviteOnly(v)
                        case "note_acl_link":
                            let v = TeamLog.NoteAclLinkTypeSerializer().deserialize(json)
                            return EventType.noteAclLink(v)
                        case "note_acl_team_link":
                            let v = TeamLog.NoteAclTeamLinkTypeSerializer().deserialize(json)
                            return EventType.noteAclTeamLink(v)
                        case "note_shared":
                            let v = TeamLog.NoteSharedTypeSerializer().deserialize(json)
                            return EventType.noteShared(v)
                        case "note_share_receive":
                            let v = TeamLog.NoteShareReceiveTypeSerializer().deserialize(json)
                            return EventType.noteShareReceive(v)
                        case "open_note_shared":
                            let v = TeamLog.OpenNoteSharedTypeSerializer().deserialize(json)
                            return EventType.openNoteShared(v)
                        case "sf_add_group":
                            let v = TeamLog.SfAddGroupTypeSerializer().deserialize(json)
                            return EventType.sfAddGroup(v)
                        case "sf_allow_non_members_to_view_shared_links":
                            let v = TeamLog.SfAllowNonMembersToViewSharedLinksTypeSerializer().deserialize(json)
                            return EventType.sfAllowNonMembersToViewSharedLinks(v)
                        case "sf_external_invite_warn":
                            let v = TeamLog.SfExternalInviteWarnTypeSerializer().deserialize(json)
                            return EventType.sfExternalInviteWarn(v)
                        case "sf_fb_invite":
                            let v = TeamLog.SfFbInviteTypeSerializer().deserialize(json)
                            return EventType.sfFbInvite(v)
                        case "sf_fb_invite_change_role":
                            let v = TeamLog.SfFbInviteChangeRoleTypeSerializer().deserialize(json)
                            return EventType.sfFbInviteChangeRole(v)
                        case "sf_fb_uninvite":
                            let v = TeamLog.SfFbUninviteTypeSerializer().deserialize(json)
                            return EventType.sfFbUninvite(v)
                        case "sf_invite_group":
                            let v = TeamLog.SfInviteGroupTypeSerializer().deserialize(json)
                            return EventType.sfInviteGroup(v)
                        case "sf_team_grant_access":
                            let v = TeamLog.SfTeamGrantAccessTypeSerializer().deserialize(json)
                            return EventType.sfTeamGrantAccess(v)
                        case "sf_team_invite":
                            let v = TeamLog.SfTeamInviteTypeSerializer().deserialize(json)
                            return EventType.sfTeamInvite(v)
                        case "sf_team_invite_change_role":
                            let v = TeamLog.SfTeamInviteChangeRoleTypeSerializer().deserialize(json)
                            return EventType.sfTeamInviteChangeRole(v)
                        case "sf_team_join":
                            let v = TeamLog.SfTeamJoinTypeSerializer().deserialize(json)
                            return EventType.sfTeamJoin(v)
                        case "sf_team_join_from_oob_link":
                            let v = TeamLog.SfTeamJoinFromOobLinkTypeSerializer().deserialize(json)
                            return EventType.sfTeamJoinFromOobLink(v)
                        case "sf_team_uninvite":
                            let v = TeamLog.SfTeamUninviteTypeSerializer().deserialize(json)
                            return EventType.sfTeamUninvite(v)
                        case "shared_content_add_invitees":
                            let v = TeamLog.SharedContentAddInviteesTypeSerializer().deserialize(json)
                            return EventType.sharedContentAddInvitees(v)
                        case "shared_content_add_link_expiry":
                            let v = TeamLog.SharedContentAddLinkExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedContentAddLinkExpiry(v)
                        case "shared_content_add_link_password":
                            let v = TeamLog.SharedContentAddLinkPasswordTypeSerializer().deserialize(json)
                            return EventType.sharedContentAddLinkPassword(v)
                        case "shared_content_add_member":
                            let v = TeamLog.SharedContentAddMemberTypeSerializer().deserialize(json)
                            return EventType.sharedContentAddMember(v)
                        case "shared_content_change_downloads_policy":
                            let v = TeamLog.SharedContentChangeDownloadsPolicyTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeDownloadsPolicy(v)
                        case "shared_content_change_invitee_role":
                            let v = TeamLog.SharedContentChangeInviteeRoleTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeInviteeRole(v)
                        case "shared_content_change_link_audience":
                            let v = TeamLog.SharedContentChangeLinkAudienceTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeLinkAudience(v)
                        case "shared_content_change_link_expiry":
                            let v = TeamLog.SharedContentChangeLinkExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeLinkExpiry(v)
                        case "shared_content_change_link_password":
                            let v = TeamLog.SharedContentChangeLinkPasswordTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeLinkPassword(v)
                        case "shared_content_change_member_role":
                            let v = TeamLog.SharedContentChangeMemberRoleTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeMemberRole(v)
                        case "shared_content_change_viewer_info_policy":
                            let v = TeamLog.SharedContentChangeViewerInfoPolicyTypeSerializer().deserialize(json)
                            return EventType.sharedContentChangeViewerInfoPolicy(v)
                        case "shared_content_claim_invitation":
                            let v = TeamLog.SharedContentClaimInvitationTypeSerializer().deserialize(json)
                            return EventType.sharedContentClaimInvitation(v)
                        case "shared_content_copy":
                            let v = TeamLog.SharedContentCopyTypeSerializer().deserialize(json)
                            return EventType.sharedContentCopy(v)
                        case "shared_content_download":
                            let v = TeamLog.SharedContentDownloadTypeSerializer().deserialize(json)
                            return EventType.sharedContentDownload(v)
                        case "shared_content_relinquish_membership":
                            let v = TeamLog.SharedContentRelinquishMembershipTypeSerializer().deserialize(json)
                            return EventType.sharedContentRelinquishMembership(v)
                        case "shared_content_remove_invitees":
                            let v = TeamLog.SharedContentRemoveInviteesTypeSerializer().deserialize(json)
                            return EventType.sharedContentRemoveInvitees(v)
                        case "shared_content_remove_link_expiry":
                            let v = TeamLog.SharedContentRemoveLinkExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedContentRemoveLinkExpiry(v)
                        case "shared_content_remove_link_password":
                            let v = TeamLog.SharedContentRemoveLinkPasswordTypeSerializer().deserialize(json)
                            return EventType.sharedContentRemoveLinkPassword(v)
                        case "shared_content_remove_member":
                            let v = TeamLog.SharedContentRemoveMemberTypeSerializer().deserialize(json)
                            return EventType.sharedContentRemoveMember(v)
                        case "shared_content_request_access":
                            let v = TeamLog.SharedContentRequestAccessTypeSerializer().deserialize(json)
                            return EventType.sharedContentRequestAccess(v)
                        case "shared_content_restore_invitees":
                            let v = TeamLog.SharedContentRestoreInviteesTypeSerializer().deserialize(json)
                            return EventType.sharedContentRestoreInvitees(v)
                        case "shared_content_restore_member":
                            let v = TeamLog.SharedContentRestoreMemberTypeSerializer().deserialize(json)
                            return EventType.sharedContentRestoreMember(v)
                        case "shared_content_unshare":
                            let v = TeamLog.SharedContentUnshareTypeSerializer().deserialize(json)
                            return EventType.sharedContentUnshare(v)
                        case "shared_content_view":
                            let v = TeamLog.SharedContentViewTypeSerializer().deserialize(json)
                            return EventType.sharedContentView(v)
                        case "shared_folder_change_link_policy":
                            let v = TeamLog.SharedFolderChangeLinkPolicyTypeSerializer().deserialize(json)
                            return EventType.sharedFolderChangeLinkPolicy(v)
                        case "shared_folder_change_members_inheritance_policy":
                            let v = TeamLog.SharedFolderChangeMembersInheritancePolicyTypeSerializer().deserialize(json)
                            return EventType.sharedFolderChangeMembersInheritancePolicy(v)
                        case "shared_folder_change_members_management_policy":
                            let v = TeamLog.SharedFolderChangeMembersManagementPolicyTypeSerializer().deserialize(json)
                            return EventType.sharedFolderChangeMembersManagementPolicy(v)
                        case "shared_folder_change_members_policy":
                            let v = TeamLog.SharedFolderChangeMembersPolicyTypeSerializer().deserialize(json)
                            return EventType.sharedFolderChangeMembersPolicy(v)
                        case "shared_folder_create":
                            let v = TeamLog.SharedFolderCreateTypeSerializer().deserialize(json)
                            return EventType.sharedFolderCreate(v)
                        case "shared_folder_decline_invitation":
                            let v = TeamLog.SharedFolderDeclineInvitationTypeSerializer().deserialize(json)
                            return EventType.sharedFolderDeclineInvitation(v)
                        case "shared_folder_mount":
                            let v = TeamLog.SharedFolderMountTypeSerializer().deserialize(json)
                            return EventType.sharedFolderMount(v)
                        case "shared_folder_nest":
                            let v = TeamLog.SharedFolderNestTypeSerializer().deserialize(json)
                            return EventType.sharedFolderNest(v)
                        case "shared_folder_transfer_ownership":
                            let v = TeamLog.SharedFolderTransferOwnershipTypeSerializer().deserialize(json)
                            return EventType.sharedFolderTransferOwnership(v)
                        case "shared_folder_unmount":
                            let v = TeamLog.SharedFolderUnmountTypeSerializer().deserialize(json)
                            return EventType.sharedFolderUnmount(v)
                        case "shared_link_add_expiry":
                            let v = TeamLog.SharedLinkAddExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedLinkAddExpiry(v)
                        case "shared_link_change_expiry":
                            let v = TeamLog.SharedLinkChangeExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedLinkChangeExpiry(v)
                        case "shared_link_change_visibility":
                            let v = TeamLog.SharedLinkChangeVisibilityTypeSerializer().deserialize(json)
                            return EventType.sharedLinkChangeVisibility(v)
                        case "shared_link_copy":
                            let v = TeamLog.SharedLinkCopyTypeSerializer().deserialize(json)
                            return EventType.sharedLinkCopy(v)
                        case "shared_link_create":
                            let v = TeamLog.SharedLinkCreateTypeSerializer().deserialize(json)
                            return EventType.sharedLinkCreate(v)
                        case "shared_link_disable":
                            let v = TeamLog.SharedLinkDisableTypeSerializer().deserialize(json)
                            return EventType.sharedLinkDisable(v)
                        case "shared_link_download":
                            let v = TeamLog.SharedLinkDownloadTypeSerializer().deserialize(json)
                            return EventType.sharedLinkDownload(v)
                        case "shared_link_remove_expiry":
                            let v = TeamLog.SharedLinkRemoveExpiryTypeSerializer().deserialize(json)
                            return EventType.sharedLinkRemoveExpiry(v)
                        case "shared_link_settings_add_expiration":
                            let v = TeamLog.SharedLinkSettingsAddExpirationTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsAddExpiration(v)
                        case "shared_link_settings_add_password":
                            let v = TeamLog.SharedLinkSettingsAddPasswordTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsAddPassword(v)
                        case "shared_link_settings_allow_download_disabled":
                            let v = TeamLog.SharedLinkSettingsAllowDownloadDisabledTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsAllowDownloadDisabled(v)
                        case "shared_link_settings_allow_download_enabled":
                            let v = TeamLog.SharedLinkSettingsAllowDownloadEnabledTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsAllowDownloadEnabled(v)
                        case "shared_link_settings_change_audience":
                            let v = TeamLog.SharedLinkSettingsChangeAudienceTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsChangeAudience(v)
                        case "shared_link_settings_change_expiration":
                            let v = TeamLog.SharedLinkSettingsChangeExpirationTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsChangeExpiration(v)
                        case "shared_link_settings_change_password":
                            let v = TeamLog.SharedLinkSettingsChangePasswordTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsChangePassword(v)
                        case "shared_link_settings_remove_expiration":
                            let v = TeamLog.SharedLinkSettingsRemoveExpirationTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsRemoveExpiration(v)
                        case "shared_link_settings_remove_password":
                            let v = TeamLog.SharedLinkSettingsRemovePasswordTypeSerializer().deserialize(json)
                            return EventType.sharedLinkSettingsRemovePassword(v)
                        case "shared_link_share":
                            let v = TeamLog.SharedLinkShareTypeSerializer().deserialize(json)
                            return EventType.sharedLinkShare(v)
                        case "shared_link_view":
                            let v = TeamLog.SharedLinkViewTypeSerializer().deserialize(json)
                            return EventType.sharedLinkView(v)
                        case "shared_note_opened":
                            let v = TeamLog.SharedNoteOpenedTypeSerializer().deserialize(json)
                            return EventType.sharedNoteOpened(v)
                        case "shmodel_disable_downloads":
                            let v = TeamLog.ShmodelDisableDownloadsTypeSerializer().deserialize(json)
                            return EventType.shmodelDisableDownloads(v)
                        case "shmodel_enable_downloads":
                            let v = TeamLog.ShmodelEnableDownloadsTypeSerializer().deserialize(json)
                            return EventType.shmodelEnableDownloads(v)
                        case "shmodel_group_share":
                            let v = TeamLog.ShmodelGroupShareTypeSerializer().deserialize(json)
                            return EventType.shmodelGroupShare(v)
                        case "showcase_access_granted":
                            let v = TeamLog.ShowcaseAccessGrantedTypeSerializer().deserialize(json)
                            return EventType.showcaseAccessGranted(v)
                        case "showcase_add_member":
                            let v = TeamLog.ShowcaseAddMemberTypeSerializer().deserialize(json)
                            return EventType.showcaseAddMember(v)
                        case "showcase_archived":
                            let v = TeamLog.ShowcaseArchivedTypeSerializer().deserialize(json)
                            return EventType.showcaseArchived(v)
                        case "showcase_created":
                            let v = TeamLog.ShowcaseCreatedTypeSerializer().deserialize(json)
                            return EventType.showcaseCreated(v)
                        case "showcase_delete_comment":
                            let v = TeamLog.ShowcaseDeleteCommentTypeSerializer().deserialize(json)
                            return EventType.showcaseDeleteComment(v)
                        case "showcase_edited":
                            let v = TeamLog.ShowcaseEditedTypeSerializer().deserialize(json)
                            return EventType.showcaseEdited(v)
                        case "showcase_edit_comment":
                            let v = TeamLog.ShowcaseEditCommentTypeSerializer().deserialize(json)
                            return EventType.showcaseEditComment(v)
                        case "showcase_file_added":
                            let v = TeamLog.ShowcaseFileAddedTypeSerializer().deserialize(json)
                            return EventType.showcaseFileAdded(v)
                        case "showcase_file_download":
                            let v = TeamLog.ShowcaseFileDownloadTypeSerializer().deserialize(json)
                            return EventType.showcaseFileDownload(v)
                        case "showcase_file_removed":
                            let v = TeamLog.ShowcaseFileRemovedTypeSerializer().deserialize(json)
                            return EventType.showcaseFileRemoved(v)
                        case "showcase_file_view":
                            let v = TeamLog.ShowcaseFileViewTypeSerializer().deserialize(json)
                            return EventType.showcaseFileView(v)
                        case "showcase_permanently_deleted":
                            let v = TeamLog.ShowcasePermanentlyDeletedTypeSerializer().deserialize(json)
                            return EventType.showcasePermanentlyDeleted(v)
                        case "showcase_post_comment":
                            let v = TeamLog.ShowcasePostCommentTypeSerializer().deserialize(json)
                            return EventType.showcasePostComment(v)
                        case "showcase_remove_member":
                            let v = TeamLog.ShowcaseRemoveMemberTypeSerializer().deserialize(json)
                            return EventType.showcaseRemoveMember(v)
                        case "showcase_renamed":
                            let v = TeamLog.ShowcaseRenamedTypeSerializer().deserialize(json)
                            return EventType.showcaseRenamed(v)
                        case "showcase_request_access":
                            let v = TeamLog.ShowcaseRequestAccessTypeSerializer().deserialize(json)
                            return EventType.showcaseRequestAccess(v)
                        case "showcase_resolve_comment":
                            let v = TeamLog.ShowcaseResolveCommentTypeSerializer().deserialize(json)
                            return EventType.showcaseResolveComment(v)
                        case "showcase_restored":
                            let v = TeamLog.ShowcaseRestoredTypeSerializer().deserialize(json)
                            return EventType.showcaseRestored(v)
                        case "showcase_trashed":
                            let v = TeamLog.ShowcaseTrashedTypeSerializer().deserialize(json)
                            return EventType.showcaseTrashed(v)
                        case "showcase_trashed_deprecated":
                            let v = TeamLog.ShowcaseTrashedDeprecatedTypeSerializer().deserialize(json)
                            return EventType.showcaseTrashedDeprecated(v)
                        case "showcase_unresolve_comment":
                            let v = TeamLog.ShowcaseUnresolveCommentTypeSerializer().deserialize(json)
                            return EventType.showcaseUnresolveComment(v)
                        case "showcase_untrashed":
                            let v = TeamLog.ShowcaseUntrashedTypeSerializer().deserialize(json)
                            return EventType.showcaseUntrashed(v)
                        case "showcase_untrashed_deprecated":
                            let v = TeamLog.ShowcaseUntrashedDeprecatedTypeSerializer().deserialize(json)
                            return EventType.showcaseUntrashedDeprecated(v)
                        case "showcase_view":
                            let v = TeamLog.ShowcaseViewTypeSerializer().deserialize(json)
                            return EventType.showcaseView(v)
                        case "sso_add_cert":
                            let v = TeamLog.SsoAddCertTypeSerializer().deserialize(json)
                            return EventType.ssoAddCert(v)
                        case "sso_add_login_url":
                            let v = TeamLog.SsoAddLoginUrlTypeSerializer().deserialize(json)
                            return EventType.ssoAddLoginUrl(v)
                        case "sso_add_logout_url":
                            let v = TeamLog.SsoAddLogoutUrlTypeSerializer().deserialize(json)
                            return EventType.ssoAddLogoutUrl(v)
                        case "sso_change_cert":
                            let v = TeamLog.SsoChangeCertTypeSerializer().deserialize(json)
                            return EventType.ssoChangeCert(v)
                        case "sso_change_login_url":
                            let v = TeamLog.SsoChangeLoginUrlTypeSerializer().deserialize(json)
                            return EventType.ssoChangeLoginUrl(v)
                        case "sso_change_logout_url":
                            let v = TeamLog.SsoChangeLogoutUrlTypeSerializer().deserialize(json)
                            return EventType.ssoChangeLogoutUrl(v)
                        case "sso_change_saml_identity_mode":
                            let v = TeamLog.SsoChangeSamlIdentityModeTypeSerializer().deserialize(json)
                            return EventType.ssoChangeSamlIdentityMode(v)
                        case "sso_remove_cert":
                            let v = TeamLog.SsoRemoveCertTypeSerializer().deserialize(json)
                            return EventType.ssoRemoveCert(v)
                        case "sso_remove_login_url":
                            let v = TeamLog.SsoRemoveLoginUrlTypeSerializer().deserialize(json)
                            return EventType.ssoRemoveLoginUrl(v)
                        case "sso_remove_logout_url":
                            let v = TeamLog.SsoRemoveLogoutUrlTypeSerializer().deserialize(json)
                            return EventType.ssoRemoveLogoutUrl(v)
                        case "team_folder_change_status":
                            let v = TeamLog.TeamFolderChangeStatusTypeSerializer().deserialize(json)
                            return EventType.teamFolderChangeStatus(v)
                        case "team_folder_create":
                            let v = TeamLog.TeamFolderCreateTypeSerializer().deserialize(json)
                            return EventType.teamFolderCreate(v)
                        case "team_folder_downgrade":
                            let v = TeamLog.TeamFolderDowngradeTypeSerializer().deserialize(json)
                            return EventType.teamFolderDowngrade(v)
                        case "team_folder_permanently_delete":
                            let v = TeamLog.TeamFolderPermanentlyDeleteTypeSerializer().deserialize(json)
                            return EventType.teamFolderPermanentlyDelete(v)
                        case "team_folder_rename":
                            let v = TeamLog.TeamFolderRenameTypeSerializer().deserialize(json)
                            return EventType.teamFolderRename(v)
                        case "team_selective_sync_settings_changed":
                            let v = TeamLog.TeamSelectiveSyncSettingsChangedTypeSerializer().deserialize(json)
                            return EventType.teamSelectiveSyncSettingsChanged(v)
                        case "account_capture_change_policy":
                            let v = TeamLog.AccountCaptureChangePolicyTypeSerializer().deserialize(json)
                            return EventType.accountCaptureChangePolicy(v)
                        case "admin_email_reminders_changed":
                            let v = TeamLog.AdminEmailRemindersChangedTypeSerializer().deserialize(json)
                            return EventType.adminEmailRemindersChanged(v)
                        case "allow_download_disabled":
                            let v = TeamLog.AllowDownloadDisabledTypeSerializer().deserialize(json)
                            return EventType.allowDownloadDisabled(v)
                        case "allow_download_enabled":
                            let v = TeamLog.AllowDownloadEnabledTypeSerializer().deserialize(json)
                            return EventType.allowDownloadEnabled(v)
                        case "app_permissions_changed":
                            let v = TeamLog.AppPermissionsChangedTypeSerializer().deserialize(json)
                            return EventType.appPermissionsChanged(v)
                        case "camera_uploads_policy_changed":
                            let v = TeamLog.CameraUploadsPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.cameraUploadsPolicyChanged(v)
                        case "capture_transcript_policy_changed":
                            let v = TeamLog.CaptureTranscriptPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.captureTranscriptPolicyChanged(v)
                        case "classification_change_policy":
                            let v = TeamLog.ClassificationChangePolicyTypeSerializer().deserialize(json)
                            return EventType.classificationChangePolicy(v)
                        case "computer_backup_policy_changed":
                            let v = TeamLog.ComputerBackupPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.computerBackupPolicyChanged(v)
                        case "content_administration_policy_changed":
                            let v = TeamLog.ContentAdministrationPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.contentAdministrationPolicyChanged(v)
                        case "data_placement_restriction_change_policy":
                            let v = TeamLog.DataPlacementRestrictionChangePolicyTypeSerializer().deserialize(json)
                            return EventType.dataPlacementRestrictionChangePolicy(v)
                        case "data_placement_restriction_satisfy_policy":
                            let v = TeamLog.DataPlacementRestrictionSatisfyPolicyTypeSerializer().deserialize(json)
                            return EventType.dataPlacementRestrictionSatisfyPolicy(v)
                        case "device_approvals_add_exception":
                            let v = TeamLog.DeviceApprovalsAddExceptionTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsAddException(v)
                        case "device_approvals_change_desktop_policy":
                            let v = TeamLog.DeviceApprovalsChangeDesktopPolicyTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsChangeDesktopPolicy(v)
                        case "device_approvals_change_mobile_policy":
                            let v = TeamLog.DeviceApprovalsChangeMobilePolicyTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsChangeMobilePolicy(v)
                        case "device_approvals_change_overage_action":
                            let v = TeamLog.DeviceApprovalsChangeOverageActionTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsChangeOverageAction(v)
                        case "device_approvals_change_unlink_action":
                            let v = TeamLog.DeviceApprovalsChangeUnlinkActionTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsChangeUnlinkAction(v)
                        case "device_approvals_remove_exception":
                            let v = TeamLog.DeviceApprovalsRemoveExceptionTypeSerializer().deserialize(json)
                            return EventType.deviceApprovalsRemoveException(v)
                        case "directory_restrictions_add_members":
                            let v = TeamLog.DirectoryRestrictionsAddMembersTypeSerializer().deserialize(json)
                            return EventType.directoryRestrictionsAddMembers(v)
                        case "directory_restrictions_remove_members":
                            let v = TeamLog.DirectoryRestrictionsRemoveMembersTypeSerializer().deserialize(json)
                            return EventType.directoryRestrictionsRemoveMembers(v)
                        case "dropbox_passwords_policy_changed":
                            let v = TeamLog.DropboxPasswordsPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.dropboxPasswordsPolicyChanged(v)
                        case "email_ingest_policy_changed":
                            let v = TeamLog.EmailIngestPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.emailIngestPolicyChanged(v)
                        case "emm_add_exception":
                            let v = TeamLog.EmmAddExceptionTypeSerializer().deserialize(json)
                            return EventType.emmAddException(v)
                        case "emm_change_policy":
                            let v = TeamLog.EmmChangePolicyTypeSerializer().deserialize(json)
                            return EventType.emmChangePolicy(v)
                        case "emm_remove_exception":
                            let v = TeamLog.EmmRemoveExceptionTypeSerializer().deserialize(json)
                            return EventType.emmRemoveException(v)
                        case "extended_version_history_change_policy":
                            let v = TeamLog.ExtendedVersionHistoryChangePolicyTypeSerializer().deserialize(json)
                            return EventType.extendedVersionHistoryChangePolicy(v)
                        case "external_drive_backup_policy_changed":
                            let v = TeamLog.ExternalDriveBackupPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.externalDriveBackupPolicyChanged(v)
                        case "file_comments_change_policy":
                            let v = TeamLog.FileCommentsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.fileCommentsChangePolicy(v)
                        case "file_locking_policy_changed":
                            let v = TeamLog.FileLockingPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.fileLockingPolicyChanged(v)
                        case "file_provider_migration_policy_changed":
                            let v = TeamLog.FileProviderMigrationPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.fileProviderMigrationPolicyChanged(v)
                        case "file_requests_change_policy":
                            let v = TeamLog.FileRequestsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.fileRequestsChangePolicy(v)
                        case "file_requests_emails_enabled":
                            let v = TeamLog.FileRequestsEmailsEnabledTypeSerializer().deserialize(json)
                            return EventType.fileRequestsEmailsEnabled(v)
                        case "file_requests_emails_restricted_to_team_only":
                            let v = TeamLog.FileRequestsEmailsRestrictedToTeamOnlyTypeSerializer().deserialize(json)
                            return EventType.fileRequestsEmailsRestrictedToTeamOnly(v)
                        case "file_transfers_policy_changed":
                            let v = TeamLog.FileTransfersPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.fileTransfersPolicyChanged(v)
                        case "folder_link_restriction_policy_changed":
                            let v = TeamLog.FolderLinkRestrictionPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.folderLinkRestrictionPolicyChanged(v)
                        case "google_sso_change_policy":
                            let v = TeamLog.GoogleSsoChangePolicyTypeSerializer().deserialize(json)
                            return EventType.googleSsoChangePolicy(v)
                        case "group_user_management_change_policy":
                            let v = TeamLog.GroupUserManagementChangePolicyTypeSerializer().deserialize(json)
                            return EventType.groupUserManagementChangePolicy(v)
                        case "integration_policy_changed":
                            let v = TeamLog.IntegrationPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.integrationPolicyChanged(v)
                        case "invite_acceptance_email_policy_changed":
                            let v = TeamLog.InviteAcceptanceEmailPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.inviteAcceptanceEmailPolicyChanged(v)
                        case "member_requests_change_policy":
                            let v = TeamLog.MemberRequestsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.memberRequestsChangePolicy(v)
                        case "member_send_invite_policy_changed":
                            let v = TeamLog.MemberSendInvitePolicyChangedTypeSerializer().deserialize(json)
                            return EventType.memberSendInvitePolicyChanged(v)
                        case "member_space_limits_add_exception":
                            let v = TeamLog.MemberSpaceLimitsAddExceptionTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsAddException(v)
                        case "member_space_limits_change_caps_type_policy":
                            let v = TeamLog.MemberSpaceLimitsChangeCapsTypePolicyTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsChangeCapsTypePolicy(v)
                        case "member_space_limits_change_policy":
                            let v = TeamLog.MemberSpaceLimitsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsChangePolicy(v)
                        case "member_space_limits_remove_exception":
                            let v = TeamLog.MemberSpaceLimitsRemoveExceptionTypeSerializer().deserialize(json)
                            return EventType.memberSpaceLimitsRemoveException(v)
                        case "member_suggestions_change_policy":
                            let v = TeamLog.MemberSuggestionsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.memberSuggestionsChangePolicy(v)
                        case "microsoft_office_addin_change_policy":
                            let v = TeamLog.MicrosoftOfficeAddinChangePolicyTypeSerializer().deserialize(json)
                            return EventType.microsoftOfficeAddinChangePolicy(v)
                        case "network_control_change_policy":
                            let v = TeamLog.NetworkControlChangePolicyTypeSerializer().deserialize(json)
                            return EventType.networkControlChangePolicy(v)
                        case "paper_change_deployment_policy":
                            let v = TeamLog.PaperChangeDeploymentPolicyTypeSerializer().deserialize(json)
                            return EventType.paperChangeDeploymentPolicy(v)
                        case "paper_change_member_link_policy":
                            let v = TeamLog.PaperChangeMemberLinkPolicyTypeSerializer().deserialize(json)
                            return EventType.paperChangeMemberLinkPolicy(v)
                        case "paper_change_member_policy":
                            let v = TeamLog.PaperChangeMemberPolicyTypeSerializer().deserialize(json)
                            return EventType.paperChangeMemberPolicy(v)
                        case "paper_change_policy":
                            let v = TeamLog.PaperChangePolicyTypeSerializer().deserialize(json)
                            return EventType.paperChangePolicy(v)
                        case "paper_default_folder_policy_changed":
                            let v = TeamLog.PaperDefaultFolderPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.paperDefaultFolderPolicyChanged(v)
                        case "paper_desktop_policy_changed":
                            let v = TeamLog.PaperDesktopPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.paperDesktopPolicyChanged(v)
                        case "paper_enabled_users_group_addition":
                            let v = TeamLog.PaperEnabledUsersGroupAdditionTypeSerializer().deserialize(json)
                            return EventType.paperEnabledUsersGroupAddition(v)
                        case "paper_enabled_users_group_removal":
                            let v = TeamLog.PaperEnabledUsersGroupRemovalTypeSerializer().deserialize(json)
                            return EventType.paperEnabledUsersGroupRemoval(v)
                        case "password_strength_requirements_change_policy":
                            let v = TeamLog.PasswordStrengthRequirementsChangePolicyTypeSerializer().deserialize(json)
                            return EventType.passwordStrengthRequirementsChangePolicy(v)
                        case "permanent_delete_change_policy":
                            let v = TeamLog.PermanentDeleteChangePolicyTypeSerializer().deserialize(json)
                            return EventType.permanentDeleteChangePolicy(v)
                        case "reseller_support_change_policy":
                            let v = TeamLog.ResellerSupportChangePolicyTypeSerializer().deserialize(json)
                            return EventType.resellerSupportChangePolicy(v)
                        case "rewind_policy_changed":
                            let v = TeamLog.RewindPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.rewindPolicyChanged(v)
                        case "send_for_signature_policy_changed":
                            let v = TeamLog.SendForSignaturePolicyChangedTypeSerializer().deserialize(json)
                            return EventType.sendForSignaturePolicyChanged(v)
                        case "sharing_change_folder_join_policy":
                            let v = TeamLog.SharingChangeFolderJoinPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeFolderJoinPolicy(v)
                        case "sharing_change_link_allow_change_expiration_policy":
                            let v = TeamLog.SharingChangeLinkAllowChangeExpirationPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeLinkAllowChangeExpirationPolicy(v)
                        case "sharing_change_link_default_expiration_policy":
                            let v = TeamLog.SharingChangeLinkDefaultExpirationPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeLinkDefaultExpirationPolicy(v)
                        case "sharing_change_link_enforce_password_policy":
                            let v = TeamLog.SharingChangeLinkEnforcePasswordPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeLinkEnforcePasswordPolicy(v)
                        case "sharing_change_link_policy":
                            let v = TeamLog.SharingChangeLinkPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeLinkPolicy(v)
                        case "sharing_change_member_policy":
                            let v = TeamLog.SharingChangeMemberPolicyTypeSerializer().deserialize(json)
                            return EventType.sharingChangeMemberPolicy(v)
                        case "showcase_change_download_policy":
                            let v = TeamLog.ShowcaseChangeDownloadPolicyTypeSerializer().deserialize(json)
                            return EventType.showcaseChangeDownloadPolicy(v)
                        case "showcase_change_enabled_policy":
                            let v = TeamLog.ShowcaseChangeEnabledPolicyTypeSerializer().deserialize(json)
                            return EventType.showcaseChangeEnabledPolicy(v)
                        case "showcase_change_external_sharing_policy":
                            let v = TeamLog.ShowcaseChangeExternalSharingPolicyTypeSerializer().deserialize(json)
                            return EventType.showcaseChangeExternalSharingPolicy(v)
                        case "smarter_smart_sync_policy_changed":
                            let v = TeamLog.SmarterSmartSyncPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.smarterSmartSyncPolicyChanged(v)
                        case "smart_sync_change_policy":
                            let v = TeamLog.SmartSyncChangePolicyTypeSerializer().deserialize(json)
                            return EventType.smartSyncChangePolicy(v)
                        case "smart_sync_not_opt_out":
                            let v = TeamLog.SmartSyncNotOptOutTypeSerializer().deserialize(json)
                            return EventType.smartSyncNotOptOut(v)
                        case "smart_sync_opt_out":
                            let v = TeamLog.SmartSyncOptOutTypeSerializer().deserialize(json)
                            return EventType.smartSyncOptOut(v)
                        case "sso_change_policy":
                            let v = TeamLog.SsoChangePolicyTypeSerializer().deserialize(json)
                            return EventType.ssoChangePolicy(v)
                        case "team_branding_policy_changed":
                            let v = TeamLog.TeamBrandingPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.teamBrandingPolicyChanged(v)
                        case "team_extensions_policy_changed":
                            let v = TeamLog.TeamExtensionsPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.teamExtensionsPolicyChanged(v)
                        case "team_selective_sync_policy_changed":
                            let v = TeamLog.TeamSelectiveSyncPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.teamSelectiveSyncPolicyChanged(v)
                        case "team_sharing_whitelist_subjects_changed":
                            let v = TeamLog.TeamSharingWhitelistSubjectsChangedTypeSerializer().deserialize(json)
                            return EventType.teamSharingWhitelistSubjectsChanged(v)
                        case "tfa_add_exception":
                            let v = TeamLog.TfaAddExceptionTypeSerializer().deserialize(json)
                            return EventType.tfaAddException(v)
                        case "tfa_change_policy":
                            let v = TeamLog.TfaChangePolicyTypeSerializer().deserialize(json)
                            return EventType.tfaChangePolicy(v)
                        case "tfa_remove_exception":
                            let v = TeamLog.TfaRemoveExceptionTypeSerializer().deserialize(json)
                            return EventType.tfaRemoveException(v)
                        case "two_account_change_policy":
                            let v = TeamLog.TwoAccountChangePolicyTypeSerializer().deserialize(json)
                            return EventType.twoAccountChangePolicy(v)
                        case "viewer_info_policy_changed":
                            let v = TeamLog.ViewerInfoPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.viewerInfoPolicyChanged(v)
                        case "watermarking_policy_changed":
                            let v = TeamLog.WatermarkingPolicyChangedTypeSerializer().deserialize(json)
                            return EventType.watermarkingPolicyChanged(v)
                        case "web_sessions_change_active_session_limit":
                            let v = TeamLog.WebSessionsChangeActiveSessionLimitTypeSerializer().deserialize(json)
                            return EventType.webSessionsChangeActiveSessionLimit(v)
                        case "web_sessions_change_fixed_length_policy":
                            let v = TeamLog.WebSessionsChangeFixedLengthPolicyTypeSerializer().deserialize(json)
                            return EventType.webSessionsChangeFixedLengthPolicy(v)
                        case "web_sessions_change_idle_length_policy":
                            let v = TeamLog.WebSessionsChangeIdleLengthPolicyTypeSerializer().deserialize(json)
                            return EventType.webSessionsChangeIdleLengthPolicy(v)
                        case "data_residency_migration_request_successful":
                            let v = TeamLog.DataResidencyMigrationRequestSuccessfulTypeSerializer().deserialize(json)
                            return EventType.dataResidencyMigrationRequestSuccessful(v)
                        case "data_residency_migration_request_unsuccessful":
                            let v = TeamLog.DataResidencyMigrationRequestUnsuccessfulTypeSerializer().deserialize(json)
                            return EventType.dataResidencyMigrationRequestUnsuccessful(v)
                        case "team_merge_from":
                            let v = TeamLog.TeamMergeFromTypeSerializer().deserialize(json)
                            return EventType.teamMergeFrom(v)
                        case "team_merge_to":
                            let v = TeamLog.TeamMergeToTypeSerializer().deserialize(json)
                            return EventType.teamMergeTo(v)
                        case "team_profile_add_background":
                            let v = TeamLog.TeamProfileAddBackgroundTypeSerializer().deserialize(json)
                            return EventType.teamProfileAddBackground(v)
                        case "team_profile_add_logo":
                            let v = TeamLog.TeamProfileAddLogoTypeSerializer().deserialize(json)
                            return EventType.teamProfileAddLogo(v)
                        case "team_profile_change_background":
                            let v = TeamLog.TeamProfileChangeBackgroundTypeSerializer().deserialize(json)
                            return EventType.teamProfileChangeBackground(v)
                        case "team_profile_change_default_language":
                            let v = TeamLog.TeamProfileChangeDefaultLanguageTypeSerializer().deserialize(json)
                            return EventType.teamProfileChangeDefaultLanguage(v)
                        case "team_profile_change_logo":
                            let v = TeamLog.TeamProfileChangeLogoTypeSerializer().deserialize(json)
                            return EventType.teamProfileChangeLogo(v)
                        case "team_profile_change_name":
                            let v = TeamLog.TeamProfileChangeNameTypeSerializer().deserialize(json)
                            return EventType.teamProfileChangeName(v)
                        case "team_profile_remove_background":
                            let v = TeamLog.TeamProfileRemoveBackgroundTypeSerializer().deserialize(json)
                            return EventType.teamProfileRemoveBackground(v)
                        case "team_profile_remove_logo":
                            let v = TeamLog.TeamProfileRemoveLogoTypeSerializer().deserialize(json)
                            return EventType.teamProfileRemoveLogo(v)
                        case "tfa_add_backup_phone":
                            let v = TeamLog.TfaAddBackupPhoneTypeSerializer().deserialize(json)
                            return EventType.tfaAddBackupPhone(v)
                        case "tfa_add_security_key":
                            let v = TeamLog.TfaAddSecurityKeyTypeSerializer().deserialize(json)
                            return EventType.tfaAddSecurityKey(v)
                        case "tfa_change_backup_phone":
                            let v = TeamLog.TfaChangeBackupPhoneTypeSerializer().deserialize(json)
                            return EventType.tfaChangeBackupPhone(v)
                        case "tfa_change_status":
                            let v = TeamLog.TfaChangeStatusTypeSerializer().deserialize(json)
                            return EventType.tfaChangeStatus(v)
                        case "tfa_remove_backup_phone":
                            let v = TeamLog.TfaRemoveBackupPhoneTypeSerializer().deserialize(json)
                            return EventType.tfaRemoveBackupPhone(v)
                        case "tfa_remove_security_key":
                            let v = TeamLog.TfaRemoveSecurityKeyTypeSerializer().deserialize(json)
                            return EventType.tfaRemoveSecurityKey(v)
                        case "tfa_reset":
                            let v = TeamLog.TfaResetTypeSerializer().deserialize(json)
                            return EventType.tfaReset(v)
                        case "changed_enterprise_admin_role":
                            let v = TeamLog.ChangedEnterpriseAdminRoleTypeSerializer().deserialize(json)
                            return EventType.changedEnterpriseAdminRole(v)
                        case "changed_enterprise_connected_team_status":
                            let v = TeamLog.ChangedEnterpriseConnectedTeamStatusTypeSerializer().deserialize(json)
                            return EventType.changedEnterpriseConnectedTeamStatus(v)
                        case "ended_enterprise_admin_session":
                            let v = TeamLog.EndedEnterpriseAdminSessionTypeSerializer().deserialize(json)
                            return EventType.endedEnterpriseAdminSession(v)
                        case "ended_enterprise_admin_session_deprecated":
                            let v = TeamLog.EndedEnterpriseAdminSessionDeprecatedTypeSerializer().deserialize(json)
                            return EventType.endedEnterpriseAdminSessionDeprecated(v)
                        case "enterprise_settings_locking":
                            let v = TeamLog.EnterpriseSettingsLockingTypeSerializer().deserialize(json)
                            return EventType.enterpriseSettingsLocking(v)
                        case "guest_admin_change_status":
                            let v = TeamLog.GuestAdminChangeStatusTypeSerializer().deserialize(json)
                            return EventType.guestAdminChangeStatus(v)
                        case "started_enterprise_admin_session":
                            let v = TeamLog.StartedEnterpriseAdminSessionTypeSerializer().deserialize(json)
                            return EventType.startedEnterpriseAdminSession(v)
                        case "team_merge_request_accepted":
                            let v = TeamLog.TeamMergeRequestAcceptedTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestAccepted(v)
                        case "team_merge_request_accepted_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestAcceptedShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestAcceptedShownToPrimaryTeam(v)
                        case "team_merge_request_accepted_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestAcceptedShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestAcceptedShownToSecondaryTeam(v)
                        case "team_merge_request_auto_canceled":
                            let v = TeamLog.TeamMergeRequestAutoCanceledTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestAutoCanceled(v)
                        case "team_merge_request_canceled":
                            let v = TeamLog.TeamMergeRequestCanceledTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestCanceled(v)
                        case "team_merge_request_canceled_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestCanceledShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestCanceledShownToPrimaryTeam(v)
                        case "team_merge_request_canceled_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestCanceledShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestCanceledShownToSecondaryTeam(v)
                        case "team_merge_request_expired":
                            let v = TeamLog.TeamMergeRequestExpiredTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestExpired(v)
                        case "team_merge_request_expired_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestExpiredShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestExpiredShownToPrimaryTeam(v)
                        case "team_merge_request_expired_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestExpiredShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestExpiredShownToSecondaryTeam(v)
                        case "team_merge_request_rejected_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestRejectedShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestRejectedShownToPrimaryTeam(v)
                        case "team_merge_request_rejected_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestRejectedShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestRejectedShownToSecondaryTeam(v)
                        case "team_merge_request_reminder":
                            let v = TeamLog.TeamMergeRequestReminderTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestReminder(v)
                        case "team_merge_request_reminder_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestReminderShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestReminderShownToPrimaryTeam(v)
                        case "team_merge_request_reminder_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestReminderShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestReminderShownToSecondaryTeam(v)
                        case "team_merge_request_revoked":
                            let v = TeamLog.TeamMergeRequestRevokedTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestRevoked(v)
                        case "team_merge_request_sent_shown_to_primary_team":
                            let v = TeamLog.TeamMergeRequestSentShownToPrimaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestSentShownToPrimaryTeam(v)
                        case "team_merge_request_sent_shown_to_secondary_team":
                            let v = TeamLog.TeamMergeRequestSentShownToSecondaryTeamTypeSerializer().deserialize(json)
                            return EventType.teamMergeRequestSentShownToSecondaryTeam(v)
                        case "other":
                            return EventType.other
                        default:
                            return EventType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The type of the event.
    public enum EventTypeArg: CustomStringConvertible {
        /// (admin_alerting) Changed an alert state
        case adminAlertingAlertStateChanged
        /// (admin_alerting) Changed an alert setting
        case adminAlertingChangedAlertConfig
        /// (admin_alerting) Triggered security alert
        case adminAlertingTriggeredAlert
        /// (apps) Failed to connect app for member
        case appBlockedByPermissions
        /// (apps) Linked app for team
        case appLinkTeam
        /// (apps) Linked app for member
        case appLinkUser
        /// (apps) Unlinked app for team
        case appUnlinkTeam
        /// (apps) Unlinked app for member
        case appUnlinkUser
        /// (apps) Connected integration for member
        case integrationConnected
        /// (apps) Disconnected integration for member
        case integrationDisconnected
        /// (comments) Added file comment
        case fileAddComment
        /// (comments) Subscribed to or unsubscribed from comment notifications for file
        case fileChangeCommentSubscription
        /// (comments) Deleted file comment
        case fileDeleteComment
        /// (comments) Edited file comment
        case fileEditComment
        /// (comments) Liked file comment (deprecated, no longer logged)
        case fileLikeComment
        /// (comments) Resolved file comment
        case fileResolveComment
        /// (comments) Unliked file comment (deprecated, no longer logged)
        case fileUnlikeComment
        /// (comments) Unresolved file comment
        case fileUnresolveComment
        /// (data_governance) Added folders to policy
        case governancePolicyAddFolders
        /// (data_governance) Couldn't add a folder to a policy
        case governancePolicyAddFolderFailed
        /// (data_governance) Content disposed
        case governancePolicyContentDisposed
        /// (data_governance) Activated a new policy
        case governancePolicyCreate
        /// (data_governance) Deleted a policy
        case governancePolicyDelete
        /// (data_governance) Edited policy
        case governancePolicyEditDetails
        /// (data_governance) Changed policy duration
        case governancePolicyEditDuration
        /// (data_governance) Created a policy download
        case governancePolicyExportCreated
        /// (data_governance) Removed a policy download
        case governancePolicyExportRemoved
        /// (data_governance) Removed folders from policy
        case governancePolicyRemoveFolders
        /// (data_governance) Created a summary report for a policy
        case governancePolicyReportCreated
        /// (data_governance) Downloaded content from a policy
        case governancePolicyZipPartDownloaded
        /// (data_governance) Activated a hold
        case legalHoldsActivateAHold
        /// (data_governance) Added members to a hold
        case legalHoldsAddMembers
        /// (data_governance) Edited details for a hold
        case legalHoldsChangeHoldDetails
        /// (data_governance) Renamed a hold
        case legalHoldsChangeHoldName
        /// (data_governance) Exported hold
        case legalHoldsExportAHold
        /// (data_governance) Canceled export for a hold
        case legalHoldsExportCancelled
        /// (data_governance) Downloaded export for a hold
        case legalHoldsExportDownloaded
        /// (data_governance) Removed export for a hold
        case legalHoldsExportRemoved
        /// (data_governance) Released a hold
        case legalHoldsReleaseAHold
        /// (data_governance) Removed members from a hold
        case legalHoldsRemoveMembers
        /// (data_governance) Created a summary report for a hold
        case legalHoldsReportAHold
        /// (devices) Changed IP address associated with active desktop session
        case deviceChangeIpDesktop
        /// (devices) Changed IP address associated with active mobile session
        case deviceChangeIpMobile
        /// (devices) Changed IP address associated with active web session
        case deviceChangeIpWeb
        /// (devices) Failed to delete all files from unlinked device
        case deviceDeleteOnUnlinkFail
        /// (devices) Deleted all files from unlinked device
        case deviceDeleteOnUnlinkSuccess
        /// (devices) Failed to link device
        case deviceLinkFail
        /// (devices) Linked device
        case deviceLinkSuccess
        /// (devices) Disabled device management (deprecated, no longer logged)
        case deviceManagementDisabled
        /// (devices) Enabled device management (deprecated, no longer logged)
        case deviceManagementEnabled
        /// (devices) Enabled/disabled backup for computer
        case deviceSyncBackupStatusChanged
        /// (devices) Disconnected device
        case deviceUnlink
        /// (devices) Exported passwords
        case dropboxPasswordsExported
        /// (devices) Enrolled new Dropbox Passwords device
        case dropboxPasswordsNewDeviceEnrolled
        /// (devices) Refreshed auth token used for setting up EMM
        case emmRefreshAuthToken
        /// (devices) Checked external drive backup eligibility status
        case externalDriveBackupEligibilityStatusChecked
        /// (devices) Modified external drive backup
        case externalDriveBackupStatusChanged
        /// (domains) Granted/revoked option to enable account capture on team domains
        case accountCaptureChangeAvailability
        /// (domains) Account-captured user migrated account to team
        case accountCaptureMigrateAccount
        /// (domains) Sent account capture email to all unmanaged members
        case accountCaptureNotificationEmailsSent
        /// (domains) Account-captured user changed account email to personal email
        case accountCaptureRelinquishAccount
        /// (domains) Disabled domain invites (deprecated, no longer logged)
        case disabledDomainInvites
        /// (domains) Approved user's request to join team
        case domainInvitesApproveRequestToJoinTeam
        /// (domains) Declined user's request to join team
        case domainInvitesDeclineRequestToJoinTeam
        /// (domains) Sent domain invites to existing domain accounts (deprecated, no longer logged)
        case domainInvitesEmailExistingUsers
        /// (domains) Requested to join team
        case domainInvitesRequestToJoinTeam
        /// (domains) Disabled "Automatically invite new users" (deprecated, no longer logged)
        case domainInvitesSetInviteNewUserPrefToNo
        /// (domains) Enabled "Automatically invite new users" (deprecated, no longer logged)
        case domainInvitesSetInviteNewUserPrefToYes
        /// (domains) Failed to verify team domain
        case domainVerificationAddDomainFail
        /// (domains) Verified team domain
        case domainVerificationAddDomainSuccess
        /// (domains) Removed domain from list of verified team domains
        case domainVerificationRemoveDomain
        /// (domains) Enabled domain invites (deprecated, no longer logged)
        case enabledDomainInvites
        /// (file_operations) Applied naming convention
        case applyNamingConvention
        /// (file_operations) Created folders (deprecated, no longer logged)
        case createFolder
        /// (file_operations) Added files and/or folders
        case fileAdd
        /// (file_operations) Copied files and/or folders
        case fileCopy
        /// (file_operations) Deleted files and/or folders
        case fileDelete
        /// (file_operations) Downloaded files and/or folders
        case fileDownload
        /// (file_operations) Edited files
        case fileEdit
        /// (file_operations) Created copy reference to file/folder
        case fileGetCopyReference
        /// (file_operations) Locked/unlocked editing for a file
        case fileLockingLockStatusChanged
        /// (file_operations) Moved files and/or folders
        case fileMove
        /// (file_operations) Permanently deleted files and/or folders
        case filePermanentlyDelete
        /// (file_operations) Previewed files and/or folders
        case filePreview
        /// (file_operations) Renamed files and/or folders
        case fileRename
        /// (file_operations) Restored deleted files and/or folders
        case fileRestore
        /// (file_operations) Reverted files to previous version
        case fileRevert
        /// (file_operations) Rolled back file actions
        case fileRollbackChanges
        /// (file_operations) Saved file/folder using copy reference
        case fileSaveCopyReference
        /// (file_operations) Updated folder overview
        case folderOverviewDescriptionChanged
        /// (file_operations) Pinned item to folder overview
        case folderOverviewItemPinned
        /// (file_operations) Unpinned item from folder overview
        case folderOverviewItemUnpinned
        /// (file_operations) Added a label
        case objectLabelAdded
        /// (file_operations) Removed a label
        case objectLabelRemoved
        /// (file_operations) Updated a label's value
        case objectLabelUpdatedValue
        /// (file_operations) Organized a folder with multi-file organize
        case organizeFolderWithTidy
        /// (file_operations) Rewound a folder
        case rewindFolder
        /// (file_operations) Reverted naming convention
        case undoNamingConvention
        /// (file_operations) Removed multi-file organize
        case undoOrganizeFolderWithTidy
        /// (file_operations) Tagged a file
        case userTagsAdded
        /// (file_operations) Removed tags
        case userTagsRemoved
        /// (file_requests) Received files via Email to Dropbox
        case emailIngestReceiveFile
        /// (file_requests) Changed file request
        case fileRequestChange
        /// (file_requests) Closed file request
        case fileRequestClose
        /// (file_requests) Created file request
        case fileRequestCreate
        /// (file_requests) Delete file request
        case fileRequestDelete
        /// (file_requests) Received files for file request
        case fileRequestReceiveFile
        /// (groups) Added external ID for group
        case groupAddExternalId
        /// (groups) Added team members to group
        case groupAddMember
        /// (groups) Changed external ID for group
        case groupChangeExternalId
        /// (groups) Changed group management type
        case groupChangeManagementType
        /// (groups) Changed manager permissions of group member
        case groupChangeMemberRole
        /// (groups) Created group
        case groupCreate
        /// (groups) Deleted group
        case groupDelete
        /// (groups) Updated group (deprecated, no longer logged)
        case groupDescriptionUpdated
        /// (groups) Updated group join policy (deprecated, no longer logged)
        case groupJoinPolicyUpdated
        /// (groups) Moved group (deprecated, no longer logged)
        case groupMoved
        /// (groups) Removed external ID for group
        case groupRemoveExternalId
        /// (groups) Removed team members from group
        case groupRemoveMember
        /// (groups) Renamed group
        case groupRename
        /// (logins) Unlocked/locked account after failed sign in attempts
        case accountLockOrUnlocked
        /// (logins) Failed to sign in via EMM (deprecated, replaced by 'Failed to sign in')
        case emmError
        /// (logins) Started trusted team admin session
        case guestAdminSignedInViaTrustedTeams
        /// (logins) Ended trusted team admin session
        case guestAdminSignedOutViaTrustedTeams
        /// (logins) Failed to sign in
        case loginFail
        /// (logins) Signed in
        case loginSuccess
        /// (logins) Signed out
        case logout
        /// (logins) Ended reseller support session
        case resellerSupportSessionEnd
        /// (logins) Started reseller support session
        case resellerSupportSessionStart
        /// (logins) Ended admin sign-in-as session
        case signInAsSessionEnd
        /// (logins) Started admin sign-in-as session
        case signInAsSessionStart
        /// (logins) Failed to sign in via SSO (deprecated, replaced by 'Failed to sign in')
        case ssoError
        /// (members) Created team invite link
        case createTeamInviteLink
        /// (members) Deleted team invite link
        case deleteTeamInviteLink
        /// (members) Added an external ID for team member
        case memberAddExternalId
        /// (members) Added team member name
        case memberAddName
        /// (members) Changed team member admin role
        case memberChangeAdminRole
        /// (members) Changed team member email
        case memberChangeEmail
        /// (members) Changed the external ID for team member
        case memberChangeExternalId
        /// (members) Changed membership type (limited/full) of member (deprecated, no longer logged)
        case memberChangeMembershipType
        /// (members) Changed team member name
        case memberChangeName
        /// (members) Changed team member reseller role
        case memberChangeResellerRole
        /// (members) Changed member status (invited, joined, suspended, etc.)
        case memberChangeStatus
        /// (members) Cleared manually added contacts
        case memberDeleteManualContacts
        /// (members) Deleted team member profile photo
        case memberDeleteProfilePhoto
        /// (members) Permanently deleted contents of deleted team member account
        case memberPermanentlyDeleteAccountContents
        /// (members) Removed the external ID for team member
        case memberRemoveExternalId
        /// (members) Set team member profile photo
        case memberSetProfilePhoto
        /// (members) Set custom member space limit
        case memberSpaceLimitsAddCustomQuota
        /// (members) Changed custom member space limit
        case memberSpaceLimitsChangeCustomQuota
        /// (members) Changed space limit status
        case memberSpaceLimitsChangeStatus
        /// (members) Removed custom member space limit
        case memberSpaceLimitsRemoveCustomQuota
        /// (members) Suggested person to add to team
        case memberSuggest
        /// (members) Transferred contents of deleted member account to another member
        case memberTransferAccountContents
        /// (members) Added pending secondary email
        case pendingSecondaryEmailAdded
        /// (members) Deleted secondary email
        case secondaryEmailDeleted
        /// (members) Verified secondary email
        case secondaryEmailVerified
        /// (members) Secondary mails policy changed
        case secondaryMailsPolicyChanged
        /// (paper) Added Binder page (deprecated, replaced by 'Edited files')
        case binderAddPage
        /// (paper) Added Binder section (deprecated, replaced by 'Edited files')
        case binderAddSection
        /// (paper) Removed Binder page (deprecated, replaced by 'Edited files')
        case binderRemovePage
        /// (paper) Removed Binder section (deprecated, replaced by 'Edited files')
        case binderRemoveSection
        /// (paper) Renamed Binder page (deprecated, replaced by 'Edited files')
        case binderRenamePage
        /// (paper) Renamed Binder section (deprecated, replaced by 'Edited files')
        case binderRenameSection
        /// (paper) Reordered Binder page (deprecated, replaced by 'Edited files')
        case binderReorderPage
        /// (paper) Reordered Binder section (deprecated, replaced by 'Edited files')
        case binderReorderSection
        /// (paper) Added users and/or groups to Paper doc/folder
        case paperContentAddMember
        /// (paper) Added Paper doc/folder to folder
        case paperContentAddToFolder
        /// (paper) Archived Paper doc/folder
        case paperContentArchive
        /// (paper) Created Paper doc/folder
        case paperContentCreate
        /// (paper) Permanently deleted Paper doc/folder
        case paperContentPermanentlyDelete
        /// (paper) Removed Paper doc/folder from folder
        case paperContentRemoveFromFolder
        /// (paper) Removed users and/or groups from Paper doc/folder
        case paperContentRemoveMember
        /// (paper) Renamed Paper doc/folder
        case paperContentRename
        /// (paper) Restored archived Paper doc/folder
        case paperContentRestore
        /// (paper) Added Paper doc comment
        case paperDocAddComment
        /// (paper) Changed member permissions for Paper doc
        case paperDocChangeMemberRole
        /// (paper) Changed sharing setting for Paper doc
        case paperDocChangeSharingPolicy
        /// (paper) Followed/unfollowed Paper doc
        case paperDocChangeSubscription
        /// (paper) Archived Paper doc (deprecated, no longer logged)
        case paperDocDeleted
        /// (paper) Deleted Paper doc comment
        case paperDocDeleteComment
        /// (paper) Downloaded Paper doc in specific format
        case paperDocDownload
        /// (paper) Edited Paper doc
        case paperDocEdit
        /// (paper) Edited Paper doc comment
        case paperDocEditComment
        /// (paper) Followed Paper doc (deprecated, replaced by 'Followed/unfollowed Paper doc')
        case paperDocFollowed
        /// (paper) Mentioned user in Paper doc
        case paperDocMention
        /// (paper) Transferred ownership of Paper doc
        case paperDocOwnershipChanged
        /// (paper) Requested access to Paper doc
        case paperDocRequestAccess
        /// (paper) Resolved Paper doc comment
        case paperDocResolveComment
        /// (paper) Restored Paper doc to previous version
        case paperDocRevert
        /// (paper) Shared Paper doc via Slack
        case paperDocSlackShare
        /// (paper) Shared Paper doc with users and/or groups (deprecated, no longer logged)
        case paperDocTeamInvite
        /// (paper) Deleted Paper doc
        case paperDocTrashed
        /// (paper) Unresolved Paper doc comment
        case paperDocUnresolveComment
        /// (paper) Restored Paper doc
        case paperDocUntrashed
        /// (paper) Viewed Paper doc
        case paperDocView
        /// (paper) Changed Paper external sharing setting to anyone (deprecated, no longer logged)
        case paperExternalViewAllow
        /// (paper) Changed Paper external sharing setting to default team (deprecated, no longer logged)
        case paperExternalViewDefaultTeam
        /// (paper) Changed Paper external sharing setting to team-only (deprecated, no longer logged)
        case paperExternalViewForbid
        /// (paper) Followed/unfollowed Paper folder
        case paperFolderChangeSubscription
        /// (paper) Archived Paper folder (deprecated, no longer logged)
        case paperFolderDeleted
        /// (paper) Followed Paper folder (deprecated, replaced by 'Followed/unfollowed Paper folder')
        case paperFolderFollowed
        /// (paper) Shared Paper folder with users and/or groups (deprecated, no longer logged)
        case paperFolderTeamInvite
        /// (paper) Changed permissions for published doc
        case paperPublishedLinkChangePermission
        /// (paper) Published doc
        case paperPublishedLinkCreate
        /// (paper) Unpublished doc
        case paperPublishedLinkDisabled
        /// (paper) Viewed published doc
        case paperPublishedLinkView
        /// (passwords) Changed password
        case passwordChange
        /// (passwords) Reset password
        case passwordReset
        /// (passwords) Reset all team member passwords
        case passwordResetAll
        /// (reports) Created Classification report
        case classificationCreateReport
        /// (reports) Couldn't create Classification report
        case classificationCreateReportFail
        /// (reports) Created EMM-excluded users report
        case emmCreateExceptionsReport
        /// (reports) Created EMM mobile app usage report
        case emmCreateUsageReport
        /// (reports) Created member data report
        case exportMembersReport
        /// (reports) Failed to create members data report
        case exportMembersReportFail
        /// (reports) Created External sharing report
        case externalSharingCreateReport
        /// (reports) Couldn't create External sharing report
        case externalSharingReportFailed
        /// (reports) Report created: Links created with no expiration
        case noExpirationLinkGenCreateReport
        /// (reports) Couldn't create report: Links created with no expiration
        case noExpirationLinkGenReportFailed
        /// (reports) Report created: Links created without passwords
        case noPasswordLinkGenCreateReport
        /// (reports) Couldn't create report: Links created without passwords
        case noPasswordLinkGenReportFailed
        /// (reports) Report created: Views of links without passwords
        case noPasswordLinkViewCreateReport
        /// (reports) Couldn't create report: Views of links without passwords
        case noPasswordLinkViewReportFailed
        /// (reports) Report created: Views of old links
        case outdatedLinkViewCreateReport
        /// (reports) Couldn't create report: Views of old links
        case outdatedLinkViewReportFailed
        /// (reports) Exported all team Paper docs
        case paperAdminExportStart
        /// (reports) Created Smart Sync non-admin devices report
        case smartSyncCreateAdminPrivilegeReport
        /// (reports) Created team activity report
        case teamActivityCreateReport
        /// (reports) Couldn't generate team activity report
        case teamActivityCreateReportFail
        /// (sharing) Shared album
        case collectionShare
        /// (sharing) Transfer files added
        case fileTransfersFileAdd
        /// (sharing) Deleted transfer
        case fileTransfersTransferDelete
        /// (sharing) Transfer downloaded
        case fileTransfersTransferDownload
        /// (sharing) Sent transfer
        case fileTransfersTransferSend
        /// (sharing) Viewed transfer
        case fileTransfersTransferView
        /// (sharing) Changed Paper doc to invite-only (deprecated, no longer logged)
        case noteAclInviteOnly
        /// (sharing) Changed Paper doc to link-accessible (deprecated, no longer logged)
        case noteAclLink
        /// (sharing) Changed Paper doc to link-accessible for team (deprecated, no longer logged)
        case noteAclTeamLink
        /// (sharing) Shared Paper doc (deprecated, no longer logged)
        case noteShared
        /// (sharing) Shared received Paper doc (deprecated, no longer logged)
        case noteShareReceive
        /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
        case openNoteShared
        /// (sharing) Added team to shared folder (deprecated, no longer logged)
        case sfAddGroup
        /// (sharing) Allowed non-collaborators to view links to files in shared folder (deprecated, no longer logged)
        case sfAllowNonMembersToViewSharedLinks
        /// (sharing) Set team members to see warning before sharing folders outside team (deprecated, no longer logged)
        case sfExternalInviteWarn
        /// (sharing) Invited Facebook users to shared folder (deprecated, no longer logged)
        case sfFbInvite
        /// (sharing) Changed Facebook user's role in shared folder (deprecated, no longer logged)
        case sfFbInviteChangeRole
        /// (sharing) Uninvited Facebook user from shared folder (deprecated, no longer logged)
        case sfFbUninvite
        /// (sharing) Invited group to shared folder (deprecated, no longer logged)
        case sfInviteGroup
        /// (sharing) Granted access to shared folder (deprecated, no longer logged)
        case sfTeamGrantAccess
        /// (sharing) Invited team members to shared folder (deprecated, replaced by 'Invited user to Dropbox and added
        /// them to shared file/folder')
        case sfTeamInvite
        /// (sharing) Changed team member's role in shared folder (deprecated, no longer logged)
        case sfTeamInviteChangeRole
        /// (sharing) Joined team member's shared folder (deprecated, no longer logged)
        case sfTeamJoin
        /// (sharing) Joined team member's shared folder from link (deprecated, no longer logged)
        case sfTeamJoinFromOobLink
        /// (sharing) Unshared folder with team member (deprecated, replaced by 'Removed invitee from shared file/folder
        /// before invite was accepted')
        case sfTeamUninvite
        /// (sharing) Invited user to Dropbox and added them to shared file/folder
        case sharedContentAddInvitees
        /// (sharing) Added expiration date to link for shared file/folder (deprecated, no longer logged)
        case sharedContentAddLinkExpiry
        /// (sharing) Added password to link for shared file/folder (deprecated, no longer logged)
        case sharedContentAddLinkPassword
        /// (sharing) Added users and/or groups to shared file/folder
        case sharedContentAddMember
        /// (sharing) Changed whether members can download shared file/folder (deprecated, no longer logged)
        case sharedContentChangeDownloadsPolicy
        /// (sharing) Changed access type of invitee to shared file/folder before invite was accepted
        case sharedContentChangeInviteeRole
        /// (sharing) Changed link audience of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkAudience
        /// (sharing) Changed link expiration of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkExpiry
        /// (sharing) Changed link password of shared file/folder (deprecated, no longer logged)
        case sharedContentChangeLinkPassword
        /// (sharing) Changed access type of shared file/folder member
        case sharedContentChangeMemberRole
        /// (sharing) Changed whether members can see who viewed shared file/folder
        case sharedContentChangeViewerInfoPolicy
        /// (sharing) Acquired membership of shared file/folder by accepting invite
        case sharedContentClaimInvitation
        /// (sharing) Copied shared file/folder to own Dropbox
        case sharedContentCopy
        /// (sharing) Downloaded shared file/folder
        case sharedContentDownload
        /// (sharing) Left shared file/folder
        case sharedContentRelinquishMembership
        /// (sharing) Removed invitee from shared file/folder before invite was accepted
        case sharedContentRemoveInvitees
        /// (sharing) Removed link expiration date of shared file/folder (deprecated, no longer logged)
        case sharedContentRemoveLinkExpiry
        /// (sharing) Removed link password of shared file/folder (deprecated, no longer logged)
        case sharedContentRemoveLinkPassword
        /// (sharing) Removed user/group from shared file/folder
        case sharedContentRemoveMember
        /// (sharing) Requested access to shared file/folder
        case sharedContentRequestAccess
        /// (sharing) Restored shared file/folder invitees
        case sharedContentRestoreInvitees
        /// (sharing) Restored users and/or groups to membership of shared file/folder
        case sharedContentRestoreMember
        /// (sharing) Unshared file/folder by clearing membership
        case sharedContentUnshare
        /// (sharing) Previewed shared file/folder
        case sharedContentView
        /// (sharing) Changed who can access shared folder via link
        case sharedFolderChangeLinkPolicy
        /// (sharing) Changed whether shared folder inherits members from parent folder
        case sharedFolderChangeMembersInheritancePolicy
        /// (sharing) Changed who can add/remove members of shared folder
        case sharedFolderChangeMembersManagementPolicy
        /// (sharing) Changed who can become member of shared folder
        case sharedFolderChangeMembersPolicy
        /// (sharing) Created shared folder
        case sharedFolderCreate
        /// (sharing) Declined team member's invite to shared folder
        case sharedFolderDeclineInvitation
        /// (sharing) Added shared folder to own Dropbox
        case sharedFolderMount
        /// (sharing) Changed parent of shared folder
        case sharedFolderNest
        /// (sharing) Transferred ownership of shared folder to another member
        case sharedFolderTransferOwnership
        /// (sharing) Deleted shared folder from Dropbox
        case sharedFolderUnmount
        /// (sharing) Added shared link expiration date
        case sharedLinkAddExpiry
        /// (sharing) Changed shared link expiration date
        case sharedLinkChangeExpiry
        /// (sharing) Changed visibility of shared link
        case sharedLinkChangeVisibility
        /// (sharing) Added file/folder to Dropbox from shared link
        case sharedLinkCopy
        /// (sharing) Created shared link
        case sharedLinkCreate
        /// (sharing) Removed shared link
        case sharedLinkDisable
        /// (sharing) Downloaded file/folder from shared link
        case sharedLinkDownload
        /// (sharing) Removed shared link expiration date
        case sharedLinkRemoveExpiry
        /// (sharing) Added an expiration date to the shared link
        case sharedLinkSettingsAddExpiration
        /// (sharing) Added a password to the shared link
        case sharedLinkSettingsAddPassword
        /// (sharing) Disabled downloads
        case sharedLinkSettingsAllowDownloadDisabled
        /// (sharing) Enabled downloads
        case sharedLinkSettingsAllowDownloadEnabled
        /// (sharing) Changed the audience of the shared link
        case sharedLinkSettingsChangeAudience
        /// (sharing) Changed the expiration date of the shared link
        case sharedLinkSettingsChangeExpiration
        /// (sharing) Changed the password of the shared link
        case sharedLinkSettingsChangePassword
        /// (sharing) Removed the expiration date from the shared link
        case sharedLinkSettingsRemoveExpiration
        /// (sharing) Removed the password from the shared link
        case sharedLinkSettingsRemovePassword
        /// (sharing) Added members as audience of shared link
        case sharedLinkShare
        /// (sharing) Opened shared link
        case sharedLinkView
        /// (sharing) Opened shared Paper doc (deprecated, no longer logged)
        case sharedNoteOpened
        /// (sharing) Disabled downloads for link (deprecated, no longer logged)
        case shmodelDisableDownloads
        /// (sharing) Enabled downloads for link (deprecated, no longer logged)
        case shmodelEnableDownloads
        /// (sharing) Shared link with group (deprecated, no longer logged)
        case shmodelGroupShare
        /// (showcase) Granted access to showcase
        case showcaseAccessGranted
        /// (showcase) Added member to showcase
        case showcaseAddMember
        /// (showcase) Archived showcase
        case showcaseArchived
        /// (showcase) Created showcase
        case showcaseCreated
        /// (showcase) Deleted showcase comment
        case showcaseDeleteComment
        /// (showcase) Edited showcase
        case showcaseEdited
        /// (showcase) Edited showcase comment
        case showcaseEditComment
        /// (showcase) Added file to showcase
        case showcaseFileAdded
        /// (showcase) Downloaded file from showcase
        case showcaseFileDownload
        /// (showcase) Removed file from showcase
        case showcaseFileRemoved
        /// (showcase) Viewed file in showcase
        case showcaseFileView
        /// (showcase) Permanently deleted showcase
        case showcasePermanentlyDeleted
        /// (showcase) Added showcase comment
        case showcasePostComment
        /// (showcase) Removed member from showcase
        case showcaseRemoveMember
        /// (showcase) Renamed showcase
        case showcaseRenamed
        /// (showcase) Requested access to showcase
        case showcaseRequestAccess
        /// (showcase) Resolved showcase comment
        case showcaseResolveComment
        /// (showcase) Unarchived showcase
        case showcaseRestored
        /// (showcase) Deleted showcase
        case showcaseTrashed
        /// (showcase) Deleted showcase (old version) (deprecated, replaced by 'Deleted showcase')
        case showcaseTrashedDeprecated
        /// (showcase) Unresolved showcase comment
        case showcaseUnresolveComment
        /// (showcase) Restored showcase
        case showcaseUntrashed
        /// (showcase) Restored showcase (old version) (deprecated, replaced by 'Restored showcase')
        case showcaseUntrashedDeprecated
        /// (showcase) Viewed showcase
        case showcaseView
        /// (sso) Added X.509 certificate for SSO
        case ssoAddCert
        /// (sso) Added sign-in URL for SSO
        case ssoAddLoginUrl
        /// (sso) Added sign-out URL for SSO
        case ssoAddLogoutUrl
        /// (sso) Changed X.509 certificate for SSO
        case ssoChangeCert
        /// (sso) Changed sign-in URL for SSO
        case ssoChangeLoginUrl
        /// (sso) Changed sign-out URL for SSO
        case ssoChangeLogoutUrl
        /// (sso) Changed SAML identity mode for SSO
        case ssoChangeSamlIdentityMode
        /// (sso) Removed X.509 certificate for SSO
        case ssoRemoveCert
        /// (sso) Removed sign-in URL for SSO
        case ssoRemoveLoginUrl
        /// (sso) Removed sign-out URL for SSO
        case ssoRemoveLogoutUrl
        /// (team_folders) Changed archival status of team folder
        case teamFolderChangeStatus
        /// (team_folders) Created team folder in active status
        case teamFolderCreate
        /// (team_folders) Downgraded team folder to regular shared folder
        case teamFolderDowngrade
        /// (team_folders) Permanently deleted archived team folder
        case teamFolderPermanentlyDelete
        /// (team_folders) Renamed active/archived team folder
        case teamFolderRename
        /// (team_folders) Changed sync default
        case teamSelectiveSyncSettingsChanged
        /// (team_policies) Changed account capture setting on team domain
        case accountCaptureChangePolicy
        /// (team_policies) Changed admin reminder settings for requests to join the team
        case adminEmailRemindersChanged
        /// (team_policies) Disabled downloads (deprecated, no longer logged)
        case allowDownloadDisabled
        /// (team_policies) Enabled downloads (deprecated, no longer logged)
        case allowDownloadEnabled
        /// (team_policies) Changed app permissions
        case appPermissionsChanged
        /// (team_policies) Changed camera uploads setting for team
        case cameraUploadsPolicyChanged
        /// (team_policies) Changed Capture transcription policy for team
        case captureTranscriptPolicyChanged
        /// (team_policies) Changed classification policy for team
        case classificationChangePolicy
        /// (team_policies) Changed computer backup policy for team
        case computerBackupPolicyChanged
        /// (team_policies) Changed content management setting
        case contentAdministrationPolicyChanged
        /// (team_policies) Set restrictions on data center locations where team data resides
        case dataPlacementRestrictionChangePolicy
        /// (team_policies) Completed restrictions on data center locations where team data resides
        case dataPlacementRestrictionSatisfyPolicy
        /// (team_policies) Added members to device approvals exception list
        case deviceApprovalsAddException
        /// (team_policies) Set/removed limit on number of computers member can link to team Dropbox account
        case deviceApprovalsChangeDesktopPolicy
        /// (team_policies) Set/removed limit on number of mobile devices member can link to team Dropbox account
        case deviceApprovalsChangeMobilePolicy
        /// (team_policies) Changed device approvals setting when member is over limit
        case deviceApprovalsChangeOverageAction
        /// (team_policies) Changed device approvals setting when member unlinks approved device
        case deviceApprovalsChangeUnlinkAction
        /// (team_policies) Removed members from device approvals exception list
        case deviceApprovalsRemoveException
        /// (team_policies) Added members to directory restrictions list
        case directoryRestrictionsAddMembers
        /// (team_policies) Removed members from directory restrictions list
        case directoryRestrictionsRemoveMembers
        /// (team_policies) Changed Dropbox Passwords policy for team
        case dropboxPasswordsPolicyChanged
        /// (team_policies) Changed email to Dropbox policy for team
        case emailIngestPolicyChanged
        /// (team_policies) Added members to EMM exception list
        case emmAddException
        /// (team_policies) Enabled/disabled enterprise mobility management for members
        case emmChangePolicy
        /// (team_policies) Removed members from EMM exception list
        case emmRemoveException
        /// (team_policies) Accepted/opted out of extended version history
        case extendedVersionHistoryChangePolicy
        /// (team_policies) Changed external drive backup policy for team
        case externalDriveBackupPolicyChanged
        /// (team_policies) Enabled/disabled commenting on team files
        case fileCommentsChangePolicy
        /// (team_policies) Changed file locking policy for team
        case fileLockingPolicyChanged
        /// (team_policies) Changed File Provider Migration policy for team
        case fileProviderMigrationPolicyChanged
        /// (team_policies) Enabled/disabled file requests
        case fileRequestsChangePolicy
        /// (team_policies) Enabled file request emails for everyone (deprecated, no longer logged)
        case fileRequestsEmailsEnabled
        /// (team_policies) Enabled file request emails for team (deprecated, no longer logged)
        case fileRequestsEmailsRestrictedToTeamOnly
        /// (team_policies) Changed file transfers policy for team
        case fileTransfersPolicyChanged
        /// (team_policies) Changed folder link restrictions policy for team
        case folderLinkRestrictionPolicyChanged
        /// (team_policies) Enabled/disabled Google single sign-on for team
        case googleSsoChangePolicy
        /// (team_policies) Changed who can create groups
        case groupUserManagementChangePolicy
        /// (team_policies) Changed integration policy for team
        case integrationPolicyChanged
        /// (team_policies) Changed invite accept email policy for team
        case inviteAcceptanceEmailPolicyChanged
        /// (team_policies) Changed whether users can find team when not invited
        case memberRequestsChangePolicy
        /// (team_policies) Changed member send invite policy for team
        case memberSendInvitePolicyChanged
        /// (team_policies) Added members to member space limit exception list
        case memberSpaceLimitsAddException
        /// (team_policies) Changed member space limit type for team
        case memberSpaceLimitsChangeCapsTypePolicy
        /// (team_policies) Changed team default member space limit
        case memberSpaceLimitsChangePolicy
        /// (team_policies) Removed members from member space limit exception list
        case memberSpaceLimitsRemoveException
        /// (team_policies) Enabled/disabled option for team members to suggest people to add to team
        case memberSuggestionsChangePolicy
        /// (team_policies) Enabled/disabled Microsoft Office add-in
        case microsoftOfficeAddinChangePolicy
        /// (team_policies) Enabled/disabled network control
        case networkControlChangePolicy
        /// (team_policies) Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific
        /// members
        case paperChangeDeploymentPolicy
        /// (team_policies) Changed whether non-members can view Paper docs with link (deprecated, no longer logged)
        case paperChangeMemberLinkPolicy
        /// (team_policies) Changed whether members can share Paper docs outside team, and if docs are accessible only
        /// by team members or anyone by default
        case paperChangeMemberPolicy
        /// (team_policies) Enabled/disabled Dropbox Paper for team
        case paperChangePolicy
        /// (team_policies) Changed Paper Default Folder Policy setting for team
        case paperDefaultFolderPolicyChanged
        /// (team_policies) Enabled/disabled Paper Desktop for team
        case paperDesktopPolicyChanged
        /// (team_policies) Added users to Paper-enabled users list
        case paperEnabledUsersGroupAddition
        /// (team_policies) Removed users from Paper-enabled users list
        case paperEnabledUsersGroupRemoval
        /// (team_policies) Changed team password strength requirements
        case passwordStrengthRequirementsChangePolicy
        /// (team_policies) Enabled/disabled ability of team members to permanently delete content
        case permanentDeleteChangePolicy
        /// (team_policies) Enabled/disabled reseller support
        case resellerSupportChangePolicy
        /// (team_policies) Changed Rewind policy for team
        case rewindPolicyChanged
        /// (team_policies) Changed send for signature policy for team
        case sendForSignaturePolicyChanged
        /// (team_policies) Changed whether team members can join shared folders owned outside team
        case sharingChangeFolderJoinPolicy
        /// (team_policies) Changed the allow remove or change expiration policy for the links shared outside of the
        /// team
        case sharingChangeLinkAllowChangeExpirationPolicy
        /// (team_policies) Changed the default expiration for the links shared outside of the team
        case sharingChangeLinkDefaultExpirationPolicy
        /// (team_policies) Changed the password requirement for the links shared outside of the team
        case sharingChangeLinkEnforcePasswordPolicy
        /// (team_policies) Changed whether members can share links outside team, and if links are accessible only by
        /// team members or anyone by default
        case sharingChangeLinkPolicy
        /// (team_policies) Changed whether members can share files/folders outside team
        case sharingChangeMemberPolicy
        /// (team_policies) Enabled/disabled downloading files from Dropbox Showcase for team
        case showcaseChangeDownloadPolicy
        /// (team_policies) Enabled/disabled Dropbox Showcase for team
        case showcaseChangeEnabledPolicy
        /// (team_policies) Enabled/disabled sharing Dropbox Showcase externally for team
        case showcaseChangeExternalSharingPolicy
        /// (team_policies) Changed automatic Smart Sync setting for team
        case smarterSmartSyncPolicyChanged
        /// (team_policies) Changed default Smart Sync setting for team members
        case smartSyncChangePolicy
        /// (team_policies) Opted team into Smart Sync
        case smartSyncNotOptOut
        /// (team_policies) Opted team out of Smart Sync
        case smartSyncOptOut
        /// (team_policies) Changed single sign-on setting for team
        case ssoChangePolicy
        /// (team_policies) Changed team branding policy for team
        case teamBrandingPolicyChanged
        /// (team_policies) Changed App Integrations setting for team
        case teamExtensionsPolicyChanged
        /// (team_policies) Enabled/disabled Team Selective Sync for team
        case teamSelectiveSyncPolicyChanged
        /// (team_policies) Edited the approved list for sharing externally
        case teamSharingWhitelistSubjectsChanged
        /// (team_policies) Added members to two factor authentication exception list
        case tfaAddException
        /// (team_policies) Changed two-step verification setting for team
        case tfaChangePolicy
        /// (team_policies) Removed members from two factor authentication exception list
        case tfaRemoveException
        /// (team_policies) Enabled/disabled option for members to link personal Dropbox account and team account to
        /// same computer
        case twoAccountChangePolicy
        /// (team_policies) Changed team policy for viewer info
        case viewerInfoPolicyChanged
        /// (team_policies) Changed watermarking policy for team
        case watermarkingPolicyChanged
        /// (team_policies) Changed limit on active sessions per member
        case webSessionsChangeActiveSessionLimit
        /// (team_policies) Changed how long members can stay signed in to Dropbox.com
        case webSessionsChangeFixedLengthPolicy
        /// (team_policies) Changed how long team members can be idle while signed in to Dropbox.com
        case webSessionsChangeIdleLengthPolicy
        /// (team_profile) Requested data residency migration for team data
        case dataResidencyMigrationRequestSuccessful
        /// (team_profile) Request for data residency migration for team data has failed
        case dataResidencyMigrationRequestUnsuccessful
        /// (team_profile) Merged another team into this team
        case teamMergeFrom
        /// (team_profile) Merged this team into another team
        case teamMergeTo
        /// (team_profile) Added team background to display on shared link headers
        case teamProfileAddBackground
        /// (team_profile) Added team logo to display on shared link headers
        case teamProfileAddLogo
        /// (team_profile) Changed team background displayed on shared link headers
        case teamProfileChangeBackground
        /// (team_profile) Changed default language for team
        case teamProfileChangeDefaultLanguage
        /// (team_profile) Changed team logo displayed on shared link headers
        case teamProfileChangeLogo
        /// (team_profile) Changed team name
        case teamProfileChangeName
        /// (team_profile) Removed team background displayed on shared link headers
        case teamProfileRemoveBackground
        /// (team_profile) Removed team logo displayed on shared link headers
        case teamProfileRemoveLogo
        /// (tfa) Added backup phone for two-step verification
        case tfaAddBackupPhone
        /// (tfa) Added security key for two-step verification
        case tfaAddSecurityKey
        /// (tfa) Changed backup phone for two-step verification
        case tfaChangeBackupPhone
        /// (tfa) Enabled/disabled/changed two-step verification setting
        case tfaChangeStatus
        /// (tfa) Removed backup phone for two-step verification
        case tfaRemoveBackupPhone
        /// (tfa) Removed security key for two-step verification
        case tfaRemoveSecurityKey
        /// (tfa) Reset two-step verification for team member
        case tfaReset
        /// (trusted_teams) Changed enterprise admin role
        case changedEnterpriseAdminRole
        /// (trusted_teams) Changed enterprise-connected team status
        case changedEnterpriseConnectedTeamStatus
        /// (trusted_teams) Ended enterprise admin session
        case endedEnterpriseAdminSession
        /// (trusted_teams) Ended enterprise admin session (deprecated, replaced by 'Ended enterprise admin session')
        case endedEnterpriseAdminSessionDeprecated
        /// (trusted_teams) Changed who can update a setting
        case enterpriseSettingsLocking
        /// (trusted_teams) Changed guest team admin status
        case guestAdminChangeStatus
        /// (trusted_teams) Started enterprise admin session
        case startedEnterpriseAdminSession
        /// (trusted_teams) Accepted a team merge request
        case teamMergeRequestAccepted
        /// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
        case teamMergeRequestAcceptedShownToPrimaryTeam
        /// (trusted_teams) Accepted a team merge request (deprecated, replaced by 'Accepted a team merge request')
        case teamMergeRequestAcceptedShownToSecondaryTeam
        /// (trusted_teams) Automatically canceled team merge request
        case teamMergeRequestAutoCanceled
        /// (trusted_teams) Canceled a team merge request
        case teamMergeRequestCanceled
        /// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
        case teamMergeRequestCanceledShownToPrimaryTeam
        /// (trusted_teams) Canceled a team merge request (deprecated, replaced by 'Canceled a team merge request')
        case teamMergeRequestCanceledShownToSecondaryTeam
        /// (trusted_teams) Team merge request expired
        case teamMergeRequestExpired
        /// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
        case teamMergeRequestExpiredShownToPrimaryTeam
        /// (trusted_teams) Team merge request expired (deprecated, replaced by 'Team merge request expired')
        case teamMergeRequestExpiredShownToSecondaryTeam
        /// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
        case teamMergeRequestRejectedShownToPrimaryTeam
        /// (trusted_teams) Rejected a team merge request (deprecated, no longer logged)
        case teamMergeRequestRejectedShownToSecondaryTeam
        /// (trusted_teams) Sent a team merge request reminder
        case teamMergeRequestReminder
        /// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
        /// reminder')
        case teamMergeRequestReminderShownToPrimaryTeam
        /// (trusted_teams) Sent a team merge request reminder (deprecated, replaced by 'Sent a team merge request
        /// reminder')
        case teamMergeRequestReminderShownToSecondaryTeam
        /// (trusted_teams) Canceled the team merge
        case teamMergeRequestRevoked
        /// (trusted_teams) Requested to merge their Dropbox team into yours
        case teamMergeRequestSentShownToPrimaryTeam
        /// (trusted_teams) Requested to merge your team into another Dropbox team
        case teamMergeRequestSentShownToSecondaryTeam
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventTypeArgSerializer().serialize(self)))"
        }
    }
    open class EventTypeArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventTypeArg) -> JSON {
            switch value {
                case .adminAlertingAlertStateChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admin_alerting_alert_state_changed")
                    return .dictionary(d)
                case .adminAlertingChangedAlertConfig:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admin_alerting_changed_alert_config")
                    return .dictionary(d)
                case .adminAlertingTriggeredAlert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admin_alerting_triggered_alert")
                    return .dictionary(d)
                case .appBlockedByPermissions:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_blocked_by_permissions")
                    return .dictionary(d)
                case .appLinkTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_link_team")
                    return .dictionary(d)
                case .appLinkUser:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_link_user")
                    return .dictionary(d)
                case .appUnlinkTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_unlink_team")
                    return .dictionary(d)
                case .appUnlinkUser:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_unlink_user")
                    return .dictionary(d)
                case .integrationConnected:
                    var d = [String: JSON]()
                    d[".tag"] = .str("integration_connected")
                    return .dictionary(d)
                case .integrationDisconnected:
                    var d = [String: JSON]()
                    d[".tag"] = .str("integration_disconnected")
                    return .dictionary(d)
                case .fileAddComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_add_comment")
                    return .dictionary(d)
                case .fileChangeCommentSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_change_comment_subscription")
                    return .dictionary(d)
                case .fileDeleteComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_delete_comment")
                    return .dictionary(d)
                case .fileEditComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_edit_comment")
                    return .dictionary(d)
                case .fileLikeComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_like_comment")
                    return .dictionary(d)
                case .fileResolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_resolve_comment")
                    return .dictionary(d)
                case .fileUnlikeComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_unlike_comment")
                    return .dictionary(d)
                case .fileUnresolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_unresolve_comment")
                    return .dictionary(d)
                case .governancePolicyAddFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_add_folders")
                    return .dictionary(d)
                case .governancePolicyAddFolderFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_add_folder_failed")
                    return .dictionary(d)
                case .governancePolicyContentDisposed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_content_disposed")
                    return .dictionary(d)
                case .governancePolicyCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_create")
                    return .dictionary(d)
                case .governancePolicyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_delete")
                    return .dictionary(d)
                case .governancePolicyEditDetails:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_edit_details")
                    return .dictionary(d)
                case .governancePolicyEditDuration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_edit_duration")
                    return .dictionary(d)
                case .governancePolicyExportCreated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_export_created")
                    return .dictionary(d)
                case .governancePolicyExportRemoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_export_removed")
                    return .dictionary(d)
                case .governancePolicyRemoveFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_remove_folders")
                    return .dictionary(d)
                case .governancePolicyReportCreated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_report_created")
                    return .dictionary(d)
                case .governancePolicyZipPartDownloaded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("governance_policy_zip_part_downloaded")
                    return .dictionary(d)
                case .legalHoldsActivateAHold:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_activate_a_hold")
                    return .dictionary(d)
                case .legalHoldsAddMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_add_members")
                    return .dictionary(d)
                case .legalHoldsChangeHoldDetails:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_change_hold_details")
                    return .dictionary(d)
                case .legalHoldsChangeHoldName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_change_hold_name")
                    return .dictionary(d)
                case .legalHoldsExportAHold:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_export_a_hold")
                    return .dictionary(d)
                case .legalHoldsExportCancelled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_export_cancelled")
                    return .dictionary(d)
                case .legalHoldsExportDownloaded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_export_downloaded")
                    return .dictionary(d)
                case .legalHoldsExportRemoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_export_removed")
                    return .dictionary(d)
                case .legalHoldsReleaseAHold:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_release_a_hold")
                    return .dictionary(d)
                case .legalHoldsRemoveMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_remove_members")
                    return .dictionary(d)
                case .legalHoldsReportAHold:
                    var d = [String: JSON]()
                    d[".tag"] = .str("legal_holds_report_a_hold")
                    return .dictionary(d)
                case .deviceChangeIpDesktop:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_desktop")
                    return .dictionary(d)
                case .deviceChangeIpMobile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_mobile")
                    return .dictionary(d)
                case .deviceChangeIpWeb:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_web")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_delete_on_unlink_fail")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_delete_on_unlink_success")
                    return .dictionary(d)
                case .deviceLinkFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_link_fail")
                    return .dictionary(d)
                case .deviceLinkSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_link_success")
                    return .dictionary(d)
                case .deviceManagementDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_management_disabled")
                    return .dictionary(d)
                case .deviceManagementEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_management_enabled")
                    return .dictionary(d)
                case .deviceSyncBackupStatusChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_sync_backup_status_changed")
                    return .dictionary(d)
                case .deviceUnlink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_unlink")
                    return .dictionary(d)
                case .dropboxPasswordsExported:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dropbox_passwords_exported")
                    return .dictionary(d)
                case .dropboxPasswordsNewDeviceEnrolled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dropbox_passwords_new_device_enrolled")
                    return .dictionary(d)
                case .emmRefreshAuthToken:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_refresh_auth_token")
                    return .dictionary(d)
                case .externalDriveBackupEligibilityStatusChecked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("external_drive_backup_eligibility_status_checked")
                    return .dictionary(d)
                case .externalDriveBackupStatusChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("external_drive_backup_status_changed")
                    return .dictionary(d)
                case .accountCaptureChangeAvailability:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_change_availability")
                    return .dictionary(d)
                case .accountCaptureMigrateAccount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_migrate_account")
                    return .dictionary(d)
                case .accountCaptureNotificationEmailsSent:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_notification_emails_sent")
                    return .dictionary(d)
                case .accountCaptureRelinquishAccount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_relinquish_account")
                    return .dictionary(d)
                case .disabledDomainInvites:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled_domain_invites")
                    return .dictionary(d)
                case .domainInvitesApproveRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_approve_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesDeclineRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_decline_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesEmailExistingUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_email_existing_users")
                    return .dictionary(d)
                case .domainInvitesRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToNo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_no")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToYes:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_yes")
                    return .dictionary(d)
                case .domainVerificationAddDomainFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_add_domain_fail")
                    return .dictionary(d)
                case .domainVerificationAddDomainSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_add_domain_success")
                    return .dictionary(d)
                case .domainVerificationRemoveDomain:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_remove_domain")
                    return .dictionary(d)
                case .enabledDomainInvites:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled_domain_invites")
                    return .dictionary(d)
                case .applyNamingConvention:
                    var d = [String: JSON]()
                    d[".tag"] = .str("apply_naming_convention")
                    return .dictionary(d)
                case .createFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("create_folder")
                    return .dictionary(d)
                case .fileAdd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_add")
                    return .dictionary(d)
                case .fileCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_copy")
                    return .dictionary(d)
                case .fileDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_delete")
                    return .dictionary(d)
                case .fileDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_download")
                    return .dictionary(d)
                case .fileEdit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_edit")
                    return .dictionary(d)
                case .fileGetCopyReference:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_get_copy_reference")
                    return .dictionary(d)
                case .fileLockingLockStatusChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_locking_lock_status_changed")
                    return .dictionary(d)
                case .fileMove:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_move")
                    return .dictionary(d)
                case .filePermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_permanently_delete")
                    return .dictionary(d)
                case .filePreview:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_preview")
                    return .dictionary(d)
                case .fileRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_rename")
                    return .dictionary(d)
                case .fileRestore:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_restore")
                    return .dictionary(d)
                case .fileRevert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_revert")
                    return .dictionary(d)
                case .fileRollbackChanges:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_rollback_changes")
                    return .dictionary(d)
                case .fileSaveCopyReference:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_save_copy_reference")
                    return .dictionary(d)
                case .folderOverviewDescriptionChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("folder_overview_description_changed")
                    return .dictionary(d)
                case .folderOverviewItemPinned:
                    var d = [String: JSON]()
                    d[".tag"] = .str("folder_overview_item_pinned")
                    return .dictionary(d)
                case .folderOverviewItemUnpinned:
                    var d = [String: JSON]()
                    d[".tag"] = .str("folder_overview_item_unpinned")
                    return .dictionary(d)
                case .objectLabelAdded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("object_label_added")
                    return .dictionary(d)
                case .objectLabelRemoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("object_label_removed")
                    return .dictionary(d)
                case .objectLabelUpdatedValue:
                    var d = [String: JSON]()
                    d[".tag"] = .str("object_label_updated_value")
                    return .dictionary(d)
                case .organizeFolderWithTidy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("organize_folder_with_tidy")
                    return .dictionary(d)
                case .rewindFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("rewind_folder")
                    return .dictionary(d)
                case .undoNamingConvention:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undo_naming_convention")
                    return .dictionary(d)
                case .undoOrganizeFolderWithTidy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undo_organize_folder_with_tidy")
                    return .dictionary(d)
                case .userTagsAdded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user_tags_added")
                    return .dictionary(d)
                case .userTagsRemoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user_tags_removed")
                    return .dictionary(d)
                case .emailIngestReceiveFile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("email_ingest_receive_file")
                    return .dictionary(d)
                case .fileRequestChange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_change")
                    return .dictionary(d)
                case .fileRequestClose:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_close")
                    return .dictionary(d)
                case .fileRequestCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_create")
                    return .dictionary(d)
                case .fileRequestDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_delete")
                    return .dictionary(d)
                case .fileRequestReceiveFile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_receive_file")
                    return .dictionary(d)
                case .groupAddExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_add_external_id")
                    return .dictionary(d)
                case .groupAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_add_member")
                    return .dictionary(d)
                case .groupChangeExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_external_id")
                    return .dictionary(d)
                case .groupChangeManagementType:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_management_type")
                    return .dictionary(d)
                case .groupChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_member_role")
                    return .dictionary(d)
                case .groupCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_create")
                    return .dictionary(d)
                case .groupDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_delete")
                    return .dictionary(d)
                case .groupDescriptionUpdated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_description_updated")
                    return .dictionary(d)
                case .groupJoinPolicyUpdated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_join_policy_updated")
                    return .dictionary(d)
                case .groupMoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_moved")
                    return .dictionary(d)
                case .groupRemoveExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_remove_external_id")
                    return .dictionary(d)
                case .groupRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_remove_member")
                    return .dictionary(d)
                case .groupRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_rename")
                    return .dictionary(d)
                case .accountLockOrUnlocked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_lock_or_unlocked")
                    return .dictionary(d)
                case .emmError:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_error")
                    return .dictionary(d)
                case .guestAdminSignedInViaTrustedTeams:
                    var d = [String: JSON]()
                    d[".tag"] = .str("guest_admin_signed_in_via_trusted_teams")
                    return .dictionary(d)
                case .guestAdminSignedOutViaTrustedTeams:
                    var d = [String: JSON]()
                    d[".tag"] = .str("guest_admin_signed_out_via_trusted_teams")
                    return .dictionary(d)
                case .loginFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("login_fail")
                    return .dictionary(d)
                case .loginSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("login_success")
                    return .dictionary(d)
                case .logout:
                    var d = [String: JSON]()
                    d[".tag"] = .str("logout")
                    return .dictionary(d)
                case .resellerSupportSessionEnd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_support_session_end")
                    return .dictionary(d)
                case .resellerSupportSessionStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_support_session_start")
                    return .dictionary(d)
                case .signInAsSessionEnd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sign_in_as_session_end")
                    return .dictionary(d)
                case .signInAsSessionStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sign_in_as_session_start")
                    return .dictionary(d)
                case .ssoError:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_error")
                    return .dictionary(d)
                case .createTeamInviteLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("create_team_invite_link")
                    return .dictionary(d)
                case .deleteTeamInviteLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("delete_team_invite_link")
                    return .dictionary(d)
                case .memberAddExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_add_external_id")
                    return .dictionary(d)
                case .memberAddName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_add_name")
                    return .dictionary(d)
                case .memberChangeAdminRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_admin_role")
                    return .dictionary(d)
                case .memberChangeEmail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_email")
                    return .dictionary(d)
                case .memberChangeExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_external_id")
                    return .dictionary(d)
                case .memberChangeMembershipType:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_membership_type")
                    return .dictionary(d)
                case .memberChangeName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_name")
                    return .dictionary(d)
                case .memberChangeResellerRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_reseller_role")
                    return .dictionary(d)
                case .memberChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_status")
                    return .dictionary(d)
                case .memberDeleteManualContacts:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_delete_manual_contacts")
                    return .dictionary(d)
                case .memberDeleteProfilePhoto:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_delete_profile_photo")
                    return .dictionary(d)
                case .memberPermanentlyDeleteAccountContents:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_permanently_delete_account_contents")
                    return .dictionary(d)
                case .memberRemoveExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_remove_external_id")
                    return .dictionary(d)
                case .memberSetProfilePhoto:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_set_profile_photo")
                    return .dictionary(d)
                case .memberSpaceLimitsAddCustomQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_add_custom_quota")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCustomQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_custom_quota")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_status")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveCustomQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_remove_custom_quota")
                    return .dictionary(d)
                case .memberSuggest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_suggest")
                    return .dictionary(d)
                case .memberTransferAccountContents:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_transfer_account_contents")
                    return .dictionary(d)
                case .pendingSecondaryEmailAdded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("pending_secondary_email_added")
                    return .dictionary(d)
                case .secondaryEmailDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("secondary_email_deleted")
                    return .dictionary(d)
                case .secondaryEmailVerified:
                    var d = [String: JSON]()
                    d[".tag"] = .str("secondary_email_verified")
                    return .dictionary(d)
                case .secondaryMailsPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("secondary_mails_policy_changed")
                    return .dictionary(d)
                case .binderAddPage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_add_page")
                    return .dictionary(d)
                case .binderAddSection:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_add_section")
                    return .dictionary(d)
                case .binderRemovePage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_remove_page")
                    return .dictionary(d)
                case .binderRemoveSection:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_remove_section")
                    return .dictionary(d)
                case .binderRenamePage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_rename_page")
                    return .dictionary(d)
                case .binderRenameSection:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_rename_section")
                    return .dictionary(d)
                case .binderReorderPage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_reorder_page")
                    return .dictionary(d)
                case .binderReorderSection:
                    var d = [String: JSON]()
                    d[".tag"] = .str("binder_reorder_section")
                    return .dictionary(d)
                case .paperContentAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_add_member")
                    return .dictionary(d)
                case .paperContentAddToFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_add_to_folder")
                    return .dictionary(d)
                case .paperContentArchive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_archive")
                    return .dictionary(d)
                case .paperContentCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_create")
                    return .dictionary(d)
                case .paperContentPermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_permanently_delete")
                    return .dictionary(d)
                case .paperContentRemoveFromFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_remove_from_folder")
                    return .dictionary(d)
                case .paperContentRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_remove_member")
                    return .dictionary(d)
                case .paperContentRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_rename")
                    return .dictionary(d)
                case .paperContentRestore:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_restore")
                    return .dictionary(d)
                case .paperDocAddComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_add_comment")
                    return .dictionary(d)
                case .paperDocChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_member_role")
                    return .dictionary(d)
                case .paperDocChangeSharingPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_sharing_policy")
                    return .dictionary(d)
                case .paperDocChangeSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_subscription")
                    return .dictionary(d)
                case .paperDocDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_deleted")
                    return .dictionary(d)
                case .paperDocDeleteComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_delete_comment")
                    return .dictionary(d)
                case .paperDocDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_download")
                    return .dictionary(d)
                case .paperDocEdit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_edit")
                    return .dictionary(d)
                case .paperDocEditComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_edit_comment")
                    return .dictionary(d)
                case .paperDocFollowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_followed")
                    return .dictionary(d)
                case .paperDocMention:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_mention")
                    return .dictionary(d)
                case .paperDocOwnershipChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_ownership_changed")
                    return .dictionary(d)
                case .paperDocRequestAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_request_access")
                    return .dictionary(d)
                case .paperDocResolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_resolve_comment")
                    return .dictionary(d)
                case .paperDocRevert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_revert")
                    return .dictionary(d)
                case .paperDocSlackShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_slack_share")
                    return .dictionary(d)
                case .paperDocTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_team_invite")
                    return .dictionary(d)
                case .paperDocTrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_trashed")
                    return .dictionary(d)
                case .paperDocUnresolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_unresolve_comment")
                    return .dictionary(d)
                case .paperDocUntrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_untrashed")
                    return .dictionary(d)
                case .paperDocView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_view")
                    return .dictionary(d)
                case .paperExternalViewAllow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_allow")
                    return .dictionary(d)
                case .paperExternalViewDefaultTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_default_team")
                    return .dictionary(d)
                case .paperExternalViewForbid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_forbid")
                    return .dictionary(d)
                case .paperFolderChangeSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_change_subscription")
                    return .dictionary(d)
                case .paperFolderDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_deleted")
                    return .dictionary(d)
                case .paperFolderFollowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_followed")
                    return .dictionary(d)
                case .paperFolderTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_team_invite")
                    return .dictionary(d)
                case .paperPublishedLinkChangePermission:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_published_link_change_permission")
                    return .dictionary(d)
                case .paperPublishedLinkCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_published_link_create")
                    return .dictionary(d)
                case .paperPublishedLinkDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_published_link_disabled")
                    return .dictionary(d)
                case .paperPublishedLinkView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_published_link_view")
                    return .dictionary(d)
                case .passwordChange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_change")
                    return .dictionary(d)
                case .passwordReset:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_reset")
                    return .dictionary(d)
                case .passwordResetAll:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_reset_all")
                    return .dictionary(d)
                case .classificationCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("classification_create_report")
                    return .dictionary(d)
                case .classificationCreateReportFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("classification_create_report_fail")
                    return .dictionary(d)
                case .emmCreateExceptionsReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_create_exceptions_report")
                    return .dictionary(d)
                case .emmCreateUsageReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_create_usage_report")
                    return .dictionary(d)
                case .exportMembersReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("export_members_report")
                    return .dictionary(d)
                case .exportMembersReportFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("export_members_report_fail")
                    return .dictionary(d)
                case .externalSharingCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("external_sharing_create_report")
                    return .dictionary(d)
                case .externalSharingReportFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("external_sharing_report_failed")
                    return .dictionary(d)
                case .noExpirationLinkGenCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_expiration_link_gen_create_report")
                    return .dictionary(d)
                case .noExpirationLinkGenReportFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_expiration_link_gen_report_failed")
                    return .dictionary(d)
                case .noPasswordLinkGenCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_password_link_gen_create_report")
                    return .dictionary(d)
                case .noPasswordLinkGenReportFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_password_link_gen_report_failed")
                    return .dictionary(d)
                case .noPasswordLinkViewCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_password_link_view_create_report")
                    return .dictionary(d)
                case .noPasswordLinkViewReportFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_password_link_view_report_failed")
                    return .dictionary(d)
                case .outdatedLinkViewCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("outdated_link_view_create_report")
                    return .dictionary(d)
                case .outdatedLinkViewReportFailed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("outdated_link_view_report_failed")
                    return .dictionary(d)
                case .paperAdminExportStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_admin_export_start")
                    return .dictionary(d)
                case .smartSyncCreateAdminPrivilegeReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_create_admin_privilege_report")
                    return .dictionary(d)
                case .teamActivityCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_activity_create_report")
                    return .dictionary(d)
                case .teamActivityCreateReportFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_activity_create_report_fail")
                    return .dictionary(d)
                case .collectionShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("collection_share")
                    return .dictionary(d)
                case .fileTransfersFileAdd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_file_add")
                    return .dictionary(d)
                case .fileTransfersTransferDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_transfer_delete")
                    return .dictionary(d)
                case .fileTransfersTransferDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_transfer_download")
                    return .dictionary(d)
                case .fileTransfersTransferSend:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_transfer_send")
                    return .dictionary(d)
                case .fileTransfersTransferView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_transfer_view")
                    return .dictionary(d)
                case .noteAclInviteOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_invite_only")
                    return .dictionary(d)
                case .noteAclLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_link")
                    return .dictionary(d)
                case .noteAclTeamLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_team_link")
                    return .dictionary(d)
                case .noteShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_shared")
                    return .dictionary(d)
                case .noteShareReceive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_share_receive")
                    return .dictionary(d)
                case .openNoteShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("open_note_shared")
                    return .dictionary(d)
                case .sfAddGroup:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_add_group")
                    return .dictionary(d)
                case .sfAllowNonMembersToViewSharedLinks:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_allow_non_members_to_view_shared_links")
                    return .dictionary(d)
                case .sfExternalInviteWarn:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_external_invite_warn")
                    return .dictionary(d)
                case .sfFbInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_fb_invite")
                    return .dictionary(d)
                case .sfFbInviteChangeRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_fb_invite_change_role")
                    return .dictionary(d)
                case .sfFbUninvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_fb_uninvite")
                    return .dictionary(d)
                case .sfInviteGroup:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_invite_group")
                    return .dictionary(d)
                case .sfTeamGrantAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_grant_access")
                    return .dictionary(d)
                case .sfTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_invite")
                    return .dictionary(d)
                case .sfTeamInviteChangeRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_invite_change_role")
                    return .dictionary(d)
                case .sfTeamJoin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_join")
                    return .dictionary(d)
                case .sfTeamJoinFromOobLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_join_from_oob_link")
                    return .dictionary(d)
                case .sfTeamUninvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_uninvite")
                    return .dictionary(d)
                case .sharedContentAddInvitees:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_invitees")
                    return .dictionary(d)
                case .sharedContentAddLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_link_expiry")
                    return .dictionary(d)
                case .sharedContentAddLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_link_password")
                    return .dictionary(d)
                case .sharedContentAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_member")
                    return .dictionary(d)
                case .sharedContentChangeDownloadsPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_downloads_policy")
                    return .dictionary(d)
                case .sharedContentChangeInviteeRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_invitee_role")
                    return .dictionary(d)
                case .sharedContentChangeLinkAudience:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_audience")
                    return .dictionary(d)
                case .sharedContentChangeLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_expiry")
                    return .dictionary(d)
                case .sharedContentChangeLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_password")
                    return .dictionary(d)
                case .sharedContentChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_member_role")
                    return .dictionary(d)
                case .sharedContentChangeViewerInfoPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_viewer_info_policy")
                    return .dictionary(d)
                case .sharedContentClaimInvitation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_claim_invitation")
                    return .dictionary(d)
                case .sharedContentCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_copy")
                    return .dictionary(d)
                case .sharedContentDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_download")
                    return .dictionary(d)
                case .sharedContentRelinquishMembership:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_relinquish_membership")
                    return .dictionary(d)
                case .sharedContentRemoveInvitees:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_invitees")
                    return .dictionary(d)
                case .sharedContentRemoveLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_link_expiry")
                    return .dictionary(d)
                case .sharedContentRemoveLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_link_password")
                    return .dictionary(d)
                case .sharedContentRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_member")
                    return .dictionary(d)
                case .sharedContentRequestAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_request_access")
                    return .dictionary(d)
                case .sharedContentRestoreInvitees:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_restore_invitees")
                    return .dictionary(d)
                case .sharedContentRestoreMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_restore_member")
                    return .dictionary(d)
                case .sharedContentUnshare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_unshare")
                    return .dictionary(d)
                case .sharedContentView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_view")
                    return .dictionary(d)
                case .sharedFolderChangeLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_link_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersInheritancePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_members_inheritance_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersManagementPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_members_management_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMembersPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_members_policy")
                    return .dictionary(d)
                case .sharedFolderCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_create")
                    return .dictionary(d)
                case .sharedFolderDeclineInvitation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_decline_invitation")
                    return .dictionary(d)
                case .sharedFolderMount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_mount")
                    return .dictionary(d)
                case .sharedFolderNest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_nest")
                    return .dictionary(d)
                case .sharedFolderTransferOwnership:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_transfer_ownership")
                    return .dictionary(d)
                case .sharedFolderUnmount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_unmount")
                    return .dictionary(d)
                case .sharedLinkAddExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_add_expiry")
                    return .dictionary(d)
                case .sharedLinkChangeExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_change_expiry")
                    return .dictionary(d)
                case .sharedLinkChangeVisibility:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_change_visibility")
                    return .dictionary(d)
                case .sharedLinkCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_copy")
                    return .dictionary(d)
                case .sharedLinkCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_create")
                    return .dictionary(d)
                case .sharedLinkDisable:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_disable")
                    return .dictionary(d)
                case .sharedLinkDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_download")
                    return .dictionary(d)
                case .sharedLinkRemoveExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_remove_expiry")
                    return .dictionary(d)
                case .sharedLinkSettingsAddExpiration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_add_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsAddPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_add_password")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_allow_download_disabled")
                    return .dictionary(d)
                case .sharedLinkSettingsAllowDownloadEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_allow_download_enabled")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeAudience:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_change_audience")
                    return .dictionary(d)
                case .sharedLinkSettingsChangeExpiration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_change_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsChangePassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_change_password")
                    return .dictionary(d)
                case .sharedLinkSettingsRemoveExpiration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_remove_expiration")
                    return .dictionary(d)
                case .sharedLinkSettingsRemovePassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_settings_remove_password")
                    return .dictionary(d)
                case .sharedLinkShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_share")
                    return .dictionary(d)
                case .sharedLinkView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_link_view")
                    return .dictionary(d)
                case .sharedNoteOpened:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_note_opened")
                    return .dictionary(d)
                case .shmodelDisableDownloads:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_disable_downloads")
                    return .dictionary(d)
                case .shmodelEnableDownloads:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_enable_downloads")
                    return .dictionary(d)
                case .shmodelGroupShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_group_share")
                    return .dictionary(d)
                case .showcaseAccessGranted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_access_granted")
                    return .dictionary(d)
                case .showcaseAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_add_member")
                    return .dictionary(d)
                case .showcaseArchived:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_archived")
                    return .dictionary(d)
                case .showcaseCreated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_created")
                    return .dictionary(d)
                case .showcaseDeleteComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_delete_comment")
                    return .dictionary(d)
                case .showcaseEdited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_edited")
                    return .dictionary(d)
                case .showcaseEditComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_edit_comment")
                    return .dictionary(d)
                case .showcaseFileAdded:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_file_added")
                    return .dictionary(d)
                case .showcaseFileDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_file_download")
                    return .dictionary(d)
                case .showcaseFileRemoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_file_removed")
                    return .dictionary(d)
                case .showcaseFileView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_file_view")
                    return .dictionary(d)
                case .showcasePermanentlyDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_permanently_deleted")
                    return .dictionary(d)
                case .showcasePostComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_post_comment")
                    return .dictionary(d)
                case .showcaseRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_remove_member")
                    return .dictionary(d)
                case .showcaseRenamed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_renamed")
                    return .dictionary(d)
                case .showcaseRequestAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_request_access")
                    return .dictionary(d)
                case .showcaseResolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_resolve_comment")
                    return .dictionary(d)
                case .showcaseRestored:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_restored")
                    return .dictionary(d)
                case .showcaseTrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_trashed")
                    return .dictionary(d)
                case .showcaseTrashedDeprecated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_trashed_deprecated")
                    return .dictionary(d)
                case .showcaseUnresolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_unresolve_comment")
                    return .dictionary(d)
                case .showcaseUntrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_untrashed")
                    return .dictionary(d)
                case .showcaseUntrashedDeprecated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_untrashed_deprecated")
                    return .dictionary(d)
                case .showcaseView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_view")
                    return .dictionary(d)
                case .ssoAddCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_cert")
                    return .dictionary(d)
                case .ssoAddLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_login_url")
                    return .dictionary(d)
                case .ssoAddLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_logout_url")
                    return .dictionary(d)
                case .ssoChangeCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_cert")
                    return .dictionary(d)
                case .ssoChangeLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_login_url")
                    return .dictionary(d)
                case .ssoChangeLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_logout_url")
                    return .dictionary(d)
                case .ssoChangeSamlIdentityMode:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_saml_identity_mode")
                    return .dictionary(d)
                case .ssoRemoveCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_cert")
                    return .dictionary(d)
                case .ssoRemoveLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_login_url")
                    return .dictionary(d)
                case .ssoRemoveLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_logout_url")
                    return .dictionary(d)
                case .teamFolderChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_change_status")
                    return .dictionary(d)
                case .teamFolderCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_create")
                    return .dictionary(d)
                case .teamFolderDowngrade:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_downgrade")
                    return .dictionary(d)
                case .teamFolderPermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_permanently_delete")
                    return .dictionary(d)
                case .teamFolderRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_rename")
                    return .dictionary(d)
                case .teamSelectiveSyncSettingsChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_selective_sync_settings_changed")
                    return .dictionary(d)
                case .accountCaptureChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_change_policy")
                    return .dictionary(d)
                case .adminEmailRemindersChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admin_email_reminders_changed")
                    return .dictionary(d)
                case .allowDownloadDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow_download_disabled")
                    return .dictionary(d)
                case .allowDownloadEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow_download_enabled")
                    return .dictionary(d)
                case .appPermissionsChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_permissions_changed")
                    return .dictionary(d)
                case .cameraUploadsPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("camera_uploads_policy_changed")
                    return .dictionary(d)
                case .captureTranscriptPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("capture_transcript_policy_changed")
                    return .dictionary(d)
                case .classificationChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("classification_change_policy")
                    return .dictionary(d)
                case .computerBackupPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("computer_backup_policy_changed")
                    return .dictionary(d)
                case .contentAdministrationPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("content_administration_policy_changed")
                    return .dictionary(d)
                case .dataPlacementRestrictionChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_placement_restriction_change_policy")
                    return .dictionary(d)
                case .dataPlacementRestrictionSatisfyPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_placement_restriction_satisfy_policy")
                    return .dictionary(d)
                case .deviceApprovalsAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_add_exception")
                    return .dictionary(d)
                case .deviceApprovalsChangeDesktopPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_desktop_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeMobilePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_mobile_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeOverageAction:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_overage_action")
                    return .dictionary(d)
                case .deviceApprovalsChangeUnlinkAction:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_unlink_action")
                    return .dictionary(d)
                case .deviceApprovalsRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_remove_exception")
                    return .dictionary(d)
                case .directoryRestrictionsAddMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("directory_restrictions_add_members")
                    return .dictionary(d)
                case .directoryRestrictionsRemoveMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("directory_restrictions_remove_members")
                    return .dictionary(d)
                case .dropboxPasswordsPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dropbox_passwords_policy_changed")
                    return .dictionary(d)
                case .emailIngestPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("email_ingest_policy_changed")
                    return .dictionary(d)
                case .emmAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_add_exception")
                    return .dictionary(d)
                case .emmChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_change_policy")
                    return .dictionary(d)
                case .emmRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_remove_exception")
                    return .dictionary(d)
                case .extendedVersionHistoryChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("extended_version_history_change_policy")
                    return .dictionary(d)
                case .externalDriveBackupPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("external_drive_backup_policy_changed")
                    return .dictionary(d)
                case .fileCommentsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_comments_change_policy")
                    return .dictionary(d)
                case .fileLockingPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_locking_policy_changed")
                    return .dictionary(d)
                case .fileProviderMigrationPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_provider_migration_policy_changed")
                    return .dictionary(d)
                case .fileRequestsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_change_policy")
                    return .dictionary(d)
                case .fileRequestsEmailsEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_emails_enabled")
                    return .dictionary(d)
                case .fileRequestsEmailsRestrictedToTeamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_emails_restricted_to_team_only")
                    return .dictionary(d)
                case .fileTransfersPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_transfers_policy_changed")
                    return .dictionary(d)
                case .folderLinkRestrictionPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("folder_link_restriction_policy_changed")
                    return .dictionary(d)
                case .googleSsoChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("google_sso_change_policy")
                    return .dictionary(d)
                case .groupUserManagementChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_user_management_change_policy")
                    return .dictionary(d)
                case .integrationPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("integration_policy_changed")
                    return .dictionary(d)
                case .inviteAcceptanceEmailPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invite_acceptance_email_policy_changed")
                    return .dictionary(d)
                case .memberRequestsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_requests_change_policy")
                    return .dictionary(d)
                case .memberSendInvitePolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_send_invite_policy_changed")
                    return .dictionary(d)
                case .memberSpaceLimitsAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_add_exception")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeCapsTypePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_caps_type_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_remove_exception")
                    return .dictionary(d)
                case .memberSuggestionsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_suggestions_change_policy")
                    return .dictionary(d)
                case .microsoftOfficeAddinChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("microsoft_office_addin_change_policy")
                    return .dictionary(d)
                case .networkControlChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("network_control_change_policy")
                    return .dictionary(d)
                case .paperChangeDeploymentPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_deployment_policy")
                    return .dictionary(d)
                case .paperChangeMemberLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_member_link_policy")
                    return .dictionary(d)
                case .paperChangeMemberPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_member_policy")
                    return .dictionary(d)
                case .paperChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_policy")
                    return .dictionary(d)
                case .paperDefaultFolderPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_default_folder_policy_changed")
                    return .dictionary(d)
                case .paperDesktopPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_desktop_policy_changed")
                    return .dictionary(d)
                case .paperEnabledUsersGroupAddition:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_enabled_users_group_addition")
                    return .dictionary(d)
                case .paperEnabledUsersGroupRemoval:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_enabled_users_group_removal")
                    return .dictionary(d)
                case .passwordStrengthRequirementsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_strength_requirements_change_policy")
                    return .dictionary(d)
                case .permanentDeleteChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("permanent_delete_change_policy")
                    return .dictionary(d)
                case .resellerSupportChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_support_change_policy")
                    return .dictionary(d)
                case .rewindPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("rewind_policy_changed")
                    return .dictionary(d)
                case .sendForSignaturePolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("send_for_signature_policy_changed")
                    return .dictionary(d)
                case .sharingChangeFolderJoinPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_folder_join_policy")
                    return .dictionary(d)
                case .sharingChangeLinkAllowChangeExpirationPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_link_allow_change_expiration_policy")
                    return .dictionary(d)
                case .sharingChangeLinkDefaultExpirationPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_link_default_expiration_policy")
                    return .dictionary(d)
                case .sharingChangeLinkEnforcePasswordPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_link_enforce_password_policy")
                    return .dictionary(d)
                case .sharingChangeLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_link_policy")
                    return .dictionary(d)
                case .sharingChangeMemberPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_member_policy")
                    return .dictionary(d)
                case .showcaseChangeDownloadPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_change_download_policy")
                    return .dictionary(d)
                case .showcaseChangeEnabledPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_change_enabled_policy")
                    return .dictionary(d)
                case .showcaseChangeExternalSharingPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("showcase_change_external_sharing_policy")
                    return .dictionary(d)
                case .smarterSmartSyncPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smarter_smart_sync_policy_changed")
                    return .dictionary(d)
                case .smartSyncChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_change_policy")
                    return .dictionary(d)
                case .smartSyncNotOptOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_not_opt_out")
                    return .dictionary(d)
                case .smartSyncOptOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_opt_out")
                    return .dictionary(d)
                case .ssoChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_policy")
                    return .dictionary(d)
                case .teamBrandingPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_branding_policy_changed")
                    return .dictionary(d)
                case .teamExtensionsPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_extensions_policy_changed")
                    return .dictionary(d)
                case .teamSelectiveSyncPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_selective_sync_policy_changed")
                    return .dictionary(d)
                case .teamSharingWhitelistSubjectsChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_sharing_whitelist_subjects_changed")
                    return .dictionary(d)
                case .tfaAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_add_exception")
                    return .dictionary(d)
                case .tfaChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_policy")
                    return .dictionary(d)
                case .tfaRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_remove_exception")
                    return .dictionary(d)
                case .twoAccountChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("two_account_change_policy")
                    return .dictionary(d)
                case .viewerInfoPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("viewer_info_policy_changed")
                    return .dictionary(d)
                case .watermarkingPolicyChanged:
                    var d = [String: JSON]()
                    d[".tag"] = .str("watermarking_policy_changed")
                    return .dictionary(d)
                case .webSessionsChangeActiveSessionLimit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_sessions_change_active_session_limit")
                    return .dictionary(d)
                case .webSessionsChangeFixedLengthPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_sessions_change_fixed_length_policy")
                    return .dictionary(d)
                case .webSessionsChangeIdleLengthPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_sessions_change_idle_length_policy")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestSuccessful:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_residency_migration_request_successful")
                    return .dictionary(d)
                case .dataResidencyMigrationRequestUnsuccessful:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_residency_migration_request_unsuccessful")
                    return .dictionary(d)
                case .teamMergeFrom:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_from")
                    return .dictionary(d)
                case .teamMergeTo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_to")
                    return .dictionary(d)
                case .teamProfileAddBackground:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_add_background")
                    return .dictionary(d)
                case .teamProfileAddLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_add_logo")
                    return .dictionary(d)
                case .teamProfileChangeBackground:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_background")
                    return .dictionary(d)
                case .teamProfileChangeDefaultLanguage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_default_language")
                    return .dictionary(d)
                case .teamProfileChangeLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_logo")
                    return .dictionary(d)
                case .teamProfileChangeName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_name")
                    return .dictionary(d)
                case .teamProfileRemoveBackground:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_remove_background")
                    return .dictionary(d)
                case .teamProfileRemoveLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_remove_logo")
                    return .dictionary(d)
                case .tfaAddBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_add_backup_phone")
                    return .dictionary(d)
                case .tfaAddSecurityKey:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_add_security_key")
                    return .dictionary(d)
                case .tfaChangeBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_backup_phone")
                    return .dictionary(d)
                case .tfaChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_status")
                    return .dictionary(d)
                case .tfaRemoveBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_remove_backup_phone")
                    return .dictionary(d)
                case .tfaRemoveSecurityKey:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_remove_security_key")
                    return .dictionary(d)
                case .tfaReset:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_reset")
                    return .dictionary(d)
                case .changedEnterpriseAdminRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("changed_enterprise_admin_role")
                    return .dictionary(d)
                case .changedEnterpriseConnectedTeamStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("changed_enterprise_connected_team_status")
                    return .dictionary(d)
                case .endedEnterpriseAdminSession:
                    var d = [String: JSON]()
                    d[".tag"] = .str("ended_enterprise_admin_session")
                    return .dictionary(d)
                case .endedEnterpriseAdminSessionDeprecated:
                    var d = [String: JSON]()
                    d[".tag"] = .str("ended_enterprise_admin_session_deprecated")
                    return .dictionary(d)
                case .enterpriseSettingsLocking:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enterprise_settings_locking")
                    return .dictionary(d)
                case .guestAdminChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("guest_admin_change_status")
                    return .dictionary(d)
                case .startedEnterpriseAdminSession:
                    var d = [String: JSON]()
                    d[".tag"] = .str("started_enterprise_admin_session")
                    return .dictionary(d)
                case .teamMergeRequestAccepted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_accepted")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestAcceptedShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_accepted_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestAutoCanceled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_auto_canceled")
                    return .dictionary(d)
                case .teamMergeRequestCanceled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_canceled")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestCanceledShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_canceled_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestExpired:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_expired")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_expired_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestExpiredShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_expired_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestRejectedShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_rejected_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestReminder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_reminder")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestReminderShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_reminder_shown_to_secondary_team")
                    return .dictionary(d)
                case .teamMergeRequestRevoked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_revoked")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToPrimaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_sent_shown_to_primary_team")
                    return .dictionary(d)
                case .teamMergeRequestSentShownToSecondaryTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_request_sent_shown_to_secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventTypeArg {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admin_alerting_alert_state_changed":
                            return EventTypeArg.adminAlertingAlertStateChanged
                        case "admin_alerting_changed_alert_config":
                            return EventTypeArg.adminAlertingChangedAlertConfig
                        case "admin_alerting_triggered_alert":
                            return EventTypeArg.adminAlertingTriggeredAlert
                        case "app_blocked_by_permissions":
                            return EventTypeArg.appBlockedByPermissions
                        case "app_link_team":
                            return EventTypeArg.appLinkTeam
                        case "app_link_user":
                            return EventTypeArg.appLinkUser
                        case "app_unlink_team":
                            return EventTypeArg.appUnlinkTeam
                        case "app_unlink_user":
                            return EventTypeArg.appUnlinkUser
                        case "integration_connected":
                            return EventTypeArg.integrationConnected
                        case "integration_disconnected":
                            return EventTypeArg.integrationDisconnected
                        case "file_add_comment":
                            return EventTypeArg.fileAddComment
                        case "file_change_comment_subscription":
                            return EventTypeArg.fileChangeCommentSubscription
                        case "file_delete_comment":
                            return EventTypeArg.fileDeleteComment
                        case "file_edit_comment":
                            return EventTypeArg.fileEditComment
                        case "file_like_comment":
                            return EventTypeArg.fileLikeComment
                        case "file_resolve_comment":
                            return EventTypeArg.fileResolveComment
                        case "file_unlike_comment":
                            return EventTypeArg.fileUnlikeComment
                        case "file_unresolve_comment":
                            return EventTypeArg.fileUnresolveComment
                        case "governance_policy_add_folders":
                            return EventTypeArg.governancePolicyAddFolders
                        case "governance_policy_add_folder_failed":
                            return EventTypeArg.governancePolicyAddFolderFailed
                        case "governance_policy_content_disposed":
                            return EventTypeArg.governancePolicyContentDisposed
                        case "governance_policy_create":
                            return EventTypeArg.governancePolicyCreate
                        case "governance_policy_delete":
                            return EventTypeArg.governancePolicyDelete
                        case "governance_policy_edit_details":
                            return EventTypeArg.governancePolicyEditDetails
                        case "governance_policy_edit_duration":
                            return EventTypeArg.governancePolicyEditDuration
                        case "governance_policy_export_created":
                            return EventTypeArg.governancePolicyExportCreated
                        case "governance_policy_export_removed":
                            return EventTypeArg.governancePolicyExportRemoved
                        case "governance_policy_remove_folders":
                            return EventTypeArg.governancePolicyRemoveFolders
                        case "governance_policy_report_created":
                            return EventTypeArg.governancePolicyReportCreated
                        case "governance_policy_zip_part_downloaded":
                            return EventTypeArg.governancePolicyZipPartDownloaded
                        case "legal_holds_activate_a_hold":
                            return EventTypeArg.legalHoldsActivateAHold
                        case "legal_holds_add_members":
                            return EventTypeArg.legalHoldsAddMembers
                        case "legal_holds_change_hold_details":
                            return EventTypeArg.legalHoldsChangeHoldDetails
                        case "legal_holds_change_hold_name":
                            return EventTypeArg.legalHoldsChangeHoldName
                        case "legal_holds_export_a_hold":
                            return EventTypeArg.legalHoldsExportAHold
                        case "legal_holds_export_cancelled":
                            return EventTypeArg.legalHoldsExportCancelled
                        case "legal_holds_export_downloaded":
                            return EventTypeArg.legalHoldsExportDownloaded
                        case "legal_holds_export_removed":
                            return EventTypeArg.legalHoldsExportRemoved
                        case "legal_holds_release_a_hold":
                            return EventTypeArg.legalHoldsReleaseAHold
                        case "legal_holds_remove_members":
                            return EventTypeArg.legalHoldsRemoveMembers
                        case "legal_holds_report_a_hold":
                            return EventTypeArg.legalHoldsReportAHold
                        case "device_change_ip_desktop":
                            return EventTypeArg.deviceChangeIpDesktop
                        case "device_change_ip_mobile":
                            return EventTypeArg.deviceChangeIpMobile
                        case "device_change_ip_web":
                            return EventTypeArg.deviceChangeIpWeb
                        case "device_delete_on_unlink_fail":
                            return EventTypeArg.deviceDeleteOnUnlinkFail
                        case "device_delete_on_unlink_success":
                            return EventTypeArg.deviceDeleteOnUnlinkSuccess
                        case "device_link_fail":
                            return EventTypeArg.deviceLinkFail
                        case "device_link_success":
                            return EventTypeArg.deviceLinkSuccess
                        case "device_management_disabled":
                            return EventTypeArg.deviceManagementDisabled
                        case "device_management_enabled":
                            return EventTypeArg.deviceManagementEnabled
                        case "device_sync_backup_status_changed":
                            return EventTypeArg.deviceSyncBackupStatusChanged
                        case "device_unlink":
                            return EventTypeArg.deviceUnlink
                        case "dropbox_passwords_exported":
                            return EventTypeArg.dropboxPasswordsExported
                        case "dropbox_passwords_new_device_enrolled":
                            return EventTypeArg.dropboxPasswordsNewDeviceEnrolled
                        case "emm_refresh_auth_token":
                            return EventTypeArg.emmRefreshAuthToken
                        case "external_drive_backup_eligibility_status_checked":
                            return EventTypeArg.externalDriveBackupEligibilityStatusChecked
                        case "external_drive_backup_status_changed":
                            return EventTypeArg.externalDriveBackupStatusChanged
                        case "account_capture_change_availability":
                            return EventTypeArg.accountCaptureChangeAvailability
                        case "account_capture_migrate_account":
                            return EventTypeArg.accountCaptureMigrateAccount
                        case "account_capture_notification_emails_sent":
                            return EventTypeArg.accountCaptureNotificationEmailsSent
                        case "account_capture_relinquish_account":
                            return EventTypeArg.accountCaptureRelinquishAccount
                        case "disabled_domain_invites":
                            return EventTypeArg.disabledDomainInvites
                        case "domain_invites_approve_request_to_join_team":
                            return EventTypeArg.domainInvitesApproveRequestToJoinTeam
                        case "domain_invites_decline_request_to_join_team":
                            return EventTypeArg.domainInvitesDeclineRequestToJoinTeam
                        case "domain_invites_email_existing_users":
                            return EventTypeArg.domainInvitesEmailExistingUsers
                        case "domain_invites_request_to_join_team":
                            return EventTypeArg.domainInvitesRequestToJoinTeam
                        case "domain_invites_set_invite_new_user_pref_to_no":
                            return EventTypeArg.domainInvitesSetInviteNewUserPrefToNo
                        case "domain_invites_set_invite_new_user_pref_to_yes":
                            return EventTypeArg.domainInvitesSetInviteNewUserPrefToYes
                        case "domain_verification_add_domain_fail":
                            return EventTypeArg.domainVerificationAddDomainFail
                        case "domain_verification_add_domain_success":
                            return EventTypeArg.domainVerificationAddDomainSuccess
                        case "domain_verification_remove_domain":
                            return EventTypeArg.domainVerificationRemoveDomain
                        case "enabled_domain_invites":
                            return EventTypeArg.enabledDomainInvites
                        case "apply_naming_convention":
                            return EventTypeArg.applyNamingConvention
                        case "create_folder":
                            return EventTypeArg.createFolder
                        case "file_add":
                            return EventTypeArg.fileAdd
                        case "file_copy":
                            return EventTypeArg.fileCopy
                        case "file_delete":
                            return EventTypeArg.fileDelete
                        case "file_download":
                            return EventTypeArg.fileDownload
                        case "file_edit":
                            return EventTypeArg.fileEdit
                        case "file_get_copy_reference":
                            return EventTypeArg.fileGetCopyReference
                        case "file_locking_lock_status_changed":
                            return EventTypeArg.fileLockingLockStatusChanged
                        case "file_move":
                            return EventTypeArg.fileMove
                        case "file_permanently_delete":
                            return EventTypeArg.filePermanentlyDelete
                        case "file_preview":
                            return EventTypeArg.filePreview
                        case "file_rename":
                            return EventTypeArg.fileRename
                        case "file_restore":
                            return EventTypeArg.fileRestore
                        case "file_revert":
                            return EventTypeArg.fileRevert
                        case "file_rollback_changes":
                            return EventTypeArg.fileRollbackChanges
                        case "file_save_copy_reference":
                            return EventTypeArg.fileSaveCopyReference
                        case "folder_overview_description_changed":
                            return EventTypeArg.folderOverviewDescriptionChanged
                        case "folder_overview_item_pinned":
                            return EventTypeArg.folderOverviewItemPinned
                        case "folder_overview_item_unpinned":
                            return EventTypeArg.folderOverviewItemUnpinned
                        case "object_label_added":
                            return EventTypeArg.objectLabelAdded
                        case "object_label_removed":
                            return EventTypeArg.objectLabelRemoved
                        case "object_label_updated_value":
                            return EventTypeArg.objectLabelUpdatedValue
                        case "organize_folder_with_tidy":
                            return EventTypeArg.organizeFolderWithTidy
                        case "rewind_folder":
                            return EventTypeArg.rewindFolder
                        case "undo_naming_convention":
                            return EventTypeArg.undoNamingConvention
                        case "undo_organize_folder_with_tidy":
                            return EventTypeArg.undoOrganizeFolderWithTidy
                        case "user_tags_added":
                            return EventTypeArg.userTagsAdded
                        case "user_tags_removed":
                            return EventTypeArg.userTagsRemoved
                        case "email_ingest_receive_file":
                            return EventTypeArg.emailIngestReceiveFile
                        case "file_request_change":
                            return EventTypeArg.fileRequestChange
                        case "file_request_close":
                            return EventTypeArg.fileRequestClose
                        case "file_request_create":
                            return EventTypeArg.fileRequestCreate
                        case "file_request_delete":
                            return EventTypeArg.fileRequestDelete
                        case "file_request_receive_file":
                            return EventTypeArg.fileRequestReceiveFile
                        case "group_add_external_id":
                            return EventTypeArg.groupAddExternalId
                        case "group_add_member":
                            return EventTypeArg.groupAddMember
                        case "group_change_external_id":
                            return EventTypeArg.groupChangeExternalId
                        case "group_change_management_type":
                            return EventTypeArg.groupChangeManagementType
                        case "group_change_member_role":
                            return EventTypeArg.groupChangeMemberRole
                        case "group_create":
                            return EventTypeArg.groupCreate
                        case "group_delete":
                            return EventTypeArg.groupDelete
                        case "group_description_updated":
                            return EventTypeArg.groupDescriptionUpdated
                        case "group_join_policy_updated":
                            return EventTypeArg.groupJoinPolicyUpdated
                        case "group_moved":
                            return EventTypeArg.groupMoved
                        case "group_remove_external_id":
                            return EventTypeArg.groupRemoveExternalId
                        case "group_remove_member":
                            return EventTypeArg.groupRemoveMember
                        case "group_rename":
                            return EventTypeArg.groupRename
                        case "account_lock_or_unlocked":
                            return EventTypeArg.accountLockOrUnlocked
                        case "emm_error":
                            return EventTypeArg.emmError
                        case "guest_admin_signed_in_via_trusted_teams":
                            return EventTypeArg.guestAdminSignedInViaTrustedTeams
                        case "guest_admin_signed_out_via_trusted_teams":
                            return EventTypeArg.guestAdminSignedOutViaTrustedTeams
                        case "login_fail":
                            return EventTypeArg.loginFail
                        case "login_success":
                            return EventTypeArg.loginSuccess
                        case "logout":
                            return EventTypeArg.logout
                        case "reseller_support_session_end":
                            return EventTypeArg.resellerSupportSessionEnd
                        case "reseller_support_session_start":
                            return EventTypeArg.resellerSupportSessionStart
                        case "sign_in_as_session_end":
                            return EventTypeArg.signInAsSessionEnd
                        case "sign_in_as_session_start":
                            return EventTypeArg.signInAsSessionStart
                        case "sso_error":
                            return EventTypeArg.ssoError
                        case "create_team_invite_link":
                            return EventTypeArg.createTeamInviteLink
                        case "delete_team_invite_link":
                            return EventTypeArg.deleteTeamInviteLink
                        case "member_add_external_id":
                            return EventTypeArg.memberAddExternalId
                        case "member_add_name":
                            return EventTypeArg.memberAddName
                        case "member_change_admin_role":
                            return EventTypeArg.memberChangeAdminRole
                        case "member_change_email":
                            return EventTypeArg.memberChangeEmail
                        case "member_change_external_id":
                            return EventTypeArg.memberChangeExternalId
                        case "member_change_membership_type":
                            return EventTypeArg.memberChangeMembershipType
                        case "member_change_name":
                            return EventTypeArg.memberChangeName
                        case "member_change_reseller_role":
                            return EventTypeArg.memberChangeResellerRole
                        case "member_change_status":
                            return EventTypeArg.memberChangeStatus
                        case "member_delete_manual_contacts":
                            return EventTypeArg.memberDeleteManualContacts
                        case "member_delete_profile_photo":
                            return EventTypeArg.memberDeleteProfilePhoto
                        case "member_permanently_delete_account_contents":
                            return EventTypeArg.memberPermanentlyDeleteAccountContents
                        case "member_remove_external_id":
                            return EventTypeArg.memberRemoveExternalId
                        case "member_set_profile_photo":
                            return EventTypeArg.memberSetProfilePhoto
                        case "member_space_limits_add_custom_quota":
                            return EventTypeArg.memberSpaceLimitsAddCustomQuota
                        case "member_space_limits_change_custom_quota":
                            return EventTypeArg.memberSpaceLimitsChangeCustomQuota
                        case "member_space_limits_change_status":
                            return EventTypeArg.memberSpaceLimitsChangeStatus
                        case "member_space_limits_remove_custom_quota":
                            return EventTypeArg.memberSpaceLimitsRemoveCustomQuota
                        case "member_suggest":
                            return EventTypeArg.memberSuggest
                        case "member_transfer_account_contents":
                            return EventTypeArg.memberTransferAccountContents
                        case "pending_secondary_email_added":
                            return EventTypeArg.pendingSecondaryEmailAdded
                        case "secondary_email_deleted":
                            return EventTypeArg.secondaryEmailDeleted
                        case "secondary_email_verified":
                            return EventTypeArg.secondaryEmailVerified
                        case "secondary_mails_policy_changed":
                            return EventTypeArg.secondaryMailsPolicyChanged
                        case "binder_add_page":
                            return EventTypeArg.binderAddPage
                        case "binder_add_section":
                            return EventTypeArg.binderAddSection
                        case "binder_remove_page":
                            return EventTypeArg.binderRemovePage
                        case "binder_remove_section":
                            return EventTypeArg.binderRemoveSection
                        case "binder_rename_page":
                            return EventTypeArg.binderRenamePage
                        case "binder_rename_section":
                            return EventTypeArg.binderRenameSection
                        case "binder_reorder_page":
                            return EventTypeArg.binderReorderPage
                        case "binder_reorder_section":
                            return EventTypeArg.binderReorderSection
                        case "paper_content_add_member":
                            return EventTypeArg.paperContentAddMember
                        case "paper_content_add_to_folder":
                            return EventTypeArg.paperContentAddToFolder
                        case "paper_content_archive":
                            return EventTypeArg.paperContentArchive
                        case "paper_content_create":
                            return EventTypeArg.paperContentCreate
                        case "paper_content_permanently_delete":
                            return EventTypeArg.paperContentPermanentlyDelete
                        case "paper_content_remove_from_folder":
                            return EventTypeArg.paperContentRemoveFromFolder
                        case "paper_content_remove_member":
                            return EventTypeArg.paperContentRemoveMember
                        case "paper_content_rename":
                            return EventTypeArg.paperContentRename
                        case "paper_content_restore":
                            return EventTypeArg.paperContentRestore
                        case "paper_doc_add_comment":
                            return EventTypeArg.paperDocAddComment
                        case "paper_doc_change_member_role":
                            return EventTypeArg.paperDocChangeMemberRole
                        case "paper_doc_change_sharing_policy":
                            return EventTypeArg.paperDocChangeSharingPolicy
                        case "paper_doc_change_subscription":
                            return EventTypeArg.paperDocChangeSubscription
                        case "paper_doc_deleted":
                            return EventTypeArg.paperDocDeleted
                        case "paper_doc_delete_comment":
                            return EventTypeArg.paperDocDeleteComment
                        case "paper_doc_download":
                            return EventTypeArg.paperDocDownload
                        case "paper_doc_edit":
                            return EventTypeArg.paperDocEdit
                        case "paper_doc_edit_comment":
                            return EventTypeArg.paperDocEditComment
                        case "paper_doc_followed":
                            return EventTypeArg.paperDocFollowed
                        case "paper_doc_mention":
                            return EventTypeArg.paperDocMention
                        case "paper_doc_ownership_changed":
                            return EventTypeArg.paperDocOwnershipChanged
                        case "paper_doc_request_access":
                            return EventTypeArg.paperDocRequestAccess
                        case "paper_doc_resolve_comment":
                            return EventTypeArg.paperDocResolveComment
                        case "paper_doc_revert":
                            return EventTypeArg.paperDocRevert
                        case "paper_doc_slack_share":
                            return EventTypeArg.paperDocSlackShare
                        case "paper_doc_team_invite":
                            return EventTypeArg.paperDocTeamInvite
                        case "paper_doc_trashed":
                            return EventTypeArg.paperDocTrashed
                        case "paper_doc_unresolve_comment":
                            return EventTypeArg.paperDocUnresolveComment
                        case "paper_doc_untrashed":
                            return EventTypeArg.paperDocUntrashed
                        case "paper_doc_view":
                            return EventTypeArg.paperDocView
                        case "paper_external_view_allow":
                            return EventTypeArg.paperExternalViewAllow
                        case "paper_external_view_default_team":
                            return EventTypeArg.paperExternalViewDefaultTeam
                        case "paper_external_view_forbid":
                            return EventTypeArg.paperExternalViewForbid
                        case "paper_folder_change_subscription":
                            return EventTypeArg.paperFolderChangeSubscription
                        case "paper_folder_deleted":
                            return EventTypeArg.paperFolderDeleted
                        case "paper_folder_followed":
                            return EventTypeArg.paperFolderFollowed
                        case "paper_folder_team_invite":
                            return EventTypeArg.paperFolderTeamInvite
                        case "paper_published_link_change_permission":
                            return EventTypeArg.paperPublishedLinkChangePermission
                        case "paper_published_link_create":
                            return EventTypeArg.paperPublishedLinkCreate
                        case "paper_published_link_disabled":
                            return EventTypeArg.paperPublishedLinkDisabled
                        case "paper_published_link_view":
                            return EventTypeArg.paperPublishedLinkView
                        case "password_change":
                            return EventTypeArg.passwordChange
                        case "password_reset":
                            return EventTypeArg.passwordReset
                        case "password_reset_all":
                            return EventTypeArg.passwordResetAll
                        case "classification_create_report":
                            return EventTypeArg.classificationCreateReport
                        case "classification_create_report_fail":
                            return EventTypeArg.classificationCreateReportFail
                        case "emm_create_exceptions_report":
                            return EventTypeArg.emmCreateExceptionsReport
                        case "emm_create_usage_report":
                            return EventTypeArg.emmCreateUsageReport
                        case "export_members_report":
                            return EventTypeArg.exportMembersReport
                        case "export_members_report_fail":
                            return EventTypeArg.exportMembersReportFail
                        case "external_sharing_create_report":
                            return EventTypeArg.externalSharingCreateReport
                        case "external_sharing_report_failed":
                            return EventTypeArg.externalSharingReportFailed
                        case "no_expiration_link_gen_create_report":
                            return EventTypeArg.noExpirationLinkGenCreateReport
                        case "no_expiration_link_gen_report_failed":
                            return EventTypeArg.noExpirationLinkGenReportFailed
                        case "no_password_link_gen_create_report":
                            return EventTypeArg.noPasswordLinkGenCreateReport
                        case "no_password_link_gen_report_failed":
                            return EventTypeArg.noPasswordLinkGenReportFailed
                        case "no_password_link_view_create_report":
                            return EventTypeArg.noPasswordLinkViewCreateReport
                        case "no_password_link_view_report_failed":
                            return EventTypeArg.noPasswordLinkViewReportFailed
                        case "outdated_link_view_create_report":
                            return EventTypeArg.outdatedLinkViewCreateReport
                        case "outdated_link_view_report_failed":
                            return EventTypeArg.outdatedLinkViewReportFailed
                        case "paper_admin_export_start":
                            return EventTypeArg.paperAdminExportStart
                        case "smart_sync_create_admin_privilege_report":
                            return EventTypeArg.smartSyncCreateAdminPrivilegeReport
                        case "team_activity_create_report":
                            return EventTypeArg.teamActivityCreateReport
                        case "team_activity_create_report_fail":
                            return EventTypeArg.teamActivityCreateReportFail
                        case "collection_share":
                            return EventTypeArg.collectionShare
                        case "file_transfers_file_add":
                            return EventTypeArg.fileTransfersFileAdd
                        case "file_transfers_transfer_delete":
                            return EventTypeArg.fileTransfersTransferDelete
                        case "file_transfers_transfer_download":
                            return EventTypeArg.fileTransfersTransferDownload
                        case "file_transfers_transfer_send":
                            return EventTypeArg.fileTransfersTransferSend
                        case "file_transfers_transfer_view":
                            return EventTypeArg.fileTransfersTransferView
                        case "note_acl_invite_only":
                            return EventTypeArg.noteAclInviteOnly
                        case "note_acl_link":
                            return EventTypeArg.noteAclLink
                        case "note_acl_team_link":
                            return EventTypeArg.noteAclTeamLink
                        case "note_shared":
                            return EventTypeArg.noteShared
                        case "note_share_receive":
                            return EventTypeArg.noteShareReceive
                        case "open_note_shared":
                            return EventTypeArg.openNoteShared
                        case "sf_add_group":
                            return EventTypeArg.sfAddGroup
                        case "sf_allow_non_members_to_view_shared_links":
                            return EventTypeArg.sfAllowNonMembersToViewSharedLinks
                        case "sf_external_invite_warn":
                            return EventTypeArg.sfExternalInviteWarn
                        case "sf_fb_invite":
                            return EventTypeArg.sfFbInvite
                        case "sf_fb_invite_change_role":
                            return EventTypeArg.sfFbInviteChangeRole
                        case "sf_fb_uninvite":
                            return EventTypeArg.sfFbUninvite
                        case "sf_invite_group":
                            return EventTypeArg.sfInviteGroup
                        case "sf_team_grant_access":
                            return EventTypeArg.sfTeamGrantAccess
                        case "sf_team_invite":
                            return EventTypeArg.sfTeamInvite
                        case "sf_team_invite_change_role":
                            return EventTypeArg.sfTeamInviteChangeRole
                        case "sf_team_join":
                            return EventTypeArg.sfTeamJoin
                        case "sf_team_join_from_oob_link":
                            return EventTypeArg.sfTeamJoinFromOobLink
                        case "sf_team_uninvite":
                            return EventTypeArg.sfTeamUninvite
                        case "shared_content_add_invitees":
                            return EventTypeArg.sharedContentAddInvitees
                        case "shared_content_add_link_expiry":
                            return EventTypeArg.sharedContentAddLinkExpiry
                        case "shared_content_add_link_password":
                            return EventTypeArg.sharedContentAddLinkPassword
                        case "shared_content_add_member":
                            return EventTypeArg.sharedContentAddMember
                        case "shared_content_change_downloads_policy":
                            return EventTypeArg.sharedContentChangeDownloadsPolicy
                        case "shared_content_change_invitee_role":
                            return EventTypeArg.sharedContentChangeInviteeRole
                        case "shared_content_change_link_audience":
                            return EventTypeArg.sharedContentChangeLinkAudience
                        case "shared_content_change_link_expiry":
                            return EventTypeArg.sharedContentChangeLinkExpiry
                        case "shared_content_change_link_password":
                            return EventTypeArg.sharedContentChangeLinkPassword
                        case "shared_content_change_member_role":
                            return EventTypeArg.sharedContentChangeMemberRole
                        case "shared_content_change_viewer_info_policy":
                            return EventTypeArg.sharedContentChangeViewerInfoPolicy
                        case "shared_content_claim_invitation":
                            return EventTypeArg.sharedContentClaimInvitation
                        case "shared_content_copy":
                            return EventTypeArg.sharedContentCopy
                        case "shared_content_download":
                            return EventTypeArg.sharedContentDownload
                        case "shared_content_relinquish_membership":
                            return EventTypeArg.sharedContentRelinquishMembership
                        case "shared_content_remove_invitees":
                            return EventTypeArg.sharedContentRemoveInvitees
                        case "shared_content_remove_link_expiry":
                            return EventTypeArg.sharedContentRemoveLinkExpiry
                        case "shared_content_remove_link_password":
                            return EventTypeArg.sharedContentRemoveLinkPassword
                        case "shared_content_remove_member":
                            return EventTypeArg.sharedContentRemoveMember
                        case "shared_content_request_access":
                            return EventTypeArg.sharedContentRequestAccess
                        case "shared_content_restore_invitees":
                            return EventTypeArg.sharedContentRestoreInvitees
                        case "shared_content_restore_member":
                            return EventTypeArg.sharedContentRestoreMember
                        case "shared_content_unshare":
                            return EventTypeArg.sharedContentUnshare
                        case "shared_content_view":
                            return EventTypeArg.sharedContentView
                        case "shared_folder_change_link_policy":
                            return EventTypeArg.sharedFolderChangeLinkPolicy
                        case "shared_folder_change_members_inheritance_policy":
                            return EventTypeArg.sharedFolderChangeMembersInheritancePolicy
                        case "shared_folder_change_members_management_policy":
                            return EventTypeArg.sharedFolderChangeMembersManagementPolicy
                        case "shared_folder_change_members_policy":
                            return EventTypeArg.sharedFolderChangeMembersPolicy
                        case "shared_folder_create":
                            return EventTypeArg.sharedFolderCreate
                        case "shared_folder_decline_invitation":
                            return EventTypeArg.sharedFolderDeclineInvitation
                        case "shared_folder_mount":
                            return EventTypeArg.sharedFolderMount
                        case "shared_folder_nest":
                            return EventTypeArg.sharedFolderNest
                        case "shared_folder_transfer_ownership":
                            return EventTypeArg.sharedFolderTransferOwnership
                        case "shared_folder_unmount":
                            return EventTypeArg.sharedFolderUnmount
                        case "shared_link_add_expiry":
                            return EventTypeArg.sharedLinkAddExpiry
                        case "shared_link_change_expiry":
                            return EventTypeArg.sharedLinkChangeExpiry
                        case "shared_link_change_visibility":
                            return EventTypeArg.sharedLinkChangeVisibility
                        case "shared_link_copy":
                            return EventTypeArg.sharedLinkCopy
                        case "shared_link_create":
                            return EventTypeArg.sharedLinkCreate
                        case "shared_link_disable":
                            return EventTypeArg.sharedLinkDisable
                        case "shared_link_download":
                            return EventTypeArg.sharedLinkDownload
                        case "shared_link_remove_expiry":
                            return EventTypeArg.sharedLinkRemoveExpiry
                        case "shared_link_settings_add_expiration":
                            return EventTypeArg.sharedLinkSettingsAddExpiration
                        case "shared_link_settings_add_password":
                            return EventTypeArg.sharedLinkSettingsAddPassword
                        case "shared_link_settings_allow_download_disabled":
                            return EventTypeArg.sharedLinkSettingsAllowDownloadDisabled
                        case "shared_link_settings_allow_download_enabled":
                            return EventTypeArg.sharedLinkSettingsAllowDownloadEnabled
                        case "shared_link_settings_change_audience":
                            return EventTypeArg.sharedLinkSettingsChangeAudience
                        case "shared_link_settings_change_expiration":
                            return EventTypeArg.sharedLinkSettingsChangeExpiration
                        case "shared_link_settings_change_password":
                            return EventTypeArg.sharedLinkSettingsChangePassword
                        case "shared_link_settings_remove_expiration":
                            return EventTypeArg.sharedLinkSettingsRemoveExpiration
                        case "shared_link_settings_remove_password":
                            return EventTypeArg.sharedLinkSettingsRemovePassword
                        case "shared_link_share":
                            return EventTypeArg.sharedLinkShare
                        case "shared_link_view":
                            return EventTypeArg.sharedLinkView
                        case "shared_note_opened":
                            return EventTypeArg.sharedNoteOpened
                        case "shmodel_disable_downloads":
                            return EventTypeArg.shmodelDisableDownloads
                        case "shmodel_enable_downloads":
                            return EventTypeArg.shmodelEnableDownloads
                        case "shmodel_group_share":
                            return EventTypeArg.shmodelGroupShare
                        case "showcase_access_granted":
                            return EventTypeArg.showcaseAccessGranted
                        case "showcase_add_member":
                            return EventTypeArg.showcaseAddMember
                        case "showcase_archived":
                            return EventTypeArg.showcaseArchived
                        case "showcase_created":
                            return EventTypeArg.showcaseCreated
                        case "showcase_delete_comment":
                            return EventTypeArg.showcaseDeleteComment
                        case "showcase_edited":
                            return EventTypeArg.showcaseEdited
                        case "showcase_edit_comment":
                            return EventTypeArg.showcaseEditComment
                        case "showcase_file_added":
                            return EventTypeArg.showcaseFileAdded
                        case "showcase_file_download":
                            return EventTypeArg.showcaseFileDownload
                        case "showcase_file_removed":
                            return EventTypeArg.showcaseFileRemoved
                        case "showcase_file_view":
                            return EventTypeArg.showcaseFileView
                        case "showcase_permanently_deleted":
                            return EventTypeArg.showcasePermanentlyDeleted
                        case "showcase_post_comment":
                            return EventTypeArg.showcasePostComment
                        case "showcase_remove_member":
                            return EventTypeArg.showcaseRemoveMember
                        case "showcase_renamed":
                            return EventTypeArg.showcaseRenamed
                        case "showcase_request_access":
                            return EventTypeArg.showcaseRequestAccess
                        case "showcase_resolve_comment":
                            return EventTypeArg.showcaseResolveComment
                        case "showcase_restored":
                            return EventTypeArg.showcaseRestored
                        case "showcase_trashed":
                            return EventTypeArg.showcaseTrashed
                        case "showcase_trashed_deprecated":
                            return EventTypeArg.showcaseTrashedDeprecated
                        case "showcase_unresolve_comment":
                            return EventTypeArg.showcaseUnresolveComment
                        case "showcase_untrashed":
                            return EventTypeArg.showcaseUntrashed
                        case "showcase_untrashed_deprecated":
                            return EventTypeArg.showcaseUntrashedDeprecated
                        case "showcase_view":
                            return EventTypeArg.showcaseView
                        case "sso_add_cert":
                            return EventTypeArg.ssoAddCert
                        case "sso_add_login_url":
                            return EventTypeArg.ssoAddLoginUrl
                        case "sso_add_logout_url":
                            return EventTypeArg.ssoAddLogoutUrl
                        case "sso_change_cert":
                            return EventTypeArg.ssoChangeCert
                        case "sso_change_login_url":
                            return EventTypeArg.ssoChangeLoginUrl
                        case "sso_change_logout_url":
                            return EventTypeArg.ssoChangeLogoutUrl
                        case "sso_change_saml_identity_mode":
                            return EventTypeArg.ssoChangeSamlIdentityMode
                        case "sso_remove_cert":
                            return EventTypeArg.ssoRemoveCert
                        case "sso_remove_login_url":
                            return EventTypeArg.ssoRemoveLoginUrl
                        case "sso_remove_logout_url":
                            return EventTypeArg.ssoRemoveLogoutUrl
                        case "team_folder_change_status":
                            return EventTypeArg.teamFolderChangeStatus
                        case "team_folder_create":
                            return EventTypeArg.teamFolderCreate
                        case "team_folder_downgrade":
                            return EventTypeArg.teamFolderDowngrade
                        case "team_folder_permanently_delete":
                            return EventTypeArg.teamFolderPermanentlyDelete
                        case "team_folder_rename":
                            return EventTypeArg.teamFolderRename
                        case "team_selective_sync_settings_changed":
                            return EventTypeArg.teamSelectiveSyncSettingsChanged
                        case "account_capture_change_policy":
                            return EventTypeArg.accountCaptureChangePolicy
                        case "admin_email_reminders_changed":
                            return EventTypeArg.adminEmailRemindersChanged
                        case "allow_download_disabled":
                            return EventTypeArg.allowDownloadDisabled
                        case "allow_download_enabled":
                            return EventTypeArg.allowDownloadEnabled
                        case "app_permissions_changed":
                            return EventTypeArg.appPermissionsChanged
                        case "camera_uploads_policy_changed":
                            return EventTypeArg.cameraUploadsPolicyChanged
                        case "capture_transcript_policy_changed":
                            return EventTypeArg.captureTranscriptPolicyChanged
                        case "classification_change_policy":
                            return EventTypeArg.classificationChangePolicy
                        case "computer_backup_policy_changed":
                            return EventTypeArg.computerBackupPolicyChanged
                        case "content_administration_policy_changed":
                            return EventTypeArg.contentAdministrationPolicyChanged
                        case "data_placement_restriction_change_policy":
                            return EventTypeArg.dataPlacementRestrictionChangePolicy
                        case "data_placement_restriction_satisfy_policy":
                            return EventTypeArg.dataPlacementRestrictionSatisfyPolicy
                        case "device_approvals_add_exception":
                            return EventTypeArg.deviceApprovalsAddException
                        case "device_approvals_change_desktop_policy":
                            return EventTypeArg.deviceApprovalsChangeDesktopPolicy
                        case "device_approvals_change_mobile_policy":
                            return EventTypeArg.deviceApprovalsChangeMobilePolicy
                        case "device_approvals_change_overage_action":
                            return EventTypeArg.deviceApprovalsChangeOverageAction
                        case "device_approvals_change_unlink_action":
                            return EventTypeArg.deviceApprovalsChangeUnlinkAction
                        case "device_approvals_remove_exception":
                            return EventTypeArg.deviceApprovalsRemoveException
                        case "directory_restrictions_add_members":
                            return EventTypeArg.directoryRestrictionsAddMembers
                        case "directory_restrictions_remove_members":
                            return EventTypeArg.directoryRestrictionsRemoveMembers
                        case "dropbox_passwords_policy_changed":
                            return EventTypeArg.dropboxPasswordsPolicyChanged
                        case "email_ingest_policy_changed":
                            return EventTypeArg.emailIngestPolicyChanged
                        case "emm_add_exception":
                            return EventTypeArg.emmAddException
                        case "emm_change_policy":
                            return EventTypeArg.emmChangePolicy
                        case "emm_remove_exception":
                            return EventTypeArg.emmRemoveException
                        case "extended_version_history_change_policy":
                            return EventTypeArg.extendedVersionHistoryChangePolicy
                        case "external_drive_backup_policy_changed":
                            return EventTypeArg.externalDriveBackupPolicyChanged
                        case "file_comments_change_policy":
                            return EventTypeArg.fileCommentsChangePolicy
                        case "file_locking_policy_changed":
                            return EventTypeArg.fileLockingPolicyChanged
                        case "file_provider_migration_policy_changed":
                            return EventTypeArg.fileProviderMigrationPolicyChanged
                        case "file_requests_change_policy":
                            return EventTypeArg.fileRequestsChangePolicy
                        case "file_requests_emails_enabled":
                            return EventTypeArg.fileRequestsEmailsEnabled
                        case "file_requests_emails_restricted_to_team_only":
                            return EventTypeArg.fileRequestsEmailsRestrictedToTeamOnly
                        case "file_transfers_policy_changed":
                            return EventTypeArg.fileTransfersPolicyChanged
                        case "folder_link_restriction_policy_changed":
                            return EventTypeArg.folderLinkRestrictionPolicyChanged
                        case "google_sso_change_policy":
                            return EventTypeArg.googleSsoChangePolicy
                        case "group_user_management_change_policy":
                            return EventTypeArg.groupUserManagementChangePolicy
                        case "integration_policy_changed":
                            return EventTypeArg.integrationPolicyChanged
                        case "invite_acceptance_email_policy_changed":
                            return EventTypeArg.inviteAcceptanceEmailPolicyChanged
                        case "member_requests_change_policy":
                            return EventTypeArg.memberRequestsChangePolicy
                        case "member_send_invite_policy_changed":
                            return EventTypeArg.memberSendInvitePolicyChanged
                        case "member_space_limits_add_exception":
                            return EventTypeArg.memberSpaceLimitsAddException
                        case "member_space_limits_change_caps_type_policy":
                            return EventTypeArg.memberSpaceLimitsChangeCapsTypePolicy
                        case "member_space_limits_change_policy":
                            return EventTypeArg.memberSpaceLimitsChangePolicy
                        case "member_space_limits_remove_exception":
                            return EventTypeArg.memberSpaceLimitsRemoveException
                        case "member_suggestions_change_policy":
                            return EventTypeArg.memberSuggestionsChangePolicy
                        case "microsoft_office_addin_change_policy":
                            return EventTypeArg.microsoftOfficeAddinChangePolicy
                        case "network_control_change_policy":
                            return EventTypeArg.networkControlChangePolicy
                        case "paper_change_deployment_policy":
                            return EventTypeArg.paperChangeDeploymentPolicy
                        case "paper_change_member_link_policy":
                            return EventTypeArg.paperChangeMemberLinkPolicy
                        case "paper_change_member_policy":
                            return EventTypeArg.paperChangeMemberPolicy
                        case "paper_change_policy":
                            return EventTypeArg.paperChangePolicy
                        case "paper_default_folder_policy_changed":
                            return EventTypeArg.paperDefaultFolderPolicyChanged
                        case "paper_desktop_policy_changed":
                            return EventTypeArg.paperDesktopPolicyChanged
                        case "paper_enabled_users_group_addition":
                            return EventTypeArg.paperEnabledUsersGroupAddition
                        case "paper_enabled_users_group_removal":
                            return EventTypeArg.paperEnabledUsersGroupRemoval
                        case "password_strength_requirements_change_policy":
                            return EventTypeArg.passwordStrengthRequirementsChangePolicy
                        case "permanent_delete_change_policy":
                            return EventTypeArg.permanentDeleteChangePolicy
                        case "reseller_support_change_policy":
                            return EventTypeArg.resellerSupportChangePolicy
                        case "rewind_policy_changed":
                            return EventTypeArg.rewindPolicyChanged
                        case "send_for_signature_policy_changed":
                            return EventTypeArg.sendForSignaturePolicyChanged
                        case "sharing_change_folder_join_policy":
                            return EventTypeArg.sharingChangeFolderJoinPolicy
                        case "sharing_change_link_allow_change_expiration_policy":
                            return EventTypeArg.sharingChangeLinkAllowChangeExpirationPolicy
                        case "sharing_change_link_default_expiration_policy":
                            return EventTypeArg.sharingChangeLinkDefaultExpirationPolicy
                        case "sharing_change_link_enforce_password_policy":
                            return EventTypeArg.sharingChangeLinkEnforcePasswordPolicy
                        case "sharing_change_link_policy":
                            return EventTypeArg.sharingChangeLinkPolicy
                        case "sharing_change_member_policy":
                            return EventTypeArg.sharingChangeMemberPolicy
                        case "showcase_change_download_policy":
                            return EventTypeArg.showcaseChangeDownloadPolicy
                        case "showcase_change_enabled_policy":
                            return EventTypeArg.showcaseChangeEnabledPolicy
                        case "showcase_change_external_sharing_policy":
                            return EventTypeArg.showcaseChangeExternalSharingPolicy
                        case "smarter_smart_sync_policy_changed":
                            return EventTypeArg.smarterSmartSyncPolicyChanged
                        case "smart_sync_change_policy":
                            return EventTypeArg.smartSyncChangePolicy
                        case "smart_sync_not_opt_out":
                            return EventTypeArg.smartSyncNotOptOut
                        case "smart_sync_opt_out":
                            return EventTypeArg.smartSyncOptOut
                        case "sso_change_policy":
                            return EventTypeArg.ssoChangePolicy
                        case "team_branding_policy_changed":
                            return EventTypeArg.teamBrandingPolicyChanged
                        case "team_extensions_policy_changed":
                            return EventTypeArg.teamExtensionsPolicyChanged
                        case "team_selective_sync_policy_changed":
                            return EventTypeArg.teamSelectiveSyncPolicyChanged
                        case "team_sharing_whitelist_subjects_changed":
                            return EventTypeArg.teamSharingWhitelistSubjectsChanged
                        case "tfa_add_exception":
                            return EventTypeArg.tfaAddException
                        case "tfa_change_policy":
                            return EventTypeArg.tfaChangePolicy
                        case "tfa_remove_exception":
                            return EventTypeArg.tfaRemoveException
                        case "two_account_change_policy":
                            return EventTypeArg.twoAccountChangePolicy
                        case "viewer_info_policy_changed":
                            return EventTypeArg.viewerInfoPolicyChanged
                        case "watermarking_policy_changed":
                            return EventTypeArg.watermarkingPolicyChanged
                        case "web_sessions_change_active_session_limit":
                            return EventTypeArg.webSessionsChangeActiveSessionLimit
                        case "web_sessions_change_fixed_length_policy":
                            return EventTypeArg.webSessionsChangeFixedLengthPolicy
                        case "web_sessions_change_idle_length_policy":
                            return EventTypeArg.webSessionsChangeIdleLengthPolicy
                        case "data_residency_migration_request_successful":
                            return EventTypeArg.dataResidencyMigrationRequestSuccessful
                        case "data_residency_migration_request_unsuccessful":
                            return EventTypeArg.dataResidencyMigrationRequestUnsuccessful
                        case "team_merge_from":
                            return EventTypeArg.teamMergeFrom
                        case "team_merge_to":
                            return EventTypeArg.teamMergeTo
                        case "team_profile_add_background":
                            return EventTypeArg.teamProfileAddBackground
                        case "team_profile_add_logo":
                            return EventTypeArg.teamProfileAddLogo
                        case "team_profile_change_background":
                            return EventTypeArg.teamProfileChangeBackground
                        case "team_profile_change_default_language":
                            return EventTypeArg.teamProfileChangeDefaultLanguage
                        case "team_profile_change_logo":
                            return EventTypeArg.teamProfileChangeLogo
                        case "team_profile_change_name":
                            return EventTypeArg.teamProfileChangeName
                        case "team_profile_remove_background":
                            return EventTypeArg.teamProfileRemoveBackground
                        case "team_profile_remove_logo":
                            return EventTypeArg.teamProfileRemoveLogo
                        case "tfa_add_backup_phone":
                            return EventTypeArg.tfaAddBackupPhone
                        case "tfa_add_security_key":
                            return EventTypeArg.tfaAddSecurityKey
                        case "tfa_change_backup_phone":
                            return EventTypeArg.tfaChangeBackupPhone
                        case "tfa_change_status":
                            return EventTypeArg.tfaChangeStatus
                        case "tfa_remove_backup_phone":
                            return EventTypeArg.tfaRemoveBackupPhone
                        case "tfa_remove_security_key":
                            return EventTypeArg.tfaRemoveSecurityKey
                        case "tfa_reset":
                            return EventTypeArg.tfaReset
                        case "changed_enterprise_admin_role":
                            return EventTypeArg.changedEnterpriseAdminRole
                        case "changed_enterprise_connected_team_status":
                            return EventTypeArg.changedEnterpriseConnectedTeamStatus
                        case "ended_enterprise_admin_session":
                            return EventTypeArg.endedEnterpriseAdminSession
                        case "ended_enterprise_admin_session_deprecated":
                            return EventTypeArg.endedEnterpriseAdminSessionDeprecated
                        case "enterprise_settings_locking":
                            return EventTypeArg.enterpriseSettingsLocking
                        case "guest_admin_change_status":
                            return EventTypeArg.guestAdminChangeStatus
                        case "started_enterprise_admin_session":
                            return EventTypeArg.startedEnterpriseAdminSession
                        case "team_merge_request_accepted":
                            return EventTypeArg.teamMergeRequestAccepted
                        case "team_merge_request_accepted_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestAcceptedShownToPrimaryTeam
                        case "team_merge_request_accepted_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestAcceptedShownToSecondaryTeam
                        case "team_merge_request_auto_canceled":
                            return EventTypeArg.teamMergeRequestAutoCanceled
                        case "team_merge_request_canceled":
                            return EventTypeArg.teamMergeRequestCanceled
                        case "team_merge_request_canceled_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestCanceledShownToPrimaryTeam
                        case "team_merge_request_canceled_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestCanceledShownToSecondaryTeam
                        case "team_merge_request_expired":
                            return EventTypeArg.teamMergeRequestExpired
                        case "team_merge_request_expired_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestExpiredShownToPrimaryTeam
                        case "team_merge_request_expired_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestExpiredShownToSecondaryTeam
                        case "team_merge_request_rejected_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestRejectedShownToPrimaryTeam
                        case "team_merge_request_rejected_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestRejectedShownToSecondaryTeam
                        case "team_merge_request_reminder":
                            return EventTypeArg.teamMergeRequestReminder
                        case "team_merge_request_reminder_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestReminderShownToPrimaryTeam
                        case "team_merge_request_reminder_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestReminderShownToSecondaryTeam
                        case "team_merge_request_revoked":
                            return EventTypeArg.teamMergeRequestRevoked
                        case "team_merge_request_sent_shown_to_primary_team":
                            return EventTypeArg.teamMergeRequestSentShownToPrimaryTeam
                        case "team_merge_request_sent_shown_to_secondary_team":
                            return EventTypeArg.teamMergeRequestSentShownToSecondaryTeam
                        case "other":
                            return EventTypeArg.other
                        default:
                            return EventTypeArg.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Created member data report.
    open class ExportMembersReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExportMembersReportDetailsSerializer().serialize(self)))"
        }
    }
    open class ExportMembersReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExportMembersReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExportMembersReportDetails {
            switch json {
                case .dictionary(_):
                    return ExportMembersReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to create members data report.
    open class ExportMembersReportFailDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExportMembersReportFailDetailsSerializer().serialize(self)))"
        }
    }
    open class ExportMembersReportFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExportMembersReportFailDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExportMembersReportFailDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return ExportMembersReportFailDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExportMembersReportFailType struct
    open class ExportMembersReportFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExportMembersReportFailTypeSerializer().serialize(self)))"
        }
    }
    open class ExportMembersReportFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExportMembersReportFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExportMembersReportFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExportMembersReportFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExportMembersReportType struct
    open class ExportMembersReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExportMembersReportTypeSerializer().serialize(self)))"
        }
    }
    open class ExportMembersReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExportMembersReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExportMembersReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExportMembersReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Accepted/opted out of extended version history.
    open class ExtendedVersionHistoryChangePolicyDetails: CustomStringConvertible {
        /// New extended version history policy.
        public let newValue: TeamLog.ExtendedVersionHistoryPolicy
        /// Previous extended version history policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.ExtendedVersionHistoryPolicy?
        public init(newValue: TeamLog.ExtendedVersionHistoryPolicy, previousValue: TeamLog.ExtendedVersionHistoryPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExtendedVersionHistoryChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ExtendedVersionHistoryChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExtendedVersionHistoryChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ExtendedVersionHistoryPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ExtendedVersionHistoryPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExtendedVersionHistoryChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ExtendedVersionHistoryPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ExtendedVersionHistoryPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return ExtendedVersionHistoryChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExtendedVersionHistoryChangePolicyType struct
    open class ExtendedVersionHistoryChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExtendedVersionHistoryChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ExtendedVersionHistoryChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExtendedVersionHistoryChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExtendedVersionHistoryChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExtendedVersionHistoryChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExtendedVersionHistoryPolicy union
    public enum ExtendedVersionHistoryPolicy: CustomStringConvertible {
        /// An unspecified error.
        case explicitlyLimited
        /// An unspecified error.
        case explicitlyUnlimited
        /// An unspecified error.
        case implicitlyLimited
        /// An unspecified error.
        case implicitlyUnlimited
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExtendedVersionHistoryPolicySerializer().serialize(self)))"
        }
    }
    open class ExtendedVersionHistoryPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExtendedVersionHistoryPolicy) -> JSON {
            switch value {
                case .explicitlyLimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("explicitly_limited")
                    return .dictionary(d)
                case .explicitlyUnlimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("explicitly_unlimited")
                    return .dictionary(d)
                case .implicitlyLimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("implicitly_limited")
                    return .dictionary(d)
                case .implicitlyUnlimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("implicitly_unlimited")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ExtendedVersionHistoryPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "explicitly_limited":
                            return ExtendedVersionHistoryPolicy.explicitlyLimited
                        case "explicitly_unlimited":
                            return ExtendedVersionHistoryPolicy.explicitlyUnlimited
                        case "implicitly_limited":
                            return ExtendedVersionHistoryPolicy.implicitlyLimited
                        case "implicitly_unlimited":
                            return ExtendedVersionHistoryPolicy.implicitlyUnlimited
                        case "other":
                            return ExtendedVersionHistoryPolicy.other
                        default:
                            return ExtendedVersionHistoryPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// External Drive Backup eligibility status
    public enum ExternalDriveBackupEligibilityStatus: CustomStringConvertible {
        /// An unspecified error.
        case exceedLicenseCap
        /// An unspecified error.
        case success
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupEligibilityStatusSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupEligibilityStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupEligibilityStatus) -> JSON {
            switch value {
                case .exceedLicenseCap:
                    var d = [String: JSON]()
                    d[".tag"] = .str("exceed_license_cap")
                    return .dictionary(d)
                case .success:
                    var d = [String: JSON]()
                    d[".tag"] = .str("success")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupEligibilityStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "exceed_license_cap":
                            return ExternalDriveBackupEligibilityStatus.exceedLicenseCap
                        case "success":
                            return ExternalDriveBackupEligibilityStatus.success
                        case "other":
                            return ExternalDriveBackupEligibilityStatus.other
                        default:
                            return ExternalDriveBackupEligibilityStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Checked external drive backup eligibility status.
    open class ExternalDriveBackupEligibilityStatusCheckedDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo
        /// Current eligibility status of external drive backup.
        public let status: TeamLog.ExternalDriveBackupEligibilityStatus
        /// Total number of valid external drive backup for all the team members.
        public let numberOfExternalDriveBackup: UInt64
        public init(desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo, status: TeamLog.ExternalDriveBackupEligibilityStatus, numberOfExternalDriveBackup: UInt64) {
            self.desktopDeviceSessionInfo = desktopDeviceSessionInfo
            self.status = status
            comparableValidator()(numberOfExternalDriveBackup)
            self.numberOfExternalDriveBackup = numberOfExternalDriveBackup
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupEligibilityStatusCheckedDetailsSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupEligibilityStatusCheckedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupEligibilityStatusCheckedDetails) -> JSON {
            let output = [ 
            "desktop_device_session_info": TeamLog.DesktopDeviceSessionLogInfoSerializer().serialize(value.desktopDeviceSessionInfo),
            "status": TeamLog.ExternalDriveBackupEligibilityStatusSerializer().serialize(value.status),
            "number_of_external_drive_backup": Serialization._UInt64Serializer.serialize(value.numberOfExternalDriveBackup),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupEligibilityStatusCheckedDetails {
            switch json {
                case .dictionary(let dict):
                    let desktopDeviceSessionInfo = TeamLog.DesktopDeviceSessionLogInfoSerializer().deserialize(dict["desktop_device_session_info"] ?? .null)
                    let status = TeamLog.ExternalDriveBackupEligibilityStatusSerializer().deserialize(dict["status"] ?? .null)
                    let numberOfExternalDriveBackup = Serialization._UInt64Serializer.deserialize(dict["number_of_external_drive_backup"] ?? .null)
                    return ExternalDriveBackupEligibilityStatusCheckedDetails(desktopDeviceSessionInfo: desktopDeviceSessionInfo, status: status, numberOfExternalDriveBackup: numberOfExternalDriveBackup)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExternalDriveBackupEligibilityStatusCheckedType struct
    open class ExternalDriveBackupEligibilityStatusCheckedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupEligibilityStatusCheckedTypeSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupEligibilityStatusCheckedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupEligibilityStatusCheckedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupEligibilityStatusCheckedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExternalDriveBackupEligibilityStatusCheckedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to external drive backup feature
    public enum ExternalDriveBackupPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupPolicySerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return ExternalDriveBackupPolicy.default_
                        case "disabled":
                            return ExternalDriveBackupPolicy.disabled
                        case "enabled":
                            return ExternalDriveBackupPolicy.enabled
                        case "other":
                            return ExternalDriveBackupPolicy.other
                        default:
                            return ExternalDriveBackupPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed external drive backup policy for team.
    open class ExternalDriveBackupPolicyChangedDetails: CustomStringConvertible {
        /// New external drive backup policy.
        public let newValue: TeamLog.ExternalDriveBackupPolicy
        /// Previous external drive backup policy.
        public let previousValue: TeamLog.ExternalDriveBackupPolicy
        public init(newValue: TeamLog.ExternalDriveBackupPolicy, previousValue: TeamLog.ExternalDriveBackupPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ExternalDriveBackupPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ExternalDriveBackupPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ExternalDriveBackupPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ExternalDriveBackupPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ExternalDriveBackupPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExternalDriveBackupPolicyChangedType struct
    open class ExternalDriveBackupPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExternalDriveBackupPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// External Drive Backup status
    public enum ExternalDriveBackupStatus: CustomStringConvertible {
        /// An unspecified error.
        case broken
        /// An unspecified error.
        case created
        /// An unspecified error.
        case createdOrBroken
        /// An unspecified error.
        case deleted
        /// An unspecified error.
        case empty
        /// An unspecified error.
        case unknown
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupStatusSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupStatus) -> JSON {
            switch value {
                case .broken:
                    var d = [String: JSON]()
                    d[".tag"] = .str("broken")
                    return .dictionary(d)
                case .created:
                    var d = [String: JSON]()
                    d[".tag"] = .str("created")
                    return .dictionary(d)
                case .createdOrBroken:
                    var d = [String: JSON]()
                    d[".tag"] = .str("created_or_broken")
                    return .dictionary(d)
                case .deleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("deleted")
                    return .dictionary(d)
                case .empty:
                    var d = [String: JSON]()
                    d[".tag"] = .str("empty")
                    return .dictionary(d)
                case .unknown:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unknown")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "broken":
                            return ExternalDriveBackupStatus.broken
                        case "created":
                            return ExternalDriveBackupStatus.created
                        case "created_or_broken":
                            return ExternalDriveBackupStatus.createdOrBroken
                        case "deleted":
                            return ExternalDriveBackupStatus.deleted
                        case "empty":
                            return ExternalDriveBackupStatus.empty
                        case "unknown":
                            return ExternalDriveBackupStatus.unknown
                        case "other":
                            return ExternalDriveBackupStatus.other
                        default:
                            return ExternalDriveBackupStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Modified external drive backup.
    open class ExternalDriveBackupStatusChangedDetails: CustomStringConvertible {
        /// Device's session logged information.
        public let desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo
        /// Previous status of this external drive backup.
        public let previousValue: TeamLog.ExternalDriveBackupStatus
        /// Next status of this external drive backup.
        public let newValue: TeamLog.ExternalDriveBackupStatus
        public init(desktopDeviceSessionInfo: TeamLog.DesktopDeviceSessionLogInfo, previousValue: TeamLog.ExternalDriveBackupStatus, newValue: TeamLog.ExternalDriveBackupStatus) {
            self.desktopDeviceSessionInfo = desktopDeviceSessionInfo
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupStatusChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupStatusChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupStatusChangedDetails) -> JSON {
            let output = [ 
            "desktop_device_session_info": TeamLog.DesktopDeviceSessionLogInfoSerializer().serialize(value.desktopDeviceSessionInfo),
            "previous_value": TeamLog.ExternalDriveBackupStatusSerializer().serialize(value.previousValue),
            "new_value": TeamLog.ExternalDriveBackupStatusSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupStatusChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let desktopDeviceSessionInfo = TeamLog.DesktopDeviceSessionLogInfoSerializer().deserialize(dict["desktop_device_session_info"] ?? .null)
                    let previousValue = TeamLog.ExternalDriveBackupStatusSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.ExternalDriveBackupStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    return ExternalDriveBackupStatusChangedDetails(desktopDeviceSessionInfo: desktopDeviceSessionInfo, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExternalDriveBackupStatusChangedType struct
    open class ExternalDriveBackupStatusChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalDriveBackupStatusChangedTypeSerializer().serialize(self)))"
        }
    }
    open class ExternalDriveBackupStatusChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalDriveBackupStatusChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalDriveBackupStatusChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExternalDriveBackupStatusChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created External sharing report.
    open class ExternalSharingCreateReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalSharingCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class ExternalSharingCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalSharingCreateReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalSharingCreateReportDetails {
            switch json {
                case .dictionary(_):
                    return ExternalSharingCreateReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExternalSharingCreateReportType struct
    open class ExternalSharingCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalSharingCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class ExternalSharingCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalSharingCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalSharingCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExternalSharingCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create External sharing report.
    open class ExternalSharingReportFailedDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalSharingReportFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class ExternalSharingReportFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalSharingReportFailedDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalSharingReportFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return ExternalSharingReportFailedDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExternalSharingReportFailedType struct
    open class ExternalSharingReportFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalSharingReportFailedTypeSerializer().serialize(self)))"
        }
    }
    open class ExternalSharingReportFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalSharingReportFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalSharingReportFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ExternalSharingReportFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// A user without a Dropbox account.
    open class ExternalUserLogInfo: CustomStringConvertible {
        /// An external user identifier.
        public let userIdentifier: String
        /// Identifier type.
        public let identifierType: TeamLog.IdentifierType
        public init(userIdentifier: String, identifierType: TeamLog.IdentifierType) {
            stringValidator()(userIdentifier)
            self.userIdentifier = userIdentifier
            self.identifierType = identifierType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExternalUserLogInfoSerializer().serialize(self)))"
        }
    }
    open class ExternalUserLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExternalUserLogInfo) -> JSON {
            let output = [ 
            "user_identifier": Serialization._StringSerializer.serialize(value.userIdentifier),
            "identifier_type": TeamLog.IdentifierTypeSerializer().serialize(value.identifierType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExternalUserLogInfo {
            switch json {
                case .dictionary(let dict):
                    let userIdentifier = Serialization._StringSerializer.deserialize(dict["user_identifier"] ?? .null)
                    let identifierType = TeamLog.IdentifierTypeSerializer().deserialize(dict["identifier_type"] ?? .null)
                    return ExternalUserLogInfo(userIdentifier: userIdentifier, identifierType: identifierType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Provides details about a failure
    open class FailureDetailsLogInfo: CustomStringConvertible {
        /// A user friendly explanation of the error.
        public let userFriendlyMessage: String?
        /// A technical explanation of the error. This is relevant for some errors.
        public let technicalErrorMessage: String?
        public init(userFriendlyMessage: String? = nil, technicalErrorMessage: String? = nil) {
            nullableValidator(stringValidator())(userFriendlyMessage)
            self.userFriendlyMessage = userFriendlyMessage
            nullableValidator(stringValidator())(technicalErrorMessage)
            self.technicalErrorMessage = technicalErrorMessage
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FailureDetailsLogInfoSerializer().serialize(self)))"
        }
    }
    open class FailureDetailsLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FailureDetailsLogInfo) -> JSON {
            let output = [ 
            "user_friendly_message": NullableSerializer(Serialization._StringSerializer).serialize(value.userFriendlyMessage),
            "technical_error_message": NullableSerializer(Serialization._StringSerializer).serialize(value.technicalErrorMessage),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FailureDetailsLogInfo {
            switch json {
                case .dictionary(let dict):
                    let userFriendlyMessage = NullableSerializer(Serialization._StringSerializer).deserialize(dict["user_friendly_message"] ?? .null)
                    let technicalErrorMessage = NullableSerializer(Serialization._StringSerializer).deserialize(dict["technical_error_message"] ?? .null)
                    return FailureDetailsLogInfo(userFriendlyMessage: userFriendlyMessage, technicalErrorMessage: technicalErrorMessage)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FedAdminRole union
    public enum FedAdminRole: CustomStringConvertible {
        /// An unspecified error.
        case enterpriseAdmin
        /// An unspecified error.
        case notEnterpriseAdmin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FedAdminRoleSerializer().serialize(self)))"
        }
    }
    open class FedAdminRoleSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FedAdminRole) -> JSON {
            switch value {
                case .enterpriseAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enterprise_admin")
                    return .dictionary(d)
                case .notEnterpriseAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("not_enterprise_admin")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FedAdminRole {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "enterprise_admin":
                            return FedAdminRole.enterpriseAdmin
                        case "not_enterprise_admin":
                            return FedAdminRole.notEnterpriseAdmin
                        case "other":
                            return FedAdminRole.other
                        default:
                            return FedAdminRole.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// More details about the organization or team.
    public enum FedExtraDetails: CustomStringConvertible {
        /// More details about the organization.
        case organization(TeamLog.OrganizationDetails)
        /// More details about the team.
        case team(TeamLog.TeamDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FedExtraDetailsSerializer().serialize(self)))"
        }
    }
    open class FedExtraDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FedExtraDetails) -> JSON {
            switch value {
                case .organization(let arg):
                    var d = Serialization.getFields(TeamLog.OrganizationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("organization")
                    return .dictionary(d)
                case .team(let arg):
                    var d = Serialization.getFields(TeamLog.TeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FedExtraDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "organization":
                            let v = TeamLog.OrganizationDetailsSerializer().deserialize(json)
                            return FedExtraDetails.organization(v)
                        case "team":
                            let v = TeamLog.TeamDetailsSerializer().deserialize(json)
                            return FedExtraDetails.team(v)
                        case "other":
                            return FedExtraDetails.other
                        default:
                            return FedExtraDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The FedHandshakeAction union
    public enum FedHandshakeAction: CustomStringConvertible {
        /// An unspecified error.
        case acceptedInvite
        /// An unspecified error.
        case canceledInvite
        /// An unspecified error.
        case inviteExpired
        /// An unspecified error.
        case invited
        /// An unspecified error.
        case rejectedInvite
        /// An unspecified error.
        case removedTeam
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FedHandshakeActionSerializer().serialize(self)))"
        }
    }
    open class FedHandshakeActionSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FedHandshakeAction) -> JSON {
            switch value {
                case .acceptedInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("accepted_invite")
                    return .dictionary(d)
                case .canceledInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("canceled_invite")
                    return .dictionary(d)
                case .inviteExpired:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invite_expired")
                    return .dictionary(d)
                case .invited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited")
                    return .dictionary(d)
                case .rejectedInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("rejected_invite")
                    return .dictionary(d)
                case .removedTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("removed_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FedHandshakeAction {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "accepted_invite":
                            return FedHandshakeAction.acceptedInvite
                        case "canceled_invite":
                            return FedHandshakeAction.canceledInvite
                        case "invite_expired":
                            return FedHandshakeAction.inviteExpired
                        case "invited":
                            return FedHandshakeAction.invited
                        case "rejected_invite":
                            return FedHandshakeAction.rejectedInvite
                        case "removed_team":
                            return FedHandshakeAction.removedTeam
                        case "other":
                            return FedHandshakeAction.other
                        default:
                            return FedHandshakeAction.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Additional information about the organization or connected team
    public enum FederationStatusChangeAdditionalInfo: CustomStringConvertible {
        /// The name of the team.
        case connectedTeamName(TeamLog.ConnectedTeamName)
        /// The email to which the request was sent.
        case nonTrustedTeamDetails(TeamLog.NonTrustedTeamDetails)
        /// The name of the organization.
        case organizationName(TeamLog.OrganizationName)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FederationStatusChangeAdditionalInfoSerializer().serialize(self)))"
        }
    }
    open class FederationStatusChangeAdditionalInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FederationStatusChangeAdditionalInfo) -> JSON {
            switch value {
                case .connectedTeamName(let arg):
                    var d = Serialization.getFields(TeamLog.ConnectedTeamNameSerializer().serialize(arg))
                    d[".tag"] = .str("connected_team_name")
                    return .dictionary(d)
                case .nonTrustedTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NonTrustedTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("non_trusted_team_details")
                    return .dictionary(d)
                case .organizationName(let arg):
                    var d = Serialization.getFields(TeamLog.OrganizationNameSerializer().serialize(arg))
                    d[".tag"] = .str("organization_name")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FederationStatusChangeAdditionalInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "connected_team_name":
                            let v = TeamLog.ConnectedTeamNameSerializer().deserialize(json)
                            return FederationStatusChangeAdditionalInfo.connectedTeamName(v)
                        case "non_trusted_team_details":
                            let v = TeamLog.NonTrustedTeamDetailsSerializer().deserialize(json)
                            return FederationStatusChangeAdditionalInfo.nonTrustedTeamDetails(v)
                        case "organization_name":
                            let v = TeamLog.OrganizationNameSerializer().deserialize(json)
                            return FederationStatusChangeAdditionalInfo.organizationName(v)
                        case "other":
                            return FederationStatusChangeAdditionalInfo.other
                        default:
                            return FederationStatusChangeAdditionalInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added file comment.
    open class FileAddCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileAddCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileAddCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileAddCommentType struct
    open class FileAddCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileAddCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileAddCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added files and/or folders.
    open class FileAddDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddDetailsSerializer().serialize(self)))"
        }
    }
    open class FileAddDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddDetails {
            switch json {
                case .dictionary(_):
                    return FileAddDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileAddType struct
    open class FileAddType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddTypeSerializer().serialize(self)))"
        }
    }
    open class FileAddTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileAddType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Subscribed to or unsubscribed from comment notifications for file.
    open class FileChangeCommentSubscriptionDetails: CustomStringConvertible {
        /// New file comment subscription.
        public let newValue: TeamLog.FileCommentNotificationPolicy
        /// Previous file comment subscription. Might be missing due to historical data gap.
        public let previousValue: TeamLog.FileCommentNotificationPolicy?
        public init(newValue: TeamLog.FileCommentNotificationPolicy, previousValue: TeamLog.FileCommentNotificationPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileChangeCommentSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class FileChangeCommentSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileChangeCommentSubscriptionDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileCommentNotificationPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileCommentNotificationPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileChangeCommentSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileCommentNotificationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileCommentNotificationPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileChangeCommentSubscriptionDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileChangeCommentSubscriptionType struct
    open class FileChangeCommentSubscriptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileChangeCommentSubscriptionTypeSerializer().serialize(self)))"
        }
    }
    open class FileChangeCommentSubscriptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileChangeCommentSubscriptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileChangeCommentSubscriptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileChangeCommentSubscriptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enable or disable file comments notifications
    public enum FileCommentNotificationPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentNotificationPolicySerializer().serialize(self)))"
        }
    }
    open class FileCommentNotificationPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentNotificationPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileCommentNotificationPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileCommentNotificationPolicy.disabled
                        case "enabled":
                            return FileCommentNotificationPolicy.enabled
                        case "other":
                            return FileCommentNotificationPolicy.other
                        default:
                            return FileCommentNotificationPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled/disabled commenting on team files.
    open class FileCommentsChangePolicyDetails: CustomStringConvertible {
        /// New commenting on team files policy.
        public let newValue: TeamLog.FileCommentsPolicy
        /// Previous commenting on team files policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.FileCommentsPolicy?
        public init(newValue: TeamLog.FileCommentsPolicy, previousValue: TeamLog.FileCommentsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileCommentsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileCommentsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileCommentsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCommentsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileCommentsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileCommentsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileCommentsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileCommentsChangePolicyType struct
    open class FileCommentsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class FileCommentsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCommentsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileCommentsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File comments policy
    public enum FileCommentsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentsPolicySerializer().serialize(self)))"
        }
    }
    open class FileCommentsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileCommentsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileCommentsPolicy.disabled
                        case "enabled":
                            return FileCommentsPolicy.enabled
                        case "other":
                            return FileCommentsPolicy.other
                        default:
                            return FileCommentsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Copied files and/or folders.
    open class FileCopyDetails: CustomStringConvertible {
        /// Relocate action details.
        public let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCopyDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCopyDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileCopyDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileCopyType struct
    open class FileCopyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCopyTypeSerializer().serialize(self)))"
        }
    }
    open class FileCopyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCopyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCopyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileCopyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted file comment.
    open class FileDeleteCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDeleteCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileDeleteCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileDeleteCommentType struct
    open class FileDeleteCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileDeleteCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileDeleteCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted files and/or folders.
    open class FileDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteDetails {
            switch json {
                case .dictionary(_):
                    return FileDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileDeleteType struct
    open class FileDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class FileDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded files and/or folders.
    open class FileDownloadDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDownloadDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDownloadDetails {
            switch json {
                case .dictionary(_):
                    return FileDownloadDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileDownloadType struct
    open class FileDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class FileDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited file comment.
    open class FileEditCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        /// Previous comment text.
        public let previousCommentText: String
        public init(previousCommentText: String, commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
            stringValidator()(previousCommentText)
            self.previousCommentText = previousCommentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileEditCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileEditCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileEditCommentDetails) -> JSON {
            let output = [ 
            "previous_comment_text": Serialization._StringSerializer.serialize(value.previousCommentText),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileEditCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let previousCommentText = Serialization._StringSerializer.deserialize(dict["previous_comment_text"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileEditCommentDetails(previousCommentText: previousCommentText, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileEditCommentType struct
    open class FileEditCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileEditCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileEditCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileEditCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileEditCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileEditCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited files.
    open class FileEditDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileEditDetailsSerializer().serialize(self)))"
        }
    }
    open class FileEditDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileEditDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileEditDetails {
            switch json {
                case .dictionary(_):
                    return FileEditDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileEditType struct
    open class FileEditType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileEditTypeSerializer().serialize(self)))"
        }
    }
    open class FileEditTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileEditType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileEditType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileEditType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created copy reference to file/folder.
    open class FileGetCopyReferenceDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileGetCopyReferenceDetailsSerializer().serialize(self)))"
        }
    }
    open class FileGetCopyReferenceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileGetCopyReferenceDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileGetCopyReferenceDetails {
            switch json {
                case .dictionary(_):
                    return FileGetCopyReferenceDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileGetCopyReferenceType struct
    open class FileGetCopyReferenceType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileGetCopyReferenceTypeSerializer().serialize(self)))"
        }
    }
    open class FileGetCopyReferenceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileGetCopyReferenceType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileGetCopyReferenceType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileGetCopyReferenceType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Liked file comment.
    open class FileLikeCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLikeCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileLikeCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLikeCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLikeCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileLikeCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileLikeCommentType struct
    open class FileLikeCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLikeCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileLikeCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLikeCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLikeCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileLikeCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Locked/unlocked editing for a file.
    open class FileLockingLockStatusChangedDetails: CustomStringConvertible {
        /// Previous lock status of the file.
        public let previousValue: TeamLog.LockStatus
        /// New lock status of the file.
        public let newValue: TeamLog.LockStatus
        public init(previousValue: TeamLog.LockStatus, newValue: TeamLog.LockStatus) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLockingLockStatusChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FileLockingLockStatusChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLockingLockStatusChangedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.LockStatusSerializer().serialize(value.previousValue),
            "new_value": TeamLog.LockStatusSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLockingLockStatusChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.LockStatusSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.LockStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    return FileLockingLockStatusChangedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileLockingLockStatusChangedType struct
    open class FileLockingLockStatusChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLockingLockStatusChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FileLockingLockStatusChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLockingLockStatusChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLockingLockStatusChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileLockingLockStatusChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed file locking policy for team.
    open class FileLockingPolicyChangedDetails: CustomStringConvertible {
        /// New file locking policy.
        public let newValue: TeamPolicies.FileLockingPolicyState
        /// Previous file locking policy.
        public let previousValue: TeamPolicies.FileLockingPolicyState
        public init(newValue: TeamPolicies.FileLockingPolicyState, previousValue: TeamPolicies.FileLockingPolicyState) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLockingPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FileLockingPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLockingPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.FileLockingPolicyStateSerializer().serialize(value.newValue),
            "previous_value": TeamPolicies.FileLockingPolicyStateSerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLockingPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.FileLockingPolicyStateSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamPolicies.FileLockingPolicyStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    return FileLockingPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileLockingPolicyChangedType struct
    open class FileLockingPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLockingPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FileLockingPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLockingPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLockingPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileLockingPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Generic information relevant both for files and folders
    open class FileOrFolderLogInfo: CustomStringConvertible {
        /// Path relative to event context.
        public let path: TeamLog.PathLogInfo
        /// Display name.
        public let displayName: String?
        /// Unique ID.
        public let fileId: String?
        /// File or folder size in bytes.
        public let fileSize: UInt64?
        public init(path: TeamLog.PathLogInfo, displayName: String? = nil, fileId: String? = nil, fileSize: UInt64? = nil) {
            self.path = path
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator())(fileId)
            self.fileId = fileId
            nullableValidator(comparableValidator())(fileSize)
            self.fileSize = fileSize
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileOrFolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class FileOrFolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileOrFolderLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            "file_size": NullableSerializer(Serialization._UInt64Serializer).serialize(value.fileSize),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileOrFolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    let fileSize = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["file_size"] ?? .null)
                    return FileOrFolderLogInfo(path: path, displayName: displayName, fileId: fileId, fileSize: fileSize)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File's logged information.
    open class FileLogInfo: TeamLog.FileOrFolderLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLogInfoSerializer().serialize(self)))"
        }
    }
    open class FileLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            "file_size": NullableSerializer(Serialization._UInt64Serializer).serialize(value.fileSize),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    let fileSize = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["file_size"] ?? .null)
                    return FileLogInfo(path: path, displayName: displayName, fileId: fileId, fileSize: fileSize)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Moved files and/or folders.
    open class FileMoveDetails: CustomStringConvertible {
        /// Relocate action details.
        public let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileMoveDetailsSerializer().serialize(self)))"
        }
    }
    open class FileMoveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileMoveDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileMoveDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileMoveDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileMoveType struct
    open class FileMoveType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileMoveTypeSerializer().serialize(self)))"
        }
    }
    open class FileMoveTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileMoveType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileMoveType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileMoveType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted files and/or folders.
    open class FilePermanentlyDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FilePermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePermanentlyDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePermanentlyDeleteDetails {
            switch json {
                case .dictionary(_):
                    return FilePermanentlyDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FilePermanentlyDeleteType struct
    open class FilePermanentlyDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePermanentlyDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class FilePermanentlyDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePermanentlyDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePermanentlyDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FilePermanentlyDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Previewed files and/or folders.
    open class FilePreviewDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePreviewDetailsSerializer().serialize(self)))"
        }
    }
    open class FilePreviewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePreviewDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePreviewDetails {
            switch json {
                case .dictionary(_):
                    return FilePreviewDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FilePreviewType struct
    open class FilePreviewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePreviewTypeSerializer().serialize(self)))"
        }
    }
    open class FilePreviewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePreviewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePreviewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FilePreviewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed File Provider Migration policy for team.
    open class FileProviderMigrationPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamPolicies.FileProviderMigrationPolicyState
        /// From.
        public let previousValue: TeamPolicies.FileProviderMigrationPolicyState
        public init(newValue: TeamPolicies.FileProviderMigrationPolicyState, previousValue: TeamPolicies.FileProviderMigrationPolicyState) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileProviderMigrationPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FileProviderMigrationPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileProviderMigrationPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.FileProviderMigrationPolicyStateSerializer().serialize(value.newValue),
            "previous_value": TeamPolicies.FileProviderMigrationPolicyStateSerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileProviderMigrationPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.FileProviderMigrationPolicyStateSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamPolicies.FileProviderMigrationPolicyStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    return FileProviderMigrationPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileProviderMigrationPolicyChangedType struct
    open class FileProviderMigrationPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileProviderMigrationPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FileProviderMigrationPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileProviderMigrationPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileProviderMigrationPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileProviderMigrationPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed files and/or folders.
    open class FileRenameDetails: CustomStringConvertible {
        /// Relocate action details.
        public let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRenameDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileRenameDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRenameType struct
    open class FileRenameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRenameTypeSerializer().serialize(self)))"
        }
    }
    open class FileRenameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRenameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRenameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRenameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed file request.
    open class FileRequestChangeDetails: CustomStringConvertible {
        /// File request id. Might be missing due to historical data gap.
        public let fileRequestId: String?
        /// Previous file request details. Might be missing due to historical data gap.
        public let previousDetails: TeamLog.FileRequestDetails?
        /// New file request details.
        public let newDetails: TeamLog.FileRequestDetails
        public init(newDetails: TeamLog.FileRequestDetails, fileRequestId: String? = nil, previousDetails: TeamLog.FileRequestDetails? = nil) {
            nullableValidator(stringValidator(minLength: 1, pattern: "[-_0-9a-zA-Z]+"))(fileRequestId)
            self.fileRequestId = fileRequestId
            self.previousDetails = previousDetails
            self.newDetails = newDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestChangeDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestChangeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestChangeDetails) -> JSON {
            let output = [ 
            "new_details": TeamLog.FileRequestDetailsSerializer().serialize(value.newDetails),
            "file_request_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileRequestId),
            "previous_details": NullableSerializer(TeamLog.FileRequestDetailsSerializer()).serialize(value.previousDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestChangeDetails {
            switch json {
                case .dictionary(let dict):
                    let newDetails = TeamLog.FileRequestDetailsSerializer().deserialize(dict["new_details"] ?? .null)
                    let fileRequestId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_request_id"] ?? .null)
                    let previousDetails = NullableSerializer(TeamLog.FileRequestDetailsSerializer()).deserialize(dict["previous_details"] ?? .null)
                    return FileRequestChangeDetails(newDetails: newDetails, fileRequestId: fileRequestId, previousDetails: previousDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestChangeType struct
    open class FileRequestChangeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestChangeTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestChangeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestChangeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestChangeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestChangeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Closed file request.
    open class FileRequestCloseDetails: CustomStringConvertible {
        /// File request id. Might be missing due to historical data gap.
        public let fileRequestId: String?
        /// Previous file request details. Might be missing due to historical data gap.
        public let previousDetails: TeamLog.FileRequestDetails?
        public init(fileRequestId: String? = nil, previousDetails: TeamLog.FileRequestDetails? = nil) {
            nullableValidator(stringValidator(minLength: 1, pattern: "[-_0-9a-zA-Z]+"))(fileRequestId)
            self.fileRequestId = fileRequestId
            self.previousDetails = previousDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCloseDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestCloseDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCloseDetails) -> JSON {
            let output = [ 
            "file_request_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileRequestId),
            "previous_details": NullableSerializer(TeamLog.FileRequestDetailsSerializer()).serialize(value.previousDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCloseDetails {
            switch json {
                case .dictionary(let dict):
                    let fileRequestId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_request_id"] ?? .null)
                    let previousDetails = NullableSerializer(TeamLog.FileRequestDetailsSerializer()).deserialize(dict["previous_details"] ?? .null)
                    return FileRequestCloseDetails(fileRequestId: fileRequestId, previousDetails: previousDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestCloseType struct
    open class FileRequestCloseType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCloseTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestCloseTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCloseType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCloseType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestCloseType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created file request.
    open class FileRequestCreateDetails: CustomStringConvertible {
        /// File request id. Might be missing due to historical data gap.
        public let fileRequestId: String?
        /// File request details. Might be missing due to historical data gap.
        public let requestDetails: TeamLog.FileRequestDetails?
        public init(fileRequestId: String? = nil, requestDetails: TeamLog.FileRequestDetails? = nil) {
            nullableValidator(stringValidator(minLength: 1, pattern: "[-_0-9a-zA-Z]+"))(fileRequestId)
            self.fileRequestId = fileRequestId
            self.requestDetails = requestDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCreateDetails) -> JSON {
            let output = [ 
            "file_request_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileRequestId),
            "request_details": NullableSerializer(TeamLog.FileRequestDetailsSerializer()).serialize(value.requestDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let fileRequestId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_request_id"] ?? .null)
                    let requestDetails = NullableSerializer(TeamLog.FileRequestDetailsSerializer()).deserialize(dict["request_details"] ?? .null)
                    return FileRequestCreateDetails(fileRequestId: fileRequestId, requestDetails: requestDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestCreateType struct
    open class FileRequestCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCreateTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File request deadline
    open class FileRequestDeadline: CustomStringConvertible {
        /// The deadline for this file request. Might be missing due to historical data gap.
        public let deadline: Date?
        /// If set, allow uploads after the deadline has passed.
        public let allowLateUploads: String?
        public init(deadline: Date? = nil, allowLateUploads: String? = nil) {
            self.deadline = deadline
            nullableValidator(stringValidator())(allowLateUploads)
            self.allowLateUploads = allowLateUploads
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestDeadlineSerializer().serialize(self)))"
        }
    }
    open class FileRequestDeadlineSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestDeadline) -> JSON {
            let output = [ 
            "deadline": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.deadline),
            "allow_late_uploads": NullableSerializer(Serialization._StringSerializer).serialize(value.allowLateUploads),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestDeadline {
            switch json {
                case .dictionary(let dict):
                    let deadline = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["deadline"] ?? .null)
                    let allowLateUploads = NullableSerializer(Serialization._StringSerializer).deserialize(dict["allow_late_uploads"] ?? .null)
                    return FileRequestDeadline(deadline: deadline, allowLateUploads: allowLateUploads)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Delete file request.
    open class FileRequestDeleteDetails: CustomStringConvertible {
        /// File request id. Might be missing due to historical data gap.
        public let fileRequestId: String?
        /// Previous file request details. Might be missing due to historical data gap.
        public let previousDetails: TeamLog.FileRequestDetails?
        public init(fileRequestId: String? = nil, previousDetails: TeamLog.FileRequestDetails? = nil) {
            nullableValidator(stringValidator(minLength: 1, pattern: "[-_0-9a-zA-Z]+"))(fileRequestId)
            self.fileRequestId = fileRequestId
            self.previousDetails = previousDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestDeleteDetails) -> JSON {
            let output = [ 
            "file_request_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileRequestId),
            "previous_details": NullableSerializer(TeamLog.FileRequestDetailsSerializer()).serialize(value.previousDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let fileRequestId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_request_id"] ?? .null)
                    let previousDetails = NullableSerializer(TeamLog.FileRequestDetailsSerializer()).deserialize(dict["previous_details"] ?? .null)
                    return FileRequestDeleteDetails(fileRequestId: fileRequestId, previousDetails: previousDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestDeleteType struct
    open class FileRequestDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File request details
    open class FileRequestDetails: CustomStringConvertible {
        /// Asset position in the Assets list.
        public let assetIndex: UInt64
        /// File request deadline.
        public let deadline: TeamLog.FileRequestDeadline?
        public init(assetIndex: UInt64, deadline: TeamLog.FileRequestDeadline? = nil) {
            comparableValidator()(assetIndex)
            self.assetIndex = assetIndex
            self.deadline = deadline
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestDetails) -> JSON {
            let output = [ 
            "asset_index": Serialization._UInt64Serializer.serialize(value.assetIndex),
            "deadline": NullableSerializer(TeamLog.FileRequestDeadlineSerializer()).serialize(value.deadline),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestDetails {
            switch json {
                case .dictionary(let dict):
                    let assetIndex = Serialization._UInt64Serializer.deserialize(dict["asset_index"] ?? .null)
                    let deadline = NullableSerializer(TeamLog.FileRequestDeadlineSerializer()).deserialize(dict["deadline"] ?? .null)
                    return FileRequestDetails(assetIndex: assetIndex, deadline: deadline)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Received files for file request.
    open class FileRequestReceiveFileDetails: CustomStringConvertible {
        /// File request id. Might be missing due to historical data gap.
        public let fileRequestId: String?
        /// File request details. Might be missing due to historical data gap.
        public let fileRequestDetails: TeamLog.FileRequestDetails?
        /// Submitted file names.
        public let submittedFileNames: Array<String>
        /// The name as provided by the submitter.
        public let submitterName: String?
        /// The email as provided by the submitter.
        public let submitterEmail: String?
        public init(submittedFileNames: Array<String>, fileRequestId: String? = nil, fileRequestDetails: TeamLog.FileRequestDetails? = nil, submitterName: String? = nil, submitterEmail: String? = nil) {
            nullableValidator(stringValidator(minLength: 1, pattern: "[-_0-9a-zA-Z]+"))(fileRequestId)
            self.fileRequestId = fileRequestId
            self.fileRequestDetails = fileRequestDetails
            arrayValidator(itemValidator: stringValidator())(submittedFileNames)
            self.submittedFileNames = submittedFileNames
            nullableValidator(stringValidator())(submitterName)
            self.submitterName = submitterName
            nullableValidator(stringValidator(maxLength: 255))(submitterEmail)
            self.submitterEmail = submitterEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestReceiveFileDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestReceiveFileDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestReceiveFileDetails) -> JSON {
            let output = [ 
            "submitted_file_names": ArraySerializer(Serialization._StringSerializer).serialize(value.submittedFileNames),
            "file_request_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileRequestId),
            "file_request_details": NullableSerializer(TeamLog.FileRequestDetailsSerializer()).serialize(value.fileRequestDetails),
            "submitter_name": NullableSerializer(Serialization._StringSerializer).serialize(value.submitterName),
            "submitter_email": NullableSerializer(Serialization._StringSerializer).serialize(value.submitterEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestReceiveFileDetails {
            switch json {
                case .dictionary(let dict):
                    let submittedFileNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["submitted_file_names"] ?? .null)
                    let fileRequestId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_request_id"] ?? .null)
                    let fileRequestDetails = NullableSerializer(TeamLog.FileRequestDetailsSerializer()).deserialize(dict["file_request_details"] ?? .null)
                    let submitterName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["submitter_name"] ?? .null)
                    let submitterEmail = NullableSerializer(Serialization._StringSerializer).deserialize(dict["submitter_email"] ?? .null)
                    return FileRequestReceiveFileDetails(submittedFileNames: submittedFileNames, fileRequestId: fileRequestId, fileRequestDetails: fileRequestDetails, submitterName: submitterName, submitterEmail: submitterEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestReceiveFileType struct
    open class FileRequestReceiveFileType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestReceiveFileTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestReceiveFileTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestReceiveFileType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestReceiveFileType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestReceiveFileType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled file requests.
    open class FileRequestsChangePolicyDetails: CustomStringConvertible {
        /// New file requests policy.
        public let newValue: TeamLog.FileRequestsPolicy
        /// Previous file requests policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.FileRequestsPolicy?
        public init(newValue: TeamLog.FileRequestsPolicy, previousValue: TeamLog.FileRequestsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileRequestsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileRequestsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileRequestsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileRequestsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileRequestsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestsChangePolicyType struct
    open class FileRequestsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled file request emails for everyone.
    open class FileRequestsEmailsEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsEnabledDetails {
            switch json {
                case .dictionary(_):
                    return FileRequestsEmailsEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestsEmailsEnabledType struct
    open class FileRequestsEmailsEnabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsEnabledTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsEnabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsEnabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsEnabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestsEmailsEnabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled file request emails for team.
    open class FileRequestsEmailsRestrictedToTeamOnlyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsRestrictedToTeamOnlyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsRestrictedToTeamOnlyDetails {
            switch json {
                case .dictionary(_):
                    return FileRequestsEmailsRestrictedToTeamOnlyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRequestsEmailsRestrictedToTeamOnlyType struct
    open class FileRequestsEmailsRestrictedToTeamOnlyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsRestrictedToTeamOnlyTypeSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsRestrictedToTeamOnlyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsRestrictedToTeamOnlyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsRestrictedToTeamOnlyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRequestsEmailsRestrictedToTeamOnlyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File requests policy
    public enum FileRequestsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsPolicySerializer().serialize(self)))"
        }
    }
    open class FileRequestsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileRequestsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileRequestsPolicy.disabled
                        case "enabled":
                            return FileRequestsPolicy.enabled
                        case "other":
                            return FileRequestsPolicy.other
                        default:
                            return FileRequestsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Resolved file comment.
    open class FileResolveCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileResolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileResolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileResolveCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileResolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileResolveCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileResolveCommentType struct
    open class FileResolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileResolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileResolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileResolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileResolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileResolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored deleted files and/or folders.
    open class FileRestoreDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRestoreDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRestoreDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRestoreDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRestoreDetails {
            switch json {
                case .dictionary(_):
                    return FileRestoreDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRestoreType struct
    open class FileRestoreType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRestoreTypeSerializer().serialize(self)))"
        }
    }
    open class FileRestoreTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRestoreType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRestoreType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRestoreType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reverted files to previous version.
    open class FileRevertDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRevertDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRevertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRevertDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRevertDetails {
            switch json {
                case .dictionary(_):
                    return FileRevertDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRevertType struct
    open class FileRevertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRevertTypeSerializer().serialize(self)))"
        }
    }
    open class FileRevertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRevertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRevertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRevertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Rolled back file actions.
    open class FileRollbackChangesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRollbackChangesDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRollbackChangesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRollbackChangesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRollbackChangesDetails {
            switch json {
                case .dictionary(_):
                    return FileRollbackChangesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileRollbackChangesType struct
    open class FileRollbackChangesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRollbackChangesTypeSerializer().serialize(self)))"
        }
    }
    open class FileRollbackChangesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRollbackChangesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRollbackChangesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileRollbackChangesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Saved file/folder using copy reference.
    open class FileSaveCopyReferenceDetails: CustomStringConvertible {
        /// Relocate action details.
        public let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileSaveCopyReferenceDetailsSerializer().serialize(self)))"
        }
    }
    open class FileSaveCopyReferenceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileSaveCopyReferenceDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileSaveCopyReferenceDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileSaveCopyReferenceDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileSaveCopyReferenceType struct
    open class FileSaveCopyReferenceType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileSaveCopyReferenceTypeSerializer().serialize(self)))"
        }
    }
    open class FileSaveCopyReferenceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileSaveCopyReferenceType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileSaveCopyReferenceType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileSaveCopyReferenceType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Transfer files added.
    open class FileTransfersFileAddDetails: CustomStringConvertible {
        /// Transfer id.
        public let fileTransferId: String
        public init(fileTransferId: String) {
            stringValidator()(fileTransferId)
            self.fileTransferId = fileTransferId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersFileAddDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersFileAddDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersFileAddDetails) -> JSON {
            let output = [ 
            "file_transfer_id": Serialization._StringSerializer.serialize(value.fileTransferId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersFileAddDetails {
            switch json {
                case .dictionary(let dict):
                    let fileTransferId = Serialization._StringSerializer.deserialize(dict["file_transfer_id"] ?? .null)
                    return FileTransfersFileAddDetails(fileTransferId: fileTransferId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersFileAddType struct
    open class FileTransfersFileAddType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersFileAddTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersFileAddTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersFileAddType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersFileAddType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersFileAddType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File transfers policy
    public enum FileTransfersPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersPolicySerializer().serialize(self)))"
        }
    }
    open class FileTransfersPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileTransfersPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileTransfersPolicy.disabled
                        case "enabled":
                            return FileTransfersPolicy.enabled
                        case "other":
                            return FileTransfersPolicy.other
                        default:
                            return FileTransfersPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed file transfers policy for team.
    open class FileTransfersPolicyChangedDetails: CustomStringConvertible {
        /// New file transfers policy.
        public let newValue: TeamLog.FileTransfersPolicy
        /// Previous file transfers policy.
        public let previousValue: TeamLog.FileTransfersPolicy
        public init(newValue: TeamLog.FileTransfersPolicy, previousValue: TeamLog.FileTransfersPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileTransfersPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.FileTransfersPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileTransfersPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.FileTransfersPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return FileTransfersPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersPolicyChangedType struct
    open class FileTransfersPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted transfer.
    open class FileTransfersTransferDeleteDetails: CustomStringConvertible {
        /// Transfer id.
        public let fileTransferId: String
        public init(fileTransferId: String) {
            stringValidator()(fileTransferId)
            self.fileTransferId = fileTransferId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferDeleteDetails) -> JSON {
            let output = [ 
            "file_transfer_id": Serialization._StringSerializer.serialize(value.fileTransferId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let fileTransferId = Serialization._StringSerializer.deserialize(dict["file_transfer_id"] ?? .null)
                    return FileTransfersTransferDeleteDetails(fileTransferId: fileTransferId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersTransferDeleteType struct
    open class FileTransfersTransferDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersTransferDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Transfer downloaded.
    open class FileTransfersTransferDownloadDetails: CustomStringConvertible {
        /// Transfer id.
        public let fileTransferId: String
        public init(fileTransferId: String) {
            stringValidator()(fileTransferId)
            self.fileTransferId = fileTransferId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferDownloadDetails) -> JSON {
            let output = [ 
            "file_transfer_id": Serialization._StringSerializer.serialize(value.fileTransferId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let fileTransferId = Serialization._StringSerializer.deserialize(dict["file_transfer_id"] ?? .null)
                    return FileTransfersTransferDownloadDetails(fileTransferId: fileTransferId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersTransferDownloadType struct
    open class FileTransfersTransferDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersTransferDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent transfer.
    open class FileTransfersTransferSendDetails: CustomStringConvertible {
        /// Transfer id.
        public let fileTransferId: String
        public init(fileTransferId: String) {
            stringValidator()(fileTransferId)
            self.fileTransferId = fileTransferId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferSendDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferSendDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferSendDetails) -> JSON {
            let output = [ 
            "file_transfer_id": Serialization._StringSerializer.serialize(value.fileTransferId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferSendDetails {
            switch json {
                case .dictionary(let dict):
                    let fileTransferId = Serialization._StringSerializer.deserialize(dict["file_transfer_id"] ?? .null)
                    return FileTransfersTransferSendDetails(fileTransferId: fileTransferId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersTransferSendType struct
    open class FileTransfersTransferSendType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferSendTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferSendTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferSendType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferSendType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersTransferSendType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed transfer.
    open class FileTransfersTransferViewDetails: CustomStringConvertible {
        /// Transfer id.
        public let fileTransferId: String
        public init(fileTransferId: String) {
            stringValidator()(fileTransferId)
            self.fileTransferId = fileTransferId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferViewDetailsSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferViewDetails) -> JSON {
            let output = [ 
            "file_transfer_id": Serialization._StringSerializer.serialize(value.fileTransferId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferViewDetails {
            switch json {
                case .dictionary(let dict):
                    let fileTransferId = Serialization._StringSerializer.deserialize(dict["file_transfer_id"] ?? .null)
                    return FileTransfersTransferViewDetails(fileTransferId: fileTransferId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileTransfersTransferViewType struct
    open class FileTransfersTransferViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileTransfersTransferViewTypeSerializer().serialize(self)))"
        }
    }
    open class FileTransfersTransferViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileTransfersTransferViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileTransfersTransferViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileTransfersTransferViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unliked file comment.
    open class FileUnlikeCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnlikeCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileUnlikeCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnlikeCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnlikeCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileUnlikeCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileUnlikeCommentType struct
    open class FileUnlikeCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnlikeCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileUnlikeCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnlikeCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnlikeCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileUnlikeCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unresolved file comment.
    open class FileUnresolveCommentDetails: CustomStringConvertible {
        /// Comment text.
        public let commentText: String?
        public init(commentText: String? = nil) {
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnresolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileUnresolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnresolveCommentDetails) -> JSON {
            let output = [ 
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnresolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileUnresolveCommentDetails(commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FileUnresolveCommentType struct
    open class FileUnresolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnresolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class FileUnresolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnresolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnresolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FileUnresolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether applying link restrictions on all team owned folders
    public enum FolderLinkRestrictionPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderLinkRestrictionPolicySerializer().serialize(self)))"
        }
    }
    open class FolderLinkRestrictionPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderLinkRestrictionPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FolderLinkRestrictionPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FolderLinkRestrictionPolicy.disabled
                        case "enabled":
                            return FolderLinkRestrictionPolicy.enabled
                        case "other":
                            return FolderLinkRestrictionPolicy.other
                        default:
                            return FolderLinkRestrictionPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed folder link restrictions policy for team.
    open class FolderLinkRestrictionPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.FolderLinkRestrictionPolicy
        /// From.
        public let previousValue: TeamLog.FolderLinkRestrictionPolicy
        public init(newValue: TeamLog.FolderLinkRestrictionPolicy, previousValue: TeamLog.FolderLinkRestrictionPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderLinkRestrictionPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FolderLinkRestrictionPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderLinkRestrictionPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FolderLinkRestrictionPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.FolderLinkRestrictionPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderLinkRestrictionPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FolderLinkRestrictionPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.FolderLinkRestrictionPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return FolderLinkRestrictionPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FolderLinkRestrictionPolicyChangedType struct
    open class FolderLinkRestrictionPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderLinkRestrictionPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FolderLinkRestrictionPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderLinkRestrictionPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderLinkRestrictionPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FolderLinkRestrictionPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Folder's logged information.
    open class FolderLogInfo: TeamLog.FileOrFolderLogInfo {
        /// Number of files within the folder.
        public let fileCount: UInt64?
        public init(path: TeamLog.PathLogInfo, displayName: String? = nil, fileId: String? = nil, fileSize: UInt64? = nil, fileCount: UInt64? = nil) {
            nullableValidator(comparableValidator())(fileCount)
            self.fileCount = fileCount
            super.init(path: path, displayName: displayName, fileId: fileId, fileSize: fileSize)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class FolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            "file_size": NullableSerializer(Serialization._UInt64Serializer).serialize(value.fileSize),
            "file_count": NullableSerializer(Serialization._UInt64Serializer).serialize(value.fileCount),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    let fileSize = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["file_size"] ?? .null)
                    let fileCount = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["file_count"] ?? .null)
                    return FolderLogInfo(path: path, displayName: displayName, fileId: fileId, fileSize: fileSize, fileCount: fileCount)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Updated folder overview.
    open class FolderOverviewDescriptionChangedDetails: CustomStringConvertible {
        /// Folder Overview location position in the Assets list.
        public let folderOverviewLocationAsset: UInt64
        public init(folderOverviewLocationAsset: UInt64) {
            comparableValidator()(folderOverviewLocationAsset)
            self.folderOverviewLocationAsset = folderOverviewLocationAsset
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewDescriptionChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewDescriptionChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewDescriptionChangedDetails) -> JSON {
            let output = [ 
            "folder_overview_location_asset": Serialization._UInt64Serializer.serialize(value.folderOverviewLocationAsset),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewDescriptionChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let folderOverviewLocationAsset = Serialization._UInt64Serializer.deserialize(dict["folder_overview_location_asset"] ?? .null)
                    return FolderOverviewDescriptionChangedDetails(folderOverviewLocationAsset: folderOverviewLocationAsset)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FolderOverviewDescriptionChangedType struct
    open class FolderOverviewDescriptionChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewDescriptionChangedTypeSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewDescriptionChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewDescriptionChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewDescriptionChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FolderOverviewDescriptionChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Pinned item to folder overview.
    open class FolderOverviewItemPinnedDetails: CustomStringConvertible {
        /// Folder Overview location position in the Assets list.
        public let folderOverviewLocationAsset: UInt64
        /// Pinned items positions in the Assets list.
        public let pinnedItemsAssetIndices: Array<UInt64>
        public init(folderOverviewLocationAsset: UInt64, pinnedItemsAssetIndices: Array<UInt64>) {
            comparableValidator()(folderOverviewLocationAsset)
            self.folderOverviewLocationAsset = folderOverviewLocationAsset
            arrayValidator(itemValidator: comparableValidator())(pinnedItemsAssetIndices)
            self.pinnedItemsAssetIndices = pinnedItemsAssetIndices
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewItemPinnedDetailsSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewItemPinnedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewItemPinnedDetails) -> JSON {
            let output = [ 
            "folder_overview_location_asset": Serialization._UInt64Serializer.serialize(value.folderOverviewLocationAsset),
            "pinned_items_asset_indices": ArraySerializer(Serialization._UInt64Serializer).serialize(value.pinnedItemsAssetIndices),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewItemPinnedDetails {
            switch json {
                case .dictionary(let dict):
                    let folderOverviewLocationAsset = Serialization._UInt64Serializer.deserialize(dict["folder_overview_location_asset"] ?? .null)
                    let pinnedItemsAssetIndices = ArraySerializer(Serialization._UInt64Serializer).deserialize(dict["pinned_items_asset_indices"] ?? .null)
                    return FolderOverviewItemPinnedDetails(folderOverviewLocationAsset: folderOverviewLocationAsset, pinnedItemsAssetIndices: pinnedItemsAssetIndices)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FolderOverviewItemPinnedType struct
    open class FolderOverviewItemPinnedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewItemPinnedTypeSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewItemPinnedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewItemPinnedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewItemPinnedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FolderOverviewItemPinnedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unpinned item from folder overview.
    open class FolderOverviewItemUnpinnedDetails: CustomStringConvertible {
        /// Folder Overview location position in the Assets list.
        public let folderOverviewLocationAsset: UInt64
        /// Pinned items positions in the Assets list.
        public let pinnedItemsAssetIndices: Array<UInt64>
        public init(folderOverviewLocationAsset: UInt64, pinnedItemsAssetIndices: Array<UInt64>) {
            comparableValidator()(folderOverviewLocationAsset)
            self.folderOverviewLocationAsset = folderOverviewLocationAsset
            arrayValidator(itemValidator: comparableValidator())(pinnedItemsAssetIndices)
            self.pinnedItemsAssetIndices = pinnedItemsAssetIndices
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewItemUnpinnedDetailsSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewItemUnpinnedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewItemUnpinnedDetails) -> JSON {
            let output = [ 
            "folder_overview_location_asset": Serialization._UInt64Serializer.serialize(value.folderOverviewLocationAsset),
            "pinned_items_asset_indices": ArraySerializer(Serialization._UInt64Serializer).serialize(value.pinnedItemsAssetIndices),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewItemUnpinnedDetails {
            switch json {
                case .dictionary(let dict):
                    let folderOverviewLocationAsset = Serialization._UInt64Serializer.deserialize(dict["folder_overview_location_asset"] ?? .null)
                    let pinnedItemsAssetIndices = ArraySerializer(Serialization._UInt64Serializer).deserialize(dict["pinned_items_asset_indices"] ?? .null)
                    return FolderOverviewItemUnpinnedDetails(folderOverviewLocationAsset: folderOverviewLocationAsset, pinnedItemsAssetIndices: pinnedItemsAssetIndices)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The FolderOverviewItemUnpinnedType struct
    open class FolderOverviewItemUnpinnedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderOverviewItemUnpinnedTypeSerializer().serialize(self)))"
        }
    }
    open class FolderOverviewItemUnpinnedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderOverviewItemUnpinnedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderOverviewItemUnpinnedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return FolderOverviewItemUnpinnedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Geographic location details.
    open class GeoLocationLogInfo: CustomStringConvertible {
        /// City name.
        public let city: String?
        /// Region name.
        public let region: String?
        /// Country code.
        public let country: String?
        /// IP address.
        public let ipAddress: String
        public init(ipAddress: String, city: String? = nil, region: String? = nil, country: String? = nil) {
            nullableValidator(stringValidator())(city)
            self.city = city
            nullableValidator(stringValidator())(region)
            self.region = region
            nullableValidator(stringValidator())(country)
            self.country = country
            stringValidator()(ipAddress)
            self.ipAddress = ipAddress
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GeoLocationLogInfoSerializer().serialize(self)))"
        }
    }
    open class GeoLocationLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GeoLocationLogInfo) -> JSON {
            let output = [ 
            "ip_address": Serialization._StringSerializer.serialize(value.ipAddress),
            "city": NullableSerializer(Serialization._StringSerializer).serialize(value.city),
            "region": NullableSerializer(Serialization._StringSerializer).serialize(value.region),
            "country": NullableSerializer(Serialization._StringSerializer).serialize(value.country),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GeoLocationLogInfo {
            switch json {
                case .dictionary(let dict):
                    let ipAddress = Serialization._StringSerializer.deserialize(dict["ip_address"] ?? .null)
                    let city = NullableSerializer(Serialization._StringSerializer).deserialize(dict["city"] ?? .null)
                    let region = NullableSerializer(Serialization._StringSerializer).deserialize(dict["region"] ?? .null)
                    let country = NullableSerializer(Serialization._StringSerializer).deserialize(dict["country"] ?? .null)
                    return GeoLocationLogInfo(ipAddress: ipAddress, city: city, region: region, country: country)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTeamEventsArg struct
    open class GetTeamEventsArg: CustomStringConvertible {
        /// The maximal number of results to return per call. Note that some calls may not return limit number of
        /// events, and may even return no events, even with `has_more` set to true. In this case, callers should fetch
        /// again using getEventsContinue.
        public let limit: UInt32
        /// Filter the events by account ID. Return only events with this account_id as either Actor, Context, or
        /// Participants.
        public let accountId: String?
        /// Filter by time range.
        public let time: TeamCommon.TimeRange?
        /// Filter the returned events to a single category. Note that category shouldn't be provided together with
        /// event_type.
        public let category: TeamLog.EventCategory?
        /// Filter the returned events to a single event type. Note that event_type shouldn't be provided together with
        /// category.
        public let eventType: TeamLog.EventTypeArg?
        public init(limit: UInt32 = 1000, accountId: String? = nil, time: TeamCommon.TimeRange? = nil, category: TeamLog.EventCategory? = nil, eventType: TeamLog.EventTypeArg? = nil) {
            comparableValidator(minValue: 1, maxValue: 1000)(limit)
            self.limit = limit
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(accountId)
            self.accountId = accountId
            self.time = time
            self.category = category
            self.eventType = eventType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsArgSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsArg) -> JSON {
            let output = [ 
            "limit": Serialization._UInt32Serializer.serialize(value.limit),
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "time": NullableSerializer(TeamCommon.TimeRangeSerializer()).serialize(value.time),
            "category": NullableSerializer(TeamLog.EventCategorySerializer()).serialize(value.category),
            "event_type": NullableSerializer(TeamLog.EventTypeArgSerializer()).serialize(value.eventType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsArg {
            switch json {
                case .dictionary(let dict):
                    let limit = Serialization._UInt32Serializer.deserialize(dict["limit"] ?? .number(1000))
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let time = NullableSerializer(TeamCommon.TimeRangeSerializer()).deserialize(dict["time"] ?? .null)
                    let category = NullableSerializer(TeamLog.EventCategorySerializer()).deserialize(dict["category"] ?? .null)
                    let eventType = NullableSerializer(TeamLog.EventTypeArgSerializer()).deserialize(dict["event_type"] ?? .null)
                    return GetTeamEventsArg(limit: limit, accountId: accountId, time: time, category: category, eventType: eventType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTeamEventsContinueArg struct
    open class GetTeamEventsContinueArg: CustomStringConvertible {
        /// Indicates from what point to get the next set of events.
        public let cursor: String
        public init(cursor: String) {
            stringValidator()(cursor)
            self.cursor = cursor
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsContinueArgSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsContinueArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsContinueArg) -> JSON {
            let output = [ 
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsContinueArg {
            switch json {
                case .dictionary(let dict):
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .null)
                    return GetTeamEventsContinueArg(cursor: cursor)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Errors that can be raised when calling getEventsContinue.
    public enum GetTeamEventsContinueError: CustomStringConvertible {
        /// Bad cursor.
        case badCursor
        /// Cursors are intended to be used quickly. Individual cursor values are normally valid for days, but in rare
        /// cases may be reset sooner. Cursor reset errors should be handled by fetching a new cursor from getEvents.
        /// The associated value is the approximate timestamp of the most recent event returned by the cursor. This
        /// should be used as a resumption point when calling getEvents to obtain a new cursor.
        case reset(Date)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsContinueErrorSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsContinueErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsContinueError) -> JSON {
            switch value {
                case .badCursor:
                    var d = [String: JSON]()
                    d[".tag"] = .str("bad_cursor")
                    return .dictionary(d)
                case .reset(let arg):
                    var d = ["reset": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(arg)]
                    d[".tag"] = .str("reset")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsContinueError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "bad_cursor":
                            return GetTeamEventsContinueError.badCursor
                        case "reset":
                            let v = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(d["reset"] ?? .null)
                            return GetTeamEventsContinueError.reset(v)
                        case "other":
                            return GetTeamEventsContinueError.other
                        default:
                            return GetTeamEventsContinueError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Errors that can be raised when calling getEvents.
    public enum GetTeamEventsError: CustomStringConvertible {
        /// No user found matching the provided account_id.
        case accountIdNotFound
        /// Invalid time range.
        case invalidTimeRange
        /// Invalid filters. Do not specify both event_type and category parameters for the same call.
        case invalidFilters
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsErrorSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsError) -> JSON {
            switch value {
                case .accountIdNotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_id_not_found")
                    return .dictionary(d)
                case .invalidTimeRange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invalid_time_range")
                    return .dictionary(d)
                case .invalidFilters:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invalid_filters")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "account_id_not_found":
                            return GetTeamEventsError.accountIdNotFound
                        case "invalid_time_range":
                            return GetTeamEventsError.invalidTimeRange
                        case "invalid_filters":
                            return GetTeamEventsError.invalidFilters
                        case "other":
                            return GetTeamEventsError.other
                        default:
                            return GetTeamEventsError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The GetTeamEventsResult struct
    open class GetTeamEventsResult: CustomStringConvertible {
        /// List of events. Note that events are not guaranteed to be sorted by their timestamp value.
        public let events: Array<TeamLog.TeamEvent>
        /// Pass the cursor into getEventsContinue to obtain additional events. The value of cursor may change for each
        /// response from getEventsContinue, regardless of the value of hasMore; older cursor strings may expire. Thus,
        /// callers should ensure that they update their cursor based on the latest value of cursor after each call, and
        /// poll regularly if they wish to poll for new events. Callers should handle reset exceptions for expired
        /// cursors.
        public let cursor: String
        /// Is true if there may be additional events that have not been returned yet. An additional call to
        /// getEventsContinue can retrieve them. Note that hasMore may be true, even if events is empty.
        public let hasMore: Bool
        public init(events: Array<TeamLog.TeamEvent>, cursor: String, hasMore: Bool) {
            self.events = events
            stringValidator()(cursor)
            self.cursor = cursor
            self.hasMore = hasMore
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsResultSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsResultSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsResult) -> JSON {
            let output = [ 
            "events": ArraySerializer(TeamLog.TeamEventSerializer()).serialize(value.events),
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            "has_more": Serialization._BoolSerializer.serialize(value.hasMore),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsResult {
            switch json {
                case .dictionary(let dict):
                    let events = ArraySerializer(TeamLog.TeamEventSerializer()).deserialize(dict["events"] ?? .null)
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .null)
                    let hasMore = Serialization._BoolSerializer.deserialize(dict["has_more"] ?? .null)
                    return GetTeamEventsResult(events: events, cursor: cursor, hasMore: hasMore)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled Google single sign-on for team.
    open class GoogleSsoChangePolicyDetails: CustomStringConvertible {
        /// New Google single sign-on policy.
        public let newValue: TeamLog.GoogleSsoPolicy
        /// Previous Google single sign-on policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.GoogleSsoPolicy?
        public init(newValue: TeamLog.GoogleSsoPolicy, previousValue: TeamLog.GoogleSsoPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GoogleSsoChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class GoogleSsoChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GoogleSsoChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.GoogleSsoPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.GoogleSsoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GoogleSsoChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.GoogleSsoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.GoogleSsoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GoogleSsoChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GoogleSsoChangePolicyType struct
    open class GoogleSsoChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GoogleSsoChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class GoogleSsoChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GoogleSsoChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GoogleSsoChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GoogleSsoChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Google SSO policy
    public enum GoogleSsoPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GoogleSsoPolicySerializer().serialize(self)))"
        }
    }
    open class GoogleSsoPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GoogleSsoPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GoogleSsoPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return GoogleSsoPolicy.disabled
                        case "enabled":
                            return GoogleSsoPolicy.enabled
                        case "other":
                            return GoogleSsoPolicy.other
                        default:
                            return GoogleSsoPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Couldn't add a folder to a policy.
    open class GovernancePolicyAddFolderFailedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Folder.
        public let folder: String
        /// Reason.
        public let reason: String?
        public init(governancePolicyId: String, name: String, folder: String, policyType: TeamLog.PolicyType? = nil, reason: String? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            stringValidator()(folder)
            self.folder = folder
            nullableValidator(stringValidator())(reason)
            self.reason = reason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyAddFolderFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyAddFolderFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyAddFolderFailedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "folder": Serialization._StringSerializer.serialize(value.folder),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            "reason": NullableSerializer(Serialization._StringSerializer).serialize(value.reason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyAddFolderFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let folder = Serialization._StringSerializer.deserialize(dict["folder"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    let reason = NullableSerializer(Serialization._StringSerializer).deserialize(dict["reason"] ?? .null)
                    return GovernancePolicyAddFolderFailedDetails(governancePolicyId: governancePolicyId, name: name, folder: folder, policyType: policyType, reason: reason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyAddFolderFailedType struct
    open class GovernancePolicyAddFolderFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyAddFolderFailedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyAddFolderFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyAddFolderFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyAddFolderFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyAddFolderFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added folders to policy.
    open class GovernancePolicyAddFoldersDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Folders.
        public let folders: Array<String>?
        public init(governancePolicyId: String, name: String, policyType: TeamLog.PolicyType? = nil, folders: Array<String>? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            nullableValidator(arrayValidator(itemValidator: stringValidator()))(folders)
            self.folders = folders
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyAddFoldersDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyAddFoldersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyAddFoldersDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            "folders": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.folders),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyAddFoldersDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    let folders = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["folders"] ?? .null)
                    return GovernancePolicyAddFoldersDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType, folders: folders)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyAddFoldersType struct
    open class GovernancePolicyAddFoldersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyAddFoldersTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyAddFoldersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyAddFoldersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyAddFoldersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyAddFoldersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Content disposed.
    open class GovernancePolicyContentDisposedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Disposition type.
        public let dispositionType: TeamLog.DispositionActionType
        public init(governancePolicyId: String, name: String, dispositionType: TeamLog.DispositionActionType, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            self.dispositionType = dispositionType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyContentDisposedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyContentDisposedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyContentDisposedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "disposition_type": TeamLog.DispositionActionTypeSerializer().serialize(value.dispositionType),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyContentDisposedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let dispositionType = TeamLog.DispositionActionTypeSerializer().deserialize(dict["disposition_type"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyContentDisposedDetails(governancePolicyId: governancePolicyId, name: name, dispositionType: dispositionType, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyContentDisposedType struct
    open class GovernancePolicyContentDisposedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyContentDisposedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyContentDisposedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyContentDisposedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyContentDisposedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyContentDisposedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Activated a new policy.
    open class GovernancePolicyCreateDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Duration in days.
        public let duration: TeamLog.DurationLogInfo
        /// Folders.
        public let folders: Array<String>?
        public init(governancePolicyId: String, name: String, duration: TeamLog.DurationLogInfo, policyType: TeamLog.PolicyType? = nil, folders: Array<String>? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            self.duration = duration
            nullableValidator(arrayValidator(itemValidator: stringValidator()))(folders)
            self.folders = folders
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyCreateDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "duration": TeamLog.DurationLogInfoSerializer().serialize(value.duration),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            "folders": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.folders),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let duration = TeamLog.DurationLogInfoSerializer().deserialize(dict["duration"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    let folders = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["folders"] ?? .null)
                    return GovernancePolicyCreateDetails(governancePolicyId: governancePolicyId, name: name, duration: duration, policyType: policyType, folders: folders)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyCreateType struct
    open class GovernancePolicyCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyCreateTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted a policy.
    open class GovernancePolicyDeleteDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        public init(governancePolicyId: String, name: String, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyDeleteDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyDeleteDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyDeleteType struct
    open class GovernancePolicyDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited policy.
    open class GovernancePolicyEditDetailsDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Attribute.
        public let attribute: String
        /// From.
        public let previousValue: String
        /// To.
        public let newValue: String
        public init(governancePolicyId: String, name: String, attribute: String, previousValue: String, newValue: String, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            stringValidator()(attribute)
            self.attribute = attribute
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyEditDetailsDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyEditDetailsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyEditDetailsDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "attribute": Serialization._StringSerializer.serialize(value.attribute),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyEditDetailsDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let attribute = Serialization._StringSerializer.deserialize(dict["attribute"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyEditDetailsDetails(governancePolicyId: governancePolicyId, name: name, attribute: attribute, previousValue: previousValue, newValue: newValue, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyEditDetailsType struct
    open class GovernancePolicyEditDetailsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyEditDetailsTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyEditDetailsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyEditDetailsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyEditDetailsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyEditDetailsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed policy duration.
    open class GovernancePolicyEditDurationDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// From.
        public let previousValue: TeamLog.DurationLogInfo
        /// To.
        public let newValue: TeamLog.DurationLogInfo
        public init(governancePolicyId: String, name: String, previousValue: TeamLog.DurationLogInfo, newValue: TeamLog.DurationLogInfo, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyEditDurationDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyEditDurationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyEditDurationDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "previous_value": TeamLog.DurationLogInfoSerializer().serialize(value.previousValue),
            "new_value": TeamLog.DurationLogInfoSerializer().serialize(value.newValue),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyEditDurationDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let previousValue = TeamLog.DurationLogInfoSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.DurationLogInfoSerializer().deserialize(dict["new_value"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyEditDurationDetails(governancePolicyId: governancePolicyId, name: name, previousValue: previousValue, newValue: newValue, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyEditDurationType struct
    open class GovernancePolicyEditDurationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyEditDurationTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyEditDurationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyEditDurationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyEditDurationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyEditDurationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a policy download.
    open class GovernancePolicyExportCreatedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Export name.
        public let exportName: String
        public init(governancePolicyId: String, name: String, exportName: String, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            stringValidator()(exportName)
            self.exportName = exportName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyExportCreatedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyExportCreatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyExportCreatedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyExportCreatedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyExportCreatedDetails(governancePolicyId: governancePolicyId, name: name, exportName: exportName, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyExportCreatedType struct
    open class GovernancePolicyExportCreatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyExportCreatedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyExportCreatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyExportCreatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyExportCreatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyExportCreatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a policy download.
    open class GovernancePolicyExportRemovedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Export name.
        public let exportName: String
        public init(governancePolicyId: String, name: String, exportName: String, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            stringValidator()(exportName)
            self.exportName = exportName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyExportRemovedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyExportRemovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyExportRemovedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyExportRemovedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyExportRemovedDetails(governancePolicyId: governancePolicyId, name: name, exportName: exportName, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyExportRemovedType struct
    open class GovernancePolicyExportRemovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyExportRemovedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyExportRemovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyExportRemovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyExportRemovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyExportRemovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed folders from policy.
    open class GovernancePolicyRemoveFoldersDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Folders.
        public let folders: Array<String>?
        /// Reason.
        public let reason: String?
        public init(governancePolicyId: String, name: String, policyType: TeamLog.PolicyType? = nil, folders: Array<String>? = nil, reason: String? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            nullableValidator(arrayValidator(itemValidator: stringValidator()))(folders)
            self.folders = folders
            nullableValidator(stringValidator())(reason)
            self.reason = reason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyRemoveFoldersDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyRemoveFoldersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyRemoveFoldersDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            "folders": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.folders),
            "reason": NullableSerializer(Serialization._StringSerializer).serialize(value.reason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyRemoveFoldersDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    let folders = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["folders"] ?? .null)
                    let reason = NullableSerializer(Serialization._StringSerializer).deserialize(dict["reason"] ?? .null)
                    return GovernancePolicyRemoveFoldersDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType, folders: folders, reason: reason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyRemoveFoldersType struct
    open class GovernancePolicyRemoveFoldersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyRemoveFoldersTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyRemoveFoldersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyRemoveFoldersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyRemoveFoldersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyRemoveFoldersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a summary report for a policy.
    open class GovernancePolicyReportCreatedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        public init(governancePolicyId: String, name: String, policyType: TeamLog.PolicyType? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyReportCreatedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyReportCreatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyReportCreatedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyReportCreatedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    return GovernancePolicyReportCreatedDetails(governancePolicyId: governancePolicyId, name: name, policyType: policyType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyReportCreatedType struct
    open class GovernancePolicyReportCreatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyReportCreatedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyReportCreatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyReportCreatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyReportCreatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyReportCreatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded content from a policy.
    open class GovernancePolicyZipPartDownloadedDetails: CustomStringConvertible {
        /// Policy ID.
        public let governancePolicyId: String
        /// Policy name.
        public let name: String
        /// Policy type.
        public let policyType: TeamLog.PolicyType?
        /// Export name.
        public let exportName: String
        /// Part.
        public let part: String?
        public init(governancePolicyId: String, name: String, exportName: String, policyType: TeamLog.PolicyType? = nil, part: String? = nil) {
            stringValidator()(governancePolicyId)
            self.governancePolicyId = governancePolicyId
            stringValidator()(name)
            self.name = name
            self.policyType = policyType
            stringValidator()(exportName)
            self.exportName = exportName
            nullableValidator(stringValidator())(part)
            self.part = part
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyZipPartDownloadedDetailsSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyZipPartDownloadedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyZipPartDownloadedDetails) -> JSON {
            let output = [ 
            "governance_policy_id": Serialization._StringSerializer.serialize(value.governancePolicyId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            "policy_type": NullableSerializer(TeamLog.PolicyTypeSerializer()).serialize(value.policyType),
            "part": NullableSerializer(Serialization._StringSerializer).serialize(value.part),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyZipPartDownloadedDetails {
            switch json {
                case .dictionary(let dict):
                    let governancePolicyId = Serialization._StringSerializer.deserialize(dict["governance_policy_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    let policyType = NullableSerializer(TeamLog.PolicyTypeSerializer()).deserialize(dict["policy_type"] ?? .null)
                    let part = NullableSerializer(Serialization._StringSerializer).deserialize(dict["part"] ?? .null)
                    return GovernancePolicyZipPartDownloadedDetails(governancePolicyId: governancePolicyId, name: name, exportName: exportName, policyType: policyType, part: part)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GovernancePolicyZipPartDownloadedType struct
    open class GovernancePolicyZipPartDownloadedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GovernancePolicyZipPartDownloadedTypeSerializer().serialize(self)))"
        }
    }
    open class GovernancePolicyZipPartDownloadedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GovernancePolicyZipPartDownloadedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GovernancePolicyZipPartDownloadedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GovernancePolicyZipPartDownloadedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added external ID for group.
    open class GroupAddExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        public let newValue: String
        public init(newValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupAddExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return GroupAddExternalIdDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupAddExternalIdType struct
    open class GroupAddExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class GroupAddExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupAddExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team members to group.
    open class GroupAddMemberDetails: CustomStringConvertible {
        /// Is group owner.
        public let isGroupOwner: Bool
        public init(isGroupOwner: Bool) {
            self.isGroupOwner = isGroupOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddMemberDetails) -> JSON {
            let output = [ 
            "is_group_owner": Serialization._BoolSerializer.serialize(value.isGroupOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let isGroupOwner = Serialization._BoolSerializer.deserialize(dict["is_group_owner"] ?? .null)
                    return GroupAddMemberDetails(isGroupOwner: isGroupOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupAddMemberType struct
    open class GroupAddMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddMemberTypeSerializer().serialize(self)))"
        }
    }
    open class GroupAddMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupAddMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed external ID for group.
    open class GroupChangeExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        public let newValue: String
        /// Old external id.
        public let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return GroupChangeExternalIdDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupChangeExternalIdType struct
    open class GroupChangeExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class GroupChangeExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupChangeExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed group management type.
    open class GroupChangeManagementTypeDetails: CustomStringConvertible {
        /// New group management type.
        public let newValue: TeamCommon.GroupManagementType
        /// Previous group management type. Might be missing due to historical data gap.
        public let previousValue: TeamCommon.GroupManagementType?
        public init(newValue: TeamCommon.GroupManagementType, previousValue: TeamCommon.GroupManagementType? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeManagementTypeDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeManagementTypeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeManagementTypeDetails) -> JSON {
            let output = [ 
            "new_value": TeamCommon.GroupManagementTypeSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamCommon.GroupManagementTypeSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeManagementTypeDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamCommon.GroupManagementTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamCommon.GroupManagementTypeSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GroupChangeManagementTypeDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupChangeManagementTypeType struct
    open class GroupChangeManagementTypeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeManagementTypeTypeSerializer().serialize(self)))"
        }
    }
    open class GroupChangeManagementTypeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeManagementTypeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeManagementTypeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupChangeManagementTypeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed manager permissions of group member.
    open class GroupChangeMemberRoleDetails: CustomStringConvertible {
        /// Is group owner.
        public let isGroupOwner: Bool
        public init(isGroupOwner: Bool) {
            self.isGroupOwner = isGroupOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "is_group_owner": Serialization._BoolSerializer.serialize(value.isGroupOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let isGroupOwner = Serialization._BoolSerializer.deserialize(dict["is_group_owner"] ?? .null)
                    return GroupChangeMemberRoleDetails(isGroupOwner: isGroupOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupChangeMemberRoleType struct
    open class GroupChangeMemberRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeMemberRoleTypeSerializer().serialize(self)))"
        }
    }
    open class GroupChangeMemberRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeMemberRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeMemberRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupChangeMemberRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created group.
    open class GroupCreateDetails: CustomStringConvertible {
        /// Is company managed group.
        public let isCompanyManaged: Bool?
        /// Group join policy.
        public let joinPolicy: TeamLog.GroupJoinPolicy?
        public init(isCompanyManaged: Bool? = nil, joinPolicy: TeamLog.GroupJoinPolicy? = nil) {
            self.isCompanyManaged = isCompanyManaged
            self.joinPolicy = joinPolicy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupCreateDetails) -> JSON {
            let output = [ 
            "is_company_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isCompanyManaged),
            "join_policy": NullableSerializer(TeamLog.GroupJoinPolicySerializer()).serialize(value.joinPolicy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let isCompanyManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_company_managed"] ?? .null)
                    let joinPolicy = NullableSerializer(TeamLog.GroupJoinPolicySerializer()).deserialize(dict["join_policy"] ?? .null)
                    return GroupCreateDetails(isCompanyManaged: isCompanyManaged, joinPolicy: joinPolicy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupCreateType struct
    open class GroupCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupCreateTypeSerializer().serialize(self)))"
        }
    }
    open class GroupCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted group.
    open class GroupDeleteDetails: CustomStringConvertible {
        /// Is company managed group.
        public let isCompanyManaged: Bool?
        public init(isCompanyManaged: Bool? = nil) {
            self.isCompanyManaged = isCompanyManaged
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupDeleteDetails) -> JSON {
            let output = [ 
            "is_company_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isCompanyManaged),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let isCompanyManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_company_managed"] ?? .null)
                    return GroupDeleteDetails(isCompanyManaged: isCompanyManaged)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupDeleteType struct
    open class GroupDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class GroupDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Updated group.
    open class GroupDescriptionUpdatedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupDescriptionUpdatedDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupDescriptionUpdatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupDescriptionUpdatedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupDescriptionUpdatedDetails {
            switch json {
                case .dictionary(_):
                    return GroupDescriptionUpdatedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupDescriptionUpdatedType struct
    open class GroupDescriptionUpdatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupDescriptionUpdatedTypeSerializer().serialize(self)))"
        }
    }
    open class GroupDescriptionUpdatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupDescriptionUpdatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupDescriptionUpdatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupDescriptionUpdatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupJoinPolicy union
    public enum GroupJoinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case open
        /// An unspecified error.
        case requestToJoin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupJoinPolicySerializer().serialize(self)))"
        }
    }
    open class GroupJoinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupJoinPolicy) -> JSON {
            switch value {
                case .open:
                    var d = [String: JSON]()
                    d[".tag"] = .str("open")
                    return .dictionary(d)
                case .requestToJoin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("request_to_join")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GroupJoinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "open":
                            return GroupJoinPolicy.open
                        case "request_to_join":
                            return GroupJoinPolicy.requestToJoin
                        case "other":
                            return GroupJoinPolicy.other
                        default:
                            return GroupJoinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Updated group join policy.
    open class GroupJoinPolicyUpdatedDetails: CustomStringConvertible {
        /// Is company managed group.
        public let isCompanyManaged: Bool?
        /// Group join policy.
        public let joinPolicy: TeamLog.GroupJoinPolicy?
        public init(isCompanyManaged: Bool? = nil, joinPolicy: TeamLog.GroupJoinPolicy? = nil) {
            self.isCompanyManaged = isCompanyManaged
            self.joinPolicy = joinPolicy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupJoinPolicyUpdatedDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupJoinPolicyUpdatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupJoinPolicyUpdatedDetails) -> JSON {
            let output = [ 
            "is_company_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isCompanyManaged),
            "join_policy": NullableSerializer(TeamLog.GroupJoinPolicySerializer()).serialize(value.joinPolicy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupJoinPolicyUpdatedDetails {
            switch json {
                case .dictionary(let dict):
                    let isCompanyManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_company_managed"] ?? .null)
                    let joinPolicy = NullableSerializer(TeamLog.GroupJoinPolicySerializer()).deserialize(dict["join_policy"] ?? .null)
                    return GroupJoinPolicyUpdatedDetails(isCompanyManaged: isCompanyManaged, joinPolicy: joinPolicy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupJoinPolicyUpdatedType struct
    open class GroupJoinPolicyUpdatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupJoinPolicyUpdatedTypeSerializer().serialize(self)))"
        }
    }
    open class GroupJoinPolicyUpdatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupJoinPolicyUpdatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupJoinPolicyUpdatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupJoinPolicyUpdatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Group's logged information.
    open class GroupLogInfo: CustomStringConvertible {
        /// The unique id of this group.
        public let groupId: String?
        /// The name of this group.
        public let displayName: String
        /// External group ID.
        public let externalId: String?
        public init(displayName: String, groupId: String? = nil, externalId: String? = nil) {
            nullableValidator(stringValidator())(groupId)
            self.groupId = groupId
            stringValidator()(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator())(externalId)
            self.externalId = externalId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupLogInfoSerializer().serialize(self)))"
        }
    }
    open class GroupLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupLogInfo) -> JSON {
            let output = [ 
            "display_name": Serialization._StringSerializer.serialize(value.displayName),
            "group_id": NullableSerializer(Serialization._StringSerializer).serialize(value.groupId),
            "external_id": NullableSerializer(Serialization._StringSerializer).serialize(value.externalId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupLogInfo {
            switch json {
                case .dictionary(let dict):
                    let displayName = Serialization._StringSerializer.deserialize(dict["display_name"] ?? .null)
                    let groupId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["group_id"] ?? .null)
                    let externalId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["external_id"] ?? .null)
                    return GroupLogInfo(displayName: displayName, groupId: groupId, externalId: externalId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Moved group.
    open class GroupMovedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupMovedDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupMovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupMovedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupMovedDetails {
            switch json {
                case .dictionary(_):
                    return GroupMovedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupMovedType struct
    open class GroupMovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupMovedTypeSerializer().serialize(self)))"
        }
    }
    open class GroupMovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupMovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupMovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupMovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed external ID for group.
    open class GroupRemoveExternalIdDetails: CustomStringConvertible {
        /// Old external id.
        public let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveExternalIdDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return GroupRemoveExternalIdDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupRemoveExternalIdType struct
    open class GroupRemoveExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupRemoveExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed team members from group.
    open class GroupRemoveMemberDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveMemberDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveMemberDetails {
            switch json {
                case .dictionary(_):
                    return GroupRemoveMemberDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupRemoveMemberType struct
    open class GroupRemoveMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveMemberTypeSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupRemoveMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed group.
    open class GroupRenameDetails: CustomStringConvertible {
        /// Previous display name.
        public let previousValue: String
        /// New display name.
        public let newValue: String
        public init(previousValue: String, newValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRenameDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return GroupRenameDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupRenameType struct
    open class GroupRenameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRenameTypeSerializer().serialize(self)))"
        }
    }
    open class GroupRenameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRenameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRenameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupRenameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can create groups.
    open class GroupUserManagementChangePolicyDetails: CustomStringConvertible {
        /// New group users management policy.
        public let newValue: TeamPolicies.GroupCreation
        /// Previous group users management policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.GroupCreation?
        public init(newValue: TeamPolicies.GroupCreation, previousValue: TeamPolicies.GroupCreation? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupUserManagementChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupUserManagementChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupUserManagementChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.GroupCreationSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.GroupCreationSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupUserManagementChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.GroupCreationSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.GroupCreationSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GroupUserManagementChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupUserManagementChangePolicyType struct
    open class GroupUserManagementChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupUserManagementChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class GroupUserManagementChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupUserManagementChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupUserManagementChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GroupUserManagementChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed guest team admin status.
    open class GuestAdminChangeStatusDetails: CustomStringConvertible {
        /// True for guest, false for host.
        public let isGuest: Bool
        /// The name of the guest team.
        public let guestTeamName: String?
        /// The name of the host team.
        public let hostTeamName: String?
        /// Previous request state.
        public let previousValue: TeamLog.TrustedTeamsRequestState
        /// New request state.
        public let newValue: TeamLog.TrustedTeamsRequestState
        /// Action details.
        public let actionDetails: TeamLog.TrustedTeamsRequestAction
        public init(isGuest: Bool, previousValue: TeamLog.TrustedTeamsRequestState, newValue: TeamLog.TrustedTeamsRequestState, actionDetails: TeamLog.TrustedTeamsRequestAction, guestTeamName: String? = nil, hostTeamName: String? = nil) {
            self.isGuest = isGuest
            nullableValidator(stringValidator())(guestTeamName)
            self.guestTeamName = guestTeamName
            nullableValidator(stringValidator())(hostTeamName)
            self.hostTeamName = hostTeamName
            self.previousValue = previousValue
            self.newValue = newValue
            self.actionDetails = actionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class GuestAdminChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminChangeStatusDetails) -> JSON {
            let output = [ 
            "is_guest": Serialization._BoolSerializer.serialize(value.isGuest),
            "previous_value": TeamLog.TrustedTeamsRequestStateSerializer().serialize(value.previousValue),
            "new_value": TeamLog.TrustedTeamsRequestStateSerializer().serialize(value.newValue),
            "action_details": TeamLog.TrustedTeamsRequestActionSerializer().serialize(value.actionDetails),
            "guest_team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.guestTeamName),
            "host_team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.hostTeamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let isGuest = Serialization._BoolSerializer.deserialize(dict["is_guest"] ?? .null)
                    let previousValue = TeamLog.TrustedTeamsRequestStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.TrustedTeamsRequestStateSerializer().deserialize(dict["new_value"] ?? .null)
                    let actionDetails = TeamLog.TrustedTeamsRequestActionSerializer().deserialize(dict["action_details"] ?? .null)
                    let guestTeamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["guest_team_name"] ?? .null)
                    let hostTeamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["host_team_name"] ?? .null)
                    return GuestAdminChangeStatusDetails(isGuest: isGuest, previousValue: previousValue, newValue: newValue, actionDetails: actionDetails, guestTeamName: guestTeamName, hostTeamName: hostTeamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GuestAdminChangeStatusType struct
    open class GuestAdminChangeStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminChangeStatusTypeSerializer().serialize(self)))"
        }
    }
    open class GuestAdminChangeStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminChangeStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminChangeStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GuestAdminChangeStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started trusted team admin session.
    open class GuestAdminSignedInViaTrustedTeamsDetails: CustomStringConvertible {
        /// Host team name.
        public let teamName: String?
        /// Trusted team name.
        public let trustedTeamName: String?
        public init(teamName: String? = nil, trustedTeamName: String? = nil) {
            nullableValidator(stringValidator())(teamName)
            self.teamName = teamName
            nullableValidator(stringValidator())(trustedTeamName)
            self.trustedTeamName = trustedTeamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminSignedInViaTrustedTeamsDetailsSerializer().serialize(self)))"
        }
    }
    open class GuestAdminSignedInViaTrustedTeamsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminSignedInViaTrustedTeamsDetails) -> JSON {
            let output = [ 
            "team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.teamName),
            "trusted_team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.trustedTeamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminSignedInViaTrustedTeamsDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_name"] ?? .null)
                    let trustedTeamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["trusted_team_name"] ?? .null)
                    return GuestAdminSignedInViaTrustedTeamsDetails(teamName: teamName, trustedTeamName: trustedTeamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GuestAdminSignedInViaTrustedTeamsType struct
    open class GuestAdminSignedInViaTrustedTeamsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminSignedInViaTrustedTeamsTypeSerializer().serialize(self)))"
        }
    }
    open class GuestAdminSignedInViaTrustedTeamsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminSignedInViaTrustedTeamsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminSignedInViaTrustedTeamsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GuestAdminSignedInViaTrustedTeamsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended trusted team admin session.
    open class GuestAdminSignedOutViaTrustedTeamsDetails: CustomStringConvertible {
        /// Host team name.
        public let teamName: String?
        /// Trusted team name.
        public let trustedTeamName: String?
        public init(teamName: String? = nil, trustedTeamName: String? = nil) {
            nullableValidator(stringValidator())(teamName)
            self.teamName = teamName
            nullableValidator(stringValidator())(trustedTeamName)
            self.trustedTeamName = trustedTeamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminSignedOutViaTrustedTeamsDetailsSerializer().serialize(self)))"
        }
    }
    open class GuestAdminSignedOutViaTrustedTeamsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminSignedOutViaTrustedTeamsDetails) -> JSON {
            let output = [ 
            "team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.teamName),
            "trusted_team_name": NullableSerializer(Serialization._StringSerializer).serialize(value.trustedTeamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminSignedOutViaTrustedTeamsDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_name"] ?? .null)
                    let trustedTeamName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["trusted_team_name"] ?? .null)
                    return GuestAdminSignedOutViaTrustedTeamsDetails(teamName: teamName, trustedTeamName: trustedTeamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GuestAdminSignedOutViaTrustedTeamsType struct
    open class GuestAdminSignedOutViaTrustedTeamsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GuestAdminSignedOutViaTrustedTeamsTypeSerializer().serialize(self)))"
        }
    }
    open class GuestAdminSignedOutViaTrustedTeamsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GuestAdminSignedOutViaTrustedTeamsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GuestAdminSignedOutViaTrustedTeamsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return GuestAdminSignedOutViaTrustedTeamsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The IdentifierType union
    public enum IdentifierType: CustomStringConvertible {
        /// An unspecified error.
        case email
        /// An unspecified error.
        case facebookProfileName
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IdentifierTypeSerializer().serialize(self)))"
        }
    }
    open class IdentifierTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IdentifierType) -> JSON {
            switch value {
                case .email:
                    var d = [String: JSON]()
                    d[".tag"] = .str("email")
                    return .dictionary(d)
                case .facebookProfileName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("facebook_profile_name")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> IdentifierType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "email":
                            return IdentifierType.email
                        case "facebook_profile_name":
                            return IdentifierType.facebookProfileName
                        case "other":
                            return IdentifierType.other
                        default:
                            return IdentifierType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Connected integration for member.
    open class IntegrationConnectedDetails: CustomStringConvertible {
        /// Name of the third-party integration.
        public let integrationName: String
        public init(integrationName: String) {
            stringValidator()(integrationName)
            self.integrationName = integrationName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationConnectedDetailsSerializer().serialize(self)))"
        }
    }
    open class IntegrationConnectedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationConnectedDetails) -> JSON {
            let output = [ 
            "integration_name": Serialization._StringSerializer.serialize(value.integrationName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationConnectedDetails {
            switch json {
                case .dictionary(let dict):
                    let integrationName = Serialization._StringSerializer.deserialize(dict["integration_name"] ?? .null)
                    return IntegrationConnectedDetails(integrationName: integrationName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The IntegrationConnectedType struct
    open class IntegrationConnectedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationConnectedTypeSerializer().serialize(self)))"
        }
    }
    open class IntegrationConnectedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationConnectedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationConnectedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return IntegrationConnectedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disconnected integration for member.
    open class IntegrationDisconnectedDetails: CustomStringConvertible {
        /// Name of the third-party integration.
        public let integrationName: String
        public init(integrationName: String) {
            stringValidator()(integrationName)
            self.integrationName = integrationName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationDisconnectedDetailsSerializer().serialize(self)))"
        }
    }
    open class IntegrationDisconnectedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationDisconnectedDetails) -> JSON {
            let output = [ 
            "integration_name": Serialization._StringSerializer.serialize(value.integrationName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationDisconnectedDetails {
            switch json {
                case .dictionary(let dict):
                    let integrationName = Serialization._StringSerializer.deserialize(dict["integration_name"] ?? .null)
                    return IntegrationDisconnectedDetails(integrationName: integrationName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The IntegrationDisconnectedType struct
    open class IntegrationDisconnectedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationDisconnectedTypeSerializer().serialize(self)))"
        }
    }
    open class IntegrationDisconnectedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationDisconnectedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationDisconnectedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return IntegrationDisconnectedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether a service integration is enabled for the team.
    public enum IntegrationPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationPolicySerializer().serialize(self)))"
        }
    }
    open class IntegrationPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> IntegrationPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return IntegrationPolicy.disabled
                        case "enabled":
                            return IntegrationPolicy.enabled
                        case "other":
                            return IntegrationPolicy.other
                        default:
                            return IntegrationPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed integration policy for team.
    open class IntegrationPolicyChangedDetails: CustomStringConvertible {
        /// Name of the third-party integration.
        public let integrationName: String
        /// New integration policy.
        public let newValue: TeamLog.IntegrationPolicy
        /// Previous integration policy.
        public let previousValue: TeamLog.IntegrationPolicy
        public init(integrationName: String, newValue: TeamLog.IntegrationPolicy, previousValue: TeamLog.IntegrationPolicy) {
            stringValidator()(integrationName)
            self.integrationName = integrationName
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class IntegrationPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationPolicyChangedDetails) -> JSON {
            let output = [ 
            "integration_name": Serialization._StringSerializer.serialize(value.integrationName),
            "new_value": TeamLog.IntegrationPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.IntegrationPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let integrationName = Serialization._StringSerializer.deserialize(dict["integration_name"] ?? .null)
                    let newValue = TeamLog.IntegrationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.IntegrationPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return IntegrationPolicyChangedDetails(integrationName: integrationName, newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The IntegrationPolicyChangedType struct
    open class IntegrationPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(IntegrationPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class IntegrationPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: IntegrationPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> IntegrationPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return IntegrationPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for deciding whether team admins receive email when an invitation to join the team is accepted
    public enum InviteAcceptanceEmailPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(InviteAcceptanceEmailPolicySerializer().serialize(self)))"
        }
    }
    open class InviteAcceptanceEmailPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: InviteAcceptanceEmailPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> InviteAcceptanceEmailPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return InviteAcceptanceEmailPolicy.disabled
                        case "enabled":
                            return InviteAcceptanceEmailPolicy.enabled
                        case "other":
                            return InviteAcceptanceEmailPolicy.other
                        default:
                            return InviteAcceptanceEmailPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed invite accept email policy for team.
    open class InviteAcceptanceEmailPolicyChangedDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.InviteAcceptanceEmailPolicy
        /// From.
        public let previousValue: TeamLog.InviteAcceptanceEmailPolicy
        public init(newValue: TeamLog.InviteAcceptanceEmailPolicy, previousValue: TeamLog.InviteAcceptanceEmailPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(InviteAcceptanceEmailPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class InviteAcceptanceEmailPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: InviteAcceptanceEmailPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.InviteAcceptanceEmailPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.InviteAcceptanceEmailPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> InviteAcceptanceEmailPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.InviteAcceptanceEmailPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.InviteAcceptanceEmailPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return InviteAcceptanceEmailPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The InviteAcceptanceEmailPolicyChangedType struct
    open class InviteAcceptanceEmailPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(InviteAcceptanceEmailPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class InviteAcceptanceEmailPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: InviteAcceptanceEmailPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> InviteAcceptanceEmailPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return InviteAcceptanceEmailPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The InviteMethod union
    public enum InviteMethod: CustomStringConvertible {
        /// An unspecified error.
        case autoApprove
        /// An unspecified error.
        case inviteLink
        /// An unspecified error.
        case memberInvite
        /// An unspecified error.
        case movedFromAnotherTeam
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(InviteMethodSerializer().serialize(self)))"
        }
    }
    open class InviteMethodSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: InviteMethod) -> JSON {
            switch value {
                case .autoApprove:
                    var d = [String: JSON]()
                    d[".tag"] = .str("auto_approve")
                    return .dictionary(d)
                case .inviteLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invite_link")
                    return .dictionary(d)
                case .memberInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_invite")
                    return .dictionary(d)
                case .movedFromAnotherTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("moved_from_another_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> InviteMethod {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "auto_approve":
                            return InviteMethod.autoApprove
                        case "invite_link":
                            return InviteMethod.inviteLink
                        case "member_invite":
                            return InviteMethod.memberInvite
                        case "moved_from_another_team":
                            return InviteMethod.movedFromAnotherTeam
                        case "other":
                            return InviteMethod.other
                        default:
                            return InviteMethod.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Additional information relevant when a new member joins the team.
    open class JoinTeamDetails: CustomStringConvertible {
        /// Linked applications. (Deprecated) Please use has_linked_apps boolean field instead.
        public let linkedApps: Array<TeamLog.UserLinkedAppLogInfo>
        /// Linked devices. (Deprecated) Please use has_linked_devices boolean field instead.
        public let linkedDevices: Array<TeamLog.LinkedDeviceLogInfo>
        /// Linked shared folders. (Deprecated) Please use has_linked_shared_folders boolean field instead.
        public let linkedSharedFolders: Array<TeamLog.FolderLogInfo>
        /// (Deprecated) True if the linked_apps list was truncated to the maximum supported length (50).
        public let wasLinkedAppsTruncated: Bool?
        /// (Deprecated) True if the linked_devices list was truncated to the maximum supported length (50).
        public let wasLinkedDevicesTruncated: Bool?
        /// (Deprecated) True if the linked_shared_folders list was truncated to the maximum supported length (50).
        public let wasLinkedSharedFoldersTruncated: Bool?
        /// True if the user had linked apps at event time.
        public let hasLinkedApps: Bool?
        /// True if the user had linked apps at event time.
        public let hasLinkedDevices: Bool?
        /// True if the user had linked shared folders at event time.
        public let hasLinkedSharedFolders: Bool?
        public init(linkedApps: Array<TeamLog.UserLinkedAppLogInfo>, linkedDevices: Array<TeamLog.LinkedDeviceLogInfo>, linkedSharedFolders: Array<TeamLog.FolderLogInfo>, wasLinkedAppsTruncated: Bool? = nil, wasLinkedDevicesTruncated: Bool? = nil, wasLinkedSharedFoldersTruncated: Bool? = nil, hasLinkedApps: Bool? = nil, hasLinkedDevices: Bool? = nil, hasLinkedSharedFolders: Bool? = nil) {
            self.linkedApps = linkedApps
            self.linkedDevices = linkedDevices
            self.linkedSharedFolders = linkedSharedFolders
            self.wasLinkedAppsTruncated = wasLinkedAppsTruncated
            self.wasLinkedDevicesTruncated = wasLinkedDevicesTruncated
            self.wasLinkedSharedFoldersTruncated = wasLinkedSharedFoldersTruncated
            self.hasLinkedApps = hasLinkedApps
            self.hasLinkedDevices = hasLinkedDevices
            self.hasLinkedSharedFolders = hasLinkedSharedFolders
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(JoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class JoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: JoinTeamDetails) -> JSON {
            let output = [ 
            "linked_apps": ArraySerializer(TeamLog.UserLinkedAppLogInfoSerializer()).serialize(value.linkedApps),
            "linked_devices": ArraySerializer(TeamLog.LinkedDeviceLogInfoSerializer()).serialize(value.linkedDevices),
            "linked_shared_folders": ArraySerializer(TeamLog.FolderLogInfoSerializer()).serialize(value.linkedSharedFolders),
            "was_linked_apps_truncated": NullableSerializer(Serialization._BoolSerializer).serialize(value.wasLinkedAppsTruncated),
            "was_linked_devices_truncated": NullableSerializer(Serialization._BoolSerializer).serialize(value.wasLinkedDevicesTruncated),
            "was_linked_shared_folders_truncated": NullableSerializer(Serialization._BoolSerializer).serialize(value.wasLinkedSharedFoldersTruncated),
            "has_linked_apps": NullableSerializer(Serialization._BoolSerializer).serialize(value.hasLinkedApps),
            "has_linked_devices": NullableSerializer(Serialization._BoolSerializer).serialize(value.hasLinkedDevices),
            "has_linked_shared_folders": NullableSerializer(Serialization._BoolSerializer).serialize(value.hasLinkedSharedFolders),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> JoinTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let linkedApps = ArraySerializer(TeamLog.UserLinkedAppLogInfoSerializer()).deserialize(dict["linked_apps"] ?? .null)
                    let linkedDevices = ArraySerializer(TeamLog.LinkedDeviceLogInfoSerializer()).deserialize(dict["linked_devices"] ?? .null)
                    let linkedSharedFolders = ArraySerializer(TeamLog.FolderLogInfoSerializer()).deserialize(dict["linked_shared_folders"] ?? .null)
                    let wasLinkedAppsTruncated = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["was_linked_apps_truncated"] ?? .null)
                    let wasLinkedDevicesTruncated = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["was_linked_devices_truncated"] ?? .null)
                    let wasLinkedSharedFoldersTruncated = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["was_linked_shared_folders_truncated"] ?? .null)
                    let hasLinkedApps = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["has_linked_apps"] ?? .null)
                    let hasLinkedDevices = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["has_linked_devices"] ?? .null)
                    let hasLinkedSharedFolders = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["has_linked_shared_folders"] ?? .null)
                    return JoinTeamDetails(linkedApps: linkedApps, linkedDevices: linkedDevices, linkedSharedFolders: linkedSharedFolders, wasLinkedAppsTruncated: wasLinkedAppsTruncated, wasLinkedDevicesTruncated: wasLinkedDevicesTruncated, wasLinkedSharedFoldersTruncated: wasLinkedSharedFoldersTruncated, hasLinkedApps: hasLinkedApps, hasLinkedDevices: hasLinkedDevices, hasLinkedSharedFolders: hasLinkedSharedFolders)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Label type
    public enum LabelType: CustomStringConvertible {
        /// An unspecified error.
        case personalInformation
        /// An unspecified error.
        case testOnly
        /// An unspecified error.
        case userDefinedTag
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LabelTypeSerializer().serialize(self)))"
        }
    }
    open class LabelTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LabelType) -> JSON {
            switch value {
                case .personalInformation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("personal_information")
                    return .dictionary(d)
                case .testOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("test_only")
                    return .dictionary(d)
                case .userDefinedTag:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user_defined_tag")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> LabelType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "personal_information":
                            return LabelType.personalInformation
                        case "test_only":
                            return LabelType.testOnly
                        case "user_defined_tag":
                            return LabelType.userDefinedTag
                        case "other":
                            return LabelType.other
                        default:
                            return LabelType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Information on sessions, in legacy format
    open class LegacyDeviceSessionLogInfo: TeamLog.DeviceSessionLogInfo {
        /// Session unique id.
        public let sessionInfo: TeamLog.SessionLogInfo?
        /// The device name. Might be missing due to historical data gap.
        public let displayName: String?
        /// Is device managed by emm. Might be missing due to historical data gap.
        public let isEmmManaged: Bool?
        /// Information on the hosting platform. Might be missing due to historical data gap.
        public let platform: String?
        /// The mac address of the last activity from this session. Might be missing due to historical data gap.
        public let macAddress: String?
        /// The hosting OS version. Might be missing due to historical data gap.
        public let osVersion: String?
        /// Information on the hosting device type. Might be missing due to historical data gap.
        public let deviceType: String?
        /// The Dropbox client version. Might be missing due to historical data gap.
        public let clientVersion: String?
        /// Alternative unique device session id, instead of session id field. Might be missing due to historical data
        /// gap.
        public let legacyUniqId: String?
        public init(ipAddress: String? = nil, created: Date? = nil, updated: Date? = nil, sessionInfo: TeamLog.SessionLogInfo? = nil, displayName: String? = nil, isEmmManaged: Bool? = nil, platform: String? = nil, macAddress: String? = nil, osVersion: String? = nil, deviceType: String? = nil, clientVersion: String? = nil, legacyUniqId: String? = nil) {
            self.sessionInfo = sessionInfo
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            self.isEmmManaged = isEmmManaged
            nullableValidator(stringValidator())(platform)
            self.platform = platform
            nullableValidator(stringValidator())(macAddress)
            self.macAddress = macAddress
            nullableValidator(stringValidator())(osVersion)
            self.osVersion = osVersion
            nullableValidator(stringValidator())(deviceType)
            self.deviceType = deviceType
            nullableValidator(stringValidator())(clientVersion)
            self.clientVersion = clientVersion
            nullableValidator(stringValidator())(legacyUniqId)
            self.legacyUniqId = legacyUniqId
            super.init(ipAddress: ipAddress, created: created, updated: updated)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegacyDeviceSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class LegacyDeviceSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegacyDeviceSessionLogInfo) -> JSON {
            let output = [ 
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "created": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.created),
            "updated": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.updated),
            "session_info": NullableSerializer(TeamLog.SessionLogInfoSerializer()).serialize(value.sessionInfo),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "is_emm_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isEmmManaged),
            "platform": NullableSerializer(Serialization._StringSerializer).serialize(value.platform),
            "mac_address": NullableSerializer(Serialization._StringSerializer).serialize(value.macAddress),
            "os_version": NullableSerializer(Serialization._StringSerializer).serialize(value.osVersion),
            "device_type": NullableSerializer(Serialization._StringSerializer).serialize(value.deviceType),
            "client_version": NullableSerializer(Serialization._StringSerializer).serialize(value.clientVersion),
            "legacy_uniq_id": NullableSerializer(Serialization._StringSerializer).serialize(value.legacyUniqId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegacyDeviceSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    let created = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["created"] ?? .null)
                    let updated = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["updated"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.SessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let isEmmManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_emm_managed"] ?? .null)
                    let platform = NullableSerializer(Serialization._StringSerializer).deserialize(dict["platform"] ?? .null)
                    let macAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["mac_address"] ?? .null)
                    let osVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["os_version"] ?? .null)
                    let deviceType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["device_type"] ?? .null)
                    let clientVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["client_version"] ?? .null)
                    let legacyUniqId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["legacy_uniq_id"] ?? .null)
                    return LegacyDeviceSessionLogInfo(ipAddress: ipAddress, created: created, updated: updated, sessionInfo: sessionInfo, displayName: displayName, isEmmManaged: isEmmManaged, platform: platform, macAddress: macAddress, osVersion: osVersion, deviceType: deviceType, clientVersion: clientVersion, legacyUniqId: legacyUniqId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Activated a hold.
    open class LegalHoldsActivateAHoldDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Hold start date.
        public let startDate: Date
        /// Hold end date.
        public let endDate: Date?
        public init(legalHoldId: String, name: String, startDate: Date, endDate: Date? = nil) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsActivateAHoldDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsActivateAHoldDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsActivateAHoldDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsActivateAHoldDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["end_date"] ?? .null)
                    return LegalHoldsActivateAHoldDetails(legalHoldId: legalHoldId, name: name, startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsActivateAHoldType struct
    open class LegalHoldsActivateAHoldType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsActivateAHoldTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsActivateAHoldTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsActivateAHoldType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsActivateAHoldType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsActivateAHoldType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to a hold.
    open class LegalHoldsAddMembersDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        public init(legalHoldId: String, name: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsAddMembersDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsAddMembersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsAddMembersDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsAddMembersDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    return LegalHoldsAddMembersDetails(legalHoldId: legalHoldId, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsAddMembersType struct
    open class LegalHoldsAddMembersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsAddMembersTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsAddMembersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsAddMembersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsAddMembersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsAddMembersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited details for a hold.
    open class LegalHoldsChangeHoldDetailsDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Previous details.
        public let previousValue: String
        /// New details.
        public let newValue: String
        public init(legalHoldId: String, name: String, previousValue: String, newValue: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsChangeHoldDetailsDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsChangeHoldDetailsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsChangeHoldDetailsDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsChangeHoldDetailsDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return LegalHoldsChangeHoldDetailsDetails(legalHoldId: legalHoldId, name: name, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsChangeHoldDetailsType struct
    open class LegalHoldsChangeHoldDetailsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsChangeHoldDetailsTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsChangeHoldDetailsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsChangeHoldDetailsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsChangeHoldDetailsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsChangeHoldDetailsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed a hold.
    open class LegalHoldsChangeHoldNameDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Previous Name.
        public let previousValue: String
        /// New Name.
        public let newValue: String
        public init(legalHoldId: String, previousValue: String, newValue: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsChangeHoldNameDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsChangeHoldNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsChangeHoldNameDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsChangeHoldNameDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return LegalHoldsChangeHoldNameDetails(legalHoldId: legalHoldId, previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsChangeHoldNameType struct
    open class LegalHoldsChangeHoldNameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsChangeHoldNameTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsChangeHoldNameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsChangeHoldNameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsChangeHoldNameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsChangeHoldNameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Exported hold.
    open class LegalHoldsExportAHoldDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Export name.
        public let exportName: String?
        public init(legalHoldId: String, name: String, exportName: String? = nil) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            nullableValidator(stringValidator())(exportName)
            self.exportName = exportName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportAHoldDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportAHoldDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportAHoldDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": NullableSerializer(Serialization._StringSerializer).serialize(value.exportName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportAHoldDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["export_name"] ?? .null)
                    return LegalHoldsExportAHoldDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsExportAHoldType struct
    open class LegalHoldsExportAHoldType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportAHoldTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportAHoldTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportAHoldType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportAHoldType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsExportAHoldType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Canceled export for a hold.
    open class LegalHoldsExportCancelledDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Export name.
        public let exportName: String
        public init(legalHoldId: String, name: String, exportName: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            stringValidator()(exportName)
            self.exportName = exportName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportCancelledDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportCancelledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportCancelledDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportCancelledDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    return LegalHoldsExportCancelledDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsExportCancelledType struct
    open class LegalHoldsExportCancelledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportCancelledTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportCancelledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportCancelledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportCancelledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsExportCancelledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded export for a hold.
    open class LegalHoldsExportDownloadedDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Export name.
        public let exportName: String
        /// Part.
        public let part: String?
        /// Filename.
        public let fileName: String?
        public init(legalHoldId: String, name: String, exportName: String, part: String? = nil, fileName: String? = nil) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            stringValidator()(exportName)
            self.exportName = exportName
            nullableValidator(stringValidator())(part)
            self.part = part
            nullableValidator(stringValidator())(fileName)
            self.fileName = fileName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportDownloadedDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportDownloadedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportDownloadedDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            "part": NullableSerializer(Serialization._StringSerializer).serialize(value.part),
            "file_name": NullableSerializer(Serialization._StringSerializer).serialize(value.fileName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportDownloadedDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    let part = NullableSerializer(Serialization._StringSerializer).deserialize(dict["part"] ?? .null)
                    let fileName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_name"] ?? .null)
                    return LegalHoldsExportDownloadedDetails(legalHoldId: legalHoldId, name: name, exportName: exportName, part: part, fileName: fileName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsExportDownloadedType struct
    open class LegalHoldsExportDownloadedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportDownloadedTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportDownloadedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportDownloadedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportDownloadedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsExportDownloadedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed export for a hold.
    open class LegalHoldsExportRemovedDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        /// Export name.
        public let exportName: String
        public init(legalHoldId: String, name: String, exportName: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
            stringValidator()(exportName)
            self.exportName = exportName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportRemovedDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportRemovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportRemovedDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            "export_name": Serialization._StringSerializer.serialize(value.exportName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportRemovedDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    let exportName = Serialization._StringSerializer.deserialize(dict["export_name"] ?? .null)
                    return LegalHoldsExportRemovedDetails(legalHoldId: legalHoldId, name: name, exportName: exportName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsExportRemovedType struct
    open class LegalHoldsExportRemovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsExportRemovedTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsExportRemovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsExportRemovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsExportRemovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsExportRemovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Released a hold.
    open class LegalHoldsReleaseAHoldDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        public init(legalHoldId: String, name: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsReleaseAHoldDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsReleaseAHoldDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsReleaseAHoldDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsReleaseAHoldDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    return LegalHoldsReleaseAHoldDetails(legalHoldId: legalHoldId, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsReleaseAHoldType struct
    open class LegalHoldsReleaseAHoldType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsReleaseAHoldTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsReleaseAHoldTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsReleaseAHoldType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsReleaseAHoldType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsReleaseAHoldType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed members from a hold.
    open class LegalHoldsRemoveMembersDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        public init(legalHoldId: String, name: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsRemoveMembersDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsRemoveMembersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsRemoveMembersDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsRemoveMembersDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    return LegalHoldsRemoveMembersDetails(legalHoldId: legalHoldId, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsRemoveMembersType struct
    open class LegalHoldsRemoveMembersType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsRemoveMembersTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsRemoveMembersTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsRemoveMembersType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsRemoveMembersType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsRemoveMembersType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a summary report for a hold.
    open class LegalHoldsReportAHoldDetails: CustomStringConvertible {
        /// Hold ID.
        public let legalHoldId: String
        /// Hold name.
        public let name: String
        public init(legalHoldId: String, name: String) {
            stringValidator()(legalHoldId)
            self.legalHoldId = legalHoldId
            stringValidator()(name)
            self.name = name
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsReportAHoldDetailsSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsReportAHoldDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsReportAHoldDetails) -> JSON {
            let output = [ 
            "legal_hold_id": Serialization._StringSerializer.serialize(value.legalHoldId),
            "name": Serialization._StringSerializer.serialize(value.name),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsReportAHoldDetails {
            switch json {
                case .dictionary(let dict):
                    let legalHoldId = Serialization._StringSerializer.deserialize(dict["legal_hold_id"] ?? .null)
                    let name = Serialization._StringSerializer.deserialize(dict["name"] ?? .null)
                    return LegalHoldsReportAHoldDetails(legalHoldId: legalHoldId, name: name)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LegalHoldsReportAHoldType struct
    open class LegalHoldsReportAHoldType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LegalHoldsReportAHoldTypeSerializer().serialize(self)))"
        }
    }
    open class LegalHoldsReportAHoldTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LegalHoldsReportAHoldType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LegalHoldsReportAHoldType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LegalHoldsReportAHoldType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The device sessions that user is linked to.
    public enum LinkedDeviceLogInfo: CustomStringConvertible {
        /// desktop device session's details.
        case desktopDeviceSession(TeamLog.DesktopDeviceSessionLogInfo)
        /// legacy device session's details.
        case legacyDeviceSession(TeamLog.LegacyDeviceSessionLogInfo)
        /// mobile device session's details.
        case mobileDeviceSession(TeamLog.MobileDeviceSessionLogInfo)
        /// web device session's details.
        case webDeviceSession(TeamLog.WebDeviceSessionLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LinkedDeviceLogInfoSerializer().serialize(self)))"
        }
    }
    open class LinkedDeviceLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LinkedDeviceLogInfo) -> JSON {
            switch value {
                case .desktopDeviceSession(let arg):
                    var d = Serialization.getFields(TeamLog.DesktopDeviceSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("desktop_device_session")
                    return .dictionary(d)
                case .legacyDeviceSession(let arg):
                    var d = Serialization.getFields(TeamLog.LegacyDeviceSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("legacy_device_session")
                    return .dictionary(d)
                case .mobileDeviceSession(let arg):
                    var d = Serialization.getFields(TeamLog.MobileDeviceSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("mobile_device_session")
                    return .dictionary(d)
                case .webDeviceSession(let arg):
                    var d = Serialization.getFields(TeamLog.WebDeviceSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("web_device_session")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> LinkedDeviceLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "desktop_device_session":
                            let v = TeamLog.DesktopDeviceSessionLogInfoSerializer().deserialize(json)
                            return LinkedDeviceLogInfo.desktopDeviceSession(v)
                        case "legacy_device_session":
                            let v = TeamLog.LegacyDeviceSessionLogInfoSerializer().deserialize(json)
                            return LinkedDeviceLogInfo.legacyDeviceSession(v)
                        case "mobile_device_session":
                            let v = TeamLog.MobileDeviceSessionLogInfoSerializer().deserialize(json)
                            return LinkedDeviceLogInfo.mobileDeviceSession(v)
                        case "web_device_session":
                            let v = TeamLog.WebDeviceSessionLogInfoSerializer().deserialize(json)
                            return LinkedDeviceLogInfo.webDeviceSession(v)
                        case "other":
                            return LinkedDeviceLogInfo.other
                        default:
                            return LinkedDeviceLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// File lock status
    public enum LockStatus: CustomStringConvertible {
        /// An unspecified error.
        case locked
        /// An unspecified error.
        case unlocked
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LockStatusSerializer().serialize(self)))"
        }
    }
    open class LockStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LockStatus) -> JSON {
            switch value {
                case .locked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("locked")
                    return .dictionary(d)
                case .unlocked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlocked")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> LockStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "locked":
                            return LockStatus.locked
                        case "unlocked":
                            return LockStatus.unlocked
                        case "other":
                            return LockStatus.other
                        default:
                            return LockStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Failed to sign in.
    open class LoginFailDetails: CustomStringConvertible {
        /// Tells if the login device is EMM managed. Might be missing due to historical data gap.
        public let isEmmManaged: Bool?
        /// Login method.
        public let loginMethod: TeamLog.LoginMethod
        /// Error details.
        public let errorDetails: TeamLog.FailureDetailsLogInfo
        public init(loginMethod: TeamLog.LoginMethod, errorDetails: TeamLog.FailureDetailsLogInfo, isEmmManaged: Bool? = nil) {
            self.isEmmManaged = isEmmManaged
            self.loginMethod = loginMethod
            self.errorDetails = errorDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LoginFailDetailsSerializer().serialize(self)))"
        }
    }
    open class LoginFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LoginFailDetails) -> JSON {
            let output = [ 
            "login_method": TeamLog.LoginMethodSerializer().serialize(value.loginMethod),
            "error_details": TeamLog.FailureDetailsLogInfoSerializer().serialize(value.errorDetails),
            "is_emm_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isEmmManaged),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LoginFailDetails {
            switch json {
                case .dictionary(let dict):
                    let loginMethod = TeamLog.LoginMethodSerializer().deserialize(dict["login_method"] ?? .null)
                    let errorDetails = TeamLog.FailureDetailsLogInfoSerializer().deserialize(dict["error_details"] ?? .null)
                    let isEmmManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_emm_managed"] ?? .null)
                    return LoginFailDetails(loginMethod: loginMethod, errorDetails: errorDetails, isEmmManaged: isEmmManaged)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LoginFailType struct
    open class LoginFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LoginFailTypeSerializer().serialize(self)))"
        }
    }
    open class LoginFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LoginFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LoginFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LoginFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LoginMethod union
    public enum LoginMethod: CustomStringConvertible {
        /// An unspecified error.
        case appleOauth
        /// An unspecified error.
        case firstPartyTokenExchange
        /// An unspecified error.
        case googleOauth
        /// An unspecified error.
        case password
        /// An unspecified error.
        case qrCode
        /// An unspecified error.
        case saml
        /// An unspecified error.
        case twoFactorAuthentication
        /// An unspecified error.
        case webSession
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LoginMethodSerializer().serialize(self)))"
        }
    }
    open class LoginMethodSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LoginMethod) -> JSON {
            switch value {
                case .appleOauth:
                    var d = [String: JSON]()
                    d[".tag"] = .str("apple_oauth")
                    return .dictionary(d)
                case .firstPartyTokenExchange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("first_party_token_exchange")
                    return .dictionary(d)
                case .googleOauth:
                    var d = [String: JSON]()
                    d[".tag"] = .str("google_oauth")
                    return .dictionary(d)
                case .password:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password")
                    return .dictionary(d)
                case .qrCode:
                    var d = [String: JSON]()
                    d[".tag"] = .str("qr_code")
                    return .dictionary(d)
                case .saml:
                    var d = [String: JSON]()
                    d[".tag"] = .str("saml")
                    return .dictionary(d)
                case .twoFactorAuthentication:
                    var d = [String: JSON]()
                    d[".tag"] = .str("two_factor_authentication")
                    return .dictionary(d)
                case .webSession:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_session")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> LoginMethod {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "apple_oauth":
                            return LoginMethod.appleOauth
                        case "first_party_token_exchange":
                            return LoginMethod.firstPartyTokenExchange
                        case "google_oauth":
                            return LoginMethod.googleOauth
                        case "password":
                            return LoginMethod.password
                        case "qr_code":
                            return LoginMethod.qrCode
                        case "saml":
                            return LoginMethod.saml
                        case "two_factor_authentication":
                            return LoginMethod.twoFactorAuthentication
                        case "web_session":
                            return LoginMethod.webSession
                        case "other":
                            return LoginMethod.other
                        default:
                            return LoginMethod.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Signed in.
    open class LoginSuccessDetails: CustomStringConvertible {
        /// Tells if the login device is EMM managed. Might be missing due to historical data gap.
        public let isEmmManaged: Bool?
        /// Login method.
        public let loginMethod: TeamLog.LoginMethod
        public init(loginMethod: TeamLog.LoginMethod, isEmmManaged: Bool? = nil) {
            self.isEmmManaged = isEmmManaged
            self.loginMethod = loginMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LoginSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class LoginSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LoginSuccessDetails) -> JSON {
            let output = [ 
            "login_method": TeamLog.LoginMethodSerializer().serialize(value.loginMethod),
            "is_emm_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isEmmManaged),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LoginSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let loginMethod = TeamLog.LoginMethodSerializer().deserialize(dict["login_method"] ?? .null)
                    let isEmmManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_emm_managed"] ?? .null)
                    return LoginSuccessDetails(loginMethod: loginMethod, isEmmManaged: isEmmManaged)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LoginSuccessType struct
    open class LoginSuccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LoginSuccessTypeSerializer().serialize(self)))"
        }
    }
    open class LoginSuccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LoginSuccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LoginSuccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LoginSuccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Signed out.
    open class LogoutDetails: CustomStringConvertible {
        /// Login session id.
        public let loginId: String?
        public init(loginId: String? = nil) {
            nullableValidator(stringValidator())(loginId)
            self.loginId = loginId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LogoutDetailsSerializer().serialize(self)))"
        }
    }
    open class LogoutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LogoutDetails) -> JSON {
            let output = [ 
            "login_id": NullableSerializer(Serialization._StringSerializer).serialize(value.loginId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LogoutDetails {
            switch json {
                case .dictionary(let dict):
                    let loginId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["login_id"] ?? .null)
                    return LogoutDetails(loginId: loginId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LogoutType struct
    open class LogoutType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LogoutTypeSerializer().serialize(self)))"
        }
    }
    open class LogoutTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LogoutType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LogoutType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return LogoutType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added an external ID for team member.
    open class MemberAddExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        public let newValue: String
        public init(newValue: String) {
            stringValidator(maxLength: 64)(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberAddExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberAddExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberAddExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberAddExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return MemberAddExternalIdDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberAddExternalIdType struct
    open class MemberAddExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberAddExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class MemberAddExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberAddExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberAddExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberAddExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team member name.
    open class MemberAddNameDetails: CustomStringConvertible {
        /// New user's name.
        public let newValue: TeamLog.UserNameLogInfo
        public init(newValue: TeamLog.UserNameLogInfo) {
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberAddNameDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberAddNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberAddNameDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.UserNameLogInfoSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberAddNameDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.UserNameLogInfoSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberAddNameDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberAddNameType struct
    open class MemberAddNameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberAddNameTypeSerializer().serialize(self)))"
        }
    }
    open class MemberAddNameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberAddNameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberAddNameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberAddNameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member admin role.
    open class MemberChangeAdminRoleDetails: CustomStringConvertible {
        /// New admin role. This field is relevant when the admin role is changed or whenthe user role changes from no
        /// admin rights to with admin rights.
        public let newValue: TeamLog.AdminRole?
        /// Previous admin role. This field is relevant when the admin role is changed or when the admin role is
        /// removed.
        public let previousValue: TeamLog.AdminRole?
        public init(newValue: TeamLog.AdminRole? = nil, previousValue: TeamLog.AdminRole? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeAdminRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeAdminRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeAdminRoleDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.AdminRoleSerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AdminRoleSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeAdminRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.AdminRoleSerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AdminRoleSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeAdminRoleDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeAdminRoleType struct
    open class MemberChangeAdminRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeAdminRoleTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeAdminRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeAdminRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeAdminRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeAdminRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member email.
    open class MemberChangeEmailDetails: CustomStringConvertible {
        /// New email.
        public let newValue: String
        /// Previous email. Might be missing due to historical data gap.
        public let previousValue: String?
        public init(newValue: String, previousValue: String? = nil) {
            stringValidator(maxLength: 255)(newValue)
            self.newValue = newValue
            nullableValidator(stringValidator(maxLength: 255))(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeEmailDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeEmailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeEmailDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": NullableSerializer(Serialization._StringSerializer).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeEmailDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeEmailDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeEmailType struct
    open class MemberChangeEmailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeEmailTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeEmailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeEmailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeEmailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeEmailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the external ID for team member.
    open class MemberChangeExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        public let newValue: String
        /// Old external id.
        public let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator(maxLength: 64)(newValue)
            self.newValue = newValue
            stringValidator(maxLength: 64)(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeExternalIdDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeExternalIdType struct
    open class MemberChangeExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed membership type (limited/full) of member.
    open class MemberChangeMembershipTypeDetails: CustomStringConvertible {
        /// Previous membership type.
        public let prevValue: TeamLog.TeamMembershipType
        /// New membership type.
        public let newValue: TeamLog.TeamMembershipType
        public init(prevValue: TeamLog.TeamMembershipType, newValue: TeamLog.TeamMembershipType) {
            self.prevValue = prevValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeMembershipTypeDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeMembershipTypeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeMembershipTypeDetails) -> JSON {
            let output = [ 
            "prev_value": TeamLog.TeamMembershipTypeSerializer().serialize(value.prevValue),
            "new_value": TeamLog.TeamMembershipTypeSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeMembershipTypeDetails {
            switch json {
                case .dictionary(let dict):
                    let prevValue = TeamLog.TeamMembershipTypeSerializer().deserialize(dict["prev_value"] ?? .null)
                    let newValue = TeamLog.TeamMembershipTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberChangeMembershipTypeDetails(prevValue: prevValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeMembershipTypeType struct
    open class MemberChangeMembershipTypeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeMembershipTypeTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeMembershipTypeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeMembershipTypeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeMembershipTypeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeMembershipTypeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member name.
    open class MemberChangeNameDetails: CustomStringConvertible {
        /// New user's name.
        public let newValue: TeamLog.UserNameLogInfo
        /// Previous user's name. Might be missing due to historical data gap.
        public let previousValue: TeamLog.UserNameLogInfo?
        public init(newValue: TeamLog.UserNameLogInfo, previousValue: TeamLog.UserNameLogInfo? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeNameDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeNameDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.UserNameLogInfoSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.UserNameLogInfoSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeNameDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.UserNameLogInfoSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.UserNameLogInfoSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeNameDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeNameType struct
    open class MemberChangeNameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeNameTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeNameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeNameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeNameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeNameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member reseller role.
    open class MemberChangeResellerRoleDetails: CustomStringConvertible {
        /// New reseller role. This field is relevant when the reseller role is changed.
        public let newValue: TeamLog.ResellerRole
        /// Previous reseller role. This field is relevant when the reseller role is changed or when the reseller role
        /// is removed.
        public let previousValue: TeamLog.ResellerRole
        public init(newValue: TeamLog.ResellerRole, previousValue: TeamLog.ResellerRole) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeResellerRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeResellerRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeResellerRoleDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ResellerRoleSerializer().serialize(value.newValue),
            "previous_value": TeamLog.ResellerRoleSerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeResellerRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ResellerRoleSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ResellerRoleSerializer().deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeResellerRoleDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeResellerRoleType struct
    open class MemberChangeResellerRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeResellerRoleTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeResellerRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeResellerRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeResellerRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeResellerRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed member status (invited, joined, suspended, etc.).
    open class MemberChangeStatusDetails: CustomStringConvertible {
        /// Previous member status. Might be missing due to historical data gap.
        public let previousValue: TeamLog.MemberStatus?
        /// New member status.
        public let newValue: TeamLog.MemberStatus
        /// Additional information indicating the action taken that caused status change.
        public let action: TeamLog.ActionDetails?
        /// The user's new team name. This field is relevant when the user is transferred off the team.
        public let newTeam: String?
        /// The user's previous team name. This field is relevant when the user is transferred onto the team.
        public let previousTeam: String?
        public init(newValue: TeamLog.MemberStatus, previousValue: TeamLog.MemberStatus? = nil, action: TeamLog.ActionDetails? = nil, newTeam: String? = nil, previousTeam: String? = nil) {
            self.previousValue = previousValue
            self.newValue = newValue
            self.action = action
            nullableValidator(stringValidator())(newTeam)
            self.newTeam = newTeam
            nullableValidator(stringValidator())(previousTeam)
            self.previousTeam = previousTeam
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberStatusSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberStatusSerializer()).serialize(value.previousValue),
            "action": NullableSerializer(TeamLog.ActionDetailsSerializer()).serialize(value.action),
            "new_team": NullableSerializer(Serialization._StringSerializer).serialize(value.newTeam),
            "previous_team": NullableSerializer(Serialization._StringSerializer).serialize(value.previousTeam),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberStatusSerializer()).deserialize(dict["previous_value"] ?? .null)
                    let action = NullableSerializer(TeamLog.ActionDetailsSerializer()).deserialize(dict["action"] ?? .null)
                    let newTeam = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_team"] ?? .null)
                    let previousTeam = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_team"] ?? .null)
                    return MemberChangeStatusDetails(newValue: newValue, previousValue: previousValue, action: action, newTeam: newTeam, previousTeam: previousTeam)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberChangeStatusType struct
    open class MemberChangeStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeStatusTypeSerializer().serialize(self)))"
        }
    }
    open class MemberChangeStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberChangeStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Cleared manually added contacts.
    open class MemberDeleteManualContactsDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberDeleteManualContactsDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberDeleteManualContactsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberDeleteManualContactsDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberDeleteManualContactsDetails {
            switch json {
                case .dictionary(_):
                    return MemberDeleteManualContactsDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberDeleteManualContactsType struct
    open class MemberDeleteManualContactsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberDeleteManualContactsTypeSerializer().serialize(self)))"
        }
    }
    open class MemberDeleteManualContactsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberDeleteManualContactsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberDeleteManualContactsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberDeleteManualContactsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted team member profile photo.
    open class MemberDeleteProfilePhotoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberDeleteProfilePhotoDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberDeleteProfilePhotoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberDeleteProfilePhotoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberDeleteProfilePhotoDetails {
            switch json {
                case .dictionary(_):
                    return MemberDeleteProfilePhotoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberDeleteProfilePhotoType struct
    open class MemberDeleteProfilePhotoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberDeleteProfilePhotoTypeSerializer().serialize(self)))"
        }
    }
    open class MemberDeleteProfilePhotoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberDeleteProfilePhotoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberDeleteProfilePhotoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberDeleteProfilePhotoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted contents of deleted team member account.
    open class MemberPermanentlyDeleteAccountContentsDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberPermanentlyDeleteAccountContentsDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberPermanentlyDeleteAccountContentsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberPermanentlyDeleteAccountContentsDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberPermanentlyDeleteAccountContentsDetails {
            switch json {
                case .dictionary(_):
                    return MemberPermanentlyDeleteAccountContentsDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberPermanentlyDeleteAccountContentsType struct
    open class MemberPermanentlyDeleteAccountContentsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberPermanentlyDeleteAccountContentsTypeSerializer().serialize(self)))"
        }
    }
    open class MemberPermanentlyDeleteAccountContentsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberPermanentlyDeleteAccountContentsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberPermanentlyDeleteAccountContentsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberPermanentlyDeleteAccountContentsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberRemoveActionType union
    public enum MemberRemoveActionType: CustomStringConvertible {
        /// An unspecified error.
        case delete
        /// An unspecified error.
        case leave
        /// An unspecified error.
        case offboard
        /// An unspecified error.
        case offboardAndRetainTeamFolders
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRemoveActionTypeSerializer().serialize(self)))"
        }
    }
    open class MemberRemoveActionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRemoveActionType) -> JSON {
            switch value {
                case .delete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("delete")
                    return .dictionary(d)
                case .leave:
                    var d = [String: JSON]()
                    d[".tag"] = .str("leave")
                    return .dictionary(d)
                case .offboard:
                    var d = [String: JSON]()
                    d[".tag"] = .str("offboard")
                    return .dictionary(d)
                case .offboardAndRetainTeamFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("offboard_and_retain_team_folders")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberRemoveActionType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "delete":
                            return MemberRemoveActionType.delete
                        case "leave":
                            return MemberRemoveActionType.leave
                        case "offboard":
                            return MemberRemoveActionType.offboard
                        case "offboard_and_retain_team_folders":
                            return MemberRemoveActionType.offboardAndRetainTeamFolders
                        case "other":
                            return MemberRemoveActionType.other
                        default:
                            return MemberRemoveActionType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Removed the external ID for team member.
    open class MemberRemoveExternalIdDetails: CustomStringConvertible {
        /// Old external id.
        public let previousValue: String
        public init(previousValue: String) {
            stringValidator(maxLength: 64)(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRemoveExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberRemoveExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRemoveExternalIdDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberRemoveExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return MemberRemoveExternalIdDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberRemoveExternalIdType struct
    open class MemberRemoveExternalIdType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRemoveExternalIdTypeSerializer().serialize(self)))"
        }
    }
    open class MemberRemoveExternalIdTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRemoveExternalIdType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberRemoveExternalIdType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberRemoveExternalIdType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether users can find team when not invited.
    open class MemberRequestsChangePolicyDetails: CustomStringConvertible {
        /// New member change requests policy.
        public let newValue: TeamLog.MemberRequestsPolicy
        /// Previous member change requests policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.MemberRequestsPolicy?
        public init(newValue: TeamLog.MemberRequestsPolicy, previousValue: TeamLog.MemberRequestsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRequestsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberRequestsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRequestsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberRequestsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberRequestsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberRequestsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberRequestsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberRequestsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberRequestsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberRequestsChangePolicyType struct
    open class MemberRequestsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRequestsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class MemberRequestsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRequestsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberRequestsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberRequestsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberRequestsPolicy union
    public enum MemberRequestsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case autoAccept
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case requireApproval
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRequestsPolicySerializer().serialize(self)))"
        }
    }
    open class MemberRequestsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRequestsPolicy) -> JSON {
            switch value {
                case .autoAccept:
                    var d = [String: JSON]()
                    d[".tag"] = .str("auto_accept")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .requireApproval:
                    var d = [String: JSON]()
                    d[".tag"] = .str("require_approval")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberRequestsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "auto_accept":
                            return MemberRequestsPolicy.autoAccept
                        case "disabled":
                            return MemberRequestsPolicy.disabled
                        case "require_approval":
                            return MemberRequestsPolicy.requireApproval
                        case "other":
                            return MemberRequestsPolicy.other
                        default:
                            return MemberRequestsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for controlling whether team members can send team invites
    public enum MemberSendInvitePolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case everyone
        /// An unspecified error.
        case specificMembers
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSendInvitePolicySerializer().serialize(self)))"
        }
    }
    open class MemberSendInvitePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSendInvitePolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .everyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("everyone")
                    return .dictionary(d)
                case .specificMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("specific_members")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberSendInvitePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return MemberSendInvitePolicy.disabled
                        case "everyone":
                            return MemberSendInvitePolicy.everyone
                        case "specific_members":
                            return MemberSendInvitePolicy.specificMembers
                        case "other":
                            return MemberSendInvitePolicy.other
                        default:
                            return MemberSendInvitePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed member send invite policy for team.
    open class MemberSendInvitePolicyChangedDetails: CustomStringConvertible {
        /// New team member send invite policy.
        public let newValue: TeamLog.MemberSendInvitePolicy
        /// Previous team member send invite policy.
        public let previousValue: TeamLog.MemberSendInvitePolicy
        public init(newValue: TeamLog.MemberSendInvitePolicy, previousValue: TeamLog.MemberSendInvitePolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSendInvitePolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSendInvitePolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSendInvitePolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberSendInvitePolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.MemberSendInvitePolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSendInvitePolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberSendInvitePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.MemberSendInvitePolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return MemberSendInvitePolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSendInvitePolicyChangedType struct
    open class MemberSendInvitePolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSendInvitePolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSendInvitePolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSendInvitePolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSendInvitePolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSendInvitePolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set team member profile photo.
    open class MemberSetProfilePhotoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSetProfilePhotoDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSetProfilePhotoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSetProfilePhotoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSetProfilePhotoDetails {
            switch json {
                case .dictionary(_):
                    return MemberSetProfilePhotoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSetProfilePhotoType struct
    open class MemberSetProfilePhotoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSetProfilePhotoTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSetProfilePhotoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSetProfilePhotoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSetProfilePhotoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSetProfilePhotoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set custom member space limit.
    open class MemberSpaceLimitsAddCustomQuotaDetails: CustomStringConvertible {
        /// New custom quota value in bytes.
        public let newValue: UInt64
        public init(newValue: UInt64) {
            comparableValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsAddCustomQuotaDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsAddCustomQuotaDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsAddCustomQuotaDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._UInt64Serializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsAddCustomQuotaDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._UInt64Serializer.deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsAddCustomQuotaDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsAddCustomQuotaType struct
    open class MemberSpaceLimitsAddCustomQuotaType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsAddCustomQuotaTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsAddCustomQuotaTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsAddCustomQuotaType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsAddCustomQuotaType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsAddCustomQuotaType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to member space limit exception list.
    open class MemberSpaceLimitsAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return MemberSpaceLimitsAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsAddExceptionType struct
    open class MemberSpaceLimitsAddExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsAddExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsAddExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsAddExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsAddExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsAddExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed member space limit type for team.
    open class MemberSpaceLimitsChangeCapsTypePolicyDetails: CustomStringConvertible {
        /// Previous space limit type.
        public let previousValue: TeamLog.SpaceCapsType
        /// New space limit type.
        public let newValue: TeamLog.SpaceCapsType
        public init(previousValue: TeamLog.SpaceCapsType, newValue: TeamLog.SpaceCapsType) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeCapsTypePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SpaceCapsTypeSerializer().serialize(value.previousValue),
            "new_value": TeamLog.SpaceCapsTypeSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeCapsTypePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SpaceCapsTypeSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SpaceCapsTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangeCapsTypePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsChangeCapsTypePolicyType struct
    open class MemberSpaceLimitsChangeCapsTypePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeCapsTypePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeCapsTypePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeCapsTypePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeCapsTypePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsChangeCapsTypePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed custom member space limit.
    open class MemberSpaceLimitsChangeCustomQuotaDetails: CustomStringConvertible {
        /// Previous custom quota value in bytes.
        public let previousValue: UInt64
        /// New custom quota value in bytes.
        public let newValue: UInt64
        public init(previousValue: UInt64, newValue: UInt64) {
            comparableValidator()(previousValue)
            self.previousValue = previousValue
            comparableValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeCustomQuotaDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeCustomQuotaDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeCustomQuotaDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._UInt64Serializer.serialize(value.previousValue),
            "new_value": Serialization._UInt64Serializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeCustomQuotaDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._UInt64Serializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._UInt64Serializer.deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangeCustomQuotaDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsChangeCustomQuotaType struct
    open class MemberSpaceLimitsChangeCustomQuotaType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeCustomQuotaTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeCustomQuotaTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeCustomQuotaType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeCustomQuotaType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsChangeCustomQuotaType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team default member space limit.
    open class MemberSpaceLimitsChangePolicyDetails: CustomStringConvertible {
        /// Previous team default limit value in bytes. Might be missing due to historical data gap.
        public let previousValue: UInt64?
        /// New team default limit value in bytes. Might be missing due to historical data gap.
        public let newValue: UInt64?
        public init(previousValue: UInt64? = nil, newValue: UInt64? = nil) {
            nullableValidator(comparableValidator())(previousValue)
            self.previousValue = previousValue
            nullableValidator(comparableValidator())(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": NullableSerializer(Serialization._UInt64Serializer).serialize(value.previousValue),
            "new_value": NullableSerializer(Serialization._UInt64Serializer).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["previous_value"] ?? .null)
                    let newValue = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsChangePolicyType struct
    open class MemberSpaceLimitsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed space limit status.
    open class MemberSpaceLimitsChangeStatusDetails: CustomStringConvertible {
        /// Previous storage quota status.
        public let previousValue: TeamLog.SpaceLimitsStatus
        /// New storage quota status.
        public let newValue: TeamLog.SpaceLimitsStatus
        public init(previousValue: TeamLog.SpaceLimitsStatus, newValue: TeamLog.SpaceLimitsStatus) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeStatusDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SpaceLimitsStatusSerializer().serialize(value.previousValue),
            "new_value": TeamLog.SpaceLimitsStatusSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SpaceLimitsStatusSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SpaceLimitsStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangeStatusDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsChangeStatusType struct
    open class MemberSpaceLimitsChangeStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeStatusTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsChangeStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed custom member space limit.
    open class MemberSpaceLimitsRemoveCustomQuotaDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsRemoveCustomQuotaDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsRemoveCustomQuotaDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsRemoveCustomQuotaDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsRemoveCustomQuotaDetails {
            switch json {
                case .dictionary(_):
                    return MemberSpaceLimitsRemoveCustomQuotaDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsRemoveCustomQuotaType struct
    open class MemberSpaceLimitsRemoveCustomQuotaType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsRemoveCustomQuotaTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsRemoveCustomQuotaTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsRemoveCustomQuotaType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsRemoveCustomQuotaType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsRemoveCustomQuotaType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed members from member space limit exception list.
    open class MemberSpaceLimitsRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return MemberSpaceLimitsRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSpaceLimitsRemoveExceptionType struct
    open class MemberSpaceLimitsRemoveExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsRemoveExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsRemoveExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsRemoveExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsRemoveExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSpaceLimitsRemoveExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberStatus union
    public enum MemberStatus: CustomStringConvertible {
        /// An unspecified error.
        case active
        /// An unspecified error.
        case invited
        /// An unspecified error.
        case movedToAnotherTeam
        /// An unspecified error.
        case notJoined
        /// An unspecified error.
        case removed
        /// An unspecified error.
        case suspended
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberStatusSerializer().serialize(self)))"
        }
    }
    open class MemberStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberStatus) -> JSON {
            switch value {
                case .active:
                    var d = [String: JSON]()
                    d[".tag"] = .str("active")
                    return .dictionary(d)
                case .invited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited")
                    return .dictionary(d)
                case .movedToAnotherTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("moved_to_another_team")
                    return .dictionary(d)
                case .notJoined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("not_joined")
                    return .dictionary(d)
                case .removed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("removed")
                    return .dictionary(d)
                case .suspended:
                    var d = [String: JSON]()
                    d[".tag"] = .str("suspended")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "active":
                            return MemberStatus.active
                        case "invited":
                            return MemberStatus.invited
                        case "moved_to_another_team":
                            return MemberStatus.movedToAnotherTeam
                        case "not_joined":
                            return MemberStatus.notJoined
                        case "removed":
                            return MemberStatus.removed
                        case "suspended":
                            return MemberStatus.suspended
                        case "other":
                            return MemberStatus.other
                        default:
                            return MemberStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Suggested person to add to team.
    open class MemberSuggestDetails: CustomStringConvertible {
        /// suggested users emails.
        public let suggestedMembers: Array<String>
        public init(suggestedMembers: Array<String>) {
            arrayValidator(itemValidator: stringValidator(maxLength: 255))(suggestedMembers)
            self.suggestedMembers = suggestedMembers
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestDetails) -> JSON {
            let output = [ 
            "suggested_members": ArraySerializer(Serialization._StringSerializer).serialize(value.suggestedMembers),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestDetails {
            switch json {
                case .dictionary(let dict):
                    let suggestedMembers = ArraySerializer(Serialization._StringSerializer).deserialize(dict["suggested_members"] ?? .null)
                    return MemberSuggestDetails(suggestedMembers: suggestedMembers)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSuggestType struct
    open class MemberSuggestType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSuggestType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled option for team members to suggest people to add to team.
    open class MemberSuggestionsChangePolicyDetails: CustomStringConvertible {
        /// New team member suggestions policy.
        public let newValue: TeamLog.MemberSuggestionsPolicy
        /// Previous team member suggestions policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.MemberSuggestionsPolicy?
        public init(newValue: TeamLog.MemberSuggestionsPolicy, previousValue: TeamLog.MemberSuggestionsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestionsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestionsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestionsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberSuggestionsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberSuggestionsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestionsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberSuggestionsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberSuggestionsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberSuggestionsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberSuggestionsChangePolicyType struct
    open class MemberSuggestionsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestionsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestionsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestionsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestionsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberSuggestionsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Member suggestions policy
    public enum MemberSuggestionsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestionsPolicySerializer().serialize(self)))"
        }
    }
    open class MemberSuggestionsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestionsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberSuggestionsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return MemberSuggestionsPolicy.disabled
                        case "enabled":
                            return MemberSuggestionsPolicy.enabled
                        case "other":
                            return MemberSuggestionsPolicy.other
                        default:
                            return MemberSuggestionsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Transferred contents of deleted member account to another member.
    open class MemberTransferAccountContentsDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberTransferAccountContentsDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberTransferAccountContentsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberTransferAccountContentsDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberTransferAccountContentsDetails {
            switch json {
                case .dictionary(_):
                    return MemberTransferAccountContentsDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberTransferAccountContentsType struct
    open class MemberTransferAccountContentsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberTransferAccountContentsTypeSerializer().serialize(self)))"
        }
    }
    open class MemberTransferAccountContentsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberTransferAccountContentsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberTransferAccountContentsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MemberTransferAccountContentsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Internal only - fields for target team computations
    open class MemberTransferredInternalFields: CustomStringConvertible {
        /// Internal only - team user was moved from.
        public let sourceTeamId: String
        /// Internal only - team user was moved to.
        public let targetTeamId: String
        public init(sourceTeamId: String, targetTeamId: String) {
            stringValidator()(sourceTeamId)
            self.sourceTeamId = sourceTeamId
            stringValidator()(targetTeamId)
            self.targetTeamId = targetTeamId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberTransferredInternalFieldsSerializer().serialize(self)))"
        }
    }
    open class MemberTransferredInternalFieldsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberTransferredInternalFields) -> JSON {
            let output = [ 
            "source_team_id": Serialization._StringSerializer.serialize(value.sourceTeamId),
            "target_team_id": Serialization._StringSerializer.serialize(value.targetTeamId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberTransferredInternalFields {
            switch json {
                case .dictionary(let dict):
                    let sourceTeamId = Serialization._StringSerializer.deserialize(dict["source_team_id"] ?? .null)
                    let targetTeamId = Serialization._StringSerializer.deserialize(dict["target_team_id"] ?? .null)
                    return MemberTransferredInternalFields(sourceTeamId: sourceTeamId, targetTeamId: targetTeamId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled Microsoft Office add-in.
    open class MicrosoftOfficeAddinChangePolicyDetails: CustomStringConvertible {
        /// New Microsoft Office addin policy.
        public let newValue: TeamLog.MicrosoftOfficeAddinPolicy
        /// Previous Microsoft Office addin policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.MicrosoftOfficeAddinPolicy?
        public init(newValue: TeamLog.MicrosoftOfficeAddinPolicy, previousValue: TeamLog.MicrosoftOfficeAddinPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MicrosoftOfficeAddinChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MicrosoftOfficeAddinChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MicrosoftOfficeAddinChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MicrosoftOfficeAddinPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MicrosoftOfficeAddinPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MicrosoftOfficeAddinChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MicrosoftOfficeAddinPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MicrosoftOfficeAddinPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MicrosoftOfficeAddinChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MicrosoftOfficeAddinChangePolicyType struct
    open class MicrosoftOfficeAddinChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MicrosoftOfficeAddinChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class MicrosoftOfficeAddinChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MicrosoftOfficeAddinChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MicrosoftOfficeAddinChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return MicrosoftOfficeAddinChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Microsoft Office addin policy
    public enum MicrosoftOfficeAddinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MicrosoftOfficeAddinPolicySerializer().serialize(self)))"
        }
    }
    open class MicrosoftOfficeAddinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MicrosoftOfficeAddinPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MicrosoftOfficeAddinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return MicrosoftOfficeAddinPolicy.disabled
                        case "enabled":
                            return MicrosoftOfficeAddinPolicy.enabled
                        case "other":
                            return MicrosoftOfficeAddinPolicy.other
                        default:
                            return MicrosoftOfficeAddinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// An indication that an error occurred while retrieving the event. Some attributes of the event may be omitted as
    /// a result.
    open class MissingDetails: CustomStringConvertible {
        /// All the data that could be retrieved and converted from the source event.
        public let sourceEventFields: String?
        public init(sourceEventFields: String? = nil) {
            nullableValidator(stringValidator())(sourceEventFields)
            self.sourceEventFields = sourceEventFields
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MissingDetailsSerializer().serialize(self)))"
        }
    }
    open class MissingDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MissingDetails) -> JSON {
            let output = [ 
            "source_event_fields": NullableSerializer(Serialization._StringSerializer).serialize(value.sourceEventFields),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MissingDetails {
            switch json {
                case .dictionary(let dict):
                    let sourceEventFields = NullableSerializer(Serialization._StringSerializer).deserialize(dict["source_event_fields"] ?? .null)
                    return MissingDetails(sourceEventFields: sourceEventFields)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Information about linked Dropbox mobile client sessions
    open class MobileDeviceSessionLogInfo: TeamLog.DeviceSessionLogInfo {
        /// Mobile session unique id.
        public let sessionInfo: TeamLog.MobileSessionLogInfo?
        /// The device name.
        public let deviceName: String
        /// The mobile application type.
        public let clientType: Team.MobileClientPlatform
        /// The Dropbox client version.
        public let clientVersion: String?
        /// The hosting OS version.
        public let osVersion: String?
        /// last carrier used by the device.
        public let lastCarrier: String?
        public init(deviceName: String, clientType: Team.MobileClientPlatform, ipAddress: String? = nil, created: Date? = nil, updated: Date? = nil, sessionInfo: TeamLog.MobileSessionLogInfo? = nil, clientVersion: String? = nil, osVersion: String? = nil, lastCarrier: String? = nil) {
            self.sessionInfo = sessionInfo
            stringValidator()(deviceName)
            self.deviceName = deviceName
            self.clientType = clientType
            nullableValidator(stringValidator())(clientVersion)
            self.clientVersion = clientVersion
            nullableValidator(stringValidator())(osVersion)
            self.osVersion = osVersion
            nullableValidator(stringValidator())(lastCarrier)
            self.lastCarrier = lastCarrier
            super.init(ipAddress: ipAddress, created: created, updated: updated)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MobileDeviceSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class MobileDeviceSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MobileDeviceSessionLogInfo) -> JSON {
            let output = [ 
            "device_name": Serialization._StringSerializer.serialize(value.deviceName),
            "client_type": Team.MobileClientPlatformSerializer().serialize(value.clientType),
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "created": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.created),
            "updated": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.updated),
            "session_info": NullableSerializer(TeamLog.MobileSessionLogInfoSerializer()).serialize(value.sessionInfo),
            "client_version": NullableSerializer(Serialization._StringSerializer).serialize(value.clientVersion),
            "os_version": NullableSerializer(Serialization._StringSerializer).serialize(value.osVersion),
            "last_carrier": NullableSerializer(Serialization._StringSerializer).serialize(value.lastCarrier),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MobileDeviceSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let deviceName = Serialization._StringSerializer.deserialize(dict["device_name"] ?? .null)
                    let clientType = Team.MobileClientPlatformSerializer().deserialize(dict["client_type"] ?? .null)
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    let created = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["created"] ?? .null)
                    let updated = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["updated"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.MobileSessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    let clientVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["client_version"] ?? .null)
                    let osVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["os_version"] ?? .null)
                    let lastCarrier = NullableSerializer(Serialization._StringSerializer).deserialize(dict["last_carrier"] ?? .null)
                    return MobileDeviceSessionLogInfo(deviceName: deviceName, clientType: clientType, ipAddress: ipAddress, created: created, updated: updated, sessionInfo: sessionInfo, clientVersion: clientVersion, osVersion: osVersion, lastCarrier: lastCarrier)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Mobile session.
    open class MobileSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MobileSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class MobileSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MobileSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MobileSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return MobileSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Namespace relative path details.
    open class NamespaceRelativePathLogInfo: CustomStringConvertible {
        /// Namespace ID.
        public let nsId: String?
        /// A path relative to the specified namespace ID.
        public let relativePath: String?
        /// True if the namespace is shared.
        public let isSharedNamespace: Bool?
        public init(nsId: String? = nil, relativePath: String? = nil, isSharedNamespace: Bool? = nil) {
            nullableValidator(stringValidator())(nsId)
            self.nsId = nsId
            nullableValidator(stringValidator())(relativePath)
            self.relativePath = relativePath
            self.isSharedNamespace = isSharedNamespace
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NamespaceRelativePathLogInfoSerializer().serialize(self)))"
        }
    }
    open class NamespaceRelativePathLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NamespaceRelativePathLogInfo) -> JSON {
            let output = [ 
            "ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.nsId),
            "relative_path": NullableSerializer(Serialization._StringSerializer).serialize(value.relativePath),
            "is_shared_namespace": NullableSerializer(Serialization._BoolSerializer).serialize(value.isSharedNamespace),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NamespaceRelativePathLogInfo {
            switch json {
                case .dictionary(let dict):
                    let nsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ns_id"] ?? .null)
                    let relativePath = NullableSerializer(Serialization._StringSerializer).deserialize(dict["relative_path"] ?? .null)
                    let isSharedNamespace = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_shared_namespace"] ?? .null)
                    return NamespaceRelativePathLogInfo(nsId: nsId, relativePath: relativePath, isSharedNamespace: isSharedNamespace)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled network control.
    open class NetworkControlChangePolicyDetails: CustomStringConvertible {
        /// New network control policy.
        public let newValue: TeamLog.NetworkControlPolicy
        /// Previous network control policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.NetworkControlPolicy?
        public init(newValue: TeamLog.NetworkControlPolicy, previousValue: TeamLog.NetworkControlPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NetworkControlChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class NetworkControlChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NetworkControlChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.NetworkControlPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.NetworkControlPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NetworkControlChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.NetworkControlPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.NetworkControlPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return NetworkControlChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NetworkControlChangePolicyType struct
    open class NetworkControlChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NetworkControlChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class NetworkControlChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NetworkControlChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NetworkControlChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NetworkControlChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Network control policy
    public enum NetworkControlPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NetworkControlPolicySerializer().serialize(self)))"
        }
    }
    open class NetworkControlPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NetworkControlPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> NetworkControlPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return NetworkControlPolicy.disabled
                        case "enabled":
                            return NetworkControlPolicy.enabled
                        case "other":
                            return NetworkControlPolicy.other
                        default:
                            return NetworkControlPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Report created: Links created with no expiration.
    open class NoExpirationLinkGenCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        public let startDate: Date
        /// Report end date.
        public let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoExpirationLinkGenCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class NoExpirationLinkGenCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoExpirationLinkGenCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoExpirationLinkGenCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return NoExpirationLinkGenCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoExpirationLinkGenCreateReportType struct
    open class NoExpirationLinkGenCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoExpirationLinkGenCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class NoExpirationLinkGenCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoExpirationLinkGenCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoExpirationLinkGenCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoExpirationLinkGenCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create report: Links created with no expiration.
    open class NoExpirationLinkGenReportFailedDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoExpirationLinkGenReportFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class NoExpirationLinkGenReportFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoExpirationLinkGenReportFailedDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoExpirationLinkGenReportFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return NoExpirationLinkGenReportFailedDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoExpirationLinkGenReportFailedType struct
    open class NoExpirationLinkGenReportFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoExpirationLinkGenReportFailedTypeSerializer().serialize(self)))"
        }
    }
    open class NoExpirationLinkGenReportFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoExpirationLinkGenReportFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoExpirationLinkGenReportFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoExpirationLinkGenReportFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Report created: Links created without passwords.
    open class NoPasswordLinkGenCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        public let startDate: Date
        /// Report end date.
        public let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkGenCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkGenCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkGenCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkGenCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return NoPasswordLinkGenCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoPasswordLinkGenCreateReportType struct
    open class NoPasswordLinkGenCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkGenCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkGenCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkGenCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkGenCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoPasswordLinkGenCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create report: Links created without passwords.
    open class NoPasswordLinkGenReportFailedDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkGenReportFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkGenReportFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkGenReportFailedDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkGenReportFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return NoPasswordLinkGenReportFailedDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoPasswordLinkGenReportFailedType struct
    open class NoPasswordLinkGenReportFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkGenReportFailedTypeSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkGenReportFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkGenReportFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkGenReportFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoPasswordLinkGenReportFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Report created: Views of links without passwords.
    open class NoPasswordLinkViewCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        public let startDate: Date
        /// Report end date.
        public let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkViewCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkViewCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkViewCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkViewCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return NoPasswordLinkViewCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoPasswordLinkViewCreateReportType struct
    open class NoPasswordLinkViewCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkViewCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkViewCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkViewCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkViewCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoPasswordLinkViewCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create report: Views of links without passwords.
    open class NoPasswordLinkViewReportFailedDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkViewReportFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkViewReportFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkViewReportFailedDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkViewReportFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return NoPasswordLinkViewReportFailedDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoPasswordLinkViewReportFailedType struct
    open class NoPasswordLinkViewReportFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoPasswordLinkViewReportFailedTypeSerializer().serialize(self)))"
        }
    }
    open class NoPasswordLinkViewReportFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoPasswordLinkViewReportFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoPasswordLinkViewReportFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoPasswordLinkViewReportFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User's logged information.
    open class UserLogInfo: CustomStringConvertible {
        /// User unique ID.
        public let accountId: String?
        /// User display name.
        public let displayName: String?
        /// User email address.
        public let email: String?
        public init(accountId: String? = nil, displayName: String? = nil, email: String? = nil) {
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(accountId)
            self.accountId = accountId
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator(maxLength: 255))(email)
            self.email = email
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserLogInfo) -> JSON {
            var output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            ]
            switch value {
                case let teamMember as TeamLog.TeamMemberLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.TeamMemberLogInfoSerializer().serialize(teamMember)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("team_member")
                case let trustedNonTeamMember as TeamLog.TrustedNonTeamMemberLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.TrustedNonTeamMemberLogInfoSerializer().serialize(trustedNonTeamMember)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("trusted_non_team_member")
                case let nonTeamMember as TeamLog.NonTeamMemberLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.NonTeamMemberLogInfoSerializer().serialize(nonTeamMember)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("non_team_member")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "team_member":
                            return TeamLog.TeamMemberLogInfoSerializer().deserialize(json)
                        case "trusted_non_team_member":
                            return TeamLog.TrustedNonTeamMemberLogInfoSerializer().deserialize(json)
                        case "non_team_member":
                            return TeamLog.NonTeamMemberLogInfoSerializer().deserialize(json)
                        default:
                            let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                            let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                            let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                            return UserLogInfo(accountId: accountId, displayName: displayName, email: email)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Non team member's logged information.
    open class NonTeamMemberLogInfo: TeamLog.UserLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NonTeamMemberLogInfoSerializer().serialize(self)))"
        }
    }
    open class NonTeamMemberLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NonTeamMemberLogInfo) -> JSON {
            let output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NonTeamMemberLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                    return NonTeamMemberLogInfo(accountId: accountId, displayName: displayName, email: email)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The email to which the request was sent
    open class NonTrustedTeamDetails: CustomStringConvertible {
        /// The email to which the request was sent.
        public let team: String
        public init(team: String) {
            stringValidator()(team)
            self.team = team
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NonTrustedTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class NonTrustedTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NonTrustedTeamDetails) -> JSON {
            let output = [ 
            "team": Serialization._StringSerializer.serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NonTrustedTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let team = Serialization._StringSerializer.deserialize(dict["team"] ?? .null)
                    return NonTrustedTeamDetails(team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper doc to invite-only.
    open class NoteAclInviteOnlyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclInviteOnlyDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclInviteOnlyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclInviteOnlyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclInviteOnlyDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclInviteOnlyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoteAclInviteOnlyType struct
    open class NoteAclInviteOnlyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclInviteOnlyTypeSerializer().serialize(self)))"
        }
    }
    open class NoteAclInviteOnlyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclInviteOnlyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclInviteOnlyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoteAclInviteOnlyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper doc to link-accessible.
    open class NoteAclLinkDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclLinkDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclLinkDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclLinkDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoteAclLinkType struct
    open class NoteAclLinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclLinkTypeSerializer().serialize(self)))"
        }
    }
    open class NoteAclLinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclLinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclLinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoteAclLinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper doc to link-accessible for team.
    open class NoteAclTeamLinkDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclTeamLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclTeamLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclTeamLinkDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclTeamLinkDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclTeamLinkDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoteAclTeamLinkType struct
    open class NoteAclTeamLinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclTeamLinkTypeSerializer().serialize(self)))"
        }
    }
    open class NoteAclTeamLinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclTeamLinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclTeamLinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoteAclTeamLinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared received Paper doc.
    open class NoteShareReceiveDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteShareReceiveDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteShareReceiveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteShareReceiveDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteShareReceiveDetails {
            switch json {
                case .dictionary(_):
                    return NoteShareReceiveDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoteShareReceiveType struct
    open class NoteShareReceiveType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteShareReceiveTypeSerializer().serialize(self)))"
        }
    }
    open class NoteShareReceiveTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteShareReceiveType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteShareReceiveType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoteShareReceiveType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper doc.
    open class NoteSharedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteSharedDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteSharedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteSharedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteSharedDetails {
            switch json {
                case .dictionary(_):
                    return NoteSharedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The NoteSharedType struct
    open class NoteSharedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteSharedTypeSerializer().serialize(self)))"
        }
    }
    open class NoteSharedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteSharedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteSharedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return NoteSharedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a label.
    open class ObjectLabelAddedDetails: CustomStringConvertible {
        /// Labels mark a file or folder.
        public let labelType: TeamLog.LabelType
        public init(labelType: TeamLog.LabelType) {
            self.labelType = labelType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelAddedDetailsSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelAddedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelAddedDetails) -> JSON {
            let output = [ 
            "label_type": TeamLog.LabelTypeSerializer().serialize(value.labelType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelAddedDetails {
            switch json {
                case .dictionary(let dict):
                    let labelType = TeamLog.LabelTypeSerializer().deserialize(dict["label_type"] ?? .null)
                    return ObjectLabelAddedDetails(labelType: labelType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ObjectLabelAddedType struct
    open class ObjectLabelAddedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelAddedTypeSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelAddedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelAddedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelAddedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ObjectLabelAddedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a label.
    open class ObjectLabelRemovedDetails: CustomStringConvertible {
        /// Labels mark a file or folder.
        public let labelType: TeamLog.LabelType
        public init(labelType: TeamLog.LabelType) {
            self.labelType = labelType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelRemovedDetailsSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelRemovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelRemovedDetails) -> JSON {
            let output = [ 
            "label_type": TeamLog.LabelTypeSerializer().serialize(value.labelType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelRemovedDetails {
            switch json {
                case .dictionary(let dict):
                    let labelType = TeamLog.LabelTypeSerializer().deserialize(dict["label_type"] ?? .null)
                    return ObjectLabelRemovedDetails(labelType: labelType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ObjectLabelRemovedType struct
    open class ObjectLabelRemovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelRemovedTypeSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelRemovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelRemovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelRemovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ObjectLabelRemovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Updated a label's value.
    open class ObjectLabelUpdatedValueDetails: CustomStringConvertible {
        /// Labels mark a file or folder.
        public let labelType: TeamLog.LabelType
        public init(labelType: TeamLog.LabelType) {
            self.labelType = labelType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelUpdatedValueDetailsSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelUpdatedValueDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelUpdatedValueDetails) -> JSON {
            let output = [ 
            "label_type": TeamLog.LabelTypeSerializer().serialize(value.labelType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelUpdatedValueDetails {
            switch json {
                case .dictionary(let dict):
                    let labelType = TeamLog.LabelTypeSerializer().deserialize(dict["label_type"] ?? .null)
                    return ObjectLabelUpdatedValueDetails(labelType: labelType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ObjectLabelUpdatedValueType struct
    open class ObjectLabelUpdatedValueType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ObjectLabelUpdatedValueTypeSerializer().serialize(self)))"
        }
    }
    open class ObjectLabelUpdatedValueTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ObjectLabelUpdatedValueType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ObjectLabelUpdatedValueType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ObjectLabelUpdatedValueType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opened shared Paper doc.
    open class OpenNoteSharedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OpenNoteSharedDetailsSerializer().serialize(self)))"
        }
    }
    open class OpenNoteSharedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OpenNoteSharedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OpenNoteSharedDetails {
            switch json {
                case .dictionary(_):
                    return OpenNoteSharedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The OpenNoteSharedType struct
    open class OpenNoteSharedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OpenNoteSharedTypeSerializer().serialize(self)))"
        }
    }
    open class OpenNoteSharedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OpenNoteSharedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OpenNoteSharedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return OpenNoteSharedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// More details about the organization.
    open class OrganizationDetails: CustomStringConvertible {
        /// The name of the organization.
        public let organization: String
        public init(organization: String) {
            stringValidator()(organization)
            self.organization = organization
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OrganizationDetailsSerializer().serialize(self)))"
        }
    }
    open class OrganizationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OrganizationDetails) -> JSON {
            let output = [ 
            "organization": Serialization._StringSerializer.serialize(value.organization),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OrganizationDetails {
            switch json {
                case .dictionary(let dict):
                    let organization = Serialization._StringSerializer.deserialize(dict["organization"] ?? .null)
                    return OrganizationDetails(organization: organization)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The name of the organization
    open class OrganizationName: CustomStringConvertible {
        /// The name of the organization.
        public let organization: String
        public init(organization: String) {
            stringValidator()(organization)
            self.organization = organization
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OrganizationNameSerializer().serialize(self)))"
        }
    }
    open class OrganizationNameSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OrganizationName) -> JSON {
            let output = [ 
            "organization": Serialization._StringSerializer.serialize(value.organization),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OrganizationName {
            switch json {
                case .dictionary(let dict):
                    let organization = Serialization._StringSerializer.deserialize(dict["organization"] ?? .null)
                    return OrganizationName(organization: organization)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Organized a folder with multi-file organize.
    open class OrganizeFolderWithTidyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OrganizeFolderWithTidyDetailsSerializer().serialize(self)))"
        }
    }
    open class OrganizeFolderWithTidyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OrganizeFolderWithTidyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OrganizeFolderWithTidyDetails {
            switch json {
                case .dictionary(_):
                    return OrganizeFolderWithTidyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The OrganizeFolderWithTidyType struct
    open class OrganizeFolderWithTidyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OrganizeFolderWithTidyTypeSerializer().serialize(self)))"
        }
    }
    open class OrganizeFolderWithTidyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OrganizeFolderWithTidyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OrganizeFolderWithTidyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return OrganizeFolderWithTidyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The origin from which the actor performed the action.
    open class OriginLogInfo: CustomStringConvertible {
        /// Geographic location details.
        public let geoLocation: TeamLog.GeoLocationLogInfo?
        /// The method that was used to perform the action.
        public let accessMethod: TeamLog.AccessMethodLogInfo
        public init(accessMethod: TeamLog.AccessMethodLogInfo, geoLocation: TeamLog.GeoLocationLogInfo? = nil) {
            self.geoLocation = geoLocation
            self.accessMethod = accessMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OriginLogInfoSerializer().serialize(self)))"
        }
    }
    open class OriginLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OriginLogInfo) -> JSON {
            let output = [ 
            "access_method": TeamLog.AccessMethodLogInfoSerializer().serialize(value.accessMethod),
            "geo_location": NullableSerializer(TeamLog.GeoLocationLogInfoSerializer()).serialize(value.geoLocation),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OriginLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accessMethod = TeamLog.AccessMethodLogInfoSerializer().deserialize(dict["access_method"] ?? .null)
                    let geoLocation = NullableSerializer(TeamLog.GeoLocationLogInfoSerializer()).deserialize(dict["geo_location"] ?? .null)
                    return OriginLogInfo(accessMethod: accessMethod, geoLocation: geoLocation)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Report created: Views of old links.
    open class OutdatedLinkViewCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        public let startDate: Date
        /// Report end date.
        public let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OutdatedLinkViewCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class OutdatedLinkViewCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OutdatedLinkViewCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OutdatedLinkViewCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return OutdatedLinkViewCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The OutdatedLinkViewCreateReportType struct
    open class OutdatedLinkViewCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OutdatedLinkViewCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class OutdatedLinkViewCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OutdatedLinkViewCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OutdatedLinkViewCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return OutdatedLinkViewCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't create report: Views of old links.
    open class OutdatedLinkViewReportFailedDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OutdatedLinkViewReportFailedDetailsSerializer().serialize(self)))"
        }
    }
    open class OutdatedLinkViewReportFailedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OutdatedLinkViewReportFailedDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OutdatedLinkViewReportFailedDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return OutdatedLinkViewReportFailedDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The OutdatedLinkViewReportFailedType struct
    open class OutdatedLinkViewReportFailedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OutdatedLinkViewReportFailedTypeSerializer().serialize(self)))"
        }
    }
    open class OutdatedLinkViewReportFailedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OutdatedLinkViewReportFailedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OutdatedLinkViewReportFailedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return OutdatedLinkViewReportFailedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperAccessType union
    public enum PaperAccessType: CustomStringConvertible {
        /// An unspecified error.
        case commenter
        /// An unspecified error.
        case editor
        /// An unspecified error.
        case viewer
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperAccessTypeSerializer().serialize(self)))"
        }
    }
    open class PaperAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperAccessType) -> JSON {
            switch value {
                case .commenter:
                    var d = [String: JSON]()
                    d[".tag"] = .str("commenter")
                    return .dictionary(d)
                case .editor:
                    var d = [String: JSON]()
                    d[".tag"] = .str("editor")
                    return .dictionary(d)
                case .viewer:
                    var d = [String: JSON]()
                    d[".tag"] = .str("viewer")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperAccessType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "commenter":
                            return PaperAccessType.commenter
                        case "editor":
                            return PaperAccessType.editor
                        case "viewer":
                            return PaperAccessType.viewer
                        case "other":
                            return PaperAccessType.other
                        default:
                            return PaperAccessType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Exported all team Paper docs.
    open class PaperAdminExportStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperAdminExportStartDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperAdminExportStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperAdminExportStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperAdminExportStartDetails {
            switch json {
                case .dictionary(_):
                    return PaperAdminExportStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperAdminExportStartType struct
    open class PaperAdminExportStartType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperAdminExportStartTypeSerializer().serialize(self)))"
        }
    }
    open class PaperAdminExportStartTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperAdminExportStartType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperAdminExportStartType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperAdminExportStartType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether Dropbox Paper, when enabled, is deployed to all members or to specific members.
    open class PaperChangeDeploymentPolicyDetails: CustomStringConvertible {
        /// New Dropbox Paper deployment policy.
        public let newValue: TeamPolicies.PaperDeploymentPolicy
        /// Previous Dropbox Paper deployment policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.PaperDeploymentPolicy?
        public init(newValue: TeamPolicies.PaperDeploymentPolicy, previousValue: TeamPolicies.PaperDeploymentPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeDeploymentPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeDeploymentPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeDeploymentPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.PaperDeploymentPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.PaperDeploymentPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeDeploymentPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.PaperDeploymentPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.PaperDeploymentPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangeDeploymentPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperChangeDeploymentPolicyType struct
    open class PaperChangeDeploymentPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeDeploymentPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PaperChangeDeploymentPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeDeploymentPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeDeploymentPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperChangeDeploymentPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether non-members can view Paper docs with link.
    open class PaperChangeMemberLinkPolicyDetails: CustomStringConvertible {
        /// New paper external link accessibility policy.
        public let newValue: TeamLog.PaperMemberPolicy
        public init(newValue: TeamLog.PaperMemberPolicy) {
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberLinkPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperMemberPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return PaperChangeMemberLinkPolicyDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperChangeMemberLinkPolicyType struct
    open class PaperChangeMemberLinkPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberLinkPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberLinkPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberLinkPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberLinkPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperChangeMemberLinkPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can share Paper docs outside team, and if docs are accessible only by team members or
    /// anyone by default.
    open class PaperChangeMemberPolicyDetails: CustomStringConvertible {
        /// New paper external accessibility policy.
        public let newValue: TeamLog.PaperMemberPolicy
        /// Previous paper external accessibility policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.PaperMemberPolicy?
        public init(newValue: TeamLog.PaperMemberPolicy, previousValue: TeamLog.PaperMemberPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperMemberPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.PaperMemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.PaperMemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangeMemberPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperChangeMemberPolicyType struct
    open class PaperChangeMemberPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperChangeMemberPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled Dropbox Paper for team.
    open class PaperChangePolicyDetails: CustomStringConvertible {
        /// New Dropbox Paper policy.
        public let newValue: TeamPolicies.PaperEnabledPolicy
        /// Previous Dropbox Paper policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.PaperEnabledPolicy?
        public init(newValue: TeamPolicies.PaperEnabledPolicy, previousValue: TeamPolicies.PaperEnabledPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.PaperEnabledPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.PaperEnabledPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.PaperEnabledPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.PaperEnabledPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperChangePolicyType struct
    open class PaperChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PaperChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added users and/or groups to Paper doc/folder.
    open class PaperContentAddMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentAddMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentAddMemberType struct
    open class PaperContentAddMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddMemberTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentAddMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added Paper doc/folder to folder.
    open class PaperContentAddToFolderDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Parent asset position in the Assets list.
        public let parentAssetIndex: UInt64
        public init(eventUuid: String, targetAssetIndex: UInt64, parentAssetIndex: UInt64) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            comparableValidator()(parentAssetIndex)
            self.parentAssetIndex = parentAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddToFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddToFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddToFolderDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "parent_asset_index": Serialization._UInt64Serializer.serialize(value.parentAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddToFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let parentAssetIndex = Serialization._UInt64Serializer.deserialize(dict["parent_asset_index"] ?? .null)
                    return PaperContentAddToFolderDetails(eventUuid: eventUuid, targetAssetIndex: targetAssetIndex, parentAssetIndex: parentAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentAddToFolderType struct
    open class PaperContentAddToFolderType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddToFolderTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddToFolderTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddToFolderType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddToFolderType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentAddToFolderType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Archived Paper doc/folder.
    open class PaperContentArchiveDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentArchiveDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentArchiveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentArchiveDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentArchiveDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentArchiveDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentArchiveType struct
    open class PaperContentArchiveType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentArchiveTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentArchiveTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentArchiveType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentArchiveType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentArchiveType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created Paper doc/folder.
    open class PaperContentCreateDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentCreateDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentCreateDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentCreateType struct
    open class PaperContentCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentCreateTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted Paper doc/folder.
    open class PaperContentPermanentlyDeleteDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentPermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentPermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentPermanentlyDeleteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentPermanentlyDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentPermanentlyDeleteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentPermanentlyDeleteType struct
    open class PaperContentPermanentlyDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentPermanentlyDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentPermanentlyDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentPermanentlyDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentPermanentlyDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentPermanentlyDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed Paper doc/folder from folder.
    open class PaperContentRemoveFromFolderDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64?
        /// Parent asset position in the Assets list.
        public let parentAssetIndex: UInt64?
        public init(eventUuid: String, targetAssetIndex: UInt64? = nil, parentAssetIndex: UInt64? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(comparableValidator())(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(comparableValidator())(parentAssetIndex)
            self.parentAssetIndex = parentAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveFromFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveFromFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveFromFolderDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "target_asset_index": NullableSerializer(Serialization._UInt64Serializer).serialize(value.targetAssetIndex),
            "parent_asset_index": NullableSerializer(Serialization._UInt64Serializer).serialize(value.parentAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveFromFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let targetAssetIndex = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["target_asset_index"] ?? .null)
                    let parentAssetIndex = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["parent_asset_index"] ?? .null)
                    return PaperContentRemoveFromFolderDetails(eventUuid: eventUuid, targetAssetIndex: targetAssetIndex, parentAssetIndex: parentAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentRemoveFromFolderType struct
    open class PaperContentRemoveFromFolderType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveFromFolderTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveFromFolderTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveFromFolderType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveFromFolderType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentRemoveFromFolderType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed users and/or groups from Paper doc/folder.
    open class PaperContentRemoveMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRemoveMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentRemoveMemberType struct
    open class PaperContentRemoveMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveMemberTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentRemoveMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed Paper doc/folder.
    open class PaperContentRenameDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRenameDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRenameDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentRenameType struct
    open class PaperContentRenameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRenameTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentRenameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRenameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRenameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentRenameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored archived Paper doc/folder.
    open class PaperContentRestoreDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRestoreDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRestoreDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRestoreDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRestoreDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRestoreDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperContentRestoreType struct
    open class PaperContentRestoreType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRestoreTypeSerializer().serialize(self)))"
        }
    }
    open class PaperContentRestoreTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRestoreType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRestoreType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperContentRestoreType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy to set default access for newly created Paper folders.
    public enum PaperDefaultFolderPolicy: CustomStringConvertible {
        /// An unspecified error.
        case everyoneInTeam
        /// An unspecified error.
        case inviteOnly
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDefaultFolderPolicySerializer().serialize(self)))"
        }
    }
    open class PaperDefaultFolderPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDefaultFolderPolicy) -> JSON {
            switch value {
                case .everyoneInTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("everyone_in_team")
                    return .dictionary(d)
                case .inviteOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invite_only")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperDefaultFolderPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "everyone_in_team":
                            return PaperDefaultFolderPolicy.everyoneInTeam
                        case "invite_only":
                            return PaperDefaultFolderPolicy.inviteOnly
                        case "other":
                            return PaperDefaultFolderPolicy.other
                        default:
                            return PaperDefaultFolderPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed Paper Default Folder Policy setting for team.
    open class PaperDefaultFolderPolicyChangedDetails: CustomStringConvertible {
        /// New Paper Default Folder Policy.
        public let newValue: TeamLog.PaperDefaultFolderPolicy
        /// Previous Paper Default Folder Policy.
        public let previousValue: TeamLog.PaperDefaultFolderPolicy
        public init(newValue: TeamLog.PaperDefaultFolderPolicy, previousValue: TeamLog.PaperDefaultFolderPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDefaultFolderPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDefaultFolderPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDefaultFolderPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperDefaultFolderPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.PaperDefaultFolderPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDefaultFolderPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperDefaultFolderPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.PaperDefaultFolderPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return PaperDefaultFolderPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDefaultFolderPolicyChangedType struct
    open class PaperDefaultFolderPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDefaultFolderPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDefaultFolderPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDefaultFolderPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDefaultFolderPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDefaultFolderPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can use Paper Desktop
    public enum PaperDesktopPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDesktopPolicySerializer().serialize(self)))"
        }
    }
    open class PaperDesktopPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDesktopPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperDesktopPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return PaperDesktopPolicy.disabled
                        case "enabled":
                            return PaperDesktopPolicy.enabled
                        case "other":
                            return PaperDesktopPolicy.other
                        default:
                            return PaperDesktopPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled/disabled Paper Desktop for team.
    open class PaperDesktopPolicyChangedDetails: CustomStringConvertible {
        /// New Paper Desktop policy.
        public let newValue: TeamLog.PaperDesktopPolicy
        /// Previous Paper Desktop policy.
        public let previousValue: TeamLog.PaperDesktopPolicy
        public init(newValue: TeamLog.PaperDesktopPolicy, previousValue: TeamLog.PaperDesktopPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDesktopPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDesktopPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDesktopPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperDesktopPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.PaperDesktopPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDesktopPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperDesktopPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.PaperDesktopPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return PaperDesktopPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDesktopPolicyChangedType struct
    open class PaperDesktopPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDesktopPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDesktopPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDesktopPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDesktopPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDesktopPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added Paper doc comment.
    open class PaperDocAddCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocAddCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocAddCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocAddCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocAddCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocAddCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocAddCommentType struct
    open class PaperDocAddCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocAddCommentTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocAddCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocAddCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocAddCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocAddCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed member permissions for Paper doc.
    open class PaperDocChangeMemberRoleDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Paper doc access type.
        public let accessType: TeamLog.PaperAccessType
        public init(eventUuid: String, accessType: TeamLog.PaperAccessType) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            self.accessType = accessType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "access_type": TeamLog.PaperAccessTypeSerializer().serialize(value.accessType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let accessType = TeamLog.PaperAccessTypeSerializer().deserialize(dict["access_type"] ?? .null)
                    return PaperDocChangeMemberRoleDetails(eventUuid: eventUuid, accessType: accessType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocChangeMemberRoleType struct
    open class PaperDocChangeMemberRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeMemberRoleTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeMemberRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeMemberRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeMemberRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocChangeMemberRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed sharing setting for Paper doc.
    open class PaperDocChangeSharingPolicyDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Sharing policy with external users.
        public let publicSharingPolicy: String?
        /// Sharing policy with team.
        public let teamSharingPolicy: String?
        public init(eventUuid: String, publicSharingPolicy: String? = nil, teamSharingPolicy: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(publicSharingPolicy)
            self.publicSharingPolicy = publicSharingPolicy
            nullableValidator(stringValidator())(teamSharingPolicy)
            self.teamSharingPolicy = teamSharingPolicy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSharingPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSharingPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSharingPolicyDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "public_sharing_policy": NullableSerializer(Serialization._StringSerializer).serialize(value.publicSharingPolicy),
            "team_sharing_policy": NullableSerializer(Serialization._StringSerializer).serialize(value.teamSharingPolicy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSharingPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let publicSharingPolicy = NullableSerializer(Serialization._StringSerializer).deserialize(dict["public_sharing_policy"] ?? .null)
                    let teamSharingPolicy = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_sharing_policy"] ?? .null)
                    return PaperDocChangeSharingPolicyDetails(eventUuid: eventUuid, publicSharingPolicy: publicSharingPolicy, teamSharingPolicy: teamSharingPolicy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocChangeSharingPolicyType struct
    open class PaperDocChangeSharingPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSharingPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSharingPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSharingPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSharingPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocChangeSharingPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed/unfollowed Paper doc.
    open class PaperDocChangeSubscriptionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// New doc subscription level.
        public let newSubscriptionLevel: String
        /// Previous doc subscription level. Might be missing due to historical data gap.
        public let previousSubscriptionLevel: String?
        public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(newSubscriptionLevel)
            self.newSubscriptionLevel = newSubscriptionLevel
            nullableValidator(stringValidator())(previousSubscriptionLevel)
            self.previousSubscriptionLevel = previousSubscriptionLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSubscriptionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_subscription_level": Serialization._StringSerializer.serialize(value.newSubscriptionLevel),
            "previous_subscription_level": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSubscriptionLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newSubscriptionLevel = Serialization._StringSerializer.deserialize(dict["new_subscription_level"] ?? .null)
                    let previousSubscriptionLevel = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_subscription_level"] ?? .null)
                    return PaperDocChangeSubscriptionDetails(eventUuid: eventUuid, newSubscriptionLevel: newSubscriptionLevel, previousSubscriptionLevel: previousSubscriptionLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocChangeSubscriptionType struct
    open class PaperDocChangeSubscriptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSubscriptionTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSubscriptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSubscriptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSubscriptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocChangeSubscriptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted Paper doc comment.
    open class PaperDocDeleteCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeleteCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeleteCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeleteCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeleteCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocDeleteCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocDeleteCommentType struct
    open class PaperDocDeleteCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeleteCommentTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeleteCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeleteCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeleteCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocDeleteCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Archived Paper doc.
    open class PaperDocDeletedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeletedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocDeletedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocDeletedType struct
    open class PaperDocDeletedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeletedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeletedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeletedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeletedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocDeletedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded Paper doc in specific format.
    open class PaperDocDownloadDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Export file format.
        public let exportFileFormat: TeamLog.PaperDownloadFormat
        public init(eventUuid: String, exportFileFormat: TeamLog.PaperDownloadFormat) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            self.exportFileFormat = exportFileFormat
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDownloadDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "export_file_format": TeamLog.PaperDownloadFormatSerializer().serialize(value.exportFileFormat),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let exportFileFormat = TeamLog.PaperDownloadFormatSerializer().deserialize(dict["export_file_format"] ?? .null)
                    return PaperDocDownloadDetails(eventUuid: eventUuid, exportFileFormat: exportFileFormat)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocDownloadType struct
    open class PaperDocDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited Paper doc comment.
    open class PaperDocEditCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocEditCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocEditCommentType struct
    open class PaperDocEditCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditCommentTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocEditCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited Paper doc.
    open class PaperDocEditDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocEditDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocEditType struct
    open class PaperDocEditType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocEditType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed Paper doc.
    open class PaperDocFollowedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocFollowedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocFollowedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocFollowedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocFollowedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocFollowedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocFollowedType struct
    open class PaperDocFollowedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocFollowedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocFollowedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocFollowedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocFollowedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocFollowedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Mentioned user in Paper doc.
    open class PaperDocMentionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocMentionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocMentionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocMentionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocMentionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocMentionDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocMentionType struct
    open class PaperDocMentionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocMentionTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocMentionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocMentionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocMentionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocMentionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Transferred ownership of Paper doc.
    open class PaperDocOwnershipChangedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Previous owner.
        public let oldOwnerUserId: String?
        /// New owner.
        public let newOwnerUserId: String
        public init(eventUuid: String, newOwnerUserId: String, oldOwnerUserId: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(oldOwnerUserId)
            self.oldOwnerUserId = oldOwnerUserId
            stringValidator(minLength: 40, maxLength: 40)(newOwnerUserId)
            self.newOwnerUserId = newOwnerUserId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocOwnershipChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocOwnershipChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocOwnershipChangedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_owner_user_id": Serialization._StringSerializer.serialize(value.newOwnerUserId),
            "old_owner_user_id": NullableSerializer(Serialization._StringSerializer).serialize(value.oldOwnerUserId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocOwnershipChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newOwnerUserId = Serialization._StringSerializer.deserialize(dict["new_owner_user_id"] ?? .null)
                    let oldOwnerUserId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["old_owner_user_id"] ?? .null)
                    return PaperDocOwnershipChangedDetails(eventUuid: eventUuid, newOwnerUserId: newOwnerUserId, oldOwnerUserId: oldOwnerUserId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocOwnershipChangedType struct
    open class PaperDocOwnershipChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocOwnershipChangedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocOwnershipChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocOwnershipChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocOwnershipChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocOwnershipChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested access to Paper doc.
    open class PaperDocRequestAccessDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRequestAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocRequestAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRequestAccessDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRequestAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocRequestAccessDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocRequestAccessType struct
    open class PaperDocRequestAccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRequestAccessTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocRequestAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRequestAccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRequestAccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocRequestAccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Resolved Paper doc comment.
    open class PaperDocResolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocResolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocResolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocResolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocResolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocResolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocResolveCommentType struct
    open class PaperDocResolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocResolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocResolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocResolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocResolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocResolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored Paper doc to previous version.
    open class PaperDocRevertDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRevertDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocRevertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRevertDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRevertDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocRevertDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocRevertType struct
    open class PaperDocRevertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRevertTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocRevertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRevertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRevertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocRevertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper doc via Slack.
    open class PaperDocSlackShareDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocSlackShareDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocSlackShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocSlackShareDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocSlackShareDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocSlackShareDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocSlackShareType struct
    open class PaperDocSlackShareType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocSlackShareTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocSlackShareTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocSlackShareType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocSlackShareType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocSlackShareType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper doc with users and/or groups.
    open class PaperDocTeamInviteDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTeamInviteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocTeamInviteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocTeamInviteType struct
    open class PaperDocTeamInviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTeamInviteTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocTeamInviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTeamInviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTeamInviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocTeamInviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted Paper doc.
    open class PaperDocTrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocTrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocTrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocTrashedType struct
    open class PaperDocTrashedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTrashedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocTrashedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTrashedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTrashedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocTrashedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unresolved Paper doc comment.
    open class PaperDocUnresolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUnresolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocUnresolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUnresolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUnresolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocUnresolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocUnresolveCommentType struct
    open class PaperDocUnresolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUnresolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocUnresolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUnresolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUnresolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocUnresolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored Paper doc.
    open class PaperDocUntrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUntrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocUntrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUntrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUntrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocUntrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocUntrashedType struct
    open class PaperDocUntrashedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUntrashedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocUntrashedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUntrashedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUntrashedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocUntrashedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed Paper doc.
    open class PaperDocViewDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocViewDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocViewDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocViewDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocViewDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDocViewType struct
    open class PaperDocViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocViewTypeSerializer().serialize(self)))"
        }
    }
    open class PaperDocViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperDocViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper document's logged information.
    open class PaperDocumentLogInfo: CustomStringConvertible {
        /// Papers document Id.
        public let docId: String
        /// Paper document title.
        public let docTitle: String
        public init(docId: String, docTitle: String) {
            stringValidator()(docId)
            self.docId = docId
            stringValidator()(docTitle)
            self.docTitle = docTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocumentLogInfoSerializer().serialize(self)))"
        }
    }
    open class PaperDocumentLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocumentLogInfo) -> JSON {
            let output = [ 
            "doc_id": Serialization._StringSerializer.serialize(value.docId),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocumentLogInfo {
            switch json {
                case .dictionary(let dict):
                    let docId = Serialization._StringSerializer.deserialize(dict["doc_id"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    return PaperDocumentLogInfo(docId: docId, docTitle: docTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDownloadFormat union
    public enum PaperDownloadFormat: CustomStringConvertible {
        /// An unspecified error.
        case docx
        /// An unspecified error.
        case html
        /// An unspecified error.
        case markdown
        /// An unspecified error.
        case pdf
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDownloadFormatSerializer().serialize(self)))"
        }
    }
    open class PaperDownloadFormatSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDownloadFormat) -> JSON {
            switch value {
                case .docx:
                    var d = [String: JSON]()
                    d[".tag"] = .str("docx")
                    return .dictionary(d)
                case .html:
                    var d = [String: JSON]()
                    d[".tag"] = .str("html")
                    return .dictionary(d)
                case .markdown:
                    var d = [String: JSON]()
                    d[".tag"] = .str("markdown")
                    return .dictionary(d)
                case .pdf:
                    var d = [String: JSON]()
                    d[".tag"] = .str("pdf")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperDownloadFormat {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "docx":
                            return PaperDownloadFormat.docx
                        case "html":
                            return PaperDownloadFormat.html
                        case "markdown":
                            return PaperDownloadFormat.markdown
                        case "pdf":
                            return PaperDownloadFormat.pdf
                        case "other":
                            return PaperDownloadFormat.other
                        default:
                            return PaperDownloadFormat.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added users to Paper-enabled users list.
    open class PaperEnabledUsersGroupAdditionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupAdditionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupAdditionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupAdditionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupAdditionDetails {
            switch json {
                case .dictionary(_):
                    return PaperEnabledUsersGroupAdditionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperEnabledUsersGroupAdditionType struct
    open class PaperEnabledUsersGroupAdditionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupAdditionTypeSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupAdditionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupAdditionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupAdditionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperEnabledUsersGroupAdditionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed users from Paper-enabled users list.
    open class PaperEnabledUsersGroupRemovalDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupRemovalDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupRemovalDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupRemovalDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupRemovalDetails {
            switch json {
                case .dictionary(_):
                    return PaperEnabledUsersGroupRemovalDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperEnabledUsersGroupRemovalType struct
    open class PaperEnabledUsersGroupRemovalType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupRemovalTypeSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupRemovalTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupRemovalType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupRemovalType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperEnabledUsersGroupRemovalType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper external sharing setting to anyone.
    open class PaperExternalViewAllowDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewAllowDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewAllowDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewAllowDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewAllowDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperExternalViewAllowDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperExternalViewAllowType struct
    open class PaperExternalViewAllowType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewAllowTypeSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewAllowTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewAllowType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewAllowType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperExternalViewAllowType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper external sharing setting to default team.
    open class PaperExternalViewDefaultTeamDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewDefaultTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewDefaultTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewDefaultTeamDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewDefaultTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperExternalViewDefaultTeamDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperExternalViewDefaultTeamType struct
    open class PaperExternalViewDefaultTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewDefaultTeamTypeSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewDefaultTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewDefaultTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewDefaultTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperExternalViewDefaultTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Paper external sharing setting to team-only.
    open class PaperExternalViewForbidDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewForbidDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewForbidDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewForbidDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewForbidDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperExternalViewForbidDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperExternalViewForbidType struct
    open class PaperExternalViewForbidType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewForbidTypeSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewForbidTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewForbidType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewForbidType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperExternalViewForbidType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed/unfollowed Paper folder.
    open class PaperFolderChangeSubscriptionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// New folder subscription level.
        public let newSubscriptionLevel: String
        /// Previous folder subscription level. Might be missing due to historical data gap.
        public let previousSubscriptionLevel: String?
        public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(newSubscriptionLevel)
            self.newSubscriptionLevel = newSubscriptionLevel
            nullableValidator(stringValidator())(previousSubscriptionLevel)
            self.previousSubscriptionLevel = previousSubscriptionLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderChangeSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderChangeSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderChangeSubscriptionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_subscription_level": Serialization._StringSerializer.serialize(value.newSubscriptionLevel),
            "previous_subscription_level": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSubscriptionLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderChangeSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newSubscriptionLevel = Serialization._StringSerializer.deserialize(dict["new_subscription_level"] ?? .null)
                    let previousSubscriptionLevel = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_subscription_level"] ?? .null)
                    return PaperFolderChangeSubscriptionDetails(eventUuid: eventUuid, newSubscriptionLevel: newSubscriptionLevel, previousSubscriptionLevel: previousSubscriptionLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperFolderChangeSubscriptionType struct
    open class PaperFolderChangeSubscriptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderChangeSubscriptionTypeSerializer().serialize(self)))"
        }
    }
    open class PaperFolderChangeSubscriptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderChangeSubscriptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderChangeSubscriptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperFolderChangeSubscriptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Archived Paper folder.
    open class PaperFolderDeletedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderDeletedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderDeletedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperFolderDeletedType struct
    open class PaperFolderDeletedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderDeletedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperFolderDeletedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderDeletedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderDeletedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperFolderDeletedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed Paper folder.
    open class PaperFolderFollowedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderFollowedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderFollowedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderFollowedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderFollowedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderFollowedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperFolderFollowedType struct
    open class PaperFolderFollowedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderFollowedTypeSerializer().serialize(self)))"
        }
    }
    open class PaperFolderFollowedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderFollowedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderFollowedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperFolderFollowedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper folder's logged information.
    open class PaperFolderLogInfo: CustomStringConvertible {
        /// Papers folder Id.
        public let folderId: String
        /// Paper folder name.
        public let folderName: String
        public init(folderId: String, folderName: String) {
            stringValidator()(folderId)
            self.folderId = folderId
            stringValidator()(folderName)
            self.folderName = folderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class PaperFolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderLogInfo) -> JSON {
            let output = [ 
            "folder_id": Serialization._StringSerializer.serialize(value.folderId),
            "folder_name": Serialization._StringSerializer.serialize(value.folderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let folderId = Serialization._StringSerializer.deserialize(dict["folder_id"] ?? .null)
                    let folderName = Serialization._StringSerializer.deserialize(dict["folder_name"] ?? .null)
                    return PaperFolderLogInfo(folderId: folderId, folderName: folderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper folder with users and/or groups.
    open class PaperFolderTeamInviteDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderTeamInviteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderTeamInviteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperFolderTeamInviteType struct
    open class PaperFolderTeamInviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderTeamInviteTypeSerializer().serialize(self)))"
        }
    }
    open class PaperFolderTeamInviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderTeamInviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderTeamInviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperFolderTeamInviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can share Paper documents externally.
    public enum PaperMemberPolicy: CustomStringConvertible {
        /// An unspecified error.
        case anyoneWithLink
        /// An unspecified error.
        case onlyTeam
        /// An unspecified error.
        case teamAndExplicitlyShared
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperMemberPolicySerializer().serialize(self)))"
        }
    }
    open class PaperMemberPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperMemberPolicy) -> JSON {
            switch value {
                case .anyoneWithLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anyone_with_link")
                    return .dictionary(d)
                case .onlyTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("only_team")
                    return .dictionary(d)
                case .teamAndExplicitlyShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_and_explicitly_shared")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperMemberPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "anyone_with_link":
                            return PaperMemberPolicy.anyoneWithLink
                        case "only_team":
                            return PaperMemberPolicy.onlyTeam
                        case "team_and_explicitly_shared":
                            return PaperMemberPolicy.teamAndExplicitlyShared
                        case "other":
                            return PaperMemberPolicy.other
                        default:
                            return PaperMemberPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed permissions for published doc.
    open class PaperPublishedLinkChangePermissionDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// New permission level.
        public let newPermissionLevel: String
        /// Previous permission level.
        public let previousPermissionLevel: String
        public init(eventUuid: String, newPermissionLevel: String, previousPermissionLevel: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(newPermissionLevel)
            self.newPermissionLevel = newPermissionLevel
            stringValidator()(previousPermissionLevel)
            self.previousPermissionLevel = previousPermissionLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkChangePermissionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkChangePermissionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkChangePermissionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_permission_level": Serialization._StringSerializer.serialize(value.newPermissionLevel),
            "previous_permission_level": Serialization._StringSerializer.serialize(value.previousPermissionLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkChangePermissionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newPermissionLevel = Serialization._StringSerializer.deserialize(dict["new_permission_level"] ?? .null)
                    let previousPermissionLevel = Serialization._StringSerializer.deserialize(dict["previous_permission_level"] ?? .null)
                    return PaperPublishedLinkChangePermissionDetails(eventUuid: eventUuid, newPermissionLevel: newPermissionLevel, previousPermissionLevel: previousPermissionLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperPublishedLinkChangePermissionType struct
    open class PaperPublishedLinkChangePermissionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkChangePermissionTypeSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkChangePermissionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkChangePermissionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkChangePermissionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperPublishedLinkChangePermissionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Published doc.
    open class PaperPublishedLinkCreateDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkCreateDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperPublishedLinkCreateDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperPublishedLinkCreateType struct
    open class PaperPublishedLinkCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkCreateTypeSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperPublishedLinkCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unpublished doc.
    open class PaperPublishedLinkDisabledDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkDisabledDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkDisabledDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperPublishedLinkDisabledDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperPublishedLinkDisabledType struct
    open class PaperPublishedLinkDisabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkDisabledTypeSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkDisabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkDisabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkDisabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperPublishedLinkDisabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed published doc.
    open class PaperPublishedLinkViewDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkViewDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkViewDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkViewDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperPublishedLinkViewDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperPublishedLinkViewType struct
    open class PaperPublishedLinkViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperPublishedLinkViewTypeSerializer().serialize(self)))"
        }
    }
    open class PaperPublishedLinkViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperPublishedLinkViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperPublishedLinkViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PaperPublishedLinkViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// A user or group
    public enum ParticipantLogInfo: CustomStringConvertible {
        /// Group details.
        case group(TeamLog.GroupLogInfo)
        /// A user with a Dropbox account.
        case user(TeamLog.UserLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ParticipantLogInfoSerializer().serialize(self)))"
        }
    }
    open class ParticipantLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ParticipantLogInfo) -> JSON {
            switch value {
                case .group(let arg):
                    var d = Serialization.getFields(TeamLog.GroupLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("group")
                    return .dictionary(d)
                case .user(let arg):
                    var d = ["user": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("user")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ParticipantLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "group":
                            let v = TeamLog.GroupLogInfoSerializer().deserialize(json)
                            return ParticipantLogInfo.group(v)
                        case "user":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["user"] ?? .null)
                            return ParticipantLogInfo.user(v)
                        case "other":
                            return ParticipantLogInfo.other
                        default:
                            return ParticipantLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The PassPolicy union
    public enum PassPolicy: CustomStringConvertible {
        /// An unspecified error.
        case allow
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PassPolicySerializer().serialize(self)))"
        }
    }
    open class PassPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PassPolicy) -> JSON {
            switch value {
                case .allow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PassPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allow":
                            return PassPolicy.allow
                        case "disabled":
                            return PassPolicy.disabled
                        case "enabled":
                            return PassPolicy.enabled
                        case "other":
                            return PassPolicy.other
                        default:
                            return PassPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed password.
    open class PasswordChangeDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordChangeDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordChangeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordChangeDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordChangeDetails {
            switch json {
                case .dictionary(_):
                    return PasswordChangeDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PasswordChangeType struct
    open class PasswordChangeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordChangeTypeSerializer().serialize(self)))"
        }
    }
    open class PasswordChangeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordChangeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordChangeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PasswordChangeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset all team member passwords.
    open class PasswordResetAllDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetAllDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordResetAllDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetAllDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetAllDetails {
            switch json {
                case .dictionary(_):
                    return PasswordResetAllDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PasswordResetAllType struct
    open class PasswordResetAllType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetAllTypeSerializer().serialize(self)))"
        }
    }
    open class PasswordResetAllTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetAllType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetAllType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PasswordResetAllType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset password.
    open class PasswordResetDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordResetDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetDetails {
            switch json {
                case .dictionary(_):
                    return PasswordResetDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PasswordResetType struct
    open class PasswordResetType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetTypeSerializer().serialize(self)))"
        }
    }
    open class PasswordResetTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PasswordResetType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team password strength requirements.
    open class PasswordStrengthRequirementsChangePolicyDetails: CustomStringConvertible {
        /// Old password strength policy.
        public let previousValue: TeamPolicies.PasswordStrengthPolicy
        /// New password strength policy.
        public let newValue: TeamPolicies.PasswordStrengthPolicy
        public init(previousValue: TeamPolicies.PasswordStrengthPolicy, newValue: TeamPolicies.PasswordStrengthPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordStrengthRequirementsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordStrengthRequirementsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordStrengthRequirementsChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamPolicies.PasswordStrengthPolicySerializer().serialize(value.previousValue),
            "new_value": TeamPolicies.PasswordStrengthPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordStrengthRequirementsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamPolicies.PasswordStrengthPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamPolicies.PasswordStrengthPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return PasswordStrengthRequirementsChangePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PasswordStrengthRequirementsChangePolicyType struct
    open class PasswordStrengthRequirementsChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordStrengthRequirementsChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PasswordStrengthRequirementsChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordStrengthRequirementsChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordStrengthRequirementsChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PasswordStrengthRequirementsChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Path's details.
    open class PathLogInfo: CustomStringConvertible {
        /// Fully qualified path relative to event's context.
        public let contextual: String?
        /// Path relative to the namespace containing the content.
        public let namespaceRelative: TeamLog.NamespaceRelativePathLogInfo
        public init(namespaceRelative: TeamLog.NamespaceRelativePathLogInfo, contextual: String? = nil) {
            nullableValidator(stringValidator())(contextual)
            self.contextual = contextual
            self.namespaceRelative = namespaceRelative
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PathLogInfoSerializer().serialize(self)))"
        }
    }
    open class PathLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PathLogInfo) -> JSON {
            let output = [ 
            "namespace_relative": TeamLog.NamespaceRelativePathLogInfoSerializer().serialize(value.namespaceRelative),
            "contextual": NullableSerializer(Serialization._StringSerializer).serialize(value.contextual),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PathLogInfo {
            switch json {
                case .dictionary(let dict):
                    let namespaceRelative = TeamLog.NamespaceRelativePathLogInfoSerializer().deserialize(dict["namespace_relative"] ?? .null)
                    let contextual = NullableSerializer(Serialization._StringSerializer).deserialize(dict["contextual"] ?? .null)
                    return PathLogInfo(namespaceRelative: namespaceRelative, contextual: contextual)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added pending secondary email.
    open class PendingSecondaryEmailAddedDetails: CustomStringConvertible {
        /// New pending secondary email.
        public let secondaryEmail: String
        public init(secondaryEmail: String) {
            stringValidator(maxLength: 255)(secondaryEmail)
            self.secondaryEmail = secondaryEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PendingSecondaryEmailAddedDetailsSerializer().serialize(self)))"
        }
    }
    open class PendingSecondaryEmailAddedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PendingSecondaryEmailAddedDetails) -> JSON {
            let output = [ 
            "secondary_email": Serialization._StringSerializer.serialize(value.secondaryEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PendingSecondaryEmailAddedDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryEmail = Serialization._StringSerializer.deserialize(dict["secondary_email"] ?? .null)
                    return PendingSecondaryEmailAddedDetails(secondaryEmail: secondaryEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PendingSecondaryEmailAddedType struct
    open class PendingSecondaryEmailAddedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PendingSecondaryEmailAddedTypeSerializer().serialize(self)))"
        }
    }
    open class PendingSecondaryEmailAddedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PendingSecondaryEmailAddedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PendingSecondaryEmailAddedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PendingSecondaryEmailAddedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled ability of team members to permanently delete content.
    open class PermanentDeleteChangePolicyDetails: CustomStringConvertible {
        /// New permanent delete content policy.
        public let newValue: TeamLog.ContentPermanentDeletePolicy
        /// Previous permanent delete content policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.ContentPermanentDeletePolicy?
        public init(newValue: TeamLog.ContentPermanentDeletePolicy, previousValue: TeamLog.ContentPermanentDeletePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PermanentDeleteChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PermanentDeleteChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PermanentDeleteChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ContentPermanentDeletePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ContentPermanentDeletePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PermanentDeleteChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ContentPermanentDeletePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ContentPermanentDeletePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PermanentDeleteChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PermanentDeleteChangePolicyType struct
    open class PermanentDeleteChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PermanentDeleteChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PermanentDeleteChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PermanentDeleteChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PermanentDeleteChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return PermanentDeleteChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PlacementRestriction union
    public enum PlacementRestriction: CustomStringConvertible {
        /// An unspecified error.
        case australiaOnly
        /// An unspecified error.
        case europeOnly
        /// An unspecified error.
        case japanOnly
        /// An unspecified error.
        case none
        /// An unspecified error.
        case ukOnly
        /// An unspecified error.
        case usS3Only
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PlacementRestrictionSerializer().serialize(self)))"
        }
    }
    open class PlacementRestrictionSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PlacementRestriction) -> JSON {
            switch value {
                case .australiaOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("australia_only")
                    return .dictionary(d)
                case .europeOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("europe_only")
                    return .dictionary(d)
                case .japanOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("japan_only")
                    return .dictionary(d)
                case .none:
                    var d = [String: JSON]()
                    d[".tag"] = .str("none")
                    return .dictionary(d)
                case .ukOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("uk_only")
                    return .dictionary(d)
                case .usS3Only:
                    var d = [String: JSON]()
                    d[".tag"] = .str("us_s3_only")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PlacementRestriction {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "australia_only":
                            return PlacementRestriction.australiaOnly
                        case "europe_only":
                            return PlacementRestriction.europeOnly
                        case "japan_only":
                            return PlacementRestriction.japanOnly
                        case "none":
                            return PlacementRestriction.none
                        case "uk_only":
                            return PlacementRestriction.ukOnly
                        case "us_s3_only":
                            return PlacementRestriction.usS3Only
                        case "other":
                            return PlacementRestriction.other
                        default:
                            return PlacementRestriction.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The PolicyType union
    public enum PolicyType: CustomStringConvertible {
        /// An unspecified error.
        case disposition
        /// An unspecified error.
        case retention
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PolicyTypeSerializer().serialize(self)))"
        }
    }
    open class PolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PolicyType) -> JSON {
            switch value {
                case .disposition:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disposition")
                    return .dictionary(d)
                case .retention:
                    var d = [String: JSON]()
                    d[".tag"] = .str("retention")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PolicyType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disposition":
                            return PolicyType.disposition
                        case "retention":
                            return PolicyType.retention
                        case "other":
                            return PolicyType.other
                        default:
                            return PolicyType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Team merge request acceptance details shown to the primary team
    open class PrimaryTeamRequestAcceptedDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PrimaryTeamRequestAcceptedDetailsSerializer().serialize(self)))"
        }
    }
    open class PrimaryTeamRequestAcceptedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PrimaryTeamRequestAcceptedDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PrimaryTeamRequestAcceptedDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return PrimaryTeamRequestAcceptedDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request cancellation details shown to the primary team
    open class PrimaryTeamRequestCanceledDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PrimaryTeamRequestCanceledDetailsSerializer().serialize(self)))"
        }
    }
    open class PrimaryTeamRequestCanceledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PrimaryTeamRequestCanceledDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PrimaryTeamRequestCanceledDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return PrimaryTeamRequestCanceledDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request expiration details shown to the primary team
    open class PrimaryTeamRequestExpiredDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PrimaryTeamRequestExpiredDetailsSerializer().serialize(self)))"
        }
    }
    open class PrimaryTeamRequestExpiredDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PrimaryTeamRequestExpiredDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PrimaryTeamRequestExpiredDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return PrimaryTeamRequestExpiredDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request reminder details shown to the primary team
    open class PrimaryTeamRequestReminderDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the primary team admin the request was sent to.
        public let sentTo: String
        public init(secondaryTeam: String, sentTo: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PrimaryTeamRequestReminderDetailsSerializer().serialize(self)))"
        }
    }
    open class PrimaryTeamRequestReminderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PrimaryTeamRequestReminderDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PrimaryTeamRequestReminderDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return PrimaryTeamRequestReminderDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Quick action type.
    public enum QuickActionType: CustomStringConvertible {
        /// An unspecified error.
        case deleteSharedLink
        /// An unspecified error.
        case resetPassword
        /// An unspecified error.
        case restoreFileOrFolder
        /// An unspecified error.
        case unlinkApp
        /// An unspecified error.
        case unlinkDevice
        /// An unspecified error.
        case unlinkSession
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(QuickActionTypeSerializer().serialize(self)))"
        }
    }
    open class QuickActionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: QuickActionType) -> JSON {
            switch value {
                case .deleteSharedLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("delete_shared_link")
                    return .dictionary(d)
                case .resetPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reset_password")
                    return .dictionary(d)
                case .restoreFileOrFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("restore_file_or_folder")
                    return .dictionary(d)
                case .unlinkApp:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlink_app")
                    return .dictionary(d)
                case .unlinkDevice:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlink_device")
                    return .dictionary(d)
                case .unlinkSession:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlink_session")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> QuickActionType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "delete_shared_link":
                            return QuickActionType.deleteSharedLink
                        case "reset_password":
                            return QuickActionType.resetPassword
                        case "restore_file_or_folder":
                            return QuickActionType.restoreFileOrFolder
                        case "unlink_app":
                            return QuickActionType.unlinkApp
                        case "unlink_device":
                            return QuickActionType.unlinkDevice
                        case "unlink_session":
                            return QuickActionType.unlinkSession
                        case "other":
                            return QuickActionType.other
                        default:
                            return QuickActionType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Recipients Configuration
    open class RecipientsConfiguration: CustomStringConvertible {
        /// Recipients setting type.
        public let recipientSettingType: TeamLog.AlertRecipientsSettingType?
        /// A list of user emails to notify.
        public let emails: Array<String>?
        /// A list of groups to notify.
        public let groups: Array<String>?
        public init(recipientSettingType: TeamLog.AlertRecipientsSettingType? = nil, emails: Array<String>? = nil, groups: Array<String>? = nil) {
            self.recipientSettingType = recipientSettingType
            nullableValidator(arrayValidator(itemValidator: stringValidator(maxLength: 255)))(emails)
            self.emails = emails
            nullableValidator(arrayValidator(itemValidator: stringValidator()))(groups)
            self.groups = groups
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RecipientsConfigurationSerializer().serialize(self)))"
        }
    }
    open class RecipientsConfigurationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RecipientsConfiguration) -> JSON {
            let output = [ 
            "recipient_setting_type": NullableSerializer(TeamLog.AlertRecipientsSettingTypeSerializer()).serialize(value.recipientSettingType),
            "emails": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.emails),
            "groups": NullableSerializer(ArraySerializer(Serialization._StringSerializer)).serialize(value.groups),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RecipientsConfiguration {
            switch json {
                case .dictionary(let dict):
                    let recipientSettingType = NullableSerializer(TeamLog.AlertRecipientsSettingTypeSerializer()).deserialize(dict["recipient_setting_type"] ?? .null)
                    let emails = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["emails"] ?? .null)
                    let groups = NullableSerializer(ArraySerializer(Serialization._StringSerializer)).deserialize(dict["groups"] ?? .null)
                    return RecipientsConfiguration(recipientSettingType: recipientSettingType, emails: emails, groups: groups)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Provides the indices of the source asset and the destination asset for a relocate action.
    open class RelocateAssetReferencesLogInfo: CustomStringConvertible {
        /// Source asset position in the Assets list.
        public let srcAssetIndex: UInt64
        /// Destination asset position in the Assets list.
        public let destAssetIndex: UInt64
        public init(srcAssetIndex: UInt64, destAssetIndex: UInt64) {
            comparableValidator()(srcAssetIndex)
            self.srcAssetIndex = srcAssetIndex
            comparableValidator()(destAssetIndex)
            self.destAssetIndex = destAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RelocateAssetReferencesLogInfoSerializer().serialize(self)))"
        }
    }
    open class RelocateAssetReferencesLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RelocateAssetReferencesLogInfo) -> JSON {
            let output = [ 
            "src_asset_index": Serialization._UInt64Serializer.serialize(value.srcAssetIndex),
            "dest_asset_index": Serialization._UInt64Serializer.serialize(value.destAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RelocateAssetReferencesLogInfo {
            switch json {
                case .dictionary(let dict):
                    let srcAssetIndex = Serialization._UInt64Serializer.deserialize(dict["src_asset_index"] ?? .null)
                    let destAssetIndex = Serialization._UInt64Serializer.deserialize(dict["dest_asset_index"] ?? .null)
                    return RelocateAssetReferencesLogInfo(srcAssetIndex: srcAssetIndex, destAssetIndex: destAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reseller information.
    open class ResellerLogInfo: CustomStringConvertible {
        /// Reseller name.
        public let resellerName: String
        /// Reseller email.
        public let resellerEmail: String
        public init(resellerName: String, resellerEmail: String) {
            stringValidator()(resellerName)
            self.resellerName = resellerName
            stringValidator(maxLength: 255)(resellerEmail)
            self.resellerEmail = resellerEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerLogInfoSerializer().serialize(self)))"
        }
    }
    open class ResellerLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerLogInfo) -> JSON {
            let output = [ 
            "reseller_name": Serialization._StringSerializer.serialize(value.resellerName),
            "reseller_email": Serialization._StringSerializer.serialize(value.resellerEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerLogInfo {
            switch json {
                case .dictionary(let dict):
                    let resellerName = Serialization._StringSerializer.deserialize(dict["reseller_name"] ?? .null)
                    let resellerEmail = Serialization._StringSerializer.deserialize(dict["reseller_email"] ?? .null)
                    return ResellerLogInfo(resellerName: resellerName, resellerEmail: resellerEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ResellerRole union
    public enum ResellerRole: CustomStringConvertible {
        /// An unspecified error.
        case notReseller
        /// An unspecified error.
        case resellerAdmin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerRoleSerializer().serialize(self)))"
        }
    }
    open class ResellerRoleSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerRole) -> JSON {
            switch value {
                case .notReseller:
                    var d = [String: JSON]()
                    d[".tag"] = .str("not_reseller")
                    return .dictionary(d)
                case .resellerAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_admin")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ResellerRole {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "not_reseller":
                            return ResellerRole.notReseller
                        case "reseller_admin":
                            return ResellerRole.resellerAdmin
                        case "other":
                            return ResellerRole.other
                        default:
                            return ResellerRole.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled/disabled reseller support.
    open class ResellerSupportChangePolicyDetails: CustomStringConvertible {
        /// New Reseller support policy.
        public let newValue: TeamLog.ResellerSupportPolicy
        /// Previous Reseller support policy.
        public let previousValue: TeamLog.ResellerSupportPolicy
        public init(newValue: TeamLog.ResellerSupportPolicy, previousValue: TeamLog.ResellerSupportPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ResellerSupportPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ResellerSupportPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ResellerSupportPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ResellerSupportPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ResellerSupportChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ResellerSupportChangePolicyType struct
    open class ResellerSupportChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ResellerSupportChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if reseller can access the admin console as administrator
    public enum ResellerSupportPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportPolicySerializer().serialize(self)))"
        }
    }
    open class ResellerSupportPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ResellerSupportPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ResellerSupportPolicy.disabled
                        case "enabled":
                            return ResellerSupportPolicy.enabled
                        case "other":
                            return ResellerSupportPolicy.other
                        default:
                            return ResellerSupportPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Ended reseller support session.
    open class ResellerSupportSessionEndDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionEndDetailsSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionEndDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionEndDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionEndDetails {
            switch json {
                case .dictionary(_):
                    return ResellerSupportSessionEndDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ResellerSupportSessionEndType struct
    open class ResellerSupportSessionEndType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionEndTypeSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionEndTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionEndType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionEndType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ResellerSupportSessionEndType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started reseller support session.
    open class ResellerSupportSessionStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionStartDetailsSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionStartDetails {
            switch json {
                case .dictionary(_):
                    return ResellerSupportSessionStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ResellerSupportSessionStartType struct
    open class ResellerSupportSessionStartType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionStartTypeSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionStartTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionStartType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionStartType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ResellerSupportSessionStartType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Rewound a folder.
    open class RewindFolderDetails: CustomStringConvertible {
        /// Folder was Rewound to this date.
        public let rewindFolderTargetTsMs: Date
        public init(rewindFolderTargetTsMs: Date) {
            self.rewindFolderTargetTsMs = rewindFolderTargetTsMs
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RewindFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class RewindFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RewindFolderDetails) -> JSON {
            let output = [ 
            "rewind_folder_target_ts_ms": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.rewindFolderTargetTsMs),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RewindFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let rewindFolderTargetTsMs = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["rewind_folder_target_ts_ms"] ?? .null)
                    return RewindFolderDetails(rewindFolderTargetTsMs: rewindFolderTargetTsMs)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RewindFolderType struct
    open class RewindFolderType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RewindFolderTypeSerializer().serialize(self)))"
        }
    }
    open class RewindFolderTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RewindFolderType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RewindFolderType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return RewindFolderType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether team members can rewind
    public enum RewindPolicy: CustomStringConvertible {
        /// An unspecified error.
        case adminsOnly
        /// An unspecified error.
        case everyone
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RewindPolicySerializer().serialize(self)))"
        }
    }
    open class RewindPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RewindPolicy) -> JSON {
            switch value {
                case .adminsOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admins_only")
                    return .dictionary(d)
                case .everyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("everyone")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> RewindPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admins_only":
                            return RewindPolicy.adminsOnly
                        case "everyone":
                            return RewindPolicy.everyone
                        case "other":
                            return RewindPolicy.other
                        default:
                            return RewindPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed Rewind policy for team.
    open class RewindPolicyChangedDetails: CustomStringConvertible {
        /// New Dropbox Rewind policy.
        public let newValue: TeamLog.RewindPolicy
        /// Previous Dropbox Rewind policy.
        public let previousValue: TeamLog.RewindPolicy
        public init(newValue: TeamLog.RewindPolicy, previousValue: TeamLog.RewindPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RewindPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class RewindPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RewindPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.RewindPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.RewindPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RewindPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.RewindPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.RewindPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return RewindPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The RewindPolicyChangedType struct
    open class RewindPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RewindPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class RewindPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RewindPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RewindPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return RewindPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted secondary email.
    open class SecondaryEmailDeletedDetails: CustomStringConvertible {
        /// Deleted secondary email.
        public let secondaryEmail: String
        public init(secondaryEmail: String) {
            stringValidator(maxLength: 255)(secondaryEmail)
            self.secondaryEmail = secondaryEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryEmailDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryEmailDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryEmailDeletedDetails) -> JSON {
            let output = [ 
            "secondary_email": Serialization._StringSerializer.serialize(value.secondaryEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryEmailDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryEmail = Serialization._StringSerializer.deserialize(dict["secondary_email"] ?? .null)
                    return SecondaryEmailDeletedDetails(secondaryEmail: secondaryEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SecondaryEmailDeletedType struct
    open class SecondaryEmailDeletedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryEmailDeletedTypeSerializer().serialize(self)))"
        }
    }
    open class SecondaryEmailDeletedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryEmailDeletedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryEmailDeletedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SecondaryEmailDeletedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Verified secondary email.
    open class SecondaryEmailVerifiedDetails: CustomStringConvertible {
        /// Verified secondary email.
        public let secondaryEmail: String
        public init(secondaryEmail: String) {
            stringValidator(maxLength: 255)(secondaryEmail)
            self.secondaryEmail = secondaryEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryEmailVerifiedDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryEmailVerifiedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryEmailVerifiedDetails) -> JSON {
            let output = [ 
            "secondary_email": Serialization._StringSerializer.serialize(value.secondaryEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryEmailVerifiedDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryEmail = Serialization._StringSerializer.deserialize(dict["secondary_email"] ?? .null)
                    return SecondaryEmailVerifiedDetails(secondaryEmail: secondaryEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SecondaryEmailVerifiedType struct
    open class SecondaryEmailVerifiedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryEmailVerifiedTypeSerializer().serialize(self)))"
        }
    }
    open class SecondaryEmailVerifiedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryEmailVerifiedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryEmailVerifiedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SecondaryEmailVerifiedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SecondaryMailsPolicy union
    public enum SecondaryMailsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryMailsPolicySerializer().serialize(self)))"
        }
    }
    open class SecondaryMailsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryMailsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SecondaryMailsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return SecondaryMailsPolicy.disabled
                        case "enabled":
                            return SecondaryMailsPolicy.enabled
                        case "other":
                            return SecondaryMailsPolicy.other
                        default:
                            return SecondaryMailsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Secondary mails policy changed.
    open class SecondaryMailsPolicyChangedDetails: CustomStringConvertible {
        /// Previous secondary mails policy.
        public let previousValue: TeamLog.SecondaryMailsPolicy
        /// New secondary mails policy.
        public let newValue: TeamLog.SecondaryMailsPolicy
        public init(previousValue: TeamLog.SecondaryMailsPolicy, newValue: TeamLog.SecondaryMailsPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryMailsPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryMailsPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryMailsPolicyChangedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SecondaryMailsPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.SecondaryMailsPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryMailsPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SecondaryMailsPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SecondaryMailsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return SecondaryMailsPolicyChangedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SecondaryMailsPolicyChangedType struct
    open class SecondaryMailsPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryMailsPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class SecondaryMailsPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryMailsPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryMailsPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SecondaryMailsPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request acceptance details shown to the secondary team
    open class SecondaryTeamRequestAcceptedDetails: CustomStringConvertible {
        /// The primary team name.
        public let primaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(primaryTeam: String, sentBy: String) {
            stringValidator()(primaryTeam)
            self.primaryTeam = primaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryTeamRequestAcceptedDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryTeamRequestAcceptedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryTeamRequestAcceptedDetails) -> JSON {
            let output = [ 
            "primary_team": Serialization._StringSerializer.serialize(value.primaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryTeamRequestAcceptedDetails {
            switch json {
                case .dictionary(let dict):
                    let primaryTeam = Serialization._StringSerializer.deserialize(dict["primary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return SecondaryTeamRequestAcceptedDetails(primaryTeam: primaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request cancellation details shown to the secondary team
    open class SecondaryTeamRequestCanceledDetails: CustomStringConvertible {
        /// The email of the primary team admin that the request was sent to.
        public let sentTo: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(sentTo: String, sentBy: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryTeamRequestCanceledDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryTeamRequestCanceledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryTeamRequestCanceledDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryTeamRequestCanceledDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return SecondaryTeamRequestCanceledDetails(sentTo: sentTo, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request expiration details shown to the secondary team
    open class SecondaryTeamRequestExpiredDetails: CustomStringConvertible {
        /// The email of the primary team admin the request was sent to.
        public let sentTo: String
        public init(sentTo: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryTeamRequestExpiredDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryTeamRequestExpiredDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryTeamRequestExpiredDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryTeamRequestExpiredDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return SecondaryTeamRequestExpiredDetails(sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request reminder details shown to the secondary team
    open class SecondaryTeamRequestReminderDetails: CustomStringConvertible {
        /// The email of the primary team admin the request was sent to.
        public let sentTo: String
        public init(sentTo: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SecondaryTeamRequestReminderDetailsSerializer().serialize(self)))"
        }
    }
    open class SecondaryTeamRequestReminderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SecondaryTeamRequestReminderDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SecondaryTeamRequestReminderDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return SecondaryTeamRequestReminderDetails(sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to send for signature feature
    public enum SendForSignaturePolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SendForSignaturePolicySerializer().serialize(self)))"
        }
    }
    open class SendForSignaturePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SendForSignaturePolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SendForSignaturePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return SendForSignaturePolicy.disabled
                        case "enabled":
                            return SendForSignaturePolicy.enabled
                        case "other":
                            return SendForSignaturePolicy.other
                        default:
                            return SendForSignaturePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed send for signature policy for team.
    open class SendForSignaturePolicyChangedDetails: CustomStringConvertible {
        /// New send for signature policy.
        public let newValue: TeamLog.SendForSignaturePolicy
        /// Previous send for signature policy.
        public let previousValue: TeamLog.SendForSignaturePolicy
        public init(newValue: TeamLog.SendForSignaturePolicy, previousValue: TeamLog.SendForSignaturePolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SendForSignaturePolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class SendForSignaturePolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SendForSignaturePolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SendForSignaturePolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.SendForSignaturePolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SendForSignaturePolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SendForSignaturePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.SendForSignaturePolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return SendForSignaturePolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SendForSignaturePolicyChangedType struct
    open class SendForSignaturePolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SendForSignaturePolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class SendForSignaturePolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SendForSignaturePolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SendForSignaturePolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SendForSignaturePolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team to shared folder.
    open class SfAddGroupDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Sharing permission.
        public let sharingPermission: String?
        /// Team name.
        public let teamName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String, teamName: String, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAddGroupDetailsSerializer().serialize(self)))"
        }
    }
    open class SfAddGroupDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAddGroupDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAddGroupDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfAddGroupDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, teamName: teamName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfAddGroupType struct
    open class SfAddGroupType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAddGroupTypeSerializer().serialize(self)))"
        }
    }
    open class SfAddGroupTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAddGroupType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAddGroupType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfAddGroupType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Allowed non-collaborators to view links to files in shared folder.
    open class SfAllowNonMembersToViewSharedLinksDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Shared folder type.
        public let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAllowNonMembersToViewSharedLinksDetailsSerializer().serialize(self)))"
        }
    }
    open class SfAllowNonMembersToViewSharedLinksDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAllowNonMembersToViewSharedLinksDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAllowNonMembersToViewSharedLinksDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SfAllowNonMembersToViewSharedLinksDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfAllowNonMembersToViewSharedLinksType struct
    open class SfAllowNonMembersToViewSharedLinksType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAllowNonMembersToViewSharedLinksTypeSerializer().serialize(self)))"
        }
    }
    open class SfAllowNonMembersToViewSharedLinksTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAllowNonMembersToViewSharedLinksType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAllowNonMembersToViewSharedLinksType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfAllowNonMembersToViewSharedLinksType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set team members to see warning before sharing folders outside team.
    open class SfExternalInviteWarnDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// New sharing permission.
        public let newSharingPermission: String?
        /// Previous sharing permission.
        public let previousSharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newSharingPermission: String? = nil, previousSharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfExternalInviteWarnDetailsSerializer().serialize(self)))"
        }
    }
    open class SfExternalInviteWarnDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfExternalInviteWarnDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfExternalInviteWarnDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    return SfExternalInviteWarnDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newSharingPermission: newSharingPermission, previousSharingPermission: previousSharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfExternalInviteWarnType struct
    open class SfExternalInviteWarnType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfExternalInviteWarnTypeSerializer().serialize(self)))"
        }
    }
    open class SfExternalInviteWarnTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfExternalInviteWarnType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfExternalInviteWarnType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfExternalInviteWarnType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed Facebook user's role in shared folder.
    open class SfFbInviteChangeRoleDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Previous sharing permission.
        public let previousSharingPermission: String?
        /// New sharing permission.
        public let newSharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, previousSharingPermission: String? = nil, newSharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbInviteChangeRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SfFbInviteChangeRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbInviteChangeRoleDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbInviteChangeRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    return SfFbInviteChangeRoleDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, previousSharingPermission: previousSharingPermission, newSharingPermission: newSharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfFbInviteChangeRoleType struct
    open class SfFbInviteChangeRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbInviteChangeRoleTypeSerializer().serialize(self)))"
        }
    }
    open class SfFbInviteChangeRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbInviteChangeRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbInviteChangeRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfFbInviteChangeRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited Facebook users to shared folder.
    open class SfFbInviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Sharing permission.
        public let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfFbInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbInviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfFbInviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfFbInviteType struct
    open class SfFbInviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbInviteTypeSerializer().serialize(self)))"
        }
    }
    open class SfFbInviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbInviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbInviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfFbInviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Uninvited Facebook user from shared folder.
    open class SfFbUninviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbUninviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfFbUninviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbUninviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbUninviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfFbUninviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfFbUninviteType struct
    open class SfFbUninviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfFbUninviteTypeSerializer().serialize(self)))"
        }
    }
    open class SfFbUninviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfFbUninviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfFbUninviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfFbUninviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited group to shared folder.
    open class SfInviteGroupDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        public init(targetAssetIndex: UInt64) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfInviteGroupDetailsSerializer().serialize(self)))"
        }
    }
    open class SfInviteGroupDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfInviteGroupDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfInviteGroupDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    return SfInviteGroupDetails(targetAssetIndex: targetAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfInviteGroupType struct
    open class SfInviteGroupType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfInviteGroupTypeSerializer().serialize(self)))"
        }
    }
    open class SfInviteGroupTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfInviteGroupType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfInviteGroupType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfInviteGroupType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Granted access to shared folder.
    open class SfTeamGrantAccessDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamGrantAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamGrantAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamGrantAccessDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamGrantAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamGrantAccessDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamGrantAccessType struct
    open class SfTeamGrantAccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamGrantAccessTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamGrantAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamGrantAccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamGrantAccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamGrantAccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member's role in shared folder.
    open class SfTeamInviteChangeRoleDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// New sharing permission.
        public let newSharingPermission: String?
        /// Previous sharing permission.
        public let previousSharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newSharingPermission: String? = nil, previousSharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteChangeRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteChangeRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteChangeRoleDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteChangeRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    return SfTeamInviteChangeRoleDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newSharingPermission: newSharingPermission, previousSharingPermission: previousSharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamInviteChangeRoleType struct
    open class SfTeamInviteChangeRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteChangeRoleTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteChangeRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteChangeRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteChangeRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamInviteChangeRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited team members to shared folder.
    open class SfTeamInviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Sharing permission.
        public let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfTeamInviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamInviteType struct
    open class SfTeamInviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamInviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Joined team member's shared folder.
    open class SfTeamJoinDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamJoinDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Joined team member's shared folder from link.
    open class SfTeamJoinFromOobLinkDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        /// Shared link token key.
        public let tokenKey: String?
        /// Sharing permission.
        public let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, tokenKey: String? = nil, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(tokenKey)
            self.tokenKey = tokenKey
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinFromOobLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinFromOobLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinFromOobLinkDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "token_key": NullableSerializer(Serialization._StringSerializer).serialize(value.tokenKey),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinFromOobLinkDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let tokenKey = NullableSerializer(Serialization._StringSerializer).deserialize(dict["token_key"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfTeamJoinFromOobLinkDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, tokenKey: tokenKey, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamJoinFromOobLinkType struct
    open class SfTeamJoinFromOobLinkType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinFromOobLinkTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinFromOobLinkTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinFromOobLinkType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinFromOobLinkType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamJoinFromOobLinkType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamJoinType struct
    open class SfTeamJoinType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamJoinType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unshared folder with team member.
    open class SfTeamUninviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        /// Original shared folder name.
        public let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamUninviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamUninviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamUninviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamUninviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamUninviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SfTeamUninviteType struct
    open class SfTeamUninviteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamUninviteTypeSerializer().serialize(self)))"
        }
    }
    open class SfTeamUninviteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamUninviteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamUninviteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SfTeamUninviteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited user to Dropbox and added them to shared file/folder.
    open class SharedContentAddInviteesDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// A list of invitees.
        public let invitees: Array<String>
        public init(sharedContentAccessLevel: Sharing.AccessLevel, invitees: Array<String>) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            arrayValidator(itemValidator: stringValidator(maxLength: 255))(invitees)
            self.invitees = invitees
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddInviteesDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddInviteesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddInviteesDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "invitees": ArraySerializer(Serialization._StringSerializer).serialize(value.invitees),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddInviteesDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let invitees = ArraySerializer(Serialization._StringSerializer).deserialize(dict["invitees"] ?? .null)
                    return SharedContentAddInviteesDetails(sharedContentAccessLevel: sharedContentAccessLevel, invitees: invitees)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentAddInviteesType struct
    open class SharedContentAddInviteesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddInviteesTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddInviteesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddInviteesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddInviteesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentAddInviteesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added expiration date to link for shared file/folder.
    open class SharedContentAddLinkExpiryDetails: CustomStringConvertible {
        /// New shared content link expiration date. Might be missing due to historical data gap.
        public let newValue: Date?
        public init(newValue: Date? = nil) {
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkExpiryDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["new_value"] ?? .null)
                    return SharedContentAddLinkExpiryDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentAddLinkExpiryType struct
    open class SharedContentAddLinkExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentAddLinkExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added password to link for shared file/folder.
    open class SharedContentAddLinkPasswordDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkPasswordDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkPasswordDetails {
            switch json {
                case .dictionary(_):
                    return SharedContentAddLinkPasswordDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentAddLinkPasswordType struct
    open class SharedContentAddLinkPasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkPasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkPasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkPasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkPasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentAddLinkPasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added users and/or groups to shared file/folder.
    open class SharedContentAddMemberDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        public init(sharedContentAccessLevel: Sharing.AccessLevel) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddMemberDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    return SharedContentAddMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentAddMemberType struct
    open class SharedContentAddMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddMemberTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentAddMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can download shared file/folder.
    open class SharedContentChangeDownloadsPolicyDetails: CustomStringConvertible {
        /// New downloads policy.
        public let newValue: TeamLog.DownloadPolicyType
        /// Previous downloads policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.DownloadPolicyType?
        public init(newValue: TeamLog.DownloadPolicyType, previousValue: TeamLog.DownloadPolicyType? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeDownloadsPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeDownloadsPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeDownloadsPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.DownloadPolicyTypeSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DownloadPolicyTypeSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeDownloadsPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.DownloadPolicyTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DownloadPolicyTypeSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeDownloadsPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeDownloadsPolicyType struct
    open class SharedContentChangeDownloadsPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeDownloadsPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeDownloadsPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeDownloadsPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeDownloadsPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeDownloadsPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed access type of invitee to shared file/folder before invite was accepted.
    open class SharedContentChangeInviteeRoleDetails: CustomStringConvertible {
        /// Previous access level. Might be missing due to historical data gap.
        public let previousAccessLevel: Sharing.AccessLevel?
        /// New access level.
        public let newAccessLevel: Sharing.AccessLevel
        /// The invitee whose role was changed.
        public let invitee: String
        public init(newAccessLevel: Sharing.AccessLevel, invitee: String, previousAccessLevel: Sharing.AccessLevel? = nil) {
            self.previousAccessLevel = previousAccessLevel
            self.newAccessLevel = newAccessLevel
            stringValidator(maxLength: 255)(invitee)
            self.invitee = invitee
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeInviteeRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeInviteeRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeInviteeRoleDetails) -> JSON {
            let output = [ 
            "new_access_level": Sharing.AccessLevelSerializer().serialize(value.newAccessLevel),
            "invitee": Serialization._StringSerializer.serialize(value.invitee),
            "previous_access_level": NullableSerializer(Sharing.AccessLevelSerializer()).serialize(value.previousAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeInviteeRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let newAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["new_access_level"] ?? .null)
                    let invitee = Serialization._StringSerializer.deserialize(dict["invitee"] ?? .null)
                    let previousAccessLevel = NullableSerializer(Sharing.AccessLevelSerializer()).deserialize(dict["previous_access_level"] ?? .null)
                    return SharedContentChangeInviteeRoleDetails(newAccessLevel: newAccessLevel, invitee: invitee, previousAccessLevel: previousAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeInviteeRoleType struct
    open class SharedContentChangeInviteeRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeInviteeRoleTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeInviteeRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeInviteeRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeInviteeRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeInviteeRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed link audience of shared file/folder.
    open class SharedContentChangeLinkAudienceDetails: CustomStringConvertible {
        /// New link audience value.
        public let newValue: Sharing.LinkAudience
        /// Previous link audience value.
        public let previousValue: Sharing.LinkAudience?
        public init(newValue: Sharing.LinkAudience, previousValue: Sharing.LinkAudience? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkAudienceDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkAudienceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkAudienceDetails) -> JSON {
            let output = [ 
            "new_value": Sharing.LinkAudienceSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Sharing.LinkAudienceSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkAudienceDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Sharing.LinkAudienceSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.LinkAudienceSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeLinkAudienceDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeLinkAudienceType struct
    open class SharedContentChangeLinkAudienceType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkAudienceTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkAudienceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkAudienceType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkAudienceType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeLinkAudienceType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed link expiration of shared file/folder.
    open class SharedContentChangeLinkExpiryDetails: CustomStringConvertible {
        /// New shared content link expiration date. Might be missing due to historical data gap.
        public let newValue: Date?
        /// Previous shared content link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(newValue: Date? = nil, previousValue: Date? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkExpiryDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.newValue),
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeLinkExpiryDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeLinkExpiryType struct
    open class SharedContentChangeLinkExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeLinkExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed link password of shared file/folder.
    open class SharedContentChangeLinkPasswordDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkPasswordDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkPasswordDetails {
            switch json {
                case .dictionary(_):
                    return SharedContentChangeLinkPasswordDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeLinkPasswordType struct
    open class SharedContentChangeLinkPasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkPasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkPasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkPasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkPasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeLinkPasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed access type of shared file/folder member.
    open class SharedContentChangeMemberRoleDetails: CustomStringConvertible {
        /// Previous access level. Might be missing due to historical data gap.
        public let previousAccessLevel: Sharing.AccessLevel?
        /// New access level.
        public let newAccessLevel: Sharing.AccessLevel
        public init(newAccessLevel: Sharing.AccessLevel, previousAccessLevel: Sharing.AccessLevel? = nil) {
            self.previousAccessLevel = previousAccessLevel
            self.newAccessLevel = newAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "new_access_level": Sharing.AccessLevelSerializer().serialize(value.newAccessLevel),
            "previous_access_level": NullableSerializer(Sharing.AccessLevelSerializer()).serialize(value.previousAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let newAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["new_access_level"] ?? .null)
                    let previousAccessLevel = NullableSerializer(Sharing.AccessLevelSerializer()).deserialize(dict["previous_access_level"] ?? .null)
                    return SharedContentChangeMemberRoleDetails(newAccessLevel: newAccessLevel, previousAccessLevel: previousAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeMemberRoleType struct
    open class SharedContentChangeMemberRoleType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeMemberRoleTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeMemberRoleTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeMemberRoleType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeMemberRoleType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeMemberRoleType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can see who viewed shared file/folder.
    open class SharedContentChangeViewerInfoPolicyDetails: CustomStringConvertible {
        /// New viewer info policy.
        public let newValue: Sharing.ViewerInfoPolicy
        /// Previous view info policy.
        public let previousValue: Sharing.ViewerInfoPolicy?
        public init(newValue: Sharing.ViewerInfoPolicy, previousValue: Sharing.ViewerInfoPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeViewerInfoPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeViewerInfoPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeViewerInfoPolicyDetails) -> JSON {
            let output = [ 
            "new_value": Sharing.ViewerInfoPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Sharing.ViewerInfoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeViewerInfoPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Sharing.ViewerInfoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.ViewerInfoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeViewerInfoPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentChangeViewerInfoPolicyType struct
    open class SharedContentChangeViewerInfoPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeViewerInfoPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeViewerInfoPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeViewerInfoPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeViewerInfoPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentChangeViewerInfoPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Acquired membership of shared file/folder by accepting invite.
    open class SharedContentClaimInvitationDetails: CustomStringConvertible {
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentLink: String? = nil) {
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentClaimInvitationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentClaimInvitationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentClaimInvitationDetails) -> JSON {
            let output = [ 
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentClaimInvitationDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedContentClaimInvitationDetails(sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentClaimInvitationType struct
    open class SharedContentClaimInvitationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentClaimInvitationTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentClaimInvitationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentClaimInvitationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentClaimInvitationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentClaimInvitationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Copied shared file/folder to own Dropbox.
    open class SharedContentCopyDetails: CustomStringConvertible {
        /// Shared content link.
        public let sharedContentLink: String
        /// The shared content owner.
        public let sharedContentOwner: TeamLog.UserLogInfo?
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// The path where the member saved the content.
        public let destinationPath: String
        public init(sharedContentLink: String, sharedContentAccessLevel: Sharing.AccessLevel, destinationPath: String, sharedContentOwner: TeamLog.UserLogInfo? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.sharedContentOwner = sharedContentOwner
            self.sharedContentAccessLevel = sharedContentAccessLevel
            stringValidator()(destinationPath)
            self.destinationPath = destinationPath
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentCopyDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "destination_path": Serialization._StringSerializer.serialize(value.destinationPath),
            "shared_content_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedContentOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentCopyDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let destinationPath = Serialization._StringSerializer.deserialize(dict["destination_path"] ?? .null)
                    let sharedContentOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_content_owner"] ?? .null)
                    return SharedContentCopyDetails(sharedContentLink: sharedContentLink, sharedContentAccessLevel: sharedContentAccessLevel, destinationPath: destinationPath, sharedContentOwner: sharedContentOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentCopyType struct
    open class SharedContentCopyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentCopyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentCopyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentCopyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentCopyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentCopyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded shared file/folder.
    open class SharedContentDownloadDetails: CustomStringConvertible {
        /// Shared content link.
        public let sharedContentLink: String
        /// The shared content owner.
        public let sharedContentOwner: TeamLog.UserLogInfo?
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        public init(sharedContentLink: String, sharedContentAccessLevel: Sharing.AccessLevel, sharedContentOwner: TeamLog.UserLogInfo? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.sharedContentOwner = sharedContentOwner
            self.sharedContentAccessLevel = sharedContentAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentDownloadDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedContentOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_content_owner"] ?? .null)
                    return SharedContentDownloadDetails(sharedContentLink: sharedContentLink, sharedContentAccessLevel: sharedContentAccessLevel, sharedContentOwner: sharedContentOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentDownloadType struct
    open class SharedContentDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Left shared file/folder.
    open class SharedContentRelinquishMembershipDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRelinquishMembershipDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRelinquishMembershipDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRelinquishMembershipDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRelinquishMembershipDetails {
            switch json {
                case .dictionary(_):
                    return SharedContentRelinquishMembershipDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRelinquishMembershipType struct
    open class SharedContentRelinquishMembershipType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRelinquishMembershipTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRelinquishMembershipTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRelinquishMembershipType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRelinquishMembershipType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRelinquishMembershipType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed invitee from shared file/folder before invite was accepted.
    open class SharedContentRemoveInviteesDetails: CustomStringConvertible {
        /// A list of invitees.
        public let invitees: Array<String>
        public init(invitees: Array<String>) {
            arrayValidator(itemValidator: stringValidator(maxLength: 255))(invitees)
            self.invitees = invitees
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveInviteesDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveInviteesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveInviteesDetails) -> JSON {
            let output = [ 
            "invitees": ArraySerializer(Serialization._StringSerializer).serialize(value.invitees),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveInviteesDetails {
            switch json {
                case .dictionary(let dict):
                    let invitees = ArraySerializer(Serialization._StringSerializer).deserialize(dict["invitees"] ?? .null)
                    return SharedContentRemoveInviteesDetails(invitees: invitees)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRemoveInviteesType struct
    open class SharedContentRemoveInviteesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveInviteesTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveInviteesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveInviteesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveInviteesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRemoveInviteesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed link expiration date of shared file/folder.
    open class SharedContentRemoveLinkExpiryDetails: CustomStringConvertible {
        /// Previous shared content link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(previousValue: Date? = nil) {
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkExpiryDetails) -> JSON {
            let output = [ 
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentRemoveLinkExpiryDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRemoveLinkExpiryType struct
    open class SharedContentRemoveLinkExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRemoveLinkExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed link password of shared file/folder.
    open class SharedContentRemoveLinkPasswordDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkPasswordDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkPasswordDetails {
            switch json {
                case .dictionary(_):
                    return SharedContentRemoveLinkPasswordDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRemoveLinkPasswordType struct
    open class SharedContentRemoveLinkPasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkPasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkPasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkPasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkPasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRemoveLinkPasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed user/group from shared file/folder.
    open class SharedContentRemoveMemberDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel?
        public init(sharedContentAccessLevel: Sharing.AccessLevel? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveMemberDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": NullableSerializer(Sharing.AccessLevelSerializer()).serialize(value.sharedContentAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = NullableSerializer(Sharing.AccessLevelSerializer()).deserialize(dict["shared_content_access_level"] ?? .null)
                    return SharedContentRemoveMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRemoveMemberType struct
    open class SharedContentRemoveMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveMemberTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRemoveMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested access to shared file/folder.
    open class SharedContentRequestAccessDetails: CustomStringConvertible {
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentLink: String? = nil) {
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRequestAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRequestAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRequestAccessDetails) -> JSON {
            let output = [ 
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRequestAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedContentRequestAccessDetails(sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRequestAccessType struct
    open class SharedContentRequestAccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRequestAccessTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRequestAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRequestAccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRequestAccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRequestAccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored shared file/folder invitees.
    open class SharedContentRestoreInviteesDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// A list of invitees.
        public let invitees: Array<String>
        public init(sharedContentAccessLevel: Sharing.AccessLevel, invitees: Array<String>) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            arrayValidator(itemValidator: stringValidator(maxLength: 255))(invitees)
            self.invitees = invitees
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRestoreInviteesDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRestoreInviteesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRestoreInviteesDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "invitees": ArraySerializer(Serialization._StringSerializer).serialize(value.invitees),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRestoreInviteesDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let invitees = ArraySerializer(Serialization._StringSerializer).deserialize(dict["invitees"] ?? .null)
                    return SharedContentRestoreInviteesDetails(sharedContentAccessLevel: sharedContentAccessLevel, invitees: invitees)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRestoreInviteesType struct
    open class SharedContentRestoreInviteesType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRestoreInviteesTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRestoreInviteesTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRestoreInviteesType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRestoreInviteesType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRestoreInviteesType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored users and/or groups to membership of shared file/folder.
    open class SharedContentRestoreMemberDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        public init(sharedContentAccessLevel: Sharing.AccessLevel) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRestoreMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRestoreMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRestoreMemberDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRestoreMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    return SharedContentRestoreMemberDetails(sharedContentAccessLevel: sharedContentAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentRestoreMemberType struct
    open class SharedContentRestoreMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRestoreMemberTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentRestoreMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRestoreMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRestoreMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentRestoreMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unshared file/folder by clearing membership.
    open class SharedContentUnshareDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentUnshareDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentUnshareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentUnshareDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentUnshareDetails {
            switch json {
                case .dictionary(_):
                    return SharedContentUnshareDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentUnshareType struct
    open class SharedContentUnshareType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentUnshareTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentUnshareTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentUnshareType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentUnshareType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentUnshareType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Previewed shared file/folder.
    open class SharedContentViewDetails: CustomStringConvertible {
        /// Shared content link.
        public let sharedContentLink: String
        /// The shared content owner.
        public let sharedContentOwner: TeamLog.UserLogInfo?
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        public init(sharedContentLink: String, sharedContentAccessLevel: Sharing.AccessLevel, sharedContentOwner: TeamLog.UserLogInfo? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.sharedContentOwner = sharedContentOwner
            self.sharedContentAccessLevel = sharedContentAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentViewDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentViewDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedContentOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentViewDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_content_owner"] ?? .null)
                    return SharedContentViewDetails(sharedContentLink: sharedContentLink, sharedContentAccessLevel: sharedContentAccessLevel, sharedContentOwner: sharedContentOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedContentViewType struct
    open class SharedContentViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentViewTypeSerializer().serialize(self)))"
        }
    }
    open class SharedContentViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedContentViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can access shared folder via link.
    open class SharedFolderChangeLinkPolicyDetails: CustomStringConvertible {
        /// New shared folder link policy.
        public let newValue: Sharing.SharedLinkPolicy
        /// Previous shared folder link policy. Might be missing due to historical data gap.
        public let previousValue: Sharing.SharedLinkPolicy?
        public init(newValue: Sharing.SharedLinkPolicy, previousValue: Sharing.SharedLinkPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeLinkPolicyDetails) -> JSON {
            let output = [ 
            "new_value": Sharing.SharedLinkPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Sharing.SharedLinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Sharing.SharedLinkPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.SharedLinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeLinkPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderChangeLinkPolicyType struct
    open class SharedFolderChangeLinkPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeLinkPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeLinkPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeLinkPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeLinkPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderChangeLinkPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether shared folder inherits members from parent folder.
    open class SharedFolderChangeMembersInheritancePolicyDetails: CustomStringConvertible {
        /// New member inheritance policy.
        public let newValue: TeamLog.SharedFolderMembersInheritancePolicy
        /// Previous member inheritance policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.SharedFolderMembersInheritancePolicy?
        public init(newValue: TeamLog.SharedFolderMembersInheritancePolicy, previousValue: TeamLog.SharedFolderMembersInheritancePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersInheritancePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersInheritancePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersInheritancePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharedFolderMembersInheritancePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharedFolderMembersInheritancePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersInheritancePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharedFolderMembersInheritancePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedFolderMembersInheritancePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeMembersInheritancePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderChangeMembersInheritancePolicyType struct
    open class SharedFolderChangeMembersInheritancePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersInheritancePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersInheritancePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersInheritancePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersInheritancePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderChangeMembersInheritancePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can add/remove members of shared folder.
    open class SharedFolderChangeMembersManagementPolicyDetails: CustomStringConvertible {
        /// New members management policy.
        public let newValue: Sharing.AclUpdatePolicy
        /// Previous members management policy. Might be missing due to historical data gap.
        public let previousValue: Sharing.AclUpdatePolicy?
        public init(newValue: Sharing.AclUpdatePolicy, previousValue: Sharing.AclUpdatePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersManagementPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersManagementPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersManagementPolicyDetails) -> JSON {
            let output = [ 
            "new_value": Sharing.AclUpdatePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Sharing.AclUpdatePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersManagementPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Sharing.AclUpdatePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.AclUpdatePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeMembersManagementPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderChangeMembersManagementPolicyType struct
    open class SharedFolderChangeMembersManagementPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersManagementPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersManagementPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersManagementPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersManagementPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderChangeMembersManagementPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can become member of shared folder.
    open class SharedFolderChangeMembersPolicyDetails: CustomStringConvertible {
        /// New external invite policy.
        public let newValue: Sharing.MemberPolicy
        /// Previous external invite policy. Might be missing due to historical data gap.
        public let previousValue: Sharing.MemberPolicy?
        public init(newValue: Sharing.MemberPolicy, previousValue: Sharing.MemberPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersPolicyDetails) -> JSON {
            let output = [ 
            "new_value": Sharing.MemberPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Sharing.MemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Sharing.MemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.MemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeMembersPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderChangeMembersPolicyType struct
    open class SharedFolderChangeMembersPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMembersPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMembersPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMembersPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMembersPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderChangeMembersPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created shared folder.
    open class SharedFolderCreateDetails: CustomStringConvertible {
        /// Target namespace ID.
        public let targetNsId: String?
        public init(targetNsId: String? = nil) {
            nullableValidator(stringValidator())(targetNsId)
            self.targetNsId = targetNsId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderCreateDetails) -> JSON {
            let output = [ 
            "target_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.targetNsId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let targetNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["target_ns_id"] ?? .null)
                    return SharedFolderCreateDetails(targetNsId: targetNsId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderCreateType struct
    open class SharedFolderCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderCreateTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Declined team member's invite to shared folder.
    open class SharedFolderDeclineInvitationDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderDeclineInvitationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderDeclineInvitationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderDeclineInvitationDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderDeclineInvitationDetails {
            switch json {
                case .dictionary(_):
                    return SharedFolderDeclineInvitationDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderDeclineInvitationType struct
    open class SharedFolderDeclineInvitationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderDeclineInvitationTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderDeclineInvitationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderDeclineInvitationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderDeclineInvitationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderDeclineInvitationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Specifies if a shared folder inherits its members from the parent folder.
    public enum SharedFolderMembersInheritancePolicy: CustomStringConvertible {
        /// An unspecified error.
        case dontInheritMembers
        /// An unspecified error.
        case inheritMembers
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMembersInheritancePolicySerializer().serialize(self)))"
        }
    }
    open class SharedFolderMembersInheritancePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMembersInheritancePolicy) -> JSON {
            switch value {
                case .dontInheritMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dont_inherit_members")
                    return .dictionary(d)
                case .inheritMembers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("inherit_members")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedFolderMembersInheritancePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "dont_inherit_members":
                            return SharedFolderMembersInheritancePolicy.dontInheritMembers
                        case "inherit_members":
                            return SharedFolderMembersInheritancePolicy.inheritMembers
                        case "other":
                            return SharedFolderMembersInheritancePolicy.other
                        default:
                            return SharedFolderMembersInheritancePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added shared folder to own Dropbox.
    open class SharedFolderMountDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMountDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderMountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMountDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderMountDetails {
            switch json {
                case .dictionary(_):
                    return SharedFolderMountDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderMountType struct
    open class SharedFolderMountType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMountTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderMountTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMountType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderMountType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderMountType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed parent of shared folder.
    open class SharedFolderNestDetails: CustomStringConvertible {
        /// Previous parent namespace ID.
        public let previousParentNsId: String?
        /// New parent namespace ID.
        public let newParentNsId: String?
        /// Previous namespace path.
        public let previousNsPath: String?
        /// New namespace path.
        public let newNsPath: String?
        public init(previousParentNsId: String? = nil, newParentNsId: String? = nil, previousNsPath: String? = nil, newNsPath: String? = nil) {
            nullableValidator(stringValidator())(previousParentNsId)
            self.previousParentNsId = previousParentNsId
            nullableValidator(stringValidator())(newParentNsId)
            self.newParentNsId = newParentNsId
            nullableValidator(stringValidator())(previousNsPath)
            self.previousNsPath = previousNsPath
            nullableValidator(stringValidator())(newNsPath)
            self.newNsPath = newNsPath
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderNestDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderNestDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderNestDetails) -> JSON {
            let output = [ 
            "previous_parent_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.previousParentNsId),
            "new_parent_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.newParentNsId),
            "previous_ns_path": NullableSerializer(Serialization._StringSerializer).serialize(value.previousNsPath),
            "new_ns_path": NullableSerializer(Serialization._StringSerializer).serialize(value.newNsPath),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderNestDetails {
            switch json {
                case .dictionary(let dict):
                    let previousParentNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_parent_ns_id"] ?? .null)
                    let newParentNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_parent_ns_id"] ?? .null)
                    let previousNsPath = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_ns_path"] ?? .null)
                    let newNsPath = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_ns_path"] ?? .null)
                    return SharedFolderNestDetails(previousParentNsId: previousParentNsId, newParentNsId: newParentNsId, previousNsPath: previousNsPath, newNsPath: newNsPath)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderNestType struct
    open class SharedFolderNestType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderNestTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderNestTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderNestType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderNestType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderNestType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Transferred ownership of shared folder to another member.
    open class SharedFolderTransferOwnershipDetails: CustomStringConvertible {
        /// The email address of the previous shared folder owner.
        public let previousOwnerEmail: String?
        /// The email address of the new shared folder owner.
        public let newOwnerEmail: String
        public init(newOwnerEmail: String, previousOwnerEmail: String? = nil) {
            nullableValidator(stringValidator(maxLength: 255))(previousOwnerEmail)
            self.previousOwnerEmail = previousOwnerEmail
            stringValidator(maxLength: 255)(newOwnerEmail)
            self.newOwnerEmail = newOwnerEmail
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderTransferOwnershipDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderTransferOwnershipDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderTransferOwnershipDetails) -> JSON {
            let output = [ 
            "new_owner_email": Serialization._StringSerializer.serialize(value.newOwnerEmail),
            "previous_owner_email": NullableSerializer(Serialization._StringSerializer).serialize(value.previousOwnerEmail),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderTransferOwnershipDetails {
            switch json {
                case .dictionary(let dict):
                    let newOwnerEmail = Serialization._StringSerializer.deserialize(dict["new_owner_email"] ?? .null)
                    let previousOwnerEmail = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_owner_email"] ?? .null)
                    return SharedFolderTransferOwnershipDetails(newOwnerEmail: newOwnerEmail, previousOwnerEmail: previousOwnerEmail)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderTransferOwnershipType struct
    open class SharedFolderTransferOwnershipType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderTransferOwnershipTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderTransferOwnershipTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderTransferOwnershipType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderTransferOwnershipType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderTransferOwnershipType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted shared folder from Dropbox.
    open class SharedFolderUnmountDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderUnmountDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderUnmountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderUnmountDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderUnmountDetails {
            switch json {
                case .dictionary(_):
                    return SharedFolderUnmountDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderUnmountType struct
    open class SharedFolderUnmountType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderUnmountTypeSerializer().serialize(self)))"
        }
    }
    open class SharedFolderUnmountTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderUnmountType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderUnmountType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedFolderUnmountType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared link access level.
    public enum SharedLinkAccessLevel: CustomStringConvertible {
        /// An unspecified error.
        case none
        /// An unspecified error.
        case reader
        /// An unspecified error.
        case writer
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkAccessLevelSerializer().serialize(self)))"
        }
    }
    open class SharedLinkAccessLevelSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkAccessLevel) -> JSON {
            switch value {
                case .none:
                    var d = [String: JSON]()
                    d[".tag"] = .str("none")
                    return .dictionary(d)
                case .reader:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reader")
                    return .dictionary(d)
                case .writer:
                    var d = [String: JSON]()
                    d[".tag"] = .str("writer")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedLinkAccessLevel {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "none":
                            return SharedLinkAccessLevel.none
                        case "reader":
                            return SharedLinkAccessLevel.reader
                        case "writer":
                            return SharedLinkAccessLevel.writer
                        case "other":
                            return SharedLinkAccessLevel.other
                        default:
                            return SharedLinkAccessLevel.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added shared link expiration date.
    open class SharedLinkAddExpiryDetails: CustomStringConvertible {
        /// New shared link expiration date.
        public let newValue: Date
        public init(newValue: Date) {
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkAddExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkAddExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkAddExpiryDetails) -> JSON {
            let output = [ 
            "new_value": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkAddExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["new_value"] ?? .null)
                    return SharedLinkAddExpiryDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkAddExpiryType struct
    open class SharedLinkAddExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkAddExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkAddExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkAddExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkAddExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkAddExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed shared link expiration date.
    open class SharedLinkChangeExpiryDetails: CustomStringConvertible {
        /// New shared link expiration date. Might be missing due to historical data gap.
        public let newValue: Date?
        /// Previous shared link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(newValue: Date? = nil, previousValue: Date? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkChangeExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkChangeExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkChangeExpiryDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.newValue),
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkChangeExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkChangeExpiryDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkChangeExpiryType struct
    open class SharedLinkChangeExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkChangeExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkChangeExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkChangeExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkChangeExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkChangeExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed visibility of shared link.
    open class SharedLinkChangeVisibilityDetails: CustomStringConvertible {
        /// New shared link visibility.
        public let newValue: TeamLog.SharedLinkVisibility
        /// Previous shared link visibility. Might be missing due to historical data gap.
        public let previousValue: TeamLog.SharedLinkVisibility?
        public init(newValue: TeamLog.SharedLinkVisibility, previousValue: TeamLog.SharedLinkVisibility? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkChangeVisibilityDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkChangeVisibilityDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkChangeVisibilityDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharedLinkVisibilitySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharedLinkVisibilitySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkChangeVisibilityDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharedLinkVisibilitySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedLinkVisibilitySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkChangeVisibilityDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkChangeVisibilityType struct
    open class SharedLinkChangeVisibilityType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkChangeVisibilityTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkChangeVisibilityTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkChangeVisibilityType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkChangeVisibilityType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkChangeVisibilityType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added file/folder to Dropbox from shared link.
    open class SharedLinkCopyDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkCopyDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkCopyDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return SharedLinkCopyDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkCopyType struct
    open class SharedLinkCopyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkCopyTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkCopyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkCopyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkCopyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkCopyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created shared link.
    open class SharedLinkCreateDetails: CustomStringConvertible {
        /// Defines who can access the shared link. Might be missing due to historical data gap.
        public let sharedLinkAccessLevel: TeamLog.SharedLinkAccessLevel?
        public init(sharedLinkAccessLevel: TeamLog.SharedLinkAccessLevel? = nil) {
            self.sharedLinkAccessLevel = sharedLinkAccessLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkCreateDetails) -> JSON {
            let output = [ 
            "shared_link_access_level": NullableSerializer(TeamLog.SharedLinkAccessLevelSerializer()).serialize(value.sharedLinkAccessLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkAccessLevel = NullableSerializer(TeamLog.SharedLinkAccessLevelSerializer()).deserialize(dict["shared_link_access_level"] ?? .null)
                    return SharedLinkCreateDetails(sharedLinkAccessLevel: sharedLinkAccessLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkCreateType struct
    open class SharedLinkCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkCreateTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed shared link.
    open class SharedLinkDisableDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkDisableDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkDisableDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkDisableDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkDisableDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return SharedLinkDisableDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkDisableType struct
    open class SharedLinkDisableType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkDisableTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkDisableTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkDisableType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkDisableType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkDisableType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded file/folder from shared link.
    open class SharedLinkDownloadDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkDownloadDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return SharedLinkDownloadDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkDownloadType struct
    open class SharedLinkDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed shared link expiration date.
    open class SharedLinkRemoveExpiryDetails: CustomStringConvertible {
        /// Previous shared link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(previousValue: Date? = nil) {
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkRemoveExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkRemoveExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkRemoveExpiryDetails) -> JSON {
            let output = [ 
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkRemoveExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkRemoveExpiryDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkRemoveExpiryType struct
    open class SharedLinkRemoveExpiryType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkRemoveExpiryTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkRemoveExpiryTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkRemoveExpiryType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkRemoveExpiryType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkRemoveExpiryType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added an expiration date to the shared link.
    open class SharedLinkSettingsAddExpirationDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        /// New shared content link expiration date. Might be missing due to historical data gap.
        public let newValue: Date?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil, newValue: Date? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAddExpirationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAddExpirationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAddExpirationDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            "new_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAddExpirationDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    let newValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["new_value"] ?? .null)
                    return SharedLinkSettingsAddExpirationDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsAddExpirationType struct
    open class SharedLinkSettingsAddExpirationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAddExpirationTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAddExpirationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAddExpirationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAddExpirationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsAddExpirationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a password to the shared link.
    open class SharedLinkSettingsAddPasswordDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAddPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAddPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAddPasswordDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAddPasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedLinkSettingsAddPasswordDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsAddPasswordType struct
    open class SharedLinkSettingsAddPasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAddPasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAddPasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAddPasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAddPasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsAddPasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disabled downloads.
    open class SharedLinkSettingsAllowDownloadDisabledDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAllowDownloadDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAllowDownloadDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAllowDownloadDisabledDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAllowDownloadDisabledDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedLinkSettingsAllowDownloadDisabledDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsAllowDownloadDisabledType struct
    open class SharedLinkSettingsAllowDownloadDisabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAllowDownloadDisabledTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAllowDownloadDisabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAllowDownloadDisabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAllowDownloadDisabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsAllowDownloadDisabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled downloads.
    open class SharedLinkSettingsAllowDownloadEnabledDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAllowDownloadEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAllowDownloadEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAllowDownloadEnabledDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAllowDownloadEnabledDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedLinkSettingsAllowDownloadEnabledDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsAllowDownloadEnabledType struct
    open class SharedLinkSettingsAllowDownloadEnabledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsAllowDownloadEnabledTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsAllowDownloadEnabledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsAllowDownloadEnabledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsAllowDownloadEnabledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsAllowDownloadEnabledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the audience of the shared link.
    open class SharedLinkSettingsChangeAudienceDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        /// New link audience value.
        public let newValue: Sharing.LinkAudience
        /// Previous link audience value.
        public let previousValue: Sharing.LinkAudience?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, newValue: Sharing.LinkAudience, sharedContentLink: String? = nil, previousValue: Sharing.LinkAudience? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangeAudienceDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangeAudienceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangeAudienceDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "new_value": Sharing.LinkAudienceSerializer().serialize(value.newValue),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            "previous_value": NullableSerializer(Sharing.LinkAudienceSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangeAudienceDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let newValue = Sharing.LinkAudienceSerializer().deserialize(dict["new_value"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    let previousValue = NullableSerializer(Sharing.LinkAudienceSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkSettingsChangeAudienceDetails(sharedContentAccessLevel: sharedContentAccessLevel, newValue: newValue, sharedContentLink: sharedContentLink, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsChangeAudienceType struct
    open class SharedLinkSettingsChangeAudienceType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangeAudienceTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangeAudienceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangeAudienceType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangeAudienceType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsChangeAudienceType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the expiration date of the shared link.
    open class SharedLinkSettingsChangeExpirationDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        /// New shared content link expiration date. Might be missing due to historical data gap.
        public let newValue: Date?
        /// Previous shared content link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil, newValue: Date? = nil, previousValue: Date? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangeExpirationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangeExpirationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangeExpirationDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            "new_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.newValue),
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangeExpirationDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    let newValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkSettingsChangeExpirationDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink, newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsChangeExpirationType struct
    open class SharedLinkSettingsChangeExpirationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangeExpirationTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangeExpirationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangeExpirationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangeExpirationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsChangeExpirationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the password of the shared link.
    open class SharedLinkSettingsChangePasswordDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangePasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangePasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangePasswordDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangePasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedLinkSettingsChangePasswordDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsChangePasswordType struct
    open class SharedLinkSettingsChangePasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsChangePasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsChangePasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsChangePasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsChangePasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsChangePasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the expiration date from the shared link.
    open class SharedLinkSettingsRemoveExpirationDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        /// Previous shared link expiration date. Might be missing due to historical data gap.
        public let previousValue: Date?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil, previousValue: Date? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsRemoveExpirationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsRemoveExpirationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsRemoveExpirationDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            "previous_value": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsRemoveExpirationDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    let previousValue = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["previous_value"] ?? .null)
                    return SharedLinkSettingsRemoveExpirationDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsRemoveExpirationType struct
    open class SharedLinkSettingsRemoveExpirationType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsRemoveExpirationTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsRemoveExpirationTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsRemoveExpirationType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsRemoveExpirationType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsRemoveExpirationType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the password from the shared link.
    open class SharedLinkSettingsRemovePasswordDetails: CustomStringConvertible {
        /// Shared content access level.
        public let sharedContentAccessLevel: Sharing.AccessLevel
        /// Shared content link.
        public let sharedContentLink: String?
        public init(sharedContentAccessLevel: Sharing.AccessLevel, sharedContentLink: String? = nil) {
            self.sharedContentAccessLevel = sharedContentAccessLevel
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsRemovePasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsRemovePasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsRemovePasswordDetails) -> JSON {
            let output = [ 
            "shared_content_access_level": Sharing.AccessLevelSerializer().serialize(value.sharedContentAccessLevel),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsRemovePasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentAccessLevel = Sharing.AccessLevelSerializer().deserialize(dict["shared_content_access_level"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedLinkSettingsRemovePasswordDetails(sharedContentAccessLevel: sharedContentAccessLevel, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkSettingsRemovePasswordType struct
    open class SharedLinkSettingsRemovePasswordType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkSettingsRemovePasswordTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkSettingsRemovePasswordTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkSettingsRemovePasswordType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkSettingsRemovePasswordType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkSettingsRemovePasswordType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members as audience of shared link.
    open class SharedLinkShareDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        /// Users without a Dropbox account that were added as shared link audience.
        public let externalUsers: Array<TeamLog.ExternalUserLogInfo>?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil, externalUsers: Array<TeamLog.ExternalUserLogInfo>? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
            self.externalUsers = externalUsers
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkShareDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkShareDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            "external_users": NullableSerializer(ArraySerializer(TeamLog.ExternalUserLogInfoSerializer())).serialize(value.externalUsers),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkShareDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    let externalUsers = NullableSerializer(ArraySerializer(TeamLog.ExternalUserLogInfoSerializer())).deserialize(dict["external_users"] ?? .null)
                    return SharedLinkShareDetails(sharedLinkOwner: sharedLinkOwner, externalUsers: externalUsers)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkShareType struct
    open class SharedLinkShareType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkShareTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkShareTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkShareType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkShareType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkShareType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opened shared link.
    open class SharedLinkViewDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkViewDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedLinkViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkViewDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkViewDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return SharedLinkViewDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedLinkViewType struct
    open class SharedLinkViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkViewTypeSerializer().serialize(self)))"
        }
    }
    open class SharedLinkViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedLinkViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedLinkViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Defines who has access to a shared link.
    public enum SharedLinkVisibility: CustomStringConvertible {
        /// An unspecified error.
        case noOne
        /// An unspecified error.
        case password
        /// An unspecified error.
        case public_
        /// An unspecified error.
        case teamOnly
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedLinkVisibilitySerializer().serialize(self)))"
        }
    }
    open class SharedLinkVisibilitySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedLinkVisibility) -> JSON {
            switch value {
                case .noOne:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_one")
                    return .dictionary(d)
                case .password:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password")
                    return .dictionary(d)
                case .public_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("public")
                    return .dictionary(d)
                case .teamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_only")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedLinkVisibility {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "no_one":
                            return SharedLinkVisibility.noOne
                        case "password":
                            return SharedLinkVisibility.password
                        case "public":
                            return SharedLinkVisibility.public_
                        case "team_only":
                            return SharedLinkVisibility.teamOnly
                        case "other":
                            return SharedLinkVisibility.other
                        default:
                            return SharedLinkVisibility.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Opened shared Paper doc.
    open class SharedNoteOpenedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedNoteOpenedDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedNoteOpenedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedNoteOpenedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedNoteOpenedDetails {
            switch json {
                case .dictionary(_):
                    return SharedNoteOpenedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedNoteOpenedType struct
    open class SharedNoteOpenedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedNoteOpenedTypeSerializer().serialize(self)))"
        }
    }
    open class SharedNoteOpenedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedNoteOpenedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedNoteOpenedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharedNoteOpenedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether team members can join shared folders owned outside team.
    open class SharingChangeFolderJoinPolicyDetails: CustomStringConvertible {
        /// New external join policy.
        public let newValue: TeamLog.SharingFolderJoinPolicy
        /// Previous external join policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.SharingFolderJoinPolicy?
        public init(newValue: TeamLog.SharingFolderJoinPolicy, previousValue: TeamLog.SharingFolderJoinPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeFolderJoinPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeFolderJoinPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeFolderJoinPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingFolderJoinPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingFolderJoinPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeFolderJoinPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingFolderJoinPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingFolderJoinPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeFolderJoinPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeFolderJoinPolicyType struct
    open class SharingChangeFolderJoinPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeFolderJoinPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeFolderJoinPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeFolderJoinPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeFolderJoinPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeFolderJoinPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the allow remove or change expiration policy for the links shared outside of the team.
    open class SharingChangeLinkAllowChangeExpirationPolicyDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.EnforceLinkPasswordPolicy
        /// From.
        public let previousValue: TeamLog.EnforceLinkPasswordPolicy?
        public init(newValue: TeamLog.EnforceLinkPasswordPolicy, previousValue: TeamLog.EnforceLinkPasswordPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkAllowChangeExpirationPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.EnforceLinkPasswordPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.EnforceLinkPasswordPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkAllowChangeExpirationPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.EnforceLinkPasswordPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.EnforceLinkPasswordPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeLinkAllowChangeExpirationPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeLinkAllowChangeExpirationPolicyType struct
    open class SharingChangeLinkAllowChangeExpirationPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkAllowChangeExpirationPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkAllowChangeExpirationPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkAllowChangeExpirationPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkAllowChangeExpirationPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeLinkAllowChangeExpirationPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the default expiration for the links shared outside of the team.
    open class SharingChangeLinkDefaultExpirationPolicyDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.DefaultLinkExpirationDaysPolicy
        /// From.
        public let previousValue: TeamLog.DefaultLinkExpirationDaysPolicy?
        public init(newValue: TeamLog.DefaultLinkExpirationDaysPolicy, previousValue: TeamLog.DefaultLinkExpirationDaysPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkDefaultExpirationPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkDefaultExpirationPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkDefaultExpirationPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.DefaultLinkExpirationDaysPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DefaultLinkExpirationDaysPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkDefaultExpirationPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.DefaultLinkExpirationDaysPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DefaultLinkExpirationDaysPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeLinkDefaultExpirationPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeLinkDefaultExpirationPolicyType struct
    open class SharingChangeLinkDefaultExpirationPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkDefaultExpirationPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkDefaultExpirationPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkDefaultExpirationPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkDefaultExpirationPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeLinkDefaultExpirationPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the password requirement for the links shared outside of the team.
    open class SharingChangeLinkEnforcePasswordPolicyDetails: CustomStringConvertible {
        /// To.
        public let newValue: TeamLog.ChangeLinkExpirationPolicy
        /// From.
        public let previousValue: TeamLog.ChangeLinkExpirationPolicy?
        public init(newValue: TeamLog.ChangeLinkExpirationPolicy, previousValue: TeamLog.ChangeLinkExpirationPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkEnforcePasswordPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkEnforcePasswordPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkEnforcePasswordPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ChangeLinkExpirationPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ChangeLinkExpirationPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkEnforcePasswordPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ChangeLinkExpirationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ChangeLinkExpirationPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeLinkEnforcePasswordPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeLinkEnforcePasswordPolicyType struct
    open class SharingChangeLinkEnforcePasswordPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkEnforcePasswordPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkEnforcePasswordPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkEnforcePasswordPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkEnforcePasswordPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeLinkEnforcePasswordPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can share links outside team, and if links are accessible only by team members or anyone
    /// by default.
    open class SharingChangeLinkPolicyDetails: CustomStringConvertible {
        /// New external link accessibility policy.
        public let newValue: TeamLog.SharingLinkPolicy
        /// Previous external link accessibility policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.SharingLinkPolicy?
        public init(newValue: TeamLog.SharingLinkPolicy, previousValue: TeamLog.SharingLinkPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingLinkPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingLinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingLinkPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingLinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeLinkPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeLinkPolicyType struct
    open class SharingChangeLinkPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeLinkPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can share files/folders outside team.
    open class SharingChangeMemberPolicyDetails: CustomStringConvertible {
        /// New external invite policy.
        public let newValue: TeamLog.SharingMemberPolicy
        /// Previous external invite policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.SharingMemberPolicy?
        public init(newValue: TeamLog.SharingMemberPolicy, previousValue: TeamLog.SharingMemberPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeMemberPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeMemberPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeMemberPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingMemberPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingMemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeMemberPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingMemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeMemberPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharingChangeMemberPolicyType struct
    open class SharingChangeMemberPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeMemberPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SharingChangeMemberPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeMemberPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeMemberPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SharingChangeMemberPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can join shared folders owned by non team members.
    public enum SharingFolderJoinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case fromAnyone
        /// An unspecified error.
        case fromTeamOnly
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingFolderJoinPolicySerializer().serialize(self)))"
        }
    }
    open class SharingFolderJoinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingFolderJoinPolicy) -> JSON {
            switch value {
                case .fromAnyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("from_anyone")
                    return .dictionary(d)
                case .fromTeamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("from_team_only")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingFolderJoinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "from_anyone":
                            return SharingFolderJoinPolicy.fromAnyone
                        case "from_team_only":
                            return SharingFolderJoinPolicy.fromTeamOnly
                        case "other":
                            return SharingFolderJoinPolicy.other
                        default:
                            return SharingFolderJoinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for controlling if team members can share links externally
    public enum SharingLinkPolicy: CustomStringConvertible {
        /// An unspecified error.
        case defaultNoOne
        /// An unspecified error.
        case defaultPrivate
        /// An unspecified error.
        case defaultPublic
        /// An unspecified error.
        case onlyPrivate
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingLinkPolicySerializer().serialize(self)))"
        }
    }
    open class SharingLinkPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingLinkPolicy) -> JSON {
            switch value {
                case .defaultNoOne:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_no_one")
                    return .dictionary(d)
                case .defaultPrivate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_private")
                    return .dictionary(d)
                case .defaultPublic:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_public")
                    return .dictionary(d)
                case .onlyPrivate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("only_private")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingLinkPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default_no_one":
                            return SharingLinkPolicy.defaultNoOne
                        case "default_private":
                            return SharingLinkPolicy.defaultPrivate
                        case "default_public":
                            return SharingLinkPolicy.defaultPublic
                        case "only_private":
                            return SharingLinkPolicy.onlyPrivate
                        case "other":
                            return SharingLinkPolicy.other
                        default:
                            return SharingLinkPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// External sharing policy
    public enum SharingMemberPolicy: CustomStringConvertible {
        /// An unspecified error.
        case allow
        /// An unspecified error.
        case forbid
        /// An unspecified error.
        case forbidWithExclusions
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingMemberPolicySerializer().serialize(self)))"
        }
    }
    open class SharingMemberPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingMemberPolicy) -> JSON {
            switch value {
                case .allow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow")
                    return .dictionary(d)
                case .forbid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("forbid")
                    return .dictionary(d)
                case .forbidWithExclusions:
                    var d = [String: JSON]()
                    d[".tag"] = .str("forbid_with_exclusions")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingMemberPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allow":
                            return SharingMemberPolicy.allow
                        case "forbid":
                            return SharingMemberPolicy.forbid
                        case "forbid_with_exclusions":
                            return SharingMemberPolicy.forbidWithExclusions
                        case "other":
                            return SharingMemberPolicy.other
                        default:
                            return SharingMemberPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disabled downloads for link.
    open class ShmodelDisableDownloadsDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelDisableDownloadsDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelDisableDownloadsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelDisableDownloadsDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelDisableDownloadsDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return ShmodelDisableDownloadsDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShmodelDisableDownloadsType struct
    open class ShmodelDisableDownloadsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelDisableDownloadsTypeSerializer().serialize(self)))"
        }
    }
    open class ShmodelDisableDownloadsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelDisableDownloadsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelDisableDownloadsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShmodelDisableDownloadsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled downloads for link.
    open class ShmodelEnableDownloadsDetails: CustomStringConvertible {
        /// Shared link owner details. Might be missing due to historical data gap.
        public let sharedLinkOwner: TeamLog.UserLogInfo?
        public init(sharedLinkOwner: TeamLog.UserLogInfo? = nil) {
            self.sharedLinkOwner = sharedLinkOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelEnableDownloadsDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelEnableDownloadsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelEnableDownloadsDetails) -> JSON {
            let output = [ 
            "shared_link_owner": NullableSerializer(TeamLog.UserLogInfoSerializer()).serialize(value.sharedLinkOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelEnableDownloadsDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedLinkOwner = NullableSerializer(TeamLog.UserLogInfoSerializer()).deserialize(dict["shared_link_owner"] ?? .null)
                    return ShmodelEnableDownloadsDetails(sharedLinkOwner: sharedLinkOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShmodelEnableDownloadsType struct
    open class ShmodelEnableDownloadsType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelEnableDownloadsTypeSerializer().serialize(self)))"
        }
    }
    open class ShmodelEnableDownloadsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelEnableDownloadsType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelEnableDownloadsType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShmodelEnableDownloadsType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared link with group.
    open class ShmodelGroupShareDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelGroupShareDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelGroupShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelGroupShareDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelGroupShareDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelGroupShareDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShmodelGroupShareType struct
    open class ShmodelGroupShareType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelGroupShareTypeSerializer().serialize(self)))"
        }
    }
    open class ShmodelGroupShareTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelGroupShareType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelGroupShareType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShmodelGroupShareType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Granted access to showcase.
    open class ShowcaseAccessGrantedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseAccessGrantedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseAccessGrantedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseAccessGrantedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseAccessGrantedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseAccessGrantedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseAccessGrantedType struct
    open class ShowcaseAccessGrantedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseAccessGrantedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseAccessGrantedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseAccessGrantedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseAccessGrantedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseAccessGrantedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added member to showcase.
    open class ShowcaseAddMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseAddMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseAddMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseAddMemberType struct
    open class ShowcaseAddMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseAddMemberTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseAddMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseAddMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseAddMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseAddMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Archived showcase.
    open class ShowcaseArchivedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseArchivedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseArchivedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseArchivedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseArchivedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseArchivedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseArchivedType struct
    open class ShowcaseArchivedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseArchivedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseArchivedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseArchivedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseArchivedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseArchivedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled downloading files from Dropbox Showcase for team.
    open class ShowcaseChangeDownloadPolicyDetails: CustomStringConvertible {
        /// New Dropbox Showcase download policy.
        public let newValue: TeamLog.ShowcaseDownloadPolicy
        /// Previous Dropbox Showcase download policy.
        public let previousValue: TeamLog.ShowcaseDownloadPolicy
        public init(newValue: TeamLog.ShowcaseDownloadPolicy, previousValue: TeamLog.ShowcaseDownloadPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeDownloadPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeDownloadPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeDownloadPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ShowcaseDownloadPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ShowcaseDownloadPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeDownloadPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ShowcaseDownloadPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ShowcaseDownloadPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ShowcaseChangeDownloadPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseChangeDownloadPolicyType struct
    open class ShowcaseChangeDownloadPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeDownloadPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeDownloadPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeDownloadPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeDownloadPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseChangeDownloadPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled Dropbox Showcase for team.
    open class ShowcaseChangeEnabledPolicyDetails: CustomStringConvertible {
        /// New Dropbox Showcase policy.
        public let newValue: TeamLog.ShowcaseEnabledPolicy
        /// Previous Dropbox Showcase policy.
        public let previousValue: TeamLog.ShowcaseEnabledPolicy
        public init(newValue: TeamLog.ShowcaseEnabledPolicy, previousValue: TeamLog.ShowcaseEnabledPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeEnabledPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeEnabledPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeEnabledPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ShowcaseEnabledPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ShowcaseEnabledPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeEnabledPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ShowcaseEnabledPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ShowcaseEnabledPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ShowcaseChangeEnabledPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseChangeEnabledPolicyType struct
    open class ShowcaseChangeEnabledPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeEnabledPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeEnabledPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeEnabledPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeEnabledPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseChangeEnabledPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled sharing Dropbox Showcase externally for team.
    open class ShowcaseChangeExternalSharingPolicyDetails: CustomStringConvertible {
        /// New Dropbox Showcase external sharing policy.
        public let newValue: TeamLog.ShowcaseExternalSharingPolicy
        /// Previous Dropbox Showcase external sharing policy.
        public let previousValue: TeamLog.ShowcaseExternalSharingPolicy
        public init(newValue: TeamLog.ShowcaseExternalSharingPolicy, previousValue: TeamLog.ShowcaseExternalSharingPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeExternalSharingPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeExternalSharingPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeExternalSharingPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ShowcaseExternalSharingPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.ShowcaseExternalSharingPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeExternalSharingPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ShowcaseExternalSharingPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.ShowcaseExternalSharingPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return ShowcaseChangeExternalSharingPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseChangeExternalSharingPolicyType struct
    open class ShowcaseChangeExternalSharingPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseChangeExternalSharingPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseChangeExternalSharingPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseChangeExternalSharingPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseChangeExternalSharingPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseChangeExternalSharingPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created showcase.
    open class ShowcaseCreatedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseCreatedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseCreatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseCreatedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseCreatedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseCreatedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseCreatedType struct
    open class ShowcaseCreatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseCreatedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseCreatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseCreatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseCreatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseCreatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted showcase comment.
    open class ShowcaseDeleteCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseDeleteCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseDeleteCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseDeleteCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseDeleteCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return ShowcaseDeleteCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseDeleteCommentType struct
    open class ShowcaseDeleteCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseDeleteCommentTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseDeleteCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseDeleteCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseDeleteCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseDeleteCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Showcase document's logged information.
    open class ShowcaseDocumentLogInfo: CustomStringConvertible {
        /// Showcase document Id.
        public let showcaseId: String
        /// Showcase document title.
        public let showcaseTitle: String
        public init(showcaseId: String, showcaseTitle: String) {
            stringValidator()(showcaseId)
            self.showcaseId = showcaseId
            stringValidator()(showcaseTitle)
            self.showcaseTitle = showcaseTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseDocumentLogInfoSerializer().serialize(self)))"
        }
    }
    open class ShowcaseDocumentLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseDocumentLogInfo) -> JSON {
            let output = [ 
            "showcase_id": Serialization._StringSerializer.serialize(value.showcaseId),
            "showcase_title": Serialization._StringSerializer.serialize(value.showcaseTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseDocumentLogInfo {
            switch json {
                case .dictionary(let dict):
                    let showcaseId = Serialization._StringSerializer.deserialize(dict["showcase_id"] ?? .null)
                    let showcaseTitle = Serialization._StringSerializer.deserialize(dict["showcase_title"] ?? .null)
                    return ShowcaseDocumentLogInfo(showcaseId: showcaseId, showcaseTitle: showcaseTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if files can be downloaded from Showcases by team members
    public enum ShowcaseDownloadPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseDownloadPolicySerializer().serialize(self)))"
        }
    }
    open class ShowcaseDownloadPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseDownloadPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ShowcaseDownloadPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ShowcaseDownloadPolicy.disabled
                        case "enabled":
                            return ShowcaseDownloadPolicy.enabled
                        case "other":
                            return ShowcaseDownloadPolicy.other
                        default:
                            return ShowcaseDownloadPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Edited showcase comment.
    open class ShowcaseEditCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseEditCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseEditCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseEditCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseEditCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return ShowcaseEditCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseEditCommentType struct
    open class ShowcaseEditCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseEditCommentTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseEditCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseEditCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseEditCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseEditCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited showcase.
    open class ShowcaseEditedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseEditedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseEditedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseEditedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseEditedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseEditedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseEditedType struct
    open class ShowcaseEditedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseEditedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseEditedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseEditedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseEditedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseEditedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether Showcase is enabled.
    public enum ShowcaseEnabledPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseEnabledPolicySerializer().serialize(self)))"
        }
    }
    open class ShowcaseEnabledPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseEnabledPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ShowcaseEnabledPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ShowcaseEnabledPolicy.disabled
                        case "enabled":
                            return ShowcaseEnabledPolicy.enabled
                        case "other":
                            return ShowcaseEnabledPolicy.other
                        default:
                            return ShowcaseEnabledPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for controlling if team members can share Showcases externally.
    public enum ShowcaseExternalSharingPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseExternalSharingPolicySerializer().serialize(self)))"
        }
    }
    open class ShowcaseExternalSharingPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseExternalSharingPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ShowcaseExternalSharingPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ShowcaseExternalSharingPolicy.disabled
                        case "enabled":
                            return ShowcaseExternalSharingPolicy.enabled
                        case "other":
                            return ShowcaseExternalSharingPolicy.other
                        default:
                            return ShowcaseExternalSharingPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added file to showcase.
    open class ShowcaseFileAddedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileAddedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileAddedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileAddedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileAddedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseFileAddedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseFileAddedType struct
    open class ShowcaseFileAddedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileAddedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileAddedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileAddedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileAddedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseFileAddedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded file from showcase.
    open class ShowcaseFileDownloadDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Showcase download type.
        public let downloadType: String
        public init(eventUuid: String, downloadType: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(downloadType)
            self.downloadType = downloadType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileDownloadDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "download_type": Serialization._StringSerializer.serialize(value.downloadType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let downloadType = Serialization._StringSerializer.deserialize(dict["download_type"] ?? .null)
                    return ShowcaseFileDownloadDetails(eventUuid: eventUuid, downloadType: downloadType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseFileDownloadType struct
    open class ShowcaseFileDownloadType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileDownloadTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileDownloadTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileDownloadType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileDownloadType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseFileDownloadType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed file from showcase.
    open class ShowcaseFileRemovedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileRemovedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileRemovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileRemovedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileRemovedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseFileRemovedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseFileRemovedType struct
    open class ShowcaseFileRemovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileRemovedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileRemovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileRemovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileRemovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseFileRemovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed file in showcase.
    open class ShowcaseFileViewDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileViewDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileViewDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileViewDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseFileViewDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseFileViewType struct
    open class ShowcaseFileViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseFileViewTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseFileViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseFileViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseFileViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseFileViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted showcase.
    open class ShowcasePermanentlyDeletedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcasePermanentlyDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcasePermanentlyDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcasePermanentlyDeletedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcasePermanentlyDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcasePermanentlyDeletedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcasePermanentlyDeletedType struct
    open class ShowcasePermanentlyDeletedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcasePermanentlyDeletedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcasePermanentlyDeletedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcasePermanentlyDeletedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcasePermanentlyDeletedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcasePermanentlyDeletedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added showcase comment.
    open class ShowcasePostCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcasePostCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcasePostCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcasePostCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcasePostCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return ShowcasePostCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcasePostCommentType struct
    open class ShowcasePostCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcasePostCommentTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcasePostCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcasePostCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcasePostCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcasePostCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed member from showcase.
    open class ShowcaseRemoveMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRemoveMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRemoveMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseRemoveMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseRemoveMemberType struct
    open class ShowcaseRemoveMemberType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRemoveMemberTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRemoveMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRemoveMemberType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRemoveMemberType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseRemoveMemberType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed showcase.
    open class ShowcaseRenamedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRenamedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRenamedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRenamedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRenamedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseRenamedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseRenamedType struct
    open class ShowcaseRenamedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRenamedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRenamedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRenamedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRenamedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseRenamedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested access to showcase.
    open class ShowcaseRequestAccessDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRequestAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRequestAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRequestAccessDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRequestAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseRequestAccessDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseRequestAccessType struct
    open class ShowcaseRequestAccessType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRequestAccessTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRequestAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRequestAccessType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRequestAccessType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseRequestAccessType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Resolved showcase comment.
    open class ShowcaseResolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseResolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseResolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseResolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseResolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return ShowcaseResolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseResolveCommentType struct
    open class ShowcaseResolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseResolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseResolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseResolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseResolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseResolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unarchived showcase.
    open class ShowcaseRestoredDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRestoredDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRestoredDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRestoredDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRestoredDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseRestoredDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseRestoredType struct
    open class ShowcaseRestoredType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseRestoredTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseRestoredTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseRestoredType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseRestoredType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseRestoredType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted showcase (old version).
    open class ShowcaseTrashedDeprecatedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseTrashedDeprecatedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseTrashedDeprecatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseTrashedDeprecatedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseTrashedDeprecatedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseTrashedDeprecatedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseTrashedDeprecatedType struct
    open class ShowcaseTrashedDeprecatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseTrashedDeprecatedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseTrashedDeprecatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseTrashedDeprecatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseTrashedDeprecatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseTrashedDeprecatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted showcase.
    open class ShowcaseTrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseTrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseTrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseTrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseTrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseTrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseTrashedType struct
    open class ShowcaseTrashedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseTrashedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseTrashedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseTrashedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseTrashedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseTrashedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unresolved showcase comment.
    open class ShowcaseUnresolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        /// Comment text.
        public let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUnresolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUnresolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUnresolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUnresolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return ShowcaseUnresolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseUnresolveCommentType struct
    open class ShowcaseUnresolveCommentType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUnresolveCommentTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUnresolveCommentTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUnresolveCommentType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUnresolveCommentType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseUnresolveCommentType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored showcase (old version).
    open class ShowcaseUntrashedDeprecatedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUntrashedDeprecatedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUntrashedDeprecatedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUntrashedDeprecatedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUntrashedDeprecatedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseUntrashedDeprecatedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseUntrashedDeprecatedType struct
    open class ShowcaseUntrashedDeprecatedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUntrashedDeprecatedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUntrashedDeprecatedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUntrashedDeprecatedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUntrashedDeprecatedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseUntrashedDeprecatedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored showcase.
    open class ShowcaseUntrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUntrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUntrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUntrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUntrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseUntrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseUntrashedType struct
    open class ShowcaseUntrashedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseUntrashedTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseUntrashedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseUntrashedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseUntrashedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseUntrashedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed showcase.
    open class ShowcaseViewDetails: CustomStringConvertible {
        /// Event unique identifier.
        public let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseViewDetailsSerializer().serialize(self)))"
        }
    }
    open class ShowcaseViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseViewDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseViewDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return ShowcaseViewDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ShowcaseViewType struct
    open class ShowcaseViewType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShowcaseViewTypeSerializer().serialize(self)))"
        }
    }
    open class ShowcaseViewTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShowcaseViewType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShowcaseViewType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ShowcaseViewType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended admin sign-in-as session.
    open class SignInAsSessionEndDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionEndDetailsSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionEndDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionEndDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionEndDetails {
            switch json {
                case .dictionary(_):
                    return SignInAsSessionEndDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SignInAsSessionEndType struct
    open class SignInAsSessionEndType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionEndTypeSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionEndTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionEndType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionEndType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SignInAsSessionEndType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started admin sign-in-as session.
    open class SignInAsSessionStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionStartDetailsSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionStartDetails {
            switch json {
                case .dictionary(_):
                    return SignInAsSessionStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SignInAsSessionStartType struct
    open class SignInAsSessionStartType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionStartTypeSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionStartTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionStartType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionStartType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SignInAsSessionStartType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed default Smart Sync setting for team members.
    open class SmartSyncChangePolicyDetails: CustomStringConvertible {
        /// New smart sync policy.
        public let newValue: TeamPolicies.SmartSyncPolicy?
        /// Previous smart sync policy.
        public let previousValue: TeamPolicies.SmartSyncPolicy?
        public init(newValue: TeamPolicies.SmartSyncPolicy? = nil, previousValue: TeamPolicies.SmartSyncPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamPolicies.SmartSyncPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.SmartSyncPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamPolicies.SmartSyncPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.SmartSyncPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SmartSyncChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmartSyncChangePolicyType struct
    open class SmartSyncChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SmartSyncChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SmartSyncChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created Smart Sync non-admin devices report.
    open class SmartSyncCreateAdminPrivilegeReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncCreateAdminPrivilegeReportDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncCreateAdminPrivilegeReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncCreateAdminPrivilegeReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncCreateAdminPrivilegeReportDetails {
            switch json {
                case .dictionary(_):
                    return SmartSyncCreateAdminPrivilegeReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmartSyncCreateAdminPrivilegeReportType struct
    open class SmartSyncCreateAdminPrivilegeReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncCreateAdminPrivilegeReportTypeSerializer().serialize(self)))"
        }
    }
    open class SmartSyncCreateAdminPrivilegeReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncCreateAdminPrivilegeReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncCreateAdminPrivilegeReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SmartSyncCreateAdminPrivilegeReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opted team into Smart Sync.
    open class SmartSyncNotOptOutDetails: CustomStringConvertible {
        /// Previous Smart Sync opt out policy.
        public let previousValue: TeamLog.SmartSyncOptOutPolicy
        /// New Smart Sync opt out policy.
        public let newValue: TeamLog.SmartSyncOptOutPolicy
        public init(previousValue: TeamLog.SmartSyncOptOutPolicy, newValue: TeamLog.SmartSyncOptOutPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncNotOptOutDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncNotOptOutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncNotOptOutDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncNotOptOutDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return SmartSyncNotOptOutDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmartSyncNotOptOutType struct
    open class SmartSyncNotOptOutType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncNotOptOutTypeSerializer().serialize(self)))"
        }
    }
    open class SmartSyncNotOptOutTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncNotOptOutType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncNotOptOutType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SmartSyncNotOptOutType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opted team out of Smart Sync.
    open class SmartSyncOptOutDetails: CustomStringConvertible {
        /// Previous Smart Sync opt out policy.
        public let previousValue: TeamLog.SmartSyncOptOutPolicy
        /// New Smart Sync opt out policy.
        public let newValue: TeamLog.SmartSyncOptOutPolicy
        public init(previousValue: TeamLog.SmartSyncOptOutPolicy, newValue: TeamLog.SmartSyncOptOutPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncOptOutDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncOptOutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncOptOutDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncOptOutDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return SmartSyncOptOutDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmartSyncOptOutPolicy union
    public enum SmartSyncOptOutPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case optedOut
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncOptOutPolicySerializer().serialize(self)))"
        }
    }
    open class SmartSyncOptOutPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncOptOutPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .optedOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("opted_out")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SmartSyncOptOutPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return SmartSyncOptOutPolicy.default_
                        case "opted_out":
                            return SmartSyncOptOutPolicy.optedOut
                        case "other":
                            return SmartSyncOptOutPolicy.other
                        default:
                            return SmartSyncOptOutPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SmartSyncOptOutType struct
    open class SmartSyncOptOutType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncOptOutTypeSerializer().serialize(self)))"
        }
    }
    open class SmartSyncOptOutTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncOptOutType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncOptOutType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SmartSyncOptOutType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed automatic Smart Sync setting for team.
    open class SmarterSmartSyncPolicyChangedDetails: CustomStringConvertible {
        /// Previous automatic Smart Sync setting.
        public let previousValue: TeamPolicies.SmarterSmartSyncPolicyState
        /// New automatic Smart Sync setting.
        public let newValue: TeamPolicies.SmarterSmartSyncPolicyState
        public init(previousValue: TeamPolicies.SmarterSmartSyncPolicyState, newValue: TeamPolicies.SmarterSmartSyncPolicyState) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmarterSmartSyncPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class SmarterSmartSyncPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmarterSmartSyncPolicyChangedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamPolicies.SmarterSmartSyncPolicyStateSerializer().serialize(value.previousValue),
            "new_value": TeamPolicies.SmarterSmartSyncPolicyStateSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmarterSmartSyncPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamPolicies.SmarterSmartSyncPolicyStateSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamPolicies.SmarterSmartSyncPolicyStateSerializer().deserialize(dict["new_value"] ?? .null)
                    return SmarterSmartSyncPolicyChangedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmarterSmartSyncPolicyChangedType struct
    open class SmarterSmartSyncPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmarterSmartSyncPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class SmarterSmartSyncPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmarterSmartSyncPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmarterSmartSyncPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SmarterSmartSyncPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Space limit alert policy
    public enum SpaceCapsType: CustomStringConvertible {
        /// An unspecified error.
        case hard
        /// An unspecified error.
        case off
        /// An unspecified error.
        case soft
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SpaceCapsTypeSerializer().serialize(self)))"
        }
    }
    open class SpaceCapsTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceCapsType) -> JSON {
            switch value {
                case .hard:
                    var d = [String: JSON]()
                    d[".tag"] = .str("hard")
                    return .dictionary(d)
                case .off:
                    var d = [String: JSON]()
                    d[".tag"] = .str("off")
                    return .dictionary(d)
                case .soft:
                    var d = [String: JSON]()
                    d[".tag"] = .str("soft")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SpaceCapsType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "hard":
                            return SpaceCapsType.hard
                        case "off":
                            return SpaceCapsType.off
                        case "soft":
                            return SpaceCapsType.soft
                        case "other":
                            return SpaceCapsType.other
                        default:
                            return SpaceCapsType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SpaceLimitsStatus union
    public enum SpaceLimitsStatus: CustomStringConvertible {
        /// An unspecified error.
        case nearQuota
        /// An unspecified error.
        case overQuota
        /// An unspecified error.
        case withinQuota
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SpaceLimitsStatusSerializer().serialize(self)))"
        }
    }
    open class SpaceLimitsStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceLimitsStatus) -> JSON {
            switch value {
                case .nearQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("near_quota")
                    return .dictionary(d)
                case .overQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("over_quota")
                    return .dictionary(d)
                case .withinQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("within_quota")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SpaceLimitsStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "near_quota":
                            return SpaceLimitsStatus.nearQuota
                        case "over_quota":
                            return SpaceLimitsStatus.overQuota
                        case "within_quota":
                            return SpaceLimitsStatus.withinQuota
                        case "other":
                            return SpaceLimitsStatus.other
                        default:
                            return SpaceLimitsStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added X.509 certificate for SSO.
    open class SsoAddCertDetails: CustomStringConvertible {
        /// SSO certificate details.
        public let certificateDetails: TeamLog.Certificate
        public init(certificateDetails: TeamLog.Certificate) {
            self.certificateDetails = certificateDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddCertDetails) -> JSON {
            let output = [ 
            "certificate_details": TeamLog.CertificateSerializer().serialize(value.certificateDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddCertDetails {
            switch json {
                case .dictionary(let dict):
                    let certificateDetails = TeamLog.CertificateSerializer().deserialize(dict["certificate_details"] ?? .null)
                    return SsoAddCertDetails(certificateDetails: certificateDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoAddCertType struct
    open class SsoAddCertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddCertTypeSerializer().serialize(self)))"
        }
    }
    open class SsoAddCertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddCertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddCertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoAddCertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added sign-in URL for SSO.
    open class SsoAddLoginUrlDetails: CustomStringConvertible {
        /// New single sign-on login URL.
        public let newValue: String
        public init(newValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLoginUrlDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return SsoAddLoginUrlDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoAddLoginUrlType struct
    open class SsoAddLoginUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLoginUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoAddLoginUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLoginUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLoginUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoAddLoginUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added sign-out URL for SSO.
    open class SsoAddLogoutUrlDetails: CustomStringConvertible {
        /// New single sign-on logout URL.
        public let newValue: String?
        public init(newValue: String? = nil) {
            nullableValidator(stringValidator())(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLogoutUrlDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(Serialization._StringSerializer).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_value"] ?? .null)
                    return SsoAddLogoutUrlDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoAddLogoutUrlType struct
    open class SsoAddLogoutUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLogoutUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoAddLogoutUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLogoutUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLogoutUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoAddLogoutUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed X.509 certificate for SSO.
    open class SsoChangeCertDetails: CustomStringConvertible {
        /// Previous SSO certificate details. Might be missing due to historical data gap.
        public let previousCertificateDetails: TeamLog.Certificate?
        /// New SSO certificate details.
        public let newCertificateDetails: TeamLog.Certificate
        public init(newCertificateDetails: TeamLog.Certificate, previousCertificateDetails: TeamLog.Certificate? = nil) {
            self.previousCertificateDetails = previousCertificateDetails
            self.newCertificateDetails = newCertificateDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeCertDetails) -> JSON {
            let output = [ 
            "new_certificate_details": TeamLog.CertificateSerializer().serialize(value.newCertificateDetails),
            "previous_certificate_details": NullableSerializer(TeamLog.CertificateSerializer()).serialize(value.previousCertificateDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeCertDetails {
            switch json {
                case .dictionary(let dict):
                    let newCertificateDetails = TeamLog.CertificateSerializer().deserialize(dict["new_certificate_details"] ?? .null)
                    let previousCertificateDetails = NullableSerializer(TeamLog.CertificateSerializer()).deserialize(dict["previous_certificate_details"] ?? .null)
                    return SsoChangeCertDetails(newCertificateDetails: newCertificateDetails, previousCertificateDetails: previousCertificateDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoChangeCertType struct
    open class SsoChangeCertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeCertTypeSerializer().serialize(self)))"
        }
    }
    open class SsoChangeCertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeCertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeCertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoChangeCertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed sign-in URL for SSO.
    open class SsoChangeLoginUrlDetails: CustomStringConvertible {
        /// Previous single sign-on login URL.
        public let previousValue: String
        /// New single sign-on login URL.
        public let newValue: String
        public init(previousValue: String, newValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLoginUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return SsoChangeLoginUrlDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoChangeLoginUrlType struct
    open class SsoChangeLoginUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLoginUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLoginUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLoginUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLoginUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoChangeLoginUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed sign-out URL for SSO.
    open class SsoChangeLogoutUrlDetails: CustomStringConvertible {
        /// Previous single sign-on logout URL. Might be missing due to historical data gap.
        public let previousValue: String?
        /// New single sign-on logout URL.
        public let newValue: String?
        public init(previousValue: String? = nil, newValue: String? = nil) {
            nullableValidator(stringValidator())(previousValue)
            self.previousValue = previousValue
            nullableValidator(stringValidator())(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLogoutUrlDetails) -> JSON {
            let output = [ 
            "previous_value": NullableSerializer(Serialization._StringSerializer).serialize(value.previousValue),
            "new_value": NullableSerializer(Serialization._StringSerializer).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_value"] ?? .null)
                    let newValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_value"] ?? .null)
                    return SsoChangeLogoutUrlDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoChangeLogoutUrlType struct
    open class SsoChangeLogoutUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLogoutUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLogoutUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLogoutUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLogoutUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoChangeLogoutUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed single sign-on setting for team.
    open class SsoChangePolicyDetails: CustomStringConvertible {
        /// New single sign-on policy.
        public let newValue: TeamPolicies.SsoPolicy
        /// Previous single sign-on policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.SsoPolicy?
        public init(newValue: TeamPolicies.SsoPolicy, previousValue: TeamPolicies.SsoPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.SsoPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.SsoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.SsoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.SsoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SsoChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoChangePolicyType struct
    open class SsoChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class SsoChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed SAML identity mode for SSO.
    open class SsoChangeSamlIdentityModeDetails: CustomStringConvertible {
        /// Previous single sign-on identity mode.
        public let previousValue: Int64
        /// New single sign-on identity mode.
        public let newValue: Int64
        public init(previousValue: Int64, newValue: Int64) {
            comparableValidator()(previousValue)
            self.previousValue = previousValue
            comparableValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeSamlIdentityModeDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeSamlIdentityModeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeSamlIdentityModeDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._Int64Serializer.serialize(value.previousValue),
            "new_value": Serialization._Int64Serializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeSamlIdentityModeDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._Int64Serializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._Int64Serializer.deserialize(dict["new_value"] ?? .null)
                    return SsoChangeSamlIdentityModeDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoChangeSamlIdentityModeType struct
    open class SsoChangeSamlIdentityModeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeSamlIdentityModeTypeSerializer().serialize(self)))"
        }
    }
    open class SsoChangeSamlIdentityModeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeSamlIdentityModeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeSamlIdentityModeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoChangeSamlIdentityModeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to sign in via SSO.
    open class SsoErrorDetails: CustomStringConvertible {
        /// Error details.
        public let errorDetails: TeamLog.FailureDetailsLogInfo
        public init(errorDetails: TeamLog.FailureDetailsLogInfo) {
            self.errorDetails = errorDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoErrorDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoErrorDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoErrorDetails) -> JSON {
            let output = [ 
            "error_details": TeamLog.FailureDetailsLogInfoSerializer().serialize(value.errorDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoErrorDetails {
            switch json {
                case .dictionary(let dict):
                    let errorDetails = TeamLog.FailureDetailsLogInfoSerializer().deserialize(dict["error_details"] ?? .null)
                    return SsoErrorDetails(errorDetails: errorDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoErrorType struct
    open class SsoErrorType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoErrorTypeSerializer().serialize(self)))"
        }
    }
    open class SsoErrorTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoErrorType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoErrorType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoErrorType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed X.509 certificate for SSO.
    open class SsoRemoveCertDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveCertDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveCertDetails {
            switch json {
                case .dictionary(_):
                    return SsoRemoveCertDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoRemoveCertType struct
    open class SsoRemoveCertType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveCertTypeSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveCertTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveCertType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveCertType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoRemoveCertType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed sign-in URL for SSO.
    open class SsoRemoveLoginUrlDetails: CustomStringConvertible {
        /// Previous single sign-on login URL.
        public let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLoginUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return SsoRemoveLoginUrlDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoRemoveLoginUrlType struct
    open class SsoRemoveLoginUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLoginUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLoginUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLoginUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLoginUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoRemoveLoginUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed sign-out URL for SSO.
    open class SsoRemoveLogoutUrlDetails: CustomStringConvertible {
        /// Previous single sign-on logout URL.
        public let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLogoutUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return SsoRemoveLogoutUrlDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SsoRemoveLogoutUrlType struct
    open class SsoRemoveLogoutUrlType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLogoutUrlTypeSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLogoutUrlTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLogoutUrlType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLogoutUrlType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return SsoRemoveLogoutUrlType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started enterprise admin session.
    open class StartedEnterpriseAdminSessionDetails: CustomStringConvertible {
        /// More information about the organization or team.
        public let federationExtraDetails: TeamLog.FedExtraDetails
        public init(federationExtraDetails: TeamLog.FedExtraDetails) {
            self.federationExtraDetails = federationExtraDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(StartedEnterpriseAdminSessionDetailsSerializer().serialize(self)))"
        }
    }
    open class StartedEnterpriseAdminSessionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: StartedEnterpriseAdminSessionDetails) -> JSON {
            let output = [ 
            "federation_extra_details": TeamLog.FedExtraDetailsSerializer().serialize(value.federationExtraDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> StartedEnterpriseAdminSessionDetails {
            switch json {
                case .dictionary(let dict):
                    let federationExtraDetails = TeamLog.FedExtraDetailsSerializer().deserialize(dict["federation_extra_details"] ?? .null)
                    return StartedEnterpriseAdminSessionDetails(federationExtraDetails: federationExtraDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The StartedEnterpriseAdminSessionType struct
    open class StartedEnterpriseAdminSessionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(StartedEnterpriseAdminSessionTypeSerializer().serialize(self)))"
        }
    }
    open class StartedEnterpriseAdminSessionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: StartedEnterpriseAdminSessionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> StartedEnterpriseAdminSessionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return StartedEnterpriseAdminSessionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created team activity report.
    open class TeamActivityCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        public let startDate: Date
        /// Report end date.
        public let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamActivityCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamActivityCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamActivityCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamActivityCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return TeamActivityCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Couldn't generate team activity report.
    open class TeamActivityCreateReportFailDetails: CustomStringConvertible {
        /// Failure reason.
        public let failureReason: Team.TeamReportFailureReason
        public init(failureReason: Team.TeamReportFailureReason) {
            self.failureReason = failureReason
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamActivityCreateReportFailDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamActivityCreateReportFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamActivityCreateReportFailDetails) -> JSON {
            let output = [ 
            "failure_reason": Team.TeamReportFailureReasonSerializer().serialize(value.failureReason),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamActivityCreateReportFailDetails {
            switch json {
                case .dictionary(let dict):
                    let failureReason = Team.TeamReportFailureReasonSerializer().deserialize(dict["failure_reason"] ?? .null)
                    return TeamActivityCreateReportFailDetails(failureReason: failureReason)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamActivityCreateReportFailType struct
    open class TeamActivityCreateReportFailType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamActivityCreateReportFailTypeSerializer().serialize(self)))"
        }
    }
    open class TeamActivityCreateReportFailTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamActivityCreateReportFailType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamActivityCreateReportFailType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamActivityCreateReportFailType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamActivityCreateReportType struct
    open class TeamActivityCreateReportType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamActivityCreateReportTypeSerializer().serialize(self)))"
        }
    }
    open class TeamActivityCreateReportTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamActivityCreateReportType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamActivityCreateReportType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamActivityCreateReportType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to setting up branding feature
    public enum TeamBrandingPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamBrandingPolicySerializer().serialize(self)))"
        }
    }
    open class TeamBrandingPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamBrandingPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamBrandingPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TeamBrandingPolicy.disabled
                        case "enabled":
                            return TeamBrandingPolicy.enabled
                        case "other":
                            return TeamBrandingPolicy.other
                        default:
                            return TeamBrandingPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed team branding policy for team.
    open class TeamBrandingPolicyChangedDetails: CustomStringConvertible {
        /// New team branding policy.
        public let newValue: TeamLog.TeamBrandingPolicy
        /// Previous team branding policy.
        public let previousValue: TeamLog.TeamBrandingPolicy
        public init(newValue: TeamLog.TeamBrandingPolicy, previousValue: TeamLog.TeamBrandingPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamBrandingPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamBrandingPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamBrandingPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamBrandingPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.TeamBrandingPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamBrandingPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamBrandingPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.TeamBrandingPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return TeamBrandingPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamBrandingPolicyChangedType struct
    open class TeamBrandingPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamBrandingPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamBrandingPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamBrandingPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamBrandingPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamBrandingPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// More details about the team.
    open class TeamDetails: CustomStringConvertible {
        /// The name of the team.
        public let team: String
        public init(team: String) {
            stringValidator()(team)
            self.team = team
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamDetails) -> JSON {
            let output = [ 
            "team": Serialization._StringSerializer.serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamDetails {
            switch json {
                case .dictionary(let dict):
                    let team = Serialization._StringSerializer.deserialize(dict["team"] ?? .null)
                    return TeamDetails(team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// An audit log event.
    open class TeamEvent: CustomStringConvertible {
        /// The Dropbox timestamp representing when the action was taken.
        public let timestamp_: Date
        /// The category that this type of action belongs to.
        public let eventCategory: TeamLog.EventCategory
        /// The entity who actually performed the action. Might be missing due to historical data gap.
        public let actor: TeamLog.ActorLogInfo?
        /// The origin from which the actor performed the action including information about host, ip address, location,
        /// session, etc. If the action was performed programmatically via the API the origin represents the API client.
        public let origin: TeamLog.OriginLogInfo?
        /// True if the action involved a non team member either as the actor or as one of the affected users. Might be
        /// missing due to historical data gap.
        public let involveNonTeamMember: Bool?
        /// The user or team on whose behalf the actor performed the action. Might be missing due to historical data
        /// gap.
        public let context: TeamLog.ContextLogInfo?
        /// Zero or more users and/or groups that are affected by the action. Note that this list doesn't include any
        /// actors or users in context.
        public let participants: Array<TeamLog.ParticipantLogInfo>?
        /// Zero or more content assets involved in the action. Currently these include Dropbox files and folders but in
        /// the future we might add other asset types such as Paper documents, folders, projects, etc.
        public let assets: Array<TeamLog.AssetLogInfo>?
        /// The particular type of action taken.
        public let eventType: TeamLog.EventType
        /// The variable event schema applicable to this type of action, instantiated with respect to this particular
        /// action.
        public let details: TeamLog.EventDetails
        public init(timestamp_: Date, eventCategory: TeamLog.EventCategory, eventType: TeamLog.EventType, details: TeamLog.EventDetails, actor: TeamLog.ActorLogInfo? = nil, origin: TeamLog.OriginLogInfo? = nil, involveNonTeamMember: Bool? = nil, context: TeamLog.ContextLogInfo? = nil, participants: Array<TeamLog.ParticipantLogInfo>? = nil, assets: Array<TeamLog.AssetLogInfo>? = nil) {
            self.timestamp_ = timestamp_
            self.eventCategory = eventCategory
            self.actor = actor
            self.origin = origin
            self.involveNonTeamMember = involveNonTeamMember
            self.context = context
            self.participants = participants
            self.assets = assets
            self.eventType = eventType
            self.details = details
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamEventSerializer().serialize(self)))"
        }
    }
    open class TeamEventSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamEvent) -> JSON {
            let output = [ 
            "timestamp": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.timestamp_),
            "event_category": TeamLog.EventCategorySerializer().serialize(value.eventCategory),
            "event_type": TeamLog.EventTypeSerializer().serialize(value.eventType),
            "details": TeamLog.EventDetailsSerializer().serialize(value.details),
            "actor": NullableSerializer(TeamLog.ActorLogInfoSerializer()).serialize(value.actor),
            "origin": NullableSerializer(TeamLog.OriginLogInfoSerializer()).serialize(value.origin),
            "involve_non_team_member": NullableSerializer(Serialization._BoolSerializer).serialize(value.involveNonTeamMember),
            "context": NullableSerializer(TeamLog.ContextLogInfoSerializer()).serialize(value.context),
            "participants": NullableSerializer(ArraySerializer(TeamLog.ParticipantLogInfoSerializer())).serialize(value.participants),
            "assets": NullableSerializer(ArraySerializer(TeamLog.AssetLogInfoSerializer())).serialize(value.assets),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamEvent {
            switch json {
                case .dictionary(let dict):
                    let timestamp_ = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["timestamp"] ?? .null)
                    let eventCategory = TeamLog.EventCategorySerializer().deserialize(dict["event_category"] ?? .null)
                    let eventType = TeamLog.EventTypeSerializer().deserialize(dict["event_type"] ?? .null)
                    let details = TeamLog.EventDetailsSerializer().deserialize(dict["details"] ?? .null)
                    let actor = NullableSerializer(TeamLog.ActorLogInfoSerializer()).deserialize(dict["actor"] ?? .null)
                    let origin = NullableSerializer(TeamLog.OriginLogInfoSerializer()).deserialize(dict["origin"] ?? .null)
                    let involveNonTeamMember = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["involve_non_team_member"] ?? .null)
                    let context = NullableSerializer(TeamLog.ContextLogInfoSerializer()).deserialize(dict["context"] ?? .null)
                    let participants = NullableSerializer(ArraySerializer(TeamLog.ParticipantLogInfoSerializer())).deserialize(dict["participants"] ?? .null)
                    let assets = NullableSerializer(ArraySerializer(TeamLog.AssetLogInfoSerializer())).deserialize(dict["assets"] ?? .null)
                    return TeamEvent(timestamp_: timestamp_, eventCategory: eventCategory, eventType: eventType, details: details, actor: actor, origin: origin, involveNonTeamMember: involveNonTeamMember, context: context, participants: participants, assets: assets)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether App Integrations are enabled for the team.
    public enum TeamExtensionsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamExtensionsPolicySerializer().serialize(self)))"
        }
    }
    open class TeamExtensionsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamExtensionsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamExtensionsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TeamExtensionsPolicy.disabled
                        case "enabled":
                            return TeamExtensionsPolicy.enabled
                        case "other":
                            return TeamExtensionsPolicy.other
                        default:
                            return TeamExtensionsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed App Integrations setting for team.
    open class TeamExtensionsPolicyChangedDetails: CustomStringConvertible {
        /// New Extensions policy.
        public let newValue: TeamLog.TeamExtensionsPolicy
        /// Previous Extensions policy.
        public let previousValue: TeamLog.TeamExtensionsPolicy
        public init(newValue: TeamLog.TeamExtensionsPolicy, previousValue: TeamLog.TeamExtensionsPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamExtensionsPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamExtensionsPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamExtensionsPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamExtensionsPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.TeamExtensionsPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamExtensionsPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamExtensionsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.TeamExtensionsPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return TeamExtensionsPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamExtensionsPolicyChangedType struct
    open class TeamExtensionsPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamExtensionsPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamExtensionsPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamExtensionsPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamExtensionsPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamExtensionsPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed archival status of team folder.
    open class TeamFolderChangeStatusDetails: CustomStringConvertible {
        /// New team folder status.
        public let newValue: Team.TeamFolderStatus
        /// Previous team folder status. Might be missing due to historical data gap.
        public let previousValue: Team.TeamFolderStatus?
        public init(newValue: Team.TeamFolderStatus, previousValue: Team.TeamFolderStatus? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": Team.TeamFolderStatusSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(Team.TeamFolderStatusSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Team.TeamFolderStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Team.TeamFolderStatusSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TeamFolderChangeStatusDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderChangeStatusType struct
    open class TeamFolderChangeStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderChangeStatusTypeSerializer().serialize(self)))"
        }
    }
    open class TeamFolderChangeStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderChangeStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderChangeStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamFolderChangeStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created team folder in active status.
    open class TeamFolderCreateDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderCreateDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderCreateDetails {
            switch json {
                case .dictionary(_):
                    return TeamFolderCreateDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderCreateType struct
    open class TeamFolderCreateType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderCreateTypeSerializer().serialize(self)))"
        }
    }
    open class TeamFolderCreateTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderCreateType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderCreateType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamFolderCreateType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downgraded team folder to regular shared folder.
    open class TeamFolderDowngradeDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        public let targetAssetIndex: UInt64
        public init(targetAssetIndex: UInt64) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderDowngradeDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderDowngradeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderDowngradeDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderDowngradeDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    return TeamFolderDowngradeDetails(targetAssetIndex: targetAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderDowngradeType struct
    open class TeamFolderDowngradeType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderDowngradeTypeSerializer().serialize(self)))"
        }
    }
    open class TeamFolderDowngradeTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderDowngradeType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderDowngradeType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamFolderDowngradeType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted archived team folder.
    open class TeamFolderPermanentlyDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderPermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderPermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderPermanentlyDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderPermanentlyDeleteDetails {
            switch json {
                case .dictionary(_):
                    return TeamFolderPermanentlyDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderPermanentlyDeleteType struct
    open class TeamFolderPermanentlyDeleteType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderPermanentlyDeleteTypeSerializer().serialize(self)))"
        }
    }
    open class TeamFolderPermanentlyDeleteTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderPermanentlyDeleteType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderPermanentlyDeleteType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamFolderPermanentlyDeleteType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed active/archived team folder.
    open class TeamFolderRenameDetails: CustomStringConvertible {
        /// Previous folder name.
        public let previousFolderName: String
        /// New folder name.
        public let newFolderName: String
        public init(previousFolderName: String, newFolderName: String) {
            stringValidator()(previousFolderName)
            self.previousFolderName = previousFolderName
            stringValidator()(newFolderName)
            self.newFolderName = newFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderRenameDetails) -> JSON {
            let output = [ 
            "previous_folder_name": Serialization._StringSerializer.serialize(value.previousFolderName),
            "new_folder_name": Serialization._StringSerializer.serialize(value.newFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let previousFolderName = Serialization._StringSerializer.deserialize(dict["previous_folder_name"] ?? .null)
                    let newFolderName = Serialization._StringSerializer.deserialize(dict["new_folder_name"] ?? .null)
                    return TeamFolderRenameDetails(previousFolderName: previousFolderName, newFolderName: newFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderRenameType struct
    open class TeamFolderRenameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderRenameTypeSerializer().serialize(self)))"
        }
    }
    open class TeamFolderRenameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderRenameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderRenameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamFolderRenameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Details about team invites
    open class TeamInviteDetails: CustomStringConvertible {
        /// How the user was invited to the team.
        public let inviteMethod: TeamLog.InviteMethod
        /// True if the invitation incurred an additional license purchase.
        public let additionalLicensePurchase: Bool?
        public init(inviteMethod: TeamLog.InviteMethod, additionalLicensePurchase: Bool? = nil) {
            self.inviteMethod = inviteMethod
            self.additionalLicensePurchase = additionalLicensePurchase
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamInviteDetails) -> JSON {
            let output = [ 
            "invite_method": TeamLog.InviteMethodSerializer().serialize(value.inviteMethod),
            "additional_license_purchase": NullableSerializer(Serialization._BoolSerializer).serialize(value.additionalLicensePurchase),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let inviteMethod = TeamLog.InviteMethodSerializer().deserialize(dict["invite_method"] ?? .null)
                    let additionalLicensePurchase = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["additional_license_purchase"] ?? .null)
                    return TeamInviteDetails(inviteMethod: inviteMethod, additionalLicensePurchase: additionalLicensePurchase)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team linked app
    open class TeamLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class TeamLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return TeamLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team's logged information.
    open class TeamLogInfo: CustomStringConvertible {
        /// Team display name.
        public let displayName: String
        public init(displayName: String) {
            stringValidator()(displayName)
            self.displayName = displayName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamLogInfoSerializer().serialize(self)))"
        }
    }
    open class TeamLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamLogInfo) -> JSON {
            let output = [ 
            "display_name": Serialization._StringSerializer.serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamLogInfo {
            switch json {
                case .dictionary(let dict):
                    let displayName = Serialization._StringSerializer.deserialize(dict["display_name"] ?? .null)
                    return TeamLogInfo(displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team member's logged information.
    open class TeamMemberLogInfo: TeamLog.UserLogInfo {
        /// Team member ID.
        public let teamMemberId: String?
        /// Team member external ID.
        public let memberExternalId: String?
        /// Details about this user&#x2019s team for enterprise event.
        public let team: TeamLog.TeamLogInfo?
        public init(accountId: String? = nil, displayName: String? = nil, email: String? = nil, teamMemberId: String? = nil, memberExternalId: String? = nil, team: TeamLog.TeamLogInfo? = nil) {
            nullableValidator(stringValidator())(teamMemberId)
            self.teamMemberId = teamMemberId
            nullableValidator(stringValidator(maxLength: 64))(memberExternalId)
            self.memberExternalId = memberExternalId
            self.team = team
            super.init(accountId: accountId, displayName: displayName, email: email)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMemberLogInfoSerializer().serialize(self)))"
        }
    }
    open class TeamMemberLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMemberLogInfo) -> JSON {
            let output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            "team_member_id": NullableSerializer(Serialization._StringSerializer).serialize(value.teamMemberId),
            "member_external_id": NullableSerializer(Serialization._StringSerializer).serialize(value.memberExternalId),
            "team": NullableSerializer(TeamLog.TeamLogInfoSerializer()).serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMemberLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                    let teamMemberId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_member_id"] ?? .null)
                    let memberExternalId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["member_external_id"] ?? .null)
                    let team = NullableSerializer(TeamLog.TeamLogInfoSerializer()).deserialize(dict["team"] ?? .null)
                    return TeamMemberLogInfo(accountId: accountId, displayName: displayName, email: email, teamMemberId: teamMemberId, memberExternalId: memberExternalId, team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMembershipType union
    public enum TeamMembershipType: CustomStringConvertible {
        /// An unspecified error.
        case free
        /// An unspecified error.
        case full
        /// An unspecified error.
        case guest
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMembershipTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMembershipTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMembershipType) -> JSON {
            switch value {
                case .free:
                    var d = [String: JSON]()
                    d[".tag"] = .str("free")
                    return .dictionary(d)
                case .full:
                    var d = [String: JSON]()
                    d[".tag"] = .str("full")
                    return .dictionary(d)
                case .guest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("guest")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMembershipType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "free":
                            return TeamMembershipType.free
                        case "full":
                            return TeamMembershipType.full
                        case "guest":
                            return TeamMembershipType.guest
                        case "other":
                            return TeamMembershipType.other
                        default:
                            return TeamMembershipType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Merged another team into this team.
    open class TeamMergeFromDetails: CustomStringConvertible {
        /// The name of the team that was merged into this team.
        public let teamName: String
        public init(teamName: String) {
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeFromDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeFromDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeFromDetails) -> JSON {
            let output = [ 
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeFromDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    return TeamMergeFromDetails(teamName: teamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeFromType struct
    open class TeamMergeFromType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeFromTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeFromTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeFromType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeFromType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeFromType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Accepted a team merge request.
    open class TeamMergeRequestAcceptedDetails: CustomStringConvertible {
        /// Team merge request acceptance details.
        public let requestAcceptedDetails: TeamLog.TeamMergeRequestAcceptedExtraDetails
        public init(requestAcceptedDetails: TeamLog.TeamMergeRequestAcceptedExtraDetails) {
            self.requestAcceptedDetails = requestAcceptedDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedDetails) -> JSON {
            let output = [ 
            "request_accepted_details": TeamLog.TeamMergeRequestAcceptedExtraDetailsSerializer().serialize(value.requestAcceptedDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedDetails {
            switch json {
                case .dictionary(let dict):
                    let requestAcceptedDetails = TeamLog.TeamMergeRequestAcceptedExtraDetailsSerializer().deserialize(dict["request_accepted_details"] ?? .null)
                    return TeamMergeRequestAcceptedDetails(requestAcceptedDetails: requestAcceptedDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request acceptance details
    public enum TeamMergeRequestAcceptedExtraDetails: CustomStringConvertible {
        /// Team merge request accepted details shown to the primary team.
        case primaryTeam(TeamLog.PrimaryTeamRequestAcceptedDetails)
        /// Team merge request accepted details shown to the secondary team.
        case secondaryTeam(TeamLog.SecondaryTeamRequestAcceptedDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedExtraDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedExtraDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedExtraDetails) -> JSON {
            switch value {
                case .primaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.PrimaryTeamRequestAcceptedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("primary_team")
                    return .dictionary(d)
                case .secondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryTeamRequestAcceptedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedExtraDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "primary_team":
                            let v = TeamLog.PrimaryTeamRequestAcceptedDetailsSerializer().deserialize(json)
                            return TeamMergeRequestAcceptedExtraDetails.primaryTeam(v)
                        case "secondary_team":
                            let v = TeamLog.SecondaryTeamRequestAcceptedDetailsSerializer().deserialize(json)
                            return TeamMergeRequestAcceptedExtraDetails.secondaryTeam(v)
                        case "other":
                            return TeamMergeRequestAcceptedExtraDetails.other
                        default:
                            return TeamMergeRequestAcceptedExtraDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Accepted a team merge request.
    open class TeamMergeRequestAcceptedShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestAcceptedShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestAcceptedShownToPrimaryTeamType struct
    open class TeamMergeRequestAcceptedShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestAcceptedShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Accepted a team merge request.
    open class TeamMergeRequestAcceptedShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The primary team name.
        public let primaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(primaryTeam: String, sentBy: String) {
            stringValidator()(primaryTeam)
            self.primaryTeam = primaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "primary_team": Serialization._StringSerializer.serialize(value.primaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let primaryTeam = Serialization._StringSerializer.deserialize(dict["primary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestAcceptedShownToSecondaryTeamDetails(primaryTeam: primaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestAcceptedShownToSecondaryTeamType struct
    open class TeamMergeRequestAcceptedShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestAcceptedShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestAcceptedType struct
    open class TeamMergeRequestAcceptedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAcceptedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAcceptedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAcceptedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAcceptedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestAcceptedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Automatically canceled team merge request.
    open class TeamMergeRequestAutoCanceledDetails: CustomStringConvertible {
        /// The cancellation reason.
        public let details: String?
        public init(details: String? = nil) {
            nullableValidator(stringValidator())(details)
            self.details = details
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAutoCanceledDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAutoCanceledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAutoCanceledDetails) -> JSON {
            let output = [ 
            "details": NullableSerializer(Serialization._StringSerializer).serialize(value.details),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAutoCanceledDetails {
            switch json {
                case .dictionary(let dict):
                    let details = NullableSerializer(Serialization._StringSerializer).deserialize(dict["details"] ?? .null)
                    return TeamMergeRequestAutoCanceledDetails(details: details)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestAutoCanceledType struct
    open class TeamMergeRequestAutoCanceledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestAutoCanceledTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestAutoCanceledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestAutoCanceledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestAutoCanceledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestAutoCanceledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Canceled a team merge request.
    open class TeamMergeRequestCanceledDetails: CustomStringConvertible {
        /// Team merge request cancellation details.
        public let requestCanceledDetails: TeamLog.TeamMergeRequestCanceledExtraDetails
        public init(requestCanceledDetails: TeamLog.TeamMergeRequestCanceledExtraDetails) {
            self.requestCanceledDetails = requestCanceledDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledDetails) -> JSON {
            let output = [ 
            "request_canceled_details": TeamLog.TeamMergeRequestCanceledExtraDetailsSerializer().serialize(value.requestCanceledDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledDetails {
            switch json {
                case .dictionary(let dict):
                    let requestCanceledDetails = TeamLog.TeamMergeRequestCanceledExtraDetailsSerializer().deserialize(dict["request_canceled_details"] ?? .null)
                    return TeamMergeRequestCanceledDetails(requestCanceledDetails: requestCanceledDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request cancellation details
    public enum TeamMergeRequestCanceledExtraDetails: CustomStringConvertible {
        /// Team merge request cancellation details shown to the primary team.
        case primaryTeam(TeamLog.PrimaryTeamRequestCanceledDetails)
        /// Team merge request cancellation details shown to the secondary team.
        case secondaryTeam(TeamLog.SecondaryTeamRequestCanceledDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledExtraDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledExtraDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledExtraDetails) -> JSON {
            switch value {
                case .primaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.PrimaryTeamRequestCanceledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("primary_team")
                    return .dictionary(d)
                case .secondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryTeamRequestCanceledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledExtraDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "primary_team":
                            let v = TeamLog.PrimaryTeamRequestCanceledDetailsSerializer().deserialize(json)
                            return TeamMergeRequestCanceledExtraDetails.primaryTeam(v)
                        case "secondary_team":
                            let v = TeamLog.SecondaryTeamRequestCanceledDetailsSerializer().deserialize(json)
                            return TeamMergeRequestCanceledExtraDetails.secondaryTeam(v)
                        case "other":
                            return TeamMergeRequestCanceledExtraDetails.other
                        default:
                            return TeamMergeRequestCanceledExtraDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Canceled a team merge request.
    open class TeamMergeRequestCanceledShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestCanceledShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestCanceledShownToPrimaryTeamType struct
    open class TeamMergeRequestCanceledShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestCanceledShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Canceled a team merge request.
    open class TeamMergeRequestCanceledShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The email of the primary team admin that the request was sent to.
        public let sentTo: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(sentTo: String, sentBy: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestCanceledShownToSecondaryTeamDetails(sentTo: sentTo, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestCanceledShownToSecondaryTeamType struct
    open class TeamMergeRequestCanceledShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestCanceledShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestCanceledType struct
    open class TeamMergeRequestCanceledType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestCanceledTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestCanceledTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestCanceledType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestCanceledType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestCanceledType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request expired.
    open class TeamMergeRequestExpiredDetails: CustomStringConvertible {
        /// Team merge request expiration details.
        public let requestExpiredDetails: TeamLog.TeamMergeRequestExpiredExtraDetails
        public init(requestExpiredDetails: TeamLog.TeamMergeRequestExpiredExtraDetails) {
            self.requestExpiredDetails = requestExpiredDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredDetails) -> JSON {
            let output = [ 
            "request_expired_details": TeamLog.TeamMergeRequestExpiredExtraDetailsSerializer().serialize(value.requestExpiredDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredDetails {
            switch json {
                case .dictionary(let dict):
                    let requestExpiredDetails = TeamLog.TeamMergeRequestExpiredExtraDetailsSerializer().deserialize(dict["request_expired_details"] ?? .null)
                    return TeamMergeRequestExpiredDetails(requestExpiredDetails: requestExpiredDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request expiration details
    public enum TeamMergeRequestExpiredExtraDetails: CustomStringConvertible {
        /// Team merge request canceled details shown to the primary team.
        case primaryTeam(TeamLog.PrimaryTeamRequestExpiredDetails)
        /// Team merge request canceled details shown to the secondary team.
        case secondaryTeam(TeamLog.SecondaryTeamRequestExpiredDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredExtraDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredExtraDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredExtraDetails) -> JSON {
            switch value {
                case .primaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.PrimaryTeamRequestExpiredDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("primary_team")
                    return .dictionary(d)
                case .secondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryTeamRequestExpiredDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredExtraDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "primary_team":
                            let v = TeamLog.PrimaryTeamRequestExpiredDetailsSerializer().deserialize(json)
                            return TeamMergeRequestExpiredExtraDetails.primaryTeam(v)
                        case "secondary_team":
                            let v = TeamLog.SecondaryTeamRequestExpiredDetailsSerializer().deserialize(json)
                            return TeamMergeRequestExpiredExtraDetails.secondaryTeam(v)
                        case "other":
                            return TeamMergeRequestExpiredExtraDetails.other
                        default:
                            return TeamMergeRequestExpiredExtraDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Team merge request expired.
    open class TeamMergeRequestExpiredShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestExpiredShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestExpiredShownToPrimaryTeamType struct
    open class TeamMergeRequestExpiredShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestExpiredShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request expired.
    open class TeamMergeRequestExpiredShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The email of the primary team admin the request was sent to.
        public let sentTo: String
        public init(sentTo: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return TeamMergeRequestExpiredShownToSecondaryTeamDetails(sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestExpiredShownToSecondaryTeamType struct
    open class TeamMergeRequestExpiredShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestExpiredShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestExpiredType struct
    open class TeamMergeRequestExpiredType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestExpiredTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestExpiredTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestExpiredType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestExpiredType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestExpiredType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Rejected a team merge request.
    open class TeamMergeRequestRejectedShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(secondaryTeam: String, sentBy: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRejectedShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRejectedShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestRejectedShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestRejectedShownToPrimaryTeamType struct
    open class TeamMergeRequestRejectedShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRejectedShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRejectedShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRejectedShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRejectedShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestRejectedShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Rejected a team merge request.
    open class TeamMergeRequestRejectedShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The name of the secondary team admin who sent the request originally.
        public let sentBy: String
        public init(sentBy: String) {
            stringValidator()(sentBy)
            self.sentBy = sentBy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRejectedShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "sent_by": Serialization._StringSerializer.serialize(value.sentBy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRejectedShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let sentBy = Serialization._StringSerializer.deserialize(dict["sent_by"] ?? .null)
                    return TeamMergeRequestRejectedShownToSecondaryTeamDetails(sentBy: sentBy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestRejectedShownToSecondaryTeamType struct
    open class TeamMergeRequestRejectedShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRejectedShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRejectedShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRejectedShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRejectedShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestRejectedShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent a team merge request reminder.
    open class TeamMergeRequestReminderDetails: CustomStringConvertible {
        /// Team merge request reminder details.
        public let requestReminderDetails: TeamLog.TeamMergeRequestReminderExtraDetails
        public init(requestReminderDetails: TeamLog.TeamMergeRequestReminderExtraDetails) {
            self.requestReminderDetails = requestReminderDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderDetails) -> JSON {
            let output = [ 
            "request_reminder_details": TeamLog.TeamMergeRequestReminderExtraDetailsSerializer().serialize(value.requestReminderDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderDetails {
            switch json {
                case .dictionary(let dict):
                    let requestReminderDetails = TeamLog.TeamMergeRequestReminderExtraDetailsSerializer().deserialize(dict["request_reminder_details"] ?? .null)
                    return TeamMergeRequestReminderDetails(requestReminderDetails: requestReminderDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team merge request reminder details
    public enum TeamMergeRequestReminderExtraDetails: CustomStringConvertible {
        /// Team merge request reminder details shown to the primary team.
        case primaryTeam(TeamLog.PrimaryTeamRequestReminderDetails)
        /// Team merge request reminder details shown to the secondary team.
        case secondaryTeam(TeamLog.SecondaryTeamRequestReminderDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderExtraDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderExtraDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderExtraDetails) -> JSON {
            switch value {
                case .primaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.PrimaryTeamRequestReminderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("primary_team")
                    return .dictionary(d)
                case .secondaryTeam(let arg):
                    var d = Serialization.getFields(TeamLog.SecondaryTeamRequestReminderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("secondary_team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderExtraDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "primary_team":
                            let v = TeamLog.PrimaryTeamRequestReminderDetailsSerializer().deserialize(json)
                            return TeamMergeRequestReminderExtraDetails.primaryTeam(v)
                        case "secondary_team":
                            let v = TeamLog.SecondaryTeamRequestReminderDetailsSerializer().deserialize(json)
                            return TeamMergeRequestReminderExtraDetails.secondaryTeam(v)
                        case "other":
                            return TeamMergeRequestReminderExtraDetails.other
                        default:
                            return TeamMergeRequestReminderExtraDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Sent a team merge request reminder.
    open class TeamMergeRequestReminderShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the primary team admin the request was sent to.
        public let sentTo: String
        public init(secondaryTeam: String, sentTo: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return TeamMergeRequestReminderShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestReminderShownToPrimaryTeamType struct
    open class TeamMergeRequestReminderShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestReminderShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent a team merge request reminder.
    open class TeamMergeRequestReminderShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The email of the primary team admin the request was sent to.
        public let sentTo: String
        public init(sentTo: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return TeamMergeRequestReminderShownToSecondaryTeamDetails(sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestReminderShownToSecondaryTeamType struct
    open class TeamMergeRequestReminderShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestReminderShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestReminderType struct
    open class TeamMergeRequestReminderType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestReminderTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestReminderTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestReminderType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestReminderType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestReminderType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Canceled the team merge.
    open class TeamMergeRequestRevokedDetails: CustomStringConvertible {
        /// The name of the other team.
        public let team: String
        public init(team: String) {
            stringValidator()(team)
            self.team = team
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRevokedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRevokedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRevokedDetails) -> JSON {
            let output = [ 
            "team": Serialization._StringSerializer.serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRevokedDetails {
            switch json {
                case .dictionary(let dict):
                    let team = Serialization._StringSerializer.deserialize(dict["team"] ?? .null)
                    return TeamMergeRequestRevokedDetails(team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestRevokedType struct
    open class TeamMergeRequestRevokedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestRevokedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestRevokedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestRevokedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestRevokedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestRevokedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested to merge their Dropbox team into yours.
    open class TeamMergeRequestSentShownToPrimaryTeamDetails: CustomStringConvertible {
        /// The secondary team name.
        public let secondaryTeam: String
        /// The name of the primary team admin the request was sent to.
        public let sentTo: String
        public init(secondaryTeam: String, sentTo: String) {
            stringValidator()(secondaryTeam)
            self.secondaryTeam = secondaryTeam
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestSentShownToPrimaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestSentShownToPrimaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestSentShownToPrimaryTeamDetails) -> JSON {
            let output = [ 
            "secondary_team": Serialization._StringSerializer.serialize(value.secondaryTeam),
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestSentShownToPrimaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let secondaryTeam = Serialization._StringSerializer.deserialize(dict["secondary_team"] ?? .null)
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return TeamMergeRequestSentShownToPrimaryTeamDetails(secondaryTeam: secondaryTeam, sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestSentShownToPrimaryTeamType struct
    open class TeamMergeRequestSentShownToPrimaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestSentShownToPrimaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestSentShownToPrimaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestSentShownToPrimaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestSentShownToPrimaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestSentShownToPrimaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested to merge your team into another Dropbox team.
    open class TeamMergeRequestSentShownToSecondaryTeamDetails: CustomStringConvertible {
        /// The email of the primary team admin the request was sent to.
        public let sentTo: String
        public init(sentTo: String) {
            stringValidator()(sentTo)
            self.sentTo = sentTo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestSentShownToSecondaryTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestSentShownToSecondaryTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestSentShownToSecondaryTeamDetails) -> JSON {
            let output = [ 
            "sent_to": Serialization._StringSerializer.serialize(value.sentTo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestSentShownToSecondaryTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let sentTo = Serialization._StringSerializer.deserialize(dict["sent_to"] ?? .null)
                    return TeamMergeRequestSentShownToSecondaryTeamDetails(sentTo: sentTo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeRequestSentShownToSecondaryTeamType struct
    open class TeamMergeRequestSentShownToSecondaryTeamType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeRequestSentShownToSecondaryTeamTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeRequestSentShownToSecondaryTeamTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeRequestSentShownToSecondaryTeamType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeRequestSentShownToSecondaryTeamType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeRequestSentShownToSecondaryTeamType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Merged this team into another team.
    open class TeamMergeToDetails: CustomStringConvertible {
        /// The name of the team that this team was merged into.
        public let teamName: String
        public init(teamName: String) {
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeToDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeToDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeToDetails) -> JSON {
            let output = [ 
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeToDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    return TeamMergeToDetails(teamName: teamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMergeToType struct
    open class TeamMergeToType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeToTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMergeToTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeToType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeToType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamMergeToType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team name details
    open class TeamName: CustomStringConvertible {
        /// Team's display name.
        public let teamDisplayName: String
        /// Team's legal name.
        public let teamLegalName: String
        public init(teamDisplayName: String, teamLegalName: String) {
            stringValidator()(teamDisplayName)
            self.teamDisplayName = teamDisplayName
            stringValidator()(teamLegalName)
            self.teamLegalName = teamLegalName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamNameSerializer().serialize(self)))"
        }
    }
    open class TeamNameSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamName) -> JSON {
            let output = [ 
            "team_display_name": Serialization._StringSerializer.serialize(value.teamDisplayName),
            "team_legal_name": Serialization._StringSerializer.serialize(value.teamLegalName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamName {
            switch json {
                case .dictionary(let dict):
                    let teamDisplayName = Serialization._StringSerializer.deserialize(dict["team_display_name"] ?? .null)
                    let teamLegalName = Serialization._StringSerializer.deserialize(dict["team_legal_name"] ?? .null)
                    return TeamName(teamDisplayName: teamDisplayName, teamLegalName: teamLegalName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team background to display on shared link headers.
    open class TeamProfileAddBackgroundDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileAddBackgroundDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileAddBackgroundDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileAddBackgroundDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileAddBackgroundDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileAddBackgroundDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileAddBackgroundType struct
    open class TeamProfileAddBackgroundType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileAddBackgroundTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileAddBackgroundTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileAddBackgroundType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileAddBackgroundType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileAddBackgroundType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team logo to display on shared link headers.
    open class TeamProfileAddLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileAddLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileAddLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileAddLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileAddLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileAddLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileAddLogoType struct
    open class TeamProfileAddLogoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileAddLogoTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileAddLogoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileAddLogoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileAddLogoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileAddLogoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team background displayed on shared link headers.
    open class TeamProfileChangeBackgroundDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeBackgroundDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeBackgroundDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeBackgroundDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeBackgroundDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileChangeBackgroundDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileChangeBackgroundType struct
    open class TeamProfileChangeBackgroundType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeBackgroundTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeBackgroundTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeBackgroundType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeBackgroundType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileChangeBackgroundType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed default language for team.
    open class TeamProfileChangeDefaultLanguageDetails: CustomStringConvertible {
        /// New team's default language.
        public let newValue: String
        /// Previous team's default language.
        public let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator(minLength: 2)(newValue)
            self.newValue = newValue
            stringValidator(minLength: 2)(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeDefaultLanguageDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeDefaultLanguageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeDefaultLanguageDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeDefaultLanguageDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return TeamProfileChangeDefaultLanguageDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileChangeDefaultLanguageType struct
    open class TeamProfileChangeDefaultLanguageType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeDefaultLanguageTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeDefaultLanguageTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeDefaultLanguageType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeDefaultLanguageType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileChangeDefaultLanguageType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team logo displayed on shared link headers.
    open class TeamProfileChangeLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileChangeLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileChangeLogoType struct
    open class TeamProfileChangeLogoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeLogoTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeLogoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeLogoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeLogoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileChangeLogoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team name.
    open class TeamProfileChangeNameDetails: CustomStringConvertible {
        /// Previous teams name. Might be missing due to historical data gap.
        public let previousValue: TeamLog.TeamName?
        /// New team name.
        public let newValue: TeamLog.TeamName
        public init(newValue: TeamLog.TeamName, previousValue: TeamLog.TeamName? = nil) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeNameDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeNameDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamNameSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TeamNameSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeNameDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamNameSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TeamNameSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TeamProfileChangeNameDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileChangeNameType struct
    open class TeamProfileChangeNameType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeNameTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeNameTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeNameType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeNameType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileChangeNameType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed team background displayed on shared link headers.
    open class TeamProfileRemoveBackgroundDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileRemoveBackgroundDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileRemoveBackgroundDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileRemoveBackgroundDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileRemoveBackgroundDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileRemoveBackgroundDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileRemoveBackgroundType struct
    open class TeamProfileRemoveBackgroundType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileRemoveBackgroundTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileRemoveBackgroundTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileRemoveBackgroundType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileRemoveBackgroundType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileRemoveBackgroundType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed team logo displayed on shared link headers.
    open class TeamProfileRemoveLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileRemoveLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileRemoveLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileRemoveLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileRemoveLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileRemoveLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamProfileRemoveLogoType struct
    open class TeamProfileRemoveLogoType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileRemoveLogoTypeSerializer().serialize(self)))"
        }
    }
    open class TeamProfileRemoveLogoTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileRemoveLogoType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileRemoveLogoType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamProfileRemoveLogoType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling whether team selective sync is enabled for team.
    public enum TeamSelectiveSyncPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSelectiveSyncPolicySerializer().serialize(self)))"
        }
    }
    open class TeamSelectiveSyncPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSelectiveSyncPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamSelectiveSyncPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TeamSelectiveSyncPolicy.disabled
                        case "enabled":
                            return TeamSelectiveSyncPolicy.enabled
                        case "other":
                            return TeamSelectiveSyncPolicy.other
                        default:
                            return TeamSelectiveSyncPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled/disabled Team Selective Sync for team.
    open class TeamSelectiveSyncPolicyChangedDetails: CustomStringConvertible {
        /// New Team Selective Sync policy.
        public let newValue: TeamLog.TeamSelectiveSyncPolicy
        /// Previous Team Selective Sync policy.
        public let previousValue: TeamLog.TeamSelectiveSyncPolicy
        public init(newValue: TeamLog.TeamSelectiveSyncPolicy, previousValue: TeamLog.TeamSelectiveSyncPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSelectiveSyncPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamSelectiveSyncPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSelectiveSyncPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamSelectiveSyncPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.TeamSelectiveSyncPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSelectiveSyncPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamSelectiveSyncPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.TeamSelectiveSyncPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return TeamSelectiveSyncPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamSelectiveSyncPolicyChangedType struct
    open class TeamSelectiveSyncPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSelectiveSyncPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamSelectiveSyncPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSelectiveSyncPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSelectiveSyncPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamSelectiveSyncPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed sync default.
    open class TeamSelectiveSyncSettingsChangedDetails: CustomStringConvertible {
        /// Previous value.
        public let previousValue: Files.SyncSetting
        /// New value.
        public let newValue: Files.SyncSetting
        public init(previousValue: Files.SyncSetting, newValue: Files.SyncSetting) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSelectiveSyncSettingsChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamSelectiveSyncSettingsChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSelectiveSyncSettingsChangedDetails) -> JSON {
            let output = [ 
            "previous_value": Files.SyncSettingSerializer().serialize(value.previousValue),
            "new_value": Files.SyncSettingSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSelectiveSyncSettingsChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Files.SyncSettingSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = Files.SyncSettingSerializer().deserialize(dict["new_value"] ?? .null)
                    return TeamSelectiveSyncSettingsChangedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamSelectiveSyncSettingsChangedType struct
    open class TeamSelectiveSyncSettingsChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSelectiveSyncSettingsChangedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamSelectiveSyncSettingsChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSelectiveSyncSettingsChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSelectiveSyncSettingsChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamSelectiveSyncSettingsChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited the approved list for sharing externally.
    open class TeamSharingWhitelistSubjectsChangedDetails: CustomStringConvertible {
        /// Domains or emails added to the approved list for sharing externally.
        public let addedWhitelistSubjects: Array<String>
        /// Domains or emails removed from the approved list for sharing externally.
        public let removedWhitelistSubjects: Array<String>
        public init(addedWhitelistSubjects: Array<String>, removedWhitelistSubjects: Array<String>) {
            arrayValidator(itemValidator: stringValidator())(addedWhitelistSubjects)
            self.addedWhitelistSubjects = addedWhitelistSubjects
            arrayValidator(itemValidator: stringValidator())(removedWhitelistSubjects)
            self.removedWhitelistSubjects = removedWhitelistSubjects
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSharingWhitelistSubjectsChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamSharingWhitelistSubjectsChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSharingWhitelistSubjectsChangedDetails) -> JSON {
            let output = [ 
            "added_whitelist_subjects": ArraySerializer(Serialization._StringSerializer).serialize(value.addedWhitelistSubjects),
            "removed_whitelist_subjects": ArraySerializer(Serialization._StringSerializer).serialize(value.removedWhitelistSubjects),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSharingWhitelistSubjectsChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let addedWhitelistSubjects = ArraySerializer(Serialization._StringSerializer).deserialize(dict["added_whitelist_subjects"] ?? .null)
                    let removedWhitelistSubjects = ArraySerializer(Serialization._StringSerializer).deserialize(dict["removed_whitelist_subjects"] ?? .null)
                    return TeamSharingWhitelistSubjectsChangedDetails(addedWhitelistSubjects: addedWhitelistSubjects, removedWhitelistSubjects: removedWhitelistSubjects)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamSharingWhitelistSubjectsChangedType struct
    open class TeamSharingWhitelistSubjectsChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamSharingWhitelistSubjectsChangedTypeSerializer().serialize(self)))"
        }
    }
    open class TeamSharingWhitelistSubjectsChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamSharingWhitelistSubjectsChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamSharingWhitelistSubjectsChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TeamSharingWhitelistSubjectsChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added backup phone for two-step verification.
    open class TfaAddBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaAddBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaAddBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaAddBackupPhoneType struct
    open class TfaAddBackupPhoneType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddBackupPhoneTypeSerializer().serialize(self)))"
        }
    }
    open class TfaAddBackupPhoneTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddBackupPhoneType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddBackupPhoneType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaAddBackupPhoneType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added members to two factor authentication exception list.
    open class TfaAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return TfaAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaAddExceptionType struct
    open class TfaAddExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class TfaAddExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaAddExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added security key for two-step verification.
    open class TfaAddSecurityKeyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddSecurityKeyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaAddSecurityKeyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddSecurityKeyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddSecurityKeyDetails {
            switch json {
                case .dictionary(_):
                    return TfaAddSecurityKeyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaAddSecurityKeyType struct
    open class TfaAddSecurityKeyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddSecurityKeyTypeSerializer().serialize(self)))"
        }
    }
    open class TfaAddSecurityKeyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddSecurityKeyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddSecurityKeyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaAddSecurityKeyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed backup phone for two-step verification.
    open class TfaChangeBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangeBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaChangeBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaChangeBackupPhoneType struct
    open class TfaChangeBackupPhoneType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeBackupPhoneTypeSerializer().serialize(self)))"
        }
    }
    open class TfaChangeBackupPhoneTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeBackupPhoneType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeBackupPhoneType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaChangeBackupPhoneType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed two-step verification setting for team.
    open class TfaChangePolicyDetails: CustomStringConvertible {
        /// New change policy.
        public let newValue: TeamPolicies.TwoStepVerificationPolicy
        /// Previous change policy. Might be missing due to historical data gap.
        public let previousValue: TeamPolicies.TwoStepVerificationPolicy?
        public init(newValue: TeamPolicies.TwoStepVerificationPolicy, previousValue: TeamPolicies.TwoStepVerificationPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.TwoStepVerificationPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.TwoStepVerificationPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.TwoStepVerificationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.TwoStepVerificationPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TfaChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaChangePolicyType struct
    open class TfaChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class TfaChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled/disabled/changed two-step verification setting.
    open class TfaChangeStatusDetails: CustomStringConvertible {
        /// The new two factor authentication configuration.
        public let newValue: TeamLog.TfaConfiguration
        /// The previous two factor authentication configuration. Might be missing due to historical data gap.
        public let previousValue: TeamLog.TfaConfiguration?
        /// Used two factor authentication rescue code. This flag is relevant when the two factor authentication
        /// configuration is disabled.
        public let usedRescueCode: Bool?
        public init(newValue: TeamLog.TfaConfiguration, previousValue: TeamLog.TfaConfiguration? = nil, usedRescueCode: Bool? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
            self.usedRescueCode = usedRescueCode
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TfaConfigurationSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TfaConfigurationSerializer()).serialize(value.previousValue),
            "used_rescue_code": NullableSerializer(Serialization._BoolSerializer).serialize(value.usedRescueCode),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TfaConfigurationSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TfaConfigurationSerializer()).deserialize(dict["previous_value"] ?? .null)
                    let usedRescueCode = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["used_rescue_code"] ?? .null)
                    return TfaChangeStatusDetails(newValue: newValue, previousValue: previousValue, usedRescueCode: usedRescueCode)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaChangeStatusType struct
    open class TfaChangeStatusType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeStatusTypeSerializer().serialize(self)))"
        }
    }
    open class TfaChangeStatusTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeStatusType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeStatusType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaChangeStatusType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Two factor authentication configuration. Note: the enabled option is deprecated.
    public enum TfaConfiguration: CustomStringConvertible {
        /// An unspecified error.
        case authenticator
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case sms
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaConfigurationSerializer().serialize(self)))"
        }
    }
    open class TfaConfigurationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaConfiguration) -> JSON {
            switch value {
                case .authenticator:
                    var d = [String: JSON]()
                    d[".tag"] = .str("authenticator")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .sms:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sms")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TfaConfiguration {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "authenticator":
                            return TfaConfiguration.authenticator
                        case "disabled":
                            return TfaConfiguration.disabled
                        case "enabled":
                            return TfaConfiguration.enabled
                        case "sms":
                            return TfaConfiguration.sms
                        case "other":
                            return TfaConfiguration.other
                        default:
                            return TfaConfiguration.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Removed backup phone for two-step verification.
    open class TfaRemoveBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaRemoveBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaRemoveBackupPhoneType struct
    open class TfaRemoveBackupPhoneType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveBackupPhoneTypeSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveBackupPhoneTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveBackupPhoneType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveBackupPhoneType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaRemoveBackupPhoneType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed members from two factor authentication exception list.
    open class TfaRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return TfaRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaRemoveExceptionType struct
    open class TfaRemoveExceptionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveExceptionTypeSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveExceptionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveExceptionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveExceptionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaRemoveExceptionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed security key for two-step verification.
    open class TfaRemoveSecurityKeyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveSecurityKeyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveSecurityKeyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveSecurityKeyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveSecurityKeyDetails {
            switch json {
                case .dictionary(_):
                    return TfaRemoveSecurityKeyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaRemoveSecurityKeyType struct
    open class TfaRemoveSecurityKeyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveSecurityKeyTypeSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveSecurityKeyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveSecurityKeyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveSecurityKeyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaRemoveSecurityKeyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset two-step verification for team member.
    open class TfaResetDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaResetDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaResetDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaResetDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaResetDetails {
            switch json {
                case .dictionary(_):
                    return TfaResetDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TfaResetType struct
    open class TfaResetType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaResetTypeSerializer().serialize(self)))"
        }
    }
    open class TfaResetTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaResetType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaResetType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TfaResetType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TimeUnit union
    public enum TimeUnit: CustomStringConvertible {
        /// An unspecified error.
        case days
        /// An unspecified error.
        case hours
        /// An unspecified error.
        case milliseconds
        /// An unspecified error.
        case minutes
        /// An unspecified error.
        case months
        /// An unspecified error.
        case seconds
        /// An unspecified error.
        case weeks
        /// An unspecified error.
        case years
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TimeUnitSerializer().serialize(self)))"
        }
    }
    open class TimeUnitSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TimeUnit) -> JSON {
            switch value {
                case .days:
                    var d = [String: JSON]()
                    d[".tag"] = .str("days")
                    return .dictionary(d)
                case .hours:
                    var d = [String: JSON]()
                    d[".tag"] = .str("hours")
                    return .dictionary(d)
                case .milliseconds:
                    var d = [String: JSON]()
                    d[".tag"] = .str("milliseconds")
                    return .dictionary(d)
                case .minutes:
                    var d = [String: JSON]()
                    d[".tag"] = .str("minutes")
                    return .dictionary(d)
                case .months:
                    var d = [String: JSON]()
                    d[".tag"] = .str("months")
                    return .dictionary(d)
                case .seconds:
                    var d = [String: JSON]()
                    d[".tag"] = .str("seconds")
                    return .dictionary(d)
                case .weeks:
                    var d = [String: JSON]()
                    d[".tag"] = .str("weeks")
                    return .dictionary(d)
                case .years:
                    var d = [String: JSON]()
                    d[".tag"] = .str("years")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TimeUnit {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "days":
                            return TimeUnit.days
                        case "hours":
                            return TimeUnit.hours
                        case "milliseconds":
                            return TimeUnit.milliseconds
                        case "minutes":
                            return TimeUnit.minutes
                        case "months":
                            return TimeUnit.months
                        case "seconds":
                            return TimeUnit.seconds
                        case "weeks":
                            return TimeUnit.weeks
                        case "years":
                            return TimeUnit.years
                        case "other":
                            return TimeUnit.other
                        default:
                            return TimeUnit.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// User that is not a member of the team but considered trusted.
    open class TrustedNonTeamMemberLogInfo: TeamLog.UserLogInfo {
        /// Indicates the type of the member of a trusted team.
        public let trustedNonTeamMemberType: TeamLog.TrustedNonTeamMemberType
        /// Details about this user's trusted team.
        public let team: TeamLog.TeamLogInfo?
        public init(trustedNonTeamMemberType: TeamLog.TrustedNonTeamMemberType, accountId: String? = nil, displayName: String? = nil, email: String? = nil, team: TeamLog.TeamLogInfo? = nil) {
            self.trustedNonTeamMemberType = trustedNonTeamMemberType
            self.team = team
            super.init(accountId: accountId, displayName: displayName, email: email)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TrustedNonTeamMemberLogInfoSerializer().serialize(self)))"
        }
    }
    open class TrustedNonTeamMemberLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TrustedNonTeamMemberLogInfo) -> JSON {
            let output = [ 
            "trusted_non_team_member_type": TeamLog.TrustedNonTeamMemberTypeSerializer().serialize(value.trustedNonTeamMemberType),
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            "team": NullableSerializer(TeamLog.TeamLogInfoSerializer()).serialize(value.team),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TrustedNonTeamMemberLogInfo {
            switch json {
                case .dictionary(let dict):
                    let trustedNonTeamMemberType = TeamLog.TrustedNonTeamMemberTypeSerializer().deserialize(dict["trusted_non_team_member_type"] ?? .null)
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                    let team = NullableSerializer(TeamLog.TeamLogInfoSerializer()).deserialize(dict["team"] ?? .null)
                    return TrustedNonTeamMemberLogInfo(trustedNonTeamMemberType: trustedNonTeamMemberType, accountId: accountId, displayName: displayName, email: email, team: team)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TrustedNonTeamMemberType union
    public enum TrustedNonTeamMemberType: CustomStringConvertible {
        /// An unspecified error.
        case enterpriseAdmin
        /// An unspecified error.
        case multiInstanceAdmin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TrustedNonTeamMemberTypeSerializer().serialize(self)))"
        }
    }
    open class TrustedNonTeamMemberTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TrustedNonTeamMemberType) -> JSON {
            switch value {
                case .enterpriseAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enterprise_admin")
                    return .dictionary(d)
                case .multiInstanceAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("multi_instance_admin")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TrustedNonTeamMemberType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "enterprise_admin":
                            return TrustedNonTeamMemberType.enterpriseAdmin
                        case "multi_instance_admin":
                            return TrustedNonTeamMemberType.multiInstanceAdmin
                        case "other":
                            return TrustedNonTeamMemberType.other
                        default:
                            return TrustedNonTeamMemberType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The TrustedTeamsRequestAction union
    public enum TrustedTeamsRequestAction: CustomStringConvertible {
        /// An unspecified error.
        case accepted
        /// An unspecified error.
        case declined
        /// An unspecified error.
        case expired
        /// An unspecified error.
        case invited
        /// An unspecified error.
        case revoked
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TrustedTeamsRequestActionSerializer().serialize(self)))"
        }
    }
    open class TrustedTeamsRequestActionSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TrustedTeamsRequestAction) -> JSON {
            switch value {
                case .accepted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("accepted")
                    return .dictionary(d)
                case .declined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("declined")
                    return .dictionary(d)
                case .expired:
                    var d = [String: JSON]()
                    d[".tag"] = .str("expired")
                    return .dictionary(d)
                case .invited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited")
                    return .dictionary(d)
                case .revoked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("revoked")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TrustedTeamsRequestAction {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "accepted":
                            return TrustedTeamsRequestAction.accepted
                        case "declined":
                            return TrustedTeamsRequestAction.declined
                        case "expired":
                            return TrustedTeamsRequestAction.expired
                        case "invited":
                            return TrustedTeamsRequestAction.invited
                        case "revoked":
                            return TrustedTeamsRequestAction.revoked
                        case "other":
                            return TrustedTeamsRequestAction.other
                        default:
                            return TrustedTeamsRequestAction.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The TrustedTeamsRequestState union
    public enum TrustedTeamsRequestState: CustomStringConvertible {
        /// An unspecified error.
        case invited
        /// An unspecified error.
        case linked
        /// An unspecified error.
        case unlinked
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TrustedTeamsRequestStateSerializer().serialize(self)))"
        }
    }
    open class TrustedTeamsRequestStateSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TrustedTeamsRequestState) -> JSON {
            switch value {
                case .invited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited")
                    return .dictionary(d)
                case .linked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("linked")
                    return .dictionary(d)
                case .unlinked:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlinked")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TrustedTeamsRequestState {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "invited":
                            return TrustedTeamsRequestState.invited
                        case "linked":
                            return TrustedTeamsRequestState.linked
                        case "unlinked":
                            return TrustedTeamsRequestState.unlinked
                        case "other":
                            return TrustedTeamsRequestState.other
                        default:
                            return TrustedTeamsRequestState.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled/disabled option for members to link personal Dropbox account and team account to same computer.
    open class TwoAccountChangePolicyDetails: CustomStringConvertible {
        /// New two account policy.
        public let newValue: TeamLog.TwoAccountPolicy
        /// Previous two account policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.TwoAccountPolicy?
        public init(newValue: TeamLog.TwoAccountPolicy, previousValue: TeamLog.TwoAccountPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TwoAccountChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class TwoAccountChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TwoAccountChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TwoAccountPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TwoAccountPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TwoAccountChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TwoAccountPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TwoAccountPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TwoAccountChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TwoAccountChangePolicyType struct
    open class TwoAccountChangePolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TwoAccountChangePolicyTypeSerializer().serialize(self)))"
        }
    }
    open class TwoAccountChangePolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TwoAccountChangePolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TwoAccountChangePolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return TwoAccountChangePolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for pairing personal account to work account
    public enum TwoAccountPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TwoAccountPolicySerializer().serialize(self)))"
        }
    }
    open class TwoAccountPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TwoAccountPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TwoAccountPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TwoAccountPolicy.disabled
                        case "enabled":
                            return TwoAccountPolicy.enabled
                        case "other":
                            return TwoAccountPolicy.other
                        default:
                            return TwoAccountPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Reverted naming convention.
    open class UndoNamingConventionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UndoNamingConventionDetailsSerializer().serialize(self)))"
        }
    }
    open class UndoNamingConventionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UndoNamingConventionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UndoNamingConventionDetails {
            switch json {
                case .dictionary(_):
                    return UndoNamingConventionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UndoNamingConventionType struct
    open class UndoNamingConventionType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UndoNamingConventionTypeSerializer().serialize(self)))"
        }
    }
    open class UndoNamingConventionTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UndoNamingConventionType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UndoNamingConventionType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return UndoNamingConventionType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed multi-file organize.
    open class UndoOrganizeFolderWithTidyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UndoOrganizeFolderWithTidyDetailsSerializer().serialize(self)))"
        }
    }
    open class UndoOrganizeFolderWithTidyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UndoOrganizeFolderWithTidyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UndoOrganizeFolderWithTidyDetails {
            switch json {
                case .dictionary(_):
                    return UndoOrganizeFolderWithTidyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UndoOrganizeFolderWithTidyType struct
    open class UndoOrganizeFolderWithTidyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UndoOrganizeFolderWithTidyTypeSerializer().serialize(self)))"
        }
    }
    open class UndoOrganizeFolderWithTidyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UndoOrganizeFolderWithTidyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UndoOrganizeFolderWithTidyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return UndoOrganizeFolderWithTidyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User linked app
    open class UserLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return UserLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User's name logged information
    open class UserNameLogInfo: CustomStringConvertible {
        /// Given name.
        public let givenName: String
        /// Surname.
        public let surname: String
        /// Locale. Might be missing due to historical data gap.
        public let locale: String?
        public init(givenName: String, surname: String, locale: String? = nil) {
            stringValidator()(givenName)
            self.givenName = givenName
            stringValidator()(surname)
            self.surname = surname
            nullableValidator(stringValidator())(locale)
            self.locale = locale
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserNameLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserNameLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserNameLogInfo) -> JSON {
            let output = [ 
            "given_name": Serialization._StringSerializer.serialize(value.givenName),
            "surname": Serialization._StringSerializer.serialize(value.surname),
            "locale": NullableSerializer(Serialization._StringSerializer).serialize(value.locale),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserNameLogInfo {
            switch json {
                case .dictionary(let dict):
                    let givenName = Serialization._StringSerializer.deserialize(dict["given_name"] ?? .null)
                    let surname = Serialization._StringSerializer.deserialize(dict["surname"] ?? .null)
                    let locale = NullableSerializer(Serialization._StringSerializer).deserialize(dict["locale"] ?? .null)
                    return UserNameLogInfo(givenName: givenName, surname: surname, locale: locale)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User or team linked app. Used when linked type is missing due to historical data gap.
    open class UserOrTeamLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserOrTeamLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserOrTeamLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserOrTeamLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserOrTeamLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return UserOrTeamLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Tagged a file.
    open class UserTagsAddedDetails: CustomStringConvertible {
        /// values.
        public let values: Array<String>
        public init(values: Array<String>) {
            arrayValidator(itemValidator: stringValidator())(values)
            self.values = values
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserTagsAddedDetailsSerializer().serialize(self)))"
        }
    }
    open class UserTagsAddedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserTagsAddedDetails) -> JSON {
            let output = [ 
            "values": ArraySerializer(Serialization._StringSerializer).serialize(value.values),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserTagsAddedDetails {
            switch json {
                case .dictionary(let dict):
                    let values = ArraySerializer(Serialization._StringSerializer).deserialize(dict["values"] ?? .null)
                    return UserTagsAddedDetails(values: values)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UserTagsAddedType struct
    open class UserTagsAddedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserTagsAddedTypeSerializer().serialize(self)))"
        }
    }
    open class UserTagsAddedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserTagsAddedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserTagsAddedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return UserTagsAddedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed tags.
    open class UserTagsRemovedDetails: CustomStringConvertible {
        /// values.
        public let values: Array<String>
        public init(values: Array<String>) {
            arrayValidator(itemValidator: stringValidator())(values)
            self.values = values
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserTagsRemovedDetailsSerializer().serialize(self)))"
        }
    }
    open class UserTagsRemovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserTagsRemovedDetails) -> JSON {
            let output = [ 
            "values": ArraySerializer(Serialization._StringSerializer).serialize(value.values),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserTagsRemovedDetails {
            switch json {
                case .dictionary(let dict):
                    let values = ArraySerializer(Serialization._StringSerializer).deserialize(dict["values"] ?? .null)
                    return UserTagsRemovedDetails(values: values)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The UserTagsRemovedType struct
    open class UserTagsRemovedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserTagsRemovedTypeSerializer().serialize(self)))"
        }
    }
    open class UserTagsRemovedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserTagsRemovedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserTagsRemovedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return UserTagsRemovedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team policy for viewer info.
    open class ViewerInfoPolicyChangedDetails: CustomStringConvertible {
        /// Previous Viewer Info policy.
        public let previousValue: TeamLog.PassPolicy
        /// New Viewer Info policy.
        public let newValue: TeamLog.PassPolicy
        public init(previousValue: TeamLog.PassPolicy, newValue: TeamLog.PassPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ViewerInfoPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class ViewerInfoPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ViewerInfoPolicyChangedDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.PassPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.PassPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ViewerInfoPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.PassPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.PassPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return ViewerInfoPolicyChangedDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ViewerInfoPolicyChangedType struct
    open class ViewerInfoPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ViewerInfoPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class ViewerInfoPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ViewerInfoPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ViewerInfoPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return ViewerInfoPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling team access to watermarking feature
    public enum WatermarkingPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WatermarkingPolicySerializer().serialize(self)))"
        }
    }
    open class WatermarkingPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WatermarkingPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> WatermarkingPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return WatermarkingPolicy.disabled
                        case "enabled":
                            return WatermarkingPolicy.enabled
                        case "other":
                            return WatermarkingPolicy.other
                        default:
                            return WatermarkingPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed watermarking policy for team.
    open class WatermarkingPolicyChangedDetails: CustomStringConvertible {
        /// New watermarking policy.
        public let newValue: TeamLog.WatermarkingPolicy
        /// Previous watermarking policy.
        public let previousValue: TeamLog.WatermarkingPolicy
        public init(newValue: TeamLog.WatermarkingPolicy, previousValue: TeamLog.WatermarkingPolicy) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WatermarkingPolicyChangedDetailsSerializer().serialize(self)))"
        }
    }
    open class WatermarkingPolicyChangedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WatermarkingPolicyChangedDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.WatermarkingPolicySerializer().serialize(value.newValue),
            "previous_value": TeamLog.WatermarkingPolicySerializer().serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WatermarkingPolicyChangedDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.WatermarkingPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = TeamLog.WatermarkingPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    return WatermarkingPolicyChangedDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The WatermarkingPolicyChangedType struct
    open class WatermarkingPolicyChangedType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WatermarkingPolicyChangedTypeSerializer().serialize(self)))"
        }
    }
    open class WatermarkingPolicyChangedTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WatermarkingPolicyChangedType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WatermarkingPolicyChangedType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return WatermarkingPolicyChangedType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Information on active web sessions
    open class WebDeviceSessionLogInfo: TeamLog.DeviceSessionLogInfo {
        /// Web session unique id.
        public let sessionInfo: TeamLog.WebSessionLogInfo?
        /// Information on the hosting device.
        public let userAgent: String
        /// Information on the hosting operating system.
        public let os: String
        /// Information on the browser used for this web session.
        public let browser: String
        public init(userAgent: String, os: String, browser: String, ipAddress: String? = nil, created: Date? = nil, updated: Date? = nil, sessionInfo: TeamLog.WebSessionLogInfo? = nil) {
            self.sessionInfo = sessionInfo
            stringValidator()(userAgent)
            self.userAgent = userAgent
            stringValidator()(os)
            self.os = os
            stringValidator()(browser)
            self.browser = browser
            super.init(ipAddress: ipAddress, created: created, updated: updated)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebDeviceSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class WebDeviceSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebDeviceSessionLogInfo) -> JSON {
            let output = [ 
            "user_agent": Serialization._StringSerializer.serialize(value.userAgent),
            "os": Serialization._StringSerializer.serialize(value.os),
            "browser": Serialization._StringSerializer.serialize(value.browser),
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "created": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.created),
            "updated": NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).serialize(value.updated),
            "session_info": NullableSerializer(TeamLog.WebSessionLogInfoSerializer()).serialize(value.sessionInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebDeviceSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let userAgent = Serialization._StringSerializer.deserialize(dict["user_agent"] ?? .null)
                    let os = Serialization._StringSerializer.deserialize(dict["os"] ?? .null)
                    let browser = Serialization._StringSerializer.deserialize(dict["browser"] ?? .null)
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    let created = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["created"] ?? .null)
                    let updated = NullableSerializer(NSDateSerializer("%Y-%m-%dT%H:%M:%SZ")).deserialize(dict["updated"] ?? .null)
                    let sessionInfo = NullableSerializer(TeamLog.WebSessionLogInfoSerializer()).deserialize(dict["session_info"] ?? .null)
                    return WebDeviceSessionLogInfo(userAgent: userAgent, os: os, browser: browser, ipAddress: ipAddress, created: created, updated: updated, sessionInfo: sessionInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Web session.
    open class WebSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class WebSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return WebSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed limit on active sessions per member.
    open class WebSessionsChangeActiveSessionLimitDetails: CustomStringConvertible {
        /// Previous max number of concurrent active sessions policy.
        public let previousValue: String
        /// New max number of concurrent active sessions policy.
        public let newValue: String
        public init(previousValue: String, newValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeActiveSessionLimitDetailsSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeActiveSessionLimitDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeActiveSessionLimitDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeActiveSessionLimitDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return WebSessionsChangeActiveSessionLimitDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The WebSessionsChangeActiveSessionLimitType struct
    open class WebSessionsChangeActiveSessionLimitType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeActiveSessionLimitTypeSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeActiveSessionLimitTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeActiveSessionLimitType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeActiveSessionLimitType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return WebSessionsChangeActiveSessionLimitType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed how long members can stay signed in to Dropbox.com.
    open class WebSessionsChangeFixedLengthPolicyDetails: CustomStringConvertible {
        /// New session length policy. Might be missing due to historical data gap.
        public let newValue: TeamLog.WebSessionsFixedLengthPolicy?
        /// Previous session length policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.WebSessionsFixedLengthPolicy?
        public init(newValue: TeamLog.WebSessionsFixedLengthPolicy? = nil, previousValue: TeamLog.WebSessionsFixedLengthPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeFixedLengthPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeFixedLengthPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeFixedLengthPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeFixedLengthPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return WebSessionsChangeFixedLengthPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The WebSessionsChangeFixedLengthPolicyType struct
    open class WebSessionsChangeFixedLengthPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeFixedLengthPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeFixedLengthPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeFixedLengthPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeFixedLengthPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return WebSessionsChangeFixedLengthPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed how long team members can be idle while signed in to Dropbox.com.
    open class WebSessionsChangeIdleLengthPolicyDetails: CustomStringConvertible {
        /// New idle length policy. Might be missing due to historical data gap.
        public let newValue: TeamLog.WebSessionsIdleLengthPolicy?
        /// Previous idle length policy. Might be missing due to historical data gap.
        public let previousValue: TeamLog.WebSessionsIdleLengthPolicy?
        public init(newValue: TeamLog.WebSessionsIdleLengthPolicy? = nil, previousValue: TeamLog.WebSessionsIdleLengthPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeIdleLengthPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeIdleLengthPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeIdleLengthPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeIdleLengthPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return WebSessionsChangeIdleLengthPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The WebSessionsChangeIdleLengthPolicyType struct
    open class WebSessionsChangeIdleLengthPolicyType: CustomStringConvertible {
        /// (no description)
        public let description_: String
        public init(description_: String) {
            stringValidator()(description_)
            self.description_ = description_
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeIdleLengthPolicyTypeSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeIdleLengthPolicyTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeIdleLengthPolicyType) -> JSON {
            let output = [ 
            "description": Serialization._StringSerializer.serialize(value.description_),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeIdleLengthPolicyType {
            switch json {
                case .dictionary(let dict):
                    let description_ = Serialization._StringSerializer.deserialize(dict["description"] ?? .null)
                    return WebSessionsChangeIdleLengthPolicyType(description_: description_)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Web sessions fixed length policy.
    public enum WebSessionsFixedLengthPolicy: CustomStringConvertible {
        /// Defined fixed session length.
        case defined(TeamLog.DurationLogInfo)
        /// Undefined fixed session length.
        case undefined
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsFixedLengthPolicySerializer().serialize(self)))"
        }
    }
    open class WebSessionsFixedLengthPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsFixedLengthPolicy) -> JSON {
            switch value {
                case .defined(let arg):
                    var d = Serialization.getFields(TeamLog.DurationLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("defined")
                    return .dictionary(d)
                case .undefined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undefined")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> WebSessionsFixedLengthPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "defined":
                            let v = TeamLog.DurationLogInfoSerializer().deserialize(json)
                            return WebSessionsFixedLengthPolicy.defined(v)
                        case "undefined":
                            return WebSessionsFixedLengthPolicy.undefined
                        case "other":
                            return WebSessionsFixedLengthPolicy.other
                        default:
                            return WebSessionsFixedLengthPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Web sessions idle length policy.
    public enum WebSessionsIdleLengthPolicy: CustomStringConvertible {
        /// Defined idle session length.
        case defined(TeamLog.DurationLogInfo)
        /// Undefined idle session length.
        case undefined
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsIdleLengthPolicySerializer().serialize(self)))"
        }
    }
    open class WebSessionsIdleLengthPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsIdleLengthPolicy) -> JSON {
            switch value {
                case .defined(let arg):
                    var d = Serialization.getFields(TeamLog.DurationLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("defined")
                    return .dictionary(d)
                case .undefined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undefined")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> WebSessionsIdleLengthPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "defined":
                            let v = TeamLog.DurationLogInfoSerializer().deserialize(json)
                            return WebSessionsIdleLengthPolicy.defined(v)
                        case "undefined":
                            return WebSessionsIdleLengthPolicy.undefined
                        case "other":
                            return WebSessionsIdleLengthPolicy.other
                        default:
                            return WebSessionsIdleLengthPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }


    /// Stone Route Objects

    static let getEvents = Route(
        name: "get_events",
        version: 1,
        namespace: "team_log",
        deprecated: false,
        argSerializer: TeamLog.GetTeamEventsArgSerializer(),
        responseSerializer: TeamLog.GetTeamEventsResultSerializer(),
        errorSerializer: TeamLog.GetTeamEventsErrorSerializer(),
        attrs: ["auth": "team",
                "host": "api",
                "style": "rpc"]
    )
    static let getEventsContinue = Route(
        name: "get_events/continue",
        version: 1,
        namespace: "team_log",
        deprecated: false,
        argSerializer: TeamLog.GetTeamEventsContinueArgSerializer(),
        responseSerializer: TeamLog.GetTeamEventsResultSerializer(),
        errorSerializer: TeamLog.GetTeamEventsContinueErrorSerializer(),
        attrs: ["auth": "team",
                "host": "api",
                "style": "rpc"]
    )
}
