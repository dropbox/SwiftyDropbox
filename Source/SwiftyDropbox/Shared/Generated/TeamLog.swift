///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the team_log namespace
open class TeamLog {
    /// Indicates the method in which the action was performed.
    public enum AccessMethodLogInfo: CustomStringConvertible {
        /// End user session details.
        case endUser(TeamLog.SessionLogInfo)
        /// Sign in as session details.
        case signInAs(TeamLog.WebSessionLogInfo)
        /// Content manager session details.
        case contentManager(TeamLog.WebSessionLogInfo)
        /// Admin console session details.
        case adminConsole(TeamLog.WebSessionLogInfo)
        /// Api session details.
        case api(TeamLog.ApiSessionLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccessMethodLogInfoSerializer().serialize(self)))"
        }
    }
    open class AccessMethodLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccessMethodLogInfo) -> JSON {
            switch value {
                case .endUser(let arg):
                    var d = ["end_user": TeamLog.SessionLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("end_user")
                    return .dictionary(d)
                case .signInAs(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as")
                    return .dictionary(d)
                case .contentManager(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("content_manager")
                    return .dictionary(d)
                case .adminConsole(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("admin_console")
                    return .dictionary(d)
                case .api(let arg):
                    var d = Serialization.getFields(TeamLog.ApiSessionLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("api")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccessMethodLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "end_user":
                            let v = TeamLog.SessionLogInfoSerializer().deserialize(d["end_user"] ?? .null)
                            return AccessMethodLogInfo.endUser(v)
                        case "sign_in_as":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.signInAs(v)
                        case "content_manager":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.contentManager(v)
                        case "admin_console":
                            let v = TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.adminConsole(v)
                        case "api":
                            let v = TeamLog.ApiSessionLogInfoSerializer().deserialize(json)
                            return AccessMethodLogInfo.api(v)
                        case "other":
                            return AccessMethodLogInfo.other
                        default:
                            return AccessMethodLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AccountCaptureAvailability union
    public enum AccountCaptureAvailability: CustomStringConvertible {
        /// An unspecified error.
        case unavailable
        /// An unspecified error.
        case available
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureAvailabilitySerializer().serialize(self)))"
        }
    }
    open class AccountCaptureAvailabilitySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureAvailability) -> JSON {
            switch value {
                case .unavailable:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unavailable")
                    return .dictionary(d)
                case .available:
                    var d = [String: JSON]()
                    d[".tag"] = .str("available")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountCaptureAvailability {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "unavailable":
                            return AccountCaptureAvailability.unavailable
                        case "available":
                            return AccountCaptureAvailability.available
                        case "other":
                            return AccountCaptureAvailability.other
                        default:
                            return AccountCaptureAvailability.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Granted or revoked the option to enable account capture on domains belonging to the team.
    open class AccountCaptureChangeAvailabilityDetails: CustomStringConvertible {
        /// New account capture availabilty value.
        open let newValue: TeamLog.AccountCaptureAvailability
        /// Previous account capture availabilty value. Might be missing due to historical data gap.
        open let previousValue: TeamLog.AccountCaptureAvailability?
        public init(newValue: TeamLog.AccountCaptureAvailability, previousValue: TeamLog.AccountCaptureAvailability? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangeAvailabilityDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangeAvailabilityDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangeAvailabilityDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.AccountCaptureAvailabilitySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AccountCaptureAvailabilitySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangeAvailabilityDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.AccountCaptureAvailabilitySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AccountCaptureAvailabilitySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return AccountCaptureChangeAvailabilityDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the account capture policy on a domain belonging to the team.
    open class AccountCaptureChangePolicyDetails: CustomStringConvertible {
        /// New account capture policy.
        open let newValue: TeamLog.AccountCapturePolicy
        /// Previous account capture policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.AccountCapturePolicy?
        public init(newValue: TeamLog.AccountCapturePolicy, previousValue: TeamLog.AccountCapturePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.AccountCapturePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AccountCapturePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.AccountCapturePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AccountCapturePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return AccountCaptureChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Account captured user migrated their account to the team.
    open class AccountCaptureMigrateAccountDetails: CustomStringConvertible {
        /// Domain name.
        open let domainName: String
        public init(domainName: String) {
            stringValidator()(domainName)
            self.domainName = domainName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureMigrateAccountDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureMigrateAccountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureMigrateAccountDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureMigrateAccountDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    return AccountCaptureMigrateAccountDetails(domainName: domainName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The AccountCapturePolicy union
    public enum AccountCapturePolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case invitedUsers
        /// An unspecified error.
        case allUsers
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCapturePolicySerializer().serialize(self)))"
        }
    }
    open class AccountCapturePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCapturePolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .invitedUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited_users")
                    return .dictionary(d)
                case .allUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("all_users")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AccountCapturePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return AccountCapturePolicy.disabled
                        case "invited_users":
                            return AccountCapturePolicy.invitedUsers
                        case "all_users":
                            return AccountCapturePolicy.allUsers
                        case "other":
                            return AccountCapturePolicy.other
                        default:
                            return AccountCapturePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Account captured user relinquished their account by changing the email address associated with it.
    open class AccountCaptureRelinquishAccountDetails: CustomStringConvertible {
        /// Domain name.
        open let domainName: String
        public init(domainName: String) {
            stringValidator()(domainName)
            self.domainName = domainName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AccountCaptureRelinquishAccountDetailsSerializer().serialize(self)))"
        }
    }
    open class AccountCaptureRelinquishAccountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AccountCaptureRelinquishAccountDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AccountCaptureRelinquishAccountDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    return AccountCaptureRelinquishAccountDetails(domainName: domainName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The entity who performed the action.
    public enum ActorLogInfo: CustomStringConvertible {
        /// The user who did the action.
        case user(TeamLog.UserLogInfo)
        /// The admin who did the action.
        case admin(TeamLog.UserLogInfo)
        /// The application who did the action.
        case app(TeamLog.AppLogInfo)
        /// Action done by reseller.
        case reseller(TeamLog.ResellerLogInfo)
        /// Action done by Dropbox.
        case dropbox
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ActorLogInfoSerializer().serialize(self)))"
        }
    }
    open class ActorLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ActorLogInfo) -> JSON {
            switch value {
                case .user(let arg):
                    var d = ["user": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("user")
                    return .dictionary(d)
                case .admin(let arg):
                    var d = ["admin": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("admin")
                    return .dictionary(d)
                case .app(let arg):
                    var d = ["app": TeamLog.AppLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("app")
                    return .dictionary(d)
                case .reseller(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("reseller")
                    return .dictionary(d)
                case .dropbox:
                    var d = [String: JSON]()
                    d[".tag"] = .str("dropbox")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ActorLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "user":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["user"] ?? .null)
                            return ActorLogInfo.user(v)
                        case "admin":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["admin"] ?? .null)
                            return ActorLogInfo.admin(v)
                        case "app":
                            let v = TeamLog.AppLogInfoSerializer().deserialize(d["app"] ?? .null)
                            return ActorLogInfo.app(v)
                        case "reseller":
                            let v = TeamLog.ResellerLogInfoSerializer().deserialize(json)
                            return ActorLogInfo.reseller(v)
                        case "dropbox":
                            return ActorLogInfo.dropbox
                        case "other":
                            return ActorLogInfo.other
                        default:
                            return ActorLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The AdminRole union
    public enum AdminRole: CustomStringConvertible {
        /// An unspecified error.
        case user
        /// An unspecified error.
        case limitedAdmin
        /// An unspecified error.
        case supportAdmin
        /// An unspecified error.
        case userManagementAdmin
        /// An unspecified error.
        case teamAdmin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AdminRoleSerializer().serialize(self)))"
        }
    }
    open class AdminRoleSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AdminRole) -> JSON {
            switch value {
                case .user:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user")
                    return .dictionary(d)
                case .limitedAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("limited_admin")
                    return .dictionary(d)
                case .supportAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("support_admin")
                    return .dictionary(d)
                case .userManagementAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("user_management_admin")
                    return .dictionary(d)
                case .teamAdmin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_admin")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AdminRole {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "user":
                            return AdminRole.user
                        case "limited_admin":
                            return AdminRole.limitedAdmin
                        case "support_admin":
                            return AdminRole.supportAdmin
                        case "user_management_admin":
                            return AdminRole.userManagementAdmin
                        case "team_admin":
                            return AdminRole.teamAdmin
                        case "other":
                            return AdminRole.other
                        default:
                            return AdminRole.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disabled allow downloads.
    open class AllowDownloadDisabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadDisabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadDisabledDetails {
            switch json {
                case .dictionary(_):
                    return AllowDownloadDisabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled allow downloads.
    open class AllowDownloadEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AllowDownloadEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class AllowDownloadEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AllowDownloadEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AllowDownloadEnabledDetails {
            switch json {
                case .dictionary(_):
                    return AllowDownloadEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Api session.
    open class ApiSessionLogInfo: CustomStringConvertible {
        /// Api request ID.
        open let requestId: String
        public init(requestId: String) {
            stringValidator()(requestId)
            self.requestId = requestId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ApiSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class ApiSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ApiSessionLogInfo) -> JSON {
            let output = [ 
            "request_id": Serialization._StringSerializer.serialize(value.requestId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ApiSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let requestId = Serialization._StringSerializer.deserialize(dict["request_id"] ?? .null)
                    return ApiSessionLogInfo(requestId: requestId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked an app for team.
    open class AppLinkTeamDetails: CustomStringConvertible {
        /// Relevant application details.
        open let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class AppLinkTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkTeamDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppLinkTeamDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked an app for team member.
    open class AppLinkUserDetails: CustomStringConvertible {
        /// Relevant application details.
        open let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLinkUserDetailsSerializer().serialize(self)))"
        }
    }
    open class AppLinkUserDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLinkUserDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLinkUserDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppLinkUserDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// App's logged information.
    open class AppLogInfo: CustomStringConvertible {
        /// App unique ID. Might be missing due to historical data gap.
        open let appId: String?
        /// App display name. Might be missing due to historical data gap.
        open let displayName: String?
        public init(appId: String? = nil, displayName: String? = nil) {
            nullableValidator(stringValidator())(appId)
            self.appId = appId
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppLogInfoSerializer().serialize(self)))"
        }
    }
    open class AppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppLogInfo) -> JSON {
            var output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            switch value {
                case let userOrTeamLinkedApp as TeamLog.UserOrTeamLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.UserOrTeamLinkedAppLogInfoSerializer().serialize(userOrTeamLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("user_or_team_linked_app")
                case let userLinkedApp as TeamLog.UserLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.UserLinkedAppLogInfoSerializer().serialize(userLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("user_linked_app")
                case let teamLinkedApp as TeamLog.TeamLinkedAppLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.TeamLinkedAppLogInfoSerializer().serialize(teamLinkedApp)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("team_linked_app")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "user_or_team_linked_app":
                            return TeamLog.UserOrTeamLinkedAppLogInfoSerializer().deserialize(json)
                        case "user_linked_app":
                            return TeamLog.UserLinkedAppLogInfoSerializer().deserialize(json)
                        case "team_linked_app":
                            return TeamLog.TeamLinkedAppLogInfoSerializer().deserialize(json)
                        default:
                            let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                            let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                            return AppLogInfo(appId: appId, displayName: displayName)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unlinked an app for team.
    open class AppUnlinkTeamDetails: CustomStringConvertible {
        /// Relevant application details.
        open let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkTeamDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppUnlinkTeamDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unlinked an app for team member.
    open class AppUnlinkUserDetails: CustomStringConvertible {
        /// Relevant application details.
        open let appInfo: TeamLog.AppLogInfo
        public init(appInfo: TeamLog.AppLogInfo) {
            self.appInfo = appInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AppUnlinkUserDetailsSerializer().serialize(self)))"
        }
    }
    open class AppUnlinkUserDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AppUnlinkUserDetails) -> JSON {
            let output = [ 
            "app_info": TeamLog.AppLogInfoSerializer().serialize(value.appInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> AppUnlinkUserDetails {
            switch json {
                case .dictionary(let dict):
                    let appInfo = TeamLog.AppLogInfoSerializer().deserialize(dict["app_info"] ?? .null)
                    return AppUnlinkUserDetails(appInfo: appInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Asset details.
    public enum AssetLogInfo: CustomStringConvertible {
        /// File's details.
        case file(TeamLog.FileLogInfo)
        /// Folder's details.
        case folder(TeamLog.FolderLogInfo)
        /// Paper docuement's details.
        case paperDocument(TeamLog.PaperDocumentLogInfo)
        /// Paper folder's details.
        case paperFolder(TeamLog.PaperFolderLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(AssetLogInfoSerializer().serialize(self)))"
        }
    }
    open class AssetLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: AssetLogInfo) -> JSON {
            switch value {
                case .file(let arg):
                    var d = Serialization.getFields(TeamLog.FileLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("file")
                    return .dictionary(d)
                case .folder(let arg):
                    var d = Serialization.getFields(TeamLog.FolderLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("folder")
                    return .dictionary(d)
                case .paperDocument(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocumentLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("paper_document")
                    return .dictionary(d)
                case .paperFolder(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> AssetLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "file":
                            let v = TeamLog.FileLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.file(v)
                        case "folder":
                            let v = TeamLog.FolderLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.folder(v)
                        case "paper_document":
                            let v = TeamLog.PaperDocumentLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.paperDocument(v)
                        case "paper_folder":
                            let v = TeamLog.PaperFolderLogInfoSerializer().deserialize(json)
                            return AssetLogInfo.paperFolder(v)
                        case "other":
                            return AssetLogInfo.other
                        default:
                            return AssetLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Certificate details.
    open class Certificate: CustomStringConvertible {
        /// Certificate subject.
        open let subject: String
        /// Certificate issuer.
        open let issuer: String
        /// Certificate issue date.
        open let issueDate: String
        /// Certificate expiration date.
        open let expirationDate: String
        /// Certificate serial number.
        open let serialNumber: String
        /// Certificate sha1 fingerprint.
        open let sha1Fingerprint: String
        /// Certificate common name.
        open let commonName: String
        public init(subject: String, issuer: String, issueDate: String, expirationDate: String, serialNumber: String, sha1Fingerprint: String, commonName: String) {
            stringValidator()(subject)
            self.subject = subject
            stringValidator()(issuer)
            self.issuer = issuer
            stringValidator()(issueDate)
            self.issueDate = issueDate
            stringValidator()(expirationDate)
            self.expirationDate = expirationDate
            stringValidator()(serialNumber)
            self.serialNumber = serialNumber
            stringValidator()(sha1Fingerprint)
            self.sha1Fingerprint = sha1Fingerprint
            stringValidator()(commonName)
            self.commonName = commonName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CertificateSerializer().serialize(self)))"
        }
    }
    open class CertificateSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Certificate) -> JSON {
            let output = [ 
            "subject": Serialization._StringSerializer.serialize(value.subject),
            "issuer": Serialization._StringSerializer.serialize(value.issuer),
            "issue_date": Serialization._StringSerializer.serialize(value.issueDate),
            "expiration_date": Serialization._StringSerializer.serialize(value.expirationDate),
            "serial_number": Serialization._StringSerializer.serialize(value.serialNumber),
            "sha1_fingerprint": Serialization._StringSerializer.serialize(value.sha1Fingerprint),
            "common_name": Serialization._StringSerializer.serialize(value.commonName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> Certificate {
            switch json {
                case .dictionary(let dict):
                    let subject = Serialization._StringSerializer.deserialize(dict["subject"] ?? .null)
                    let issuer = Serialization._StringSerializer.deserialize(dict["issuer"] ?? .null)
                    let issueDate = Serialization._StringSerializer.deserialize(dict["issue_date"] ?? .null)
                    let expirationDate = Serialization._StringSerializer.deserialize(dict["expiration_date"] ?? .null)
                    let serialNumber = Serialization._StringSerializer.deserialize(dict["serial_number"] ?? .null)
                    let sha1Fingerprint = Serialization._StringSerializer.deserialize(dict["sha1_fingerprint"] ?? .null)
                    let commonName = Serialization._StringSerializer.deserialize(dict["common_name"] ?? .null)
                    return Certificate(subject: subject, issuer: issuer, issueDate: issueDate, expirationDate: expirationDate, serialNumber: serialNumber, sha1Fingerprint: sha1Fingerprint, commonName: commonName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared an album.
    open class CollectionShareDetails: CustomStringConvertible {
        /// Album name.
        open let albumName: String
        public init(albumName: String) {
            stringValidator()(albumName)
            self.albumName = albumName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CollectionShareDetailsSerializer().serialize(self)))"
        }
    }
    open class CollectionShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CollectionShareDetails) -> JSON {
            let output = [ 
            "album_name": Serialization._StringSerializer.serialize(value.albumName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CollectionShareDetails {
            switch json {
                case .dictionary(let dict):
                    let albumName = Serialization._StringSerializer.deserialize(dict["album_name"] ?? .null)
                    return CollectionShareDetails(albumName: albumName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The Confidentiality union
    public enum Confidentiality: CustomStringConvertible {
        /// An unspecified error.
        case confidential
        /// An unspecified error.
        case nonConfidential
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ConfidentialitySerializer().serialize(self)))"
        }
    }
    open class ConfidentialitySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: Confidentiality) -> JSON {
            switch value {
                case .confidential:
                    var d = [String: JSON]()
                    d[".tag"] = .str("confidential")
                    return .dictionary(d)
                case .nonConfidential:
                    var d = [String: JSON]()
                    d[".tag"] = .str("non_confidential")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> Confidentiality {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "confidential":
                            return Confidentiality.confidential
                        case "non_confidential":
                            return Confidentiality.nonConfidential
                        case "other":
                            return Confidentiality.other
                        default:
                            return Confidentiality.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for pemanent content deletion
    public enum ContentPermanentDeletePolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContentPermanentDeletePolicySerializer().serialize(self)))"
        }
    }
    open class ContentPermanentDeletePolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContentPermanentDeletePolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ContentPermanentDeletePolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return ContentPermanentDeletePolicy.disabled
                        case "enabled":
                            return ContentPermanentDeletePolicy.enabled
                        case "other":
                            return ContentPermanentDeletePolicy.other
                        default:
                            return ContentPermanentDeletePolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The primary entity on which the action was done.
    public enum ContextLogInfo: CustomStringConvertible {
        /// Action was done on behalf of a team member.
        case teamMember(TeamLog.TeamMemberLogInfo)
        /// Action was done on behalf of a non team member.
        case nonTeamMember(TeamLog.NonTeamMemberLogInfo)
        /// Action was done on behalf of the team.
        case team
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ContextLogInfoSerializer().serialize(self)))"
        }
    }
    open class ContextLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ContextLogInfo) -> JSON {
            switch value {
                case .teamMember(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMemberLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("team_member")
                    return .dictionary(d)
                case .nonTeamMember(let arg):
                    var d = Serialization.getFields(TeamLog.NonTeamMemberLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("non_team_member")
                    return .dictionary(d)
                case .team:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ContextLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "team_member":
                            let v = TeamLog.TeamMemberLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.teamMember(v)
                        case "non_team_member":
                            let v = TeamLog.NonTeamMemberLogInfoSerializer().deserialize(json)
                            return ContextLogInfo.nonTeamMember(v)
                        case "team":
                            return ContextLogInfo.team
                        case "other":
                            return ContextLogInfo.other
                        default:
                            return ContextLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Created folders.
    open class CreateFolderDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(CreateFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class CreateFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: CreateFolderDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> CreateFolderDetails {
            switch json {
                case .dictionary(_):
                    return CreateFolderDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set a restriction policy regarding the location of data centers where team data resides.
    open class DataPlacementRestrictionChangePolicyDetails: CustomStringConvertible {
        /// Previous placement restriction.
        open let previousValue: TeamLog.PlacementRestriction
        /// New placement restriction.
        open let newValue: TeamLog.PlacementRestriction
        public init(previousValue: TeamLog.PlacementRestriction, newValue: TeamLog.PlacementRestriction) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.PlacementRestrictionSerializer().serialize(value.previousValue),
            "new_value": TeamLog.PlacementRestrictionSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.PlacementRestrictionSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.PlacementRestrictionSerializer().deserialize(dict["new_value"] ?? .null)
                    return DataPlacementRestrictionChangePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Satisfied a previously set restriction policy regarding the location of data centers where team data resides
    /// (i.e. all data have been migrated according to the restriction placed).
    open class DataPlacementRestrictionSatisfyPolicyDetails: CustomStringConvertible {
        /// Placement restriction.
        open let placementRestriction: TeamLog.PlacementRestriction
        public init(placementRestriction: TeamLog.PlacementRestriction) {
            self.placementRestriction = placementRestriction
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DataPlacementRestrictionSatisfyPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DataPlacementRestrictionSatisfyPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DataPlacementRestrictionSatisfyPolicyDetails) -> JSON {
            let output = [ 
            "placement_restriction": TeamLog.PlacementRestrictionSerializer().serialize(value.placementRestriction),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DataPlacementRestrictionSatisfyPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let placementRestriction = TeamLog.PlacementRestrictionSerializer().deserialize(dict["placement_restriction"] ?? .null)
                    return DataPlacementRestrictionSatisfyPolicyDetails(placementRestriction: placementRestriction)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Session's logged information.
    open class SessionLogInfo: CustomStringConvertible {
        /// Session ID. Might be missing due to historical data gap.
        open let sessionId: String?
        public init(sessionId: String? = nil) {
            nullableValidator(stringValidator())(sessionId)
            self.sessionId = sessionId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class SessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SessionLogInfo) -> JSON {
            var output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            switch value {
                case let web as TeamLog.WebSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.WebSessionLogInfoSerializer().serialize(web)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("web")
                case let desktop as TeamLog.DesktopSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.DesktopSessionLogInfoSerializer().serialize(desktop)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("desktop")
                case let mobile as TeamLog.MobileSessionLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.MobileSessionLogInfoSerializer().serialize(mobile)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("mobile")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "web":
                            return TeamLog.WebSessionLogInfoSerializer().deserialize(json)
                        case "desktop":
                            return TeamLog.DesktopSessionLogInfoSerializer().deserialize(json)
                        case "mobile":
                            return TeamLog.MobileSessionLogInfoSerializer().deserialize(json)
                        default:
                            let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                            return SessionLogInfo(sessionId: sessionId)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Desktop session.
    open class DesktopSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DesktopSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class DesktopSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DesktopSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DesktopSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return DesktopSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set or removed a limit on the number of computers each team member can link to their work Dropbox account.
    open class DeviceApprovalsChangeDesktopPolicyDetails: CustomStringConvertible {
        /// New desktop device approvals policy. Might be missing due to historical data gap.
        open let newValue: TeamLog.DeviceApprovalsPolicy?
        /// Previous desktop device approvals policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.DeviceApprovalsPolicy?
        public init(newValue: TeamLog.DeviceApprovalsPolicy? = nil, previousValue: TeamLog.DeviceApprovalsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeDesktopPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeDesktopPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeDesktopPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeDesktopPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeDesktopPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set or removed a limit on the number of mobiles devices each team member can link to their work Dropbox account.
    open class DeviceApprovalsChangeMobilePolicyDetails: CustomStringConvertible {
        /// New mobile device approvals policy. Might be missing due to historical data gap.
        open let newValue: TeamLog.DeviceApprovalsPolicy?
        /// Previous mobile device approvals policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.DeviceApprovalsPolicy?
        public init(newValue: TeamLog.DeviceApprovalsPolicy? = nil, previousValue: TeamLog.DeviceApprovalsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeMobilePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeMobilePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeMobilePolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeMobilePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceApprovalsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeMobilePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the action taken when a team member is already over the limits (e.g when they join the team, an admin
    /// lowers limits, etc.).
    open class DeviceApprovalsChangeOverageActionDetails: CustomStringConvertible {
        /// New over the limits policy. Might be missing due to historical data gap.
        open let newValue: TeamPolicies.RolloutMethod?
        /// Previous over the limit policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.RolloutMethod?
        public init(newValue: TeamPolicies.RolloutMethod? = nil, previousValue: TeamPolicies.RolloutMethod? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeOverageActionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeOverageActionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeOverageActionDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamPolicies.RolloutMethodSerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.RolloutMethodSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeOverageActionDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamPolicies.RolloutMethodSerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.RolloutMethodSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeOverageActionDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the action taken with respect to approval limits when a team member unlinks an approved device.
    open class DeviceApprovalsChangeUnlinkActionDetails: CustomStringConvertible {
        /// New device unlink policy. Might be missing due to historical data gap.
        open let newValue: TeamLog.DeviceUnlinkPolicy?
        /// Previous device unlink policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.DeviceUnlinkPolicy?
        public init(newValue: TeamLog.DeviceUnlinkPolicy? = nil, previousValue: TeamLog.DeviceUnlinkPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsChangeUnlinkActionDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsChangeUnlinkActionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsChangeUnlinkActionDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsChangeUnlinkActionDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.DeviceUnlinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return DeviceApprovalsChangeUnlinkActionDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceApprovalsPolicy union
    public enum DeviceApprovalsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case unlimited
        /// An unspecified error.
        case limited
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceApprovalsPolicySerializer().serialize(self)))"
        }
    }
    open class DeviceApprovalsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceApprovalsPolicy) -> JSON {
            switch value {
                case .unlimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unlimited")
                    return .dictionary(d)
                case .limited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("limited")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceApprovalsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "unlimited":
                            return DeviceApprovalsPolicy.unlimited
                        case "limited":
                            return DeviceApprovalsPolicy.limited
                        case "other":
                            return DeviceApprovalsPolicy.other
                        default:
                            return DeviceApprovalsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// IP address associated with active desktop session changed.
    open class DeviceChangeIpDesktopDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        public init(deviceInfo: TeamLog.DeviceLogInfo) {
            self.deviceInfo = deviceInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpDesktopDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpDesktopDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpDesktopDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpDesktopDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    return DeviceChangeIpDesktopDetails(deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// IP address associated with active mobile session changed.
    open class DeviceChangeIpMobileDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        public init(deviceInfo: TeamLog.DeviceLogInfo) {
            self.deviceInfo = deviceInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpMobileDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpMobileDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpMobileDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpMobileDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    return DeviceChangeIpMobileDetails(deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// IP address associated with active Web session changed.
    open class DeviceChangeIpWebDetails: CustomStringConvertible {
        /// Device information. Might be missing due to historical data gap.
        open let deviceInfo: TeamLog.DeviceLogInfo?
        /// Web browser name.
        open let userAgent: String
        public init(userAgent: String, deviceInfo: TeamLog.DeviceLogInfo? = nil) {
            self.deviceInfo = deviceInfo
            stringValidator()(userAgent)
            self.userAgent = userAgent
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceChangeIpWebDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceChangeIpWebDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceChangeIpWebDetails) -> JSON {
            let output = [ 
            "user_agent": Serialization._StringSerializer.serialize(value.userAgent),
            "device_info": NullableSerializer(TeamLog.DeviceLogInfoSerializer()).serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceChangeIpWebDetails {
            switch json {
                case .dictionary(let dict):
                    let userAgent = Serialization._StringSerializer.deserialize(dict["user_agent"] ?? .null)
                    let deviceInfo = NullableSerializer(TeamLog.DeviceLogInfoSerializer()).deserialize(dict["device_info"] ?? .null)
                    return DeviceChangeIpWebDetails(userAgent: userAgent, deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to delete all files from an unlinked device.
    open class DeviceDeleteOnUnlinkFailDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        /// The number of times that remote file deletion failed.
        open let numFailures: Int64
        public init(deviceInfo: TeamLog.DeviceLogInfo, numFailures: Int64) {
            self.deviceInfo = deviceInfo
            comparableValidator()(numFailures)
            self.numFailures = numFailures
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkFailDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            "num_failures": Serialization._Int64Serializer.serialize(value.numFailures),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkFailDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    let numFailures = Serialization._Int64Serializer.deserialize(dict["num_failures"] ?? .null)
                    return DeviceDeleteOnUnlinkFailDetails(deviceInfo: deviceInfo, numFailures: numFailures)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted all files from an unlinked device.
    open class DeviceDeleteOnUnlinkSuccessDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        public init(deviceInfo: TeamLog.DeviceLogInfo) {
            self.deviceInfo = deviceInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceDeleteOnUnlinkSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceDeleteOnUnlinkSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceDeleteOnUnlinkSuccessDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceDeleteOnUnlinkSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    return DeviceDeleteOnUnlinkSuccessDetails(deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to link a device.
    open class DeviceLinkFailDetails: CustomStringConvertible {
        /// Device information. Might be missing due to historical data gap.
        open let deviceInfo: TeamLog.DeviceLogInfo?
        /// A description of the device used while user approval blocked.
        open let deviceType: TeamLog.DeviceType
        public init(deviceType: TeamLog.DeviceType, deviceInfo: TeamLog.DeviceLogInfo? = nil) {
            self.deviceInfo = deviceInfo
            self.deviceType = deviceType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkFailDetails) -> JSON {
            let output = [ 
            "device_type": TeamLog.DeviceTypeSerializer().serialize(value.deviceType),
            "device_info": NullableSerializer(TeamLog.DeviceLogInfoSerializer()).serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkFailDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceType = TeamLog.DeviceTypeSerializer().deserialize(dict["device_type"] ?? .null)
                    let deviceInfo = NullableSerializer(TeamLog.DeviceLogInfoSerializer()).deserialize(dict["device_info"] ?? .null)
                    return DeviceLinkFailDetails(deviceType: deviceType, deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Linked a device.
    open class DeviceLinkSuccessDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        public init(deviceInfo: TeamLog.DeviceLogInfo) {
            self.deviceInfo = deviceInfo
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLinkSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceLinkSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLinkSuccessDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLinkSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    return DeviceLinkSuccessDetails(deviceInfo: deviceInfo)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Device's logged information.
    open class DeviceLogInfo: CustomStringConvertible {
        /// Device unique id. Might be missing due to historical data gap.
        open let deviceId: String?
        /// Device display name. Might be missing due to historical data gap.
        open let displayName: String?
        /// True if this device is emm managed, false otherwise. Might be missing due to historical data gap.
        open let isEmmManaged: Bool?
        /// Device platform name. Might be missing due to historical data gap.
        open let platform: String?
        /// Device mac address. Might be missing due to historical data gap.
        open let macAddress: String?
        /// Device OS version. Might be missing due to historical data gap.
        open let osVersion: String?
        /// Device type. Might be missing due to historical data gap.
        open let deviceType: String?
        /// IP address. Might be missing due to historical data gap.
        open let ipAddress: String?
        /// Last activity. Might be missing due to historical data gap.
        open let lastActivity: String?
        /// Linking app version. Might be missing due to historical data gap.
        open let appVersion: String?
        public init(deviceId: String? = nil, displayName: String? = nil, isEmmManaged: Bool? = nil, platform: String? = nil, macAddress: String? = nil, osVersion: String? = nil, deviceType: String? = nil, ipAddress: String? = nil, lastActivity: String? = nil, appVersion: String? = nil) {
            nullableValidator(stringValidator())(deviceId)
            self.deviceId = deviceId
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            self.isEmmManaged = isEmmManaged
            nullableValidator(stringValidator())(platform)
            self.platform = platform
            nullableValidator(stringValidator())(macAddress)
            self.macAddress = macAddress
            nullableValidator(stringValidator())(osVersion)
            self.osVersion = osVersion
            nullableValidator(stringValidator())(deviceType)
            self.deviceType = deviceType
            nullableValidator(stringValidator())(ipAddress)
            self.ipAddress = ipAddress
            nullableValidator(stringValidator())(lastActivity)
            self.lastActivity = lastActivity
            nullableValidator(stringValidator())(appVersion)
            self.appVersion = appVersion
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceLogInfoSerializer().serialize(self)))"
        }
    }
    open class DeviceLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceLogInfo) -> JSON {
            let output = [ 
            "device_id": NullableSerializer(Serialization._StringSerializer).serialize(value.deviceId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "is_emm_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isEmmManaged),
            "platform": NullableSerializer(Serialization._StringSerializer).serialize(value.platform),
            "mac_address": NullableSerializer(Serialization._StringSerializer).serialize(value.macAddress),
            "os_version": NullableSerializer(Serialization._StringSerializer).serialize(value.osVersion),
            "device_type": NullableSerializer(Serialization._StringSerializer).serialize(value.deviceType),
            "ip_address": NullableSerializer(Serialization._StringSerializer).serialize(value.ipAddress),
            "last_activity": NullableSerializer(Serialization._StringSerializer).serialize(value.lastActivity),
            "app_version": NullableSerializer(Serialization._StringSerializer).serialize(value.appVersion),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceLogInfo {
            switch json {
                case .dictionary(let dict):
                    let deviceId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["device_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let isEmmManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_emm_managed"] ?? .null)
                    let platform = NullableSerializer(Serialization._StringSerializer).deserialize(dict["platform"] ?? .null)
                    let macAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["mac_address"] ?? .null)
                    let osVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["os_version"] ?? .null)
                    let deviceType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["device_type"] ?? .null)
                    let ipAddress = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ip_address"] ?? .null)
                    let lastActivity = NullableSerializer(Serialization._StringSerializer).deserialize(dict["last_activity"] ?? .null)
                    let appVersion = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_version"] ?? .null)
                    return DeviceLogInfo(deviceId: deviceId, displayName: displayName, isEmmManaged: isEmmManaged, platform: platform, macAddress: macAddress, osVersion: osVersion, deviceType: deviceType, ipAddress: ipAddress, lastActivity: lastActivity, appVersion: appVersion)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Disable Device Management.
    open class DeviceManagementDisabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementDisabledDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementDisabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementDisabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementDisabledDetails {
            switch json {
                case .dictionary(_):
                    return DeviceManagementDisabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enable Device Management.
    open class DeviceManagementEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceManagementEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceManagementEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceManagementEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceManagementEnabledDetails {
            switch json {
                case .dictionary(_):
                    return DeviceManagementEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceType union
    public enum DeviceType: CustomStringConvertible {
        /// An unspecified error.
        case desktop
        /// An unspecified error.
        case mobile
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceTypeSerializer().serialize(self)))"
        }
    }
    open class DeviceTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceType) -> JSON {
            switch value {
                case .desktop:
                    var d = [String: JSON]()
                    d[".tag"] = .str("desktop")
                    return .dictionary(d)
                case .mobile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("mobile")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "desktop":
                            return DeviceType.desktop
                        case "mobile":
                            return DeviceType.mobile
                        case "other":
                            return DeviceType.other
                        default:
                            return DeviceType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disconnected a device.
    open class DeviceUnlinkDetails: CustomStringConvertible {
        /// Device information.
        open let deviceInfo: TeamLog.DeviceLogInfo
        /// True if the user requested to delete data after device unlink, false otherwise.
        open let deleteData: Bool
        public init(deviceInfo: TeamLog.DeviceLogInfo, deleteData: Bool) {
            self.deviceInfo = deviceInfo
            self.deleteData = deleteData
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceUnlinkDetailsSerializer().serialize(self)))"
        }
    }
    open class DeviceUnlinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceUnlinkDetails) -> JSON {
            let output = [ 
            "device_info": TeamLog.DeviceLogInfoSerializer().serialize(value.deviceInfo),
            "delete_data": Serialization._BoolSerializer.serialize(value.deleteData),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DeviceUnlinkDetails {
            switch json {
                case .dictionary(let dict):
                    let deviceInfo = TeamLog.DeviceLogInfoSerializer().deserialize(dict["device_info"] ?? .null)
                    let deleteData = Serialization._BoolSerializer.deserialize(dict["delete_data"] ?? .null)
                    return DeviceUnlinkDetails(deviceInfo: deviceInfo, deleteData: deleteData)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The DeviceUnlinkPolicy union
    public enum DeviceUnlinkPolicy: CustomStringConvertible {
        /// An unspecified error.
        case remove
        /// An unspecified error.
        case keep
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DeviceUnlinkPolicySerializer().serialize(self)))"
        }
    }
    open class DeviceUnlinkPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DeviceUnlinkPolicy) -> JSON {
            switch value {
                case .remove:
                    var d = [String: JSON]()
                    d[".tag"] = .str("remove")
                    return .dictionary(d)
                case .keep:
                    var d = [String: JSON]()
                    d[".tag"] = .str("keep")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> DeviceUnlinkPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "remove":
                            return DeviceUnlinkPolicy.remove
                        case "keep":
                            return DeviceUnlinkPolicy.keep
                        case "other":
                            return DeviceUnlinkPolicy.other
                        default:
                            return DeviceUnlinkPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Disabled domain invites.
    open class DisabledDomainInvitesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DisabledDomainInvitesDetailsSerializer().serialize(self)))"
        }
    }
    open class DisabledDomainInvitesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DisabledDomainInvitesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DisabledDomainInvitesDetails {
            switch json {
                case .dictionary(_):
                    return DisabledDomainInvitesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Approved a member's request to join the team.
    open class DomainInvitesApproveRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesApproveRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesApproveRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesApproveRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesApproveRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesApproveRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Declined a user's request to join the team.
    open class DomainInvitesDeclineRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesDeclineRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesDeclineRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesDeclineRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesDeclineRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent domain invites to existing domain accounts.
    open class DomainInvitesEmailExistingUsersDetails: CustomStringConvertible {
        /// Domain names.
        open let domainName: Array<String>
        /// Number of recipients.
        open let numRecipients: UInt64
        public init(domainName: Array<String>, numRecipients: UInt64) {
            arrayValidator(itemValidator: stringValidator())(domainName)
            self.domainName = domainName
            comparableValidator()(numRecipients)
            self.numRecipients = numRecipients
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesEmailExistingUsersDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesEmailExistingUsersDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesEmailExistingUsersDetails) -> JSON {
            let output = [ 
            "domain_name": ArraySerializer(Serialization._StringSerializer).serialize(value.domainName),
            "num_recipients": Serialization._UInt64Serializer.serialize(value.numRecipients),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesEmailExistingUsersDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = ArraySerializer(Serialization._StringSerializer).deserialize(dict["domain_name"] ?? .null)
                    let numRecipients = Serialization._UInt64Serializer.deserialize(dict["num_recipients"] ?? .null)
                    return DomainInvitesEmailExistingUsersDetails(domainName: domainName, numRecipients: numRecipients)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Asked to join the team.
    open class DomainInvitesRequestToJoinTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesRequestToJoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesRequestToJoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesRequestToJoinTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesRequestToJoinTeamDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesRequestToJoinTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Turned off u201cAutomatically invite new usersu201d.
    open class DomainInvitesSetInviteNewUserPrefToNoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToNoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToNoDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesSetInviteNewUserPrefToNoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Turned on u201cAutomatically invite new usersu201d.
    open class DomainInvitesSetInviteNewUserPrefToYesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainInvitesSetInviteNewUserPrefToYesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainInvitesSetInviteNewUserPrefToYesDetails {
            switch json {
                case .dictionary(_):
                    return DomainInvitesSetInviteNewUserPrefToYesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to verify a domain belonging to the team.
    open class DomainVerificationAddDomainFailDetails: CustomStringConvertible {
        /// Domain name.
        open let domainName: String
        /// Domain name verification method. Might be missing due to historical data gap.
        open let verificationMethod: String?
        public init(domainName: String, verificationMethod: String? = nil) {
            stringValidator()(domainName)
            self.domainName = domainName
            nullableValidator(stringValidator())(verificationMethod)
            self.verificationMethod = verificationMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainFailDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainFailDetails) -> JSON {
            let output = [ 
            "domain_name": Serialization._StringSerializer.serialize(value.domainName),
            "verification_method": NullableSerializer(Serialization._StringSerializer).serialize(value.verificationMethod),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainFailDetails {
            switch json {
                case .dictionary(let dict):
                    let domainName = Serialization._StringSerializer.deserialize(dict["domain_name"] ?? .null)
                    let verificationMethod = NullableSerializer(Serialization._StringSerializer).deserialize(dict["verification_method"] ?? .null)
                    return DomainVerificationAddDomainFailDetails(domainName: domainName, verificationMethod: verificationMethod)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Verified a domain belonging to the team.
    open class DomainVerificationAddDomainSuccessDetails: CustomStringConvertible {
        /// Domain names.
        open let domainNames: Array<String>
        /// Domain name verification method. Might be missing due to historical data gap.
        open let verificationMethod: String?
        public init(domainNames: Array<String>, verificationMethod: String? = nil) {
            arrayValidator(itemValidator: stringValidator())(domainNames)
            self.domainNames = domainNames
            nullableValidator(stringValidator())(verificationMethod)
            self.verificationMethod = verificationMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationAddDomainSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationAddDomainSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationAddDomainSuccessDetails) -> JSON {
            let output = [ 
            "domain_names": ArraySerializer(Serialization._StringSerializer).serialize(value.domainNames),
            "verification_method": NullableSerializer(Serialization._StringSerializer).serialize(value.verificationMethod),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationAddDomainSuccessDetails {
            switch json {
                case .dictionary(let dict):
                    let domainNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["domain_names"] ?? .null)
                    let verificationMethod = NullableSerializer(Serialization._StringSerializer).deserialize(dict["verification_method"] ?? .null)
                    return DomainVerificationAddDomainSuccessDetails(domainNames: domainNames, verificationMethod: verificationMethod)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a domain from the list of verified domains belonging to the team.
    open class DomainVerificationRemoveDomainDetails: CustomStringConvertible {
        /// Domain names.
        open let domainNames: Array<String>
        public init(domainNames: Array<String>) {
            arrayValidator(itemValidator: stringValidator())(domainNames)
            self.domainNames = domainNames
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DomainVerificationRemoveDomainDetailsSerializer().serialize(self)))"
        }
    }
    open class DomainVerificationRemoveDomainDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DomainVerificationRemoveDomainDetails) -> JSON {
            let output = [ 
            "domain_names": ArraySerializer(Serialization._StringSerializer).serialize(value.domainNames),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DomainVerificationRemoveDomainDetails {
            switch json {
                case .dictionary(let dict):
                    let domainNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["domain_names"] ?? .null)
                    return DomainVerificationRemoveDomainDetails(domainNames: domainNames)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Represents a time duration: unit and amount
    open class DurationLogInfo: CustomStringConvertible {
        /// Time unit.
        open let unit: TeamLog.TimeUnit
        /// Amount of time.
        open let amount: UInt64
        public init(unit: TeamLog.TimeUnit, amount: UInt64) {
            self.unit = unit
            comparableValidator()(amount)
            self.amount = amount
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(DurationLogInfoSerializer().serialize(self)))"
        }
    }
    open class DurationLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: DurationLogInfo) -> JSON {
            let output = [ 
            "unit": TeamLog.TimeUnitSerializer().serialize(value.unit),
            "amount": Serialization._UInt64Serializer.serialize(value.amount),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> DurationLogInfo {
            switch json {
                case .dictionary(let dict):
                    let unit = TeamLog.TimeUnitSerializer().deserialize(dict["unit"] ?? .null)
                    let amount = Serialization._UInt64Serializer.deserialize(dict["amount"] ?? .null)
                    return DurationLogInfo(unit: unit, amount: amount)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added an exception for one or more team members to optionally use the regular Dropbox app when EMM is enabled.
    open class EmmAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return EmmAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled enterprise mobility management for team members.
    open class EmmChangePolicyDetails: CustomStringConvertible {
        /// New enterprise mobility management policy.
        open let newValue: TeamPolicies.EmmState
        /// Previous enterprise mobility management policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.EmmState?
        public init(newValue: TeamPolicies.EmmState, previousValue: TeamPolicies.EmmState? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.EmmStateSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.EmmStateSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.EmmStateSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.EmmStateSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return EmmChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// EMM excluded users report created.
    open class EmmCreateExceptionsReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateExceptionsReportDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmCreateExceptionsReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateExceptionsReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateExceptionsReportDetails {
            switch json {
                case .dictionary(_):
                    return EmmCreateExceptionsReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// EMM mobile app usage report created.
    open class EmmCreateUsageReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmCreateUsageReportDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmCreateUsageReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmCreateUsageReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmCreateUsageReportDetails {
            switch json {
                case .dictionary(_):
                    return EmmCreateUsageReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Signed in using the Dropbox EMM app.
    open class EmmLoginSuccessDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmLoginSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmLoginSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmLoginSuccessDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmLoginSuccessDetails {
            switch json {
                case .dictionary(_):
                    return EmmLoginSuccessDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Refreshed the auth token used for setting up enterprise mobility management.
    open class EmmRefreshAuthTokenDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRefreshAuthTokenDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmRefreshAuthTokenDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRefreshAuthTokenDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRefreshAuthTokenDetails {
            switch json {
                case .dictionary(_):
                    return EmmRefreshAuthTokenDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed an exception for one or more team members to optionally use the regular Dropbox app when EMM is enabled.
    open class EmmRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EmmRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class EmmRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EmmRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EmmRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return EmmRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled domain invites.
    open class EnabledDomainInvitesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EnabledDomainInvitesDetailsSerializer().serialize(self)))"
        }
    }
    open class EnabledDomainInvitesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EnabledDomainInvitesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> EnabledDomainInvitesDetails {
            switch json {
                case .dictionary(_):
                    return EnabledDomainInvitesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Category of events in event audit log.
    public enum EventCategory: CustomStringConvertible {
        /// Events that have to do with account capture and invite enforcement on team-owned domains.
        case accountCapture
        /// Events that relate to team and team member account administration or team administration. Note that these
        /// actions are not necessarily performed by team admins. They might also be performed by Dropbox Support or
        /// System or by team members on their own accounts.
        case administration
        /// Events that apply to management of linked apps.
        case apps
        /// Events that apply to user authentication in some way.
        case authentication
        /// Events that have to do with comments on files and Paper documents.
        case comments
        /// Events that apply to changes how people can access content on Dropbox as well as actions that represent
        /// actually accessing content.
        case contentAccess
        /// Events that apply to linked devices on mobile, desktop and Web platforms.
        case devices
        /// Events that concern device approvals and device management.
        case deviceApprovals
        /// Events that involve domain management feature: domain verification, invite enforcement and account capture.
        case domains
        /// Events that involve enterprise mobility management and the Dropbox EMM app.
        case emm
        /// Events that mark some type of unexpected outcome.
        case errors
        /// Events that mark a user's interaction with files and folders on Dropbox.
        case files
        /// Events that have to do with filesystem operations on files and folders: copy, move, delete, etc.
        case fileOperations
        /// Events that apply to the file requests feature.
        case fileRequests
        /// Events that involve group management.
        case groups
        /// Events that involve users signing in to or out of Dropbox.
        case logins
        /// Events that involve team member management.
        case members
        /// Events that apply to Dropbox Paper.
        case paper
        /// Events that involve using, changing or resetting passwords.
        case passwords
        /// Events that concern generation of admin reports, including team activity and device usage.
        case reports
        /// Events that mark the beginning or end of sessions as well as those that apply to an ongoing session.
        case sessions
        /// Events that specifically apply to shared files.
        case sharedFiles
        /// Events that specifically apply to shared folders.
        case sharedFolders
        /// Events that specifically apply to link sharing.
        case sharedLinks
        /// Events that apply to all types of sharing and collaboration.
        case sharing
        /// Events that concern policies that affect sharing - both at the team level and at the folder level.
        case sharingPolicies
        /// Events that involve using or configuring single sign-on as well as administrative policies concerning single
        /// sign-on.
        case sso
        /// Events that involve team folder management.
        case teamFolders
        /// Events that involve a change in team-wide policies.
        case teamPolicies
        /// Events that involve a change in the team profile.
        case teamProfile
        /// Events that involve using or configuring two factor authentication as well as administrative policies
        /// concerning two factor authentication.
        case tfa
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventCategorySerializer().serialize(self)))"
        }
    }
    open class EventCategorySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventCategory) -> JSON {
            switch value {
                case .accountCapture:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture")
                    return .dictionary(d)
                case .administration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("administration")
                    return .dictionary(d)
                case .apps:
                    var d = [String: JSON]()
                    d[".tag"] = .str("apps")
                    return .dictionary(d)
                case .authentication:
                    var d = [String: JSON]()
                    d[".tag"] = .str("authentication")
                    return .dictionary(d)
                case .comments:
                    var d = [String: JSON]()
                    d[".tag"] = .str("comments")
                    return .dictionary(d)
                case .contentAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("content_access")
                    return .dictionary(d)
                case .devices:
                    var d = [String: JSON]()
                    d[".tag"] = .str("devices")
                    return .dictionary(d)
                case .deviceApprovals:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals")
                    return .dictionary(d)
                case .domains:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domains")
                    return .dictionary(d)
                case .emm:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm")
                    return .dictionary(d)
                case .errors:
                    var d = [String: JSON]()
                    d[".tag"] = .str("errors")
                    return .dictionary(d)
                case .files:
                    var d = [String: JSON]()
                    d[".tag"] = .str("files")
                    return .dictionary(d)
                case .fileOperations:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_operations")
                    return .dictionary(d)
                case .fileRequests:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests")
                    return .dictionary(d)
                case .groups:
                    var d = [String: JSON]()
                    d[".tag"] = .str("groups")
                    return .dictionary(d)
                case .logins:
                    var d = [String: JSON]()
                    d[".tag"] = .str("logins")
                    return .dictionary(d)
                case .members:
                    var d = [String: JSON]()
                    d[".tag"] = .str("members")
                    return .dictionary(d)
                case .paper:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper")
                    return .dictionary(d)
                case .passwords:
                    var d = [String: JSON]()
                    d[".tag"] = .str("passwords")
                    return .dictionary(d)
                case .reports:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reports")
                    return .dictionary(d)
                case .sessions:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sessions")
                    return .dictionary(d)
                case .sharedFiles:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_files")
                    return .dictionary(d)
                case .sharedFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folders")
                    return .dictionary(d)
                case .sharedLinks:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_links")
                    return .dictionary(d)
                case .sharing:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing")
                    return .dictionary(d)
                case .sharingPolicies:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_policies")
                    return .dictionary(d)
                case .sso:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso")
                    return .dictionary(d)
                case .teamFolders:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folders")
                    return .dictionary(d)
                case .teamPolicies:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_policies")
                    return .dictionary(d)
                case .teamProfile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile")
                    return .dictionary(d)
                case .tfa:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventCategory {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "account_capture":
                            return EventCategory.accountCapture
                        case "administration":
                            return EventCategory.administration
                        case "apps":
                            return EventCategory.apps
                        case "authentication":
                            return EventCategory.authentication
                        case "comments":
                            return EventCategory.comments
                        case "content_access":
                            return EventCategory.contentAccess
                        case "devices":
                            return EventCategory.devices
                        case "device_approvals":
                            return EventCategory.deviceApprovals
                        case "domains":
                            return EventCategory.domains
                        case "emm":
                            return EventCategory.emm
                        case "errors":
                            return EventCategory.errors
                        case "files":
                            return EventCategory.files
                        case "file_operations":
                            return EventCategory.fileOperations
                        case "file_requests":
                            return EventCategory.fileRequests
                        case "groups":
                            return EventCategory.groups
                        case "logins":
                            return EventCategory.logins
                        case "members":
                            return EventCategory.members
                        case "paper":
                            return EventCategory.paper
                        case "passwords":
                            return EventCategory.passwords
                        case "reports":
                            return EventCategory.reports
                        case "sessions":
                            return EventCategory.sessions
                        case "shared_files":
                            return EventCategory.sharedFiles
                        case "shared_folders":
                            return EventCategory.sharedFolders
                        case "shared_links":
                            return EventCategory.sharedLinks
                        case "sharing":
                            return EventCategory.sharing
                        case "sharing_policies":
                            return EventCategory.sharingPolicies
                        case "sso":
                            return EventCategory.sso
                        case "team_folders":
                            return EventCategory.teamFolders
                        case "team_policies":
                            return EventCategory.teamPolicies
                        case "team_profile":
                            return EventCategory.teamProfile
                        case "tfa":
                            return EventCategory.tfa
                        case "other":
                            return EventCategory.other
                        default:
                            return EventCategory.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Additional fields depending on the event type.
    public enum EventDetails: CustomStringConvertible {
        /// Changed the membership type (limited vs full) for team member.
        case memberChangeMembershipTypeDetails(TeamLog.MemberChangeMembershipTypeDetails)
        /// Permanently deleted contents of a removed team member account.
        case memberPermanentlyDeleteAccountContentsDetails(TeamLog.MemberPermanentlyDeleteAccountContentsDetails)
        /// Changed the status with respect to whether the team member is under or over storage quota specified by
        /// policy.
        case memberSpaceLimitsChangeStatusDetails(TeamLog.MemberSpaceLimitsChangeStatusDetails)
        /// Transferred contents of a removed team member account to another member.
        case memberTransferAccountContentsDetails(TeamLog.MemberTransferAccountContentsDetails)
        /// Exported all Paper documents in the team.
        case paperAdminExportStartDetails(TeamLog.PaperAdminExportStartDetails)
        /// Users added to Paper enabled users list.
        case paperEnabledUsersGroupAdditionDetails(TeamLog.PaperEnabledUsersGroupAdditionDetails)
        /// Users removed from Paper enabled users list.
        case paperEnabledUsersGroupRemovalDetails(TeamLog.PaperEnabledUsersGroupRemovalDetails)
        /// Paper external sharing policy changed: anyone.
        case paperExternalViewAllowDetails(TeamLog.PaperExternalViewAllowDetails)
        /// Paper external sharing policy changed: default team.
        case paperExternalViewDefaultTeamDetails(TeamLog.PaperExternalViewDefaultTeamDetails)
        /// Paper external sharing policy changed: team-only.
        case paperExternalViewForbidDetails(TeamLog.PaperExternalViewForbidDetails)
        /// Admin settings: team members see a warning before sharing folders outside the team (DEPRECATED FEATURE).
        case sfExternalInviteWarnDetails(TeamLog.SfExternalInviteWarnDetails)
        /// Merged another team into this team.
        case teamMergeFromDetails(TeamLog.TeamMergeFromDetails)
        /// Merged this team into another team.
        case teamMergeToDetails(TeamLog.TeamMergeToDetails)
        /// Linked an app for team.
        case appLinkTeamDetails(TeamLog.AppLinkTeamDetails)
        /// Linked an app for team member.
        case appLinkUserDetails(TeamLog.AppLinkUserDetails)
        /// Unlinked an app for team.
        case appUnlinkTeamDetails(TeamLog.AppUnlinkTeamDetails)
        /// Unlinked an app for team member.
        case appUnlinkUserDetails(TeamLog.AppUnlinkUserDetails)
        /// Added a file comment.
        case fileAddCommentDetails(TeamLog.FileAddCommentDetails)
        /// Subscribed to or unsubscribed from comment notifications for file.
        case fileChangeCommentSubscriptionDetails(TeamLog.FileChangeCommentSubscriptionDetails)
        /// Deleted a file comment.
        case fileDeleteCommentDetails(TeamLog.FileDeleteCommentDetails)
        /// Liked a file comment.
        case fileLikeCommentDetails(TeamLog.FileLikeCommentDetails)
        /// Resolved a file comment.
        case fileResolveCommentDetails(TeamLog.FileResolveCommentDetails)
        /// Unliked a file comment.
        case fileUnlikeCommentDetails(TeamLog.FileUnlikeCommentDetails)
        /// Unresolved a file comment.
        case fileUnresolveCommentDetails(TeamLog.FileUnresolveCommentDetails)
        /// IP address associated with active desktop session changed.
        case deviceChangeIpDesktopDetails(TeamLog.DeviceChangeIpDesktopDetails)
        /// IP address associated with active mobile session changed.
        case deviceChangeIpMobileDetails(TeamLog.DeviceChangeIpMobileDetails)
        /// IP address associated with active Web session changed.
        case deviceChangeIpWebDetails(TeamLog.DeviceChangeIpWebDetails)
        /// Failed to delete all files from an unlinked device.
        case deviceDeleteOnUnlinkFailDetails(TeamLog.DeviceDeleteOnUnlinkFailDetails)
        /// Deleted all files from an unlinked device.
        case deviceDeleteOnUnlinkSuccessDetails(TeamLog.DeviceDeleteOnUnlinkSuccessDetails)
        /// Failed to link a device.
        case deviceLinkFailDetails(TeamLog.DeviceLinkFailDetails)
        /// Linked a device.
        case deviceLinkSuccessDetails(TeamLog.DeviceLinkSuccessDetails)
        /// Disable Device Management.
        case deviceManagementDisabledDetails(TeamLog.DeviceManagementDisabledDetails)
        /// Enable Device Management.
        case deviceManagementEnabledDetails(TeamLog.DeviceManagementEnabledDetails)
        /// Disconnected a device.
        case deviceUnlinkDetails(TeamLog.DeviceUnlinkDetails)
        /// Refreshed the auth token used for setting up enterprise mobility management.
        case emmRefreshAuthTokenDetails(TeamLog.EmmRefreshAuthTokenDetails)
        /// Granted or revoked the option to enable account capture on domains belonging to the team.
        case accountCaptureChangeAvailabilityDetails(TeamLog.AccountCaptureChangeAvailabilityDetails)
        /// Account captured user migrated their account to the team.
        case accountCaptureMigrateAccountDetails(TeamLog.AccountCaptureMigrateAccountDetails)
        /// Account captured user relinquished their account by changing the email address associated with it.
        case accountCaptureRelinquishAccountDetails(TeamLog.AccountCaptureRelinquishAccountDetails)
        /// Disabled domain invites.
        case disabledDomainInvitesDetails(TeamLog.DisabledDomainInvitesDetails)
        /// Approved a member's request to join the team.
        case domainInvitesApproveRequestToJoinTeamDetails(TeamLog.DomainInvitesApproveRequestToJoinTeamDetails)
        /// Declined a user's request to join the team.
        case domainInvitesDeclineRequestToJoinTeamDetails(TeamLog.DomainInvitesDeclineRequestToJoinTeamDetails)
        /// Sent domain invites to existing domain accounts.
        case domainInvitesEmailExistingUsersDetails(TeamLog.DomainInvitesEmailExistingUsersDetails)
        /// Asked to join the team.
        case domainInvitesRequestToJoinTeamDetails(TeamLog.DomainInvitesRequestToJoinTeamDetails)
        /// Turned off u201cAutomatically invite new usersu201d.
        case domainInvitesSetInviteNewUserPrefToNoDetails(TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetails)
        /// Turned on u201cAutomatically invite new usersu201d.
        case domainInvitesSetInviteNewUserPrefToYesDetails(TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetails)
        /// Failed to verify a domain belonging to the team.
        case domainVerificationAddDomainFailDetails(TeamLog.DomainVerificationAddDomainFailDetails)
        /// Verified a domain belonging to the team.
        case domainVerificationAddDomainSuccessDetails(TeamLog.DomainVerificationAddDomainSuccessDetails)
        /// Removed a domain from the list of verified domains belonging to the team.
        case domainVerificationRemoveDomainDetails(TeamLog.DomainVerificationRemoveDomainDetails)
        /// Enabled domain invites.
        case enabledDomainInvitesDetails(TeamLog.EnabledDomainInvitesDetails)
        /// Created folders.
        case createFolderDetails(TeamLog.CreateFolderDetails)
        /// Added files and/or folders.
        case fileAddDetails(TeamLog.FileAddDetails)
        /// Copied files and/or folders.
        case fileCopyDetails(TeamLog.FileCopyDetails)
        /// Deleted files and/or folders.
        case fileDeleteDetails(TeamLog.FileDeleteDetails)
        /// Downloaded files and/or folders.
        case fileDownloadDetails(TeamLog.FileDownloadDetails)
        /// Edited files.
        case fileEditDetails(TeamLog.FileEditDetails)
        /// Create a copy reference to a file or folder.
        case fileGetCopyReferenceDetails(TeamLog.FileGetCopyReferenceDetails)
        /// Moved files and/or folders.
        case fileMoveDetails(TeamLog.FileMoveDetails)
        /// Permanently deleted files and/or folders.
        case filePermanentlyDeleteDetails(TeamLog.FilePermanentlyDeleteDetails)
        /// Previewed files and/or folders.
        case filePreviewDetails(TeamLog.FilePreviewDetails)
        /// Renamed files and/or folders.
        case fileRenameDetails(TeamLog.FileRenameDetails)
        /// Restored deleted files and/or folders.
        case fileRestoreDetails(TeamLog.FileRestoreDetails)
        /// Reverted files to a previous version.
        case fileRevertDetails(TeamLog.FileRevertDetails)
        /// Rolled back file change location changes.
        case fileRollbackChangesDetails(TeamLog.FileRollbackChangesDetails)
        /// Save a file or folder using a copy reference.
        case fileSaveCopyReferenceDetails(TeamLog.FileSaveCopyReferenceDetails)
        /// Added a deadline to a file request.
        case fileRequestAddDeadlineDetails(TeamLog.FileRequestAddDeadlineDetails)
        /// Changed the file request folder.
        case fileRequestChangeFolderDetails(TeamLog.FileRequestChangeFolderDetails)
        /// Change the file request title.
        case fileRequestChangeTitleDetails(TeamLog.FileRequestChangeTitleDetails)
        /// Closed a file request.
        case fileRequestCloseDetails(TeamLog.FileRequestCloseDetails)
        /// Created a file request.
        case fileRequestCreateDetails(TeamLog.FileRequestCreateDetails)
        /// Received files for a file request.
        case fileRequestReceiveFileDetails(TeamLog.FileRequestReceiveFileDetails)
        /// Removed the file request deadline.
        case fileRequestRemoveDeadlineDetails(TeamLog.FileRequestRemoveDeadlineDetails)
        /// Sent file request to users via email.
        case fileRequestSendDetails(TeamLog.FileRequestSendDetails)
        /// Added an external ID for group.
        case groupAddExternalIdDetails(TeamLog.GroupAddExternalIdDetails)
        /// Added team members to a group.
        case groupAddMemberDetails(TeamLog.GroupAddMemberDetails)
        /// Changed the external ID for group.
        case groupChangeExternalIdDetails(TeamLog.GroupChangeExternalIdDetails)
        /// Changed group management type.
        case groupChangeManagementTypeDetails(TeamLog.GroupChangeManagementTypeDetails)
        /// Changed the manager permissions belonging to a group member.
        case groupChangeMemberRoleDetails(TeamLog.GroupChangeMemberRoleDetails)
        /// Created a group.
        case groupCreateDetails(TeamLog.GroupCreateDetails)
        /// Deleted a group.
        case groupDeleteDetails(TeamLog.GroupDeleteDetails)
        /// Moved a group.
        case groupMovedDetails(TeamLog.GroupMovedDetails)
        /// Removed the external ID for group.
        case groupRemoveExternalIdDetails(TeamLog.GroupRemoveExternalIdDetails)
        /// Removed team members from a group.
        case groupRemoveMemberDetails(TeamLog.GroupRemoveMemberDetails)
        /// Renamed a group.
        case groupRenameDetails(TeamLog.GroupRenameDetails)
        /// Signed in using the Dropbox EMM app.
        case emmLoginSuccessDetails(TeamLog.EmmLoginSuccessDetails)
        /// Signed out.
        case logoutDetails(TeamLog.LogoutDetails)
        /// Failed to sign in using a password.
        case passwordLoginFailDetails(TeamLog.PasswordLoginFailDetails)
        /// Signed in using a password.
        case passwordLoginSuccessDetails(TeamLog.PasswordLoginSuccessDetails)
        /// Ended reseller support session.
        case resellerSupportSessionEndDetails(TeamLog.ResellerSupportSessionEndDetails)
        /// Started reseller support session.
        case resellerSupportSessionStartDetails(TeamLog.ResellerSupportSessionStartDetails)
        /// Ended admin sign-in-as session.
        case signInAsSessionEndDetails(TeamLog.SignInAsSessionEndDetails)
        /// Started admin sign-in-as session.
        case signInAsSessionStartDetails(TeamLog.SignInAsSessionStartDetails)
        /// Failed to sign in using SSO.
        case ssoLoginFailDetails(TeamLog.SsoLoginFailDetails)
        /// Set team member name when joining team.
        case memberAddNameDetails(TeamLog.MemberAddNameDetails)
        /// Change the admin role belonging to team member.
        case memberChangeAdminRoleDetails(TeamLog.MemberChangeAdminRoleDetails)
        /// Changed team member email address.
        case memberChangeEmailDetails(TeamLog.MemberChangeEmailDetails)
        /// Changed team member name.
        case memberChangeNameDetails(TeamLog.MemberChangeNameDetails)
        /// Changed the membership status of a team member.
        case memberChangeStatusDetails(TeamLog.MemberChangeStatusDetails)
        /// Suggested a new team member to be added to the team.
        case memberSuggestDetails(TeamLog.MemberSuggestDetails)
        /// Added users to the membership of a Paper doc or folder.
        case paperContentAddMemberDetails(TeamLog.PaperContentAddMemberDetails)
        /// Added Paper doc or folder to a folder.
        case paperContentAddToFolderDetails(TeamLog.PaperContentAddToFolderDetails)
        /// Archived Paper doc or folder.
        case paperContentArchiveDetails(TeamLog.PaperContentArchiveDetails)
        /// Created a Paper doc or folder.
        case paperContentCreateDetails(TeamLog.PaperContentCreateDetails)
        /// Permanently deleted a Paper doc or folder.
        case paperContentPermanentlyDeleteDetails(TeamLog.PaperContentPermanentlyDeleteDetails)
        /// Removed Paper doc or folder from a folder.
        case paperContentRemoveFromFolderDetails(TeamLog.PaperContentRemoveFromFolderDetails)
        /// Removed a user from the membership of a Paper doc or folder.
        case paperContentRemoveMemberDetails(TeamLog.PaperContentRemoveMemberDetails)
        /// Renamed Paper doc or folder.
        case paperContentRenameDetails(TeamLog.PaperContentRenameDetails)
        /// Restored an archived Paper doc or folder.
        case paperContentRestoreDetails(TeamLog.PaperContentRestoreDetails)
        /// Added a Paper doc comment.
        case paperDocAddCommentDetails(TeamLog.PaperDocAddCommentDetails)
        /// Changed the access type of a Paper doc member.
        case paperDocChangeMemberRoleDetails(TeamLog.PaperDocChangeMemberRoleDetails)
        /// Changed the sharing policy for Paper doc.
        case paperDocChangeSharingPolicyDetails(TeamLog.PaperDocChangeSharingPolicyDetails)
        /// Followed or unfollowed a Paper doc.
        case paperDocChangeSubscriptionDetails(TeamLog.PaperDocChangeSubscriptionDetails)
        /// Paper doc archived.
        case paperDocDeletedDetails(TeamLog.PaperDocDeletedDetails)
        /// Deleted a Paper doc comment.
        case paperDocDeleteCommentDetails(TeamLog.PaperDocDeleteCommentDetails)
        /// Downloaded a Paper doc in a particular output format.
        case paperDocDownloadDetails(TeamLog.PaperDocDownloadDetails)
        /// Edited a Paper doc.
        case paperDocEditDetails(TeamLog.PaperDocEditDetails)
        /// Edited a Paper doc comment.
        case paperDocEditCommentDetails(TeamLog.PaperDocEditCommentDetails)
        /// Followed a Paper doc.
        case paperDocFollowedDetails(TeamLog.PaperDocFollowedDetails)
        /// Mentioned a member in a Paper doc.
        case paperDocMentionDetails(TeamLog.PaperDocMentionDetails)
        /// Requested to be a member on a Paper doc.
        case paperDocRequestAccessDetails(TeamLog.PaperDocRequestAccessDetails)
        /// Paper doc comment resolved.
        case paperDocResolveCommentDetails(TeamLog.PaperDocResolveCommentDetails)
        /// Restored a Paper doc to previous revision.
        case paperDocRevertDetails(TeamLog.PaperDocRevertDetails)
        /// Paper doc link shared via slack.
        case paperDocSlackShareDetails(TeamLog.PaperDocSlackShareDetails)
        /// Paper doc shared with team member.
        case paperDocTeamInviteDetails(TeamLog.PaperDocTeamInviteDetails)
        /// Paper doc trashed.
        case paperDocTrashedDetails(TeamLog.PaperDocTrashedDetails)
        /// Unresolved a Paper doc comment.
        case paperDocUnresolveCommentDetails(TeamLog.PaperDocUnresolveCommentDetails)
        /// Paper doc untrashed.
        case paperDocUntrashedDetails(TeamLog.PaperDocUntrashedDetails)
        /// Viewed Paper doc.
        case paperDocViewDetails(TeamLog.PaperDocViewDetails)
        /// Followed or unfollowed a Paper folder.
        case paperFolderChangeSubscriptionDetails(TeamLog.PaperFolderChangeSubscriptionDetails)
        /// Paper folder archived.
        case paperFolderDeletedDetails(TeamLog.PaperFolderDeletedDetails)
        /// Followed a Paper folder.
        case paperFolderFollowedDetails(TeamLog.PaperFolderFollowedDetails)
        /// Paper folder shared with team member.
        case paperFolderTeamInviteDetails(TeamLog.PaperFolderTeamInviteDetails)
        /// Changed password.
        case passwordChangeDetails(TeamLog.PasswordChangeDetails)
        /// Reset password.
        case passwordResetDetails(TeamLog.PasswordResetDetails)
        /// Reset all team member passwords.
        case passwordResetAllDetails(TeamLog.PasswordResetAllDetails)
        /// EMM excluded users report created.
        case emmCreateExceptionsReportDetails(TeamLog.EmmCreateExceptionsReportDetails)
        /// EMM mobile app usage report created.
        case emmCreateUsageReportDetails(TeamLog.EmmCreateUsageReportDetails)
        /// Smart Sync non-admin devices report created.
        case smartSyncCreateAdminPrivilegeReportDetails(TeamLog.SmartSyncCreateAdminPrivilegeReportDetails)
        /// Created a team activity report.
        case teamActivityCreateReportDetails(TeamLog.TeamActivityCreateReportDetails)
        /// Shared an album.
        case collectionShareDetails(TeamLog.CollectionShareDetails)
        /// Changed a Paper document to be invite-only.
        case noteAclInviteOnlyDetails(TeamLog.NoteAclInviteOnlyDetails)
        /// Changed a Paper document to be link accessible.
        case noteAclLinkDetails(TeamLog.NoteAclLinkDetails)
        /// Changed a Paper document to be link accessible for the team.
        case noteAclTeamLinkDetails(TeamLog.NoteAclTeamLinkDetails)
        /// Shared a Paper doc.
        case noteSharedDetails(TeamLog.NoteSharedDetails)
        /// Shared Paper document received.
        case noteShareReceiveDetails(TeamLog.NoteShareReceiveDetails)
        /// Opened a shared Paper doc.
        case openNoteSharedDetails(TeamLog.OpenNoteSharedDetails)
        /// Added the team to a shared folder.
        case sfAddGroupDetails(TeamLog.SfAddGroupDetails)
        /// Allowed non collaborators to view links to files in a shared folder.
        case sfAllowNonMembersToViewSharedLinksDetails(TeamLog.SfAllowNonMembersToViewSharedLinksDetails)
        /// Invited a group to a shared folder.
        case sfInviteGroupDetails(TeamLog.SfInviteGroupDetails)
        /// Changed parent of shared folder.
        case sfNestDetails(TeamLog.SfNestDetails)
        /// Declined a team member's invitation to a shared folder.
        case sfTeamDeclineDetails(TeamLog.SfTeamDeclineDetails)
        /// Granted access to a shared folder.
        case sfTeamGrantAccessDetails(TeamLog.SfTeamGrantAccessDetails)
        /// Invited team members to a shared folder.
        case sfTeamInviteDetails(TeamLog.SfTeamInviteDetails)
        /// Changed a team member's role in a shared folder.
        case sfTeamInviteChangeRoleDetails(TeamLog.SfTeamInviteChangeRoleDetails)
        /// Joined a team member's shared folder.
        case sfTeamJoinDetails(TeamLog.SfTeamJoinDetails)
        /// Joined a team member's shared folder from a link.
        case sfTeamJoinFromOobLinkDetails(TeamLog.SfTeamJoinFromOobLinkDetails)
        /// Unshared a folder with a team member.
        case sfTeamUninviteDetails(TeamLog.SfTeamUninviteDetails)
        /// Sent an email invitation to the membership of a shared file or folder.
        case sharedContentAddInviteesDetails(TeamLog.SharedContentAddInviteesDetails)
        /// Added an expiry to the link for the shared file or folder.
        case sharedContentAddLinkExpiryDetails(TeamLog.SharedContentAddLinkExpiryDetails)
        /// Added a password to the link for the shared file or folder.
        case sharedContentAddLinkPasswordDetails(TeamLog.SharedContentAddLinkPasswordDetails)
        /// Added users and/or groups to the membership of a shared file or folder.
        case sharedContentAddMemberDetails(TeamLog.SharedContentAddMemberDetails)
        /// Changed whether members can download the shared file or folder.
        case sharedContentChangeDownloadsPolicyDetails(TeamLog.SharedContentChangeDownloadsPolicyDetails)
        /// Changed the access type of an invitee to a shared file or folder before the invitation was claimed.
        case sharedContentChangeInviteeRoleDetails(TeamLog.SharedContentChangeInviteeRoleDetails)
        /// Changed the audience of the link for a shared file or folder.
        case sharedContentChangeLinkAudienceDetails(TeamLog.SharedContentChangeLinkAudienceDetails)
        /// Changed the expiry of the link for the shared file or folder.
        case sharedContentChangeLinkExpiryDetails(TeamLog.SharedContentChangeLinkExpiryDetails)
        /// Changed the password on the link for the shared file or folder.
        case sharedContentChangeLinkPasswordDetails(TeamLog.SharedContentChangeLinkPasswordDetails)
        /// Changed the access type of a shared file or folder member.
        case sharedContentChangeMemberRoleDetails(TeamLog.SharedContentChangeMemberRoleDetails)
        /// Changed whether members can see who viewed the shared file or folder.
        case sharedContentChangeViewerInfoPolicyDetails(TeamLog.SharedContentChangeViewerInfoPolicyDetails)
        /// Claimed membership to a team member's shared folder.
        case sharedContentClaimInvitationDetails(TeamLog.SharedContentClaimInvitationDetails)
        /// Copied the shared file or folder to own Dropbox.
        case sharedContentCopyDetails(TeamLog.SharedContentCopyDetails)
        /// Downloaded the shared file or folder.
        case sharedContentDownloadDetails(TeamLog.SharedContentDownloadDetails)
        /// Left the membership of a shared file or folder.
        case sharedContentRelinquishMembershipDetails(TeamLog.SharedContentRelinquishMembershipDetails)
        /// Removed an invitee from the membership of a shared file or folder before it was claimed.
        case sharedContentRemoveInviteeDetails(TeamLog.SharedContentRemoveInviteeDetails)
        /// Removed the expiry of the link for the shared file or folder.
        case sharedContentRemoveLinkExpiryDetails(TeamLog.SharedContentRemoveLinkExpiryDetails)
        /// Removed the password on the link for the shared file or folder.
        case sharedContentRemoveLinkPasswordDetails(TeamLog.SharedContentRemoveLinkPasswordDetails)
        /// Removed a user or a group from the membership of a shared file or folder.
        case sharedContentRemoveMemberDetails(TeamLog.SharedContentRemoveMemberDetails)
        /// Requested to be on the membership of a shared file or folder.
        case sharedContentRequestAccessDetails(TeamLog.SharedContentRequestAccessDetails)
        /// Unshared a shared file or folder by clearing its membership and turning off its link.
        case sharedContentUnshareDetails(TeamLog.SharedContentUnshareDetails)
        /// Previewed the shared file or folder.
        case sharedContentViewDetails(TeamLog.SharedContentViewDetails)
        /// Set or unset the confidential flag on a shared folder.
        case sharedFolderChangeConfidentialityDetails(TeamLog.SharedFolderChangeConfidentialityDetails)
        /// Changed who can access the shared folder via a link.
        case sharedFolderChangeLinkPolicyDetails(TeamLog.SharedFolderChangeLinkPolicyDetails)
        /// Changed who can manage the membership of a shared folder.
        case sharedFolderChangeMemberManagementPolicyDetails(TeamLog.SharedFolderChangeMemberManagementPolicyDetails)
        /// Changed who can become a member of the shared folder.
        case sharedFolderChangeMemberPolicyDetails(TeamLog.SharedFolderChangeMemberPolicyDetails)
        /// Created a shared folder.
        case sharedFolderCreateDetails(TeamLog.SharedFolderCreateDetails)
        /// Added a shared folder to own Dropbox.
        case sharedFolderMountDetails(TeamLog.SharedFolderMountDetails)
        /// Transferred the ownership of a shared folder to another member.
        case sharedFolderTransferOwnershipDetails(TeamLog.SharedFolderTransferOwnershipDetails)
        /// Deleted a shared folder from Dropbox.
        case sharedFolderUnmountDetails(TeamLog.SharedFolderUnmountDetails)
        /// Shared Paper document was opened.
        case sharedNoteOpenedDetails(TeamLog.SharedNoteOpenedDetails)
        /// Created a link to a file using an app.
        case shmodelAppCreateDetails(TeamLog.ShmodelAppCreateDetails)
        /// Created a new link.
        case shmodelCreateDetails(TeamLog.ShmodelCreateDetails)
        /// Removed a link.
        case shmodelDisableDetails(TeamLog.ShmodelDisableDetails)
        /// Shared a link with Facebook users.
        case shmodelFbShareDetails(TeamLog.ShmodelFbShareDetails)
        /// Shared a link with a group.
        case shmodelGroupShareDetails(TeamLog.ShmodelGroupShareDetails)
        /// Removed the expiration date from a link.
        case shmodelRemoveExpirationDetails(TeamLog.ShmodelRemoveExpirationDetails)
        /// Added an expiration date to a link.
        case shmodelSetExpirationDetails(TeamLog.ShmodelSetExpirationDetails)
        /// Added a team member's file/folder to their Dropbox from a link.
        case shmodelTeamCopyDetails(TeamLog.ShmodelTeamCopyDetails)
        /// Downloaded a team member's file/folder from a link.
        case shmodelTeamDownloadDetails(TeamLog.ShmodelTeamDownloadDetails)
        /// Shared a link with team members.
        case shmodelTeamShareDetails(TeamLog.ShmodelTeamShareDetails)
        /// Opened a team member's link.
        case shmodelTeamViewDetails(TeamLog.ShmodelTeamViewDetails)
        /// Password-protected a link.
        case shmodelVisibilityPasswordDetails(TeamLog.ShmodelVisibilityPasswordDetails)
        /// Made a file/folder visible to anyone with the link.
        case shmodelVisibilityPublicDetails(TeamLog.ShmodelVisibilityPublicDetails)
        /// Made a file/folder visible only to team members with the link.
        case shmodelVisibilityTeamOnlyDetails(TeamLog.ShmodelVisibilityTeamOnlyDetails)
        /// Added the X.509 certificate for SSO.
        case ssoAddCertDetails(TeamLog.SsoAddCertDetails)
        /// Added sign-in URL for SSO.
        case ssoAddLoginUrlDetails(TeamLog.SsoAddLoginUrlDetails)
        /// Added sign-out URL for SSO.
        case ssoAddLogoutUrlDetails(TeamLog.SsoAddLogoutUrlDetails)
        /// Changed the X.509 certificate for SSO.
        case ssoChangeCertDetails(TeamLog.SsoChangeCertDetails)
        /// Changed the sign-in URL for SSO.
        case ssoChangeLoginUrlDetails(TeamLog.SsoChangeLoginUrlDetails)
        /// Changed the sign-out URL for SSO.
        case ssoChangeLogoutUrlDetails(TeamLog.SsoChangeLogoutUrlDetails)
        /// Changed the SAML identity mode for SSO.
        case ssoChangeSamlIdentityModeDetails(TeamLog.SsoChangeSamlIdentityModeDetails)
        /// Removed the X.509 certificate for SSO.
        case ssoRemoveCertDetails(TeamLog.SsoRemoveCertDetails)
        /// Removed the sign-in URL for SSO.
        case ssoRemoveLoginUrlDetails(TeamLog.SsoRemoveLoginUrlDetails)
        /// Removed single sign-on logout URL.
        case ssoRemoveLogoutUrlDetails(TeamLog.SsoRemoveLogoutUrlDetails)
        /// Changed the archival status of a team folder.
        case teamFolderChangeStatusDetails(TeamLog.TeamFolderChangeStatusDetails)
        /// Created a new team folder in active status.
        case teamFolderCreateDetails(TeamLog.TeamFolderCreateDetails)
        /// Downgraded a team folder to a regular shared folder.
        case teamFolderDowngradeDetails(TeamLog.TeamFolderDowngradeDetails)
        /// Permanently deleted an archived team folder.
        case teamFolderPermanentlyDeleteDetails(TeamLog.TeamFolderPermanentlyDeleteDetails)
        /// Renamed an active or archived team folder.
        case teamFolderRenameDetails(TeamLog.TeamFolderRenameDetails)
        /// Changed the account capture policy on a domain belonging to the team.
        case accountCaptureChangePolicyDetails(TeamLog.AccountCaptureChangePolicyDetails)
        /// Disabled allow downloads.
        case allowDownloadDisabledDetails(TeamLog.AllowDownloadDisabledDetails)
        /// Enabled allow downloads.
        case allowDownloadEnabledDetails(TeamLog.AllowDownloadEnabledDetails)
        /// Set a restriction policy regarding the location of data centers where team data resides.
        case dataPlacementRestrictionChangePolicyDetails(TeamLog.DataPlacementRestrictionChangePolicyDetails)
        /// Satisfied a previously set restriction policy regarding the location of data centers where team data resides
        /// (i.e. all data have been migrated according to the restriction placed).
        case dataPlacementRestrictionSatisfyPolicyDetails(TeamLog.DataPlacementRestrictionSatisfyPolicyDetails)
        /// Set or removed a limit on the number of computers each team member can link to their work Dropbox account.
        case deviceApprovalsChangeDesktopPolicyDetails(TeamLog.DeviceApprovalsChangeDesktopPolicyDetails)
        /// Set or removed a limit on the number of mobiles devices each team member can link to their work Dropbox
        /// account.
        case deviceApprovalsChangeMobilePolicyDetails(TeamLog.DeviceApprovalsChangeMobilePolicyDetails)
        /// Changed the action taken when a team member is already over the limits (e.g when they join the team, an
        /// admin lowers limits, etc.).
        case deviceApprovalsChangeOverageActionDetails(TeamLog.DeviceApprovalsChangeOverageActionDetails)
        /// Changed the action taken with respect to approval limits when a team member unlinks an approved device.
        case deviceApprovalsChangeUnlinkActionDetails(TeamLog.DeviceApprovalsChangeUnlinkActionDetails)
        /// Added an exception for one or more team members to optionally use the regular Dropbox app when EMM is
        /// enabled.
        case emmAddExceptionDetails(TeamLog.EmmAddExceptionDetails)
        /// Enabled or disabled enterprise mobility management for team members.
        case emmChangePolicyDetails(TeamLog.EmmChangePolicyDetails)
        /// Removed an exception for one or more team members to optionally use the regular Dropbox app when EMM is
        /// enabled.
        case emmRemoveExceptionDetails(TeamLog.EmmRemoveExceptionDetails)
        /// Accepted or opted out of extended version history.
        case extendedVersionHistoryChangePolicyDetails(TeamLog.ExtendedVersionHistoryChangePolicyDetails)
        /// Enabled or disabled commenting on team files.
        case fileCommentsChangePolicyDetails(TeamLog.FileCommentsChangePolicyDetails)
        /// Enabled or disabled file requests.
        case fileRequestsChangePolicyDetails(TeamLog.FileRequestsChangePolicyDetails)
        /// Enabled file request emails for everyone.
        case fileRequestsEmailsEnabledDetails(TeamLog.FileRequestsEmailsEnabledDetails)
        /// Allowed file request emails for the team.
        case fileRequestsEmailsRestrictedToTeamOnlyDetails(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetails)
        /// Enabled or disabled Google single sign-on for the team.
        case googleSsoChangePolicyDetails(TeamLog.GoogleSsoChangePolicyDetails)
        /// Changed who can create groups.
        case groupUserManagementChangePolicyDetails(TeamLog.GroupUserManagementChangePolicyDetails)
        /// Changed whether users can find the team when not invited.
        case memberRequestsChangePolicyDetails(TeamLog.MemberRequestsChangePolicyDetails)
        /// Added an exception for one or more team members to bypass space limits imposed by policy.
        case memberSpaceLimitsAddExceptionDetails(TeamLog.MemberSpaceLimitsAddExceptionDetails)
        /// Changed the storage limits applied to team members by policy.
        case memberSpaceLimitsChangePolicyDetails(TeamLog.MemberSpaceLimitsChangePolicyDetails)
        /// Removed an exception for one or more team members to bypass space limits imposed by policy.
        case memberSpaceLimitsRemoveExceptionDetails(TeamLog.MemberSpaceLimitsRemoveExceptionDetails)
        /// Enabled or disabled the option for team members to suggest new members to add to the team.
        case memberSuggestionsChangePolicyDetails(TeamLog.MemberSuggestionsChangePolicyDetails)
        /// Enabled or disabled the Microsoft Office add-in, which lets team members save files to Dropbox directly from
        /// Microsoft Office.
        case microsoftOfficeAddinChangePolicyDetails(TeamLog.MicrosoftOfficeAddinChangePolicyDetails)
        /// Enabled or disabled network control.
        case networkControlChangePolicyDetails(TeamLog.NetworkControlChangePolicyDetails)
        /// Changed whether Dropbox Paper, when enabled, is deployed to all teams or to specific members of the team.
        case paperChangeDeploymentPolicyDetails(TeamLog.PaperChangeDeploymentPolicyDetails)
        /// Changed whether non team members can view Paper documents using a link.
        case paperChangeMemberLinkPolicyDetails(TeamLog.PaperChangeMemberLinkPolicyDetails)
        /// Changed whether team members can share Paper documents externally (i.e. outside the team), and if so,
        /// whether they should be accessible only by team members or anyone by default.
        case paperChangeMemberPolicyDetails(TeamLog.PaperChangeMemberPolicyDetails)
        /// Enabled or disabled Dropbox Paper for the team.
        case paperChangePolicyDetails(TeamLog.PaperChangePolicyDetails)
        /// Enabled or disabled the ability of team members to permanently delete content.
        case permanentDeleteChangePolicyDetails(TeamLog.PermanentDeleteChangePolicyDetails)
        /// Changed whether team members can join shared folders owned externally (i.e. outside the team).
        case sharingChangeFolderJoinPolicyDetails(TeamLog.SharingChangeFolderJoinPolicyDetails)
        /// Changed whether team members can share links externally (i.e. outside the team), and if so, whether links
        /// should be accessible only by team members or anyone by default.
        case sharingChangeLinkPolicyDetails(TeamLog.SharingChangeLinkPolicyDetails)
        /// Changed whether team members can share files and folders externally (i.e. outside the team).
        case sharingChangeMemberPolicyDetails(TeamLog.SharingChangeMemberPolicyDetails)
        /// Changed the default Smart Sync policy for team members.
        case smartSyncChangePolicyDetails(TeamLog.SmartSyncChangePolicyDetails)
        /// Opted team into Smart Sync.
        case smartSyncNotOptOutDetails(TeamLog.SmartSyncNotOptOutDetails)
        /// Opted team out of Smart Sync.
        case smartSyncOptOutDetails(TeamLog.SmartSyncOptOutDetails)
        /// Change the single sign-on policy for the team.
        case ssoChangePolicyDetails(TeamLog.SsoChangePolicyDetails)
        /// Change two-step verification policy for the team.
        case tfaChangePolicyDetails(TeamLog.TfaChangePolicyDetails)
        /// Enabled or disabled the option for team members to link a personal Dropbox account in addition to their work
        /// account to the same computer.
        case twoAccountChangePolicyDetails(TeamLog.TwoAccountChangePolicyDetails)
        /// Changed how long team members can stay signed in to Dropbox on the web.
        case webSessionsChangeFixedLengthPolicyDetails(TeamLog.WebSessionsChangeFixedLengthPolicyDetails)
        /// Changed how long team members can be idle while signed in to Dropbox on the web.
        case webSessionsChangeIdleLengthPolicyDetails(TeamLog.WebSessionsChangeIdleLengthPolicyDetails)
        /// Added a team logo to be displayed on shared link headers.
        case teamProfileAddLogoDetails(TeamLog.TeamProfileAddLogoDetails)
        /// Changed the default language for the team.
        case teamProfileChangeDefaultLanguageDetails(TeamLog.TeamProfileChangeDefaultLanguageDetails)
        /// Changed the team logo to be displayed on shared link headers.
        case teamProfileChangeLogoDetails(TeamLog.TeamProfileChangeLogoDetails)
        /// Changed the team name.
        case teamProfileChangeNameDetails(TeamLog.TeamProfileChangeNameDetails)
        /// Removed the team logo to be displayed on shared link headers.
        case teamProfileRemoveLogoDetails(TeamLog.TeamProfileRemoveLogoDetails)
        /// Added a backup phone for two-step verification.
        case tfaAddBackupPhoneDetails(TeamLog.TfaAddBackupPhoneDetails)
        /// Added a security key for two-step verification.
        case tfaAddSecurityKeyDetails(TeamLog.TfaAddSecurityKeyDetails)
        /// Changed the backup phone for two-step verification.
        case tfaChangeBackupPhoneDetails(TeamLog.TfaChangeBackupPhoneDetails)
        /// Enabled, disabled or changed the configuration for two-step verification.
        case tfaChangeStatusDetails(TeamLog.TfaChangeStatusDetails)
        /// Removed the backup phone for two-step verification.
        case tfaRemoveBackupPhoneDetails(TeamLog.TfaRemoveBackupPhoneDetails)
        /// Removed a security key for two-step verification.
        case tfaRemoveSecurityKeyDetails(TeamLog.TfaRemoveSecurityKeyDetails)
        /// Reset two-step verification for team member.
        case tfaResetDetails(TeamLog.TfaResetDetails)
        /// Hints that this event was returned with missing details due to an internal error.
        case missingDetails(TeamLog.MissingDetails)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventDetailsSerializer().serialize(self)))"
        }
    }
    open class EventDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventDetails) -> JSON {
            switch value {
                case .memberChangeMembershipTypeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeMembershipTypeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_membership_type_details")
                    return .dictionary(d)
                case .memberPermanentlyDeleteAccountContentsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberPermanentlyDeleteAccountContentsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_permanently_delete_account_contents_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_status_details")
                    return .dictionary(d)
                case .memberTransferAccountContentsDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberTransferAccountContentsDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_transfer_account_contents_details")
                    return .dictionary(d)
                case .paperAdminExportStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperAdminExportStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_admin_export_start_details")
                    return .dictionary(d)
                case .paperEnabledUsersGroupAdditionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupAdditionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_addition_details")
                    return .dictionary(d)
                case .paperEnabledUsersGroupRemovalDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperEnabledUsersGroupRemovalDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_enabled_users_group_removal_details")
                    return .dictionary(d)
                case .paperExternalViewAllowDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewAllowDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_allow_details")
                    return .dictionary(d)
                case .paperExternalViewDefaultTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewDefaultTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_default_team_details")
                    return .dictionary(d)
                case .paperExternalViewForbidDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperExternalViewForbidDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_external_view_forbid_details")
                    return .dictionary(d)
                case .sfExternalInviteWarnDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfExternalInviteWarnDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_external_invite_warn_details")
                    return .dictionary(d)
                case .teamMergeFromDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeFromDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_from_details")
                    return .dictionary(d)
                case .teamMergeToDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamMergeToDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_merge_to_details")
                    return .dictionary(d)
                case .appLinkTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_team_details")
                    return .dictionary(d)
                case .appLinkUserDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppLinkUserDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_link_user_details")
                    return .dictionary(d)
                case .appUnlinkTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_team_details")
                    return .dictionary(d)
                case .appUnlinkUserDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AppUnlinkUserDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("app_unlink_user_details")
                    return .dictionary(d)
                case .fileAddCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_add_comment_details")
                    return .dictionary(d)
                case .fileChangeCommentSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileChangeCommentSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_change_comment_subscription_details")
                    return .dictionary(d)
                case .fileDeleteCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete_comment_details")
                    return .dictionary(d)
                case .fileLikeCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileLikeCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_like_comment_details")
                    return .dictionary(d)
                case .fileResolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileResolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_resolve_comment_details")
                    return .dictionary(d)
                case .fileUnlikeCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnlikeCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_unlike_comment_details")
                    return .dictionary(d)
                case .fileUnresolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileUnresolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_unresolve_comment_details")
                    return .dictionary(d)
                case .deviceChangeIpDesktopDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpDesktopDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_desktop_details")
                    return .dictionary(d)
                case .deviceChangeIpMobileDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpMobileDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_mobile_details")
                    return .dictionary(d)
                case .deviceChangeIpWebDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceChangeIpWebDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_change_ip_web_details")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_fail_details")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceDeleteOnUnlinkSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_delete_on_unlink_success_details")
                    return .dictionary(d)
                case .deviceLinkFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_fail_details")
                    return .dictionary(d)
                case .deviceLinkSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceLinkSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_link_success_details")
                    return .dictionary(d)
                case .deviceManagementDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_disabled_details")
                    return .dictionary(d)
                case .deviceManagementEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceManagementEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_management_enabled_details")
                    return .dictionary(d)
                case .deviceUnlinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceUnlinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_unlink_details")
                    return .dictionary(d)
                case .emmRefreshAuthTokenDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRefreshAuthTokenDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_refresh_auth_token_details")
                    return .dictionary(d)
                case .accountCaptureChangeAvailabilityDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangeAvailabilityDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_availability_details")
                    return .dictionary(d)
                case .accountCaptureMigrateAccountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureMigrateAccountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_migrate_account_details")
                    return .dictionary(d)
                case .accountCaptureRelinquishAccountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureRelinquishAccountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_relinquish_account_details")
                    return .dictionary(d)
                case .disabledDomainInvitesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DisabledDomainInvitesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("disabled_domain_invites_details")
                    return .dictionary(d)
                case .domainInvitesApproveRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesApproveRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_approve_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesDeclineRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_decline_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesEmailExistingUsersDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesEmailExistingUsersDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_email_existing_users_details")
                    return .dictionary(d)
                case .domainInvitesRequestToJoinTeamDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesRequestToJoinTeamDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_request_to_join_team_details")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToNoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_no_details")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToYesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_yes_details")
                    return .dictionary(d)
                case .domainVerificationAddDomainFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_fail_details")
                    return .dictionary(d)
                case .domainVerificationAddDomainSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationAddDomainSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_add_domain_success_details")
                    return .dictionary(d)
                case .domainVerificationRemoveDomainDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DomainVerificationRemoveDomainDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("domain_verification_remove_domain_details")
                    return .dictionary(d)
                case .enabledDomainInvitesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EnabledDomainInvitesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("enabled_domain_invites_details")
                    return .dictionary(d)
                case .createFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CreateFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("create_folder_details")
                    return .dictionary(d)
                case .fileAddDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileAddDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_add_details")
                    return .dictionary(d)
                case .fileCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_copy_details")
                    return .dictionary(d)
                case .fileDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_delete_details")
                    return .dictionary(d)
                case .fileDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_download_details")
                    return .dictionary(d)
                case .fileEditDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileEditDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_edit_details")
                    return .dictionary(d)
                case .fileGetCopyReferenceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileGetCopyReferenceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_get_copy_reference_details")
                    return .dictionary(d)
                case .fileMoveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileMoveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_move_details")
                    return .dictionary(d)
                case .filePermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FilePermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_permanently_delete_details")
                    return .dictionary(d)
                case .filePreviewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FilePreviewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_preview_details")
                    return .dictionary(d)
                case .fileRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_rename_details")
                    return .dictionary(d)
                case .fileRestoreDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRestoreDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_restore_details")
                    return .dictionary(d)
                case .fileRevertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRevertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_revert_details")
                    return .dictionary(d)
                case .fileRollbackChangesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRollbackChangesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_rollback_changes_details")
                    return .dictionary(d)
                case .fileSaveCopyReferenceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileSaveCopyReferenceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_save_copy_reference_details")
                    return .dictionary(d)
                case .fileRequestAddDeadlineDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestAddDeadlineDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_add_deadline_details")
                    return .dictionary(d)
                case .fileRequestChangeFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestChangeFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_change_folder_details")
                    return .dictionary(d)
                case .fileRequestChangeTitleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestChangeTitleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_change_title_details")
                    return .dictionary(d)
                case .fileRequestCloseDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCloseDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_close_details")
                    return .dictionary(d)
                case .fileRequestCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_create_details")
                    return .dictionary(d)
                case .fileRequestReceiveFileDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestReceiveFileDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_receive_file_details")
                    return .dictionary(d)
                case .fileRequestRemoveDeadlineDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestRemoveDeadlineDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_remove_deadline_details")
                    return .dictionary(d)
                case .fileRequestSendDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestSendDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_request_send_details")
                    return .dictionary(d)
                case .groupAddExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_external_id_details")
                    return .dictionary(d)
                case .groupAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_add_member_details")
                    return .dictionary(d)
                case .groupChangeExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_external_id_details")
                    return .dictionary(d)
                case .groupChangeManagementTypeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeManagementTypeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_management_type_details")
                    return .dictionary(d)
                case .groupChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_change_member_role_details")
                    return .dictionary(d)
                case .groupCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_create_details")
                    return .dictionary(d)
                case .groupDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_delete_details")
                    return .dictionary(d)
                case .groupMovedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupMovedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_moved_details")
                    return .dictionary(d)
                case .groupRemoveExternalIdDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveExternalIdDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_external_id_details")
                    return .dictionary(d)
                case .groupRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_remove_member_details")
                    return .dictionary(d)
                case .groupRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_rename_details")
                    return .dictionary(d)
                case .emmLoginSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmLoginSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_login_success_details")
                    return .dictionary(d)
                case .logoutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.LogoutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("logout_details")
                    return .dictionary(d)
                case .passwordLoginFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordLoginFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_login_fail_details")
                    return .dictionary(d)
                case .passwordLoginSuccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordLoginSuccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_login_success_details")
                    return .dictionary(d)
                case .resellerSupportSessionEndDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionEndDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_end_details")
                    return .dictionary(d)
                case .resellerSupportSessionStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ResellerSupportSessionStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("reseller_support_session_start_details")
                    return .dictionary(d)
                case .signInAsSessionEndDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionEndDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_end_details")
                    return .dictionary(d)
                case .signInAsSessionStartDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SignInAsSessionStartDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sign_in_as_session_start_details")
                    return .dictionary(d)
                case .ssoLoginFailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoLoginFailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_login_fail_details")
                    return .dictionary(d)
                case .memberAddNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberAddNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_add_name_details")
                    return .dictionary(d)
                case .memberChangeAdminRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeAdminRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_admin_role_details")
                    return .dictionary(d)
                case .memberChangeEmailDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeEmailDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_email_details")
                    return .dictionary(d)
                case .memberChangeNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_name_details")
                    return .dictionary(d)
                case .memberChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_change_status_details")
                    return .dictionary(d)
                case .memberSuggestDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggest_details")
                    return .dictionary(d)
                case .paperContentAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_member_details")
                    return .dictionary(d)
                case .paperContentAddToFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentAddToFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_add_to_folder_details")
                    return .dictionary(d)
                case .paperContentArchiveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentArchiveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_archive_details")
                    return .dictionary(d)
                case .paperContentCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_create_details")
                    return .dictionary(d)
                case .paperContentPermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentPermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_permanently_delete_details")
                    return .dictionary(d)
                case .paperContentRemoveFromFolderDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveFromFolderDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_from_folder_details")
                    return .dictionary(d)
                case .paperContentRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_remove_member_details")
                    return .dictionary(d)
                case .paperContentRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_rename_details")
                    return .dictionary(d)
                case .paperContentRestoreDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperContentRestoreDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_content_restore_details")
                    return .dictionary(d)
                case .paperDocAddCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocAddCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_add_comment_details")
                    return .dictionary(d)
                case .paperDocChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_member_role_details")
                    return .dictionary(d)
                case .paperDocChangeSharingPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSharingPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_sharing_policy_details")
                    return .dictionary(d)
                case .paperDocChangeSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocChangeSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_change_subscription_details")
                    return .dictionary(d)
                case .paperDocDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_deleted_details")
                    return .dictionary(d)
                case .paperDocDeleteCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDeleteCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_delete_comment_details")
                    return .dictionary(d)
                case .paperDocDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_download_details")
                    return .dictionary(d)
                case .paperDocEditDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit_details")
                    return .dictionary(d)
                case .paperDocEditCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocEditCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_edit_comment_details")
                    return .dictionary(d)
                case .paperDocFollowedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocFollowedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_followed_details")
                    return .dictionary(d)
                case .paperDocMentionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocMentionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_mention_details")
                    return .dictionary(d)
                case .paperDocRequestAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRequestAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_request_access_details")
                    return .dictionary(d)
                case .paperDocResolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocResolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_resolve_comment_details")
                    return .dictionary(d)
                case .paperDocRevertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocRevertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_revert_details")
                    return .dictionary(d)
                case .paperDocSlackShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocSlackShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_slack_share_details")
                    return .dictionary(d)
                case .paperDocTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_team_invite_details")
                    return .dictionary(d)
                case .paperDocTrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocTrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_trashed_details")
                    return .dictionary(d)
                case .paperDocUnresolveCommentDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUnresolveCommentDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_unresolve_comment_details")
                    return .dictionary(d)
                case .paperDocUntrashedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocUntrashedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_untrashed_details")
                    return .dictionary(d)
                case .paperDocViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperDocViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_doc_view_details")
                    return .dictionary(d)
                case .paperFolderChangeSubscriptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderChangeSubscriptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_change_subscription_details")
                    return .dictionary(d)
                case .paperFolderDeletedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderDeletedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_deleted_details")
                    return .dictionary(d)
                case .paperFolderFollowedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderFollowedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_followed_details")
                    return .dictionary(d)
                case .paperFolderTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperFolderTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_folder_team_invite_details")
                    return .dictionary(d)
                case .passwordChangeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordChangeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_change_details")
                    return .dictionary(d)
                case .passwordResetDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset_details")
                    return .dictionary(d)
                case .passwordResetAllDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PasswordResetAllDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("password_reset_all_details")
                    return .dictionary(d)
                case .emmCreateExceptionsReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateExceptionsReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_exceptions_report_details")
                    return .dictionary(d)
                case .emmCreateUsageReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmCreateUsageReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_create_usage_report_details")
                    return .dictionary(d)
                case .smartSyncCreateAdminPrivilegeReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncCreateAdminPrivilegeReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_create_admin_privilege_report_details")
                    return .dictionary(d)
                case .teamActivityCreateReportDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamActivityCreateReportDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_activity_create_report_details")
                    return .dictionary(d)
                case .collectionShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.CollectionShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("collection_share_details")
                    return .dictionary(d)
                case .noteAclInviteOnlyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclInviteOnlyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_invite_only_details")
                    return .dictionary(d)
                case .noteAclLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_link_details")
                    return .dictionary(d)
                case .noteAclTeamLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteAclTeamLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_acl_team_link_details")
                    return .dictionary(d)
                case .noteSharedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteSharedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_shared_details")
                    return .dictionary(d)
                case .noteShareReceiveDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NoteShareReceiveDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("note_share_receive_details")
                    return .dictionary(d)
                case .openNoteSharedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.OpenNoteSharedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("open_note_shared_details")
                    return .dictionary(d)
                case .sfAddGroupDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfAddGroupDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_add_group_details")
                    return .dictionary(d)
                case .sfAllowNonMembersToViewSharedLinksDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfAllowNonMembersToViewSharedLinksDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_allow_non_members_to_view_shared_links_details")
                    return .dictionary(d)
                case .sfInviteGroupDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfInviteGroupDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_invite_group_details")
                    return .dictionary(d)
                case .sfNestDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfNestDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_nest_details")
                    return .dictionary(d)
                case .sfTeamDeclineDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamDeclineDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_decline_details")
                    return .dictionary(d)
                case .sfTeamGrantAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamGrantAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_grant_access_details")
                    return .dictionary(d)
                case .sfTeamInviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite_details")
                    return .dictionary(d)
                case .sfTeamInviteChangeRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamInviteChangeRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_invite_change_role_details")
                    return .dictionary(d)
                case .sfTeamJoinDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join_details")
                    return .dictionary(d)
                case .sfTeamJoinFromOobLinkDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamJoinFromOobLinkDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_join_from_oob_link_details")
                    return .dictionary(d)
                case .sfTeamUninviteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SfTeamUninviteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sf_team_uninvite_details")
                    return .dictionary(d)
                case .sharedContentAddInviteesDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddInviteesDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_invitees_details")
                    return .dictionary(d)
                case .sharedContentAddLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentAddLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_link_password_details")
                    return .dictionary(d)
                case .sharedContentAddMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentAddMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_add_member_details")
                    return .dictionary(d)
                case .sharedContentChangeDownloadsPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeDownloadsPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_downloads_policy_details")
                    return .dictionary(d)
                case .sharedContentChangeInviteeRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeInviteeRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_invitee_role_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkAudienceDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkAudienceDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_audience_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentChangeLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_link_password_details")
                    return .dictionary(d)
                case .sharedContentChangeMemberRoleDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeMemberRoleDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_member_role_details")
                    return .dictionary(d)
                case .sharedContentChangeViewerInfoPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentChangeViewerInfoPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_change_viewer_info_policy_details")
                    return .dictionary(d)
                case .sharedContentClaimInvitationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentClaimInvitationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_claim_invitation_details")
                    return .dictionary(d)
                case .sharedContentCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_copy_details")
                    return .dictionary(d)
                case .sharedContentDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_download_details")
                    return .dictionary(d)
                case .sharedContentRelinquishMembershipDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRelinquishMembershipDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_relinquish_membership_details")
                    return .dictionary(d)
                case .sharedContentRemoveInviteeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveInviteeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_invitee_details")
                    return .dictionary(d)
                case .sharedContentRemoveLinkExpiryDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkExpiryDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_expiry_details")
                    return .dictionary(d)
                case .sharedContentRemoveLinkPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveLinkPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_link_password_details")
                    return .dictionary(d)
                case .sharedContentRemoveMemberDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRemoveMemberDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_remove_member_details")
                    return .dictionary(d)
                case .sharedContentRequestAccessDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentRequestAccessDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_request_access_details")
                    return .dictionary(d)
                case .sharedContentUnshareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentUnshareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_unshare_details")
                    return .dictionary(d)
                case .sharedContentViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedContentViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_content_view_details")
                    return .dictionary(d)
                case .sharedFolderChangeConfidentialityDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeConfidentialityDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_confidentiality_details")
                    return .dictionary(d)
                case .sharedFolderChangeLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_link_policy_details")
                    return .dictionary(d)
                case .sharedFolderChangeMemberManagementPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMemberManagementPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_member_management_policy_details")
                    return .dictionary(d)
                case .sharedFolderChangeMemberPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderChangeMemberPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_change_member_policy_details")
                    return .dictionary(d)
                case .sharedFolderCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_create_details")
                    return .dictionary(d)
                case .sharedFolderMountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderMountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_mount_details")
                    return .dictionary(d)
                case .sharedFolderTransferOwnershipDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderTransferOwnershipDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_transfer_ownership_details")
                    return .dictionary(d)
                case .sharedFolderUnmountDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedFolderUnmountDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_folder_unmount_details")
                    return .dictionary(d)
                case .sharedNoteOpenedDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharedNoteOpenedDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shared_note_opened_details")
                    return .dictionary(d)
                case .shmodelAppCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelAppCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_app_create_details")
                    return .dictionary(d)
                case .shmodelCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_create_details")
                    return .dictionary(d)
                case .shmodelDisableDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelDisableDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_disable_details")
                    return .dictionary(d)
                case .shmodelFbShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelFbShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_fb_share_details")
                    return .dictionary(d)
                case .shmodelGroupShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelGroupShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_group_share_details")
                    return .dictionary(d)
                case .shmodelRemoveExpirationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelRemoveExpirationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_remove_expiration_details")
                    return .dictionary(d)
                case .shmodelSetExpirationDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelSetExpirationDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_set_expiration_details")
                    return .dictionary(d)
                case .shmodelTeamCopyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelTeamCopyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_team_copy_details")
                    return .dictionary(d)
                case .shmodelTeamDownloadDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelTeamDownloadDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_team_download_details")
                    return .dictionary(d)
                case .shmodelTeamShareDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelTeamShareDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_team_share_details")
                    return .dictionary(d)
                case .shmodelTeamViewDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelTeamViewDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_team_view_details")
                    return .dictionary(d)
                case .shmodelVisibilityPasswordDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelVisibilityPasswordDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_visibility_password_details")
                    return .dictionary(d)
                case .shmodelVisibilityPublicDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelVisibilityPublicDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_visibility_public_details")
                    return .dictionary(d)
                case .shmodelVisibilityTeamOnlyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ShmodelVisibilityTeamOnlyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("shmodel_visibility_team_only_details")
                    return .dictionary(d)
                case .ssoAddCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_cert_details")
                    return .dictionary(d)
                case .ssoAddLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_login_url_details")
                    return .dictionary(d)
                case .ssoAddLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoAddLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_add_logout_url_details")
                    return .dictionary(d)
                case .ssoChangeCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_cert_details")
                    return .dictionary(d)
                case .ssoChangeLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_login_url_details")
                    return .dictionary(d)
                case .ssoChangeLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_logout_url_details")
                    return .dictionary(d)
                case .ssoChangeSamlIdentityModeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangeSamlIdentityModeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_saml_identity_mode_details")
                    return .dictionary(d)
                case .ssoRemoveCertDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveCertDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_cert_details")
                    return .dictionary(d)
                case .ssoRemoveLoginUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLoginUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_login_url_details")
                    return .dictionary(d)
                case .ssoRemoveLogoutUrlDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoRemoveLogoutUrlDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_remove_logout_url_details")
                    return .dictionary(d)
                case .teamFolderChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_change_status_details")
                    return .dictionary(d)
                case .teamFolderCreateDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderCreateDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_create_details")
                    return .dictionary(d)
                case .teamFolderDowngradeDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderDowngradeDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_downgrade_details")
                    return .dictionary(d)
                case .teamFolderPermanentlyDeleteDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderPermanentlyDeleteDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_permanently_delete_details")
                    return .dictionary(d)
                case .teamFolderRenameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamFolderRenameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_folder_rename_details")
                    return .dictionary(d)
                case .accountCaptureChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AccountCaptureChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("account_capture_change_policy_details")
                    return .dictionary(d)
                case .allowDownloadDisabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadDisabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_disabled_details")
                    return .dictionary(d)
                case .allowDownloadEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.AllowDownloadEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("allow_download_enabled_details")
                    return .dictionary(d)
                case .dataPlacementRestrictionChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_change_policy_details")
                    return .dictionary(d)
                case .dataPlacementRestrictionSatisfyPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DataPlacementRestrictionSatisfyPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("data_placement_restriction_satisfy_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeDesktopPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeDesktopPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_desktop_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeMobilePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeMobilePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_mobile_policy_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeOverageActionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeOverageActionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_overage_action_details")
                    return .dictionary(d)
                case .deviceApprovalsChangeUnlinkActionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.DeviceApprovalsChangeUnlinkActionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("device_approvals_change_unlink_action_details")
                    return .dictionary(d)
                case .emmAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_add_exception_details")
                    return .dictionary(d)
                case .emmChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_change_policy_details")
                    return .dictionary(d)
                case .emmRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.EmmRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("emm_remove_exception_details")
                    return .dictionary(d)
                case .extendedVersionHistoryChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.ExtendedVersionHistoryChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("extended_version_history_change_policy_details")
                    return .dictionary(d)
                case .fileCommentsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileCommentsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_comments_change_policy_details")
                    return .dictionary(d)
                case .fileRequestsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_change_policy_details")
                    return .dictionary(d)
                case .fileRequestsEmailsEnabledDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsEnabledDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_enabled_details")
                    return .dictionary(d)
                case .fileRequestsEmailsRestrictedToTeamOnlyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("file_requests_emails_restricted_to_team_only_details")
                    return .dictionary(d)
                case .googleSsoChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GoogleSsoChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("google_sso_change_policy_details")
                    return .dictionary(d)
                case .groupUserManagementChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.GroupUserManagementChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("group_user_management_change_policy_details")
                    return .dictionary(d)
                case .memberRequestsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberRequestsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_requests_change_policy_details")
                    return .dictionary(d)
                case .memberSpaceLimitsAddExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsAddExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_add_exception_details")
                    return .dictionary(d)
                case .memberSpaceLimitsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_change_policy_details")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveExceptionDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSpaceLimitsRemoveExceptionDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_space_limits_remove_exception_details")
                    return .dictionary(d)
                case .memberSuggestionsChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MemberSuggestionsChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("member_suggestions_change_policy_details")
                    return .dictionary(d)
                case .microsoftOfficeAddinChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MicrosoftOfficeAddinChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("microsoft_office_addin_change_policy_details")
                    return .dictionary(d)
                case .networkControlChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.NetworkControlChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("network_control_change_policy_details")
                    return .dictionary(d)
                case .paperChangeDeploymentPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeDeploymentPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_deployment_policy_details")
                    return .dictionary(d)
                case .paperChangeMemberLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_link_policy_details")
                    return .dictionary(d)
                case .paperChangeMemberPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangeMemberPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_member_policy_details")
                    return .dictionary(d)
                case .paperChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PaperChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("paper_change_policy_details")
                    return .dictionary(d)
                case .permanentDeleteChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.PermanentDeleteChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("permanent_delete_change_policy_details")
                    return .dictionary(d)
                case .sharingChangeFolderJoinPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeFolderJoinPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_folder_join_policy_details")
                    return .dictionary(d)
                case .sharingChangeLinkPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeLinkPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_link_policy_details")
                    return .dictionary(d)
                case .sharingChangeMemberPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SharingChangeMemberPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sharing_change_member_policy_details")
                    return .dictionary(d)
                case .smartSyncChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_change_policy_details")
                    return .dictionary(d)
                case .smartSyncNotOptOutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncNotOptOutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_not_opt_out_details")
                    return .dictionary(d)
                case .smartSyncOptOutDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SmartSyncOptOutDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("smart_sync_opt_out_details")
                    return .dictionary(d)
                case .ssoChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.SsoChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("sso_change_policy_details")
                    return .dictionary(d)
                case .tfaChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_policy_details")
                    return .dictionary(d)
                case .twoAccountChangePolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TwoAccountChangePolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("two_account_change_policy_details")
                    return .dictionary(d)
                case .webSessionsChangeFixedLengthPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeFixedLengthPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_fixed_length_policy_details")
                    return .dictionary(d)
                case .webSessionsChangeIdleLengthPolicyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.WebSessionsChangeIdleLengthPolicyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("web_sessions_change_idle_length_policy_details")
                    return .dictionary(d)
                case .teamProfileAddLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileAddLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_add_logo_details")
                    return .dictionary(d)
                case .teamProfileChangeDefaultLanguageDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeDefaultLanguageDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_default_language_details")
                    return .dictionary(d)
                case .teamProfileChangeLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_logo_details")
                    return .dictionary(d)
                case .teamProfileChangeNameDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileChangeNameDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_change_name_details")
                    return .dictionary(d)
                case .teamProfileRemoveLogoDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TeamProfileRemoveLogoDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("team_profile_remove_logo_details")
                    return .dictionary(d)
                case .tfaAddBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_backup_phone_details")
                    return .dictionary(d)
                case .tfaAddSecurityKeyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaAddSecurityKeyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_add_security_key_details")
                    return .dictionary(d)
                case .tfaChangeBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_backup_phone_details")
                    return .dictionary(d)
                case .tfaChangeStatusDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaChangeStatusDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_change_status_details")
                    return .dictionary(d)
                case .tfaRemoveBackupPhoneDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveBackupPhoneDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_backup_phone_details")
                    return .dictionary(d)
                case .tfaRemoveSecurityKeyDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaRemoveSecurityKeyDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_remove_security_key_details")
                    return .dictionary(d)
                case .tfaResetDetails(let arg):
                    var d = Serialization.getFields(TeamLog.TfaResetDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("tfa_reset_details")
                    return .dictionary(d)
                case .missingDetails(let arg):
                    var d = Serialization.getFields(TeamLog.MissingDetailsSerializer().serialize(arg))
                    d[".tag"] = .str("missing_details")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventDetails {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "member_change_membership_type_details":
                            let v = TeamLog.MemberChangeMembershipTypeDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeMembershipTypeDetails(v)
                        case "member_permanently_delete_account_contents_details":
                            let v = TeamLog.MemberPermanentlyDeleteAccountContentsDetailsSerializer().deserialize(json)
                            return EventDetails.memberPermanentlyDeleteAccountContentsDetails(v)
                        case "member_space_limits_change_status_details":
                            let v = TeamLog.MemberSpaceLimitsChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangeStatusDetails(v)
                        case "member_transfer_account_contents_details":
                            let v = TeamLog.MemberTransferAccountContentsDetailsSerializer().deserialize(json)
                            return EventDetails.memberTransferAccountContentsDetails(v)
                        case "paper_admin_export_start_details":
                            let v = TeamLog.PaperAdminExportStartDetailsSerializer().deserialize(json)
                            return EventDetails.paperAdminExportStartDetails(v)
                        case "paper_enabled_users_group_addition_details":
                            let v = TeamLog.PaperEnabledUsersGroupAdditionDetailsSerializer().deserialize(json)
                            return EventDetails.paperEnabledUsersGroupAdditionDetails(v)
                        case "paper_enabled_users_group_removal_details":
                            let v = TeamLog.PaperEnabledUsersGroupRemovalDetailsSerializer().deserialize(json)
                            return EventDetails.paperEnabledUsersGroupRemovalDetails(v)
                        case "paper_external_view_allow_details":
                            let v = TeamLog.PaperExternalViewAllowDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewAllowDetails(v)
                        case "paper_external_view_default_team_details":
                            let v = TeamLog.PaperExternalViewDefaultTeamDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewDefaultTeamDetails(v)
                        case "paper_external_view_forbid_details":
                            let v = TeamLog.PaperExternalViewForbidDetailsSerializer().deserialize(json)
                            return EventDetails.paperExternalViewForbidDetails(v)
                        case "sf_external_invite_warn_details":
                            let v = TeamLog.SfExternalInviteWarnDetailsSerializer().deserialize(json)
                            return EventDetails.sfExternalInviteWarnDetails(v)
                        case "team_merge_from_details":
                            let v = TeamLog.TeamMergeFromDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeFromDetails(v)
                        case "team_merge_to_details":
                            let v = TeamLog.TeamMergeToDetailsSerializer().deserialize(json)
                            return EventDetails.teamMergeToDetails(v)
                        case "app_link_team_details":
                            let v = TeamLog.AppLinkTeamDetailsSerializer().deserialize(json)
                            return EventDetails.appLinkTeamDetails(v)
                        case "app_link_user_details":
                            let v = TeamLog.AppLinkUserDetailsSerializer().deserialize(json)
                            return EventDetails.appLinkUserDetails(v)
                        case "app_unlink_team_details":
                            let v = TeamLog.AppUnlinkTeamDetailsSerializer().deserialize(json)
                            return EventDetails.appUnlinkTeamDetails(v)
                        case "app_unlink_user_details":
                            let v = TeamLog.AppUnlinkUserDetailsSerializer().deserialize(json)
                            return EventDetails.appUnlinkUserDetails(v)
                        case "file_add_comment_details":
                            let v = TeamLog.FileAddCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileAddCommentDetails(v)
                        case "file_change_comment_subscription_details":
                            let v = TeamLog.FileChangeCommentSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.fileChangeCommentSubscriptionDetails(v)
                        case "file_delete_comment_details":
                            let v = TeamLog.FileDeleteCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileDeleteCommentDetails(v)
                        case "file_like_comment_details":
                            let v = TeamLog.FileLikeCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileLikeCommentDetails(v)
                        case "file_resolve_comment_details":
                            let v = TeamLog.FileResolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileResolveCommentDetails(v)
                        case "file_unlike_comment_details":
                            let v = TeamLog.FileUnlikeCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileUnlikeCommentDetails(v)
                        case "file_unresolve_comment_details":
                            let v = TeamLog.FileUnresolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.fileUnresolveCommentDetails(v)
                        case "device_change_ip_desktop_details":
                            let v = TeamLog.DeviceChangeIpDesktopDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpDesktopDetails(v)
                        case "device_change_ip_mobile_details":
                            let v = TeamLog.DeviceChangeIpMobileDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpMobileDetails(v)
                        case "device_change_ip_web_details":
                            let v = TeamLog.DeviceChangeIpWebDetailsSerializer().deserialize(json)
                            return EventDetails.deviceChangeIpWebDetails(v)
                        case "device_delete_on_unlink_fail_details":
                            let v = TeamLog.DeviceDeleteOnUnlinkFailDetailsSerializer().deserialize(json)
                            return EventDetails.deviceDeleteOnUnlinkFailDetails(v)
                        case "device_delete_on_unlink_success_details":
                            let v = TeamLog.DeviceDeleteOnUnlinkSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.deviceDeleteOnUnlinkSuccessDetails(v)
                        case "device_link_fail_details":
                            let v = TeamLog.DeviceLinkFailDetailsSerializer().deserialize(json)
                            return EventDetails.deviceLinkFailDetails(v)
                        case "device_link_success_details":
                            let v = TeamLog.DeviceLinkSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.deviceLinkSuccessDetails(v)
                        case "device_management_disabled_details":
                            let v = TeamLog.DeviceManagementDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.deviceManagementDisabledDetails(v)
                        case "device_management_enabled_details":
                            let v = TeamLog.DeviceManagementEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.deviceManagementEnabledDetails(v)
                        case "device_unlink_details":
                            let v = TeamLog.DeviceUnlinkDetailsSerializer().deserialize(json)
                            return EventDetails.deviceUnlinkDetails(v)
                        case "emm_refresh_auth_token_details":
                            let v = TeamLog.EmmRefreshAuthTokenDetailsSerializer().deserialize(json)
                            return EventDetails.emmRefreshAuthTokenDetails(v)
                        case "account_capture_change_availability_details":
                            let v = TeamLog.AccountCaptureChangeAvailabilityDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureChangeAvailabilityDetails(v)
                        case "account_capture_migrate_account_details":
                            let v = TeamLog.AccountCaptureMigrateAccountDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureMigrateAccountDetails(v)
                        case "account_capture_relinquish_account_details":
                            let v = TeamLog.AccountCaptureRelinquishAccountDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureRelinquishAccountDetails(v)
                        case "disabled_domain_invites_details":
                            let v = TeamLog.DisabledDomainInvitesDetailsSerializer().deserialize(json)
                            return EventDetails.disabledDomainInvitesDetails(v)
                        case "domain_invites_approve_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesApproveRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesApproveRequestToJoinTeamDetails(v)
                        case "domain_invites_decline_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesDeclineRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesDeclineRequestToJoinTeamDetails(v)
                        case "domain_invites_email_existing_users_details":
                            let v = TeamLog.DomainInvitesEmailExistingUsersDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesEmailExistingUsersDetails(v)
                        case "domain_invites_request_to_join_team_details":
                            let v = TeamLog.DomainInvitesRequestToJoinTeamDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesRequestToJoinTeamDetails(v)
                        case "domain_invites_set_invite_new_user_pref_to_no_details":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToNoDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesSetInviteNewUserPrefToNoDetails(v)
                        case "domain_invites_set_invite_new_user_pref_to_yes_details":
                            let v = TeamLog.DomainInvitesSetInviteNewUserPrefToYesDetailsSerializer().deserialize(json)
                            return EventDetails.domainInvitesSetInviteNewUserPrefToYesDetails(v)
                        case "domain_verification_add_domain_fail_details":
                            let v = TeamLog.DomainVerificationAddDomainFailDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationAddDomainFailDetails(v)
                        case "domain_verification_add_domain_success_details":
                            let v = TeamLog.DomainVerificationAddDomainSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationAddDomainSuccessDetails(v)
                        case "domain_verification_remove_domain_details":
                            let v = TeamLog.DomainVerificationRemoveDomainDetailsSerializer().deserialize(json)
                            return EventDetails.domainVerificationRemoveDomainDetails(v)
                        case "enabled_domain_invites_details":
                            let v = TeamLog.EnabledDomainInvitesDetailsSerializer().deserialize(json)
                            return EventDetails.enabledDomainInvitesDetails(v)
                        case "create_folder_details":
                            let v = TeamLog.CreateFolderDetailsSerializer().deserialize(json)
                            return EventDetails.createFolderDetails(v)
                        case "file_add_details":
                            let v = TeamLog.FileAddDetailsSerializer().deserialize(json)
                            return EventDetails.fileAddDetails(v)
                        case "file_copy_details":
                            let v = TeamLog.FileCopyDetailsSerializer().deserialize(json)
                            return EventDetails.fileCopyDetails(v)
                        case "file_delete_details":
                            let v = TeamLog.FileDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.fileDeleteDetails(v)
                        case "file_download_details":
                            let v = TeamLog.FileDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.fileDownloadDetails(v)
                        case "file_edit_details":
                            let v = TeamLog.FileEditDetailsSerializer().deserialize(json)
                            return EventDetails.fileEditDetails(v)
                        case "file_get_copy_reference_details":
                            let v = TeamLog.FileGetCopyReferenceDetailsSerializer().deserialize(json)
                            return EventDetails.fileGetCopyReferenceDetails(v)
                        case "file_move_details":
                            let v = TeamLog.FileMoveDetailsSerializer().deserialize(json)
                            return EventDetails.fileMoveDetails(v)
                        case "file_permanently_delete_details":
                            let v = TeamLog.FilePermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.filePermanentlyDeleteDetails(v)
                        case "file_preview_details":
                            let v = TeamLog.FilePreviewDetailsSerializer().deserialize(json)
                            return EventDetails.filePreviewDetails(v)
                        case "file_rename_details":
                            let v = TeamLog.FileRenameDetailsSerializer().deserialize(json)
                            return EventDetails.fileRenameDetails(v)
                        case "file_restore_details":
                            let v = TeamLog.FileRestoreDetailsSerializer().deserialize(json)
                            return EventDetails.fileRestoreDetails(v)
                        case "file_revert_details":
                            let v = TeamLog.FileRevertDetailsSerializer().deserialize(json)
                            return EventDetails.fileRevertDetails(v)
                        case "file_rollback_changes_details":
                            let v = TeamLog.FileRollbackChangesDetailsSerializer().deserialize(json)
                            return EventDetails.fileRollbackChangesDetails(v)
                        case "file_save_copy_reference_details":
                            let v = TeamLog.FileSaveCopyReferenceDetailsSerializer().deserialize(json)
                            return EventDetails.fileSaveCopyReferenceDetails(v)
                        case "file_request_add_deadline_details":
                            let v = TeamLog.FileRequestAddDeadlineDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestAddDeadlineDetails(v)
                        case "file_request_change_folder_details":
                            let v = TeamLog.FileRequestChangeFolderDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestChangeFolderDetails(v)
                        case "file_request_change_title_details":
                            let v = TeamLog.FileRequestChangeTitleDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestChangeTitleDetails(v)
                        case "file_request_close_details":
                            let v = TeamLog.FileRequestCloseDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestCloseDetails(v)
                        case "file_request_create_details":
                            let v = TeamLog.FileRequestCreateDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestCreateDetails(v)
                        case "file_request_receive_file_details":
                            let v = TeamLog.FileRequestReceiveFileDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestReceiveFileDetails(v)
                        case "file_request_remove_deadline_details":
                            let v = TeamLog.FileRequestRemoveDeadlineDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestRemoveDeadlineDetails(v)
                        case "file_request_send_details":
                            let v = TeamLog.FileRequestSendDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestSendDetails(v)
                        case "group_add_external_id_details":
                            let v = TeamLog.GroupAddExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupAddExternalIdDetails(v)
                        case "group_add_member_details":
                            let v = TeamLog.GroupAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.groupAddMemberDetails(v)
                        case "group_change_external_id_details":
                            let v = TeamLog.GroupChangeExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeExternalIdDetails(v)
                        case "group_change_management_type_details":
                            let v = TeamLog.GroupChangeManagementTypeDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeManagementTypeDetails(v)
                        case "group_change_member_role_details":
                            let v = TeamLog.GroupChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.groupChangeMemberRoleDetails(v)
                        case "group_create_details":
                            let v = TeamLog.GroupCreateDetailsSerializer().deserialize(json)
                            return EventDetails.groupCreateDetails(v)
                        case "group_delete_details":
                            let v = TeamLog.GroupDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.groupDeleteDetails(v)
                        case "group_moved_details":
                            let v = TeamLog.GroupMovedDetailsSerializer().deserialize(json)
                            return EventDetails.groupMovedDetails(v)
                        case "group_remove_external_id_details":
                            let v = TeamLog.GroupRemoveExternalIdDetailsSerializer().deserialize(json)
                            return EventDetails.groupRemoveExternalIdDetails(v)
                        case "group_remove_member_details":
                            let v = TeamLog.GroupRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.groupRemoveMemberDetails(v)
                        case "group_rename_details":
                            let v = TeamLog.GroupRenameDetailsSerializer().deserialize(json)
                            return EventDetails.groupRenameDetails(v)
                        case "emm_login_success_details":
                            let v = TeamLog.EmmLoginSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.emmLoginSuccessDetails(v)
                        case "logout_details":
                            let v = TeamLog.LogoutDetailsSerializer().deserialize(json)
                            return EventDetails.logoutDetails(v)
                        case "password_login_fail_details":
                            let v = TeamLog.PasswordLoginFailDetailsSerializer().deserialize(json)
                            return EventDetails.passwordLoginFailDetails(v)
                        case "password_login_success_details":
                            let v = TeamLog.PasswordLoginSuccessDetailsSerializer().deserialize(json)
                            return EventDetails.passwordLoginSuccessDetails(v)
                        case "reseller_support_session_end_details":
                            let v = TeamLog.ResellerSupportSessionEndDetailsSerializer().deserialize(json)
                            return EventDetails.resellerSupportSessionEndDetails(v)
                        case "reseller_support_session_start_details":
                            let v = TeamLog.ResellerSupportSessionStartDetailsSerializer().deserialize(json)
                            return EventDetails.resellerSupportSessionStartDetails(v)
                        case "sign_in_as_session_end_details":
                            let v = TeamLog.SignInAsSessionEndDetailsSerializer().deserialize(json)
                            return EventDetails.signInAsSessionEndDetails(v)
                        case "sign_in_as_session_start_details":
                            let v = TeamLog.SignInAsSessionStartDetailsSerializer().deserialize(json)
                            return EventDetails.signInAsSessionStartDetails(v)
                        case "sso_login_fail_details":
                            let v = TeamLog.SsoLoginFailDetailsSerializer().deserialize(json)
                            return EventDetails.ssoLoginFailDetails(v)
                        case "member_add_name_details":
                            let v = TeamLog.MemberAddNameDetailsSerializer().deserialize(json)
                            return EventDetails.memberAddNameDetails(v)
                        case "member_change_admin_role_details":
                            let v = TeamLog.MemberChangeAdminRoleDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeAdminRoleDetails(v)
                        case "member_change_email_details":
                            let v = TeamLog.MemberChangeEmailDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeEmailDetails(v)
                        case "member_change_name_details":
                            let v = TeamLog.MemberChangeNameDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeNameDetails(v)
                        case "member_change_status_details":
                            let v = TeamLog.MemberChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.memberChangeStatusDetails(v)
                        case "member_suggest_details":
                            let v = TeamLog.MemberSuggestDetailsSerializer().deserialize(json)
                            return EventDetails.memberSuggestDetails(v)
                        case "paper_content_add_member_details":
                            let v = TeamLog.PaperContentAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentAddMemberDetails(v)
                        case "paper_content_add_to_folder_details":
                            let v = TeamLog.PaperContentAddToFolderDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentAddToFolderDetails(v)
                        case "paper_content_archive_details":
                            let v = TeamLog.PaperContentArchiveDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentArchiveDetails(v)
                        case "paper_content_create_details":
                            let v = TeamLog.PaperContentCreateDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentCreateDetails(v)
                        case "paper_content_permanently_delete_details":
                            let v = TeamLog.PaperContentPermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentPermanentlyDeleteDetails(v)
                        case "paper_content_remove_from_folder_details":
                            let v = TeamLog.PaperContentRemoveFromFolderDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRemoveFromFolderDetails(v)
                        case "paper_content_remove_member_details":
                            let v = TeamLog.PaperContentRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRemoveMemberDetails(v)
                        case "paper_content_rename_details":
                            let v = TeamLog.PaperContentRenameDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRenameDetails(v)
                        case "paper_content_restore_details":
                            let v = TeamLog.PaperContentRestoreDetailsSerializer().deserialize(json)
                            return EventDetails.paperContentRestoreDetails(v)
                        case "paper_doc_add_comment_details":
                            let v = TeamLog.PaperDocAddCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocAddCommentDetails(v)
                        case "paper_doc_change_member_role_details":
                            let v = TeamLog.PaperDocChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeMemberRoleDetails(v)
                        case "paper_doc_change_sharing_policy_details":
                            let v = TeamLog.PaperDocChangeSharingPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeSharingPolicyDetails(v)
                        case "paper_doc_change_subscription_details":
                            let v = TeamLog.PaperDocChangeSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocChangeSubscriptionDetails(v)
                        case "paper_doc_deleted_details":
                            let v = TeamLog.PaperDocDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDeletedDetails(v)
                        case "paper_doc_delete_comment_details":
                            let v = TeamLog.PaperDocDeleteCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDeleteCommentDetails(v)
                        case "paper_doc_download_details":
                            let v = TeamLog.PaperDocDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocDownloadDetails(v)
                        case "paper_doc_edit_details":
                            let v = TeamLog.PaperDocEditDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocEditDetails(v)
                        case "paper_doc_edit_comment_details":
                            let v = TeamLog.PaperDocEditCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocEditCommentDetails(v)
                        case "paper_doc_followed_details":
                            let v = TeamLog.PaperDocFollowedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocFollowedDetails(v)
                        case "paper_doc_mention_details":
                            let v = TeamLog.PaperDocMentionDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocMentionDetails(v)
                        case "paper_doc_request_access_details":
                            let v = TeamLog.PaperDocRequestAccessDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocRequestAccessDetails(v)
                        case "paper_doc_resolve_comment_details":
                            let v = TeamLog.PaperDocResolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocResolveCommentDetails(v)
                        case "paper_doc_revert_details":
                            let v = TeamLog.PaperDocRevertDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocRevertDetails(v)
                        case "paper_doc_slack_share_details":
                            let v = TeamLog.PaperDocSlackShareDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocSlackShareDetails(v)
                        case "paper_doc_team_invite_details":
                            let v = TeamLog.PaperDocTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocTeamInviteDetails(v)
                        case "paper_doc_trashed_details":
                            let v = TeamLog.PaperDocTrashedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocTrashedDetails(v)
                        case "paper_doc_unresolve_comment_details":
                            let v = TeamLog.PaperDocUnresolveCommentDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocUnresolveCommentDetails(v)
                        case "paper_doc_untrashed_details":
                            let v = TeamLog.PaperDocUntrashedDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocUntrashedDetails(v)
                        case "paper_doc_view_details":
                            let v = TeamLog.PaperDocViewDetailsSerializer().deserialize(json)
                            return EventDetails.paperDocViewDetails(v)
                        case "paper_folder_change_subscription_details":
                            let v = TeamLog.PaperFolderChangeSubscriptionDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderChangeSubscriptionDetails(v)
                        case "paper_folder_deleted_details":
                            let v = TeamLog.PaperFolderDeletedDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderDeletedDetails(v)
                        case "paper_folder_followed_details":
                            let v = TeamLog.PaperFolderFollowedDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderFollowedDetails(v)
                        case "paper_folder_team_invite_details":
                            let v = TeamLog.PaperFolderTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.paperFolderTeamInviteDetails(v)
                        case "password_change_details":
                            let v = TeamLog.PasswordChangeDetailsSerializer().deserialize(json)
                            return EventDetails.passwordChangeDetails(v)
                        case "password_reset_details":
                            let v = TeamLog.PasswordResetDetailsSerializer().deserialize(json)
                            return EventDetails.passwordResetDetails(v)
                        case "password_reset_all_details":
                            let v = TeamLog.PasswordResetAllDetailsSerializer().deserialize(json)
                            return EventDetails.passwordResetAllDetails(v)
                        case "emm_create_exceptions_report_details":
                            let v = TeamLog.EmmCreateExceptionsReportDetailsSerializer().deserialize(json)
                            return EventDetails.emmCreateExceptionsReportDetails(v)
                        case "emm_create_usage_report_details":
                            let v = TeamLog.EmmCreateUsageReportDetailsSerializer().deserialize(json)
                            return EventDetails.emmCreateUsageReportDetails(v)
                        case "smart_sync_create_admin_privilege_report_details":
                            let v = TeamLog.SmartSyncCreateAdminPrivilegeReportDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncCreateAdminPrivilegeReportDetails(v)
                        case "team_activity_create_report_details":
                            let v = TeamLog.TeamActivityCreateReportDetailsSerializer().deserialize(json)
                            return EventDetails.teamActivityCreateReportDetails(v)
                        case "collection_share_details":
                            let v = TeamLog.CollectionShareDetailsSerializer().deserialize(json)
                            return EventDetails.collectionShareDetails(v)
                        case "note_acl_invite_only_details":
                            let v = TeamLog.NoteAclInviteOnlyDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclInviteOnlyDetails(v)
                        case "note_acl_link_details":
                            let v = TeamLog.NoteAclLinkDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclLinkDetails(v)
                        case "note_acl_team_link_details":
                            let v = TeamLog.NoteAclTeamLinkDetailsSerializer().deserialize(json)
                            return EventDetails.noteAclTeamLinkDetails(v)
                        case "note_shared_details":
                            let v = TeamLog.NoteSharedDetailsSerializer().deserialize(json)
                            return EventDetails.noteSharedDetails(v)
                        case "note_share_receive_details":
                            let v = TeamLog.NoteShareReceiveDetailsSerializer().deserialize(json)
                            return EventDetails.noteShareReceiveDetails(v)
                        case "open_note_shared_details":
                            let v = TeamLog.OpenNoteSharedDetailsSerializer().deserialize(json)
                            return EventDetails.openNoteSharedDetails(v)
                        case "sf_add_group_details":
                            let v = TeamLog.SfAddGroupDetailsSerializer().deserialize(json)
                            return EventDetails.sfAddGroupDetails(v)
                        case "sf_allow_non_members_to_view_shared_links_details":
                            let v = TeamLog.SfAllowNonMembersToViewSharedLinksDetailsSerializer().deserialize(json)
                            return EventDetails.sfAllowNonMembersToViewSharedLinksDetails(v)
                        case "sf_invite_group_details":
                            let v = TeamLog.SfInviteGroupDetailsSerializer().deserialize(json)
                            return EventDetails.sfInviteGroupDetails(v)
                        case "sf_nest_details":
                            let v = TeamLog.SfNestDetailsSerializer().deserialize(json)
                            return EventDetails.sfNestDetails(v)
                        case "sf_team_decline_details":
                            let v = TeamLog.SfTeamDeclineDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamDeclineDetails(v)
                        case "sf_team_grant_access_details":
                            let v = TeamLog.SfTeamGrantAccessDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamGrantAccessDetails(v)
                        case "sf_team_invite_details":
                            let v = TeamLog.SfTeamInviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamInviteDetails(v)
                        case "sf_team_invite_change_role_details":
                            let v = TeamLog.SfTeamInviteChangeRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamInviteChangeRoleDetails(v)
                        case "sf_team_join_details":
                            let v = TeamLog.SfTeamJoinDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamJoinDetails(v)
                        case "sf_team_join_from_oob_link_details":
                            let v = TeamLog.SfTeamJoinFromOobLinkDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamJoinFromOobLinkDetails(v)
                        case "sf_team_uninvite_details":
                            let v = TeamLog.SfTeamUninviteDetailsSerializer().deserialize(json)
                            return EventDetails.sfTeamUninviteDetails(v)
                        case "shared_content_add_invitees_details":
                            let v = TeamLog.SharedContentAddInviteesDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddInviteesDetails(v)
                        case "shared_content_add_link_expiry_details":
                            let v = TeamLog.SharedContentAddLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddLinkExpiryDetails(v)
                        case "shared_content_add_link_password_details":
                            let v = TeamLog.SharedContentAddLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddLinkPasswordDetails(v)
                        case "shared_content_add_member_details":
                            let v = TeamLog.SharedContentAddMemberDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentAddMemberDetails(v)
                        case "shared_content_change_downloads_policy_details":
                            let v = TeamLog.SharedContentChangeDownloadsPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeDownloadsPolicyDetails(v)
                        case "shared_content_change_invitee_role_details":
                            let v = TeamLog.SharedContentChangeInviteeRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeInviteeRoleDetails(v)
                        case "shared_content_change_link_audience_details":
                            let v = TeamLog.SharedContentChangeLinkAudienceDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkAudienceDetails(v)
                        case "shared_content_change_link_expiry_details":
                            let v = TeamLog.SharedContentChangeLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkExpiryDetails(v)
                        case "shared_content_change_link_password_details":
                            let v = TeamLog.SharedContentChangeLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeLinkPasswordDetails(v)
                        case "shared_content_change_member_role_details":
                            let v = TeamLog.SharedContentChangeMemberRoleDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeMemberRoleDetails(v)
                        case "shared_content_change_viewer_info_policy_details":
                            let v = TeamLog.SharedContentChangeViewerInfoPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentChangeViewerInfoPolicyDetails(v)
                        case "shared_content_claim_invitation_details":
                            let v = TeamLog.SharedContentClaimInvitationDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentClaimInvitationDetails(v)
                        case "shared_content_copy_details":
                            let v = TeamLog.SharedContentCopyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentCopyDetails(v)
                        case "shared_content_download_details":
                            let v = TeamLog.SharedContentDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentDownloadDetails(v)
                        case "shared_content_relinquish_membership_details":
                            let v = TeamLog.SharedContentRelinquishMembershipDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRelinquishMembershipDetails(v)
                        case "shared_content_remove_invitee_details":
                            let v = TeamLog.SharedContentRemoveInviteeDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveInviteeDetails(v)
                        case "shared_content_remove_link_expiry_details":
                            let v = TeamLog.SharedContentRemoveLinkExpiryDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveLinkExpiryDetails(v)
                        case "shared_content_remove_link_password_details":
                            let v = TeamLog.SharedContentRemoveLinkPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveLinkPasswordDetails(v)
                        case "shared_content_remove_member_details":
                            let v = TeamLog.SharedContentRemoveMemberDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRemoveMemberDetails(v)
                        case "shared_content_request_access_details":
                            let v = TeamLog.SharedContentRequestAccessDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentRequestAccessDetails(v)
                        case "shared_content_unshare_details":
                            let v = TeamLog.SharedContentUnshareDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentUnshareDetails(v)
                        case "shared_content_view_details":
                            let v = TeamLog.SharedContentViewDetailsSerializer().deserialize(json)
                            return EventDetails.sharedContentViewDetails(v)
                        case "shared_folder_change_confidentiality_details":
                            let v = TeamLog.SharedFolderChangeConfidentialityDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeConfidentialityDetails(v)
                        case "shared_folder_change_link_policy_details":
                            let v = TeamLog.SharedFolderChangeLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeLinkPolicyDetails(v)
                        case "shared_folder_change_member_management_policy_details":
                            let v = TeamLog.SharedFolderChangeMemberManagementPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeMemberManagementPolicyDetails(v)
                        case "shared_folder_change_member_policy_details":
                            let v = TeamLog.SharedFolderChangeMemberPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderChangeMemberPolicyDetails(v)
                        case "shared_folder_create_details":
                            let v = TeamLog.SharedFolderCreateDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderCreateDetails(v)
                        case "shared_folder_mount_details":
                            let v = TeamLog.SharedFolderMountDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderMountDetails(v)
                        case "shared_folder_transfer_ownership_details":
                            let v = TeamLog.SharedFolderTransferOwnershipDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderTransferOwnershipDetails(v)
                        case "shared_folder_unmount_details":
                            let v = TeamLog.SharedFolderUnmountDetailsSerializer().deserialize(json)
                            return EventDetails.sharedFolderUnmountDetails(v)
                        case "shared_note_opened_details":
                            let v = TeamLog.SharedNoteOpenedDetailsSerializer().deserialize(json)
                            return EventDetails.sharedNoteOpenedDetails(v)
                        case "shmodel_app_create_details":
                            let v = TeamLog.ShmodelAppCreateDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelAppCreateDetails(v)
                        case "shmodel_create_details":
                            let v = TeamLog.ShmodelCreateDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelCreateDetails(v)
                        case "shmodel_disable_details":
                            let v = TeamLog.ShmodelDisableDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelDisableDetails(v)
                        case "shmodel_fb_share_details":
                            let v = TeamLog.ShmodelFbShareDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelFbShareDetails(v)
                        case "shmodel_group_share_details":
                            let v = TeamLog.ShmodelGroupShareDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelGroupShareDetails(v)
                        case "shmodel_remove_expiration_details":
                            let v = TeamLog.ShmodelRemoveExpirationDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelRemoveExpirationDetails(v)
                        case "shmodel_set_expiration_details":
                            let v = TeamLog.ShmodelSetExpirationDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelSetExpirationDetails(v)
                        case "shmodel_team_copy_details":
                            let v = TeamLog.ShmodelTeamCopyDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelTeamCopyDetails(v)
                        case "shmodel_team_download_details":
                            let v = TeamLog.ShmodelTeamDownloadDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelTeamDownloadDetails(v)
                        case "shmodel_team_share_details":
                            let v = TeamLog.ShmodelTeamShareDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelTeamShareDetails(v)
                        case "shmodel_team_view_details":
                            let v = TeamLog.ShmodelTeamViewDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelTeamViewDetails(v)
                        case "shmodel_visibility_password_details":
                            let v = TeamLog.ShmodelVisibilityPasswordDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelVisibilityPasswordDetails(v)
                        case "shmodel_visibility_public_details":
                            let v = TeamLog.ShmodelVisibilityPublicDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelVisibilityPublicDetails(v)
                        case "shmodel_visibility_team_only_details":
                            let v = TeamLog.ShmodelVisibilityTeamOnlyDetailsSerializer().deserialize(json)
                            return EventDetails.shmodelVisibilityTeamOnlyDetails(v)
                        case "sso_add_cert_details":
                            let v = TeamLog.SsoAddCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddCertDetails(v)
                        case "sso_add_login_url_details":
                            let v = TeamLog.SsoAddLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddLoginUrlDetails(v)
                        case "sso_add_logout_url_details":
                            let v = TeamLog.SsoAddLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoAddLogoutUrlDetails(v)
                        case "sso_change_cert_details":
                            let v = TeamLog.SsoChangeCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeCertDetails(v)
                        case "sso_change_login_url_details":
                            let v = TeamLog.SsoChangeLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeLoginUrlDetails(v)
                        case "sso_change_logout_url_details":
                            let v = TeamLog.SsoChangeLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeLogoutUrlDetails(v)
                        case "sso_change_saml_identity_mode_details":
                            let v = TeamLog.SsoChangeSamlIdentityModeDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangeSamlIdentityModeDetails(v)
                        case "sso_remove_cert_details":
                            let v = TeamLog.SsoRemoveCertDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveCertDetails(v)
                        case "sso_remove_login_url_details":
                            let v = TeamLog.SsoRemoveLoginUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveLoginUrlDetails(v)
                        case "sso_remove_logout_url_details":
                            let v = TeamLog.SsoRemoveLogoutUrlDetailsSerializer().deserialize(json)
                            return EventDetails.ssoRemoveLogoutUrlDetails(v)
                        case "team_folder_change_status_details":
                            let v = TeamLog.TeamFolderChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderChangeStatusDetails(v)
                        case "team_folder_create_details":
                            let v = TeamLog.TeamFolderCreateDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderCreateDetails(v)
                        case "team_folder_downgrade_details":
                            let v = TeamLog.TeamFolderDowngradeDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderDowngradeDetails(v)
                        case "team_folder_permanently_delete_details":
                            let v = TeamLog.TeamFolderPermanentlyDeleteDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderPermanentlyDeleteDetails(v)
                        case "team_folder_rename_details":
                            let v = TeamLog.TeamFolderRenameDetailsSerializer().deserialize(json)
                            return EventDetails.teamFolderRenameDetails(v)
                        case "account_capture_change_policy_details":
                            let v = TeamLog.AccountCaptureChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.accountCaptureChangePolicyDetails(v)
                        case "allow_download_disabled_details":
                            let v = TeamLog.AllowDownloadDisabledDetailsSerializer().deserialize(json)
                            return EventDetails.allowDownloadDisabledDetails(v)
                        case "allow_download_enabled_details":
                            let v = TeamLog.AllowDownloadEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.allowDownloadEnabledDetails(v)
                        case "data_placement_restriction_change_policy_details":
                            let v = TeamLog.DataPlacementRestrictionChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.dataPlacementRestrictionChangePolicyDetails(v)
                        case "data_placement_restriction_satisfy_policy_details":
                            let v = TeamLog.DataPlacementRestrictionSatisfyPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.dataPlacementRestrictionSatisfyPolicyDetails(v)
                        case "device_approvals_change_desktop_policy_details":
                            let v = TeamLog.DeviceApprovalsChangeDesktopPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeDesktopPolicyDetails(v)
                        case "device_approvals_change_mobile_policy_details":
                            let v = TeamLog.DeviceApprovalsChangeMobilePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeMobilePolicyDetails(v)
                        case "device_approvals_change_overage_action_details":
                            let v = TeamLog.DeviceApprovalsChangeOverageActionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeOverageActionDetails(v)
                        case "device_approvals_change_unlink_action_details":
                            let v = TeamLog.DeviceApprovalsChangeUnlinkActionDetailsSerializer().deserialize(json)
                            return EventDetails.deviceApprovalsChangeUnlinkActionDetails(v)
                        case "emm_add_exception_details":
                            let v = TeamLog.EmmAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.emmAddExceptionDetails(v)
                        case "emm_change_policy_details":
                            let v = TeamLog.EmmChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.emmChangePolicyDetails(v)
                        case "emm_remove_exception_details":
                            let v = TeamLog.EmmRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.emmRemoveExceptionDetails(v)
                        case "extended_version_history_change_policy_details":
                            let v = TeamLog.ExtendedVersionHistoryChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.extendedVersionHistoryChangePolicyDetails(v)
                        case "file_comments_change_policy_details":
                            let v = TeamLog.FileCommentsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.fileCommentsChangePolicyDetails(v)
                        case "file_requests_change_policy_details":
                            let v = TeamLog.FileRequestsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsChangePolicyDetails(v)
                        case "file_requests_emails_enabled_details":
                            let v = TeamLog.FileRequestsEmailsEnabledDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsEmailsEnabledDetails(v)
                        case "file_requests_emails_restricted_to_team_only_details":
                            let v = TeamLog.FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().deserialize(json)
                            return EventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails(v)
                        case "google_sso_change_policy_details":
                            let v = TeamLog.GoogleSsoChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.googleSsoChangePolicyDetails(v)
                        case "group_user_management_change_policy_details":
                            let v = TeamLog.GroupUserManagementChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.groupUserManagementChangePolicyDetails(v)
                        case "member_requests_change_policy_details":
                            let v = TeamLog.MemberRequestsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberRequestsChangePolicyDetails(v)
                        case "member_space_limits_add_exception_details":
                            let v = TeamLog.MemberSpaceLimitsAddExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsAddExceptionDetails(v)
                        case "member_space_limits_change_policy_details":
                            let v = TeamLog.MemberSpaceLimitsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsChangePolicyDetails(v)
                        case "member_space_limits_remove_exception_details":
                            let v = TeamLog.MemberSpaceLimitsRemoveExceptionDetailsSerializer().deserialize(json)
                            return EventDetails.memberSpaceLimitsRemoveExceptionDetails(v)
                        case "member_suggestions_change_policy_details":
                            let v = TeamLog.MemberSuggestionsChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.memberSuggestionsChangePolicyDetails(v)
                        case "microsoft_office_addin_change_policy_details":
                            let v = TeamLog.MicrosoftOfficeAddinChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.microsoftOfficeAddinChangePolicyDetails(v)
                        case "network_control_change_policy_details":
                            let v = TeamLog.NetworkControlChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.networkControlChangePolicyDetails(v)
                        case "paper_change_deployment_policy_details":
                            let v = TeamLog.PaperChangeDeploymentPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeDeploymentPolicyDetails(v)
                        case "paper_change_member_link_policy_details":
                            let v = TeamLog.PaperChangeMemberLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeMemberLinkPolicyDetails(v)
                        case "paper_change_member_policy_details":
                            let v = TeamLog.PaperChangeMemberPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangeMemberPolicyDetails(v)
                        case "paper_change_policy_details":
                            let v = TeamLog.PaperChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.paperChangePolicyDetails(v)
                        case "permanent_delete_change_policy_details":
                            let v = TeamLog.PermanentDeleteChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.permanentDeleteChangePolicyDetails(v)
                        case "sharing_change_folder_join_policy_details":
                            let v = TeamLog.SharingChangeFolderJoinPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeFolderJoinPolicyDetails(v)
                        case "sharing_change_link_policy_details":
                            let v = TeamLog.SharingChangeLinkPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeLinkPolicyDetails(v)
                        case "sharing_change_member_policy_details":
                            let v = TeamLog.SharingChangeMemberPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.sharingChangeMemberPolicyDetails(v)
                        case "smart_sync_change_policy_details":
                            let v = TeamLog.SmartSyncChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncChangePolicyDetails(v)
                        case "smart_sync_not_opt_out_details":
                            let v = TeamLog.SmartSyncNotOptOutDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncNotOptOutDetails(v)
                        case "smart_sync_opt_out_details":
                            let v = TeamLog.SmartSyncOptOutDetailsSerializer().deserialize(json)
                            return EventDetails.smartSyncOptOutDetails(v)
                        case "sso_change_policy_details":
                            let v = TeamLog.SsoChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.ssoChangePolicyDetails(v)
                        case "tfa_change_policy_details":
                            let v = TeamLog.TfaChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangePolicyDetails(v)
                        case "two_account_change_policy_details":
                            let v = TeamLog.TwoAccountChangePolicyDetailsSerializer().deserialize(json)
                            return EventDetails.twoAccountChangePolicyDetails(v)
                        case "web_sessions_change_fixed_length_policy_details":
                            let v = TeamLog.WebSessionsChangeFixedLengthPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.webSessionsChangeFixedLengthPolicyDetails(v)
                        case "web_sessions_change_idle_length_policy_details":
                            let v = TeamLog.WebSessionsChangeIdleLengthPolicyDetailsSerializer().deserialize(json)
                            return EventDetails.webSessionsChangeIdleLengthPolicyDetails(v)
                        case "team_profile_add_logo_details":
                            let v = TeamLog.TeamProfileAddLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileAddLogoDetails(v)
                        case "team_profile_change_default_language_details":
                            let v = TeamLog.TeamProfileChangeDefaultLanguageDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeDefaultLanguageDetails(v)
                        case "team_profile_change_logo_details":
                            let v = TeamLog.TeamProfileChangeLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeLogoDetails(v)
                        case "team_profile_change_name_details":
                            let v = TeamLog.TeamProfileChangeNameDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileChangeNameDetails(v)
                        case "team_profile_remove_logo_details":
                            let v = TeamLog.TeamProfileRemoveLogoDetailsSerializer().deserialize(json)
                            return EventDetails.teamProfileRemoveLogoDetails(v)
                        case "tfa_add_backup_phone_details":
                            let v = TeamLog.TfaAddBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaAddBackupPhoneDetails(v)
                        case "tfa_add_security_key_details":
                            let v = TeamLog.TfaAddSecurityKeyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaAddSecurityKeyDetails(v)
                        case "tfa_change_backup_phone_details":
                            let v = TeamLog.TfaChangeBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangeBackupPhoneDetails(v)
                        case "tfa_change_status_details":
                            let v = TeamLog.TfaChangeStatusDetailsSerializer().deserialize(json)
                            return EventDetails.tfaChangeStatusDetails(v)
                        case "tfa_remove_backup_phone_details":
                            let v = TeamLog.TfaRemoveBackupPhoneDetailsSerializer().deserialize(json)
                            return EventDetails.tfaRemoveBackupPhoneDetails(v)
                        case "tfa_remove_security_key_details":
                            let v = TeamLog.TfaRemoveSecurityKeyDetailsSerializer().deserialize(json)
                            return EventDetails.tfaRemoveSecurityKeyDetails(v)
                        case "tfa_reset_details":
                            let v = TeamLog.TfaResetDetailsSerializer().deserialize(json)
                            return EventDetails.tfaResetDetails(v)
                        case "missing_details":
                            let v = TeamLog.MissingDetailsSerializer().deserialize(json)
                            return EventDetails.missingDetails(v)
                        case "other":
                            return EventDetails.other
                        default:
                            return EventDetails.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The type of the event.
    public enum EventType: CustomStringConvertible {
        /// Changed the membership type (limited vs full) for team member.
        case memberChangeMembershipType
        /// Permanently deleted contents of a removed team member account.
        case memberPermanentlyDeleteAccountContents
        /// Changed the status with respect to whether the team member is under or over storage quota specified by
        /// policy.
        case memberSpaceLimitsChangeStatus
        /// Transferred contents of a removed team member account to another member.
        case memberTransferAccountContents
        /// Exported all Paper documents in the team.
        case paperAdminExportStart
        /// Users added to Paper enabled users list.
        case paperEnabledUsersGroupAddition
        /// Users removed from Paper enabled users list.
        case paperEnabledUsersGroupRemoval
        /// Paper external sharing policy changed: anyone. This event is deprecated and will not be logged going forward
        /// as the associated product functionality no longer exists.
        case paperExternalViewAllow
        /// Paper external sharing policy changed: default team. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case paperExternalViewDefaultTeam
        /// Paper external sharing policy changed: team-only. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case paperExternalViewForbid
        /// Admin settings: team members see a warning before sharing folders outside the team (DEPRECATED FEATURE).
        /// This event is deprecated and will not be logged going forward as the associated product functionality no
        /// longer exists.
        case sfExternalInviteWarn
        /// Merged another team into this team.
        case teamMergeFrom
        /// Merged this team into another team.
        case teamMergeTo
        /// Linked an app for team.
        case appLinkTeam
        /// Linked an app for team member.
        case appLinkUser
        /// Unlinked an app for team.
        case appUnlinkTeam
        /// Unlinked an app for team member.
        case appUnlinkUser
        /// Added a file comment.
        case fileAddComment
        /// Subscribed to or unsubscribed from comment notifications for file.
        case fileChangeCommentSubscription
        /// Deleted a file comment.
        case fileDeleteComment
        /// Liked a file comment. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case fileLikeComment
        /// Resolved a file comment.
        case fileResolveComment
        /// Unliked a file comment. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case fileUnlikeComment
        /// Unresolved a file comment.
        case fileUnresolveComment
        /// IP address associated with active desktop session changed.
        case deviceChangeIpDesktop
        /// IP address associated with active mobile session changed.
        case deviceChangeIpMobile
        /// IP address associated with active Web session changed.
        case deviceChangeIpWeb
        /// Failed to delete all files from an unlinked device.
        case deviceDeleteOnUnlinkFail
        /// Deleted all files from an unlinked device.
        case deviceDeleteOnUnlinkSuccess
        /// Failed to link a device.
        case deviceLinkFail
        /// Linked a device.
        case deviceLinkSuccess
        /// Disable Device Management. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case deviceManagementDisabled
        /// Enable Device Management. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case deviceManagementEnabled
        /// Disconnected a device.
        case deviceUnlink
        /// Refreshed the auth token used for setting up enterprise mobility management.
        case emmRefreshAuthToken
        /// Granted or revoked the option to enable account capture on domains belonging to the team.
        case accountCaptureChangeAvailability
        /// Account captured user migrated their account to the team.
        case accountCaptureMigrateAccount
        /// Account captured user relinquished their account by changing the email address associated with it.
        case accountCaptureRelinquishAccount
        /// Disabled domain invites. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case disabledDomainInvites
        /// Approved a member's request to join the team.
        case domainInvitesApproveRequestToJoinTeam
        /// Declined a user's request to join the team.
        case domainInvitesDeclineRequestToJoinTeam
        /// Sent domain invites to existing domain accounts.
        case domainInvitesEmailExistingUsers
        /// Asked to join the team.
        case domainInvitesRequestToJoinTeam
        /// Turned off u201cAutomatically invite new usersu201d. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case domainInvitesSetInviteNewUserPrefToNo
        /// Turned on u201cAutomatically invite new usersu201d. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case domainInvitesSetInviteNewUserPrefToYes
        /// Failed to verify a domain belonging to the team.
        case domainVerificationAddDomainFail
        /// Verified a domain belonging to the team.
        case domainVerificationAddDomainSuccess
        /// Removed a domain from the list of verified domains belonging to the team.
        case domainVerificationRemoveDomain
        /// Enabled domain invites. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case enabledDomainInvites
        /// Created folders. This event is deprecated and will not be logged going forward as the associated product
        /// functionality no longer exists.
        case createFolder
        /// Added files and/or folders.
        case fileAdd
        /// Copied files and/or folders.
        case fileCopy
        /// Deleted files and/or folders.
        case fileDelete
        /// Downloaded files and/or folders.
        case fileDownload
        /// Edited files.
        case fileEdit
        /// Create a copy reference to a file or folder.
        case fileGetCopyReference
        /// Moved files and/or folders.
        case fileMove
        /// Permanently deleted files and/or folders.
        case filePermanentlyDelete
        /// Previewed files and/or folders.
        case filePreview
        /// Renamed files and/or folders.
        case fileRename
        /// Restored deleted files and/or folders.
        case fileRestore
        /// Reverted files to a previous version.
        case fileRevert
        /// Rolled back file change location changes.
        case fileRollbackChanges
        /// Save a file or folder using a copy reference.
        case fileSaveCopyReference
        /// Added a deadline to a file request.
        case fileRequestAddDeadline
        /// Changed the file request folder.
        case fileRequestChangeFolder
        /// Change the file request title.
        case fileRequestChangeTitle
        /// Closed a file request.
        case fileRequestClose
        /// Created a file request.
        case fileRequestCreate
        /// Received files for a file request.
        case fileRequestReceiveFile
        /// Removed the file request deadline.
        case fileRequestRemoveDeadline
        /// Sent file request to users via email.
        case fileRequestSend
        /// Added an external ID for group.
        case groupAddExternalId
        /// Added team members to a group.
        case groupAddMember
        /// Changed the external ID for group.
        case groupChangeExternalId
        /// Changed group management type.
        case groupChangeManagementType
        /// Changed the manager permissions belonging to a group member.
        case groupChangeMemberRole
        /// Created a group.
        case groupCreate
        /// Deleted a group.
        case groupDelete
        /// Moved a group. This event is deprecated and will not be logged going forward as the associated product
        /// functionality no longer exists.
        case groupMoved
        /// Removed the external ID for group.
        case groupRemoveExternalId
        /// Removed team members from a group.
        case groupRemoveMember
        /// Renamed a group.
        case groupRename
        /// Signed in using the Dropbox EMM app.
        case emmLoginSuccess
        /// Signed out.
        case logout
        /// Failed to sign in using a password.
        case passwordLoginFail
        /// Signed in using a password.
        case passwordLoginSuccess
        /// Ended reseller support session.
        case resellerSupportSessionEnd
        /// Started reseller support session.
        case resellerSupportSessionStart
        /// Ended admin sign-in-as session.
        case signInAsSessionEnd
        /// Started admin sign-in-as session.
        case signInAsSessionStart
        /// Failed to sign in using SSO.
        case ssoLoginFail
        /// Set team member name when joining team.
        case memberAddName
        /// Change the admin role belonging to team member.
        case memberChangeAdminRole
        /// Changed team member email address.
        case memberChangeEmail
        /// Changed team member name.
        case memberChangeName
        /// Changed the membership status of a team member.
        case memberChangeStatus
        /// Suggested a new team member to be added to the team.
        case memberSuggest
        /// Added users to the membership of a Paper doc or folder.
        case paperContentAddMember
        /// Added Paper doc or folder to a folder.
        case paperContentAddToFolder
        /// Archived Paper doc or folder.
        case paperContentArchive
        /// Created a Paper doc or folder.
        case paperContentCreate
        /// Permanently deleted a Paper doc or folder.
        case paperContentPermanentlyDelete
        /// Removed Paper doc or folder from a folder.
        case paperContentRemoveFromFolder
        /// Removed a user from the membership of a Paper doc or folder.
        case paperContentRemoveMember
        /// Renamed Paper doc or folder.
        case paperContentRename
        /// Restored an archived Paper doc or folder.
        case paperContentRestore
        /// Added a Paper doc comment.
        case paperDocAddComment
        /// Changed the access type of a Paper doc member.
        case paperDocChangeMemberRole
        /// Changed the sharing policy for Paper doc.
        case paperDocChangeSharingPolicy
        /// Followed or unfollowed a Paper doc.
        case paperDocChangeSubscription
        /// Paper doc archived. This event is deprecated and will not be logged going forward as the associated product
        /// functionality no longer exists.
        case paperDocDeleted
        /// Deleted a Paper doc comment.
        case paperDocDeleteComment
        /// Downloaded a Paper doc in a particular output format.
        case paperDocDownload
        /// Edited a Paper doc.
        case paperDocEdit
        /// Edited a Paper doc comment.
        case paperDocEditComment
        /// Followed a Paper doc. This event is replaced by paper_doc_change_subscription and will not be logged going
        /// forward.
        case paperDocFollowed
        /// Mentioned a member in a Paper doc.
        case paperDocMention
        /// Requested to be a member on a Paper doc.
        case paperDocRequestAccess
        /// Paper doc comment resolved.
        case paperDocResolveComment
        /// Restored a Paper doc to previous revision.
        case paperDocRevert
        /// Paper doc link shared via slack.
        case paperDocSlackShare
        /// Paper doc shared with team member. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case paperDocTeamInvite
        /// Paper doc trashed.
        case paperDocTrashed
        /// Unresolved a Paper doc comment.
        case paperDocUnresolveComment
        /// Paper doc untrashed.
        case paperDocUntrashed
        /// Viewed Paper doc.
        case paperDocView
        /// Followed or unfollowed a Paper folder.
        case paperFolderChangeSubscription
        /// Paper folder archived. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case paperFolderDeleted
        /// Followed a Paper folder. This event is replaced by paper_folder_change_subscription and will not be logged
        /// going forward.
        case paperFolderFollowed
        /// Paper folder shared with team member. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case paperFolderTeamInvite
        /// Changed password.
        case passwordChange
        /// Reset password.
        case passwordReset
        /// Reset all team member passwords.
        case passwordResetAll
        /// EMM excluded users report created.
        case emmCreateExceptionsReport
        /// EMM mobile app usage report created.
        case emmCreateUsageReport
        /// Smart Sync non-admin devices report created.
        case smartSyncCreateAdminPrivilegeReport
        /// Created a team activity report.
        case teamActivityCreateReport
        /// Shared an album.
        case collectionShare
        /// Changed a Paper document to be invite-only. This event is deprecated and will not be logged going forward as
        /// the associated product functionality no longer exists.
        case noteAclInviteOnly
        /// Changed a Paper document to be link accessible. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case noteAclLink
        /// Changed a Paper document to be link accessible for the team. This event is deprecated and will not be logged
        /// going forward as the associated product functionality no longer exists.
        case noteAclTeamLink
        /// Shared a Paper doc. This event is deprecated and will not be logged going forward as the associated product
        /// functionality no longer exists.
        case noteShared
        /// Shared Paper document received. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case noteShareReceive
        /// Opened a shared Paper doc. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case openNoteShared
        /// Added the team to a shared folder.
        case sfAddGroup
        /// Allowed non collaborators to view links to files in a shared folder. This event is deprecated and will not
        /// be logged going forward as the associated product functionality no longer exists.
        case sfAllowNonMembersToViewSharedLinks
        /// Invited a group to a shared folder. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case sfInviteGroup
        /// Changed parent of shared folder.
        case sfNest
        /// Declined a team member's invitation to a shared folder.
        case sfTeamDecline
        /// Granted access to a shared folder. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case sfTeamGrantAccess
        /// Invited team members to a shared folder. This event is deprecated and will not be logged going forward as
        /// the associated product functionality no longer exists.
        case sfTeamInvite
        /// Changed a team member's role in a shared folder. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case sfTeamInviteChangeRole
        /// Joined a team member's shared folder. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case sfTeamJoin
        /// Joined a team member's shared folder from a link. This event is deprecated and will not be logged going
        /// forward as the associated product functionality no longer exists.
        case sfTeamJoinFromOobLink
        /// Unshared a folder with a team member. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case sfTeamUninvite
        /// Sent an email invitation to the membership of a shared file or folder.
        case sharedContentAddInvitees
        /// Added an expiry to the link for the shared file or folder.
        case sharedContentAddLinkExpiry
        /// Added a password to the link for the shared file or folder.
        case sharedContentAddLinkPassword
        /// Added users and/or groups to the membership of a shared file or folder.
        case sharedContentAddMember
        /// Changed whether members can download the shared file or folder.
        case sharedContentChangeDownloadsPolicy
        /// Changed the access type of an invitee to a shared file or folder before the invitation was claimed.
        case sharedContentChangeInviteeRole
        /// Changed the audience of the link for a shared file or folder.
        case sharedContentChangeLinkAudience
        /// Changed the expiry of the link for the shared file or folder.
        case sharedContentChangeLinkExpiry
        /// Changed the password on the link for the shared file or folder.
        case sharedContentChangeLinkPassword
        /// Changed the access type of a shared file or folder member.
        case sharedContentChangeMemberRole
        /// Changed whether members can see who viewed the shared file or folder.
        case sharedContentChangeViewerInfoPolicy
        /// Claimed membership to a team member's shared folder.
        case sharedContentClaimInvitation
        /// Copied the shared file or folder to own Dropbox.
        case sharedContentCopy
        /// Downloaded the shared file or folder.
        case sharedContentDownload
        /// Left the membership of a shared file or folder.
        case sharedContentRelinquishMembership
        /// Removed an invitee from the membership of a shared file or folder before it was claimed.
        case sharedContentRemoveInvitee
        /// Removed the expiry of the link for the shared file or folder.
        case sharedContentRemoveLinkExpiry
        /// Removed the password on the link for the shared file or folder.
        case sharedContentRemoveLinkPassword
        /// Removed a user or a group from the membership of a shared file or folder.
        case sharedContentRemoveMember
        /// Requested to be on the membership of a shared file or folder.
        case sharedContentRequestAccess
        /// Unshared a shared file or folder by clearing its membership and turning off its link.
        case sharedContentUnshare
        /// Previewed the shared file or folder.
        case sharedContentView
        /// Set or unset the confidential flag on a shared folder.
        case sharedFolderChangeConfidentiality
        /// Changed who can access the shared folder via a link.
        case sharedFolderChangeLinkPolicy
        /// Changed who can manage the membership of a shared folder.
        case sharedFolderChangeMemberManagementPolicy
        /// Changed who can become a member of the shared folder.
        case sharedFolderChangeMemberPolicy
        /// Created a shared folder.
        case sharedFolderCreate
        /// Added a shared folder to own Dropbox.
        case sharedFolderMount
        /// Transferred the ownership of a shared folder to another member.
        case sharedFolderTransferOwnership
        /// Deleted a shared folder from Dropbox.
        case sharedFolderUnmount
        /// Shared Paper document was opened. This event is deprecated and will not be logged going forward as the
        /// associated product functionality no longer exists.
        case sharedNoteOpened
        /// Created a link to a file using an app.
        case shmodelAppCreate
        /// Created a new link.
        case shmodelCreate
        /// Removed a link.
        case shmodelDisable
        /// Shared a link with Facebook users.
        case shmodelFbShare
        /// Shared a link with a group. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case shmodelGroupShare
        /// Removed the expiration date from a link.
        case shmodelRemoveExpiration
        /// Added an expiration date to a link.
        case shmodelSetExpiration
        /// Added a team member's file/folder to their Dropbox from a link.
        case shmodelTeamCopy
        /// Downloaded a team member's file/folder from a link.
        case shmodelTeamDownload
        /// Shared a link with team members.
        case shmodelTeamShare
        /// Opened a team member's link.
        case shmodelTeamView
        /// Password-protected a link.
        case shmodelVisibilityPassword
        /// Made a file/folder visible to anyone with the link.
        case shmodelVisibilityPublic
        /// Made a file/folder visible only to team members with the link.
        case shmodelVisibilityTeamOnly
        /// Added the X.509 certificate for SSO.
        case ssoAddCert
        /// Added sign-in URL for SSO.
        case ssoAddLoginUrl
        /// Added sign-out URL for SSO.
        case ssoAddLogoutUrl
        /// Changed the X.509 certificate for SSO.
        case ssoChangeCert
        /// Changed the sign-in URL for SSO.
        case ssoChangeLoginUrl
        /// Changed the sign-out URL for SSO.
        case ssoChangeLogoutUrl
        /// Changed the SAML identity mode for SSO.
        case ssoChangeSamlIdentityMode
        /// Removed the X.509 certificate for SSO.
        case ssoRemoveCert
        /// Removed the sign-in URL for SSO.
        case ssoRemoveLoginUrl
        /// Removed single sign-on logout URL.
        case ssoRemoveLogoutUrl
        /// Changed the archival status of a team folder.
        case teamFolderChangeStatus
        /// Created a new team folder in active status.
        case teamFolderCreate
        /// Downgraded a team folder to a regular shared folder.
        case teamFolderDowngrade
        /// Permanently deleted an archived team folder.
        case teamFolderPermanentlyDelete
        /// Renamed an active or archived team folder.
        case teamFolderRename
        /// Changed the account capture policy on a domain belonging to the team.
        case accountCaptureChangePolicy
        /// Disabled allow downloads. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case allowDownloadDisabled
        /// Enabled allow downloads. This event is deprecated and will not be logged going forward as the associated
        /// product functionality no longer exists.
        case allowDownloadEnabled
        /// Set a restriction policy regarding the location of data centers where team data resides.
        case dataPlacementRestrictionChangePolicy
        /// Satisfied a previously set restriction policy regarding the location of data centers where team data resides
        /// (i.e. all data have been migrated according to the restriction placed).
        case dataPlacementRestrictionSatisfyPolicy
        /// Set or removed a limit on the number of computers each team member can link to their work Dropbox account.
        case deviceApprovalsChangeDesktopPolicy
        /// Set or removed a limit on the number of mobiles devices each team member can link to their work Dropbox
        /// account.
        case deviceApprovalsChangeMobilePolicy
        /// Changed the action taken when a team member is already over the limits (e.g when they join the team, an
        /// admin lowers limits, etc.).
        case deviceApprovalsChangeOverageAction
        /// Changed the action taken with respect to approval limits when a team member unlinks an approved device.
        case deviceApprovalsChangeUnlinkAction
        /// Added an exception for one or more team members to optionally use the regular Dropbox app when EMM is
        /// enabled.
        case emmAddException
        /// Enabled or disabled enterprise mobility management for team members.
        case emmChangePolicy
        /// Removed an exception for one or more team members to optionally use the regular Dropbox app when EMM is
        /// enabled.
        case emmRemoveException
        /// Accepted or opted out of extended version history.
        case extendedVersionHistoryChangePolicy
        /// Enabled or disabled commenting on team files.
        case fileCommentsChangePolicy
        /// Enabled or disabled file requests.
        case fileRequestsChangePolicy
        /// Enabled file request emails for everyone. This event is deprecated and will not be logged going forward as
        /// the associated product functionality no longer exists.
        case fileRequestsEmailsEnabled
        /// Allowed file request emails for the team. This event is deprecated and will not be logged going forward as
        /// the associated product functionality no longer exists.
        case fileRequestsEmailsRestrictedToTeamOnly
        /// Enabled or disabled Google single sign-on for the team.
        case googleSsoChangePolicy
        /// Changed who can create groups.
        case groupUserManagementChangePolicy
        /// Changed whether users can find the team when not invited.
        case memberRequestsChangePolicy
        /// Added an exception for one or more team members to bypass space limits imposed by policy.
        case memberSpaceLimitsAddException
        /// Changed the storage limits applied to team members by policy.
        case memberSpaceLimitsChangePolicy
        /// Removed an exception for one or more team members to bypass space limits imposed by policy.
        case memberSpaceLimitsRemoveException
        /// Enabled or disabled the option for team members to suggest new members to add to the team.
        case memberSuggestionsChangePolicy
        /// Enabled or disabled the Microsoft Office add-in, which lets team members save files to Dropbox directly from
        /// Microsoft Office.
        case microsoftOfficeAddinChangePolicy
        /// Enabled or disabled network control.
        case networkControlChangePolicy
        /// Changed whether Dropbox Paper, when enabled, is deployed to all teams or to specific members of the team.
        case paperChangeDeploymentPolicy
        /// Changed whether non team members can view Paper documents using a link. This event is deprecated and will
        /// not be logged going forward as the associated product functionality no longer exists.
        case paperChangeMemberLinkPolicy
        /// Changed whether team members can share Paper documents externally (i.e. outside the team), and if so,
        /// whether they should be accessible only by team members or anyone by default.
        case paperChangeMemberPolicy
        /// Enabled or disabled Dropbox Paper for the team.
        case paperChangePolicy
        /// Enabled or disabled the ability of team members to permanently delete content.
        case permanentDeleteChangePolicy
        /// Changed whether team members can join shared folders owned externally (i.e. outside the team).
        case sharingChangeFolderJoinPolicy
        /// Changed whether team members can share links externally (i.e. outside the team), and if so, whether links
        /// should be accessible only by team members or anyone by default.
        case sharingChangeLinkPolicy
        /// Changed whether team members can share files and folders externally (i.e. outside the team).
        case sharingChangeMemberPolicy
        /// Changed the default Smart Sync policy for team members.
        case smartSyncChangePolicy
        /// Opted team into Smart Sync.
        case smartSyncNotOptOut
        /// Opted team out of Smart Sync.
        case smartSyncOptOut
        /// Change the single sign-on policy for the team.
        case ssoChangePolicy
        /// Change two-step verification policy for the team.
        case tfaChangePolicy
        /// Enabled or disabled the option for team members to link a personal Dropbox account in addition to their work
        /// account to the same computer.
        case twoAccountChangePolicy
        /// Changed how long team members can stay signed in to Dropbox on the web.
        case webSessionsChangeFixedLengthPolicy
        /// Changed how long team members can be idle while signed in to Dropbox on the web.
        case webSessionsChangeIdleLengthPolicy
        /// Added a team logo to be displayed on shared link headers.
        case teamProfileAddLogo
        /// Changed the default language for the team.
        case teamProfileChangeDefaultLanguage
        /// Changed the team logo to be displayed on shared link headers.
        case teamProfileChangeLogo
        /// Changed the team name.
        case teamProfileChangeName
        /// Removed the team logo to be displayed on shared link headers.
        case teamProfileRemoveLogo
        /// Added a backup phone for two-step verification.
        case tfaAddBackupPhone
        /// Added a security key for two-step verification.
        case tfaAddSecurityKey
        /// Changed the backup phone for two-step verification.
        case tfaChangeBackupPhone
        /// Enabled, disabled or changed the configuration for two-step verification.
        case tfaChangeStatus
        /// Removed the backup phone for two-step verification.
        case tfaRemoveBackupPhone
        /// Removed a security key for two-step verification.
        case tfaRemoveSecurityKey
        /// Reset two-step verification for team member.
        case tfaReset
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(EventTypeSerializer().serialize(self)))"
        }
    }
    open class EventTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: EventType) -> JSON {
            switch value {
                case .memberChangeMembershipType:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_membership_type")
                    return .dictionary(d)
                case .memberPermanentlyDeleteAccountContents:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_permanently_delete_account_contents")
                    return .dictionary(d)
                case .memberSpaceLimitsChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_status")
                    return .dictionary(d)
                case .memberTransferAccountContents:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_transfer_account_contents")
                    return .dictionary(d)
                case .paperAdminExportStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_admin_export_start")
                    return .dictionary(d)
                case .paperEnabledUsersGroupAddition:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_enabled_users_group_addition")
                    return .dictionary(d)
                case .paperEnabledUsersGroupRemoval:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_enabled_users_group_removal")
                    return .dictionary(d)
                case .paperExternalViewAllow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_allow")
                    return .dictionary(d)
                case .paperExternalViewDefaultTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_default_team")
                    return .dictionary(d)
                case .paperExternalViewForbid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_external_view_forbid")
                    return .dictionary(d)
                case .sfExternalInviteWarn:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_external_invite_warn")
                    return .dictionary(d)
                case .teamMergeFrom:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_from")
                    return .dictionary(d)
                case .teamMergeTo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_merge_to")
                    return .dictionary(d)
                case .appLinkTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_link_team")
                    return .dictionary(d)
                case .appLinkUser:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_link_user")
                    return .dictionary(d)
                case .appUnlinkTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_unlink_team")
                    return .dictionary(d)
                case .appUnlinkUser:
                    var d = [String: JSON]()
                    d[".tag"] = .str("app_unlink_user")
                    return .dictionary(d)
                case .fileAddComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_add_comment")
                    return .dictionary(d)
                case .fileChangeCommentSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_change_comment_subscription")
                    return .dictionary(d)
                case .fileDeleteComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_delete_comment")
                    return .dictionary(d)
                case .fileLikeComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_like_comment")
                    return .dictionary(d)
                case .fileResolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_resolve_comment")
                    return .dictionary(d)
                case .fileUnlikeComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_unlike_comment")
                    return .dictionary(d)
                case .fileUnresolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_unresolve_comment")
                    return .dictionary(d)
                case .deviceChangeIpDesktop:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_desktop")
                    return .dictionary(d)
                case .deviceChangeIpMobile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_mobile")
                    return .dictionary(d)
                case .deviceChangeIpWeb:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_change_ip_web")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_delete_on_unlink_fail")
                    return .dictionary(d)
                case .deviceDeleteOnUnlinkSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_delete_on_unlink_success")
                    return .dictionary(d)
                case .deviceLinkFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_link_fail")
                    return .dictionary(d)
                case .deviceLinkSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_link_success")
                    return .dictionary(d)
                case .deviceManagementDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_management_disabled")
                    return .dictionary(d)
                case .deviceManagementEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_management_enabled")
                    return .dictionary(d)
                case .deviceUnlink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_unlink")
                    return .dictionary(d)
                case .emmRefreshAuthToken:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_refresh_auth_token")
                    return .dictionary(d)
                case .accountCaptureChangeAvailability:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_change_availability")
                    return .dictionary(d)
                case .accountCaptureMigrateAccount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_migrate_account")
                    return .dictionary(d)
                case .accountCaptureRelinquishAccount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_relinquish_account")
                    return .dictionary(d)
                case .disabledDomainInvites:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled_domain_invites")
                    return .dictionary(d)
                case .domainInvitesApproveRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_approve_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesDeclineRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_decline_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesEmailExistingUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_email_existing_users")
                    return .dictionary(d)
                case .domainInvitesRequestToJoinTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_request_to_join_team")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToNo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_no")
                    return .dictionary(d)
                case .domainInvitesSetInviteNewUserPrefToYes:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_invites_set_invite_new_user_pref_to_yes")
                    return .dictionary(d)
                case .domainVerificationAddDomainFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_add_domain_fail")
                    return .dictionary(d)
                case .domainVerificationAddDomainSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_add_domain_success")
                    return .dictionary(d)
                case .domainVerificationRemoveDomain:
                    var d = [String: JSON]()
                    d[".tag"] = .str("domain_verification_remove_domain")
                    return .dictionary(d)
                case .enabledDomainInvites:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled_domain_invites")
                    return .dictionary(d)
                case .createFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("create_folder")
                    return .dictionary(d)
                case .fileAdd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_add")
                    return .dictionary(d)
                case .fileCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_copy")
                    return .dictionary(d)
                case .fileDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_delete")
                    return .dictionary(d)
                case .fileDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_download")
                    return .dictionary(d)
                case .fileEdit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_edit")
                    return .dictionary(d)
                case .fileGetCopyReference:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_get_copy_reference")
                    return .dictionary(d)
                case .fileMove:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_move")
                    return .dictionary(d)
                case .filePermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_permanently_delete")
                    return .dictionary(d)
                case .filePreview:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_preview")
                    return .dictionary(d)
                case .fileRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_rename")
                    return .dictionary(d)
                case .fileRestore:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_restore")
                    return .dictionary(d)
                case .fileRevert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_revert")
                    return .dictionary(d)
                case .fileRollbackChanges:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_rollback_changes")
                    return .dictionary(d)
                case .fileSaveCopyReference:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_save_copy_reference")
                    return .dictionary(d)
                case .fileRequestAddDeadline:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_add_deadline")
                    return .dictionary(d)
                case .fileRequestChangeFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_change_folder")
                    return .dictionary(d)
                case .fileRequestChangeTitle:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_change_title")
                    return .dictionary(d)
                case .fileRequestClose:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_close")
                    return .dictionary(d)
                case .fileRequestCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_create")
                    return .dictionary(d)
                case .fileRequestReceiveFile:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_receive_file")
                    return .dictionary(d)
                case .fileRequestRemoveDeadline:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_remove_deadline")
                    return .dictionary(d)
                case .fileRequestSend:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_request_send")
                    return .dictionary(d)
                case .groupAddExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_add_external_id")
                    return .dictionary(d)
                case .groupAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_add_member")
                    return .dictionary(d)
                case .groupChangeExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_external_id")
                    return .dictionary(d)
                case .groupChangeManagementType:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_management_type")
                    return .dictionary(d)
                case .groupChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_change_member_role")
                    return .dictionary(d)
                case .groupCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_create")
                    return .dictionary(d)
                case .groupDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_delete")
                    return .dictionary(d)
                case .groupMoved:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_moved")
                    return .dictionary(d)
                case .groupRemoveExternalId:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_remove_external_id")
                    return .dictionary(d)
                case .groupRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_remove_member")
                    return .dictionary(d)
                case .groupRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_rename")
                    return .dictionary(d)
                case .emmLoginSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_login_success")
                    return .dictionary(d)
                case .logout:
                    var d = [String: JSON]()
                    d[".tag"] = .str("logout")
                    return .dictionary(d)
                case .passwordLoginFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_login_fail")
                    return .dictionary(d)
                case .passwordLoginSuccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_login_success")
                    return .dictionary(d)
                case .resellerSupportSessionEnd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_support_session_end")
                    return .dictionary(d)
                case .resellerSupportSessionStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("reseller_support_session_start")
                    return .dictionary(d)
                case .signInAsSessionEnd:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sign_in_as_session_end")
                    return .dictionary(d)
                case .signInAsSessionStart:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sign_in_as_session_start")
                    return .dictionary(d)
                case .ssoLoginFail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_login_fail")
                    return .dictionary(d)
                case .memberAddName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_add_name")
                    return .dictionary(d)
                case .memberChangeAdminRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_admin_role")
                    return .dictionary(d)
                case .memberChangeEmail:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_email")
                    return .dictionary(d)
                case .memberChangeName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_name")
                    return .dictionary(d)
                case .memberChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_change_status")
                    return .dictionary(d)
                case .memberSuggest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_suggest")
                    return .dictionary(d)
                case .paperContentAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_add_member")
                    return .dictionary(d)
                case .paperContentAddToFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_add_to_folder")
                    return .dictionary(d)
                case .paperContentArchive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_archive")
                    return .dictionary(d)
                case .paperContentCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_create")
                    return .dictionary(d)
                case .paperContentPermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_permanently_delete")
                    return .dictionary(d)
                case .paperContentRemoveFromFolder:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_remove_from_folder")
                    return .dictionary(d)
                case .paperContentRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_remove_member")
                    return .dictionary(d)
                case .paperContentRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_rename")
                    return .dictionary(d)
                case .paperContentRestore:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_content_restore")
                    return .dictionary(d)
                case .paperDocAddComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_add_comment")
                    return .dictionary(d)
                case .paperDocChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_member_role")
                    return .dictionary(d)
                case .paperDocChangeSharingPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_sharing_policy")
                    return .dictionary(d)
                case .paperDocChangeSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_change_subscription")
                    return .dictionary(d)
                case .paperDocDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_deleted")
                    return .dictionary(d)
                case .paperDocDeleteComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_delete_comment")
                    return .dictionary(d)
                case .paperDocDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_download")
                    return .dictionary(d)
                case .paperDocEdit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_edit")
                    return .dictionary(d)
                case .paperDocEditComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_edit_comment")
                    return .dictionary(d)
                case .paperDocFollowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_followed")
                    return .dictionary(d)
                case .paperDocMention:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_mention")
                    return .dictionary(d)
                case .paperDocRequestAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_request_access")
                    return .dictionary(d)
                case .paperDocResolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_resolve_comment")
                    return .dictionary(d)
                case .paperDocRevert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_revert")
                    return .dictionary(d)
                case .paperDocSlackShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_slack_share")
                    return .dictionary(d)
                case .paperDocTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_team_invite")
                    return .dictionary(d)
                case .paperDocTrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_trashed")
                    return .dictionary(d)
                case .paperDocUnresolveComment:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_unresolve_comment")
                    return .dictionary(d)
                case .paperDocUntrashed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_untrashed")
                    return .dictionary(d)
                case .paperDocView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_doc_view")
                    return .dictionary(d)
                case .paperFolderChangeSubscription:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_change_subscription")
                    return .dictionary(d)
                case .paperFolderDeleted:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_deleted")
                    return .dictionary(d)
                case .paperFolderFollowed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_followed")
                    return .dictionary(d)
                case .paperFolderTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_folder_team_invite")
                    return .dictionary(d)
                case .passwordChange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_change")
                    return .dictionary(d)
                case .passwordReset:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_reset")
                    return .dictionary(d)
                case .passwordResetAll:
                    var d = [String: JSON]()
                    d[".tag"] = .str("password_reset_all")
                    return .dictionary(d)
                case .emmCreateExceptionsReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_create_exceptions_report")
                    return .dictionary(d)
                case .emmCreateUsageReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_create_usage_report")
                    return .dictionary(d)
                case .smartSyncCreateAdminPrivilegeReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_create_admin_privilege_report")
                    return .dictionary(d)
                case .teamActivityCreateReport:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_activity_create_report")
                    return .dictionary(d)
                case .collectionShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("collection_share")
                    return .dictionary(d)
                case .noteAclInviteOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_invite_only")
                    return .dictionary(d)
                case .noteAclLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_link")
                    return .dictionary(d)
                case .noteAclTeamLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_acl_team_link")
                    return .dictionary(d)
                case .noteShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_shared")
                    return .dictionary(d)
                case .noteShareReceive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("note_share_receive")
                    return .dictionary(d)
                case .openNoteShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("open_note_shared")
                    return .dictionary(d)
                case .sfAddGroup:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_add_group")
                    return .dictionary(d)
                case .sfAllowNonMembersToViewSharedLinks:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_allow_non_members_to_view_shared_links")
                    return .dictionary(d)
                case .sfInviteGroup:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_invite_group")
                    return .dictionary(d)
                case .sfNest:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_nest")
                    return .dictionary(d)
                case .sfTeamDecline:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_decline")
                    return .dictionary(d)
                case .sfTeamGrantAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_grant_access")
                    return .dictionary(d)
                case .sfTeamInvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_invite")
                    return .dictionary(d)
                case .sfTeamInviteChangeRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_invite_change_role")
                    return .dictionary(d)
                case .sfTeamJoin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_join")
                    return .dictionary(d)
                case .sfTeamJoinFromOobLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_join_from_oob_link")
                    return .dictionary(d)
                case .sfTeamUninvite:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sf_team_uninvite")
                    return .dictionary(d)
                case .sharedContentAddInvitees:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_invitees")
                    return .dictionary(d)
                case .sharedContentAddLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_link_expiry")
                    return .dictionary(d)
                case .sharedContentAddLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_link_password")
                    return .dictionary(d)
                case .sharedContentAddMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_add_member")
                    return .dictionary(d)
                case .sharedContentChangeDownloadsPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_downloads_policy")
                    return .dictionary(d)
                case .sharedContentChangeInviteeRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_invitee_role")
                    return .dictionary(d)
                case .sharedContentChangeLinkAudience:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_audience")
                    return .dictionary(d)
                case .sharedContentChangeLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_expiry")
                    return .dictionary(d)
                case .sharedContentChangeLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_link_password")
                    return .dictionary(d)
                case .sharedContentChangeMemberRole:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_member_role")
                    return .dictionary(d)
                case .sharedContentChangeViewerInfoPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_change_viewer_info_policy")
                    return .dictionary(d)
                case .sharedContentClaimInvitation:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_claim_invitation")
                    return .dictionary(d)
                case .sharedContentCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_copy")
                    return .dictionary(d)
                case .sharedContentDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_download")
                    return .dictionary(d)
                case .sharedContentRelinquishMembership:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_relinquish_membership")
                    return .dictionary(d)
                case .sharedContentRemoveInvitee:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_invitee")
                    return .dictionary(d)
                case .sharedContentRemoveLinkExpiry:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_link_expiry")
                    return .dictionary(d)
                case .sharedContentRemoveLinkPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_link_password")
                    return .dictionary(d)
                case .sharedContentRemoveMember:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_remove_member")
                    return .dictionary(d)
                case .sharedContentRequestAccess:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_request_access")
                    return .dictionary(d)
                case .sharedContentUnshare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_unshare")
                    return .dictionary(d)
                case .sharedContentView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_content_view")
                    return .dictionary(d)
                case .sharedFolderChangeConfidentiality:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_confidentiality")
                    return .dictionary(d)
                case .sharedFolderChangeLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_link_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMemberManagementPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_member_management_policy")
                    return .dictionary(d)
                case .sharedFolderChangeMemberPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_change_member_policy")
                    return .dictionary(d)
                case .sharedFolderCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_create")
                    return .dictionary(d)
                case .sharedFolderMount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_mount")
                    return .dictionary(d)
                case .sharedFolderTransferOwnership:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_transfer_ownership")
                    return .dictionary(d)
                case .sharedFolderUnmount:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_folder_unmount")
                    return .dictionary(d)
                case .sharedNoteOpened:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shared_note_opened")
                    return .dictionary(d)
                case .shmodelAppCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_app_create")
                    return .dictionary(d)
                case .shmodelCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_create")
                    return .dictionary(d)
                case .shmodelDisable:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_disable")
                    return .dictionary(d)
                case .shmodelFbShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_fb_share")
                    return .dictionary(d)
                case .shmodelGroupShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_group_share")
                    return .dictionary(d)
                case .shmodelRemoveExpiration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_remove_expiration")
                    return .dictionary(d)
                case .shmodelSetExpiration:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_set_expiration")
                    return .dictionary(d)
                case .shmodelTeamCopy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_team_copy")
                    return .dictionary(d)
                case .shmodelTeamDownload:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_team_download")
                    return .dictionary(d)
                case .shmodelTeamShare:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_team_share")
                    return .dictionary(d)
                case .shmodelTeamView:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_team_view")
                    return .dictionary(d)
                case .shmodelVisibilityPassword:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_visibility_password")
                    return .dictionary(d)
                case .shmodelVisibilityPublic:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_visibility_public")
                    return .dictionary(d)
                case .shmodelVisibilityTeamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("shmodel_visibility_team_only")
                    return .dictionary(d)
                case .ssoAddCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_cert")
                    return .dictionary(d)
                case .ssoAddLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_login_url")
                    return .dictionary(d)
                case .ssoAddLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_add_logout_url")
                    return .dictionary(d)
                case .ssoChangeCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_cert")
                    return .dictionary(d)
                case .ssoChangeLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_login_url")
                    return .dictionary(d)
                case .ssoChangeLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_logout_url")
                    return .dictionary(d)
                case .ssoChangeSamlIdentityMode:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_saml_identity_mode")
                    return .dictionary(d)
                case .ssoRemoveCert:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_cert")
                    return .dictionary(d)
                case .ssoRemoveLoginUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_login_url")
                    return .dictionary(d)
                case .ssoRemoveLogoutUrl:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_remove_logout_url")
                    return .dictionary(d)
                case .teamFolderChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_change_status")
                    return .dictionary(d)
                case .teamFolderCreate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_create")
                    return .dictionary(d)
                case .teamFolderDowngrade:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_downgrade")
                    return .dictionary(d)
                case .teamFolderPermanentlyDelete:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_permanently_delete")
                    return .dictionary(d)
                case .teamFolderRename:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_folder_rename")
                    return .dictionary(d)
                case .accountCaptureChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_capture_change_policy")
                    return .dictionary(d)
                case .allowDownloadDisabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow_download_disabled")
                    return .dictionary(d)
                case .allowDownloadEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow_download_enabled")
                    return .dictionary(d)
                case .dataPlacementRestrictionChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_placement_restriction_change_policy")
                    return .dictionary(d)
                case .dataPlacementRestrictionSatisfyPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("data_placement_restriction_satisfy_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeDesktopPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_desktop_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeMobilePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_mobile_policy")
                    return .dictionary(d)
                case .deviceApprovalsChangeOverageAction:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_overage_action")
                    return .dictionary(d)
                case .deviceApprovalsChangeUnlinkAction:
                    var d = [String: JSON]()
                    d[".tag"] = .str("device_approvals_change_unlink_action")
                    return .dictionary(d)
                case .emmAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_add_exception")
                    return .dictionary(d)
                case .emmChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_change_policy")
                    return .dictionary(d)
                case .emmRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("emm_remove_exception")
                    return .dictionary(d)
                case .extendedVersionHistoryChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("extended_version_history_change_policy")
                    return .dictionary(d)
                case .fileCommentsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_comments_change_policy")
                    return .dictionary(d)
                case .fileRequestsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_change_policy")
                    return .dictionary(d)
                case .fileRequestsEmailsEnabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_emails_enabled")
                    return .dictionary(d)
                case .fileRequestsEmailsRestrictedToTeamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("file_requests_emails_restricted_to_team_only")
                    return .dictionary(d)
                case .googleSsoChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("google_sso_change_policy")
                    return .dictionary(d)
                case .groupUserManagementChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("group_user_management_change_policy")
                    return .dictionary(d)
                case .memberRequestsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_requests_change_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsAddException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_add_exception")
                    return .dictionary(d)
                case .memberSpaceLimitsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_change_policy")
                    return .dictionary(d)
                case .memberSpaceLimitsRemoveException:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_space_limits_remove_exception")
                    return .dictionary(d)
                case .memberSuggestionsChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("member_suggestions_change_policy")
                    return .dictionary(d)
                case .microsoftOfficeAddinChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("microsoft_office_addin_change_policy")
                    return .dictionary(d)
                case .networkControlChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("network_control_change_policy")
                    return .dictionary(d)
                case .paperChangeDeploymentPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_deployment_policy")
                    return .dictionary(d)
                case .paperChangeMemberLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_member_link_policy")
                    return .dictionary(d)
                case .paperChangeMemberPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_member_policy")
                    return .dictionary(d)
                case .paperChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("paper_change_policy")
                    return .dictionary(d)
                case .permanentDeleteChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("permanent_delete_change_policy")
                    return .dictionary(d)
                case .sharingChangeFolderJoinPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_folder_join_policy")
                    return .dictionary(d)
                case .sharingChangeLinkPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_link_policy")
                    return .dictionary(d)
                case .sharingChangeMemberPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sharing_change_member_policy")
                    return .dictionary(d)
                case .smartSyncChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_change_policy")
                    return .dictionary(d)
                case .smartSyncNotOptOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_not_opt_out")
                    return .dictionary(d)
                case .smartSyncOptOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("smart_sync_opt_out")
                    return .dictionary(d)
                case .ssoChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sso_change_policy")
                    return .dictionary(d)
                case .tfaChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_policy")
                    return .dictionary(d)
                case .twoAccountChangePolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("two_account_change_policy")
                    return .dictionary(d)
                case .webSessionsChangeFixedLengthPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_sessions_change_fixed_length_policy")
                    return .dictionary(d)
                case .webSessionsChangeIdleLengthPolicy:
                    var d = [String: JSON]()
                    d[".tag"] = .str("web_sessions_change_idle_length_policy")
                    return .dictionary(d)
                case .teamProfileAddLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_add_logo")
                    return .dictionary(d)
                case .teamProfileChangeDefaultLanguage:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_default_language")
                    return .dictionary(d)
                case .teamProfileChangeLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_logo")
                    return .dictionary(d)
                case .teamProfileChangeName:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_change_name")
                    return .dictionary(d)
                case .teamProfileRemoveLogo:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_profile_remove_logo")
                    return .dictionary(d)
                case .tfaAddBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_add_backup_phone")
                    return .dictionary(d)
                case .tfaAddSecurityKey:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_add_security_key")
                    return .dictionary(d)
                case .tfaChangeBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_backup_phone")
                    return .dictionary(d)
                case .tfaChangeStatus:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_change_status")
                    return .dictionary(d)
                case .tfaRemoveBackupPhone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_remove_backup_phone")
                    return .dictionary(d)
                case .tfaRemoveSecurityKey:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_remove_security_key")
                    return .dictionary(d)
                case .tfaReset:
                    var d = [String: JSON]()
                    d[".tag"] = .str("tfa_reset")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> EventType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "member_change_membership_type":
                            return EventType.memberChangeMembershipType
                        case "member_permanently_delete_account_contents":
                            return EventType.memberPermanentlyDeleteAccountContents
                        case "member_space_limits_change_status":
                            return EventType.memberSpaceLimitsChangeStatus
                        case "member_transfer_account_contents":
                            return EventType.memberTransferAccountContents
                        case "paper_admin_export_start":
                            return EventType.paperAdminExportStart
                        case "paper_enabled_users_group_addition":
                            return EventType.paperEnabledUsersGroupAddition
                        case "paper_enabled_users_group_removal":
                            return EventType.paperEnabledUsersGroupRemoval
                        case "paper_external_view_allow":
                            return EventType.paperExternalViewAllow
                        case "paper_external_view_default_team":
                            return EventType.paperExternalViewDefaultTeam
                        case "paper_external_view_forbid":
                            return EventType.paperExternalViewForbid
                        case "sf_external_invite_warn":
                            return EventType.sfExternalInviteWarn
                        case "team_merge_from":
                            return EventType.teamMergeFrom
                        case "team_merge_to":
                            return EventType.teamMergeTo
                        case "app_link_team":
                            return EventType.appLinkTeam
                        case "app_link_user":
                            return EventType.appLinkUser
                        case "app_unlink_team":
                            return EventType.appUnlinkTeam
                        case "app_unlink_user":
                            return EventType.appUnlinkUser
                        case "file_add_comment":
                            return EventType.fileAddComment
                        case "file_change_comment_subscription":
                            return EventType.fileChangeCommentSubscription
                        case "file_delete_comment":
                            return EventType.fileDeleteComment
                        case "file_like_comment":
                            return EventType.fileLikeComment
                        case "file_resolve_comment":
                            return EventType.fileResolveComment
                        case "file_unlike_comment":
                            return EventType.fileUnlikeComment
                        case "file_unresolve_comment":
                            return EventType.fileUnresolveComment
                        case "device_change_ip_desktop":
                            return EventType.deviceChangeIpDesktop
                        case "device_change_ip_mobile":
                            return EventType.deviceChangeIpMobile
                        case "device_change_ip_web":
                            return EventType.deviceChangeIpWeb
                        case "device_delete_on_unlink_fail":
                            return EventType.deviceDeleteOnUnlinkFail
                        case "device_delete_on_unlink_success":
                            return EventType.deviceDeleteOnUnlinkSuccess
                        case "device_link_fail":
                            return EventType.deviceLinkFail
                        case "device_link_success":
                            return EventType.deviceLinkSuccess
                        case "device_management_disabled":
                            return EventType.deviceManagementDisabled
                        case "device_management_enabled":
                            return EventType.deviceManagementEnabled
                        case "device_unlink":
                            return EventType.deviceUnlink
                        case "emm_refresh_auth_token":
                            return EventType.emmRefreshAuthToken
                        case "account_capture_change_availability":
                            return EventType.accountCaptureChangeAvailability
                        case "account_capture_migrate_account":
                            return EventType.accountCaptureMigrateAccount
                        case "account_capture_relinquish_account":
                            return EventType.accountCaptureRelinquishAccount
                        case "disabled_domain_invites":
                            return EventType.disabledDomainInvites
                        case "domain_invites_approve_request_to_join_team":
                            return EventType.domainInvitesApproveRequestToJoinTeam
                        case "domain_invites_decline_request_to_join_team":
                            return EventType.domainInvitesDeclineRequestToJoinTeam
                        case "domain_invites_email_existing_users":
                            return EventType.domainInvitesEmailExistingUsers
                        case "domain_invites_request_to_join_team":
                            return EventType.domainInvitesRequestToJoinTeam
                        case "domain_invites_set_invite_new_user_pref_to_no":
                            return EventType.domainInvitesSetInviteNewUserPrefToNo
                        case "domain_invites_set_invite_new_user_pref_to_yes":
                            return EventType.domainInvitesSetInviteNewUserPrefToYes
                        case "domain_verification_add_domain_fail":
                            return EventType.domainVerificationAddDomainFail
                        case "domain_verification_add_domain_success":
                            return EventType.domainVerificationAddDomainSuccess
                        case "domain_verification_remove_domain":
                            return EventType.domainVerificationRemoveDomain
                        case "enabled_domain_invites":
                            return EventType.enabledDomainInvites
                        case "create_folder":
                            return EventType.createFolder
                        case "file_add":
                            return EventType.fileAdd
                        case "file_copy":
                            return EventType.fileCopy
                        case "file_delete":
                            return EventType.fileDelete
                        case "file_download":
                            return EventType.fileDownload
                        case "file_edit":
                            return EventType.fileEdit
                        case "file_get_copy_reference":
                            return EventType.fileGetCopyReference
                        case "file_move":
                            return EventType.fileMove
                        case "file_permanently_delete":
                            return EventType.filePermanentlyDelete
                        case "file_preview":
                            return EventType.filePreview
                        case "file_rename":
                            return EventType.fileRename
                        case "file_restore":
                            return EventType.fileRestore
                        case "file_revert":
                            return EventType.fileRevert
                        case "file_rollback_changes":
                            return EventType.fileRollbackChanges
                        case "file_save_copy_reference":
                            return EventType.fileSaveCopyReference
                        case "file_request_add_deadline":
                            return EventType.fileRequestAddDeadline
                        case "file_request_change_folder":
                            return EventType.fileRequestChangeFolder
                        case "file_request_change_title":
                            return EventType.fileRequestChangeTitle
                        case "file_request_close":
                            return EventType.fileRequestClose
                        case "file_request_create":
                            return EventType.fileRequestCreate
                        case "file_request_receive_file":
                            return EventType.fileRequestReceiveFile
                        case "file_request_remove_deadline":
                            return EventType.fileRequestRemoveDeadline
                        case "file_request_send":
                            return EventType.fileRequestSend
                        case "group_add_external_id":
                            return EventType.groupAddExternalId
                        case "group_add_member":
                            return EventType.groupAddMember
                        case "group_change_external_id":
                            return EventType.groupChangeExternalId
                        case "group_change_management_type":
                            return EventType.groupChangeManagementType
                        case "group_change_member_role":
                            return EventType.groupChangeMemberRole
                        case "group_create":
                            return EventType.groupCreate
                        case "group_delete":
                            return EventType.groupDelete
                        case "group_moved":
                            return EventType.groupMoved
                        case "group_remove_external_id":
                            return EventType.groupRemoveExternalId
                        case "group_remove_member":
                            return EventType.groupRemoveMember
                        case "group_rename":
                            return EventType.groupRename
                        case "emm_login_success":
                            return EventType.emmLoginSuccess
                        case "logout":
                            return EventType.logout
                        case "password_login_fail":
                            return EventType.passwordLoginFail
                        case "password_login_success":
                            return EventType.passwordLoginSuccess
                        case "reseller_support_session_end":
                            return EventType.resellerSupportSessionEnd
                        case "reseller_support_session_start":
                            return EventType.resellerSupportSessionStart
                        case "sign_in_as_session_end":
                            return EventType.signInAsSessionEnd
                        case "sign_in_as_session_start":
                            return EventType.signInAsSessionStart
                        case "sso_login_fail":
                            return EventType.ssoLoginFail
                        case "member_add_name":
                            return EventType.memberAddName
                        case "member_change_admin_role":
                            return EventType.memberChangeAdminRole
                        case "member_change_email":
                            return EventType.memberChangeEmail
                        case "member_change_name":
                            return EventType.memberChangeName
                        case "member_change_status":
                            return EventType.memberChangeStatus
                        case "member_suggest":
                            return EventType.memberSuggest
                        case "paper_content_add_member":
                            return EventType.paperContentAddMember
                        case "paper_content_add_to_folder":
                            return EventType.paperContentAddToFolder
                        case "paper_content_archive":
                            return EventType.paperContentArchive
                        case "paper_content_create":
                            return EventType.paperContentCreate
                        case "paper_content_permanently_delete":
                            return EventType.paperContentPermanentlyDelete
                        case "paper_content_remove_from_folder":
                            return EventType.paperContentRemoveFromFolder
                        case "paper_content_remove_member":
                            return EventType.paperContentRemoveMember
                        case "paper_content_rename":
                            return EventType.paperContentRename
                        case "paper_content_restore":
                            return EventType.paperContentRestore
                        case "paper_doc_add_comment":
                            return EventType.paperDocAddComment
                        case "paper_doc_change_member_role":
                            return EventType.paperDocChangeMemberRole
                        case "paper_doc_change_sharing_policy":
                            return EventType.paperDocChangeSharingPolicy
                        case "paper_doc_change_subscription":
                            return EventType.paperDocChangeSubscription
                        case "paper_doc_deleted":
                            return EventType.paperDocDeleted
                        case "paper_doc_delete_comment":
                            return EventType.paperDocDeleteComment
                        case "paper_doc_download":
                            return EventType.paperDocDownload
                        case "paper_doc_edit":
                            return EventType.paperDocEdit
                        case "paper_doc_edit_comment":
                            return EventType.paperDocEditComment
                        case "paper_doc_followed":
                            return EventType.paperDocFollowed
                        case "paper_doc_mention":
                            return EventType.paperDocMention
                        case "paper_doc_request_access":
                            return EventType.paperDocRequestAccess
                        case "paper_doc_resolve_comment":
                            return EventType.paperDocResolveComment
                        case "paper_doc_revert":
                            return EventType.paperDocRevert
                        case "paper_doc_slack_share":
                            return EventType.paperDocSlackShare
                        case "paper_doc_team_invite":
                            return EventType.paperDocTeamInvite
                        case "paper_doc_trashed":
                            return EventType.paperDocTrashed
                        case "paper_doc_unresolve_comment":
                            return EventType.paperDocUnresolveComment
                        case "paper_doc_untrashed":
                            return EventType.paperDocUntrashed
                        case "paper_doc_view":
                            return EventType.paperDocView
                        case "paper_folder_change_subscription":
                            return EventType.paperFolderChangeSubscription
                        case "paper_folder_deleted":
                            return EventType.paperFolderDeleted
                        case "paper_folder_followed":
                            return EventType.paperFolderFollowed
                        case "paper_folder_team_invite":
                            return EventType.paperFolderTeamInvite
                        case "password_change":
                            return EventType.passwordChange
                        case "password_reset":
                            return EventType.passwordReset
                        case "password_reset_all":
                            return EventType.passwordResetAll
                        case "emm_create_exceptions_report":
                            return EventType.emmCreateExceptionsReport
                        case "emm_create_usage_report":
                            return EventType.emmCreateUsageReport
                        case "smart_sync_create_admin_privilege_report":
                            return EventType.smartSyncCreateAdminPrivilegeReport
                        case "team_activity_create_report":
                            return EventType.teamActivityCreateReport
                        case "collection_share":
                            return EventType.collectionShare
                        case "note_acl_invite_only":
                            return EventType.noteAclInviteOnly
                        case "note_acl_link":
                            return EventType.noteAclLink
                        case "note_acl_team_link":
                            return EventType.noteAclTeamLink
                        case "note_shared":
                            return EventType.noteShared
                        case "note_share_receive":
                            return EventType.noteShareReceive
                        case "open_note_shared":
                            return EventType.openNoteShared
                        case "sf_add_group":
                            return EventType.sfAddGroup
                        case "sf_allow_non_members_to_view_shared_links":
                            return EventType.sfAllowNonMembersToViewSharedLinks
                        case "sf_invite_group":
                            return EventType.sfInviteGroup
                        case "sf_nest":
                            return EventType.sfNest
                        case "sf_team_decline":
                            return EventType.sfTeamDecline
                        case "sf_team_grant_access":
                            return EventType.sfTeamGrantAccess
                        case "sf_team_invite":
                            return EventType.sfTeamInvite
                        case "sf_team_invite_change_role":
                            return EventType.sfTeamInviteChangeRole
                        case "sf_team_join":
                            return EventType.sfTeamJoin
                        case "sf_team_join_from_oob_link":
                            return EventType.sfTeamJoinFromOobLink
                        case "sf_team_uninvite":
                            return EventType.sfTeamUninvite
                        case "shared_content_add_invitees":
                            return EventType.sharedContentAddInvitees
                        case "shared_content_add_link_expiry":
                            return EventType.sharedContentAddLinkExpiry
                        case "shared_content_add_link_password":
                            return EventType.sharedContentAddLinkPassword
                        case "shared_content_add_member":
                            return EventType.sharedContentAddMember
                        case "shared_content_change_downloads_policy":
                            return EventType.sharedContentChangeDownloadsPolicy
                        case "shared_content_change_invitee_role":
                            return EventType.sharedContentChangeInviteeRole
                        case "shared_content_change_link_audience":
                            return EventType.sharedContentChangeLinkAudience
                        case "shared_content_change_link_expiry":
                            return EventType.sharedContentChangeLinkExpiry
                        case "shared_content_change_link_password":
                            return EventType.sharedContentChangeLinkPassword
                        case "shared_content_change_member_role":
                            return EventType.sharedContentChangeMemberRole
                        case "shared_content_change_viewer_info_policy":
                            return EventType.sharedContentChangeViewerInfoPolicy
                        case "shared_content_claim_invitation":
                            return EventType.sharedContentClaimInvitation
                        case "shared_content_copy":
                            return EventType.sharedContentCopy
                        case "shared_content_download":
                            return EventType.sharedContentDownload
                        case "shared_content_relinquish_membership":
                            return EventType.sharedContentRelinquishMembership
                        case "shared_content_remove_invitee":
                            return EventType.sharedContentRemoveInvitee
                        case "shared_content_remove_link_expiry":
                            return EventType.sharedContentRemoveLinkExpiry
                        case "shared_content_remove_link_password":
                            return EventType.sharedContentRemoveLinkPassword
                        case "shared_content_remove_member":
                            return EventType.sharedContentRemoveMember
                        case "shared_content_request_access":
                            return EventType.sharedContentRequestAccess
                        case "shared_content_unshare":
                            return EventType.sharedContentUnshare
                        case "shared_content_view":
                            return EventType.sharedContentView
                        case "shared_folder_change_confidentiality":
                            return EventType.sharedFolderChangeConfidentiality
                        case "shared_folder_change_link_policy":
                            return EventType.sharedFolderChangeLinkPolicy
                        case "shared_folder_change_member_management_policy":
                            return EventType.sharedFolderChangeMemberManagementPolicy
                        case "shared_folder_change_member_policy":
                            return EventType.sharedFolderChangeMemberPolicy
                        case "shared_folder_create":
                            return EventType.sharedFolderCreate
                        case "shared_folder_mount":
                            return EventType.sharedFolderMount
                        case "shared_folder_transfer_ownership":
                            return EventType.sharedFolderTransferOwnership
                        case "shared_folder_unmount":
                            return EventType.sharedFolderUnmount
                        case "shared_note_opened":
                            return EventType.sharedNoteOpened
                        case "shmodel_app_create":
                            return EventType.shmodelAppCreate
                        case "shmodel_create":
                            return EventType.shmodelCreate
                        case "shmodel_disable":
                            return EventType.shmodelDisable
                        case "shmodel_fb_share":
                            return EventType.shmodelFbShare
                        case "shmodel_group_share":
                            return EventType.shmodelGroupShare
                        case "shmodel_remove_expiration":
                            return EventType.shmodelRemoveExpiration
                        case "shmodel_set_expiration":
                            return EventType.shmodelSetExpiration
                        case "shmodel_team_copy":
                            return EventType.shmodelTeamCopy
                        case "shmodel_team_download":
                            return EventType.shmodelTeamDownload
                        case "shmodel_team_share":
                            return EventType.shmodelTeamShare
                        case "shmodel_team_view":
                            return EventType.shmodelTeamView
                        case "shmodel_visibility_password":
                            return EventType.shmodelVisibilityPassword
                        case "shmodel_visibility_public":
                            return EventType.shmodelVisibilityPublic
                        case "shmodel_visibility_team_only":
                            return EventType.shmodelVisibilityTeamOnly
                        case "sso_add_cert":
                            return EventType.ssoAddCert
                        case "sso_add_login_url":
                            return EventType.ssoAddLoginUrl
                        case "sso_add_logout_url":
                            return EventType.ssoAddLogoutUrl
                        case "sso_change_cert":
                            return EventType.ssoChangeCert
                        case "sso_change_login_url":
                            return EventType.ssoChangeLoginUrl
                        case "sso_change_logout_url":
                            return EventType.ssoChangeLogoutUrl
                        case "sso_change_saml_identity_mode":
                            return EventType.ssoChangeSamlIdentityMode
                        case "sso_remove_cert":
                            return EventType.ssoRemoveCert
                        case "sso_remove_login_url":
                            return EventType.ssoRemoveLoginUrl
                        case "sso_remove_logout_url":
                            return EventType.ssoRemoveLogoutUrl
                        case "team_folder_change_status":
                            return EventType.teamFolderChangeStatus
                        case "team_folder_create":
                            return EventType.teamFolderCreate
                        case "team_folder_downgrade":
                            return EventType.teamFolderDowngrade
                        case "team_folder_permanently_delete":
                            return EventType.teamFolderPermanentlyDelete
                        case "team_folder_rename":
                            return EventType.teamFolderRename
                        case "account_capture_change_policy":
                            return EventType.accountCaptureChangePolicy
                        case "allow_download_disabled":
                            return EventType.allowDownloadDisabled
                        case "allow_download_enabled":
                            return EventType.allowDownloadEnabled
                        case "data_placement_restriction_change_policy":
                            return EventType.dataPlacementRestrictionChangePolicy
                        case "data_placement_restriction_satisfy_policy":
                            return EventType.dataPlacementRestrictionSatisfyPolicy
                        case "device_approvals_change_desktop_policy":
                            return EventType.deviceApprovalsChangeDesktopPolicy
                        case "device_approvals_change_mobile_policy":
                            return EventType.deviceApprovalsChangeMobilePolicy
                        case "device_approvals_change_overage_action":
                            return EventType.deviceApprovalsChangeOverageAction
                        case "device_approvals_change_unlink_action":
                            return EventType.deviceApprovalsChangeUnlinkAction
                        case "emm_add_exception":
                            return EventType.emmAddException
                        case "emm_change_policy":
                            return EventType.emmChangePolicy
                        case "emm_remove_exception":
                            return EventType.emmRemoveException
                        case "extended_version_history_change_policy":
                            return EventType.extendedVersionHistoryChangePolicy
                        case "file_comments_change_policy":
                            return EventType.fileCommentsChangePolicy
                        case "file_requests_change_policy":
                            return EventType.fileRequestsChangePolicy
                        case "file_requests_emails_enabled":
                            return EventType.fileRequestsEmailsEnabled
                        case "file_requests_emails_restricted_to_team_only":
                            return EventType.fileRequestsEmailsRestrictedToTeamOnly
                        case "google_sso_change_policy":
                            return EventType.googleSsoChangePolicy
                        case "group_user_management_change_policy":
                            return EventType.groupUserManagementChangePolicy
                        case "member_requests_change_policy":
                            return EventType.memberRequestsChangePolicy
                        case "member_space_limits_add_exception":
                            return EventType.memberSpaceLimitsAddException
                        case "member_space_limits_change_policy":
                            return EventType.memberSpaceLimitsChangePolicy
                        case "member_space_limits_remove_exception":
                            return EventType.memberSpaceLimitsRemoveException
                        case "member_suggestions_change_policy":
                            return EventType.memberSuggestionsChangePolicy
                        case "microsoft_office_addin_change_policy":
                            return EventType.microsoftOfficeAddinChangePolicy
                        case "network_control_change_policy":
                            return EventType.networkControlChangePolicy
                        case "paper_change_deployment_policy":
                            return EventType.paperChangeDeploymentPolicy
                        case "paper_change_member_link_policy":
                            return EventType.paperChangeMemberLinkPolicy
                        case "paper_change_member_policy":
                            return EventType.paperChangeMemberPolicy
                        case "paper_change_policy":
                            return EventType.paperChangePolicy
                        case "permanent_delete_change_policy":
                            return EventType.permanentDeleteChangePolicy
                        case "sharing_change_folder_join_policy":
                            return EventType.sharingChangeFolderJoinPolicy
                        case "sharing_change_link_policy":
                            return EventType.sharingChangeLinkPolicy
                        case "sharing_change_member_policy":
                            return EventType.sharingChangeMemberPolicy
                        case "smart_sync_change_policy":
                            return EventType.smartSyncChangePolicy
                        case "smart_sync_not_opt_out":
                            return EventType.smartSyncNotOptOut
                        case "smart_sync_opt_out":
                            return EventType.smartSyncOptOut
                        case "sso_change_policy":
                            return EventType.ssoChangePolicy
                        case "tfa_change_policy":
                            return EventType.tfaChangePolicy
                        case "two_account_change_policy":
                            return EventType.twoAccountChangePolicy
                        case "web_sessions_change_fixed_length_policy":
                            return EventType.webSessionsChangeFixedLengthPolicy
                        case "web_sessions_change_idle_length_policy":
                            return EventType.webSessionsChangeIdleLengthPolicy
                        case "team_profile_add_logo":
                            return EventType.teamProfileAddLogo
                        case "team_profile_change_default_language":
                            return EventType.teamProfileChangeDefaultLanguage
                        case "team_profile_change_logo":
                            return EventType.teamProfileChangeLogo
                        case "team_profile_change_name":
                            return EventType.teamProfileChangeName
                        case "team_profile_remove_logo":
                            return EventType.teamProfileRemoveLogo
                        case "tfa_add_backup_phone":
                            return EventType.tfaAddBackupPhone
                        case "tfa_add_security_key":
                            return EventType.tfaAddSecurityKey
                        case "tfa_change_backup_phone":
                            return EventType.tfaChangeBackupPhone
                        case "tfa_change_status":
                            return EventType.tfaChangeStatus
                        case "tfa_remove_backup_phone":
                            return EventType.tfaRemoveBackupPhone
                        case "tfa_remove_security_key":
                            return EventType.tfaRemoveSecurityKey
                        case "tfa_reset":
                            return EventType.tfaReset
                        case "other":
                            return EventType.other
                        default:
                            return EventType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Accepted or opted out of extended version history.
    open class ExtendedVersionHistoryChangePolicyDetails: CustomStringConvertible {
        /// New extended version history policy.
        open let newValue: TeamLog.ExtendedVersionHistoryPolicy
        /// Previous extended version history policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.ExtendedVersionHistoryPolicy?
        public init(newValue: TeamLog.ExtendedVersionHistoryPolicy, previousValue: TeamLog.ExtendedVersionHistoryPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExtendedVersionHistoryChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class ExtendedVersionHistoryChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExtendedVersionHistoryChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ExtendedVersionHistoryPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ExtendedVersionHistoryPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ExtendedVersionHistoryChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ExtendedVersionHistoryPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ExtendedVersionHistoryPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return ExtendedVersionHistoryChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The ExtendedVersionHistoryPolicy union
    public enum ExtendedVersionHistoryPolicy: CustomStringConvertible {
        /// An unspecified error.
        case explicitlyLimited
        /// An unspecified error.
        case explicitlyUnlimited
        /// An unspecified error.
        case implicitlyLimited
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ExtendedVersionHistoryPolicySerializer().serialize(self)))"
        }
    }
    open class ExtendedVersionHistoryPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ExtendedVersionHistoryPolicy) -> JSON {
            switch value {
                case .explicitlyLimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("explicitly_limited")
                    return .dictionary(d)
                case .explicitlyUnlimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("explicitly_unlimited")
                    return .dictionary(d)
                case .implicitlyLimited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("implicitly_limited")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ExtendedVersionHistoryPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "explicitly_limited":
                            return ExtendedVersionHistoryPolicy.explicitlyLimited
                        case "explicitly_unlimited":
                            return ExtendedVersionHistoryPolicy.explicitlyUnlimited
                        case "implicitly_limited":
                            return ExtendedVersionHistoryPolicy.implicitlyLimited
                        case "other":
                            return ExtendedVersionHistoryPolicy.other
                        default:
                            return ExtendedVersionHistoryPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Provides details about a failure
    open class FailureDetailsLogInfo: CustomStringConvertible {
        /// A user friendly explanation of the error. Might be missing due to historical data gap.
        open let userFriendlyMessage: String?
        /// A technical explanation of the error. This is relevant for some errors.
        open let technicalErrorMessage: String?
        public init(userFriendlyMessage: String? = nil, technicalErrorMessage: String? = nil) {
            nullableValidator(stringValidator())(userFriendlyMessage)
            self.userFriendlyMessage = userFriendlyMessage
            nullableValidator(stringValidator())(technicalErrorMessage)
            self.technicalErrorMessage = technicalErrorMessage
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FailureDetailsLogInfoSerializer().serialize(self)))"
        }
    }
    open class FailureDetailsLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FailureDetailsLogInfo) -> JSON {
            let output = [ 
            "user_friendly_message": NullableSerializer(Serialization._StringSerializer).serialize(value.userFriendlyMessage),
            "technical_error_message": NullableSerializer(Serialization._StringSerializer).serialize(value.technicalErrorMessage),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FailureDetailsLogInfo {
            switch json {
                case .dictionary(let dict):
                    let userFriendlyMessage = NullableSerializer(Serialization._StringSerializer).deserialize(dict["user_friendly_message"] ?? .null)
                    let technicalErrorMessage = NullableSerializer(Serialization._StringSerializer).deserialize(dict["technical_error_message"] ?? .null)
                    return FailureDetailsLogInfo(userFriendlyMessage: userFriendlyMessage, technicalErrorMessage: technicalErrorMessage)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a file comment.
    open class FileAddCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileAddCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileAddCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added files and/or folders.
    open class FileAddDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileAddDetailsSerializer().serialize(self)))"
        }
    }
    open class FileAddDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileAddDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileAddDetails {
            switch json {
                case .dictionary(_):
                    return FileAddDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Subscribed to or unsubscribed from comment notifications for file.
    open class FileChangeCommentSubscriptionDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// New file comment subscription.
        open let newValue: TeamLog.FileCommentNotificationPolicy
        /// Previous file comment subscription. Might be missing due to historical data gap.
        open let previousValue: TeamLog.FileCommentNotificationPolicy?
        public init(targetAssetIndex: UInt64, newValue: TeamLog.FileCommentNotificationPolicy, previousValue: TeamLog.FileCommentNotificationPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileChangeCommentSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class FileChangeCommentSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileChangeCommentSubscriptionDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "new_value": TeamLog.FileCommentNotificationPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileCommentNotificationPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileChangeCommentSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let newValue = TeamLog.FileCommentNotificationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileCommentNotificationPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileChangeCommentSubscriptionDetails(targetAssetIndex: targetAssetIndex, newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enable or disable file comments notifications
    public enum FileCommentNotificationPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentNotificationPolicySerializer().serialize(self)))"
        }
    }
    open class FileCommentNotificationPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentNotificationPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileCommentNotificationPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileCommentNotificationPolicy.disabled
                        case "enabled":
                            return FileCommentNotificationPolicy.enabled
                        case "other":
                            return FileCommentNotificationPolicy.other
                        default:
                            return FileCommentNotificationPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled or disabled commenting on team files.
    open class FileCommentsChangePolicyDetails: CustomStringConvertible {
        /// New commenting on team files policy.
        open let newValue: TeamLog.FileCommentsPolicy
        /// Previous commenting on team files policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.FileCommentsPolicy?
        public init(newValue: TeamLog.FileCommentsPolicy, previousValue: TeamLog.FileCommentsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileCommentsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileCommentsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileCommentsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCommentsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileCommentsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileCommentsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileCommentsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File comments policy
    public enum FileCommentsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCommentsPolicySerializer().serialize(self)))"
        }
    }
    open class FileCommentsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCommentsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileCommentsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileCommentsPolicy.disabled
                        case "enabled":
                            return FileCommentsPolicy.enabled
                        case "other":
                            return FileCommentsPolicy.other
                        default:
                            return FileCommentsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Copied files and/or folders.
    open class FileCopyDetails: CustomStringConvertible {
        /// Relocate action details.
        open let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileCopyDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileCopyDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileCopyDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted a file comment.
    open class FileDeleteCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDeleteCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileDeleteCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted files and/or folders.
    open class FileDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDeleteDetails {
            switch json {
                case .dictionary(_):
                    return FileDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded files and/or folders.
    open class FileDownloadDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class FileDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileDownloadDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileDownloadDetails {
            switch json {
                case .dictionary(_):
                    return FileDownloadDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited files.
    open class FileEditDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileEditDetailsSerializer().serialize(self)))"
        }
    }
    open class FileEditDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileEditDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileEditDetails {
            switch json {
                case .dictionary(_):
                    return FileEditDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Create a copy reference to a file or folder.
    open class FileGetCopyReferenceDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileGetCopyReferenceDetailsSerializer().serialize(self)))"
        }
    }
    open class FileGetCopyReferenceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileGetCopyReferenceDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileGetCopyReferenceDetails {
            switch json {
                case .dictionary(_):
                    return FileGetCopyReferenceDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Liked a file comment.
    open class FileLikeCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLikeCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileLikeCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLikeCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLikeCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileLikeCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Generic information relevant both for files and folders
    open class FileOrFolderLogInfo: CustomStringConvertible {
        /// Path relative to event context.
        open let path: TeamLog.PathLogInfo
        /// Display name. Might be missing due to historical data gap.
        open let displayName: String?
        /// Unique ID. Might be missing due to historical data gap.
        open let fileId: String?
        public init(path: TeamLog.PathLogInfo, displayName: String? = nil, fileId: String? = nil) {
            self.path = path
            nullableValidator(stringValidator())(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator())(fileId)
            self.fileId = fileId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileOrFolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class FileOrFolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileOrFolderLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileOrFolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    return FileOrFolderLogInfo(path: path, displayName: displayName, fileId: fileId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File's logged information.
    open class FileLogInfo: TeamLog.FileOrFolderLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileLogInfoSerializer().serialize(self)))"
        }
    }
    open class FileLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    return FileLogInfo(path: path, displayName: displayName, fileId: fileId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Moved files and/or folders.
    open class FileMoveDetails: CustomStringConvertible {
        /// Relocate action details.
        open let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileMoveDetailsSerializer().serialize(self)))"
        }
    }
    open class FileMoveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileMoveDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileMoveDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileMoveDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted files and/or folders.
    open class FilePermanentlyDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class FilePermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePermanentlyDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePermanentlyDeleteDetails {
            switch json {
                case .dictionary(_):
                    return FilePermanentlyDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Previewed files and/or folders.
    open class FilePreviewDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FilePreviewDetailsSerializer().serialize(self)))"
        }
    }
    open class FilePreviewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FilePreviewDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FilePreviewDetails {
            switch json {
                case .dictionary(_):
                    return FilePreviewDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed files and/or folders.
    open class FileRenameDetails: CustomStringConvertible {
        /// Relocate action details.
        open let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRenameDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileRenameDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a deadline to a file request.
    open class FileRequestAddDeadlineDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestAddDeadlineDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestAddDeadlineDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestAddDeadlineDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestAddDeadlineDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestAddDeadlineDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the file request folder.
    open class FileRequestChangeFolderDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestChangeFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestChangeFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestChangeFolderDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestChangeFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestChangeFolderDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Change the file request title.
    open class FileRequestChangeTitleDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestChangeTitleDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestChangeTitleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestChangeTitleDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestChangeTitleDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestChangeTitleDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Closed a file request.
    open class FileRequestCloseDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCloseDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestCloseDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCloseDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCloseDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestCloseDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a file request.
    open class FileRequestCreateDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestCreateDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestCreateDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Received files for a file request.
    open class FileRequestReceiveFileDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        /// Submitted file names.
        open let submittedFileNames: Array<String>
        public init(submittedFileNames: Array<String>, requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
            arrayValidator(itemValidator: stringValidator())(submittedFileNames)
            self.submittedFileNames = submittedFileNames
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestReceiveFileDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestReceiveFileDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestReceiveFileDetails) -> JSON {
            let output = [ 
            "submitted_file_names": ArraySerializer(Serialization._StringSerializer).serialize(value.submittedFileNames),
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestReceiveFileDetails {
            switch json {
                case .dictionary(let dict):
                    let submittedFileNames = ArraySerializer(Serialization._StringSerializer).deserialize(dict["submitted_file_names"] ?? .null)
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestReceiveFileDetails(submittedFileNames: submittedFileNames, requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the file request deadline.
    open class FileRequestRemoveDeadlineDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestRemoveDeadlineDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestRemoveDeadlineDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestRemoveDeadlineDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestRemoveDeadlineDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestRemoveDeadlineDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent file request to users via email.
    open class FileRequestSendDetails: CustomStringConvertible {
        /// File request title.
        open let requestTitle: String?
        public init(requestTitle: String? = nil) {
            nullableValidator(stringValidator())(requestTitle)
            self.requestTitle = requestTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestSendDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestSendDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestSendDetails) -> JSON {
            let output = [ 
            "request_title": NullableSerializer(Serialization._StringSerializer).serialize(value.requestTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestSendDetails {
            switch json {
                case .dictionary(let dict):
                    let requestTitle = NullableSerializer(Serialization._StringSerializer).deserialize(dict["request_title"] ?? .null)
                    return FileRequestSendDetails(requestTitle: requestTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled file requests.
    open class FileRequestsChangePolicyDetails: CustomStringConvertible {
        /// New file requests policy.
        open let newValue: TeamLog.FileRequestsPolicy
        /// Previous file requests policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.FileRequestsPolicy?
        public init(newValue: TeamLog.FileRequestsPolicy, previousValue: TeamLog.FileRequestsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.FileRequestsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.FileRequestsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.FileRequestsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.FileRequestsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return FileRequestsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled file request emails for everyone.
    open class FileRequestsEmailsEnabledDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsEnabledDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsEnabledDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsEnabledDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsEnabledDetails {
            switch json {
                case .dictionary(_):
                    return FileRequestsEmailsEnabledDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Allowed file request emails for the team.
    open class FileRequestsEmailsRestrictedToTeamOnlyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsEmailsRestrictedToTeamOnlyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRequestsEmailsRestrictedToTeamOnlyDetails {
            switch json {
                case .dictionary(_):
                    return FileRequestsEmailsRestrictedToTeamOnlyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// File requests policy
    public enum FileRequestsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRequestsPolicySerializer().serialize(self)))"
        }
    }
    open class FileRequestsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRequestsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> FileRequestsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return FileRequestsPolicy.disabled
                        case "enabled":
                            return FileRequestsPolicy.enabled
                        case "other":
                            return FileRequestsPolicy.other
                        default:
                            return FileRequestsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Resolved a file comment.
    open class FileResolveCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileResolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileResolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileResolveCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileResolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileResolveCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored deleted files and/or folders.
    open class FileRestoreDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRestoreDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRestoreDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRestoreDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRestoreDetails {
            switch json {
                case .dictionary(_):
                    return FileRestoreDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reverted files to a previous version.
    open class FileRevertDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRevertDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRevertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRevertDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRevertDetails {
            switch json {
                case .dictionary(_):
                    return FileRevertDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Rolled back file change location changes.
    open class FileRollbackChangesDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileRollbackChangesDetailsSerializer().serialize(self)))"
        }
    }
    open class FileRollbackChangesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileRollbackChangesDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileRollbackChangesDetails {
            switch json {
                case .dictionary(_):
                    return FileRollbackChangesDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Save a file or folder using a copy reference.
    open class FileSaveCopyReferenceDetails: CustomStringConvertible {
        /// Relocate action details.
        open let relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>
        public init(relocateActionDetails: Array<TeamLog.RelocateAssetReferencesLogInfo>) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileSaveCopyReferenceDetailsSerializer().serialize(self)))"
        }
    }
    open class FileSaveCopyReferenceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileSaveCopyReferenceDetails) -> JSON {
            let output = [ 
            "relocate_action_details": ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileSaveCopyReferenceDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = ArraySerializer(TeamLog.RelocateAssetReferencesLogInfoSerializer()).deserialize(dict["relocate_action_details"] ?? .null)
                    return FileSaveCopyReferenceDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unliked a file comment.
    open class FileUnlikeCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnlikeCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileUnlikeCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnlikeCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnlikeCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileUnlikeCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unresolved a file comment.
    open class FileUnresolveCommentDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(targetAssetIndex: UInt64, commentText: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FileUnresolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class FileUnresolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FileUnresolveCommentDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FileUnresolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return FileUnresolveCommentDetails(targetAssetIndex: targetAssetIndex, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Folder's logged information.
    open class FolderLogInfo: TeamLog.FileOrFolderLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(FolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class FolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: FolderLogInfo) -> JSON {
            let output = [ 
            "path": TeamLog.PathLogInfoSerializer().serialize(value.path),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "file_id": NullableSerializer(Serialization._StringSerializer).serialize(value.fileId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> FolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let path = TeamLog.PathLogInfoSerializer().deserialize(dict["path"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let fileId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["file_id"] ?? .null)
                    return FolderLogInfo(path: path, displayName: displayName, fileId: fileId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Geographic location details.
    open class GeoLocationLogInfo: CustomStringConvertible {
        /// City name.
        open let city: String?
        /// Region name.
        open let region: String?
        /// Country code.
        open let country: String?
        /// IP address.
        open let ipAddress: String
        public init(ipAddress: String, city: String? = nil, region: String? = nil, country: String? = nil) {
            nullableValidator(stringValidator())(city)
            self.city = city
            nullableValidator(stringValidator())(region)
            self.region = region
            nullableValidator(stringValidator())(country)
            self.country = country
            stringValidator()(ipAddress)
            self.ipAddress = ipAddress
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GeoLocationLogInfoSerializer().serialize(self)))"
        }
    }
    open class GeoLocationLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GeoLocationLogInfo) -> JSON {
            let output = [ 
            "ip_address": Serialization._StringSerializer.serialize(value.ipAddress),
            "city": NullableSerializer(Serialization._StringSerializer).serialize(value.city),
            "region": NullableSerializer(Serialization._StringSerializer).serialize(value.region),
            "country": NullableSerializer(Serialization._StringSerializer).serialize(value.country),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GeoLocationLogInfo {
            switch json {
                case .dictionary(let dict):
                    let ipAddress = Serialization._StringSerializer.deserialize(dict["ip_address"] ?? .null)
                    let city = NullableSerializer(Serialization._StringSerializer).deserialize(dict["city"] ?? .null)
                    let region = NullableSerializer(Serialization._StringSerializer).deserialize(dict["region"] ?? .null)
                    let country = NullableSerializer(Serialization._StringSerializer).deserialize(dict["country"] ?? .null)
                    return GeoLocationLogInfo(ipAddress: ipAddress, city: city, region: region, country: country)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTeamEventsArg struct
    open class GetTeamEventsArg: CustomStringConvertible {
        /// Number of results to return per call.
        open let limit: UInt32
        /// Filter the events by account ID. Return ony events with this account_id as either Actor, Context, or
        /// Participants.
        open let accountId: String?
        /// Filter by time range.
        open let time: TeamCommon.TimeRange?
        /// Filter the returned events to a single category.
        open let category: TeamLog.EventCategory?
        public init(limit: UInt32 = 1000, accountId: String? = nil, time: TeamCommon.TimeRange? = nil, category: TeamLog.EventCategory? = nil) {
            comparableValidator(minValue: 1, maxValue: 1000)(limit)
            self.limit = limit
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(accountId)
            self.accountId = accountId
            self.time = time
            self.category = category
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsArgSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsArg) -> JSON {
            let output = [ 
            "limit": Serialization._UInt32Serializer.serialize(value.limit),
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "time": NullableSerializer(TeamCommon.TimeRangeSerializer()).serialize(value.time),
            "category": NullableSerializer(TeamLog.EventCategorySerializer()).serialize(value.category),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsArg {
            switch json {
                case .dictionary(let dict):
                    let limit = Serialization._UInt32Serializer.deserialize(dict["limit"] ?? .number(1000))
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let time = NullableSerializer(TeamCommon.TimeRangeSerializer()).deserialize(dict["time"] ?? .null)
                    let category = NullableSerializer(TeamLog.EventCategorySerializer()).deserialize(dict["category"] ?? .null)
                    return GetTeamEventsArg(limit: limit, accountId: accountId, time: time, category: category)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GetTeamEventsContinueArg struct
    open class GetTeamEventsContinueArg: CustomStringConvertible {
        /// Indicates from what point to get the next set of events.
        open let cursor: String
        public init(cursor: String) {
            stringValidator()(cursor)
            self.cursor = cursor
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsContinueArgSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsContinueArgSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsContinueArg) -> JSON {
            let output = [ 
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsContinueArg {
            switch json {
                case .dictionary(let dict):
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .null)
                    return GetTeamEventsContinueArg(cursor: cursor)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Errors that can be raised when calling getEventsContinue.
    public enum GetTeamEventsContinueError: CustomStringConvertible {
        /// Bad cursor.
        case badCursor
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsContinueErrorSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsContinueErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsContinueError) -> JSON {
            switch value {
                case .badCursor:
                    var d = [String: JSON]()
                    d[".tag"] = .str("bad_cursor")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsContinueError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "bad_cursor":
                            return GetTeamEventsContinueError.badCursor
                        case "other":
                            return GetTeamEventsContinueError.other
                        default:
                            return GetTeamEventsContinueError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Errors that can be raised when calling getEvents.
    public enum GetTeamEventsError: CustomStringConvertible {
        /// No user found matching the provided account_id.
        case accountIdNotFound
        /// Invalid time range.
        case invalidTimeRange
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsErrorSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsErrorSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsError) -> JSON {
            switch value {
                case .accountIdNotFound:
                    var d = [String: JSON]()
                    d[".tag"] = .str("account_id_not_found")
                    return .dictionary(d)
                case .invalidTimeRange:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invalid_time_range")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsError {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "account_id_not_found":
                            return GetTeamEventsError.accountIdNotFound
                        case "invalid_time_range":
                            return GetTeamEventsError.invalidTimeRange
                        case "other":
                            return GetTeamEventsError.other
                        default:
                            return GetTeamEventsError.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The GetTeamEventsResult struct
    open class GetTeamEventsResult: CustomStringConvertible {
        /// List of events.
        open let events: Array<TeamLog.TeamEvent>
        /// Pass the cursor into getEventsContinue to obtain additional events.
        open let cursor: String
        /// Is true if there are additional events that have not been returned yet. An additional call to
        /// getEventsContinue can retrieve them.
        open let hasMore: Bool
        public init(events: Array<TeamLog.TeamEvent>, cursor: String, hasMore: Bool) {
            self.events = events
            stringValidator()(cursor)
            self.cursor = cursor
            self.hasMore = hasMore
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GetTeamEventsResultSerializer().serialize(self)))"
        }
    }
    open class GetTeamEventsResultSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GetTeamEventsResult) -> JSON {
            let output = [ 
            "events": ArraySerializer(TeamLog.TeamEventSerializer()).serialize(value.events),
            "cursor": Serialization._StringSerializer.serialize(value.cursor),
            "has_more": Serialization._BoolSerializer.serialize(value.hasMore),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GetTeamEventsResult {
            switch json {
                case .dictionary(let dict):
                    let events = ArraySerializer(TeamLog.TeamEventSerializer()).deserialize(dict["events"] ?? .null)
                    let cursor = Serialization._StringSerializer.deserialize(dict["cursor"] ?? .null)
                    let hasMore = Serialization._BoolSerializer.deserialize(dict["has_more"] ?? .null)
                    return GetTeamEventsResult(events: events, cursor: cursor, hasMore: hasMore)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled Google single sign-on for the team.
    open class GoogleSsoChangePolicyDetails: CustomStringConvertible {
        /// New Google single sign-on policy.
        open let newValue: TeamLog.GoogleSsoPolicy
        /// Previous Google single sign-on policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.GoogleSsoPolicy?
        public init(newValue: TeamLog.GoogleSsoPolicy, previousValue: TeamLog.GoogleSsoPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GoogleSsoChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class GoogleSsoChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GoogleSsoChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.GoogleSsoPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.GoogleSsoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GoogleSsoChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.GoogleSsoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.GoogleSsoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GoogleSsoChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Google SSO policy
    public enum GoogleSsoPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GoogleSsoPolicySerializer().serialize(self)))"
        }
    }
    open class GoogleSsoPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GoogleSsoPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GoogleSsoPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return GoogleSsoPolicy.disabled
                        case "enabled":
                            return GoogleSsoPolicy.enabled
                        case "other":
                            return GoogleSsoPolicy.other
                        default:
                            return GoogleSsoPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added an external ID for group.
    open class GroupAddExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        open let newValue: String
        public init(newValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupAddExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return GroupAddExternalIdDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added team members to a group.
    open class GroupAddMemberDetails: CustomStringConvertible {
        /// Is group owner.
        open let isGroupOwner: Bool
        public init(isGroupOwner: Bool) {
            self.isGroupOwner = isGroupOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupAddMemberDetails) -> JSON {
            let output = [ 
            "is_group_owner": Serialization._BoolSerializer.serialize(value.isGroupOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let isGroupOwner = Serialization._BoolSerializer.deserialize(dict["is_group_owner"] ?? .null)
                    return GroupAddMemberDetails(isGroupOwner: isGroupOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the external ID for group.
    open class GroupChangeExternalIdDetails: CustomStringConvertible {
        /// Current external id.
        open let newValue: String
        /// Old external id.
        open let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeExternalIdDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return GroupChangeExternalIdDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed group management type.
    open class GroupChangeManagementTypeDetails: CustomStringConvertible {
        /// New group management type.
        open let newValue: TeamCommon.GroupManagementType
        /// Previous group management type. Might be missing due to historical data gap.
        open let previousValue: TeamCommon.GroupManagementType?
        public init(newValue: TeamCommon.GroupManagementType, previousValue: TeamCommon.GroupManagementType? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeManagementTypeDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeManagementTypeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeManagementTypeDetails) -> JSON {
            let output = [ 
            "new_value": TeamCommon.GroupManagementTypeSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamCommon.GroupManagementTypeSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeManagementTypeDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamCommon.GroupManagementTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamCommon.GroupManagementTypeSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GroupChangeManagementTypeDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the manager permissions belonging to a group member.
    open class GroupChangeMemberRoleDetails: CustomStringConvertible {
        /// Is group owner.
        open let isGroupOwner: Bool
        public init(isGroupOwner: Bool) {
            self.isGroupOwner = isGroupOwner
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "is_group_owner": Serialization._BoolSerializer.serialize(value.isGroupOwner),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let isGroupOwner = Serialization._BoolSerializer.deserialize(dict["is_group_owner"] ?? .null)
                    return GroupChangeMemberRoleDetails(isGroupOwner: isGroupOwner)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a group.
    open class GroupCreateDetails: CustomStringConvertible {
        /// Is company managed group. Might be missing due to historical data gap.
        open let isCompanyManaged: Bool?
        /// Group join policy.
        open let joinPolicy: TeamLog.GroupJoinPolicy
        public init(joinPolicy: TeamLog.GroupJoinPolicy, isCompanyManaged: Bool? = nil) {
            self.isCompanyManaged = isCompanyManaged
            self.joinPolicy = joinPolicy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupCreateDetails) -> JSON {
            let output = [ 
            "join_policy": TeamLog.GroupJoinPolicySerializer().serialize(value.joinPolicy),
            "is_company_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isCompanyManaged),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let joinPolicy = TeamLog.GroupJoinPolicySerializer().deserialize(dict["join_policy"] ?? .null)
                    let isCompanyManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_company_managed"] ?? .null)
                    return GroupCreateDetails(joinPolicy: joinPolicy, isCompanyManaged: isCompanyManaged)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted a group.
    open class GroupDeleteDetails: CustomStringConvertible {
        /// Is company managed group. Might be missing due to historical data gap.
        open let isCompanyManaged: Bool?
        public init(isCompanyManaged: Bool? = nil) {
            self.isCompanyManaged = isCompanyManaged
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupDeleteDetails) -> JSON {
            let output = [ 
            "is_company_managed": NullableSerializer(Serialization._BoolSerializer).serialize(value.isCompanyManaged),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let isCompanyManaged = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["is_company_managed"] ?? .null)
                    return GroupDeleteDetails(isCompanyManaged: isCompanyManaged)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupJoinPolicy union
    public enum GroupJoinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case open
        /// An unspecified error.
        case requestToJoin
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupJoinPolicySerializer().serialize(self)))"
        }
    }
    open class GroupJoinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupJoinPolicy) -> JSON {
            switch value {
                case .open:
                    var d = [String: JSON]()
                    d[".tag"] = .str("open")
                    return .dictionary(d)
                case .requestToJoin:
                    var d = [String: JSON]()
                    d[".tag"] = .str("request_to_join")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GroupJoinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "open":
                            return GroupJoinPolicy.open
                        case "request_to_join":
                            return GroupJoinPolicy.requestToJoin
                        case "other":
                            return GroupJoinPolicy.other
                        default:
                            return GroupJoinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Group's logged information.
    open class GroupLogInfo: CustomStringConvertible {
        /// The unique id of this group. Might be missing due to historical data gap.
        open let groupId: String?
        /// The name of this group.
        open let displayName: String
        /// External group ID. Might be missing due to historical data gap.
        open let externalId: String?
        public init(displayName: String, groupId: String? = nil, externalId: String? = nil) {
            nullableValidator(stringValidator())(groupId)
            self.groupId = groupId
            stringValidator()(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator())(externalId)
            self.externalId = externalId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupLogInfoSerializer().serialize(self)))"
        }
    }
    open class GroupLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupLogInfo) -> JSON {
            let output = [ 
            "display_name": Serialization._StringSerializer.serialize(value.displayName),
            "group_id": NullableSerializer(Serialization._StringSerializer).serialize(value.groupId),
            "external_id": NullableSerializer(Serialization._StringSerializer).serialize(value.externalId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupLogInfo {
            switch json {
                case .dictionary(let dict):
                    let displayName = Serialization._StringSerializer.deserialize(dict["display_name"] ?? .null)
                    let groupId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["group_id"] ?? .null)
                    let externalId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["external_id"] ?? .null)
                    return GroupLogInfo(displayName: displayName, groupId: groupId, externalId: externalId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Moved a group.
    open class GroupMovedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupMovedDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupMovedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupMovedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupMovedDetails {
            switch json {
                case .dictionary(_):
                    return GroupMovedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the external ID for group.
    open class GroupRemoveExternalIdDetails: CustomStringConvertible {
        /// Old external id.
        open let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveExternalIdDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveExternalIdDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveExternalIdDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveExternalIdDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return GroupRemoveExternalIdDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed team members from a group.
    open class GroupRemoveMemberDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRemoveMemberDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRemoveMemberDetails {
            switch json {
                case .dictionary(_):
                    return GroupRemoveMemberDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed a group.
    open class GroupRenameDetails: CustomStringConvertible {
        /// Previous display name.
        open let previousValue: String
        /// New display name.
        open let newValue: String
        public init(previousValue: String, newValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupRenameDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return GroupRenameDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can create groups.
    open class GroupUserManagementChangePolicyDetails: CustomStringConvertible {
        /// New group users management policy.
        open let newValue: TeamLog.GroupUserManagementPolicy
        /// Previous group users management policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.GroupUserManagementPolicy?
        public init(newValue: TeamLog.GroupUserManagementPolicy, previousValue: TeamLog.GroupUserManagementPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupUserManagementChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class GroupUserManagementChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupUserManagementChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.GroupUserManagementPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.GroupUserManagementPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> GroupUserManagementChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.GroupUserManagementPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.GroupUserManagementPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return GroupUserManagementChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The GroupUserManagementPolicy union
    public enum GroupUserManagementPolicy: CustomStringConvertible {
        /// An unspecified error.
        case adminsOnly
        /// An unspecified error.
        case allUsers
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(GroupUserManagementPolicySerializer().serialize(self)))"
        }
    }
    open class GroupUserManagementPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: GroupUserManagementPolicy) -> JSON {
            switch value {
                case .adminsOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("admins_only")
                    return .dictionary(d)
                case .allUsers:
                    var d = [String: JSON]()
                    d[".tag"] = .str("all_users")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> GroupUserManagementPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "admins_only":
                            return GroupUserManagementPolicy.adminsOnly
                        case "all_users":
                            return GroupUserManagementPolicy.allUsers
                        case "other":
                            return GroupUserManagementPolicy.other
                        default:
                            return GroupUserManagementPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Host details.
    open class HostLogInfo: CustomStringConvertible {
        /// Host ID. Might be missing due to historical data gap.
        open let hostId: UInt64?
        /// Host name. Might be missing due to historical data gap.
        open let hostName: String?
        public init(hostId: UInt64? = nil, hostName: String? = nil) {
            nullableValidator(comparableValidator())(hostId)
            self.hostId = hostId
            nullableValidator(stringValidator())(hostName)
            self.hostName = hostName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(HostLogInfoSerializer().serialize(self)))"
        }
    }
    open class HostLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: HostLogInfo) -> JSON {
            let output = [ 
            "host_id": NullableSerializer(Serialization._UInt64Serializer).serialize(value.hostId),
            "host_name": NullableSerializer(Serialization._StringSerializer).serialize(value.hostName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> HostLogInfo {
            switch json {
                case .dictionary(let dict):
                    let hostId = NullableSerializer(Serialization._UInt64Serializer).deserialize(dict["host_id"] ?? .null)
                    let hostName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["host_name"] ?? .null)
                    return HostLogInfo(hostId: hostId, hostName: hostName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Additional information relevant when a new member joins the team.
    open class JoinTeamDetails: CustomStringConvertible {
        /// Linked applications.
        open let linkedApps: Array<TeamLog.AppLogInfo>
        /// Linked devices.
        open let linkedDevices: Array<TeamLog.DeviceLogInfo>
        /// Linked shared folders.
        open let linkedSharedFolders: Array<TeamLog.FolderLogInfo>
        public init(linkedApps: Array<TeamLog.AppLogInfo>, linkedDevices: Array<TeamLog.DeviceLogInfo>, linkedSharedFolders: Array<TeamLog.FolderLogInfo>) {
            self.linkedApps = linkedApps
            self.linkedDevices = linkedDevices
            self.linkedSharedFolders = linkedSharedFolders
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(JoinTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class JoinTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: JoinTeamDetails) -> JSON {
            let output = [ 
            "linked_apps": ArraySerializer(TeamLog.AppLogInfoSerializer()).serialize(value.linkedApps),
            "linked_devices": ArraySerializer(TeamLog.DeviceLogInfoSerializer()).serialize(value.linkedDevices),
            "linked_shared_folders": ArraySerializer(TeamLog.FolderLogInfoSerializer()).serialize(value.linkedSharedFolders),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> JoinTeamDetails {
            switch json {
                case .dictionary(let dict):
                    let linkedApps = ArraySerializer(TeamLog.AppLogInfoSerializer()).deserialize(dict["linked_apps"] ?? .null)
                    let linkedDevices = ArraySerializer(TeamLog.DeviceLogInfoSerializer()).deserialize(dict["linked_devices"] ?? .null)
                    let linkedSharedFolders = ArraySerializer(TeamLog.FolderLogInfoSerializer()).deserialize(dict["linked_shared_folders"] ?? .null)
                    return JoinTeamDetails(linkedApps: linkedApps, linkedDevices: linkedDevices, linkedSharedFolders: linkedSharedFolders)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The LinkAudience union
    public enum LinkAudience: CustomStringConvertible {
        /// An unspecified error.
        case public_
        /// An unspecified error.
        case team
        /// An unspecified error.
        case members
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LinkAudienceSerializer().serialize(self)))"
        }
    }
    open class LinkAudienceSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LinkAudience) -> JSON {
            switch value {
                case .public_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("public")
                    return .dictionary(d)
                case .team:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team")
                    return .dictionary(d)
                case .members:
                    var d = [String: JSON]()
                    d[".tag"] = .str("members")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> LinkAudience {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "public":
                            return LinkAudience.public_
                        case "team":
                            return LinkAudience.team
                        case "members":
                            return LinkAudience.members
                        case "other":
                            return LinkAudience.other
                        default:
                            return LinkAudience.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Signed out.
    open class LogoutDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(LogoutDetailsSerializer().serialize(self)))"
        }
    }
    open class LogoutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: LogoutDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> LogoutDetails {
            switch json {
                case .dictionary(_):
                    return LogoutDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Set team member name when joining team.
    open class MemberAddNameDetails: CustomStringConvertible {
        /// User's name.
        open let value: TeamLog.UserNameLogInfo
        public init(value: TeamLog.UserNameLogInfo) {
            self.value = value
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberAddNameDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberAddNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberAddNameDetails) -> JSON {
            let output = [ 
            "value": TeamLog.UserNameLogInfoSerializer().serialize(value.value),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberAddNameDetails {
            switch json {
                case .dictionary(let dict):
                    let value = TeamLog.UserNameLogInfoSerializer().deserialize(dict["value"] ?? .null)
                    return MemberAddNameDetails(value: value)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Change the admin role belonging to team member.
    open class MemberChangeAdminRoleDetails: CustomStringConvertible {
        /// New admin role. This field is relevant when the admin role is changed or whenthe user role changes from no
        /// admin rights to with admin rights.
        open let newValue: TeamLog.AdminRole?
        /// Previous admin role. This field is relevant when the admin role is changed or when the admin role is
        /// removed.
        open let previousValue: TeamLog.AdminRole?
        public init(newValue: TeamLog.AdminRole? = nil, previousValue: TeamLog.AdminRole? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeAdminRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeAdminRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeAdminRoleDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.AdminRoleSerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.AdminRoleSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeAdminRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.AdminRoleSerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.AdminRoleSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeAdminRoleDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member email address.
    open class MemberChangeEmailDetails: CustomStringConvertible {
        /// New email.
        open let newValue: String
        /// Previous email. Might be missing due to historical data gap.
        open let previousValue: String?
        public init(newValue: String, previousValue: String? = nil) {
            stringValidator(maxLength: 255, pattern: "^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$")(newValue)
            self.newValue = newValue
            nullableValidator(stringValidator(maxLength: 255, pattern: "^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"))(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeEmailDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeEmailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeEmailDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": NullableSerializer(Serialization._StringSerializer).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeEmailDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeEmailDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the membership type (limited vs full) for team member.
    open class MemberChangeMembershipTypeDetails: CustomStringConvertible {
        /// Previous membership type.
        open let prevValue: TeamLog.TeamMembershipType
        /// New membership type.
        open let newValue: TeamLog.TeamMembershipType
        public init(prevValue: TeamLog.TeamMembershipType, newValue: TeamLog.TeamMembershipType) {
            self.prevValue = prevValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeMembershipTypeDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeMembershipTypeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeMembershipTypeDetails) -> JSON {
            let output = [ 
            "prev_value": TeamLog.TeamMembershipTypeSerializer().serialize(value.prevValue),
            "new_value": TeamLog.TeamMembershipTypeSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeMembershipTypeDetails {
            switch json {
                case .dictionary(let dict):
                    let prevValue = TeamLog.TeamMembershipTypeSerializer().deserialize(dict["prev_value"] ?? .null)
                    let newValue = TeamLog.TeamMembershipTypeSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberChangeMembershipTypeDetails(prevValue: prevValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed team member name.
    open class MemberChangeNameDetails: CustomStringConvertible {
        /// New user's name.
        open let newValue: TeamLog.UserNameLogInfo
        /// Previous user's name. Might be missing due to historical data gap.
        open let previousValue: TeamLog.UserNameLogInfo?
        public init(newValue: TeamLog.UserNameLogInfo, previousValue: TeamLog.UserNameLogInfo? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeNameDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeNameDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.UserNameLogInfoSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.UserNameLogInfoSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeNameDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.UserNameLogInfoSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.UserNameLogInfoSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberChangeNameDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the membership status of a team member.
    open class MemberChangeStatusDetails: CustomStringConvertible {
        /// Previous member status. Might be missing due to historical data gap.
        open let previousValue: TeamLog.MemberStatus?
        /// New member status.
        open let newValue: TeamLog.MemberStatus
        /// Additional information relevant when a new member joins the team.
        open let teamJoinDetails: TeamLog.JoinTeamDetails?
        public init(newValue: TeamLog.MemberStatus, previousValue: TeamLog.MemberStatus? = nil, teamJoinDetails: TeamLog.JoinTeamDetails? = nil) {
            self.previousValue = previousValue
            self.newValue = newValue
            self.teamJoinDetails = teamJoinDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberStatusSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberStatusSerializer()).serialize(value.previousValue),
            "team_join_details": NullableSerializer(TeamLog.JoinTeamDetailsSerializer()).serialize(value.teamJoinDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberStatusSerializer()).deserialize(dict["previous_value"] ?? .null)
                    let teamJoinDetails = NullableSerializer(TeamLog.JoinTeamDetailsSerializer()).deserialize(dict["team_join_details"] ?? .null)
                    return MemberChangeStatusDetails(newValue: newValue, previousValue: previousValue, teamJoinDetails: teamJoinDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted contents of a removed team member account.
    open class MemberPermanentlyDeleteAccountContentsDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberPermanentlyDeleteAccountContentsDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberPermanentlyDeleteAccountContentsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberPermanentlyDeleteAccountContentsDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberPermanentlyDeleteAccountContentsDetails {
            switch json {
                case .dictionary(_):
                    return MemberPermanentlyDeleteAccountContentsDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether users can find the team when not invited.
    open class MemberRequestsChangePolicyDetails: CustomStringConvertible {
        /// New member change requests policy.
        open let newValue: TeamLog.MemberRequestsPolicy
        /// Previous member change requests policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.MemberRequestsPolicy?
        public init(newValue: TeamLog.MemberRequestsPolicy, previousValue: TeamLog.MemberRequestsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRequestsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberRequestsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRequestsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberRequestsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberRequestsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberRequestsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberRequestsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberRequestsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberRequestsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberRequestsPolicy union
    public enum MemberRequestsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case autoAccept
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case requireApproval
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberRequestsPolicySerializer().serialize(self)))"
        }
    }
    open class MemberRequestsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberRequestsPolicy) -> JSON {
            switch value {
                case .autoAccept:
                    var d = [String: JSON]()
                    d[".tag"] = .str("auto_accept")
                    return .dictionary(d)
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .requireApproval:
                    var d = [String: JSON]()
                    d[".tag"] = .str("require_approval")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberRequestsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "auto_accept":
                            return MemberRequestsPolicy.autoAccept
                        case "disabled":
                            return MemberRequestsPolicy.disabled
                        case "require_approval":
                            return MemberRequestsPolicy.requireApproval
                        case "other":
                            return MemberRequestsPolicy.other
                        default:
                            return MemberRequestsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added an exception for one or more team members to bypass space limits imposed by policy.
    open class MemberSpaceLimitsAddExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsAddExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsAddExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsAddExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsAddExceptionDetails {
            switch json {
                case .dictionary(_):
                    return MemberSpaceLimitsAddExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the storage limits applied to team members by policy.
    open class MemberSpaceLimitsChangePolicyDetails: CustomStringConvertible {
        /// Previous storage limits policy.
        open let previousValue: TeamLog.SpaceLimitsLevel
        /// New storage limits policy.
        open let newValue: TeamLog.SpaceLimitsLevel
        public init(previousValue: TeamLog.SpaceLimitsLevel, newValue: TeamLog.SpaceLimitsLevel) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangePolicyDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SpaceLimitsLevelSerializer().serialize(value.previousValue),
            "new_value": TeamLog.SpaceLimitsLevelSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SpaceLimitsLevelSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SpaceLimitsLevelSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangePolicyDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the status with respect to whether the team member is under or over storage quota specified by policy.
    open class MemberSpaceLimitsChangeStatusDetails: CustomStringConvertible {
        /// Previous storage quota status.
        open let previousValue: TeamLog.SpaceLimitsStatus
        /// New storage quota status.
        open let newValue: TeamLog.SpaceLimitsStatus
        public init(previousValue: TeamLog.SpaceLimitsStatus, newValue: TeamLog.SpaceLimitsStatus) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsChangeStatusDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SpaceLimitsStatusSerializer().serialize(value.previousValue),
            "new_value": TeamLog.SpaceLimitsStatusSerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SpaceLimitsStatusSerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SpaceLimitsStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    return MemberSpaceLimitsChangeStatusDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed an exception for one or more team members to bypass space limits imposed by policy.
    open class MemberSpaceLimitsRemoveExceptionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSpaceLimitsRemoveExceptionDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSpaceLimitsRemoveExceptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSpaceLimitsRemoveExceptionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSpaceLimitsRemoveExceptionDetails {
            switch json {
                case .dictionary(_):
                    return MemberSpaceLimitsRemoveExceptionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The MemberStatus union
    public enum MemberStatus: CustomStringConvertible {
        /// An unspecified error.
        case notJoined
        /// An unspecified error.
        case invited
        /// An unspecified error.
        case active
        /// An unspecified error.
        case suspended
        /// An unspecified error.
        case removed
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberStatusSerializer().serialize(self)))"
        }
    }
    open class MemberStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberStatus) -> JSON {
            switch value {
                case .notJoined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("not_joined")
                    return .dictionary(d)
                case .invited:
                    var d = [String: JSON]()
                    d[".tag"] = .str("invited")
                    return .dictionary(d)
                case .active:
                    var d = [String: JSON]()
                    d[".tag"] = .str("active")
                    return .dictionary(d)
                case .suspended:
                    var d = [String: JSON]()
                    d[".tag"] = .str("suspended")
                    return .dictionary(d)
                case .removed:
                    var d = [String: JSON]()
                    d[".tag"] = .str("removed")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "not_joined":
                            return MemberStatus.notJoined
                        case "invited":
                            return MemberStatus.invited
                        case "active":
                            return MemberStatus.active
                        case "suspended":
                            return MemberStatus.suspended
                        case "removed":
                            return MemberStatus.removed
                        case "other":
                            return MemberStatus.other
                        default:
                            return MemberStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Suggested a new team member to be added to the team.
    open class MemberSuggestDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestDetails {
            switch json {
                case .dictionary(_):
                    return MemberSuggestDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled the option for team members to suggest new members to add to the team.
    open class MemberSuggestionsChangePolicyDetails: CustomStringConvertible {
        /// New team member suggestions policy.
        open let newValue: TeamLog.MemberSuggestionsPolicy
        /// Previous team member suggestions policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.MemberSuggestionsPolicy?
        public init(newValue: TeamLog.MemberSuggestionsPolicy, previousValue: TeamLog.MemberSuggestionsPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestionsChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberSuggestionsChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestionsChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MemberSuggestionsPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MemberSuggestionsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberSuggestionsChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MemberSuggestionsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MemberSuggestionsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MemberSuggestionsChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Member suggestions policy
    public enum MemberSuggestionsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberSuggestionsPolicySerializer().serialize(self)))"
        }
    }
    open class MemberSuggestionsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberSuggestionsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MemberSuggestionsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return MemberSuggestionsPolicy.disabled
                        case "enabled":
                            return MemberSuggestionsPolicy.enabled
                        case "other":
                            return MemberSuggestionsPolicy.other
                        default:
                            return MemberSuggestionsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Transferred contents of a removed team member account to another member.
    open class MemberTransferAccountContentsDetails: CustomStringConvertible {
        /// Source participant position in the Participants list.
        open let srcParticipantIndex: UInt64
        /// Destination participant position in the Participants list.
        open let destParticipantIndex: UInt64
        public init(srcParticipantIndex: UInt64, destParticipantIndex: UInt64) {
            comparableValidator()(srcParticipantIndex)
            self.srcParticipantIndex = srcParticipantIndex
            comparableValidator()(destParticipantIndex)
            self.destParticipantIndex = destParticipantIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MemberTransferAccountContentsDetailsSerializer().serialize(self)))"
        }
    }
    open class MemberTransferAccountContentsDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MemberTransferAccountContentsDetails) -> JSON {
            let output = [ 
            "src_participant_index": Serialization._UInt64Serializer.serialize(value.srcParticipantIndex),
            "dest_participant_index": Serialization._UInt64Serializer.serialize(value.destParticipantIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MemberTransferAccountContentsDetails {
            switch json {
                case .dictionary(let dict):
                    let srcParticipantIndex = Serialization._UInt64Serializer.deserialize(dict["src_participant_index"] ?? .null)
                    let destParticipantIndex = Serialization._UInt64Serializer.deserialize(dict["dest_participant_index"] ?? .null)
                    return MemberTransferAccountContentsDetails(srcParticipantIndex: srcParticipantIndex, destParticipantIndex: destParticipantIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled the Microsoft Office add-in, which lets team members save files to Dropbox directly from
    /// Microsoft Office.
    open class MicrosoftOfficeAddinChangePolicyDetails: CustomStringConvertible {
        /// New Microsoft Office addin policy.
        open let newValue: TeamLog.MicrosoftOfficeAddinPolicy
        /// Previous Microsoft Office addin policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.MicrosoftOfficeAddinPolicy?
        public init(newValue: TeamLog.MicrosoftOfficeAddinPolicy, previousValue: TeamLog.MicrosoftOfficeAddinPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MicrosoftOfficeAddinChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class MicrosoftOfficeAddinChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MicrosoftOfficeAddinChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.MicrosoftOfficeAddinPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.MicrosoftOfficeAddinPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MicrosoftOfficeAddinChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.MicrosoftOfficeAddinPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.MicrosoftOfficeAddinPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return MicrosoftOfficeAddinChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Microsoft Office addin policy
    public enum MicrosoftOfficeAddinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MicrosoftOfficeAddinPolicySerializer().serialize(self)))"
        }
    }
    open class MicrosoftOfficeAddinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MicrosoftOfficeAddinPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> MicrosoftOfficeAddinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return MicrosoftOfficeAddinPolicy.disabled
                        case "enabled":
                            return MicrosoftOfficeAddinPolicy.enabled
                        case "other":
                            return MicrosoftOfficeAddinPolicy.other
                        default:
                            return MicrosoftOfficeAddinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// An indication that an event was returned with missing details
    open class MissingDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MissingDetailsSerializer().serialize(self)))"
        }
    }
    open class MissingDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MissingDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MissingDetails {
            switch json {
                case .dictionary(_):
                    return MissingDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Mobile session.
    open class MobileSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(MobileSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class MobileSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: MobileSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> MobileSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return MobileSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Namespace relative path details.
    open class NamespaceRelativePathLogInfo: CustomStringConvertible {
        /// Namespace ID. Might be missing due to historical data gap.
        open let nsId: String?
        /// A path relative to the specified namespace ID. Might be missing due to historical data gap.
        open let relativePath: String?
        public init(nsId: String? = nil, relativePath: String? = nil) {
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(nsId)
            self.nsId = nsId
            nullableValidator(stringValidator(pattern: "/(.|[\\r\\n])*"))(relativePath)
            self.relativePath = relativePath
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NamespaceRelativePathLogInfoSerializer().serialize(self)))"
        }
    }
    open class NamespaceRelativePathLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NamespaceRelativePathLogInfo) -> JSON {
            let output = [ 
            "ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.nsId),
            "relative_path": NullableSerializer(Serialization._StringSerializer).serialize(value.relativePath),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NamespaceRelativePathLogInfo {
            switch json {
                case .dictionary(let dict):
                    let nsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["ns_id"] ?? .null)
                    let relativePath = NullableSerializer(Serialization._StringSerializer).deserialize(dict["relative_path"] ?? .null)
                    return NamespaceRelativePathLogInfo(nsId: nsId, relativePath: relativePath)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled network control.
    open class NetworkControlChangePolicyDetails: CustomStringConvertible {
        /// New network control policy.
        open let newValue: TeamLog.NetworkControlPolicy
        /// Previous network control policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.NetworkControlPolicy?
        public init(newValue: TeamLog.NetworkControlPolicy, previousValue: TeamLog.NetworkControlPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NetworkControlChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class NetworkControlChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NetworkControlChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.NetworkControlPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.NetworkControlPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NetworkControlChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.NetworkControlPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.NetworkControlPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return NetworkControlChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Network control policy
    public enum NetworkControlPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NetworkControlPolicySerializer().serialize(self)))"
        }
    }
    open class NetworkControlPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NetworkControlPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> NetworkControlPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return NetworkControlPolicy.disabled
                        case "enabled":
                            return NetworkControlPolicy.enabled
                        case "other":
                            return NetworkControlPolicy.other
                        default:
                            return NetworkControlPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// User's logged information.
    open class UserLogInfo: CustomStringConvertible {
        /// User unique ID. Might be missing due to historical data gap.
        open let accountId: String?
        /// User display name. Might be missing due to historical data gap.
        open let displayName: String?
        /// User email address. Might be missing due to historical data gap.
        open let email: String?
        public init(accountId: String? = nil, displayName: String? = nil, email: String? = nil) {
            nullableValidator(stringValidator(minLength: 40, maxLength: 40))(accountId)
            self.accountId = accountId
            nullableValidator(stringValidator(minLength: 1))(displayName)
            self.displayName = displayName
            nullableValidator(stringValidator(maxLength: 255, pattern: "^['&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*.[A-Za-z]{2,15}$"))(email)
            self.email = email
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserLogInfo) -> JSON {
            var output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            ]
            switch value {
                case let teamMember as TeamLog.TeamMemberLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.TeamMemberLogInfoSerializer().serialize(teamMember)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("team_member")
                case let nonTeamMember as TeamLog.NonTeamMemberLogInfo:
                    for (k, v) in Serialization.getFields(TeamLog.NonTeamMemberLogInfoSerializer().serialize(nonTeamMember)) {
                        output[k] = v
                    }
                    output[".tag"] = .str("non_team_member")
                default: fatalError("Tried to serialize unexpected subtype")
            }
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserLogInfo {
            switch json {
                case .dictionary(let dict):
                    let tag = Serialization.getTag(dict)
                    switch tag {
                        case "team_member":
                            return TeamLog.TeamMemberLogInfoSerializer().deserialize(json)
                        case "non_team_member":
                            return TeamLog.NonTeamMemberLogInfoSerializer().deserialize(json)
                        default:
                            let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                            let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                            let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                            return UserLogInfo(accountId: accountId, displayName: displayName, email: email)
                    }
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Non team member's logged information.
    open class NonTeamMemberLogInfo: TeamLog.UserLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NonTeamMemberLogInfoSerializer().serialize(self)))"
        }
    }
    open class NonTeamMemberLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NonTeamMemberLogInfo) -> JSON {
            let output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NonTeamMemberLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                    return NonTeamMemberLogInfo(accountId: accountId, displayName: displayName, email: email)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed a Paper document to be invite-only.
    open class NoteAclInviteOnlyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclInviteOnlyDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclInviteOnlyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclInviteOnlyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclInviteOnlyDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclInviteOnlyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed a Paper document to be link accessible.
    open class NoteAclLinkDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclLinkDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclLinkDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclLinkDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed a Paper document to be link accessible for the team.
    open class NoteAclTeamLinkDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteAclTeamLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteAclTeamLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteAclTeamLinkDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteAclTeamLinkDetails {
            switch json {
                case .dictionary(_):
                    return NoteAclTeamLinkDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper document received.
    open class NoteShareReceiveDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteShareReceiveDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteShareReceiveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteShareReceiveDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteShareReceiveDetails {
            switch json {
                case .dictionary(_):
                    return NoteShareReceiveDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared a Paper doc.
    open class NoteSharedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(NoteSharedDetailsSerializer().serialize(self)))"
        }
    }
    open class NoteSharedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: NoteSharedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> NoteSharedDetails {
            switch json {
                case .dictionary(_):
                    return NoteSharedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opened a shared Paper doc.
    open class OpenNoteSharedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OpenNoteSharedDetailsSerializer().serialize(self)))"
        }
    }
    open class OpenNoteSharedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OpenNoteSharedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OpenNoteSharedDetails {
            switch json {
                case .dictionary(_):
                    return OpenNoteSharedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The origin from which the actor performed the action.
    open class OriginLogInfo: CustomStringConvertible {
        /// Geographic location details.
        open let geoLocation: TeamLog.GeoLocationLogInfo?
        /// Host details.
        open let host: TeamLog.HostLogInfo?
        /// The method that was used to perform the action.
        open let accessMethod: TeamLog.AccessMethodLogInfo
        public init(accessMethod: TeamLog.AccessMethodLogInfo, geoLocation: TeamLog.GeoLocationLogInfo? = nil, host: TeamLog.HostLogInfo? = nil) {
            self.geoLocation = geoLocation
            self.host = host
            self.accessMethod = accessMethod
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(OriginLogInfoSerializer().serialize(self)))"
        }
    }
    open class OriginLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: OriginLogInfo) -> JSON {
            let output = [ 
            "access_method": TeamLog.AccessMethodLogInfoSerializer().serialize(value.accessMethod),
            "geo_location": NullableSerializer(TeamLog.GeoLocationLogInfoSerializer()).serialize(value.geoLocation),
            "host": NullableSerializer(TeamLog.HostLogInfoSerializer()).serialize(value.host),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> OriginLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accessMethod = TeamLog.AccessMethodLogInfoSerializer().deserialize(dict["access_method"] ?? .null)
                    let geoLocation = NullableSerializer(TeamLog.GeoLocationLogInfoSerializer()).deserialize(dict["geo_location"] ?? .null)
                    let host = NullableSerializer(TeamLog.HostLogInfoSerializer()).deserialize(dict["host"] ?? .null)
                    return OriginLogInfo(accessMethod: accessMethod, geoLocation: geoLocation, host: host)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperAccessType union
    public enum PaperAccessType: CustomStringConvertible {
        /// An unspecified error.
        case viewer
        /// An unspecified error.
        case commenter
        /// An unspecified error.
        case editor
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperAccessTypeSerializer().serialize(self)))"
        }
    }
    open class PaperAccessTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperAccessType) -> JSON {
            switch value {
                case .viewer:
                    var d = [String: JSON]()
                    d[".tag"] = .str("viewer")
                    return .dictionary(d)
                case .commenter:
                    var d = [String: JSON]()
                    d[".tag"] = .str("commenter")
                    return .dictionary(d)
                case .editor:
                    var d = [String: JSON]()
                    d[".tag"] = .str("editor")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperAccessType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "viewer":
                            return PaperAccessType.viewer
                        case "commenter":
                            return PaperAccessType.commenter
                        case "editor":
                            return PaperAccessType.editor
                        case "other":
                            return PaperAccessType.other
                        default:
                            return PaperAccessType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Exported all Paper documents in the team.
    open class PaperAdminExportStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperAdminExportStartDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperAdminExportStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperAdminExportStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperAdminExportStartDetails {
            switch json {
                case .dictionary(_):
                    return PaperAdminExportStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether Dropbox Paper, when enabled, is deployed to all teams or to specific members of the team.
    open class PaperChangeDeploymentPolicyDetails: CustomStringConvertible {
        /// New Dropbox Paper deployment policy.
        open let newValue: TeamPolicies.PaperDeploymentPolicy
        /// Previous Dropbox Paper deployment policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.PaperDeploymentPolicy?
        public init(newValue: TeamPolicies.PaperDeploymentPolicy, previousValue: TeamPolicies.PaperDeploymentPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeDeploymentPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeDeploymentPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeDeploymentPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.PaperDeploymentPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.PaperDeploymentPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeDeploymentPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.PaperDeploymentPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.PaperDeploymentPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangeDeploymentPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether non team members can view Paper documents using a link.
    open class PaperChangeMemberLinkPolicyDetails: CustomStringConvertible {
        /// New paper external link accessibility policy.
        open let newValue: TeamLog.PaperMemberPolicy
        public init(newValue: TeamLog.PaperMemberPolicy) {
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberLinkPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperMemberPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return PaperChangeMemberLinkPolicyDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether team members can share Paper documents externally (i.e. outside the team), and if so, whether
    /// they should be accessible only by team members or anyone by default.
    open class PaperChangeMemberPolicyDetails: CustomStringConvertible {
        /// New paper external accessibility policy.
        open let newValue: TeamLog.PaperMemberPolicy
        /// Previous paper external accessibility policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.PaperMemberPolicy?
        public init(newValue: TeamLog.PaperMemberPolicy, previousValue: TeamLog.PaperMemberPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangeMemberPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangeMemberPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangeMemberPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.PaperMemberPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.PaperMemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangeMemberPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.PaperMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.PaperMemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangeMemberPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled Dropbox Paper for the team.
    open class PaperChangePolicyDetails: CustomStringConvertible {
        /// New Dropbox Paper policy.
        open let newValue: TeamPolicies.PaperEnabledPolicy
        /// Previous Dropbox Paper policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.PaperEnabledPolicy?
        public init(newValue: TeamPolicies.PaperEnabledPolicy, previousValue: TeamPolicies.PaperEnabledPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.PaperEnabledPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.PaperEnabledPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.PaperEnabledPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.PaperEnabledPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PaperChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added users to the membership of a Paper doc or folder.
    open class PaperContentAddMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentAddMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added Paper doc or folder to a folder.
    open class PaperContentAddToFolderDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Parent asset position in the Assets list.
        open let parentAssetIndex: UInt64
        public init(eventUuid: String, targetAssetIndex: UInt64, parentAssetIndex: UInt64) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            comparableValidator()(parentAssetIndex)
            self.parentAssetIndex = parentAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentAddToFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentAddToFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentAddToFolderDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "parent_asset_index": Serialization._UInt64Serializer.serialize(value.parentAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentAddToFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let parentAssetIndex = Serialization._UInt64Serializer.deserialize(dict["parent_asset_index"] ?? .null)
                    return PaperContentAddToFolderDetails(eventUuid: eventUuid, targetAssetIndex: targetAssetIndex, parentAssetIndex: parentAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Archived Paper doc or folder.
    open class PaperContentArchiveDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentArchiveDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentArchiveDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentArchiveDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentArchiveDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentArchiveDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a Paper doc or folder.
    open class PaperContentCreateDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentCreateDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentCreateDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted a Paper doc or folder.
    open class PaperContentPermanentlyDeleteDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentPermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentPermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentPermanentlyDeleteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentPermanentlyDeleteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentPermanentlyDeleteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed Paper doc or folder from a folder.
    open class PaperContentRemoveFromFolderDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveFromFolderDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveFromFolderDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveFromFolderDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveFromFolderDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRemoveFromFolderDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a user from the membership of a Paper doc or folder.
    open class PaperContentRemoveMemberDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRemoveMemberDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRemoveMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRemoveMemberDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed Paper doc or folder.
    open class PaperContentRenameDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRenameDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRenameDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored an archived Paper doc or folder.
    open class PaperContentRestoreDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperContentRestoreDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperContentRestoreDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperContentRestoreDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperContentRestoreDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperContentRestoreDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a Paper doc comment.
    open class PaperDocAddCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocAddCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocAddCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocAddCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocAddCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocAddCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the access type of a Paper doc member.
    open class PaperDocChangeMemberRoleDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Paper doc access type.
        open let accessType: TeamLog.PaperAccessType
        public init(eventUuid: String, accessType: TeamLog.PaperAccessType) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            self.accessType = accessType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "access_type": TeamLog.PaperAccessTypeSerializer().serialize(value.accessType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let accessType = TeamLog.PaperAccessTypeSerializer().deserialize(dict["access_type"] ?? .null)
                    return PaperDocChangeMemberRoleDetails(eventUuid: eventUuid, accessType: accessType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the sharing policy for Paper doc.
    open class PaperDocChangeSharingPolicyDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Sharing policy with external users. Might be missing due to historical data gap.
        open let publicSharingPolicy: String?
        /// Sharing policy with team. Might be missing due to historical data gap.
        open let teamSharingPolicy: String?
        public init(eventUuid: String, publicSharingPolicy: String? = nil, teamSharingPolicy: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(publicSharingPolicy)
            self.publicSharingPolicy = publicSharingPolicy
            nullableValidator(stringValidator())(teamSharingPolicy)
            self.teamSharingPolicy = teamSharingPolicy
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSharingPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSharingPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSharingPolicyDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "public_sharing_policy": NullableSerializer(Serialization._StringSerializer).serialize(value.publicSharingPolicy),
            "team_sharing_policy": NullableSerializer(Serialization._StringSerializer).serialize(value.teamSharingPolicy),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSharingPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let publicSharingPolicy = NullableSerializer(Serialization._StringSerializer).deserialize(dict["public_sharing_policy"] ?? .null)
                    let teamSharingPolicy = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_sharing_policy"] ?? .null)
                    return PaperDocChangeSharingPolicyDetails(eventUuid: eventUuid, publicSharingPolicy: publicSharingPolicy, teamSharingPolicy: teamSharingPolicy)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed or unfollowed a Paper doc.
    open class PaperDocChangeSubscriptionDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// New doc subscription level.
        open let newSubscriptionLevel: String
        /// Previous doc subscription level. Might be missing due to historical data gap.
        open let previousSubscriptionLevel: String?
        public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(newSubscriptionLevel)
            self.newSubscriptionLevel = newSubscriptionLevel
            nullableValidator(stringValidator())(previousSubscriptionLevel)
            self.previousSubscriptionLevel = previousSubscriptionLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocChangeSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocChangeSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocChangeSubscriptionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_subscription_level": Serialization._StringSerializer.serialize(value.newSubscriptionLevel),
            "previous_subscription_level": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSubscriptionLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocChangeSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newSubscriptionLevel = Serialization._StringSerializer.deserialize(dict["new_subscription_level"] ?? .null)
                    let previousSubscriptionLevel = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_subscription_level"] ?? .null)
                    return PaperDocChangeSubscriptionDetails(eventUuid: eventUuid, newSubscriptionLevel: newSubscriptionLevel, previousSubscriptionLevel: previousSubscriptionLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted a Paper doc comment.
    open class PaperDocDeleteCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeleteCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeleteCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeleteCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeleteCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocDeleteCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc archived.
    open class PaperDocDeletedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDeletedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocDeletedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded a Paper doc in a particular output format.
    open class PaperDocDownloadDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Export file format.
        open let exportFileFormat: TeamLog.PaperDownloadFormat
        public init(eventUuid: String, exportFileFormat: TeamLog.PaperDownloadFormat) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            self.exportFileFormat = exportFileFormat
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocDownloadDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "export_file_format": TeamLog.PaperDownloadFormatSerializer().serialize(value.exportFileFormat),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let exportFileFormat = TeamLog.PaperDownloadFormatSerializer().deserialize(dict["export_file_format"] ?? .null)
                    return PaperDocDownloadDetails(eventUuid: eventUuid, exportFileFormat: exportFileFormat)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited a Paper doc comment.
    open class PaperDocEditCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocEditCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Edited a Paper doc.
    open class PaperDocEditDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocEditDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocEditDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocEditDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocEditDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocEditDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed a Paper doc.
    open class PaperDocFollowedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocFollowedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocFollowedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocFollowedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocFollowedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocFollowedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Mentioned a member in a Paper doc.
    open class PaperDocMentionDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocMentionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocMentionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocMentionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocMentionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocMentionDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested to be a member on a Paper doc.
    open class PaperDocRequestAccessDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRequestAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocRequestAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRequestAccessDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRequestAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocRequestAccessDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc comment resolved.
    open class PaperDocResolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocResolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocResolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocResolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocResolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocResolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Restored a Paper doc to previous revision.
    open class PaperDocRevertDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocRevertDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocRevertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocRevertDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocRevertDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocRevertDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc link shared via slack.
    open class PaperDocSlackShareDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocSlackShareDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocSlackShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocSlackShareDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocSlackShareDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocSlackShareDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc shared with team member.
    open class PaperDocTeamInviteDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTeamInviteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocTeamInviteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc trashed.
    open class PaperDocTrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocTrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocTrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocTrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocTrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocTrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unresolved a Paper doc comment.
    open class PaperDocUnresolveCommentDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// Comment text. Might be missing due to historical data gap.
        open let commentText: String?
        public init(eventUuid: String, commentText: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            nullableValidator(stringValidator())(commentText)
            self.commentText = commentText
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUnresolveCommentDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocUnresolveCommentDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUnresolveCommentDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "comment_text": NullableSerializer(Serialization._StringSerializer).serialize(value.commentText),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUnresolveCommentDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let commentText = NullableSerializer(Serialization._StringSerializer).deserialize(dict["comment_text"] ?? .null)
                    return PaperDocUnresolveCommentDetails(eventUuid: eventUuid, commentText: commentText)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper doc untrashed.
    open class PaperDocUntrashedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocUntrashedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocUntrashedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocUntrashedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocUntrashedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocUntrashedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Viewed Paper doc.
    open class PaperDocViewDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocViewDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperDocViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocViewDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocViewDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperDocViewDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper document's logged information.
    open class PaperDocumentLogInfo: CustomStringConvertible {
        /// Papers document Id.
        open let docId: String
        /// Paper document title.
        open let docTitle: String
        public init(docId: String, docTitle: String) {
            stringValidator()(docId)
            self.docId = docId
            stringValidator()(docTitle)
            self.docTitle = docTitle
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDocumentLogInfoSerializer().serialize(self)))"
        }
    }
    open class PaperDocumentLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDocumentLogInfo) -> JSON {
            let output = [ 
            "doc_id": Serialization._StringSerializer.serialize(value.docId),
            "doc_title": Serialization._StringSerializer.serialize(value.docTitle),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperDocumentLogInfo {
            switch json {
                case .dictionary(let dict):
                    let docId = Serialization._StringSerializer.deserialize(dict["doc_id"] ?? .null)
                    let docTitle = Serialization._StringSerializer.deserialize(dict["doc_title"] ?? .null)
                    return PaperDocumentLogInfo(docId: docId, docTitle: docTitle)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PaperDownloadFormat union
    public enum PaperDownloadFormat: CustomStringConvertible {
        /// An unspecified error.
        case docx
        /// An unspecified error.
        case html
        /// An unspecified error.
        case markdown
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperDownloadFormatSerializer().serialize(self)))"
        }
    }
    open class PaperDownloadFormatSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperDownloadFormat) -> JSON {
            switch value {
                case .docx:
                    var d = [String: JSON]()
                    d[".tag"] = .str("docx")
                    return .dictionary(d)
                case .html:
                    var d = [String: JSON]()
                    d[".tag"] = .str("html")
                    return .dictionary(d)
                case .markdown:
                    var d = [String: JSON]()
                    d[".tag"] = .str("markdown")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperDownloadFormat {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "docx":
                            return PaperDownloadFormat.docx
                        case "html":
                            return PaperDownloadFormat.html
                        case "markdown":
                            return PaperDownloadFormat.markdown
                        case "other":
                            return PaperDownloadFormat.other
                        default:
                            return PaperDownloadFormat.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Users added to Paper enabled users list.
    open class PaperEnabledUsersGroupAdditionDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupAdditionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupAdditionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupAdditionDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupAdditionDetails {
            switch json {
                case .dictionary(_):
                    return PaperEnabledUsersGroupAdditionDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Users removed from Paper enabled users list.
    open class PaperEnabledUsersGroupRemovalDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperEnabledUsersGroupRemovalDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperEnabledUsersGroupRemovalDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperEnabledUsersGroupRemovalDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperEnabledUsersGroupRemovalDetails {
            switch json {
                case .dictionary(_):
                    return PaperEnabledUsersGroupRemovalDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper external sharing policy changed: anyone.
    open class PaperExternalViewAllowDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewAllowDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewAllowDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewAllowDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewAllowDetails {
            switch json {
                case .dictionary(_):
                    return PaperExternalViewAllowDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper external sharing policy changed: default team.
    open class PaperExternalViewDefaultTeamDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewDefaultTeamDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewDefaultTeamDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewDefaultTeamDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewDefaultTeamDetails {
            switch json {
                case .dictionary(_):
                    return PaperExternalViewDefaultTeamDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper external sharing policy changed: team-only.
    open class PaperExternalViewForbidDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperExternalViewForbidDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperExternalViewForbidDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperExternalViewForbidDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperExternalViewForbidDetails {
            switch json {
                case .dictionary(_):
                    return PaperExternalViewForbidDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed or unfollowed a Paper folder.
    open class PaperFolderChangeSubscriptionDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        /// New folder subscription level.
        open let newSubscriptionLevel: String
        /// Previous folder subscription level. Might be missing due to historical data gap.
        open let previousSubscriptionLevel: String?
        public init(eventUuid: String, newSubscriptionLevel: String, previousSubscriptionLevel: String? = nil) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
            stringValidator()(newSubscriptionLevel)
            self.newSubscriptionLevel = newSubscriptionLevel
            nullableValidator(stringValidator())(previousSubscriptionLevel)
            self.previousSubscriptionLevel = previousSubscriptionLevel
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderChangeSubscriptionDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderChangeSubscriptionDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderChangeSubscriptionDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            "new_subscription_level": Serialization._StringSerializer.serialize(value.newSubscriptionLevel),
            "previous_subscription_level": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSubscriptionLevel),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderChangeSubscriptionDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    let newSubscriptionLevel = Serialization._StringSerializer.deserialize(dict["new_subscription_level"] ?? .null)
                    let previousSubscriptionLevel = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_subscription_level"] ?? .null)
                    return PaperFolderChangeSubscriptionDetails(eventUuid: eventUuid, newSubscriptionLevel: newSubscriptionLevel, previousSubscriptionLevel: previousSubscriptionLevel)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper folder archived.
    open class PaperFolderDeletedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderDeletedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderDeletedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderDeletedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderDeletedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderDeletedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Followed a Paper folder.
    open class PaperFolderFollowedDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderFollowedDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderFollowedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderFollowedDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderFollowedDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderFollowedDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper folder's logged information.
    open class PaperFolderLogInfo: CustomStringConvertible {
        /// Papers folder Id.
        open let folderId: String
        /// Paper folder name.
        open let folderName: String
        public init(folderId: String, folderName: String) {
            stringValidator()(folderId)
            self.folderId = folderId
            stringValidator()(folderName)
            self.folderName = folderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderLogInfoSerializer().serialize(self)))"
        }
    }
    open class PaperFolderLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderLogInfo) -> JSON {
            let output = [ 
            "folder_id": Serialization._StringSerializer.serialize(value.folderId),
            "folder_name": Serialization._StringSerializer.serialize(value.folderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderLogInfo {
            switch json {
                case .dictionary(let dict):
                    let folderId = Serialization._StringSerializer.deserialize(dict["folder_id"] ?? .null)
                    let folderName = Serialization._StringSerializer.deserialize(dict["folder_name"] ?? .null)
                    return PaperFolderLogInfo(folderId: folderId, folderName: folderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Paper folder shared with team member.
    open class PaperFolderTeamInviteDetails: CustomStringConvertible {
        /// Event unique identifier.
        open let eventUuid: String
        public init(eventUuid: String) {
            stringValidator()(eventUuid)
            self.eventUuid = eventUuid
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperFolderTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class PaperFolderTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperFolderTeamInviteDetails) -> JSON {
            let output = [ 
            "event_uuid": Serialization._StringSerializer.serialize(value.eventUuid),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PaperFolderTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let eventUuid = Serialization._StringSerializer.deserialize(dict["event_uuid"] ?? .null)
                    return PaperFolderTeamInviteDetails(eventUuid: eventUuid)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can share Paper documents externally.
    public enum PaperMemberPolicy: CustomStringConvertible {
        /// An unspecified error.
        case anyoneWithLink
        /// An unspecified error.
        case onlyTeam
        /// An unspecified error.
        case teamAndExplicitlyShared
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PaperMemberPolicySerializer().serialize(self)))"
        }
    }
    open class PaperMemberPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PaperMemberPolicy) -> JSON {
            switch value {
                case .anyoneWithLink:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anyone_with_link")
                    return .dictionary(d)
                case .onlyTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("only_team")
                    return .dictionary(d)
                case .teamAndExplicitlyShared:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_and_explicitly_shared")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PaperMemberPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "anyone_with_link":
                            return PaperMemberPolicy.anyoneWithLink
                        case "only_team":
                            return PaperMemberPolicy.onlyTeam
                        case "team_and_explicitly_shared":
                            return PaperMemberPolicy.teamAndExplicitlyShared
                        case "other":
                            return PaperMemberPolicy.other
                        default:
                            return PaperMemberPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// A user or group
    public enum ParticipantLogInfo: CustomStringConvertible {
        /// User details.
        case user(TeamLog.UserLogInfo)
        /// Group details.
        case group(TeamLog.GroupLogInfo)
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ParticipantLogInfoSerializer().serialize(self)))"
        }
    }
    open class ParticipantLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ParticipantLogInfo) -> JSON {
            switch value {
                case .user(let arg):
                    var d = ["user": TeamLog.UserLogInfoSerializer().serialize(arg)]
                    d[".tag"] = .str("user")
                    return .dictionary(d)
                case .group(let arg):
                    var d = Serialization.getFields(TeamLog.GroupLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("group")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> ParticipantLogInfo {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "user":
                            let v = TeamLog.UserLogInfoSerializer().deserialize(d["user"] ?? .null)
                            return ParticipantLogInfo.user(v)
                        case "group":
                            let v = TeamLog.GroupLogInfoSerializer().deserialize(json)
                            return ParticipantLogInfo.group(v)
                        case "other":
                            return ParticipantLogInfo.other
                        default:
                            return ParticipantLogInfo.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Changed password.
    open class PasswordChangeDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordChangeDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordChangeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordChangeDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordChangeDetails {
            switch json {
                case .dictionary(_):
                    return PasswordChangeDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to sign in using a password.
    open class PasswordLoginFailDetails: CustomStringConvertible {
        /// Login failure details.
        open let errorDetails: TeamLog.FailureDetailsLogInfo
        public init(errorDetails: TeamLog.FailureDetailsLogInfo) {
            self.errorDetails = errorDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordLoginFailDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordLoginFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordLoginFailDetails) -> JSON {
            let output = [ 
            "error_details": TeamLog.FailureDetailsLogInfoSerializer().serialize(value.errorDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordLoginFailDetails {
            switch json {
                case .dictionary(let dict):
                    let errorDetails = TeamLog.FailureDetailsLogInfoSerializer().deserialize(dict["error_details"] ?? .null)
                    return PasswordLoginFailDetails(errorDetails: errorDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Signed in using a password.
    open class PasswordLoginSuccessDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordLoginSuccessDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordLoginSuccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordLoginSuccessDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordLoginSuccessDetails {
            switch json {
                case .dictionary(_):
                    return PasswordLoginSuccessDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset all team member passwords.
    open class PasswordResetAllDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetAllDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordResetAllDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetAllDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetAllDetails {
            switch json {
                case .dictionary(_):
                    return PasswordResetAllDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset password.
    open class PasswordResetDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PasswordResetDetailsSerializer().serialize(self)))"
        }
    }
    open class PasswordResetDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PasswordResetDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PasswordResetDetails {
            switch json {
                case .dictionary(_):
                    return PasswordResetDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Path's details.
    open class PathLogInfo: CustomStringConvertible {
        /// Fully qualified path relative to event's context. Might be missing due to historical data gap.
        open let contextual: String?
        /// Path relative to the namespace containing the content.
        open let namespaceRelative: TeamLog.NamespaceRelativePathLogInfo
        public init(namespaceRelative: TeamLog.NamespaceRelativePathLogInfo, contextual: String? = nil) {
            nullableValidator(stringValidator(pattern: "/(.|[\\r\\n])*"))(contextual)
            self.contextual = contextual
            self.namespaceRelative = namespaceRelative
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PathLogInfoSerializer().serialize(self)))"
        }
    }
    open class PathLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PathLogInfo) -> JSON {
            let output = [ 
            "namespace_relative": TeamLog.NamespaceRelativePathLogInfoSerializer().serialize(value.namespaceRelative),
            "contextual": NullableSerializer(Serialization._StringSerializer).serialize(value.contextual),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PathLogInfo {
            switch json {
                case .dictionary(let dict):
                    let namespaceRelative = TeamLog.NamespaceRelativePathLogInfoSerializer().deserialize(dict["namespace_relative"] ?? .null)
                    let contextual = NullableSerializer(Serialization._StringSerializer).deserialize(dict["contextual"] ?? .null)
                    return PathLogInfo(namespaceRelative: namespaceRelative, contextual: contextual)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled or disabled the ability of team members to permanently delete content.
    open class PermanentDeleteChangePolicyDetails: CustomStringConvertible {
        /// New permanent delete content policy.
        open let newValue: TeamLog.ContentPermanentDeletePolicy
        /// Previous permanent delete content policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.ContentPermanentDeletePolicy?
        public init(newValue: TeamLog.ContentPermanentDeletePolicy, previousValue: TeamLog.ContentPermanentDeletePolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PermanentDeleteChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class PermanentDeleteChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PermanentDeleteChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.ContentPermanentDeletePolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ContentPermanentDeletePolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> PermanentDeleteChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.ContentPermanentDeletePolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ContentPermanentDeletePolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return PermanentDeleteChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The PlacementRestriction union
    public enum PlacementRestriction: CustomStringConvertible {
        /// An unspecified error.
        case europeOnly
        /// An unspecified error.
        case none
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(PlacementRestrictionSerializer().serialize(self)))"
        }
    }
    open class PlacementRestrictionSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: PlacementRestriction) -> JSON {
            switch value {
                case .europeOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("europe_only")
                    return .dictionary(d)
                case .none:
                    var d = [String: JSON]()
                    d[".tag"] = .str("none")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> PlacementRestriction {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "europe_only":
                            return PlacementRestriction.europeOnly
                        case "none":
                            return PlacementRestriction.none
                        case "other":
                            return PlacementRestriction.other
                        default:
                            return PlacementRestriction.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Provides the indices of the source asset and the destination asset for a relocate action.
    open class RelocateAssetReferencesLogInfo: CustomStringConvertible {
        /// Source asset position in the Assets list.
        open let srcAssetIndex: UInt64
        /// Destination asset position in the Assets list.
        open let destAssetIndex: UInt64
        public init(srcAssetIndex: UInt64, destAssetIndex: UInt64) {
            comparableValidator()(srcAssetIndex)
            self.srcAssetIndex = srcAssetIndex
            comparableValidator()(destAssetIndex)
            self.destAssetIndex = destAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(RelocateAssetReferencesLogInfoSerializer().serialize(self)))"
        }
    }
    open class RelocateAssetReferencesLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: RelocateAssetReferencesLogInfo) -> JSON {
            let output = [ 
            "src_asset_index": Serialization._UInt64Serializer.serialize(value.srcAssetIndex),
            "dest_asset_index": Serialization._UInt64Serializer.serialize(value.destAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> RelocateAssetReferencesLogInfo {
            switch json {
                case .dictionary(let dict):
                    let srcAssetIndex = Serialization._UInt64Serializer.deserialize(dict["src_asset_index"] ?? .null)
                    let destAssetIndex = Serialization._UInt64Serializer.deserialize(dict["dest_asset_index"] ?? .null)
                    return RelocateAssetReferencesLogInfo(srcAssetIndex: srcAssetIndex, destAssetIndex: destAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reseller information.
    open class ResellerLogInfo: CustomStringConvertible {
        /// Reseller name.
        open let resellerName: String
        /// Reseller ID.
        open let resellerId: String
        public init(resellerName: String, resellerId: String) {
            stringValidator()(resellerName)
            self.resellerName = resellerName
            stringValidator()(resellerId)
            self.resellerId = resellerId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerLogInfoSerializer().serialize(self)))"
        }
    }
    open class ResellerLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerLogInfo) -> JSON {
            let output = [ 
            "reseller_name": Serialization._StringSerializer.serialize(value.resellerName),
            "reseller_id": Serialization._StringSerializer.serialize(value.resellerId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerLogInfo {
            switch json {
                case .dictionary(let dict):
                    let resellerName = Serialization._StringSerializer.deserialize(dict["reseller_name"] ?? .null)
                    let resellerId = Serialization._StringSerializer.deserialize(dict["reseller_id"] ?? .null)
                    return ResellerLogInfo(resellerName: resellerName, resellerId: resellerId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended reseller support session.
    open class ResellerSupportSessionEndDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionEndDetailsSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionEndDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionEndDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionEndDetails {
            switch json {
                case .dictionary(_):
                    return ResellerSupportSessionEndDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started reseller support session.
    open class ResellerSupportSessionStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ResellerSupportSessionStartDetailsSerializer().serialize(self)))"
        }
    }
    open class ResellerSupportSessionStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ResellerSupportSessionStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ResellerSupportSessionStartDetails {
            switch json {
                case .dictionary(_):
                    return ResellerSupportSessionStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added the team to a shared folder.
    open class SfAddGroupDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Team name.
        open let teamName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String, teamName: String, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAddGroupDetailsSerializer().serialize(self)))"
        }
    }
    open class SfAddGroupDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAddGroupDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAddGroupDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfAddGroupDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, teamName: teamName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Allowed non collaborators to view links to files in a shared folder.
    open class SfAllowNonMembersToViewSharedLinksDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfAllowNonMembersToViewSharedLinksDetailsSerializer().serialize(self)))"
        }
    }
    open class SfAllowNonMembersToViewSharedLinksDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfAllowNonMembersToViewSharedLinksDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfAllowNonMembersToViewSharedLinksDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SfAllowNonMembersToViewSharedLinksDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Admin settings: team members see a warning before sharing folders outside the team (DEPRECATED FEATURE).
    open class SfExternalInviteWarnDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfExternalInviteWarnDetailsSerializer().serialize(self)))"
        }
    }
    open class SfExternalInviteWarnDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfExternalInviteWarnDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfExternalInviteWarnDetails {
            switch json {
                case .dictionary(_):
                    return SfExternalInviteWarnDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited a group to a shared folder.
    open class SfInviteGroupDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        public init(targetAssetIndex: UInt64) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfInviteGroupDetailsSerializer().serialize(self)))"
        }
    }
    open class SfInviteGroupDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfInviteGroupDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfInviteGroupDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    return SfInviteGroupDetails(targetAssetIndex: targetAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed parent of shared folder.
    open class SfNestDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Previous parent namespace ID. Might be missing due to historical data gap.
        open let prevParentNsId: String?
        /// New parent namespace ID. Might be missing due to historical data gap.
        open let newParentNsId: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, prevParentNsId: String? = nil, newParentNsId: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(prevParentNsId)
            self.prevParentNsId = prevParentNsId
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(newParentNsId)
            self.newParentNsId = newParentNsId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfNestDetailsSerializer().serialize(self)))"
        }
    }
    open class SfNestDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfNestDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "prev_parent_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.prevParentNsId),
            "new_parent_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.newParentNsId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfNestDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let prevParentNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["prev_parent_ns_id"] ?? .null)
                    let newParentNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_parent_ns_id"] ?? .null)
                    return SfNestDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, prevParentNsId: prevParentNsId, newParentNsId: newParentNsId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Declined a team member's invitation to a shared folder.
    open class SfTeamDeclineDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamDeclineDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamDeclineDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamDeclineDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamDeclineDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamDeclineDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Granted access to a shared folder.
    open class SfTeamGrantAccessDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamGrantAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamGrantAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamGrantAccessDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamGrantAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamGrantAccessDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed a team member's role in a shared folder.
    open class SfTeamInviteChangeRoleDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// New sharing permission. Might be missing due to historical data gap.
        open let newSharingPermission: String?
        /// Previous sharing permission. Might be missing due to historical data gap.
        open let previousSharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newSharingPermission: String? = nil, previousSharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteChangeRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteChangeRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteChangeRoleDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteChangeRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    return SfTeamInviteChangeRoleDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newSharingPermission: newSharingPermission, previousSharingPermission: previousSharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Invited team members to a shared folder.
    open class SfTeamInviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamInviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamInviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamInviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamInviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfTeamInviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Joined a team member's shared folder.
    open class SfTeamJoinDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamJoinDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Joined a team member's shared folder from a link.
    open class SfTeamJoinFromOobLinkDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Shared link token key.
        open let tokenKey: String?
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, tokenKey: String? = nil, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(tokenKey)
            self.tokenKey = tokenKey
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamJoinFromOobLinkDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamJoinFromOobLinkDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamJoinFromOobLinkDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "token_key": NullableSerializer(Serialization._StringSerializer).serialize(value.tokenKey),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamJoinFromOobLinkDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let tokenKey = NullableSerializer(Serialization._StringSerializer).deserialize(dict["token_key"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SfTeamJoinFromOobLinkDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, tokenKey: tokenKey, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unshared a folder with a team member.
    open class SfTeamUninviteDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SfTeamUninviteDetailsSerializer().serialize(self)))"
        }
    }
    open class SfTeamUninviteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SfTeamUninviteDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SfTeamUninviteDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SfTeamUninviteDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Sent an email invitation to the membership of a shared file or folder.
    open class SharedContentAddInviteesDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddInviteesDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddInviteesDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddInviteesDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddInviteesDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SharedContentAddInviteesDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added an expiry to the link for the shared file or folder.
    open class SharedContentAddLinkExpiryDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// Expiration starting date.
        open let expirationStartDate: String
        /// The number of days from the starting expiration date after which the link will expire.
        open let expirationDays: Int64
        public init(targetAssetIndex: UInt64, expirationStartDate: String, expirationDays: Int64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            stringValidator()(expirationStartDate)
            self.expirationStartDate = expirationStartDate
            comparableValidator()(expirationDays)
            self.expirationDays = expirationDays
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkExpiryDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "expiration_start_date": Serialization._StringSerializer.serialize(value.expirationStartDate),
            "expiration_days": Serialization._Int64Serializer.serialize(value.expirationDays),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let expirationStartDate = Serialization._StringSerializer.deserialize(dict["expiration_start_date"] ?? .null)
                    let expirationDays = Serialization._Int64Serializer.deserialize(dict["expiration_days"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentAddLinkExpiryDetails(targetAssetIndex: targetAssetIndex, expirationStartDate: expirationStartDate, expirationDays: expirationDays, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a password to the link for the shared file or folder.
    open class SharedContentAddLinkPasswordDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddLinkPasswordDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddLinkPasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentAddLinkPasswordDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added users and/or groups to the membership of a shared file or folder.
    open class SharedContentAddMemberDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharingPermission: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentAddMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentAddMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentAddMemberDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentAddMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentAddMemberDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can download the shared file or folder.
    open class SharedContentChangeDownloadsPolicyDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New downlaod policy.
        open let newValue: TeamLog.SharedContentDownloadsPolicy
        /// Previous downlaod policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharedContentDownloadsPolicy?
        public init(targetAssetIndex: UInt64, newValue: TeamLog.SharedContentDownloadsPolicy, originalFolderName: String? = nil, sharedFolderType: String? = nil, previousValue: TeamLog.SharedContentDownloadsPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeDownloadsPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeDownloadsPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeDownloadsPolicyDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "new_value": TeamLog.SharedContentDownloadsPolicySerializer().serialize(value.newValue),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.SharedContentDownloadsPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeDownloadsPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let newValue = TeamLog.SharedContentDownloadsPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedContentDownloadsPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeDownloadsPolicyDetails(targetAssetIndex: targetAssetIndex, newValue: newValue, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the access type of an invitee to a shared file or folder before the invitation was claimed.
    open class SharedContentChangeInviteeRoleDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// New sharing permission. Might be missing due to historical data gap.
        open let newSharingPermission: String?
        /// Previous sharing permission. Might be missing due to historical data gap.
        open let previousSharingPermission: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newSharingPermission: String? = nil, previousSharingPermission: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeInviteeRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeInviteeRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeInviteeRoleDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeInviteeRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    return SharedContentChangeInviteeRoleDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newSharingPermission: newSharingPermission, previousSharingPermission: previousSharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the audience of the link for a shared file or folder.
    open class SharedContentChangeLinkAudienceDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New link audience value.
        open let newValue: TeamLog.LinkAudience
        /// Previous link audience value. Might be missing due to historical data gap.
        open let previousValue: TeamLog.LinkAudience?
        public init(targetAssetIndex: UInt64, newValue: TeamLog.LinkAudience, originalFolderName: String? = nil, sharedFolderType: String? = nil, previousValue: TeamLog.LinkAudience? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkAudienceDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkAudienceDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkAudienceDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "new_value": TeamLog.LinkAudienceSerializer().serialize(value.newValue),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.LinkAudienceSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkAudienceDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let newValue = TeamLog.LinkAudienceSerializer().deserialize(dict["new_value"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.LinkAudienceSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeLinkAudienceDetails(targetAssetIndex: targetAssetIndex, newValue: newValue, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the expiry of the link for the shared file or folder.
    open class SharedContentChangeLinkExpiryDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// Expiration starting date.
        open let expirationStartDate: String
        /// The number of days from the starting expiration date after which the link will expire.
        open let expirationDays: Int64
        public init(targetAssetIndex: UInt64, expirationStartDate: String, expirationDays: Int64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            stringValidator()(expirationStartDate)
            self.expirationStartDate = expirationStartDate
            comparableValidator()(expirationDays)
            self.expirationDays = expirationDays
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkExpiryDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "expiration_start_date": Serialization._StringSerializer.serialize(value.expirationStartDate),
            "expiration_days": Serialization._Int64Serializer.serialize(value.expirationDays),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let expirationStartDate = Serialization._StringSerializer.deserialize(dict["expiration_start_date"] ?? .null)
                    let expirationDays = Serialization._Int64Serializer.deserialize(dict["expiration_days"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentChangeLinkExpiryDetails(targetAssetIndex: targetAssetIndex, expirationStartDate: expirationStartDate, expirationDays: expirationDays, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the password on the link for the shared file or folder.
    open class SharedContentChangeLinkPasswordDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeLinkPasswordDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeLinkPasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentChangeLinkPasswordDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the access type of a shared file or folder member.
    open class SharedContentChangeMemberRoleDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// New sharing permission. Might be missing due to historical data gap.
        open let newSharingPermission: String?
        /// Previous sharing permission. Might be missing due to historical data gap.
        open let previousSharingPermission: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, newSharingPermission: String? = nil, previousSharingPermission: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(newSharingPermission)
            self.newSharingPermission = newSharingPermission
            nullableValidator(stringValidator())(previousSharingPermission)
            self.previousSharingPermission = previousSharingPermission
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeMemberRoleDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeMemberRoleDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeMemberRoleDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "new_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.newSharingPermission),
            "previous_sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.previousSharingPermission),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeMemberRoleDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let newSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_sharing_permission"] ?? .null)
                    let previousSharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_sharing_permission"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentChangeMemberRoleDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newSharingPermission: newSharingPermission, previousSharingPermission: previousSharingPermission, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether members can see who viewed the shared file or folder.
    open class SharedContentChangeViewerInfoPolicyDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New viewer info policy.
        open let newValue: TeamLog.SharedContentViewerInfoPolicy
        /// Previous view info policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharedContentViewerInfoPolicy?
        public init(targetAssetIndex: UInt64, newValue: TeamLog.SharedContentViewerInfoPolicy, originalFolderName: String? = nil, sharedFolderType: String? = nil, previousValue: TeamLog.SharedContentViewerInfoPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentChangeViewerInfoPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentChangeViewerInfoPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentChangeViewerInfoPolicyDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "new_value": TeamLog.SharedContentViewerInfoPolicySerializer().serialize(value.newValue),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.SharedContentViewerInfoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentChangeViewerInfoPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let newValue = TeamLog.SharedContentViewerInfoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedContentViewerInfoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedContentChangeViewerInfoPolicyDetails(targetAssetIndex: targetAssetIndex, newValue: newValue, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Claimed membership to a team member's shared folder.
    open class SharedContentClaimInvitationDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared content link.
        open let sharedContentLink: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedContentLink: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentClaimInvitationDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentClaimInvitationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentClaimInvitationDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentClaimInvitationDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedContentClaimInvitationDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Copied the shared file or folder to own Dropbox.
    open class SharedContentCopyDetails: CustomStringConvertible {
        /// Shared content link.
        open let sharedContentLink: String
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Specifies the source and destination indices in the assets list.
        open let relocateActionDetails: TeamLog.RelocateAssetReferencesLogInfo
        public init(sharedContentLink: String, targetAssetIndex: UInt64, relocateActionDetails: TeamLog.RelocateAssetReferencesLogInfo, sharingPermission: String? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentCopyDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "relocate_action_details": TeamLog.RelocateAssetReferencesLogInfoSerializer().serialize(value.relocateActionDetails),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentCopyDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let relocateActionDetails = TeamLog.RelocateAssetReferencesLogInfoSerializer().deserialize(dict["relocate_action_details"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SharedContentCopyDetails(sharedContentLink: sharedContentLink, targetAssetIndex: targetAssetIndex, relocateActionDetails: relocateActionDetails, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded the shared file or folder.
    open class SharedContentDownloadDetails: CustomStringConvertible {
        /// Shared content link.
        open let sharedContentLink: String
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        public init(sharedContentLink: String, targetAssetIndex: UInt64, sharingPermission: String? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentDownloadDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentDownloadDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SharedContentDownloadDetails(sharedContentLink: sharedContentLink, targetAssetIndex: targetAssetIndex, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared content downloads policy
    public enum SharedContentDownloadsPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentDownloadsPolicySerializer().serialize(self)))"
        }
    }
    open class SharedContentDownloadsPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentDownloadsPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedContentDownloadsPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return SharedContentDownloadsPolicy.disabled
                        case "enabled":
                            return SharedContentDownloadsPolicy.enabled
                        case "other":
                            return SharedContentDownloadsPolicy.other
                        default:
                            return SharedContentDownloadsPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Left the membership of a shared file or folder.
    open class SharedContentRelinquishMembershipDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRelinquishMembershipDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRelinquishMembershipDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRelinquishMembershipDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRelinquishMembershipDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SharedContentRelinquishMembershipDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed an invitee from the membership of a shared file or folder before it was claimed.
    open class SharedContentRemoveInviteeDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveInviteeDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveInviteeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveInviteeDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveInviteeDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SharedContentRemoveInviteeDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the expiry of the link for the shared file or folder.
    open class SharedContentRemoveLinkExpiryDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkExpiryDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkExpiryDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkExpiryDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkExpiryDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentRemoveLinkExpiryDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the password on the link for the shared file or folder.
    open class SharedContentRemoveLinkPasswordDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveLinkPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveLinkPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveLinkPasswordDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveLinkPasswordDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentRemoveLinkPasswordDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a user or a group from the membership of a shared file or folder.
    open class SharedContentRemoveMemberDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharingPermission: String? = nil, sharedFolderType: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRemoveMemberDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRemoveMemberDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRemoveMemberDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRemoveMemberDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    return SharedContentRemoveMemberDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharingPermission: sharingPermission, sharedFolderType: sharedFolderType)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Requested to be on the membership of a shared file or folder.
    open class SharedContentRequestAccessDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        /// Shared content link.
        open let sharedContentLink: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil, sharedContentLink: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedContentLink)
            self.sharedContentLink = sharedContentLink
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentRequestAccessDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentRequestAccessDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentRequestAccessDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            "shared_content_link": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedContentLink),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentRequestAccessDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    let sharedContentLink = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_content_link"] ?? .null)
                    return SharedContentRequestAccessDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, sharedContentLink: sharedContentLink)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Unshared a shared file or folder by clearing its membership and turning off its link.
    open class SharedContentUnshareDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String?
        public init(targetAssetIndex: UInt64, originalFolderName: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator())(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentUnshareDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentUnshareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentUnshareDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": NullableSerializer(Serialization._StringSerializer).serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentUnshareDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["original_folder_name"] ?? .null)
                    return SharedContentUnshareDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Previewed the shared file or folder.
    open class SharedContentViewDetails: CustomStringConvertible {
        /// Shared content link.
        open let sharedContentLink: String
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        public init(sharedContentLink: String, targetAssetIndex: UInt64, sharingPermission: String? = nil) {
            stringValidator()(sharedContentLink)
            self.sharedContentLink = sharedContentLink
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentViewDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedContentViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentViewDetails) -> JSON {
            let output = [ 
            "shared_content_link": Serialization._StringSerializer.serialize(value.sharedContentLink),
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedContentViewDetails {
            switch json {
                case .dictionary(let dict):
                    let sharedContentLink = Serialization._StringSerializer.deserialize(dict["shared_content_link"] ?? .null)
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    return SharedContentViewDetails(sharedContentLink: sharedContentLink, targetAssetIndex: targetAssetIndex, sharingPermission: sharingPermission)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared content viewer info policy
    public enum SharedContentViewerInfoPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedContentViewerInfoPolicySerializer().serialize(self)))"
        }
    }
    open class SharedContentViewerInfoPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedContentViewerInfoPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedContentViewerInfoPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return SharedContentViewerInfoPolicy.disabled
                        case "enabled":
                            return SharedContentViewerInfoPolicy.enabled
                        case "other":
                            return SharedContentViewerInfoPolicy.other
                        default:
                            return SharedContentViewerInfoPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Set or unset the confidential flag on a shared folder.
    open class SharedFolderChangeConfidentialityDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// New confidentiality value.
        open let newValue: TeamLog.Confidentiality
        /// Previous confidentiality value. Might be missing due to historical data gap.
        open let previousValue: TeamLog.Confidentiality?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newValue: TeamLog.Confidentiality, previousValue: TeamLog.Confidentiality? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeConfidentialityDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeConfidentialityDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeConfidentialityDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_value": TeamLog.ConfidentialitySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.ConfidentialitySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeConfidentialityDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newValue = TeamLog.ConfidentialitySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.ConfidentialitySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeConfidentialityDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can access the shared folder via a link.
    open class SharedFolderChangeLinkPolicyDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New shared folder link policy.
        open let newValue: TeamLog.SharedFolderLinkPolicy
        /// Previous shared folder link policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharedFolderLinkPolicy?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newValue: TeamLog.SharedFolderLinkPolicy, sharedFolderType: String? = nil, previousValue: TeamLog.SharedFolderLinkPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeLinkPolicyDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_value": TeamLog.SharedFolderLinkPolicySerializer().serialize(value.newValue),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.SharedFolderLinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newValue = TeamLog.SharedFolderLinkPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedFolderLinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeLinkPolicyDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newValue: newValue, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can manage the membership of a shared folder.
    open class SharedFolderChangeMemberManagementPolicyDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New membership management policy.
        open let newValue: TeamLog.SharedFolderMembershipManagementPolicy
        /// Previous membership management policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharedFolderMembershipManagementPolicy?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newValue: TeamLog.SharedFolderMembershipManagementPolicy, sharedFolderType: String? = nil, previousValue: TeamLog.SharedFolderMembershipManagementPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMemberManagementPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMemberManagementPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMemberManagementPolicyDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_value": TeamLog.SharedFolderMembershipManagementPolicySerializer().serialize(value.newValue),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.SharedFolderMembershipManagementPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMemberManagementPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newValue = TeamLog.SharedFolderMembershipManagementPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedFolderMembershipManagementPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeMemberManagementPolicyDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newValue: newValue, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed who can become a member of the shared folder.
    open class SharedFolderChangeMemberPolicyDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        /// Shared folder type. Might be missing due to historical data gap.
        open let sharedFolderType: String?
        /// New external invite policy.
        open let newValue: TeamLog.SharedFolderMemberPolicy
        /// Previous external invite policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharedFolderMemberPolicy?
        public init(targetAssetIndex: UInt64, originalFolderName: String, newValue: TeamLog.SharedFolderMemberPolicy, sharedFolderType: String? = nil, previousValue: TeamLog.SharedFolderMemberPolicy? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
            nullableValidator(stringValidator())(sharedFolderType)
            self.sharedFolderType = sharedFolderType
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderChangeMemberPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderChangeMemberPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderChangeMemberPolicyDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            "new_value": TeamLog.SharedFolderMemberPolicySerializer().serialize(value.newValue),
            "shared_folder_type": NullableSerializer(Serialization._StringSerializer).serialize(value.sharedFolderType),
            "previous_value": NullableSerializer(TeamLog.SharedFolderMemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderChangeMemberPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    let newValue = TeamLog.SharedFolderMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let sharedFolderType = NullableSerializer(Serialization._StringSerializer).deserialize(dict["shared_folder_type"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharedFolderMemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharedFolderChangeMemberPolicyDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName, newValue: newValue, sharedFolderType: sharedFolderType, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a shared folder.
    open class SharedFolderCreateDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Parent namespace ID. Might be missing due to historical data gap.
        open let parentNsId: String?
        public init(targetAssetIndex: UInt64, parentNsId: String? = nil) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            nullableValidator(stringValidator(pattern: "[-_0-9a-zA-Z:]+"))(parentNsId)
            self.parentNsId = parentNsId
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderCreateDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "parent_ns_id": NullableSerializer(Serialization._StringSerializer).serialize(value.parentNsId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let parentNsId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["parent_ns_id"] ?? .null)
                    return SharedFolderCreateDetails(targetAssetIndex: targetAssetIndex, parentNsId: parentNsId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SharedFolderLinkPolicy union
    public enum SharedFolderLinkPolicy: CustomStringConvertible {
        /// An unspecified error.
        case membersOnly
        /// An unspecified error.
        case membersAndTeam
        /// An unspecified error.
        case anyone
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderLinkPolicySerializer().serialize(self)))"
        }
    }
    open class SharedFolderLinkPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderLinkPolicy) -> JSON {
            switch value {
                case .membersOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("members_only")
                    return .dictionary(d)
                case .membersAndTeam:
                    var d = [String: JSON]()
                    d[".tag"] = .str("members_and_team")
                    return .dictionary(d)
                case .anyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anyone")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedFolderLinkPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "members_only":
                            return SharedFolderLinkPolicy.membersOnly
                        case "members_and_team":
                            return SharedFolderLinkPolicy.membersAndTeam
                        case "anyone":
                            return SharedFolderLinkPolicy.anyone
                        case "other":
                            return SharedFolderLinkPolicy.other
                        default:
                            return SharedFolderLinkPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for controlling who can become a member of a shared folder
    public enum SharedFolderMemberPolicy: CustomStringConvertible {
        /// An unspecified error.
        case teamOnly
        /// An unspecified error.
        case anyone
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMemberPolicySerializer().serialize(self)))"
        }
    }
    open class SharedFolderMemberPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMemberPolicy) -> JSON {
            switch value {
                case .teamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("team_only")
                    return .dictionary(d)
                case .anyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("anyone")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedFolderMemberPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "team_only":
                            return SharedFolderMemberPolicy.teamOnly
                        case "anyone":
                            return SharedFolderMemberPolicy.anyone
                        case "other":
                            return SharedFolderMemberPolicy.other
                        default:
                            return SharedFolderMemberPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SharedFolderMembershipManagementPolicy union
    public enum SharedFolderMembershipManagementPolicy: CustomStringConvertible {
        /// An unspecified error.
        case owner
        /// An unspecified error.
        case editors
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMembershipManagementPolicySerializer().serialize(self)))"
        }
    }
    open class SharedFolderMembershipManagementPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMembershipManagementPolicy) -> JSON {
            switch value {
                case .owner:
                    var d = [String: JSON]()
                    d[".tag"] = .str("owner")
                    return .dictionary(d)
                case .editors:
                    var d = [String: JSON]()
                    d[".tag"] = .str("editors")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharedFolderMembershipManagementPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "owner":
                            return SharedFolderMembershipManagementPolicy.owner
                        case "editors":
                            return SharedFolderMembershipManagementPolicy.editors
                        case "other":
                            return SharedFolderMembershipManagementPolicy.other
                        default:
                            return SharedFolderMembershipManagementPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added a shared folder to own Dropbox.
    open class SharedFolderMountDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderMountDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderMountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderMountDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderMountDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SharedFolderMountDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Transferred the ownership of a shared folder to another member.
    open class SharedFolderTransferOwnershipDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderTransferOwnershipDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderTransferOwnershipDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderTransferOwnershipDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderTransferOwnershipDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SharedFolderTransferOwnershipDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Deleted a shared folder from Dropbox.
    open class SharedFolderUnmountDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        /// Original shared folder name.
        open let originalFolderName: String
        public init(targetAssetIndex: UInt64, originalFolderName: String) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
            stringValidator()(originalFolderName)
            self.originalFolderName = originalFolderName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedFolderUnmountDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedFolderUnmountDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedFolderUnmountDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            "original_folder_name": Serialization._StringSerializer.serialize(value.originalFolderName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedFolderUnmountDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    let originalFolderName = Serialization._StringSerializer.deserialize(dict["original_folder_name"] ?? .null)
                    return SharedFolderUnmountDetails(targetAssetIndex: targetAssetIndex, originalFolderName: originalFolderName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared Paper document was opened.
    open class SharedNoteOpenedDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharedNoteOpenedDetailsSerializer().serialize(self)))"
        }
    }
    open class SharedNoteOpenedDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharedNoteOpenedDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharedNoteOpenedDetails {
            switch json {
                case .dictionary(_):
                    return SharedNoteOpenedDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether team members can join shared folders owned externally (i.e. outside the team).
    open class SharingChangeFolderJoinPolicyDetails: CustomStringConvertible {
        /// New external join policy.
        open let newValue: TeamLog.SharingFolderJoinPolicy
        /// Previous external join policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharingFolderJoinPolicy?
        public init(newValue: TeamLog.SharingFolderJoinPolicy, previousValue: TeamLog.SharingFolderJoinPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeFolderJoinPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeFolderJoinPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeFolderJoinPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingFolderJoinPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingFolderJoinPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeFolderJoinPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingFolderJoinPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingFolderJoinPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeFolderJoinPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether team members can share links externally (i.e. outside the team), and if so, whether links should
    /// be accessible only by team members or anyone by default.
    open class SharingChangeLinkPolicyDetails: CustomStringConvertible {
        /// New external link accessibility policy.
        open let newValue: TeamLog.SharingLinkPolicy
        /// Previous external link accessibility policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharingLinkPolicy?
        public init(newValue: TeamLog.SharingLinkPolicy, previousValue: TeamLog.SharingLinkPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeLinkPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeLinkPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeLinkPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingLinkPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingLinkPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeLinkPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingLinkPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingLinkPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeLinkPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed whether team members can share files and folders externally (i.e. outside the team).
    open class SharingChangeMemberPolicyDetails: CustomStringConvertible {
        /// New external invite policy.
        open let newValue: TeamLog.SharingMemberPolicy
        /// Previous external invite policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SharingMemberPolicy?
        public init(newValue: TeamLog.SharingMemberPolicy, previousValue: TeamLog.SharingMemberPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingChangeMemberPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SharingChangeMemberPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingChangeMemberPolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SharingMemberPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SharingMemberPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SharingChangeMemberPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SharingMemberPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SharingMemberPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SharingChangeMemberPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for controlling if team members can join shared folders owned by non team members.
    public enum SharingFolderJoinPolicy: CustomStringConvertible {
        /// An unspecified error.
        case fromAnyone
        /// An unspecified error.
        case fromTeamOnly
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingFolderJoinPolicySerializer().serialize(self)))"
        }
    }
    open class SharingFolderJoinPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingFolderJoinPolicy) -> JSON {
            switch value {
                case .fromAnyone:
                    var d = [String: JSON]()
                    d[".tag"] = .str("from_anyone")
                    return .dictionary(d)
                case .fromTeamOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("from_team_only")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingFolderJoinPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "from_anyone":
                            return SharingFolderJoinPolicy.fromAnyone
                        case "from_team_only":
                            return SharingFolderJoinPolicy.fromTeamOnly
                        case "other":
                            return SharingFolderJoinPolicy.other
                        default:
                            return SharingFolderJoinPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Policy for controlling if team members can share links externally
    public enum SharingLinkPolicy: CustomStringConvertible {
        /// An unspecified error.
        case defaultPrivate
        /// An unspecified error.
        case defaultPublic
        /// An unspecified error.
        case onlyPrivate
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingLinkPolicySerializer().serialize(self)))"
        }
    }
    open class SharingLinkPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingLinkPolicy) -> JSON {
            switch value {
                case .defaultPrivate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_private")
                    return .dictionary(d)
                case .defaultPublic:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default_public")
                    return .dictionary(d)
                case .onlyPrivate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("only_private")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingLinkPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default_private":
                            return SharingLinkPolicy.defaultPrivate
                        case "default_public":
                            return SharingLinkPolicy.defaultPublic
                        case "only_private":
                            return SharingLinkPolicy.onlyPrivate
                        case "other":
                            return SharingLinkPolicy.other
                        default:
                            return SharingLinkPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// External sharing policy
    public enum SharingMemberPolicy: CustomStringConvertible {
        /// An unspecified error.
        case allow
        /// An unspecified error.
        case forbid
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SharingMemberPolicySerializer().serialize(self)))"
        }
    }
    open class SharingMemberPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SharingMemberPolicy) -> JSON {
            switch value {
                case .allow:
                    var d = [String: JSON]()
                    d[".tag"] = .str("allow")
                    return .dictionary(d)
                case .forbid:
                    var d = [String: JSON]()
                    d[".tag"] = .str("forbid")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SharingMemberPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "allow":
                            return SharingMemberPolicy.allow
                        case "forbid":
                            return SharingMemberPolicy.forbid
                        case "other":
                            return SharingMemberPolicy.other
                        default:
                            return SharingMemberPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Created a link to a file using an app.
    open class ShmodelAppCreateDetails: CustomStringConvertible {
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Shared link token key.
        open let tokenKey: String?
        public init(sharingPermission: String? = nil, tokenKey: String? = nil) {
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            nullableValidator(stringValidator())(tokenKey)
            self.tokenKey = tokenKey
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelAppCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelAppCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelAppCreateDetails) -> JSON {
            let output = [ 
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            "token_key": NullableSerializer(Serialization._StringSerializer).serialize(value.tokenKey),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelAppCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    let tokenKey = NullableSerializer(Serialization._StringSerializer).deserialize(dict["token_key"] ?? .null)
                    return ShmodelAppCreateDetails(sharingPermission: sharingPermission, tokenKey: tokenKey)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a new link.
    open class ShmodelCreateDetails: CustomStringConvertible {
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Shared link token key.
        open let tokenKey: String?
        public init(sharingPermission: String? = nil, tokenKey: String? = nil) {
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            nullableValidator(stringValidator())(tokenKey)
            self.tokenKey = tokenKey
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelCreateDetails) -> JSON {
            let output = [ 
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            "token_key": NullableSerializer(Serialization._StringSerializer).serialize(value.tokenKey),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelCreateDetails {
            switch json {
                case .dictionary(let dict):
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    let tokenKey = NullableSerializer(Serialization._StringSerializer).deserialize(dict["token_key"] ?? .null)
                    return ShmodelCreateDetails(sharingPermission: sharingPermission, tokenKey: tokenKey)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a link.
    open class ShmodelDisableDetails: CustomStringConvertible {
        /// Sharing permission. Might be missing due to historical data gap.
        open let sharingPermission: String?
        /// Shared link token key.
        open let tokenKey: String?
        public init(sharingPermission: String? = nil, tokenKey: String? = nil) {
            nullableValidator(stringValidator())(sharingPermission)
            self.sharingPermission = sharingPermission
            nullableValidator(stringValidator())(tokenKey)
            self.tokenKey = tokenKey
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelDisableDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelDisableDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelDisableDetails) -> JSON {
            let output = [ 
            "sharing_permission": NullableSerializer(Serialization._StringSerializer).serialize(value.sharingPermission),
            "token_key": NullableSerializer(Serialization._StringSerializer).serialize(value.tokenKey),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelDisableDetails {
            switch json {
                case .dictionary(let dict):
                    let sharingPermission = NullableSerializer(Serialization._StringSerializer).deserialize(dict["sharing_permission"] ?? .null)
                    let tokenKey = NullableSerializer(Serialization._StringSerializer).deserialize(dict["token_key"] ?? .null)
                    return ShmodelDisableDetails(sharingPermission: sharingPermission, tokenKey: tokenKey)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared a link with Facebook users.
    open class ShmodelFbShareDetails: CustomStringConvertible {
        /// Sharing non member recipients.
        open let sharingNonMemberRecipients: Array<TeamLog.NonTeamMemberLogInfo>
        public init(sharingNonMemberRecipients: Array<TeamLog.NonTeamMemberLogInfo>) {
            self.sharingNonMemberRecipients = sharingNonMemberRecipients
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelFbShareDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelFbShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelFbShareDetails) -> JSON {
            let output = [ 
            "sharing_non_member_recipients": ArraySerializer(TeamLog.NonTeamMemberLogInfoSerializer()).serialize(value.sharingNonMemberRecipients),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelFbShareDetails {
            switch json {
                case .dictionary(let dict):
                    let sharingNonMemberRecipients = ArraySerializer(TeamLog.NonTeamMemberLogInfoSerializer()).deserialize(dict["sharing_non_member_recipients"] ?? .null)
                    return ShmodelFbShareDetails(sharingNonMemberRecipients: sharingNonMemberRecipients)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared a link with a group.
    open class ShmodelGroupShareDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelGroupShareDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelGroupShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelGroupShareDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelGroupShareDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelGroupShareDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the expiration date from a link.
    open class ShmodelRemoveExpirationDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelRemoveExpirationDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelRemoveExpirationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelRemoveExpirationDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelRemoveExpirationDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelRemoveExpirationDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added an expiration date to a link.
    open class ShmodelSetExpirationDetails: CustomStringConvertible {
        /// Expiration starting date.
        open let expirationStartDate: String
        /// The number of days from the starting expiration date after which the link will expire.
        open let expirationDays: Int64
        public init(expirationStartDate: String, expirationDays: Int64) {
            stringValidator()(expirationStartDate)
            self.expirationStartDate = expirationStartDate
            comparableValidator()(expirationDays)
            self.expirationDays = expirationDays
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelSetExpirationDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelSetExpirationDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelSetExpirationDetails) -> JSON {
            let output = [ 
            "expiration_start_date": Serialization._StringSerializer.serialize(value.expirationStartDate),
            "expiration_days": Serialization._Int64Serializer.serialize(value.expirationDays),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelSetExpirationDetails {
            switch json {
                case .dictionary(let dict):
                    let expirationStartDate = Serialization._StringSerializer.deserialize(dict["expiration_start_date"] ?? .null)
                    let expirationDays = Serialization._Int64Serializer.deserialize(dict["expiration_days"] ?? .null)
                    return ShmodelSetExpirationDetails(expirationStartDate: expirationStartDate, expirationDays: expirationDays)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a team member's file/folder to their Dropbox from a link.
    open class ShmodelTeamCopyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelTeamCopyDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelTeamCopyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelTeamCopyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelTeamCopyDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelTeamCopyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downloaded a team member's file/folder from a link.
    open class ShmodelTeamDownloadDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelTeamDownloadDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelTeamDownloadDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelTeamDownloadDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelTeamDownloadDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelTeamDownloadDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Shared a link with team members.
    open class ShmodelTeamShareDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelTeamShareDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelTeamShareDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelTeamShareDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelTeamShareDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelTeamShareDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opened a team member's link.
    open class ShmodelTeamViewDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelTeamViewDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelTeamViewDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelTeamViewDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelTeamViewDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelTeamViewDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Password-protected a link.
    open class ShmodelVisibilityPasswordDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelVisibilityPasswordDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelVisibilityPasswordDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelVisibilityPasswordDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelVisibilityPasswordDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelVisibilityPasswordDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Made a file/folder visible to anyone with the link.
    open class ShmodelVisibilityPublicDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelVisibilityPublicDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelVisibilityPublicDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelVisibilityPublicDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelVisibilityPublicDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelVisibilityPublicDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Made a file/folder visible only to team members with the link.
    open class ShmodelVisibilityTeamOnlyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(ShmodelVisibilityTeamOnlyDetailsSerializer().serialize(self)))"
        }
    }
    open class ShmodelVisibilityTeamOnlyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: ShmodelVisibilityTeamOnlyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> ShmodelVisibilityTeamOnlyDetails {
            switch json {
                case .dictionary(_):
                    return ShmodelVisibilityTeamOnlyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Ended admin sign-in-as session.
    open class SignInAsSessionEndDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionEndDetailsSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionEndDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionEndDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionEndDetails {
            switch json {
                case .dictionary(_):
                    return SignInAsSessionEndDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Started admin sign-in-as session.
    open class SignInAsSessionStartDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SignInAsSessionStartDetailsSerializer().serialize(self)))"
        }
    }
    open class SignInAsSessionStartDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SignInAsSessionStartDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SignInAsSessionStartDetails {
            switch json {
                case .dictionary(_):
                    return SignInAsSessionStartDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the default Smart Sync policy for team members.
    open class SmartSyncChangePolicyDetails: CustomStringConvertible {
        /// New smart sync policy.
        open let newValue: TeamLog.SmartSyncPolicy
        /// Previous smart sync policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.SmartSyncPolicy?
        public init(newValue: TeamLog.SmartSyncPolicy, previousValue: TeamLog.SmartSyncPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.SmartSyncPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.SmartSyncPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.SmartSyncPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.SmartSyncPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SmartSyncChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Smart Sync non-admin devices report created.
    open class SmartSyncCreateAdminPrivilegeReportDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncCreateAdminPrivilegeReportDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncCreateAdminPrivilegeReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncCreateAdminPrivilegeReportDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncCreateAdminPrivilegeReportDetails {
            switch json {
                case .dictionary(_):
                    return SmartSyncCreateAdminPrivilegeReportDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opted team into Smart Sync.
    open class SmartSyncNotOptOutDetails: CustomStringConvertible {
        /// Previous Smart Sync opt out policy.
        open let previousValue: TeamLog.SmartSyncOptOutPolicy
        /// New Smart Sync opt out policy.
        open let newValue: TeamLog.SmartSyncOptOutPolicy
        public init(previousValue: TeamLog.SmartSyncOptOutPolicy, newValue: TeamLog.SmartSyncOptOutPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncNotOptOutDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncNotOptOutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncNotOptOutDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncNotOptOutDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return SmartSyncNotOptOutDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Opted team out of Smart Sync.
    open class SmartSyncOptOutDetails: CustomStringConvertible {
        /// Previous Smart Sync opt out policy.
        open let previousValue: TeamLog.SmartSyncOptOutPolicy
        /// New Smart Sync opt out policy.
        open let newValue: TeamLog.SmartSyncOptOutPolicy
        public init(previousValue: TeamLog.SmartSyncOptOutPolicy, newValue: TeamLog.SmartSyncOptOutPolicy) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncOptOutDetailsSerializer().serialize(self)))"
        }
    }
    open class SmartSyncOptOutDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncOptOutDetails) -> JSON {
            let output = [ 
            "previous_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.previousValue),
            "new_value": TeamLog.SmartSyncOptOutPolicySerializer().serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SmartSyncOptOutDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["previous_value"] ?? .null)
                    let newValue = TeamLog.SmartSyncOptOutPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    return SmartSyncOptOutDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The SmartSyncOptOutPolicy union
    public enum SmartSyncOptOutPolicy: CustomStringConvertible {
        /// An unspecified error.
        case default_
        /// An unspecified error.
        case optedOut
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncOptOutPolicySerializer().serialize(self)))"
        }
    }
    open class SmartSyncOptOutPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncOptOutPolicy) -> JSON {
            switch value {
                case .default_:
                    var d = [String: JSON]()
                    d[".tag"] = .str("default")
                    return .dictionary(d)
                case .optedOut:
                    var d = [String: JSON]()
                    d[".tag"] = .str("opted_out")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SmartSyncOptOutPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "default":
                            return SmartSyncOptOutPolicy.default_
                        case "opted_out":
                            return SmartSyncOptOutPolicy.optedOut
                        case "other":
                            return SmartSyncOptOutPolicy.other
                        default:
                            return SmartSyncOptOutPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SmartSyncPolicy union
    public enum SmartSyncPolicy: CustomStringConvertible {
        /// An unspecified error.
        case localOnly
        /// An unspecified error.
        case synced
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SmartSyncPolicySerializer().serialize(self)))"
        }
    }
    open class SmartSyncPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SmartSyncPolicy) -> JSON {
            switch value {
                case .localOnly:
                    var d = [String: JSON]()
                    d[".tag"] = .str("local_only")
                    return .dictionary(d)
                case .synced:
                    var d = [String: JSON]()
                    d[".tag"] = .str("synced")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SmartSyncPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "local_only":
                            return SmartSyncPolicy.localOnly
                        case "synced":
                            return SmartSyncPolicy.synced
                        case "other":
                            return SmartSyncPolicy.other
                        default:
                            return SmartSyncPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SpaceLimitsLevel union
    public enum SpaceLimitsLevel: CustomStringConvertible {
        /// An unspecified error.
        case generous
        /// An unspecified error.
        case moderate
        /// An unspecified error.
        case noLimit
        /// An unspecified error.
        case strict
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SpaceLimitsLevelSerializer().serialize(self)))"
        }
    }
    open class SpaceLimitsLevelSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceLimitsLevel) -> JSON {
            switch value {
                case .generous:
                    var d = [String: JSON]()
                    d[".tag"] = .str("generous")
                    return .dictionary(d)
                case .moderate:
                    var d = [String: JSON]()
                    d[".tag"] = .str("moderate")
                    return .dictionary(d)
                case .noLimit:
                    var d = [String: JSON]()
                    d[".tag"] = .str("no_limit")
                    return .dictionary(d)
                case .strict:
                    var d = [String: JSON]()
                    d[".tag"] = .str("strict")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SpaceLimitsLevel {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "generous":
                            return SpaceLimitsLevel.generous
                        case "moderate":
                            return SpaceLimitsLevel.moderate
                        case "no_limit":
                            return SpaceLimitsLevel.noLimit
                        case "strict":
                            return SpaceLimitsLevel.strict
                        case "other":
                            return SpaceLimitsLevel.other
                        default:
                            return SpaceLimitsLevel.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// The SpaceLimitsStatus union
    public enum SpaceLimitsStatus: CustomStringConvertible {
        /// An unspecified error.
        case withinQuota
        /// An unspecified error.
        case nearQuota
        /// An unspecified error.
        case overQuota
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SpaceLimitsStatusSerializer().serialize(self)))"
        }
    }
    open class SpaceLimitsStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SpaceLimitsStatus) -> JSON {
            switch value {
                case .withinQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("within_quota")
                    return .dictionary(d)
                case .nearQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("near_quota")
                    return .dictionary(d)
                case .overQuota:
                    var d = [String: JSON]()
                    d[".tag"] = .str("over_quota")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> SpaceLimitsStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "within_quota":
                            return SpaceLimitsStatus.withinQuota
                        case "near_quota":
                            return SpaceLimitsStatus.nearQuota
                        case "over_quota":
                            return SpaceLimitsStatus.overQuota
                        case "other":
                            return SpaceLimitsStatus.other
                        default:
                            return SpaceLimitsStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Added the X.509 certificate for SSO.
    open class SsoAddCertDetails: CustomStringConvertible {
        /// SSO certificate details.
        open let certificateDetails: TeamLog.Certificate
        public init(certificateDetails: TeamLog.Certificate) {
            self.certificateDetails = certificateDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddCertDetails) -> JSON {
            let output = [ 
            "certificate_details": TeamLog.CertificateSerializer().serialize(value.certificateDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddCertDetails {
            switch json {
                case .dictionary(let dict):
                    let certificateDetails = TeamLog.CertificateSerializer().deserialize(dict["certificate_details"] ?? .null)
                    return SsoAddCertDetails(certificateDetails: certificateDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added sign-in URL for SSO.
    open class SsoAddLoginUrlDetails: CustomStringConvertible {
        /// New single sign-on login URL.
        open let newValue: String
        public init(newValue: String) {
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLoginUrlDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return SsoAddLoginUrlDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added sign-out URL for SSO.
    open class SsoAddLogoutUrlDetails: CustomStringConvertible {
        /// New single sign-on logout URL. Might be missing due to historical data gap.
        open let newValue: String?
        public init(newValue: String? = nil) {
            nullableValidator(stringValidator())(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoAddLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoAddLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoAddLogoutUrlDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(Serialization._StringSerializer).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoAddLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_value"] ?? .null)
                    return SsoAddLogoutUrlDetails(newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the X.509 certificate for SSO.
    open class SsoChangeCertDetails: CustomStringConvertible {
        /// Previous SSO certificate details.
        open let previousCertificateDetails: TeamLog.Certificate?
        /// New SSO certificate details.
        open let newCertificateDetails: TeamLog.Certificate
        public init(newCertificateDetails: TeamLog.Certificate, previousCertificateDetails: TeamLog.Certificate? = nil) {
            self.previousCertificateDetails = previousCertificateDetails
            self.newCertificateDetails = newCertificateDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeCertDetails) -> JSON {
            let output = [ 
            "new_certificate_details": TeamLog.CertificateSerializer().serialize(value.newCertificateDetails),
            "previous_certificate_details": NullableSerializer(TeamLog.CertificateSerializer()).serialize(value.previousCertificateDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeCertDetails {
            switch json {
                case .dictionary(let dict):
                    let newCertificateDetails = TeamLog.CertificateSerializer().deserialize(dict["new_certificate_details"] ?? .null)
                    let previousCertificateDetails = NullableSerializer(TeamLog.CertificateSerializer()).deserialize(dict["previous_certificate_details"] ?? .null)
                    return SsoChangeCertDetails(newCertificateDetails: newCertificateDetails, previousCertificateDetails: previousCertificateDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the sign-in URL for SSO.
    open class SsoChangeLoginUrlDetails: CustomStringConvertible {
        /// Previous single sign-on login URL.
        open let previousValue: String
        /// New single sign-on login URL.
        open let newValue: String
        public init(previousValue: String, newValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
            stringValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLoginUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    return SsoChangeLoginUrlDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the sign-out URL for SSO.
    open class SsoChangeLogoutUrlDetails: CustomStringConvertible {
        /// Previous single sign-on logout URL. Might be missing due to historical data gap.
        open let previousValue: String?
        /// New single sign-on logout URL. Might be missing due to historical data gap.
        open let newValue: String?
        public init(previousValue: String? = nil, newValue: String? = nil) {
            nullableValidator(stringValidator())(previousValue)
            self.previousValue = previousValue
            nullableValidator(stringValidator())(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeLogoutUrlDetails) -> JSON {
            let output = [ 
            "previous_value": NullableSerializer(Serialization._StringSerializer).serialize(value.previousValue),
            "new_value": NullableSerializer(Serialization._StringSerializer).serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["previous_value"] ?? .null)
                    let newValue = NullableSerializer(Serialization._StringSerializer).deserialize(dict["new_value"] ?? .null)
                    return SsoChangeLogoutUrlDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Change the single sign-on policy for the team.
    open class SsoChangePolicyDetails: CustomStringConvertible {
        /// New single sign-on policy.
        open let newValue: TeamPolicies.SsoPolicy
        /// Previous single sign-on policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.SsoPolicy?
        public init(newValue: TeamPolicies.SsoPolicy, previousValue: TeamPolicies.SsoPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.SsoPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.SsoPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.SsoPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.SsoPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return SsoChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the SAML identity mode for SSO.
    open class SsoChangeSamlIdentityModeDetails: CustomStringConvertible {
        /// Previous single sign-on identity mode.
        open let previousValue: Int64
        /// New single sign-on identity mode.
        open let newValue: Int64
        public init(previousValue: Int64, newValue: Int64) {
            comparableValidator()(previousValue)
            self.previousValue = previousValue
            comparableValidator()(newValue)
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoChangeSamlIdentityModeDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoChangeSamlIdentityModeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoChangeSamlIdentityModeDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._Int64Serializer.serialize(value.previousValue),
            "new_value": Serialization._Int64Serializer.serialize(value.newValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoChangeSamlIdentityModeDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._Int64Serializer.deserialize(dict["previous_value"] ?? .null)
                    let newValue = Serialization._Int64Serializer.deserialize(dict["new_value"] ?? .null)
                    return SsoChangeSamlIdentityModeDetails(previousValue: previousValue, newValue: newValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Failed to sign in using SSO.
    open class SsoLoginFailDetails: CustomStringConvertible {
        /// Login failure details.
        open let errorDetails: TeamLog.FailureDetailsLogInfo
        public init(errorDetails: TeamLog.FailureDetailsLogInfo) {
            self.errorDetails = errorDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoLoginFailDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoLoginFailDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoLoginFailDetails) -> JSON {
            let output = [ 
            "error_details": TeamLog.FailureDetailsLogInfoSerializer().serialize(value.errorDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoLoginFailDetails {
            switch json {
                case .dictionary(let dict):
                    let errorDetails = TeamLog.FailureDetailsLogInfoSerializer().deserialize(dict["error_details"] ?? .null)
                    return SsoLoginFailDetails(errorDetails: errorDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the X.509 certificate for SSO.
    open class SsoRemoveCertDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveCertDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveCertDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveCertDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveCertDetails {
            switch json {
                case .dictionary(_):
                    return SsoRemoveCertDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the sign-in URL for SSO.
    open class SsoRemoveLoginUrlDetails: CustomStringConvertible {
        /// Previous single sign-on login URL.
        open let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLoginUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLoginUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLoginUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLoginUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return SsoRemoveLoginUrlDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed single sign-on logout URL.
    open class SsoRemoveLogoutUrlDetails: CustomStringConvertible {
        /// Previous single sign-on logout URL.
        open let previousValue: String
        public init(previousValue: String) {
            stringValidator()(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(SsoRemoveLogoutUrlDetailsSerializer().serialize(self)))"
        }
    }
    open class SsoRemoveLogoutUrlDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: SsoRemoveLogoutUrlDetails) -> JSON {
            let output = [ 
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> SsoRemoveLogoutUrlDetails {
            switch json {
                case .dictionary(let dict):
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return SsoRemoveLogoutUrlDetails(previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a team activity report.
    open class TeamActivityCreateReportDetails: CustomStringConvertible {
        /// Report start date.
        open let startDate: Date
        /// Report end date.
        open let endDate: Date
        public init(startDate: Date, endDate: Date) {
            self.startDate = startDate
            self.endDate = endDate
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamActivityCreateReportDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamActivityCreateReportDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamActivityCreateReportDetails) -> JSON {
            let output = [ 
            "start_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.startDate),
            "end_date": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.endDate),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamActivityCreateReportDetails {
            switch json {
                case .dictionary(let dict):
                    let startDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["start_date"] ?? .null)
                    let endDate = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["end_date"] ?? .null)
                    return TeamActivityCreateReportDetails(startDate: startDate, endDate: endDate)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// An audit log event.
    open class TeamEvent: CustomStringConvertible {
        /// The Dropbox timestamp representing when the action was taken.
        open let timestamp_: Date
        /// The category that this type of action belongs to.
        open let eventCategory: TeamLog.EventCategory
        /// The entity who actually performed the action.
        open let actor: TeamLog.ActorLogInfo
        /// The origin from which the actor performed the action including information about host, ip address, location,
        /// session, etc. If the action was performed programmatically via the API the origin represents the API client.
        open let origin: TeamLog.OriginLogInfo?
        /// True if the action involved a non team member either as the actor or as one of the affected users.
        open let involveNonTeamMember: Bool
        /// The user or team on whose behalf the actor performed the action.
        open let context: TeamLog.ContextLogInfo
        /// Zero or more users and/or groups that are affected by the action. Note that this list doesn't include any
        /// actors or users in context.
        open let participants: Array<TeamLog.ParticipantLogInfo>?
        /// Zero or more content assets involved in the action. Currently these include Dropbox files and folders but in
        /// the future we might add other asset types such as Paper documents, folders, projects, etc.
        open let assets: Array<TeamLog.AssetLogInfo>?
        /// The particular type of action taken.
        open let eventType: TeamLog.EventType
        /// The variable event schema applicable to this type of action, instantiated with respect to this particular
        /// action.
        open let details: TeamLog.EventDetails
        public init(timestamp_: Date, eventCategory: TeamLog.EventCategory, actor: TeamLog.ActorLogInfo, involveNonTeamMember: Bool, context: TeamLog.ContextLogInfo, eventType: TeamLog.EventType, details: TeamLog.EventDetails, origin: TeamLog.OriginLogInfo? = nil, participants: Array<TeamLog.ParticipantLogInfo>? = nil, assets: Array<TeamLog.AssetLogInfo>? = nil) {
            self.timestamp_ = timestamp_
            self.eventCategory = eventCategory
            self.actor = actor
            self.origin = origin
            self.involveNonTeamMember = involveNonTeamMember
            self.context = context
            self.participants = participants
            self.assets = assets
            self.eventType = eventType
            self.details = details
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamEventSerializer().serialize(self)))"
        }
    }
    open class TeamEventSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamEvent) -> JSON {
            let output = [ 
            "timestamp": NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").serialize(value.timestamp_),
            "event_category": TeamLog.EventCategorySerializer().serialize(value.eventCategory),
            "actor": TeamLog.ActorLogInfoSerializer().serialize(value.actor),
            "involve_non_team_member": Serialization._BoolSerializer.serialize(value.involveNonTeamMember),
            "context": TeamLog.ContextLogInfoSerializer().serialize(value.context),
            "event_type": TeamLog.EventTypeSerializer().serialize(value.eventType),
            "details": TeamLog.EventDetailsSerializer().serialize(value.details),
            "origin": NullableSerializer(TeamLog.OriginLogInfoSerializer()).serialize(value.origin),
            "participants": NullableSerializer(ArraySerializer(TeamLog.ParticipantLogInfoSerializer())).serialize(value.participants),
            "assets": NullableSerializer(ArraySerializer(TeamLog.AssetLogInfoSerializer())).serialize(value.assets),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamEvent {
            switch json {
                case .dictionary(let dict):
                    let timestamp_ = NSDateSerializer("%Y-%m-%dT%H:%M:%SZ").deserialize(dict["timestamp"] ?? .null)
                    let eventCategory = TeamLog.EventCategorySerializer().deserialize(dict["event_category"] ?? .null)
                    let actor = TeamLog.ActorLogInfoSerializer().deserialize(dict["actor"] ?? .null)
                    let involveNonTeamMember = Serialization._BoolSerializer.deserialize(dict["involve_non_team_member"] ?? .null)
                    let context = TeamLog.ContextLogInfoSerializer().deserialize(dict["context"] ?? .null)
                    let eventType = TeamLog.EventTypeSerializer().deserialize(dict["event_type"] ?? .null)
                    let details = TeamLog.EventDetailsSerializer().deserialize(dict["details"] ?? .null)
                    let origin = NullableSerializer(TeamLog.OriginLogInfoSerializer()).deserialize(dict["origin"] ?? .null)
                    let participants = NullableSerializer(ArraySerializer(TeamLog.ParticipantLogInfoSerializer())).deserialize(dict["participants"] ?? .null)
                    let assets = NullableSerializer(ArraySerializer(TeamLog.AssetLogInfoSerializer())).deserialize(dict["assets"] ?? .null)
                    return TeamEvent(timestamp_: timestamp_, eventCategory: eventCategory, actor: actor, involveNonTeamMember: involveNonTeamMember, context: context, eventType: eventType, details: details, origin: origin, participants: participants, assets: assets)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the archival status of a team folder.
    open class TeamFolderChangeStatusDetails: CustomStringConvertible {
        /// New team folder status.
        open let newValue: TeamLog.TeamFolderStatus
        /// Previous team folder status. Might be missing due to historical data gap.
        open let previousValue: TeamLog.TeamFolderStatus?
        public init(newValue: TeamLog.TeamFolderStatus, previousValue: TeamLog.TeamFolderStatus? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamFolderStatusSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TeamFolderStatusSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamFolderStatusSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TeamFolderStatusSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TeamFolderChangeStatusDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Created a new team folder in active status.
    open class TeamFolderCreateDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderCreateDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderCreateDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderCreateDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderCreateDetails {
            switch json {
                case .dictionary(_):
                    return TeamFolderCreateDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Downgraded a team folder to a regular shared folder.
    open class TeamFolderDowngradeDetails: CustomStringConvertible {
        /// Target asset position in the Assets list.
        open let targetAssetIndex: UInt64
        public init(targetAssetIndex: UInt64) {
            comparableValidator()(targetAssetIndex)
            self.targetAssetIndex = targetAssetIndex
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderDowngradeDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderDowngradeDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderDowngradeDetails) -> JSON {
            let output = [ 
            "target_asset_index": Serialization._UInt64Serializer.serialize(value.targetAssetIndex),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderDowngradeDetails {
            switch json {
                case .dictionary(let dict):
                    let targetAssetIndex = Serialization._UInt64Serializer.deserialize(dict["target_asset_index"] ?? .null)
                    return TeamFolderDowngradeDetails(targetAssetIndex: targetAssetIndex)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Permanently deleted an archived team folder.
    open class TeamFolderPermanentlyDeleteDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderPermanentlyDeleteDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderPermanentlyDeleteDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderPermanentlyDeleteDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderPermanentlyDeleteDetails {
            switch json {
                case .dictionary(_):
                    return TeamFolderPermanentlyDeleteDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Renamed an active or archived team folder.
    open class TeamFolderRenameDetails: CustomStringConvertible {
        /// Specifies the source and destination indices in the assets list.
        open let relocateActionDetails: TeamLog.RelocateAssetReferencesLogInfo
        public init(relocateActionDetails: TeamLog.RelocateAssetReferencesLogInfo) {
            self.relocateActionDetails = relocateActionDetails
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderRenameDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamFolderRenameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderRenameDetails) -> JSON {
            let output = [ 
            "relocate_action_details": TeamLog.RelocateAssetReferencesLogInfoSerializer().serialize(value.relocateActionDetails),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamFolderRenameDetails {
            switch json {
                case .dictionary(let dict):
                    let relocateActionDetails = TeamLog.RelocateAssetReferencesLogInfoSerializer().deserialize(dict["relocate_action_details"] ?? .null)
                    return TeamFolderRenameDetails(relocateActionDetails: relocateActionDetails)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamFolderStatus union
    public enum TeamFolderStatus: CustomStringConvertible {
        /// An unspecified error.
        case archive
        /// An unspecified error.
        case unarchive
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamFolderStatusSerializer().serialize(self)))"
        }
    }
    open class TeamFolderStatusSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamFolderStatus) -> JSON {
            switch value {
                case .archive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("archive")
                    return .dictionary(d)
                case .unarchive:
                    var d = [String: JSON]()
                    d[".tag"] = .str("unarchive")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamFolderStatus {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "archive":
                            return TeamFolderStatus.archive
                        case "unarchive":
                            return TeamFolderStatus.unarchive
                        case "other":
                            return TeamFolderStatus.other
                        default:
                            return TeamFolderStatus.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Team linked app
    open class TeamLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class TeamLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return TeamLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team member's logged information.
    open class TeamMemberLogInfo: TeamLog.UserLogInfo {
        /// Team member ID. Might be missing due to historical data gap.
        open let teamMemberId: String?
        /// Team member external ID.
        open let memberExternalId: String?
        public init(accountId: String? = nil, displayName: String? = nil, email: String? = nil, teamMemberId: String? = nil, memberExternalId: String? = nil) {
            nullableValidator(stringValidator())(teamMemberId)
            self.teamMemberId = teamMemberId
            nullableValidator(stringValidator(maxLength: 64))(memberExternalId)
            self.memberExternalId = memberExternalId
            super.init(accountId: accountId, displayName: displayName, email: email)
        }
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMemberLogInfoSerializer().serialize(self)))"
        }
    }
    open class TeamMemberLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMemberLogInfo) -> JSON {
            let output = [ 
            "account_id": NullableSerializer(Serialization._StringSerializer).serialize(value.accountId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            "email": NullableSerializer(Serialization._StringSerializer).serialize(value.email),
            "team_member_id": NullableSerializer(Serialization._StringSerializer).serialize(value.teamMemberId),
            "member_external_id": NullableSerializer(Serialization._StringSerializer).serialize(value.memberExternalId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMemberLogInfo {
            switch json {
                case .dictionary(let dict):
                    let accountId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["account_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    let email = NullableSerializer(Serialization._StringSerializer).deserialize(dict["email"] ?? .null)
                    let teamMemberId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["team_member_id"] ?? .null)
                    let memberExternalId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["member_external_id"] ?? .null)
                    return TeamMemberLogInfo(accountId: accountId, displayName: displayName, email: email, teamMemberId: teamMemberId, memberExternalId: memberExternalId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TeamMembershipType union
    public enum TeamMembershipType: CustomStringConvertible {
        /// An unspecified error.
        case free
        /// An unspecified error.
        case full
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMembershipTypeSerializer().serialize(self)))"
        }
    }
    open class TeamMembershipTypeSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMembershipType) -> JSON {
            switch value {
                case .free:
                    var d = [String: JSON]()
                    d[".tag"] = .str("free")
                    return .dictionary(d)
                case .full:
                    var d = [String: JSON]()
                    d[".tag"] = .str("full")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TeamMembershipType {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "free":
                            return TeamMembershipType.free
                        case "full":
                            return TeamMembershipType.full
                        case "other":
                            return TeamMembershipType.other
                        default:
                            return TeamMembershipType.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Merged another team into this team.
    open class TeamMergeFromDetails: CustomStringConvertible {
        /// The name of the team that was merged into this team.
        open let teamName: String
        public init(teamName: String) {
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeFromDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeFromDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeFromDetails) -> JSON {
            let output = [ 
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeFromDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    return TeamMergeFromDetails(teamName: teamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Merged this team into another team.
    open class TeamMergeToDetails: CustomStringConvertible {
        /// The name of the team that this team was merged into.
        open let teamName: String
        public init(teamName: String) {
            stringValidator()(teamName)
            self.teamName = teamName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamMergeToDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamMergeToDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamMergeToDetails) -> JSON {
            let output = [ 
            "team_name": Serialization._StringSerializer.serialize(value.teamName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamMergeToDetails {
            switch json {
                case .dictionary(let dict):
                    let teamName = Serialization._StringSerializer.deserialize(dict["team_name"] ?? .null)
                    return TeamMergeToDetails(teamName: teamName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Team name details
    open class TeamName: CustomStringConvertible {
        /// Team's display name.
        open let teamDisplayName: String
        /// Team's legal name.
        open let teamLegalName: String
        public init(teamDisplayName: String, teamLegalName: String) {
            stringValidator()(teamDisplayName)
            self.teamDisplayName = teamDisplayName
            stringValidator()(teamLegalName)
            self.teamLegalName = teamLegalName
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamNameSerializer().serialize(self)))"
        }
    }
    open class TeamNameSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamName) -> JSON {
            let output = [ 
            "team_display_name": Serialization._StringSerializer.serialize(value.teamDisplayName),
            "team_legal_name": Serialization._StringSerializer.serialize(value.teamLegalName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamName {
            switch json {
                case .dictionary(let dict):
                    let teamDisplayName = Serialization._StringSerializer.deserialize(dict["team_display_name"] ?? .null)
                    let teamLegalName = Serialization._StringSerializer.deserialize(dict["team_legal_name"] ?? .null)
                    return TeamName(teamDisplayName: teamDisplayName, teamLegalName: teamLegalName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a team logo to be displayed on shared link headers.
    open class TeamProfileAddLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileAddLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileAddLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileAddLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileAddLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileAddLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the default language for the team.
    open class TeamProfileChangeDefaultLanguageDetails: CustomStringConvertible {
        /// New team's default language.
        open let newValue: String
        /// Previous team's default language.
        open let previousValue: String
        public init(newValue: String, previousValue: String) {
            stringValidator(minLength: 2)(newValue)
            self.newValue = newValue
            stringValidator(minLength: 2)(previousValue)
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeDefaultLanguageDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeDefaultLanguageDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeDefaultLanguageDetails) -> JSON {
            let output = [ 
            "new_value": Serialization._StringSerializer.serialize(value.newValue),
            "previous_value": Serialization._StringSerializer.serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeDefaultLanguageDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = Serialization._StringSerializer.deserialize(dict["new_value"] ?? .null)
                    let previousValue = Serialization._StringSerializer.deserialize(dict["previous_value"] ?? .null)
                    return TeamProfileChangeDefaultLanguageDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the team logo to be displayed on shared link headers.
    open class TeamProfileChangeLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileChangeLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the team name.
    open class TeamProfileChangeNameDetails: CustomStringConvertible {
        /// Previous teams name. Might be missing due to historical data gap.
        open let previousValue: TeamLog.TeamName?
        /// New team name.
        open let newValue: TeamLog.TeamName
        public init(newValue: TeamLog.TeamName, previousValue: TeamLog.TeamName? = nil) {
            self.previousValue = previousValue
            self.newValue = newValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileChangeNameDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileChangeNameDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileChangeNameDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TeamNameSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TeamNameSerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileChangeNameDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TeamNameSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TeamNameSerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TeamProfileChangeNameDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed the team logo to be displayed on shared link headers.
    open class TeamProfileRemoveLogoDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TeamProfileRemoveLogoDetailsSerializer().serialize(self)))"
        }
    }
    open class TeamProfileRemoveLogoDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TeamProfileRemoveLogoDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TeamProfileRemoveLogoDetails {
            switch json {
                case .dictionary(_):
                    return TeamProfileRemoveLogoDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a backup phone for two-step verification.
    open class TfaAddBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaAddBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaAddBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Added a security key for two-step verification.
    open class TfaAddSecurityKeyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaAddSecurityKeyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaAddSecurityKeyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaAddSecurityKeyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaAddSecurityKeyDetails {
            switch json {
                case .dictionary(_):
                    return TfaAddSecurityKeyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed the backup phone for two-step verification.
    open class TfaChangeBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangeBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaChangeBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Change two-step verification policy for the team.
    open class TfaChangePolicyDetails: CustomStringConvertible {
        /// New change policy.
        open let newValue: TeamPolicies.TwoStepVerificationPolicy
        /// Previous change policy. Might be missing due to historical data gap.
        open let previousValue: TeamPolicies.TwoStepVerificationPolicy?
        public init(newValue: TeamPolicies.TwoStepVerificationPolicy, previousValue: TeamPolicies.TwoStepVerificationPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamPolicies.TwoStepVerificationPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamPolicies.TwoStepVerificationPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamPolicies.TwoStepVerificationPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamPolicies.TwoStepVerificationPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TfaChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Enabled, disabled or changed the configuration for two-step verification.
    open class TfaChangeStatusDetails: CustomStringConvertible {
        /// The new two factor authentication configuration.
        open let newValue: TeamLog.TfaConfiguration
        /// The previous two factor authentication configuration. Might be missing due to historical data gap.
        open let previousValue: TeamLog.TfaConfiguration?
        /// Used two factor authentication rescue code. This flag is relevant when the two factor authentication
        /// configuration is disabled.
        open let usedRescueCode: Bool?
        public init(newValue: TeamLog.TfaConfiguration, previousValue: TeamLog.TfaConfiguration? = nil, usedRescueCode: Bool? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
            self.usedRescueCode = usedRescueCode
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaChangeStatusDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaChangeStatusDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaChangeStatusDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TfaConfigurationSerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TfaConfigurationSerializer()).serialize(value.previousValue),
            "used_rescue_code": NullableSerializer(Serialization._BoolSerializer).serialize(value.usedRescueCode),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaChangeStatusDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TfaConfigurationSerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TfaConfigurationSerializer()).deserialize(dict["previous_value"] ?? .null)
                    let usedRescueCode = NullableSerializer(Serialization._BoolSerializer).deserialize(dict["used_rescue_code"] ?? .null)
                    return TfaChangeStatusDetails(newValue: newValue, previousValue: previousValue, usedRescueCode: usedRescueCode)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Two factor authentication configuration. Note: the enabled option is deprecated.
    public enum TfaConfiguration: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case sms
        /// An unspecified error.
        case authenticator
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaConfigurationSerializer().serialize(self)))"
        }
    }
    open class TfaConfigurationSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaConfiguration) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .sms:
                    var d = [String: JSON]()
                    d[".tag"] = .str("sms")
                    return .dictionary(d)
                case .authenticator:
                    var d = [String: JSON]()
                    d[".tag"] = .str("authenticator")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TfaConfiguration {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TfaConfiguration.disabled
                        case "enabled":
                            return TfaConfiguration.enabled
                        case "sms":
                            return TfaConfiguration.sms
                        case "authenticator":
                            return TfaConfiguration.authenticator
                        case "other":
                            return TfaConfiguration.other
                        default:
                            return TfaConfiguration.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Removed the backup phone for two-step verification.
    open class TfaRemoveBackupPhoneDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveBackupPhoneDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveBackupPhoneDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveBackupPhoneDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveBackupPhoneDetails {
            switch json {
                case .dictionary(_):
                    return TfaRemoveBackupPhoneDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Removed a security key for two-step verification.
    open class TfaRemoveSecurityKeyDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaRemoveSecurityKeyDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaRemoveSecurityKeyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaRemoveSecurityKeyDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaRemoveSecurityKeyDetails {
            switch json {
                case .dictionary(_):
                    return TfaRemoveSecurityKeyDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Reset two-step verification for team member.
    open class TfaResetDetails: CustomStringConvertible {
        public init() {
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TfaResetDetailsSerializer().serialize(self)))"
        }
    }
    open class TfaResetDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TfaResetDetails) -> JSON {
            let output = [String: JSON]()
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TfaResetDetails {
            switch json {
                case .dictionary(_):
                    return TfaResetDetails()
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// The TimeUnit union
    public enum TimeUnit: CustomStringConvertible {
        /// An unspecified error.
        case milliseconds
        /// An unspecified error.
        case seconds
        /// An unspecified error.
        case minutes
        /// An unspecified error.
        case hours
        /// An unspecified error.
        case days
        /// An unspecified error.
        case weeks
        /// An unspecified error.
        case months
        /// An unspecified error.
        case years
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TimeUnitSerializer().serialize(self)))"
        }
    }
    open class TimeUnitSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TimeUnit) -> JSON {
            switch value {
                case .milliseconds:
                    var d = [String: JSON]()
                    d[".tag"] = .str("milliseconds")
                    return .dictionary(d)
                case .seconds:
                    var d = [String: JSON]()
                    d[".tag"] = .str("seconds")
                    return .dictionary(d)
                case .minutes:
                    var d = [String: JSON]()
                    d[".tag"] = .str("minutes")
                    return .dictionary(d)
                case .hours:
                    var d = [String: JSON]()
                    d[".tag"] = .str("hours")
                    return .dictionary(d)
                case .days:
                    var d = [String: JSON]()
                    d[".tag"] = .str("days")
                    return .dictionary(d)
                case .weeks:
                    var d = [String: JSON]()
                    d[".tag"] = .str("weeks")
                    return .dictionary(d)
                case .months:
                    var d = [String: JSON]()
                    d[".tag"] = .str("months")
                    return .dictionary(d)
                case .years:
                    var d = [String: JSON]()
                    d[".tag"] = .str("years")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TimeUnit {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "milliseconds":
                            return TimeUnit.milliseconds
                        case "seconds":
                            return TimeUnit.seconds
                        case "minutes":
                            return TimeUnit.minutes
                        case "hours":
                            return TimeUnit.hours
                        case "days":
                            return TimeUnit.days
                        case "weeks":
                            return TimeUnit.weeks
                        case "months":
                            return TimeUnit.months
                        case "years":
                            return TimeUnit.years
                        case "other":
                            return TimeUnit.other
                        default:
                            return TimeUnit.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Enabled or disabled the option for team members to link a personal Dropbox account in addition to their work
    /// account to the same computer.
    open class TwoAccountChangePolicyDetails: CustomStringConvertible {
        /// New two account policy.
        open let newValue: TeamLog.TwoAccountPolicy
        /// Previous two account policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.TwoAccountPolicy?
        public init(newValue: TeamLog.TwoAccountPolicy, previousValue: TeamLog.TwoAccountPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TwoAccountChangePolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class TwoAccountChangePolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TwoAccountChangePolicyDetails) -> JSON {
            let output = [ 
            "new_value": TeamLog.TwoAccountPolicySerializer().serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.TwoAccountPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> TwoAccountChangePolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = TeamLog.TwoAccountPolicySerializer().deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.TwoAccountPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return TwoAccountChangePolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Policy for pairing personal account to work account
    public enum TwoAccountPolicy: CustomStringConvertible {
        /// An unspecified error.
        case disabled
        /// An unspecified error.
        case enabled
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(TwoAccountPolicySerializer().serialize(self)))"
        }
    }
    open class TwoAccountPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: TwoAccountPolicy) -> JSON {
            switch value {
                case .disabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("disabled")
                    return .dictionary(d)
                case .enabled:
                    var d = [String: JSON]()
                    d[".tag"] = .str("enabled")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> TwoAccountPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "disabled":
                            return TwoAccountPolicy.disabled
                        case "enabled":
                            return TwoAccountPolicy.enabled
                        case "other":
                            return TwoAccountPolicy.other
                        default:
                            return TwoAccountPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// User linked app
    open class UserLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return UserLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User's name logged information
    open class UserNameLogInfo: CustomStringConvertible {
        /// Given name.
        open let givenName: String
        /// Surname.
        open let surname: String
        /// Locale. Might be missing due to historical data gap.
        open let locale: String?
        public init(givenName: String, surname: String, locale: String? = nil) {
            stringValidator()(givenName)
            self.givenName = givenName
            stringValidator()(surname)
            self.surname = surname
            nullableValidator(stringValidator())(locale)
            self.locale = locale
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserNameLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserNameLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserNameLogInfo) -> JSON {
            let output = [ 
            "given_name": Serialization._StringSerializer.serialize(value.givenName),
            "surname": Serialization._StringSerializer.serialize(value.surname),
            "locale": NullableSerializer(Serialization._StringSerializer).serialize(value.locale),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserNameLogInfo {
            switch json {
                case .dictionary(let dict):
                    let givenName = Serialization._StringSerializer.deserialize(dict["given_name"] ?? .null)
                    let surname = Serialization._StringSerializer.deserialize(dict["surname"] ?? .null)
                    let locale = NullableSerializer(Serialization._StringSerializer).deserialize(dict["locale"] ?? .null)
                    return UserNameLogInfo(givenName: givenName, surname: surname, locale: locale)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// User or team linked app. Used when linked type is missing due to historical data gap.
    open class UserOrTeamLinkedAppLogInfo: TeamLog.AppLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(UserOrTeamLinkedAppLogInfoSerializer().serialize(self)))"
        }
    }
    open class UserOrTeamLinkedAppLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: UserOrTeamLinkedAppLogInfo) -> JSON {
            let output = [ 
            "app_id": NullableSerializer(Serialization._StringSerializer).serialize(value.appId),
            "display_name": NullableSerializer(Serialization._StringSerializer).serialize(value.displayName),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> UserOrTeamLinkedAppLogInfo {
            switch json {
                case .dictionary(let dict):
                    let appId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["app_id"] ?? .null)
                    let displayName = NullableSerializer(Serialization._StringSerializer).deserialize(dict["display_name"] ?? .null)
                    return UserOrTeamLinkedAppLogInfo(appId: appId, displayName: displayName)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Web session.
    open class WebSessionLogInfo: TeamLog.SessionLogInfo {
        open override var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionLogInfoSerializer().serialize(self)))"
        }
    }
    open class WebSessionLogInfoSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionLogInfo) -> JSON {
            let output = [ 
            "session_id": NullableSerializer(Serialization._StringSerializer).serialize(value.sessionId),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionLogInfo {
            switch json {
                case .dictionary(let dict):
                    let sessionId = NullableSerializer(Serialization._StringSerializer).deserialize(dict["session_id"] ?? .null)
                    return WebSessionLogInfo(sessionId: sessionId)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed how long team members can stay signed in to Dropbox on the web.
    open class WebSessionsChangeFixedLengthPolicyDetails: CustomStringConvertible {
        /// New session length policy. Might be missing due to historical data gap.
        open let newValue: TeamLog.WebSessionsFixedLengthPolicy?
        /// Previous session length policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.WebSessionsFixedLengthPolicy?
        public init(newValue: TeamLog.WebSessionsFixedLengthPolicy? = nil, previousValue: TeamLog.WebSessionsFixedLengthPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeFixedLengthPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeFixedLengthPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeFixedLengthPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeFixedLengthPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.WebSessionsFixedLengthPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return WebSessionsChangeFixedLengthPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Changed how long team members can be idle while signed in to Dropbox on the web.
    open class WebSessionsChangeIdleLengthPolicyDetails: CustomStringConvertible {
        /// New idle length policy. Might be missing due to historical data gap.
        open let newValue: TeamLog.WebSessionsIdleLengthPolicy?
        /// Previous idle length policy. Might be missing due to historical data gap.
        open let previousValue: TeamLog.WebSessionsIdleLengthPolicy?
        public init(newValue: TeamLog.WebSessionsIdleLengthPolicy? = nil, previousValue: TeamLog.WebSessionsIdleLengthPolicy? = nil) {
            self.newValue = newValue
            self.previousValue = previousValue
        }
        open var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsChangeIdleLengthPolicyDetailsSerializer().serialize(self)))"
        }
    }
    open class WebSessionsChangeIdleLengthPolicyDetailsSerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsChangeIdleLengthPolicyDetails) -> JSON {
            let output = [ 
            "new_value": NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).serialize(value.newValue),
            "previous_value": NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).serialize(value.previousValue),
            ]
            return .dictionary(output)
        }
        open func deserialize(_ json: JSON) -> WebSessionsChangeIdleLengthPolicyDetails {
            switch json {
                case .dictionary(let dict):
                    let newValue = NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).deserialize(dict["new_value"] ?? .null)
                    let previousValue = NullableSerializer(TeamLog.WebSessionsIdleLengthPolicySerializer()).deserialize(dict["previous_value"] ?? .null)
                    return WebSessionsChangeIdleLengthPolicyDetails(newValue: newValue, previousValue: previousValue)
                default:
                    fatalError("Type error deserializing")
            }
        }
    }

    /// Web sessions fixed length policy.
    public enum WebSessionsFixedLengthPolicy: CustomStringConvertible {
        /// Defined fixed session length.
        case defined(TeamLog.DurationLogInfo)
        /// Undefined fixed session length.
        case undefined
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsFixedLengthPolicySerializer().serialize(self)))"
        }
    }
    open class WebSessionsFixedLengthPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsFixedLengthPolicy) -> JSON {
            switch value {
                case .defined(let arg):
                    var d = Serialization.getFields(TeamLog.DurationLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("defined")
                    return .dictionary(d)
                case .undefined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undefined")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> WebSessionsFixedLengthPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "defined":
                            let v = TeamLog.DurationLogInfoSerializer().deserialize(json)
                            return WebSessionsFixedLengthPolicy.defined(v)
                        case "undefined":
                            return WebSessionsFixedLengthPolicy.undefined
                        case "other":
                            return WebSessionsFixedLengthPolicy.other
                        default:
                            return WebSessionsFixedLengthPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }

    /// Web sessions idle length policy.
    public enum WebSessionsIdleLengthPolicy: CustomStringConvertible {
        /// Defined idle session length.
        case defined(TeamLog.DurationLogInfo)
        /// Undefined idle session length.
        case undefined
        /// An unspecified error.
        case other

        public var description: String {
            return "\(SerializeUtil.prepareJSONForSerialization(WebSessionsIdleLengthPolicySerializer().serialize(self)))"
        }
    }
    open class WebSessionsIdleLengthPolicySerializer: JSONSerializer {
        public init() { }
        open func serialize(_ value: WebSessionsIdleLengthPolicy) -> JSON {
            switch value {
                case .defined(let arg):
                    var d = Serialization.getFields(TeamLog.DurationLogInfoSerializer().serialize(arg))
                    d[".tag"] = .str("defined")
                    return .dictionary(d)
                case .undefined:
                    var d = [String: JSON]()
                    d[".tag"] = .str("undefined")
                    return .dictionary(d)
                case .other:
                    var d = [String: JSON]()
                    d[".tag"] = .str("other")
                    return .dictionary(d)
            }
        }
        open func deserialize(_ json: JSON) -> WebSessionsIdleLengthPolicy {
            switch json {
                case .dictionary(let d):
                    let tag = Serialization.getTag(d)
                    switch tag {
                        case "defined":
                            let v = TeamLog.DurationLogInfoSerializer().deserialize(json)
                            return WebSessionsIdleLengthPolicy.defined(v)
                        case "undefined":
                            return WebSessionsIdleLengthPolicy.undefined
                        case "other":
                            return WebSessionsIdleLengthPolicy.other
                        default:
                            return WebSessionsIdleLengthPolicy.other
                    }
                default:
                    fatalError("Failed to deserialize")
            }
        }
    }


    /// Stone Route Objects

    static let getEvents = Route(
        name: "get_events",
        namespace: "team_log",
        deprecated: false,
        argSerializer: TeamLog.GetTeamEventsArgSerializer(),
        responseSerializer: TeamLog.GetTeamEventsResultSerializer(),
        errorSerializer: TeamLog.GetTeamEventsErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
    static let getEventsContinue = Route(
        name: "get_events/continue",
        namespace: "team_log",
        deprecated: false,
        argSerializer: TeamLog.GetTeamEventsContinueArgSerializer(),
        responseSerializer: TeamLog.GetTeamEventsResultSerializer(),
        errorSerializer: TeamLog.GetTeamEventsContinueErrorSerializer(),
        attrs: ["host": "api",
                "style": "rpc"]
    )
}
