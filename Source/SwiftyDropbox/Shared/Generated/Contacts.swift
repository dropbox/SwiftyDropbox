///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the contacts namespace
public class Contacts {
    /// The DeleteManualContactsArg struct
    public class DeleteManualContactsArg: CustomStringConvertible, JSONRepresentable {
        /// List of manually added contacts to be deleted.
        public let emailAddresses: [String]
        public init(emailAddresses: [String]) {
            arrayValidator(itemValidator: stringValidator(
                maxLength: 255,
                pattern: "^['#&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*\\.[A-Za-z]{2,15}$"
            ))(emailAddresses)
            self.emailAddresses = emailAddresses
        }

        func json() throws -> JSON {
            try DeleteManualContactsArgSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try DeleteManualContactsArgSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for DeleteManualContactsArg: \(error)"
            }
        }
    }

    public class DeleteManualContactsArgSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: DeleteManualContactsArg) throws -> JSON {
            let output = [
                "email_addresses": try ArraySerializer(Serialization._StringSerializer).serialize(value.emailAddresses),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> DeleteManualContactsArg {
            switch json {
            case .dictionary(let dict):
                let emailAddresses = try ArraySerializer(Serialization._StringSerializer).deserialize(dict["email_addresses"] ?? .null)
                return DeleteManualContactsArg(emailAddresses: emailAddresses)
            default:
                throw JSONSerializerError.deserializeError(type: DeleteManualContactsArg.self, json: json)
            }
        }
    }

    /// The DeleteManualContactsError union
    public enum DeleteManualContactsError: CustomStringConvertible, JSONRepresentable {
        /// Can't delete contacts from this list. Make sure the list only has manually added contacts. The deletion was
        /// cancelled.
        case contactsNotFound([String])
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try DeleteManualContactsErrorSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try DeleteManualContactsErrorSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for DeleteManualContactsError: \(error)"
            }
        }
    }

    public class DeleteManualContactsErrorSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: DeleteManualContactsError) throws -> JSON {
            switch value {
            case .contactsNotFound(let arg):
                var d = try ["contacts_not_found": ArraySerializer(Serialization._StringSerializer).serialize(arg)]
                d[".tag"] = .str("contacts_not_found")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> DeleteManualContactsError {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "contacts_not_found":
                    let v = try ArraySerializer(Serialization._StringSerializer).deserialize(d["contacts_not_found"] ?? .null)
                    return DeleteManualContactsError.contactsNotFound(v)
                case "other":
                    return DeleteManualContactsError.other
                default:
                    return DeleteManualContactsError.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: DeleteManualContactsError.self, json: json)
            }
        }
    }

    /// Stone Route Objects

    static let deleteManualContacts = Route(
        name: "delete_manual_contacts",
        version: 1,
        namespace: "contacts",
        deprecated: false,
        argSerializer: Serialization._VoidSerializer,
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Serialization._VoidSerializer,
        attributes: RouteAttributes(
            auth: [.user],
            host: .api,
            style: .rpc
        )
    )
    static let deleteManualContactsBatch = Route(
        name: "delete_manual_contacts_batch",
        version: 1,
        namespace: "contacts",
        deprecated: false,
        argSerializer: Contacts.DeleteManualContactsArgSerializer(),
        responseSerializer: Serialization._VoidSerializer,
        errorSerializer: Contacts.DeleteManualContactsErrorSerializer(),
        attributes: RouteAttributes(
            auth: [.user],
            host: .api,
            style: .rpc
        )
    )
}
