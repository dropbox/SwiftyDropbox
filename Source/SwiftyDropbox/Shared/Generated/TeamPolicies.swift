///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the team_policies namespace
public class TeamPolicies {
    /// The CameraUploadsPolicyState union
    public enum CameraUploadsPolicyState: CustomStringConvertible, JSONRepresentable {
        /// Background camera uploads are disabled.
        case disabled
        /// Background camera uploads are allowed.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try CameraUploadsPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try CameraUploadsPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for CameraUploadsPolicyState: \(error)"
            }
        }
    }

    public class CameraUploadsPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: CameraUploadsPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> CameraUploadsPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return CameraUploadsPolicyState.disabled
                case "enabled":
                    return CameraUploadsPolicyState.enabled
                case "other":
                    return CameraUploadsPolicyState.other
                default:
                    return CameraUploadsPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: CameraUploadsPolicyState.self, json: json)
            }
        }
    }

    /// The ComputerBackupPolicyState union
    public enum ComputerBackupPolicyState: CustomStringConvertible, JSONRepresentable {
        /// Computer Backup feature is disabled.
        case disabled
        /// Computer Backup feature is enabled.
        case enabled
        /// Computer Backup defaults to ON for SSB teams, and OFF for Enterprise teams.
        case default_
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try ComputerBackupPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try ComputerBackupPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for ComputerBackupPolicyState: \(error)"
            }
        }
    }

    public class ComputerBackupPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: ComputerBackupPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .default_:
                var d = [String: JSON]()
                d[".tag"] = .str("default")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> ComputerBackupPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return ComputerBackupPolicyState.disabled
                case "enabled":
                    return ComputerBackupPolicyState.enabled
                case "default":
                    return ComputerBackupPolicyState.default_
                case "other":
                    return ComputerBackupPolicyState.other
                default:
                    return ComputerBackupPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: ComputerBackupPolicyState.self, json: json)
            }
        }
    }

    /// The EmmState union
    public enum EmmState: CustomStringConvertible, JSONRepresentable {
        /// Emm token is disabled.
        case disabled
        /// Emm token is optional.
        case optional
        /// Emm token is required.
        case required
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try EmmStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try EmmStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for EmmState: \(error)"
            }
        }
    }

    public class EmmStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: EmmState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .optional:
                var d = [String: JSON]()
                d[".tag"] = .str("optional")
                return .dictionary(d)
            case .required:
                var d = [String: JSON]()
                d[".tag"] = .str("required")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> EmmState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return EmmState.disabled
                case "optional":
                    return EmmState.optional
                case "required":
                    return EmmState.required
                case "other":
                    return EmmState.other
                default:
                    return EmmState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: EmmState.self, json: json)
            }
        }
    }

    /// The ExternalDriveBackupPolicyState union
    public enum ExternalDriveBackupPolicyState: CustomStringConvertible, JSONRepresentable {
        /// External Drive Backup feature is disabled.
        case disabled
        /// External Drive Backup feature is enabled.
        case enabled
        /// External Drive Backup default value based on team tier.
        case default_
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try ExternalDriveBackupPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try ExternalDriveBackupPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for ExternalDriveBackupPolicyState: \(error)"
            }
        }
    }

    public class ExternalDriveBackupPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: ExternalDriveBackupPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .default_:
                var d = [String: JSON]()
                d[".tag"] = .str("default")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> ExternalDriveBackupPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return ExternalDriveBackupPolicyState.disabled
                case "enabled":
                    return ExternalDriveBackupPolicyState.enabled
                case "default":
                    return ExternalDriveBackupPolicyState.default_
                case "other":
                    return ExternalDriveBackupPolicyState.other
                default:
                    return ExternalDriveBackupPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: ExternalDriveBackupPolicyState.self, json: json)
            }
        }
    }

    /// The FileLockingPolicyState union
    public enum FileLockingPolicyState: CustomStringConvertible, JSONRepresentable {
        /// File locking feature is disabled.
        case disabled
        /// File locking feature is allowed.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try FileLockingPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try FileLockingPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for FileLockingPolicyState: \(error)"
            }
        }
    }

    public class FileLockingPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: FileLockingPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> FileLockingPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return FileLockingPolicyState.disabled
                case "enabled":
                    return FileLockingPolicyState.enabled
                case "other":
                    return FileLockingPolicyState.other
                default:
                    return FileLockingPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: FileLockingPolicyState.self, json: json)
            }
        }
    }

    /// The FileProviderMigrationPolicyState union
    public enum FileProviderMigrationPolicyState: CustomStringConvertible, JSONRepresentable {
        /// Team admin has opted out of File Provider Migration for team members.
        case disabled
        /// Team admin has not opted out of File Provider Migration for team members.
        case enabled
        /// Team admin has default value based on team tier.
        case default_
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try FileProviderMigrationPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try FileProviderMigrationPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for FileProviderMigrationPolicyState: \(error)"
            }
        }
    }

    public class FileProviderMigrationPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: FileProviderMigrationPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .default_:
                var d = [String: JSON]()
                d[".tag"] = .str("default")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> FileProviderMigrationPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return FileProviderMigrationPolicyState.disabled
                case "enabled":
                    return FileProviderMigrationPolicyState.enabled
                case "default":
                    return FileProviderMigrationPolicyState.default_
                case "other":
                    return FileProviderMigrationPolicyState.other
                default:
                    return FileProviderMigrationPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: FileProviderMigrationPolicyState.self, json: json)
            }
        }
    }

    /// The GroupCreation union
    public enum GroupCreation: CustomStringConvertible, JSONRepresentable {
        /// Team admins and members can create groups.
        case adminsAndMembers
        /// Only team admins can create groups.
        case adminsOnly

        func json() throws -> JSON {
            try GroupCreationSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try GroupCreationSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for GroupCreation: \(error)"
            }
        }
    }

    public class GroupCreationSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: GroupCreation) throws -> JSON {
            switch value {
            case .adminsAndMembers:
                var d = [String: JSON]()
                d[".tag"] = .str("admins_and_members")
                return .dictionary(d)
            case .adminsOnly:
                var d = [String: JSON]()
                d[".tag"] = .str("admins_only")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> GroupCreation {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "admins_and_members":
                    return GroupCreation.adminsAndMembers
                case "admins_only":
                    return GroupCreation.adminsOnly
                default:
                    throw JSONSerializerError.unknownTag(type: GroupCreation.self, json: json, tag: tag)
                }
            default:
                throw JSONSerializerError.deserializeError(type: GroupCreation.self, json: json)
            }
        }
    }

    /// The OfficeAddInPolicy union
    public enum OfficeAddInPolicy: CustomStringConvertible, JSONRepresentable {
        /// Office Add-In is disabled.
        case disabled
        /// Office Add-In is enabled.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try OfficeAddInPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try OfficeAddInPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for OfficeAddInPolicy: \(error)"
            }
        }
    }

    public class OfficeAddInPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: OfficeAddInPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> OfficeAddInPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return OfficeAddInPolicy.disabled
                case "enabled":
                    return OfficeAddInPolicy.enabled
                case "other":
                    return OfficeAddInPolicy.other
                default:
                    return OfficeAddInPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: OfficeAddInPolicy.self, json: json)
            }
        }
    }

    /// The PaperDefaultFolderPolicy union
    public enum PaperDefaultFolderPolicy: CustomStringConvertible, JSONRepresentable {
        /// Everyone in team will be the default option when creating a folder in Paper.
        case everyoneInTeam
        /// Invite only will be the default option when creating a folder in Paper.
        case inviteOnly
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PaperDefaultFolderPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PaperDefaultFolderPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PaperDefaultFolderPolicy: \(error)"
            }
        }
    }

    public class PaperDefaultFolderPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PaperDefaultFolderPolicy) throws -> JSON {
            switch value {
            case .everyoneInTeam:
                var d = [String: JSON]()
                d[".tag"] = .str("everyone_in_team")
                return .dictionary(d)
            case .inviteOnly:
                var d = [String: JSON]()
                d[".tag"] = .str("invite_only")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PaperDefaultFolderPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "everyone_in_team":
                    return PaperDefaultFolderPolicy.everyoneInTeam
                case "invite_only":
                    return PaperDefaultFolderPolicy.inviteOnly
                case "other":
                    return PaperDefaultFolderPolicy.other
                default:
                    return PaperDefaultFolderPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PaperDefaultFolderPolicy.self, json: json)
            }
        }
    }

    /// The PaperDeploymentPolicy union
    public enum PaperDeploymentPolicy: CustomStringConvertible, JSONRepresentable {
        /// All team members have access to Paper.
        case full
        /// Only whitelisted team members can access Paper. To see which user is whitelisted, check
        /// 'is_paper_whitelisted' on 'account/info'.
        case partial
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PaperDeploymentPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PaperDeploymentPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PaperDeploymentPolicy: \(error)"
            }
        }
    }

    public class PaperDeploymentPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PaperDeploymentPolicy) throws -> JSON {
            switch value {
            case .full:
                var d = [String: JSON]()
                d[".tag"] = .str("full")
                return .dictionary(d)
            case .partial:
                var d = [String: JSON]()
                d[".tag"] = .str("partial")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PaperDeploymentPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "full":
                    return PaperDeploymentPolicy.full
                case "partial":
                    return PaperDeploymentPolicy.partial
                case "other":
                    return PaperDeploymentPolicy.other
                default:
                    return PaperDeploymentPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PaperDeploymentPolicy.self, json: json)
            }
        }
    }

    /// The PaperDesktopPolicy union
    public enum PaperDesktopPolicy: CustomStringConvertible, JSONRepresentable {
        /// Do not allow team members to use Paper Desktop.
        case disabled
        /// Allow team members to use Paper Desktop.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PaperDesktopPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PaperDesktopPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PaperDesktopPolicy: \(error)"
            }
        }
    }

    public class PaperDesktopPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PaperDesktopPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PaperDesktopPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return PaperDesktopPolicy.disabled
                case "enabled":
                    return PaperDesktopPolicy.enabled
                case "other":
                    return PaperDesktopPolicy.other
                default:
                    return PaperDesktopPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PaperDesktopPolicy.self, json: json)
            }
        }
    }

    /// The PaperEnabledPolicy union
    public enum PaperEnabledPolicy: CustomStringConvertible, JSONRepresentable {
        /// Paper is disabled.
        case disabled
        /// Paper is enabled.
        case enabled
        /// Unspecified policy.
        case unspecified
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PaperEnabledPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PaperEnabledPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PaperEnabledPolicy: \(error)"
            }
        }
    }

    public class PaperEnabledPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PaperEnabledPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .unspecified:
                var d = [String: JSON]()
                d[".tag"] = .str("unspecified")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PaperEnabledPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return PaperEnabledPolicy.disabled
                case "enabled":
                    return PaperEnabledPolicy.enabled
                case "unspecified":
                    return PaperEnabledPolicy.unspecified
                case "other":
                    return PaperEnabledPolicy.other
                default:
                    return PaperEnabledPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PaperEnabledPolicy.self, json: json)
            }
        }
    }

    /// The PasswordControlMode union
    public enum PasswordControlMode: CustomStringConvertible, JSONRepresentable {
        /// Password is disabled.
        case disabled
        /// Password is enabled.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PasswordControlModeSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PasswordControlModeSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PasswordControlMode: \(error)"
            }
        }
    }

    public class PasswordControlModeSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PasswordControlMode) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PasswordControlMode {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return PasswordControlMode.disabled
                case "enabled":
                    return PasswordControlMode.enabled
                case "other":
                    return PasswordControlMode.other
                default:
                    return PasswordControlMode.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PasswordControlMode.self, json: json)
            }
        }
    }

    /// The PasswordStrengthPolicy union
    public enum PasswordStrengthPolicy: CustomStringConvertible, JSONRepresentable {
        /// User passwords will adhere to the minimal password strength policy.
        case minimalRequirements
        /// User passwords will adhere to the moderate password strength policy.
        case moderatePassword
        /// User passwords will adhere to the very strong password strength policy.
        case strongPassword
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try PasswordStrengthPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try PasswordStrengthPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for PasswordStrengthPolicy: \(error)"
            }
        }
    }

    public class PasswordStrengthPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: PasswordStrengthPolicy) throws -> JSON {
            switch value {
            case .minimalRequirements:
                var d = [String: JSON]()
                d[".tag"] = .str("minimal_requirements")
                return .dictionary(d)
            case .moderatePassword:
                var d = [String: JSON]()
                d[".tag"] = .str("moderate_password")
                return .dictionary(d)
            case .strongPassword:
                var d = [String: JSON]()
                d[".tag"] = .str("strong_password")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> PasswordStrengthPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "minimal_requirements":
                    return PasswordStrengthPolicy.minimalRequirements
                case "moderate_password":
                    return PasswordStrengthPolicy.moderatePassword
                case "strong_password":
                    return PasswordStrengthPolicy.strongPassword
                case "other":
                    return PasswordStrengthPolicy.other
                default:
                    return PasswordStrengthPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: PasswordStrengthPolicy.self, json: json)
            }
        }
    }

    /// The RolloutMethod union
    public enum RolloutMethod: CustomStringConvertible, JSONRepresentable {
        /// Unlink all.
        case unlinkAll
        /// Unlink devices with the most inactivity.
        case unlinkMostInactive
        /// Add member to Exceptions.
        case addMemberToExceptions

        func json() throws -> JSON {
            try RolloutMethodSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try RolloutMethodSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for RolloutMethod: \(error)"
            }
        }
    }

    public class RolloutMethodSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: RolloutMethod) throws -> JSON {
            switch value {
            case .unlinkAll:
                var d = [String: JSON]()
                d[".tag"] = .str("unlink_all")
                return .dictionary(d)
            case .unlinkMostInactive:
                var d = [String: JSON]()
                d[".tag"] = .str("unlink_most_inactive")
                return .dictionary(d)
            case .addMemberToExceptions:
                var d = [String: JSON]()
                d[".tag"] = .str("add_member_to_exceptions")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> RolloutMethod {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "unlink_all":
                    return RolloutMethod.unlinkAll
                case "unlink_most_inactive":
                    return RolloutMethod.unlinkMostInactive
                case "add_member_to_exceptions":
                    return RolloutMethod.addMemberToExceptions
                default:
                    throw JSONSerializerError.unknownTag(type: RolloutMethod.self, json: json, tag: tag)
                }
            default:
                throw JSONSerializerError.deserializeError(type: RolloutMethod.self, json: json)
            }
        }
    }

    /// Policy governing whether shared folder membership is required to access shared links.
    public enum SharedFolderBlanketLinkRestrictionPolicy: CustomStringConvertible, JSONRepresentable {
        /// Only members of shared folders can access folder content via shared link.
        case members
        /// Anyone can access folder content via shared link.
        case anyone
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SharedFolderBlanketLinkRestrictionPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SharedFolderBlanketLinkRestrictionPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SharedFolderBlanketLinkRestrictionPolicy: \(error)"
            }
        }
    }

    public class SharedFolderBlanketLinkRestrictionPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SharedFolderBlanketLinkRestrictionPolicy) throws -> JSON {
            switch value {
            case .members:
                var d = [String: JSON]()
                d[".tag"] = .str("members")
                return .dictionary(d)
            case .anyone:
                var d = [String: JSON]()
                d[".tag"] = .str("anyone")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SharedFolderBlanketLinkRestrictionPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "members":
                    return SharedFolderBlanketLinkRestrictionPolicy.members
                case "anyone":
                    return SharedFolderBlanketLinkRestrictionPolicy.anyone
                case "other":
                    return SharedFolderBlanketLinkRestrictionPolicy.other
                default:
                    return SharedFolderBlanketLinkRestrictionPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SharedFolderBlanketLinkRestrictionPolicy.self, json: json)
            }
        }
    }

    /// Policy governing which shared folders a team member can join.
    public enum SharedFolderJoinPolicy: CustomStringConvertible, JSONRepresentable {
        /// Team members can only join folders shared by teammates.
        case fromTeamOnly
        /// Team members can join any shared folder, including those shared by users outside the team.
        case fromAnyone
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SharedFolderJoinPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SharedFolderJoinPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SharedFolderJoinPolicy: \(error)"
            }
        }
    }

    public class SharedFolderJoinPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SharedFolderJoinPolicy) throws -> JSON {
            switch value {
            case .fromTeamOnly:
                var d = [String: JSON]()
                d[".tag"] = .str("from_team_only")
                return .dictionary(d)
            case .fromAnyone:
                var d = [String: JSON]()
                d[".tag"] = .str("from_anyone")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SharedFolderJoinPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "from_team_only":
                    return SharedFolderJoinPolicy.fromTeamOnly
                case "from_anyone":
                    return SharedFolderJoinPolicy.fromAnyone
                case "other":
                    return SharedFolderJoinPolicy.other
                default:
                    return SharedFolderJoinPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SharedFolderJoinPolicy.self, json: json)
            }
        }
    }

    /// Policy governing who can be a member of a folder shared by a team member.
    public enum SharedFolderMemberPolicy: CustomStringConvertible, JSONRepresentable {
        /// Only a teammate can be a member of a folder shared by a team member.
        case team
        /// Anyone can be a member of a folder shared by a team member.
        case anyone
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SharedFolderMemberPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SharedFolderMemberPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SharedFolderMemberPolicy: \(error)"
            }
        }
    }

    public class SharedFolderMemberPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SharedFolderMemberPolicy) throws -> JSON {
            switch value {
            case .team:
                var d = [String: JSON]()
                d[".tag"] = .str("team")
                return .dictionary(d)
            case .anyone:
                var d = [String: JSON]()
                d[".tag"] = .str("anyone")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SharedFolderMemberPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "team":
                    return SharedFolderMemberPolicy.team
                case "anyone":
                    return SharedFolderMemberPolicy.anyone
                case "other":
                    return SharedFolderMemberPolicy.other
                default:
                    return SharedFolderMemberPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SharedFolderMemberPolicy.self, json: json)
            }
        }
    }

    /// Policy governing the visibility of shared links. This policy can apply to newly created shared links, or all
    /// shared links.
    public enum SharedLinkCreatePolicy: CustomStringConvertible, JSONRepresentable {
        /// By default, anyone can access newly created shared links. No login will be required to access the shared
        /// links unless overridden.
        case defaultPublic
        /// By default, only members of the same team can access newly created shared links. Login will be required to
        /// access the shared links unless overridden.
        case defaultTeamOnly
        /// Only members of the same team can access all shared links. Login will be required to access all shared
        /// links.
        case teamOnly
        /// Only people invited can access newly created links. Login will be required to access the shared links unless
        /// overridden.
        case defaultNoOne
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SharedLinkCreatePolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SharedLinkCreatePolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SharedLinkCreatePolicy: \(error)"
            }
        }
    }

    public class SharedLinkCreatePolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SharedLinkCreatePolicy) throws -> JSON {
            switch value {
            case .defaultPublic:
                var d = [String: JSON]()
                d[".tag"] = .str("default_public")
                return .dictionary(d)
            case .defaultTeamOnly:
                var d = [String: JSON]()
                d[".tag"] = .str("default_team_only")
                return .dictionary(d)
            case .teamOnly:
                var d = [String: JSON]()
                d[".tag"] = .str("team_only")
                return .dictionary(d)
            case .defaultNoOne:
                var d = [String: JSON]()
                d[".tag"] = .str("default_no_one")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SharedLinkCreatePolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "default_public":
                    return SharedLinkCreatePolicy.defaultPublic
                case "default_team_only":
                    return SharedLinkCreatePolicy.defaultTeamOnly
                case "team_only":
                    return SharedLinkCreatePolicy.teamOnly
                case "default_no_one":
                    return SharedLinkCreatePolicy.defaultNoOne
                case "other":
                    return SharedLinkCreatePolicy.other
                default:
                    return SharedLinkCreatePolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SharedLinkCreatePolicy.self, json: json)
            }
        }
    }

    /// The ShowcaseDownloadPolicy union
    public enum ShowcaseDownloadPolicy: CustomStringConvertible, JSONRepresentable {
        /// Do not allow files to be downloaded from Showcases.
        case disabled
        /// Allow files to be downloaded from Showcases.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try ShowcaseDownloadPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try ShowcaseDownloadPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for ShowcaseDownloadPolicy: \(error)"
            }
        }
    }

    public class ShowcaseDownloadPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: ShowcaseDownloadPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> ShowcaseDownloadPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return ShowcaseDownloadPolicy.disabled
                case "enabled":
                    return ShowcaseDownloadPolicy.enabled
                case "other":
                    return ShowcaseDownloadPolicy.other
                default:
                    return ShowcaseDownloadPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: ShowcaseDownloadPolicy.self, json: json)
            }
        }
    }

    /// The ShowcaseEnabledPolicy union
    public enum ShowcaseEnabledPolicy: CustomStringConvertible, JSONRepresentable {
        /// Showcase is disabled.
        case disabled
        /// Showcase is enabled.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try ShowcaseEnabledPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try ShowcaseEnabledPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for ShowcaseEnabledPolicy: \(error)"
            }
        }
    }

    public class ShowcaseEnabledPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: ShowcaseEnabledPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> ShowcaseEnabledPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return ShowcaseEnabledPolicy.disabled
                case "enabled":
                    return ShowcaseEnabledPolicy.enabled
                case "other":
                    return ShowcaseEnabledPolicy.other
                default:
                    return ShowcaseEnabledPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: ShowcaseEnabledPolicy.self, json: json)
            }
        }
    }

    /// The ShowcaseExternalSharingPolicy union
    public enum ShowcaseExternalSharingPolicy: CustomStringConvertible, JSONRepresentable {
        /// Do not allow showcases to be shared with people not on the team.
        case disabled
        /// Allow showcases to be shared with people not on the team.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try ShowcaseExternalSharingPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try ShowcaseExternalSharingPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for ShowcaseExternalSharingPolicy: \(error)"
            }
        }
    }

    public class ShowcaseExternalSharingPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: ShowcaseExternalSharingPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> ShowcaseExternalSharingPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return ShowcaseExternalSharingPolicy.disabled
                case "enabled":
                    return ShowcaseExternalSharingPolicy.enabled
                case "other":
                    return ShowcaseExternalSharingPolicy.other
                default:
                    return ShowcaseExternalSharingPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: ShowcaseExternalSharingPolicy.self, json: json)
            }
        }
    }

    /// The SmartSyncPolicy union
    public enum SmartSyncPolicy: CustomStringConvertible, JSONRepresentable {
        /// The specified content will be synced as local files by default.
        case local
        /// The specified content will be synced as on-demand files by default.
        case onDemand
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SmartSyncPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SmartSyncPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SmartSyncPolicy: \(error)"
            }
        }
    }

    public class SmartSyncPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SmartSyncPolicy) throws -> JSON {
            switch value {
            case .local:
                var d = [String: JSON]()
                d[".tag"] = .str("local")
                return .dictionary(d)
            case .onDemand:
                var d = [String: JSON]()
                d[".tag"] = .str("on_demand")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SmartSyncPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "local":
                    return SmartSyncPolicy.local
                case "on_demand":
                    return SmartSyncPolicy.onDemand
                case "other":
                    return SmartSyncPolicy.other
                default:
                    return SmartSyncPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SmartSyncPolicy.self, json: json)
            }
        }
    }

    /// The SmarterSmartSyncPolicyState union
    public enum SmarterSmartSyncPolicyState: CustomStringConvertible, JSONRepresentable {
        /// Smarter Smart Sync feature is disabled.
        case disabled
        /// Smarter Smart Sync feature is enabled.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SmarterSmartSyncPolicyStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SmarterSmartSyncPolicyStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SmarterSmartSyncPolicyState: \(error)"
            }
        }
    }

    public class SmarterSmartSyncPolicyStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SmarterSmartSyncPolicyState) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SmarterSmartSyncPolicyState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return SmarterSmartSyncPolicyState.disabled
                case "enabled":
                    return SmarterSmartSyncPolicyState.enabled
                case "other":
                    return SmarterSmartSyncPolicyState.other
                default:
                    return SmarterSmartSyncPolicyState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SmarterSmartSyncPolicyState.self, json: json)
            }
        }
    }

    /// The SsoPolicy union
    public enum SsoPolicy: CustomStringConvertible, JSONRepresentable {
        /// Users will be able to sign in with their Dropbox credentials.
        case disabled
        /// Users will be able to sign in with either their Dropbox or single sign-on credentials.
        case optional
        /// Users will be required to sign in with their single sign-on credentials.
        case required
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SsoPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SsoPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SsoPolicy: \(error)"
            }
        }
    }

    public class SsoPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SsoPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .optional:
                var d = [String: JSON]()
                d[".tag"] = .str("optional")
                return .dictionary(d)
            case .required:
                var d = [String: JSON]()
                d[".tag"] = .str("required")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SsoPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return SsoPolicy.disabled
                case "optional":
                    return SsoPolicy.optional
                case "required":
                    return SsoPolicy.required
                case "other":
                    return SsoPolicy.other
                default:
                    return SsoPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SsoPolicy.self, json: json)
            }
        }
    }

    /// The SuggestMembersPolicy union
    public enum SuggestMembersPolicy: CustomStringConvertible, JSONRepresentable {
        /// Suggest members is disabled.
        case disabled
        /// Suggest members is enabled.
        case enabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try SuggestMembersPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SuggestMembersPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SuggestMembersPolicy: \(error)"
            }
        }
    }

    public class SuggestMembersPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SuggestMembersPolicy) throws -> JSON {
            switch value {
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .enabled:
                var d = [String: JSON]()
                d[".tag"] = .str("enabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> SuggestMembersPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "disabled":
                    return SuggestMembersPolicy.disabled
                case "enabled":
                    return SuggestMembersPolicy.enabled
                case "other":
                    return SuggestMembersPolicy.other
                default:
                    return SuggestMembersPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: SuggestMembersPolicy.self, json: json)
            }
        }
    }

    /// Policies governing team members.
    public class TeamMemberPolicies: CustomStringConvertible, JSONRepresentable {
        /// Policies governing sharing.
        public let sharing: TeamPolicies.TeamSharingPolicies
        /// This describes the Enterprise Mobility Management (EMM) state for this team. This information can be used to
        /// understand if an organization is integrating with a third-party EMM vendor to further manage and
        /// apply restrictions upon the team's Dropbox usage on mobile devices. This is a new feature and in the
        /// future we'll be adding more new fields and additional documentation.
        public let emmState: TeamPolicies.EmmState
        /// The admin policy around the Dropbox Office Add-In for this team.
        public let officeAddin: TeamPolicies.OfficeAddInPolicy
        /// The team policy on if teammembers are allowed to suggest users for admins to invite to the team.
        public let suggestMembersPolicy: TeamPolicies.SuggestMembersPolicy
        public init(
            sharing: TeamPolicies.TeamSharingPolicies,
            emmState: TeamPolicies.EmmState,
            officeAddin: TeamPolicies.OfficeAddInPolicy,
            suggestMembersPolicy: TeamPolicies.SuggestMembersPolicy
        ) {
            self.sharing = sharing
            self.emmState = emmState
            self.officeAddin = officeAddin
            self.suggestMembersPolicy = suggestMembersPolicy
        }

        func json() throws -> JSON {
            try TeamMemberPoliciesSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try TeamMemberPoliciesSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for TeamMemberPolicies: \(error)"
            }
        }
    }

    public class TeamMemberPoliciesSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: TeamMemberPolicies) throws -> JSON {
            let output = [
                "sharing": try TeamPolicies.TeamSharingPoliciesSerializer().serialize(value.sharing),
                "emm_state": try TeamPolicies.EmmStateSerializer().serialize(value.emmState),
                "office_addin": try TeamPolicies.OfficeAddInPolicySerializer().serialize(value.officeAddin),
                "suggest_members_policy": try TeamPolicies.SuggestMembersPolicySerializer().serialize(value.suggestMembersPolicy),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> TeamMemberPolicies {
            switch json {
            case .dictionary(let dict):
                let sharing = try TeamPolicies.TeamSharingPoliciesSerializer().deserialize(dict["sharing"] ?? .null)
                let emmState = try TeamPolicies.EmmStateSerializer().deserialize(dict["emm_state"] ?? .null)
                let officeAddin = try TeamPolicies.OfficeAddInPolicySerializer().deserialize(dict["office_addin"] ?? .null)
                let suggestMembersPolicy = try TeamPolicies.SuggestMembersPolicySerializer().deserialize(dict["suggest_members_policy"] ?? .null)
                return TeamMemberPolicies(sharing: sharing, emmState: emmState, officeAddin: officeAddin, suggestMembersPolicy: suggestMembersPolicy)
            default:
                throw JSONSerializerError.deserializeError(type: TeamMemberPolicies.self, json: json)
            }
        }
    }

    /// Policies governing sharing within and outside of the team.
    public class TeamSharingPolicies: CustomStringConvertible, JSONRepresentable {
        /// Who can join folders shared by team members.
        public let sharedFolderMemberPolicy: TeamPolicies.SharedFolderMemberPolicy
        /// Which shared folders team members can join.
        public let sharedFolderJoinPolicy: TeamPolicies.SharedFolderJoinPolicy
        /// Who can view shared links owned by team members.
        public let sharedLinkCreatePolicy: TeamPolicies.SharedLinkCreatePolicy
        /// Who can create groups.
        public let groupCreationPolicy: TeamPolicies.GroupCreation
        /// Who can view links to content in shared folders.
        public let sharedFolderLinkRestrictionPolicy: TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy
        public init(
            sharedFolderMemberPolicy: TeamPolicies.SharedFolderMemberPolicy,
            sharedFolderJoinPolicy: TeamPolicies.SharedFolderJoinPolicy,
            sharedLinkCreatePolicy: TeamPolicies.SharedLinkCreatePolicy,
            groupCreationPolicy: TeamPolicies.GroupCreation,
            sharedFolderLinkRestrictionPolicy: TeamPolicies.SharedFolderBlanketLinkRestrictionPolicy
        ) {
            self.sharedFolderMemberPolicy = sharedFolderMemberPolicy
            self.sharedFolderJoinPolicy = sharedFolderJoinPolicy
            self.sharedLinkCreatePolicy = sharedLinkCreatePolicy
            self.groupCreationPolicy = groupCreationPolicy
            self.sharedFolderLinkRestrictionPolicy = sharedFolderLinkRestrictionPolicy
        }

        func json() throws -> JSON {
            try TeamSharingPoliciesSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try TeamSharingPoliciesSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for TeamSharingPolicies: \(error)"
            }
        }
    }

    public class TeamSharingPoliciesSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: TeamSharingPolicies) throws -> JSON {
            let output = [
                "shared_folder_member_policy": try TeamPolicies.SharedFolderMemberPolicySerializer().serialize(value.sharedFolderMemberPolicy),
                "shared_folder_join_policy": try TeamPolicies.SharedFolderJoinPolicySerializer().serialize(value.sharedFolderJoinPolicy),
                "shared_link_create_policy": try TeamPolicies.SharedLinkCreatePolicySerializer().serialize(value.sharedLinkCreatePolicy),
                "group_creation_policy": try TeamPolicies.GroupCreationSerializer().serialize(value.groupCreationPolicy),
                "shared_folder_link_restriction_policy": try TeamPolicies.SharedFolderBlanketLinkRestrictionPolicySerializer()
                    .serialize(value.sharedFolderLinkRestrictionPolicy),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> TeamSharingPolicies {
            switch json {
            case .dictionary(let dict):
                let sharedFolderMemberPolicy = try TeamPolicies.SharedFolderMemberPolicySerializer()
                    .deserialize(dict["shared_folder_member_policy"] ?? .null)
                let sharedFolderJoinPolicy = try TeamPolicies.SharedFolderJoinPolicySerializer().deserialize(dict["shared_folder_join_policy"] ?? .null)
                let sharedLinkCreatePolicy = try TeamPolicies.SharedLinkCreatePolicySerializer().deserialize(dict["shared_link_create_policy"] ?? .null)
                let groupCreationPolicy = try TeamPolicies.GroupCreationSerializer().deserialize(dict["group_creation_policy"] ?? .null)
                let sharedFolderLinkRestrictionPolicy = try TeamPolicies.SharedFolderBlanketLinkRestrictionPolicySerializer()
                    .deserialize(dict["shared_folder_link_restriction_policy"] ?? .null)
                return TeamSharingPolicies(
                    sharedFolderMemberPolicy: sharedFolderMemberPolicy,
                    sharedFolderJoinPolicy: sharedFolderJoinPolicy,
                    sharedLinkCreatePolicy: sharedLinkCreatePolicy,
                    groupCreationPolicy: groupCreationPolicy,
                    sharedFolderLinkRestrictionPolicy: sharedFolderLinkRestrictionPolicy
                )
            default:
                throw JSONSerializerError.deserializeError(type: TeamSharingPolicies.self, json: json)
            }
        }
    }

    /// The TwoStepVerificationPolicy union
    public enum TwoStepVerificationPolicy: CustomStringConvertible, JSONRepresentable {
        /// Enabled require two factor authorization.
        case requireTfaEnable
        /// Disabled require two factor authorization.
        case requireTfaDisable
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try TwoStepVerificationPolicySerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try TwoStepVerificationPolicySerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for TwoStepVerificationPolicy: \(error)"
            }
        }
    }

    public class TwoStepVerificationPolicySerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: TwoStepVerificationPolicy) throws -> JSON {
            switch value {
            case .requireTfaEnable:
                var d = [String: JSON]()
                d[".tag"] = .str("require_tfa_enable")
                return .dictionary(d)
            case .requireTfaDisable:
                var d = [String: JSON]()
                d[".tag"] = .str("require_tfa_disable")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> TwoStepVerificationPolicy {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "require_tfa_enable":
                    return TwoStepVerificationPolicy.requireTfaEnable
                case "require_tfa_disable":
                    return TwoStepVerificationPolicy.requireTfaDisable
                case "other":
                    return TwoStepVerificationPolicy.other
                default:
                    return TwoStepVerificationPolicy.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: TwoStepVerificationPolicy.self, json: json)
            }
        }
    }

    /// The TwoStepVerificationState union
    public enum TwoStepVerificationState: CustomStringConvertible, JSONRepresentable {
        /// Enabled require two factor authorization.
        case required
        /// Optional require two factor authorization.
        case optional
        /// Disabled require two factor authorization.
        case disabled
        /// An unspecified error.
        case other

        func json() throws -> JSON {
            try TwoStepVerificationStateSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try TwoStepVerificationStateSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for TwoStepVerificationState: \(error)"
            }
        }
    }

    public class TwoStepVerificationStateSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: TwoStepVerificationState) throws -> JSON {
            switch value {
            case .required:
                var d = [String: JSON]()
                d[".tag"] = .str("required")
                return .dictionary(d)
            case .optional:
                var d = [String: JSON]()
                d[".tag"] = .str("optional")
                return .dictionary(d)
            case .disabled:
                var d = [String: JSON]()
                d[".tag"] = .str("disabled")
                return .dictionary(d)
            case .other:
                var d = [String: JSON]()
                d[".tag"] = .str("other")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> TwoStepVerificationState {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "required":
                    return TwoStepVerificationState.required
                case "optional":
                    return TwoStepVerificationState.optional
                case "disabled":
                    return TwoStepVerificationState.disabled
                case "other":
                    return TwoStepVerificationState.other
                default:
                    return TwoStepVerificationState.other
                }
            default:
                throw JSONSerializerError.deserializeError(type: TwoStepVerificationState.self, json: json)
            }
        }
    }
}
