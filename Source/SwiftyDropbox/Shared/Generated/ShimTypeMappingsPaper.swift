///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXPaperAddMemberToDBOptional(object: DBXPaperAddMember?) -> DBPAPERAddMember? {
    guard let object = object else { return nil }
    return mapDBXPaperAddMemberToDB(object: object)
}

func mapDBXPaperAddMemberToDB(object: DBXPaperAddMember) -> DBPAPERAddMember {
    DBPAPERAddMember(
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        permissionLevel: mapDBXPaperPaperDocPermissionLevelToDB(object: object.permissionLevel)
    )
}

func mapDBXPaperRefPaperDocToDBOptional(object: DBXPaperRefPaperDoc?) -> DBPAPERRefPaperDoc? {
    guard let object = object else { return nil }
    return mapDBXPaperRefPaperDocToDB(object: object)
}

func mapDBXPaperRefPaperDocToDB(object: DBXPaperRefPaperDoc) -> DBPAPERRefPaperDoc {
    DBPAPERRefPaperDoc(docId: object.docId)
}

func mapDBXPaperAddPaperDocUserToDBOptional(object: DBXPaperAddPaperDocUser?) -> DBPAPERAddPaperDocUser? {
    guard let object = object else { return nil }
    return mapDBXPaperAddPaperDocUserToDB(object: object)
}

func mapDBXPaperAddPaperDocUserToDB(object: DBXPaperAddPaperDocUser) -> DBPAPERAddPaperDocUser {
    DBPAPERAddPaperDocUser(
        docId: object.docId,
        members: object.members.compactMap { mapDBXPaperAddMemberToDB(object: $0) },
        customMessage: object.customMessage,
        quiet: object.quiet
    )
}

func mapDBXPaperAddPaperDocUserMemberResultToDBOptional(object: DBXPaperAddPaperDocUserMemberResult?) -> DBPAPERAddPaperDocUserMemberResult? {
    guard let object = object else { return nil }
    return mapDBXPaperAddPaperDocUserMemberResultToDB(object: object)
}

func mapDBXPaperAddPaperDocUserMemberResultToDB(object: DBXPaperAddPaperDocUserMemberResult) -> DBPAPERAddPaperDocUserMemberResult {
    DBPAPERAddPaperDocUserMemberResult(
        member: mapDBXSharingMemberSelectorToDB(object: object.member),
        result: mapDBXPaperAddPaperDocUserResultToDB(object: object.result)
    )
}

func mapDBXPaperAddPaperDocUserResultToDBOptional(object: DBXPaperAddPaperDocUserResult?) -> DBPAPERAddPaperDocUserResult? {
    guard let object = object else { return nil }
    return mapDBXPaperAddPaperDocUserResultToDB(object: object)
}

func mapDBXPaperAddPaperDocUserResultToDB(object: DBXPaperAddPaperDocUserResult) -> DBPAPERAddPaperDocUserResult {
    if object.asSuccess != nil {
        return DBPAPERAddPaperDocUserResult(success: ())
    }
    if object.asUnknownError != nil {
        return DBPAPERAddPaperDocUserResult(unknownError: ())
    }
    if object.asSharingOutsideTeamDisabled != nil {
        return DBPAPERAddPaperDocUserResult(sharingOutsideTeamDisabled: ())
    }
    if object.asDailyLimitReached != nil {
        return DBPAPERAddPaperDocUserResult(dailyLimitReached: ())
    }
    if object.asUserIsOwner != nil {
        return DBPAPERAddPaperDocUserResult(userIsOwner: ())
    }
    if object.asFailedUserDataRetrieval != nil {
        return DBPAPERAddPaperDocUserResult(failedUserDataRetrieval: ())
    }
    if object.asPermissionAlreadyGranted != nil {
        return DBPAPERAddPaperDocUserResult(permissionAlreadyGranted: ())
    }
    if object.asOther != nil {
        return DBPAPERAddPaperDocUserResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperCursorToDBOptional(object: DBXPaperCursor?) -> DBPAPERCursor? {
    guard let object = object else { return nil }
    return mapDBXPaperCursorToDB(object: object)
}

func mapDBXPaperCursorToDB(object: DBXPaperCursor) -> DBPAPERCursor {
    DBPAPERCursor(value: object.value, expiration: object.expiration)
}

func mapDBXPaperPaperApiBaseErrorToDBOptional(object: DBXPaperPaperApiBaseError?) -> DBPAPERPaperApiBaseError? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperApiBaseErrorToDB(object: object)
}

func mapDBXPaperPaperApiBaseErrorToDB(object: DBXPaperPaperApiBaseError) -> DBPAPERPaperApiBaseError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERPaperApiBaseError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperApiBaseError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperDocLookupErrorToDBOptional(object: DBXPaperDocLookupError?) -> DBPAPERDocLookupError? {
    guard let object = object else { return nil }
    return mapDBXPaperDocLookupErrorToDB(object: object)
}

func mapDBXPaperDocLookupErrorToDB(object: DBXPaperDocLookupError) -> DBPAPERDocLookupError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERDocLookupError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERDocLookupError(other: ())
    }
    if object.asDocNotFound != nil {
        return DBPAPERDocLookupError(docNotFound: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperDocSubscriptionLevelToDBOptional(object: DBXPaperDocSubscriptionLevel?) -> DBPAPERDocSubscriptionLevel? {
    guard let object = object else { return nil }
    return mapDBXPaperDocSubscriptionLevelToDB(object: object)
}

func mapDBXPaperDocSubscriptionLevelToDB(object: DBXPaperDocSubscriptionLevel) -> DBPAPERDocSubscriptionLevel {
    if object.asDefault_ != nil {
        return DBPAPERDocSubscriptionLevel(default_: ())
    }
    if object.asIgnore != nil {
        return DBPAPERDocSubscriptionLevel(ignore: ())
    }
    if object.asEvery != nil {
        return DBPAPERDocSubscriptionLevel(every: ())
    }
    if object.asNoEmail != nil {
        return DBPAPERDocSubscriptionLevel(noEmail: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperExportFormatToDBOptional(object: DBXPaperExportFormat?) -> DBPAPERExportFormat? {
    guard let object = object else { return nil }
    return mapDBXPaperExportFormatToDB(object: object)
}

func mapDBXPaperExportFormatToDB(object: DBXPaperExportFormat) -> DBPAPERExportFormat {
    if object.asHtml != nil {
        return DBPAPERExportFormat(html: ())
    }
    if object.asMarkdown != nil {
        return DBPAPERExportFormat(markdown: ())
    }
    if object.asOther != nil {
        return DBPAPERExportFormat(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperFolderToDBOptional(object: DBXPaperFolder?) -> DBPAPERFolder? {
    guard let object = object else { return nil }
    return mapDBXPaperFolderToDB(object: object)
}

func mapDBXPaperFolderToDB(object: DBXPaperFolder) -> DBPAPERFolder {
    DBPAPERFolder(id_: object.id, name: object.name)
}

func mapDBXPaperFolderSharingPolicyTypeToDBOptional(object: DBXPaperFolderSharingPolicyType?) -> DBPAPERFolderSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBXPaperFolderSharingPolicyTypeToDB(object: object)
}

func mapDBXPaperFolderSharingPolicyTypeToDB(object: DBXPaperFolderSharingPolicyType) -> DBPAPERFolderSharingPolicyType {
    if object.asTeam != nil {
        return DBPAPERFolderSharingPolicyType(team: ())
    }
    if object.asInviteOnly != nil {
        return DBPAPERFolderSharingPolicyType(inviteOnly: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperFolderSubscriptionLevelToDBOptional(object: DBXPaperFolderSubscriptionLevel?) -> DBPAPERFolderSubscriptionLevel? {
    guard let object = object else { return nil }
    return mapDBXPaperFolderSubscriptionLevelToDB(object: object)
}

func mapDBXPaperFolderSubscriptionLevelToDB(object: DBXPaperFolderSubscriptionLevel) -> DBPAPERFolderSubscriptionLevel {
    if object.asNone != nil {
        return DBPAPERFolderSubscriptionLevel(none: ())
    }
    if object.asActivityOnly != nil {
        return DBPAPERFolderSubscriptionLevel(activityOnly: ())
    }
    if object.asDailyEmails != nil {
        return DBPAPERFolderSubscriptionLevel(dailyEmails: ())
    }
    if object.asWeeklyEmails != nil {
        return DBPAPERFolderSubscriptionLevel(weeklyEmails: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperFoldersContainingPaperDocToDBOptional(object: DBXPaperFoldersContainingPaperDoc?) -> DBPAPERFoldersContainingPaperDoc? {
    guard let object = object else { return nil }
    return mapDBXPaperFoldersContainingPaperDocToDB(object: object)
}

func mapDBXPaperFoldersContainingPaperDocToDB(object: DBXPaperFoldersContainingPaperDoc) -> DBPAPERFoldersContainingPaperDoc {
    DBPAPERFoldersContainingPaperDoc(
        folderSharingPolicyType: mapDBXPaperFolderSharingPolicyTypeToDBOptional(object: object.folderSharingPolicyType),
        folders: object.folders?.compactMap { mapDBXPaperFolderToDB(object: $0) }
    )
}

func mapDBXPaperImportFormatToDBOptional(object: DBXPaperImportFormat?) -> DBPAPERImportFormat? {
    guard let object = object else { return nil }
    return mapDBXPaperImportFormatToDB(object: object)
}

func mapDBXPaperImportFormatToDB(object: DBXPaperImportFormat) -> DBPAPERImportFormat {
    if object.asHtml != nil {
        return DBPAPERImportFormat(html: ())
    }
    if object.asMarkdown != nil {
        return DBPAPERImportFormat(markdown: ())
    }
    if object.asPlainText != nil {
        return DBPAPERImportFormat(plainText: ())
    }
    if object.asOther != nil {
        return DBPAPERImportFormat(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperInviteeInfoWithPermissionLevelToDBOptional(object: DBXPaperInviteeInfoWithPermissionLevel?) -> DBPAPERInviteeInfoWithPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBXPaperInviteeInfoWithPermissionLevelToDB(object: object)
}

func mapDBXPaperInviteeInfoWithPermissionLevelToDB(object: DBXPaperInviteeInfoWithPermissionLevel) -> DBPAPERInviteeInfoWithPermissionLevel {
    DBPAPERInviteeInfoWithPermissionLevel(
        invitee: mapDBXSharingInviteeInfoToDB(object: object.invitee),
        permissionLevel: mapDBXPaperPaperDocPermissionLevelToDB(object: object.permissionLevel)
    )
}

func mapDBXPaperListDocsCursorErrorToDBOptional(object: DBXPaperListDocsCursorError?) -> DBPAPERListDocsCursorError? {
    guard let object = object else { return nil }
    return mapDBXPaperListDocsCursorErrorToDB(object: object)
}

func mapDBXPaperListDocsCursorErrorToDB(object: DBXPaperListDocsCursorError) -> DBPAPERListDocsCursorError {
    if let object = object.asCursorError {
        let cursorError = mapDBXPaperPaperApiCursorErrorToDB(object: object.cursorError)
        return DBPAPERListDocsCursorError(cursorError: cursorError)
    }
    if object.asOther != nil {
        return DBPAPERListDocsCursorError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperListPaperDocsArgsToDBOptional(object: DBXPaperListPaperDocsArgs?) -> DBPAPERListPaperDocsArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsArgsToDB(object: object)
}

func mapDBXPaperListPaperDocsArgsToDB(object: DBXPaperListPaperDocsArgs) -> DBPAPERListPaperDocsArgs {
    DBPAPERListPaperDocsArgs(
        filterBy: mapDBXPaperListPaperDocsFilterByToDB(object: object.filterBy),
        sortBy: mapDBXPaperListPaperDocsSortByToDB(object: object.sortBy),
        sortOrder: mapDBXPaperListPaperDocsSortOrderToDB(object: object.sortOrder),
        limit: object.limit
    )
}

func mapDBXPaperListPaperDocsContinueArgsToDBOptional(object: DBXPaperListPaperDocsContinueArgs?) -> DBPAPERListPaperDocsContinueArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsContinueArgsToDB(object: object)
}

func mapDBXPaperListPaperDocsContinueArgsToDB(object: DBXPaperListPaperDocsContinueArgs) -> DBPAPERListPaperDocsContinueArgs {
    DBPAPERListPaperDocsContinueArgs(cursor: object.cursor)
}

func mapDBXPaperListPaperDocsFilterByToDBOptional(object: DBXPaperListPaperDocsFilterBy?) -> DBPAPERListPaperDocsFilterBy? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsFilterByToDB(object: object)
}

func mapDBXPaperListPaperDocsFilterByToDB(object: DBXPaperListPaperDocsFilterBy) -> DBPAPERListPaperDocsFilterBy {
    if object.asDocsAccessed != nil {
        return DBPAPERListPaperDocsFilterBy(docsAccessed: ())
    }
    if object.asDocsCreated != nil {
        return DBPAPERListPaperDocsFilterBy(docsCreated: ())
    }
    if object.asOther != nil {
        return DBPAPERListPaperDocsFilterBy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperListPaperDocsResponseToDBOptional(object: DBXPaperListPaperDocsResponse?) -> DBPAPERListPaperDocsResponse? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsResponseToDB(object: object)
}

func mapDBXPaperListPaperDocsResponseToDB(object: DBXPaperListPaperDocsResponse) -> DBPAPERListPaperDocsResponse {
    DBPAPERListPaperDocsResponse(docIds: object.docIds, cursor: mapDBXPaperCursorToDB(object: object.cursor), hasMore: object.hasMore)
}

func mapDBXPaperListPaperDocsSortByToDBOptional(object: DBXPaperListPaperDocsSortBy?) -> DBPAPERListPaperDocsSortBy? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsSortByToDB(object: object)
}

func mapDBXPaperListPaperDocsSortByToDB(object: DBXPaperListPaperDocsSortBy) -> DBPAPERListPaperDocsSortBy {
    if object.asAccessed != nil {
        return DBPAPERListPaperDocsSortBy(accessed: ())
    }
    if object.asModified != nil {
        return DBPAPERListPaperDocsSortBy(modified: ())
    }
    if object.asCreated != nil {
        return DBPAPERListPaperDocsSortBy(created: ())
    }
    if object.asOther != nil {
        return DBPAPERListPaperDocsSortBy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperListPaperDocsSortOrderToDBOptional(object: DBXPaperListPaperDocsSortOrder?) -> DBPAPERListPaperDocsSortOrder? {
    guard let object = object else { return nil }
    return mapDBXPaperListPaperDocsSortOrderToDB(object: object)
}

func mapDBXPaperListPaperDocsSortOrderToDB(object: DBXPaperListPaperDocsSortOrder) -> DBPAPERListPaperDocsSortOrder {
    if object.asAscending != nil {
        return DBPAPERListPaperDocsSortOrder(ascending: ())
    }
    if object.asDescending != nil {
        return DBPAPERListPaperDocsSortOrder(descending: ())
    }
    if object.asOther != nil {
        return DBPAPERListPaperDocsSortOrder(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperListUsersCursorErrorToDBOptional(object: DBXPaperListUsersCursorError?) -> DBPAPERListUsersCursorError? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersCursorErrorToDB(object: object)
}

func mapDBXPaperListUsersCursorErrorToDB(object: DBXPaperListUsersCursorError) -> DBPAPERListUsersCursorError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERListUsersCursorError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERListUsersCursorError(other: ())
    }
    if object.asDocNotFound != nil {
        return DBPAPERListUsersCursorError(docNotFound: ())
    }
    if let object = object.asCursorError {
        let cursorError = mapDBXPaperPaperApiCursorErrorToDB(object: object.cursorError)
        return DBPAPERListUsersCursorError(cursorError: cursorError)
    }
    fatalError("codegen error")
}

func mapDBXPaperListUsersOnFolderArgsToDBOptional(object: DBXPaperListUsersOnFolderArgs?) -> DBPAPERListUsersOnFolderArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnFolderArgsToDB(object: object)
}

func mapDBXPaperListUsersOnFolderArgsToDB(object: DBXPaperListUsersOnFolderArgs) -> DBPAPERListUsersOnFolderArgs {
    DBPAPERListUsersOnFolderArgs(docId: object.docId, limit: object.limit)
}

func mapDBXPaperListUsersOnFolderContinueArgsToDBOptional(object: DBXPaperListUsersOnFolderContinueArgs?) -> DBPAPERListUsersOnFolderContinueArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnFolderContinueArgsToDB(object: object)
}

func mapDBXPaperListUsersOnFolderContinueArgsToDB(object: DBXPaperListUsersOnFolderContinueArgs) -> DBPAPERListUsersOnFolderContinueArgs {
    DBPAPERListUsersOnFolderContinueArgs(docId: object.docId, cursor: object.cursor)
}

func mapDBXPaperListUsersOnFolderResponseToDBOptional(object: DBXPaperListUsersOnFolderResponse?) -> DBPAPERListUsersOnFolderResponse? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnFolderResponseToDB(object: object)
}

func mapDBXPaperListUsersOnFolderResponseToDB(object: DBXPaperListUsersOnFolderResponse) -> DBPAPERListUsersOnFolderResponse {
    DBPAPERListUsersOnFolderResponse(
        invitees: object.invitees.compactMap { mapDBXSharingInviteeInfoToDB(object: $0) },
        users: object.users.compactMap { mapDBXSharingUserInfoToDB(object: $0) },
        cursor: mapDBXPaperCursorToDB(object: object.cursor),
        hasMore: object.hasMore
    )
}

func mapDBXPaperListUsersOnPaperDocArgsToDBOptional(object: DBXPaperListUsersOnPaperDocArgs?) -> DBPAPERListUsersOnPaperDocArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnPaperDocArgsToDB(object: object)
}

func mapDBXPaperListUsersOnPaperDocArgsToDB(object: DBXPaperListUsersOnPaperDocArgs) -> DBPAPERListUsersOnPaperDocArgs {
    DBPAPERListUsersOnPaperDocArgs(docId: object.docId, limit: object.limit, filterBy: mapDBXPaperUserOnPaperDocFilterToDB(object: object.filterBy))
}

func mapDBXPaperListUsersOnPaperDocContinueArgsToDBOptional(object: DBXPaperListUsersOnPaperDocContinueArgs?) -> DBPAPERListUsersOnPaperDocContinueArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnPaperDocContinueArgsToDB(object: object)
}

func mapDBXPaperListUsersOnPaperDocContinueArgsToDB(object: DBXPaperListUsersOnPaperDocContinueArgs) -> DBPAPERListUsersOnPaperDocContinueArgs {
    DBPAPERListUsersOnPaperDocContinueArgs(docId: object.docId, cursor: object.cursor)
}

func mapDBXPaperListUsersOnPaperDocResponseToDBOptional(object: DBXPaperListUsersOnPaperDocResponse?) -> DBPAPERListUsersOnPaperDocResponse? {
    guard let object = object else { return nil }
    return mapDBXPaperListUsersOnPaperDocResponseToDB(object: object)
}

func mapDBXPaperListUsersOnPaperDocResponseToDB(object: DBXPaperListUsersOnPaperDocResponse) -> DBPAPERListUsersOnPaperDocResponse {
    DBPAPERListUsersOnPaperDocResponse(
        invitees: object.invitees.compactMap { mapDBXPaperInviteeInfoWithPermissionLevelToDB(object: $0) },
        users: object.users.compactMap { mapDBXPaperUserInfoWithPermissionLevelToDB(object: $0) },
        docOwner: mapDBXSharingUserInfoToDB(object: object.docOwner),
        cursor: mapDBXPaperCursorToDB(object: object.cursor),
        hasMore: object.hasMore
    )
}

func mapDBXPaperPaperApiCursorErrorToDBOptional(object: DBXPaperPaperApiCursorError?) -> DBPAPERPaperApiCursorError? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperApiCursorErrorToDB(object: object)
}

func mapDBXPaperPaperApiCursorErrorToDB(object: DBXPaperPaperApiCursorError) -> DBPAPERPaperApiCursorError {
    if object.asExpiredCursor != nil {
        return DBPAPERPaperApiCursorError(expiredCursor: ())
    }
    if object.asInvalidCursor != nil {
        return DBPAPERPaperApiCursorError(invalidCursor: ())
    }
    if object.asWrongUserInCursor != nil {
        return DBPAPERPaperApiCursorError(wrongUserInCursor: ())
    }
    if object.asReset != nil {
        return DBPAPERPaperApiCursorError(reset: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperApiCursorError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperDocCreateArgsToDBOptional(object: DBXPaperPaperDocCreateArgs?) -> DBPAPERPaperDocCreateArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocCreateArgsToDB(object: object)
}

func mapDBXPaperPaperDocCreateArgsToDB(object: DBXPaperPaperDocCreateArgs) -> DBPAPERPaperDocCreateArgs {
    DBPAPERPaperDocCreateArgs(importFormat: mapDBXPaperImportFormatToDB(object: object.importFormat), parentFolderId: object.parentFolderId)
}

func mapDBXPaperPaperDocCreateErrorToDBOptional(object: DBXPaperPaperDocCreateError?) -> DBPAPERPaperDocCreateError? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocCreateErrorToDB(object: object)
}

func mapDBXPaperPaperDocCreateErrorToDB(object: DBXPaperPaperDocCreateError) -> DBPAPERPaperDocCreateError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERPaperDocCreateError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperDocCreateError(other: ())
    }
    if object.asContentMalformed != nil {
        return DBPAPERPaperDocCreateError(contentMalformed: ())
    }
    if object.asFolderNotFound != nil {
        return DBPAPERPaperDocCreateError(folderNotFound: ())
    }
    if object.asDocLengthExceeded != nil {
        return DBPAPERPaperDocCreateError(docLengthExceeded: ())
    }
    if object.asImageSizeExceeded != nil {
        return DBPAPERPaperDocCreateError(imageSizeExceeded: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperDocCreateUpdateResultToDBOptional(object: DBXPaperPaperDocCreateUpdateResult?) -> DBPAPERPaperDocCreateUpdateResult? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocCreateUpdateResultToDB(object: object)
}

func mapDBXPaperPaperDocCreateUpdateResultToDB(object: DBXPaperPaperDocCreateUpdateResult) -> DBPAPERPaperDocCreateUpdateResult {
    DBPAPERPaperDocCreateUpdateResult(docId: object.docId, revision: object.revision, title: object.title)
}

func mapDBXPaperPaperDocExportToDBOptional(object: DBXPaperPaperDocExport?) -> DBPAPERPaperDocExport? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocExportToDB(object: object)
}

func mapDBXPaperPaperDocExportToDB(object: DBXPaperPaperDocExport) -> DBPAPERPaperDocExport {
    DBPAPERPaperDocExport(docId: object.docId, exportFormat: mapDBXPaperExportFormatToDB(object: object.exportFormat))
}

func mapDBXPaperPaperDocExportResultToDBOptional(object: DBXPaperPaperDocExportResult?) -> DBPAPERPaperDocExportResult? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocExportResultToDB(object: object)
}

func mapDBXPaperPaperDocExportResultToDB(object: DBXPaperPaperDocExportResult) -> DBPAPERPaperDocExportResult {
    DBPAPERPaperDocExportResult(owner: object.owner, title: object.title, revision: object.revision, mimeType: object.mimeType)
}

func mapDBXPaperPaperDocPermissionLevelToDBOptional(object: DBXPaperPaperDocPermissionLevel?) -> DBPAPERPaperDocPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocPermissionLevelToDB(object: object)
}

func mapDBXPaperPaperDocPermissionLevelToDB(object: DBXPaperPaperDocPermissionLevel) -> DBPAPERPaperDocPermissionLevel {
    if object.asEdit != nil {
        return DBPAPERPaperDocPermissionLevel(edit: ())
    }
    if object.asViewAndComment != nil {
        return DBPAPERPaperDocPermissionLevel(viewAndComment: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperDocPermissionLevel(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperDocSharingPolicyToDBOptional(object: DBXPaperPaperDocSharingPolicy?) -> DBPAPERPaperDocSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocSharingPolicyToDB(object: object)
}

func mapDBXPaperPaperDocSharingPolicyToDB(object: DBXPaperPaperDocSharingPolicy) -> DBPAPERPaperDocSharingPolicy {
    DBPAPERPaperDocSharingPolicy(docId: object.docId, sharingPolicy: mapDBXPaperSharingPolicyToDB(object: object.sharingPolicy))
}

func mapDBXPaperPaperDocUpdateArgsToDBOptional(object: DBXPaperPaperDocUpdateArgs?) -> DBPAPERPaperDocUpdateArgs? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocUpdateArgsToDB(object: object)
}

func mapDBXPaperPaperDocUpdateArgsToDB(object: DBXPaperPaperDocUpdateArgs) -> DBPAPERPaperDocUpdateArgs {
    DBPAPERPaperDocUpdateArgs(
        docId: object.docId,
        docUpdatePolicy: mapDBXPaperPaperDocUpdatePolicyToDB(object: object.docUpdatePolicy),
        revision: object.revision,
        importFormat: mapDBXPaperImportFormatToDB(object: object.importFormat)
    )
}

func mapDBXPaperPaperDocUpdateErrorToDBOptional(object: DBXPaperPaperDocUpdateError?) -> DBPAPERPaperDocUpdateError? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocUpdateErrorToDB(object: object)
}

func mapDBXPaperPaperDocUpdateErrorToDB(object: DBXPaperPaperDocUpdateError) -> DBPAPERPaperDocUpdateError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERPaperDocUpdateError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperDocUpdateError(other: ())
    }
    if object.asDocNotFound != nil {
        return DBPAPERPaperDocUpdateError(docNotFound: ())
    }
    if object.asContentMalformed != nil {
        return DBPAPERPaperDocUpdateError(contentMalformed: ())
    }
    if object.asRevisionMismatch != nil {
        return DBPAPERPaperDocUpdateError(revisionMismatch: ())
    }
    if object.asDocLengthExceeded != nil {
        return DBPAPERPaperDocUpdateError(docLengthExceeded: ())
    }
    if object.asImageSizeExceeded != nil {
        return DBPAPERPaperDocUpdateError(imageSizeExceeded: ())
    }
    if object.asDocArchived != nil {
        return DBPAPERPaperDocUpdateError(docArchived: ())
    }
    if object.asDocDeleted != nil {
        return DBPAPERPaperDocUpdateError(docDeleted: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperDocUpdatePolicyToDBOptional(object: DBXPaperPaperDocUpdatePolicy?) -> DBPAPERPaperDocUpdatePolicy? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperDocUpdatePolicyToDB(object: object)
}

func mapDBXPaperPaperDocUpdatePolicyToDB(object: DBXPaperPaperDocUpdatePolicy) -> DBPAPERPaperDocUpdatePolicy {
    if object.asAppend != nil {
        return DBPAPERPaperDocUpdatePolicy(append: ())
    }
    if object.asPrepend != nil {
        return DBPAPERPaperDocUpdatePolicy(prepend: ())
    }
    if object.asOverwriteAll != nil {
        return DBPAPERPaperDocUpdatePolicy(overwriteAll: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperDocUpdatePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperFolderCreateArgToDBOptional(object: DBXPaperPaperFolderCreateArg?) -> DBPAPERPaperFolderCreateArg? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperFolderCreateArgToDB(object: object)
}

func mapDBXPaperPaperFolderCreateArgToDB(object: DBXPaperPaperFolderCreateArg) -> DBPAPERPaperFolderCreateArg {
    DBPAPERPaperFolderCreateArg(name: object.name, parentFolderId: object.parentFolderId, isTeamFolder: object.isTeamFolder)
}

func mapDBXPaperPaperFolderCreateErrorToDBOptional(object: DBXPaperPaperFolderCreateError?) -> DBPAPERPaperFolderCreateError? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperFolderCreateErrorToDB(object: object)
}

func mapDBXPaperPaperFolderCreateErrorToDB(object: DBXPaperPaperFolderCreateError) -> DBPAPERPaperFolderCreateError {
    if object.asInsufficientPermissions != nil {
        return DBPAPERPaperFolderCreateError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBPAPERPaperFolderCreateError(other: ())
    }
    if object.asFolderNotFound != nil {
        return DBPAPERPaperFolderCreateError(folderNotFound: ())
    }
    if object.asInvalidFolderId != nil {
        return DBPAPERPaperFolderCreateError(invalidFolderId: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperPaperFolderCreateResultToDBOptional(object: DBXPaperPaperFolderCreateResult?) -> DBPAPERPaperFolderCreateResult? {
    guard let object = object else { return nil }
    return mapDBXPaperPaperFolderCreateResultToDB(object: object)
}

func mapDBXPaperPaperFolderCreateResultToDB(object: DBXPaperPaperFolderCreateResult) -> DBPAPERPaperFolderCreateResult {
    DBPAPERPaperFolderCreateResult(folderId: object.folderId)
}

func mapDBXPaperRemovePaperDocUserToDBOptional(object: DBXPaperRemovePaperDocUser?) -> DBPAPERRemovePaperDocUser? {
    guard let object = object else { return nil }
    return mapDBXPaperRemovePaperDocUserToDB(object: object)
}

func mapDBXPaperRemovePaperDocUserToDB(object: DBXPaperRemovePaperDocUser) -> DBPAPERRemovePaperDocUser {
    DBPAPERRemovePaperDocUser(docId: object.docId, member: mapDBXSharingMemberSelectorToDB(object: object.member))
}

func mapDBXPaperSharingPolicyToDBOptional(object: DBXPaperSharingPolicy?) -> DBPAPERSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBXPaperSharingPolicyToDB(object: object)
}

func mapDBXPaperSharingPolicyToDB(object: DBXPaperSharingPolicy) -> DBPAPERSharingPolicy {
    DBPAPERSharingPolicy(
        publicSharingPolicy: mapDBXPaperSharingPublicPolicyTypeToDBOptional(object: object.publicSharingPolicy),
        teamSharingPolicy: mapDBXPaperSharingTeamPolicyTypeToDBOptional(object: object.teamSharingPolicy)
    )
}

func mapDBXPaperSharingTeamPolicyTypeToDBOptional(object: DBXPaperSharingTeamPolicyType?) -> DBPAPERSharingTeamPolicyType? {
    guard let object = object else { return nil }
    return mapDBXPaperSharingTeamPolicyTypeToDB(object: object)
}

func mapDBXPaperSharingTeamPolicyTypeToDB(object: DBXPaperSharingTeamPolicyType) -> DBPAPERSharingTeamPolicyType {
    if object.asPeopleWithLinkCanEdit != nil {
        return DBPAPERSharingTeamPolicyType(peopleWithLinkCanEdit: ())
    }
    if object.asPeopleWithLinkCanViewAndComment != nil {
        return DBPAPERSharingTeamPolicyType(peopleWithLinkCanViewAndComment: ())
    }
    if object.asInviteOnly != nil {
        return DBPAPERSharingTeamPolicyType(inviteOnly: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperSharingPublicPolicyTypeToDBOptional(object: DBXPaperSharingPublicPolicyType?) -> DBPAPERSharingPublicPolicyType? {
    guard let object = object else { return nil }
    return mapDBXPaperSharingPublicPolicyTypeToDB(object: object)
}

func mapDBXPaperSharingPublicPolicyTypeToDB(object: DBXPaperSharingPublicPolicyType) -> DBPAPERSharingPublicPolicyType {
    if object.asPeopleWithLinkCanEdit != nil {
        return DBPAPERSharingPublicPolicyType(peopleWithLinkCanEdit: ())
    }
    if object.asPeopleWithLinkCanViewAndComment != nil {
        return DBPAPERSharingPublicPolicyType(peopleWithLinkCanViewAndComment: ())
    }
    if object.asInviteOnly != nil {
        return DBPAPERSharingPublicPolicyType(inviteOnly: ())
    }
    if object.asDisabled != nil {
        return DBPAPERSharingPublicPolicyType(disabled: ())
    }
    fatalError("codegen error")
}

func mapDBXPaperUserInfoWithPermissionLevelToDBOptional(object: DBXPaperUserInfoWithPermissionLevel?) -> DBPAPERUserInfoWithPermissionLevel? {
    guard let object = object else { return nil }
    return mapDBXPaperUserInfoWithPermissionLevelToDB(object: object)
}

func mapDBXPaperUserInfoWithPermissionLevelToDB(object: DBXPaperUserInfoWithPermissionLevel) -> DBPAPERUserInfoWithPermissionLevel {
    DBPAPERUserInfoWithPermissionLevel(
        user: mapDBXSharingUserInfoToDB(object: object.user),
        permissionLevel: mapDBXPaperPaperDocPermissionLevelToDB(object: object.permissionLevel)
    )
}

func mapDBXPaperUserOnPaperDocFilterToDBOptional(object: DBXPaperUserOnPaperDocFilter?) -> DBPAPERUserOnPaperDocFilter? {
    guard let object = object else { return nil }
    return mapDBXPaperUserOnPaperDocFilterToDB(object: object)
}

func mapDBXPaperUserOnPaperDocFilterToDB(object: DBXPaperUserOnPaperDocFilter) -> DBPAPERUserOnPaperDocFilter {
    if object.asVisited != nil {
        return DBPAPERUserOnPaperDocFilter(visited: ())
    }
    if object.asShared != nil {
        return DBPAPERUserOnPaperDocFilter(shared: ())
    }
    if object.asOther != nil {
        return DBPAPERUserOnPaperDocFilter(other: ())
    }
    fatalError("codegen error")
}
