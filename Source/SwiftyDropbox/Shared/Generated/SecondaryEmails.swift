///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the secondary_emails namespace
public class SecondaryEmails {
    /// The SecondaryEmail struct
    public class SecondaryEmail: CustomStringConvertible, JSONRepresentable {
        /// Secondary email address.
        public let email: String
        /// Whether or not the secondary email address is verified to be owned by a user.
        public let isVerified: Bool
        public init(email: String, isVerified: Bool) {
            stringValidator(maxLength: 255, pattern: "^['#&A-Za-z0-9._%+-]+@[A-Za-z0-9-][A-Za-z0-9.-]*\\.[A-Za-z]{2,15}$")(email)
            self.email = email
            self.isVerified = isVerified
        }

        func json() throws -> JSON {
            try SecondaryEmailSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try SecondaryEmailSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for SecondaryEmail: \(error)"
            }
        }
    }

    public class SecondaryEmailSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: SecondaryEmail) throws -> JSON {
            let output = [
                "email": try Serialization._StringSerializer.serialize(value.email),
                "is_verified": try Serialization._BoolSerializer.serialize(value.isVerified),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> SecondaryEmail {
            switch json {
            case .dictionary(let dict):
                let email = try Serialization._StringSerializer.deserialize(dict["email"] ?? .null)
                let isVerified = try Serialization._BoolSerializer.deserialize(dict["is_verified"] ?? .null)
                return SecondaryEmail(email: email, isVerified: isVerified)
            default:
                throw JSONSerializerError.deserializeError(type: SecondaryEmail.self, json: json)
            }
        }
    }
}
