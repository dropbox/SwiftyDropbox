///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the check namespace
public class Check {
    /// EchoArg contains the arguments to be sent to the Dropbox servers.
    public class EchoArg: CustomStringConvertible {
        /// The string that you'd like to be echoed back to you.
        public let query: String
        public init(query: String = "") {
            stringValidator(maxLength: 500)(query)
            self.query = query
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try EchoArgSerializer().serialize(self)))"
            } catch {
                return "\(self)"
            }
        }
    }

    public class EchoArgSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: EchoArg) throws -> JSON {
            let output = [
                "query": try Serialization._StringSerializer.serialize(value.query),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> EchoArg {
            switch json {
            case .dictionary(let dict):
                let query = try Serialization._StringSerializer.deserialize(dict["query"] ?? .str(""))
                return EchoArg(query: query)
            default:
                throw JSONSerializerError.deserializeError(type: EchoArg.self, json: json)
            }
        }
    }

    /// EchoResult contains the result returned from the Dropbox servers.
    public class EchoResult: CustomStringConvertible {
        /// If everything worked correctly, this would be the same as query.
        public let result: String
        public init(result: String = "") {
            stringValidator()(result)
            self.result = result
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try EchoResultSerializer().serialize(self)))"
            } catch {
                return "\(self)"
            }
        }
    }

    public class EchoResultSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: EchoResult) throws -> JSON {
            let output = [
                "result": try Serialization._StringSerializer.serialize(value.result),
            ]
            return .dictionary(output)
        }

        public func deserialize(_ json: JSON) throws -> EchoResult {
            switch json {
            case .dictionary(let dict):
                let result = try Serialization._StringSerializer.deserialize(dict["result"] ?? .str(""))
                return EchoResult(result: result)
            default:
                throw JSONSerializerError.deserializeError(type: EchoResult.self, json: json)
            }
        }
    }

    /// Stone Route Objects

    static let app = Route(
        name: "app",
        version: 1,
        namespace: "check",
        deprecated: false,
        argSerializer: Check.EchoArgSerializer(),
        responseSerializer: Check.EchoResultSerializer(),
        errorSerializer: Serialization._VoidSerializer,
        attributes: RouteAttributes(
            auth: [.app],
            host: .api,
            style: .rpc
        )
    )
    static let user = Route(
        name: "user",
        version: 1,
        namespace: "check",
        deprecated: false,
        argSerializer: Check.EchoArgSerializer(),
        responseSerializer: Check.EchoResultSerializer(),
        errorSerializer: Serialization._VoidSerializer,
        attributes: RouteAttributes(
            auth: [.user],
            host: .api,
            style: .rpc
        )
    )
}
