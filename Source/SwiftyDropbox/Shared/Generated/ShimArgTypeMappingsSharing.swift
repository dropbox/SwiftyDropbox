///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBSHARINGAccessInheritanceToDBXOptional(object: DBSHARINGAccessInheritance?) -> DBXSharingAccessInheritance? {
    guard let object = object else { return nil }
    return mapDBSHARINGAccessInheritanceToDBX(object: object)
}

func mapDBSHARINGAccessInheritanceToDBX(object: DBSHARINGAccessInheritance) -> DBXSharingAccessInheritance {
    if object.isInherit() {
        return DBXSharingAccessInheritanceInherit()
    }
    if object.isNoInherit() {
        return DBXSharingAccessInheritanceNoInherit()
    }
    if object.isOther() {
        return DBXSharingAccessInheritanceOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAccessLevelToDBXOptional(object: DBSHARINGAccessLevel?) -> DBXSharingAccessLevel? {
    guard let object = object else { return nil }
    return mapDBSHARINGAccessLevelToDBX(object: object)
}

func mapDBSHARINGAccessLevelToDBX(object: DBSHARINGAccessLevel) -> DBXSharingAccessLevel {
    if object.isOwner() {
        return DBXSharingAccessLevelOwner()
    }
    if object.isEditor() {
        return DBXSharingAccessLevelEditor()
    }
    if object.isViewer() {
        return DBXSharingAccessLevelViewer()
    }
    if object.isViewerNoComment() {
        return DBXSharingAccessLevelViewerNoComment()
    }
    if object.isTraverse() {
        return DBXSharingAccessLevelTraverse()
    }
    if object.isNoAccess() {
        return DBXSharingAccessLevelNoAccess()
    }
    if object.isOther() {
        return DBXSharingAccessLevelOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAclUpdatePolicyToDBXOptional(object: DBSHARINGAclUpdatePolicy?) -> DBXSharingAclUpdatePolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGAclUpdatePolicyToDBX(object: object)
}

func mapDBSHARINGAclUpdatePolicyToDBX(object: DBSHARINGAclUpdatePolicy) -> DBXSharingAclUpdatePolicy {
    if object.isOwner() {
        return DBXSharingAclUpdatePolicyOwner()
    }
    if object.isEditors() {
        return DBXSharingAclUpdatePolicyEditors()
    }
    if object.isOther() {
        return DBXSharingAclUpdatePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAddFileMemberArgsToDBXOptional(object: DBSHARINGAddFileMemberArgs?) -> DBXSharingAddFileMemberArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddFileMemberArgsToDBX(object: object)
}

func mapDBSHARINGAddFileMemberArgsToDBX(object: DBSHARINGAddFileMemberArgs) -> DBXSharingAddFileMemberArgs {
    DBXSharingAddFileMemberArgs(
        file: object.file,
        members: object.members.compactMap { mapDBSHARINGMemberSelectorToDBX(object: $0) },
        customMessage: object.customMessage,
        quiet: object.quiet,
        accessLevel: mapDBSHARINGAccessLevelToDBX(object: object.accessLevel),
        addMessageAsComment: object.addMessageAsComment
    )
}

func mapDBSHARINGAddFileMemberErrorToDBXOptional(object: DBSHARINGAddFileMemberError?) -> DBXSharingAddFileMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddFileMemberErrorToDBX(object: object)
}

func mapDBSHARINGAddFileMemberErrorToDBX(object: DBSHARINGAddFileMemberError) -> DBXSharingAddFileMemberError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingAddFileMemberError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingAddFileMemberError.factory(swift: .accessError(accessError.swift))
    }
    if object.isRateLimit() {
        return DBXSharingAddFileMemberErrorRateLimit()
    }
    if object.isInvalidComment() {
        return DBXSharingAddFileMemberErrorInvalidComment()
    }
    if object.isOther() {
        return DBXSharingAddFileMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAddFolderMemberArgToDBXOptional(object: DBSHARINGAddFolderMemberArg?) -> DBXSharingAddFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddFolderMemberArgToDBX(object: object)
}

func mapDBSHARINGAddFolderMemberArgToDBX(object: DBSHARINGAddFolderMemberArg) -> DBXSharingAddFolderMemberArg {
    DBXSharingAddFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        members: object.members.compactMap { mapDBSHARINGAddMemberToDBX(object: $0) },
        quiet: object.quiet,
        customMessage: object.customMessage
    )
}

func mapDBSHARINGAddFolderMemberErrorToDBXOptional(object: DBSHARINGAddFolderMemberError?) -> DBXSharingAddFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddFolderMemberErrorToDBX(object: object)
}

func mapDBSHARINGAddFolderMemberErrorToDBX(object: DBSHARINGAddFolderMemberError) -> DBXSharingAddFolderMemberError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingAddFolderMemberError.factory(swift: .accessError(accessError.swift))
    }
    if object.isEmailUnverified() {
        return DBXSharingAddFolderMemberErrorEmailUnverified()
    }
    if object.isBannedMember() {
        return DBXSharingAddFolderMemberErrorBannedMember()
    }
    if object.isBadMember() {
        let badMember = mapDBSHARINGAddMemberSelectorErrorToDBX(object: object.badMember)
        return DBXSharingAddFolderMemberError.factory(swift: .badMember(badMember.swift))
    }
    if object.isCantShareOutsideTeam() {
        return DBXSharingAddFolderMemberErrorCantShareOutsideTeam()
    }
    if object.isTooManyMembers() {
        let tooManyMembers = object.tooManyMembers
        return DBXSharingAddFolderMemberError.factory(swift: .tooManyMembers(tooManyMembers.uint64Value))
    }
    if object.isTooManyPendingInvites() {
        let tooManyPendingInvites = object.tooManyPendingInvites
        return DBXSharingAddFolderMemberError.factory(swift: .tooManyPendingInvites(tooManyPendingInvites.uint64Value))
    }
    if object.isRateLimit() {
        return DBXSharingAddFolderMemberErrorRateLimit()
    }
    if object.isTooManyInvitees() {
        return DBXSharingAddFolderMemberErrorTooManyInvitees()
    }
    if object.isInsufficientPlan() {
        return DBXSharingAddFolderMemberErrorInsufficientPlan()
    }
    if object.isTeamFolder() {
        return DBXSharingAddFolderMemberErrorTeamFolder()
    }
    if object.isNoPermission() {
        return DBXSharingAddFolderMemberErrorNoPermission()
    }
    if object.isInvalidSharedFolder() {
        return DBXSharingAddFolderMemberErrorInvalidSharedFolder()
    }
    if object.isOther() {
        return DBXSharingAddFolderMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAddMemberToDBXOptional(object: DBSHARINGAddMember?) -> DBXSharingAddMember? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddMemberToDBX(object: object)
}

func mapDBSHARINGAddMemberToDBX(object: DBSHARINGAddMember) -> DBXSharingAddMember {
    DBXSharingAddMember(member: mapDBSHARINGMemberSelectorToDBX(object: object.member), accessLevel: mapDBSHARINGAccessLevelToDBX(object: object.accessLevel))
}

func mapDBSHARINGAddMemberSelectorErrorToDBXOptional(object: DBSHARINGAddMemberSelectorError?) -> DBXSharingAddMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBSHARINGAddMemberSelectorErrorToDBX(object: object)
}

func mapDBSHARINGAddMemberSelectorErrorToDBX(object: DBSHARINGAddMemberSelectorError) -> DBXSharingAddMemberSelectorError {
    if object.isAutomaticGroup() {
        return DBXSharingAddMemberSelectorErrorAutomaticGroup()
    }
    if object.isInvalidDropboxId() {
        let invalidDropboxId = object.invalidDropboxId
        return DBXSharingAddMemberSelectorError.factory(swift: .invalidDropboxId(invalidDropboxId))
    }
    if object.isInvalidEmail() {
        let invalidEmail = object.invalidEmail
        return DBXSharingAddMemberSelectorError.factory(swift: .invalidEmail(invalidEmail))
    }
    if object.isUnverifiedDropboxId() {
        let unverifiedDropboxId = object.unverifiedDropboxId
        return DBXSharingAddMemberSelectorError.factory(swift: .unverifiedDropboxId(unverifiedDropboxId))
    }
    if object.isGroupDeleted() {
        return DBXSharingAddMemberSelectorErrorGroupDeleted()
    }
    if object.isGroupNotOnTeam() {
        return DBXSharingAddMemberSelectorErrorGroupNotOnTeam()
    }
    if object.isOther() {
        return DBXSharingAddMemberSelectorErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRequestedVisibilityToDBXOptional(object: DBSHARINGRequestedVisibility?) -> DBXSharingRequestedVisibility? {
    guard let object = object else { return nil }
    return mapDBSHARINGRequestedVisibilityToDBX(object: object)
}

func mapDBSHARINGRequestedVisibilityToDBX(object: DBSHARINGRequestedVisibility) -> DBXSharingRequestedVisibility {
    if object.isPublic() {
        return DBXSharingRequestedVisibilityPublic_()
    }
    if object.isTeamOnly() {
        return DBXSharingRequestedVisibilityTeamOnly()
    }
    if object.isPassword() {
        return DBXSharingRequestedVisibilityPassword()
    }
    fatalError("codegen error")
}

func mapDBSHARINGResolvedVisibilityToDBXOptional(object: DBSHARINGResolvedVisibility?) -> DBXSharingResolvedVisibility? {
    guard let object = object else { return nil }
    return mapDBSHARINGResolvedVisibilityToDBX(object: object)
}

func mapDBSHARINGResolvedVisibilityToDBX(object: DBSHARINGResolvedVisibility) -> DBXSharingResolvedVisibility {
    if object.isPublic() {
        return DBXSharingResolvedVisibilityPublic_()
    }
    if object.isTeamOnly() {
        return DBXSharingResolvedVisibilityTeamOnly()
    }
    if object.isPassword() {
        return DBXSharingResolvedVisibilityPassword()
    }
    if object.isTeamAndPassword() {
        return DBXSharingResolvedVisibilityTeamAndPassword()
    }
    if object.isSharedFolderOnly() {
        return DBXSharingResolvedVisibilitySharedFolderOnly()
    }
    if object.isNoOne() {
        return DBXSharingResolvedVisibilityNoOne()
    }
    if object.isOnlyYou() {
        return DBXSharingResolvedVisibilityOnlyYou()
    }
    if object.isOther() {
        return DBXSharingResolvedVisibilityOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAlphaResolvedVisibilityToDBXOptional(object: DBSHARINGAlphaResolvedVisibility?) -> DBXSharingAlphaResolvedVisibility? {
    guard let object = object else { return nil }
    return mapDBSHARINGAlphaResolvedVisibilityToDBX(object: object)
}

func mapDBSHARINGAlphaResolvedVisibilityToDBX(object: DBSHARINGAlphaResolvedVisibility) -> DBXSharingAlphaResolvedVisibility {
    if object.isPublic() {
        return DBXSharingAlphaResolvedVisibilityPublic_()
    }
    if object.isTeamOnly() {
        return DBXSharingAlphaResolvedVisibilityTeamOnly()
    }
    if object.isPassword() {
        return DBXSharingAlphaResolvedVisibilityPassword()
    }
    if object.isTeamAndPassword() {
        return DBXSharingAlphaResolvedVisibilityTeamAndPassword()
    }
    if object.isSharedFolderOnly() {
        return DBXSharingAlphaResolvedVisibilitySharedFolderOnly()
    }
    if object.isNoOne() {
        return DBXSharingAlphaResolvedVisibilityNoOne()
    }
    if object.isOnlyYou() {
        return DBXSharingAlphaResolvedVisibilityOnlyYou()
    }
    if object.isOther() {
        return DBXSharingAlphaResolvedVisibilityOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGAudienceExceptionContentInfoToDBXOptional(object: DBSHARINGAudienceExceptionContentInfo?) -> DBXSharingAudienceExceptionContentInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGAudienceExceptionContentInfoToDBX(object: object)
}

func mapDBSHARINGAudienceExceptionContentInfoToDBX(object: DBSHARINGAudienceExceptionContentInfo) -> DBXSharingAudienceExceptionContentInfo {
    DBXSharingAudienceExceptionContentInfo(name: object.name)
}

func mapDBSHARINGAudienceExceptionsToDBXOptional(object: DBSHARINGAudienceExceptions?) -> DBXSharingAudienceExceptions? {
    guard let object = object else { return nil }
    return mapDBSHARINGAudienceExceptionsToDBX(object: object)
}

func mapDBSHARINGAudienceExceptionsToDBX(object: DBSHARINGAudienceExceptions) -> DBXSharingAudienceExceptions {
    DBXSharingAudienceExceptions(count: object.count, exceptions: object.exceptions.compactMap { mapDBSHARINGAudienceExceptionContentInfoToDBX(object: $0) })
}

func mapDBSHARINGAudienceRestrictingSharedFolderToDBXOptional(object: DBSHARINGAudienceRestrictingSharedFolder?) -> DBXSharingAudienceRestrictingSharedFolder? {
    guard let object = object else { return nil }
    return mapDBSHARINGAudienceRestrictingSharedFolderToDBX(object: object)
}

func mapDBSHARINGAudienceRestrictingSharedFolderToDBX(object: DBSHARINGAudienceRestrictingSharedFolder) -> DBXSharingAudienceRestrictingSharedFolder {
    DBXSharingAudienceRestrictingSharedFolder(
        sharedFolderId: object.sharedFolderId,
        name: object.name,
        audience: mapDBSHARINGLinkAudienceToDBX(object: object.audience)
    )
}

func mapDBSHARINGLinkMetadataToDBXOptional(object: DBSHARINGLinkMetadata?) -> DBXSharingLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkMetadataToDBX(object: object)
}

func mapDBSHARINGLinkMetadataToDBX(object: DBSHARINGLinkMetadata) -> DBXSharingLinkMetadata {
    switch object {
    case let object as DBSHARINGPathLinkMetadata:
        return DBXSharingPathLinkMetadata(
            url: object.url,
            visibility: mapDBSHARINGVisibilityToDBX(object: object.visibility),
            path: object.path,
            expires: object.expires
        )
    case let object as DBSHARINGCollectionLinkMetadata:
        return DBXSharingCollectionLinkMetadata(url: object.url, visibility: mapDBSHARINGVisibilityToDBX(object: object.visibility), expires: object.expires)
    default:
        return DBXSharingLinkMetadata(url: object.url, visibility: mapDBSHARINGVisibilityToDBX(object: object.visibility), expires: object.expires)
    }
}

func mapDBSHARINGCollectionLinkMetadataToDBXOptional(object: DBSHARINGCollectionLinkMetadata?) -> DBXSharingCollectionLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGCollectionLinkMetadataToDBX(object: object)
}

func mapDBSHARINGCollectionLinkMetadataToDBX(object: DBSHARINGCollectionLinkMetadata) -> DBXSharingCollectionLinkMetadata {
    DBXSharingCollectionLinkMetadata(url: object.url, visibility: mapDBSHARINGVisibilityToDBX(object: object.visibility), expires: object.expires)
}

func mapDBSHARINGCreateSharedLinkArgToDBXOptional(object: DBSHARINGCreateSharedLinkArg?) -> DBXSharingCreateSharedLinkArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGCreateSharedLinkArgToDBX(object: object)
}

func mapDBSHARINGCreateSharedLinkArgToDBX(object: DBSHARINGCreateSharedLinkArg) -> DBXSharingCreateSharedLinkArg {
    DBXSharingCreateSharedLinkArg(
        path: object.path,
        shortUrl: object.shortUrl,
        pendingUpload: mapDBSHARINGPendingUploadModeToDBXOptional(object: object.pendingUpload)
    )
}

func mapDBSHARINGCreateSharedLinkErrorToDBXOptional(object: DBSHARINGCreateSharedLinkError?) -> DBXSharingCreateSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBSHARINGCreateSharedLinkErrorToDBX(object: object)
}

func mapDBSHARINGCreateSharedLinkErrorToDBX(object: DBSHARINGCreateSharedLinkError) -> DBXSharingCreateSharedLinkError {
    if object.isPath() {
        let path = mapDBFILESLookupErrorToDBX(object: object.path)
        return DBXSharingCreateSharedLinkError.factory(swift: .path(path.swift))
    }
    if object.isOther() {
        return DBXSharingCreateSharedLinkErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGCreateSharedLinkWithSettingsArgToDBXOptional(object: DBSHARINGCreateSharedLinkWithSettingsArg?) -> DBXSharingCreateSharedLinkWithSettingsArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGCreateSharedLinkWithSettingsArgToDBX(object: object)
}

func mapDBSHARINGCreateSharedLinkWithSettingsArgToDBX(object: DBSHARINGCreateSharedLinkWithSettingsArg) -> DBXSharingCreateSharedLinkWithSettingsArg {
    DBXSharingCreateSharedLinkWithSettingsArg(path: object.path, settings: mapDBSHARINGSharedLinkSettingsToDBXOptional(object: object.settings))
}

func mapDBSHARINGCreateSharedLinkWithSettingsErrorToDBXOptional(object: DBSHARINGCreateSharedLinkWithSettingsError?)
    -> DBXSharingCreateSharedLinkWithSettingsError? {
    guard let object = object else { return nil }
    return mapDBSHARINGCreateSharedLinkWithSettingsErrorToDBX(object: object)
}

func mapDBSHARINGCreateSharedLinkWithSettingsErrorToDBX(object: DBSHARINGCreateSharedLinkWithSettingsError) -> DBXSharingCreateSharedLinkWithSettingsError {
    if object.isPath() {
        let path = mapDBFILESLookupErrorToDBX(object: object.path)
        return DBXSharingCreateSharedLinkWithSettingsError.factory(swift: .path(path.swift))
    }
    if object.isEmailNotVerified() {
        return DBXSharingCreateSharedLinkWithSettingsErrorEmailNotVerified()
    }
    if object.isSharedLinkAlreadyExists() {
        let sharedLinkAlreadyExists = mapDBSHARINGSharedLinkAlreadyExistsMetadataToDBXOptional(object: object.sharedLinkAlreadyExists)
        return DBXSharingCreateSharedLinkWithSettingsError.factory(swift: .sharedLinkAlreadyExists(sharedLinkAlreadyExists?.swift))
    }
    if object.isSettingsError() {
        let settingsError = mapDBSHARINGSharedLinkSettingsErrorToDBX(object: object.settingsError)
        return DBXSharingCreateSharedLinkWithSettingsError.factory(swift: .settingsError(settingsError.swift))
    }
    if object.isAccessDenied() {
        return DBXSharingCreateSharedLinkWithSettingsErrorAccessDenied()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedContentLinkMetadataBaseToDBXOptional(object: DBSHARINGSharedContentLinkMetadataBase?) -> DBXSharingSharedContentLinkMetadataBase? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedContentLinkMetadataBaseToDBX(object: object)
}

func mapDBSHARINGSharedContentLinkMetadataBaseToDBX(object: DBSHARINGSharedContentLinkMetadataBase) -> DBXSharingSharedContentLinkMetadataBase {
    DBXSharingSharedContentLinkMetadataBase(
        audienceOptions: object.audienceOptions.compactMap { mapDBSHARINGLinkAudienceToDBX(object: $0) },
        currentAudience: mapDBSHARINGLinkAudienceToDBX(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBSHARINGLinkPermissionToDBX(object: $0) },
        passwordProtected: object.passwordProtected,
        accessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBSHARINGAudienceRestrictingSharedFolderToDBXOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry
    )
}

func mapDBSHARINGExpectedSharedContentLinkMetadataToDBXOptional(object: DBSHARINGExpectedSharedContentLinkMetadata?)
    -> DBXSharingExpectedSharedContentLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGExpectedSharedContentLinkMetadataToDBX(object: object)
}

func mapDBSHARINGExpectedSharedContentLinkMetadataToDBX(object: DBSHARINGExpectedSharedContentLinkMetadata) -> DBXSharingExpectedSharedContentLinkMetadata {
    DBXSharingExpectedSharedContentLinkMetadata(
        audienceOptions: object.audienceOptions.compactMap { mapDBSHARINGLinkAudienceToDBX(object: $0) },
        currentAudience: mapDBSHARINGLinkAudienceToDBX(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBSHARINGLinkPermissionToDBX(object: $0) },
        passwordProtected: object.passwordProtected,
        accessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBSHARINGAudienceRestrictingSharedFolderToDBXOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry
    )
}

func mapDBSHARINGFileActionToDBXOptional(object: DBSHARINGFileAction?) -> DBXSharingFileAction? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileActionToDBX(object: object)
}

func mapDBSHARINGFileActionToDBX(object: DBSHARINGFileAction) -> DBXSharingFileAction {
    if object.isDisableViewerInfo() {
        return DBXSharingFileActionDisableViewerInfo()
    }
    if object.isEditContents() {
        return DBXSharingFileActionEditContents()
    }
    if object.isEnableViewerInfo() {
        return DBXSharingFileActionEnableViewerInfo()
    }
    if object.isInviteViewer() {
        return DBXSharingFileActionInviteViewer()
    }
    if object.isInviteViewerNoComment() {
        return DBXSharingFileActionInviteViewerNoComment()
    }
    if object.isInviteEditor() {
        return DBXSharingFileActionInviteEditor()
    }
    if object.isUnshare() {
        return DBXSharingFileActionUnshare()
    }
    if object.isRelinquishMembership() {
        return DBXSharingFileActionRelinquishMembership()
    }
    if object.isShareLink() {
        return DBXSharingFileActionShareLink()
    }
    if object.isCreateLink() {
        return DBXSharingFileActionCreateLink()
    }
    if object.isCreateViewLink() {
        return DBXSharingFileActionCreateViewLink()
    }
    if object.isCreateEditLink() {
        return DBXSharingFileActionCreateEditLink()
    }
    if object.isOther() {
        return DBXSharingFileActionOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGFileErrorResultToDBXOptional(object: DBSHARINGFileErrorResult?) -> DBXSharingFileErrorResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileErrorResultToDBX(object: object)
}

func mapDBSHARINGFileErrorResultToDBX(object: DBSHARINGFileErrorResult) -> DBXSharingFileErrorResult {
    if object.isFileNotFoundError() {
        let fileNotFoundError = object.fileNotFoundError
        return DBXSharingFileErrorResult.factory(swift: .fileNotFoundError(fileNotFoundError))
    }
    if object.isInvalidFileActionError() {
        let invalidFileActionError = object.invalidFileActionError
        return DBXSharingFileErrorResult.factory(swift: .invalidFileActionError(invalidFileActionError))
    }
    if object.isPermissionDeniedError() {
        let permissionDeniedError = object.permissionDeniedError
        return DBXSharingFileErrorResult.factory(swift: .permissionDeniedError(permissionDeniedError))
    }
    if object.isOther() {
        return DBXSharingFileErrorResultOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedLinkMetadataToDBXOptional(object: DBSHARINGSharedLinkMetadata?) -> DBXSharingSharedLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkMetadataToDBX(object: object)
}

func mapDBSHARINGSharedLinkMetadataToDBX(object: DBSHARINGSharedLinkMetadata) -> DBXSharingSharedLinkMetadata {
    switch object {
    case let object as DBSHARINGFileLinkMetadata:
        return DBXSharingFileLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBSHARINGLinkPermissionsToDBX(object: object.linkPermissions),
            clientModified: object.clientModified,
            serverModified: object.serverModified,
            rev: object.rev,
            size: object.size,
            id: object.id_,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBSHARINGTeamMemberInfoToDBXOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBUSERSTeamToDBXOptional(object: object.contentOwnerTeamInfo)
        )
    case let object as DBSHARINGFolderLinkMetadata:
        return DBXSharingFolderLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBSHARINGLinkPermissionsToDBX(object: object.linkPermissions),
            id: object.id_,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBSHARINGTeamMemberInfoToDBXOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBUSERSTeamToDBXOptional(object: object.contentOwnerTeamInfo)
        )
    default:
        return DBXSharingSharedLinkMetadata(
            url: object.url,
            name: object.name,
            linkPermissions: mapDBSHARINGLinkPermissionsToDBX(object: object.linkPermissions),
            id: object.id_,
            expires: object.expires,
            pathLower: object.pathLower,
            teamMemberInfo: mapDBSHARINGTeamMemberInfoToDBXOptional(object: object.teamMemberInfo),
            contentOwnerTeamInfo: mapDBUSERSTeamToDBXOptional(object: object.contentOwnerTeamInfo)
        )
    }
}

func mapDBSHARINGFileLinkMetadataToDBXOptional(object: DBSHARINGFileLinkMetadata?) -> DBXSharingFileLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileLinkMetadataToDBX(object: object)
}

func mapDBSHARINGFileLinkMetadataToDBX(object: DBSHARINGFileLinkMetadata) -> DBXSharingFileLinkMetadata {
    DBXSharingFileLinkMetadata(
        url: object.url,
        name: object.name,
        linkPermissions: mapDBSHARINGLinkPermissionsToDBX(object: object.linkPermissions),
        clientModified: object.clientModified,
        serverModified: object.serverModified,
        rev: object.rev,
        size: object.size,
        id: object.id_,
        expires: object.expires,
        pathLower: object.pathLower,
        teamMemberInfo: mapDBSHARINGTeamMemberInfoToDBXOptional(object: object.teamMemberInfo),
        contentOwnerTeamInfo: mapDBUSERSTeamToDBXOptional(object: object.contentOwnerTeamInfo)
    )
}

func mapDBSHARINGFileMemberActionErrorToDBXOptional(object: DBSHARINGFileMemberActionError?) -> DBXSharingFileMemberActionError? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileMemberActionErrorToDBX(object: object)
}

func mapDBSHARINGFileMemberActionErrorToDBX(object: DBSHARINGFileMemberActionError) -> DBXSharingFileMemberActionError {
    if object.isInvalidMember() {
        return DBXSharingFileMemberActionErrorInvalidMember()
    }
    if object.isNoPermission() {
        return DBXSharingFileMemberActionErrorNoPermission()
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingFileMemberActionError.factory(swift: .accessError(accessError.swift))
    }
    if object.isNoExplicitAccess() {
        let noExplicitAccess = mapDBSHARINGMemberAccessLevelResultToDBX(object: object.noExplicitAccess)
        return DBXSharingFileMemberActionError.factory(swift: .noExplicitAccess(noExplicitAccess.swift))
    }
    if object.isOther() {
        return DBXSharingFileMemberActionErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGFileMemberActionIndividualResultToDBXOptional(object: DBSHARINGFileMemberActionIndividualResult?)
    -> DBXSharingFileMemberActionIndividualResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileMemberActionIndividualResultToDBX(object: object)
}

func mapDBSHARINGFileMemberActionIndividualResultToDBX(object: DBSHARINGFileMemberActionIndividualResult) -> DBXSharingFileMemberActionIndividualResult {
    if object.isSuccess() {
        let success = mapDBSHARINGAccessLevelToDBXOptional(object: object.success)
        return DBXSharingFileMemberActionIndividualResult.factory(swift: .success(success?.swift))
    }
    if object.isMemberError() {
        let memberError = mapDBSHARINGFileMemberActionErrorToDBX(object: object.memberError)
        return DBXSharingFileMemberActionIndividualResult.factory(swift: .memberError(memberError.swift))
    }
    fatalError("codegen error")
}

func mapDBSHARINGFileMemberActionResultToDBXOptional(object: DBSHARINGFileMemberActionResult?) -> DBXSharingFileMemberActionResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileMemberActionResultToDBX(object: object)
}

func mapDBSHARINGFileMemberActionResultToDBX(object: DBSHARINGFileMemberActionResult) -> DBXSharingFileMemberActionResult {
    DBXSharingFileMemberActionResult(
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        result: mapDBSHARINGFileMemberActionIndividualResultToDBX(object: object.result),
        sckeySha1: object.sckeySha1,
        invitationSignature: object.invitationSignature
    )
}

func mapDBSHARINGFileMemberRemoveActionResultToDBXOptional(object: DBSHARINGFileMemberRemoveActionResult?) -> DBXSharingFileMemberRemoveActionResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGFileMemberRemoveActionResultToDBX(object: object)
}

func mapDBSHARINGFileMemberRemoveActionResultToDBX(object: DBSHARINGFileMemberRemoveActionResult) -> DBXSharingFileMemberRemoveActionResult {
    if object.isSuccess() {
        let success = mapDBSHARINGMemberAccessLevelResultToDBX(object: object.success)
        return DBXSharingFileMemberRemoveActionResult.factory(swift: .success(success.swift))
    }
    if object.isMemberError() {
        let memberError = mapDBSHARINGFileMemberActionErrorToDBX(object: object.memberError)
        return DBXSharingFileMemberRemoveActionResult.factory(swift: .memberError(memberError.swift))
    }
    if object.isOther() {
        return DBXSharingFileMemberRemoveActionResultOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGFilePermissionToDBXOptional(object: DBSHARINGFilePermission?) -> DBXSharingFilePermission? {
    guard let object = object else { return nil }
    return mapDBSHARINGFilePermissionToDBX(object: object)
}

func mapDBSHARINGFilePermissionToDBX(object: DBSHARINGFilePermission) -> DBXSharingFilePermission {
    DBXSharingFilePermission(
        action: mapDBSHARINGFileActionToDBX(object: object.action),
        allow: object.allow,
        reason: mapDBSHARINGPermissionDeniedReasonToDBXOptional(object: object.reason)
    )
}

func mapDBSHARINGFolderActionToDBXOptional(object: DBSHARINGFolderAction?) -> DBXSharingFolderAction? {
    guard let object = object else { return nil }
    return mapDBSHARINGFolderActionToDBX(object: object)
}

func mapDBSHARINGFolderActionToDBX(object: DBSHARINGFolderAction) -> DBXSharingFolderAction {
    if object.isChangeOptions() {
        return DBXSharingFolderActionChangeOptions()
    }
    if object.isDisableViewerInfo() {
        return DBXSharingFolderActionDisableViewerInfo()
    }
    if object.isEditContents() {
        return DBXSharingFolderActionEditContents()
    }
    if object.isEnableViewerInfo() {
        return DBXSharingFolderActionEnableViewerInfo()
    }
    if object.isInviteEditor() {
        return DBXSharingFolderActionInviteEditor()
    }
    if object.isInviteViewer() {
        return DBXSharingFolderActionInviteViewer()
    }
    if object.isInviteViewerNoComment() {
        return DBXSharingFolderActionInviteViewerNoComment()
    }
    if object.isRelinquishMembership() {
        return DBXSharingFolderActionRelinquishMembership()
    }
    if object.isUnmount() {
        return DBXSharingFolderActionUnmount()
    }
    if object.isUnshare() {
        return DBXSharingFolderActionUnshare()
    }
    if object.isLeaveACopy() {
        return DBXSharingFolderActionLeaveACopy()
    }
    if object.isShareLink() {
        return DBXSharingFolderActionShareLink()
    }
    if object.isCreateLink() {
        return DBXSharingFolderActionCreateLink()
    }
    if object.isSetAccessInheritance() {
        return DBXSharingFolderActionSetAccessInheritance()
    }
    if object.isOther() {
        return DBXSharingFolderActionOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGFolderLinkMetadataToDBXOptional(object: DBSHARINGFolderLinkMetadata?) -> DBXSharingFolderLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGFolderLinkMetadataToDBX(object: object)
}

func mapDBSHARINGFolderLinkMetadataToDBX(object: DBSHARINGFolderLinkMetadata) -> DBXSharingFolderLinkMetadata {
    DBXSharingFolderLinkMetadata(
        url: object.url,
        name: object.name,
        linkPermissions: mapDBSHARINGLinkPermissionsToDBX(object: object.linkPermissions),
        id: object.id_,
        expires: object.expires,
        pathLower: object.pathLower,
        teamMemberInfo: mapDBSHARINGTeamMemberInfoToDBXOptional(object: object.teamMemberInfo),
        contentOwnerTeamInfo: mapDBUSERSTeamToDBXOptional(object: object.contentOwnerTeamInfo)
    )
}

func mapDBSHARINGFolderPermissionToDBXOptional(object: DBSHARINGFolderPermission?) -> DBXSharingFolderPermission? {
    guard let object = object else { return nil }
    return mapDBSHARINGFolderPermissionToDBX(object: object)
}

func mapDBSHARINGFolderPermissionToDBX(object: DBSHARINGFolderPermission) -> DBXSharingFolderPermission {
    DBXSharingFolderPermission(
        action: mapDBSHARINGFolderActionToDBX(object: object.action),
        allow: object.allow,
        reason: mapDBSHARINGPermissionDeniedReasonToDBXOptional(object: object.reason)
    )
}

func mapDBSHARINGFolderPolicyToDBXOptional(object: DBSHARINGFolderPolicy?) -> DBXSharingFolderPolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGFolderPolicyToDBX(object: object)
}

func mapDBSHARINGFolderPolicyToDBX(object: DBSHARINGFolderPolicy) -> DBXSharingFolderPolicy {
    DBXSharingFolderPolicy(
        aclUpdatePolicy: mapDBSHARINGAclUpdatePolicyToDBX(object: object.aclUpdatePolicy),
        sharedLinkPolicy: mapDBSHARINGSharedLinkPolicyToDBX(object: object.sharedLinkPolicy),
        memberPolicy: mapDBSHARINGMemberPolicyToDBXOptional(object: object.memberPolicy),
        resolvedMemberPolicy: mapDBSHARINGMemberPolicyToDBXOptional(object: object.resolvedMemberPolicy),
        viewerInfoPolicy: mapDBSHARINGViewerInfoPolicyToDBXOptional(object: object.viewerInfoPolicy)
    )
}

func mapDBSHARINGGetFileMetadataArgToDBXOptional(object: DBSHARINGGetFileMetadataArg?) -> DBXSharingGetFileMetadataArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetFileMetadataArgToDBX(object: object)
}

func mapDBSHARINGGetFileMetadataArgToDBX(object: DBSHARINGGetFileMetadataArg) -> DBXSharingGetFileMetadataArg {
    DBXSharingGetFileMetadataArg(file: object.file, actions: object.actions?.compactMap { mapDBSHARINGFileActionToDBX(object: $0) })
}

func mapDBSHARINGGetFileMetadataBatchArgToDBXOptional(object: DBSHARINGGetFileMetadataBatchArg?) -> DBXSharingGetFileMetadataBatchArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetFileMetadataBatchArgToDBX(object: object)
}

func mapDBSHARINGGetFileMetadataBatchArgToDBX(object: DBSHARINGGetFileMetadataBatchArg) -> DBXSharingGetFileMetadataBatchArg {
    DBXSharingGetFileMetadataBatchArg(files: object.files, actions: object.actions?.compactMap { mapDBSHARINGFileActionToDBX(object: $0) })
}

func mapDBSHARINGGetFileMetadataBatchResultToDBXOptional(object: DBSHARINGGetFileMetadataBatchResult?) -> DBXSharingGetFileMetadataBatchResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetFileMetadataBatchResultToDBX(object: object)
}

func mapDBSHARINGGetFileMetadataBatchResultToDBX(object: DBSHARINGGetFileMetadataBatchResult) -> DBXSharingGetFileMetadataBatchResult {
    DBXSharingGetFileMetadataBatchResult(file: object.file, result: mapDBSHARINGGetFileMetadataIndividualResultToDBX(object: object.result))
}

func mapDBSHARINGGetFileMetadataErrorToDBXOptional(object: DBSHARINGGetFileMetadataError?) -> DBXSharingGetFileMetadataError? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetFileMetadataErrorToDBX(object: object)
}

func mapDBSHARINGGetFileMetadataErrorToDBX(object: DBSHARINGGetFileMetadataError) -> DBXSharingGetFileMetadataError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingGetFileMetadataError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingGetFileMetadataError.factory(swift: .accessError(accessError.swift))
    }
    if object.isOther() {
        return DBXSharingGetFileMetadataErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGGetFileMetadataIndividualResultToDBXOptional(object: DBSHARINGGetFileMetadataIndividualResult?) -> DBXSharingGetFileMetadataIndividualResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetFileMetadataIndividualResultToDBX(object: object)
}

func mapDBSHARINGGetFileMetadataIndividualResultToDBX(object: DBSHARINGGetFileMetadataIndividualResult) -> DBXSharingGetFileMetadataIndividualResult {
    if object.isMetadata() {
        let metadata = mapDBSHARINGSharedFileMetadataToDBX(object: object.metadata)
        return DBXSharingGetFileMetadataIndividualResult.factory(swift: .metadata(metadata.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingGetFileMetadataIndividualResult.factory(swift: .accessError(accessError.swift))
    }
    if object.isOther() {
        return DBXSharingGetFileMetadataIndividualResultOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGGetMetadataArgsToDBXOptional(object: DBSHARINGGetMetadataArgs?) -> DBXSharingGetMetadataArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetMetadataArgsToDBX(object: object)
}

func mapDBSHARINGGetMetadataArgsToDBX(object: DBSHARINGGetMetadataArgs) -> DBXSharingGetMetadataArgs {
    DBXSharingGetMetadataArgs(sharedFolderId: object.sharedFolderId, actions: object.actions?.compactMap { mapDBSHARINGFolderActionToDBX(object: $0) })
}

func mapDBSHARINGSharedLinkErrorToDBXOptional(object: DBSHARINGSharedLinkError?) -> DBXSharingSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkErrorToDBX(object: object)
}

func mapDBSHARINGSharedLinkErrorToDBX(object: DBSHARINGSharedLinkError) -> DBXSharingSharedLinkError {
    if object.isSharedLinkNotFound() {
        return DBXSharingSharedLinkErrorSharedLinkNotFound()
    }
    if object.isSharedLinkAccessDenied() {
        return DBXSharingSharedLinkErrorSharedLinkAccessDenied()
    }
    if object.isUnsupportedLinkType() {
        return DBXSharingSharedLinkErrorUnsupportedLinkType()
    }
    if object.isOther() {
        return DBXSharingSharedLinkErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGGetSharedLinkFileErrorToDBXOptional(object: DBSHARINGGetSharedLinkFileError?) -> DBXSharingGetSharedLinkFileError? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetSharedLinkFileErrorToDBX(object: object)
}

func mapDBSHARINGGetSharedLinkFileErrorToDBX(object: DBSHARINGGetSharedLinkFileError) -> DBXSharingGetSharedLinkFileError {
    if object.isSharedLinkNotFound() {
        return DBXSharingGetSharedLinkFileErrorSharedLinkNotFound()
    }
    if object.isSharedLinkAccessDenied() {
        return DBXSharingGetSharedLinkFileErrorSharedLinkAccessDenied()
    }
    if object.isUnsupportedLinkType() {
        return DBXSharingGetSharedLinkFileErrorUnsupportedLinkType()
    }
    if object.isOther() {
        return DBXSharingGetSharedLinkFileErrorOther()
    }
    if object.isSharedLinkIsDirectory() {
        return DBXSharingGetSharedLinkFileErrorSharedLinkIsDirectory()
    }
    fatalError("codegen error")
}

func mapDBSHARINGGetSharedLinkMetadataArgToDBXOptional(object: DBSHARINGGetSharedLinkMetadataArg?) -> DBXSharingGetSharedLinkMetadataArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetSharedLinkMetadataArgToDBX(object: object)
}

func mapDBSHARINGGetSharedLinkMetadataArgToDBX(object: DBSHARINGGetSharedLinkMetadataArg) -> DBXSharingGetSharedLinkMetadataArg {
    DBXSharingGetSharedLinkMetadataArg(url: object.url, path: object.path, linkPassword: object.linkPassword)
}

func mapDBSHARINGGetSharedLinksArgToDBXOptional(object: DBSHARINGGetSharedLinksArg?) -> DBXSharingGetSharedLinksArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetSharedLinksArgToDBX(object: object)
}

func mapDBSHARINGGetSharedLinksArgToDBX(object: DBSHARINGGetSharedLinksArg) -> DBXSharingGetSharedLinksArg {
    DBXSharingGetSharedLinksArg(path: object.path)
}

func mapDBSHARINGGetSharedLinksErrorToDBXOptional(object: DBSHARINGGetSharedLinksError?) -> DBXSharingGetSharedLinksError? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetSharedLinksErrorToDBX(object: object)
}

func mapDBSHARINGGetSharedLinksErrorToDBX(object: DBSHARINGGetSharedLinksError) -> DBXSharingGetSharedLinksError {
    if object.isPath() {
        let path = object.path
        return DBXSharingGetSharedLinksError.factory(swift: .path(path))
    }
    if object.isOther() {
        return DBXSharingGetSharedLinksErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGGetSharedLinksResultToDBXOptional(object: DBSHARINGGetSharedLinksResult?) -> DBXSharingGetSharedLinksResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGGetSharedLinksResultToDBX(object: object)
}

func mapDBSHARINGGetSharedLinksResultToDBX(object: DBSHARINGGetSharedLinksResult) -> DBXSharingGetSharedLinksResult {
    DBXSharingGetSharedLinksResult(links: object.links.compactMap { mapDBSHARINGLinkMetadataToDBX(object: $0) })
}

func mapDBSHARINGGroupInfoToDBXOptional(object: DBSHARINGGroupInfo?) -> DBXSharingGroupInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGGroupInfoToDBX(object: object)
}

func mapDBSHARINGGroupInfoToDBX(object: DBSHARINGGroupInfo) -> DBXSharingGroupInfo {
    DBXSharingGroupInfo(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBTEAMCOMMONGroupManagementTypeToDBX(object: object.groupManagementType),
        groupType: mapDBTEAMCOMMONGroupTypeToDBX(object: object.groupType),
        isMember: object.isMember,
        isOwner: object.isOwner,
        sameTeam: object.sameTeam,
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount
    )
}

func mapDBSHARINGMembershipInfoToDBXOptional(object: DBSHARINGMembershipInfo?) -> DBXSharingMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGMembershipInfoToDBX(object: object)
}

func mapDBSHARINGMembershipInfoToDBX(object: DBSHARINGMembershipInfo) -> DBXSharingMembershipInfo {
    DBXSharingMembershipInfo(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        permissions: object.permissions?.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBSHARINGGroupMembershipInfoToDBXOptional(object: DBSHARINGGroupMembershipInfo?) -> DBXSharingGroupMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGGroupMembershipInfoToDBX(object: object)
}

func mapDBSHARINGGroupMembershipInfoToDBX(object: DBSHARINGGroupMembershipInfo) -> DBXSharingGroupMembershipInfo {
    DBXSharingGroupMembershipInfo(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        group: mapDBSHARINGGroupInfoToDBX(object: object.group),
        permissions: object.permissions?.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBSHARINGInsufficientPlanToDBXOptional(object: DBSHARINGInsufficientPlan?) -> DBXSharingInsufficientPlan? {
    guard let object = object else { return nil }
    return mapDBSHARINGInsufficientPlanToDBX(object: object)
}

func mapDBSHARINGInsufficientPlanToDBX(object: DBSHARINGInsufficientPlan) -> DBXSharingInsufficientPlan {
    DBXSharingInsufficientPlan(message: object.message, upsellUrl: object.upsellUrl)
}

func mapDBSHARINGInsufficientQuotaAmountsToDBXOptional(object: DBSHARINGInsufficientQuotaAmounts?) -> DBXSharingInsufficientQuotaAmounts? {
    guard let object = object else { return nil }
    return mapDBSHARINGInsufficientQuotaAmountsToDBX(object: object)
}

func mapDBSHARINGInsufficientQuotaAmountsToDBX(object: DBSHARINGInsufficientQuotaAmounts) -> DBXSharingInsufficientQuotaAmounts {
    DBXSharingInsufficientQuotaAmounts(spaceNeeded: object.spaceNeeded, spaceShortage: object.spaceShortage, spaceLeft: object.spaceLeft)
}

func mapDBSHARINGInviteeInfoToDBXOptional(object: DBSHARINGInviteeInfo?) -> DBXSharingInviteeInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGInviteeInfoToDBX(object: object)
}

func mapDBSHARINGInviteeInfoToDBX(object: DBSHARINGInviteeInfo) -> DBXSharingInviteeInfo {
    if object.isEmail() {
        let email = object.email
        return DBXSharingInviteeInfo.factory(swift: .email(email))
    }
    if object.isOther() {
        return DBXSharingInviteeInfoOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGInviteeMembershipInfoToDBXOptional(object: DBSHARINGInviteeMembershipInfo?) -> DBXSharingInviteeMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGInviteeMembershipInfoToDBX(object: object)
}

func mapDBSHARINGInviteeMembershipInfoToDBX(object: DBSHARINGInviteeMembershipInfo) -> DBXSharingInviteeMembershipInfo {
    DBXSharingInviteeMembershipInfo(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        invitee: mapDBSHARINGInviteeInfoToDBX(object: object.invitee),
        permissions: object.permissions?.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited,
        user: mapDBSHARINGUserInfoToDBXOptional(object: object.user)
    )
}

func mapDBSHARINGJobErrorToDBXOptional(object: DBSHARINGJobError?) -> DBXSharingJobError? {
    guard let object = object else { return nil }
    return mapDBSHARINGJobErrorToDBX(object: object)
}

func mapDBSHARINGJobErrorToDBX(object: DBSHARINGJobError) -> DBXSharingJobError {
    if object.isUnshareFolderError() {
        let unshareFolderError = mapDBSHARINGUnshareFolderErrorToDBX(object: object.unshareFolderError)
        return DBXSharingJobError.factory(swift: .unshareFolderError(unshareFolderError.swift))
    }
    if object.isRemoveFolderMemberError() {
        let removeFolderMemberError = mapDBSHARINGRemoveFolderMemberErrorToDBX(object: object.removeFolderMemberError)
        return DBXSharingJobError.factory(swift: .removeFolderMemberError(removeFolderMemberError.swift))
    }
    if object.isRelinquishFolderMembershipError() {
        let relinquishFolderMembershipError = mapDBSHARINGRelinquishFolderMembershipErrorToDBX(object: object.relinquishFolderMembershipError)
        return DBXSharingJobError.factory(swift: .relinquishFolderMembershipError(relinquishFolderMembershipError.swift))
    }
    if object.isOther() {
        return DBXSharingJobErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGJobStatusToDBXOptional(object: DBSHARINGJobStatus?) -> DBXSharingJobStatus? {
    guard let object = object else { return nil }
    return mapDBSHARINGJobStatusToDBX(object: object)
}

func mapDBSHARINGJobStatusToDBX(object: DBSHARINGJobStatus) -> DBXSharingJobStatus {
    if object.isInProgress() {
        return DBXSharingJobStatusInProgress()
    }
    if object.isComplete() {
        return DBXSharingJobStatusComplete()
    }
    if object.isFailed() {
        let failed = mapDBSHARINGJobErrorToDBX(object: object.failed)
        return DBXSharingJobStatus.factory(swift: .failed(failed.swift))
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkAccessLevelToDBXOptional(object: DBSHARINGLinkAccessLevel?) -> DBXSharingLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkAccessLevelToDBX(object: object)
}

func mapDBSHARINGLinkAccessLevelToDBX(object: DBSHARINGLinkAccessLevel) -> DBXSharingLinkAccessLevel {
    if object.isViewer() {
        return DBXSharingLinkAccessLevelViewer()
    }
    if object.isEditor() {
        return DBXSharingLinkAccessLevelEditor()
    }
    if object.isOther() {
        return DBXSharingLinkAccessLevelOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkActionToDBXOptional(object: DBSHARINGLinkAction?) -> DBXSharingLinkAction? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkActionToDBX(object: object)
}

func mapDBSHARINGLinkActionToDBX(object: DBSHARINGLinkAction) -> DBXSharingLinkAction {
    if object.isChangeAccessLevel() {
        return DBXSharingLinkActionChangeAccessLevel()
    }
    if object.isChangeAudience() {
        return DBXSharingLinkActionChangeAudience()
    }
    if object.isRemoveExpiry() {
        return DBXSharingLinkActionRemoveExpiry()
    }
    if object.isRemovePassword() {
        return DBXSharingLinkActionRemovePassword()
    }
    if object.isSetExpiry() {
        return DBXSharingLinkActionSetExpiry()
    }
    if object.isSetPassword() {
        return DBXSharingLinkActionSetPassword()
    }
    if object.isOther() {
        return DBXSharingLinkActionOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkAudienceToDBXOptional(object: DBSHARINGLinkAudience?) -> DBXSharingLinkAudience? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkAudienceToDBX(object: object)
}

func mapDBSHARINGLinkAudienceToDBX(object: DBSHARINGLinkAudience) -> DBXSharingLinkAudience {
    if object.isPublic() {
        return DBXSharingLinkAudiencePublic_()
    }
    if object.isTeam() {
        return DBXSharingLinkAudienceTeam()
    }
    if object.isNoOne() {
        return DBXSharingLinkAudienceNoOne()
    }
    if object.isPassword() {
        return DBXSharingLinkAudiencePassword()
    }
    if object.isMembers() {
        return DBXSharingLinkAudienceMembers()
    }
    if object.isOther() {
        return DBXSharingLinkAudienceOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGVisibilityPolicyDisallowedReasonToDBXOptional(object: DBSHARINGVisibilityPolicyDisallowedReason?)
    -> DBXSharingVisibilityPolicyDisallowedReason? {
    guard let object = object else { return nil }
    return mapDBSHARINGVisibilityPolicyDisallowedReasonToDBX(object: object)
}

func mapDBSHARINGVisibilityPolicyDisallowedReasonToDBX(object: DBSHARINGVisibilityPolicyDisallowedReason) -> DBXSharingVisibilityPolicyDisallowedReason {
    if object.isDeleteAndRecreate() {
        return DBXSharingVisibilityPolicyDisallowedReasonDeleteAndRecreate()
    }
    if object.isRestrictedBySharedFolder() {
        return DBXSharingVisibilityPolicyDisallowedReasonRestrictedBySharedFolder()
    }
    if object.isRestrictedByTeam() {
        return DBXSharingVisibilityPolicyDisallowedReasonRestrictedByTeam()
    }
    if object.isUserNotOnTeam() {
        return DBXSharingVisibilityPolicyDisallowedReasonUserNotOnTeam()
    }
    if object.isUserAccountType() {
        return DBXSharingVisibilityPolicyDisallowedReasonUserAccountType()
    }
    if object.isPermissionDenied() {
        return DBXSharingVisibilityPolicyDisallowedReasonPermissionDenied()
    }
    if object.isOther() {
        return DBXSharingVisibilityPolicyDisallowedReasonOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkAudienceDisallowedReasonToDBXOptional(object: DBSHARINGLinkAudienceDisallowedReason?) -> DBXSharingLinkAudienceDisallowedReason? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkAudienceDisallowedReasonToDBX(object: object)
}

func mapDBSHARINGLinkAudienceDisallowedReasonToDBX(object: DBSHARINGLinkAudienceDisallowedReason) -> DBXSharingLinkAudienceDisallowedReason {
    if object.isDeleteAndRecreate() {
        return DBXSharingLinkAudienceDisallowedReasonDeleteAndRecreate()
    }
    if object.isRestrictedBySharedFolder() {
        return DBXSharingLinkAudienceDisallowedReasonRestrictedBySharedFolder()
    }
    if object.isRestrictedByTeam() {
        return DBXSharingLinkAudienceDisallowedReasonRestrictedByTeam()
    }
    if object.isUserNotOnTeam() {
        return DBXSharingLinkAudienceDisallowedReasonUserNotOnTeam()
    }
    if object.isUserAccountType() {
        return DBXSharingLinkAudienceDisallowedReasonUserAccountType()
    }
    if object.isPermissionDenied() {
        return DBXSharingLinkAudienceDisallowedReasonPermissionDenied()
    }
    if object.isOther() {
        return DBXSharingLinkAudienceDisallowedReasonOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkAudienceOptionToDBXOptional(object: DBSHARINGLinkAudienceOption?) -> DBXSharingLinkAudienceOption? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkAudienceOptionToDBX(object: object)
}

func mapDBSHARINGLinkAudienceOptionToDBX(object: DBSHARINGLinkAudienceOption) -> DBXSharingLinkAudienceOption {
    DBXSharingLinkAudienceOption(
        audience: mapDBSHARINGLinkAudienceToDBX(object: object.audience),
        allowed: object.allowed,
        disallowedReason: mapDBSHARINGLinkAudienceDisallowedReasonToDBXOptional(object: object.disallowedReason)
    )
}

func mapDBSHARINGLinkExpiryToDBXOptional(object: DBSHARINGLinkExpiry?) -> DBXSharingLinkExpiry? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkExpiryToDBX(object: object)
}

func mapDBSHARINGLinkExpiryToDBX(object: DBSHARINGLinkExpiry) -> DBXSharingLinkExpiry {
    if object.isRemove() {
        return DBXSharingLinkExpiryRemoveExpiry()
    }
    if object.isSetExpiry() {
        let setExpiry = object.setExpiry
        return DBXSharingLinkExpiry.factory(swift: .setExpiry(setExpiry))
    }
    if object.isOther() {
        return DBXSharingLinkExpiryOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkPasswordToDBXOptional(object: DBSHARINGLinkPassword?) -> DBXSharingLinkPassword? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkPasswordToDBX(object: object)
}

func mapDBSHARINGLinkPasswordToDBX(object: DBSHARINGLinkPassword) -> DBXSharingLinkPassword {
    if object.isRemove() {
        return DBXSharingLinkPasswordRemovePassword()
    }
    if object.isSetPassword() {
        let setPassword = object.setPassword
        return DBXSharingLinkPassword.factory(swift: .setPassword(setPassword))
    }
    if object.isOther() {
        return DBXSharingLinkPasswordOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGLinkPermissionToDBXOptional(object: DBSHARINGLinkPermission?) -> DBXSharingLinkPermission? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkPermissionToDBX(object: object)
}

func mapDBSHARINGLinkPermissionToDBX(object: DBSHARINGLinkPermission) -> DBXSharingLinkPermission {
    DBXSharingLinkPermission(
        action: mapDBSHARINGLinkActionToDBX(object: object.action),
        allow: object.allow,
        reason: mapDBSHARINGPermissionDeniedReasonToDBXOptional(object: object.reason)
    )
}

func mapDBSHARINGLinkPermissionsToDBXOptional(object: DBSHARINGLinkPermissions?) -> DBXSharingLinkPermissions? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkPermissionsToDBX(object: object)
}

func mapDBSHARINGLinkPermissionsToDBX(object: DBSHARINGLinkPermissions) -> DBXSharingLinkPermissions {
    DBXSharingLinkPermissions(
        canRevoke: object.canRevoke,
        visibilityPolicies: object.visibilityPolicies.compactMap { mapDBSHARINGVisibilityPolicyToDBX(object: $0) },
        canSetExpiry: object.canSetExpiry,
        canRemoveExpiry: object.canRemoveExpiry,
        allowDownload: object.allowDownload,
        canAllowDownload: object.canAllowDownload,
        canDisallowDownload: object.canDisallowDownload,
        allowComments: object.allowComments,
        teamRestrictsComments: object.teamRestrictsComments,
        resolvedVisibility: mapDBSHARINGResolvedVisibilityToDBXOptional(object: object.resolvedVisibility),
        requestedVisibility: mapDBSHARINGRequestedVisibilityToDBXOptional(object: object.requestedVisibility),
        revokeFailureReason: mapDBSHARINGSharedLinkAccessFailureReasonToDBXOptional(object: object.revokeFailureReason),
        effectiveAudience: mapDBSHARINGLinkAudienceToDBXOptional(object: object.effectiveAudience),
        linkAccessLevel: mapDBSHARINGLinkAccessLevelToDBXOptional(object: object.linkAccessLevel),
        audienceOptions: object.audienceOptions?.compactMap { mapDBSHARINGLinkAudienceOptionToDBX(object: $0) },
        canSetPassword: object.canSetPassword,
        canRemovePassword: object.canRemovePassword,
        requirePassword: object.requirePassword,
        canUseExtendedSharingControls: object.canUseExtendedSharingControls
    )
}

func mapDBSHARINGLinkSettingsToDBXOptional(object: DBSHARINGLinkSettings?) -> DBXSharingLinkSettings? {
    guard let object = object else { return nil }
    return mapDBSHARINGLinkSettingsToDBX(object: object)
}

func mapDBSHARINGLinkSettingsToDBX(object: DBSHARINGLinkSettings) -> DBXSharingLinkSettings {
    DBXSharingLinkSettings(
        accessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessLevel),
        audience: mapDBSHARINGLinkAudienceToDBXOptional(object: object.audience),
        expiry: mapDBSHARINGLinkExpiryToDBXOptional(object: object.expiry),
        password: mapDBSHARINGLinkPasswordToDBXOptional(object: object.password)
    )
}

func mapDBSHARINGListFileMembersArgToDBXOptional(object: DBSHARINGListFileMembersArg?) -> DBXSharingListFileMembersArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersArgToDBX(object: object)
}

func mapDBSHARINGListFileMembersArgToDBX(object: DBSHARINGListFileMembersArg) -> DBXSharingListFileMembersArg {
    DBXSharingListFileMembersArg(
        file: object.file,
        actions: object.actions?.compactMap { mapDBSHARINGMemberActionToDBX(object: $0) },
        includeInherited: object.includeInherited,
        limit: object.limit
    )
}

func mapDBSHARINGListFileMembersBatchArgToDBXOptional(object: DBSHARINGListFileMembersBatchArg?) -> DBXSharingListFileMembersBatchArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersBatchArgToDBX(object: object)
}

func mapDBSHARINGListFileMembersBatchArgToDBX(object: DBSHARINGListFileMembersBatchArg) -> DBXSharingListFileMembersBatchArg {
    DBXSharingListFileMembersBatchArg(files: object.files, limit: object.limit)
}

func mapDBSHARINGListFileMembersBatchResultToDBXOptional(object: DBSHARINGListFileMembersBatchResult?) -> DBXSharingListFileMembersBatchResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersBatchResultToDBX(object: object)
}

func mapDBSHARINGListFileMembersBatchResultToDBX(object: DBSHARINGListFileMembersBatchResult) -> DBXSharingListFileMembersBatchResult {
    DBXSharingListFileMembersBatchResult(file: object.file, result: mapDBSHARINGListFileMembersIndividualResultToDBX(object: object.result))
}

func mapDBSHARINGListFileMembersContinueArgToDBXOptional(object: DBSHARINGListFileMembersContinueArg?) -> DBXSharingListFileMembersContinueArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersContinueArgToDBX(object: object)
}

func mapDBSHARINGListFileMembersContinueArgToDBX(object: DBSHARINGListFileMembersContinueArg) -> DBXSharingListFileMembersContinueArg {
    DBXSharingListFileMembersContinueArg(cursor: object.cursor)
}

func mapDBSHARINGListFileMembersContinueErrorToDBXOptional(object: DBSHARINGListFileMembersContinueError?) -> DBXSharingListFileMembersContinueError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersContinueErrorToDBX(object: object)
}

func mapDBSHARINGListFileMembersContinueErrorToDBX(object: DBSHARINGListFileMembersContinueError) -> DBXSharingListFileMembersContinueError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingListFileMembersContinueError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingListFileMembersContinueError.factory(swift: .accessError(accessError.swift))
    }
    if object.isInvalidCursor() {
        return DBXSharingListFileMembersContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXSharingListFileMembersContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFileMembersCountResultToDBXOptional(object: DBSHARINGListFileMembersCountResult?) -> DBXSharingListFileMembersCountResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersCountResultToDBX(object: object)
}

func mapDBSHARINGListFileMembersCountResultToDBX(object: DBSHARINGListFileMembersCountResult) -> DBXSharingListFileMembersCountResult {
    DBXSharingListFileMembersCountResult(members: mapDBSHARINGSharedFileMembersToDBX(object: object.members), memberCount: object.memberCount)
}

func mapDBSHARINGListFileMembersErrorToDBXOptional(object: DBSHARINGListFileMembersError?) -> DBXSharingListFileMembersError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersErrorToDBX(object: object)
}

func mapDBSHARINGListFileMembersErrorToDBX(object: DBSHARINGListFileMembersError) -> DBXSharingListFileMembersError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingListFileMembersError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingListFileMembersError.factory(swift: .accessError(accessError.swift))
    }
    if object.isOther() {
        return DBXSharingListFileMembersErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFileMembersIndividualResultToDBXOptional(object: DBSHARINGListFileMembersIndividualResult?) -> DBXSharingListFileMembersIndividualResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFileMembersIndividualResultToDBX(object: object)
}

func mapDBSHARINGListFileMembersIndividualResultToDBX(object: DBSHARINGListFileMembersIndividualResult) -> DBXSharingListFileMembersIndividualResult {
    if object.isResult() {
        let result = mapDBSHARINGListFileMembersCountResultToDBX(object: object.result)
        return DBXSharingListFileMembersIndividualResult.factory(swift: .result(result.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingListFileMembersIndividualResult.factory(swift: .accessError(accessError.swift))
    }
    if object.isOther() {
        return DBXSharingListFileMembersIndividualResultOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFilesArgToDBXOptional(object: DBSHARINGListFilesArg?) -> DBXSharingListFilesArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFilesArgToDBX(object: object)
}

func mapDBSHARINGListFilesArgToDBX(object: DBSHARINGListFilesArg) -> DBXSharingListFilesArg {
    DBXSharingListFilesArg(limit: object.limit, actions: object.actions?.compactMap { mapDBSHARINGFileActionToDBX(object: $0) })
}

func mapDBSHARINGListFilesContinueArgToDBXOptional(object: DBSHARINGListFilesContinueArg?) -> DBXSharingListFilesContinueArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFilesContinueArgToDBX(object: object)
}

func mapDBSHARINGListFilesContinueArgToDBX(object: DBSHARINGListFilesContinueArg) -> DBXSharingListFilesContinueArg {
    DBXSharingListFilesContinueArg(cursor: object.cursor)
}

func mapDBSHARINGListFilesContinueErrorToDBXOptional(object: DBSHARINGListFilesContinueError?) -> DBXSharingListFilesContinueError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFilesContinueErrorToDBX(object: object)
}

func mapDBSHARINGListFilesContinueErrorToDBX(object: DBSHARINGListFilesContinueError) -> DBXSharingListFilesContinueError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingListFilesContinueError.factory(swift: .userError(userError.swift))
    }
    if object.isInvalidCursor() {
        return DBXSharingListFilesContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXSharingListFilesContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFilesResultToDBXOptional(object: DBSHARINGListFilesResult?) -> DBXSharingListFilesResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFilesResultToDBX(object: object)
}

func mapDBSHARINGListFilesResultToDBX(object: DBSHARINGListFilesResult) -> DBXSharingListFilesResult {
    DBXSharingListFilesResult(entries: object.entries.compactMap { mapDBSHARINGSharedFileMetadataToDBX(object: $0) }, cursor: object.cursor)
}

func mapDBSHARINGListFolderMembersCursorArgToDBXOptional(object: DBSHARINGListFolderMembersCursorArg?) -> DBXSharingListFolderMembersCursorArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFolderMembersCursorArgToDBX(object: object)
}

func mapDBSHARINGListFolderMembersCursorArgToDBX(object: DBSHARINGListFolderMembersCursorArg) -> DBXSharingListFolderMembersCursorArg {
    DBXSharingListFolderMembersCursorArg(actions: object.actions?.compactMap { mapDBSHARINGMemberActionToDBX(object: $0) }, limit: object.limit)
}

func mapDBSHARINGListFolderMembersArgsToDBXOptional(object: DBSHARINGListFolderMembersArgs?) -> DBXSharingListFolderMembersArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFolderMembersArgsToDBX(object: object)
}

func mapDBSHARINGListFolderMembersArgsToDBX(object: DBSHARINGListFolderMembersArgs) -> DBXSharingListFolderMembersArgs {
    DBXSharingListFolderMembersArgs(
        sharedFolderId: object.sharedFolderId,
        actions: object.actions?.compactMap { mapDBSHARINGMemberActionToDBX(object: $0) },
        limit: object.limit
    )
}

func mapDBSHARINGListFolderMembersContinueArgToDBXOptional(object: DBSHARINGListFolderMembersContinueArg?) -> DBXSharingListFolderMembersContinueArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFolderMembersContinueArgToDBX(object: object)
}

func mapDBSHARINGListFolderMembersContinueArgToDBX(object: DBSHARINGListFolderMembersContinueArg) -> DBXSharingListFolderMembersContinueArg {
    DBXSharingListFolderMembersContinueArg(cursor: object.cursor)
}

func mapDBSHARINGListFolderMembersContinueErrorToDBXOptional(object: DBSHARINGListFolderMembersContinueError?) -> DBXSharingListFolderMembersContinueError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFolderMembersContinueErrorToDBX(object: object)
}

func mapDBSHARINGListFolderMembersContinueErrorToDBX(object: DBSHARINGListFolderMembersContinueError) -> DBXSharingListFolderMembersContinueError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingListFolderMembersContinueError.factory(swift: .accessError(accessError.swift))
    }
    if object.isInvalidCursor() {
        return DBXSharingListFolderMembersContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXSharingListFolderMembersContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFoldersArgsToDBXOptional(object: DBSHARINGListFoldersArgs?) -> DBXSharingListFoldersArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFoldersArgsToDBX(object: object)
}

func mapDBSHARINGListFoldersArgsToDBX(object: DBSHARINGListFoldersArgs) -> DBXSharingListFoldersArgs {
    DBXSharingListFoldersArgs(limit: object.limit, actions: object.actions?.compactMap { mapDBSHARINGFolderActionToDBX(object: $0) })
}

func mapDBSHARINGListFoldersContinueArgToDBXOptional(object: DBSHARINGListFoldersContinueArg?) -> DBXSharingListFoldersContinueArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFoldersContinueArgToDBX(object: object)
}

func mapDBSHARINGListFoldersContinueArgToDBX(object: DBSHARINGListFoldersContinueArg) -> DBXSharingListFoldersContinueArg {
    DBXSharingListFoldersContinueArg(cursor: object.cursor)
}

func mapDBSHARINGListFoldersContinueErrorToDBXOptional(object: DBSHARINGListFoldersContinueError?) -> DBXSharingListFoldersContinueError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFoldersContinueErrorToDBX(object: object)
}

func mapDBSHARINGListFoldersContinueErrorToDBX(object: DBSHARINGListFoldersContinueError) -> DBXSharingListFoldersContinueError {
    if object.isInvalidCursor() {
        return DBXSharingListFoldersContinueErrorInvalidCursor()
    }
    if object.isOther() {
        return DBXSharingListFoldersContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListFoldersResultToDBXOptional(object: DBSHARINGListFoldersResult?) -> DBXSharingListFoldersResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListFoldersResultToDBX(object: object)
}

func mapDBSHARINGListFoldersResultToDBX(object: DBSHARINGListFoldersResult) -> DBXSharingListFoldersResult {
    DBXSharingListFoldersResult(entries: object.entries.compactMap { mapDBSHARINGSharedFolderMetadataToDBX(object: $0) }, cursor: object.cursor)
}

func mapDBSHARINGListSharedLinksArgToDBXOptional(object: DBSHARINGListSharedLinksArg?) -> DBXSharingListSharedLinksArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGListSharedLinksArgToDBX(object: object)
}

func mapDBSHARINGListSharedLinksArgToDBX(object: DBSHARINGListSharedLinksArg) -> DBXSharingListSharedLinksArg {
    DBXSharingListSharedLinksArg(path: object.path, cursor: object.cursor, directOnly: object.directOnly)
}

func mapDBSHARINGListSharedLinksErrorToDBXOptional(object: DBSHARINGListSharedLinksError?) -> DBXSharingListSharedLinksError? {
    guard let object = object else { return nil }
    return mapDBSHARINGListSharedLinksErrorToDBX(object: object)
}

func mapDBSHARINGListSharedLinksErrorToDBX(object: DBSHARINGListSharedLinksError) -> DBXSharingListSharedLinksError {
    if object.isPath() {
        let path = mapDBFILESLookupErrorToDBX(object: object.path)
        return DBXSharingListSharedLinksError.factory(swift: .path(path.swift))
    }
    if object.isReset() {
        return DBXSharingListSharedLinksErrorReset()
    }
    if object.isOther() {
        return DBXSharingListSharedLinksErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGListSharedLinksResultToDBXOptional(object: DBSHARINGListSharedLinksResult?) -> DBXSharingListSharedLinksResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGListSharedLinksResultToDBX(object: object)
}

func mapDBSHARINGListSharedLinksResultToDBX(object: DBSHARINGListSharedLinksResult) -> DBXSharingListSharedLinksResult {
    DBXSharingListSharedLinksResult(
        links: object.links.compactMap { mapDBSHARINGSharedLinkMetadataToDBX(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBSHARINGMemberAccessLevelResultToDBXOptional(object: DBSHARINGMemberAccessLevelResult?) -> DBXSharingMemberAccessLevelResult? {
    guard let object = object else { return nil }
    return mapDBSHARINGMemberAccessLevelResultToDBX(object: object)
}

func mapDBSHARINGMemberAccessLevelResultToDBX(object: DBSHARINGMemberAccessLevelResult) -> DBXSharingMemberAccessLevelResult {
    DBXSharingMemberAccessLevelResult(
        accessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessLevel),
        warning: object.warning,
        accessDetails: object.accessDetails?.compactMap { mapDBSHARINGParentFolderAccessInfoToDBX(object: $0) }
    )
}

func mapDBSHARINGMemberActionToDBXOptional(object: DBSHARINGMemberAction?) -> DBXSharingMemberAction? {
    guard let object = object else { return nil }
    return mapDBSHARINGMemberActionToDBX(object: object)
}

func mapDBSHARINGMemberActionToDBX(object: DBSHARINGMemberAction) -> DBXSharingMemberAction {
    if object.isLeaveACopy() {
        return DBXSharingMemberActionLeaveACopy()
    }
    if object.isMakeEditor() {
        return DBXSharingMemberActionMakeEditor()
    }
    if object.isMakeOwner() {
        return DBXSharingMemberActionMakeOwner()
    }
    if object.isMakeViewer() {
        return DBXSharingMemberActionMakeViewer()
    }
    if object.isMakeViewerNoComment() {
        return DBXSharingMemberActionMakeViewerNoComment()
    }
    if object.isRemove() {
        return DBXSharingMemberActionRemove()
    }
    if object.isOther() {
        return DBXSharingMemberActionOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGMemberPermissionToDBXOptional(object: DBSHARINGMemberPermission?) -> DBXSharingMemberPermission? {
    guard let object = object else { return nil }
    return mapDBSHARINGMemberPermissionToDBX(object: object)
}

func mapDBSHARINGMemberPermissionToDBX(object: DBSHARINGMemberPermission) -> DBXSharingMemberPermission {
    DBXSharingMemberPermission(
        action: mapDBSHARINGMemberActionToDBX(object: object.action),
        allow: object.allow,
        reason: mapDBSHARINGPermissionDeniedReasonToDBXOptional(object: object.reason)
    )
}

func mapDBSHARINGMemberPolicyToDBXOptional(object: DBSHARINGMemberPolicy?) -> DBXSharingMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGMemberPolicyToDBX(object: object)
}

func mapDBSHARINGMemberPolicyToDBX(object: DBSHARINGMemberPolicy) -> DBXSharingMemberPolicy {
    if object.isTeam() {
        return DBXSharingMemberPolicyTeam()
    }
    if object.isAnyone() {
        return DBXSharingMemberPolicyAnyone()
    }
    if object.isOther() {
        return DBXSharingMemberPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGMemberSelectorToDBXOptional(object: DBSHARINGMemberSelector?) -> DBXSharingMemberSelector? {
    guard let object = object else { return nil }
    return mapDBSHARINGMemberSelectorToDBX(object: object)
}

func mapDBSHARINGMemberSelectorToDBX(object: DBSHARINGMemberSelector) -> DBXSharingMemberSelector {
    if object.isDropboxId() {
        let dropboxId = object.dropboxId
        return DBXSharingMemberSelector.factory(swift: .dropboxId(dropboxId))
    }
    if object.isEmail() {
        let email = object.email
        return DBXSharingMemberSelector.factory(swift: .email(email))
    }
    if object.isOther() {
        return DBXSharingMemberSelectorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGModifySharedLinkSettingsArgsToDBXOptional(object: DBSHARINGModifySharedLinkSettingsArgs?) -> DBXSharingModifySharedLinkSettingsArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGModifySharedLinkSettingsArgsToDBX(object: object)
}

func mapDBSHARINGModifySharedLinkSettingsArgsToDBX(object: DBSHARINGModifySharedLinkSettingsArgs) -> DBXSharingModifySharedLinkSettingsArgs {
    DBXSharingModifySharedLinkSettingsArgs(
        url: object.url,
        settings: mapDBSHARINGSharedLinkSettingsToDBX(object: object.settings),
        removeExpiration: object.removeExpiration
    )
}

func mapDBSHARINGModifySharedLinkSettingsErrorToDBXOptional(object: DBSHARINGModifySharedLinkSettingsError?) -> DBXSharingModifySharedLinkSettingsError? {
    guard let object = object else { return nil }
    return mapDBSHARINGModifySharedLinkSettingsErrorToDBX(object: object)
}

func mapDBSHARINGModifySharedLinkSettingsErrorToDBX(object: DBSHARINGModifySharedLinkSettingsError) -> DBXSharingModifySharedLinkSettingsError {
    if object.isSharedLinkNotFound() {
        return DBXSharingModifySharedLinkSettingsErrorSharedLinkNotFound()
    }
    if object.isSharedLinkAccessDenied() {
        return DBXSharingModifySharedLinkSettingsErrorSharedLinkAccessDenied()
    }
    if object.isUnsupportedLinkType() {
        return DBXSharingModifySharedLinkSettingsErrorUnsupportedLinkType()
    }
    if object.isOther() {
        return DBXSharingModifySharedLinkSettingsErrorOther()
    }
    if object.isSettingsError() {
        let settingsError = mapDBSHARINGSharedLinkSettingsErrorToDBX(object: object.settingsError)
        return DBXSharingModifySharedLinkSettingsError.factory(swift: .settingsError(settingsError.swift))
    }
    if object.isEmailNotVerified() {
        return DBXSharingModifySharedLinkSettingsErrorEmailNotVerified()
    }
    fatalError("codegen error")
}

func mapDBSHARINGMountFolderArgToDBXOptional(object: DBSHARINGMountFolderArg?) -> DBXSharingMountFolderArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGMountFolderArgToDBX(object: object)
}

func mapDBSHARINGMountFolderArgToDBX(object: DBSHARINGMountFolderArg) -> DBXSharingMountFolderArg {
    DBXSharingMountFolderArg(sharedFolderId: object.sharedFolderId)
}

func mapDBSHARINGMountFolderErrorToDBXOptional(object: DBSHARINGMountFolderError?) -> DBXSharingMountFolderError? {
    guard let object = object else { return nil }
    return mapDBSHARINGMountFolderErrorToDBX(object: object)
}

func mapDBSHARINGMountFolderErrorToDBX(object: DBSHARINGMountFolderError) -> DBXSharingMountFolderError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingMountFolderError.factory(swift: .accessError(accessError.swift))
    }
    if object.isInsideSharedFolder() {
        return DBXSharingMountFolderErrorInsideSharedFolder()
    }
    if object.isInsufficientQuota() {
        let insufficientQuota = mapDBSHARINGInsufficientQuotaAmountsToDBX(object: object.insufficientQuota)
        return DBXSharingMountFolderError.factory(swift: .insufficientQuota(insufficientQuota.swift))
    }
    if object.isAlreadyMounted() {
        return DBXSharingMountFolderErrorAlreadyMounted()
    }
    if object.isNoPermission() {
        return DBXSharingMountFolderErrorNoPermission()
    }
    if object.isNotMountable() {
        return DBXSharingMountFolderErrorNotMountable()
    }
    if object.isOther() {
        return DBXSharingMountFolderErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGParentFolderAccessInfoToDBXOptional(object: DBSHARINGParentFolderAccessInfo?) -> DBXSharingParentFolderAccessInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGParentFolderAccessInfoToDBX(object: object)
}

func mapDBSHARINGParentFolderAccessInfoToDBX(object: DBSHARINGParentFolderAccessInfo) -> DBXSharingParentFolderAccessInfo {
    DBXSharingParentFolderAccessInfo(
        folderName: object.folderName,
        sharedFolderId: object.sharedFolderId,
        permissions: object.permissions.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        path: object.path
    )
}

func mapDBSHARINGPathLinkMetadataToDBXOptional(object: DBSHARINGPathLinkMetadata?) -> DBXSharingPathLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGPathLinkMetadataToDBX(object: object)
}

func mapDBSHARINGPathLinkMetadataToDBX(object: DBSHARINGPathLinkMetadata) -> DBXSharingPathLinkMetadata {
    DBXSharingPathLinkMetadata(url: object.url, visibility: mapDBSHARINGVisibilityToDBX(object: object.visibility), path: object.path, expires: object.expires)
}

func mapDBSHARINGPendingUploadModeToDBXOptional(object: DBSHARINGPendingUploadMode?) -> DBXSharingPendingUploadMode? {
    guard let object = object else { return nil }
    return mapDBSHARINGPendingUploadModeToDBX(object: object)
}

func mapDBSHARINGPendingUploadModeToDBX(object: DBSHARINGPendingUploadMode) -> DBXSharingPendingUploadMode {
    if object.isFile() {
        return DBXSharingPendingUploadModeFile()
    }
    if object.isFolder() {
        return DBXSharingPendingUploadModeFolder()
    }
    fatalError("codegen error")
}

func mapDBSHARINGPermissionDeniedReasonToDBXOptional(object: DBSHARINGPermissionDeniedReason?) -> DBXSharingPermissionDeniedReason? {
    guard let object = object else { return nil }
    return mapDBSHARINGPermissionDeniedReasonToDBX(object: object)
}

func mapDBSHARINGPermissionDeniedReasonToDBX(object: DBSHARINGPermissionDeniedReason) -> DBXSharingPermissionDeniedReason {
    if object.isUserNotSameTeamAsOwner() {
        return DBXSharingPermissionDeniedReasonUserNotSameTeamAsOwner()
    }
    if object.isUserNotAllowedByOwner() {
        return DBXSharingPermissionDeniedReasonUserNotAllowedByOwner()
    }
    if object.isTargetIsIndirectMember() {
        return DBXSharingPermissionDeniedReasonTargetIsIndirectMember()
    }
    if object.isTargetIsOwner() {
        return DBXSharingPermissionDeniedReasonTargetIsOwner()
    }
    if object.isTargetIsSelf() {
        return DBXSharingPermissionDeniedReasonTargetIsSelf()
    }
    if object.isTargetNotActive() {
        return DBXSharingPermissionDeniedReasonTargetNotActive()
    }
    if object.isFolderIsLimitedTeamFolder() {
        return DBXSharingPermissionDeniedReasonFolderIsLimitedTeamFolder()
    }
    if object.isOwnerNotOnTeam() {
        return DBXSharingPermissionDeniedReasonOwnerNotOnTeam()
    }
    if object.isPermissionDenied() {
        return DBXSharingPermissionDeniedReasonPermissionDenied()
    }
    if object.isRestrictedByTeam() {
        return DBXSharingPermissionDeniedReasonRestrictedByTeam()
    }
    if object.isUserAccountType() {
        return DBXSharingPermissionDeniedReasonUserAccountType()
    }
    if object.isUserNotOnTeam() {
        return DBXSharingPermissionDeniedReasonUserNotOnTeam()
    }
    if object.isFolderIsInsideSharedFolder() {
        return DBXSharingPermissionDeniedReasonFolderIsInsideSharedFolder()
    }
    if object.isRestrictedByParentFolder() {
        return DBXSharingPermissionDeniedReasonRestrictedByParentFolder()
    }
    if object.isInsufficientPlan() {
        let insufficientPlan = mapDBSHARINGInsufficientPlanToDBX(object: object.insufficientPlan)
        return DBXSharingPermissionDeniedReason.factory(swift: .insufficientPlan(insufficientPlan.swift))
    }
    if object.isOther() {
        return DBXSharingPermissionDeniedReasonOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRelinquishFileMembershipArgToDBXOptional(object: DBSHARINGRelinquishFileMembershipArg?) -> DBXSharingRelinquishFileMembershipArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGRelinquishFileMembershipArgToDBX(object: object)
}

func mapDBSHARINGRelinquishFileMembershipArgToDBX(object: DBSHARINGRelinquishFileMembershipArg) -> DBXSharingRelinquishFileMembershipArg {
    DBXSharingRelinquishFileMembershipArg(file: object.file)
}

func mapDBSHARINGRelinquishFileMembershipErrorToDBXOptional(object: DBSHARINGRelinquishFileMembershipError?) -> DBXSharingRelinquishFileMembershipError? {
    guard let object = object else { return nil }
    return mapDBSHARINGRelinquishFileMembershipErrorToDBX(object: object)
}

func mapDBSHARINGRelinquishFileMembershipErrorToDBX(object: DBSHARINGRelinquishFileMembershipError) -> DBXSharingRelinquishFileMembershipError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingRelinquishFileMembershipError.factory(swift: .accessError(accessError.swift))
    }
    if object.isGroupAccess() {
        return DBXSharingRelinquishFileMembershipErrorGroupAccess()
    }
    if object.isNoPermission() {
        return DBXSharingRelinquishFileMembershipErrorNoPermission()
    }
    if object.isOther() {
        return DBXSharingRelinquishFileMembershipErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRelinquishFolderMembershipArgToDBXOptional(object: DBSHARINGRelinquishFolderMembershipArg?) -> DBXSharingRelinquishFolderMembershipArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGRelinquishFolderMembershipArgToDBX(object: object)
}

func mapDBSHARINGRelinquishFolderMembershipArgToDBX(object: DBSHARINGRelinquishFolderMembershipArg) -> DBXSharingRelinquishFolderMembershipArg {
    DBXSharingRelinquishFolderMembershipArg(sharedFolderId: object.sharedFolderId, leaveACopy: object.leaveACopy)
}

func mapDBSHARINGRelinquishFolderMembershipErrorToDBXOptional(object: DBSHARINGRelinquishFolderMembershipError?) -> DBXSharingRelinquishFolderMembershipError? {
    guard let object = object else { return nil }
    return mapDBSHARINGRelinquishFolderMembershipErrorToDBX(object: object)
}

func mapDBSHARINGRelinquishFolderMembershipErrorToDBX(object: DBSHARINGRelinquishFolderMembershipError) -> DBXSharingRelinquishFolderMembershipError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingRelinquishFolderMembershipError.factory(swift: .accessError(accessError.swift))
    }
    if object.isFolderOwner() {
        return DBXSharingRelinquishFolderMembershipErrorFolderOwner()
    }
    if object.isMounted() {
        return DBXSharingRelinquishFolderMembershipErrorMounted()
    }
    if object.isGroupAccess() {
        return DBXSharingRelinquishFolderMembershipErrorGroupAccess()
    }
    if object.isTeamFolder() {
        return DBXSharingRelinquishFolderMembershipErrorTeamFolder()
    }
    if object.isNoPermission() {
        return DBXSharingRelinquishFolderMembershipErrorNoPermission()
    }
    if object.isNoExplicitAccess() {
        return DBXSharingRelinquishFolderMembershipErrorNoExplicitAccess()
    }
    if object.isOther() {
        return DBXSharingRelinquishFolderMembershipErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRemoveFileMemberArgToDBXOptional(object: DBSHARINGRemoveFileMemberArg?) -> DBXSharingRemoveFileMemberArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGRemoveFileMemberArgToDBX(object: object)
}

func mapDBSHARINGRemoveFileMemberArgToDBX(object: DBSHARINGRemoveFileMemberArg) -> DBXSharingRemoveFileMemberArg {
    DBXSharingRemoveFileMemberArg(file: object.file, member: mapDBSHARINGMemberSelectorToDBX(object: object.member))
}

func mapDBSHARINGRemoveFileMemberErrorToDBXOptional(object: DBSHARINGRemoveFileMemberError?) -> DBXSharingRemoveFileMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGRemoveFileMemberErrorToDBX(object: object)
}

func mapDBSHARINGRemoveFileMemberErrorToDBX(object: DBSHARINGRemoveFileMemberError) -> DBXSharingRemoveFileMemberError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingRemoveFileMemberError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingRemoveFileMemberError.factory(swift: .accessError(accessError.swift))
    }
    if object.isNoExplicitAccess() {
        let noExplicitAccess = mapDBSHARINGMemberAccessLevelResultToDBX(object: object.noExplicitAccess)
        return DBXSharingRemoveFileMemberError.factory(swift: .noExplicitAccess(noExplicitAccess.swift))
    }
    if object.isOther() {
        return DBXSharingRemoveFileMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRemoveFolderMemberArgToDBXOptional(object: DBSHARINGRemoveFolderMemberArg?) -> DBXSharingRemoveFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGRemoveFolderMemberArgToDBX(object: object)
}

func mapDBSHARINGRemoveFolderMemberArgToDBX(object: DBSHARINGRemoveFolderMemberArg) -> DBXSharingRemoveFolderMemberArg {
    DBXSharingRemoveFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        leaveACopy: object.leaveACopy
    )
}

func mapDBSHARINGRemoveFolderMemberErrorToDBXOptional(object: DBSHARINGRemoveFolderMemberError?) -> DBXSharingRemoveFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGRemoveFolderMemberErrorToDBX(object: object)
}

func mapDBSHARINGRemoveFolderMemberErrorToDBX(object: DBSHARINGRemoveFolderMemberError) -> DBXSharingRemoveFolderMemberError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingRemoveFolderMemberError.factory(swift: .accessError(accessError.swift))
    }
    if object.isMemberError() {
        let memberError = mapDBSHARINGSharedFolderMemberErrorToDBX(object: object.memberError)
        return DBXSharingRemoveFolderMemberError.factory(swift: .memberError(memberError.swift))
    }
    if object.isFolderOwner() {
        return DBXSharingRemoveFolderMemberErrorFolderOwner()
    }
    if object.isGroupAccess() {
        return DBXSharingRemoveFolderMemberErrorGroupAccess()
    }
    if object.isTeamFolder() {
        return DBXSharingRemoveFolderMemberErrorTeamFolder()
    }
    if object.isNoPermission() {
        return DBXSharingRemoveFolderMemberErrorNoPermission()
    }
    if object.isTooManyFiles() {
        return DBXSharingRemoveFolderMemberErrorTooManyFiles()
    }
    if object.isOther() {
        return DBXSharingRemoveFolderMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRemoveMemberJobStatusToDBXOptional(object: DBSHARINGRemoveMemberJobStatus?) -> DBXSharingRemoveMemberJobStatus? {
    guard let object = object else { return nil }
    return mapDBSHARINGRemoveMemberJobStatusToDBX(object: object)
}

func mapDBSHARINGRemoveMemberJobStatusToDBX(object: DBSHARINGRemoveMemberJobStatus) -> DBXSharingRemoveMemberJobStatus {
    if object.isInProgress() {
        return DBXSharingRemoveMemberJobStatusInProgress()
    }
    if object.isComplete() {
        let complete = mapDBSHARINGMemberAccessLevelResultToDBX(object: object.complete)
        return DBXSharingRemoveMemberJobStatus.factory(swift: .complete(complete.swift))
    }
    if object.isFailed() {
        let failed = mapDBSHARINGRemoveFolderMemberErrorToDBX(object: object.failed)
        return DBXSharingRemoveMemberJobStatus.factory(swift: .failed(failed.swift))
    }
    fatalError("codegen error")
}

func mapDBSHARINGRequestedLinkAccessLevelToDBXOptional(object: DBSHARINGRequestedLinkAccessLevel?) -> DBXSharingRequestedLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBSHARINGRequestedLinkAccessLevelToDBX(object: object)
}

func mapDBSHARINGRequestedLinkAccessLevelToDBX(object: DBSHARINGRequestedLinkAccessLevel) -> DBXSharingRequestedLinkAccessLevel {
    if object.isViewer() {
        return DBXSharingRequestedLinkAccessLevelViewer()
    }
    if object.isEditor() {
        return DBXSharingRequestedLinkAccessLevelEditor()
    }
    if object.isMax() {
        return DBXSharingRequestedLinkAccessLevelMax()
    }
    if object.isDefault_() {
        return DBXSharingRequestedLinkAccessLevelDefault_()
    }
    if object.isOther() {
        return DBXSharingRequestedLinkAccessLevelOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGRevokeSharedLinkArgToDBXOptional(object: DBSHARINGRevokeSharedLinkArg?) -> DBXSharingRevokeSharedLinkArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGRevokeSharedLinkArgToDBX(object: object)
}

func mapDBSHARINGRevokeSharedLinkArgToDBX(object: DBSHARINGRevokeSharedLinkArg) -> DBXSharingRevokeSharedLinkArg {
    DBXSharingRevokeSharedLinkArg(url: object.url)
}

func mapDBSHARINGRevokeSharedLinkErrorToDBXOptional(object: DBSHARINGRevokeSharedLinkError?) -> DBXSharingRevokeSharedLinkError? {
    guard let object = object else { return nil }
    return mapDBSHARINGRevokeSharedLinkErrorToDBX(object: object)
}

func mapDBSHARINGRevokeSharedLinkErrorToDBX(object: DBSHARINGRevokeSharedLinkError) -> DBXSharingRevokeSharedLinkError {
    if object.isSharedLinkNotFound() {
        return DBXSharingRevokeSharedLinkErrorSharedLinkNotFound()
    }
    if object.isSharedLinkAccessDenied() {
        return DBXSharingRevokeSharedLinkErrorSharedLinkAccessDenied()
    }
    if object.isUnsupportedLinkType() {
        return DBXSharingRevokeSharedLinkErrorUnsupportedLinkType()
    }
    if object.isOther() {
        return DBXSharingRevokeSharedLinkErrorOther()
    }
    if object.isSharedLinkMalformed() {
        return DBXSharingRevokeSharedLinkErrorSharedLinkMalformed()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSetAccessInheritanceArgToDBXOptional(object: DBSHARINGSetAccessInheritanceArg?) -> DBXSharingSetAccessInheritanceArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGSetAccessInheritanceArgToDBX(object: object)
}

func mapDBSHARINGSetAccessInheritanceArgToDBX(object: DBSHARINGSetAccessInheritanceArg) -> DBXSharingSetAccessInheritanceArg {
    DBXSharingSetAccessInheritanceArg(
        sharedFolderId: object.sharedFolderId,
        accessInheritance: mapDBSHARINGAccessInheritanceToDBX(object: object.accessInheritance)
    )
}

func mapDBSHARINGSetAccessInheritanceErrorToDBXOptional(object: DBSHARINGSetAccessInheritanceError?) -> DBXSharingSetAccessInheritanceError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSetAccessInheritanceErrorToDBX(object: object)
}

func mapDBSHARINGSetAccessInheritanceErrorToDBX(object: DBSHARINGSetAccessInheritanceError) -> DBXSharingSetAccessInheritanceError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingSetAccessInheritanceError.factory(swift: .accessError(accessError.swift))
    }
    if object.isNoPermission() {
        return DBXSharingSetAccessInheritanceErrorNoPermission()
    }
    if object.isOther() {
        return DBXSharingSetAccessInheritanceErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGShareFolderArgBaseToDBXOptional(object: DBSHARINGShareFolderArgBase?) -> DBXSharingShareFolderArgBase? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderArgBaseToDBX(object: object)
}

func mapDBSHARINGShareFolderArgBaseToDBX(object: DBSHARINGShareFolderArgBase) -> DBXSharingShareFolderArgBase {
    DBXSharingShareFolderArgBase(
        path: object.path,
        aclUpdatePolicy: mapDBSHARINGAclUpdatePolicyToDBXOptional(object: object.aclUpdatePolicy),
        forceAsync: object.forceAsync,
        memberPolicy: mapDBSHARINGMemberPolicyToDBXOptional(object: object.memberPolicy),
        sharedLinkPolicy: mapDBSHARINGSharedLinkPolicyToDBXOptional(object: object.sharedLinkPolicy),
        viewerInfoPolicy: mapDBSHARINGViewerInfoPolicyToDBXOptional(object: object.viewerInfoPolicy),
        accessInheritance: mapDBSHARINGAccessInheritanceToDBX(object: object.accessInheritance)
    )
}

func mapDBSHARINGShareFolderArgToDBXOptional(object: DBSHARINGShareFolderArg?) -> DBXSharingShareFolderArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderArgToDBX(object: object)
}

func mapDBSHARINGShareFolderArgToDBX(object: DBSHARINGShareFolderArg) -> DBXSharingShareFolderArg {
    DBXSharingShareFolderArg(
        path: object.path,
        aclUpdatePolicy: mapDBSHARINGAclUpdatePolicyToDBXOptional(object: object.aclUpdatePolicy),
        forceAsync: object.forceAsync,
        memberPolicy: mapDBSHARINGMemberPolicyToDBXOptional(object: object.memberPolicy),
        sharedLinkPolicy: mapDBSHARINGSharedLinkPolicyToDBXOptional(object: object.sharedLinkPolicy),
        viewerInfoPolicy: mapDBSHARINGViewerInfoPolicyToDBXOptional(object: object.viewerInfoPolicy),
        accessInheritance: mapDBSHARINGAccessInheritanceToDBX(object: object.accessInheritance),
        actions: object.actions?.compactMap { mapDBSHARINGFolderActionToDBX(object: $0) },
        linkSettings: mapDBSHARINGLinkSettingsToDBXOptional(object: object.linkSettings)
    )
}

func mapDBSHARINGShareFolderErrorBaseToDBXOptional(object: DBSHARINGShareFolderErrorBase?) -> DBXSharingShareFolderErrorBase? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderErrorBaseToDBX(object: object)
}

func mapDBSHARINGShareFolderErrorBaseToDBX(object: DBSHARINGShareFolderErrorBase) -> DBXSharingShareFolderErrorBase {
    if object.isEmailUnverified() {
        return DBXSharingShareFolderErrorBaseEmailUnverified()
    }
    if object.isBadPath() {
        let badPath = mapDBSHARINGSharePathErrorToDBX(object: object.badPath)
        return DBXSharingShareFolderErrorBase.factory(swift: .badPath(badPath.swift))
    }
    if object.isTeamPolicyDisallowsMemberPolicy() {
        return DBXSharingShareFolderErrorBaseTeamPolicyDisallowsMemberPolicy()
    }
    if object.isDisallowedSharedLinkPolicy() {
        return DBXSharingShareFolderErrorBaseDisallowedSharedLinkPolicy()
    }
    if object.isOther() {
        return DBXSharingShareFolderErrorBaseOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGShareFolderErrorToDBXOptional(object: DBSHARINGShareFolderError?) -> DBXSharingShareFolderError? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderErrorToDBX(object: object)
}

func mapDBSHARINGShareFolderErrorToDBX(object: DBSHARINGShareFolderError) -> DBXSharingShareFolderError {
    if object.isEmailUnverified() {
        return DBXSharingShareFolderErrorEmailUnverified()
    }
    if object.isBadPath() {
        let badPath = mapDBSHARINGSharePathErrorToDBX(object: object.badPath)
        return DBXSharingShareFolderError.factory(swift: .badPath(badPath.swift))
    }
    if object.isTeamPolicyDisallowsMemberPolicy() {
        return DBXSharingShareFolderErrorTeamPolicyDisallowsMemberPolicy()
    }
    if object.isDisallowedSharedLinkPolicy() {
        return DBXSharingShareFolderErrorDisallowedSharedLinkPolicy()
    }
    if object.isOther() {
        return DBXSharingShareFolderErrorOther()
    }
    if object.isNoPermission() {
        return DBXSharingShareFolderErrorNoPermission()
    }
    fatalError("codegen error")
}

func mapDBSHARINGShareFolderJobStatusToDBXOptional(object: DBSHARINGShareFolderJobStatus?) -> DBXSharingShareFolderJobStatus? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderJobStatusToDBX(object: object)
}

func mapDBSHARINGShareFolderJobStatusToDBX(object: DBSHARINGShareFolderJobStatus) -> DBXSharingShareFolderJobStatus {
    if object.isInProgress() {
        return DBXSharingShareFolderJobStatusInProgress()
    }
    if object.isComplete() {
        let complete = mapDBSHARINGSharedFolderMetadataToDBX(object: object.complete)
        return DBXSharingShareFolderJobStatus.factory(swift: .complete(complete.subSwift))
    }
    if object.isFailed() {
        let failed = mapDBSHARINGShareFolderErrorToDBX(object: object.failed)
        return DBXSharingShareFolderJobStatus.factory(swift: .failed(failed.swift))
    }
    fatalError("codegen error")
}

func mapDBSHARINGShareFolderLaunchToDBXOptional(object: DBSHARINGShareFolderLaunch?) -> DBXSharingShareFolderLaunch? {
    guard let object = object else { return nil }
    return mapDBSHARINGShareFolderLaunchToDBX(object: object)
}

func mapDBSHARINGShareFolderLaunchToDBX(object: DBSHARINGShareFolderLaunch) -> DBXSharingShareFolderLaunch {
    if object.isAsyncJobId() {
        let asyncJobId = object.asyncJobId
        return DBXSharingShareFolderLaunch.factory(swift: .asyncJobId(asyncJobId))
    }
    if object.isComplete() {
        let complete = mapDBSHARINGSharedFolderMetadataToDBX(object: object.complete)
        return DBXSharingShareFolderLaunch.factory(swift: .complete(complete.subSwift))
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharePathErrorToDBXOptional(object: DBSHARINGSharePathError?) -> DBXSharingSharePathError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharePathErrorToDBX(object: object)
}

func mapDBSHARINGSharePathErrorToDBX(object: DBSHARINGSharePathError) -> DBXSharingSharePathError {
    if object.isIsFile() {
        return DBXSharingSharePathErrorIsFile()
    }
    if object.isInsideSharedFolder() {
        return DBXSharingSharePathErrorInsideSharedFolder()
    }
    if object.isContainsSharedFolder() {
        return DBXSharingSharePathErrorContainsSharedFolder()
    }
    if object.isContainsAppFolder() {
        return DBXSharingSharePathErrorContainsAppFolder()
    }
    if object.isContainsTeamFolder() {
        return DBXSharingSharePathErrorContainsTeamFolder()
    }
    if object.isIsAppFolder() {
        return DBXSharingSharePathErrorIsAppFolder()
    }
    if object.isInsideAppFolder() {
        return DBXSharingSharePathErrorInsideAppFolder()
    }
    if object.isIsPublicFolder() {
        return DBXSharingSharePathErrorIsPublicFolder()
    }
    if object.isInsidePublicFolder() {
        return DBXSharingSharePathErrorInsidePublicFolder()
    }
    if object.isAlreadyShared() {
        let alreadyShared = mapDBSHARINGSharedFolderMetadataToDBX(object: object.alreadyShared)
        return DBXSharingSharePathError.factory(swift: .alreadyShared(alreadyShared.subSwift))
    }
    if object.isInvalidPath() {
        return DBXSharingSharePathErrorInvalidPath()
    }
    if object.isIsOsxPackage() {
        return DBXSharingSharePathErrorIsOsxPackage()
    }
    if object.isInsideOsxPackage() {
        return DBXSharingSharePathErrorInsideOsxPackage()
    }
    if object.isIsVault() {
        return DBXSharingSharePathErrorIsVault()
    }
    if object.isIsVaultLocked() {
        return DBXSharingSharePathErrorIsVaultLocked()
    }
    if object.isIsFamily() {
        return DBXSharingSharePathErrorIsFamily()
    }
    if object.isOther() {
        return DBXSharingSharePathErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedContentLinkMetadataToDBXOptional(object: DBSHARINGSharedContentLinkMetadata?) -> DBXSharingSharedContentLinkMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedContentLinkMetadataToDBX(object: object)
}

func mapDBSHARINGSharedContentLinkMetadataToDBX(object: DBSHARINGSharedContentLinkMetadata) -> DBXSharingSharedContentLinkMetadata {
    DBXSharingSharedContentLinkMetadata(
        audienceOptions: object.audienceOptions.compactMap { mapDBSHARINGLinkAudienceToDBX(object: $0) },
        currentAudience: mapDBSHARINGLinkAudienceToDBX(object: object.currentAudience),
        linkPermissions: object.linkPermissions.compactMap { mapDBSHARINGLinkPermissionToDBX(object: $0) },
        passwordProtected: object.passwordProtected,
        url: object.url,
        accessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessLevel),
        audienceRestrictingSharedFolder: mapDBSHARINGAudienceRestrictingSharedFolderToDBXOptional(object: object.audienceRestrictingSharedFolder),
        expiry: object.expiry,
        audienceExceptions: mapDBSHARINGAudienceExceptionsToDBXOptional(object: object.audienceExceptions)
    )
}

func mapDBSHARINGSharedFileMembersToDBXOptional(object: DBSHARINGSharedFileMembers?) -> DBXSharingSharedFileMembers? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFileMembersToDBX(object: object)
}

func mapDBSHARINGSharedFileMembersToDBX(object: DBSHARINGSharedFileMembers) -> DBXSharingSharedFileMembers {
    DBXSharingSharedFileMembers(
        users: object.users.compactMap { mapDBSHARINGUserFileMembershipInfoToDBX(object: $0) },
        groups: object.groups.compactMap { mapDBSHARINGGroupMembershipInfoToDBX(object: $0) },
        invitees: object.invitees.compactMap { mapDBSHARINGInviteeMembershipInfoToDBX(object: $0) },
        cursor: object.cursor
    )
}

func mapDBSHARINGSharedFileMetadataToDBXOptional(object: DBSHARINGSharedFileMetadata?) -> DBXSharingSharedFileMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFileMetadataToDBX(object: object)
}

func mapDBSHARINGSharedFileMetadataToDBX(object: DBSHARINGSharedFileMetadata) -> DBXSharingSharedFileMetadata {
    DBXSharingSharedFileMetadata(
        id: object.id_,
        name: object.name,
        policy: mapDBSHARINGFolderPolicyToDBX(object: object.policy),
        previewUrl: object.previewUrl,
        accessType: mapDBSHARINGAccessLevelToDBXOptional(object: object.accessType),
        expectedLinkMetadata: mapDBSHARINGExpectedSharedContentLinkMetadataToDBXOptional(object: object.expectedLinkMetadata),
        linkMetadata: mapDBSHARINGSharedContentLinkMetadataToDBXOptional(object: object.linkMetadata),
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBUSERSTeamToDBXOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        permissions: object.permissions?.compactMap { mapDBSHARINGFilePermissionToDBX(object: $0) },
        timeInvited: object.timeInvited
    )
}

func mapDBSHARINGSharedFolderAccessErrorToDBXOptional(object: DBSHARINGSharedFolderAccessError?) -> DBXSharingSharedFolderAccessError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFolderAccessErrorToDBX(object: object)
}

func mapDBSHARINGSharedFolderAccessErrorToDBX(object: DBSHARINGSharedFolderAccessError) -> DBXSharingSharedFolderAccessError {
    if object.isInvalidId() {
        return DBXSharingSharedFolderAccessErrorInvalidId()
    }
    if object.isNotAMember() {
        return DBXSharingSharedFolderAccessErrorNotAMember()
    }
    if object.isInvalidMember() {
        return DBXSharingSharedFolderAccessErrorInvalidMember()
    }
    if object.isEmailUnverified() {
        return DBXSharingSharedFolderAccessErrorEmailUnverified()
    }
    if object.isUnmounted() {
        return DBXSharingSharedFolderAccessErrorUnmounted()
    }
    if object.isOther() {
        return DBXSharingSharedFolderAccessErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedFolderMemberErrorToDBXOptional(object: DBSHARINGSharedFolderMemberError?) -> DBXSharingSharedFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFolderMemberErrorToDBX(object: object)
}

func mapDBSHARINGSharedFolderMemberErrorToDBX(object: DBSHARINGSharedFolderMemberError) -> DBXSharingSharedFolderMemberError {
    if object.isInvalidDropboxId() {
        return DBXSharingSharedFolderMemberErrorInvalidDropboxId()
    }
    if object.isNotAMember() {
        return DBXSharingSharedFolderMemberErrorNotAMember()
    }
    if object.isNoExplicitAccess() {
        let noExplicitAccess = mapDBSHARINGMemberAccessLevelResultToDBX(object: object.noExplicitAccess)
        return DBXSharingSharedFolderMemberError.factory(swift: .noExplicitAccess(noExplicitAccess.swift))
    }
    if object.isOther() {
        return DBXSharingSharedFolderMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedFolderMembersToDBXOptional(object: DBSHARINGSharedFolderMembers?) -> DBXSharingSharedFolderMembers? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFolderMembersToDBX(object: object)
}

func mapDBSHARINGSharedFolderMembersToDBX(object: DBSHARINGSharedFolderMembers) -> DBXSharingSharedFolderMembers {
    DBXSharingSharedFolderMembers(
        users: object.users.compactMap { mapDBSHARINGUserMembershipInfoToDBX(object: $0) },
        groups: object.groups.compactMap { mapDBSHARINGGroupMembershipInfoToDBX(object: $0) },
        invitees: object.invitees.compactMap { mapDBSHARINGInviteeMembershipInfoToDBX(object: $0) },
        cursor: object.cursor
    )
}

func mapDBSHARINGSharedFolderMetadataBaseToDBXOptional(object: DBSHARINGSharedFolderMetadataBase?) -> DBXSharingSharedFolderMetadataBase? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFolderMetadataBaseToDBX(object: object)
}

func mapDBSHARINGSharedFolderMetadataBaseToDBX(object: DBSHARINGSharedFolderMetadataBase) -> DBXSharingSharedFolderMetadataBase {
    DBXSharingSharedFolderMetadataBase(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        isInsideTeamFolder: object.isInsideTeamFolder,
        isTeamFolder: object.isTeamFolder,
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBUSERSTeamToDBXOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        parentFolderName: object.parentFolderName
    )
}

func mapDBSHARINGSharedFolderMetadataToDBXOptional(object: DBSHARINGSharedFolderMetadata?) -> DBXSharingSharedFolderMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedFolderMetadataToDBX(object: object)
}

func mapDBSHARINGSharedFolderMetadataToDBX(object: DBSHARINGSharedFolderMetadata) -> DBXSharingSharedFolderMetadata {
    DBXSharingSharedFolderMetadata(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        isInsideTeamFolder: object.isInsideTeamFolder,
        isTeamFolder: object.isTeamFolder,
        name: object.name,
        policy: mapDBSHARINGFolderPolicyToDBX(object: object.policy),
        previewUrl: object.previewUrl,
        sharedFolderId: object.sharedFolderId,
        timeInvited: object.timeInvited,
        ownerDisplayNames: object.ownerDisplayNames,
        ownerTeam: mapDBUSERSTeamToDBXOptional(object: object.ownerTeam),
        parentSharedFolderId: object.parentSharedFolderId,
        pathDisplay: object.pathDisplay,
        pathLower: object.pathLower,
        parentFolderName: object.parentFolderName,
        linkMetadata: mapDBSHARINGSharedContentLinkMetadataToDBXOptional(object: object.linkMetadata),
        permissions: object.permissions?.compactMap { mapDBSHARINGFolderPermissionToDBX(object: $0) },
        accessInheritance: mapDBSHARINGAccessInheritanceToDBX(object: object.accessInheritance)
    )
}

func mapDBSHARINGSharedLinkAccessFailureReasonToDBXOptional(object: DBSHARINGSharedLinkAccessFailureReason?) -> DBXSharingSharedLinkAccessFailureReason? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkAccessFailureReasonToDBX(object: object)
}

func mapDBSHARINGSharedLinkAccessFailureReasonToDBX(object: DBSHARINGSharedLinkAccessFailureReason) -> DBXSharingSharedLinkAccessFailureReason {
    if object.isLoginRequired() {
        return DBXSharingSharedLinkAccessFailureReasonLoginRequired()
    }
    if object.isEmailVerifyRequired() {
        return DBXSharingSharedLinkAccessFailureReasonEmailVerifyRequired()
    }
    if object.isPasswordRequired() {
        return DBXSharingSharedLinkAccessFailureReasonPasswordRequired()
    }
    if object.isTeamOnly() {
        return DBXSharingSharedLinkAccessFailureReasonTeamOnly()
    }
    if object.isOwnerOnly() {
        return DBXSharingSharedLinkAccessFailureReasonOwnerOnly()
    }
    if object.isOther() {
        return DBXSharingSharedLinkAccessFailureReasonOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedLinkAlreadyExistsMetadataToDBXOptional(object: DBSHARINGSharedLinkAlreadyExistsMetadata?) -> DBXSharingSharedLinkAlreadyExistsMetadata? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkAlreadyExistsMetadataToDBX(object: object)
}

func mapDBSHARINGSharedLinkAlreadyExistsMetadataToDBX(object: DBSHARINGSharedLinkAlreadyExistsMetadata) -> DBXSharingSharedLinkAlreadyExistsMetadata {
    if object.isMetadata() {
        let metadata = mapDBSHARINGSharedLinkMetadataToDBX(object: object.metadata)
        return DBXSharingSharedLinkAlreadyExistsMetadata.factory(swift: .metadata(metadata.swift))
    }
    if object.isOther() {
        return DBXSharingSharedLinkAlreadyExistsMetadataOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedLinkPolicyToDBXOptional(object: DBSHARINGSharedLinkPolicy?) -> DBXSharingSharedLinkPolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkPolicyToDBX(object: object)
}

func mapDBSHARINGSharedLinkPolicyToDBX(object: DBSHARINGSharedLinkPolicy) -> DBXSharingSharedLinkPolicy {
    if object.isAnyone() {
        return DBXSharingSharedLinkPolicyAnyone()
    }
    if object.isTeam() {
        return DBXSharingSharedLinkPolicyTeam()
    }
    if object.isMembers() {
        return DBXSharingSharedLinkPolicyMembers()
    }
    if object.isOther() {
        return DBXSharingSharedLinkPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharedLinkSettingsToDBXOptional(object: DBSHARINGSharedLinkSettings?) -> DBXSharingSharedLinkSettings? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkSettingsToDBX(object: object)
}

func mapDBSHARINGSharedLinkSettingsToDBX(object: DBSHARINGSharedLinkSettings) -> DBXSharingSharedLinkSettings {
    DBXSharingSharedLinkSettings(
        requirePassword: object.requirePassword,
        linkPassword: object.linkPassword,
        expires: object.expires,
        audience: mapDBSHARINGLinkAudienceToDBXOptional(object: object.audience),
        access: mapDBSHARINGRequestedLinkAccessLevelToDBXOptional(object: object.access),
        requestedVisibility: mapDBSHARINGRequestedVisibilityToDBXOptional(object: object.requestedVisibility),
        allowDownload: object.allowDownload
    )
}

func mapDBSHARINGSharedLinkSettingsErrorToDBXOptional(object: DBSHARINGSharedLinkSettingsError?) -> DBXSharingSharedLinkSettingsError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharedLinkSettingsErrorToDBX(object: object)
}

func mapDBSHARINGSharedLinkSettingsErrorToDBX(object: DBSHARINGSharedLinkSettingsError) -> DBXSharingSharedLinkSettingsError {
    if object.isInvalidSettings() {
        return DBXSharingSharedLinkSettingsErrorInvalidSettings()
    }
    if object.isNotAuthorized() {
        return DBXSharingSharedLinkSettingsErrorNotAuthorized()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharingFileAccessErrorToDBXOptional(object: DBSHARINGSharingFileAccessError?) -> DBXSharingSharingFileAccessError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharingFileAccessErrorToDBX(object: object)
}

func mapDBSHARINGSharingFileAccessErrorToDBX(object: DBSHARINGSharingFileAccessError) -> DBXSharingSharingFileAccessError {
    if object.isNoPermission() {
        return DBXSharingSharingFileAccessErrorNoPermission()
    }
    if object.isInvalidFile() {
        return DBXSharingSharingFileAccessErrorInvalidFile()
    }
    if object.isIsFolder() {
        return DBXSharingSharingFileAccessErrorIsFolder()
    }
    if object.isInsidePublicFolder() {
        return DBXSharingSharingFileAccessErrorInsidePublicFolder()
    }
    if object.isInsideOsxPackage() {
        return DBXSharingSharingFileAccessErrorInsideOsxPackage()
    }
    if object.isOther() {
        return DBXSharingSharingFileAccessErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGSharingUserErrorToDBXOptional(object: DBSHARINGSharingUserError?) -> DBXSharingSharingUserError? {
    guard let object = object else { return nil }
    return mapDBSHARINGSharingUserErrorToDBX(object: object)
}

func mapDBSHARINGSharingUserErrorToDBX(object: DBSHARINGSharingUserError) -> DBXSharingSharingUserError {
    if object.isEmailUnverified() {
        return DBXSharingSharingUserErrorEmailUnverified()
    }
    if object.isOther() {
        return DBXSharingSharingUserErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGTeamMemberInfoToDBXOptional(object: DBSHARINGTeamMemberInfo?) -> DBXSharingTeamMemberInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGTeamMemberInfoToDBX(object: object)
}

func mapDBSHARINGTeamMemberInfoToDBX(object: DBSHARINGTeamMemberInfo) -> DBXSharingTeamMemberInfo {
    DBXSharingTeamMemberInfo(teamInfo: mapDBUSERSTeamToDBX(object: object.teamInfo), displayName: object.displayName, memberId: object.memberId)
}

func mapDBSHARINGTransferFolderArgToDBXOptional(object: DBSHARINGTransferFolderArg?) -> DBXSharingTransferFolderArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGTransferFolderArgToDBX(object: object)
}

func mapDBSHARINGTransferFolderArgToDBX(object: DBSHARINGTransferFolderArg) -> DBXSharingTransferFolderArg {
    DBXSharingTransferFolderArg(sharedFolderId: object.sharedFolderId, toDropboxId: object.toDropboxId)
}

func mapDBSHARINGTransferFolderErrorToDBXOptional(object: DBSHARINGTransferFolderError?) -> DBXSharingTransferFolderError? {
    guard let object = object else { return nil }
    return mapDBSHARINGTransferFolderErrorToDBX(object: object)
}

func mapDBSHARINGTransferFolderErrorToDBX(object: DBSHARINGTransferFolderError) -> DBXSharingTransferFolderError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingTransferFolderError.factory(swift: .accessError(accessError.swift))
    }
    if object.isInvalidDropboxId() {
        return DBXSharingTransferFolderErrorInvalidDropboxId()
    }
    if object.isDNewOwnerNotAMember() {
        return DBXSharingTransferFolderErrorNewOwnerNotAMember()
    }
    if object.isDNewOwnerUnmounted() {
        return DBXSharingTransferFolderErrorNewOwnerUnmounted()
    }
    if object.isDNewOwnerEmailUnverified() {
        return DBXSharingTransferFolderErrorNewOwnerEmailUnverified()
    }
    if object.isTeamFolder() {
        return DBXSharingTransferFolderErrorTeamFolder()
    }
    if object.isNoPermission() {
        return DBXSharingTransferFolderErrorNoPermission()
    }
    if object.isOther() {
        return DBXSharingTransferFolderErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUnmountFolderArgToDBXOptional(object: DBSHARINGUnmountFolderArg?) -> DBXSharingUnmountFolderArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnmountFolderArgToDBX(object: object)
}

func mapDBSHARINGUnmountFolderArgToDBX(object: DBSHARINGUnmountFolderArg) -> DBXSharingUnmountFolderArg {
    DBXSharingUnmountFolderArg(sharedFolderId: object.sharedFolderId)
}

func mapDBSHARINGUnmountFolderErrorToDBXOptional(object: DBSHARINGUnmountFolderError?) -> DBXSharingUnmountFolderError? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnmountFolderErrorToDBX(object: object)
}

func mapDBSHARINGUnmountFolderErrorToDBX(object: DBSHARINGUnmountFolderError) -> DBXSharingUnmountFolderError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingUnmountFolderError.factory(swift: .accessError(accessError.swift))
    }
    if object.isNoPermission() {
        return DBXSharingUnmountFolderErrorNoPermission()
    }
    if object.isNotUnmountable() {
        return DBXSharingUnmountFolderErrorNotUnmountable()
    }
    if object.isOther() {
        return DBXSharingUnmountFolderErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUnshareFileArgToDBXOptional(object: DBSHARINGUnshareFileArg?) -> DBXSharingUnshareFileArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnshareFileArgToDBX(object: object)
}

func mapDBSHARINGUnshareFileArgToDBX(object: DBSHARINGUnshareFileArg) -> DBXSharingUnshareFileArg {
    DBXSharingUnshareFileArg(file: object.file)
}

func mapDBSHARINGUnshareFileErrorToDBXOptional(object: DBSHARINGUnshareFileError?) -> DBXSharingUnshareFileError? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnshareFileErrorToDBX(object: object)
}

func mapDBSHARINGUnshareFileErrorToDBX(object: DBSHARINGUnshareFileError) -> DBXSharingUnshareFileError {
    if object.isUserError() {
        let userError = mapDBSHARINGSharingUserErrorToDBX(object: object.userError)
        return DBXSharingUnshareFileError.factory(swift: .userError(userError.swift))
    }
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharingFileAccessErrorToDBX(object: object.accessError)
        return DBXSharingUnshareFileError.factory(swift: .accessError(accessError.swift))
    }
    if object.isOther() {
        return DBXSharingUnshareFileErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUnshareFolderArgToDBXOptional(object: DBSHARINGUnshareFolderArg?) -> DBXSharingUnshareFolderArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnshareFolderArgToDBX(object: object)
}

func mapDBSHARINGUnshareFolderArgToDBX(object: DBSHARINGUnshareFolderArg) -> DBXSharingUnshareFolderArg {
    DBXSharingUnshareFolderArg(sharedFolderId: object.sharedFolderId, leaveACopy: object.leaveACopy)
}

func mapDBSHARINGUnshareFolderErrorToDBXOptional(object: DBSHARINGUnshareFolderError?) -> DBXSharingUnshareFolderError? {
    guard let object = object else { return nil }
    return mapDBSHARINGUnshareFolderErrorToDBX(object: object)
}

func mapDBSHARINGUnshareFolderErrorToDBX(object: DBSHARINGUnshareFolderError) -> DBXSharingUnshareFolderError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingUnshareFolderError.factory(swift: .accessError(accessError.swift))
    }
    if object.isTeamFolder() {
        return DBXSharingUnshareFolderErrorTeamFolder()
    }
    if object.isNoPermission() {
        return DBXSharingUnshareFolderErrorNoPermission()
    }
    if object.isTooManyFiles() {
        return DBXSharingUnshareFolderErrorTooManyFiles()
    }
    if object.isOther() {
        return DBXSharingUnshareFolderErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUpdateFileMemberArgsToDBXOptional(object: DBSHARINGUpdateFileMemberArgs?) -> DBXSharingUpdateFileMemberArgs? {
    guard let object = object else { return nil }
    return mapDBSHARINGUpdateFileMemberArgsToDBX(object: object)
}

func mapDBSHARINGUpdateFileMemberArgsToDBX(object: DBSHARINGUpdateFileMemberArgs) -> DBXSharingUpdateFileMemberArgs {
    DBXSharingUpdateFileMemberArgs(
        file: object.file,
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        accessLevel: mapDBSHARINGAccessLevelToDBX(object: object.accessLevel)
    )
}

func mapDBSHARINGUpdateFolderMemberArgToDBXOptional(object: DBSHARINGUpdateFolderMemberArg?) -> DBXSharingUpdateFolderMemberArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGUpdateFolderMemberArgToDBX(object: object)
}

func mapDBSHARINGUpdateFolderMemberArgToDBX(object: DBSHARINGUpdateFolderMemberArg) -> DBXSharingUpdateFolderMemberArg {
    DBXSharingUpdateFolderMemberArg(
        sharedFolderId: object.sharedFolderId,
        member: mapDBSHARINGMemberSelectorToDBX(object: object.member),
        accessLevel: mapDBSHARINGAccessLevelToDBX(object: object.accessLevel)
    )
}

func mapDBSHARINGUpdateFolderMemberErrorToDBXOptional(object: DBSHARINGUpdateFolderMemberError?) -> DBXSharingUpdateFolderMemberError? {
    guard let object = object else { return nil }
    return mapDBSHARINGUpdateFolderMemberErrorToDBX(object: object)
}

func mapDBSHARINGUpdateFolderMemberErrorToDBX(object: DBSHARINGUpdateFolderMemberError) -> DBXSharingUpdateFolderMemberError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingUpdateFolderMemberError.factory(swift: .accessError(accessError.swift))
    }
    if object.isMemberError() {
        let memberError = mapDBSHARINGSharedFolderMemberErrorToDBX(object: object.memberError)
        return DBXSharingUpdateFolderMemberError.factory(swift: .memberError(memberError.swift))
    }
    if object.isNoExplicitAccess() {
        let noExplicitAccess = mapDBSHARINGAddFolderMemberErrorToDBX(object: object.noExplicitAccess)
        return DBXSharingUpdateFolderMemberError.factory(swift: .noExplicitAccess(noExplicitAccess.swift))
    }
    if object.isInsufficientPlan() {
        return DBXSharingUpdateFolderMemberErrorInsufficientPlan()
    }
    if object.isNoPermission() {
        return DBXSharingUpdateFolderMemberErrorNoPermission()
    }
    if object.isOther() {
        return DBXSharingUpdateFolderMemberErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUpdateFolderPolicyArgToDBXOptional(object: DBSHARINGUpdateFolderPolicyArg?) -> DBXSharingUpdateFolderPolicyArg? {
    guard let object = object else { return nil }
    return mapDBSHARINGUpdateFolderPolicyArgToDBX(object: object)
}

func mapDBSHARINGUpdateFolderPolicyArgToDBX(object: DBSHARINGUpdateFolderPolicyArg) -> DBXSharingUpdateFolderPolicyArg {
    DBXSharingUpdateFolderPolicyArg(
        sharedFolderId: object.sharedFolderId,
        memberPolicy: mapDBSHARINGMemberPolicyToDBXOptional(object: object.memberPolicy),
        aclUpdatePolicy: mapDBSHARINGAclUpdatePolicyToDBXOptional(object: object.aclUpdatePolicy),
        viewerInfoPolicy: mapDBSHARINGViewerInfoPolicyToDBXOptional(object: object.viewerInfoPolicy),
        sharedLinkPolicy: mapDBSHARINGSharedLinkPolicyToDBXOptional(object: object.sharedLinkPolicy),
        linkSettings: mapDBSHARINGLinkSettingsToDBXOptional(object: object.linkSettings),
        actions: object.actions?.compactMap { mapDBSHARINGFolderActionToDBX(object: $0) }
    )
}

func mapDBSHARINGUpdateFolderPolicyErrorToDBXOptional(object: DBSHARINGUpdateFolderPolicyError?) -> DBXSharingUpdateFolderPolicyError? {
    guard let object = object else { return nil }
    return mapDBSHARINGUpdateFolderPolicyErrorToDBX(object: object)
}

func mapDBSHARINGUpdateFolderPolicyErrorToDBX(object: DBSHARINGUpdateFolderPolicyError) -> DBXSharingUpdateFolderPolicyError {
    if object.isAccessError() {
        let accessError = mapDBSHARINGSharedFolderAccessErrorToDBX(object: object.accessError)
        return DBXSharingUpdateFolderPolicyError.factory(swift: .accessError(accessError.swift))
    }
    if object.isNotOnTeam() {
        return DBXSharingUpdateFolderPolicyErrorNotOnTeam()
    }
    if object.isTeamPolicyDisallowsMemberPolicy() {
        return DBXSharingUpdateFolderPolicyErrorTeamPolicyDisallowsMemberPolicy()
    }
    if object.isDisallowedSharedLinkPolicy() {
        return DBXSharingUpdateFolderPolicyErrorDisallowedSharedLinkPolicy()
    }
    if object.isNoPermission() {
        return DBXSharingUpdateFolderPolicyErrorNoPermission()
    }
    if object.isTeamFolder() {
        return DBXSharingUpdateFolderPolicyErrorTeamFolder()
    }
    if object.isOther() {
        return DBXSharingUpdateFolderPolicyErrorOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGUserMembershipInfoToDBXOptional(object: DBSHARINGUserMembershipInfo?) -> DBXSharingUserMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGUserMembershipInfoToDBX(object: object)
}

func mapDBSHARINGUserMembershipInfoToDBX(object: DBSHARINGUserMembershipInfo) -> DBXSharingUserMembershipInfo {
    DBXSharingUserMembershipInfo(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        user: mapDBSHARINGUserInfoToDBX(object: object.user),
        permissions: object.permissions?.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited
    )
}

func mapDBSHARINGUserFileMembershipInfoToDBXOptional(object: DBSHARINGUserFileMembershipInfo?) -> DBXSharingUserFileMembershipInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGUserFileMembershipInfoToDBX(object: object)
}

func mapDBSHARINGUserFileMembershipInfoToDBX(object: DBSHARINGUserFileMembershipInfo) -> DBXSharingUserFileMembershipInfo {
    DBXSharingUserFileMembershipInfo(
        accessType: mapDBSHARINGAccessLevelToDBX(object: object.accessType),
        user: mapDBSHARINGUserInfoToDBX(object: object.user),
        permissions: object.permissions?.compactMap { mapDBSHARINGMemberPermissionToDBX(object: $0) },
        initials: object.initials,
        isInherited: object.isInherited,
        timeLastSeen: object.timeLastSeen,
        platformType: mapDBSEENSTATEPlatformTypeToDBXOptional(object: object.platformType)
    )
}

func mapDBSHARINGUserInfoToDBXOptional(object: DBSHARINGUserInfo?) -> DBXSharingUserInfo? {
    guard let object = object else { return nil }
    return mapDBSHARINGUserInfoToDBX(object: object)
}

func mapDBSHARINGUserInfoToDBX(object: DBSHARINGUserInfo) -> DBXSharingUserInfo {
    DBXSharingUserInfo(
        accountId: object.accountId,
        email: object.email,
        displayName: object.displayName,
        sameTeam: object.sameTeam,
        teamMemberId: object.teamMemberId
    )
}

func mapDBSHARINGViewerInfoPolicyToDBXOptional(object: DBSHARINGViewerInfoPolicy?) -> DBXSharingViewerInfoPolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGViewerInfoPolicyToDBX(object: object)
}

func mapDBSHARINGViewerInfoPolicyToDBX(object: DBSHARINGViewerInfoPolicy) -> DBXSharingViewerInfoPolicy {
    if object.isEnabled() {
        return DBXSharingViewerInfoPolicyEnabled()
    }
    if object.isDisabled() {
        return DBXSharingViewerInfoPolicyDisabled()
    }
    if object.isOther() {
        return DBXSharingViewerInfoPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGVisibilityToDBXOptional(object: DBSHARINGVisibility?) -> DBXSharingVisibility? {
    guard let object = object else { return nil }
    return mapDBSHARINGVisibilityToDBX(object: object)
}

func mapDBSHARINGVisibilityToDBX(object: DBSHARINGVisibility) -> DBXSharingVisibility {
    if object.isPublic() {
        return DBXSharingVisibilityPublic_()
    }
    if object.isTeamOnly() {
        return DBXSharingVisibilityTeamOnly()
    }
    if object.isPassword() {
        return DBXSharingVisibilityPassword()
    }
    if object.isTeamAndPassword() {
        return DBXSharingVisibilityTeamAndPassword()
    }
    if object.isSharedFolderOnly() {
        return DBXSharingVisibilitySharedFolderOnly()
    }
    if object.isOther() {
        return DBXSharingVisibilityOther()
    }
    fatalError("codegen error")
}

func mapDBSHARINGVisibilityPolicyToDBXOptional(object: DBSHARINGVisibilityPolicy?) -> DBXSharingVisibilityPolicy? {
    guard let object = object else { return nil }
    return mapDBSHARINGVisibilityPolicyToDBX(object: object)
}

func mapDBSHARINGVisibilityPolicyToDBX(object: DBSHARINGVisibilityPolicy) -> DBXSharingVisibilityPolicy {
    DBXSharingVisibilityPolicy(
        policy: mapDBSHARINGRequestedVisibilityToDBX(object: object.policy),
        resolvedPolicy: mapDBSHARINGAlphaResolvedVisibilityToDBX(object: object.resolvedPolicy),
        allowed: object.allowed,
        disallowedReason: mapDBSHARINGVisibilityPolicyDisallowedReasonToDBXOptional(object: object.disallowedReason)
    )
}
