///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBTEAMLOGAccessMethodLogInfoToDBXOptional(object: DBTEAMLOGAccessMethodLogInfo?) -> DBXTeamLogAccessMethodLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccessMethodLogInfoToDBX(object: object)
}

func mapDBTEAMLOGAccessMethodLogInfoToDBX(object: DBTEAMLOGAccessMethodLogInfo) -> DBXTeamLogAccessMethodLogInfo {
    if object.isAdminConsole() {
        let adminConsole = mapDBTEAMLOGWebSessionLogInfoToDBX(object: object.adminConsole)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .adminConsole(adminConsole.subSwift))
    }
    if object.isApi() {
        let api = mapDBTEAMLOGApiSessionLogInfoToDBX(object: object.api)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .api(api.swift))
    }
    if object.isContentManager() {
        let contentManager = mapDBTEAMLOGWebSessionLogInfoToDBX(object: object.contentManager)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .contentManager(contentManager.subSwift))
    }
    if object.isEndUser() {
        let endUser = mapDBTEAMLOGSessionLogInfoToDBX(object: object.endUser)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .endUser(endUser.swift))
    }
    if object.isEnterpriseConsole() {
        let enterpriseConsole = mapDBTEAMLOGWebSessionLogInfoToDBX(object: object.enterpriseConsole)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .enterpriseConsole(enterpriseConsole.subSwift))
    }
    if object.isSignInAs() {
        let signInAs = mapDBTEAMLOGWebSessionLogInfoToDBX(object: object.signInAs)
        return DBXTeamLogAccessMethodLogInfo.factory(swift: .signInAs(signInAs.subSwift))
    }
    if object.isOther() {
        return DBXTeamLogAccessMethodLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAccountCaptureAvailabilityToDBXOptional(object: DBTEAMLOGAccountCaptureAvailability?) -> DBXTeamLogAccountCaptureAvailability? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureAvailabilityToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureAvailabilityToDBX(object: DBTEAMLOGAccountCaptureAvailability) -> DBXTeamLogAccountCaptureAvailability {
    if object.isAvailable() {
        return DBXTeamLogAccountCaptureAvailabilityAvailable()
    }
    if object.isUnavailable() {
        return DBXTeamLogAccountCaptureAvailabilityUnavailable()
    }
    if object.isOther() {
        return DBXTeamLogAccountCaptureAvailabilityOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAccountCaptureChangeAvailabilityDetailsToDBXOptional(object: DBTEAMLOGAccountCaptureChangeAvailabilityDetails?)
    -> DBXTeamLogAccountCaptureChangeAvailabilityDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureChangeAvailabilityDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureChangeAvailabilityDetailsToDBX(object: DBTEAMLOGAccountCaptureChangeAvailabilityDetails)
    -> DBXTeamLogAccountCaptureChangeAvailabilityDetails {
    DBXTeamLogAccountCaptureChangeAvailabilityDetails(
        newValue: mapDBTEAMLOGAccountCaptureAvailabilityToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGAccountCaptureAvailabilityToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGAccountCaptureChangeAvailabilityTypeToDBXOptional(object: DBTEAMLOGAccountCaptureChangeAvailabilityType?)
    -> DBXTeamLogAccountCaptureChangeAvailabilityType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureChangeAvailabilityTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureChangeAvailabilityTypeToDBX(object: DBTEAMLOGAccountCaptureChangeAvailabilityType)
    -> DBXTeamLogAccountCaptureChangeAvailabilityType {
    DBXTeamLogAccountCaptureChangeAvailabilityType(description_: object.description_)
}

func mapDBTEAMLOGAccountCaptureChangePolicyDetailsToDBXOptional(object: DBTEAMLOGAccountCaptureChangePolicyDetails?)
    -> DBXTeamLogAccountCaptureChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureChangePolicyDetailsToDBX(object: DBTEAMLOGAccountCaptureChangePolicyDetails) -> DBXTeamLogAccountCaptureChangePolicyDetails {
    DBXTeamLogAccountCaptureChangePolicyDetails(
        newValue: mapDBTEAMLOGAccountCapturePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGAccountCapturePolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGAccountCaptureChangePolicyTypeToDBXOptional(object: DBTEAMLOGAccountCaptureChangePolicyType?) -> DBXTeamLogAccountCaptureChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureChangePolicyTypeToDBX(object: DBTEAMLOGAccountCaptureChangePolicyType) -> DBXTeamLogAccountCaptureChangePolicyType {
    DBXTeamLogAccountCaptureChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGAccountCaptureMigrateAccountDetailsToDBXOptional(object: DBTEAMLOGAccountCaptureMigrateAccountDetails?)
    -> DBXTeamLogAccountCaptureMigrateAccountDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureMigrateAccountDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureMigrateAccountDetailsToDBX(object: DBTEAMLOGAccountCaptureMigrateAccountDetails)
    -> DBXTeamLogAccountCaptureMigrateAccountDetails {
    DBXTeamLogAccountCaptureMigrateAccountDetails(domainName: object.domainName)
}

func mapDBTEAMLOGAccountCaptureMigrateAccountTypeToDBXOptional(object: DBTEAMLOGAccountCaptureMigrateAccountType?)
    -> DBXTeamLogAccountCaptureMigrateAccountType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureMigrateAccountTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureMigrateAccountTypeToDBX(object: DBTEAMLOGAccountCaptureMigrateAccountType) -> DBXTeamLogAccountCaptureMigrateAccountType {
    DBXTeamLogAccountCaptureMigrateAccountType(description_: object.description_)
}

func mapDBTEAMLOGAccountCaptureNotificationEmailsSentDetailsToDBXOptional(object: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails?)
    -> DBXTeamLogAccountCaptureNotificationEmailsSentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureNotificationEmailsSentDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureNotificationEmailsSentDetailsToDBX(object: DBTEAMLOGAccountCaptureNotificationEmailsSentDetails)
    -> DBXTeamLogAccountCaptureNotificationEmailsSentDetails {
    DBXTeamLogAccountCaptureNotificationEmailsSentDetails(
        domainName: object.domainName,
        notificationType: mapDBTEAMLOGAccountCaptureNotificationTypeToDBXOptional(object: object.notificationType)
    )
}

func mapDBTEAMLOGAccountCaptureNotificationEmailsSentTypeToDBXOptional(object: DBTEAMLOGAccountCaptureNotificationEmailsSentType?)
    -> DBXTeamLogAccountCaptureNotificationEmailsSentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureNotificationEmailsSentTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureNotificationEmailsSentTypeToDBX(object: DBTEAMLOGAccountCaptureNotificationEmailsSentType)
    -> DBXTeamLogAccountCaptureNotificationEmailsSentType {
    DBXTeamLogAccountCaptureNotificationEmailsSentType(description_: object.description_)
}

func mapDBTEAMLOGAccountCaptureNotificationTypeToDBXOptional(object: DBTEAMLOGAccountCaptureNotificationType?) -> DBXTeamLogAccountCaptureNotificationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureNotificationTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureNotificationTypeToDBX(object: DBTEAMLOGAccountCaptureNotificationType) -> DBXTeamLogAccountCaptureNotificationType {
    if object.isActionableNotification() {
        return DBXTeamLogAccountCaptureNotificationTypeActionableNotification()
    }
    if object.isProactiveWarningNotification() {
        return DBXTeamLogAccountCaptureNotificationTypeProactiveWarningNotification()
    }
    if object.isOther() {
        return DBXTeamLogAccountCaptureNotificationTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAccountCapturePolicyToDBXOptional(object: DBTEAMLOGAccountCapturePolicy?) -> DBXTeamLogAccountCapturePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCapturePolicyToDBX(object: object)
}

func mapDBTEAMLOGAccountCapturePolicyToDBX(object: DBTEAMLOGAccountCapturePolicy) -> DBXTeamLogAccountCapturePolicy {
    if object.isAllUsers() {
        return DBXTeamLogAccountCapturePolicyAllUsers()
    }
    if object.isDisabled() {
        return DBXTeamLogAccountCapturePolicyDisabled()
    }
    if object.isInvitedUsers() {
        return DBXTeamLogAccountCapturePolicyInvitedUsers()
    }
    if object.isPreventPersonalCreation() {
        return DBXTeamLogAccountCapturePolicyPreventPersonalCreation()
    }
    if object.isOther() {
        return DBXTeamLogAccountCapturePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAccountCaptureRelinquishAccountDetailsToDBXOptional(object: DBTEAMLOGAccountCaptureRelinquishAccountDetails?)
    -> DBXTeamLogAccountCaptureRelinquishAccountDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureRelinquishAccountDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureRelinquishAccountDetailsToDBX(object: DBTEAMLOGAccountCaptureRelinquishAccountDetails)
    -> DBXTeamLogAccountCaptureRelinquishAccountDetails {
    DBXTeamLogAccountCaptureRelinquishAccountDetails(domainName: object.domainName)
}

func mapDBTEAMLOGAccountCaptureRelinquishAccountTypeToDBXOptional(object: DBTEAMLOGAccountCaptureRelinquishAccountType?)
    -> DBXTeamLogAccountCaptureRelinquishAccountType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountCaptureRelinquishAccountTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountCaptureRelinquishAccountTypeToDBX(object: DBTEAMLOGAccountCaptureRelinquishAccountType)
    -> DBXTeamLogAccountCaptureRelinquishAccountType {
    DBXTeamLogAccountCaptureRelinquishAccountType(description_: object.description_)
}

func mapDBTEAMLOGAccountLockOrUnlockedDetailsToDBXOptional(object: DBTEAMLOGAccountLockOrUnlockedDetails?) -> DBXTeamLogAccountLockOrUnlockedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountLockOrUnlockedDetailsToDBX(object: object)
}

func mapDBTEAMLOGAccountLockOrUnlockedDetailsToDBX(object: DBTEAMLOGAccountLockOrUnlockedDetails) -> DBXTeamLogAccountLockOrUnlockedDetails {
    DBXTeamLogAccountLockOrUnlockedDetails(
        previousValue: mapDBTEAMLOGAccountStateToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGAccountStateToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGAccountLockOrUnlockedTypeToDBXOptional(object: DBTEAMLOGAccountLockOrUnlockedType?) -> DBXTeamLogAccountLockOrUnlockedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountLockOrUnlockedTypeToDBX(object: object)
}

func mapDBTEAMLOGAccountLockOrUnlockedTypeToDBX(object: DBTEAMLOGAccountLockOrUnlockedType) -> DBXTeamLogAccountLockOrUnlockedType {
    DBXTeamLogAccountLockOrUnlockedType(description_: object.description_)
}

func mapDBTEAMLOGAccountStateToDBXOptional(object: DBTEAMLOGAccountState?) -> DBXTeamLogAccountState? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAccountStateToDBX(object: object)
}

func mapDBTEAMLOGAccountStateToDBX(object: DBTEAMLOGAccountState) -> DBXTeamLogAccountState {
    if object.isLocked() {
        return DBXTeamLogAccountStateLocked()
    }
    if object.isUnlocked() {
        return DBXTeamLogAccountStateUnlocked()
    }
    if object.isOther() {
        return DBXTeamLogAccountStateOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGActionDetailsToDBXOptional(object: DBTEAMLOGActionDetails?) -> DBXTeamLogActionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGActionDetailsToDBX(object: object)
}

func mapDBTEAMLOGActionDetailsToDBX(object: DBTEAMLOGActionDetails) -> DBXTeamLogActionDetails {
    if object.isRemoveAction() {
        let removeAction = mapDBTEAMLOGMemberRemoveActionTypeToDBX(object: object.removeAction)
        return DBXTeamLogActionDetails.factory(swift: .removeAction(removeAction.swift))
    }
    if object.isTeamInviteDetails() {
        let teamInviteDetails = mapDBTEAMLOGTeamInviteDetailsToDBX(object: object.teamInviteDetails)
        return DBXTeamLogActionDetails.factory(swift: .teamInviteDetails(teamInviteDetails.swift))
    }
    if object.isTeamJoinDetails() {
        let teamJoinDetails = mapDBTEAMLOGJoinTeamDetailsToDBX(object: object.teamJoinDetails)
        return DBXTeamLogActionDetails.factory(swift: .teamJoinDetails(teamJoinDetails.swift))
    }
    if object.isOther() {
        return DBXTeamLogActionDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGActorLogInfoToDBXOptional(object: DBTEAMLOGActorLogInfo?) -> DBXTeamLogActorLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGActorLogInfoToDBX(object: object)
}

func mapDBTEAMLOGActorLogInfoToDBX(object: DBTEAMLOGActorLogInfo) -> DBXTeamLogActorLogInfo {
    if object.isAdmin() {
        let admin = mapDBTEAMLOGUserLogInfoToDBX(object: object.admin)
        return DBXTeamLogActorLogInfo.factory(swift: .admin(admin.swift))
    }
    if object.isAnonymous() {
        return DBXTeamLogActorLogInfoAnonymous()
    }
    if object.isApp() {
        let app = mapDBTEAMLOGAppLogInfoToDBX(object: object.app)
        return DBXTeamLogActorLogInfo.factory(swift: .app(app.swift))
    }
    if object.isDropbox() {
        return DBXTeamLogActorLogInfoDropbox()
    }
    if object.isReseller() {
        let reseller = mapDBTEAMLOGResellerLogInfoToDBX(object: object.reseller)
        return DBXTeamLogActorLogInfo.factory(swift: .reseller(reseller.swift))
    }
    if object.isUser() {
        let user = mapDBTEAMLOGUserLogInfoToDBX(object: object.user)
        return DBXTeamLogActorLogInfo.factory(swift: .user(user.swift))
    }
    if object.isOther() {
        return DBXTeamLogActorLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertCategoryEnumToDBXOptional(object: DBTEAMLOGAdminAlertCategoryEnum?) -> DBXTeamLogAdminAlertCategoryEnum? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertCategoryEnumToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertCategoryEnumToDBX(object: DBTEAMLOGAdminAlertCategoryEnum) -> DBXTeamLogAdminAlertCategoryEnum {
    if object.isAccountTakeover() {
        return DBXTeamLogAdminAlertCategoryEnumAccountTakeover()
    }
    if object.isDataLossProtection() {
        return DBXTeamLogAdminAlertCategoryEnumDataLossProtection()
    }
    if object.isInformationGovernance() {
        return DBXTeamLogAdminAlertCategoryEnumInformationGovernance()
    }
    if object.isMalwareSharing() {
        return DBXTeamLogAdminAlertCategoryEnumMalwareSharing()
    }
    if object.isMassiveFileOperation() {
        return DBXTeamLogAdminAlertCategoryEnumMassiveFileOperation()
    }
    if object.isNa() {
        return DBXTeamLogAdminAlertCategoryEnumNa()
    }
    if object.isThreatManagement() {
        return DBXTeamLogAdminAlertCategoryEnumThreatManagement()
    }
    if object.isOther() {
        return DBXTeamLogAdminAlertCategoryEnumOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertGeneralStateEnumToDBXOptional(object: DBTEAMLOGAdminAlertGeneralStateEnum?) -> DBXTeamLogAdminAlertGeneralStateEnum? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertGeneralStateEnumToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertGeneralStateEnumToDBX(object: DBTEAMLOGAdminAlertGeneralStateEnum) -> DBXTeamLogAdminAlertGeneralStateEnum {
    if object.isActive() {
        return DBXTeamLogAdminAlertGeneralStateEnumActive()
    }
    if object.isDismissed() {
        return DBXTeamLogAdminAlertGeneralStateEnumDismissed()
    }
    if object.isInProgress() {
        return DBXTeamLogAdminAlertGeneralStateEnumInProgress()
    }
    if object.isNa() {
        return DBXTeamLogAdminAlertGeneralStateEnumNa()
    }
    if object.isResolved() {
        return DBXTeamLogAdminAlertGeneralStateEnumResolved()
    }
    if object.isOther() {
        return DBXTeamLogAdminAlertGeneralStateEnumOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertSeverityEnumToDBXOptional(object: DBTEAMLOGAdminAlertSeverityEnum?) -> DBXTeamLogAdminAlertSeverityEnum? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertSeverityEnumToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertSeverityEnumToDBX(object: DBTEAMLOGAdminAlertSeverityEnum) -> DBXTeamLogAdminAlertSeverityEnum {
    if object.isHigh() {
        return DBXTeamLogAdminAlertSeverityEnumHigh()
    }
    if object.isInfo() {
        return DBXTeamLogAdminAlertSeverityEnumInfo()
    }
    if object.isLow() {
        return DBXTeamLogAdminAlertSeverityEnumLow()
    }
    if object.isMedium() {
        return DBXTeamLogAdminAlertSeverityEnumMedium()
    }
    if object.isNa() {
        return DBXTeamLogAdminAlertSeverityEnumNa()
    }
    if object.isOther() {
        return DBXTeamLogAdminAlertSeverityEnumOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertingAlertConfigurationToDBXOptional(object: DBTEAMLOGAdminAlertingAlertConfiguration?) -> DBXTeamLogAdminAlertingAlertConfiguration? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingAlertConfigurationToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingAlertConfigurationToDBX(object: DBTEAMLOGAdminAlertingAlertConfiguration) -> DBXTeamLogAdminAlertingAlertConfiguration {
    DBXTeamLogAdminAlertingAlertConfiguration(
        alertState: mapDBTEAMLOGAdminAlertingAlertStatePolicyToDBXOptional(object: object.alertState),
        sensitivityLevel: mapDBTEAMLOGAdminAlertingAlertSensitivityToDBXOptional(object: object.sensitivityLevel),
        recipientsSettings: mapDBTEAMLOGRecipientsConfigurationToDBXOptional(object: object.recipientsSettings),
        text: object.text,
        excludedFileExtensions: object.excludedFileExtensions
    )
}

func mapDBTEAMLOGAdminAlertingAlertSensitivityToDBXOptional(object: DBTEAMLOGAdminAlertingAlertSensitivity?) -> DBXTeamLogAdminAlertingAlertSensitivity? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingAlertSensitivityToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingAlertSensitivityToDBX(object: DBTEAMLOGAdminAlertingAlertSensitivity) -> DBXTeamLogAdminAlertingAlertSensitivity {
    if object.isHigh() {
        return DBXTeamLogAdminAlertingAlertSensitivityHigh()
    }
    if object.isHighest() {
        return DBXTeamLogAdminAlertingAlertSensitivityHighest()
    }
    if object.isInvalid() {
        return DBXTeamLogAdminAlertingAlertSensitivityInvalid()
    }
    if object.isLow() {
        return DBXTeamLogAdminAlertingAlertSensitivityLow()
    }
    if object.isLowest() {
        return DBXTeamLogAdminAlertingAlertSensitivityLowest()
    }
    if object.isMedium() {
        return DBXTeamLogAdminAlertingAlertSensitivityMedium()
    }
    if object.isOther() {
        return DBXTeamLogAdminAlertingAlertSensitivityOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertingAlertStateChangedDetailsToDBXOptional(object: DBTEAMLOGAdminAlertingAlertStateChangedDetails?)
    -> DBXTeamLogAdminAlertingAlertStateChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingAlertStateChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingAlertStateChangedDetailsToDBX(object: DBTEAMLOGAdminAlertingAlertStateChangedDetails)
    -> DBXTeamLogAdminAlertingAlertStateChangedDetails {
    DBXTeamLogAdminAlertingAlertStateChangedDetails(
        alertName: object.alertName,
        alertSeverity: mapDBTEAMLOGAdminAlertSeverityEnumToDBX(object: object.alertSeverity),
        alertCategory: mapDBTEAMLOGAdminAlertCategoryEnumToDBX(object: object.alertCategory),
        alertInstanceId: object.alertInstanceId,
        previousValue: mapDBTEAMLOGAdminAlertGeneralStateEnumToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGAdminAlertGeneralStateEnumToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGAdminAlertingAlertStateChangedTypeToDBXOptional(object: DBTEAMLOGAdminAlertingAlertStateChangedType?)
    -> DBXTeamLogAdminAlertingAlertStateChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingAlertStateChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingAlertStateChangedTypeToDBX(object: DBTEAMLOGAdminAlertingAlertStateChangedType) -> DBXTeamLogAdminAlertingAlertStateChangedType {
    DBXTeamLogAdminAlertingAlertStateChangedType(description_: object.description_)
}

func mapDBTEAMLOGAdminAlertingAlertStatePolicyToDBXOptional(object: DBTEAMLOGAdminAlertingAlertStatePolicy?) -> DBXTeamLogAdminAlertingAlertStatePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingAlertStatePolicyToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingAlertStatePolicyToDBX(object: DBTEAMLOGAdminAlertingAlertStatePolicy) -> DBXTeamLogAdminAlertingAlertStatePolicy {
    if object.isOff() {
        return DBXTeamLogAdminAlertingAlertStatePolicyOff()
    }
    if object.isOn() {
        return DBXTeamLogAdminAlertingAlertStatePolicyOn()
    }
    if object.isOther() {
        return DBXTeamLogAdminAlertingAlertStatePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminAlertingChangedAlertConfigDetailsToDBXOptional(object: DBTEAMLOGAdminAlertingChangedAlertConfigDetails?)
    -> DBXTeamLogAdminAlertingChangedAlertConfigDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingChangedAlertConfigDetailsToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingChangedAlertConfigDetailsToDBX(object: DBTEAMLOGAdminAlertingChangedAlertConfigDetails)
    -> DBXTeamLogAdminAlertingChangedAlertConfigDetails {
    DBXTeamLogAdminAlertingChangedAlertConfigDetails(
        alertName: object.alertName,
        previousAlertConfig: mapDBTEAMLOGAdminAlertingAlertConfigurationToDBX(object: object.previousAlertConfig),
        newAlertConfig: mapDBTEAMLOGAdminAlertingAlertConfigurationToDBX(object: object.dNewAlertConfig)
    )
}

func mapDBTEAMLOGAdminAlertingChangedAlertConfigTypeToDBXOptional(object: DBTEAMLOGAdminAlertingChangedAlertConfigType?)
    -> DBXTeamLogAdminAlertingChangedAlertConfigType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingChangedAlertConfigTypeToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingChangedAlertConfigTypeToDBX(object: DBTEAMLOGAdminAlertingChangedAlertConfigType)
    -> DBXTeamLogAdminAlertingChangedAlertConfigType {
    DBXTeamLogAdminAlertingChangedAlertConfigType(description_: object.description_)
}

func mapDBTEAMLOGAdminAlertingTriggeredAlertDetailsToDBXOptional(object: DBTEAMLOGAdminAlertingTriggeredAlertDetails?)
    -> DBXTeamLogAdminAlertingTriggeredAlertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingTriggeredAlertDetailsToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingTriggeredAlertDetailsToDBX(object: DBTEAMLOGAdminAlertingTriggeredAlertDetails) -> DBXTeamLogAdminAlertingTriggeredAlertDetails {
    DBXTeamLogAdminAlertingTriggeredAlertDetails(
        alertName: object.alertName,
        alertSeverity: mapDBTEAMLOGAdminAlertSeverityEnumToDBX(object: object.alertSeverity),
        alertCategory: mapDBTEAMLOGAdminAlertCategoryEnumToDBX(object: object.alertCategory),
        alertInstanceId: object.alertInstanceId
    )
}

func mapDBTEAMLOGAdminAlertingTriggeredAlertTypeToDBXOptional(object: DBTEAMLOGAdminAlertingTriggeredAlertType?) -> DBXTeamLogAdminAlertingTriggeredAlertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminAlertingTriggeredAlertTypeToDBX(object: object)
}

func mapDBTEAMLOGAdminAlertingTriggeredAlertTypeToDBX(object: DBTEAMLOGAdminAlertingTriggeredAlertType) -> DBXTeamLogAdminAlertingTriggeredAlertType {
    DBXTeamLogAdminAlertingTriggeredAlertType(description_: object.description_)
}

func mapDBTEAMLOGAdminConsoleAppPermissionToDBXOptional(object: DBTEAMLOGAdminConsoleAppPermission?) -> DBXTeamLogAdminConsoleAppPermission? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminConsoleAppPermissionToDBX(object: object)
}

func mapDBTEAMLOGAdminConsoleAppPermissionToDBX(object: DBTEAMLOGAdminConsoleAppPermission) -> DBXTeamLogAdminConsoleAppPermission {
    if object.isDefaultForListedApps() {
        return DBXTeamLogAdminConsoleAppPermissionDefaultForListedApps()
    }
    if object.isDefaultForUnlistedApps() {
        return DBXTeamLogAdminConsoleAppPermissionDefaultForUnlistedApps()
    }
    if object.isOther() {
        return DBXTeamLogAdminConsoleAppPermissionOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminConsoleAppPolicyToDBXOptional(object: DBTEAMLOGAdminConsoleAppPolicy?) -> DBXTeamLogAdminConsoleAppPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminConsoleAppPolicyToDBX(object: object)
}

func mapDBTEAMLOGAdminConsoleAppPolicyToDBX(object: DBTEAMLOGAdminConsoleAppPolicy) -> DBXTeamLogAdminConsoleAppPolicy {
    if object.isAllow() {
        return DBXTeamLogAdminConsoleAppPolicyAllow()
    }
    if object.isBlock() {
        return DBXTeamLogAdminConsoleAppPolicyBlock()
    }
    if object.isDefault_() {
        return DBXTeamLogAdminConsoleAppPolicyDefault_()
    }
    if object.isOther() {
        return DBXTeamLogAdminConsoleAppPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminEmailRemindersChangedDetailsToDBXOptional(object: DBTEAMLOGAdminEmailRemindersChangedDetails?)
    -> DBXTeamLogAdminEmailRemindersChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminEmailRemindersChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGAdminEmailRemindersChangedDetailsToDBX(object: DBTEAMLOGAdminEmailRemindersChangedDetails) -> DBXTeamLogAdminEmailRemindersChangedDetails {
    DBXTeamLogAdminEmailRemindersChangedDetails(
        newValue: mapDBTEAMLOGAdminEmailRemindersPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGAdminEmailRemindersPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGAdminEmailRemindersChangedTypeToDBXOptional(object: DBTEAMLOGAdminEmailRemindersChangedType?) -> DBXTeamLogAdminEmailRemindersChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminEmailRemindersChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGAdminEmailRemindersChangedTypeToDBX(object: DBTEAMLOGAdminEmailRemindersChangedType) -> DBXTeamLogAdminEmailRemindersChangedType {
    DBXTeamLogAdminEmailRemindersChangedType(description_: object.description_)
}

func mapDBTEAMLOGAdminEmailRemindersPolicyToDBXOptional(object: DBTEAMLOGAdminEmailRemindersPolicy?) -> DBXTeamLogAdminEmailRemindersPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminEmailRemindersPolicyToDBX(object: object)
}

func mapDBTEAMLOGAdminEmailRemindersPolicyToDBX(object: DBTEAMLOGAdminEmailRemindersPolicy) -> DBXTeamLogAdminEmailRemindersPolicy {
    if object.isDefault_() {
        return DBXTeamLogAdminEmailRemindersPolicyDefault_()
    }
    if object.isDisabled() {
        return DBXTeamLogAdminEmailRemindersPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogAdminEmailRemindersPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogAdminEmailRemindersPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAdminRoleToDBXOptional(object: DBTEAMLOGAdminRole?) -> DBXTeamLogAdminRole? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAdminRoleToDBX(object: object)
}

func mapDBTEAMLOGAdminRoleToDBX(object: DBTEAMLOGAdminRole) -> DBXTeamLogAdminRole {
    if object.isBillingAdmin() {
        return DBXTeamLogAdminRoleBillingAdmin()
    }
    if object.isComplianceAdmin() {
        return DBXTeamLogAdminRoleComplianceAdmin()
    }
    if object.isContentAdmin() {
        return DBXTeamLogAdminRoleContentAdmin()
    }
    if object.isLimitedAdmin() {
        return DBXTeamLogAdminRoleLimitedAdmin()
    }
    if object.isMemberOnly() {
        return DBXTeamLogAdminRoleMemberOnly()
    }
    if object.isReportingAdmin() {
        return DBXTeamLogAdminRoleReportingAdmin()
    }
    if object.isSecurityAdmin() {
        return DBXTeamLogAdminRoleSecurityAdmin()
    }
    if object.isSupportAdmin() {
        return DBXTeamLogAdminRoleSupportAdmin()
    }
    if object.isTeamAdmin() {
        return DBXTeamLogAdminRoleTeamAdmin()
    }
    if object.isUserManagementAdmin() {
        return DBXTeamLogAdminRoleUserManagementAdmin()
    }
    if object.isOther() {
        return DBXTeamLogAdminRoleOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAlertRecipientsSettingTypeToDBXOptional(object: DBTEAMLOGAlertRecipientsSettingType?) -> DBXTeamLogAlertRecipientsSettingType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAlertRecipientsSettingTypeToDBX(object: object)
}

func mapDBTEAMLOGAlertRecipientsSettingTypeToDBX(object: DBTEAMLOGAlertRecipientsSettingType) -> DBXTeamLogAlertRecipientsSettingType {
    if object.isCustomList() {
        return DBXTeamLogAlertRecipientsSettingTypeCustomList()
    }
    if object.isInvalid() {
        return DBXTeamLogAlertRecipientsSettingTypeInvalid()
    }
    if object.isNone() {
        return DBXTeamLogAlertRecipientsSettingTypeNone()
    }
    if object.isTeamAdmins() {
        return DBXTeamLogAlertRecipientsSettingTypeTeamAdmins()
    }
    if object.isOther() {
        return DBXTeamLogAlertRecipientsSettingTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGAllowDownloadDisabledDetailsToDBXOptional(object: DBTEAMLOGAllowDownloadDisabledDetails?) -> DBXTeamLogAllowDownloadDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAllowDownloadDisabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGAllowDownloadDisabledDetailsToDBX(object: DBTEAMLOGAllowDownloadDisabledDetails) -> DBXTeamLogAllowDownloadDisabledDetails {
    DBXTeamLogAllowDownloadDisabledDetails()
}

func mapDBTEAMLOGAllowDownloadDisabledTypeToDBXOptional(object: DBTEAMLOGAllowDownloadDisabledType?) -> DBXTeamLogAllowDownloadDisabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAllowDownloadDisabledTypeToDBX(object: object)
}

func mapDBTEAMLOGAllowDownloadDisabledTypeToDBX(object: DBTEAMLOGAllowDownloadDisabledType) -> DBXTeamLogAllowDownloadDisabledType {
    DBXTeamLogAllowDownloadDisabledType(description_: object.description_)
}

func mapDBTEAMLOGAllowDownloadEnabledDetailsToDBXOptional(object: DBTEAMLOGAllowDownloadEnabledDetails?) -> DBXTeamLogAllowDownloadEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAllowDownloadEnabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGAllowDownloadEnabledDetailsToDBX(object: DBTEAMLOGAllowDownloadEnabledDetails) -> DBXTeamLogAllowDownloadEnabledDetails {
    DBXTeamLogAllowDownloadEnabledDetails()
}

func mapDBTEAMLOGAllowDownloadEnabledTypeToDBXOptional(object: DBTEAMLOGAllowDownloadEnabledType?) -> DBXTeamLogAllowDownloadEnabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAllowDownloadEnabledTypeToDBX(object: object)
}

func mapDBTEAMLOGAllowDownloadEnabledTypeToDBX(object: DBTEAMLOGAllowDownloadEnabledType) -> DBXTeamLogAllowDownloadEnabledType {
    DBXTeamLogAllowDownloadEnabledType(description_: object.description_)
}

func mapDBTEAMLOGApiSessionLogInfoToDBXOptional(object: DBTEAMLOGApiSessionLogInfo?) -> DBXTeamLogApiSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGApiSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGApiSessionLogInfoToDBX(object: DBTEAMLOGApiSessionLogInfo) -> DBXTeamLogApiSessionLogInfo {
    DBXTeamLogApiSessionLogInfo(requestId: object.requestId)
}

func mapDBTEAMLOGAppBlockedByPermissionsDetailsToDBXOptional(object: DBTEAMLOGAppBlockedByPermissionsDetails?) -> DBXTeamLogAppBlockedByPermissionsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppBlockedByPermissionsDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppBlockedByPermissionsDetailsToDBX(object: DBTEAMLOGAppBlockedByPermissionsDetails) -> DBXTeamLogAppBlockedByPermissionsDetails {
    DBXTeamLogAppBlockedByPermissionsDetails(appInfo: mapDBTEAMLOGAppLogInfoToDBX(object: object.appInfo))
}

func mapDBTEAMLOGAppBlockedByPermissionsTypeToDBXOptional(object: DBTEAMLOGAppBlockedByPermissionsType?) -> DBXTeamLogAppBlockedByPermissionsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppBlockedByPermissionsTypeToDBX(object: object)
}

func mapDBTEAMLOGAppBlockedByPermissionsTypeToDBX(object: DBTEAMLOGAppBlockedByPermissionsType) -> DBXTeamLogAppBlockedByPermissionsType {
    DBXTeamLogAppBlockedByPermissionsType(description_: object.description_)
}

func mapDBTEAMLOGAppLinkTeamDetailsToDBXOptional(object: DBTEAMLOGAppLinkTeamDetails?) -> DBXTeamLogAppLinkTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppLinkTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppLinkTeamDetailsToDBX(object: DBTEAMLOGAppLinkTeamDetails) -> DBXTeamLogAppLinkTeamDetails {
    DBXTeamLogAppLinkTeamDetails(appInfo: mapDBTEAMLOGAppLogInfoToDBX(object: object.appInfo))
}

func mapDBTEAMLOGAppLinkTeamTypeToDBXOptional(object: DBTEAMLOGAppLinkTeamType?) -> DBXTeamLogAppLinkTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppLinkTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGAppLinkTeamTypeToDBX(object: DBTEAMLOGAppLinkTeamType) -> DBXTeamLogAppLinkTeamType {
    DBXTeamLogAppLinkTeamType(description_: object.description_)
}

func mapDBTEAMLOGAppLinkUserDetailsToDBXOptional(object: DBTEAMLOGAppLinkUserDetails?) -> DBXTeamLogAppLinkUserDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppLinkUserDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppLinkUserDetailsToDBX(object: DBTEAMLOGAppLinkUserDetails) -> DBXTeamLogAppLinkUserDetails {
    DBXTeamLogAppLinkUserDetails(appInfo: mapDBTEAMLOGAppLogInfoToDBX(object: object.appInfo))
}

func mapDBTEAMLOGAppLinkUserTypeToDBXOptional(object: DBTEAMLOGAppLinkUserType?) -> DBXTeamLogAppLinkUserType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppLinkUserTypeToDBX(object: object)
}

func mapDBTEAMLOGAppLinkUserTypeToDBX(object: DBTEAMLOGAppLinkUserType) -> DBXTeamLogAppLinkUserType {
    DBXTeamLogAppLinkUserType(description_: object.description_)
}

func mapDBTEAMLOGAppLogInfoToDBXOptional(object: DBTEAMLOGAppLogInfo?) -> DBXTeamLogAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppLogInfoToDBX(object: object)
}

func mapDBTEAMLOGAppLogInfoToDBX(object: DBTEAMLOGAppLogInfo) -> DBXTeamLogAppLogInfo {
    switch object {
    case let object as DBTEAMLOGUserOrTeamLinkedAppLogInfo:
        return DBXTeamLogUserOrTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    case let object as DBTEAMLOGUserLinkedAppLogInfo:
        return DBXTeamLogUserLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    case let object as DBTEAMLOGTeamLinkedAppLogInfo:
        return DBXTeamLogTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    default:
        return DBXTeamLogAppLogInfo(appId: object.appId, displayName: object.displayName)
    }
}

func mapDBTEAMLOGAppPermissionsChangedDetailsToDBXOptional(object: DBTEAMLOGAppPermissionsChangedDetails?) -> DBXTeamLogAppPermissionsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppPermissionsChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppPermissionsChangedDetailsToDBX(object: DBTEAMLOGAppPermissionsChangedDetails) -> DBXTeamLogAppPermissionsChangedDetails {
    DBXTeamLogAppPermissionsChangedDetails(
        previousValue: mapDBTEAMLOGAdminConsoleAppPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGAdminConsoleAppPolicyToDBX(object: object.dNewValue),
        appName: object.appName,
        permission: mapDBTEAMLOGAdminConsoleAppPermissionToDBXOptional(object: object.permission)
    )
}

func mapDBTEAMLOGAppPermissionsChangedTypeToDBXOptional(object: DBTEAMLOGAppPermissionsChangedType?) -> DBXTeamLogAppPermissionsChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppPermissionsChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGAppPermissionsChangedTypeToDBX(object: DBTEAMLOGAppPermissionsChangedType) -> DBXTeamLogAppPermissionsChangedType {
    DBXTeamLogAppPermissionsChangedType(description_: object.description_)
}

func mapDBTEAMLOGAppUnlinkTeamDetailsToDBXOptional(object: DBTEAMLOGAppUnlinkTeamDetails?) -> DBXTeamLogAppUnlinkTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppUnlinkTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppUnlinkTeamDetailsToDBX(object: DBTEAMLOGAppUnlinkTeamDetails) -> DBXTeamLogAppUnlinkTeamDetails {
    DBXTeamLogAppUnlinkTeamDetails(appInfo: mapDBTEAMLOGAppLogInfoToDBX(object: object.appInfo))
}

func mapDBTEAMLOGAppUnlinkTeamTypeToDBXOptional(object: DBTEAMLOGAppUnlinkTeamType?) -> DBXTeamLogAppUnlinkTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppUnlinkTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGAppUnlinkTeamTypeToDBX(object: DBTEAMLOGAppUnlinkTeamType) -> DBXTeamLogAppUnlinkTeamType {
    DBXTeamLogAppUnlinkTeamType(description_: object.description_)
}

func mapDBTEAMLOGAppUnlinkUserDetailsToDBXOptional(object: DBTEAMLOGAppUnlinkUserDetails?) -> DBXTeamLogAppUnlinkUserDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppUnlinkUserDetailsToDBX(object: object)
}

func mapDBTEAMLOGAppUnlinkUserDetailsToDBX(object: DBTEAMLOGAppUnlinkUserDetails) -> DBXTeamLogAppUnlinkUserDetails {
    DBXTeamLogAppUnlinkUserDetails(appInfo: mapDBTEAMLOGAppLogInfoToDBX(object: object.appInfo))
}

func mapDBTEAMLOGAppUnlinkUserTypeToDBXOptional(object: DBTEAMLOGAppUnlinkUserType?) -> DBXTeamLogAppUnlinkUserType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAppUnlinkUserTypeToDBX(object: object)
}

func mapDBTEAMLOGAppUnlinkUserTypeToDBX(object: DBTEAMLOGAppUnlinkUserType) -> DBXTeamLogAppUnlinkUserType {
    DBXTeamLogAppUnlinkUserType(description_: object.description_)
}

func mapDBTEAMLOGApplyNamingConventionDetailsToDBXOptional(object: DBTEAMLOGApplyNamingConventionDetails?) -> DBXTeamLogApplyNamingConventionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGApplyNamingConventionDetailsToDBX(object: object)
}

func mapDBTEAMLOGApplyNamingConventionDetailsToDBX(object: DBTEAMLOGApplyNamingConventionDetails) -> DBXTeamLogApplyNamingConventionDetails {
    DBXTeamLogApplyNamingConventionDetails()
}

func mapDBTEAMLOGApplyNamingConventionTypeToDBXOptional(object: DBTEAMLOGApplyNamingConventionType?) -> DBXTeamLogApplyNamingConventionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGApplyNamingConventionTypeToDBX(object: object)
}

func mapDBTEAMLOGApplyNamingConventionTypeToDBX(object: DBTEAMLOGApplyNamingConventionType) -> DBXTeamLogApplyNamingConventionType {
    DBXTeamLogApplyNamingConventionType(description_: object.description_)
}

func mapDBTEAMLOGAssetLogInfoToDBXOptional(object: DBTEAMLOGAssetLogInfo?) -> DBXTeamLogAssetLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGAssetLogInfoToDBX(object: object)
}

func mapDBTEAMLOGAssetLogInfoToDBX(object: DBTEAMLOGAssetLogInfo) -> DBXTeamLogAssetLogInfo {
    if object.isFile() {
        let file = mapDBTEAMLOGFileLogInfoToDBX(object: object.file)
        return DBXTeamLogAssetLogInfo.factory(swift: .file(file.subSwift))
    }
    if object.isFolder() {
        let folder = mapDBTEAMLOGFolderLogInfoToDBX(object: object.folder)
        return DBXTeamLogAssetLogInfo.factory(swift: .folder(folder.subSwift))
    }
    if object.isPaperDocument() {
        let paperDocument = mapDBTEAMLOGPaperDocumentLogInfoToDBX(object: object.paperDocument)
        return DBXTeamLogAssetLogInfo.factory(swift: .paperDocument(paperDocument.swift))
    }
    if object.isPaperFolder() {
        let paperFolder = mapDBTEAMLOGPaperFolderLogInfoToDBX(object: object.paperFolder)
        return DBXTeamLogAssetLogInfo.factory(swift: .paperFolder(paperFolder.swift))
    }
    if object.isShowcaseDocument() {
        let showcaseDocument = mapDBTEAMLOGShowcaseDocumentLogInfoToDBX(object: object.showcaseDocument)
        return DBXTeamLogAssetLogInfo.factory(swift: .showcaseDocument(showcaseDocument.swift))
    }
    if object.isOther() {
        return DBXTeamLogAssetLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGBackupAdminInvitationSentDetailsToDBXOptional(object: DBTEAMLOGBackupAdminInvitationSentDetails?)
    -> DBXTeamLogBackupAdminInvitationSentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBackupAdminInvitationSentDetailsToDBX(object: object)
}

func mapDBTEAMLOGBackupAdminInvitationSentDetailsToDBX(object: DBTEAMLOGBackupAdminInvitationSentDetails) -> DBXTeamLogBackupAdminInvitationSentDetails {
    DBXTeamLogBackupAdminInvitationSentDetails()
}

func mapDBTEAMLOGBackupAdminInvitationSentTypeToDBXOptional(object: DBTEAMLOGBackupAdminInvitationSentType?) -> DBXTeamLogBackupAdminInvitationSentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBackupAdminInvitationSentTypeToDBX(object: object)
}

func mapDBTEAMLOGBackupAdminInvitationSentTypeToDBX(object: DBTEAMLOGBackupAdminInvitationSentType) -> DBXTeamLogBackupAdminInvitationSentType {
    DBXTeamLogBackupAdminInvitationSentType(description_: object.description_)
}

func mapDBTEAMLOGBackupInvitationOpenedDetailsToDBXOptional(object: DBTEAMLOGBackupInvitationOpenedDetails?) -> DBXTeamLogBackupInvitationOpenedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBackupInvitationOpenedDetailsToDBX(object: object)
}

func mapDBTEAMLOGBackupInvitationOpenedDetailsToDBX(object: DBTEAMLOGBackupInvitationOpenedDetails) -> DBXTeamLogBackupInvitationOpenedDetails {
    DBXTeamLogBackupInvitationOpenedDetails()
}

func mapDBTEAMLOGBackupInvitationOpenedTypeToDBXOptional(object: DBTEAMLOGBackupInvitationOpenedType?) -> DBXTeamLogBackupInvitationOpenedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBackupInvitationOpenedTypeToDBX(object: object)
}

func mapDBTEAMLOGBackupInvitationOpenedTypeToDBX(object: DBTEAMLOGBackupInvitationOpenedType) -> DBXTeamLogBackupInvitationOpenedType {
    DBXTeamLogBackupInvitationOpenedType(description_: object.description_)
}

func mapDBTEAMLOGBackupStatusToDBXOptional(object: DBTEAMLOGBackupStatus?) -> DBXTeamLogBackupStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBackupStatusToDBX(object: object)
}

func mapDBTEAMLOGBackupStatusToDBX(object: DBTEAMLOGBackupStatus) -> DBXTeamLogBackupStatus {
    if object.isDisabled() {
        return DBXTeamLogBackupStatusDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogBackupStatusEnabled()
    }
    if object.isOther() {
        return DBXTeamLogBackupStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGBinderAddPageDetailsToDBXOptional(object: DBTEAMLOGBinderAddPageDetails?) -> DBXTeamLogBinderAddPageDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderAddPageDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderAddPageDetailsToDBX(object: DBTEAMLOGBinderAddPageDetails) -> DBXTeamLogBinderAddPageDetails {
    DBXTeamLogBinderAddPageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderAddPageTypeToDBXOptional(object: DBTEAMLOGBinderAddPageType?) -> DBXTeamLogBinderAddPageType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderAddPageTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderAddPageTypeToDBX(object: DBTEAMLOGBinderAddPageType) -> DBXTeamLogBinderAddPageType {
    DBXTeamLogBinderAddPageType(description_: object.description_)
}

func mapDBTEAMLOGBinderAddSectionDetailsToDBXOptional(object: DBTEAMLOGBinderAddSectionDetails?) -> DBXTeamLogBinderAddSectionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderAddSectionDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderAddSectionDetailsToDBX(object: DBTEAMLOGBinderAddSectionDetails) -> DBXTeamLogBinderAddSectionDetails {
    DBXTeamLogBinderAddSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderAddSectionTypeToDBXOptional(object: DBTEAMLOGBinderAddSectionType?) -> DBXTeamLogBinderAddSectionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderAddSectionTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderAddSectionTypeToDBX(object: DBTEAMLOGBinderAddSectionType) -> DBXTeamLogBinderAddSectionType {
    DBXTeamLogBinderAddSectionType(description_: object.description_)
}

func mapDBTEAMLOGBinderRemovePageDetailsToDBXOptional(object: DBTEAMLOGBinderRemovePageDetails?) -> DBXTeamLogBinderRemovePageDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRemovePageDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderRemovePageDetailsToDBX(object: DBTEAMLOGBinderRemovePageDetails) -> DBXTeamLogBinderRemovePageDetails {
    DBXTeamLogBinderRemovePageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderRemovePageTypeToDBXOptional(object: DBTEAMLOGBinderRemovePageType?) -> DBXTeamLogBinderRemovePageType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRemovePageTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderRemovePageTypeToDBX(object: DBTEAMLOGBinderRemovePageType) -> DBXTeamLogBinderRemovePageType {
    DBXTeamLogBinderRemovePageType(description_: object.description_)
}

func mapDBTEAMLOGBinderRemoveSectionDetailsToDBXOptional(object: DBTEAMLOGBinderRemoveSectionDetails?) -> DBXTeamLogBinderRemoveSectionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRemoveSectionDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderRemoveSectionDetailsToDBX(object: DBTEAMLOGBinderRemoveSectionDetails) -> DBXTeamLogBinderRemoveSectionDetails {
    DBXTeamLogBinderRemoveSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderRemoveSectionTypeToDBXOptional(object: DBTEAMLOGBinderRemoveSectionType?) -> DBXTeamLogBinderRemoveSectionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRemoveSectionTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderRemoveSectionTypeToDBX(object: DBTEAMLOGBinderRemoveSectionType) -> DBXTeamLogBinderRemoveSectionType {
    DBXTeamLogBinderRemoveSectionType(description_: object.description_)
}

func mapDBTEAMLOGBinderRenamePageDetailsToDBXOptional(object: DBTEAMLOGBinderRenamePageDetails?) -> DBXTeamLogBinderRenamePageDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRenamePageDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderRenamePageDetailsToDBX(object: DBTEAMLOGBinderRenamePageDetails) -> DBXTeamLogBinderRenamePageDetails {
    DBXTeamLogBinderRenamePageDetails(
        eventUuid: object.eventUuid,
        docTitle: object.docTitle,
        binderItemName: object.binderItemName,
        previousBinderItemName: object.previousBinderItemName
    )
}

func mapDBTEAMLOGBinderRenamePageTypeToDBXOptional(object: DBTEAMLOGBinderRenamePageType?) -> DBXTeamLogBinderRenamePageType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRenamePageTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderRenamePageTypeToDBX(object: DBTEAMLOGBinderRenamePageType) -> DBXTeamLogBinderRenamePageType {
    DBXTeamLogBinderRenamePageType(description_: object.description_)
}

func mapDBTEAMLOGBinderRenameSectionDetailsToDBXOptional(object: DBTEAMLOGBinderRenameSectionDetails?) -> DBXTeamLogBinderRenameSectionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRenameSectionDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderRenameSectionDetailsToDBX(object: DBTEAMLOGBinderRenameSectionDetails) -> DBXTeamLogBinderRenameSectionDetails {
    DBXTeamLogBinderRenameSectionDetails(
        eventUuid: object.eventUuid,
        docTitle: object.docTitle,
        binderItemName: object.binderItemName,
        previousBinderItemName: object.previousBinderItemName
    )
}

func mapDBTEAMLOGBinderRenameSectionTypeToDBXOptional(object: DBTEAMLOGBinderRenameSectionType?) -> DBXTeamLogBinderRenameSectionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderRenameSectionTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderRenameSectionTypeToDBX(object: DBTEAMLOGBinderRenameSectionType) -> DBXTeamLogBinderRenameSectionType {
    DBXTeamLogBinderRenameSectionType(description_: object.description_)
}

func mapDBTEAMLOGBinderReorderPageDetailsToDBXOptional(object: DBTEAMLOGBinderReorderPageDetails?) -> DBXTeamLogBinderReorderPageDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderReorderPageDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderReorderPageDetailsToDBX(object: DBTEAMLOGBinderReorderPageDetails) -> DBXTeamLogBinderReorderPageDetails {
    DBXTeamLogBinderReorderPageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderReorderPageTypeToDBXOptional(object: DBTEAMLOGBinderReorderPageType?) -> DBXTeamLogBinderReorderPageType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderReorderPageTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderReorderPageTypeToDBX(object: DBTEAMLOGBinderReorderPageType) -> DBXTeamLogBinderReorderPageType {
    DBXTeamLogBinderReorderPageType(description_: object.description_)
}

func mapDBTEAMLOGBinderReorderSectionDetailsToDBXOptional(object: DBTEAMLOGBinderReorderSectionDetails?) -> DBXTeamLogBinderReorderSectionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderReorderSectionDetailsToDBX(object: object)
}

func mapDBTEAMLOGBinderReorderSectionDetailsToDBX(object: DBTEAMLOGBinderReorderSectionDetails) -> DBXTeamLogBinderReorderSectionDetails {
    DBXTeamLogBinderReorderSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBTEAMLOGBinderReorderSectionTypeToDBXOptional(object: DBTEAMLOGBinderReorderSectionType?) -> DBXTeamLogBinderReorderSectionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGBinderReorderSectionTypeToDBX(object: object)
}

func mapDBTEAMLOGBinderReorderSectionTypeToDBX(object: DBTEAMLOGBinderReorderSectionType) -> DBXTeamLogBinderReorderSectionType {
    DBXTeamLogBinderReorderSectionType(description_: object.description_)
}

func mapDBTEAMLOGCameraUploadsPolicyToDBXOptional(object: DBTEAMLOGCameraUploadsPolicy?) -> DBXTeamLogCameraUploadsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCameraUploadsPolicyToDBX(object: object)
}

func mapDBTEAMLOGCameraUploadsPolicyToDBX(object: DBTEAMLOGCameraUploadsPolicy) -> DBXTeamLogCameraUploadsPolicy {
    if object.isDisabled() {
        return DBXTeamLogCameraUploadsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogCameraUploadsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogCameraUploadsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGCameraUploadsPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGCameraUploadsPolicyChangedDetails?)
    -> DBXTeamLogCameraUploadsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCameraUploadsPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGCameraUploadsPolicyChangedDetailsToDBX(object: DBTEAMLOGCameraUploadsPolicyChangedDetails) -> DBXTeamLogCameraUploadsPolicyChangedDetails {
    DBXTeamLogCameraUploadsPolicyChangedDetails(
        newValue: mapDBTEAMLOGCameraUploadsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGCameraUploadsPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGCameraUploadsPolicyChangedTypeToDBXOptional(object: DBTEAMLOGCameraUploadsPolicyChangedType?) -> DBXTeamLogCameraUploadsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCameraUploadsPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGCameraUploadsPolicyChangedTypeToDBX(object: DBTEAMLOGCameraUploadsPolicyChangedType) -> DBXTeamLogCameraUploadsPolicyChangedType {
    DBXTeamLogCameraUploadsPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGCaptureTranscriptPolicyToDBXOptional(object: DBTEAMLOGCaptureTranscriptPolicy?) -> DBXTeamLogCaptureTranscriptPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCaptureTranscriptPolicyToDBX(object: object)
}

func mapDBTEAMLOGCaptureTranscriptPolicyToDBX(object: DBTEAMLOGCaptureTranscriptPolicy) -> DBXTeamLogCaptureTranscriptPolicy {
    if object.isDefault_() {
        return DBXTeamLogCaptureTranscriptPolicyDefault_()
    }
    if object.isDisabled() {
        return DBXTeamLogCaptureTranscriptPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogCaptureTranscriptPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogCaptureTranscriptPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGCaptureTranscriptPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGCaptureTranscriptPolicyChangedDetails?)
    -> DBXTeamLogCaptureTranscriptPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCaptureTranscriptPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGCaptureTranscriptPolicyChangedDetailsToDBX(object: DBTEAMLOGCaptureTranscriptPolicyChangedDetails)
    -> DBXTeamLogCaptureTranscriptPolicyChangedDetails {
    DBXTeamLogCaptureTranscriptPolicyChangedDetails(
        newValue: mapDBTEAMLOGCaptureTranscriptPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGCaptureTranscriptPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGCaptureTranscriptPolicyChangedTypeToDBXOptional(object: DBTEAMLOGCaptureTranscriptPolicyChangedType?)
    -> DBXTeamLogCaptureTranscriptPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCaptureTranscriptPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGCaptureTranscriptPolicyChangedTypeToDBX(object: DBTEAMLOGCaptureTranscriptPolicyChangedType) -> DBXTeamLogCaptureTranscriptPolicyChangedType {
    DBXTeamLogCaptureTranscriptPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGCertificateToDBXOptional(object: DBTEAMLOGCertificate?) -> DBXTeamLogCertificate? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCertificateToDBX(object: object)
}

func mapDBTEAMLOGCertificateToDBX(object: DBTEAMLOGCertificate) -> DBXTeamLogCertificate {
    DBXTeamLogCertificate(
        subject: object.subject,
        issuer: object.issuer,
        issueDate: object.issueDate,
        expirationDate: object.expirationDate,
        serialNumber: object.serialNumber,
        sha1Fingerprint: object.sha1Fingerprint,
        commonName: object.commonName
    )
}

func mapDBTEAMLOGChangeLinkExpirationPolicyToDBXOptional(object: DBTEAMLOGChangeLinkExpirationPolicy?) -> DBXTeamLogChangeLinkExpirationPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGChangeLinkExpirationPolicyToDBX(object: object)
}

func mapDBTEAMLOGChangeLinkExpirationPolicyToDBX(object: DBTEAMLOGChangeLinkExpirationPolicy) -> DBXTeamLogChangeLinkExpirationPolicy {
    if object.isAllowed() {
        return DBXTeamLogChangeLinkExpirationPolicyAllowed()
    }
    if object.isNotAllowed() {
        return DBXTeamLogChangeLinkExpirationPolicyNotAllowed()
    }
    if object.isOther() {
        return DBXTeamLogChangeLinkExpirationPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGChangedEnterpriseAdminRoleDetailsToDBXOptional(object: DBTEAMLOGChangedEnterpriseAdminRoleDetails?)
    -> DBXTeamLogChangedEnterpriseAdminRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGChangedEnterpriseAdminRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGChangedEnterpriseAdminRoleDetailsToDBX(object: DBTEAMLOGChangedEnterpriseAdminRoleDetails) -> DBXTeamLogChangedEnterpriseAdminRoleDetails {
    DBXTeamLogChangedEnterpriseAdminRoleDetails(
        previousValue: mapDBTEAMLOGFedAdminRoleToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGFedAdminRoleToDBX(object: object.dNewValue),
        teamName: object.teamName
    )
}

func mapDBTEAMLOGChangedEnterpriseAdminRoleTypeToDBXOptional(object: DBTEAMLOGChangedEnterpriseAdminRoleType?) -> DBXTeamLogChangedEnterpriseAdminRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGChangedEnterpriseAdminRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGChangedEnterpriseAdminRoleTypeToDBX(object: DBTEAMLOGChangedEnterpriseAdminRoleType) -> DBXTeamLogChangedEnterpriseAdminRoleType {
    DBXTeamLogChangedEnterpriseAdminRoleType(description_: object.description_)
}

func mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsToDBXOptional(object: DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails?)
    -> DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsToDBX(object: DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails)
    -> DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails {
    DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails(
        action: mapDBTEAMLOGFedHandshakeActionToDBX(object: object.action),
        additionalInfo: mapDBTEAMLOGFederationStatusChangeAdditionalInfoToDBX(object: object.additionalInfo),
        previousValue: mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeToDBXOptional(object: DBTEAMLOGChangedEnterpriseConnectedTeamStatusType?)
    -> DBXTeamLogChangedEnterpriseConnectedTeamStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeToDBX(object: DBTEAMLOGChangedEnterpriseConnectedTeamStatusType)
    -> DBXTeamLogChangedEnterpriseConnectedTeamStatusType {
    DBXTeamLogChangedEnterpriseConnectedTeamStatusType(description_: object.description_)
}

func mapDBTEAMLOGClassificationChangePolicyDetailsToDBXOptional(object: DBTEAMLOGClassificationChangePolicyDetails?)
    -> DBXTeamLogClassificationChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGClassificationChangePolicyDetailsToDBX(object: DBTEAMLOGClassificationChangePolicyDetails) -> DBXTeamLogClassificationChangePolicyDetails {
    DBXTeamLogClassificationChangePolicyDetails(
        previousValue: mapDBTEAMLOGClassificationPolicyEnumWrapperToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGClassificationPolicyEnumWrapperToDBX(object: object.dNewValue),
        classificationType: mapDBTEAMLOGClassificationTypeToDBX(object: object.classificationType)
    )
}

func mapDBTEAMLOGClassificationChangePolicyTypeToDBXOptional(object: DBTEAMLOGClassificationChangePolicyType?) -> DBXTeamLogClassificationChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGClassificationChangePolicyTypeToDBX(object: DBTEAMLOGClassificationChangePolicyType) -> DBXTeamLogClassificationChangePolicyType {
    DBXTeamLogClassificationChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGClassificationCreateReportDetailsToDBXOptional(object: DBTEAMLOGClassificationCreateReportDetails?)
    -> DBXTeamLogClassificationCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGClassificationCreateReportDetailsToDBX(object: DBTEAMLOGClassificationCreateReportDetails) -> DBXTeamLogClassificationCreateReportDetails {
    DBXTeamLogClassificationCreateReportDetails()
}

func mapDBTEAMLOGClassificationCreateReportFailDetailsToDBXOptional(object: DBTEAMLOGClassificationCreateReportFailDetails?)
    -> DBXTeamLogClassificationCreateReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationCreateReportFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGClassificationCreateReportFailDetailsToDBX(object: DBTEAMLOGClassificationCreateReportFailDetails)
    -> DBXTeamLogClassificationCreateReportFailDetails {
    DBXTeamLogClassificationCreateReportFailDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGClassificationCreateReportFailTypeToDBXOptional(object: DBTEAMLOGClassificationCreateReportFailType?)
    -> DBXTeamLogClassificationCreateReportFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationCreateReportFailTypeToDBX(object: object)
}

func mapDBTEAMLOGClassificationCreateReportFailTypeToDBX(object: DBTEAMLOGClassificationCreateReportFailType) -> DBXTeamLogClassificationCreateReportFailType {
    DBXTeamLogClassificationCreateReportFailType(description_: object.description_)
}

func mapDBTEAMLOGClassificationCreateReportTypeToDBXOptional(object: DBTEAMLOGClassificationCreateReportType?) -> DBXTeamLogClassificationCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGClassificationCreateReportTypeToDBX(object: DBTEAMLOGClassificationCreateReportType) -> DBXTeamLogClassificationCreateReportType {
    DBXTeamLogClassificationCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGClassificationPolicyEnumWrapperToDBXOptional(object: DBTEAMLOGClassificationPolicyEnumWrapper?) -> DBXTeamLogClassificationPolicyEnumWrapper? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationPolicyEnumWrapperToDBX(object: object)
}

func mapDBTEAMLOGClassificationPolicyEnumWrapperToDBX(object: DBTEAMLOGClassificationPolicyEnumWrapper) -> DBXTeamLogClassificationPolicyEnumWrapper {
    if object.isDisabled() {
        return DBXTeamLogClassificationPolicyEnumWrapperDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogClassificationPolicyEnumWrapperEnabled()
    }
    if object.isMemberAndTeamFolders() {
        return DBXTeamLogClassificationPolicyEnumWrapperMemberAndTeamFolders()
    }
    if object.isTeamFolders() {
        return DBXTeamLogClassificationPolicyEnumWrapperTeamFolders()
    }
    if object.isOther() {
        return DBXTeamLogClassificationPolicyEnumWrapperOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGClassificationTypeToDBXOptional(object: DBTEAMLOGClassificationType?) -> DBXTeamLogClassificationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGClassificationTypeToDBX(object: object)
}

func mapDBTEAMLOGClassificationTypeToDBX(object: DBTEAMLOGClassificationType) -> DBXTeamLogClassificationType {
    if object.isPersonalInformation() {
        return DBXTeamLogClassificationTypePersonalInformation()
    }
    if object.isPii() {
        return DBXTeamLogClassificationTypePii()
    }
    if object.isOther() {
        return DBXTeamLogClassificationTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGCollectionShareDetailsToDBXOptional(object: DBTEAMLOGCollectionShareDetails?) -> DBXTeamLogCollectionShareDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCollectionShareDetailsToDBX(object: object)
}

func mapDBTEAMLOGCollectionShareDetailsToDBX(object: DBTEAMLOGCollectionShareDetails) -> DBXTeamLogCollectionShareDetails {
    DBXTeamLogCollectionShareDetails(albumName: object.albumName)
}

func mapDBTEAMLOGCollectionShareTypeToDBXOptional(object: DBTEAMLOGCollectionShareType?) -> DBXTeamLogCollectionShareType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCollectionShareTypeToDBX(object: object)
}

func mapDBTEAMLOGCollectionShareTypeToDBX(object: DBTEAMLOGCollectionShareType) -> DBXTeamLogCollectionShareType {
    DBXTeamLogCollectionShareType(description_: object.description_)
}

func mapDBTEAMLOGComputerBackupPolicyToDBXOptional(object: DBTEAMLOGComputerBackupPolicy?) -> DBXTeamLogComputerBackupPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGComputerBackupPolicyToDBX(object: object)
}

func mapDBTEAMLOGComputerBackupPolicyToDBX(object: DBTEAMLOGComputerBackupPolicy) -> DBXTeamLogComputerBackupPolicy {
    if object.isDefault_() {
        return DBXTeamLogComputerBackupPolicyDefault_()
    }
    if object.isDisabled() {
        return DBXTeamLogComputerBackupPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogComputerBackupPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogComputerBackupPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGComputerBackupPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGComputerBackupPolicyChangedDetails?)
    -> DBXTeamLogComputerBackupPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGComputerBackupPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGComputerBackupPolicyChangedDetailsToDBX(object: DBTEAMLOGComputerBackupPolicyChangedDetails) -> DBXTeamLogComputerBackupPolicyChangedDetails {
    DBXTeamLogComputerBackupPolicyChangedDetails(
        newValue: mapDBTEAMLOGComputerBackupPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGComputerBackupPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGComputerBackupPolicyChangedTypeToDBXOptional(object: DBTEAMLOGComputerBackupPolicyChangedType?) -> DBXTeamLogComputerBackupPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGComputerBackupPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGComputerBackupPolicyChangedTypeToDBX(object: DBTEAMLOGComputerBackupPolicyChangedType) -> DBXTeamLogComputerBackupPolicyChangedType {
    DBXTeamLogComputerBackupPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGConnectedTeamNameToDBXOptional(object: DBTEAMLOGConnectedTeamName?) -> DBXTeamLogConnectedTeamName? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGConnectedTeamNameToDBX(object: object)
}

func mapDBTEAMLOGConnectedTeamNameToDBX(object: DBTEAMLOGConnectedTeamName) -> DBXTeamLogConnectedTeamName {
    DBXTeamLogConnectedTeamName(team: object.team)
}

func mapDBTEAMLOGContentAdministrationPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGContentAdministrationPolicyChangedDetails?)
    -> DBXTeamLogContentAdministrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGContentAdministrationPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGContentAdministrationPolicyChangedDetailsToDBX(object: DBTEAMLOGContentAdministrationPolicyChangedDetails)
    -> DBXTeamLogContentAdministrationPolicyChangedDetails {
    DBXTeamLogContentAdministrationPolicyChangedDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGContentAdministrationPolicyChangedTypeToDBXOptional(object: DBTEAMLOGContentAdministrationPolicyChangedType?)
    -> DBXTeamLogContentAdministrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGContentAdministrationPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGContentAdministrationPolicyChangedTypeToDBX(object: DBTEAMLOGContentAdministrationPolicyChangedType)
    -> DBXTeamLogContentAdministrationPolicyChangedType {
    DBXTeamLogContentAdministrationPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGContentPermanentDeletePolicyToDBXOptional(object: DBTEAMLOGContentPermanentDeletePolicy?) -> DBXTeamLogContentPermanentDeletePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGContentPermanentDeletePolicyToDBX(object: object)
}

func mapDBTEAMLOGContentPermanentDeletePolicyToDBX(object: DBTEAMLOGContentPermanentDeletePolicy) -> DBXTeamLogContentPermanentDeletePolicy {
    if object.isDisabled() {
        return DBXTeamLogContentPermanentDeletePolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogContentPermanentDeletePolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogContentPermanentDeletePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGContextLogInfoToDBXOptional(object: DBTEAMLOGContextLogInfo?) -> DBXTeamLogContextLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGContextLogInfoToDBX(object: object)
}

func mapDBTEAMLOGContextLogInfoToDBX(object: DBTEAMLOGContextLogInfo) -> DBXTeamLogContextLogInfo {
    if object.isAnonymous() {
        return DBXTeamLogContextLogInfoAnonymous()
    }
    if object.isNonTeamMember() {
        let nonTeamMember = mapDBTEAMLOGNonTeamMemberLogInfoToDBX(object: object.nonTeamMember)
        return DBXTeamLogContextLogInfo.factory(swift: .nonTeamMember(nonTeamMember.subSwift))
    }
    if object.isOrganizationTeam() {
        let organizationTeam = mapDBTEAMLOGTeamLogInfoToDBX(object: object.organizationTeam)
        return DBXTeamLogContextLogInfo.factory(swift: .organizationTeam(organizationTeam.swift))
    }
    if object.isTeam() {
        return DBXTeamLogContextLogInfoTeam()
    }
    if object.isTeamMember() {
        let teamMember = mapDBTEAMLOGTeamMemberLogInfoToDBX(object: object.teamMember)
        return DBXTeamLogContextLogInfo.factory(swift: .teamMember(teamMember.subSwift))
    }
    if object.isTrustedNonTeamMember() {
        let trustedNonTeamMember = mapDBTEAMLOGTrustedNonTeamMemberLogInfoToDBX(object: object.trustedNonTeamMember)
        return DBXTeamLogContextLogInfo.factory(swift: .trustedNonTeamMember(trustedNonTeamMember.subSwift))
    }
    if object.isOther() {
        return DBXTeamLogContextLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGCreateFolderDetailsToDBXOptional(object: DBTEAMLOGCreateFolderDetails?) -> DBXTeamLogCreateFolderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCreateFolderDetailsToDBX(object: object)
}

func mapDBTEAMLOGCreateFolderDetailsToDBX(object: DBTEAMLOGCreateFolderDetails) -> DBXTeamLogCreateFolderDetails {
    DBXTeamLogCreateFolderDetails()
}

func mapDBTEAMLOGCreateFolderTypeToDBXOptional(object: DBTEAMLOGCreateFolderType?) -> DBXTeamLogCreateFolderType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCreateFolderTypeToDBX(object: object)
}

func mapDBTEAMLOGCreateFolderTypeToDBX(object: DBTEAMLOGCreateFolderType) -> DBXTeamLogCreateFolderType {
    DBXTeamLogCreateFolderType(description_: object.description_)
}

func mapDBTEAMLOGCreateTeamInviteLinkDetailsToDBXOptional(object: DBTEAMLOGCreateTeamInviteLinkDetails?) -> DBXTeamLogCreateTeamInviteLinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCreateTeamInviteLinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGCreateTeamInviteLinkDetailsToDBX(object: DBTEAMLOGCreateTeamInviteLinkDetails) -> DBXTeamLogCreateTeamInviteLinkDetails {
    DBXTeamLogCreateTeamInviteLinkDetails(linkUrl: object.linkUrl, expiryDate: object.expiryDate)
}

func mapDBTEAMLOGCreateTeamInviteLinkTypeToDBXOptional(object: DBTEAMLOGCreateTeamInviteLinkType?) -> DBXTeamLogCreateTeamInviteLinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGCreateTeamInviteLinkTypeToDBX(object: object)
}

func mapDBTEAMLOGCreateTeamInviteLinkTypeToDBX(object: DBTEAMLOGCreateTeamInviteLinkType) -> DBXTeamLogCreateTeamInviteLinkType {
    DBXTeamLogCreateTeamInviteLinkType(description_: object.description_)
}

func mapDBTEAMLOGDataPlacementRestrictionChangePolicyDetailsToDBXOptional(object: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails?)
    -> DBXTeamLogDataPlacementRestrictionChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataPlacementRestrictionChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGDataPlacementRestrictionChangePolicyDetailsToDBX(object: DBTEAMLOGDataPlacementRestrictionChangePolicyDetails)
    -> DBXTeamLogDataPlacementRestrictionChangePolicyDetails {
    DBXTeamLogDataPlacementRestrictionChangePolicyDetails(
        previousValue: mapDBTEAMLOGPlacementRestrictionToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGPlacementRestrictionToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGDataPlacementRestrictionChangePolicyTypeToDBXOptional(object: DBTEAMLOGDataPlacementRestrictionChangePolicyType?)
    -> DBXTeamLogDataPlacementRestrictionChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataPlacementRestrictionChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGDataPlacementRestrictionChangePolicyTypeToDBX(object: DBTEAMLOGDataPlacementRestrictionChangePolicyType)
    -> DBXTeamLogDataPlacementRestrictionChangePolicyType {
    DBXTeamLogDataPlacementRestrictionChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsToDBXOptional(object: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails?)
    -> DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsToDBX(object: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails)
    -> DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails {
    DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails(placementRestriction: mapDBTEAMLOGPlacementRestrictionToDBX(object: object.placementRestriction))
}

func mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeToDBXOptional(object: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType?)
    -> DBXTeamLogDataPlacementRestrictionSatisfyPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeToDBX(object: DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType)
    -> DBXTeamLogDataPlacementRestrictionSatisfyPolicyType {
    DBXTeamLogDataPlacementRestrictionSatisfyPolicyType(description_: object.description_)
}

func mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsToDBXOptional(object: DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails?)
    -> DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsToDBX(object: object)
}

func mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsToDBX(object: DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails)
    -> DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails {
    DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails()
}

func mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeToDBXOptional(object: DBTEAMLOGDataResidencyMigrationRequestSuccessfulType?)
    -> DBXTeamLogDataResidencyMigrationRequestSuccessfulType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeToDBX(object: object)
}

func mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeToDBX(object: DBTEAMLOGDataResidencyMigrationRequestSuccessfulType)
    -> DBXTeamLogDataResidencyMigrationRequestSuccessfulType {
    DBXTeamLogDataResidencyMigrationRequestSuccessfulType(description_: object.description_)
}

func mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsToDBXOptional(object: DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails?)
    -> DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsToDBX(object: object)
}

func mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsToDBX(object: DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails)
    -> DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails {
    DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails()
}

func mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeToDBXOptional(object: DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType?)
    -> DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeToDBX(object: object)
}

func mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeToDBX(object: DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType)
    -> DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType {
    DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType(description_: object.description_)
}

func mapDBTEAMLOGDefaultLinkExpirationDaysPolicyToDBXOptional(object: DBTEAMLOGDefaultLinkExpirationDaysPolicy?) -> DBXTeamLogDefaultLinkExpirationDaysPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDefaultLinkExpirationDaysPolicyToDBX(object: object)
}

func mapDBTEAMLOGDefaultLinkExpirationDaysPolicyToDBX(object: DBTEAMLOGDefaultLinkExpirationDaysPolicy) -> DBXTeamLogDefaultLinkExpirationDaysPolicy {
    if object.isDay1() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay1()
    }
    if object.isDay180() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay180()
    }
    if object.isDay3() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay3()
    }
    if object.isDay30() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay30()
    }
    if object.isDay7() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay7()
    }
    if object.isDay90() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyDay90()
    }
    if object.isNone() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyNone()
    }
    if object.isYear1() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyYear1()
    }
    if object.isOther() {
        return DBXTeamLogDefaultLinkExpirationDaysPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDeleteTeamInviteLinkDetailsToDBXOptional(object: DBTEAMLOGDeleteTeamInviteLinkDetails?) -> DBXTeamLogDeleteTeamInviteLinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeleteTeamInviteLinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeleteTeamInviteLinkDetailsToDBX(object: DBTEAMLOGDeleteTeamInviteLinkDetails) -> DBXTeamLogDeleteTeamInviteLinkDetails {
    DBXTeamLogDeleteTeamInviteLinkDetails(linkUrl: object.linkUrl)
}

func mapDBTEAMLOGDeleteTeamInviteLinkTypeToDBXOptional(object: DBTEAMLOGDeleteTeamInviteLinkType?) -> DBXTeamLogDeleteTeamInviteLinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeleteTeamInviteLinkTypeToDBX(object: object)
}

func mapDBTEAMLOGDeleteTeamInviteLinkTypeToDBX(object: DBTEAMLOGDeleteTeamInviteLinkType) -> DBXTeamLogDeleteTeamInviteLinkType {
    DBXTeamLogDeleteTeamInviteLinkType(description_: object.description_)
}

func mapDBTEAMLOGDeviceSessionLogInfoToDBXOptional(object: DBTEAMLOGDeviceSessionLogInfo?) -> DBXTeamLogDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGDeviceSessionLogInfoToDBX(object: DBTEAMLOGDeviceSessionLogInfo) -> DBXTeamLogDeviceSessionLogInfo {
    switch object {
    case let object as DBTEAMLOGDesktopDeviceSessionLogInfo:
        return DBXTeamLogDesktopDeviceSessionLogInfo(
            hostName: object.hostName,
            clientType: mapDBTEAMDesktopPlatformToDBX(object: object.clientType),
            platform: object.platform,
            isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBTEAMLOGDesktopSessionLogInfoToDBXOptional(object: object.sessionInfo),
            clientVersion: object.clientVersion
        )
    case let object as DBTEAMLOGMobileDeviceSessionLogInfo:
        return DBXTeamLogMobileDeviceSessionLogInfo(
            deviceName: object.deviceName,
            clientType: mapDBTEAMMobileClientPlatformToDBX(object: object.clientType),
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBTEAMLOGMobileSessionLogInfoToDBXOptional(object: object.sessionInfo),
            clientVersion: object.clientVersion,
            osVersion: object.osVersion,
            lastCarrier: object.lastCarrier
        )
    case let object as DBTEAMLOGWebDeviceSessionLogInfo:
        return DBXTeamLogWebDeviceSessionLogInfo(
            userAgent: object.userAgent,
            os: object.os,
            browser: object.browser,
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBTEAMLOGWebSessionLogInfoToDBXOptional(object: object.sessionInfo)
        )
    case let object as DBTEAMLOGLegacyDeviceSessionLogInfo:
        return DBXTeamLogLegacyDeviceSessionLogInfo(
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBTEAMLOGSessionLogInfoToDBXOptional(object: object.sessionInfo),
            displayName: object.displayName,
            isEmmManaged: object.isEmmManaged,
            platform: object.platform,
            macAddress: object.macAddress,
            osVersion: object.osVersion,
            deviceType: object.deviceType,
            clientVersion: object.clientVersion,
            legacyUniqId: object.legacyUniqId
        )
    default:
        return DBXTeamLogDeviceSessionLogInfo(ipAddress: object.ipAddress, created: object.created, updated: object.updated)
    }
}

func mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBXOptional(object: DBTEAMLOGDesktopDeviceSessionLogInfo?) -> DBXTeamLogDesktopDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: DBTEAMLOGDesktopDeviceSessionLogInfo) -> DBXTeamLogDesktopDeviceSessionLogInfo {
    DBXTeamLogDesktopDeviceSessionLogInfo(
        hostName: object.hostName,
        clientType: mapDBTEAMDesktopPlatformToDBX(object: object.clientType),
        platform: object.platform,
        isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBTEAMLOGDesktopSessionLogInfoToDBXOptional(object: object.sessionInfo),
        clientVersion: object.clientVersion
    )
}

func mapDBTEAMLOGSessionLogInfoToDBXOptional(object: DBTEAMLOGSessionLogInfo?) -> DBXTeamLogSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGSessionLogInfoToDBX(object: DBTEAMLOGSessionLogInfo) -> DBXTeamLogSessionLogInfo {
    switch object {
    case let object as DBTEAMLOGWebSessionLogInfo:
        return DBXTeamLogWebSessionLogInfo(sessionId: object.sessionId)
    case let object as DBTEAMLOGDesktopSessionLogInfo:
        return DBXTeamLogDesktopSessionLogInfo(sessionId: object.sessionId)
    case let object as DBTEAMLOGMobileSessionLogInfo:
        return DBXTeamLogMobileSessionLogInfo(sessionId: object.sessionId)
    default:
        return DBXTeamLogSessionLogInfo(sessionId: object.sessionId)
    }
}

func mapDBTEAMLOGDesktopSessionLogInfoToDBXOptional(object: DBTEAMLOGDesktopSessionLogInfo?) -> DBXTeamLogDesktopSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDesktopSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGDesktopSessionLogInfoToDBX(object: DBTEAMLOGDesktopSessionLogInfo) -> DBXTeamLogDesktopSessionLogInfo {
    DBXTeamLogDesktopSessionLogInfo(sessionId: object.sessionId)
}

func mapDBTEAMLOGDeviceApprovalsAddExceptionDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsAddExceptionDetails?)
    -> DBXTeamLogDeviceApprovalsAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsAddExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsAddExceptionDetailsToDBX(object: DBTEAMLOGDeviceApprovalsAddExceptionDetails) -> DBXTeamLogDeviceApprovalsAddExceptionDetails {
    DBXTeamLogDeviceApprovalsAddExceptionDetails()
}

func mapDBTEAMLOGDeviceApprovalsAddExceptionTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsAddExceptionType?) -> DBXTeamLogDeviceApprovalsAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsAddExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsAddExceptionTypeToDBX(object: DBTEAMLOGDeviceApprovalsAddExceptionType) -> DBXTeamLogDeviceApprovalsAddExceptionType {
    DBXTeamLogDeviceApprovalsAddExceptionType(description_: object.description_)
}

func mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails?)
    -> DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsToDBX(object: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails)
    -> DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails {
    DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails(
        newValue: mapDBTEAMLOGDeviceApprovalsPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDeviceApprovalsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType?)
    -> DBXTeamLogDeviceApprovalsChangeDesktopPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeToDBX(object: DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType)
    -> DBXTeamLogDeviceApprovalsChangeDesktopPolicyType {
    DBXTeamLogDeviceApprovalsChangeDesktopPolicyType(description_: object.description_)
}

func mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails?)
    -> DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsToDBX(object: DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails)
    -> DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails {
    DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails(
        newValue: mapDBTEAMLOGDeviceApprovalsPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDeviceApprovalsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType?)
    -> DBXTeamLogDeviceApprovalsChangeMobilePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeToDBX(object: DBTEAMLOGDeviceApprovalsChangeMobilePolicyType)
    -> DBXTeamLogDeviceApprovalsChangeMobilePolicyType {
    DBXTeamLogDeviceApprovalsChangeMobilePolicyType(description_: object.description_)
}

func mapDBTEAMLOGDeviceApprovalsChangeOverageActionDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails?)
    -> DBXTeamLogDeviceApprovalsChangeOverageActionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeOverageActionDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeOverageActionDetailsToDBX(object: DBTEAMLOGDeviceApprovalsChangeOverageActionDetails)
    -> DBXTeamLogDeviceApprovalsChangeOverageActionDetails {
    DBXTeamLogDeviceApprovalsChangeOverageActionDetails(
        newValue: mapDBTEAMPOLICIESRolloutMethodToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESRolloutMethodToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGDeviceApprovalsChangeOverageActionTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeOverageActionType?)
    -> DBXTeamLogDeviceApprovalsChangeOverageActionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeOverageActionTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeOverageActionTypeToDBX(object: DBTEAMLOGDeviceApprovalsChangeOverageActionType)
    -> DBXTeamLogDeviceApprovalsChangeOverageActionType {
    DBXTeamLogDeviceApprovalsChangeOverageActionType(description_: object.description_)
}

func mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails?)
    -> DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsToDBX(object: DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails)
    -> DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails {
    DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails(
        newValue: mapDBTEAMLOGDeviceUnlinkPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDeviceUnlinkPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType?)
    -> DBXTeamLogDeviceApprovalsChangeUnlinkActionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeToDBX(object: DBTEAMLOGDeviceApprovalsChangeUnlinkActionType)
    -> DBXTeamLogDeviceApprovalsChangeUnlinkActionType {
    DBXTeamLogDeviceApprovalsChangeUnlinkActionType(description_: object.description_)
}

func mapDBTEAMLOGDeviceApprovalsPolicyToDBXOptional(object: DBTEAMLOGDeviceApprovalsPolicy?) -> DBXTeamLogDeviceApprovalsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsPolicyToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsPolicyToDBX(object: DBTEAMLOGDeviceApprovalsPolicy) -> DBXTeamLogDeviceApprovalsPolicy {
    if object.isLimited() {
        return DBXTeamLogDeviceApprovalsPolicyLimited()
    }
    if object.isUnlimited() {
        return DBXTeamLogDeviceApprovalsPolicyUnlimited()
    }
    if object.isOther() {
        return DBXTeamLogDeviceApprovalsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDeviceApprovalsRemoveExceptionDetailsToDBXOptional(object: DBTEAMLOGDeviceApprovalsRemoveExceptionDetails?)
    -> DBXTeamLogDeviceApprovalsRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsRemoveExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsRemoveExceptionDetailsToDBX(object: DBTEAMLOGDeviceApprovalsRemoveExceptionDetails)
    -> DBXTeamLogDeviceApprovalsRemoveExceptionDetails {
    DBXTeamLogDeviceApprovalsRemoveExceptionDetails()
}

func mapDBTEAMLOGDeviceApprovalsRemoveExceptionTypeToDBXOptional(object: DBTEAMLOGDeviceApprovalsRemoveExceptionType?)
    -> DBXTeamLogDeviceApprovalsRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceApprovalsRemoveExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceApprovalsRemoveExceptionTypeToDBX(object: DBTEAMLOGDeviceApprovalsRemoveExceptionType) -> DBXTeamLogDeviceApprovalsRemoveExceptionType {
    DBXTeamLogDeviceApprovalsRemoveExceptionType(description_: object.description_)
}

func mapDBTEAMLOGDeviceChangeIpDesktopDetailsToDBXOptional(object: DBTEAMLOGDeviceChangeIpDesktopDetails?) -> DBXTeamLogDeviceChangeIpDesktopDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpDesktopDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpDesktopDetailsToDBX(object: DBTEAMLOGDeviceChangeIpDesktopDetails) -> DBXTeamLogDeviceChangeIpDesktopDetails {
    DBXTeamLogDeviceChangeIpDesktopDetails(deviceSessionInfo: mapDBTEAMLOGDeviceSessionLogInfoToDBX(object: object.deviceSessionInfo))
}

func mapDBTEAMLOGDeviceChangeIpDesktopTypeToDBXOptional(object: DBTEAMLOGDeviceChangeIpDesktopType?) -> DBXTeamLogDeviceChangeIpDesktopType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpDesktopTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpDesktopTypeToDBX(object: DBTEAMLOGDeviceChangeIpDesktopType) -> DBXTeamLogDeviceChangeIpDesktopType {
    DBXTeamLogDeviceChangeIpDesktopType(description_: object.description_)
}

func mapDBTEAMLOGDeviceChangeIpMobileDetailsToDBXOptional(object: DBTEAMLOGDeviceChangeIpMobileDetails?) -> DBXTeamLogDeviceChangeIpMobileDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpMobileDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpMobileDetailsToDBX(object: DBTEAMLOGDeviceChangeIpMobileDetails) -> DBXTeamLogDeviceChangeIpMobileDetails {
    DBXTeamLogDeviceChangeIpMobileDetails(deviceSessionInfo: mapDBTEAMLOGDeviceSessionLogInfoToDBXOptional(object: object.deviceSessionInfo))
}

func mapDBTEAMLOGDeviceChangeIpMobileTypeToDBXOptional(object: DBTEAMLOGDeviceChangeIpMobileType?) -> DBXTeamLogDeviceChangeIpMobileType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpMobileTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpMobileTypeToDBX(object: DBTEAMLOGDeviceChangeIpMobileType) -> DBXTeamLogDeviceChangeIpMobileType {
    DBXTeamLogDeviceChangeIpMobileType(description_: object.description_)
}

func mapDBTEAMLOGDeviceChangeIpWebDetailsToDBXOptional(object: DBTEAMLOGDeviceChangeIpWebDetails?) -> DBXTeamLogDeviceChangeIpWebDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpWebDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpWebDetailsToDBX(object: DBTEAMLOGDeviceChangeIpWebDetails) -> DBXTeamLogDeviceChangeIpWebDetails {
    DBXTeamLogDeviceChangeIpWebDetails(userAgent: object.userAgent)
}

func mapDBTEAMLOGDeviceChangeIpWebTypeToDBXOptional(object: DBTEAMLOGDeviceChangeIpWebType?) -> DBXTeamLogDeviceChangeIpWebType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceChangeIpWebTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceChangeIpWebTypeToDBX(object: DBTEAMLOGDeviceChangeIpWebType) -> DBXTeamLogDeviceChangeIpWebType {
    DBXTeamLogDeviceChangeIpWebType(description_: object.description_)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkFailDetailsToDBXOptional(object: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails?) -> DBXTeamLogDeviceDeleteOnUnlinkFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceDeleteOnUnlinkFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkFailDetailsToDBX(object: DBTEAMLOGDeviceDeleteOnUnlinkFailDetails) -> DBXTeamLogDeviceDeleteOnUnlinkFailDetails {
    DBXTeamLogDeviceDeleteOnUnlinkFailDetails(
        numFailures: object.numFailures,
        sessionInfo: mapDBTEAMLOGSessionLogInfoToDBXOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkFailTypeToDBXOptional(object: DBTEAMLOGDeviceDeleteOnUnlinkFailType?) -> DBXTeamLogDeviceDeleteOnUnlinkFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceDeleteOnUnlinkFailTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkFailTypeToDBX(object: DBTEAMLOGDeviceDeleteOnUnlinkFailType) -> DBXTeamLogDeviceDeleteOnUnlinkFailType {
    DBXTeamLogDeviceDeleteOnUnlinkFailType(description_: object.description_)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsToDBXOptional(object: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails?)
    -> DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsToDBX(object: DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails) -> DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails {
    DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails(
        sessionInfo: mapDBTEAMLOGSessionLogInfoToDBXOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeToDBXOptional(object: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType?) -> DBXTeamLogDeviceDeleteOnUnlinkSuccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeToDBX(object: DBTEAMLOGDeviceDeleteOnUnlinkSuccessType) -> DBXTeamLogDeviceDeleteOnUnlinkSuccessType {
    DBXTeamLogDeviceDeleteOnUnlinkSuccessType(description_: object.description_)
}

func mapDBTEAMLOGDeviceLinkFailDetailsToDBXOptional(object: DBTEAMLOGDeviceLinkFailDetails?) -> DBXTeamLogDeviceLinkFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceLinkFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceLinkFailDetailsToDBX(object: DBTEAMLOGDeviceLinkFailDetails) -> DBXTeamLogDeviceLinkFailDetails {
    DBXTeamLogDeviceLinkFailDetails(deviceType: mapDBTEAMLOGDeviceTypeToDBX(object: object.deviceType), ipAddress: object.ipAddress)
}

func mapDBTEAMLOGDeviceLinkFailTypeToDBXOptional(object: DBTEAMLOGDeviceLinkFailType?) -> DBXTeamLogDeviceLinkFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceLinkFailTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceLinkFailTypeToDBX(object: DBTEAMLOGDeviceLinkFailType) -> DBXTeamLogDeviceLinkFailType {
    DBXTeamLogDeviceLinkFailType(description_: object.description_)
}

func mapDBTEAMLOGDeviceLinkSuccessDetailsToDBXOptional(object: DBTEAMLOGDeviceLinkSuccessDetails?) -> DBXTeamLogDeviceLinkSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceLinkSuccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceLinkSuccessDetailsToDBX(object: DBTEAMLOGDeviceLinkSuccessDetails) -> DBXTeamLogDeviceLinkSuccessDetails {
    DBXTeamLogDeviceLinkSuccessDetails(deviceSessionInfo: mapDBTEAMLOGDeviceSessionLogInfoToDBXOptional(object: object.deviceSessionInfo))
}

func mapDBTEAMLOGDeviceLinkSuccessTypeToDBXOptional(object: DBTEAMLOGDeviceLinkSuccessType?) -> DBXTeamLogDeviceLinkSuccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceLinkSuccessTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceLinkSuccessTypeToDBX(object: DBTEAMLOGDeviceLinkSuccessType) -> DBXTeamLogDeviceLinkSuccessType {
    DBXTeamLogDeviceLinkSuccessType(description_: object.description_)
}

func mapDBTEAMLOGDeviceManagementDisabledDetailsToDBXOptional(object: DBTEAMLOGDeviceManagementDisabledDetails?) -> DBXTeamLogDeviceManagementDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceManagementDisabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceManagementDisabledDetailsToDBX(object: DBTEAMLOGDeviceManagementDisabledDetails) -> DBXTeamLogDeviceManagementDisabledDetails {
    DBXTeamLogDeviceManagementDisabledDetails()
}

func mapDBTEAMLOGDeviceManagementDisabledTypeToDBXOptional(object: DBTEAMLOGDeviceManagementDisabledType?) -> DBXTeamLogDeviceManagementDisabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceManagementDisabledTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceManagementDisabledTypeToDBX(object: DBTEAMLOGDeviceManagementDisabledType) -> DBXTeamLogDeviceManagementDisabledType {
    DBXTeamLogDeviceManagementDisabledType(description_: object.description_)
}

func mapDBTEAMLOGDeviceManagementEnabledDetailsToDBXOptional(object: DBTEAMLOGDeviceManagementEnabledDetails?) -> DBXTeamLogDeviceManagementEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceManagementEnabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceManagementEnabledDetailsToDBX(object: DBTEAMLOGDeviceManagementEnabledDetails) -> DBXTeamLogDeviceManagementEnabledDetails {
    DBXTeamLogDeviceManagementEnabledDetails()
}

func mapDBTEAMLOGDeviceManagementEnabledTypeToDBXOptional(object: DBTEAMLOGDeviceManagementEnabledType?) -> DBXTeamLogDeviceManagementEnabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceManagementEnabledTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceManagementEnabledTypeToDBX(object: DBTEAMLOGDeviceManagementEnabledType) -> DBXTeamLogDeviceManagementEnabledType {
    DBXTeamLogDeviceManagementEnabledType(description_: object.description_)
}

func mapDBTEAMLOGDeviceSyncBackupStatusChangedDetailsToDBXOptional(object: DBTEAMLOGDeviceSyncBackupStatusChangedDetails?)
    -> DBXTeamLogDeviceSyncBackupStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceSyncBackupStatusChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceSyncBackupStatusChangedDetailsToDBX(object: DBTEAMLOGDeviceSyncBackupStatusChangedDetails)
    -> DBXTeamLogDeviceSyncBackupStatusChangedDetails {
    DBXTeamLogDeviceSyncBackupStatusChangedDetails(
        desktopDeviceSessionInfo: mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: object.desktopDeviceSessionInfo),
        previousValue: mapDBTEAMLOGBackupStatusToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGBackupStatusToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGDeviceSyncBackupStatusChangedTypeToDBXOptional(object: DBTEAMLOGDeviceSyncBackupStatusChangedType?)
    -> DBXTeamLogDeviceSyncBackupStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceSyncBackupStatusChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceSyncBackupStatusChangedTypeToDBX(object: DBTEAMLOGDeviceSyncBackupStatusChangedType) -> DBXTeamLogDeviceSyncBackupStatusChangedType {
    DBXTeamLogDeviceSyncBackupStatusChangedType(description_: object.description_)
}

func mapDBTEAMLOGDeviceTypeToDBXOptional(object: DBTEAMLOGDeviceType?) -> DBXTeamLogDeviceType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceTypeToDBX(object: DBTEAMLOGDeviceType) -> DBXTeamLogDeviceType {
    if object.isDesktop() {
        return DBXTeamLogDeviceTypeDesktop()
    }
    if object.isMobile() {
        return DBXTeamLogDeviceTypeMobile()
    }
    if object.isOther() {
        return DBXTeamLogDeviceTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDeviceUnlinkDetailsToDBXOptional(object: DBTEAMLOGDeviceUnlinkDetails?) -> DBXTeamLogDeviceUnlinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceUnlinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGDeviceUnlinkDetailsToDBX(object: DBTEAMLOGDeviceUnlinkDetails) -> DBXTeamLogDeviceUnlinkDetails {
    DBXTeamLogDeviceUnlinkDetails(
        deleteData: object.deleteData,
        sessionInfo: mapDBTEAMLOGSessionLogInfoToDBXOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBTEAMLOGDeviceUnlinkPolicyToDBXOptional(object: DBTEAMLOGDeviceUnlinkPolicy?) -> DBXTeamLogDeviceUnlinkPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceUnlinkPolicyToDBX(object: object)
}

func mapDBTEAMLOGDeviceUnlinkPolicyToDBX(object: DBTEAMLOGDeviceUnlinkPolicy) -> DBXTeamLogDeviceUnlinkPolicy {
    if object.isKeep() {
        return DBXTeamLogDeviceUnlinkPolicyKeep()
    }
    if object.isRemove() {
        return DBXTeamLogDeviceUnlinkPolicyRemove()
    }
    if object.isOther() {
        return DBXTeamLogDeviceUnlinkPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDeviceUnlinkTypeToDBXOptional(object: DBTEAMLOGDeviceUnlinkType?) -> DBXTeamLogDeviceUnlinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDeviceUnlinkTypeToDBX(object: object)
}

func mapDBTEAMLOGDeviceUnlinkTypeToDBX(object: DBTEAMLOGDeviceUnlinkType) -> DBXTeamLogDeviceUnlinkType {
    DBXTeamLogDeviceUnlinkType(description_: object.description_)
}

func mapDBTEAMLOGDirectoryRestrictionsAddMembersDetailsToDBXOptional(object: DBTEAMLOGDirectoryRestrictionsAddMembersDetails?)
    -> DBXTeamLogDirectoryRestrictionsAddMembersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDirectoryRestrictionsAddMembersDetailsToDBX(object: object)
}

func mapDBTEAMLOGDirectoryRestrictionsAddMembersDetailsToDBX(object: DBTEAMLOGDirectoryRestrictionsAddMembersDetails)
    -> DBXTeamLogDirectoryRestrictionsAddMembersDetails {
    DBXTeamLogDirectoryRestrictionsAddMembersDetails()
}

func mapDBTEAMLOGDirectoryRestrictionsAddMembersTypeToDBXOptional(object: DBTEAMLOGDirectoryRestrictionsAddMembersType?)
    -> DBXTeamLogDirectoryRestrictionsAddMembersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDirectoryRestrictionsAddMembersTypeToDBX(object: object)
}

func mapDBTEAMLOGDirectoryRestrictionsAddMembersTypeToDBX(object: DBTEAMLOGDirectoryRestrictionsAddMembersType)
    -> DBXTeamLogDirectoryRestrictionsAddMembersType {
    DBXTeamLogDirectoryRestrictionsAddMembersType(description_: object.description_)
}

func mapDBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsToDBXOptional(object: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails?)
    -> DBXTeamLogDirectoryRestrictionsRemoveMembersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsToDBX(object: object)
}

func mapDBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsToDBX(object: DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails)
    -> DBXTeamLogDirectoryRestrictionsRemoveMembersDetails {
    DBXTeamLogDirectoryRestrictionsRemoveMembersDetails()
}

func mapDBTEAMLOGDirectoryRestrictionsRemoveMembersTypeToDBXOptional(object: DBTEAMLOGDirectoryRestrictionsRemoveMembersType?)
    -> DBXTeamLogDirectoryRestrictionsRemoveMembersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDirectoryRestrictionsRemoveMembersTypeToDBX(object: object)
}

func mapDBTEAMLOGDirectoryRestrictionsRemoveMembersTypeToDBX(object: DBTEAMLOGDirectoryRestrictionsRemoveMembersType)
    -> DBXTeamLogDirectoryRestrictionsRemoveMembersType {
    DBXTeamLogDirectoryRestrictionsRemoveMembersType(description_: object.description_)
}

func mapDBTEAMLOGDisabledDomainInvitesDetailsToDBXOptional(object: DBTEAMLOGDisabledDomainInvitesDetails?) -> DBXTeamLogDisabledDomainInvitesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDisabledDomainInvitesDetailsToDBX(object: object)
}

func mapDBTEAMLOGDisabledDomainInvitesDetailsToDBX(object: DBTEAMLOGDisabledDomainInvitesDetails) -> DBXTeamLogDisabledDomainInvitesDetails {
    DBXTeamLogDisabledDomainInvitesDetails()
}

func mapDBTEAMLOGDisabledDomainInvitesTypeToDBXOptional(object: DBTEAMLOGDisabledDomainInvitesType?) -> DBXTeamLogDisabledDomainInvitesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDisabledDomainInvitesTypeToDBX(object: object)
}

func mapDBTEAMLOGDisabledDomainInvitesTypeToDBX(object: DBTEAMLOGDisabledDomainInvitesType) -> DBXTeamLogDisabledDomainInvitesType {
    DBXTeamLogDisabledDomainInvitesType(description_: object.description_)
}

func mapDBTEAMLOGDispositionActionTypeToDBXOptional(object: DBTEAMLOGDispositionActionType?) -> DBXTeamLogDispositionActionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDispositionActionTypeToDBX(object: object)
}

func mapDBTEAMLOGDispositionActionTypeToDBX(object: DBTEAMLOGDispositionActionType) -> DBXTeamLogDispositionActionType {
    if object.isAutomaticDelete() {
        return DBXTeamLogDispositionActionTypeAutomaticDelete()
    }
    if object.isAutomaticPermanentlyDelete() {
        return DBXTeamLogDispositionActionTypeAutomaticPermanentlyDelete()
    }
    if object.isOther() {
        return DBXTeamLogDispositionActionTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails?)
    -> DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsToDBX(object: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails)
    -> DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails {
    DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails()
}

func mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeToDBXOptional(object: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType?)
    -> DBXTeamLogDomainInvitesApproveRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeToDBX(object: DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType)
    -> DBXTeamLogDomainInvitesApproveRequestToJoinTeamType {
    DBXTeamLogDomainInvitesApproveRequestToJoinTeamType(description_: object.description_)
}

func mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails?)
    -> DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsToDBX(object: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails)
    -> DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails {
    DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails()
}

func mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeToDBXOptional(object: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType?)
    -> DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeToDBX(object: DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType)
    -> DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType {
    DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType(description_: object.description_)
}

func mapDBTEAMLOGDomainInvitesEmailExistingUsersDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesEmailExistingUsersDetails?)
    -> DBXTeamLogDomainInvitesEmailExistingUsersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesEmailExistingUsersDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesEmailExistingUsersDetailsToDBX(object: DBTEAMLOGDomainInvitesEmailExistingUsersDetails)
    -> DBXTeamLogDomainInvitesEmailExistingUsersDetails {
    DBXTeamLogDomainInvitesEmailExistingUsersDetails(domainName: object.domainName, numRecipients: object.numRecipients)
}

func mapDBTEAMLOGDomainInvitesEmailExistingUsersTypeToDBXOptional(object: DBTEAMLOGDomainInvitesEmailExistingUsersType?)
    -> DBXTeamLogDomainInvitesEmailExistingUsersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesEmailExistingUsersTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesEmailExistingUsersTypeToDBX(object: DBTEAMLOGDomainInvitesEmailExistingUsersType)
    -> DBXTeamLogDomainInvitesEmailExistingUsersType {
    DBXTeamLogDomainInvitesEmailExistingUsersType(description_: object.description_)
}

func mapDBTEAMLOGDomainInvitesRequestToJoinTeamDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails?)
    -> DBXTeamLogDomainInvitesRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesRequestToJoinTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesRequestToJoinTeamDetailsToDBX(object: DBTEAMLOGDomainInvitesRequestToJoinTeamDetails)
    -> DBXTeamLogDomainInvitesRequestToJoinTeamDetails {
    DBXTeamLogDomainInvitesRequestToJoinTeamDetails()
}

func mapDBTEAMLOGDomainInvitesRequestToJoinTeamTypeToDBXOptional(object: DBTEAMLOGDomainInvitesRequestToJoinTeamType?)
    -> DBXTeamLogDomainInvitesRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesRequestToJoinTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesRequestToJoinTeamTypeToDBX(object: DBTEAMLOGDomainInvitesRequestToJoinTeamType) -> DBXTeamLogDomainInvitesRequestToJoinTeamType {
    DBXTeamLogDomainInvitesRequestToJoinTeamType(description_: object.description_)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails?)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsToDBX(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails {
    DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails()
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeToDBXOptional(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType?)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeToDBX(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType {
    DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType(description_: object.description_)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsToDBXOptional(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails?)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsToDBX(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails {
    DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails()
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeToDBXOptional(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType?)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeToDBX(object: DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType)
    -> DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType {
    DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType(description_: object.description_)
}

func mapDBTEAMLOGDomainVerificationAddDomainFailDetailsToDBXOptional(object: DBTEAMLOGDomainVerificationAddDomainFailDetails?)
    -> DBXTeamLogDomainVerificationAddDomainFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationAddDomainFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationAddDomainFailDetailsToDBX(object: DBTEAMLOGDomainVerificationAddDomainFailDetails)
    -> DBXTeamLogDomainVerificationAddDomainFailDetails {
    DBXTeamLogDomainVerificationAddDomainFailDetails(domainName: object.domainName, verificationMethod: object.verificationMethod)
}

func mapDBTEAMLOGDomainVerificationAddDomainFailTypeToDBXOptional(object: DBTEAMLOGDomainVerificationAddDomainFailType?)
    -> DBXTeamLogDomainVerificationAddDomainFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationAddDomainFailTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationAddDomainFailTypeToDBX(object: DBTEAMLOGDomainVerificationAddDomainFailType)
    -> DBXTeamLogDomainVerificationAddDomainFailType {
    DBXTeamLogDomainVerificationAddDomainFailType(description_: object.description_)
}

func mapDBTEAMLOGDomainVerificationAddDomainSuccessDetailsToDBXOptional(object: DBTEAMLOGDomainVerificationAddDomainSuccessDetails?)
    -> DBXTeamLogDomainVerificationAddDomainSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationAddDomainSuccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationAddDomainSuccessDetailsToDBX(object: DBTEAMLOGDomainVerificationAddDomainSuccessDetails)
    -> DBXTeamLogDomainVerificationAddDomainSuccessDetails {
    DBXTeamLogDomainVerificationAddDomainSuccessDetails(domainNames: object.domainNames, verificationMethod: object.verificationMethod)
}

func mapDBTEAMLOGDomainVerificationAddDomainSuccessTypeToDBXOptional(object: DBTEAMLOGDomainVerificationAddDomainSuccessType?)
    -> DBXTeamLogDomainVerificationAddDomainSuccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationAddDomainSuccessTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationAddDomainSuccessTypeToDBX(object: DBTEAMLOGDomainVerificationAddDomainSuccessType)
    -> DBXTeamLogDomainVerificationAddDomainSuccessType {
    DBXTeamLogDomainVerificationAddDomainSuccessType(description_: object.description_)
}

func mapDBTEAMLOGDomainVerificationRemoveDomainDetailsToDBXOptional(object: DBTEAMLOGDomainVerificationRemoveDomainDetails?)
    -> DBXTeamLogDomainVerificationRemoveDomainDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationRemoveDomainDetailsToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationRemoveDomainDetailsToDBX(object: DBTEAMLOGDomainVerificationRemoveDomainDetails)
    -> DBXTeamLogDomainVerificationRemoveDomainDetails {
    DBXTeamLogDomainVerificationRemoveDomainDetails(domainNames: object.domainNames)
}

func mapDBTEAMLOGDomainVerificationRemoveDomainTypeToDBXOptional(object: DBTEAMLOGDomainVerificationRemoveDomainType?)
    -> DBXTeamLogDomainVerificationRemoveDomainType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDomainVerificationRemoveDomainTypeToDBX(object: object)
}

func mapDBTEAMLOGDomainVerificationRemoveDomainTypeToDBX(object: DBTEAMLOGDomainVerificationRemoveDomainType) -> DBXTeamLogDomainVerificationRemoveDomainType {
    DBXTeamLogDomainVerificationRemoveDomainType(description_: object.description_)
}

func mapDBTEAMLOGDownloadPolicyTypeToDBXOptional(object: DBTEAMLOGDownloadPolicyType?) -> DBXTeamLogDownloadPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDownloadPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGDownloadPolicyTypeToDBX(object: DBTEAMLOGDownloadPolicyType) -> DBXTeamLogDownloadPolicyType {
    if object.isAllow() {
        return DBXTeamLogDownloadPolicyTypeAllow()
    }
    if object.isDisallow() {
        return DBXTeamLogDownloadPolicyTypeDisallow()
    }
    if object.isOther() {
        return DBXTeamLogDownloadPolicyTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDropboxPasswordsExportedDetailsToDBXOptional(object: DBTEAMLOGDropboxPasswordsExportedDetails?) -> DBXTeamLogDropboxPasswordsExportedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsExportedDetailsToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsExportedDetailsToDBX(object: DBTEAMLOGDropboxPasswordsExportedDetails) -> DBXTeamLogDropboxPasswordsExportedDetails {
    DBXTeamLogDropboxPasswordsExportedDetails(platform: object.platform)
}

func mapDBTEAMLOGDropboxPasswordsExportedTypeToDBXOptional(object: DBTEAMLOGDropboxPasswordsExportedType?) -> DBXTeamLogDropboxPasswordsExportedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsExportedTypeToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsExportedTypeToDBX(object: DBTEAMLOGDropboxPasswordsExportedType) -> DBXTeamLogDropboxPasswordsExportedType {
    DBXTeamLogDropboxPasswordsExportedType(description_: object.description_)
}

func mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsToDBXOptional(object: DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails?)
    -> DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsToDBX(object: DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails)
    -> DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails {
    DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails(isFirstDevice: object.isFirstDevice, platform: object.platform)
}

func mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeToDBXOptional(object: DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType?)
    -> DBXTeamLogDropboxPasswordsNewDeviceEnrolledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeToDBX(object: DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType)
    -> DBXTeamLogDropboxPasswordsNewDeviceEnrolledType {
    DBXTeamLogDropboxPasswordsNewDeviceEnrolledType(description_: object.description_)
}

func mapDBTEAMLOGDropboxPasswordsPolicyToDBXOptional(object: DBTEAMLOGDropboxPasswordsPolicy?) -> DBXTeamLogDropboxPasswordsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsPolicyToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsPolicyToDBX(object: DBTEAMLOGDropboxPasswordsPolicy) -> DBXTeamLogDropboxPasswordsPolicy {
    if object.isDefault_() {
        return DBXTeamLogDropboxPasswordsPolicyDefault_()
    }
    if object.isDisabled() {
        return DBXTeamLogDropboxPasswordsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogDropboxPasswordsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogDropboxPasswordsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGDropboxPasswordsPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGDropboxPasswordsPolicyChangedDetails?)
    -> DBXTeamLogDropboxPasswordsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsPolicyChangedDetailsToDBX(object: DBTEAMLOGDropboxPasswordsPolicyChangedDetails)
    -> DBXTeamLogDropboxPasswordsPolicyChangedDetails {
    DBXTeamLogDropboxPasswordsPolicyChangedDetails(
        newValue: mapDBTEAMLOGDropboxPasswordsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDropboxPasswordsPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGDropboxPasswordsPolicyChangedTypeToDBXOptional(object: DBTEAMLOGDropboxPasswordsPolicyChangedType?)
    -> DBXTeamLogDropboxPasswordsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDropboxPasswordsPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGDropboxPasswordsPolicyChangedTypeToDBX(object: DBTEAMLOGDropboxPasswordsPolicyChangedType) -> DBXTeamLogDropboxPasswordsPolicyChangedType {
    DBXTeamLogDropboxPasswordsPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGDurationLogInfoToDBXOptional(object: DBTEAMLOGDurationLogInfo?) -> DBXTeamLogDurationLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGDurationLogInfoToDBX(object: object)
}

func mapDBTEAMLOGDurationLogInfoToDBX(object: DBTEAMLOGDurationLogInfo) -> DBXTeamLogDurationLogInfo {
    DBXTeamLogDurationLogInfo(unit: mapDBTEAMLOGTimeUnitToDBX(object: object.unit), amount: object.amount)
}

func mapDBTEAMLOGEmailIngestPolicyToDBXOptional(object: DBTEAMLOGEmailIngestPolicy?) -> DBXTeamLogEmailIngestPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmailIngestPolicyToDBX(object: object)
}

func mapDBTEAMLOGEmailIngestPolicyToDBX(object: DBTEAMLOGEmailIngestPolicy) -> DBXTeamLogEmailIngestPolicy {
    if object.isDisabled() {
        return DBXTeamLogEmailIngestPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogEmailIngestPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogEmailIngestPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGEmailIngestPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGEmailIngestPolicyChangedDetails?) -> DBXTeamLogEmailIngestPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmailIngestPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmailIngestPolicyChangedDetailsToDBX(object: DBTEAMLOGEmailIngestPolicyChangedDetails) -> DBXTeamLogEmailIngestPolicyChangedDetails {
    DBXTeamLogEmailIngestPolicyChangedDetails(
        newValue: mapDBTEAMLOGEmailIngestPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGEmailIngestPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGEmailIngestPolicyChangedTypeToDBXOptional(object: DBTEAMLOGEmailIngestPolicyChangedType?) -> DBXTeamLogEmailIngestPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmailIngestPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGEmailIngestPolicyChangedTypeToDBX(object: DBTEAMLOGEmailIngestPolicyChangedType) -> DBXTeamLogEmailIngestPolicyChangedType {
    DBXTeamLogEmailIngestPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGEmailIngestReceiveFileDetailsToDBXOptional(object: DBTEAMLOGEmailIngestReceiveFileDetails?) -> DBXTeamLogEmailIngestReceiveFileDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmailIngestReceiveFileDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmailIngestReceiveFileDetailsToDBX(object: DBTEAMLOGEmailIngestReceiveFileDetails) -> DBXTeamLogEmailIngestReceiveFileDetails {
    DBXTeamLogEmailIngestReceiveFileDetails(
        inboxName: object.inboxName,
        attachmentNames: object.attachmentNames,
        subject: object.subject,
        fromName: object.fromName,
        fromEmail: object.fromEmail
    )
}

func mapDBTEAMLOGEmailIngestReceiveFileTypeToDBXOptional(object: DBTEAMLOGEmailIngestReceiveFileType?) -> DBXTeamLogEmailIngestReceiveFileType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmailIngestReceiveFileTypeToDBX(object: object)
}

func mapDBTEAMLOGEmailIngestReceiveFileTypeToDBX(object: DBTEAMLOGEmailIngestReceiveFileType) -> DBXTeamLogEmailIngestReceiveFileType {
    DBXTeamLogEmailIngestReceiveFileType(description_: object.description_)
}

func mapDBTEAMLOGEmmAddExceptionDetailsToDBXOptional(object: DBTEAMLOGEmmAddExceptionDetails?) -> DBXTeamLogEmmAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmAddExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmAddExceptionDetailsToDBX(object: DBTEAMLOGEmmAddExceptionDetails) -> DBXTeamLogEmmAddExceptionDetails {
    DBXTeamLogEmmAddExceptionDetails()
}

func mapDBTEAMLOGEmmAddExceptionTypeToDBXOptional(object: DBTEAMLOGEmmAddExceptionType?) -> DBXTeamLogEmmAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmAddExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmAddExceptionTypeToDBX(object: DBTEAMLOGEmmAddExceptionType) -> DBXTeamLogEmmAddExceptionType {
    DBXTeamLogEmmAddExceptionType(description_: object.description_)
}

func mapDBTEAMLOGEmmChangePolicyDetailsToDBXOptional(object: DBTEAMLOGEmmChangePolicyDetails?) -> DBXTeamLogEmmChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmChangePolicyDetailsToDBX(object: DBTEAMLOGEmmChangePolicyDetails) -> DBXTeamLogEmmChangePolicyDetails {
    DBXTeamLogEmmChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESEmmStateToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESEmmStateToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGEmmChangePolicyTypeToDBXOptional(object: DBTEAMLOGEmmChangePolicyType?) -> DBXTeamLogEmmChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmChangePolicyTypeToDBX(object: DBTEAMLOGEmmChangePolicyType) -> DBXTeamLogEmmChangePolicyType {
    DBXTeamLogEmmChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGEmmCreateExceptionsReportDetailsToDBXOptional(object: DBTEAMLOGEmmCreateExceptionsReportDetails?)
    -> DBXTeamLogEmmCreateExceptionsReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmCreateExceptionsReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmCreateExceptionsReportDetailsToDBX(object: DBTEAMLOGEmmCreateExceptionsReportDetails) -> DBXTeamLogEmmCreateExceptionsReportDetails {
    DBXTeamLogEmmCreateExceptionsReportDetails()
}

func mapDBTEAMLOGEmmCreateExceptionsReportTypeToDBXOptional(object: DBTEAMLOGEmmCreateExceptionsReportType?) -> DBXTeamLogEmmCreateExceptionsReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmCreateExceptionsReportTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmCreateExceptionsReportTypeToDBX(object: DBTEAMLOGEmmCreateExceptionsReportType) -> DBXTeamLogEmmCreateExceptionsReportType {
    DBXTeamLogEmmCreateExceptionsReportType(description_: object.description_)
}

func mapDBTEAMLOGEmmCreateUsageReportDetailsToDBXOptional(object: DBTEAMLOGEmmCreateUsageReportDetails?) -> DBXTeamLogEmmCreateUsageReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmCreateUsageReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmCreateUsageReportDetailsToDBX(object: DBTEAMLOGEmmCreateUsageReportDetails) -> DBXTeamLogEmmCreateUsageReportDetails {
    DBXTeamLogEmmCreateUsageReportDetails()
}

func mapDBTEAMLOGEmmCreateUsageReportTypeToDBXOptional(object: DBTEAMLOGEmmCreateUsageReportType?) -> DBXTeamLogEmmCreateUsageReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmCreateUsageReportTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmCreateUsageReportTypeToDBX(object: DBTEAMLOGEmmCreateUsageReportType) -> DBXTeamLogEmmCreateUsageReportType {
    DBXTeamLogEmmCreateUsageReportType(description_: object.description_)
}

func mapDBTEAMLOGEmmErrorDetailsToDBXOptional(object: DBTEAMLOGEmmErrorDetails?) -> DBXTeamLogEmmErrorDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmErrorDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmErrorDetailsToDBX(object: DBTEAMLOGEmmErrorDetails) -> DBXTeamLogEmmErrorDetails {
    DBXTeamLogEmmErrorDetails(errorDetails: mapDBTEAMLOGFailureDetailsLogInfoToDBX(object: object.errorDetails))
}

func mapDBTEAMLOGEmmErrorTypeToDBXOptional(object: DBTEAMLOGEmmErrorType?) -> DBXTeamLogEmmErrorType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmErrorTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmErrorTypeToDBX(object: DBTEAMLOGEmmErrorType) -> DBXTeamLogEmmErrorType {
    DBXTeamLogEmmErrorType(description_: object.description_)
}

func mapDBTEAMLOGEmmRefreshAuthTokenDetailsToDBXOptional(object: DBTEAMLOGEmmRefreshAuthTokenDetails?) -> DBXTeamLogEmmRefreshAuthTokenDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmRefreshAuthTokenDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmRefreshAuthTokenDetailsToDBX(object: DBTEAMLOGEmmRefreshAuthTokenDetails) -> DBXTeamLogEmmRefreshAuthTokenDetails {
    DBXTeamLogEmmRefreshAuthTokenDetails()
}

func mapDBTEAMLOGEmmRefreshAuthTokenTypeToDBXOptional(object: DBTEAMLOGEmmRefreshAuthTokenType?) -> DBXTeamLogEmmRefreshAuthTokenType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmRefreshAuthTokenTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmRefreshAuthTokenTypeToDBX(object: DBTEAMLOGEmmRefreshAuthTokenType) -> DBXTeamLogEmmRefreshAuthTokenType {
    DBXTeamLogEmmRefreshAuthTokenType(description_: object.description_)
}

func mapDBTEAMLOGEmmRemoveExceptionDetailsToDBXOptional(object: DBTEAMLOGEmmRemoveExceptionDetails?) -> DBXTeamLogEmmRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmRemoveExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGEmmRemoveExceptionDetailsToDBX(object: DBTEAMLOGEmmRemoveExceptionDetails) -> DBXTeamLogEmmRemoveExceptionDetails {
    DBXTeamLogEmmRemoveExceptionDetails()
}

func mapDBTEAMLOGEmmRemoveExceptionTypeToDBXOptional(object: DBTEAMLOGEmmRemoveExceptionType?) -> DBXTeamLogEmmRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEmmRemoveExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGEmmRemoveExceptionTypeToDBX(object: DBTEAMLOGEmmRemoveExceptionType) -> DBXTeamLogEmmRemoveExceptionType {
    DBXTeamLogEmmRemoveExceptionType(description_: object.description_)
}

func mapDBTEAMLOGEnabledDomainInvitesDetailsToDBXOptional(object: DBTEAMLOGEnabledDomainInvitesDetails?) -> DBXTeamLogEnabledDomainInvitesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEnabledDomainInvitesDetailsToDBX(object: object)
}

func mapDBTEAMLOGEnabledDomainInvitesDetailsToDBX(object: DBTEAMLOGEnabledDomainInvitesDetails) -> DBXTeamLogEnabledDomainInvitesDetails {
    DBXTeamLogEnabledDomainInvitesDetails()
}

func mapDBTEAMLOGEnabledDomainInvitesTypeToDBXOptional(object: DBTEAMLOGEnabledDomainInvitesType?) -> DBXTeamLogEnabledDomainInvitesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEnabledDomainInvitesTypeToDBX(object: object)
}

func mapDBTEAMLOGEnabledDomainInvitesTypeToDBX(object: DBTEAMLOGEnabledDomainInvitesType) -> DBXTeamLogEnabledDomainInvitesType {
    DBXTeamLogEnabledDomainInvitesType(description_: object.description_)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsToDBXOptional(object: DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails?)
    -> DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsToDBX(object: DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails)
    -> DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails {
    DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails(federationExtraDetails: mapDBTEAMLOGFedExtraDetailsToDBX(object: object.federationExtraDetails))
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeToDBXOptional(object: DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType?)
    -> DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeToDBX(object: object)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeToDBX(object: DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType)
    -> DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType {
    DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType(description_: object.description_)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDetailsToDBXOptional(object: DBTEAMLOGEndedEnterpriseAdminSessionDetails?)
    -> DBXTeamLogEndedEnterpriseAdminSessionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEndedEnterpriseAdminSessionDetailsToDBX(object: object)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionDetailsToDBX(object: DBTEAMLOGEndedEnterpriseAdminSessionDetails) -> DBXTeamLogEndedEnterpriseAdminSessionDetails {
    DBXTeamLogEndedEnterpriseAdminSessionDetails()
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionTypeToDBXOptional(object: DBTEAMLOGEndedEnterpriseAdminSessionType?) -> DBXTeamLogEndedEnterpriseAdminSessionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEndedEnterpriseAdminSessionTypeToDBX(object: object)
}

func mapDBTEAMLOGEndedEnterpriseAdminSessionTypeToDBX(object: DBTEAMLOGEndedEnterpriseAdminSessionType) -> DBXTeamLogEndedEnterpriseAdminSessionType {
    DBXTeamLogEndedEnterpriseAdminSessionType(description_: object.description_)
}

func mapDBTEAMLOGEnforceLinkPasswordPolicyToDBXOptional(object: DBTEAMLOGEnforceLinkPasswordPolicy?) -> DBXTeamLogEnforceLinkPasswordPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEnforceLinkPasswordPolicyToDBX(object: object)
}

func mapDBTEAMLOGEnforceLinkPasswordPolicyToDBX(object: DBTEAMLOGEnforceLinkPasswordPolicy) -> DBXTeamLogEnforceLinkPasswordPolicy {
    if object.isOptional() {
        return DBXTeamLogEnforceLinkPasswordPolicyOptional()
    }
    if object.isRequired() {
        return DBXTeamLogEnforceLinkPasswordPolicyRequired()
    }
    if object.isOther() {
        return DBXTeamLogEnforceLinkPasswordPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGEnterpriseSettingsLockingDetailsToDBXOptional(object: DBTEAMLOGEnterpriseSettingsLockingDetails?)
    -> DBXTeamLogEnterpriseSettingsLockingDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEnterpriseSettingsLockingDetailsToDBX(object: object)
}

func mapDBTEAMLOGEnterpriseSettingsLockingDetailsToDBX(object: DBTEAMLOGEnterpriseSettingsLockingDetails) -> DBXTeamLogEnterpriseSettingsLockingDetails {
    DBXTeamLogEnterpriseSettingsLockingDetails(
        teamName: object.teamName,
        settingsPageName: object.settingsPageName,
        previousSettingsPageLockingState: object.previousSettingsPageLockingState,
        newSettingsPageLockingState: object.dNewSettingsPageLockingState
    )
}

func mapDBTEAMLOGEnterpriseSettingsLockingTypeToDBXOptional(object: DBTEAMLOGEnterpriseSettingsLockingType?) -> DBXTeamLogEnterpriseSettingsLockingType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEnterpriseSettingsLockingTypeToDBX(object: object)
}

func mapDBTEAMLOGEnterpriseSettingsLockingTypeToDBX(object: DBTEAMLOGEnterpriseSettingsLockingType) -> DBXTeamLogEnterpriseSettingsLockingType {
    DBXTeamLogEnterpriseSettingsLockingType(description_: object.description_)
}

func mapDBTEAMLOGEventCategoryToDBXOptional(object: DBTEAMLOGEventCategory?) -> DBXTeamLogEventCategory? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEventCategoryToDBX(object: object)
}

func mapDBTEAMLOGEventCategoryToDBX(object: DBTEAMLOGEventCategory) -> DBXTeamLogEventCategory {
    if object.isAdminAlerting() {
        return DBXTeamLogEventCategoryAdminAlerting()
    }
    if object.isApps() {
        return DBXTeamLogEventCategoryApps()
    }
    if object.isComments() {
        return DBXTeamLogEventCategoryComments()
    }
    if object.isDataGovernance() {
        return DBXTeamLogEventCategoryDataGovernance()
    }
    if object.isDevices() {
        return DBXTeamLogEventCategoryDevices()
    }
    if object.isDomains() {
        return DBXTeamLogEventCategoryDomains()
    }
    if object.isEncryption() {
        return DBXTeamLogEventCategoryEncryption()
    }
    if object.isFileOperations() {
        return DBXTeamLogEventCategoryFileOperations()
    }
    if object.isFileRequests() {
        return DBXTeamLogEventCategoryFileRequests()
    }
    if object.isGroups() {
        return DBXTeamLogEventCategoryGroups()
    }
    if object.isLogins() {
        return DBXTeamLogEventCategoryLogins()
    }
    if object.isMembers() {
        return DBXTeamLogEventCategoryMembers()
    }
    if object.isPaper() {
        return DBXTeamLogEventCategoryPaper()
    }
    if object.isPasswords() {
        return DBXTeamLogEventCategoryPasswords()
    }
    if object.isReports() {
        return DBXTeamLogEventCategoryReports()
    }
    if object.isSharing() {
        return DBXTeamLogEventCategorySharing()
    }
    if object.isShowcase() {
        return DBXTeamLogEventCategoryShowcase()
    }
    if object.isSso() {
        return DBXTeamLogEventCategorySso()
    }
    if object.isTeamFolders() {
        return DBXTeamLogEventCategoryTeamFolders()
    }
    if object.isTeamPolicies() {
        return DBXTeamLogEventCategoryTeamPolicies()
    }
    if object.isTeamProfile() {
        return DBXTeamLogEventCategoryTeamProfile()
    }
    if object.isTfa() {
        return DBXTeamLogEventCategoryTfa()
    }
    if object.isTrustedTeams() {
        return DBXTeamLogEventCategoryTrustedTeams()
    }
    if object.isOther() {
        return DBXTeamLogEventCategoryOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGEventDetailsToDBXOptional(object: DBTEAMLOGEventDetails?) -> DBXTeamLogEventDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEventDetailsToDBX(object: object)
}

func mapDBTEAMLOGEventDetailsToDBX(object: DBTEAMLOGEventDetails) -> DBXTeamLogEventDetails {
    if object.isAdminAlertingAlertStateChangedDetails() {
        let adminAlertingAlertStateChangedDetails = mapDBTEAMLOGAdminAlertingAlertStateChangedDetailsToDBX(object: object.adminAlertingAlertStateChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .adminAlertingAlertStateChangedDetails(adminAlertingAlertStateChangedDetails.swift))
    }
    if object.isAdminAlertingChangedAlertConfigDetails() {
        let adminAlertingChangedAlertConfigDetails = mapDBTEAMLOGAdminAlertingChangedAlertConfigDetailsToDBX(
            object: object
                .adminAlertingChangedAlertConfigDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .adminAlertingChangedAlertConfigDetails(adminAlertingChangedAlertConfigDetails.swift))
    }
    if object.isAdminAlertingTriggeredAlertDetails() {
        let adminAlertingTriggeredAlertDetails = mapDBTEAMLOGAdminAlertingTriggeredAlertDetailsToDBX(object: object.adminAlertingTriggeredAlertDetails)
        return DBXTeamLogEventDetails.factory(swift: .adminAlertingTriggeredAlertDetails(adminAlertingTriggeredAlertDetails.swift))
    }
    if object.isRansomwareRestoreProcessCompletedDetails() {
        let ransomwareRestoreProcessCompletedDetails = mapDBTEAMLOGRansomwareRestoreProcessCompletedDetailsToDBX(
            object: object
                .ransomwareRestoreProcessCompletedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .ransomwareRestoreProcessCompletedDetails(ransomwareRestoreProcessCompletedDetails.swift))
    }
    if object.isRansomwareRestoreProcessStartedDetails() {
        let ransomwareRestoreProcessStartedDetails = mapDBTEAMLOGRansomwareRestoreProcessStartedDetailsToDBX(
            object: object
                .ransomwareRestoreProcessStartedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .ransomwareRestoreProcessStartedDetails(ransomwareRestoreProcessStartedDetails.swift))
    }
    if object.isAppBlockedByPermissionsDetails() {
        let appBlockedByPermissionsDetails = mapDBTEAMLOGAppBlockedByPermissionsDetailsToDBX(object: object.appBlockedByPermissionsDetails)
        return DBXTeamLogEventDetails.factory(swift: .appBlockedByPermissionsDetails(appBlockedByPermissionsDetails.swift))
    }
    if object.isAppLinkTeamDetails() {
        let appLinkTeamDetails = mapDBTEAMLOGAppLinkTeamDetailsToDBX(object: object.appLinkTeamDetails)
        return DBXTeamLogEventDetails.factory(swift: .appLinkTeamDetails(appLinkTeamDetails.swift))
    }
    if object.isAppLinkUserDetails() {
        let appLinkUserDetails = mapDBTEAMLOGAppLinkUserDetailsToDBX(object: object.appLinkUserDetails)
        return DBXTeamLogEventDetails.factory(swift: .appLinkUserDetails(appLinkUserDetails.swift))
    }
    if object.isAppUnlinkTeamDetails() {
        let appUnlinkTeamDetails = mapDBTEAMLOGAppUnlinkTeamDetailsToDBX(object: object.appUnlinkTeamDetails)
        return DBXTeamLogEventDetails.factory(swift: .appUnlinkTeamDetails(appUnlinkTeamDetails.swift))
    }
    if object.isAppUnlinkUserDetails() {
        let appUnlinkUserDetails = mapDBTEAMLOGAppUnlinkUserDetailsToDBX(object: object.appUnlinkUserDetails)
        return DBXTeamLogEventDetails.factory(swift: .appUnlinkUserDetails(appUnlinkUserDetails.swift))
    }
    if object.isIntegrationConnectedDetails() {
        let integrationConnectedDetails = mapDBTEAMLOGIntegrationConnectedDetailsToDBX(object: object.integrationConnectedDetails)
        return DBXTeamLogEventDetails.factory(swift: .integrationConnectedDetails(integrationConnectedDetails.swift))
    }
    if object.isIntegrationDisconnectedDetails() {
        let integrationDisconnectedDetails = mapDBTEAMLOGIntegrationDisconnectedDetailsToDBX(object: object.integrationDisconnectedDetails)
        return DBXTeamLogEventDetails.factory(swift: .integrationDisconnectedDetails(integrationDisconnectedDetails.swift))
    }
    if object.isFileAddCommentDetails() {
        let fileAddCommentDetails = mapDBTEAMLOGFileAddCommentDetailsToDBX(object: object.fileAddCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileAddCommentDetails(fileAddCommentDetails.swift))
    }
    if object.isFileChangeCommentSubscriptionDetails() {
        let fileChangeCommentSubscriptionDetails = mapDBTEAMLOGFileChangeCommentSubscriptionDetailsToDBX(object: object.fileChangeCommentSubscriptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileChangeCommentSubscriptionDetails(fileChangeCommentSubscriptionDetails.swift))
    }
    if object.isFileDeleteCommentDetails() {
        let fileDeleteCommentDetails = mapDBTEAMLOGFileDeleteCommentDetailsToDBX(object: object.fileDeleteCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileDeleteCommentDetails(fileDeleteCommentDetails.swift))
    }
    if object.isFileEditCommentDetails() {
        let fileEditCommentDetails = mapDBTEAMLOGFileEditCommentDetailsToDBX(object: object.fileEditCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileEditCommentDetails(fileEditCommentDetails.swift))
    }
    if object.isFileLikeCommentDetails() {
        let fileLikeCommentDetails = mapDBTEAMLOGFileLikeCommentDetailsToDBX(object: object.fileLikeCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileLikeCommentDetails(fileLikeCommentDetails.swift))
    }
    if object.isFileResolveCommentDetails() {
        let fileResolveCommentDetails = mapDBTEAMLOGFileResolveCommentDetailsToDBX(object: object.fileResolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileResolveCommentDetails(fileResolveCommentDetails.swift))
    }
    if object.isFileUnlikeCommentDetails() {
        let fileUnlikeCommentDetails = mapDBTEAMLOGFileUnlikeCommentDetailsToDBX(object: object.fileUnlikeCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileUnlikeCommentDetails(fileUnlikeCommentDetails.swift))
    }
    if object.isFileUnresolveCommentDetails() {
        let fileUnresolveCommentDetails = mapDBTEAMLOGFileUnresolveCommentDetailsToDBX(object: object.fileUnresolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileUnresolveCommentDetails(fileUnresolveCommentDetails.swift))
    }
    if object.isGovernancePolicyAddFoldersDetails() {
        let governancePolicyAddFoldersDetails = mapDBTEAMLOGGovernancePolicyAddFoldersDetailsToDBX(object: object.governancePolicyAddFoldersDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyAddFoldersDetails(governancePolicyAddFoldersDetails.swift))
    }
    if object.isGovernancePolicyAddFolderFailedDetails() {
        let governancePolicyAddFolderFailedDetails = mapDBTEAMLOGGovernancePolicyAddFolderFailedDetailsToDBX(
            object: object
                .governancePolicyAddFolderFailedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyAddFolderFailedDetails(governancePolicyAddFolderFailedDetails.swift))
    }
    if object.isGovernancePolicyContentDisposedDetails() {
        let governancePolicyContentDisposedDetails = mapDBTEAMLOGGovernancePolicyContentDisposedDetailsToDBX(
            object: object
                .governancePolicyContentDisposedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyContentDisposedDetails(governancePolicyContentDisposedDetails.swift))
    }
    if object.isGovernancePolicyCreateDetails() {
        let governancePolicyCreateDetails = mapDBTEAMLOGGovernancePolicyCreateDetailsToDBX(object: object.governancePolicyCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyCreateDetails(governancePolicyCreateDetails.swift))
    }
    if object.isGovernancePolicyDeleteDetails() {
        let governancePolicyDeleteDetails = mapDBTEAMLOGGovernancePolicyDeleteDetailsToDBX(object: object.governancePolicyDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyDeleteDetails(governancePolicyDeleteDetails.swift))
    }
    if object.isGovernancePolicyEditDetailsDetails() {
        let governancePolicyEditDetailsDetails = mapDBTEAMLOGGovernancePolicyEditDetailsDetailsToDBX(object: object.governancePolicyEditDetailsDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyEditDetailsDetails(governancePolicyEditDetailsDetails.swift))
    }
    if object.isGovernancePolicyEditDurationDetails() {
        let governancePolicyEditDurationDetails = mapDBTEAMLOGGovernancePolicyEditDurationDetailsToDBX(object: object.governancePolicyEditDurationDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyEditDurationDetails(governancePolicyEditDurationDetails.swift))
    }
    if object.isGovernancePolicyExportCreatedDetails() {
        let governancePolicyExportCreatedDetails = mapDBTEAMLOGGovernancePolicyExportCreatedDetailsToDBX(object: object.governancePolicyExportCreatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyExportCreatedDetails(governancePolicyExportCreatedDetails.swift))
    }
    if object.isGovernancePolicyExportRemovedDetails() {
        let governancePolicyExportRemovedDetails = mapDBTEAMLOGGovernancePolicyExportRemovedDetailsToDBX(object: object.governancePolicyExportRemovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyExportRemovedDetails(governancePolicyExportRemovedDetails.swift))
    }
    if object.isGovernancePolicyRemoveFoldersDetails() {
        let governancePolicyRemoveFoldersDetails = mapDBTEAMLOGGovernancePolicyRemoveFoldersDetailsToDBX(object: object.governancePolicyRemoveFoldersDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyRemoveFoldersDetails(governancePolicyRemoveFoldersDetails.swift))
    }
    if object.isGovernancePolicyReportCreatedDetails() {
        let governancePolicyReportCreatedDetails = mapDBTEAMLOGGovernancePolicyReportCreatedDetailsToDBX(object: object.governancePolicyReportCreatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyReportCreatedDetails(governancePolicyReportCreatedDetails.swift))
    }
    if object.isGovernancePolicyZipPartDownloadedDetails() {
        let governancePolicyZipPartDownloadedDetails = mapDBTEAMLOGGovernancePolicyZipPartDownloadedDetailsToDBX(
            object: object
                .governancePolicyZipPartDownloadedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .governancePolicyZipPartDownloadedDetails(governancePolicyZipPartDownloadedDetails.swift))
    }
    if object.isLegalHoldsActivateAHoldDetails() {
        let legalHoldsActivateAHoldDetails = mapDBTEAMLOGLegalHoldsActivateAHoldDetailsToDBX(object: object.legalHoldsActivateAHoldDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsActivateAHoldDetails(legalHoldsActivateAHoldDetails.swift))
    }
    if object.isLegalHoldsAddMembersDetails() {
        let legalHoldsAddMembersDetails = mapDBTEAMLOGLegalHoldsAddMembersDetailsToDBX(object: object.legalHoldsAddMembersDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsAddMembersDetails(legalHoldsAddMembersDetails.swift))
    }
    if object.isLegalHoldsChangeHoldDetailsDetails() {
        let legalHoldsChangeHoldDetailsDetails = mapDBTEAMLOGLegalHoldsChangeHoldDetailsDetailsToDBX(object: object.legalHoldsChangeHoldDetailsDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsChangeHoldDetailsDetails(legalHoldsChangeHoldDetailsDetails.swift))
    }
    if object.isLegalHoldsChangeHoldNameDetails() {
        let legalHoldsChangeHoldNameDetails = mapDBTEAMLOGLegalHoldsChangeHoldNameDetailsToDBX(object: object.legalHoldsChangeHoldNameDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsChangeHoldNameDetails(legalHoldsChangeHoldNameDetails.swift))
    }
    if object.isLegalHoldsExportAHoldDetails() {
        let legalHoldsExportAHoldDetails = mapDBTEAMLOGLegalHoldsExportAHoldDetailsToDBX(object: object.legalHoldsExportAHoldDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsExportAHoldDetails(legalHoldsExportAHoldDetails.swift))
    }
    if object.isLegalHoldsExportCancelledDetails() {
        let legalHoldsExportCancelledDetails = mapDBTEAMLOGLegalHoldsExportCancelledDetailsToDBX(object: object.legalHoldsExportCancelledDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsExportCancelledDetails(legalHoldsExportCancelledDetails.swift))
    }
    if object.isLegalHoldsExportDownloadedDetails() {
        let legalHoldsExportDownloadedDetails = mapDBTEAMLOGLegalHoldsExportDownloadedDetailsToDBX(object: object.legalHoldsExportDownloadedDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsExportDownloadedDetails(legalHoldsExportDownloadedDetails.swift))
    }
    if object.isLegalHoldsExportRemovedDetails() {
        let legalHoldsExportRemovedDetails = mapDBTEAMLOGLegalHoldsExportRemovedDetailsToDBX(object: object.legalHoldsExportRemovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsExportRemovedDetails(legalHoldsExportRemovedDetails.swift))
    }
    if object.isLegalHoldsReleaseAHoldDetails() {
        let legalHoldsReleaseAHoldDetails = mapDBTEAMLOGLegalHoldsReleaseAHoldDetailsToDBX(object: object.legalHoldsReleaseAHoldDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsReleaseAHoldDetails(legalHoldsReleaseAHoldDetails.swift))
    }
    if object.isLegalHoldsRemoveMembersDetails() {
        let legalHoldsRemoveMembersDetails = mapDBTEAMLOGLegalHoldsRemoveMembersDetailsToDBX(object: object.legalHoldsRemoveMembersDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsRemoveMembersDetails(legalHoldsRemoveMembersDetails.swift))
    }
    if object.isLegalHoldsReportAHoldDetails() {
        let legalHoldsReportAHoldDetails = mapDBTEAMLOGLegalHoldsReportAHoldDetailsToDBX(object: object.legalHoldsReportAHoldDetails)
        return DBXTeamLogEventDetails.factory(swift: .legalHoldsReportAHoldDetails(legalHoldsReportAHoldDetails.swift))
    }
    if object.isDeviceChangeIpDesktopDetails() {
        let deviceChangeIpDesktopDetails = mapDBTEAMLOGDeviceChangeIpDesktopDetailsToDBX(object: object.deviceChangeIpDesktopDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceChangeIpDesktopDetails(deviceChangeIpDesktopDetails.swift))
    }
    if object.isDeviceChangeIpMobileDetails() {
        let deviceChangeIpMobileDetails = mapDBTEAMLOGDeviceChangeIpMobileDetailsToDBX(object: object.deviceChangeIpMobileDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceChangeIpMobileDetails(deviceChangeIpMobileDetails.swift))
    }
    if object.isDeviceChangeIpWebDetails() {
        let deviceChangeIpWebDetails = mapDBTEAMLOGDeviceChangeIpWebDetailsToDBX(object: object.deviceChangeIpWebDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceChangeIpWebDetails(deviceChangeIpWebDetails.swift))
    }
    if object.isDeviceDeleteOnUnlinkFailDetails() {
        let deviceDeleteOnUnlinkFailDetails = mapDBTEAMLOGDeviceDeleteOnUnlinkFailDetailsToDBX(object: object.deviceDeleteOnUnlinkFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceDeleteOnUnlinkFailDetails(deviceDeleteOnUnlinkFailDetails.swift))
    }
    if object.isDeviceDeleteOnUnlinkSuccessDetails() {
        let deviceDeleteOnUnlinkSuccessDetails = mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsToDBX(object: object.deviceDeleteOnUnlinkSuccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceDeleteOnUnlinkSuccessDetails(deviceDeleteOnUnlinkSuccessDetails.swift))
    }
    if object.isDeviceLinkFailDetails() {
        let deviceLinkFailDetails = mapDBTEAMLOGDeviceLinkFailDetailsToDBX(object: object.deviceLinkFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceLinkFailDetails(deviceLinkFailDetails.swift))
    }
    if object.isDeviceLinkSuccessDetails() {
        let deviceLinkSuccessDetails = mapDBTEAMLOGDeviceLinkSuccessDetailsToDBX(object: object.deviceLinkSuccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceLinkSuccessDetails(deviceLinkSuccessDetails.swift))
    }
    if object.isDeviceManagementDisabledDetails() {
        let deviceManagementDisabledDetails = mapDBTEAMLOGDeviceManagementDisabledDetailsToDBX(object: object.deviceManagementDisabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceManagementDisabledDetails(deviceManagementDisabledDetails.swift))
    }
    if object.isDeviceManagementEnabledDetails() {
        let deviceManagementEnabledDetails = mapDBTEAMLOGDeviceManagementEnabledDetailsToDBX(object: object.deviceManagementEnabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceManagementEnabledDetails(deviceManagementEnabledDetails.swift))
    }
    if object.isDeviceSyncBackupStatusChangedDetails() {
        let deviceSyncBackupStatusChangedDetails = mapDBTEAMLOGDeviceSyncBackupStatusChangedDetailsToDBX(object: object.deviceSyncBackupStatusChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceSyncBackupStatusChangedDetails(deviceSyncBackupStatusChangedDetails.swift))
    }
    if object.isDeviceUnlinkDetails() {
        let deviceUnlinkDetails = mapDBTEAMLOGDeviceUnlinkDetailsToDBX(object: object.deviceUnlinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceUnlinkDetails(deviceUnlinkDetails.swift))
    }
    if object.isDropboxPasswordsExportedDetails() {
        let dropboxPasswordsExportedDetails = mapDBTEAMLOGDropboxPasswordsExportedDetailsToDBX(object: object.dropboxPasswordsExportedDetails)
        return DBXTeamLogEventDetails.factory(swift: .dropboxPasswordsExportedDetails(dropboxPasswordsExportedDetails.swift))
    }
    if object.isDropboxPasswordsNewDeviceEnrolledDetails() {
        let dropboxPasswordsNewDeviceEnrolledDetails = mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsToDBX(
            object: object
                .dropboxPasswordsNewDeviceEnrolledDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .dropboxPasswordsNewDeviceEnrolledDetails(dropboxPasswordsNewDeviceEnrolledDetails.swift))
    }
    if object.isEmmRefreshAuthTokenDetails() {
        let emmRefreshAuthTokenDetails = mapDBTEAMLOGEmmRefreshAuthTokenDetailsToDBX(object: object.emmRefreshAuthTokenDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmRefreshAuthTokenDetails(emmRefreshAuthTokenDetails.swift))
    }
    if object.isExternalDriveBackupEligibilityStatusCheckedDetails() {
        let externalDriveBackupEligibilityStatusCheckedDetails = mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsToDBX(
            object: object
                .externalDriveBackupEligibilityStatusCheckedDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .externalDriveBackupEligibilityStatusCheckedDetails(externalDriveBackupEligibilityStatusCheckedDetails.swift))
    }
    if object.isExternalDriveBackupStatusChangedDetails() {
        let externalDriveBackupStatusChangedDetails = mapDBTEAMLOGExternalDriveBackupStatusChangedDetailsToDBX(
            object: object
                .externalDriveBackupStatusChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .externalDriveBackupStatusChangedDetails(externalDriveBackupStatusChangedDetails.swift))
    }
    if object.isAccountCaptureChangeAvailabilityDetails() {
        let accountCaptureChangeAvailabilityDetails = mapDBTEAMLOGAccountCaptureChangeAvailabilityDetailsToDBX(
            object: object
                .accountCaptureChangeAvailabilityDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .accountCaptureChangeAvailabilityDetails(accountCaptureChangeAvailabilityDetails.swift))
    }
    if object.isAccountCaptureMigrateAccountDetails() {
        let accountCaptureMigrateAccountDetails = mapDBTEAMLOGAccountCaptureMigrateAccountDetailsToDBX(object: object.accountCaptureMigrateAccountDetails)
        return DBXTeamLogEventDetails.factory(swift: .accountCaptureMigrateAccountDetails(accountCaptureMigrateAccountDetails.swift))
    }
    if object.isAccountCaptureNotificationEmailsSentDetails() {
        let accountCaptureNotificationEmailsSentDetails = mapDBTEAMLOGAccountCaptureNotificationEmailsSentDetailsToDBX(
            object: object
                .accountCaptureNotificationEmailsSentDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .accountCaptureNotificationEmailsSentDetails(accountCaptureNotificationEmailsSentDetails.swift))
    }
    if object.isAccountCaptureRelinquishAccountDetails() {
        let accountCaptureRelinquishAccountDetails = mapDBTEAMLOGAccountCaptureRelinquishAccountDetailsToDBX(
            object: object
                .accountCaptureRelinquishAccountDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .accountCaptureRelinquishAccountDetails(accountCaptureRelinquishAccountDetails.swift))
    }
    if object.isDisabledDomainInvitesDetails() {
        let disabledDomainInvitesDetails = mapDBTEAMLOGDisabledDomainInvitesDetailsToDBX(object: object.disabledDomainInvitesDetails)
        return DBXTeamLogEventDetails.factory(swift: .disabledDomainInvitesDetails(disabledDomainInvitesDetails.swift))
    }
    if object.isDomainInvitesApproveRequestToJoinTeamDetails() {
        let domainInvitesApproveRequestToJoinTeamDetails = mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsToDBX(
            object: object
                .domainInvitesApproveRequestToJoinTeamDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesApproveRequestToJoinTeamDetails(domainInvitesApproveRequestToJoinTeamDetails.swift))
    }
    if object.isDomainInvitesDeclineRequestToJoinTeamDetails() {
        let domainInvitesDeclineRequestToJoinTeamDetails = mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsToDBX(
            object: object
                .domainInvitesDeclineRequestToJoinTeamDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesDeclineRequestToJoinTeamDetails(domainInvitesDeclineRequestToJoinTeamDetails.swift))
    }
    if object.isDomainInvitesEmailExistingUsersDetails() {
        let domainInvitesEmailExistingUsersDetails = mapDBTEAMLOGDomainInvitesEmailExistingUsersDetailsToDBX(
            object: object
                .domainInvitesEmailExistingUsersDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesEmailExistingUsersDetails(domainInvitesEmailExistingUsersDetails.swift))
    }
    if object.isDomainInvitesRequestToJoinTeamDetails() {
        let domainInvitesRequestToJoinTeamDetails = mapDBTEAMLOGDomainInvitesRequestToJoinTeamDetailsToDBX(object: object.domainInvitesRequestToJoinTeamDetails)
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesRequestToJoinTeamDetails(domainInvitesRequestToJoinTeamDetails.swift))
    }
    if object.isDomainInvitesSetInviteNewUserPrefToNoDetails() {
        let domainInvitesSetInviteNewUserPrefToNoDetails = mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsToDBX(
            object: object
                .domainInvitesSetInviteNewUserPrefToNoDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesSetInviteNewUserPrefToNoDetails(domainInvitesSetInviteNewUserPrefToNoDetails.swift))
    }
    if object.isDomainInvitesSetInviteNewUserPrefToYesDetails() {
        let domainInvitesSetInviteNewUserPrefToYesDetails = mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsToDBX(
            object: object
                .domainInvitesSetInviteNewUserPrefToYesDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainInvitesSetInviteNewUserPrefToYesDetails(domainInvitesSetInviteNewUserPrefToYesDetails.swift))
    }
    if object.isDomainVerificationAddDomainFailDetails() {
        let domainVerificationAddDomainFailDetails = mapDBTEAMLOGDomainVerificationAddDomainFailDetailsToDBX(
            object: object
                .domainVerificationAddDomainFailDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainVerificationAddDomainFailDetails(domainVerificationAddDomainFailDetails.swift))
    }
    if object.isDomainVerificationAddDomainSuccessDetails() {
        let domainVerificationAddDomainSuccessDetails = mapDBTEAMLOGDomainVerificationAddDomainSuccessDetailsToDBX(
            object: object
                .domainVerificationAddDomainSuccessDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .domainVerificationAddDomainSuccessDetails(domainVerificationAddDomainSuccessDetails.swift))
    }
    if object.isDomainVerificationRemoveDomainDetails() {
        let domainVerificationRemoveDomainDetails = mapDBTEAMLOGDomainVerificationRemoveDomainDetailsToDBX(object: object.domainVerificationRemoveDomainDetails)
        return DBXTeamLogEventDetails.factory(swift: .domainVerificationRemoveDomainDetails(domainVerificationRemoveDomainDetails.swift))
    }
    if object.isEnabledDomainInvitesDetails() {
        let enabledDomainInvitesDetails = mapDBTEAMLOGEnabledDomainInvitesDetailsToDBX(object: object.enabledDomainInvitesDetails)
        return DBXTeamLogEventDetails.factory(swift: .enabledDomainInvitesDetails(enabledDomainInvitesDetails.swift))
    }
    if object.isTeamEncryptionKeyCancelKeyDeletionDetails() {
        let teamEncryptionKeyCancelKeyDeletionDetails = mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetailsToDBX(
            object: object
                .teamEncryptionKeyCancelKeyDeletionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyCancelKeyDeletionDetails(teamEncryptionKeyCancelKeyDeletionDetails.swift))
    }
    if object.isTeamEncryptionKeyCreateKeyDetails() {
        let teamEncryptionKeyCreateKeyDetails = mapDBTEAMLOGTeamEncryptionKeyCreateKeyDetailsToDBX(object: object.teamEncryptionKeyCreateKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyCreateKeyDetails(teamEncryptionKeyCreateKeyDetails.swift))
    }
    if object.isTeamEncryptionKeyDeleteKeyDetails() {
        let teamEncryptionKeyDeleteKeyDetails = mapDBTEAMLOGTeamEncryptionKeyDeleteKeyDetailsToDBX(object: object.teamEncryptionKeyDeleteKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyDeleteKeyDetails(teamEncryptionKeyDeleteKeyDetails.swift))
    }
    if object.isTeamEncryptionKeyDisableKeyDetails() {
        let teamEncryptionKeyDisableKeyDetails = mapDBTEAMLOGTeamEncryptionKeyDisableKeyDetailsToDBX(object: object.teamEncryptionKeyDisableKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyDisableKeyDetails(teamEncryptionKeyDisableKeyDetails.swift))
    }
    if object.isTeamEncryptionKeyEnableKeyDetails() {
        let teamEncryptionKeyEnableKeyDetails = mapDBTEAMLOGTeamEncryptionKeyEnableKeyDetailsToDBX(object: object.teamEncryptionKeyEnableKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyEnableKeyDetails(teamEncryptionKeyEnableKeyDetails.swift))
    }
    if object.isTeamEncryptionKeyRotateKeyDetails() {
        let teamEncryptionKeyRotateKeyDetails = mapDBTEAMLOGTeamEncryptionKeyRotateKeyDetailsToDBX(object: object.teamEncryptionKeyRotateKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyRotateKeyDetails(teamEncryptionKeyRotateKeyDetails.swift))
    }
    if object.isTeamEncryptionKeyScheduleKeyDeletionDetails() {
        let teamEncryptionKeyScheduleKeyDeletionDetails = mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetailsToDBX(
            object: object
                .teamEncryptionKeyScheduleKeyDeletionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamEncryptionKeyScheduleKeyDeletionDetails(teamEncryptionKeyScheduleKeyDeletionDetails.swift))
    }
    if object.isApplyNamingConventionDetails() {
        let applyNamingConventionDetails = mapDBTEAMLOGApplyNamingConventionDetailsToDBX(object: object.applyNamingConventionDetails)
        return DBXTeamLogEventDetails.factory(swift: .applyNamingConventionDetails(applyNamingConventionDetails.swift))
    }
    if object.isCreateFolderDetails() {
        let createFolderDetails = mapDBTEAMLOGCreateFolderDetailsToDBX(object: object.createFolderDetails)
        return DBXTeamLogEventDetails.factory(swift: .createFolderDetails(createFolderDetails.swift))
    }
    if object.isFileAddDetails() {
        let fileAddDetails = mapDBTEAMLOGFileAddDetailsToDBX(object: object.fileAddDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileAddDetails(fileAddDetails.swift))
    }
    if object.isFileAddFromAutomationDetails() {
        let fileAddFromAutomationDetails = mapDBTEAMLOGFileAddFromAutomationDetailsToDBX(object: object.fileAddFromAutomationDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileAddFromAutomationDetails(fileAddFromAutomationDetails.swift))
    }
    if object.isFileCopyDetails() {
        let fileCopyDetails = mapDBTEAMLOGFileCopyDetailsToDBX(object: object.fileCopyDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileCopyDetails(fileCopyDetails.swift))
    }
    if object.isFileDeleteDetails() {
        let fileDeleteDetails = mapDBTEAMLOGFileDeleteDetailsToDBX(object: object.fileDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileDeleteDetails(fileDeleteDetails.swift))
    }
    if object.isFileDownloadDetails() {
        let fileDownloadDetails = mapDBTEAMLOGFileDownloadDetailsToDBX(object: object.fileDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileDownloadDetails(fileDownloadDetails.swift))
    }
    if object.isFileEditDetails() {
        let fileEditDetails = mapDBTEAMLOGFileEditDetailsToDBX(object: object.fileEditDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileEditDetails(fileEditDetails.swift))
    }
    if object.isFileGetCopyReferenceDetails() {
        let fileGetCopyReferenceDetails = mapDBTEAMLOGFileGetCopyReferenceDetailsToDBX(object: object.fileGetCopyReferenceDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileGetCopyReferenceDetails(fileGetCopyReferenceDetails.swift))
    }
    if object.isFileLockingLockStatusChangedDetails() {
        let fileLockingLockStatusChangedDetails = mapDBTEAMLOGFileLockingLockStatusChangedDetailsToDBX(object: object.fileLockingLockStatusChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileLockingLockStatusChangedDetails(fileLockingLockStatusChangedDetails.swift))
    }
    if object.isFileMoveDetails() {
        let fileMoveDetails = mapDBTEAMLOGFileMoveDetailsToDBX(object: object.fileMoveDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileMoveDetails(fileMoveDetails.swift))
    }
    if object.isFilePermanentlyDeleteDetails() {
        let filePermanentlyDeleteDetails = mapDBTEAMLOGFilePermanentlyDeleteDetailsToDBX(object: object.filePermanentlyDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .filePermanentlyDeleteDetails(filePermanentlyDeleteDetails.swift))
    }
    if object.isFilePreviewDetails() {
        let filePreviewDetails = mapDBTEAMLOGFilePreviewDetailsToDBX(object: object.filePreviewDetails)
        return DBXTeamLogEventDetails.factory(swift: .filePreviewDetails(filePreviewDetails.swift))
    }
    if object.isFileRenameDetails() {
        let fileRenameDetails = mapDBTEAMLOGFileRenameDetailsToDBX(object: object.fileRenameDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRenameDetails(fileRenameDetails.swift))
    }
    if object.isFileRestoreDetails() {
        let fileRestoreDetails = mapDBTEAMLOGFileRestoreDetailsToDBX(object: object.fileRestoreDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRestoreDetails(fileRestoreDetails.swift))
    }
    if object.isFileRevertDetails() {
        let fileRevertDetails = mapDBTEAMLOGFileRevertDetailsToDBX(object: object.fileRevertDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRevertDetails(fileRevertDetails.swift))
    }
    if object.isFileRollbackChangesDetails() {
        let fileRollbackChangesDetails = mapDBTEAMLOGFileRollbackChangesDetailsToDBX(object: object.fileRollbackChangesDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRollbackChangesDetails(fileRollbackChangesDetails.swift))
    }
    if object.isFileSaveCopyReferenceDetails() {
        let fileSaveCopyReferenceDetails = mapDBTEAMLOGFileSaveCopyReferenceDetailsToDBX(object: object.fileSaveCopyReferenceDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileSaveCopyReferenceDetails(fileSaveCopyReferenceDetails.swift))
    }
    if object.isFolderOverviewDescriptionChangedDetails() {
        let folderOverviewDescriptionChangedDetails = mapDBTEAMLOGFolderOverviewDescriptionChangedDetailsToDBX(
            object: object
                .folderOverviewDescriptionChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .folderOverviewDescriptionChangedDetails(folderOverviewDescriptionChangedDetails.swift))
    }
    if object.isFolderOverviewItemPinnedDetails() {
        let folderOverviewItemPinnedDetails = mapDBTEAMLOGFolderOverviewItemPinnedDetailsToDBX(object: object.folderOverviewItemPinnedDetails)
        return DBXTeamLogEventDetails.factory(swift: .folderOverviewItemPinnedDetails(folderOverviewItemPinnedDetails.swift))
    }
    if object.isFolderOverviewItemUnpinnedDetails() {
        let folderOverviewItemUnpinnedDetails = mapDBTEAMLOGFolderOverviewItemUnpinnedDetailsToDBX(object: object.folderOverviewItemUnpinnedDetails)
        return DBXTeamLogEventDetails.factory(swift: .folderOverviewItemUnpinnedDetails(folderOverviewItemUnpinnedDetails.swift))
    }
    if object.isObjectLabelAddedDetails() {
        let objectLabelAddedDetails = mapDBTEAMLOGObjectLabelAddedDetailsToDBX(object: object.objectLabelAddedDetails)
        return DBXTeamLogEventDetails.factory(swift: .objectLabelAddedDetails(objectLabelAddedDetails.swift))
    }
    if object.isObjectLabelRemovedDetails() {
        let objectLabelRemovedDetails = mapDBTEAMLOGObjectLabelRemovedDetailsToDBX(object: object.objectLabelRemovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .objectLabelRemovedDetails(objectLabelRemovedDetails.swift))
    }
    if object.isObjectLabelUpdatedValueDetails() {
        let objectLabelUpdatedValueDetails = mapDBTEAMLOGObjectLabelUpdatedValueDetailsToDBX(object: object.objectLabelUpdatedValueDetails)
        return DBXTeamLogEventDetails.factory(swift: .objectLabelUpdatedValueDetails(objectLabelUpdatedValueDetails.swift))
    }
    if object.isOrganizeFolderWithTidyDetails() {
        let organizeFolderWithTidyDetails = mapDBTEAMLOGOrganizeFolderWithTidyDetailsToDBX(object: object.organizeFolderWithTidyDetails)
        return DBXTeamLogEventDetails.factory(swift: .organizeFolderWithTidyDetails(organizeFolderWithTidyDetails.swift))
    }
    if object.isReplayFileDeleteDetails() {
        let replayFileDeleteDetails = mapDBTEAMLOGReplayFileDeleteDetailsToDBX(object: object.replayFileDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .replayFileDeleteDetails(replayFileDeleteDetails.swift))
    }
    if object.isRewindFolderDetails() {
        let rewindFolderDetails = mapDBTEAMLOGRewindFolderDetailsToDBX(object: object.rewindFolderDetails)
        return DBXTeamLogEventDetails.factory(swift: .rewindFolderDetails(rewindFolderDetails.swift))
    }
    if object.isUndoNamingConventionDetails() {
        let undoNamingConventionDetails = mapDBTEAMLOGUndoNamingConventionDetailsToDBX(object: object.undoNamingConventionDetails)
        return DBXTeamLogEventDetails.factory(swift: .undoNamingConventionDetails(undoNamingConventionDetails.swift))
    }
    if object.isUndoOrganizeFolderWithTidyDetails() {
        let undoOrganizeFolderWithTidyDetails = mapDBTEAMLOGUndoOrganizeFolderWithTidyDetailsToDBX(object: object.undoOrganizeFolderWithTidyDetails)
        return DBXTeamLogEventDetails.factory(swift: .undoOrganizeFolderWithTidyDetails(undoOrganizeFolderWithTidyDetails.swift))
    }
    if object.isUserTagsAddedDetails() {
        let userTagsAddedDetails = mapDBTEAMLOGUserTagsAddedDetailsToDBX(object: object.userTagsAddedDetails)
        return DBXTeamLogEventDetails.factory(swift: .userTagsAddedDetails(userTagsAddedDetails.swift))
    }
    if object.isUserTagsRemovedDetails() {
        let userTagsRemovedDetails = mapDBTEAMLOGUserTagsRemovedDetailsToDBX(object: object.userTagsRemovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .userTagsRemovedDetails(userTagsRemovedDetails.swift))
    }
    if object.isEmailIngestReceiveFileDetails() {
        let emailIngestReceiveFileDetails = mapDBTEAMLOGEmailIngestReceiveFileDetailsToDBX(object: object.emailIngestReceiveFileDetails)
        return DBXTeamLogEventDetails.factory(swift: .emailIngestReceiveFileDetails(emailIngestReceiveFileDetails.swift))
    }
    if object.isFileRequestChangeDetails() {
        let fileRequestChangeDetails = mapDBTEAMLOGFileRequestChangeDetailsToDBX(object: object.fileRequestChangeDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestChangeDetails(fileRequestChangeDetails.swift))
    }
    if object.isFileRequestCloseDetails() {
        let fileRequestCloseDetails = mapDBTEAMLOGFileRequestCloseDetailsToDBX(object: object.fileRequestCloseDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestCloseDetails(fileRequestCloseDetails.swift))
    }
    if object.isFileRequestCreateDetails() {
        let fileRequestCreateDetails = mapDBTEAMLOGFileRequestCreateDetailsToDBX(object: object.fileRequestCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestCreateDetails(fileRequestCreateDetails.swift))
    }
    if object.isFileRequestDeleteDetails() {
        let fileRequestDeleteDetails = mapDBTEAMLOGFileRequestDeleteDetailsToDBX(object: object.fileRequestDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestDeleteDetails(fileRequestDeleteDetails.swift))
    }
    if object.isFileRequestReceiveFileDetails() {
        let fileRequestReceiveFileDetails = mapDBTEAMLOGFileRequestReceiveFileDetailsToDBX(object: object.fileRequestReceiveFileDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestReceiveFileDetails(fileRequestReceiveFileDetails.swift))
    }
    if object.isGroupAddExternalIdDetails() {
        let groupAddExternalIdDetails = mapDBTEAMLOGGroupAddExternalIdDetailsToDBX(object: object.groupAddExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupAddExternalIdDetails(groupAddExternalIdDetails.swift))
    }
    if object.isGroupAddMemberDetails() {
        let groupAddMemberDetails = mapDBTEAMLOGGroupAddMemberDetailsToDBX(object: object.groupAddMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupAddMemberDetails(groupAddMemberDetails.swift))
    }
    if object.isGroupChangeExternalIdDetails() {
        let groupChangeExternalIdDetails = mapDBTEAMLOGGroupChangeExternalIdDetailsToDBX(object: object.groupChangeExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupChangeExternalIdDetails(groupChangeExternalIdDetails.swift))
    }
    if object.isGroupChangeManagementTypeDetails() {
        let groupChangeManagementTypeDetails = mapDBTEAMLOGGroupChangeManagementTypeDetailsToDBX(object: object.groupChangeManagementTypeDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupChangeManagementTypeDetails(groupChangeManagementTypeDetails.swift))
    }
    if object.isGroupChangeMemberRoleDetails() {
        let groupChangeMemberRoleDetails = mapDBTEAMLOGGroupChangeMemberRoleDetailsToDBX(object: object.groupChangeMemberRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupChangeMemberRoleDetails(groupChangeMemberRoleDetails.swift))
    }
    if object.isGroupCreateDetails() {
        let groupCreateDetails = mapDBTEAMLOGGroupCreateDetailsToDBX(object: object.groupCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupCreateDetails(groupCreateDetails.swift))
    }
    if object.isGroupDeleteDetails() {
        let groupDeleteDetails = mapDBTEAMLOGGroupDeleteDetailsToDBX(object: object.groupDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupDeleteDetails(groupDeleteDetails.swift))
    }
    if object.isGroupDescriptionUpdatedDetails() {
        let groupDescriptionUpdatedDetails = mapDBTEAMLOGGroupDescriptionUpdatedDetailsToDBX(object: object.groupDescriptionUpdatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupDescriptionUpdatedDetails(groupDescriptionUpdatedDetails.swift))
    }
    if object.isGroupJoinPolicyUpdatedDetails() {
        let groupJoinPolicyUpdatedDetails = mapDBTEAMLOGGroupJoinPolicyUpdatedDetailsToDBX(object: object.groupJoinPolicyUpdatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupJoinPolicyUpdatedDetails(groupJoinPolicyUpdatedDetails.swift))
    }
    if object.isGroupMovedDetails() {
        let groupMovedDetails = mapDBTEAMLOGGroupMovedDetailsToDBX(object: object.groupMovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupMovedDetails(groupMovedDetails.swift))
    }
    if object.isGroupRemoveExternalIdDetails() {
        let groupRemoveExternalIdDetails = mapDBTEAMLOGGroupRemoveExternalIdDetailsToDBX(object: object.groupRemoveExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupRemoveExternalIdDetails(groupRemoveExternalIdDetails.swift))
    }
    if object.isGroupRemoveMemberDetails() {
        let groupRemoveMemberDetails = mapDBTEAMLOGGroupRemoveMemberDetailsToDBX(object: object.groupRemoveMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupRemoveMemberDetails(groupRemoveMemberDetails.swift))
    }
    if object.isGroupRenameDetails() {
        let groupRenameDetails = mapDBTEAMLOGGroupRenameDetailsToDBX(object: object.groupRenameDetails)
        return DBXTeamLogEventDetails.factory(swift: .groupRenameDetails(groupRenameDetails.swift))
    }
    if object.isAccountLockOrUnlockedDetails() {
        let accountLockOrUnlockedDetails = mapDBTEAMLOGAccountLockOrUnlockedDetailsToDBX(object: object.accountLockOrUnlockedDetails)
        return DBXTeamLogEventDetails.factory(swift: .accountLockOrUnlockedDetails(accountLockOrUnlockedDetails.swift))
    }
    if object.isEmmErrorDetails() {
        let emmErrorDetails = mapDBTEAMLOGEmmErrorDetailsToDBX(object: object.emmErrorDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmErrorDetails(emmErrorDetails.swift))
    }
    if object.isGuestAdminSignedInViaTrustedTeamsDetails() {
        let guestAdminSignedInViaTrustedTeamsDetails = mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsToDBX(
            object: object
                .guestAdminSignedInViaTrustedTeamsDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .guestAdminSignedInViaTrustedTeamsDetails(guestAdminSignedInViaTrustedTeamsDetails.swift))
    }
    if object.isGuestAdminSignedOutViaTrustedTeamsDetails() {
        let guestAdminSignedOutViaTrustedTeamsDetails = mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsToDBX(
            object: object
                .guestAdminSignedOutViaTrustedTeamsDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .guestAdminSignedOutViaTrustedTeamsDetails(guestAdminSignedOutViaTrustedTeamsDetails.swift))
    }
    if object.isLoginFailDetails() {
        let loginFailDetails = mapDBTEAMLOGLoginFailDetailsToDBX(object: object.loginFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .loginFailDetails(loginFailDetails.swift))
    }
    if object.isLoginSuccessDetails() {
        let loginSuccessDetails = mapDBTEAMLOGLoginSuccessDetailsToDBX(object: object.loginSuccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .loginSuccessDetails(loginSuccessDetails.swift))
    }
    if object.isLogoutDetails() {
        let logoutDetails = mapDBTEAMLOGLogoutDetailsToDBX(object: object.logoutDetails)
        return DBXTeamLogEventDetails.factory(swift: .logoutDetails(logoutDetails.swift))
    }
    if object.isResellerSupportSessionEndDetails() {
        let resellerSupportSessionEndDetails = mapDBTEAMLOGResellerSupportSessionEndDetailsToDBX(object: object.resellerSupportSessionEndDetails)
        return DBXTeamLogEventDetails.factory(swift: .resellerSupportSessionEndDetails(resellerSupportSessionEndDetails.swift))
    }
    if object.isResellerSupportSessionStartDetails() {
        let resellerSupportSessionStartDetails = mapDBTEAMLOGResellerSupportSessionStartDetailsToDBX(object: object.resellerSupportSessionStartDetails)
        return DBXTeamLogEventDetails.factory(swift: .resellerSupportSessionStartDetails(resellerSupportSessionStartDetails.swift))
    }
    if object.isSignInAsSessionEndDetails() {
        let signInAsSessionEndDetails = mapDBTEAMLOGSignInAsSessionEndDetailsToDBX(object: object.signInAsSessionEndDetails)
        return DBXTeamLogEventDetails.factory(swift: .signInAsSessionEndDetails(signInAsSessionEndDetails.swift))
    }
    if object.isSignInAsSessionStartDetails() {
        let signInAsSessionStartDetails = mapDBTEAMLOGSignInAsSessionStartDetailsToDBX(object: object.signInAsSessionStartDetails)
        return DBXTeamLogEventDetails.factory(swift: .signInAsSessionStartDetails(signInAsSessionStartDetails.swift))
    }
    if object.isSsoErrorDetails() {
        let ssoErrorDetails = mapDBTEAMLOGSsoErrorDetailsToDBX(object: object.ssoErrorDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoErrorDetails(ssoErrorDetails.swift))
    }
    if object.isBackupAdminInvitationSentDetails() {
        let backupAdminInvitationSentDetails = mapDBTEAMLOGBackupAdminInvitationSentDetailsToDBX(object: object.backupAdminInvitationSentDetails)
        return DBXTeamLogEventDetails.factory(swift: .backupAdminInvitationSentDetails(backupAdminInvitationSentDetails.swift))
    }
    if object.isBackupInvitationOpenedDetails() {
        let backupInvitationOpenedDetails = mapDBTEAMLOGBackupInvitationOpenedDetailsToDBX(object: object.backupInvitationOpenedDetails)
        return DBXTeamLogEventDetails.factory(swift: .backupInvitationOpenedDetails(backupInvitationOpenedDetails.swift))
    }
    if object.isCreateTeamInviteLinkDetails() {
        let createTeamInviteLinkDetails = mapDBTEAMLOGCreateTeamInviteLinkDetailsToDBX(object: object.createTeamInviteLinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .createTeamInviteLinkDetails(createTeamInviteLinkDetails.swift))
    }
    if object.isDeleteTeamInviteLinkDetails() {
        let deleteTeamInviteLinkDetails = mapDBTEAMLOGDeleteTeamInviteLinkDetailsToDBX(object: object.deleteTeamInviteLinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .deleteTeamInviteLinkDetails(deleteTeamInviteLinkDetails.swift))
    }
    if object.isMemberAddExternalIdDetails() {
        let memberAddExternalIdDetails = mapDBTEAMLOGMemberAddExternalIdDetailsToDBX(object: object.memberAddExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberAddExternalIdDetails(memberAddExternalIdDetails.swift))
    }
    if object.isMemberAddNameDetails() {
        let memberAddNameDetails = mapDBTEAMLOGMemberAddNameDetailsToDBX(object: object.memberAddNameDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberAddNameDetails(memberAddNameDetails.swift))
    }
    if object.isMemberChangeAdminRoleDetails() {
        let memberChangeAdminRoleDetails = mapDBTEAMLOGMemberChangeAdminRoleDetailsToDBX(object: object.memberChangeAdminRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeAdminRoleDetails(memberChangeAdminRoleDetails.swift))
    }
    if object.isMemberChangeEmailDetails() {
        let memberChangeEmailDetails = mapDBTEAMLOGMemberChangeEmailDetailsToDBX(object: object.memberChangeEmailDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeEmailDetails(memberChangeEmailDetails.swift))
    }
    if object.isMemberChangeExternalIdDetails() {
        let memberChangeExternalIdDetails = mapDBTEAMLOGMemberChangeExternalIdDetailsToDBX(object: object.memberChangeExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeExternalIdDetails(memberChangeExternalIdDetails.swift))
    }
    if object.isMemberChangeMembershipTypeDetails() {
        let memberChangeMembershipTypeDetails = mapDBTEAMLOGMemberChangeMembershipTypeDetailsToDBX(object: object.memberChangeMembershipTypeDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeMembershipTypeDetails(memberChangeMembershipTypeDetails.swift))
    }
    if object.isMemberChangeNameDetails() {
        let memberChangeNameDetails = mapDBTEAMLOGMemberChangeNameDetailsToDBX(object: object.memberChangeNameDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeNameDetails(memberChangeNameDetails.swift))
    }
    if object.isMemberChangeResellerRoleDetails() {
        let memberChangeResellerRoleDetails = mapDBTEAMLOGMemberChangeResellerRoleDetailsToDBX(object: object.memberChangeResellerRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeResellerRoleDetails(memberChangeResellerRoleDetails.swift))
    }
    if object.isMemberChangeStatusDetails() {
        let memberChangeStatusDetails = mapDBTEAMLOGMemberChangeStatusDetailsToDBX(object: object.memberChangeStatusDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberChangeStatusDetails(memberChangeStatusDetails.swift))
    }
    if object.isMemberDeleteManualContactsDetails() {
        let memberDeleteManualContactsDetails = mapDBTEAMLOGMemberDeleteManualContactsDetailsToDBX(object: object.memberDeleteManualContactsDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberDeleteManualContactsDetails(memberDeleteManualContactsDetails.swift))
    }
    if object.isMemberDeleteProfilePhotoDetails() {
        let memberDeleteProfilePhotoDetails = mapDBTEAMLOGMemberDeleteProfilePhotoDetailsToDBX(object: object.memberDeleteProfilePhotoDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberDeleteProfilePhotoDetails(memberDeleteProfilePhotoDetails.swift))
    }
    if object.isMemberPermanentlyDeleteAccountContentsDetails() {
        let memberPermanentlyDeleteAccountContentsDetails = mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsToDBX(
            object: object
                .memberPermanentlyDeleteAccountContentsDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberPermanentlyDeleteAccountContentsDetails(memberPermanentlyDeleteAccountContentsDetails.swift))
    }
    if object.isMemberRemoveExternalIdDetails() {
        let memberRemoveExternalIdDetails = mapDBTEAMLOGMemberRemoveExternalIdDetailsToDBX(object: object.memberRemoveExternalIdDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberRemoveExternalIdDetails(memberRemoveExternalIdDetails.swift))
    }
    if object.isMemberSetProfilePhotoDetails() {
        let memberSetProfilePhotoDetails = mapDBTEAMLOGMemberSetProfilePhotoDetailsToDBX(object: object.memberSetProfilePhotoDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSetProfilePhotoDetails(memberSetProfilePhotoDetails.swift))
    }
    if object.isMemberSpaceLimitsAddCustomQuotaDetails() {
        let memberSpaceLimitsAddCustomQuotaDetails = mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsToDBX(
            object: object
                .memberSpaceLimitsAddCustomQuotaDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsAddCustomQuotaDetails(memberSpaceLimitsAddCustomQuotaDetails.swift))
    }
    if object.isMemberSpaceLimitsChangeCustomQuotaDetails() {
        let memberSpaceLimitsChangeCustomQuotaDetails = mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsToDBX(
            object: object
                .memberSpaceLimitsChangeCustomQuotaDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsChangeCustomQuotaDetails(memberSpaceLimitsChangeCustomQuotaDetails.swift))
    }
    if object.isMemberSpaceLimitsChangeStatusDetails() {
        let memberSpaceLimitsChangeStatusDetails = mapDBTEAMLOGMemberSpaceLimitsChangeStatusDetailsToDBX(object: object.memberSpaceLimitsChangeStatusDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsChangeStatusDetails(memberSpaceLimitsChangeStatusDetails.swift))
    }
    if object.isMemberSpaceLimitsRemoveCustomQuotaDetails() {
        let memberSpaceLimitsRemoveCustomQuotaDetails = mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsToDBX(
            object: object
                .memberSpaceLimitsRemoveCustomQuotaDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsRemoveCustomQuotaDetails(memberSpaceLimitsRemoveCustomQuotaDetails.swift))
    }
    if object.isMemberSuggestDetails() {
        let memberSuggestDetails = mapDBTEAMLOGMemberSuggestDetailsToDBX(object: object.memberSuggestDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSuggestDetails(memberSuggestDetails.swift))
    }
    if object.isMemberTransferAccountContentsDetails() {
        let memberTransferAccountContentsDetails = mapDBTEAMLOGMemberTransferAccountContentsDetailsToDBX(object: object.memberTransferAccountContentsDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberTransferAccountContentsDetails(memberTransferAccountContentsDetails.swift))
    }
    if object.isPendingSecondaryEmailAddedDetails() {
        let pendingSecondaryEmailAddedDetails = mapDBTEAMLOGPendingSecondaryEmailAddedDetailsToDBX(object: object.pendingSecondaryEmailAddedDetails)
        return DBXTeamLogEventDetails.factory(swift: .pendingSecondaryEmailAddedDetails(pendingSecondaryEmailAddedDetails.swift))
    }
    if object.isSecondaryEmailDeletedDetails() {
        let secondaryEmailDeletedDetails = mapDBTEAMLOGSecondaryEmailDeletedDetailsToDBX(object: object.secondaryEmailDeletedDetails)
        return DBXTeamLogEventDetails.factory(swift: .secondaryEmailDeletedDetails(secondaryEmailDeletedDetails.swift))
    }
    if object.isSecondaryEmailVerifiedDetails() {
        let secondaryEmailVerifiedDetails = mapDBTEAMLOGSecondaryEmailVerifiedDetailsToDBX(object: object.secondaryEmailVerifiedDetails)
        return DBXTeamLogEventDetails.factory(swift: .secondaryEmailVerifiedDetails(secondaryEmailVerifiedDetails.swift))
    }
    if object.isSecondaryMailsPolicyChangedDetails() {
        let secondaryMailsPolicyChangedDetails = mapDBTEAMLOGSecondaryMailsPolicyChangedDetailsToDBX(object: object.secondaryMailsPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .secondaryMailsPolicyChangedDetails(secondaryMailsPolicyChangedDetails.swift))
    }
    if object.isBinderAddPageDetails() {
        let binderAddPageDetails = mapDBTEAMLOGBinderAddPageDetailsToDBX(object: object.binderAddPageDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderAddPageDetails(binderAddPageDetails.swift))
    }
    if object.isBinderAddSectionDetails() {
        let binderAddSectionDetails = mapDBTEAMLOGBinderAddSectionDetailsToDBX(object: object.binderAddSectionDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderAddSectionDetails(binderAddSectionDetails.swift))
    }
    if object.isBinderRemovePageDetails() {
        let binderRemovePageDetails = mapDBTEAMLOGBinderRemovePageDetailsToDBX(object: object.binderRemovePageDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderRemovePageDetails(binderRemovePageDetails.swift))
    }
    if object.isBinderRemoveSectionDetails() {
        let binderRemoveSectionDetails = mapDBTEAMLOGBinderRemoveSectionDetailsToDBX(object: object.binderRemoveSectionDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderRemoveSectionDetails(binderRemoveSectionDetails.swift))
    }
    if object.isBinderRenamePageDetails() {
        let binderRenamePageDetails = mapDBTEAMLOGBinderRenamePageDetailsToDBX(object: object.binderRenamePageDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderRenamePageDetails(binderRenamePageDetails.swift))
    }
    if object.isBinderRenameSectionDetails() {
        let binderRenameSectionDetails = mapDBTEAMLOGBinderRenameSectionDetailsToDBX(object: object.binderRenameSectionDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderRenameSectionDetails(binderRenameSectionDetails.swift))
    }
    if object.isBinderReorderPageDetails() {
        let binderReorderPageDetails = mapDBTEAMLOGBinderReorderPageDetailsToDBX(object: object.binderReorderPageDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderReorderPageDetails(binderReorderPageDetails.swift))
    }
    if object.isBinderReorderSectionDetails() {
        let binderReorderSectionDetails = mapDBTEAMLOGBinderReorderSectionDetailsToDBX(object: object.binderReorderSectionDetails)
        return DBXTeamLogEventDetails.factory(swift: .binderReorderSectionDetails(binderReorderSectionDetails.swift))
    }
    if object.isPaperContentAddMemberDetails() {
        let paperContentAddMemberDetails = mapDBTEAMLOGPaperContentAddMemberDetailsToDBX(object: object.paperContentAddMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentAddMemberDetails(paperContentAddMemberDetails.swift))
    }
    if object.isPaperContentAddToFolderDetails() {
        let paperContentAddToFolderDetails = mapDBTEAMLOGPaperContentAddToFolderDetailsToDBX(object: object.paperContentAddToFolderDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentAddToFolderDetails(paperContentAddToFolderDetails.swift))
    }
    if object.isPaperContentArchiveDetails() {
        let paperContentArchiveDetails = mapDBTEAMLOGPaperContentArchiveDetailsToDBX(object: object.paperContentArchiveDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentArchiveDetails(paperContentArchiveDetails.swift))
    }
    if object.isPaperContentCreateDetails() {
        let paperContentCreateDetails = mapDBTEAMLOGPaperContentCreateDetailsToDBX(object: object.paperContentCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentCreateDetails(paperContentCreateDetails.swift))
    }
    if object.isPaperContentPermanentlyDeleteDetails() {
        let paperContentPermanentlyDeleteDetails = mapDBTEAMLOGPaperContentPermanentlyDeleteDetailsToDBX(object: object.paperContentPermanentlyDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentPermanentlyDeleteDetails(paperContentPermanentlyDeleteDetails.swift))
    }
    if object.isPaperContentRemoveFromFolderDetails() {
        let paperContentRemoveFromFolderDetails = mapDBTEAMLOGPaperContentRemoveFromFolderDetailsToDBX(object: object.paperContentRemoveFromFolderDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentRemoveFromFolderDetails(paperContentRemoveFromFolderDetails.swift))
    }
    if object.isPaperContentRemoveMemberDetails() {
        let paperContentRemoveMemberDetails = mapDBTEAMLOGPaperContentRemoveMemberDetailsToDBX(object: object.paperContentRemoveMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentRemoveMemberDetails(paperContentRemoveMemberDetails.swift))
    }
    if object.isPaperContentRenameDetails() {
        let paperContentRenameDetails = mapDBTEAMLOGPaperContentRenameDetailsToDBX(object: object.paperContentRenameDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentRenameDetails(paperContentRenameDetails.swift))
    }
    if object.isPaperContentRestoreDetails() {
        let paperContentRestoreDetails = mapDBTEAMLOGPaperContentRestoreDetailsToDBX(object: object.paperContentRestoreDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperContentRestoreDetails(paperContentRestoreDetails.swift))
    }
    if object.isPaperDocAddCommentDetails() {
        let paperDocAddCommentDetails = mapDBTEAMLOGPaperDocAddCommentDetailsToDBX(object: object.paperDocAddCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocAddCommentDetails(paperDocAddCommentDetails.swift))
    }
    if object.isPaperDocChangeMemberRoleDetails() {
        let paperDocChangeMemberRoleDetails = mapDBTEAMLOGPaperDocChangeMemberRoleDetailsToDBX(object: object.paperDocChangeMemberRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocChangeMemberRoleDetails(paperDocChangeMemberRoleDetails.swift))
    }
    if object.isPaperDocChangeSharingPolicyDetails() {
        let paperDocChangeSharingPolicyDetails = mapDBTEAMLOGPaperDocChangeSharingPolicyDetailsToDBX(object: object.paperDocChangeSharingPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocChangeSharingPolicyDetails(paperDocChangeSharingPolicyDetails.swift))
    }
    if object.isPaperDocChangeSubscriptionDetails() {
        let paperDocChangeSubscriptionDetails = mapDBTEAMLOGPaperDocChangeSubscriptionDetailsToDBX(object: object.paperDocChangeSubscriptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocChangeSubscriptionDetails(paperDocChangeSubscriptionDetails.swift))
    }
    if object.isPaperDocDeletedDetails() {
        let paperDocDeletedDetails = mapDBTEAMLOGPaperDocDeletedDetailsToDBX(object: object.paperDocDeletedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocDeletedDetails(paperDocDeletedDetails.swift))
    }
    if object.isPaperDocDeleteCommentDetails() {
        let paperDocDeleteCommentDetails = mapDBTEAMLOGPaperDocDeleteCommentDetailsToDBX(object: object.paperDocDeleteCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocDeleteCommentDetails(paperDocDeleteCommentDetails.swift))
    }
    if object.isPaperDocDownloadDetails() {
        let paperDocDownloadDetails = mapDBTEAMLOGPaperDocDownloadDetailsToDBX(object: object.paperDocDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocDownloadDetails(paperDocDownloadDetails.swift))
    }
    if object.isPaperDocEditDetails() {
        let paperDocEditDetails = mapDBTEAMLOGPaperDocEditDetailsToDBX(object: object.paperDocEditDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocEditDetails(paperDocEditDetails.swift))
    }
    if object.isPaperDocEditCommentDetails() {
        let paperDocEditCommentDetails = mapDBTEAMLOGPaperDocEditCommentDetailsToDBX(object: object.paperDocEditCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocEditCommentDetails(paperDocEditCommentDetails.swift))
    }
    if object.isPaperDocFollowedDetails() {
        let paperDocFollowedDetails = mapDBTEAMLOGPaperDocFollowedDetailsToDBX(object: object.paperDocFollowedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocFollowedDetails(paperDocFollowedDetails.swift))
    }
    if object.isPaperDocMentionDetails() {
        let paperDocMentionDetails = mapDBTEAMLOGPaperDocMentionDetailsToDBX(object: object.paperDocMentionDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocMentionDetails(paperDocMentionDetails.swift))
    }
    if object.isPaperDocOwnershipChangedDetails() {
        let paperDocOwnershipChangedDetails = mapDBTEAMLOGPaperDocOwnershipChangedDetailsToDBX(object: object.paperDocOwnershipChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocOwnershipChangedDetails(paperDocOwnershipChangedDetails.swift))
    }
    if object.isPaperDocRequestAccessDetails() {
        let paperDocRequestAccessDetails = mapDBTEAMLOGPaperDocRequestAccessDetailsToDBX(object: object.paperDocRequestAccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocRequestAccessDetails(paperDocRequestAccessDetails.swift))
    }
    if object.isPaperDocResolveCommentDetails() {
        let paperDocResolveCommentDetails = mapDBTEAMLOGPaperDocResolveCommentDetailsToDBX(object: object.paperDocResolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocResolveCommentDetails(paperDocResolveCommentDetails.swift))
    }
    if object.isPaperDocRevertDetails() {
        let paperDocRevertDetails = mapDBTEAMLOGPaperDocRevertDetailsToDBX(object: object.paperDocRevertDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocRevertDetails(paperDocRevertDetails.swift))
    }
    if object.isPaperDocSlackShareDetails() {
        let paperDocSlackShareDetails = mapDBTEAMLOGPaperDocSlackShareDetailsToDBX(object: object.paperDocSlackShareDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocSlackShareDetails(paperDocSlackShareDetails.swift))
    }
    if object.isPaperDocTeamInviteDetails() {
        let paperDocTeamInviteDetails = mapDBTEAMLOGPaperDocTeamInviteDetailsToDBX(object: object.paperDocTeamInviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocTeamInviteDetails(paperDocTeamInviteDetails.swift))
    }
    if object.isPaperDocTrashedDetails() {
        let paperDocTrashedDetails = mapDBTEAMLOGPaperDocTrashedDetailsToDBX(object: object.paperDocTrashedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocTrashedDetails(paperDocTrashedDetails.swift))
    }
    if object.isPaperDocUnresolveCommentDetails() {
        let paperDocUnresolveCommentDetails = mapDBTEAMLOGPaperDocUnresolveCommentDetailsToDBX(object: object.paperDocUnresolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocUnresolveCommentDetails(paperDocUnresolveCommentDetails.swift))
    }
    if object.isPaperDocUntrashedDetails() {
        let paperDocUntrashedDetails = mapDBTEAMLOGPaperDocUntrashedDetailsToDBX(object: object.paperDocUntrashedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocUntrashedDetails(paperDocUntrashedDetails.swift))
    }
    if object.isPaperDocViewDetails() {
        let paperDocViewDetails = mapDBTEAMLOGPaperDocViewDetailsToDBX(object: object.paperDocViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDocViewDetails(paperDocViewDetails.swift))
    }
    if object.isPaperExternalViewAllowDetails() {
        let paperExternalViewAllowDetails = mapDBTEAMLOGPaperExternalViewAllowDetailsToDBX(object: object.paperExternalViewAllowDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperExternalViewAllowDetails(paperExternalViewAllowDetails.swift))
    }
    if object.isPaperExternalViewDefaultTeamDetails() {
        let paperExternalViewDefaultTeamDetails = mapDBTEAMLOGPaperExternalViewDefaultTeamDetailsToDBX(object: object.paperExternalViewDefaultTeamDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperExternalViewDefaultTeamDetails(paperExternalViewDefaultTeamDetails.swift))
    }
    if object.isPaperExternalViewForbidDetails() {
        let paperExternalViewForbidDetails = mapDBTEAMLOGPaperExternalViewForbidDetailsToDBX(object: object.paperExternalViewForbidDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperExternalViewForbidDetails(paperExternalViewForbidDetails.swift))
    }
    if object.isPaperFolderChangeSubscriptionDetails() {
        let paperFolderChangeSubscriptionDetails = mapDBTEAMLOGPaperFolderChangeSubscriptionDetailsToDBX(object: object.paperFolderChangeSubscriptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperFolderChangeSubscriptionDetails(paperFolderChangeSubscriptionDetails.swift))
    }
    if object.isPaperFolderDeletedDetails() {
        let paperFolderDeletedDetails = mapDBTEAMLOGPaperFolderDeletedDetailsToDBX(object: object.paperFolderDeletedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperFolderDeletedDetails(paperFolderDeletedDetails.swift))
    }
    if object.isPaperFolderFollowedDetails() {
        let paperFolderFollowedDetails = mapDBTEAMLOGPaperFolderFollowedDetailsToDBX(object: object.paperFolderFollowedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperFolderFollowedDetails(paperFolderFollowedDetails.swift))
    }
    if object.isPaperFolderTeamInviteDetails() {
        let paperFolderTeamInviteDetails = mapDBTEAMLOGPaperFolderTeamInviteDetailsToDBX(object: object.paperFolderTeamInviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperFolderTeamInviteDetails(paperFolderTeamInviteDetails.swift))
    }
    if object.isPaperPublishedLinkChangePermissionDetails() {
        let paperPublishedLinkChangePermissionDetails = mapDBTEAMLOGPaperPublishedLinkChangePermissionDetailsToDBX(
            object: object
                .paperPublishedLinkChangePermissionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .paperPublishedLinkChangePermissionDetails(paperPublishedLinkChangePermissionDetails.swift))
    }
    if object.isPaperPublishedLinkCreateDetails() {
        let paperPublishedLinkCreateDetails = mapDBTEAMLOGPaperPublishedLinkCreateDetailsToDBX(object: object.paperPublishedLinkCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperPublishedLinkCreateDetails(paperPublishedLinkCreateDetails.swift))
    }
    if object.isPaperPublishedLinkDisabledDetails() {
        let paperPublishedLinkDisabledDetails = mapDBTEAMLOGPaperPublishedLinkDisabledDetailsToDBX(object: object.paperPublishedLinkDisabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperPublishedLinkDisabledDetails(paperPublishedLinkDisabledDetails.swift))
    }
    if object.isPaperPublishedLinkViewDetails() {
        let paperPublishedLinkViewDetails = mapDBTEAMLOGPaperPublishedLinkViewDetailsToDBX(object: object.paperPublishedLinkViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperPublishedLinkViewDetails(paperPublishedLinkViewDetails.swift))
    }
    if object.isPasswordChangeDetails() {
        let passwordChangeDetails = mapDBTEAMLOGPasswordChangeDetailsToDBX(object: object.passwordChangeDetails)
        return DBXTeamLogEventDetails.factory(swift: .passwordChangeDetails(passwordChangeDetails.swift))
    }
    if object.isPasswordResetDetails() {
        let passwordResetDetails = mapDBTEAMLOGPasswordResetDetailsToDBX(object: object.passwordResetDetails)
        return DBXTeamLogEventDetails.factory(swift: .passwordResetDetails(passwordResetDetails.swift))
    }
    if object.isPasswordResetAllDetails() {
        let passwordResetAllDetails = mapDBTEAMLOGPasswordResetAllDetailsToDBX(object: object.passwordResetAllDetails)
        return DBXTeamLogEventDetails.factory(swift: .passwordResetAllDetails(passwordResetAllDetails.swift))
    }
    if object.isClassificationCreateReportDetails() {
        let classificationCreateReportDetails = mapDBTEAMLOGClassificationCreateReportDetailsToDBX(object: object.classificationCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .classificationCreateReportDetails(classificationCreateReportDetails.swift))
    }
    if object.isClassificationCreateReportFailDetails() {
        let classificationCreateReportFailDetails = mapDBTEAMLOGClassificationCreateReportFailDetailsToDBX(object: object.classificationCreateReportFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .classificationCreateReportFailDetails(classificationCreateReportFailDetails.swift))
    }
    if object.isEmmCreateExceptionsReportDetails() {
        let emmCreateExceptionsReportDetails = mapDBTEAMLOGEmmCreateExceptionsReportDetailsToDBX(object: object.emmCreateExceptionsReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmCreateExceptionsReportDetails(emmCreateExceptionsReportDetails.swift))
    }
    if object.isEmmCreateUsageReportDetails() {
        let emmCreateUsageReportDetails = mapDBTEAMLOGEmmCreateUsageReportDetailsToDBX(object: object.emmCreateUsageReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmCreateUsageReportDetails(emmCreateUsageReportDetails.swift))
    }
    if object.isExportMembersReportDetails() {
        let exportMembersReportDetails = mapDBTEAMLOGExportMembersReportDetailsToDBX(object: object.exportMembersReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .exportMembersReportDetails(exportMembersReportDetails.swift))
    }
    if object.isExportMembersReportFailDetails() {
        let exportMembersReportFailDetails = mapDBTEAMLOGExportMembersReportFailDetailsToDBX(object: object.exportMembersReportFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .exportMembersReportFailDetails(exportMembersReportFailDetails.swift))
    }
    if object.isExternalSharingCreateReportDetails() {
        let externalSharingCreateReportDetails = mapDBTEAMLOGExternalSharingCreateReportDetailsToDBX(object: object.externalSharingCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .externalSharingCreateReportDetails(externalSharingCreateReportDetails.swift))
    }
    if object.isExternalSharingReportFailedDetails() {
        let externalSharingReportFailedDetails = mapDBTEAMLOGExternalSharingReportFailedDetailsToDBX(object: object.externalSharingReportFailedDetails)
        return DBXTeamLogEventDetails.factory(swift: .externalSharingReportFailedDetails(externalSharingReportFailedDetails.swift))
    }
    if object.isNoExpirationLinkGenCreateReportDetails() {
        let noExpirationLinkGenCreateReportDetails = mapDBTEAMLOGNoExpirationLinkGenCreateReportDetailsToDBX(
            object: object
                .noExpirationLinkGenCreateReportDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .noExpirationLinkGenCreateReportDetails(noExpirationLinkGenCreateReportDetails.swift))
    }
    if object.isNoExpirationLinkGenReportFailedDetails() {
        let noExpirationLinkGenReportFailedDetails = mapDBTEAMLOGNoExpirationLinkGenReportFailedDetailsToDBX(
            object: object
                .noExpirationLinkGenReportFailedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .noExpirationLinkGenReportFailedDetails(noExpirationLinkGenReportFailedDetails.swift))
    }
    if object.isNoPasswordLinkGenCreateReportDetails() {
        let noPasswordLinkGenCreateReportDetails = mapDBTEAMLOGNoPasswordLinkGenCreateReportDetailsToDBX(object: object.noPasswordLinkGenCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .noPasswordLinkGenCreateReportDetails(noPasswordLinkGenCreateReportDetails.swift))
    }
    if object.isNoPasswordLinkGenReportFailedDetails() {
        let noPasswordLinkGenReportFailedDetails = mapDBTEAMLOGNoPasswordLinkGenReportFailedDetailsToDBX(object: object.noPasswordLinkGenReportFailedDetails)
        return DBXTeamLogEventDetails.factory(swift: .noPasswordLinkGenReportFailedDetails(noPasswordLinkGenReportFailedDetails.swift))
    }
    if object.isNoPasswordLinkViewCreateReportDetails() {
        let noPasswordLinkViewCreateReportDetails = mapDBTEAMLOGNoPasswordLinkViewCreateReportDetailsToDBX(object: object.noPasswordLinkViewCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .noPasswordLinkViewCreateReportDetails(noPasswordLinkViewCreateReportDetails.swift))
    }
    if object.isNoPasswordLinkViewReportFailedDetails() {
        let noPasswordLinkViewReportFailedDetails = mapDBTEAMLOGNoPasswordLinkViewReportFailedDetailsToDBX(object: object.noPasswordLinkViewReportFailedDetails)
        return DBXTeamLogEventDetails.factory(swift: .noPasswordLinkViewReportFailedDetails(noPasswordLinkViewReportFailedDetails.swift))
    }
    if object.isOutdatedLinkViewCreateReportDetails() {
        let outdatedLinkViewCreateReportDetails = mapDBTEAMLOGOutdatedLinkViewCreateReportDetailsToDBX(object: object.outdatedLinkViewCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .outdatedLinkViewCreateReportDetails(outdatedLinkViewCreateReportDetails.swift))
    }
    if object.isOutdatedLinkViewReportFailedDetails() {
        let outdatedLinkViewReportFailedDetails = mapDBTEAMLOGOutdatedLinkViewReportFailedDetailsToDBX(object: object.outdatedLinkViewReportFailedDetails)
        return DBXTeamLogEventDetails.factory(swift: .outdatedLinkViewReportFailedDetails(outdatedLinkViewReportFailedDetails.swift))
    }
    if object.isPaperAdminExportStartDetails() {
        let paperAdminExportStartDetails = mapDBTEAMLOGPaperAdminExportStartDetailsToDBX(object: object.paperAdminExportStartDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperAdminExportStartDetails(paperAdminExportStartDetails.swift))
    }
    if object.isRansomwareAlertCreateReportDetails() {
        let ransomwareAlertCreateReportDetails = mapDBTEAMLOGRansomwareAlertCreateReportDetailsToDBX(object: object.ransomwareAlertCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .ransomwareAlertCreateReportDetails(ransomwareAlertCreateReportDetails.swift))
    }
    if object.isRansomwareAlertCreateReportFailedDetails() {
        let ransomwareAlertCreateReportFailedDetails = mapDBTEAMLOGRansomwareAlertCreateReportFailedDetailsToDBX(
            object: object
                .ransomwareAlertCreateReportFailedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .ransomwareAlertCreateReportFailedDetails(ransomwareAlertCreateReportFailedDetails.swift))
    }
    if object.isSmartSyncCreateAdminPrivilegeReportDetails() {
        let smartSyncCreateAdminPrivilegeReportDetails = mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsToDBX(
            object: object
                .smartSyncCreateAdminPrivilegeReportDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .smartSyncCreateAdminPrivilegeReportDetails(smartSyncCreateAdminPrivilegeReportDetails.swift))
    }
    if object.isTeamActivityCreateReportDetails() {
        let teamActivityCreateReportDetails = mapDBTEAMLOGTeamActivityCreateReportDetailsToDBX(object: object.teamActivityCreateReportDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamActivityCreateReportDetails(teamActivityCreateReportDetails.swift))
    }
    if object.isTeamActivityCreateReportFailDetails() {
        let teamActivityCreateReportFailDetails = mapDBTEAMLOGTeamActivityCreateReportFailDetailsToDBX(object: object.teamActivityCreateReportFailDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamActivityCreateReportFailDetails(teamActivityCreateReportFailDetails.swift))
    }
    if object.isCollectionShareDetails() {
        let collectionShareDetails = mapDBTEAMLOGCollectionShareDetailsToDBX(object: object.collectionShareDetails)
        return DBXTeamLogEventDetails.factory(swift: .collectionShareDetails(collectionShareDetails.swift))
    }
    if object.isFileTransfersFileAddDetails() {
        let fileTransfersFileAddDetails = mapDBTEAMLOGFileTransfersFileAddDetailsToDBX(object: object.fileTransfersFileAddDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersFileAddDetails(fileTransfersFileAddDetails.swift))
    }
    if object.isFileTransfersTransferDeleteDetails() {
        let fileTransfersTransferDeleteDetails = mapDBTEAMLOGFileTransfersTransferDeleteDetailsToDBX(object: object.fileTransfersTransferDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersTransferDeleteDetails(fileTransfersTransferDeleteDetails.swift))
    }
    if object.isFileTransfersTransferDownloadDetails() {
        let fileTransfersTransferDownloadDetails = mapDBTEAMLOGFileTransfersTransferDownloadDetailsToDBX(object: object.fileTransfersTransferDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersTransferDownloadDetails(fileTransfersTransferDownloadDetails.swift))
    }
    if object.isFileTransfersTransferSendDetails() {
        let fileTransfersTransferSendDetails = mapDBTEAMLOGFileTransfersTransferSendDetailsToDBX(object: object.fileTransfersTransferSendDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersTransferSendDetails(fileTransfersTransferSendDetails.swift))
    }
    if object.isFileTransfersTransferViewDetails() {
        let fileTransfersTransferViewDetails = mapDBTEAMLOGFileTransfersTransferViewDetailsToDBX(object: object.fileTransfersTransferViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersTransferViewDetails(fileTransfersTransferViewDetails.swift))
    }
    if object.isNoteAclInviteOnlyDetails() {
        let noteAclInviteOnlyDetails = mapDBTEAMLOGNoteAclInviteOnlyDetailsToDBX(object: object.noteAclInviteOnlyDetails)
        return DBXTeamLogEventDetails.factory(swift: .noteAclInviteOnlyDetails(noteAclInviteOnlyDetails.swift))
    }
    if object.isNoteAclLinkDetails() {
        let noteAclLinkDetails = mapDBTEAMLOGNoteAclLinkDetailsToDBX(object: object.noteAclLinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .noteAclLinkDetails(noteAclLinkDetails.swift))
    }
    if object.isNoteAclTeamLinkDetails() {
        let noteAclTeamLinkDetails = mapDBTEAMLOGNoteAclTeamLinkDetailsToDBX(object: object.noteAclTeamLinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .noteAclTeamLinkDetails(noteAclTeamLinkDetails.swift))
    }
    if object.isNoteSharedDetails() {
        let noteSharedDetails = mapDBTEAMLOGNoteSharedDetailsToDBX(object: object.noteSharedDetails)
        return DBXTeamLogEventDetails.factory(swift: .noteSharedDetails(noteSharedDetails.swift))
    }
    if object.isNoteShareReceiveDetails() {
        let noteShareReceiveDetails = mapDBTEAMLOGNoteShareReceiveDetailsToDBX(object: object.noteShareReceiveDetails)
        return DBXTeamLogEventDetails.factory(swift: .noteShareReceiveDetails(noteShareReceiveDetails.swift))
    }
    if object.isOpenNoteSharedDetails() {
        let openNoteSharedDetails = mapDBTEAMLOGOpenNoteSharedDetailsToDBX(object: object.openNoteSharedDetails)
        return DBXTeamLogEventDetails.factory(swift: .openNoteSharedDetails(openNoteSharedDetails.swift))
    }
    if object.isReplayFileSharedLinkCreatedDetails() {
        let replayFileSharedLinkCreatedDetails = mapDBTEAMLOGReplayFileSharedLinkCreatedDetailsToDBX(object: object.replayFileSharedLinkCreatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .replayFileSharedLinkCreatedDetails(replayFileSharedLinkCreatedDetails.swift))
    }
    if object.isReplayFileSharedLinkModifiedDetails() {
        let replayFileSharedLinkModifiedDetails = mapDBTEAMLOGReplayFileSharedLinkModifiedDetailsToDBX(object: object.replayFileSharedLinkModifiedDetails)
        return DBXTeamLogEventDetails.factory(swift: .replayFileSharedLinkModifiedDetails(replayFileSharedLinkModifiedDetails.swift))
    }
    if object.isReplayProjectTeamAddDetails() {
        let replayProjectTeamAddDetails = mapDBTEAMLOGReplayProjectTeamAddDetailsToDBX(object: object.replayProjectTeamAddDetails)
        return DBXTeamLogEventDetails.factory(swift: .replayProjectTeamAddDetails(replayProjectTeamAddDetails.swift))
    }
    if object.isReplayProjectTeamDeleteDetails() {
        let replayProjectTeamDeleteDetails = mapDBTEAMLOGReplayProjectTeamDeleteDetailsToDBX(object: object.replayProjectTeamDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .replayProjectTeamDeleteDetails(replayProjectTeamDeleteDetails.swift))
    }
    if object.isSfAddGroupDetails() {
        let sfAddGroupDetails = mapDBTEAMLOGSfAddGroupDetailsToDBX(object: object.sfAddGroupDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfAddGroupDetails(sfAddGroupDetails.swift))
    }
    if object.isSfAllowNonMembersToViewSharedLinksDetails() {
        let sfAllowNonMembersToViewSharedLinksDetails = mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsToDBX(
            object: object
                .sfAllowNonMembersToViewSharedLinksDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sfAllowNonMembersToViewSharedLinksDetails(sfAllowNonMembersToViewSharedLinksDetails.swift))
    }
    if object.isSfExternalInviteWarnDetails() {
        let sfExternalInviteWarnDetails = mapDBTEAMLOGSfExternalInviteWarnDetailsToDBX(object: object.sfExternalInviteWarnDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfExternalInviteWarnDetails(sfExternalInviteWarnDetails.swift))
    }
    if object.isSfFbInviteDetails() {
        let sfFbInviteDetails = mapDBTEAMLOGSfFbInviteDetailsToDBX(object: object.sfFbInviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfFbInviteDetails(sfFbInviteDetails.swift))
    }
    if object.isSfFbInviteChangeRoleDetails() {
        let sfFbInviteChangeRoleDetails = mapDBTEAMLOGSfFbInviteChangeRoleDetailsToDBX(object: object.sfFbInviteChangeRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfFbInviteChangeRoleDetails(sfFbInviteChangeRoleDetails.swift))
    }
    if object.isSfFbUninviteDetails() {
        let sfFbUninviteDetails = mapDBTEAMLOGSfFbUninviteDetailsToDBX(object: object.sfFbUninviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfFbUninviteDetails(sfFbUninviteDetails.swift))
    }
    if object.isSfInviteGroupDetails() {
        let sfInviteGroupDetails = mapDBTEAMLOGSfInviteGroupDetailsToDBX(object: object.sfInviteGroupDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfInviteGroupDetails(sfInviteGroupDetails.swift))
    }
    if object.isSfTeamGrantAccessDetails() {
        let sfTeamGrantAccessDetails = mapDBTEAMLOGSfTeamGrantAccessDetailsToDBX(object: object.sfTeamGrantAccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamGrantAccessDetails(sfTeamGrantAccessDetails.swift))
    }
    if object.isSfTeamInviteDetails() {
        let sfTeamInviteDetails = mapDBTEAMLOGSfTeamInviteDetailsToDBX(object: object.sfTeamInviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamInviteDetails(sfTeamInviteDetails.swift))
    }
    if object.isSfTeamInviteChangeRoleDetails() {
        let sfTeamInviteChangeRoleDetails = mapDBTEAMLOGSfTeamInviteChangeRoleDetailsToDBX(object: object.sfTeamInviteChangeRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamInviteChangeRoleDetails(sfTeamInviteChangeRoleDetails.swift))
    }
    if object.isSfTeamJoinDetails() {
        let sfTeamJoinDetails = mapDBTEAMLOGSfTeamJoinDetailsToDBX(object: object.sfTeamJoinDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamJoinDetails(sfTeamJoinDetails.swift))
    }
    if object.isSfTeamJoinFromOobLinkDetails() {
        let sfTeamJoinFromOobLinkDetails = mapDBTEAMLOGSfTeamJoinFromOobLinkDetailsToDBX(object: object.sfTeamJoinFromOobLinkDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamJoinFromOobLinkDetails(sfTeamJoinFromOobLinkDetails.swift))
    }
    if object.isSfTeamUninviteDetails() {
        let sfTeamUninviteDetails = mapDBTEAMLOGSfTeamUninviteDetailsToDBX(object: object.sfTeamUninviteDetails)
        return DBXTeamLogEventDetails.factory(swift: .sfTeamUninviteDetails(sfTeamUninviteDetails.swift))
    }
    if object.isSharedContentAddInviteesDetails() {
        let sharedContentAddInviteesDetails = mapDBTEAMLOGSharedContentAddInviteesDetailsToDBX(object: object.sharedContentAddInviteesDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentAddInviteesDetails(sharedContentAddInviteesDetails.swift))
    }
    if object.isSharedContentAddLinkExpiryDetails() {
        let sharedContentAddLinkExpiryDetails = mapDBTEAMLOGSharedContentAddLinkExpiryDetailsToDBX(object: object.sharedContentAddLinkExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentAddLinkExpiryDetails(sharedContentAddLinkExpiryDetails.swift))
    }
    if object.isSharedContentAddLinkPasswordDetails() {
        let sharedContentAddLinkPasswordDetails = mapDBTEAMLOGSharedContentAddLinkPasswordDetailsToDBX(object: object.sharedContentAddLinkPasswordDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentAddLinkPasswordDetails(sharedContentAddLinkPasswordDetails.swift))
    }
    if object.isSharedContentAddMemberDetails() {
        let sharedContentAddMemberDetails = mapDBTEAMLOGSharedContentAddMemberDetailsToDBX(object: object.sharedContentAddMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentAddMemberDetails(sharedContentAddMemberDetails.swift))
    }
    if object.isSharedContentChangeDownloadsPolicyDetails() {
        let sharedContentChangeDownloadsPolicyDetails = mapDBTEAMLOGSharedContentChangeDownloadsPolicyDetailsToDBX(
            object: object
                .sharedContentChangeDownloadsPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeDownloadsPolicyDetails(sharedContentChangeDownloadsPolicyDetails.swift))
    }
    if object.isSharedContentChangeInviteeRoleDetails() {
        let sharedContentChangeInviteeRoleDetails = mapDBTEAMLOGSharedContentChangeInviteeRoleDetailsToDBX(object: object.sharedContentChangeInviteeRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeInviteeRoleDetails(sharedContentChangeInviteeRoleDetails.swift))
    }
    if object.isSharedContentChangeLinkAudienceDetails() {
        let sharedContentChangeLinkAudienceDetails = mapDBTEAMLOGSharedContentChangeLinkAudienceDetailsToDBX(
            object: object
                .sharedContentChangeLinkAudienceDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeLinkAudienceDetails(sharedContentChangeLinkAudienceDetails.swift))
    }
    if object.isSharedContentChangeLinkExpiryDetails() {
        let sharedContentChangeLinkExpiryDetails = mapDBTEAMLOGSharedContentChangeLinkExpiryDetailsToDBX(object: object.sharedContentChangeLinkExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeLinkExpiryDetails(sharedContentChangeLinkExpiryDetails.swift))
    }
    if object.isSharedContentChangeLinkPasswordDetails() {
        let sharedContentChangeLinkPasswordDetails = mapDBTEAMLOGSharedContentChangeLinkPasswordDetailsToDBX(
            object: object
                .sharedContentChangeLinkPasswordDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeLinkPasswordDetails(sharedContentChangeLinkPasswordDetails.swift))
    }
    if object.isSharedContentChangeMemberRoleDetails() {
        let sharedContentChangeMemberRoleDetails = mapDBTEAMLOGSharedContentChangeMemberRoleDetailsToDBX(object: object.sharedContentChangeMemberRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeMemberRoleDetails(sharedContentChangeMemberRoleDetails.swift))
    }
    if object.isSharedContentChangeViewerInfoPolicyDetails() {
        let sharedContentChangeViewerInfoPolicyDetails = mapDBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsToDBX(
            object: object
                .sharedContentChangeViewerInfoPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentChangeViewerInfoPolicyDetails(sharedContentChangeViewerInfoPolicyDetails.swift))
    }
    if object.isSharedContentClaimInvitationDetails() {
        let sharedContentClaimInvitationDetails = mapDBTEAMLOGSharedContentClaimInvitationDetailsToDBX(object: object.sharedContentClaimInvitationDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentClaimInvitationDetails(sharedContentClaimInvitationDetails.swift))
    }
    if object.isSharedContentCopyDetails() {
        let sharedContentCopyDetails = mapDBTEAMLOGSharedContentCopyDetailsToDBX(object: object.sharedContentCopyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentCopyDetails(sharedContentCopyDetails.swift))
    }
    if object.isSharedContentDownloadDetails() {
        let sharedContentDownloadDetails = mapDBTEAMLOGSharedContentDownloadDetailsToDBX(object: object.sharedContentDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentDownloadDetails(sharedContentDownloadDetails.swift))
    }
    if object.isSharedContentRelinquishMembershipDetails() {
        let sharedContentRelinquishMembershipDetails = mapDBTEAMLOGSharedContentRelinquishMembershipDetailsToDBX(
            object: object
                .sharedContentRelinquishMembershipDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRelinquishMembershipDetails(sharedContentRelinquishMembershipDetails.swift))
    }
    if object.isSharedContentRemoveInviteesDetails() {
        let sharedContentRemoveInviteesDetails = mapDBTEAMLOGSharedContentRemoveInviteesDetailsToDBX(object: object.sharedContentRemoveInviteesDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRemoveInviteesDetails(sharedContentRemoveInviteesDetails.swift))
    }
    if object.isSharedContentRemoveLinkExpiryDetails() {
        let sharedContentRemoveLinkExpiryDetails = mapDBTEAMLOGSharedContentRemoveLinkExpiryDetailsToDBX(object: object.sharedContentRemoveLinkExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRemoveLinkExpiryDetails(sharedContentRemoveLinkExpiryDetails.swift))
    }
    if object.isSharedContentRemoveLinkPasswordDetails() {
        let sharedContentRemoveLinkPasswordDetails = mapDBTEAMLOGSharedContentRemoveLinkPasswordDetailsToDBX(
            object: object
                .sharedContentRemoveLinkPasswordDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRemoveLinkPasswordDetails(sharedContentRemoveLinkPasswordDetails.swift))
    }
    if object.isSharedContentRemoveMemberDetails() {
        let sharedContentRemoveMemberDetails = mapDBTEAMLOGSharedContentRemoveMemberDetailsToDBX(object: object.sharedContentRemoveMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRemoveMemberDetails(sharedContentRemoveMemberDetails.swift))
    }
    if object.isSharedContentRequestAccessDetails() {
        let sharedContentRequestAccessDetails = mapDBTEAMLOGSharedContentRequestAccessDetailsToDBX(object: object.sharedContentRequestAccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRequestAccessDetails(sharedContentRequestAccessDetails.swift))
    }
    if object.isSharedContentRestoreInviteesDetails() {
        let sharedContentRestoreInviteesDetails = mapDBTEAMLOGSharedContentRestoreInviteesDetailsToDBX(object: object.sharedContentRestoreInviteesDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRestoreInviteesDetails(sharedContentRestoreInviteesDetails.swift))
    }
    if object.isSharedContentRestoreMemberDetails() {
        let sharedContentRestoreMemberDetails = mapDBTEAMLOGSharedContentRestoreMemberDetailsToDBX(object: object.sharedContentRestoreMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentRestoreMemberDetails(sharedContentRestoreMemberDetails.swift))
    }
    if object.isSharedContentUnshareDetails() {
        let sharedContentUnshareDetails = mapDBTEAMLOGSharedContentUnshareDetailsToDBX(object: object.sharedContentUnshareDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentUnshareDetails(sharedContentUnshareDetails.swift))
    }
    if object.isSharedContentViewDetails() {
        let sharedContentViewDetails = mapDBTEAMLOGSharedContentViewDetailsToDBX(object: object.sharedContentViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedContentViewDetails(sharedContentViewDetails.swift))
    }
    if object.isSharedFolderChangeLinkPolicyDetails() {
        let sharedFolderChangeLinkPolicyDetails = mapDBTEAMLOGSharedFolderChangeLinkPolicyDetailsToDBX(object: object.sharedFolderChangeLinkPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderChangeLinkPolicyDetails(sharedFolderChangeLinkPolicyDetails.swift))
    }
    if object.isSharedFolderChangeMembersInheritancePolicyDetails() {
        let sharedFolderChangeMembersInheritancePolicyDetails = mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsToDBX(
            object: object
                .sharedFolderChangeMembersInheritancePolicyDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .sharedFolderChangeMembersInheritancePolicyDetails(sharedFolderChangeMembersInheritancePolicyDetails.swift))
    }
    if object.isSharedFolderChangeMembersManagementPolicyDetails() {
        let sharedFolderChangeMembersManagementPolicyDetails = mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsToDBX(
            object: object
                .sharedFolderChangeMembersManagementPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderChangeMembersManagementPolicyDetails(sharedFolderChangeMembersManagementPolicyDetails.swift))
    }
    if object.isSharedFolderChangeMembersPolicyDetails() {
        let sharedFolderChangeMembersPolicyDetails = mapDBTEAMLOGSharedFolderChangeMembersPolicyDetailsToDBX(
            object: object
                .sharedFolderChangeMembersPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderChangeMembersPolicyDetails(sharedFolderChangeMembersPolicyDetails.swift))
    }
    if object.isSharedFolderCreateDetails() {
        let sharedFolderCreateDetails = mapDBTEAMLOGSharedFolderCreateDetailsToDBX(object: object.sharedFolderCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderCreateDetails(sharedFolderCreateDetails.swift))
    }
    if object.isSharedFolderDeclineInvitationDetails() {
        let sharedFolderDeclineInvitationDetails = mapDBTEAMLOGSharedFolderDeclineInvitationDetailsToDBX(object: object.sharedFolderDeclineInvitationDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderDeclineInvitationDetails(sharedFolderDeclineInvitationDetails.swift))
    }
    if object.isSharedFolderMountDetails() {
        let sharedFolderMountDetails = mapDBTEAMLOGSharedFolderMountDetailsToDBX(object: object.sharedFolderMountDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderMountDetails(sharedFolderMountDetails.swift))
    }
    if object.isSharedFolderNestDetails() {
        let sharedFolderNestDetails = mapDBTEAMLOGSharedFolderNestDetailsToDBX(object: object.sharedFolderNestDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderNestDetails(sharedFolderNestDetails.swift))
    }
    if object.isSharedFolderTransferOwnershipDetails() {
        let sharedFolderTransferOwnershipDetails = mapDBTEAMLOGSharedFolderTransferOwnershipDetailsToDBX(object: object.sharedFolderTransferOwnershipDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderTransferOwnershipDetails(sharedFolderTransferOwnershipDetails.swift))
    }
    if object.isSharedFolderUnmountDetails() {
        let sharedFolderUnmountDetails = mapDBTEAMLOGSharedFolderUnmountDetailsToDBX(object: object.sharedFolderUnmountDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedFolderUnmountDetails(sharedFolderUnmountDetails.swift))
    }
    if object.isSharedLinkAddExpiryDetails() {
        let sharedLinkAddExpiryDetails = mapDBTEAMLOGSharedLinkAddExpiryDetailsToDBX(object: object.sharedLinkAddExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkAddExpiryDetails(sharedLinkAddExpiryDetails.swift))
    }
    if object.isSharedLinkChangeExpiryDetails() {
        let sharedLinkChangeExpiryDetails = mapDBTEAMLOGSharedLinkChangeExpiryDetailsToDBX(object: object.sharedLinkChangeExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkChangeExpiryDetails(sharedLinkChangeExpiryDetails.swift))
    }
    if object.isSharedLinkChangeVisibilityDetails() {
        let sharedLinkChangeVisibilityDetails = mapDBTEAMLOGSharedLinkChangeVisibilityDetailsToDBX(object: object.sharedLinkChangeVisibilityDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkChangeVisibilityDetails(sharedLinkChangeVisibilityDetails.swift))
    }
    if object.isSharedLinkCopyDetails() {
        let sharedLinkCopyDetails = mapDBTEAMLOGSharedLinkCopyDetailsToDBX(object: object.sharedLinkCopyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkCopyDetails(sharedLinkCopyDetails.swift))
    }
    if object.isSharedLinkCreateDetails() {
        let sharedLinkCreateDetails = mapDBTEAMLOGSharedLinkCreateDetailsToDBX(object: object.sharedLinkCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkCreateDetails(sharedLinkCreateDetails.swift))
    }
    if object.isSharedLinkDisableDetails() {
        let sharedLinkDisableDetails = mapDBTEAMLOGSharedLinkDisableDetailsToDBX(object: object.sharedLinkDisableDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkDisableDetails(sharedLinkDisableDetails.swift))
    }
    if object.isSharedLinkDownloadDetails() {
        let sharedLinkDownloadDetails = mapDBTEAMLOGSharedLinkDownloadDetailsToDBX(object: object.sharedLinkDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkDownloadDetails(sharedLinkDownloadDetails.swift))
    }
    if object.isSharedLinkRemoveExpiryDetails() {
        let sharedLinkRemoveExpiryDetails = mapDBTEAMLOGSharedLinkRemoveExpiryDetailsToDBX(object: object.sharedLinkRemoveExpiryDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkRemoveExpiryDetails(sharedLinkRemoveExpiryDetails.swift))
    }
    if object.isSharedLinkSettingsAddExpirationDetails() {
        let sharedLinkSettingsAddExpirationDetails = mapDBTEAMLOGSharedLinkSettingsAddExpirationDetailsToDBX(
            object: object
                .sharedLinkSettingsAddExpirationDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsAddExpirationDetails(sharedLinkSettingsAddExpirationDetails.swift))
    }
    if object.isSharedLinkSettingsAddPasswordDetails() {
        let sharedLinkSettingsAddPasswordDetails = mapDBTEAMLOGSharedLinkSettingsAddPasswordDetailsToDBX(object: object.sharedLinkSettingsAddPasswordDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsAddPasswordDetails(sharedLinkSettingsAddPasswordDetails.swift))
    }
    if object.isSharedLinkSettingsAllowDownloadDisabledDetails() {
        let sharedLinkSettingsAllowDownloadDisabledDetails = mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsToDBX(
            object: object
                .sharedLinkSettingsAllowDownloadDisabledDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsAllowDownloadDisabledDetails(sharedLinkSettingsAllowDownloadDisabledDetails.swift))
    }
    if object.isSharedLinkSettingsAllowDownloadEnabledDetails() {
        let sharedLinkSettingsAllowDownloadEnabledDetails = mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsToDBX(
            object: object
                .sharedLinkSettingsAllowDownloadEnabledDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsAllowDownloadEnabledDetails(sharedLinkSettingsAllowDownloadEnabledDetails.swift))
    }
    if object.isSharedLinkSettingsChangeAudienceDetails() {
        let sharedLinkSettingsChangeAudienceDetails = mapDBTEAMLOGSharedLinkSettingsChangeAudienceDetailsToDBX(
            object: object
                .sharedLinkSettingsChangeAudienceDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsChangeAudienceDetails(sharedLinkSettingsChangeAudienceDetails.swift))
    }
    if object.isSharedLinkSettingsChangeExpirationDetails() {
        let sharedLinkSettingsChangeExpirationDetails = mapDBTEAMLOGSharedLinkSettingsChangeExpirationDetailsToDBX(
            object: object
                .sharedLinkSettingsChangeExpirationDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsChangeExpirationDetails(sharedLinkSettingsChangeExpirationDetails.swift))
    }
    if object.isSharedLinkSettingsChangePasswordDetails() {
        let sharedLinkSettingsChangePasswordDetails = mapDBTEAMLOGSharedLinkSettingsChangePasswordDetailsToDBX(
            object: object
                .sharedLinkSettingsChangePasswordDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsChangePasswordDetails(sharedLinkSettingsChangePasswordDetails.swift))
    }
    if object.isSharedLinkSettingsRemoveExpirationDetails() {
        let sharedLinkSettingsRemoveExpirationDetails = mapDBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsToDBX(
            object: object
                .sharedLinkSettingsRemoveExpirationDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsRemoveExpirationDetails(sharedLinkSettingsRemoveExpirationDetails.swift))
    }
    if object.isSharedLinkSettingsRemovePasswordDetails() {
        let sharedLinkSettingsRemovePasswordDetails = mapDBTEAMLOGSharedLinkSettingsRemovePasswordDetailsToDBX(
            object: object
                .sharedLinkSettingsRemovePasswordDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkSettingsRemovePasswordDetails(sharedLinkSettingsRemovePasswordDetails.swift))
    }
    if object.isSharedLinkShareDetails() {
        let sharedLinkShareDetails = mapDBTEAMLOGSharedLinkShareDetailsToDBX(object: object.sharedLinkShareDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkShareDetails(sharedLinkShareDetails.swift))
    }
    if object.isSharedLinkViewDetails() {
        let sharedLinkViewDetails = mapDBTEAMLOGSharedLinkViewDetailsToDBX(object: object.sharedLinkViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedLinkViewDetails(sharedLinkViewDetails.swift))
    }
    if object.isSharedNoteOpenedDetails() {
        let sharedNoteOpenedDetails = mapDBTEAMLOGSharedNoteOpenedDetailsToDBX(object: object.sharedNoteOpenedDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharedNoteOpenedDetails(sharedNoteOpenedDetails.swift))
    }
    if object.isShmodelDisableDownloadsDetails() {
        let shmodelDisableDownloadsDetails = mapDBTEAMLOGShmodelDisableDownloadsDetailsToDBX(object: object.shmodelDisableDownloadsDetails)
        return DBXTeamLogEventDetails.factory(swift: .shmodelDisableDownloadsDetails(shmodelDisableDownloadsDetails.swift))
    }
    if object.isShmodelEnableDownloadsDetails() {
        let shmodelEnableDownloadsDetails = mapDBTEAMLOGShmodelEnableDownloadsDetailsToDBX(object: object.shmodelEnableDownloadsDetails)
        return DBXTeamLogEventDetails.factory(swift: .shmodelEnableDownloadsDetails(shmodelEnableDownloadsDetails.swift))
    }
    if object.isShmodelGroupShareDetails() {
        let shmodelGroupShareDetails = mapDBTEAMLOGShmodelGroupShareDetailsToDBX(object: object.shmodelGroupShareDetails)
        return DBXTeamLogEventDetails.factory(swift: .shmodelGroupShareDetails(shmodelGroupShareDetails.swift))
    }
    if object.isShowcaseAccessGrantedDetails() {
        let showcaseAccessGrantedDetails = mapDBTEAMLOGShowcaseAccessGrantedDetailsToDBX(object: object.showcaseAccessGrantedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseAccessGrantedDetails(showcaseAccessGrantedDetails.swift))
    }
    if object.isShowcaseAddMemberDetails() {
        let showcaseAddMemberDetails = mapDBTEAMLOGShowcaseAddMemberDetailsToDBX(object: object.showcaseAddMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseAddMemberDetails(showcaseAddMemberDetails.swift))
    }
    if object.isShowcaseArchivedDetails() {
        let showcaseArchivedDetails = mapDBTEAMLOGShowcaseArchivedDetailsToDBX(object: object.showcaseArchivedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseArchivedDetails(showcaseArchivedDetails.swift))
    }
    if object.isShowcaseCreatedDetails() {
        let showcaseCreatedDetails = mapDBTEAMLOGShowcaseCreatedDetailsToDBX(object: object.showcaseCreatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseCreatedDetails(showcaseCreatedDetails.swift))
    }
    if object.isShowcaseDeleteCommentDetails() {
        let showcaseDeleteCommentDetails = mapDBTEAMLOGShowcaseDeleteCommentDetailsToDBX(object: object.showcaseDeleteCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseDeleteCommentDetails(showcaseDeleteCommentDetails.swift))
    }
    if object.isShowcaseEditedDetails() {
        let showcaseEditedDetails = mapDBTEAMLOGShowcaseEditedDetailsToDBX(object: object.showcaseEditedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseEditedDetails(showcaseEditedDetails.swift))
    }
    if object.isShowcaseEditCommentDetails() {
        let showcaseEditCommentDetails = mapDBTEAMLOGShowcaseEditCommentDetailsToDBX(object: object.showcaseEditCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseEditCommentDetails(showcaseEditCommentDetails.swift))
    }
    if object.isShowcaseFileAddedDetails() {
        let showcaseFileAddedDetails = mapDBTEAMLOGShowcaseFileAddedDetailsToDBX(object: object.showcaseFileAddedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseFileAddedDetails(showcaseFileAddedDetails.swift))
    }
    if object.isShowcaseFileDownloadDetails() {
        let showcaseFileDownloadDetails = mapDBTEAMLOGShowcaseFileDownloadDetailsToDBX(object: object.showcaseFileDownloadDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseFileDownloadDetails(showcaseFileDownloadDetails.swift))
    }
    if object.isShowcaseFileRemovedDetails() {
        let showcaseFileRemovedDetails = mapDBTEAMLOGShowcaseFileRemovedDetailsToDBX(object: object.showcaseFileRemovedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseFileRemovedDetails(showcaseFileRemovedDetails.swift))
    }
    if object.isShowcaseFileViewDetails() {
        let showcaseFileViewDetails = mapDBTEAMLOGShowcaseFileViewDetailsToDBX(object: object.showcaseFileViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseFileViewDetails(showcaseFileViewDetails.swift))
    }
    if object.isShowcasePermanentlyDeletedDetails() {
        let showcasePermanentlyDeletedDetails = mapDBTEAMLOGShowcasePermanentlyDeletedDetailsToDBX(object: object.showcasePermanentlyDeletedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcasePermanentlyDeletedDetails(showcasePermanentlyDeletedDetails.swift))
    }
    if object.isShowcasePostCommentDetails() {
        let showcasePostCommentDetails = mapDBTEAMLOGShowcasePostCommentDetailsToDBX(object: object.showcasePostCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcasePostCommentDetails(showcasePostCommentDetails.swift))
    }
    if object.isShowcaseRemoveMemberDetails() {
        let showcaseRemoveMemberDetails = mapDBTEAMLOGShowcaseRemoveMemberDetailsToDBX(object: object.showcaseRemoveMemberDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseRemoveMemberDetails(showcaseRemoveMemberDetails.swift))
    }
    if object.isShowcaseRenamedDetails() {
        let showcaseRenamedDetails = mapDBTEAMLOGShowcaseRenamedDetailsToDBX(object: object.showcaseRenamedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseRenamedDetails(showcaseRenamedDetails.swift))
    }
    if object.isShowcaseRequestAccessDetails() {
        let showcaseRequestAccessDetails = mapDBTEAMLOGShowcaseRequestAccessDetailsToDBX(object: object.showcaseRequestAccessDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseRequestAccessDetails(showcaseRequestAccessDetails.swift))
    }
    if object.isShowcaseResolveCommentDetails() {
        let showcaseResolveCommentDetails = mapDBTEAMLOGShowcaseResolveCommentDetailsToDBX(object: object.showcaseResolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseResolveCommentDetails(showcaseResolveCommentDetails.swift))
    }
    if object.isShowcaseRestoredDetails() {
        let showcaseRestoredDetails = mapDBTEAMLOGShowcaseRestoredDetailsToDBX(object: object.showcaseRestoredDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseRestoredDetails(showcaseRestoredDetails.swift))
    }
    if object.isShowcaseTrashedDetails() {
        let showcaseTrashedDetails = mapDBTEAMLOGShowcaseTrashedDetailsToDBX(object: object.showcaseTrashedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseTrashedDetails(showcaseTrashedDetails.swift))
    }
    if object.isShowcaseTrashedDeprecatedDetails() {
        let showcaseTrashedDeprecatedDetails = mapDBTEAMLOGShowcaseTrashedDeprecatedDetailsToDBX(object: object.showcaseTrashedDeprecatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseTrashedDeprecatedDetails(showcaseTrashedDeprecatedDetails.swift))
    }
    if object.isShowcaseUnresolveCommentDetails() {
        let showcaseUnresolveCommentDetails = mapDBTEAMLOGShowcaseUnresolveCommentDetailsToDBX(object: object.showcaseUnresolveCommentDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseUnresolveCommentDetails(showcaseUnresolveCommentDetails.swift))
    }
    if object.isShowcaseUntrashedDetails() {
        let showcaseUntrashedDetails = mapDBTEAMLOGShowcaseUntrashedDetailsToDBX(object: object.showcaseUntrashedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseUntrashedDetails(showcaseUntrashedDetails.swift))
    }
    if object.isShowcaseUntrashedDeprecatedDetails() {
        let showcaseUntrashedDeprecatedDetails = mapDBTEAMLOGShowcaseUntrashedDeprecatedDetailsToDBX(object: object.showcaseUntrashedDeprecatedDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseUntrashedDeprecatedDetails(showcaseUntrashedDeprecatedDetails.swift))
    }
    if object.isShowcaseViewDetails() {
        let showcaseViewDetails = mapDBTEAMLOGShowcaseViewDetailsToDBX(object: object.showcaseViewDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseViewDetails(showcaseViewDetails.swift))
    }
    if object.isSsoAddCertDetails() {
        let ssoAddCertDetails = mapDBTEAMLOGSsoAddCertDetailsToDBX(object: object.ssoAddCertDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoAddCertDetails(ssoAddCertDetails.swift))
    }
    if object.isSsoAddLoginUrlDetails() {
        let ssoAddLoginUrlDetails = mapDBTEAMLOGSsoAddLoginUrlDetailsToDBX(object: object.ssoAddLoginUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoAddLoginUrlDetails(ssoAddLoginUrlDetails.swift))
    }
    if object.isSsoAddLogoutUrlDetails() {
        let ssoAddLogoutUrlDetails = mapDBTEAMLOGSsoAddLogoutUrlDetailsToDBX(object: object.ssoAddLogoutUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoAddLogoutUrlDetails(ssoAddLogoutUrlDetails.swift))
    }
    if object.isSsoChangeCertDetails() {
        let ssoChangeCertDetails = mapDBTEAMLOGSsoChangeCertDetailsToDBX(object: object.ssoChangeCertDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoChangeCertDetails(ssoChangeCertDetails.swift))
    }
    if object.isSsoChangeLoginUrlDetails() {
        let ssoChangeLoginUrlDetails = mapDBTEAMLOGSsoChangeLoginUrlDetailsToDBX(object: object.ssoChangeLoginUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoChangeLoginUrlDetails(ssoChangeLoginUrlDetails.swift))
    }
    if object.isSsoChangeLogoutUrlDetails() {
        let ssoChangeLogoutUrlDetails = mapDBTEAMLOGSsoChangeLogoutUrlDetailsToDBX(object: object.ssoChangeLogoutUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoChangeLogoutUrlDetails(ssoChangeLogoutUrlDetails.swift))
    }
    if object.isSsoChangeSamlIdentityModeDetails() {
        let ssoChangeSamlIdentityModeDetails = mapDBTEAMLOGSsoChangeSamlIdentityModeDetailsToDBX(object: object.ssoChangeSamlIdentityModeDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoChangeSamlIdentityModeDetails(ssoChangeSamlIdentityModeDetails.swift))
    }
    if object.isSsoRemoveCertDetails() {
        let ssoRemoveCertDetails = mapDBTEAMLOGSsoRemoveCertDetailsToDBX(object: object.ssoRemoveCertDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoRemoveCertDetails(ssoRemoveCertDetails.swift))
    }
    if object.isSsoRemoveLoginUrlDetails() {
        let ssoRemoveLoginUrlDetails = mapDBTEAMLOGSsoRemoveLoginUrlDetailsToDBX(object: object.ssoRemoveLoginUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoRemoveLoginUrlDetails(ssoRemoveLoginUrlDetails.swift))
    }
    if object.isSsoRemoveLogoutUrlDetails() {
        let ssoRemoveLogoutUrlDetails = mapDBTEAMLOGSsoRemoveLogoutUrlDetailsToDBX(object: object.ssoRemoveLogoutUrlDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoRemoveLogoutUrlDetails(ssoRemoveLogoutUrlDetails.swift))
    }
    if object.isTeamFolderChangeStatusDetails() {
        let teamFolderChangeStatusDetails = mapDBTEAMLOGTeamFolderChangeStatusDetailsToDBX(object: object.teamFolderChangeStatusDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamFolderChangeStatusDetails(teamFolderChangeStatusDetails.swift))
    }
    if object.isTeamFolderCreateDetails() {
        let teamFolderCreateDetails = mapDBTEAMLOGTeamFolderCreateDetailsToDBX(object: object.teamFolderCreateDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamFolderCreateDetails(teamFolderCreateDetails.swift))
    }
    if object.isTeamFolderDowngradeDetails() {
        let teamFolderDowngradeDetails = mapDBTEAMLOGTeamFolderDowngradeDetailsToDBX(object: object.teamFolderDowngradeDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamFolderDowngradeDetails(teamFolderDowngradeDetails.swift))
    }
    if object.isTeamFolderPermanentlyDeleteDetails() {
        let teamFolderPermanentlyDeleteDetails = mapDBTEAMLOGTeamFolderPermanentlyDeleteDetailsToDBX(object: object.teamFolderPermanentlyDeleteDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamFolderPermanentlyDeleteDetails(teamFolderPermanentlyDeleteDetails.swift))
    }
    if object.isTeamFolderRenameDetails() {
        let teamFolderRenameDetails = mapDBTEAMLOGTeamFolderRenameDetailsToDBX(object: object.teamFolderRenameDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamFolderRenameDetails(teamFolderRenameDetails.swift))
    }
    if object.isTeamSelectiveSyncSettingsChangedDetails() {
        let teamSelectiveSyncSettingsChangedDetails = mapDBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsToDBX(
            object: object
                .teamSelectiveSyncSettingsChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamSelectiveSyncSettingsChangedDetails(teamSelectiveSyncSettingsChangedDetails.swift))
    }
    if object.isAccountCaptureChangePolicyDetails() {
        let accountCaptureChangePolicyDetails = mapDBTEAMLOGAccountCaptureChangePolicyDetailsToDBX(object: object.accountCaptureChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .accountCaptureChangePolicyDetails(accountCaptureChangePolicyDetails.swift))
    }
    if object.isAdminEmailRemindersChangedDetails() {
        let adminEmailRemindersChangedDetails = mapDBTEAMLOGAdminEmailRemindersChangedDetailsToDBX(object: object.adminEmailRemindersChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .adminEmailRemindersChangedDetails(adminEmailRemindersChangedDetails.swift))
    }
    if object.isAllowDownloadDisabledDetails() {
        let allowDownloadDisabledDetails = mapDBTEAMLOGAllowDownloadDisabledDetailsToDBX(object: object.allowDownloadDisabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .allowDownloadDisabledDetails(allowDownloadDisabledDetails.swift))
    }
    if object.isAllowDownloadEnabledDetails() {
        let allowDownloadEnabledDetails = mapDBTEAMLOGAllowDownloadEnabledDetailsToDBX(object: object.allowDownloadEnabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .allowDownloadEnabledDetails(allowDownloadEnabledDetails.swift))
    }
    if object.isAppPermissionsChangedDetails() {
        let appPermissionsChangedDetails = mapDBTEAMLOGAppPermissionsChangedDetailsToDBX(object: object.appPermissionsChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .appPermissionsChangedDetails(appPermissionsChangedDetails.swift))
    }
    if object.isCameraUploadsPolicyChangedDetails() {
        let cameraUploadsPolicyChangedDetails = mapDBTEAMLOGCameraUploadsPolicyChangedDetailsToDBX(object: object.cameraUploadsPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .cameraUploadsPolicyChangedDetails(cameraUploadsPolicyChangedDetails.swift))
    }
    if object.isCaptureTranscriptPolicyChangedDetails() {
        let captureTranscriptPolicyChangedDetails = mapDBTEAMLOGCaptureTranscriptPolicyChangedDetailsToDBX(object: object.captureTranscriptPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .captureTranscriptPolicyChangedDetails(captureTranscriptPolicyChangedDetails.swift))
    }
    if object.isClassificationChangePolicyDetails() {
        let classificationChangePolicyDetails = mapDBTEAMLOGClassificationChangePolicyDetailsToDBX(object: object.classificationChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .classificationChangePolicyDetails(classificationChangePolicyDetails.swift))
    }
    if object.isComputerBackupPolicyChangedDetails() {
        let computerBackupPolicyChangedDetails = mapDBTEAMLOGComputerBackupPolicyChangedDetailsToDBX(object: object.computerBackupPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .computerBackupPolicyChangedDetails(computerBackupPolicyChangedDetails.swift))
    }
    if object.isContentAdministrationPolicyChangedDetails() {
        let contentAdministrationPolicyChangedDetails = mapDBTEAMLOGContentAdministrationPolicyChangedDetailsToDBX(
            object: object
                .contentAdministrationPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .contentAdministrationPolicyChangedDetails(contentAdministrationPolicyChangedDetails.swift))
    }
    if object.isDataPlacementRestrictionChangePolicyDetails() {
        let dataPlacementRestrictionChangePolicyDetails = mapDBTEAMLOGDataPlacementRestrictionChangePolicyDetailsToDBX(
            object: object
                .dataPlacementRestrictionChangePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .dataPlacementRestrictionChangePolicyDetails(dataPlacementRestrictionChangePolicyDetails.swift))
    }
    if object.isDataPlacementRestrictionSatisfyPolicyDetails() {
        let dataPlacementRestrictionSatisfyPolicyDetails = mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsToDBX(
            object: object
                .dataPlacementRestrictionSatisfyPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .dataPlacementRestrictionSatisfyPolicyDetails(dataPlacementRestrictionSatisfyPolicyDetails.swift))
    }
    if object.isDeviceApprovalsAddExceptionDetails() {
        let deviceApprovalsAddExceptionDetails = mapDBTEAMLOGDeviceApprovalsAddExceptionDetailsToDBX(object: object.deviceApprovalsAddExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsAddExceptionDetails(deviceApprovalsAddExceptionDetails.swift))
    }
    if object.isDeviceApprovalsChangeDesktopPolicyDetails() {
        let deviceApprovalsChangeDesktopPolicyDetails = mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsToDBX(
            object: object
                .deviceApprovalsChangeDesktopPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsChangeDesktopPolicyDetails(deviceApprovalsChangeDesktopPolicyDetails.swift))
    }
    if object.isDeviceApprovalsChangeMobilePolicyDetails() {
        let deviceApprovalsChangeMobilePolicyDetails = mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsToDBX(
            object: object
                .deviceApprovalsChangeMobilePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsChangeMobilePolicyDetails(deviceApprovalsChangeMobilePolicyDetails.swift))
    }
    if object.isDeviceApprovalsChangeOverageActionDetails() {
        let deviceApprovalsChangeOverageActionDetails = mapDBTEAMLOGDeviceApprovalsChangeOverageActionDetailsToDBX(
            object: object
                .deviceApprovalsChangeOverageActionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsChangeOverageActionDetails(deviceApprovalsChangeOverageActionDetails.swift))
    }
    if object.isDeviceApprovalsChangeUnlinkActionDetails() {
        let deviceApprovalsChangeUnlinkActionDetails = mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsToDBX(
            object: object
                .deviceApprovalsChangeUnlinkActionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsChangeUnlinkActionDetails(deviceApprovalsChangeUnlinkActionDetails.swift))
    }
    if object.isDeviceApprovalsRemoveExceptionDetails() {
        let deviceApprovalsRemoveExceptionDetails = mapDBTEAMLOGDeviceApprovalsRemoveExceptionDetailsToDBX(object: object.deviceApprovalsRemoveExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .deviceApprovalsRemoveExceptionDetails(deviceApprovalsRemoveExceptionDetails.swift))
    }
    if object.isDirectoryRestrictionsAddMembersDetails() {
        let directoryRestrictionsAddMembersDetails = mapDBTEAMLOGDirectoryRestrictionsAddMembersDetailsToDBX(
            object: object
                .directoryRestrictionsAddMembersDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .directoryRestrictionsAddMembersDetails(directoryRestrictionsAddMembersDetails.swift))
    }
    if object.isDirectoryRestrictionsRemoveMembersDetails() {
        let directoryRestrictionsRemoveMembersDetails = mapDBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsToDBX(
            object: object
                .directoryRestrictionsRemoveMembersDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .directoryRestrictionsRemoveMembersDetails(directoryRestrictionsRemoveMembersDetails.swift))
    }
    if object.isDropboxPasswordsPolicyChangedDetails() {
        let dropboxPasswordsPolicyChangedDetails = mapDBTEAMLOGDropboxPasswordsPolicyChangedDetailsToDBX(object: object.dropboxPasswordsPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .dropboxPasswordsPolicyChangedDetails(dropboxPasswordsPolicyChangedDetails.swift))
    }
    if object.isEmailIngestPolicyChangedDetails() {
        let emailIngestPolicyChangedDetails = mapDBTEAMLOGEmailIngestPolicyChangedDetailsToDBX(object: object.emailIngestPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .emailIngestPolicyChangedDetails(emailIngestPolicyChangedDetails.swift))
    }
    if object.isEmmAddExceptionDetails() {
        let emmAddExceptionDetails = mapDBTEAMLOGEmmAddExceptionDetailsToDBX(object: object.emmAddExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmAddExceptionDetails(emmAddExceptionDetails.swift))
    }
    if object.isEmmChangePolicyDetails() {
        let emmChangePolicyDetails = mapDBTEAMLOGEmmChangePolicyDetailsToDBX(object: object.emmChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmChangePolicyDetails(emmChangePolicyDetails.swift))
    }
    if object.isEmmRemoveExceptionDetails() {
        let emmRemoveExceptionDetails = mapDBTEAMLOGEmmRemoveExceptionDetailsToDBX(object: object.emmRemoveExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .emmRemoveExceptionDetails(emmRemoveExceptionDetails.swift))
    }
    if object.isExtendedVersionHistoryChangePolicyDetails() {
        let extendedVersionHistoryChangePolicyDetails = mapDBTEAMLOGExtendedVersionHistoryChangePolicyDetailsToDBX(
            object: object
                .extendedVersionHistoryChangePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .extendedVersionHistoryChangePolicyDetails(extendedVersionHistoryChangePolicyDetails.swift))
    }
    if object.isExternalDriveBackupPolicyChangedDetails() {
        let externalDriveBackupPolicyChangedDetails = mapDBTEAMLOGExternalDriveBackupPolicyChangedDetailsToDBX(
            object: object
                .externalDriveBackupPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .externalDriveBackupPolicyChangedDetails(externalDriveBackupPolicyChangedDetails.swift))
    }
    if object.isFileCommentsChangePolicyDetails() {
        let fileCommentsChangePolicyDetails = mapDBTEAMLOGFileCommentsChangePolicyDetailsToDBX(object: object.fileCommentsChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileCommentsChangePolicyDetails(fileCommentsChangePolicyDetails.swift))
    }
    if object.isFileLockingPolicyChangedDetails() {
        let fileLockingPolicyChangedDetails = mapDBTEAMLOGFileLockingPolicyChangedDetailsToDBX(object: object.fileLockingPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileLockingPolicyChangedDetails(fileLockingPolicyChangedDetails.swift))
    }
    if object.isFileProviderMigrationPolicyChangedDetails() {
        let fileProviderMigrationPolicyChangedDetails = mapDBTEAMLOGFileProviderMigrationPolicyChangedDetailsToDBX(
            object: object
                .fileProviderMigrationPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .fileProviderMigrationPolicyChangedDetails(fileProviderMigrationPolicyChangedDetails.swift))
    }
    if object.isFileRequestsChangePolicyDetails() {
        let fileRequestsChangePolicyDetails = mapDBTEAMLOGFileRequestsChangePolicyDetailsToDBX(object: object.fileRequestsChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestsChangePolicyDetails(fileRequestsChangePolicyDetails.swift))
    }
    if object.isFileRequestsEmailsEnabledDetails() {
        let fileRequestsEmailsEnabledDetails = mapDBTEAMLOGFileRequestsEmailsEnabledDetailsToDBX(object: object.fileRequestsEmailsEnabledDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileRequestsEmailsEnabledDetails(fileRequestsEmailsEnabledDetails.swift))
    }
    if object.isFileRequestsEmailsRestrictedToTeamOnlyDetails() {
        let fileRequestsEmailsRestrictedToTeamOnlyDetails = mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsToDBX(
            object: object
                .fileRequestsEmailsRestrictedToTeamOnlyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .fileRequestsEmailsRestrictedToTeamOnlyDetails(fileRequestsEmailsRestrictedToTeamOnlyDetails.swift))
    }
    if object.isFileTransfersPolicyChangedDetails() {
        let fileTransfersPolicyChangedDetails = mapDBTEAMLOGFileTransfersPolicyChangedDetailsToDBX(object: object.fileTransfersPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .fileTransfersPolicyChangedDetails(fileTransfersPolicyChangedDetails.swift))
    }
    if object.isFolderLinkRestrictionPolicyChangedDetails() {
        let folderLinkRestrictionPolicyChangedDetails = mapDBTEAMLOGFolderLinkRestrictionPolicyChangedDetailsToDBX(
            object: object
                .folderLinkRestrictionPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .folderLinkRestrictionPolicyChangedDetails(folderLinkRestrictionPolicyChangedDetails.swift))
    }
    if object.isGoogleSsoChangePolicyDetails() {
        let googleSsoChangePolicyDetails = mapDBTEAMLOGGoogleSsoChangePolicyDetailsToDBX(object: object.googleSsoChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .googleSsoChangePolicyDetails(googleSsoChangePolicyDetails.swift))
    }
    if object.isGroupUserManagementChangePolicyDetails() {
        let groupUserManagementChangePolicyDetails = mapDBTEAMLOGGroupUserManagementChangePolicyDetailsToDBX(
            object: object
                .groupUserManagementChangePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .groupUserManagementChangePolicyDetails(groupUserManagementChangePolicyDetails.swift))
    }
    if object.isIntegrationPolicyChangedDetails() {
        let integrationPolicyChangedDetails = mapDBTEAMLOGIntegrationPolicyChangedDetailsToDBX(object: object.integrationPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .integrationPolicyChangedDetails(integrationPolicyChangedDetails.swift))
    }
    if object.isInviteAcceptanceEmailPolicyChangedDetails() {
        let inviteAcceptanceEmailPolicyChangedDetails = mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsToDBX(
            object: object
                .inviteAcceptanceEmailPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .inviteAcceptanceEmailPolicyChangedDetails(inviteAcceptanceEmailPolicyChangedDetails.swift))
    }
    if object.isMemberRequestsChangePolicyDetails() {
        let memberRequestsChangePolicyDetails = mapDBTEAMLOGMemberRequestsChangePolicyDetailsToDBX(object: object.memberRequestsChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberRequestsChangePolicyDetails(memberRequestsChangePolicyDetails.swift))
    }
    if object.isMemberSendInvitePolicyChangedDetails() {
        let memberSendInvitePolicyChangedDetails = mapDBTEAMLOGMemberSendInvitePolicyChangedDetailsToDBX(object: object.memberSendInvitePolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSendInvitePolicyChangedDetails(memberSendInvitePolicyChangedDetails.swift))
    }
    if object.isMemberSpaceLimitsAddExceptionDetails() {
        let memberSpaceLimitsAddExceptionDetails = mapDBTEAMLOGMemberSpaceLimitsAddExceptionDetailsToDBX(object: object.memberSpaceLimitsAddExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsAddExceptionDetails(memberSpaceLimitsAddExceptionDetails.swift))
    }
    if object.isMemberSpaceLimitsChangeCapsTypePolicyDetails() {
        let memberSpaceLimitsChangeCapsTypePolicyDetails = mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsToDBX(
            object: object
                .memberSpaceLimitsChangeCapsTypePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsChangeCapsTypePolicyDetails(memberSpaceLimitsChangeCapsTypePolicyDetails.swift))
    }
    if object.isMemberSpaceLimitsChangePolicyDetails() {
        let memberSpaceLimitsChangePolicyDetails = mapDBTEAMLOGMemberSpaceLimitsChangePolicyDetailsToDBX(object: object.memberSpaceLimitsChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsChangePolicyDetails(memberSpaceLimitsChangePolicyDetails.swift))
    }
    if object.isMemberSpaceLimitsRemoveExceptionDetails() {
        let memberSpaceLimitsRemoveExceptionDetails = mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsToDBX(
            object: object
                .memberSpaceLimitsRemoveExceptionDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .memberSpaceLimitsRemoveExceptionDetails(memberSpaceLimitsRemoveExceptionDetails.swift))
    }
    if object.isMemberSuggestionsChangePolicyDetails() {
        let memberSuggestionsChangePolicyDetails = mapDBTEAMLOGMemberSuggestionsChangePolicyDetailsToDBX(object: object.memberSuggestionsChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .memberSuggestionsChangePolicyDetails(memberSuggestionsChangePolicyDetails.swift))
    }
    if object.isMicrosoftOfficeAddinChangePolicyDetails() {
        let microsoftOfficeAddinChangePolicyDetails = mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsToDBX(
            object: object
                .microsoftOfficeAddinChangePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .microsoftOfficeAddinChangePolicyDetails(microsoftOfficeAddinChangePolicyDetails.swift))
    }
    if object.isNetworkControlChangePolicyDetails() {
        let networkControlChangePolicyDetails = mapDBTEAMLOGNetworkControlChangePolicyDetailsToDBX(object: object.networkControlChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .networkControlChangePolicyDetails(networkControlChangePolicyDetails.swift))
    }
    if object.isPaperChangeDeploymentPolicyDetails() {
        let paperChangeDeploymentPolicyDetails = mapDBTEAMLOGPaperChangeDeploymentPolicyDetailsToDBX(object: object.paperChangeDeploymentPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperChangeDeploymentPolicyDetails(paperChangeDeploymentPolicyDetails.swift))
    }
    if object.isPaperChangeMemberLinkPolicyDetails() {
        let paperChangeMemberLinkPolicyDetails = mapDBTEAMLOGPaperChangeMemberLinkPolicyDetailsToDBX(object: object.paperChangeMemberLinkPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperChangeMemberLinkPolicyDetails(paperChangeMemberLinkPolicyDetails.swift))
    }
    if object.isPaperChangeMemberPolicyDetails() {
        let paperChangeMemberPolicyDetails = mapDBTEAMLOGPaperChangeMemberPolicyDetailsToDBX(object: object.paperChangeMemberPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperChangeMemberPolicyDetails(paperChangeMemberPolicyDetails.swift))
    }
    if object.isPaperChangePolicyDetails() {
        let paperChangePolicyDetails = mapDBTEAMLOGPaperChangePolicyDetailsToDBX(object: object.paperChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperChangePolicyDetails(paperChangePolicyDetails.swift))
    }
    if object.isPaperDefaultFolderPolicyChangedDetails() {
        let paperDefaultFolderPolicyChangedDetails = mapDBTEAMLOGPaperDefaultFolderPolicyChangedDetailsToDBX(
            object: object
                .paperDefaultFolderPolicyChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .paperDefaultFolderPolicyChangedDetails(paperDefaultFolderPolicyChangedDetails.swift))
    }
    if object.isPaperDesktopPolicyChangedDetails() {
        let paperDesktopPolicyChangedDetails = mapDBTEAMLOGPaperDesktopPolicyChangedDetailsToDBX(object: object.paperDesktopPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperDesktopPolicyChangedDetails(paperDesktopPolicyChangedDetails.swift))
    }
    if object.isPaperEnabledUsersGroupAdditionDetails() {
        let paperEnabledUsersGroupAdditionDetails = mapDBTEAMLOGPaperEnabledUsersGroupAdditionDetailsToDBX(object: object.paperEnabledUsersGroupAdditionDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperEnabledUsersGroupAdditionDetails(paperEnabledUsersGroupAdditionDetails.swift))
    }
    if object.isPaperEnabledUsersGroupRemovalDetails() {
        let paperEnabledUsersGroupRemovalDetails = mapDBTEAMLOGPaperEnabledUsersGroupRemovalDetailsToDBX(object: object.paperEnabledUsersGroupRemovalDetails)
        return DBXTeamLogEventDetails.factory(swift: .paperEnabledUsersGroupRemovalDetails(paperEnabledUsersGroupRemovalDetails.swift))
    }
    if object.isPasswordStrengthRequirementsChangePolicyDetails() {
        let passwordStrengthRequirementsChangePolicyDetails = mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsToDBX(
            object: object
                .passwordStrengthRequirementsChangePolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .passwordStrengthRequirementsChangePolicyDetails(passwordStrengthRequirementsChangePolicyDetails.swift))
    }
    if object.isPermanentDeleteChangePolicyDetails() {
        let permanentDeleteChangePolicyDetails = mapDBTEAMLOGPermanentDeleteChangePolicyDetailsToDBX(object: object.permanentDeleteChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .permanentDeleteChangePolicyDetails(permanentDeleteChangePolicyDetails.swift))
    }
    if object.isResellerSupportChangePolicyDetails() {
        let resellerSupportChangePolicyDetails = mapDBTEAMLOGResellerSupportChangePolicyDetailsToDBX(object: object.resellerSupportChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .resellerSupportChangePolicyDetails(resellerSupportChangePolicyDetails.swift))
    }
    if object.isRewindPolicyChangedDetails() {
        let rewindPolicyChangedDetails = mapDBTEAMLOGRewindPolicyChangedDetailsToDBX(object: object.rewindPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .rewindPolicyChangedDetails(rewindPolicyChangedDetails.swift))
    }
    if object.isSendForSignaturePolicyChangedDetails() {
        let sendForSignaturePolicyChangedDetails = mapDBTEAMLOGSendForSignaturePolicyChangedDetailsToDBX(object: object.sendForSignaturePolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .sendForSignaturePolicyChangedDetails(sendForSignaturePolicyChangedDetails.swift))
    }
    if object.isSharingChangeFolderJoinPolicyDetails() {
        let sharingChangeFolderJoinPolicyDetails = mapDBTEAMLOGSharingChangeFolderJoinPolicyDetailsToDBX(object: object.sharingChangeFolderJoinPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharingChangeFolderJoinPolicyDetails(sharingChangeFolderJoinPolicyDetails.swift))
    }
    if object.isSharingChangeLinkAllowChangeExpirationPolicyDetails() {
        let sharingChangeLinkAllowChangeExpirationPolicyDetails = mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsToDBX(
            object: object
                .sharingChangeLinkAllowChangeExpirationPolicyDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .sharingChangeLinkAllowChangeExpirationPolicyDetails(sharingChangeLinkAllowChangeExpirationPolicyDetails.swift))
    }
    if object.isSharingChangeLinkDefaultExpirationPolicyDetails() {
        let sharingChangeLinkDefaultExpirationPolicyDetails = mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsToDBX(
            object: object
                .sharingChangeLinkDefaultExpirationPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharingChangeLinkDefaultExpirationPolicyDetails(sharingChangeLinkDefaultExpirationPolicyDetails.swift))
    }
    if object.isSharingChangeLinkEnforcePasswordPolicyDetails() {
        let sharingChangeLinkEnforcePasswordPolicyDetails = mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsToDBX(
            object: object
                .sharingChangeLinkEnforcePasswordPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .sharingChangeLinkEnforcePasswordPolicyDetails(sharingChangeLinkEnforcePasswordPolicyDetails.swift))
    }
    if object.isSharingChangeLinkPolicyDetails() {
        let sharingChangeLinkPolicyDetails = mapDBTEAMLOGSharingChangeLinkPolicyDetailsToDBX(object: object.sharingChangeLinkPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharingChangeLinkPolicyDetails(sharingChangeLinkPolicyDetails.swift))
    }
    if object.isSharingChangeMemberPolicyDetails() {
        let sharingChangeMemberPolicyDetails = mapDBTEAMLOGSharingChangeMemberPolicyDetailsToDBX(object: object.sharingChangeMemberPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .sharingChangeMemberPolicyDetails(sharingChangeMemberPolicyDetails.swift))
    }
    if object.isShowcaseChangeDownloadPolicyDetails() {
        let showcaseChangeDownloadPolicyDetails = mapDBTEAMLOGShowcaseChangeDownloadPolicyDetailsToDBX(object: object.showcaseChangeDownloadPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseChangeDownloadPolicyDetails(showcaseChangeDownloadPolicyDetails.swift))
    }
    if object.isShowcaseChangeEnabledPolicyDetails() {
        let showcaseChangeEnabledPolicyDetails = mapDBTEAMLOGShowcaseChangeEnabledPolicyDetailsToDBX(object: object.showcaseChangeEnabledPolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .showcaseChangeEnabledPolicyDetails(showcaseChangeEnabledPolicyDetails.swift))
    }
    if object.isShowcaseChangeExternalSharingPolicyDetails() {
        let showcaseChangeExternalSharingPolicyDetails = mapDBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsToDBX(
            object: object
                .showcaseChangeExternalSharingPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .showcaseChangeExternalSharingPolicyDetails(showcaseChangeExternalSharingPolicyDetails.swift))
    }
    if object.isSmarterSmartSyncPolicyChangedDetails() {
        let smarterSmartSyncPolicyChangedDetails = mapDBTEAMLOGSmarterSmartSyncPolicyChangedDetailsToDBX(object: object.smarterSmartSyncPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .smarterSmartSyncPolicyChangedDetails(smarterSmartSyncPolicyChangedDetails.swift))
    }
    if object.isSmartSyncChangePolicyDetails() {
        let smartSyncChangePolicyDetails = mapDBTEAMLOGSmartSyncChangePolicyDetailsToDBX(object: object.smartSyncChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .smartSyncChangePolicyDetails(smartSyncChangePolicyDetails.swift))
    }
    if object.isSmartSyncNotOptOutDetails() {
        let smartSyncNotOptOutDetails = mapDBTEAMLOGSmartSyncNotOptOutDetailsToDBX(object: object.smartSyncNotOptOutDetails)
        return DBXTeamLogEventDetails.factory(swift: .smartSyncNotOptOutDetails(smartSyncNotOptOutDetails.swift))
    }
    if object.isSmartSyncOptOutDetails() {
        let smartSyncOptOutDetails = mapDBTEAMLOGSmartSyncOptOutDetailsToDBX(object: object.smartSyncOptOutDetails)
        return DBXTeamLogEventDetails.factory(swift: .smartSyncOptOutDetails(smartSyncOptOutDetails.swift))
    }
    if object.isSsoChangePolicyDetails() {
        let ssoChangePolicyDetails = mapDBTEAMLOGSsoChangePolicyDetailsToDBX(object: object.ssoChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .ssoChangePolicyDetails(ssoChangePolicyDetails.swift))
    }
    if object.isTeamBrandingPolicyChangedDetails() {
        let teamBrandingPolicyChangedDetails = mapDBTEAMLOGTeamBrandingPolicyChangedDetailsToDBX(object: object.teamBrandingPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamBrandingPolicyChangedDetails(teamBrandingPolicyChangedDetails.swift))
    }
    if object.isTeamExtensionsPolicyChangedDetails() {
        let teamExtensionsPolicyChangedDetails = mapDBTEAMLOGTeamExtensionsPolicyChangedDetailsToDBX(object: object.teamExtensionsPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamExtensionsPolicyChangedDetails(teamExtensionsPolicyChangedDetails.swift))
    }
    if object.isTeamSelectiveSyncPolicyChangedDetails() {
        let teamSelectiveSyncPolicyChangedDetails = mapDBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsToDBX(object: object.teamSelectiveSyncPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamSelectiveSyncPolicyChangedDetails(teamSelectiveSyncPolicyChangedDetails.swift))
    }
    if object.isTeamSharingWhitelistSubjectsChangedDetails() {
        let teamSharingWhitelistSubjectsChangedDetails = mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsToDBX(
            object: object
                .teamSharingWhitelistSubjectsChangedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamSharingWhitelistSubjectsChangedDetails(teamSharingWhitelistSubjectsChangedDetails.swift))
    }
    if object.isTfaAddExceptionDetails() {
        let tfaAddExceptionDetails = mapDBTEAMLOGTfaAddExceptionDetailsToDBX(object: object.tfaAddExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaAddExceptionDetails(tfaAddExceptionDetails.swift))
    }
    if object.isTfaChangePolicyDetails() {
        let tfaChangePolicyDetails = mapDBTEAMLOGTfaChangePolicyDetailsToDBX(object: object.tfaChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaChangePolicyDetails(tfaChangePolicyDetails.swift))
    }
    if object.isTfaRemoveExceptionDetails() {
        let tfaRemoveExceptionDetails = mapDBTEAMLOGTfaRemoveExceptionDetailsToDBX(object: object.tfaRemoveExceptionDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaRemoveExceptionDetails(tfaRemoveExceptionDetails.swift))
    }
    if object.isTwoAccountChangePolicyDetails() {
        let twoAccountChangePolicyDetails = mapDBTEAMLOGTwoAccountChangePolicyDetailsToDBX(object: object.twoAccountChangePolicyDetails)
        return DBXTeamLogEventDetails.factory(swift: .twoAccountChangePolicyDetails(twoAccountChangePolicyDetails.swift))
    }
    if object.isViewerInfoPolicyChangedDetails() {
        let viewerInfoPolicyChangedDetails = mapDBTEAMLOGViewerInfoPolicyChangedDetailsToDBX(object: object.viewerInfoPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .viewerInfoPolicyChangedDetails(viewerInfoPolicyChangedDetails.swift))
    }
    if object.isWatermarkingPolicyChangedDetails() {
        let watermarkingPolicyChangedDetails = mapDBTEAMLOGWatermarkingPolicyChangedDetailsToDBX(object: object.watermarkingPolicyChangedDetails)
        return DBXTeamLogEventDetails.factory(swift: .watermarkingPolicyChangedDetails(watermarkingPolicyChangedDetails.swift))
    }
    if object.isWebSessionsChangeActiveSessionLimitDetails() {
        let webSessionsChangeActiveSessionLimitDetails = mapDBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsToDBX(
            object: object
                .webSessionsChangeActiveSessionLimitDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .webSessionsChangeActiveSessionLimitDetails(webSessionsChangeActiveSessionLimitDetails.swift))
    }
    if object.isWebSessionsChangeFixedLengthPolicyDetails() {
        let webSessionsChangeFixedLengthPolicyDetails = mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsToDBX(
            object: object
                .webSessionsChangeFixedLengthPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .webSessionsChangeFixedLengthPolicyDetails(webSessionsChangeFixedLengthPolicyDetails.swift))
    }
    if object.isWebSessionsChangeIdleLengthPolicyDetails() {
        let webSessionsChangeIdleLengthPolicyDetails = mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsToDBX(
            object: object
                .webSessionsChangeIdleLengthPolicyDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .webSessionsChangeIdleLengthPolicyDetails(webSessionsChangeIdleLengthPolicyDetails.swift))
    }
    if object.isDataResidencyMigrationRequestSuccessfulDetails() {
        let dataResidencyMigrationRequestSuccessfulDetails = mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsToDBX(
            object: object
                .dataResidencyMigrationRequestSuccessfulDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .dataResidencyMigrationRequestSuccessfulDetails(dataResidencyMigrationRequestSuccessfulDetails.swift))
    }
    if object.isDataResidencyMigrationRequestUnsuccessfulDetails() {
        let dataResidencyMigrationRequestUnsuccessfulDetails = mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsToDBX(
            object: object
                .dataResidencyMigrationRequestUnsuccessfulDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .dataResidencyMigrationRequestUnsuccessfulDetails(dataResidencyMigrationRequestUnsuccessfulDetails.swift))
    }
    if object.isTeamMergeFromDetails() {
        let teamMergeFromDetails = mapDBTEAMLOGTeamMergeFromDetailsToDBX(object: object.teamMergeFromDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeFromDetails(teamMergeFromDetails.swift))
    }
    if object.isTeamMergeToDetails() {
        let teamMergeToDetails = mapDBTEAMLOGTeamMergeToDetailsToDBX(object: object.teamMergeToDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeToDetails(teamMergeToDetails.swift))
    }
    if object.isTeamProfileAddBackgroundDetails() {
        let teamProfileAddBackgroundDetails = mapDBTEAMLOGTeamProfileAddBackgroundDetailsToDBX(object: object.teamProfileAddBackgroundDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileAddBackgroundDetails(teamProfileAddBackgroundDetails.swift))
    }
    if object.isTeamProfileAddLogoDetails() {
        let teamProfileAddLogoDetails = mapDBTEAMLOGTeamProfileAddLogoDetailsToDBX(object: object.teamProfileAddLogoDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileAddLogoDetails(teamProfileAddLogoDetails.swift))
    }
    if object.isTeamProfileChangeBackgroundDetails() {
        let teamProfileChangeBackgroundDetails = mapDBTEAMLOGTeamProfileChangeBackgroundDetailsToDBX(object: object.teamProfileChangeBackgroundDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileChangeBackgroundDetails(teamProfileChangeBackgroundDetails.swift))
    }
    if object.isTeamProfileChangeDefaultLanguageDetails() {
        let teamProfileChangeDefaultLanguageDetails = mapDBTEAMLOGTeamProfileChangeDefaultLanguageDetailsToDBX(
            object: object
                .teamProfileChangeDefaultLanguageDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamProfileChangeDefaultLanguageDetails(teamProfileChangeDefaultLanguageDetails.swift))
    }
    if object.isTeamProfileChangeLogoDetails() {
        let teamProfileChangeLogoDetails = mapDBTEAMLOGTeamProfileChangeLogoDetailsToDBX(object: object.teamProfileChangeLogoDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileChangeLogoDetails(teamProfileChangeLogoDetails.swift))
    }
    if object.isTeamProfileChangeNameDetails() {
        let teamProfileChangeNameDetails = mapDBTEAMLOGTeamProfileChangeNameDetailsToDBX(object: object.teamProfileChangeNameDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileChangeNameDetails(teamProfileChangeNameDetails.swift))
    }
    if object.isTeamProfileRemoveBackgroundDetails() {
        let teamProfileRemoveBackgroundDetails = mapDBTEAMLOGTeamProfileRemoveBackgroundDetailsToDBX(object: object.teamProfileRemoveBackgroundDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileRemoveBackgroundDetails(teamProfileRemoveBackgroundDetails.swift))
    }
    if object.isTeamProfileRemoveLogoDetails() {
        let teamProfileRemoveLogoDetails = mapDBTEAMLOGTeamProfileRemoveLogoDetailsToDBX(object: object.teamProfileRemoveLogoDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamProfileRemoveLogoDetails(teamProfileRemoveLogoDetails.swift))
    }
    if object.isTfaAddBackupPhoneDetails() {
        let tfaAddBackupPhoneDetails = mapDBTEAMLOGTfaAddBackupPhoneDetailsToDBX(object: object.tfaAddBackupPhoneDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaAddBackupPhoneDetails(tfaAddBackupPhoneDetails.swift))
    }
    if object.isTfaAddSecurityKeyDetails() {
        let tfaAddSecurityKeyDetails = mapDBTEAMLOGTfaAddSecurityKeyDetailsToDBX(object: object.tfaAddSecurityKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaAddSecurityKeyDetails(tfaAddSecurityKeyDetails.swift))
    }
    if object.isTfaChangeBackupPhoneDetails() {
        let tfaChangeBackupPhoneDetails = mapDBTEAMLOGTfaChangeBackupPhoneDetailsToDBX(object: object.tfaChangeBackupPhoneDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaChangeBackupPhoneDetails(tfaChangeBackupPhoneDetails.swift))
    }
    if object.isTfaChangeStatusDetails() {
        let tfaChangeStatusDetails = mapDBTEAMLOGTfaChangeStatusDetailsToDBX(object: object.tfaChangeStatusDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaChangeStatusDetails(tfaChangeStatusDetails.swift))
    }
    if object.isTfaRemoveBackupPhoneDetails() {
        let tfaRemoveBackupPhoneDetails = mapDBTEAMLOGTfaRemoveBackupPhoneDetailsToDBX(object: object.tfaRemoveBackupPhoneDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaRemoveBackupPhoneDetails(tfaRemoveBackupPhoneDetails.swift))
    }
    if object.isTfaRemoveSecurityKeyDetails() {
        let tfaRemoveSecurityKeyDetails = mapDBTEAMLOGTfaRemoveSecurityKeyDetailsToDBX(object: object.tfaRemoveSecurityKeyDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaRemoveSecurityKeyDetails(tfaRemoveSecurityKeyDetails.swift))
    }
    if object.isTfaResetDetails() {
        let tfaResetDetails = mapDBTEAMLOGTfaResetDetailsToDBX(object: object.tfaResetDetails)
        return DBXTeamLogEventDetails.factory(swift: .tfaResetDetails(tfaResetDetails.swift))
    }
    if object.isChangedEnterpriseAdminRoleDetails() {
        let changedEnterpriseAdminRoleDetails = mapDBTEAMLOGChangedEnterpriseAdminRoleDetailsToDBX(object: object.changedEnterpriseAdminRoleDetails)
        return DBXTeamLogEventDetails.factory(swift: .changedEnterpriseAdminRoleDetails(changedEnterpriseAdminRoleDetails.swift))
    }
    if object.isChangedEnterpriseConnectedTeamStatusDetails() {
        let changedEnterpriseConnectedTeamStatusDetails = mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsToDBX(
            object: object
                .changedEnterpriseConnectedTeamStatusDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .changedEnterpriseConnectedTeamStatusDetails(changedEnterpriseConnectedTeamStatusDetails.swift))
    }
    if object.isEndedEnterpriseAdminSessionDetails() {
        let endedEnterpriseAdminSessionDetails = mapDBTEAMLOGEndedEnterpriseAdminSessionDetailsToDBX(object: object.endedEnterpriseAdminSessionDetails)
        return DBXTeamLogEventDetails.factory(swift: .endedEnterpriseAdminSessionDetails(endedEnterpriseAdminSessionDetails.swift))
    }
    if object.isEndedEnterpriseAdminSessionDeprecatedDetails() {
        let endedEnterpriseAdminSessionDeprecatedDetails = mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsToDBX(
            object: object
                .endedEnterpriseAdminSessionDeprecatedDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .endedEnterpriseAdminSessionDeprecatedDetails(endedEnterpriseAdminSessionDeprecatedDetails.swift))
    }
    if object.isEnterpriseSettingsLockingDetails() {
        let enterpriseSettingsLockingDetails = mapDBTEAMLOGEnterpriseSettingsLockingDetailsToDBX(object: object.enterpriseSettingsLockingDetails)
        return DBXTeamLogEventDetails.factory(swift: .enterpriseSettingsLockingDetails(enterpriseSettingsLockingDetails.swift))
    }
    if object.isGuestAdminChangeStatusDetails() {
        let guestAdminChangeStatusDetails = mapDBTEAMLOGGuestAdminChangeStatusDetailsToDBX(object: object.guestAdminChangeStatusDetails)
        return DBXTeamLogEventDetails.factory(swift: .guestAdminChangeStatusDetails(guestAdminChangeStatusDetails.swift))
    }
    if object.isStartedEnterpriseAdminSessionDetails() {
        let startedEnterpriseAdminSessionDetails = mapDBTEAMLOGStartedEnterpriseAdminSessionDetailsToDBX(object: object.startedEnterpriseAdminSessionDetails)
        return DBXTeamLogEventDetails.factory(swift: .startedEnterpriseAdminSessionDetails(startedEnterpriseAdminSessionDetails.swift))
    }
    if object.isTeamMergeRequestAcceptedDetails() {
        let teamMergeRequestAcceptedDetails = mapDBTEAMLOGTeamMergeRequestAcceptedDetailsToDBX(object: object.teamMergeRequestAcceptedDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestAcceptedDetails(teamMergeRequestAcceptedDetails.swift))
    }
    if object.isTeamMergeRequestAcceptedShownToPrimaryTeamDetails() {
        let teamMergeRequestAcceptedShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestAcceptedShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestAcceptedShownToPrimaryTeamDetails(teamMergeRequestAcceptedShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestAcceptedShownToSecondaryTeamDetails() {
        let teamMergeRequestAcceptedShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestAcceptedShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestAcceptedShownToSecondaryTeamDetails(teamMergeRequestAcceptedShownToSecondaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestAutoCanceledDetails() {
        let teamMergeRequestAutoCanceledDetails = mapDBTEAMLOGTeamMergeRequestAutoCanceledDetailsToDBX(object: object.teamMergeRequestAutoCanceledDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestAutoCanceledDetails(teamMergeRequestAutoCanceledDetails.swift))
    }
    if object.isTeamMergeRequestCanceledDetails() {
        let teamMergeRequestCanceledDetails = mapDBTEAMLOGTeamMergeRequestCanceledDetailsToDBX(object: object.teamMergeRequestCanceledDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestCanceledDetails(teamMergeRequestCanceledDetails.swift))
    }
    if object.isTeamMergeRequestCanceledShownToPrimaryTeamDetails() {
        let teamMergeRequestCanceledShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestCanceledShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestCanceledShownToPrimaryTeamDetails(teamMergeRequestCanceledShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestCanceledShownToSecondaryTeamDetails() {
        let teamMergeRequestCanceledShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestCanceledShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestCanceledShownToSecondaryTeamDetails(teamMergeRequestCanceledShownToSecondaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestExpiredDetails() {
        let teamMergeRequestExpiredDetails = mapDBTEAMLOGTeamMergeRequestExpiredDetailsToDBX(object: object.teamMergeRequestExpiredDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestExpiredDetails(teamMergeRequestExpiredDetails.swift))
    }
    if object.isTeamMergeRequestExpiredShownToPrimaryTeamDetails() {
        let teamMergeRequestExpiredShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestExpiredShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestExpiredShownToPrimaryTeamDetails(teamMergeRequestExpiredShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestExpiredShownToSecondaryTeamDetails() {
        let teamMergeRequestExpiredShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestExpiredShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestExpiredShownToSecondaryTeamDetails(teamMergeRequestExpiredShownToSecondaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestRejectedShownToPrimaryTeamDetails() {
        let teamMergeRequestRejectedShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestRejectedShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestRejectedShownToPrimaryTeamDetails(teamMergeRequestRejectedShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestRejectedShownToSecondaryTeamDetails() {
        let teamMergeRequestRejectedShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestRejectedShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestRejectedShownToSecondaryTeamDetails(teamMergeRequestRejectedShownToSecondaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestReminderDetails() {
        let teamMergeRequestReminderDetails = mapDBTEAMLOGTeamMergeRequestReminderDetailsToDBX(object: object.teamMergeRequestReminderDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestReminderDetails(teamMergeRequestReminderDetails.swift))
    }
    if object.isTeamMergeRequestReminderShownToPrimaryTeamDetails() {
        let teamMergeRequestReminderShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestReminderShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestReminderShownToPrimaryTeamDetails(teamMergeRequestReminderShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestReminderShownToSecondaryTeamDetails() {
        let teamMergeRequestReminderShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestReminderShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails
            .factory(swift: .teamMergeRequestReminderShownToSecondaryTeamDetails(teamMergeRequestReminderShownToSecondaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestRevokedDetails() {
        let teamMergeRequestRevokedDetails = mapDBTEAMLOGTeamMergeRequestRevokedDetailsToDBX(object: object.teamMergeRequestRevokedDetails)
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestRevokedDetails(teamMergeRequestRevokedDetails.swift))
    }
    if object.isTeamMergeRequestSentShownToPrimaryTeamDetails() {
        let teamMergeRequestSentShownToPrimaryTeamDetails = mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestSentShownToPrimaryTeamDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestSentShownToPrimaryTeamDetails(teamMergeRequestSentShownToPrimaryTeamDetails.swift))
    }
    if object.isTeamMergeRequestSentShownToSecondaryTeamDetails() {
        let teamMergeRequestSentShownToSecondaryTeamDetails = mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsToDBX(
            object: object
                .teamMergeRequestSentShownToSecondaryTeamDetails
        )
        return DBXTeamLogEventDetails.factory(swift: .teamMergeRequestSentShownToSecondaryTeamDetails(teamMergeRequestSentShownToSecondaryTeamDetails.swift))
    }
    if object.isMissingDetails() {
        let missingDetails = mapDBTEAMLOGMissingDetailsToDBX(object: object.missingDetails)
        return DBXTeamLogEventDetails.factory(swift: .missingDetails(missingDetails.swift))
    }
    if object.isOther() {
        return DBXTeamLogEventDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGEventTypeToDBXOptional(object: DBTEAMLOGEventType?) -> DBXTeamLogEventType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEventTypeToDBX(object: object)
}

func mapDBTEAMLOGEventTypeToDBX(object: DBTEAMLOGEventType) -> DBXTeamLogEventType {
    if object.isAdminAlertingAlertStateChanged() {
        let adminAlertingAlertStateChanged = mapDBTEAMLOGAdminAlertingAlertStateChangedTypeToDBX(object: object.adminAlertingAlertStateChanged)
        return DBXTeamLogEventType.factory(swift: .adminAlertingAlertStateChanged(adminAlertingAlertStateChanged.swift))
    }
    if object.isAdminAlertingChangedAlertConfig() {
        let adminAlertingChangedAlertConfig = mapDBTEAMLOGAdminAlertingChangedAlertConfigTypeToDBX(object: object.adminAlertingChangedAlertConfig)
        return DBXTeamLogEventType.factory(swift: .adminAlertingChangedAlertConfig(adminAlertingChangedAlertConfig.swift))
    }
    if object.isAdminAlertingTriggeredAlert() {
        let adminAlertingTriggeredAlert = mapDBTEAMLOGAdminAlertingTriggeredAlertTypeToDBX(object: object.adminAlertingTriggeredAlert)
        return DBXTeamLogEventType.factory(swift: .adminAlertingTriggeredAlert(adminAlertingTriggeredAlert.swift))
    }
    if object.isRansomwareRestoreProcessCompleted() {
        let ransomwareRestoreProcessCompleted = mapDBTEAMLOGRansomwareRestoreProcessCompletedTypeToDBX(object: object.ransomwareRestoreProcessCompleted)
        return DBXTeamLogEventType.factory(swift: .ransomwareRestoreProcessCompleted(ransomwareRestoreProcessCompleted.swift))
    }
    if object.isRansomwareRestoreProcessStarted() {
        let ransomwareRestoreProcessStarted = mapDBTEAMLOGRansomwareRestoreProcessStartedTypeToDBX(object: object.ransomwareRestoreProcessStarted)
        return DBXTeamLogEventType.factory(swift: .ransomwareRestoreProcessStarted(ransomwareRestoreProcessStarted.swift))
    }
    if object.isAppBlockedByPermissions() {
        let appBlockedByPermissions = mapDBTEAMLOGAppBlockedByPermissionsTypeToDBX(object: object.appBlockedByPermissions)
        return DBXTeamLogEventType.factory(swift: .appBlockedByPermissions(appBlockedByPermissions.swift))
    }
    if object.isAppLinkTeam() {
        let appLinkTeam = mapDBTEAMLOGAppLinkTeamTypeToDBX(object: object.appLinkTeam)
        return DBXTeamLogEventType.factory(swift: .appLinkTeam(appLinkTeam.swift))
    }
    if object.isAppLinkUser() {
        let appLinkUser = mapDBTEAMLOGAppLinkUserTypeToDBX(object: object.appLinkUser)
        return DBXTeamLogEventType.factory(swift: .appLinkUser(appLinkUser.swift))
    }
    if object.isAppUnlinkTeam() {
        let appUnlinkTeam = mapDBTEAMLOGAppUnlinkTeamTypeToDBX(object: object.appUnlinkTeam)
        return DBXTeamLogEventType.factory(swift: .appUnlinkTeam(appUnlinkTeam.swift))
    }
    if object.isAppUnlinkUser() {
        let appUnlinkUser = mapDBTEAMLOGAppUnlinkUserTypeToDBX(object: object.appUnlinkUser)
        return DBXTeamLogEventType.factory(swift: .appUnlinkUser(appUnlinkUser.swift))
    }
    if object.isIntegrationConnected() {
        let integrationConnected = mapDBTEAMLOGIntegrationConnectedTypeToDBX(object: object.integrationConnected)
        return DBXTeamLogEventType.factory(swift: .integrationConnected(integrationConnected.swift))
    }
    if object.isIntegrationDisconnected() {
        let integrationDisconnected = mapDBTEAMLOGIntegrationDisconnectedTypeToDBX(object: object.integrationDisconnected)
        return DBXTeamLogEventType.factory(swift: .integrationDisconnected(integrationDisconnected.swift))
    }
    if object.isFileAddComment() {
        let fileAddComment = mapDBTEAMLOGFileAddCommentTypeToDBX(object: object.fileAddComment)
        return DBXTeamLogEventType.factory(swift: .fileAddComment(fileAddComment.swift))
    }
    if object.isFileChangeCommentSubscription() {
        let fileChangeCommentSubscription = mapDBTEAMLOGFileChangeCommentSubscriptionTypeToDBX(object: object.fileChangeCommentSubscription)
        return DBXTeamLogEventType.factory(swift: .fileChangeCommentSubscription(fileChangeCommentSubscription.swift))
    }
    if object.isFileDeleteComment() {
        let fileDeleteComment = mapDBTEAMLOGFileDeleteCommentTypeToDBX(object: object.fileDeleteComment)
        return DBXTeamLogEventType.factory(swift: .fileDeleteComment(fileDeleteComment.swift))
    }
    if object.isFileEditComment() {
        let fileEditComment = mapDBTEAMLOGFileEditCommentTypeToDBX(object: object.fileEditComment)
        return DBXTeamLogEventType.factory(swift: .fileEditComment(fileEditComment.swift))
    }
    if object.isFileLikeComment() {
        let fileLikeComment = mapDBTEAMLOGFileLikeCommentTypeToDBX(object: object.fileLikeComment)
        return DBXTeamLogEventType.factory(swift: .fileLikeComment(fileLikeComment.swift))
    }
    if object.isFileResolveComment() {
        let fileResolveComment = mapDBTEAMLOGFileResolveCommentTypeToDBX(object: object.fileResolveComment)
        return DBXTeamLogEventType.factory(swift: .fileResolveComment(fileResolveComment.swift))
    }
    if object.isFileUnlikeComment() {
        let fileUnlikeComment = mapDBTEAMLOGFileUnlikeCommentTypeToDBX(object: object.fileUnlikeComment)
        return DBXTeamLogEventType.factory(swift: .fileUnlikeComment(fileUnlikeComment.swift))
    }
    if object.isFileUnresolveComment() {
        let fileUnresolveComment = mapDBTEAMLOGFileUnresolveCommentTypeToDBX(object: object.fileUnresolveComment)
        return DBXTeamLogEventType.factory(swift: .fileUnresolveComment(fileUnresolveComment.swift))
    }
    if object.isGovernancePolicyAddFolders() {
        let governancePolicyAddFolders = mapDBTEAMLOGGovernancePolicyAddFoldersTypeToDBX(object: object.governancePolicyAddFolders)
        return DBXTeamLogEventType.factory(swift: .governancePolicyAddFolders(governancePolicyAddFolders.swift))
    }
    if object.isGovernancePolicyAddFolderFailed() {
        let governancePolicyAddFolderFailed = mapDBTEAMLOGGovernancePolicyAddFolderFailedTypeToDBX(object: object.governancePolicyAddFolderFailed)
        return DBXTeamLogEventType.factory(swift: .governancePolicyAddFolderFailed(governancePolicyAddFolderFailed.swift))
    }
    if object.isGovernancePolicyContentDisposed() {
        let governancePolicyContentDisposed = mapDBTEAMLOGGovernancePolicyContentDisposedTypeToDBX(object: object.governancePolicyContentDisposed)
        return DBXTeamLogEventType.factory(swift: .governancePolicyContentDisposed(governancePolicyContentDisposed.swift))
    }
    if object.isGovernancePolicyCreate() {
        let governancePolicyCreate = mapDBTEAMLOGGovernancePolicyCreateTypeToDBX(object: object.governancePolicyCreate)
        return DBXTeamLogEventType.factory(swift: .governancePolicyCreate(governancePolicyCreate.swift))
    }
    if object.isGovernancePolicyDelete() {
        let governancePolicyDelete = mapDBTEAMLOGGovernancePolicyDeleteTypeToDBX(object: object.governancePolicyDelete)
        return DBXTeamLogEventType.factory(swift: .governancePolicyDelete(governancePolicyDelete.swift))
    }
    if object.isGovernancePolicyEditDetails() {
        let governancePolicyEditDetails = mapDBTEAMLOGGovernancePolicyEditDetailsTypeToDBX(object: object.governancePolicyEditDetails)
        return DBXTeamLogEventType.factory(swift: .governancePolicyEditDetails(governancePolicyEditDetails.swift))
    }
    if object.isGovernancePolicyEditDuration() {
        let governancePolicyEditDuration = mapDBTEAMLOGGovernancePolicyEditDurationTypeToDBX(object: object.governancePolicyEditDuration)
        return DBXTeamLogEventType.factory(swift: .governancePolicyEditDuration(governancePolicyEditDuration.swift))
    }
    if object.isGovernancePolicyExportCreated() {
        let governancePolicyExportCreated = mapDBTEAMLOGGovernancePolicyExportCreatedTypeToDBX(object: object.governancePolicyExportCreated)
        return DBXTeamLogEventType.factory(swift: .governancePolicyExportCreated(governancePolicyExportCreated.swift))
    }
    if object.isGovernancePolicyExportRemoved() {
        let governancePolicyExportRemoved = mapDBTEAMLOGGovernancePolicyExportRemovedTypeToDBX(object: object.governancePolicyExportRemoved)
        return DBXTeamLogEventType.factory(swift: .governancePolicyExportRemoved(governancePolicyExportRemoved.swift))
    }
    if object.isGovernancePolicyRemoveFolders() {
        let governancePolicyRemoveFolders = mapDBTEAMLOGGovernancePolicyRemoveFoldersTypeToDBX(object: object.governancePolicyRemoveFolders)
        return DBXTeamLogEventType.factory(swift: .governancePolicyRemoveFolders(governancePolicyRemoveFolders.swift))
    }
    if object.isGovernancePolicyReportCreated() {
        let governancePolicyReportCreated = mapDBTEAMLOGGovernancePolicyReportCreatedTypeToDBX(object: object.governancePolicyReportCreated)
        return DBXTeamLogEventType.factory(swift: .governancePolicyReportCreated(governancePolicyReportCreated.swift))
    }
    if object.isGovernancePolicyZipPartDownloaded() {
        let governancePolicyZipPartDownloaded = mapDBTEAMLOGGovernancePolicyZipPartDownloadedTypeToDBX(object: object.governancePolicyZipPartDownloaded)
        return DBXTeamLogEventType.factory(swift: .governancePolicyZipPartDownloaded(governancePolicyZipPartDownloaded.swift))
    }
    if object.isLegalHoldsActivateAHold() {
        let legalHoldsActivateAHold = mapDBTEAMLOGLegalHoldsActivateAHoldTypeToDBX(object: object.legalHoldsActivateAHold)
        return DBXTeamLogEventType.factory(swift: .legalHoldsActivateAHold(legalHoldsActivateAHold.swift))
    }
    if object.isLegalHoldsAddMembers() {
        let legalHoldsAddMembers = mapDBTEAMLOGLegalHoldsAddMembersTypeToDBX(object: object.legalHoldsAddMembers)
        return DBXTeamLogEventType.factory(swift: .legalHoldsAddMembers(legalHoldsAddMembers.swift))
    }
    if object.isLegalHoldsChangeHoldDetails() {
        let legalHoldsChangeHoldDetails = mapDBTEAMLOGLegalHoldsChangeHoldDetailsTypeToDBX(object: object.legalHoldsChangeHoldDetails)
        return DBXTeamLogEventType.factory(swift: .legalHoldsChangeHoldDetails(legalHoldsChangeHoldDetails.swift))
    }
    if object.isLegalHoldsChangeHoldName() {
        let legalHoldsChangeHoldName = mapDBTEAMLOGLegalHoldsChangeHoldNameTypeToDBX(object: object.legalHoldsChangeHoldName)
        return DBXTeamLogEventType.factory(swift: .legalHoldsChangeHoldName(legalHoldsChangeHoldName.swift))
    }
    if object.isLegalHoldsExportAHold() {
        let legalHoldsExportAHold = mapDBTEAMLOGLegalHoldsExportAHoldTypeToDBX(object: object.legalHoldsExportAHold)
        return DBXTeamLogEventType.factory(swift: .legalHoldsExportAHold(legalHoldsExportAHold.swift))
    }
    if object.isLegalHoldsExportCancelled() {
        let legalHoldsExportCancelled = mapDBTEAMLOGLegalHoldsExportCancelledTypeToDBX(object: object.legalHoldsExportCancelled)
        return DBXTeamLogEventType.factory(swift: .legalHoldsExportCancelled(legalHoldsExportCancelled.swift))
    }
    if object.isLegalHoldsExportDownloaded() {
        let legalHoldsExportDownloaded = mapDBTEAMLOGLegalHoldsExportDownloadedTypeToDBX(object: object.legalHoldsExportDownloaded)
        return DBXTeamLogEventType.factory(swift: .legalHoldsExportDownloaded(legalHoldsExportDownloaded.swift))
    }
    if object.isLegalHoldsExportRemoved() {
        let legalHoldsExportRemoved = mapDBTEAMLOGLegalHoldsExportRemovedTypeToDBX(object: object.legalHoldsExportRemoved)
        return DBXTeamLogEventType.factory(swift: .legalHoldsExportRemoved(legalHoldsExportRemoved.swift))
    }
    if object.isLegalHoldsReleaseAHold() {
        let legalHoldsReleaseAHold = mapDBTEAMLOGLegalHoldsReleaseAHoldTypeToDBX(object: object.legalHoldsReleaseAHold)
        return DBXTeamLogEventType.factory(swift: .legalHoldsReleaseAHold(legalHoldsReleaseAHold.swift))
    }
    if object.isLegalHoldsRemoveMembers() {
        let legalHoldsRemoveMembers = mapDBTEAMLOGLegalHoldsRemoveMembersTypeToDBX(object: object.legalHoldsRemoveMembers)
        return DBXTeamLogEventType.factory(swift: .legalHoldsRemoveMembers(legalHoldsRemoveMembers.swift))
    }
    if object.isLegalHoldsReportAHold() {
        let legalHoldsReportAHold = mapDBTEAMLOGLegalHoldsReportAHoldTypeToDBX(object: object.legalHoldsReportAHold)
        return DBXTeamLogEventType.factory(swift: .legalHoldsReportAHold(legalHoldsReportAHold.swift))
    }
    if object.isDeviceChangeIpDesktop() {
        let deviceChangeIpDesktop = mapDBTEAMLOGDeviceChangeIpDesktopTypeToDBX(object: object.deviceChangeIpDesktop)
        return DBXTeamLogEventType.factory(swift: .deviceChangeIpDesktop(deviceChangeIpDesktop.swift))
    }
    if object.isDeviceChangeIpMobile() {
        let deviceChangeIpMobile = mapDBTEAMLOGDeviceChangeIpMobileTypeToDBX(object: object.deviceChangeIpMobile)
        return DBXTeamLogEventType.factory(swift: .deviceChangeIpMobile(deviceChangeIpMobile.swift))
    }
    if object.isDeviceChangeIpWeb() {
        let deviceChangeIpWeb = mapDBTEAMLOGDeviceChangeIpWebTypeToDBX(object: object.deviceChangeIpWeb)
        return DBXTeamLogEventType.factory(swift: .deviceChangeIpWeb(deviceChangeIpWeb.swift))
    }
    if object.isDeviceDeleteOnUnlinkFail() {
        let deviceDeleteOnUnlinkFail = mapDBTEAMLOGDeviceDeleteOnUnlinkFailTypeToDBX(object: object.deviceDeleteOnUnlinkFail)
        return DBXTeamLogEventType.factory(swift: .deviceDeleteOnUnlinkFail(deviceDeleteOnUnlinkFail.swift))
    }
    if object.isDeviceDeleteOnUnlinkSuccess() {
        let deviceDeleteOnUnlinkSuccess = mapDBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeToDBX(object: object.deviceDeleteOnUnlinkSuccess)
        return DBXTeamLogEventType.factory(swift: .deviceDeleteOnUnlinkSuccess(deviceDeleteOnUnlinkSuccess.swift))
    }
    if object.isDeviceLinkFail() {
        let deviceLinkFail = mapDBTEAMLOGDeviceLinkFailTypeToDBX(object: object.deviceLinkFail)
        return DBXTeamLogEventType.factory(swift: .deviceLinkFail(deviceLinkFail.swift))
    }
    if object.isDeviceLinkSuccess() {
        let deviceLinkSuccess = mapDBTEAMLOGDeviceLinkSuccessTypeToDBX(object: object.deviceLinkSuccess)
        return DBXTeamLogEventType.factory(swift: .deviceLinkSuccess(deviceLinkSuccess.swift))
    }
    if object.isDeviceManagementDisabled() {
        let deviceManagementDisabled = mapDBTEAMLOGDeviceManagementDisabledTypeToDBX(object: object.deviceManagementDisabled)
        return DBXTeamLogEventType.factory(swift: .deviceManagementDisabled(deviceManagementDisabled.swift))
    }
    if object.isDeviceManagementEnabled() {
        let deviceManagementEnabled = mapDBTEAMLOGDeviceManagementEnabledTypeToDBX(object: object.deviceManagementEnabled)
        return DBXTeamLogEventType.factory(swift: .deviceManagementEnabled(deviceManagementEnabled.swift))
    }
    if object.isDeviceSyncBackupStatusChanged() {
        let deviceSyncBackupStatusChanged = mapDBTEAMLOGDeviceSyncBackupStatusChangedTypeToDBX(object: object.deviceSyncBackupStatusChanged)
        return DBXTeamLogEventType.factory(swift: .deviceSyncBackupStatusChanged(deviceSyncBackupStatusChanged.swift))
    }
    if object.isDeviceUnlink() {
        let deviceUnlink = mapDBTEAMLOGDeviceUnlinkTypeToDBX(object: object.deviceUnlink)
        return DBXTeamLogEventType.factory(swift: .deviceUnlink(deviceUnlink.swift))
    }
    if object.isDropboxPasswordsExported() {
        let dropboxPasswordsExported = mapDBTEAMLOGDropboxPasswordsExportedTypeToDBX(object: object.dropboxPasswordsExported)
        return DBXTeamLogEventType.factory(swift: .dropboxPasswordsExported(dropboxPasswordsExported.swift))
    }
    if object.isDropboxPasswordsNewDeviceEnrolled() {
        let dropboxPasswordsNewDeviceEnrolled = mapDBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeToDBX(object: object.dropboxPasswordsNewDeviceEnrolled)
        return DBXTeamLogEventType.factory(swift: .dropboxPasswordsNewDeviceEnrolled(dropboxPasswordsNewDeviceEnrolled.swift))
    }
    if object.isEmmRefreshAuthToken() {
        let emmRefreshAuthToken = mapDBTEAMLOGEmmRefreshAuthTokenTypeToDBX(object: object.emmRefreshAuthToken)
        return DBXTeamLogEventType.factory(swift: .emmRefreshAuthToken(emmRefreshAuthToken.swift))
    }
    if object.isExternalDriveBackupEligibilityStatusChecked() {
        let externalDriveBackupEligibilityStatusChecked = mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedTypeToDBX(
            object: object
                .externalDriveBackupEligibilityStatusChecked
        )
        return DBXTeamLogEventType.factory(swift: .externalDriveBackupEligibilityStatusChecked(externalDriveBackupEligibilityStatusChecked.swift))
    }
    if object.isExternalDriveBackupStatusChanged() {
        let externalDriveBackupStatusChanged = mapDBTEAMLOGExternalDriveBackupStatusChangedTypeToDBX(object: object.externalDriveBackupStatusChanged)
        return DBXTeamLogEventType.factory(swift: .externalDriveBackupStatusChanged(externalDriveBackupStatusChanged.swift))
    }
    if object.isAccountCaptureChangeAvailability() {
        let accountCaptureChangeAvailability = mapDBTEAMLOGAccountCaptureChangeAvailabilityTypeToDBX(object: object.accountCaptureChangeAvailability)
        return DBXTeamLogEventType.factory(swift: .accountCaptureChangeAvailability(accountCaptureChangeAvailability.swift))
    }
    if object.isAccountCaptureMigrateAccount() {
        let accountCaptureMigrateAccount = mapDBTEAMLOGAccountCaptureMigrateAccountTypeToDBX(object: object.accountCaptureMigrateAccount)
        return DBXTeamLogEventType.factory(swift: .accountCaptureMigrateAccount(accountCaptureMigrateAccount.swift))
    }
    if object.isAccountCaptureNotificationEmailsSent() {
        let accountCaptureNotificationEmailsSent = mapDBTEAMLOGAccountCaptureNotificationEmailsSentTypeToDBX(
            object: object
                .accountCaptureNotificationEmailsSent
        )
        return DBXTeamLogEventType.factory(swift: .accountCaptureNotificationEmailsSent(accountCaptureNotificationEmailsSent.swift))
    }
    if object.isAccountCaptureRelinquishAccount() {
        let accountCaptureRelinquishAccount = mapDBTEAMLOGAccountCaptureRelinquishAccountTypeToDBX(object: object.accountCaptureRelinquishAccount)
        return DBXTeamLogEventType.factory(swift: .accountCaptureRelinquishAccount(accountCaptureRelinquishAccount.swift))
    }
    if object.isDisabledDomainInvites() {
        let disabledDomainInvites = mapDBTEAMLOGDisabledDomainInvitesTypeToDBX(object: object.disabledDomainInvites)
        return DBXTeamLogEventType.factory(swift: .disabledDomainInvites(disabledDomainInvites.swift))
    }
    if object.isDomainInvitesApproveRequestToJoinTeam() {
        let domainInvitesApproveRequestToJoinTeam = mapDBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeToDBX(
            object: object
                .domainInvitesApproveRequestToJoinTeam
        )
        return DBXTeamLogEventType.factory(swift: .domainInvitesApproveRequestToJoinTeam(domainInvitesApproveRequestToJoinTeam.swift))
    }
    if object.isDomainInvitesDeclineRequestToJoinTeam() {
        let domainInvitesDeclineRequestToJoinTeam = mapDBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeToDBX(
            object: object
                .domainInvitesDeclineRequestToJoinTeam
        )
        return DBXTeamLogEventType.factory(swift: .domainInvitesDeclineRequestToJoinTeam(domainInvitesDeclineRequestToJoinTeam.swift))
    }
    if object.isDomainInvitesEmailExistingUsers() {
        let domainInvitesEmailExistingUsers = mapDBTEAMLOGDomainInvitesEmailExistingUsersTypeToDBX(object: object.domainInvitesEmailExistingUsers)
        return DBXTeamLogEventType.factory(swift: .domainInvitesEmailExistingUsers(domainInvitesEmailExistingUsers.swift))
    }
    if object.isDomainInvitesRequestToJoinTeam() {
        let domainInvitesRequestToJoinTeam = mapDBTEAMLOGDomainInvitesRequestToJoinTeamTypeToDBX(object: object.domainInvitesRequestToJoinTeam)
        return DBXTeamLogEventType.factory(swift: .domainInvitesRequestToJoinTeam(domainInvitesRequestToJoinTeam.swift))
    }
    if object.isDomainInvitesSetInviteNewUserPrefToNo() {
        let domainInvitesSetInviteNewUserPrefToNo = mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeToDBX(
            object: object
                .domainInvitesSetInviteNewUserPrefToNo
        )
        return DBXTeamLogEventType.factory(swift: .domainInvitesSetInviteNewUserPrefToNo(domainInvitesSetInviteNewUserPrefToNo.swift))
    }
    if object.isDomainInvitesSetInviteNewUserPrefToYes() {
        let domainInvitesSetInviteNewUserPrefToYes = mapDBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeToDBX(
            object: object
                .domainInvitesSetInviteNewUserPrefToYes
        )
        return DBXTeamLogEventType.factory(swift: .domainInvitesSetInviteNewUserPrefToYes(domainInvitesSetInviteNewUserPrefToYes.swift))
    }
    if object.isDomainVerificationAddDomainFail() {
        let domainVerificationAddDomainFail = mapDBTEAMLOGDomainVerificationAddDomainFailTypeToDBX(object: object.domainVerificationAddDomainFail)
        return DBXTeamLogEventType.factory(swift: .domainVerificationAddDomainFail(domainVerificationAddDomainFail.swift))
    }
    if object.isDomainVerificationAddDomainSuccess() {
        let domainVerificationAddDomainSuccess = mapDBTEAMLOGDomainVerificationAddDomainSuccessTypeToDBX(object: object.domainVerificationAddDomainSuccess)
        return DBXTeamLogEventType.factory(swift: .domainVerificationAddDomainSuccess(domainVerificationAddDomainSuccess.swift))
    }
    if object.isDomainVerificationRemoveDomain() {
        let domainVerificationRemoveDomain = mapDBTEAMLOGDomainVerificationRemoveDomainTypeToDBX(object: object.domainVerificationRemoveDomain)
        return DBXTeamLogEventType.factory(swift: .domainVerificationRemoveDomain(domainVerificationRemoveDomain.swift))
    }
    if object.isEnabledDomainInvites() {
        let enabledDomainInvites = mapDBTEAMLOGEnabledDomainInvitesTypeToDBX(object: object.enabledDomainInvites)
        return DBXTeamLogEventType.factory(swift: .enabledDomainInvites(enabledDomainInvites.swift))
    }
    if object.isTeamEncryptionKeyCancelKeyDeletion() {
        let teamEncryptionKeyCancelKeyDeletion = mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionTypeToDBX(object: object.teamEncryptionKeyCancelKeyDeletion)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyCancelKeyDeletion(teamEncryptionKeyCancelKeyDeletion.swift))
    }
    if object.isTeamEncryptionKeyCreateKey() {
        let teamEncryptionKeyCreateKey = mapDBTEAMLOGTeamEncryptionKeyCreateKeyTypeToDBX(object: object.teamEncryptionKeyCreateKey)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyCreateKey(teamEncryptionKeyCreateKey.swift))
    }
    if object.isTeamEncryptionKeyDeleteKey() {
        let teamEncryptionKeyDeleteKey = mapDBTEAMLOGTeamEncryptionKeyDeleteKeyTypeToDBX(object: object.teamEncryptionKeyDeleteKey)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyDeleteKey(teamEncryptionKeyDeleteKey.swift))
    }
    if object.isTeamEncryptionKeyDisableKey() {
        let teamEncryptionKeyDisableKey = mapDBTEAMLOGTeamEncryptionKeyDisableKeyTypeToDBX(object: object.teamEncryptionKeyDisableKey)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyDisableKey(teamEncryptionKeyDisableKey.swift))
    }
    if object.isTeamEncryptionKeyEnableKey() {
        let teamEncryptionKeyEnableKey = mapDBTEAMLOGTeamEncryptionKeyEnableKeyTypeToDBX(object: object.teamEncryptionKeyEnableKey)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyEnableKey(teamEncryptionKeyEnableKey.swift))
    }
    if object.isTeamEncryptionKeyRotateKey() {
        let teamEncryptionKeyRotateKey = mapDBTEAMLOGTeamEncryptionKeyRotateKeyTypeToDBX(object: object.teamEncryptionKeyRotateKey)
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyRotateKey(teamEncryptionKeyRotateKey.swift))
    }
    if object.isTeamEncryptionKeyScheduleKeyDeletion() {
        let teamEncryptionKeyScheduleKeyDeletion = mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionTypeToDBX(
            object: object
                .teamEncryptionKeyScheduleKeyDeletion
        )
        return DBXTeamLogEventType.factory(swift: .teamEncryptionKeyScheduleKeyDeletion(teamEncryptionKeyScheduleKeyDeletion.swift))
    }
    if object.isApplyNamingConvention() {
        let applyNamingConvention = mapDBTEAMLOGApplyNamingConventionTypeToDBX(object: object.applyNamingConvention)
        return DBXTeamLogEventType.factory(swift: .applyNamingConvention(applyNamingConvention.swift))
    }
    if object.isCreateFolder() {
        let createFolder = mapDBTEAMLOGCreateFolderTypeToDBX(object: object.createFolder)
        return DBXTeamLogEventType.factory(swift: .createFolder(createFolder.swift))
    }
    if object.isFileAdd() {
        let fileAdd = mapDBTEAMLOGFileAddTypeToDBX(object: object.fileAdd)
        return DBXTeamLogEventType.factory(swift: .fileAdd(fileAdd.swift))
    }
    if object.isFileAddFromAutomation() {
        let fileAddFromAutomation = mapDBTEAMLOGFileAddFromAutomationTypeToDBX(object: object.fileAddFromAutomation)
        return DBXTeamLogEventType.factory(swift: .fileAddFromAutomation(fileAddFromAutomation.swift))
    }
    if object.isFileCopy() {
        let fileCopy = mapDBTEAMLOGFileCopyTypeToDBX(object: object.fileCopy)
        return DBXTeamLogEventType.factory(swift: .fileCopy(fileCopy.swift))
    }
    if object.isFileDelete() {
        let fileDelete = mapDBTEAMLOGFileDeleteTypeToDBX(object: object.fileDelete)
        return DBXTeamLogEventType.factory(swift: .fileDelete(fileDelete.swift))
    }
    if object.isFileDownload() {
        let fileDownload = mapDBTEAMLOGFileDownloadTypeToDBX(object: object.fileDownload)
        return DBXTeamLogEventType.factory(swift: .fileDownload(fileDownload.swift))
    }
    if object.isFileEdit() {
        let fileEdit = mapDBTEAMLOGFileEditTypeToDBX(object: object.fileEdit)
        return DBXTeamLogEventType.factory(swift: .fileEdit(fileEdit.swift))
    }
    if object.isFileGetCopyReference() {
        let fileGetCopyReference = mapDBTEAMLOGFileGetCopyReferenceTypeToDBX(object: object.fileGetCopyReference)
        return DBXTeamLogEventType.factory(swift: .fileGetCopyReference(fileGetCopyReference.swift))
    }
    if object.isFileLockingLockStatusChanged() {
        let fileLockingLockStatusChanged = mapDBTEAMLOGFileLockingLockStatusChangedTypeToDBX(object: object.fileLockingLockStatusChanged)
        return DBXTeamLogEventType.factory(swift: .fileLockingLockStatusChanged(fileLockingLockStatusChanged.swift))
    }
    if object.isFileMove() {
        let fileMove = mapDBTEAMLOGFileMoveTypeToDBX(object: object.fileMove)
        return DBXTeamLogEventType.factory(swift: .fileMove(fileMove.swift))
    }
    if object.isFilePermanentlyDelete() {
        let filePermanentlyDelete = mapDBTEAMLOGFilePermanentlyDeleteTypeToDBX(object: object.filePermanentlyDelete)
        return DBXTeamLogEventType.factory(swift: .filePermanentlyDelete(filePermanentlyDelete.swift))
    }
    if object.isFilePreview() {
        let filePreview = mapDBTEAMLOGFilePreviewTypeToDBX(object: object.filePreview)
        return DBXTeamLogEventType.factory(swift: .filePreview(filePreview.swift))
    }
    if object.isFileRename() {
        let fileRename = mapDBTEAMLOGFileRenameTypeToDBX(object: object.fileRename)
        return DBXTeamLogEventType.factory(swift: .fileRename(fileRename.swift))
    }
    if object.isFileRestore() {
        let fileRestore = mapDBTEAMLOGFileRestoreTypeToDBX(object: object.fileRestore)
        return DBXTeamLogEventType.factory(swift: .fileRestore(fileRestore.swift))
    }
    if object.isFileRevert() {
        let fileRevert = mapDBTEAMLOGFileRevertTypeToDBX(object: object.fileRevert)
        return DBXTeamLogEventType.factory(swift: .fileRevert(fileRevert.swift))
    }
    if object.isFileRollbackChanges() {
        let fileRollbackChanges = mapDBTEAMLOGFileRollbackChangesTypeToDBX(object: object.fileRollbackChanges)
        return DBXTeamLogEventType.factory(swift: .fileRollbackChanges(fileRollbackChanges.swift))
    }
    if object.isFileSaveCopyReference() {
        let fileSaveCopyReference = mapDBTEAMLOGFileSaveCopyReferenceTypeToDBX(object: object.fileSaveCopyReference)
        return DBXTeamLogEventType.factory(swift: .fileSaveCopyReference(fileSaveCopyReference.swift))
    }
    if object.isFolderOverviewDescriptionChanged() {
        let folderOverviewDescriptionChanged = mapDBTEAMLOGFolderOverviewDescriptionChangedTypeToDBX(object: object.folderOverviewDescriptionChanged)
        return DBXTeamLogEventType.factory(swift: .folderOverviewDescriptionChanged(folderOverviewDescriptionChanged.swift))
    }
    if object.isFolderOverviewItemPinned() {
        let folderOverviewItemPinned = mapDBTEAMLOGFolderOverviewItemPinnedTypeToDBX(object: object.folderOverviewItemPinned)
        return DBXTeamLogEventType.factory(swift: .folderOverviewItemPinned(folderOverviewItemPinned.swift))
    }
    if object.isFolderOverviewItemUnpinned() {
        let folderOverviewItemUnpinned = mapDBTEAMLOGFolderOverviewItemUnpinnedTypeToDBX(object: object.folderOverviewItemUnpinned)
        return DBXTeamLogEventType.factory(swift: .folderOverviewItemUnpinned(folderOverviewItemUnpinned.swift))
    }
    if object.isObjectLabelAdded() {
        let objectLabelAdded = mapDBTEAMLOGObjectLabelAddedTypeToDBX(object: object.objectLabelAdded)
        return DBXTeamLogEventType.factory(swift: .objectLabelAdded(objectLabelAdded.swift))
    }
    if object.isObjectLabelRemoved() {
        let objectLabelRemoved = mapDBTEAMLOGObjectLabelRemovedTypeToDBX(object: object.objectLabelRemoved)
        return DBXTeamLogEventType.factory(swift: .objectLabelRemoved(objectLabelRemoved.swift))
    }
    if object.isObjectLabelUpdatedValue() {
        let objectLabelUpdatedValue = mapDBTEAMLOGObjectLabelUpdatedValueTypeToDBX(object: object.objectLabelUpdatedValue)
        return DBXTeamLogEventType.factory(swift: .objectLabelUpdatedValue(objectLabelUpdatedValue.swift))
    }
    if object.isOrganizeFolderWithTidy() {
        let organizeFolderWithTidy = mapDBTEAMLOGOrganizeFolderWithTidyTypeToDBX(object: object.organizeFolderWithTidy)
        return DBXTeamLogEventType.factory(swift: .organizeFolderWithTidy(organizeFolderWithTidy.swift))
    }
    if object.isReplayFileDelete() {
        let replayFileDelete = mapDBTEAMLOGReplayFileDeleteTypeToDBX(object: object.replayFileDelete)
        return DBXTeamLogEventType.factory(swift: .replayFileDelete(replayFileDelete.swift))
    }
    if object.isRewindFolder() {
        let rewindFolder = mapDBTEAMLOGRewindFolderTypeToDBX(object: object.rewindFolder)
        return DBXTeamLogEventType.factory(swift: .rewindFolder(rewindFolder.swift))
    }
    if object.isUndoNamingConvention() {
        let undoNamingConvention = mapDBTEAMLOGUndoNamingConventionTypeToDBX(object: object.undoNamingConvention)
        return DBXTeamLogEventType.factory(swift: .undoNamingConvention(undoNamingConvention.swift))
    }
    if object.isUndoOrganizeFolderWithTidy() {
        let undoOrganizeFolderWithTidy = mapDBTEAMLOGUndoOrganizeFolderWithTidyTypeToDBX(object: object.undoOrganizeFolderWithTidy)
        return DBXTeamLogEventType.factory(swift: .undoOrganizeFolderWithTidy(undoOrganizeFolderWithTidy.swift))
    }
    if object.isUserTagsAdded() {
        let userTagsAdded = mapDBTEAMLOGUserTagsAddedTypeToDBX(object: object.userTagsAdded)
        return DBXTeamLogEventType.factory(swift: .userTagsAdded(userTagsAdded.swift))
    }
    if object.isUserTagsRemoved() {
        let userTagsRemoved = mapDBTEAMLOGUserTagsRemovedTypeToDBX(object: object.userTagsRemoved)
        return DBXTeamLogEventType.factory(swift: .userTagsRemoved(userTagsRemoved.swift))
    }
    if object.isEmailIngestReceiveFile() {
        let emailIngestReceiveFile = mapDBTEAMLOGEmailIngestReceiveFileTypeToDBX(object: object.emailIngestReceiveFile)
        return DBXTeamLogEventType.factory(swift: .emailIngestReceiveFile(emailIngestReceiveFile.swift))
    }
    if object.isFileRequestChange() {
        let fileRequestChange = mapDBTEAMLOGFileRequestChangeTypeToDBX(object: object.fileRequestChange)
        return DBXTeamLogEventType.factory(swift: .fileRequestChange(fileRequestChange.swift))
    }
    if object.isFileRequestClose() {
        let fileRequestClose = mapDBTEAMLOGFileRequestCloseTypeToDBX(object: object.fileRequestClose)
        return DBXTeamLogEventType.factory(swift: .fileRequestClose(fileRequestClose.swift))
    }
    if object.isFileRequestCreate() {
        let fileRequestCreate = mapDBTEAMLOGFileRequestCreateTypeToDBX(object: object.fileRequestCreate)
        return DBXTeamLogEventType.factory(swift: .fileRequestCreate(fileRequestCreate.swift))
    }
    if object.isFileRequestDelete() {
        let fileRequestDelete = mapDBTEAMLOGFileRequestDeleteTypeToDBX(object: object.fileRequestDelete)
        return DBXTeamLogEventType.factory(swift: .fileRequestDelete(fileRequestDelete.swift))
    }
    if object.isFileRequestReceiveFile() {
        let fileRequestReceiveFile = mapDBTEAMLOGFileRequestReceiveFileTypeToDBX(object: object.fileRequestReceiveFile)
        return DBXTeamLogEventType.factory(swift: .fileRequestReceiveFile(fileRequestReceiveFile.swift))
    }
    if object.isGroupAddExternalId() {
        let groupAddExternalId = mapDBTEAMLOGGroupAddExternalIdTypeToDBX(object: object.groupAddExternalId)
        return DBXTeamLogEventType.factory(swift: .groupAddExternalId(groupAddExternalId.swift))
    }
    if object.isGroupAddMember() {
        let groupAddMember = mapDBTEAMLOGGroupAddMemberTypeToDBX(object: object.groupAddMember)
        return DBXTeamLogEventType.factory(swift: .groupAddMember(groupAddMember.swift))
    }
    if object.isGroupChangeExternalId() {
        let groupChangeExternalId = mapDBTEAMLOGGroupChangeExternalIdTypeToDBX(object: object.groupChangeExternalId)
        return DBXTeamLogEventType.factory(swift: .groupChangeExternalId(groupChangeExternalId.swift))
    }
    if object.isGroupChangeManagementType() {
        let groupChangeManagementType = mapDBTEAMLOGGroupChangeManagementTypeTypeToDBX(object: object.groupChangeManagementType)
        return DBXTeamLogEventType.factory(swift: .groupChangeManagementType(groupChangeManagementType.swift))
    }
    if object.isGroupChangeMemberRole() {
        let groupChangeMemberRole = mapDBTEAMLOGGroupChangeMemberRoleTypeToDBX(object: object.groupChangeMemberRole)
        return DBXTeamLogEventType.factory(swift: .groupChangeMemberRole(groupChangeMemberRole.swift))
    }
    if object.isGroupCreate() {
        let groupCreate = mapDBTEAMLOGGroupCreateTypeToDBX(object: object.groupCreate)
        return DBXTeamLogEventType.factory(swift: .groupCreate(groupCreate.swift))
    }
    if object.isGroupDelete() {
        let groupDelete = mapDBTEAMLOGGroupDeleteTypeToDBX(object: object.groupDelete)
        return DBXTeamLogEventType.factory(swift: .groupDelete(groupDelete.swift))
    }
    if object.isGroupDescriptionUpdated() {
        let groupDescriptionUpdated = mapDBTEAMLOGGroupDescriptionUpdatedTypeToDBX(object: object.groupDescriptionUpdated)
        return DBXTeamLogEventType.factory(swift: .groupDescriptionUpdated(groupDescriptionUpdated.swift))
    }
    if object.isGroupJoinPolicyUpdated() {
        let groupJoinPolicyUpdated = mapDBTEAMLOGGroupJoinPolicyUpdatedTypeToDBX(object: object.groupJoinPolicyUpdated)
        return DBXTeamLogEventType.factory(swift: .groupJoinPolicyUpdated(groupJoinPolicyUpdated.swift))
    }
    if object.isGroupMoved() {
        let groupMoved = mapDBTEAMLOGGroupMovedTypeToDBX(object: object.groupMoved)
        return DBXTeamLogEventType.factory(swift: .groupMoved(groupMoved.swift))
    }
    if object.isGroupRemoveExternalId() {
        let groupRemoveExternalId = mapDBTEAMLOGGroupRemoveExternalIdTypeToDBX(object: object.groupRemoveExternalId)
        return DBXTeamLogEventType.factory(swift: .groupRemoveExternalId(groupRemoveExternalId.swift))
    }
    if object.isGroupRemoveMember() {
        let groupRemoveMember = mapDBTEAMLOGGroupRemoveMemberTypeToDBX(object: object.groupRemoveMember)
        return DBXTeamLogEventType.factory(swift: .groupRemoveMember(groupRemoveMember.swift))
    }
    if object.isGroupRename() {
        let groupRename = mapDBTEAMLOGGroupRenameTypeToDBX(object: object.groupRename)
        return DBXTeamLogEventType.factory(swift: .groupRename(groupRename.swift))
    }
    if object.isAccountLockOrUnlocked() {
        let accountLockOrUnlocked = mapDBTEAMLOGAccountLockOrUnlockedTypeToDBX(object: object.accountLockOrUnlocked)
        return DBXTeamLogEventType.factory(swift: .accountLockOrUnlocked(accountLockOrUnlocked.swift))
    }
    if object.isEmmError() {
        let emmError = mapDBTEAMLOGEmmErrorTypeToDBX(object: object.emmError)
        return DBXTeamLogEventType.factory(swift: .emmError(emmError.swift))
    }
    if object.isGuestAdminSignedInViaTrustedTeams() {
        let guestAdminSignedInViaTrustedTeams = mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsTypeToDBX(object: object.guestAdminSignedInViaTrustedTeams)
        return DBXTeamLogEventType.factory(swift: .guestAdminSignedInViaTrustedTeams(guestAdminSignedInViaTrustedTeams.swift))
    }
    if object.isGuestAdminSignedOutViaTrustedTeams() {
        let guestAdminSignedOutViaTrustedTeams = mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsTypeToDBX(object: object.guestAdminSignedOutViaTrustedTeams)
        return DBXTeamLogEventType.factory(swift: .guestAdminSignedOutViaTrustedTeams(guestAdminSignedOutViaTrustedTeams.swift))
    }
    if object.isLoginFail() {
        let loginFail = mapDBTEAMLOGLoginFailTypeToDBX(object: object.loginFail)
        return DBXTeamLogEventType.factory(swift: .loginFail(loginFail.swift))
    }
    if object.isLoginSuccess() {
        let loginSuccess = mapDBTEAMLOGLoginSuccessTypeToDBX(object: object.loginSuccess)
        return DBXTeamLogEventType.factory(swift: .loginSuccess(loginSuccess.swift))
    }
    if object.isLogout() {
        let logout = mapDBTEAMLOGLogoutTypeToDBX(object: object.logout)
        return DBXTeamLogEventType.factory(swift: .logout(logout.swift))
    }
    if object.isResellerSupportSessionEnd() {
        let resellerSupportSessionEnd = mapDBTEAMLOGResellerSupportSessionEndTypeToDBX(object: object.resellerSupportSessionEnd)
        return DBXTeamLogEventType.factory(swift: .resellerSupportSessionEnd(resellerSupportSessionEnd.swift))
    }
    if object.isResellerSupportSessionStart() {
        let resellerSupportSessionStart = mapDBTEAMLOGResellerSupportSessionStartTypeToDBX(object: object.resellerSupportSessionStart)
        return DBXTeamLogEventType.factory(swift: .resellerSupportSessionStart(resellerSupportSessionStart.swift))
    }
    if object.isSignInAsSessionEnd() {
        let signInAsSessionEnd = mapDBTEAMLOGSignInAsSessionEndTypeToDBX(object: object.signInAsSessionEnd)
        return DBXTeamLogEventType.factory(swift: .signInAsSessionEnd(signInAsSessionEnd.swift))
    }
    if object.isSignInAsSessionStart() {
        let signInAsSessionStart = mapDBTEAMLOGSignInAsSessionStartTypeToDBX(object: object.signInAsSessionStart)
        return DBXTeamLogEventType.factory(swift: .signInAsSessionStart(signInAsSessionStart.swift))
    }
    if object.isSsoError() {
        let ssoError = mapDBTEAMLOGSsoErrorTypeToDBX(object: object.ssoError)
        return DBXTeamLogEventType.factory(swift: .ssoError(ssoError.swift))
    }
    if object.isBackupAdminInvitationSent() {
        let backupAdminInvitationSent = mapDBTEAMLOGBackupAdminInvitationSentTypeToDBX(object: object.backupAdminInvitationSent)
        return DBXTeamLogEventType.factory(swift: .backupAdminInvitationSent(backupAdminInvitationSent.swift))
    }
    if object.isBackupInvitationOpened() {
        let backupInvitationOpened = mapDBTEAMLOGBackupInvitationOpenedTypeToDBX(object: object.backupInvitationOpened)
        return DBXTeamLogEventType.factory(swift: .backupInvitationOpened(backupInvitationOpened.swift))
    }
    if object.isCreateTeamInviteLink() {
        let createTeamInviteLink = mapDBTEAMLOGCreateTeamInviteLinkTypeToDBX(object: object.createTeamInviteLink)
        return DBXTeamLogEventType.factory(swift: .createTeamInviteLink(createTeamInviteLink.swift))
    }
    if object.isDeleteTeamInviteLink() {
        let deleteTeamInviteLink = mapDBTEAMLOGDeleteTeamInviteLinkTypeToDBX(object: object.deleteTeamInviteLink)
        return DBXTeamLogEventType.factory(swift: .deleteTeamInviteLink(deleteTeamInviteLink.swift))
    }
    if object.isMemberAddExternalId() {
        let memberAddExternalId = mapDBTEAMLOGMemberAddExternalIdTypeToDBX(object: object.memberAddExternalId)
        return DBXTeamLogEventType.factory(swift: .memberAddExternalId(memberAddExternalId.swift))
    }
    if object.isMemberAddName() {
        let memberAddName = mapDBTEAMLOGMemberAddNameTypeToDBX(object: object.memberAddName)
        return DBXTeamLogEventType.factory(swift: .memberAddName(memberAddName.swift))
    }
    if object.isMemberChangeAdminRole() {
        let memberChangeAdminRole = mapDBTEAMLOGMemberChangeAdminRoleTypeToDBX(object: object.memberChangeAdminRole)
        return DBXTeamLogEventType.factory(swift: .memberChangeAdminRole(memberChangeAdminRole.swift))
    }
    if object.isMemberChangeEmail() {
        let memberChangeEmail = mapDBTEAMLOGMemberChangeEmailTypeToDBX(object: object.memberChangeEmail)
        return DBXTeamLogEventType.factory(swift: .memberChangeEmail(memberChangeEmail.swift))
    }
    if object.isMemberChangeExternalId() {
        let memberChangeExternalId = mapDBTEAMLOGMemberChangeExternalIdTypeToDBX(object: object.memberChangeExternalId)
        return DBXTeamLogEventType.factory(swift: .memberChangeExternalId(memberChangeExternalId.swift))
    }
    if object.isMemberChangeMembershipType() {
        let memberChangeMembershipType = mapDBTEAMLOGMemberChangeMembershipTypeTypeToDBX(object: object.memberChangeMembershipType)
        return DBXTeamLogEventType.factory(swift: .memberChangeMembershipType(memberChangeMembershipType.swift))
    }
    if object.isMemberChangeName() {
        let memberChangeName = mapDBTEAMLOGMemberChangeNameTypeToDBX(object: object.memberChangeName)
        return DBXTeamLogEventType.factory(swift: .memberChangeName(memberChangeName.swift))
    }
    if object.isMemberChangeResellerRole() {
        let memberChangeResellerRole = mapDBTEAMLOGMemberChangeResellerRoleTypeToDBX(object: object.memberChangeResellerRole)
        return DBXTeamLogEventType.factory(swift: .memberChangeResellerRole(memberChangeResellerRole.swift))
    }
    if object.isMemberChangeStatus() {
        let memberChangeStatus = mapDBTEAMLOGMemberChangeStatusTypeToDBX(object: object.memberChangeStatus)
        return DBXTeamLogEventType.factory(swift: .memberChangeStatus(memberChangeStatus.swift))
    }
    if object.isMemberDeleteManualContacts() {
        let memberDeleteManualContacts = mapDBTEAMLOGMemberDeleteManualContactsTypeToDBX(object: object.memberDeleteManualContacts)
        return DBXTeamLogEventType.factory(swift: .memberDeleteManualContacts(memberDeleteManualContacts.swift))
    }
    if object.isMemberDeleteProfilePhoto() {
        let memberDeleteProfilePhoto = mapDBTEAMLOGMemberDeleteProfilePhotoTypeToDBX(object: object.memberDeleteProfilePhoto)
        return DBXTeamLogEventType.factory(swift: .memberDeleteProfilePhoto(memberDeleteProfilePhoto.swift))
    }
    if object.isMemberPermanentlyDeleteAccountContents() {
        let memberPermanentlyDeleteAccountContents = mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeToDBX(
            object: object
                .memberPermanentlyDeleteAccountContents
        )
        return DBXTeamLogEventType.factory(swift: .memberPermanentlyDeleteAccountContents(memberPermanentlyDeleteAccountContents.swift))
    }
    if object.isMemberRemoveExternalId() {
        let memberRemoveExternalId = mapDBTEAMLOGMemberRemoveExternalIdTypeToDBX(object: object.memberRemoveExternalId)
        return DBXTeamLogEventType.factory(swift: .memberRemoveExternalId(memberRemoveExternalId.swift))
    }
    if object.isMemberSetProfilePhoto() {
        let memberSetProfilePhoto = mapDBTEAMLOGMemberSetProfilePhotoTypeToDBX(object: object.memberSetProfilePhoto)
        return DBXTeamLogEventType.factory(swift: .memberSetProfilePhoto(memberSetProfilePhoto.swift))
    }
    if object.isMemberSpaceLimitsAddCustomQuota() {
        let memberSpaceLimitsAddCustomQuota = mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeToDBX(object: object.memberSpaceLimitsAddCustomQuota)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsAddCustomQuota(memberSpaceLimitsAddCustomQuota.swift))
    }
    if object.isMemberSpaceLimitsChangeCustomQuota() {
        let memberSpaceLimitsChangeCustomQuota = mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeToDBX(object: object.memberSpaceLimitsChangeCustomQuota)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsChangeCustomQuota(memberSpaceLimitsChangeCustomQuota.swift))
    }
    if object.isMemberSpaceLimitsChangeStatus() {
        let memberSpaceLimitsChangeStatus = mapDBTEAMLOGMemberSpaceLimitsChangeStatusTypeToDBX(object: object.memberSpaceLimitsChangeStatus)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsChangeStatus(memberSpaceLimitsChangeStatus.swift))
    }
    if object.isMemberSpaceLimitsRemoveCustomQuota() {
        let memberSpaceLimitsRemoveCustomQuota = mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeToDBX(object: object.memberSpaceLimitsRemoveCustomQuota)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsRemoveCustomQuota(memberSpaceLimitsRemoveCustomQuota.swift))
    }
    if object.isMemberSuggest() {
        let memberSuggest = mapDBTEAMLOGMemberSuggestTypeToDBX(object: object.memberSuggest)
        return DBXTeamLogEventType.factory(swift: .memberSuggest(memberSuggest.swift))
    }
    if object.isMemberTransferAccountContents() {
        let memberTransferAccountContents = mapDBTEAMLOGMemberTransferAccountContentsTypeToDBX(object: object.memberTransferAccountContents)
        return DBXTeamLogEventType.factory(swift: .memberTransferAccountContents(memberTransferAccountContents.swift))
    }
    if object.isPendingSecondaryEmailAdded() {
        let pendingSecondaryEmailAdded = mapDBTEAMLOGPendingSecondaryEmailAddedTypeToDBX(object: object.pendingSecondaryEmailAdded)
        return DBXTeamLogEventType.factory(swift: .pendingSecondaryEmailAdded(pendingSecondaryEmailAdded.swift))
    }
    if object.isSecondaryEmailDeleted() {
        let secondaryEmailDeleted = mapDBTEAMLOGSecondaryEmailDeletedTypeToDBX(object: object.secondaryEmailDeleted)
        return DBXTeamLogEventType.factory(swift: .secondaryEmailDeleted(secondaryEmailDeleted.swift))
    }
    if object.isSecondaryEmailVerified() {
        let secondaryEmailVerified = mapDBTEAMLOGSecondaryEmailVerifiedTypeToDBX(object: object.secondaryEmailVerified)
        return DBXTeamLogEventType.factory(swift: .secondaryEmailVerified(secondaryEmailVerified.swift))
    }
    if object.isSecondaryMailsPolicyChanged() {
        let secondaryMailsPolicyChanged = mapDBTEAMLOGSecondaryMailsPolicyChangedTypeToDBX(object: object.secondaryMailsPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .secondaryMailsPolicyChanged(secondaryMailsPolicyChanged.swift))
    }
    if object.isBinderAddPage() {
        let binderAddPage = mapDBTEAMLOGBinderAddPageTypeToDBX(object: object.binderAddPage)
        return DBXTeamLogEventType.factory(swift: .binderAddPage(binderAddPage.swift))
    }
    if object.isBinderAddSection() {
        let binderAddSection = mapDBTEAMLOGBinderAddSectionTypeToDBX(object: object.binderAddSection)
        return DBXTeamLogEventType.factory(swift: .binderAddSection(binderAddSection.swift))
    }
    if object.isBinderRemovePage() {
        let binderRemovePage = mapDBTEAMLOGBinderRemovePageTypeToDBX(object: object.binderRemovePage)
        return DBXTeamLogEventType.factory(swift: .binderRemovePage(binderRemovePage.swift))
    }
    if object.isBinderRemoveSection() {
        let binderRemoveSection = mapDBTEAMLOGBinderRemoveSectionTypeToDBX(object: object.binderRemoveSection)
        return DBXTeamLogEventType.factory(swift: .binderRemoveSection(binderRemoveSection.swift))
    }
    if object.isBinderRenamePage() {
        let binderRenamePage = mapDBTEAMLOGBinderRenamePageTypeToDBX(object: object.binderRenamePage)
        return DBXTeamLogEventType.factory(swift: .binderRenamePage(binderRenamePage.swift))
    }
    if object.isBinderRenameSection() {
        let binderRenameSection = mapDBTEAMLOGBinderRenameSectionTypeToDBX(object: object.binderRenameSection)
        return DBXTeamLogEventType.factory(swift: .binderRenameSection(binderRenameSection.swift))
    }
    if object.isBinderReorderPage() {
        let binderReorderPage = mapDBTEAMLOGBinderReorderPageTypeToDBX(object: object.binderReorderPage)
        return DBXTeamLogEventType.factory(swift: .binderReorderPage(binderReorderPage.swift))
    }
    if object.isBinderReorderSection() {
        let binderReorderSection = mapDBTEAMLOGBinderReorderSectionTypeToDBX(object: object.binderReorderSection)
        return DBXTeamLogEventType.factory(swift: .binderReorderSection(binderReorderSection.swift))
    }
    if object.isPaperContentAddMember() {
        let paperContentAddMember = mapDBTEAMLOGPaperContentAddMemberTypeToDBX(object: object.paperContentAddMember)
        return DBXTeamLogEventType.factory(swift: .paperContentAddMember(paperContentAddMember.swift))
    }
    if object.isPaperContentAddToFolder() {
        let paperContentAddToFolder = mapDBTEAMLOGPaperContentAddToFolderTypeToDBX(object: object.paperContentAddToFolder)
        return DBXTeamLogEventType.factory(swift: .paperContentAddToFolder(paperContentAddToFolder.swift))
    }
    if object.isPaperContentArchive() {
        let paperContentArchive = mapDBTEAMLOGPaperContentArchiveTypeToDBX(object: object.paperContentArchive)
        return DBXTeamLogEventType.factory(swift: .paperContentArchive(paperContentArchive.swift))
    }
    if object.isPaperContentCreate() {
        let paperContentCreate = mapDBTEAMLOGPaperContentCreateTypeToDBX(object: object.paperContentCreate)
        return DBXTeamLogEventType.factory(swift: .paperContentCreate(paperContentCreate.swift))
    }
    if object.isPaperContentPermanentlyDelete() {
        let paperContentPermanentlyDelete = mapDBTEAMLOGPaperContentPermanentlyDeleteTypeToDBX(object: object.paperContentPermanentlyDelete)
        return DBXTeamLogEventType.factory(swift: .paperContentPermanentlyDelete(paperContentPermanentlyDelete.swift))
    }
    if object.isPaperContentRemoveFromFolder() {
        let paperContentRemoveFromFolder = mapDBTEAMLOGPaperContentRemoveFromFolderTypeToDBX(object: object.paperContentRemoveFromFolder)
        return DBXTeamLogEventType.factory(swift: .paperContentRemoveFromFolder(paperContentRemoveFromFolder.swift))
    }
    if object.isPaperContentRemoveMember() {
        let paperContentRemoveMember = mapDBTEAMLOGPaperContentRemoveMemberTypeToDBX(object: object.paperContentRemoveMember)
        return DBXTeamLogEventType.factory(swift: .paperContentRemoveMember(paperContentRemoveMember.swift))
    }
    if object.isPaperContentRename() {
        let paperContentRename = mapDBTEAMLOGPaperContentRenameTypeToDBX(object: object.paperContentRename)
        return DBXTeamLogEventType.factory(swift: .paperContentRename(paperContentRename.swift))
    }
    if object.isPaperContentRestore() {
        let paperContentRestore = mapDBTEAMLOGPaperContentRestoreTypeToDBX(object: object.paperContentRestore)
        return DBXTeamLogEventType.factory(swift: .paperContentRestore(paperContentRestore.swift))
    }
    if object.isPaperDocAddComment() {
        let paperDocAddComment = mapDBTEAMLOGPaperDocAddCommentTypeToDBX(object: object.paperDocAddComment)
        return DBXTeamLogEventType.factory(swift: .paperDocAddComment(paperDocAddComment.swift))
    }
    if object.isPaperDocChangeMemberRole() {
        let paperDocChangeMemberRole = mapDBTEAMLOGPaperDocChangeMemberRoleTypeToDBX(object: object.paperDocChangeMemberRole)
        return DBXTeamLogEventType.factory(swift: .paperDocChangeMemberRole(paperDocChangeMemberRole.swift))
    }
    if object.isPaperDocChangeSharingPolicy() {
        let paperDocChangeSharingPolicy = mapDBTEAMLOGPaperDocChangeSharingPolicyTypeToDBX(object: object.paperDocChangeSharingPolicy)
        return DBXTeamLogEventType.factory(swift: .paperDocChangeSharingPolicy(paperDocChangeSharingPolicy.swift))
    }
    if object.isPaperDocChangeSubscription() {
        let paperDocChangeSubscription = mapDBTEAMLOGPaperDocChangeSubscriptionTypeToDBX(object: object.paperDocChangeSubscription)
        return DBXTeamLogEventType.factory(swift: .paperDocChangeSubscription(paperDocChangeSubscription.swift))
    }
    if object.isPaperDocDeleted() {
        let paperDocDeleted = mapDBTEAMLOGPaperDocDeletedTypeToDBX(object: object.paperDocDeleted)
        return DBXTeamLogEventType.factory(swift: .paperDocDeleted(paperDocDeleted.swift))
    }
    if object.isPaperDocDeleteComment() {
        let paperDocDeleteComment = mapDBTEAMLOGPaperDocDeleteCommentTypeToDBX(object: object.paperDocDeleteComment)
        return DBXTeamLogEventType.factory(swift: .paperDocDeleteComment(paperDocDeleteComment.swift))
    }
    if object.isPaperDocDownload() {
        let paperDocDownload = mapDBTEAMLOGPaperDocDownloadTypeToDBX(object: object.paperDocDownload)
        return DBXTeamLogEventType.factory(swift: .paperDocDownload(paperDocDownload.swift))
    }
    if object.isPaperDocEdit() {
        let paperDocEdit = mapDBTEAMLOGPaperDocEditTypeToDBX(object: object.paperDocEdit)
        return DBXTeamLogEventType.factory(swift: .paperDocEdit(paperDocEdit.swift))
    }
    if object.isPaperDocEditComment() {
        let paperDocEditComment = mapDBTEAMLOGPaperDocEditCommentTypeToDBX(object: object.paperDocEditComment)
        return DBXTeamLogEventType.factory(swift: .paperDocEditComment(paperDocEditComment.swift))
    }
    if object.isPaperDocFollowed() {
        let paperDocFollowed = mapDBTEAMLOGPaperDocFollowedTypeToDBX(object: object.paperDocFollowed)
        return DBXTeamLogEventType.factory(swift: .paperDocFollowed(paperDocFollowed.swift))
    }
    if object.isPaperDocMention() {
        let paperDocMention = mapDBTEAMLOGPaperDocMentionTypeToDBX(object: object.paperDocMention)
        return DBXTeamLogEventType.factory(swift: .paperDocMention(paperDocMention.swift))
    }
    if object.isPaperDocOwnershipChanged() {
        let paperDocOwnershipChanged = mapDBTEAMLOGPaperDocOwnershipChangedTypeToDBX(object: object.paperDocOwnershipChanged)
        return DBXTeamLogEventType.factory(swift: .paperDocOwnershipChanged(paperDocOwnershipChanged.swift))
    }
    if object.isPaperDocRequestAccess() {
        let paperDocRequestAccess = mapDBTEAMLOGPaperDocRequestAccessTypeToDBX(object: object.paperDocRequestAccess)
        return DBXTeamLogEventType.factory(swift: .paperDocRequestAccess(paperDocRequestAccess.swift))
    }
    if object.isPaperDocResolveComment() {
        let paperDocResolveComment = mapDBTEAMLOGPaperDocResolveCommentTypeToDBX(object: object.paperDocResolveComment)
        return DBXTeamLogEventType.factory(swift: .paperDocResolveComment(paperDocResolveComment.swift))
    }
    if object.isPaperDocRevert() {
        let paperDocRevert = mapDBTEAMLOGPaperDocRevertTypeToDBX(object: object.paperDocRevert)
        return DBXTeamLogEventType.factory(swift: .paperDocRevert(paperDocRevert.swift))
    }
    if object.isPaperDocSlackShare() {
        let paperDocSlackShare = mapDBTEAMLOGPaperDocSlackShareTypeToDBX(object: object.paperDocSlackShare)
        return DBXTeamLogEventType.factory(swift: .paperDocSlackShare(paperDocSlackShare.swift))
    }
    if object.isPaperDocTeamInvite() {
        let paperDocTeamInvite = mapDBTEAMLOGPaperDocTeamInviteTypeToDBX(object: object.paperDocTeamInvite)
        return DBXTeamLogEventType.factory(swift: .paperDocTeamInvite(paperDocTeamInvite.swift))
    }
    if object.isPaperDocTrashed() {
        let paperDocTrashed = mapDBTEAMLOGPaperDocTrashedTypeToDBX(object: object.paperDocTrashed)
        return DBXTeamLogEventType.factory(swift: .paperDocTrashed(paperDocTrashed.swift))
    }
    if object.isPaperDocUnresolveComment() {
        let paperDocUnresolveComment = mapDBTEAMLOGPaperDocUnresolveCommentTypeToDBX(object: object.paperDocUnresolveComment)
        return DBXTeamLogEventType.factory(swift: .paperDocUnresolveComment(paperDocUnresolveComment.swift))
    }
    if object.isPaperDocUntrashed() {
        let paperDocUntrashed = mapDBTEAMLOGPaperDocUntrashedTypeToDBX(object: object.paperDocUntrashed)
        return DBXTeamLogEventType.factory(swift: .paperDocUntrashed(paperDocUntrashed.swift))
    }
    if object.isPaperDocView() {
        let paperDocView = mapDBTEAMLOGPaperDocViewTypeToDBX(object: object.paperDocView)
        return DBXTeamLogEventType.factory(swift: .paperDocView(paperDocView.swift))
    }
    if object.isPaperExternalViewAllow() {
        let paperExternalViewAllow = mapDBTEAMLOGPaperExternalViewAllowTypeToDBX(object: object.paperExternalViewAllow)
        return DBXTeamLogEventType.factory(swift: .paperExternalViewAllow(paperExternalViewAllow.swift))
    }
    if object.isPaperExternalViewDefaultTeam() {
        let paperExternalViewDefaultTeam = mapDBTEAMLOGPaperExternalViewDefaultTeamTypeToDBX(object: object.paperExternalViewDefaultTeam)
        return DBXTeamLogEventType.factory(swift: .paperExternalViewDefaultTeam(paperExternalViewDefaultTeam.swift))
    }
    if object.isPaperExternalViewForbid() {
        let paperExternalViewForbid = mapDBTEAMLOGPaperExternalViewForbidTypeToDBX(object: object.paperExternalViewForbid)
        return DBXTeamLogEventType.factory(swift: .paperExternalViewForbid(paperExternalViewForbid.swift))
    }
    if object.isPaperFolderChangeSubscription() {
        let paperFolderChangeSubscription = mapDBTEAMLOGPaperFolderChangeSubscriptionTypeToDBX(object: object.paperFolderChangeSubscription)
        return DBXTeamLogEventType.factory(swift: .paperFolderChangeSubscription(paperFolderChangeSubscription.swift))
    }
    if object.isPaperFolderDeleted() {
        let paperFolderDeleted = mapDBTEAMLOGPaperFolderDeletedTypeToDBX(object: object.paperFolderDeleted)
        return DBXTeamLogEventType.factory(swift: .paperFolderDeleted(paperFolderDeleted.swift))
    }
    if object.isPaperFolderFollowed() {
        let paperFolderFollowed = mapDBTEAMLOGPaperFolderFollowedTypeToDBX(object: object.paperFolderFollowed)
        return DBXTeamLogEventType.factory(swift: .paperFolderFollowed(paperFolderFollowed.swift))
    }
    if object.isPaperFolderTeamInvite() {
        let paperFolderTeamInvite = mapDBTEAMLOGPaperFolderTeamInviteTypeToDBX(object: object.paperFolderTeamInvite)
        return DBXTeamLogEventType.factory(swift: .paperFolderTeamInvite(paperFolderTeamInvite.swift))
    }
    if object.isPaperPublishedLinkChangePermission() {
        let paperPublishedLinkChangePermission = mapDBTEAMLOGPaperPublishedLinkChangePermissionTypeToDBX(object: object.paperPublishedLinkChangePermission)
        return DBXTeamLogEventType.factory(swift: .paperPublishedLinkChangePermission(paperPublishedLinkChangePermission.swift))
    }
    if object.isPaperPublishedLinkCreate() {
        let paperPublishedLinkCreate = mapDBTEAMLOGPaperPublishedLinkCreateTypeToDBX(object: object.paperPublishedLinkCreate)
        return DBXTeamLogEventType.factory(swift: .paperPublishedLinkCreate(paperPublishedLinkCreate.swift))
    }
    if object.isPaperPublishedLinkDisabled() {
        let paperPublishedLinkDisabled = mapDBTEAMLOGPaperPublishedLinkDisabledTypeToDBX(object: object.paperPublishedLinkDisabled)
        return DBXTeamLogEventType.factory(swift: .paperPublishedLinkDisabled(paperPublishedLinkDisabled.swift))
    }
    if object.isPaperPublishedLinkView() {
        let paperPublishedLinkView = mapDBTEAMLOGPaperPublishedLinkViewTypeToDBX(object: object.paperPublishedLinkView)
        return DBXTeamLogEventType.factory(swift: .paperPublishedLinkView(paperPublishedLinkView.swift))
    }
    if object.isPasswordChange() {
        let passwordChange = mapDBTEAMLOGPasswordChangeTypeToDBX(object: object.passwordChange)
        return DBXTeamLogEventType.factory(swift: .passwordChange(passwordChange.swift))
    }
    if object.isPasswordReset() {
        let passwordReset = mapDBTEAMLOGPasswordResetTypeToDBX(object: object.passwordReset)
        return DBXTeamLogEventType.factory(swift: .passwordReset(passwordReset.swift))
    }
    if object.isPasswordResetAll() {
        let passwordResetAll = mapDBTEAMLOGPasswordResetAllTypeToDBX(object: object.passwordResetAll)
        return DBXTeamLogEventType.factory(swift: .passwordResetAll(passwordResetAll.swift))
    }
    if object.isClassificationCreateReport() {
        let classificationCreateReport = mapDBTEAMLOGClassificationCreateReportTypeToDBX(object: object.classificationCreateReport)
        return DBXTeamLogEventType.factory(swift: .classificationCreateReport(classificationCreateReport.swift))
    }
    if object.isClassificationCreateReportFail() {
        let classificationCreateReportFail = mapDBTEAMLOGClassificationCreateReportFailTypeToDBX(object: object.classificationCreateReportFail)
        return DBXTeamLogEventType.factory(swift: .classificationCreateReportFail(classificationCreateReportFail.swift))
    }
    if object.isEmmCreateExceptionsReport() {
        let emmCreateExceptionsReport = mapDBTEAMLOGEmmCreateExceptionsReportTypeToDBX(object: object.emmCreateExceptionsReport)
        return DBXTeamLogEventType.factory(swift: .emmCreateExceptionsReport(emmCreateExceptionsReport.swift))
    }
    if object.isEmmCreateUsageReport() {
        let emmCreateUsageReport = mapDBTEAMLOGEmmCreateUsageReportTypeToDBX(object: object.emmCreateUsageReport)
        return DBXTeamLogEventType.factory(swift: .emmCreateUsageReport(emmCreateUsageReport.swift))
    }
    if object.isExportMembersReport() {
        let exportMembersReport = mapDBTEAMLOGExportMembersReportTypeToDBX(object: object.exportMembersReport)
        return DBXTeamLogEventType.factory(swift: .exportMembersReport(exportMembersReport.swift))
    }
    if object.isExportMembersReportFail() {
        let exportMembersReportFail = mapDBTEAMLOGExportMembersReportFailTypeToDBX(object: object.exportMembersReportFail)
        return DBXTeamLogEventType.factory(swift: .exportMembersReportFail(exportMembersReportFail.swift))
    }
    if object.isExternalSharingCreateReport() {
        let externalSharingCreateReport = mapDBTEAMLOGExternalSharingCreateReportTypeToDBX(object: object.externalSharingCreateReport)
        return DBXTeamLogEventType.factory(swift: .externalSharingCreateReport(externalSharingCreateReport.swift))
    }
    if object.isExternalSharingReportFailed() {
        let externalSharingReportFailed = mapDBTEAMLOGExternalSharingReportFailedTypeToDBX(object: object.externalSharingReportFailed)
        return DBXTeamLogEventType.factory(swift: .externalSharingReportFailed(externalSharingReportFailed.swift))
    }
    if object.isNoExpirationLinkGenCreateReport() {
        let noExpirationLinkGenCreateReport = mapDBTEAMLOGNoExpirationLinkGenCreateReportTypeToDBX(object: object.noExpirationLinkGenCreateReport)
        return DBXTeamLogEventType.factory(swift: .noExpirationLinkGenCreateReport(noExpirationLinkGenCreateReport.swift))
    }
    if object.isNoExpirationLinkGenReportFailed() {
        let noExpirationLinkGenReportFailed = mapDBTEAMLOGNoExpirationLinkGenReportFailedTypeToDBX(object: object.noExpirationLinkGenReportFailed)
        return DBXTeamLogEventType.factory(swift: .noExpirationLinkGenReportFailed(noExpirationLinkGenReportFailed.swift))
    }
    if object.isNoPasswordLinkGenCreateReport() {
        let noPasswordLinkGenCreateReport = mapDBTEAMLOGNoPasswordLinkGenCreateReportTypeToDBX(object: object.noPasswordLinkGenCreateReport)
        return DBXTeamLogEventType.factory(swift: .noPasswordLinkGenCreateReport(noPasswordLinkGenCreateReport.swift))
    }
    if object.isNoPasswordLinkGenReportFailed() {
        let noPasswordLinkGenReportFailed = mapDBTEAMLOGNoPasswordLinkGenReportFailedTypeToDBX(object: object.noPasswordLinkGenReportFailed)
        return DBXTeamLogEventType.factory(swift: .noPasswordLinkGenReportFailed(noPasswordLinkGenReportFailed.swift))
    }
    if object.isNoPasswordLinkViewCreateReport() {
        let noPasswordLinkViewCreateReport = mapDBTEAMLOGNoPasswordLinkViewCreateReportTypeToDBX(object: object.noPasswordLinkViewCreateReport)
        return DBXTeamLogEventType.factory(swift: .noPasswordLinkViewCreateReport(noPasswordLinkViewCreateReport.swift))
    }
    if object.isNoPasswordLinkViewReportFailed() {
        let noPasswordLinkViewReportFailed = mapDBTEAMLOGNoPasswordLinkViewReportFailedTypeToDBX(object: object.noPasswordLinkViewReportFailed)
        return DBXTeamLogEventType.factory(swift: .noPasswordLinkViewReportFailed(noPasswordLinkViewReportFailed.swift))
    }
    if object.isOutdatedLinkViewCreateReport() {
        let outdatedLinkViewCreateReport = mapDBTEAMLOGOutdatedLinkViewCreateReportTypeToDBX(object: object.outdatedLinkViewCreateReport)
        return DBXTeamLogEventType.factory(swift: .outdatedLinkViewCreateReport(outdatedLinkViewCreateReport.swift))
    }
    if object.isOutdatedLinkViewReportFailed() {
        let outdatedLinkViewReportFailed = mapDBTEAMLOGOutdatedLinkViewReportFailedTypeToDBX(object: object.outdatedLinkViewReportFailed)
        return DBXTeamLogEventType.factory(swift: .outdatedLinkViewReportFailed(outdatedLinkViewReportFailed.swift))
    }
    if object.isPaperAdminExportStart() {
        let paperAdminExportStart = mapDBTEAMLOGPaperAdminExportStartTypeToDBX(object: object.paperAdminExportStart)
        return DBXTeamLogEventType.factory(swift: .paperAdminExportStart(paperAdminExportStart.swift))
    }
    if object.isRansomwareAlertCreateReport() {
        let ransomwareAlertCreateReport = mapDBTEAMLOGRansomwareAlertCreateReportTypeToDBX(object: object.ransomwareAlertCreateReport)
        return DBXTeamLogEventType.factory(swift: .ransomwareAlertCreateReport(ransomwareAlertCreateReport.swift))
    }
    if object.isRansomwareAlertCreateReportFailed() {
        let ransomwareAlertCreateReportFailed = mapDBTEAMLOGRansomwareAlertCreateReportFailedTypeToDBX(object: object.ransomwareAlertCreateReportFailed)
        return DBXTeamLogEventType.factory(swift: .ransomwareAlertCreateReportFailed(ransomwareAlertCreateReportFailed.swift))
    }
    if object.isSmartSyncCreateAdminPrivilegeReport() {
        let smartSyncCreateAdminPrivilegeReport = mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeToDBX(object: object.smartSyncCreateAdminPrivilegeReport)
        return DBXTeamLogEventType.factory(swift: .smartSyncCreateAdminPrivilegeReport(smartSyncCreateAdminPrivilegeReport.swift))
    }
    if object.isTeamActivityCreateReport() {
        let teamActivityCreateReport = mapDBTEAMLOGTeamActivityCreateReportTypeToDBX(object: object.teamActivityCreateReport)
        return DBXTeamLogEventType.factory(swift: .teamActivityCreateReport(teamActivityCreateReport.swift))
    }
    if object.isTeamActivityCreateReportFail() {
        let teamActivityCreateReportFail = mapDBTEAMLOGTeamActivityCreateReportFailTypeToDBX(object: object.teamActivityCreateReportFail)
        return DBXTeamLogEventType.factory(swift: .teamActivityCreateReportFail(teamActivityCreateReportFail.swift))
    }
    if object.isCollectionShare() {
        let collectionShare = mapDBTEAMLOGCollectionShareTypeToDBX(object: object.collectionShare)
        return DBXTeamLogEventType.factory(swift: .collectionShare(collectionShare.swift))
    }
    if object.isFileTransfersFileAdd() {
        let fileTransfersFileAdd = mapDBTEAMLOGFileTransfersFileAddTypeToDBX(object: object.fileTransfersFileAdd)
        return DBXTeamLogEventType.factory(swift: .fileTransfersFileAdd(fileTransfersFileAdd.swift))
    }
    if object.isFileTransfersTransferDelete() {
        let fileTransfersTransferDelete = mapDBTEAMLOGFileTransfersTransferDeleteTypeToDBX(object: object.fileTransfersTransferDelete)
        return DBXTeamLogEventType.factory(swift: .fileTransfersTransferDelete(fileTransfersTransferDelete.swift))
    }
    if object.isFileTransfersTransferDownload() {
        let fileTransfersTransferDownload = mapDBTEAMLOGFileTransfersTransferDownloadTypeToDBX(object: object.fileTransfersTransferDownload)
        return DBXTeamLogEventType.factory(swift: .fileTransfersTransferDownload(fileTransfersTransferDownload.swift))
    }
    if object.isFileTransfersTransferSend() {
        let fileTransfersTransferSend = mapDBTEAMLOGFileTransfersTransferSendTypeToDBX(object: object.fileTransfersTransferSend)
        return DBXTeamLogEventType.factory(swift: .fileTransfersTransferSend(fileTransfersTransferSend.swift))
    }
    if object.isFileTransfersTransferView() {
        let fileTransfersTransferView = mapDBTEAMLOGFileTransfersTransferViewTypeToDBX(object: object.fileTransfersTransferView)
        return DBXTeamLogEventType.factory(swift: .fileTransfersTransferView(fileTransfersTransferView.swift))
    }
    if object.isNoteAclInviteOnly() {
        let noteAclInviteOnly = mapDBTEAMLOGNoteAclInviteOnlyTypeToDBX(object: object.noteAclInviteOnly)
        return DBXTeamLogEventType.factory(swift: .noteAclInviteOnly(noteAclInviteOnly.swift))
    }
    if object.isNoteAclLink() {
        let noteAclLink = mapDBTEAMLOGNoteAclLinkTypeToDBX(object: object.noteAclLink)
        return DBXTeamLogEventType.factory(swift: .noteAclLink(noteAclLink.swift))
    }
    if object.isNoteAclTeamLink() {
        let noteAclTeamLink = mapDBTEAMLOGNoteAclTeamLinkTypeToDBX(object: object.noteAclTeamLink)
        return DBXTeamLogEventType.factory(swift: .noteAclTeamLink(noteAclTeamLink.swift))
    }
    if object.isNoteShared() {
        let noteShared = mapDBTEAMLOGNoteSharedTypeToDBX(object: object.noteShared)
        return DBXTeamLogEventType.factory(swift: .noteShared(noteShared.swift))
    }
    if object.isNoteShareReceive() {
        let noteShareReceive = mapDBTEAMLOGNoteShareReceiveTypeToDBX(object: object.noteShareReceive)
        return DBXTeamLogEventType.factory(swift: .noteShareReceive(noteShareReceive.swift))
    }
    if object.isOpenNoteShared() {
        let openNoteShared = mapDBTEAMLOGOpenNoteSharedTypeToDBX(object: object.openNoteShared)
        return DBXTeamLogEventType.factory(swift: .openNoteShared(openNoteShared.swift))
    }
    if object.isReplayFileSharedLinkCreated() {
        let replayFileSharedLinkCreated = mapDBTEAMLOGReplayFileSharedLinkCreatedTypeToDBX(object: object.replayFileSharedLinkCreated)
        return DBXTeamLogEventType.factory(swift: .replayFileSharedLinkCreated(replayFileSharedLinkCreated.swift))
    }
    if object.isReplayFileSharedLinkModified() {
        let replayFileSharedLinkModified = mapDBTEAMLOGReplayFileSharedLinkModifiedTypeToDBX(object: object.replayFileSharedLinkModified)
        return DBXTeamLogEventType.factory(swift: .replayFileSharedLinkModified(replayFileSharedLinkModified.swift))
    }
    if object.isReplayProjectTeamAdd() {
        let replayProjectTeamAdd = mapDBTEAMLOGReplayProjectTeamAddTypeToDBX(object: object.replayProjectTeamAdd)
        return DBXTeamLogEventType.factory(swift: .replayProjectTeamAdd(replayProjectTeamAdd.swift))
    }
    if object.isReplayProjectTeamDelete() {
        let replayProjectTeamDelete = mapDBTEAMLOGReplayProjectTeamDeleteTypeToDBX(object: object.replayProjectTeamDelete)
        return DBXTeamLogEventType.factory(swift: .replayProjectTeamDelete(replayProjectTeamDelete.swift))
    }
    if object.isSfAddGroup() {
        let sfAddGroup = mapDBTEAMLOGSfAddGroupTypeToDBX(object: object.sfAddGroup)
        return DBXTeamLogEventType.factory(swift: .sfAddGroup(sfAddGroup.swift))
    }
    if object.isSfAllowNonMembersToViewSharedLinks() {
        let sfAllowNonMembersToViewSharedLinks = mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeToDBX(object: object.sfAllowNonMembersToViewSharedLinks)
        return DBXTeamLogEventType.factory(swift: .sfAllowNonMembersToViewSharedLinks(sfAllowNonMembersToViewSharedLinks.swift))
    }
    if object.isSfExternalInviteWarn() {
        let sfExternalInviteWarn = mapDBTEAMLOGSfExternalInviteWarnTypeToDBX(object: object.sfExternalInviteWarn)
        return DBXTeamLogEventType.factory(swift: .sfExternalInviteWarn(sfExternalInviteWarn.swift))
    }
    if object.isSfFbInvite() {
        let sfFbInvite = mapDBTEAMLOGSfFbInviteTypeToDBX(object: object.sfFbInvite)
        return DBXTeamLogEventType.factory(swift: .sfFbInvite(sfFbInvite.swift))
    }
    if object.isSfFbInviteChangeRole() {
        let sfFbInviteChangeRole = mapDBTEAMLOGSfFbInviteChangeRoleTypeToDBX(object: object.sfFbInviteChangeRole)
        return DBXTeamLogEventType.factory(swift: .sfFbInviteChangeRole(sfFbInviteChangeRole.swift))
    }
    if object.isSfFbUninvite() {
        let sfFbUninvite = mapDBTEAMLOGSfFbUninviteTypeToDBX(object: object.sfFbUninvite)
        return DBXTeamLogEventType.factory(swift: .sfFbUninvite(sfFbUninvite.swift))
    }
    if object.isSfInviteGroup() {
        let sfInviteGroup = mapDBTEAMLOGSfInviteGroupTypeToDBX(object: object.sfInviteGroup)
        return DBXTeamLogEventType.factory(swift: .sfInviteGroup(sfInviteGroup.swift))
    }
    if object.isSfTeamGrantAccess() {
        let sfTeamGrantAccess = mapDBTEAMLOGSfTeamGrantAccessTypeToDBX(object: object.sfTeamGrantAccess)
        return DBXTeamLogEventType.factory(swift: .sfTeamGrantAccess(sfTeamGrantAccess.swift))
    }
    if object.isSfTeamInvite() {
        let sfTeamInvite = mapDBTEAMLOGSfTeamInviteTypeToDBX(object: object.sfTeamInvite)
        return DBXTeamLogEventType.factory(swift: .sfTeamInvite(sfTeamInvite.swift))
    }
    if object.isSfTeamInviteChangeRole() {
        let sfTeamInviteChangeRole = mapDBTEAMLOGSfTeamInviteChangeRoleTypeToDBX(object: object.sfTeamInviteChangeRole)
        return DBXTeamLogEventType.factory(swift: .sfTeamInviteChangeRole(sfTeamInviteChangeRole.swift))
    }
    if object.isSfTeamJoin() {
        let sfTeamJoin = mapDBTEAMLOGSfTeamJoinTypeToDBX(object: object.sfTeamJoin)
        return DBXTeamLogEventType.factory(swift: .sfTeamJoin(sfTeamJoin.swift))
    }
    if object.isSfTeamJoinFromOobLink() {
        let sfTeamJoinFromOobLink = mapDBTEAMLOGSfTeamJoinFromOobLinkTypeToDBX(object: object.sfTeamJoinFromOobLink)
        return DBXTeamLogEventType.factory(swift: .sfTeamJoinFromOobLink(sfTeamJoinFromOobLink.swift))
    }
    if object.isSfTeamUninvite() {
        let sfTeamUninvite = mapDBTEAMLOGSfTeamUninviteTypeToDBX(object: object.sfTeamUninvite)
        return DBXTeamLogEventType.factory(swift: .sfTeamUninvite(sfTeamUninvite.swift))
    }
    if object.isSharedContentAddInvitees() {
        let sharedContentAddInvitees = mapDBTEAMLOGSharedContentAddInviteesTypeToDBX(object: object.sharedContentAddInvitees)
        return DBXTeamLogEventType.factory(swift: .sharedContentAddInvitees(sharedContentAddInvitees.swift))
    }
    if object.isSharedContentAddLinkExpiry() {
        let sharedContentAddLinkExpiry = mapDBTEAMLOGSharedContentAddLinkExpiryTypeToDBX(object: object.sharedContentAddLinkExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedContentAddLinkExpiry(sharedContentAddLinkExpiry.swift))
    }
    if object.isSharedContentAddLinkPassword() {
        let sharedContentAddLinkPassword = mapDBTEAMLOGSharedContentAddLinkPasswordTypeToDBX(object: object.sharedContentAddLinkPassword)
        return DBXTeamLogEventType.factory(swift: .sharedContentAddLinkPassword(sharedContentAddLinkPassword.swift))
    }
    if object.isSharedContentAddMember() {
        let sharedContentAddMember = mapDBTEAMLOGSharedContentAddMemberTypeToDBX(object: object.sharedContentAddMember)
        return DBXTeamLogEventType.factory(swift: .sharedContentAddMember(sharedContentAddMember.swift))
    }
    if object.isSharedContentChangeDownloadsPolicy() {
        let sharedContentChangeDownloadsPolicy = mapDBTEAMLOGSharedContentChangeDownloadsPolicyTypeToDBX(object: object.sharedContentChangeDownloadsPolicy)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeDownloadsPolicy(sharedContentChangeDownloadsPolicy.swift))
    }
    if object.isSharedContentChangeInviteeRole() {
        let sharedContentChangeInviteeRole = mapDBTEAMLOGSharedContentChangeInviteeRoleTypeToDBX(object: object.sharedContentChangeInviteeRole)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeInviteeRole(sharedContentChangeInviteeRole.swift))
    }
    if object.isSharedContentChangeLinkAudience() {
        let sharedContentChangeLinkAudience = mapDBTEAMLOGSharedContentChangeLinkAudienceTypeToDBX(object: object.sharedContentChangeLinkAudience)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeLinkAudience(sharedContentChangeLinkAudience.swift))
    }
    if object.isSharedContentChangeLinkExpiry() {
        let sharedContentChangeLinkExpiry = mapDBTEAMLOGSharedContentChangeLinkExpiryTypeToDBX(object: object.sharedContentChangeLinkExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeLinkExpiry(sharedContentChangeLinkExpiry.swift))
    }
    if object.isSharedContentChangeLinkPassword() {
        let sharedContentChangeLinkPassword = mapDBTEAMLOGSharedContentChangeLinkPasswordTypeToDBX(object: object.sharedContentChangeLinkPassword)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeLinkPassword(sharedContentChangeLinkPassword.swift))
    }
    if object.isSharedContentChangeMemberRole() {
        let sharedContentChangeMemberRole = mapDBTEAMLOGSharedContentChangeMemberRoleTypeToDBX(object: object.sharedContentChangeMemberRole)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeMemberRole(sharedContentChangeMemberRole.swift))
    }
    if object.isSharedContentChangeViewerInfoPolicy() {
        let sharedContentChangeViewerInfoPolicy = mapDBTEAMLOGSharedContentChangeViewerInfoPolicyTypeToDBX(object: object.sharedContentChangeViewerInfoPolicy)
        return DBXTeamLogEventType.factory(swift: .sharedContentChangeViewerInfoPolicy(sharedContentChangeViewerInfoPolicy.swift))
    }
    if object.isSharedContentClaimInvitation() {
        let sharedContentClaimInvitation = mapDBTEAMLOGSharedContentClaimInvitationTypeToDBX(object: object.sharedContentClaimInvitation)
        return DBXTeamLogEventType.factory(swift: .sharedContentClaimInvitation(sharedContentClaimInvitation.swift))
    }
    if object.isSharedContentCopy() {
        let sharedContentCopy = mapDBTEAMLOGSharedContentCopyTypeToDBX(object: object.sharedContentCopy)
        return DBXTeamLogEventType.factory(swift: .sharedContentCopy(sharedContentCopy.swift))
    }
    if object.isSharedContentDownload() {
        let sharedContentDownload = mapDBTEAMLOGSharedContentDownloadTypeToDBX(object: object.sharedContentDownload)
        return DBXTeamLogEventType.factory(swift: .sharedContentDownload(sharedContentDownload.swift))
    }
    if object.isSharedContentRelinquishMembership() {
        let sharedContentRelinquishMembership = mapDBTEAMLOGSharedContentRelinquishMembershipTypeToDBX(object: object.sharedContentRelinquishMembership)
        return DBXTeamLogEventType.factory(swift: .sharedContentRelinquishMembership(sharedContentRelinquishMembership.swift))
    }
    if object.isSharedContentRemoveInvitees() {
        let sharedContentRemoveInvitees = mapDBTEAMLOGSharedContentRemoveInviteesTypeToDBX(object: object.sharedContentRemoveInvitees)
        return DBXTeamLogEventType.factory(swift: .sharedContentRemoveInvitees(sharedContentRemoveInvitees.swift))
    }
    if object.isSharedContentRemoveLinkExpiry() {
        let sharedContentRemoveLinkExpiry = mapDBTEAMLOGSharedContentRemoveLinkExpiryTypeToDBX(object: object.sharedContentRemoveLinkExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedContentRemoveLinkExpiry(sharedContentRemoveLinkExpiry.swift))
    }
    if object.isSharedContentRemoveLinkPassword() {
        let sharedContentRemoveLinkPassword = mapDBTEAMLOGSharedContentRemoveLinkPasswordTypeToDBX(object: object.sharedContentRemoveLinkPassword)
        return DBXTeamLogEventType.factory(swift: .sharedContentRemoveLinkPassword(sharedContentRemoveLinkPassword.swift))
    }
    if object.isSharedContentRemoveMember() {
        let sharedContentRemoveMember = mapDBTEAMLOGSharedContentRemoveMemberTypeToDBX(object: object.sharedContentRemoveMember)
        return DBXTeamLogEventType.factory(swift: .sharedContentRemoveMember(sharedContentRemoveMember.swift))
    }
    if object.isSharedContentRequestAccess() {
        let sharedContentRequestAccess = mapDBTEAMLOGSharedContentRequestAccessTypeToDBX(object: object.sharedContentRequestAccess)
        return DBXTeamLogEventType.factory(swift: .sharedContentRequestAccess(sharedContentRequestAccess.swift))
    }
    if object.isSharedContentRestoreInvitees() {
        let sharedContentRestoreInvitees = mapDBTEAMLOGSharedContentRestoreInviteesTypeToDBX(object: object.sharedContentRestoreInvitees)
        return DBXTeamLogEventType.factory(swift: .sharedContentRestoreInvitees(sharedContentRestoreInvitees.swift))
    }
    if object.isSharedContentRestoreMember() {
        let sharedContentRestoreMember = mapDBTEAMLOGSharedContentRestoreMemberTypeToDBX(object: object.sharedContentRestoreMember)
        return DBXTeamLogEventType.factory(swift: .sharedContentRestoreMember(sharedContentRestoreMember.swift))
    }
    if object.isSharedContentUnshare() {
        let sharedContentUnshare = mapDBTEAMLOGSharedContentUnshareTypeToDBX(object: object.sharedContentUnshare)
        return DBXTeamLogEventType.factory(swift: .sharedContentUnshare(sharedContentUnshare.swift))
    }
    if object.isSharedContentView() {
        let sharedContentView = mapDBTEAMLOGSharedContentViewTypeToDBX(object: object.sharedContentView)
        return DBXTeamLogEventType.factory(swift: .sharedContentView(sharedContentView.swift))
    }
    if object.isSharedFolderChangeLinkPolicy() {
        let sharedFolderChangeLinkPolicy = mapDBTEAMLOGSharedFolderChangeLinkPolicyTypeToDBX(object: object.sharedFolderChangeLinkPolicy)
        return DBXTeamLogEventType.factory(swift: .sharedFolderChangeLinkPolicy(sharedFolderChangeLinkPolicy.swift))
    }
    if object.isSharedFolderChangeMembersInheritancePolicy() {
        let sharedFolderChangeMembersInheritancePolicy = mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeToDBX(
            object: object
                .sharedFolderChangeMembersInheritancePolicy
        )
        return DBXTeamLogEventType.factory(swift: .sharedFolderChangeMembersInheritancePolicy(sharedFolderChangeMembersInheritancePolicy.swift))
    }
    if object.isSharedFolderChangeMembersManagementPolicy() {
        let sharedFolderChangeMembersManagementPolicy = mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeToDBX(
            object: object
                .sharedFolderChangeMembersManagementPolicy
        )
        return DBXTeamLogEventType.factory(swift: .sharedFolderChangeMembersManagementPolicy(sharedFolderChangeMembersManagementPolicy.swift))
    }
    if object.isSharedFolderChangeMembersPolicy() {
        let sharedFolderChangeMembersPolicy = mapDBTEAMLOGSharedFolderChangeMembersPolicyTypeToDBX(object: object.sharedFolderChangeMembersPolicy)
        return DBXTeamLogEventType.factory(swift: .sharedFolderChangeMembersPolicy(sharedFolderChangeMembersPolicy.swift))
    }
    if object.isSharedFolderCreate() {
        let sharedFolderCreate = mapDBTEAMLOGSharedFolderCreateTypeToDBX(object: object.sharedFolderCreate)
        return DBXTeamLogEventType.factory(swift: .sharedFolderCreate(sharedFolderCreate.swift))
    }
    if object.isSharedFolderDeclineInvitation() {
        let sharedFolderDeclineInvitation = mapDBTEAMLOGSharedFolderDeclineInvitationTypeToDBX(object: object.sharedFolderDeclineInvitation)
        return DBXTeamLogEventType.factory(swift: .sharedFolderDeclineInvitation(sharedFolderDeclineInvitation.swift))
    }
    if object.isSharedFolderMount() {
        let sharedFolderMount = mapDBTEAMLOGSharedFolderMountTypeToDBX(object: object.sharedFolderMount)
        return DBXTeamLogEventType.factory(swift: .sharedFolderMount(sharedFolderMount.swift))
    }
    if object.isSharedFolderNest() {
        let sharedFolderNest = mapDBTEAMLOGSharedFolderNestTypeToDBX(object: object.sharedFolderNest)
        return DBXTeamLogEventType.factory(swift: .sharedFolderNest(sharedFolderNest.swift))
    }
    if object.isSharedFolderTransferOwnership() {
        let sharedFolderTransferOwnership = mapDBTEAMLOGSharedFolderTransferOwnershipTypeToDBX(object: object.sharedFolderTransferOwnership)
        return DBXTeamLogEventType.factory(swift: .sharedFolderTransferOwnership(sharedFolderTransferOwnership.swift))
    }
    if object.isSharedFolderUnmount() {
        let sharedFolderUnmount = mapDBTEAMLOGSharedFolderUnmountTypeToDBX(object: object.sharedFolderUnmount)
        return DBXTeamLogEventType.factory(swift: .sharedFolderUnmount(sharedFolderUnmount.swift))
    }
    if object.isSharedLinkAddExpiry() {
        let sharedLinkAddExpiry = mapDBTEAMLOGSharedLinkAddExpiryTypeToDBX(object: object.sharedLinkAddExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedLinkAddExpiry(sharedLinkAddExpiry.swift))
    }
    if object.isSharedLinkChangeExpiry() {
        let sharedLinkChangeExpiry = mapDBTEAMLOGSharedLinkChangeExpiryTypeToDBX(object: object.sharedLinkChangeExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedLinkChangeExpiry(sharedLinkChangeExpiry.swift))
    }
    if object.isSharedLinkChangeVisibility() {
        let sharedLinkChangeVisibility = mapDBTEAMLOGSharedLinkChangeVisibilityTypeToDBX(object: object.sharedLinkChangeVisibility)
        return DBXTeamLogEventType.factory(swift: .sharedLinkChangeVisibility(sharedLinkChangeVisibility.swift))
    }
    if object.isSharedLinkCopy() {
        let sharedLinkCopy = mapDBTEAMLOGSharedLinkCopyTypeToDBX(object: object.sharedLinkCopy)
        return DBXTeamLogEventType.factory(swift: .sharedLinkCopy(sharedLinkCopy.swift))
    }
    if object.isSharedLinkCreate() {
        let sharedLinkCreate = mapDBTEAMLOGSharedLinkCreateTypeToDBX(object: object.sharedLinkCreate)
        return DBXTeamLogEventType.factory(swift: .sharedLinkCreate(sharedLinkCreate.swift))
    }
    if object.isSharedLinkDisable() {
        let sharedLinkDisable = mapDBTEAMLOGSharedLinkDisableTypeToDBX(object: object.sharedLinkDisable)
        return DBXTeamLogEventType.factory(swift: .sharedLinkDisable(sharedLinkDisable.swift))
    }
    if object.isSharedLinkDownload() {
        let sharedLinkDownload = mapDBTEAMLOGSharedLinkDownloadTypeToDBX(object: object.sharedLinkDownload)
        return DBXTeamLogEventType.factory(swift: .sharedLinkDownload(sharedLinkDownload.swift))
    }
    if object.isSharedLinkRemoveExpiry() {
        let sharedLinkRemoveExpiry = mapDBTEAMLOGSharedLinkRemoveExpiryTypeToDBX(object: object.sharedLinkRemoveExpiry)
        return DBXTeamLogEventType.factory(swift: .sharedLinkRemoveExpiry(sharedLinkRemoveExpiry.swift))
    }
    if object.isSharedLinkSettingsAddExpiration() {
        let sharedLinkSettingsAddExpiration = mapDBTEAMLOGSharedLinkSettingsAddExpirationTypeToDBX(object: object.sharedLinkSettingsAddExpiration)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsAddExpiration(sharedLinkSettingsAddExpiration.swift))
    }
    if object.isSharedLinkSettingsAddPassword() {
        let sharedLinkSettingsAddPassword = mapDBTEAMLOGSharedLinkSettingsAddPasswordTypeToDBX(object: object.sharedLinkSettingsAddPassword)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsAddPassword(sharedLinkSettingsAddPassword.swift))
    }
    if object.isSharedLinkSettingsAllowDownloadDisabled() {
        let sharedLinkSettingsAllowDownloadDisabled = mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledTypeToDBX(
            object: object
                .sharedLinkSettingsAllowDownloadDisabled
        )
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsAllowDownloadDisabled(sharedLinkSettingsAllowDownloadDisabled.swift))
    }
    if object.isSharedLinkSettingsAllowDownloadEnabled() {
        let sharedLinkSettingsAllowDownloadEnabled = mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledTypeToDBX(
            object: object
                .sharedLinkSettingsAllowDownloadEnabled
        )
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsAllowDownloadEnabled(sharedLinkSettingsAllowDownloadEnabled.swift))
    }
    if object.isSharedLinkSettingsChangeAudience() {
        let sharedLinkSettingsChangeAudience = mapDBTEAMLOGSharedLinkSettingsChangeAudienceTypeToDBX(object: object.sharedLinkSettingsChangeAudience)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsChangeAudience(sharedLinkSettingsChangeAudience.swift))
    }
    if object.isSharedLinkSettingsChangeExpiration() {
        let sharedLinkSettingsChangeExpiration = mapDBTEAMLOGSharedLinkSettingsChangeExpirationTypeToDBX(object: object.sharedLinkSettingsChangeExpiration)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsChangeExpiration(sharedLinkSettingsChangeExpiration.swift))
    }
    if object.isSharedLinkSettingsChangePassword() {
        let sharedLinkSettingsChangePassword = mapDBTEAMLOGSharedLinkSettingsChangePasswordTypeToDBX(object: object.sharedLinkSettingsChangePassword)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsChangePassword(sharedLinkSettingsChangePassword.swift))
    }
    if object.isSharedLinkSettingsRemoveExpiration() {
        let sharedLinkSettingsRemoveExpiration = mapDBTEAMLOGSharedLinkSettingsRemoveExpirationTypeToDBX(object: object.sharedLinkSettingsRemoveExpiration)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsRemoveExpiration(sharedLinkSettingsRemoveExpiration.swift))
    }
    if object.isSharedLinkSettingsRemovePassword() {
        let sharedLinkSettingsRemovePassword = mapDBTEAMLOGSharedLinkSettingsRemovePasswordTypeToDBX(object: object.sharedLinkSettingsRemovePassword)
        return DBXTeamLogEventType.factory(swift: .sharedLinkSettingsRemovePassword(sharedLinkSettingsRemovePassword.swift))
    }
    if object.isSharedLinkShare() {
        let sharedLinkShare = mapDBTEAMLOGSharedLinkShareTypeToDBX(object: object.sharedLinkShare)
        return DBXTeamLogEventType.factory(swift: .sharedLinkShare(sharedLinkShare.swift))
    }
    if object.isSharedLinkView() {
        let sharedLinkView = mapDBTEAMLOGSharedLinkViewTypeToDBX(object: object.sharedLinkView)
        return DBXTeamLogEventType.factory(swift: .sharedLinkView(sharedLinkView.swift))
    }
    if object.isSharedNoteOpened() {
        let sharedNoteOpened = mapDBTEAMLOGSharedNoteOpenedTypeToDBX(object: object.sharedNoteOpened)
        return DBXTeamLogEventType.factory(swift: .sharedNoteOpened(sharedNoteOpened.swift))
    }
    if object.isShmodelDisableDownloads() {
        let shmodelDisableDownloads = mapDBTEAMLOGShmodelDisableDownloadsTypeToDBX(object: object.shmodelDisableDownloads)
        return DBXTeamLogEventType.factory(swift: .shmodelDisableDownloads(shmodelDisableDownloads.swift))
    }
    if object.isShmodelEnableDownloads() {
        let shmodelEnableDownloads = mapDBTEAMLOGShmodelEnableDownloadsTypeToDBX(object: object.shmodelEnableDownloads)
        return DBXTeamLogEventType.factory(swift: .shmodelEnableDownloads(shmodelEnableDownloads.swift))
    }
    if object.isShmodelGroupShare() {
        let shmodelGroupShare = mapDBTEAMLOGShmodelGroupShareTypeToDBX(object: object.shmodelGroupShare)
        return DBXTeamLogEventType.factory(swift: .shmodelGroupShare(shmodelGroupShare.swift))
    }
    if object.isShowcaseAccessGranted() {
        let showcaseAccessGranted = mapDBTEAMLOGShowcaseAccessGrantedTypeToDBX(object: object.showcaseAccessGranted)
        return DBXTeamLogEventType.factory(swift: .showcaseAccessGranted(showcaseAccessGranted.swift))
    }
    if object.isShowcaseAddMember() {
        let showcaseAddMember = mapDBTEAMLOGShowcaseAddMemberTypeToDBX(object: object.showcaseAddMember)
        return DBXTeamLogEventType.factory(swift: .showcaseAddMember(showcaseAddMember.swift))
    }
    if object.isShowcaseArchived() {
        let showcaseArchived = mapDBTEAMLOGShowcaseArchivedTypeToDBX(object: object.showcaseArchived)
        return DBXTeamLogEventType.factory(swift: .showcaseArchived(showcaseArchived.swift))
    }
    if object.isShowcaseCreated() {
        let showcaseCreated = mapDBTEAMLOGShowcaseCreatedTypeToDBX(object: object.showcaseCreated)
        return DBXTeamLogEventType.factory(swift: .showcaseCreated(showcaseCreated.swift))
    }
    if object.isShowcaseDeleteComment() {
        let showcaseDeleteComment = mapDBTEAMLOGShowcaseDeleteCommentTypeToDBX(object: object.showcaseDeleteComment)
        return DBXTeamLogEventType.factory(swift: .showcaseDeleteComment(showcaseDeleteComment.swift))
    }
    if object.isShowcaseEdited() {
        let showcaseEdited = mapDBTEAMLOGShowcaseEditedTypeToDBX(object: object.showcaseEdited)
        return DBXTeamLogEventType.factory(swift: .showcaseEdited(showcaseEdited.swift))
    }
    if object.isShowcaseEditComment() {
        let showcaseEditComment = mapDBTEAMLOGShowcaseEditCommentTypeToDBX(object: object.showcaseEditComment)
        return DBXTeamLogEventType.factory(swift: .showcaseEditComment(showcaseEditComment.swift))
    }
    if object.isShowcaseFileAdded() {
        let showcaseFileAdded = mapDBTEAMLOGShowcaseFileAddedTypeToDBX(object: object.showcaseFileAdded)
        return DBXTeamLogEventType.factory(swift: .showcaseFileAdded(showcaseFileAdded.swift))
    }
    if object.isShowcaseFileDownload() {
        let showcaseFileDownload = mapDBTEAMLOGShowcaseFileDownloadTypeToDBX(object: object.showcaseFileDownload)
        return DBXTeamLogEventType.factory(swift: .showcaseFileDownload(showcaseFileDownload.swift))
    }
    if object.isShowcaseFileRemoved() {
        let showcaseFileRemoved = mapDBTEAMLOGShowcaseFileRemovedTypeToDBX(object: object.showcaseFileRemoved)
        return DBXTeamLogEventType.factory(swift: .showcaseFileRemoved(showcaseFileRemoved.swift))
    }
    if object.isShowcaseFileView() {
        let showcaseFileView = mapDBTEAMLOGShowcaseFileViewTypeToDBX(object: object.showcaseFileView)
        return DBXTeamLogEventType.factory(swift: .showcaseFileView(showcaseFileView.swift))
    }
    if object.isShowcasePermanentlyDeleted() {
        let showcasePermanentlyDeleted = mapDBTEAMLOGShowcasePermanentlyDeletedTypeToDBX(object: object.showcasePermanentlyDeleted)
        return DBXTeamLogEventType.factory(swift: .showcasePermanentlyDeleted(showcasePermanentlyDeleted.swift))
    }
    if object.isShowcasePostComment() {
        let showcasePostComment = mapDBTEAMLOGShowcasePostCommentTypeToDBX(object: object.showcasePostComment)
        return DBXTeamLogEventType.factory(swift: .showcasePostComment(showcasePostComment.swift))
    }
    if object.isShowcaseRemoveMember() {
        let showcaseRemoveMember = mapDBTEAMLOGShowcaseRemoveMemberTypeToDBX(object: object.showcaseRemoveMember)
        return DBXTeamLogEventType.factory(swift: .showcaseRemoveMember(showcaseRemoveMember.swift))
    }
    if object.isShowcaseRenamed() {
        let showcaseRenamed = mapDBTEAMLOGShowcaseRenamedTypeToDBX(object: object.showcaseRenamed)
        return DBXTeamLogEventType.factory(swift: .showcaseRenamed(showcaseRenamed.swift))
    }
    if object.isShowcaseRequestAccess() {
        let showcaseRequestAccess = mapDBTEAMLOGShowcaseRequestAccessTypeToDBX(object: object.showcaseRequestAccess)
        return DBXTeamLogEventType.factory(swift: .showcaseRequestAccess(showcaseRequestAccess.swift))
    }
    if object.isShowcaseResolveComment() {
        let showcaseResolveComment = mapDBTEAMLOGShowcaseResolveCommentTypeToDBX(object: object.showcaseResolveComment)
        return DBXTeamLogEventType.factory(swift: .showcaseResolveComment(showcaseResolveComment.swift))
    }
    if object.isShowcaseRestored() {
        let showcaseRestored = mapDBTEAMLOGShowcaseRestoredTypeToDBX(object: object.showcaseRestored)
        return DBXTeamLogEventType.factory(swift: .showcaseRestored(showcaseRestored.swift))
    }
    if object.isShowcaseTrashed() {
        let showcaseTrashed = mapDBTEAMLOGShowcaseTrashedTypeToDBX(object: object.showcaseTrashed)
        return DBXTeamLogEventType.factory(swift: .showcaseTrashed(showcaseTrashed.swift))
    }
    if object.isShowcaseTrashedDeprecated() {
        let showcaseTrashedDeprecated = mapDBTEAMLOGShowcaseTrashedDeprecatedTypeToDBX(object: object.showcaseTrashedDeprecated)
        return DBXTeamLogEventType.factory(swift: .showcaseTrashedDeprecated(showcaseTrashedDeprecated.swift))
    }
    if object.isShowcaseUnresolveComment() {
        let showcaseUnresolveComment = mapDBTEAMLOGShowcaseUnresolveCommentTypeToDBX(object: object.showcaseUnresolveComment)
        return DBXTeamLogEventType.factory(swift: .showcaseUnresolveComment(showcaseUnresolveComment.swift))
    }
    if object.isShowcaseUntrashed() {
        let showcaseUntrashed = mapDBTEAMLOGShowcaseUntrashedTypeToDBX(object: object.showcaseUntrashed)
        return DBXTeamLogEventType.factory(swift: .showcaseUntrashed(showcaseUntrashed.swift))
    }
    if object.isShowcaseUntrashedDeprecated() {
        let showcaseUntrashedDeprecated = mapDBTEAMLOGShowcaseUntrashedDeprecatedTypeToDBX(object: object.showcaseUntrashedDeprecated)
        return DBXTeamLogEventType.factory(swift: .showcaseUntrashedDeprecated(showcaseUntrashedDeprecated.swift))
    }
    if object.isShowcaseView() {
        let showcaseView = mapDBTEAMLOGShowcaseViewTypeToDBX(object: object.showcaseView)
        return DBXTeamLogEventType.factory(swift: .showcaseView(showcaseView.swift))
    }
    if object.isSsoAddCert() {
        let ssoAddCert = mapDBTEAMLOGSsoAddCertTypeToDBX(object: object.ssoAddCert)
        return DBXTeamLogEventType.factory(swift: .ssoAddCert(ssoAddCert.swift))
    }
    if object.isSsoAddLoginUrl() {
        let ssoAddLoginUrl = mapDBTEAMLOGSsoAddLoginUrlTypeToDBX(object: object.ssoAddLoginUrl)
        return DBXTeamLogEventType.factory(swift: .ssoAddLoginUrl(ssoAddLoginUrl.swift))
    }
    if object.isSsoAddLogoutUrl() {
        let ssoAddLogoutUrl = mapDBTEAMLOGSsoAddLogoutUrlTypeToDBX(object: object.ssoAddLogoutUrl)
        return DBXTeamLogEventType.factory(swift: .ssoAddLogoutUrl(ssoAddLogoutUrl.swift))
    }
    if object.isSsoChangeCert() {
        let ssoChangeCert = mapDBTEAMLOGSsoChangeCertTypeToDBX(object: object.ssoChangeCert)
        return DBXTeamLogEventType.factory(swift: .ssoChangeCert(ssoChangeCert.swift))
    }
    if object.isSsoChangeLoginUrl() {
        let ssoChangeLoginUrl = mapDBTEAMLOGSsoChangeLoginUrlTypeToDBX(object: object.ssoChangeLoginUrl)
        return DBXTeamLogEventType.factory(swift: .ssoChangeLoginUrl(ssoChangeLoginUrl.swift))
    }
    if object.isSsoChangeLogoutUrl() {
        let ssoChangeLogoutUrl = mapDBTEAMLOGSsoChangeLogoutUrlTypeToDBX(object: object.ssoChangeLogoutUrl)
        return DBXTeamLogEventType.factory(swift: .ssoChangeLogoutUrl(ssoChangeLogoutUrl.swift))
    }
    if object.isSsoChangeSamlIdentityMode() {
        let ssoChangeSamlIdentityMode = mapDBTEAMLOGSsoChangeSamlIdentityModeTypeToDBX(object: object.ssoChangeSamlIdentityMode)
        return DBXTeamLogEventType.factory(swift: .ssoChangeSamlIdentityMode(ssoChangeSamlIdentityMode.swift))
    }
    if object.isSsoRemoveCert() {
        let ssoRemoveCert = mapDBTEAMLOGSsoRemoveCertTypeToDBX(object: object.ssoRemoveCert)
        return DBXTeamLogEventType.factory(swift: .ssoRemoveCert(ssoRemoveCert.swift))
    }
    if object.isSsoRemoveLoginUrl() {
        let ssoRemoveLoginUrl = mapDBTEAMLOGSsoRemoveLoginUrlTypeToDBX(object: object.ssoRemoveLoginUrl)
        return DBXTeamLogEventType.factory(swift: .ssoRemoveLoginUrl(ssoRemoveLoginUrl.swift))
    }
    if object.isSsoRemoveLogoutUrl() {
        let ssoRemoveLogoutUrl = mapDBTEAMLOGSsoRemoveLogoutUrlTypeToDBX(object: object.ssoRemoveLogoutUrl)
        return DBXTeamLogEventType.factory(swift: .ssoRemoveLogoutUrl(ssoRemoveLogoutUrl.swift))
    }
    if object.isTeamFolderChangeStatus() {
        let teamFolderChangeStatus = mapDBTEAMLOGTeamFolderChangeStatusTypeToDBX(object: object.teamFolderChangeStatus)
        return DBXTeamLogEventType.factory(swift: .teamFolderChangeStatus(teamFolderChangeStatus.swift))
    }
    if object.isTeamFolderCreate() {
        let teamFolderCreate = mapDBTEAMLOGTeamFolderCreateTypeToDBX(object: object.teamFolderCreate)
        return DBXTeamLogEventType.factory(swift: .teamFolderCreate(teamFolderCreate.swift))
    }
    if object.isTeamFolderDowngrade() {
        let teamFolderDowngrade = mapDBTEAMLOGTeamFolderDowngradeTypeToDBX(object: object.teamFolderDowngrade)
        return DBXTeamLogEventType.factory(swift: .teamFolderDowngrade(teamFolderDowngrade.swift))
    }
    if object.isTeamFolderPermanentlyDelete() {
        let teamFolderPermanentlyDelete = mapDBTEAMLOGTeamFolderPermanentlyDeleteTypeToDBX(object: object.teamFolderPermanentlyDelete)
        return DBXTeamLogEventType.factory(swift: .teamFolderPermanentlyDelete(teamFolderPermanentlyDelete.swift))
    }
    if object.isTeamFolderRename() {
        let teamFolderRename = mapDBTEAMLOGTeamFolderRenameTypeToDBX(object: object.teamFolderRename)
        return DBXTeamLogEventType.factory(swift: .teamFolderRename(teamFolderRename.swift))
    }
    if object.isTeamSelectiveSyncSettingsChanged() {
        let teamSelectiveSyncSettingsChanged = mapDBTEAMLOGTeamSelectiveSyncSettingsChangedTypeToDBX(object: object.teamSelectiveSyncSettingsChanged)
        return DBXTeamLogEventType.factory(swift: .teamSelectiveSyncSettingsChanged(teamSelectiveSyncSettingsChanged.swift))
    }
    if object.isAccountCaptureChangePolicy() {
        let accountCaptureChangePolicy = mapDBTEAMLOGAccountCaptureChangePolicyTypeToDBX(object: object.accountCaptureChangePolicy)
        return DBXTeamLogEventType.factory(swift: .accountCaptureChangePolicy(accountCaptureChangePolicy.swift))
    }
    if object.isAdminEmailRemindersChanged() {
        let adminEmailRemindersChanged = mapDBTEAMLOGAdminEmailRemindersChangedTypeToDBX(object: object.adminEmailRemindersChanged)
        return DBXTeamLogEventType.factory(swift: .adminEmailRemindersChanged(adminEmailRemindersChanged.swift))
    }
    if object.isAllowDownloadDisabled() {
        let allowDownloadDisabled = mapDBTEAMLOGAllowDownloadDisabledTypeToDBX(object: object.allowDownloadDisabled)
        return DBXTeamLogEventType.factory(swift: .allowDownloadDisabled(allowDownloadDisabled.swift))
    }
    if object.isAllowDownloadEnabled() {
        let allowDownloadEnabled = mapDBTEAMLOGAllowDownloadEnabledTypeToDBX(object: object.allowDownloadEnabled)
        return DBXTeamLogEventType.factory(swift: .allowDownloadEnabled(allowDownloadEnabled.swift))
    }
    if object.isAppPermissionsChanged() {
        let appPermissionsChanged = mapDBTEAMLOGAppPermissionsChangedTypeToDBX(object: object.appPermissionsChanged)
        return DBXTeamLogEventType.factory(swift: .appPermissionsChanged(appPermissionsChanged.swift))
    }
    if object.isCameraUploadsPolicyChanged() {
        let cameraUploadsPolicyChanged = mapDBTEAMLOGCameraUploadsPolicyChangedTypeToDBX(object: object.cameraUploadsPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .cameraUploadsPolicyChanged(cameraUploadsPolicyChanged.swift))
    }
    if object.isCaptureTranscriptPolicyChanged() {
        let captureTranscriptPolicyChanged = mapDBTEAMLOGCaptureTranscriptPolicyChangedTypeToDBX(object: object.captureTranscriptPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .captureTranscriptPolicyChanged(captureTranscriptPolicyChanged.swift))
    }
    if object.isClassificationChangePolicy() {
        let classificationChangePolicy = mapDBTEAMLOGClassificationChangePolicyTypeToDBX(object: object.classificationChangePolicy)
        return DBXTeamLogEventType.factory(swift: .classificationChangePolicy(classificationChangePolicy.swift))
    }
    if object.isComputerBackupPolicyChanged() {
        let computerBackupPolicyChanged = mapDBTEAMLOGComputerBackupPolicyChangedTypeToDBX(object: object.computerBackupPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .computerBackupPolicyChanged(computerBackupPolicyChanged.swift))
    }
    if object.isContentAdministrationPolicyChanged() {
        let contentAdministrationPolicyChanged = mapDBTEAMLOGContentAdministrationPolicyChangedTypeToDBX(object: object.contentAdministrationPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .contentAdministrationPolicyChanged(contentAdministrationPolicyChanged.swift))
    }
    if object.isDataPlacementRestrictionChangePolicy() {
        let dataPlacementRestrictionChangePolicy = mapDBTEAMLOGDataPlacementRestrictionChangePolicyTypeToDBX(
            object: object
                .dataPlacementRestrictionChangePolicy
        )
        return DBXTeamLogEventType.factory(swift: .dataPlacementRestrictionChangePolicy(dataPlacementRestrictionChangePolicy.swift))
    }
    if object.isDataPlacementRestrictionSatisfyPolicy() {
        let dataPlacementRestrictionSatisfyPolicy = mapDBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeToDBX(
            object: object
                .dataPlacementRestrictionSatisfyPolicy
        )
        return DBXTeamLogEventType.factory(swift: .dataPlacementRestrictionSatisfyPolicy(dataPlacementRestrictionSatisfyPolicy.swift))
    }
    if object.isDeviceApprovalsAddException() {
        let deviceApprovalsAddException = mapDBTEAMLOGDeviceApprovalsAddExceptionTypeToDBX(object: object.deviceApprovalsAddException)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsAddException(deviceApprovalsAddException.swift))
    }
    if object.isDeviceApprovalsChangeDesktopPolicy() {
        let deviceApprovalsChangeDesktopPolicy = mapDBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeToDBX(object: object.deviceApprovalsChangeDesktopPolicy)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsChangeDesktopPolicy(deviceApprovalsChangeDesktopPolicy.swift))
    }
    if object.isDeviceApprovalsChangeMobilePolicy() {
        let deviceApprovalsChangeMobilePolicy = mapDBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeToDBX(object: object.deviceApprovalsChangeMobilePolicy)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsChangeMobilePolicy(deviceApprovalsChangeMobilePolicy.swift))
    }
    if object.isDeviceApprovalsChangeOverageAction() {
        let deviceApprovalsChangeOverageAction = mapDBTEAMLOGDeviceApprovalsChangeOverageActionTypeToDBX(object: object.deviceApprovalsChangeOverageAction)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsChangeOverageAction(deviceApprovalsChangeOverageAction.swift))
    }
    if object.isDeviceApprovalsChangeUnlinkAction() {
        let deviceApprovalsChangeUnlinkAction = mapDBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeToDBX(object: object.deviceApprovalsChangeUnlinkAction)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsChangeUnlinkAction(deviceApprovalsChangeUnlinkAction.swift))
    }
    if object.isDeviceApprovalsRemoveException() {
        let deviceApprovalsRemoveException = mapDBTEAMLOGDeviceApprovalsRemoveExceptionTypeToDBX(object: object.deviceApprovalsRemoveException)
        return DBXTeamLogEventType.factory(swift: .deviceApprovalsRemoveException(deviceApprovalsRemoveException.swift))
    }
    if object.isDirectoryRestrictionsAddMembers() {
        let directoryRestrictionsAddMembers = mapDBTEAMLOGDirectoryRestrictionsAddMembersTypeToDBX(object: object.directoryRestrictionsAddMembers)
        return DBXTeamLogEventType.factory(swift: .directoryRestrictionsAddMembers(directoryRestrictionsAddMembers.swift))
    }
    if object.isDirectoryRestrictionsRemoveMembers() {
        let directoryRestrictionsRemoveMembers = mapDBTEAMLOGDirectoryRestrictionsRemoveMembersTypeToDBX(object: object.directoryRestrictionsRemoveMembers)
        return DBXTeamLogEventType.factory(swift: .directoryRestrictionsRemoveMembers(directoryRestrictionsRemoveMembers.swift))
    }
    if object.isDropboxPasswordsPolicyChanged() {
        let dropboxPasswordsPolicyChanged = mapDBTEAMLOGDropboxPasswordsPolicyChangedTypeToDBX(object: object.dropboxPasswordsPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .dropboxPasswordsPolicyChanged(dropboxPasswordsPolicyChanged.swift))
    }
    if object.isEmailIngestPolicyChanged() {
        let emailIngestPolicyChanged = mapDBTEAMLOGEmailIngestPolicyChangedTypeToDBX(object: object.emailIngestPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .emailIngestPolicyChanged(emailIngestPolicyChanged.swift))
    }
    if object.isEmmAddException() {
        let emmAddException = mapDBTEAMLOGEmmAddExceptionTypeToDBX(object: object.emmAddException)
        return DBXTeamLogEventType.factory(swift: .emmAddException(emmAddException.swift))
    }
    if object.isEmmChangePolicy() {
        let emmChangePolicy = mapDBTEAMLOGEmmChangePolicyTypeToDBX(object: object.emmChangePolicy)
        return DBXTeamLogEventType.factory(swift: .emmChangePolicy(emmChangePolicy.swift))
    }
    if object.isEmmRemoveException() {
        let emmRemoveException = mapDBTEAMLOGEmmRemoveExceptionTypeToDBX(object: object.emmRemoveException)
        return DBXTeamLogEventType.factory(swift: .emmRemoveException(emmRemoveException.swift))
    }
    if object.isExtendedVersionHistoryChangePolicy() {
        let extendedVersionHistoryChangePolicy = mapDBTEAMLOGExtendedVersionHistoryChangePolicyTypeToDBX(object: object.extendedVersionHistoryChangePolicy)
        return DBXTeamLogEventType.factory(swift: .extendedVersionHistoryChangePolicy(extendedVersionHistoryChangePolicy.swift))
    }
    if object.isExternalDriveBackupPolicyChanged() {
        let externalDriveBackupPolicyChanged = mapDBTEAMLOGExternalDriveBackupPolicyChangedTypeToDBX(object: object.externalDriveBackupPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .externalDriveBackupPolicyChanged(externalDriveBackupPolicyChanged.swift))
    }
    if object.isFileCommentsChangePolicy() {
        let fileCommentsChangePolicy = mapDBTEAMLOGFileCommentsChangePolicyTypeToDBX(object: object.fileCommentsChangePolicy)
        return DBXTeamLogEventType.factory(swift: .fileCommentsChangePolicy(fileCommentsChangePolicy.swift))
    }
    if object.isFileLockingPolicyChanged() {
        let fileLockingPolicyChanged = mapDBTEAMLOGFileLockingPolicyChangedTypeToDBX(object: object.fileLockingPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .fileLockingPolicyChanged(fileLockingPolicyChanged.swift))
    }
    if object.isFileProviderMigrationPolicyChanged() {
        let fileProviderMigrationPolicyChanged = mapDBTEAMLOGFileProviderMigrationPolicyChangedTypeToDBX(object: object.fileProviderMigrationPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .fileProviderMigrationPolicyChanged(fileProviderMigrationPolicyChanged.swift))
    }
    if object.isFileRequestsChangePolicy() {
        let fileRequestsChangePolicy = mapDBTEAMLOGFileRequestsChangePolicyTypeToDBX(object: object.fileRequestsChangePolicy)
        return DBXTeamLogEventType.factory(swift: .fileRequestsChangePolicy(fileRequestsChangePolicy.swift))
    }
    if object.isFileRequestsEmailsEnabled() {
        let fileRequestsEmailsEnabled = mapDBTEAMLOGFileRequestsEmailsEnabledTypeToDBX(object: object.fileRequestsEmailsEnabled)
        return DBXTeamLogEventType.factory(swift: .fileRequestsEmailsEnabled(fileRequestsEmailsEnabled.swift))
    }
    if object.isFileRequestsEmailsRestrictedToTeamOnly() {
        let fileRequestsEmailsRestrictedToTeamOnly = mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeToDBX(
            object: object
                .fileRequestsEmailsRestrictedToTeamOnly
        )
        return DBXTeamLogEventType.factory(swift: .fileRequestsEmailsRestrictedToTeamOnly(fileRequestsEmailsRestrictedToTeamOnly.swift))
    }
    if object.isFileTransfersPolicyChanged() {
        let fileTransfersPolicyChanged = mapDBTEAMLOGFileTransfersPolicyChangedTypeToDBX(object: object.fileTransfersPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .fileTransfersPolicyChanged(fileTransfersPolicyChanged.swift))
    }
    if object.isFolderLinkRestrictionPolicyChanged() {
        let folderLinkRestrictionPolicyChanged = mapDBTEAMLOGFolderLinkRestrictionPolicyChangedTypeToDBX(object: object.folderLinkRestrictionPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .folderLinkRestrictionPolicyChanged(folderLinkRestrictionPolicyChanged.swift))
    }
    if object.isGoogleSsoChangePolicy() {
        let googleSsoChangePolicy = mapDBTEAMLOGGoogleSsoChangePolicyTypeToDBX(object: object.googleSsoChangePolicy)
        return DBXTeamLogEventType.factory(swift: .googleSsoChangePolicy(googleSsoChangePolicy.swift))
    }
    if object.isGroupUserManagementChangePolicy() {
        let groupUserManagementChangePolicy = mapDBTEAMLOGGroupUserManagementChangePolicyTypeToDBX(object: object.groupUserManagementChangePolicy)
        return DBXTeamLogEventType.factory(swift: .groupUserManagementChangePolicy(groupUserManagementChangePolicy.swift))
    }
    if object.isIntegrationPolicyChanged() {
        let integrationPolicyChanged = mapDBTEAMLOGIntegrationPolicyChangedTypeToDBX(object: object.integrationPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .integrationPolicyChanged(integrationPolicyChanged.swift))
    }
    if object.isInviteAcceptanceEmailPolicyChanged() {
        let inviteAcceptanceEmailPolicyChanged = mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedTypeToDBX(object: object.inviteAcceptanceEmailPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .inviteAcceptanceEmailPolicyChanged(inviteAcceptanceEmailPolicyChanged.swift))
    }
    if object.isMemberRequestsChangePolicy() {
        let memberRequestsChangePolicy = mapDBTEAMLOGMemberRequestsChangePolicyTypeToDBX(object: object.memberRequestsChangePolicy)
        return DBXTeamLogEventType.factory(swift: .memberRequestsChangePolicy(memberRequestsChangePolicy.swift))
    }
    if object.isMemberSendInvitePolicyChanged() {
        let memberSendInvitePolicyChanged = mapDBTEAMLOGMemberSendInvitePolicyChangedTypeToDBX(object: object.memberSendInvitePolicyChanged)
        return DBXTeamLogEventType.factory(swift: .memberSendInvitePolicyChanged(memberSendInvitePolicyChanged.swift))
    }
    if object.isMemberSpaceLimitsAddException() {
        let memberSpaceLimitsAddException = mapDBTEAMLOGMemberSpaceLimitsAddExceptionTypeToDBX(object: object.memberSpaceLimitsAddException)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsAddException(memberSpaceLimitsAddException.swift))
    }
    if object.isMemberSpaceLimitsChangeCapsTypePolicy() {
        let memberSpaceLimitsChangeCapsTypePolicy = mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeToDBX(
            object: object
                .memberSpaceLimitsChangeCapsTypePolicy
        )
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsChangeCapsTypePolicy(memberSpaceLimitsChangeCapsTypePolicy.swift))
    }
    if object.isMemberSpaceLimitsChangePolicy() {
        let memberSpaceLimitsChangePolicy = mapDBTEAMLOGMemberSpaceLimitsChangePolicyTypeToDBX(object: object.memberSpaceLimitsChangePolicy)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsChangePolicy(memberSpaceLimitsChangePolicy.swift))
    }
    if object.isMemberSpaceLimitsRemoveException() {
        let memberSpaceLimitsRemoveException = mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeToDBX(object: object.memberSpaceLimitsRemoveException)
        return DBXTeamLogEventType.factory(swift: .memberSpaceLimitsRemoveException(memberSpaceLimitsRemoveException.swift))
    }
    if object.isMemberSuggestionsChangePolicy() {
        let memberSuggestionsChangePolicy = mapDBTEAMLOGMemberSuggestionsChangePolicyTypeToDBX(object: object.memberSuggestionsChangePolicy)
        return DBXTeamLogEventType.factory(swift: .memberSuggestionsChangePolicy(memberSuggestionsChangePolicy.swift))
    }
    if object.isMicrosoftOfficeAddinChangePolicy() {
        let microsoftOfficeAddinChangePolicy = mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeToDBX(object: object.microsoftOfficeAddinChangePolicy)
        return DBXTeamLogEventType.factory(swift: .microsoftOfficeAddinChangePolicy(microsoftOfficeAddinChangePolicy.swift))
    }
    if object.isNetworkControlChangePolicy() {
        let networkControlChangePolicy = mapDBTEAMLOGNetworkControlChangePolicyTypeToDBX(object: object.networkControlChangePolicy)
        return DBXTeamLogEventType.factory(swift: .networkControlChangePolicy(networkControlChangePolicy.swift))
    }
    if object.isPaperChangeDeploymentPolicy() {
        let paperChangeDeploymentPolicy = mapDBTEAMLOGPaperChangeDeploymentPolicyTypeToDBX(object: object.paperChangeDeploymentPolicy)
        return DBXTeamLogEventType.factory(swift: .paperChangeDeploymentPolicy(paperChangeDeploymentPolicy.swift))
    }
    if object.isPaperChangeMemberLinkPolicy() {
        let paperChangeMemberLinkPolicy = mapDBTEAMLOGPaperChangeMemberLinkPolicyTypeToDBX(object: object.paperChangeMemberLinkPolicy)
        return DBXTeamLogEventType.factory(swift: .paperChangeMemberLinkPolicy(paperChangeMemberLinkPolicy.swift))
    }
    if object.isPaperChangeMemberPolicy() {
        let paperChangeMemberPolicy = mapDBTEAMLOGPaperChangeMemberPolicyTypeToDBX(object: object.paperChangeMemberPolicy)
        return DBXTeamLogEventType.factory(swift: .paperChangeMemberPolicy(paperChangeMemberPolicy.swift))
    }
    if object.isPaperChangePolicy() {
        let paperChangePolicy = mapDBTEAMLOGPaperChangePolicyTypeToDBX(object: object.paperChangePolicy)
        return DBXTeamLogEventType.factory(swift: .paperChangePolicy(paperChangePolicy.swift))
    }
    if object.isPaperDefaultFolderPolicyChanged() {
        let paperDefaultFolderPolicyChanged = mapDBTEAMLOGPaperDefaultFolderPolicyChangedTypeToDBX(object: object.paperDefaultFolderPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .paperDefaultFolderPolicyChanged(paperDefaultFolderPolicyChanged.swift))
    }
    if object.isPaperDesktopPolicyChanged() {
        let paperDesktopPolicyChanged = mapDBTEAMLOGPaperDesktopPolicyChangedTypeToDBX(object: object.paperDesktopPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .paperDesktopPolicyChanged(paperDesktopPolicyChanged.swift))
    }
    if object.isPaperEnabledUsersGroupAddition() {
        let paperEnabledUsersGroupAddition = mapDBTEAMLOGPaperEnabledUsersGroupAdditionTypeToDBX(object: object.paperEnabledUsersGroupAddition)
        return DBXTeamLogEventType.factory(swift: .paperEnabledUsersGroupAddition(paperEnabledUsersGroupAddition.swift))
    }
    if object.isPaperEnabledUsersGroupRemoval() {
        let paperEnabledUsersGroupRemoval = mapDBTEAMLOGPaperEnabledUsersGroupRemovalTypeToDBX(object: object.paperEnabledUsersGroupRemoval)
        return DBXTeamLogEventType.factory(swift: .paperEnabledUsersGroupRemoval(paperEnabledUsersGroupRemoval.swift))
    }
    if object.isPasswordStrengthRequirementsChangePolicy() {
        let passwordStrengthRequirementsChangePolicy = mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyTypeToDBX(
            object: object
                .passwordStrengthRequirementsChangePolicy
        )
        return DBXTeamLogEventType.factory(swift: .passwordStrengthRequirementsChangePolicy(passwordStrengthRequirementsChangePolicy.swift))
    }
    if object.isPermanentDeleteChangePolicy() {
        let permanentDeleteChangePolicy = mapDBTEAMLOGPermanentDeleteChangePolicyTypeToDBX(object: object.permanentDeleteChangePolicy)
        return DBXTeamLogEventType.factory(swift: .permanentDeleteChangePolicy(permanentDeleteChangePolicy.swift))
    }
    if object.isResellerSupportChangePolicy() {
        let resellerSupportChangePolicy = mapDBTEAMLOGResellerSupportChangePolicyTypeToDBX(object: object.resellerSupportChangePolicy)
        return DBXTeamLogEventType.factory(swift: .resellerSupportChangePolicy(resellerSupportChangePolicy.swift))
    }
    if object.isRewindPolicyChanged() {
        let rewindPolicyChanged = mapDBTEAMLOGRewindPolicyChangedTypeToDBX(object: object.rewindPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .rewindPolicyChanged(rewindPolicyChanged.swift))
    }
    if object.isSendForSignaturePolicyChanged() {
        let sendForSignaturePolicyChanged = mapDBTEAMLOGSendForSignaturePolicyChangedTypeToDBX(object: object.sendForSignaturePolicyChanged)
        return DBXTeamLogEventType.factory(swift: .sendForSignaturePolicyChanged(sendForSignaturePolicyChanged.swift))
    }
    if object.isSharingChangeFolderJoinPolicy() {
        let sharingChangeFolderJoinPolicy = mapDBTEAMLOGSharingChangeFolderJoinPolicyTypeToDBX(object: object.sharingChangeFolderJoinPolicy)
        return DBXTeamLogEventType.factory(swift: .sharingChangeFolderJoinPolicy(sharingChangeFolderJoinPolicy.swift))
    }
    if object.isSharingChangeLinkAllowChangeExpirationPolicy() {
        let sharingChangeLinkAllowChangeExpirationPolicy = mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyTypeToDBX(
            object: object
                .sharingChangeLinkAllowChangeExpirationPolicy
        )
        return DBXTeamLogEventType.factory(swift: .sharingChangeLinkAllowChangeExpirationPolicy(sharingChangeLinkAllowChangeExpirationPolicy.swift))
    }
    if object.isSharingChangeLinkDefaultExpirationPolicy() {
        let sharingChangeLinkDefaultExpirationPolicy = mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyTypeToDBX(
            object: object
                .sharingChangeLinkDefaultExpirationPolicy
        )
        return DBXTeamLogEventType.factory(swift: .sharingChangeLinkDefaultExpirationPolicy(sharingChangeLinkDefaultExpirationPolicy.swift))
    }
    if object.isSharingChangeLinkEnforcePasswordPolicy() {
        let sharingChangeLinkEnforcePasswordPolicy = mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyTypeToDBX(
            object: object
                .sharingChangeLinkEnforcePasswordPolicy
        )
        return DBXTeamLogEventType.factory(swift: .sharingChangeLinkEnforcePasswordPolicy(sharingChangeLinkEnforcePasswordPolicy.swift))
    }
    if object.isSharingChangeLinkPolicy() {
        let sharingChangeLinkPolicy = mapDBTEAMLOGSharingChangeLinkPolicyTypeToDBX(object: object.sharingChangeLinkPolicy)
        return DBXTeamLogEventType.factory(swift: .sharingChangeLinkPolicy(sharingChangeLinkPolicy.swift))
    }
    if object.isSharingChangeMemberPolicy() {
        let sharingChangeMemberPolicy = mapDBTEAMLOGSharingChangeMemberPolicyTypeToDBX(object: object.sharingChangeMemberPolicy)
        return DBXTeamLogEventType.factory(swift: .sharingChangeMemberPolicy(sharingChangeMemberPolicy.swift))
    }
    if object.isShowcaseChangeDownloadPolicy() {
        let showcaseChangeDownloadPolicy = mapDBTEAMLOGShowcaseChangeDownloadPolicyTypeToDBX(object: object.showcaseChangeDownloadPolicy)
        return DBXTeamLogEventType.factory(swift: .showcaseChangeDownloadPolicy(showcaseChangeDownloadPolicy.swift))
    }
    if object.isShowcaseChangeEnabledPolicy() {
        let showcaseChangeEnabledPolicy = mapDBTEAMLOGShowcaseChangeEnabledPolicyTypeToDBX(object: object.showcaseChangeEnabledPolicy)
        return DBXTeamLogEventType.factory(swift: .showcaseChangeEnabledPolicy(showcaseChangeEnabledPolicy.swift))
    }
    if object.isShowcaseChangeExternalSharingPolicy() {
        let showcaseChangeExternalSharingPolicy = mapDBTEAMLOGShowcaseChangeExternalSharingPolicyTypeToDBX(object: object.showcaseChangeExternalSharingPolicy)
        return DBXTeamLogEventType.factory(swift: .showcaseChangeExternalSharingPolicy(showcaseChangeExternalSharingPolicy.swift))
    }
    if object.isSmarterSmartSyncPolicyChanged() {
        let smarterSmartSyncPolicyChanged = mapDBTEAMLOGSmarterSmartSyncPolicyChangedTypeToDBX(object: object.smarterSmartSyncPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .smarterSmartSyncPolicyChanged(smarterSmartSyncPolicyChanged.swift))
    }
    if object.isSmartSyncChangePolicy() {
        let smartSyncChangePolicy = mapDBTEAMLOGSmartSyncChangePolicyTypeToDBX(object: object.smartSyncChangePolicy)
        return DBXTeamLogEventType.factory(swift: .smartSyncChangePolicy(smartSyncChangePolicy.swift))
    }
    if object.isSmartSyncNotOptOut() {
        let smartSyncNotOptOut = mapDBTEAMLOGSmartSyncNotOptOutTypeToDBX(object: object.smartSyncNotOptOut)
        return DBXTeamLogEventType.factory(swift: .smartSyncNotOptOut(smartSyncNotOptOut.swift))
    }
    if object.isSmartSyncOptOut() {
        let smartSyncOptOut = mapDBTEAMLOGSmartSyncOptOutTypeToDBX(object: object.smartSyncOptOut)
        return DBXTeamLogEventType.factory(swift: .smartSyncOptOut(smartSyncOptOut.swift))
    }
    if object.isSsoChangePolicy() {
        let ssoChangePolicy = mapDBTEAMLOGSsoChangePolicyTypeToDBX(object: object.ssoChangePolicy)
        return DBXTeamLogEventType.factory(swift: .ssoChangePolicy(ssoChangePolicy.swift))
    }
    if object.isTeamBrandingPolicyChanged() {
        let teamBrandingPolicyChanged = mapDBTEAMLOGTeamBrandingPolicyChangedTypeToDBX(object: object.teamBrandingPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .teamBrandingPolicyChanged(teamBrandingPolicyChanged.swift))
    }
    if object.isTeamExtensionsPolicyChanged() {
        let teamExtensionsPolicyChanged = mapDBTEAMLOGTeamExtensionsPolicyChangedTypeToDBX(object: object.teamExtensionsPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .teamExtensionsPolicyChanged(teamExtensionsPolicyChanged.swift))
    }
    if object.isTeamSelectiveSyncPolicyChanged() {
        let teamSelectiveSyncPolicyChanged = mapDBTEAMLOGTeamSelectiveSyncPolicyChangedTypeToDBX(object: object.teamSelectiveSyncPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .teamSelectiveSyncPolicyChanged(teamSelectiveSyncPolicyChanged.swift))
    }
    if object.isTeamSharingWhitelistSubjectsChanged() {
        let teamSharingWhitelistSubjectsChanged = mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedTypeToDBX(object: object.teamSharingWhitelistSubjectsChanged)
        return DBXTeamLogEventType.factory(swift: .teamSharingWhitelistSubjectsChanged(teamSharingWhitelistSubjectsChanged.swift))
    }
    if object.isTfaAddException() {
        let tfaAddException = mapDBTEAMLOGTfaAddExceptionTypeToDBX(object: object.tfaAddException)
        return DBXTeamLogEventType.factory(swift: .tfaAddException(tfaAddException.swift))
    }
    if object.isTfaChangePolicy() {
        let tfaChangePolicy = mapDBTEAMLOGTfaChangePolicyTypeToDBX(object: object.tfaChangePolicy)
        return DBXTeamLogEventType.factory(swift: .tfaChangePolicy(tfaChangePolicy.swift))
    }
    if object.isTfaRemoveException() {
        let tfaRemoveException = mapDBTEAMLOGTfaRemoveExceptionTypeToDBX(object: object.tfaRemoveException)
        return DBXTeamLogEventType.factory(swift: .tfaRemoveException(tfaRemoveException.swift))
    }
    if object.isTwoAccountChangePolicy() {
        let twoAccountChangePolicy = mapDBTEAMLOGTwoAccountChangePolicyTypeToDBX(object: object.twoAccountChangePolicy)
        return DBXTeamLogEventType.factory(swift: .twoAccountChangePolicy(twoAccountChangePolicy.swift))
    }
    if object.isViewerInfoPolicyChanged() {
        let viewerInfoPolicyChanged = mapDBTEAMLOGViewerInfoPolicyChangedTypeToDBX(object: object.viewerInfoPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .viewerInfoPolicyChanged(viewerInfoPolicyChanged.swift))
    }
    if object.isWatermarkingPolicyChanged() {
        let watermarkingPolicyChanged = mapDBTEAMLOGWatermarkingPolicyChangedTypeToDBX(object: object.watermarkingPolicyChanged)
        return DBXTeamLogEventType.factory(swift: .watermarkingPolicyChanged(watermarkingPolicyChanged.swift))
    }
    if object.isWebSessionsChangeActiveSessionLimit() {
        let webSessionsChangeActiveSessionLimit = mapDBTEAMLOGWebSessionsChangeActiveSessionLimitTypeToDBX(object: object.webSessionsChangeActiveSessionLimit)
        return DBXTeamLogEventType.factory(swift: .webSessionsChangeActiveSessionLimit(webSessionsChangeActiveSessionLimit.swift))
    }
    if object.isWebSessionsChangeFixedLengthPolicy() {
        let webSessionsChangeFixedLengthPolicy = mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeToDBX(object: object.webSessionsChangeFixedLengthPolicy)
        return DBXTeamLogEventType.factory(swift: .webSessionsChangeFixedLengthPolicy(webSessionsChangeFixedLengthPolicy.swift))
    }
    if object.isWebSessionsChangeIdleLengthPolicy() {
        let webSessionsChangeIdleLengthPolicy = mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeToDBX(object: object.webSessionsChangeIdleLengthPolicy)
        return DBXTeamLogEventType.factory(swift: .webSessionsChangeIdleLengthPolicy(webSessionsChangeIdleLengthPolicy.swift))
    }
    if object.isDataResidencyMigrationRequestSuccessful() {
        let dataResidencyMigrationRequestSuccessful = mapDBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeToDBX(
            object: object
                .dataResidencyMigrationRequestSuccessful
        )
        return DBXTeamLogEventType.factory(swift: .dataResidencyMigrationRequestSuccessful(dataResidencyMigrationRequestSuccessful.swift))
    }
    if object.isDataResidencyMigrationRequestUnsuccessful() {
        let dataResidencyMigrationRequestUnsuccessful = mapDBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeToDBX(
            object: object
                .dataResidencyMigrationRequestUnsuccessful
        )
        return DBXTeamLogEventType.factory(swift: .dataResidencyMigrationRequestUnsuccessful(dataResidencyMigrationRequestUnsuccessful.swift))
    }
    if object.isTeamMergeFrom() {
        let teamMergeFrom = mapDBTEAMLOGTeamMergeFromTypeToDBX(object: object.teamMergeFrom)
        return DBXTeamLogEventType.factory(swift: .teamMergeFrom(teamMergeFrom.swift))
    }
    if object.isTeamMergeTo() {
        let teamMergeTo = mapDBTEAMLOGTeamMergeToTypeToDBX(object: object.teamMergeTo)
        return DBXTeamLogEventType.factory(swift: .teamMergeTo(teamMergeTo.swift))
    }
    if object.isTeamProfileAddBackground() {
        let teamProfileAddBackground = mapDBTEAMLOGTeamProfileAddBackgroundTypeToDBX(object: object.teamProfileAddBackground)
        return DBXTeamLogEventType.factory(swift: .teamProfileAddBackground(teamProfileAddBackground.swift))
    }
    if object.isTeamProfileAddLogo() {
        let teamProfileAddLogo = mapDBTEAMLOGTeamProfileAddLogoTypeToDBX(object: object.teamProfileAddLogo)
        return DBXTeamLogEventType.factory(swift: .teamProfileAddLogo(teamProfileAddLogo.swift))
    }
    if object.isTeamProfileChangeBackground() {
        let teamProfileChangeBackground = mapDBTEAMLOGTeamProfileChangeBackgroundTypeToDBX(object: object.teamProfileChangeBackground)
        return DBXTeamLogEventType.factory(swift: .teamProfileChangeBackground(teamProfileChangeBackground.swift))
    }
    if object.isTeamProfileChangeDefaultLanguage() {
        let teamProfileChangeDefaultLanguage = mapDBTEAMLOGTeamProfileChangeDefaultLanguageTypeToDBX(object: object.teamProfileChangeDefaultLanguage)
        return DBXTeamLogEventType.factory(swift: .teamProfileChangeDefaultLanguage(teamProfileChangeDefaultLanguage.swift))
    }
    if object.isTeamProfileChangeLogo() {
        let teamProfileChangeLogo = mapDBTEAMLOGTeamProfileChangeLogoTypeToDBX(object: object.teamProfileChangeLogo)
        return DBXTeamLogEventType.factory(swift: .teamProfileChangeLogo(teamProfileChangeLogo.swift))
    }
    if object.isTeamProfileChangeName() {
        let teamProfileChangeName = mapDBTEAMLOGTeamProfileChangeNameTypeToDBX(object: object.teamProfileChangeName)
        return DBXTeamLogEventType.factory(swift: .teamProfileChangeName(teamProfileChangeName.swift))
    }
    if object.isTeamProfileRemoveBackground() {
        let teamProfileRemoveBackground = mapDBTEAMLOGTeamProfileRemoveBackgroundTypeToDBX(object: object.teamProfileRemoveBackground)
        return DBXTeamLogEventType.factory(swift: .teamProfileRemoveBackground(teamProfileRemoveBackground.swift))
    }
    if object.isTeamProfileRemoveLogo() {
        let teamProfileRemoveLogo = mapDBTEAMLOGTeamProfileRemoveLogoTypeToDBX(object: object.teamProfileRemoveLogo)
        return DBXTeamLogEventType.factory(swift: .teamProfileRemoveLogo(teamProfileRemoveLogo.swift))
    }
    if object.isTfaAddBackupPhone() {
        let tfaAddBackupPhone = mapDBTEAMLOGTfaAddBackupPhoneTypeToDBX(object: object.tfaAddBackupPhone)
        return DBXTeamLogEventType.factory(swift: .tfaAddBackupPhone(tfaAddBackupPhone.swift))
    }
    if object.isTfaAddSecurityKey() {
        let tfaAddSecurityKey = mapDBTEAMLOGTfaAddSecurityKeyTypeToDBX(object: object.tfaAddSecurityKey)
        return DBXTeamLogEventType.factory(swift: .tfaAddSecurityKey(tfaAddSecurityKey.swift))
    }
    if object.isTfaChangeBackupPhone() {
        let tfaChangeBackupPhone = mapDBTEAMLOGTfaChangeBackupPhoneTypeToDBX(object: object.tfaChangeBackupPhone)
        return DBXTeamLogEventType.factory(swift: .tfaChangeBackupPhone(tfaChangeBackupPhone.swift))
    }
    if object.isTfaChangeStatus() {
        let tfaChangeStatus = mapDBTEAMLOGTfaChangeStatusTypeToDBX(object: object.tfaChangeStatus)
        return DBXTeamLogEventType.factory(swift: .tfaChangeStatus(tfaChangeStatus.swift))
    }
    if object.isTfaRemoveBackupPhone() {
        let tfaRemoveBackupPhone = mapDBTEAMLOGTfaRemoveBackupPhoneTypeToDBX(object: object.tfaRemoveBackupPhone)
        return DBXTeamLogEventType.factory(swift: .tfaRemoveBackupPhone(tfaRemoveBackupPhone.swift))
    }
    if object.isTfaRemoveSecurityKey() {
        let tfaRemoveSecurityKey = mapDBTEAMLOGTfaRemoveSecurityKeyTypeToDBX(object: object.tfaRemoveSecurityKey)
        return DBXTeamLogEventType.factory(swift: .tfaRemoveSecurityKey(tfaRemoveSecurityKey.swift))
    }
    if object.isTfaReset() {
        let tfaReset = mapDBTEAMLOGTfaResetTypeToDBX(object: object.tfaReset)
        return DBXTeamLogEventType.factory(swift: .tfaReset(tfaReset.swift))
    }
    if object.isChangedEnterpriseAdminRole() {
        let changedEnterpriseAdminRole = mapDBTEAMLOGChangedEnterpriseAdminRoleTypeToDBX(object: object.changedEnterpriseAdminRole)
        return DBXTeamLogEventType.factory(swift: .changedEnterpriseAdminRole(changedEnterpriseAdminRole.swift))
    }
    if object.isChangedEnterpriseConnectedTeamStatus() {
        let changedEnterpriseConnectedTeamStatus = mapDBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeToDBX(
            object: object
                .changedEnterpriseConnectedTeamStatus
        )
        return DBXTeamLogEventType.factory(swift: .changedEnterpriseConnectedTeamStatus(changedEnterpriseConnectedTeamStatus.swift))
    }
    if object.isEndedEnterpriseAdminSession() {
        let endedEnterpriseAdminSession = mapDBTEAMLOGEndedEnterpriseAdminSessionTypeToDBX(object: object.endedEnterpriseAdminSession)
        return DBXTeamLogEventType.factory(swift: .endedEnterpriseAdminSession(endedEnterpriseAdminSession.swift))
    }
    if object.isEndedEnterpriseAdminSessionDeprecated() {
        let endedEnterpriseAdminSessionDeprecated = mapDBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeToDBX(
            object: object
                .endedEnterpriseAdminSessionDeprecated
        )
        return DBXTeamLogEventType.factory(swift: .endedEnterpriseAdminSessionDeprecated(endedEnterpriseAdminSessionDeprecated.swift))
    }
    if object.isEnterpriseSettingsLocking() {
        let enterpriseSettingsLocking = mapDBTEAMLOGEnterpriseSettingsLockingTypeToDBX(object: object.enterpriseSettingsLocking)
        return DBXTeamLogEventType.factory(swift: .enterpriseSettingsLocking(enterpriseSettingsLocking.swift))
    }
    if object.isGuestAdminChangeStatus() {
        let guestAdminChangeStatus = mapDBTEAMLOGGuestAdminChangeStatusTypeToDBX(object: object.guestAdminChangeStatus)
        return DBXTeamLogEventType.factory(swift: .guestAdminChangeStatus(guestAdminChangeStatus.swift))
    }
    if object.isStartedEnterpriseAdminSession() {
        let startedEnterpriseAdminSession = mapDBTEAMLOGStartedEnterpriseAdminSessionTypeToDBX(object: object.startedEnterpriseAdminSession)
        return DBXTeamLogEventType.factory(swift: .startedEnterpriseAdminSession(startedEnterpriseAdminSession.swift))
    }
    if object.isTeamMergeRequestAccepted() {
        let teamMergeRequestAccepted = mapDBTEAMLOGTeamMergeRequestAcceptedTypeToDBX(object: object.teamMergeRequestAccepted)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestAccepted(teamMergeRequestAccepted.swift))
    }
    if object.isTeamMergeRequestAcceptedShownToPrimaryTeam() {
        let teamMergeRequestAcceptedShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestAcceptedShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestAcceptedShownToPrimaryTeam(teamMergeRequestAcceptedShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestAcceptedShownToSecondaryTeam() {
        let teamMergeRequestAcceptedShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestAcceptedShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestAcceptedShownToSecondaryTeam(teamMergeRequestAcceptedShownToSecondaryTeam.swift))
    }
    if object.isTeamMergeRequestAutoCanceled() {
        let teamMergeRequestAutoCanceled = mapDBTEAMLOGTeamMergeRequestAutoCanceledTypeToDBX(object: object.teamMergeRequestAutoCanceled)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestAutoCanceled(teamMergeRequestAutoCanceled.swift))
    }
    if object.isTeamMergeRequestCanceled() {
        let teamMergeRequestCanceled = mapDBTEAMLOGTeamMergeRequestCanceledTypeToDBX(object: object.teamMergeRequestCanceled)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestCanceled(teamMergeRequestCanceled.swift))
    }
    if object.isTeamMergeRequestCanceledShownToPrimaryTeam() {
        let teamMergeRequestCanceledShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestCanceledShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestCanceledShownToPrimaryTeam(teamMergeRequestCanceledShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestCanceledShownToSecondaryTeam() {
        let teamMergeRequestCanceledShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestCanceledShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestCanceledShownToSecondaryTeam(teamMergeRequestCanceledShownToSecondaryTeam.swift))
    }
    if object.isTeamMergeRequestExpired() {
        let teamMergeRequestExpired = mapDBTEAMLOGTeamMergeRequestExpiredTypeToDBX(object: object.teamMergeRequestExpired)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestExpired(teamMergeRequestExpired.swift))
    }
    if object.isTeamMergeRequestExpiredShownToPrimaryTeam() {
        let teamMergeRequestExpiredShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestExpiredShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestExpiredShownToPrimaryTeam(teamMergeRequestExpiredShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestExpiredShownToSecondaryTeam() {
        let teamMergeRequestExpiredShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestExpiredShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestExpiredShownToSecondaryTeam(teamMergeRequestExpiredShownToSecondaryTeam.swift))
    }
    if object.isTeamMergeRequestRejectedShownToPrimaryTeam() {
        let teamMergeRequestRejectedShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestRejectedShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestRejectedShownToPrimaryTeam(teamMergeRequestRejectedShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestRejectedShownToSecondaryTeam() {
        let teamMergeRequestRejectedShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestRejectedShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestRejectedShownToSecondaryTeam(teamMergeRequestRejectedShownToSecondaryTeam.swift))
    }
    if object.isTeamMergeRequestReminder() {
        let teamMergeRequestReminder = mapDBTEAMLOGTeamMergeRequestReminderTypeToDBX(object: object.teamMergeRequestReminder)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestReminder(teamMergeRequestReminder.swift))
    }
    if object.isTeamMergeRequestReminderShownToPrimaryTeam() {
        let teamMergeRequestReminderShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestReminderShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestReminderShownToPrimaryTeam(teamMergeRequestReminderShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestReminderShownToSecondaryTeam() {
        let teamMergeRequestReminderShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestReminderShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestReminderShownToSecondaryTeam(teamMergeRequestReminderShownToSecondaryTeam.swift))
    }
    if object.isTeamMergeRequestRevoked() {
        let teamMergeRequestRevoked = mapDBTEAMLOGTeamMergeRequestRevokedTypeToDBX(object: object.teamMergeRequestRevoked)
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestRevoked(teamMergeRequestRevoked.swift))
    }
    if object.isTeamMergeRequestSentShownToPrimaryTeam() {
        let teamMergeRequestSentShownToPrimaryTeam = mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamTypeToDBX(
            object: object
                .teamMergeRequestSentShownToPrimaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestSentShownToPrimaryTeam(teamMergeRequestSentShownToPrimaryTeam.swift))
    }
    if object.isTeamMergeRequestSentShownToSecondaryTeam() {
        let teamMergeRequestSentShownToSecondaryTeam = mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamTypeToDBX(
            object: object
                .teamMergeRequestSentShownToSecondaryTeam
        )
        return DBXTeamLogEventType.factory(swift: .teamMergeRequestSentShownToSecondaryTeam(teamMergeRequestSentShownToSecondaryTeam.swift))
    }
    if object.isOther() {
        return DBXTeamLogEventTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGEventTypeArgToDBXOptional(object: DBTEAMLOGEventTypeArg?) -> DBXTeamLogEventTypeArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGEventTypeArgToDBX(object: object)
}

func mapDBTEAMLOGEventTypeArgToDBX(object: DBTEAMLOGEventTypeArg) -> DBXTeamLogEventTypeArg {
    if object.isAdminAlertingAlertStateChanged() {
        return DBXTeamLogEventTypeArgAdminAlertingAlertStateChanged()
    }
    if object.isAdminAlertingChangedAlertConfig() {
        return DBXTeamLogEventTypeArgAdminAlertingChangedAlertConfig()
    }
    if object.isAdminAlertingTriggeredAlert() {
        return DBXTeamLogEventTypeArgAdminAlertingTriggeredAlert()
    }
    if object.isRansomwareRestoreProcessCompleted() {
        return DBXTeamLogEventTypeArgRansomwareRestoreProcessCompleted()
    }
    if object.isRansomwareRestoreProcessStarted() {
        return DBXTeamLogEventTypeArgRansomwareRestoreProcessStarted()
    }
    if object.isAppBlockedByPermissions() {
        return DBXTeamLogEventTypeArgAppBlockedByPermissions()
    }
    if object.isAppLinkTeam() {
        return DBXTeamLogEventTypeArgAppLinkTeam()
    }
    if object.isAppLinkUser() {
        return DBXTeamLogEventTypeArgAppLinkUser()
    }
    if object.isAppUnlinkTeam() {
        return DBXTeamLogEventTypeArgAppUnlinkTeam()
    }
    if object.isAppUnlinkUser() {
        return DBXTeamLogEventTypeArgAppUnlinkUser()
    }
    if object.isIntegrationConnected() {
        return DBXTeamLogEventTypeArgIntegrationConnected()
    }
    if object.isIntegrationDisconnected() {
        return DBXTeamLogEventTypeArgIntegrationDisconnected()
    }
    if object.isFileAddComment() {
        return DBXTeamLogEventTypeArgFileAddComment()
    }
    if object.isFileChangeCommentSubscription() {
        return DBXTeamLogEventTypeArgFileChangeCommentSubscription()
    }
    if object.isFileDeleteComment() {
        return DBXTeamLogEventTypeArgFileDeleteComment()
    }
    if object.isFileEditComment() {
        return DBXTeamLogEventTypeArgFileEditComment()
    }
    if object.isFileLikeComment() {
        return DBXTeamLogEventTypeArgFileLikeComment()
    }
    if object.isFileResolveComment() {
        return DBXTeamLogEventTypeArgFileResolveComment()
    }
    if object.isFileUnlikeComment() {
        return DBXTeamLogEventTypeArgFileUnlikeComment()
    }
    if object.isFileUnresolveComment() {
        return DBXTeamLogEventTypeArgFileUnresolveComment()
    }
    if object.isGovernancePolicyAddFolders() {
        return DBXTeamLogEventTypeArgGovernancePolicyAddFolders()
    }
    if object.isGovernancePolicyAddFolderFailed() {
        return DBXTeamLogEventTypeArgGovernancePolicyAddFolderFailed()
    }
    if object.isGovernancePolicyContentDisposed() {
        return DBXTeamLogEventTypeArgGovernancePolicyContentDisposed()
    }
    if object.isGovernancePolicyCreate() {
        return DBXTeamLogEventTypeArgGovernancePolicyCreate()
    }
    if object.isGovernancePolicyDelete() {
        return DBXTeamLogEventTypeArgGovernancePolicyDelete()
    }
    if object.isGovernancePolicyEditDetails() {
        return DBXTeamLogEventTypeArgGovernancePolicyEditDetails()
    }
    if object.isGovernancePolicyEditDuration() {
        return DBXTeamLogEventTypeArgGovernancePolicyEditDuration()
    }
    if object.isGovernancePolicyExportCreated() {
        return DBXTeamLogEventTypeArgGovernancePolicyExportCreated()
    }
    if object.isGovernancePolicyExportRemoved() {
        return DBXTeamLogEventTypeArgGovernancePolicyExportRemoved()
    }
    if object.isGovernancePolicyRemoveFolders() {
        return DBXTeamLogEventTypeArgGovernancePolicyRemoveFolders()
    }
    if object.isGovernancePolicyReportCreated() {
        return DBXTeamLogEventTypeArgGovernancePolicyReportCreated()
    }
    if object.isGovernancePolicyZipPartDownloaded() {
        return DBXTeamLogEventTypeArgGovernancePolicyZipPartDownloaded()
    }
    if object.isLegalHoldsActivateAHold() {
        return DBXTeamLogEventTypeArgLegalHoldsActivateAHold()
    }
    if object.isLegalHoldsAddMembers() {
        return DBXTeamLogEventTypeArgLegalHoldsAddMembers()
    }
    if object.isLegalHoldsChangeHoldDetails() {
        return DBXTeamLogEventTypeArgLegalHoldsChangeHoldDetails()
    }
    if object.isLegalHoldsChangeHoldName() {
        return DBXTeamLogEventTypeArgLegalHoldsChangeHoldName()
    }
    if object.isLegalHoldsExportAHold() {
        return DBXTeamLogEventTypeArgLegalHoldsExportAHold()
    }
    if object.isLegalHoldsExportCancelled() {
        return DBXTeamLogEventTypeArgLegalHoldsExportCancelled()
    }
    if object.isLegalHoldsExportDownloaded() {
        return DBXTeamLogEventTypeArgLegalHoldsExportDownloaded()
    }
    if object.isLegalHoldsExportRemoved() {
        return DBXTeamLogEventTypeArgLegalHoldsExportRemoved()
    }
    if object.isLegalHoldsReleaseAHold() {
        return DBXTeamLogEventTypeArgLegalHoldsReleaseAHold()
    }
    if object.isLegalHoldsRemoveMembers() {
        return DBXTeamLogEventTypeArgLegalHoldsRemoveMembers()
    }
    if object.isLegalHoldsReportAHold() {
        return DBXTeamLogEventTypeArgLegalHoldsReportAHold()
    }
    if object.isDeviceChangeIpDesktop() {
        return DBXTeamLogEventTypeArgDeviceChangeIpDesktop()
    }
    if object.isDeviceChangeIpMobile() {
        return DBXTeamLogEventTypeArgDeviceChangeIpMobile()
    }
    if object.isDeviceChangeIpWeb() {
        return DBXTeamLogEventTypeArgDeviceChangeIpWeb()
    }
    if object.isDeviceDeleteOnUnlinkFail() {
        return DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkFail()
    }
    if object.isDeviceDeleteOnUnlinkSuccess() {
        return DBXTeamLogEventTypeArgDeviceDeleteOnUnlinkSuccess()
    }
    if object.isDeviceLinkFail() {
        return DBXTeamLogEventTypeArgDeviceLinkFail()
    }
    if object.isDeviceLinkSuccess() {
        return DBXTeamLogEventTypeArgDeviceLinkSuccess()
    }
    if object.isDeviceManagementDisabled() {
        return DBXTeamLogEventTypeArgDeviceManagementDisabled()
    }
    if object.isDeviceManagementEnabled() {
        return DBXTeamLogEventTypeArgDeviceManagementEnabled()
    }
    if object.isDeviceSyncBackupStatusChanged() {
        return DBXTeamLogEventTypeArgDeviceSyncBackupStatusChanged()
    }
    if object.isDeviceUnlink() {
        return DBXTeamLogEventTypeArgDeviceUnlink()
    }
    if object.isDropboxPasswordsExported() {
        return DBXTeamLogEventTypeArgDropboxPasswordsExported()
    }
    if object.isDropboxPasswordsNewDeviceEnrolled() {
        return DBXTeamLogEventTypeArgDropboxPasswordsNewDeviceEnrolled()
    }
    if object.isEmmRefreshAuthToken() {
        return DBXTeamLogEventTypeArgEmmRefreshAuthToken()
    }
    if object.isExternalDriveBackupEligibilityStatusChecked() {
        return DBXTeamLogEventTypeArgExternalDriveBackupEligibilityStatusChecked()
    }
    if object.isExternalDriveBackupStatusChanged() {
        return DBXTeamLogEventTypeArgExternalDriveBackupStatusChanged()
    }
    if object.isAccountCaptureChangeAvailability() {
        return DBXTeamLogEventTypeArgAccountCaptureChangeAvailability()
    }
    if object.isAccountCaptureMigrateAccount() {
        return DBXTeamLogEventTypeArgAccountCaptureMigrateAccount()
    }
    if object.isAccountCaptureNotificationEmailsSent() {
        return DBXTeamLogEventTypeArgAccountCaptureNotificationEmailsSent()
    }
    if object.isAccountCaptureRelinquishAccount() {
        return DBXTeamLogEventTypeArgAccountCaptureRelinquishAccount()
    }
    if object.isDisabledDomainInvites() {
        return DBXTeamLogEventTypeArgDisabledDomainInvites()
    }
    if object.isDomainInvitesApproveRequestToJoinTeam() {
        return DBXTeamLogEventTypeArgDomainInvitesApproveRequestToJoinTeam()
    }
    if object.isDomainInvitesDeclineRequestToJoinTeam() {
        return DBXTeamLogEventTypeArgDomainInvitesDeclineRequestToJoinTeam()
    }
    if object.isDomainInvitesEmailExistingUsers() {
        return DBXTeamLogEventTypeArgDomainInvitesEmailExistingUsers()
    }
    if object.isDomainInvitesRequestToJoinTeam() {
        return DBXTeamLogEventTypeArgDomainInvitesRequestToJoinTeam()
    }
    if object.isDomainInvitesSetInviteNewUserPrefToNo() {
        return DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToNo()
    }
    if object.isDomainInvitesSetInviteNewUserPrefToYes() {
        return DBXTeamLogEventTypeArgDomainInvitesSetInviteNewUserPrefToYes()
    }
    if object.isDomainVerificationAddDomainFail() {
        return DBXTeamLogEventTypeArgDomainVerificationAddDomainFail()
    }
    if object.isDomainVerificationAddDomainSuccess() {
        return DBXTeamLogEventTypeArgDomainVerificationAddDomainSuccess()
    }
    if object.isDomainVerificationRemoveDomain() {
        return DBXTeamLogEventTypeArgDomainVerificationRemoveDomain()
    }
    if object.isEnabledDomainInvites() {
        return DBXTeamLogEventTypeArgEnabledDomainInvites()
    }
    if object.isTeamEncryptionKeyCancelKeyDeletion() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyCancelKeyDeletion()
    }
    if object.isTeamEncryptionKeyCreateKey() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyCreateKey()
    }
    if object.isTeamEncryptionKeyDeleteKey() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyDeleteKey()
    }
    if object.isTeamEncryptionKeyDisableKey() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyDisableKey()
    }
    if object.isTeamEncryptionKeyEnableKey() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyEnableKey()
    }
    if object.isTeamEncryptionKeyRotateKey() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyRotateKey()
    }
    if object.isTeamEncryptionKeyScheduleKeyDeletion() {
        return DBXTeamLogEventTypeArgTeamEncryptionKeyScheduleKeyDeletion()
    }
    if object.isApplyNamingConvention() {
        return DBXTeamLogEventTypeArgApplyNamingConvention()
    }
    if object.isCreateFolder() {
        return DBXTeamLogEventTypeArgCreateFolder()
    }
    if object.isFileAdd() {
        return DBXTeamLogEventTypeArgFileAdd()
    }
    if object.isFileAddFromAutomation() {
        return DBXTeamLogEventTypeArgFileAddFromAutomation()
    }
    if object.isFileCopy() {
        return DBXTeamLogEventTypeArgFileCopy()
    }
    if object.isFileDelete() {
        return DBXTeamLogEventTypeArgFileDelete()
    }
    if object.isFileDownload() {
        return DBXTeamLogEventTypeArgFileDownload()
    }
    if object.isFileEdit() {
        return DBXTeamLogEventTypeArgFileEdit()
    }
    if object.isFileGetCopyReference() {
        return DBXTeamLogEventTypeArgFileGetCopyReference()
    }
    if object.isFileLockingLockStatusChanged() {
        return DBXTeamLogEventTypeArgFileLockingLockStatusChanged()
    }
    if object.isFileMove() {
        return DBXTeamLogEventTypeArgFileMove()
    }
    if object.isFilePermanentlyDelete() {
        return DBXTeamLogEventTypeArgFilePermanentlyDelete()
    }
    if object.isFilePreview() {
        return DBXTeamLogEventTypeArgFilePreview()
    }
    if object.isFileRename() {
        return DBXTeamLogEventTypeArgFileRename()
    }
    if object.isFileRestore() {
        return DBXTeamLogEventTypeArgFileRestore()
    }
    if object.isFileRevert() {
        return DBXTeamLogEventTypeArgFileRevert()
    }
    if object.isFileRollbackChanges() {
        return DBXTeamLogEventTypeArgFileRollbackChanges()
    }
    if object.isFileSaveCopyReference() {
        return DBXTeamLogEventTypeArgFileSaveCopyReference()
    }
    if object.isFolderOverviewDescriptionChanged() {
        return DBXTeamLogEventTypeArgFolderOverviewDescriptionChanged()
    }
    if object.isFolderOverviewItemPinned() {
        return DBXTeamLogEventTypeArgFolderOverviewItemPinned()
    }
    if object.isFolderOverviewItemUnpinned() {
        return DBXTeamLogEventTypeArgFolderOverviewItemUnpinned()
    }
    if object.isObjectLabelAdded() {
        return DBXTeamLogEventTypeArgObjectLabelAdded()
    }
    if object.isObjectLabelRemoved() {
        return DBXTeamLogEventTypeArgObjectLabelRemoved()
    }
    if object.isObjectLabelUpdatedValue() {
        return DBXTeamLogEventTypeArgObjectLabelUpdatedValue()
    }
    if object.isOrganizeFolderWithTidy() {
        return DBXTeamLogEventTypeArgOrganizeFolderWithTidy()
    }
    if object.isReplayFileDelete() {
        return DBXTeamLogEventTypeArgReplayFileDelete()
    }
    if object.isRewindFolder() {
        return DBXTeamLogEventTypeArgRewindFolder()
    }
    if object.isUndoNamingConvention() {
        return DBXTeamLogEventTypeArgUndoNamingConvention()
    }
    if object.isUndoOrganizeFolderWithTidy() {
        return DBXTeamLogEventTypeArgUndoOrganizeFolderWithTidy()
    }
    if object.isUserTagsAdded() {
        return DBXTeamLogEventTypeArgUserTagsAdded()
    }
    if object.isUserTagsRemoved() {
        return DBXTeamLogEventTypeArgUserTagsRemoved()
    }
    if object.isEmailIngestReceiveFile() {
        return DBXTeamLogEventTypeArgEmailIngestReceiveFile()
    }
    if object.isFileRequestChange() {
        return DBXTeamLogEventTypeArgFileRequestChange()
    }
    if object.isFileRequestClose() {
        return DBXTeamLogEventTypeArgFileRequestClose()
    }
    if object.isFileRequestCreate() {
        return DBXTeamLogEventTypeArgFileRequestCreate()
    }
    if object.isFileRequestDelete() {
        return DBXTeamLogEventTypeArgFileRequestDelete()
    }
    if object.isFileRequestReceiveFile() {
        return DBXTeamLogEventTypeArgFileRequestReceiveFile()
    }
    if object.isGroupAddExternalId() {
        return DBXTeamLogEventTypeArgGroupAddExternalId()
    }
    if object.isGroupAddMember() {
        return DBXTeamLogEventTypeArgGroupAddMember()
    }
    if object.isGroupChangeExternalId() {
        return DBXTeamLogEventTypeArgGroupChangeExternalId()
    }
    if object.isGroupChangeManagementType() {
        return DBXTeamLogEventTypeArgGroupChangeManagementType()
    }
    if object.isGroupChangeMemberRole() {
        return DBXTeamLogEventTypeArgGroupChangeMemberRole()
    }
    if object.isGroupCreate() {
        return DBXTeamLogEventTypeArgGroupCreate()
    }
    if object.isGroupDelete() {
        return DBXTeamLogEventTypeArgGroupDelete()
    }
    if object.isGroupDescriptionUpdated() {
        return DBXTeamLogEventTypeArgGroupDescriptionUpdated()
    }
    if object.isGroupJoinPolicyUpdated() {
        return DBXTeamLogEventTypeArgGroupJoinPolicyUpdated()
    }
    if object.isGroupMoved() {
        return DBXTeamLogEventTypeArgGroupMoved()
    }
    if object.isGroupRemoveExternalId() {
        return DBXTeamLogEventTypeArgGroupRemoveExternalId()
    }
    if object.isGroupRemoveMember() {
        return DBXTeamLogEventTypeArgGroupRemoveMember()
    }
    if object.isGroupRename() {
        return DBXTeamLogEventTypeArgGroupRename()
    }
    if object.isAccountLockOrUnlocked() {
        return DBXTeamLogEventTypeArgAccountLockOrUnlocked()
    }
    if object.isEmmError() {
        return DBXTeamLogEventTypeArgEmmError()
    }
    if object.isGuestAdminSignedInViaTrustedTeams() {
        return DBXTeamLogEventTypeArgGuestAdminSignedInViaTrustedTeams()
    }
    if object.isGuestAdminSignedOutViaTrustedTeams() {
        return DBXTeamLogEventTypeArgGuestAdminSignedOutViaTrustedTeams()
    }
    if object.isLoginFail() {
        return DBXTeamLogEventTypeArgLoginFail()
    }
    if object.isLoginSuccess() {
        return DBXTeamLogEventTypeArgLoginSuccess()
    }
    if object.isLogout() {
        return DBXTeamLogEventTypeArgLogout()
    }
    if object.isResellerSupportSessionEnd() {
        return DBXTeamLogEventTypeArgResellerSupportSessionEnd()
    }
    if object.isResellerSupportSessionStart() {
        return DBXTeamLogEventTypeArgResellerSupportSessionStart()
    }
    if object.isSignInAsSessionEnd() {
        return DBXTeamLogEventTypeArgSignInAsSessionEnd()
    }
    if object.isSignInAsSessionStart() {
        return DBXTeamLogEventTypeArgSignInAsSessionStart()
    }
    if object.isSsoError() {
        return DBXTeamLogEventTypeArgSsoError()
    }
    if object.isBackupAdminInvitationSent() {
        return DBXTeamLogEventTypeArgBackupAdminInvitationSent()
    }
    if object.isBackupInvitationOpened() {
        return DBXTeamLogEventTypeArgBackupInvitationOpened()
    }
    if object.isCreateTeamInviteLink() {
        return DBXTeamLogEventTypeArgCreateTeamInviteLink()
    }
    if object.isDeleteTeamInviteLink() {
        return DBXTeamLogEventTypeArgDeleteTeamInviteLink()
    }
    if object.isMemberAddExternalId() {
        return DBXTeamLogEventTypeArgMemberAddExternalId()
    }
    if object.isMemberAddName() {
        return DBXTeamLogEventTypeArgMemberAddName()
    }
    if object.isMemberChangeAdminRole() {
        return DBXTeamLogEventTypeArgMemberChangeAdminRole()
    }
    if object.isMemberChangeEmail() {
        return DBXTeamLogEventTypeArgMemberChangeEmail()
    }
    if object.isMemberChangeExternalId() {
        return DBXTeamLogEventTypeArgMemberChangeExternalId()
    }
    if object.isMemberChangeMembershipType() {
        return DBXTeamLogEventTypeArgMemberChangeMembershipType()
    }
    if object.isMemberChangeName() {
        return DBXTeamLogEventTypeArgMemberChangeName()
    }
    if object.isMemberChangeResellerRole() {
        return DBXTeamLogEventTypeArgMemberChangeResellerRole()
    }
    if object.isMemberChangeStatus() {
        return DBXTeamLogEventTypeArgMemberChangeStatus()
    }
    if object.isMemberDeleteManualContacts() {
        return DBXTeamLogEventTypeArgMemberDeleteManualContacts()
    }
    if object.isMemberDeleteProfilePhoto() {
        return DBXTeamLogEventTypeArgMemberDeleteProfilePhoto()
    }
    if object.isMemberPermanentlyDeleteAccountContents() {
        return DBXTeamLogEventTypeArgMemberPermanentlyDeleteAccountContents()
    }
    if object.isMemberRemoveExternalId() {
        return DBXTeamLogEventTypeArgMemberRemoveExternalId()
    }
    if object.isMemberSetProfilePhoto() {
        return DBXTeamLogEventTypeArgMemberSetProfilePhoto()
    }
    if object.isMemberSpaceLimitsAddCustomQuota() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsAddCustomQuota()
    }
    if object.isMemberSpaceLimitsChangeCustomQuota() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCustomQuota()
    }
    if object.isMemberSpaceLimitsChangeStatus() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeStatus()
    }
    if object.isMemberSpaceLimitsRemoveCustomQuota() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveCustomQuota()
    }
    if object.isMemberSuggest() {
        return DBXTeamLogEventTypeArgMemberSuggest()
    }
    if object.isMemberTransferAccountContents() {
        return DBXTeamLogEventTypeArgMemberTransferAccountContents()
    }
    if object.isPendingSecondaryEmailAdded() {
        return DBXTeamLogEventTypeArgPendingSecondaryEmailAdded()
    }
    if object.isSecondaryEmailDeleted() {
        return DBXTeamLogEventTypeArgSecondaryEmailDeleted()
    }
    if object.isSecondaryEmailVerified() {
        return DBXTeamLogEventTypeArgSecondaryEmailVerified()
    }
    if object.isSecondaryMailsPolicyChanged() {
        return DBXTeamLogEventTypeArgSecondaryMailsPolicyChanged()
    }
    if object.isBinderAddPage() {
        return DBXTeamLogEventTypeArgBinderAddPage()
    }
    if object.isBinderAddSection() {
        return DBXTeamLogEventTypeArgBinderAddSection()
    }
    if object.isBinderRemovePage() {
        return DBXTeamLogEventTypeArgBinderRemovePage()
    }
    if object.isBinderRemoveSection() {
        return DBXTeamLogEventTypeArgBinderRemoveSection()
    }
    if object.isBinderRenamePage() {
        return DBXTeamLogEventTypeArgBinderRenamePage()
    }
    if object.isBinderRenameSection() {
        return DBXTeamLogEventTypeArgBinderRenameSection()
    }
    if object.isBinderReorderPage() {
        return DBXTeamLogEventTypeArgBinderReorderPage()
    }
    if object.isBinderReorderSection() {
        return DBXTeamLogEventTypeArgBinderReorderSection()
    }
    if object.isPaperContentAddMember() {
        return DBXTeamLogEventTypeArgPaperContentAddMember()
    }
    if object.isPaperContentAddToFolder() {
        return DBXTeamLogEventTypeArgPaperContentAddToFolder()
    }
    if object.isPaperContentArchive() {
        return DBXTeamLogEventTypeArgPaperContentArchive()
    }
    if object.isPaperContentCreate() {
        return DBXTeamLogEventTypeArgPaperContentCreate()
    }
    if object.isPaperContentPermanentlyDelete() {
        return DBXTeamLogEventTypeArgPaperContentPermanentlyDelete()
    }
    if object.isPaperContentRemoveFromFolder() {
        return DBXTeamLogEventTypeArgPaperContentRemoveFromFolder()
    }
    if object.isPaperContentRemoveMember() {
        return DBXTeamLogEventTypeArgPaperContentRemoveMember()
    }
    if object.isPaperContentRename() {
        return DBXTeamLogEventTypeArgPaperContentRename()
    }
    if object.isPaperContentRestore() {
        return DBXTeamLogEventTypeArgPaperContentRestore()
    }
    if object.isPaperDocAddComment() {
        return DBXTeamLogEventTypeArgPaperDocAddComment()
    }
    if object.isPaperDocChangeMemberRole() {
        return DBXTeamLogEventTypeArgPaperDocChangeMemberRole()
    }
    if object.isPaperDocChangeSharingPolicy() {
        return DBXTeamLogEventTypeArgPaperDocChangeSharingPolicy()
    }
    if object.isPaperDocChangeSubscription() {
        return DBXTeamLogEventTypeArgPaperDocChangeSubscription()
    }
    if object.isPaperDocDeleted() {
        return DBXTeamLogEventTypeArgPaperDocDeleted()
    }
    if object.isPaperDocDeleteComment() {
        return DBXTeamLogEventTypeArgPaperDocDeleteComment()
    }
    if object.isPaperDocDownload() {
        return DBXTeamLogEventTypeArgPaperDocDownload()
    }
    if object.isPaperDocEdit() {
        return DBXTeamLogEventTypeArgPaperDocEdit()
    }
    if object.isPaperDocEditComment() {
        return DBXTeamLogEventTypeArgPaperDocEditComment()
    }
    if object.isPaperDocFollowed() {
        return DBXTeamLogEventTypeArgPaperDocFollowed()
    }
    if object.isPaperDocMention() {
        return DBXTeamLogEventTypeArgPaperDocMention()
    }
    if object.isPaperDocOwnershipChanged() {
        return DBXTeamLogEventTypeArgPaperDocOwnershipChanged()
    }
    if object.isPaperDocRequestAccess() {
        return DBXTeamLogEventTypeArgPaperDocRequestAccess()
    }
    if object.isPaperDocResolveComment() {
        return DBXTeamLogEventTypeArgPaperDocResolveComment()
    }
    if object.isPaperDocRevert() {
        return DBXTeamLogEventTypeArgPaperDocRevert()
    }
    if object.isPaperDocSlackShare() {
        return DBXTeamLogEventTypeArgPaperDocSlackShare()
    }
    if object.isPaperDocTeamInvite() {
        return DBXTeamLogEventTypeArgPaperDocTeamInvite()
    }
    if object.isPaperDocTrashed() {
        return DBXTeamLogEventTypeArgPaperDocTrashed()
    }
    if object.isPaperDocUnresolveComment() {
        return DBXTeamLogEventTypeArgPaperDocUnresolveComment()
    }
    if object.isPaperDocUntrashed() {
        return DBXTeamLogEventTypeArgPaperDocUntrashed()
    }
    if object.isPaperDocView() {
        return DBXTeamLogEventTypeArgPaperDocView()
    }
    if object.isPaperExternalViewAllow() {
        return DBXTeamLogEventTypeArgPaperExternalViewAllow()
    }
    if object.isPaperExternalViewDefaultTeam() {
        return DBXTeamLogEventTypeArgPaperExternalViewDefaultTeam()
    }
    if object.isPaperExternalViewForbid() {
        return DBXTeamLogEventTypeArgPaperExternalViewForbid()
    }
    if object.isPaperFolderChangeSubscription() {
        return DBXTeamLogEventTypeArgPaperFolderChangeSubscription()
    }
    if object.isPaperFolderDeleted() {
        return DBXTeamLogEventTypeArgPaperFolderDeleted()
    }
    if object.isPaperFolderFollowed() {
        return DBXTeamLogEventTypeArgPaperFolderFollowed()
    }
    if object.isPaperFolderTeamInvite() {
        return DBXTeamLogEventTypeArgPaperFolderTeamInvite()
    }
    if object.isPaperPublishedLinkChangePermission() {
        return DBXTeamLogEventTypeArgPaperPublishedLinkChangePermission()
    }
    if object.isPaperPublishedLinkCreate() {
        return DBXTeamLogEventTypeArgPaperPublishedLinkCreate()
    }
    if object.isPaperPublishedLinkDisabled() {
        return DBXTeamLogEventTypeArgPaperPublishedLinkDisabled()
    }
    if object.isPaperPublishedLinkView() {
        return DBXTeamLogEventTypeArgPaperPublishedLinkView()
    }
    if object.isPasswordChange() {
        return DBXTeamLogEventTypeArgPasswordChange()
    }
    if object.isPasswordReset() {
        return DBXTeamLogEventTypeArgPasswordReset()
    }
    if object.isPasswordResetAll() {
        return DBXTeamLogEventTypeArgPasswordResetAll()
    }
    if object.isClassificationCreateReport() {
        return DBXTeamLogEventTypeArgClassificationCreateReport()
    }
    if object.isClassificationCreateReportFail() {
        return DBXTeamLogEventTypeArgClassificationCreateReportFail()
    }
    if object.isEmmCreateExceptionsReport() {
        return DBXTeamLogEventTypeArgEmmCreateExceptionsReport()
    }
    if object.isEmmCreateUsageReport() {
        return DBXTeamLogEventTypeArgEmmCreateUsageReport()
    }
    if object.isExportMembersReport() {
        return DBXTeamLogEventTypeArgExportMembersReport()
    }
    if object.isExportMembersReportFail() {
        return DBXTeamLogEventTypeArgExportMembersReportFail()
    }
    if object.isExternalSharingCreateReport() {
        return DBXTeamLogEventTypeArgExternalSharingCreateReport()
    }
    if object.isExternalSharingReportFailed() {
        return DBXTeamLogEventTypeArgExternalSharingReportFailed()
    }
    if object.isNoExpirationLinkGenCreateReport() {
        return DBXTeamLogEventTypeArgNoExpirationLinkGenCreateReport()
    }
    if object.isNoExpirationLinkGenReportFailed() {
        return DBXTeamLogEventTypeArgNoExpirationLinkGenReportFailed()
    }
    if object.isNoPasswordLinkGenCreateReport() {
        return DBXTeamLogEventTypeArgNoPasswordLinkGenCreateReport()
    }
    if object.isNoPasswordLinkGenReportFailed() {
        return DBXTeamLogEventTypeArgNoPasswordLinkGenReportFailed()
    }
    if object.isNoPasswordLinkViewCreateReport() {
        return DBXTeamLogEventTypeArgNoPasswordLinkViewCreateReport()
    }
    if object.isNoPasswordLinkViewReportFailed() {
        return DBXTeamLogEventTypeArgNoPasswordLinkViewReportFailed()
    }
    if object.isOutdatedLinkViewCreateReport() {
        return DBXTeamLogEventTypeArgOutdatedLinkViewCreateReport()
    }
    if object.isOutdatedLinkViewReportFailed() {
        return DBXTeamLogEventTypeArgOutdatedLinkViewReportFailed()
    }
    if object.isPaperAdminExportStart() {
        return DBXTeamLogEventTypeArgPaperAdminExportStart()
    }
    if object.isRansomwareAlertCreateReport() {
        return DBXTeamLogEventTypeArgRansomwareAlertCreateReport()
    }
    if object.isRansomwareAlertCreateReportFailed() {
        return DBXTeamLogEventTypeArgRansomwareAlertCreateReportFailed()
    }
    if object.isSmartSyncCreateAdminPrivilegeReport() {
        return DBXTeamLogEventTypeArgSmartSyncCreateAdminPrivilegeReport()
    }
    if object.isTeamActivityCreateReport() {
        return DBXTeamLogEventTypeArgTeamActivityCreateReport()
    }
    if object.isTeamActivityCreateReportFail() {
        return DBXTeamLogEventTypeArgTeamActivityCreateReportFail()
    }
    if object.isCollectionShare() {
        return DBXTeamLogEventTypeArgCollectionShare()
    }
    if object.isFileTransfersFileAdd() {
        return DBXTeamLogEventTypeArgFileTransfersFileAdd()
    }
    if object.isFileTransfersTransferDelete() {
        return DBXTeamLogEventTypeArgFileTransfersTransferDelete()
    }
    if object.isFileTransfersTransferDownload() {
        return DBXTeamLogEventTypeArgFileTransfersTransferDownload()
    }
    if object.isFileTransfersTransferSend() {
        return DBXTeamLogEventTypeArgFileTransfersTransferSend()
    }
    if object.isFileTransfersTransferView() {
        return DBXTeamLogEventTypeArgFileTransfersTransferView()
    }
    if object.isNoteAclInviteOnly() {
        return DBXTeamLogEventTypeArgNoteAclInviteOnly()
    }
    if object.isNoteAclLink() {
        return DBXTeamLogEventTypeArgNoteAclLink()
    }
    if object.isNoteAclTeamLink() {
        return DBXTeamLogEventTypeArgNoteAclTeamLink()
    }
    if object.isNoteShared() {
        return DBXTeamLogEventTypeArgNoteShared()
    }
    if object.isNoteShareReceive() {
        return DBXTeamLogEventTypeArgNoteShareReceive()
    }
    if object.isOpenNoteShared() {
        return DBXTeamLogEventTypeArgOpenNoteShared()
    }
    if object.isReplayFileSharedLinkCreated() {
        return DBXTeamLogEventTypeArgReplayFileSharedLinkCreated()
    }
    if object.isReplayFileSharedLinkModified() {
        return DBXTeamLogEventTypeArgReplayFileSharedLinkModified()
    }
    if object.isReplayProjectTeamAdd() {
        return DBXTeamLogEventTypeArgReplayProjectTeamAdd()
    }
    if object.isReplayProjectTeamDelete() {
        return DBXTeamLogEventTypeArgReplayProjectTeamDelete()
    }
    if object.isSfAddGroup() {
        return DBXTeamLogEventTypeArgSfAddGroup()
    }
    if object.isSfAllowNonMembersToViewSharedLinks() {
        return DBXTeamLogEventTypeArgSfAllowNonMembersToViewSharedLinks()
    }
    if object.isSfExternalInviteWarn() {
        return DBXTeamLogEventTypeArgSfExternalInviteWarn()
    }
    if object.isSfFbInvite() {
        return DBXTeamLogEventTypeArgSfFbInvite()
    }
    if object.isSfFbInviteChangeRole() {
        return DBXTeamLogEventTypeArgSfFbInviteChangeRole()
    }
    if object.isSfFbUninvite() {
        return DBXTeamLogEventTypeArgSfFbUninvite()
    }
    if object.isSfInviteGroup() {
        return DBXTeamLogEventTypeArgSfInviteGroup()
    }
    if object.isSfTeamGrantAccess() {
        return DBXTeamLogEventTypeArgSfTeamGrantAccess()
    }
    if object.isSfTeamInvite() {
        return DBXTeamLogEventTypeArgSfTeamInvite()
    }
    if object.isSfTeamInviteChangeRole() {
        return DBXTeamLogEventTypeArgSfTeamInviteChangeRole()
    }
    if object.isSfTeamJoin() {
        return DBXTeamLogEventTypeArgSfTeamJoin()
    }
    if object.isSfTeamJoinFromOobLink() {
        return DBXTeamLogEventTypeArgSfTeamJoinFromOobLink()
    }
    if object.isSfTeamUninvite() {
        return DBXTeamLogEventTypeArgSfTeamUninvite()
    }
    if object.isSharedContentAddInvitees() {
        return DBXTeamLogEventTypeArgSharedContentAddInvitees()
    }
    if object.isSharedContentAddLinkExpiry() {
        return DBXTeamLogEventTypeArgSharedContentAddLinkExpiry()
    }
    if object.isSharedContentAddLinkPassword() {
        return DBXTeamLogEventTypeArgSharedContentAddLinkPassword()
    }
    if object.isSharedContentAddMember() {
        return DBXTeamLogEventTypeArgSharedContentAddMember()
    }
    if object.isSharedContentChangeDownloadsPolicy() {
        return DBXTeamLogEventTypeArgSharedContentChangeDownloadsPolicy()
    }
    if object.isSharedContentChangeInviteeRole() {
        return DBXTeamLogEventTypeArgSharedContentChangeInviteeRole()
    }
    if object.isSharedContentChangeLinkAudience() {
        return DBXTeamLogEventTypeArgSharedContentChangeLinkAudience()
    }
    if object.isSharedContentChangeLinkExpiry() {
        return DBXTeamLogEventTypeArgSharedContentChangeLinkExpiry()
    }
    if object.isSharedContentChangeLinkPassword() {
        return DBXTeamLogEventTypeArgSharedContentChangeLinkPassword()
    }
    if object.isSharedContentChangeMemberRole() {
        return DBXTeamLogEventTypeArgSharedContentChangeMemberRole()
    }
    if object.isSharedContentChangeViewerInfoPolicy() {
        return DBXTeamLogEventTypeArgSharedContentChangeViewerInfoPolicy()
    }
    if object.isSharedContentClaimInvitation() {
        return DBXTeamLogEventTypeArgSharedContentClaimInvitation()
    }
    if object.isSharedContentCopy() {
        return DBXTeamLogEventTypeArgSharedContentCopy()
    }
    if object.isSharedContentDownload() {
        return DBXTeamLogEventTypeArgSharedContentDownload()
    }
    if object.isSharedContentRelinquishMembership() {
        return DBXTeamLogEventTypeArgSharedContentRelinquishMembership()
    }
    if object.isSharedContentRemoveInvitees() {
        return DBXTeamLogEventTypeArgSharedContentRemoveInvitees()
    }
    if object.isSharedContentRemoveLinkExpiry() {
        return DBXTeamLogEventTypeArgSharedContentRemoveLinkExpiry()
    }
    if object.isSharedContentRemoveLinkPassword() {
        return DBXTeamLogEventTypeArgSharedContentRemoveLinkPassword()
    }
    if object.isSharedContentRemoveMember() {
        return DBXTeamLogEventTypeArgSharedContentRemoveMember()
    }
    if object.isSharedContentRequestAccess() {
        return DBXTeamLogEventTypeArgSharedContentRequestAccess()
    }
    if object.isSharedContentRestoreInvitees() {
        return DBXTeamLogEventTypeArgSharedContentRestoreInvitees()
    }
    if object.isSharedContentRestoreMember() {
        return DBXTeamLogEventTypeArgSharedContentRestoreMember()
    }
    if object.isSharedContentUnshare() {
        return DBXTeamLogEventTypeArgSharedContentUnshare()
    }
    if object.isSharedContentView() {
        return DBXTeamLogEventTypeArgSharedContentView()
    }
    if object.isSharedFolderChangeLinkPolicy() {
        return DBXTeamLogEventTypeArgSharedFolderChangeLinkPolicy()
    }
    if object.isSharedFolderChangeMembersInheritancePolicy() {
        return DBXTeamLogEventTypeArgSharedFolderChangeMembersInheritancePolicy()
    }
    if object.isSharedFolderChangeMembersManagementPolicy() {
        return DBXTeamLogEventTypeArgSharedFolderChangeMembersManagementPolicy()
    }
    if object.isSharedFolderChangeMembersPolicy() {
        return DBXTeamLogEventTypeArgSharedFolderChangeMembersPolicy()
    }
    if object.isSharedFolderCreate() {
        return DBXTeamLogEventTypeArgSharedFolderCreate()
    }
    if object.isSharedFolderDeclineInvitation() {
        return DBXTeamLogEventTypeArgSharedFolderDeclineInvitation()
    }
    if object.isSharedFolderMount() {
        return DBXTeamLogEventTypeArgSharedFolderMount()
    }
    if object.isSharedFolderNest() {
        return DBXTeamLogEventTypeArgSharedFolderNest()
    }
    if object.isSharedFolderTransferOwnership() {
        return DBXTeamLogEventTypeArgSharedFolderTransferOwnership()
    }
    if object.isSharedFolderUnmount() {
        return DBXTeamLogEventTypeArgSharedFolderUnmount()
    }
    if object.isSharedLinkAddExpiry() {
        return DBXTeamLogEventTypeArgSharedLinkAddExpiry()
    }
    if object.isSharedLinkChangeExpiry() {
        return DBXTeamLogEventTypeArgSharedLinkChangeExpiry()
    }
    if object.isSharedLinkChangeVisibility() {
        return DBXTeamLogEventTypeArgSharedLinkChangeVisibility()
    }
    if object.isSharedLinkCopy() {
        return DBXTeamLogEventTypeArgSharedLinkCopy()
    }
    if object.isSharedLinkCreate() {
        return DBXTeamLogEventTypeArgSharedLinkCreate()
    }
    if object.isSharedLinkDisable() {
        return DBXTeamLogEventTypeArgSharedLinkDisable()
    }
    if object.isSharedLinkDownload() {
        return DBXTeamLogEventTypeArgSharedLinkDownload()
    }
    if object.isSharedLinkRemoveExpiry() {
        return DBXTeamLogEventTypeArgSharedLinkRemoveExpiry()
    }
    if object.isSharedLinkSettingsAddExpiration() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsAddExpiration()
    }
    if object.isSharedLinkSettingsAddPassword() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsAddPassword()
    }
    if object.isSharedLinkSettingsAllowDownloadDisabled() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadDisabled()
    }
    if object.isSharedLinkSettingsAllowDownloadEnabled() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsAllowDownloadEnabled()
    }
    if object.isSharedLinkSettingsChangeAudience() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsChangeAudience()
    }
    if object.isSharedLinkSettingsChangeExpiration() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsChangeExpiration()
    }
    if object.isSharedLinkSettingsChangePassword() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsChangePassword()
    }
    if object.isSharedLinkSettingsRemoveExpiration() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsRemoveExpiration()
    }
    if object.isSharedLinkSettingsRemovePassword() {
        return DBXTeamLogEventTypeArgSharedLinkSettingsRemovePassword()
    }
    if object.isSharedLinkShare() {
        return DBXTeamLogEventTypeArgSharedLinkShare()
    }
    if object.isSharedLinkView() {
        return DBXTeamLogEventTypeArgSharedLinkView()
    }
    if object.isSharedNoteOpened() {
        return DBXTeamLogEventTypeArgSharedNoteOpened()
    }
    if object.isShmodelDisableDownloads() {
        return DBXTeamLogEventTypeArgShmodelDisableDownloads()
    }
    if object.isShmodelEnableDownloads() {
        return DBXTeamLogEventTypeArgShmodelEnableDownloads()
    }
    if object.isShmodelGroupShare() {
        return DBXTeamLogEventTypeArgShmodelGroupShare()
    }
    if object.isShowcaseAccessGranted() {
        return DBXTeamLogEventTypeArgShowcaseAccessGranted()
    }
    if object.isShowcaseAddMember() {
        return DBXTeamLogEventTypeArgShowcaseAddMember()
    }
    if object.isShowcaseArchived() {
        return DBXTeamLogEventTypeArgShowcaseArchived()
    }
    if object.isShowcaseCreated() {
        return DBXTeamLogEventTypeArgShowcaseCreated()
    }
    if object.isShowcaseDeleteComment() {
        return DBXTeamLogEventTypeArgShowcaseDeleteComment()
    }
    if object.isShowcaseEdited() {
        return DBXTeamLogEventTypeArgShowcaseEdited()
    }
    if object.isShowcaseEditComment() {
        return DBXTeamLogEventTypeArgShowcaseEditComment()
    }
    if object.isShowcaseFileAdded() {
        return DBXTeamLogEventTypeArgShowcaseFileAdded()
    }
    if object.isShowcaseFileDownload() {
        return DBXTeamLogEventTypeArgShowcaseFileDownload()
    }
    if object.isShowcaseFileRemoved() {
        return DBXTeamLogEventTypeArgShowcaseFileRemoved()
    }
    if object.isShowcaseFileView() {
        return DBXTeamLogEventTypeArgShowcaseFileView()
    }
    if object.isShowcasePermanentlyDeleted() {
        return DBXTeamLogEventTypeArgShowcasePermanentlyDeleted()
    }
    if object.isShowcasePostComment() {
        return DBXTeamLogEventTypeArgShowcasePostComment()
    }
    if object.isShowcaseRemoveMember() {
        return DBXTeamLogEventTypeArgShowcaseRemoveMember()
    }
    if object.isShowcaseRenamed() {
        return DBXTeamLogEventTypeArgShowcaseRenamed()
    }
    if object.isShowcaseRequestAccess() {
        return DBXTeamLogEventTypeArgShowcaseRequestAccess()
    }
    if object.isShowcaseResolveComment() {
        return DBXTeamLogEventTypeArgShowcaseResolveComment()
    }
    if object.isShowcaseRestored() {
        return DBXTeamLogEventTypeArgShowcaseRestored()
    }
    if object.isShowcaseTrashed() {
        return DBXTeamLogEventTypeArgShowcaseTrashed()
    }
    if object.isShowcaseTrashedDeprecated() {
        return DBXTeamLogEventTypeArgShowcaseTrashedDeprecated()
    }
    if object.isShowcaseUnresolveComment() {
        return DBXTeamLogEventTypeArgShowcaseUnresolveComment()
    }
    if object.isShowcaseUntrashed() {
        return DBXTeamLogEventTypeArgShowcaseUntrashed()
    }
    if object.isShowcaseUntrashedDeprecated() {
        return DBXTeamLogEventTypeArgShowcaseUntrashedDeprecated()
    }
    if object.isShowcaseView() {
        return DBXTeamLogEventTypeArgShowcaseView()
    }
    if object.isSsoAddCert() {
        return DBXTeamLogEventTypeArgSsoAddCert()
    }
    if object.isSsoAddLoginUrl() {
        return DBXTeamLogEventTypeArgSsoAddLoginUrl()
    }
    if object.isSsoAddLogoutUrl() {
        return DBXTeamLogEventTypeArgSsoAddLogoutUrl()
    }
    if object.isSsoChangeCert() {
        return DBXTeamLogEventTypeArgSsoChangeCert()
    }
    if object.isSsoChangeLoginUrl() {
        return DBXTeamLogEventTypeArgSsoChangeLoginUrl()
    }
    if object.isSsoChangeLogoutUrl() {
        return DBXTeamLogEventTypeArgSsoChangeLogoutUrl()
    }
    if object.isSsoChangeSamlIdentityMode() {
        return DBXTeamLogEventTypeArgSsoChangeSamlIdentityMode()
    }
    if object.isSsoRemoveCert() {
        return DBXTeamLogEventTypeArgSsoRemoveCert()
    }
    if object.isSsoRemoveLoginUrl() {
        return DBXTeamLogEventTypeArgSsoRemoveLoginUrl()
    }
    if object.isSsoRemoveLogoutUrl() {
        return DBXTeamLogEventTypeArgSsoRemoveLogoutUrl()
    }
    if object.isTeamFolderChangeStatus() {
        return DBXTeamLogEventTypeArgTeamFolderChangeStatus()
    }
    if object.isTeamFolderCreate() {
        return DBXTeamLogEventTypeArgTeamFolderCreate()
    }
    if object.isTeamFolderDowngrade() {
        return DBXTeamLogEventTypeArgTeamFolderDowngrade()
    }
    if object.isTeamFolderPermanentlyDelete() {
        return DBXTeamLogEventTypeArgTeamFolderPermanentlyDelete()
    }
    if object.isTeamFolderRename() {
        return DBXTeamLogEventTypeArgTeamFolderRename()
    }
    if object.isTeamSelectiveSyncSettingsChanged() {
        return DBXTeamLogEventTypeArgTeamSelectiveSyncSettingsChanged()
    }
    if object.isAccountCaptureChangePolicy() {
        return DBXTeamLogEventTypeArgAccountCaptureChangePolicy()
    }
    if object.isAdminEmailRemindersChanged() {
        return DBXTeamLogEventTypeArgAdminEmailRemindersChanged()
    }
    if object.isAllowDownloadDisabled() {
        return DBXTeamLogEventTypeArgAllowDownloadDisabled()
    }
    if object.isAllowDownloadEnabled() {
        return DBXTeamLogEventTypeArgAllowDownloadEnabled()
    }
    if object.isAppPermissionsChanged() {
        return DBXTeamLogEventTypeArgAppPermissionsChanged()
    }
    if object.isCameraUploadsPolicyChanged() {
        return DBXTeamLogEventTypeArgCameraUploadsPolicyChanged()
    }
    if object.isCaptureTranscriptPolicyChanged() {
        return DBXTeamLogEventTypeArgCaptureTranscriptPolicyChanged()
    }
    if object.isClassificationChangePolicy() {
        return DBXTeamLogEventTypeArgClassificationChangePolicy()
    }
    if object.isComputerBackupPolicyChanged() {
        return DBXTeamLogEventTypeArgComputerBackupPolicyChanged()
    }
    if object.isContentAdministrationPolicyChanged() {
        return DBXTeamLogEventTypeArgContentAdministrationPolicyChanged()
    }
    if object.isDataPlacementRestrictionChangePolicy() {
        return DBXTeamLogEventTypeArgDataPlacementRestrictionChangePolicy()
    }
    if object.isDataPlacementRestrictionSatisfyPolicy() {
        return DBXTeamLogEventTypeArgDataPlacementRestrictionSatisfyPolicy()
    }
    if object.isDeviceApprovalsAddException() {
        return DBXTeamLogEventTypeArgDeviceApprovalsAddException()
    }
    if object.isDeviceApprovalsChangeDesktopPolicy() {
        return DBXTeamLogEventTypeArgDeviceApprovalsChangeDesktopPolicy()
    }
    if object.isDeviceApprovalsChangeMobilePolicy() {
        return DBXTeamLogEventTypeArgDeviceApprovalsChangeMobilePolicy()
    }
    if object.isDeviceApprovalsChangeOverageAction() {
        return DBXTeamLogEventTypeArgDeviceApprovalsChangeOverageAction()
    }
    if object.isDeviceApprovalsChangeUnlinkAction() {
        return DBXTeamLogEventTypeArgDeviceApprovalsChangeUnlinkAction()
    }
    if object.isDeviceApprovalsRemoveException() {
        return DBXTeamLogEventTypeArgDeviceApprovalsRemoveException()
    }
    if object.isDirectoryRestrictionsAddMembers() {
        return DBXTeamLogEventTypeArgDirectoryRestrictionsAddMembers()
    }
    if object.isDirectoryRestrictionsRemoveMembers() {
        return DBXTeamLogEventTypeArgDirectoryRestrictionsRemoveMembers()
    }
    if object.isDropboxPasswordsPolicyChanged() {
        return DBXTeamLogEventTypeArgDropboxPasswordsPolicyChanged()
    }
    if object.isEmailIngestPolicyChanged() {
        return DBXTeamLogEventTypeArgEmailIngestPolicyChanged()
    }
    if object.isEmmAddException() {
        return DBXTeamLogEventTypeArgEmmAddException()
    }
    if object.isEmmChangePolicy() {
        return DBXTeamLogEventTypeArgEmmChangePolicy()
    }
    if object.isEmmRemoveException() {
        return DBXTeamLogEventTypeArgEmmRemoveException()
    }
    if object.isExtendedVersionHistoryChangePolicy() {
        return DBXTeamLogEventTypeArgExtendedVersionHistoryChangePolicy()
    }
    if object.isExternalDriveBackupPolicyChanged() {
        return DBXTeamLogEventTypeArgExternalDriveBackupPolicyChanged()
    }
    if object.isFileCommentsChangePolicy() {
        return DBXTeamLogEventTypeArgFileCommentsChangePolicy()
    }
    if object.isFileLockingPolicyChanged() {
        return DBXTeamLogEventTypeArgFileLockingPolicyChanged()
    }
    if object.isFileProviderMigrationPolicyChanged() {
        return DBXTeamLogEventTypeArgFileProviderMigrationPolicyChanged()
    }
    if object.isFileRequestsChangePolicy() {
        return DBXTeamLogEventTypeArgFileRequestsChangePolicy()
    }
    if object.isFileRequestsEmailsEnabled() {
        return DBXTeamLogEventTypeArgFileRequestsEmailsEnabled()
    }
    if object.isFileRequestsEmailsRestrictedToTeamOnly() {
        return DBXTeamLogEventTypeArgFileRequestsEmailsRestrictedToTeamOnly()
    }
    if object.isFileTransfersPolicyChanged() {
        return DBXTeamLogEventTypeArgFileTransfersPolicyChanged()
    }
    if object.isFolderLinkRestrictionPolicyChanged() {
        return DBXTeamLogEventTypeArgFolderLinkRestrictionPolicyChanged()
    }
    if object.isGoogleSsoChangePolicy() {
        return DBXTeamLogEventTypeArgGoogleSsoChangePolicy()
    }
    if object.isGroupUserManagementChangePolicy() {
        return DBXTeamLogEventTypeArgGroupUserManagementChangePolicy()
    }
    if object.isIntegrationPolicyChanged() {
        return DBXTeamLogEventTypeArgIntegrationPolicyChanged()
    }
    if object.isInviteAcceptanceEmailPolicyChanged() {
        return DBXTeamLogEventTypeArgInviteAcceptanceEmailPolicyChanged()
    }
    if object.isMemberRequestsChangePolicy() {
        return DBXTeamLogEventTypeArgMemberRequestsChangePolicy()
    }
    if object.isMemberSendInvitePolicyChanged() {
        return DBXTeamLogEventTypeArgMemberSendInvitePolicyChanged()
    }
    if object.isMemberSpaceLimitsAddException() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsAddException()
    }
    if object.isMemberSpaceLimitsChangeCapsTypePolicy() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsChangeCapsTypePolicy()
    }
    if object.isMemberSpaceLimitsChangePolicy() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsChangePolicy()
    }
    if object.isMemberSpaceLimitsRemoveException() {
        return DBXTeamLogEventTypeArgMemberSpaceLimitsRemoveException()
    }
    if object.isMemberSuggestionsChangePolicy() {
        return DBXTeamLogEventTypeArgMemberSuggestionsChangePolicy()
    }
    if object.isMicrosoftOfficeAddinChangePolicy() {
        return DBXTeamLogEventTypeArgMicrosoftOfficeAddinChangePolicy()
    }
    if object.isNetworkControlChangePolicy() {
        return DBXTeamLogEventTypeArgNetworkControlChangePolicy()
    }
    if object.isPaperChangeDeploymentPolicy() {
        return DBXTeamLogEventTypeArgPaperChangeDeploymentPolicy()
    }
    if object.isPaperChangeMemberLinkPolicy() {
        return DBXTeamLogEventTypeArgPaperChangeMemberLinkPolicy()
    }
    if object.isPaperChangeMemberPolicy() {
        return DBXTeamLogEventTypeArgPaperChangeMemberPolicy()
    }
    if object.isPaperChangePolicy() {
        return DBXTeamLogEventTypeArgPaperChangePolicy()
    }
    if object.isPaperDefaultFolderPolicyChanged() {
        return DBXTeamLogEventTypeArgPaperDefaultFolderPolicyChanged()
    }
    if object.isPaperDesktopPolicyChanged() {
        return DBXTeamLogEventTypeArgPaperDesktopPolicyChanged()
    }
    if object.isPaperEnabledUsersGroupAddition() {
        return DBXTeamLogEventTypeArgPaperEnabledUsersGroupAddition()
    }
    if object.isPaperEnabledUsersGroupRemoval() {
        return DBXTeamLogEventTypeArgPaperEnabledUsersGroupRemoval()
    }
    if object.isPasswordStrengthRequirementsChangePolicy() {
        return DBXTeamLogEventTypeArgPasswordStrengthRequirementsChangePolicy()
    }
    if object.isPermanentDeleteChangePolicy() {
        return DBXTeamLogEventTypeArgPermanentDeleteChangePolicy()
    }
    if object.isResellerSupportChangePolicy() {
        return DBXTeamLogEventTypeArgResellerSupportChangePolicy()
    }
    if object.isRewindPolicyChanged() {
        return DBXTeamLogEventTypeArgRewindPolicyChanged()
    }
    if object.isSendForSignaturePolicyChanged() {
        return DBXTeamLogEventTypeArgSendForSignaturePolicyChanged()
    }
    if object.isSharingChangeFolderJoinPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeFolderJoinPolicy()
    }
    if object.isSharingChangeLinkAllowChangeExpirationPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeLinkAllowChangeExpirationPolicy()
    }
    if object.isSharingChangeLinkDefaultExpirationPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeLinkDefaultExpirationPolicy()
    }
    if object.isSharingChangeLinkEnforcePasswordPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeLinkEnforcePasswordPolicy()
    }
    if object.isSharingChangeLinkPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeLinkPolicy()
    }
    if object.isSharingChangeMemberPolicy() {
        return DBXTeamLogEventTypeArgSharingChangeMemberPolicy()
    }
    if object.isShowcaseChangeDownloadPolicy() {
        return DBXTeamLogEventTypeArgShowcaseChangeDownloadPolicy()
    }
    if object.isShowcaseChangeEnabledPolicy() {
        return DBXTeamLogEventTypeArgShowcaseChangeEnabledPolicy()
    }
    if object.isShowcaseChangeExternalSharingPolicy() {
        return DBXTeamLogEventTypeArgShowcaseChangeExternalSharingPolicy()
    }
    if object.isSmarterSmartSyncPolicyChanged() {
        return DBXTeamLogEventTypeArgSmarterSmartSyncPolicyChanged()
    }
    if object.isSmartSyncChangePolicy() {
        return DBXTeamLogEventTypeArgSmartSyncChangePolicy()
    }
    if object.isSmartSyncNotOptOut() {
        return DBXTeamLogEventTypeArgSmartSyncNotOptOut()
    }
    if object.isSmartSyncOptOut() {
        return DBXTeamLogEventTypeArgSmartSyncOptOut()
    }
    if object.isSsoChangePolicy() {
        return DBXTeamLogEventTypeArgSsoChangePolicy()
    }
    if object.isTeamBrandingPolicyChanged() {
        return DBXTeamLogEventTypeArgTeamBrandingPolicyChanged()
    }
    if object.isTeamExtensionsPolicyChanged() {
        return DBXTeamLogEventTypeArgTeamExtensionsPolicyChanged()
    }
    if object.isTeamSelectiveSyncPolicyChanged() {
        return DBXTeamLogEventTypeArgTeamSelectiveSyncPolicyChanged()
    }
    if object.isTeamSharingWhitelistSubjectsChanged() {
        return DBXTeamLogEventTypeArgTeamSharingWhitelistSubjectsChanged()
    }
    if object.isTfaAddException() {
        return DBXTeamLogEventTypeArgTfaAddException()
    }
    if object.isTfaChangePolicy() {
        return DBXTeamLogEventTypeArgTfaChangePolicy()
    }
    if object.isTfaRemoveException() {
        return DBXTeamLogEventTypeArgTfaRemoveException()
    }
    if object.isTwoAccountChangePolicy() {
        return DBXTeamLogEventTypeArgTwoAccountChangePolicy()
    }
    if object.isViewerInfoPolicyChanged() {
        return DBXTeamLogEventTypeArgViewerInfoPolicyChanged()
    }
    if object.isWatermarkingPolicyChanged() {
        return DBXTeamLogEventTypeArgWatermarkingPolicyChanged()
    }
    if object.isWebSessionsChangeActiveSessionLimit() {
        return DBXTeamLogEventTypeArgWebSessionsChangeActiveSessionLimit()
    }
    if object.isWebSessionsChangeFixedLengthPolicy() {
        return DBXTeamLogEventTypeArgWebSessionsChangeFixedLengthPolicy()
    }
    if object.isWebSessionsChangeIdleLengthPolicy() {
        return DBXTeamLogEventTypeArgWebSessionsChangeIdleLengthPolicy()
    }
    if object.isDataResidencyMigrationRequestSuccessful() {
        return DBXTeamLogEventTypeArgDataResidencyMigrationRequestSuccessful()
    }
    if object.isDataResidencyMigrationRequestUnsuccessful() {
        return DBXTeamLogEventTypeArgDataResidencyMigrationRequestUnsuccessful()
    }
    if object.isTeamMergeFrom() {
        return DBXTeamLogEventTypeArgTeamMergeFrom()
    }
    if object.isTeamMergeTo() {
        return DBXTeamLogEventTypeArgTeamMergeTo()
    }
    if object.isTeamProfileAddBackground() {
        return DBXTeamLogEventTypeArgTeamProfileAddBackground()
    }
    if object.isTeamProfileAddLogo() {
        return DBXTeamLogEventTypeArgTeamProfileAddLogo()
    }
    if object.isTeamProfileChangeBackground() {
        return DBXTeamLogEventTypeArgTeamProfileChangeBackground()
    }
    if object.isTeamProfileChangeDefaultLanguage() {
        return DBXTeamLogEventTypeArgTeamProfileChangeDefaultLanguage()
    }
    if object.isTeamProfileChangeLogo() {
        return DBXTeamLogEventTypeArgTeamProfileChangeLogo()
    }
    if object.isTeamProfileChangeName() {
        return DBXTeamLogEventTypeArgTeamProfileChangeName()
    }
    if object.isTeamProfileRemoveBackground() {
        return DBXTeamLogEventTypeArgTeamProfileRemoveBackground()
    }
    if object.isTeamProfileRemoveLogo() {
        return DBXTeamLogEventTypeArgTeamProfileRemoveLogo()
    }
    if object.isTfaAddBackupPhone() {
        return DBXTeamLogEventTypeArgTfaAddBackupPhone()
    }
    if object.isTfaAddSecurityKey() {
        return DBXTeamLogEventTypeArgTfaAddSecurityKey()
    }
    if object.isTfaChangeBackupPhone() {
        return DBXTeamLogEventTypeArgTfaChangeBackupPhone()
    }
    if object.isTfaChangeStatus() {
        return DBXTeamLogEventTypeArgTfaChangeStatus()
    }
    if object.isTfaRemoveBackupPhone() {
        return DBXTeamLogEventTypeArgTfaRemoveBackupPhone()
    }
    if object.isTfaRemoveSecurityKey() {
        return DBXTeamLogEventTypeArgTfaRemoveSecurityKey()
    }
    if object.isTfaReset() {
        return DBXTeamLogEventTypeArgTfaReset()
    }
    if object.isChangedEnterpriseAdminRole() {
        return DBXTeamLogEventTypeArgChangedEnterpriseAdminRole()
    }
    if object.isChangedEnterpriseConnectedTeamStatus() {
        return DBXTeamLogEventTypeArgChangedEnterpriseConnectedTeamStatus()
    }
    if object.isEndedEnterpriseAdminSession() {
        return DBXTeamLogEventTypeArgEndedEnterpriseAdminSession()
    }
    if object.isEndedEnterpriseAdminSessionDeprecated() {
        return DBXTeamLogEventTypeArgEndedEnterpriseAdminSessionDeprecated()
    }
    if object.isEnterpriseSettingsLocking() {
        return DBXTeamLogEventTypeArgEnterpriseSettingsLocking()
    }
    if object.isGuestAdminChangeStatus() {
        return DBXTeamLogEventTypeArgGuestAdminChangeStatus()
    }
    if object.isStartedEnterpriseAdminSession() {
        return DBXTeamLogEventTypeArgStartedEnterpriseAdminSession()
    }
    if object.isTeamMergeRequestAccepted() {
        return DBXTeamLogEventTypeArgTeamMergeRequestAccepted()
    }
    if object.isTeamMergeRequestAcceptedShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestAcceptedShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestAcceptedShownToSecondaryTeam()
    }
    if object.isTeamMergeRequestAutoCanceled() {
        return DBXTeamLogEventTypeArgTeamMergeRequestAutoCanceled()
    }
    if object.isTeamMergeRequestCanceled() {
        return DBXTeamLogEventTypeArgTeamMergeRequestCanceled()
    }
    if object.isTeamMergeRequestCanceledShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestCanceledShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestCanceledShownToSecondaryTeam()
    }
    if object.isTeamMergeRequestExpired() {
        return DBXTeamLogEventTypeArgTeamMergeRequestExpired()
    }
    if object.isTeamMergeRequestExpiredShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestExpiredShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestExpiredShownToSecondaryTeam()
    }
    if object.isTeamMergeRequestRejectedShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestRejectedShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestRejectedShownToSecondaryTeam()
    }
    if object.isTeamMergeRequestReminder() {
        return DBXTeamLogEventTypeArgTeamMergeRequestReminder()
    }
    if object.isTeamMergeRequestReminderShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestReminderShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestReminderShownToSecondaryTeam()
    }
    if object.isTeamMergeRequestRevoked() {
        return DBXTeamLogEventTypeArgTeamMergeRequestRevoked()
    }
    if object.isTeamMergeRequestSentShownToPrimaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestSentShownToPrimaryTeam()
    }
    if object.isTeamMergeRequestSentShownToSecondaryTeam() {
        return DBXTeamLogEventTypeArgTeamMergeRequestSentShownToSecondaryTeam()
    }
    if object.isOther() {
        return DBXTeamLogEventTypeArgOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGExportMembersReportDetailsToDBXOptional(object: DBTEAMLOGExportMembersReportDetails?) -> DBXTeamLogExportMembersReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExportMembersReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGExportMembersReportDetailsToDBX(object: DBTEAMLOGExportMembersReportDetails) -> DBXTeamLogExportMembersReportDetails {
    DBXTeamLogExportMembersReportDetails()
}

func mapDBTEAMLOGExportMembersReportFailDetailsToDBXOptional(object: DBTEAMLOGExportMembersReportFailDetails?) -> DBXTeamLogExportMembersReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExportMembersReportFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGExportMembersReportFailDetailsToDBX(object: DBTEAMLOGExportMembersReportFailDetails) -> DBXTeamLogExportMembersReportFailDetails {
    DBXTeamLogExportMembersReportFailDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGExportMembersReportFailTypeToDBXOptional(object: DBTEAMLOGExportMembersReportFailType?) -> DBXTeamLogExportMembersReportFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExportMembersReportFailTypeToDBX(object: object)
}

func mapDBTEAMLOGExportMembersReportFailTypeToDBX(object: DBTEAMLOGExportMembersReportFailType) -> DBXTeamLogExportMembersReportFailType {
    DBXTeamLogExportMembersReportFailType(description_: object.description_)
}

func mapDBTEAMLOGExportMembersReportTypeToDBXOptional(object: DBTEAMLOGExportMembersReportType?) -> DBXTeamLogExportMembersReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExportMembersReportTypeToDBX(object: object)
}

func mapDBTEAMLOGExportMembersReportTypeToDBX(object: DBTEAMLOGExportMembersReportType) -> DBXTeamLogExportMembersReportType {
    DBXTeamLogExportMembersReportType(description_: object.description_)
}

func mapDBTEAMLOGExtendedVersionHistoryChangePolicyDetailsToDBXOptional(object: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails?)
    -> DBXTeamLogExtendedVersionHistoryChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExtendedVersionHistoryChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGExtendedVersionHistoryChangePolicyDetailsToDBX(object: DBTEAMLOGExtendedVersionHistoryChangePolicyDetails)
    -> DBXTeamLogExtendedVersionHistoryChangePolicyDetails {
    DBXTeamLogExtendedVersionHistoryChangePolicyDetails(
        newValue: mapDBTEAMLOGExtendedVersionHistoryPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGExtendedVersionHistoryPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGExtendedVersionHistoryChangePolicyTypeToDBXOptional(object: DBTEAMLOGExtendedVersionHistoryChangePolicyType?)
    -> DBXTeamLogExtendedVersionHistoryChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExtendedVersionHistoryChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGExtendedVersionHistoryChangePolicyTypeToDBX(object: DBTEAMLOGExtendedVersionHistoryChangePolicyType)
    -> DBXTeamLogExtendedVersionHistoryChangePolicyType {
    DBXTeamLogExtendedVersionHistoryChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGExtendedVersionHistoryPolicyToDBXOptional(object: DBTEAMLOGExtendedVersionHistoryPolicy?) -> DBXTeamLogExtendedVersionHistoryPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExtendedVersionHistoryPolicyToDBX(object: object)
}

func mapDBTEAMLOGExtendedVersionHistoryPolicyToDBX(object: DBTEAMLOGExtendedVersionHistoryPolicy) -> DBXTeamLogExtendedVersionHistoryPolicy {
    if object.isExplicitlyLimited() {
        return DBXTeamLogExtendedVersionHistoryPolicyExplicitlyLimited()
    }
    if object.isExplicitlyUnlimited() {
        return DBXTeamLogExtendedVersionHistoryPolicyExplicitlyUnlimited()
    }
    if object.isImplicitlyLimited() {
        return DBXTeamLogExtendedVersionHistoryPolicyImplicitlyLimited()
    }
    if object.isImplicitlyUnlimited() {
        return DBXTeamLogExtendedVersionHistoryPolicyImplicitlyUnlimited()
    }
    if object.isOther() {
        return DBXTeamLogExtendedVersionHistoryPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusToDBXOptional(object: DBTEAMLOGExternalDriveBackupEligibilityStatus?)
    -> DBXTeamLogExternalDriveBackupEligibilityStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupEligibilityStatusToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusToDBX(object: DBTEAMLOGExternalDriveBackupEligibilityStatus)
    -> DBXTeamLogExternalDriveBackupEligibilityStatus {
    if object.isExceedLicenseCap() {
        return DBXTeamLogExternalDriveBackupEligibilityStatusExceedLicenseCap()
    }
    if object.isSuccess() {
        return DBXTeamLogExternalDriveBackupEligibilityStatusSuccess()
    }
    if object.isOther() {
        return DBXTeamLogExternalDriveBackupEligibilityStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsToDBXOptional(object: DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails?)
    -> DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsToDBX(object: DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails)
    -> DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails {
    DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails(
        desktopDeviceSessionInfo: mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: object.desktopDeviceSessionInfo),
        status: mapDBTEAMLOGExternalDriveBackupEligibilityStatusToDBX(object: object.status),
        numberOfExternalDriveBackup: object.numberOfExternalDriveBackup
    )
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedTypeToDBXOptional(object: DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedType?)
    -> DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedTypeToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupEligibilityStatusCheckedTypeToDBX(object: DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedType)
    -> DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType {
    DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType(description_: object.description_)
}

func mapDBTEAMLOGExternalDriveBackupPolicyToDBXOptional(object: DBTEAMLOGExternalDriveBackupPolicy?) -> DBXTeamLogExternalDriveBackupPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupPolicyToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupPolicyToDBX(object: DBTEAMLOGExternalDriveBackupPolicy) -> DBXTeamLogExternalDriveBackupPolicy {
    if object.isDefault_() {
        return DBXTeamLogExternalDriveBackupPolicyDefault_()
    }
    if object.isDisabled() {
        return DBXTeamLogExternalDriveBackupPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogExternalDriveBackupPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogExternalDriveBackupPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGExternalDriveBackupPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGExternalDriveBackupPolicyChangedDetails?)
    -> DBXTeamLogExternalDriveBackupPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupPolicyChangedDetailsToDBX(object: DBTEAMLOGExternalDriveBackupPolicyChangedDetails)
    -> DBXTeamLogExternalDriveBackupPolicyChangedDetails {
    DBXTeamLogExternalDriveBackupPolicyChangedDetails(
        newValue: mapDBTEAMLOGExternalDriveBackupPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGExternalDriveBackupPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGExternalDriveBackupPolicyChangedTypeToDBXOptional(object: DBTEAMLOGExternalDriveBackupPolicyChangedType?)
    -> DBXTeamLogExternalDriveBackupPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupPolicyChangedTypeToDBX(object: DBTEAMLOGExternalDriveBackupPolicyChangedType)
    -> DBXTeamLogExternalDriveBackupPolicyChangedType {
    DBXTeamLogExternalDriveBackupPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGExternalDriveBackupStatusToDBXOptional(object: DBTEAMLOGExternalDriveBackupStatus?) -> DBXTeamLogExternalDriveBackupStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupStatusToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupStatusToDBX(object: DBTEAMLOGExternalDriveBackupStatus) -> DBXTeamLogExternalDriveBackupStatus {
    if object.isBroken() {
        return DBXTeamLogExternalDriveBackupStatusBroken()
    }
    if object.isCreated() {
        return DBXTeamLogExternalDriveBackupStatusCreated()
    }
    if object.isCreatedOrBroken() {
        return DBXTeamLogExternalDriveBackupStatusCreatedOrBroken()
    }
    if object.isDeleted() {
        return DBXTeamLogExternalDriveBackupStatusDeleted()
    }
    if object.isEmpty() {
        return DBXTeamLogExternalDriveBackupStatusEmpty()
    }
    if object.isUnknown() {
        return DBXTeamLogExternalDriveBackupStatusUnknown()
    }
    if object.isOther() {
        return DBXTeamLogExternalDriveBackupStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGExternalDriveBackupStatusChangedDetailsToDBXOptional(object: DBTEAMLOGExternalDriveBackupStatusChangedDetails?)
    -> DBXTeamLogExternalDriveBackupStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupStatusChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupStatusChangedDetailsToDBX(object: DBTEAMLOGExternalDriveBackupStatusChangedDetails)
    -> DBXTeamLogExternalDriveBackupStatusChangedDetails {
    DBXTeamLogExternalDriveBackupStatusChangedDetails(
        desktopDeviceSessionInfo: mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: object.desktopDeviceSessionInfo),
        previousValue: mapDBTEAMLOGExternalDriveBackupStatusToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGExternalDriveBackupStatusToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGExternalDriveBackupStatusChangedTypeToDBXOptional(object: DBTEAMLOGExternalDriveBackupStatusChangedType?)
    -> DBXTeamLogExternalDriveBackupStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalDriveBackupStatusChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGExternalDriveBackupStatusChangedTypeToDBX(object: DBTEAMLOGExternalDriveBackupStatusChangedType)
    -> DBXTeamLogExternalDriveBackupStatusChangedType {
    DBXTeamLogExternalDriveBackupStatusChangedType(description_: object.description_)
}

func mapDBTEAMLOGExternalSharingCreateReportDetailsToDBXOptional(object: DBTEAMLOGExternalSharingCreateReportDetails?)
    -> DBXTeamLogExternalSharingCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalSharingCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGExternalSharingCreateReportDetailsToDBX(object: DBTEAMLOGExternalSharingCreateReportDetails) -> DBXTeamLogExternalSharingCreateReportDetails {
    DBXTeamLogExternalSharingCreateReportDetails()
}

func mapDBTEAMLOGExternalSharingCreateReportTypeToDBXOptional(object: DBTEAMLOGExternalSharingCreateReportType?) -> DBXTeamLogExternalSharingCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalSharingCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGExternalSharingCreateReportTypeToDBX(object: DBTEAMLOGExternalSharingCreateReportType) -> DBXTeamLogExternalSharingCreateReportType {
    DBXTeamLogExternalSharingCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGExternalSharingReportFailedDetailsToDBXOptional(object: DBTEAMLOGExternalSharingReportFailedDetails?)
    -> DBXTeamLogExternalSharingReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalSharingReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGExternalSharingReportFailedDetailsToDBX(object: DBTEAMLOGExternalSharingReportFailedDetails) -> DBXTeamLogExternalSharingReportFailedDetails {
    DBXTeamLogExternalSharingReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGExternalSharingReportFailedTypeToDBXOptional(object: DBTEAMLOGExternalSharingReportFailedType?) -> DBXTeamLogExternalSharingReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalSharingReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGExternalSharingReportFailedTypeToDBX(object: DBTEAMLOGExternalSharingReportFailedType) -> DBXTeamLogExternalSharingReportFailedType {
    DBXTeamLogExternalSharingReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGExternalUserLogInfoToDBXOptional(object: DBTEAMLOGExternalUserLogInfo?) -> DBXTeamLogExternalUserLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGExternalUserLogInfoToDBX(object: object)
}

func mapDBTEAMLOGExternalUserLogInfoToDBX(object: DBTEAMLOGExternalUserLogInfo) -> DBXTeamLogExternalUserLogInfo {
    DBXTeamLogExternalUserLogInfo(userIdentifier: object.userIdentifier, identifierType: mapDBTEAMLOGIdentifierTypeToDBX(object: object.identifierType))
}

func mapDBTEAMLOGFailureDetailsLogInfoToDBXOptional(object: DBTEAMLOGFailureDetailsLogInfo?) -> DBXTeamLogFailureDetailsLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFailureDetailsLogInfoToDBX(object: object)
}

func mapDBTEAMLOGFailureDetailsLogInfoToDBX(object: DBTEAMLOGFailureDetailsLogInfo) -> DBXTeamLogFailureDetailsLogInfo {
    DBXTeamLogFailureDetailsLogInfo(userFriendlyMessage: object.userFriendlyMessage, technicalErrorMessage: object.technicalErrorMessage)
}

func mapDBTEAMLOGFedAdminRoleToDBXOptional(object: DBTEAMLOGFedAdminRole?) -> DBXTeamLogFedAdminRole? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFedAdminRoleToDBX(object: object)
}

func mapDBTEAMLOGFedAdminRoleToDBX(object: DBTEAMLOGFedAdminRole) -> DBXTeamLogFedAdminRole {
    if object.isEnterpriseAdmin() {
        return DBXTeamLogFedAdminRoleEnterpriseAdmin()
    }
    if object.isNotEnterpriseAdmin() {
        return DBXTeamLogFedAdminRoleNotEnterpriseAdmin()
    }
    if object.isOther() {
        return DBXTeamLogFedAdminRoleOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFedExtraDetailsToDBXOptional(object: DBTEAMLOGFedExtraDetails?) -> DBXTeamLogFedExtraDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFedExtraDetailsToDBX(object: object)
}

func mapDBTEAMLOGFedExtraDetailsToDBX(object: DBTEAMLOGFedExtraDetails) -> DBXTeamLogFedExtraDetails {
    if object.isOrganization() {
        let organization = mapDBTEAMLOGOrganizationDetailsToDBX(object: object.organization)
        return DBXTeamLogFedExtraDetails.factory(swift: .organization(organization.swift))
    }
    if object.isTeam() {
        let team = mapDBTEAMLOGTeamDetailsToDBX(object: object.team)
        return DBXTeamLogFedExtraDetails.factory(swift: .team(team.swift))
    }
    if object.isOther() {
        return DBXTeamLogFedExtraDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFedHandshakeActionToDBXOptional(object: DBTEAMLOGFedHandshakeAction?) -> DBXTeamLogFedHandshakeAction? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFedHandshakeActionToDBX(object: object)
}

func mapDBTEAMLOGFedHandshakeActionToDBX(object: DBTEAMLOGFedHandshakeAction) -> DBXTeamLogFedHandshakeAction {
    if object.isAcceptedInvite() {
        return DBXTeamLogFedHandshakeActionAcceptedInvite()
    }
    if object.isCanceledInvite() {
        return DBXTeamLogFedHandshakeActionCanceledInvite()
    }
    if object.isInviteExpired() {
        return DBXTeamLogFedHandshakeActionInviteExpired()
    }
    if object.isInvited() {
        return DBXTeamLogFedHandshakeActionInvited()
    }
    if object.isRejectedInvite() {
        return DBXTeamLogFedHandshakeActionRejectedInvite()
    }
    if object.isRemovedTeam() {
        return DBXTeamLogFedHandshakeActionRemovedTeam()
    }
    if object.isOther() {
        return DBXTeamLogFedHandshakeActionOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFederationStatusChangeAdditionalInfoToDBXOptional(object: DBTEAMLOGFederationStatusChangeAdditionalInfo?)
    -> DBXTeamLogFederationStatusChangeAdditionalInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFederationStatusChangeAdditionalInfoToDBX(object: object)
}

func mapDBTEAMLOGFederationStatusChangeAdditionalInfoToDBX(object: DBTEAMLOGFederationStatusChangeAdditionalInfo)
    -> DBXTeamLogFederationStatusChangeAdditionalInfo {
    if object.isConnectedTeamName() {
        let connectedTeamName = mapDBTEAMLOGConnectedTeamNameToDBX(object: object.connectedTeamName)
        return DBXTeamLogFederationStatusChangeAdditionalInfo.factory(swift: .connectedTeamName(connectedTeamName.swift))
    }
    if object.isNonTrustedTeamDetails() {
        let nonTrustedTeamDetails = mapDBTEAMLOGNonTrustedTeamDetailsToDBX(object: object.nonTrustedTeamDetails)
        return DBXTeamLogFederationStatusChangeAdditionalInfo.factory(swift: .nonTrustedTeamDetails(nonTrustedTeamDetails.swift))
    }
    if object.isOrganizationName() {
        let organizationName = mapDBTEAMLOGOrganizationNameToDBX(object: object.organizationName)
        return DBXTeamLogFederationStatusChangeAdditionalInfo.factory(swift: .organizationName(organizationName.swift))
    }
    if object.isOther() {
        return DBXTeamLogFederationStatusChangeAdditionalInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFileAddCommentDetailsToDBXOptional(object: DBTEAMLOGFileAddCommentDetails?) -> DBXTeamLogFileAddCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileAddCommentDetailsToDBX(object: DBTEAMLOGFileAddCommentDetails) -> DBXTeamLogFileAddCommentDetails {
    DBXTeamLogFileAddCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileAddCommentTypeToDBXOptional(object: DBTEAMLOGFileAddCommentType?) -> DBXTeamLogFileAddCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileAddCommentTypeToDBX(object: DBTEAMLOGFileAddCommentType) -> DBXTeamLogFileAddCommentType {
    DBXTeamLogFileAddCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileAddDetailsToDBXOptional(object: DBTEAMLOGFileAddDetails?) -> DBXTeamLogFileAddDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileAddDetailsToDBX(object: DBTEAMLOGFileAddDetails) -> DBXTeamLogFileAddDetails {
    DBXTeamLogFileAddDetails()
}

func mapDBTEAMLOGFileAddFromAutomationDetailsToDBXOptional(object: DBTEAMLOGFileAddFromAutomationDetails?) -> DBXTeamLogFileAddFromAutomationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddFromAutomationDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileAddFromAutomationDetailsToDBX(object: DBTEAMLOGFileAddFromAutomationDetails) -> DBXTeamLogFileAddFromAutomationDetails {
    DBXTeamLogFileAddFromAutomationDetails()
}

func mapDBTEAMLOGFileAddFromAutomationTypeToDBXOptional(object: DBTEAMLOGFileAddFromAutomationType?) -> DBXTeamLogFileAddFromAutomationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddFromAutomationTypeToDBX(object: object)
}

func mapDBTEAMLOGFileAddFromAutomationTypeToDBX(object: DBTEAMLOGFileAddFromAutomationType) -> DBXTeamLogFileAddFromAutomationType {
    DBXTeamLogFileAddFromAutomationType(description_: object.description_)
}

func mapDBTEAMLOGFileAddTypeToDBXOptional(object: DBTEAMLOGFileAddType?) -> DBXTeamLogFileAddType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileAddTypeToDBX(object: object)
}

func mapDBTEAMLOGFileAddTypeToDBX(object: DBTEAMLOGFileAddType) -> DBXTeamLogFileAddType {
    DBXTeamLogFileAddType(description_: object.description_)
}

func mapDBTEAMLOGFileChangeCommentSubscriptionDetailsToDBXOptional(object: DBTEAMLOGFileChangeCommentSubscriptionDetails?)
    -> DBXTeamLogFileChangeCommentSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileChangeCommentSubscriptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileChangeCommentSubscriptionDetailsToDBX(object: DBTEAMLOGFileChangeCommentSubscriptionDetails)
    -> DBXTeamLogFileChangeCommentSubscriptionDetails {
    DBXTeamLogFileChangeCommentSubscriptionDetails(
        newValue: mapDBTEAMLOGFileCommentNotificationPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGFileCommentNotificationPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileChangeCommentSubscriptionTypeToDBXOptional(object: DBTEAMLOGFileChangeCommentSubscriptionType?)
    -> DBXTeamLogFileChangeCommentSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileChangeCommentSubscriptionTypeToDBX(object: object)
}

func mapDBTEAMLOGFileChangeCommentSubscriptionTypeToDBX(object: DBTEAMLOGFileChangeCommentSubscriptionType) -> DBXTeamLogFileChangeCommentSubscriptionType {
    DBXTeamLogFileChangeCommentSubscriptionType(description_: object.description_)
}

func mapDBTEAMLOGFileCommentNotificationPolicyToDBXOptional(object: DBTEAMLOGFileCommentNotificationPolicy?) -> DBXTeamLogFileCommentNotificationPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCommentNotificationPolicyToDBX(object: object)
}

func mapDBTEAMLOGFileCommentNotificationPolicyToDBX(object: DBTEAMLOGFileCommentNotificationPolicy) -> DBXTeamLogFileCommentNotificationPolicy {
    if object.isDisabled() {
        return DBXTeamLogFileCommentNotificationPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogFileCommentNotificationPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogFileCommentNotificationPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFileCommentsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGFileCommentsChangePolicyDetails?) -> DBXTeamLogFileCommentsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCommentsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileCommentsChangePolicyDetailsToDBX(object: DBTEAMLOGFileCommentsChangePolicyDetails) -> DBXTeamLogFileCommentsChangePolicyDetails {
    DBXTeamLogFileCommentsChangePolicyDetails(
        newValue: mapDBTEAMLOGFileCommentsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGFileCommentsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileCommentsChangePolicyTypeToDBXOptional(object: DBTEAMLOGFileCommentsChangePolicyType?) -> DBXTeamLogFileCommentsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCommentsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGFileCommentsChangePolicyTypeToDBX(object: DBTEAMLOGFileCommentsChangePolicyType) -> DBXTeamLogFileCommentsChangePolicyType {
    DBXTeamLogFileCommentsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGFileCommentsPolicyToDBXOptional(object: DBTEAMLOGFileCommentsPolicy?) -> DBXTeamLogFileCommentsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCommentsPolicyToDBX(object: object)
}

func mapDBTEAMLOGFileCommentsPolicyToDBX(object: DBTEAMLOGFileCommentsPolicy) -> DBXTeamLogFileCommentsPolicy {
    if object.isDisabled() {
        return DBXTeamLogFileCommentsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogFileCommentsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogFileCommentsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFileCopyDetailsToDBXOptional(object: DBTEAMLOGFileCopyDetails?) -> DBXTeamLogFileCopyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCopyDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileCopyDetailsToDBX(object: DBTEAMLOGFileCopyDetails) -> DBXTeamLogFileCopyDetails {
    DBXTeamLogFileCopyDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: $0) })
}

func mapDBTEAMLOGFileCopyTypeToDBXOptional(object: DBTEAMLOGFileCopyType?) -> DBXTeamLogFileCopyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileCopyTypeToDBX(object: object)
}

func mapDBTEAMLOGFileCopyTypeToDBX(object: DBTEAMLOGFileCopyType) -> DBXTeamLogFileCopyType {
    DBXTeamLogFileCopyType(description_: object.description_)
}

func mapDBTEAMLOGFileDeleteCommentDetailsToDBXOptional(object: DBTEAMLOGFileDeleteCommentDetails?) -> DBXTeamLogFileDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDeleteCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileDeleteCommentDetailsToDBX(object: DBTEAMLOGFileDeleteCommentDetails) -> DBXTeamLogFileDeleteCommentDetails {
    DBXTeamLogFileDeleteCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileDeleteCommentTypeToDBXOptional(object: DBTEAMLOGFileDeleteCommentType?) -> DBXTeamLogFileDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDeleteCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileDeleteCommentTypeToDBX(object: DBTEAMLOGFileDeleteCommentType) -> DBXTeamLogFileDeleteCommentType {
    DBXTeamLogFileDeleteCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileDeleteDetailsToDBXOptional(object: DBTEAMLOGFileDeleteDetails?) -> DBXTeamLogFileDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileDeleteDetailsToDBX(object: DBTEAMLOGFileDeleteDetails) -> DBXTeamLogFileDeleteDetails {
    DBXTeamLogFileDeleteDetails()
}

func mapDBTEAMLOGFileDeleteTypeToDBXOptional(object: DBTEAMLOGFileDeleteType?) -> DBXTeamLogFileDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGFileDeleteTypeToDBX(object: DBTEAMLOGFileDeleteType) -> DBXTeamLogFileDeleteType {
    DBXTeamLogFileDeleteType(description_: object.description_)
}

func mapDBTEAMLOGFileDownloadDetailsToDBXOptional(object: DBTEAMLOGFileDownloadDetails?) -> DBXTeamLogFileDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileDownloadDetailsToDBX(object: DBTEAMLOGFileDownloadDetails) -> DBXTeamLogFileDownloadDetails {
    DBXTeamLogFileDownloadDetails()
}

func mapDBTEAMLOGFileDownloadTypeToDBXOptional(object: DBTEAMLOGFileDownloadType?) -> DBXTeamLogFileDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGFileDownloadTypeToDBX(object: DBTEAMLOGFileDownloadType) -> DBXTeamLogFileDownloadType {
    DBXTeamLogFileDownloadType(description_: object.description_)
}

func mapDBTEAMLOGFileEditCommentDetailsToDBXOptional(object: DBTEAMLOGFileEditCommentDetails?) -> DBXTeamLogFileEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileEditCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileEditCommentDetailsToDBX(object: DBTEAMLOGFileEditCommentDetails) -> DBXTeamLogFileEditCommentDetails {
    DBXTeamLogFileEditCommentDetails(previousCommentText: object.previousCommentText, commentText: object.commentText)
}

func mapDBTEAMLOGFileEditCommentTypeToDBXOptional(object: DBTEAMLOGFileEditCommentType?) -> DBXTeamLogFileEditCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileEditCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileEditCommentTypeToDBX(object: DBTEAMLOGFileEditCommentType) -> DBXTeamLogFileEditCommentType {
    DBXTeamLogFileEditCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileEditDetailsToDBXOptional(object: DBTEAMLOGFileEditDetails?) -> DBXTeamLogFileEditDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileEditDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileEditDetailsToDBX(object: DBTEAMLOGFileEditDetails) -> DBXTeamLogFileEditDetails {
    DBXTeamLogFileEditDetails()
}

func mapDBTEAMLOGFileEditTypeToDBXOptional(object: DBTEAMLOGFileEditType?) -> DBXTeamLogFileEditType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileEditTypeToDBX(object: object)
}

func mapDBTEAMLOGFileEditTypeToDBX(object: DBTEAMLOGFileEditType) -> DBXTeamLogFileEditType {
    DBXTeamLogFileEditType(description_: object.description_)
}

func mapDBTEAMLOGFileGetCopyReferenceDetailsToDBXOptional(object: DBTEAMLOGFileGetCopyReferenceDetails?) -> DBXTeamLogFileGetCopyReferenceDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileGetCopyReferenceDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileGetCopyReferenceDetailsToDBX(object: DBTEAMLOGFileGetCopyReferenceDetails) -> DBXTeamLogFileGetCopyReferenceDetails {
    DBXTeamLogFileGetCopyReferenceDetails()
}

func mapDBTEAMLOGFileGetCopyReferenceTypeToDBXOptional(object: DBTEAMLOGFileGetCopyReferenceType?) -> DBXTeamLogFileGetCopyReferenceType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileGetCopyReferenceTypeToDBX(object: object)
}

func mapDBTEAMLOGFileGetCopyReferenceTypeToDBX(object: DBTEAMLOGFileGetCopyReferenceType) -> DBXTeamLogFileGetCopyReferenceType {
    DBXTeamLogFileGetCopyReferenceType(description_: object.description_)
}

func mapDBTEAMLOGFileLikeCommentDetailsToDBXOptional(object: DBTEAMLOGFileLikeCommentDetails?) -> DBXTeamLogFileLikeCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLikeCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileLikeCommentDetailsToDBX(object: DBTEAMLOGFileLikeCommentDetails) -> DBXTeamLogFileLikeCommentDetails {
    DBXTeamLogFileLikeCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileLikeCommentTypeToDBXOptional(object: DBTEAMLOGFileLikeCommentType?) -> DBXTeamLogFileLikeCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLikeCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileLikeCommentTypeToDBX(object: DBTEAMLOGFileLikeCommentType) -> DBXTeamLogFileLikeCommentType {
    DBXTeamLogFileLikeCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileLockingLockStatusChangedDetailsToDBXOptional(object: DBTEAMLOGFileLockingLockStatusChangedDetails?)
    -> DBXTeamLogFileLockingLockStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLockingLockStatusChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileLockingLockStatusChangedDetailsToDBX(object: DBTEAMLOGFileLockingLockStatusChangedDetails)
    -> DBXTeamLogFileLockingLockStatusChangedDetails {
    DBXTeamLogFileLockingLockStatusChangedDetails(
        previousValue: mapDBTEAMLOGLockStatusToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGLockStatusToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGFileLockingLockStatusChangedTypeToDBXOptional(object: DBTEAMLOGFileLockingLockStatusChangedType?)
    -> DBXTeamLogFileLockingLockStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLockingLockStatusChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFileLockingLockStatusChangedTypeToDBX(object: DBTEAMLOGFileLockingLockStatusChangedType) -> DBXTeamLogFileLockingLockStatusChangedType {
    DBXTeamLogFileLockingLockStatusChangedType(description_: object.description_)
}

func mapDBTEAMLOGFileLockingPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGFileLockingPolicyChangedDetails?) -> DBXTeamLogFileLockingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLockingPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileLockingPolicyChangedDetailsToDBX(object: DBTEAMLOGFileLockingPolicyChangedDetails) -> DBXTeamLogFileLockingPolicyChangedDetails {
    DBXTeamLogFileLockingPolicyChangedDetails(
        newValue: mapDBTEAMPOLICIESFileLockingPolicyStateToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESFileLockingPolicyStateToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileLockingPolicyChangedTypeToDBXOptional(object: DBTEAMLOGFileLockingPolicyChangedType?) -> DBXTeamLogFileLockingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLockingPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFileLockingPolicyChangedTypeToDBX(object: DBTEAMLOGFileLockingPolicyChangedType) -> DBXTeamLogFileLockingPolicyChangedType {
    DBXTeamLogFileLockingPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGFileOrFolderLogInfoToDBXOptional(object: DBTEAMLOGFileOrFolderLogInfo?) -> DBXTeamLogFileOrFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileOrFolderLogInfoToDBX(object: object)
}

func mapDBTEAMLOGFileOrFolderLogInfoToDBX(object: DBTEAMLOGFileOrFolderLogInfo) -> DBXTeamLogFileOrFolderLogInfo {
    DBXTeamLogFileOrFolderLogInfo(
        path: mapDBTEAMLOGPathLogInfoToDBX(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize
    )
}

func mapDBTEAMLOGFileLogInfoToDBXOptional(object: DBTEAMLOGFileLogInfo?) -> DBXTeamLogFileLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileLogInfoToDBX(object: object)
}

func mapDBTEAMLOGFileLogInfoToDBX(object: DBTEAMLOGFileLogInfo) -> DBXTeamLogFileLogInfo {
    DBXTeamLogFileLogInfo(
        path: mapDBTEAMLOGPathLogInfoToDBX(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize
    )
}

func mapDBTEAMLOGFileMoveDetailsToDBXOptional(object: DBTEAMLOGFileMoveDetails?) -> DBXTeamLogFileMoveDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileMoveDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileMoveDetailsToDBX(object: DBTEAMLOGFileMoveDetails) -> DBXTeamLogFileMoveDetails {
    DBXTeamLogFileMoveDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: $0) })
}

func mapDBTEAMLOGFileMoveTypeToDBXOptional(object: DBTEAMLOGFileMoveType?) -> DBXTeamLogFileMoveType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileMoveTypeToDBX(object: object)
}

func mapDBTEAMLOGFileMoveTypeToDBX(object: DBTEAMLOGFileMoveType) -> DBXTeamLogFileMoveType {
    DBXTeamLogFileMoveType(description_: object.description_)
}

func mapDBTEAMLOGFilePermanentlyDeleteDetailsToDBXOptional(object: DBTEAMLOGFilePermanentlyDeleteDetails?) -> DBXTeamLogFilePermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFilePermanentlyDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGFilePermanentlyDeleteDetailsToDBX(object: DBTEAMLOGFilePermanentlyDeleteDetails) -> DBXTeamLogFilePermanentlyDeleteDetails {
    DBXTeamLogFilePermanentlyDeleteDetails()
}

func mapDBTEAMLOGFilePermanentlyDeleteTypeToDBXOptional(object: DBTEAMLOGFilePermanentlyDeleteType?) -> DBXTeamLogFilePermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFilePermanentlyDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGFilePermanentlyDeleteTypeToDBX(object: DBTEAMLOGFilePermanentlyDeleteType) -> DBXTeamLogFilePermanentlyDeleteType {
    DBXTeamLogFilePermanentlyDeleteType(description_: object.description_)
}

func mapDBTEAMLOGFilePreviewDetailsToDBXOptional(object: DBTEAMLOGFilePreviewDetails?) -> DBXTeamLogFilePreviewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFilePreviewDetailsToDBX(object: object)
}

func mapDBTEAMLOGFilePreviewDetailsToDBX(object: DBTEAMLOGFilePreviewDetails) -> DBXTeamLogFilePreviewDetails {
    DBXTeamLogFilePreviewDetails()
}

func mapDBTEAMLOGFilePreviewTypeToDBXOptional(object: DBTEAMLOGFilePreviewType?) -> DBXTeamLogFilePreviewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFilePreviewTypeToDBX(object: object)
}

func mapDBTEAMLOGFilePreviewTypeToDBX(object: DBTEAMLOGFilePreviewType) -> DBXTeamLogFilePreviewType {
    DBXTeamLogFilePreviewType(description_: object.description_)
}

func mapDBTEAMLOGFileProviderMigrationPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGFileProviderMigrationPolicyChangedDetails?)
    -> DBXTeamLogFileProviderMigrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileProviderMigrationPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileProviderMigrationPolicyChangedDetailsToDBX(object: DBTEAMLOGFileProviderMigrationPolicyChangedDetails)
    -> DBXTeamLogFileProviderMigrationPolicyChangedDetails {
    DBXTeamLogFileProviderMigrationPolicyChangedDetails(
        newValue: mapDBTEAMPOLICIESFileProviderMigrationPolicyStateToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESFileProviderMigrationPolicyStateToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileProviderMigrationPolicyChangedTypeToDBXOptional(object: DBTEAMLOGFileProviderMigrationPolicyChangedType?)
    -> DBXTeamLogFileProviderMigrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileProviderMigrationPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFileProviderMigrationPolicyChangedTypeToDBX(object: DBTEAMLOGFileProviderMigrationPolicyChangedType)
    -> DBXTeamLogFileProviderMigrationPolicyChangedType {
    DBXTeamLogFileProviderMigrationPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGFileRenameDetailsToDBXOptional(object: DBTEAMLOGFileRenameDetails?) -> DBXTeamLogFileRenameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRenameDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRenameDetailsToDBX(object: DBTEAMLOGFileRenameDetails) -> DBXTeamLogFileRenameDetails {
    DBXTeamLogFileRenameDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: $0) })
}

func mapDBTEAMLOGFileRenameTypeToDBXOptional(object: DBTEAMLOGFileRenameType?) -> DBXTeamLogFileRenameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRenameTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRenameTypeToDBX(object: DBTEAMLOGFileRenameType) -> DBXTeamLogFileRenameType {
    DBXTeamLogFileRenameType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestChangeDetailsToDBXOptional(object: DBTEAMLOGFileRequestChangeDetails?) -> DBXTeamLogFileRequestChangeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestChangeDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestChangeDetailsToDBX(object: DBTEAMLOGFileRequestChangeDetails) -> DBXTeamLogFileRequestChangeDetails {
    DBXTeamLogFileRequestChangeDetails(
        newDetails: mapDBTEAMLOGFileRequestDetailsToDBX(object: object.dNewDetails),
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: object.previousDetails)
    )
}

func mapDBTEAMLOGFileRequestChangeTypeToDBXOptional(object: DBTEAMLOGFileRequestChangeType?) -> DBXTeamLogFileRequestChangeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestChangeTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestChangeTypeToDBX(object: DBTEAMLOGFileRequestChangeType) -> DBXTeamLogFileRequestChangeType {
    DBXTeamLogFileRequestChangeType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestCloseDetailsToDBXOptional(object: DBTEAMLOGFileRequestCloseDetails?) -> DBXTeamLogFileRequestCloseDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestCloseDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestCloseDetailsToDBX(object: DBTEAMLOGFileRequestCloseDetails) -> DBXTeamLogFileRequestCloseDetails {
    DBXTeamLogFileRequestCloseDetails(
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: object.previousDetails)
    )
}

func mapDBTEAMLOGFileRequestCloseTypeToDBXOptional(object: DBTEAMLOGFileRequestCloseType?) -> DBXTeamLogFileRequestCloseType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestCloseTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestCloseTypeToDBX(object: DBTEAMLOGFileRequestCloseType) -> DBXTeamLogFileRequestCloseType {
    DBXTeamLogFileRequestCloseType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestCreateDetailsToDBXOptional(object: DBTEAMLOGFileRequestCreateDetails?) -> DBXTeamLogFileRequestCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestCreateDetailsToDBX(object: DBTEAMLOGFileRequestCreateDetails) -> DBXTeamLogFileRequestCreateDetails {
    DBXTeamLogFileRequestCreateDetails(
        fileRequestId: object.fileRequestId,
        requestDetails: mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: object.requestDetails)
    )
}

func mapDBTEAMLOGFileRequestCreateTypeToDBXOptional(object: DBTEAMLOGFileRequestCreateType?) -> DBXTeamLogFileRequestCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestCreateTypeToDBX(object: DBTEAMLOGFileRequestCreateType) -> DBXTeamLogFileRequestCreateType {
    DBXTeamLogFileRequestCreateType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestDeadlineToDBXOptional(object: DBTEAMLOGFileRequestDeadline?) -> DBXTeamLogFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestDeadlineToDBX(object: object)
}

func mapDBTEAMLOGFileRequestDeadlineToDBX(object: DBTEAMLOGFileRequestDeadline) -> DBXTeamLogFileRequestDeadline {
    DBXTeamLogFileRequestDeadline(deadline: object.deadline, allowLateUploads: object.allowLateUploads)
}

func mapDBTEAMLOGFileRequestDeleteDetailsToDBXOptional(object: DBTEAMLOGFileRequestDeleteDetails?) -> DBXTeamLogFileRequestDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestDeleteDetailsToDBX(object: DBTEAMLOGFileRequestDeleteDetails) -> DBXTeamLogFileRequestDeleteDetails {
    DBXTeamLogFileRequestDeleteDetails(
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: object.previousDetails)
    )
}

func mapDBTEAMLOGFileRequestDeleteTypeToDBXOptional(object: DBTEAMLOGFileRequestDeleteType?) -> DBXTeamLogFileRequestDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestDeleteTypeToDBX(object: DBTEAMLOGFileRequestDeleteType) -> DBXTeamLogFileRequestDeleteType {
    DBXTeamLogFileRequestDeleteType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: DBTEAMLOGFileRequestDetails?) -> DBXTeamLogFileRequestDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestDetailsToDBX(object: DBTEAMLOGFileRequestDetails) -> DBXTeamLogFileRequestDetails {
    DBXTeamLogFileRequestDetails(assetIndex: object.assetIndex, deadline: mapDBTEAMLOGFileRequestDeadlineToDBXOptional(object: object.deadline))
}

func mapDBTEAMLOGFileRequestReceiveFileDetailsToDBXOptional(object: DBTEAMLOGFileRequestReceiveFileDetails?) -> DBXTeamLogFileRequestReceiveFileDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestReceiveFileDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestReceiveFileDetailsToDBX(object: DBTEAMLOGFileRequestReceiveFileDetails) -> DBXTeamLogFileRequestReceiveFileDetails {
    DBXTeamLogFileRequestReceiveFileDetails(
        submittedFileNames: object.submittedFileNames,
        fileRequestId: object.fileRequestId,
        fileRequestDetails: mapDBTEAMLOGFileRequestDetailsToDBXOptional(object: object.fileRequestDetails),
        submitterName: object.submitterName,
        submitterEmail: object.submitterEmail
    )
}

func mapDBTEAMLOGFileRequestReceiveFileTypeToDBXOptional(object: DBTEAMLOGFileRequestReceiveFileType?) -> DBXTeamLogFileRequestReceiveFileType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestReceiveFileTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestReceiveFileTypeToDBX(object: DBTEAMLOGFileRequestReceiveFileType) -> DBXTeamLogFileRequestReceiveFileType {
    DBXTeamLogFileRequestReceiveFileType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGFileRequestsChangePolicyDetails?) -> DBXTeamLogFileRequestsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsChangePolicyDetailsToDBX(object: DBTEAMLOGFileRequestsChangePolicyDetails) -> DBXTeamLogFileRequestsChangePolicyDetails {
    DBXTeamLogFileRequestsChangePolicyDetails(
        newValue: mapDBTEAMLOGFileRequestsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGFileRequestsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileRequestsChangePolicyTypeToDBXOptional(object: DBTEAMLOGFileRequestsChangePolicyType?) -> DBXTeamLogFileRequestsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsChangePolicyTypeToDBX(object: DBTEAMLOGFileRequestsChangePolicyType) -> DBXTeamLogFileRequestsChangePolicyType {
    DBXTeamLogFileRequestsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestsEmailsEnabledDetailsToDBXOptional(object: DBTEAMLOGFileRequestsEmailsEnabledDetails?)
    -> DBXTeamLogFileRequestsEmailsEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsEmailsEnabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsEmailsEnabledDetailsToDBX(object: DBTEAMLOGFileRequestsEmailsEnabledDetails) -> DBXTeamLogFileRequestsEmailsEnabledDetails {
    DBXTeamLogFileRequestsEmailsEnabledDetails()
}

func mapDBTEAMLOGFileRequestsEmailsEnabledTypeToDBXOptional(object: DBTEAMLOGFileRequestsEmailsEnabledType?) -> DBXTeamLogFileRequestsEmailsEnabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsEmailsEnabledTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsEmailsEnabledTypeToDBX(object: DBTEAMLOGFileRequestsEmailsEnabledType) -> DBXTeamLogFileRequestsEmailsEnabledType {
    DBXTeamLogFileRequestsEmailsEnabledType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsToDBXOptional(object: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails?)
    -> DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsToDBX(object: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails)
    -> DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails {
    DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails()
}

func mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeToDBXOptional(object: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType?)
    -> DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyTypeToDBX(object: DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType)
    -> DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType {
    DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType(description_: object.description_)
}

func mapDBTEAMLOGFileRequestsPolicyToDBXOptional(object: DBTEAMLOGFileRequestsPolicy?) -> DBXTeamLogFileRequestsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRequestsPolicyToDBX(object: object)
}

func mapDBTEAMLOGFileRequestsPolicyToDBX(object: DBTEAMLOGFileRequestsPolicy) -> DBXTeamLogFileRequestsPolicy {
    if object.isDisabled() {
        return DBXTeamLogFileRequestsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogFileRequestsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogFileRequestsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFileResolveCommentDetailsToDBXOptional(object: DBTEAMLOGFileResolveCommentDetails?) -> DBXTeamLogFileResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileResolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileResolveCommentDetailsToDBX(object: DBTEAMLOGFileResolveCommentDetails) -> DBXTeamLogFileResolveCommentDetails {
    DBXTeamLogFileResolveCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileResolveCommentTypeToDBXOptional(object: DBTEAMLOGFileResolveCommentType?) -> DBXTeamLogFileResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileResolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileResolveCommentTypeToDBX(object: DBTEAMLOGFileResolveCommentType) -> DBXTeamLogFileResolveCommentType {
    DBXTeamLogFileResolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileRestoreDetailsToDBXOptional(object: DBTEAMLOGFileRestoreDetails?) -> DBXTeamLogFileRestoreDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRestoreDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRestoreDetailsToDBX(object: DBTEAMLOGFileRestoreDetails) -> DBXTeamLogFileRestoreDetails {
    DBXTeamLogFileRestoreDetails()
}

func mapDBTEAMLOGFileRestoreTypeToDBXOptional(object: DBTEAMLOGFileRestoreType?) -> DBXTeamLogFileRestoreType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRestoreTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRestoreTypeToDBX(object: DBTEAMLOGFileRestoreType) -> DBXTeamLogFileRestoreType {
    DBXTeamLogFileRestoreType(description_: object.description_)
}

func mapDBTEAMLOGFileRevertDetailsToDBXOptional(object: DBTEAMLOGFileRevertDetails?) -> DBXTeamLogFileRevertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRevertDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRevertDetailsToDBX(object: DBTEAMLOGFileRevertDetails) -> DBXTeamLogFileRevertDetails {
    DBXTeamLogFileRevertDetails()
}

func mapDBTEAMLOGFileRevertTypeToDBXOptional(object: DBTEAMLOGFileRevertType?) -> DBXTeamLogFileRevertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRevertTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRevertTypeToDBX(object: DBTEAMLOGFileRevertType) -> DBXTeamLogFileRevertType {
    DBXTeamLogFileRevertType(description_: object.description_)
}

func mapDBTEAMLOGFileRollbackChangesDetailsToDBXOptional(object: DBTEAMLOGFileRollbackChangesDetails?) -> DBXTeamLogFileRollbackChangesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRollbackChangesDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileRollbackChangesDetailsToDBX(object: DBTEAMLOGFileRollbackChangesDetails) -> DBXTeamLogFileRollbackChangesDetails {
    DBXTeamLogFileRollbackChangesDetails()
}

func mapDBTEAMLOGFileRollbackChangesTypeToDBXOptional(object: DBTEAMLOGFileRollbackChangesType?) -> DBXTeamLogFileRollbackChangesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileRollbackChangesTypeToDBX(object: object)
}

func mapDBTEAMLOGFileRollbackChangesTypeToDBX(object: DBTEAMLOGFileRollbackChangesType) -> DBXTeamLogFileRollbackChangesType {
    DBXTeamLogFileRollbackChangesType(description_: object.description_)
}

func mapDBTEAMLOGFileSaveCopyReferenceDetailsToDBXOptional(object: DBTEAMLOGFileSaveCopyReferenceDetails?) -> DBXTeamLogFileSaveCopyReferenceDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileSaveCopyReferenceDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileSaveCopyReferenceDetailsToDBX(object: DBTEAMLOGFileSaveCopyReferenceDetails) -> DBXTeamLogFileSaveCopyReferenceDetails {
    DBXTeamLogFileSaveCopyReferenceDetails(
        relocateActionDetails: object.relocateActionDetails
            .compactMap { mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: $0) }
    )
}

func mapDBTEAMLOGFileSaveCopyReferenceTypeToDBXOptional(object: DBTEAMLOGFileSaveCopyReferenceType?) -> DBXTeamLogFileSaveCopyReferenceType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileSaveCopyReferenceTypeToDBX(object: object)
}

func mapDBTEAMLOGFileSaveCopyReferenceTypeToDBX(object: DBTEAMLOGFileSaveCopyReferenceType) -> DBXTeamLogFileSaveCopyReferenceType {
    DBXTeamLogFileSaveCopyReferenceType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersFileAddDetailsToDBXOptional(object: DBTEAMLOGFileTransfersFileAddDetails?) -> DBXTeamLogFileTransfersFileAddDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersFileAddDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersFileAddDetailsToDBX(object: DBTEAMLOGFileTransfersFileAddDetails) -> DBXTeamLogFileTransfersFileAddDetails {
    DBXTeamLogFileTransfersFileAddDetails(fileTransferId: object.fileTransferId)
}

func mapDBTEAMLOGFileTransfersFileAddTypeToDBXOptional(object: DBTEAMLOGFileTransfersFileAddType?) -> DBXTeamLogFileTransfersFileAddType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersFileAddTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersFileAddTypeToDBX(object: DBTEAMLOGFileTransfersFileAddType) -> DBXTeamLogFileTransfersFileAddType {
    DBXTeamLogFileTransfersFileAddType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersPolicyToDBXOptional(object: DBTEAMLOGFileTransfersPolicy?) -> DBXTeamLogFileTransfersPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersPolicyToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersPolicyToDBX(object: DBTEAMLOGFileTransfersPolicy) -> DBXTeamLogFileTransfersPolicy {
    if object.isDisabled() {
        return DBXTeamLogFileTransfersPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogFileTransfersPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogFileTransfersPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFileTransfersPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGFileTransfersPolicyChangedDetails?)
    -> DBXTeamLogFileTransfersPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersPolicyChangedDetailsToDBX(object: DBTEAMLOGFileTransfersPolicyChangedDetails) -> DBXTeamLogFileTransfersPolicyChangedDetails {
    DBXTeamLogFileTransfersPolicyChangedDetails(
        newValue: mapDBTEAMLOGFileTransfersPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGFileTransfersPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGFileTransfersPolicyChangedTypeToDBXOptional(object: DBTEAMLOGFileTransfersPolicyChangedType?) -> DBXTeamLogFileTransfersPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersPolicyChangedTypeToDBX(object: DBTEAMLOGFileTransfersPolicyChangedType) -> DBXTeamLogFileTransfersPolicyChangedType {
    DBXTeamLogFileTransfersPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersTransferDeleteDetailsToDBXOptional(object: DBTEAMLOGFileTransfersTransferDeleteDetails?)
    -> DBXTeamLogFileTransfersTransferDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferDeleteDetailsToDBX(object: DBTEAMLOGFileTransfersTransferDeleteDetails) -> DBXTeamLogFileTransfersTransferDeleteDetails {
    DBXTeamLogFileTransfersTransferDeleteDetails(fileTransferId: object.fileTransferId)
}

func mapDBTEAMLOGFileTransfersTransferDeleteTypeToDBXOptional(object: DBTEAMLOGFileTransfersTransferDeleteType?) -> DBXTeamLogFileTransfersTransferDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferDeleteTypeToDBX(object: DBTEAMLOGFileTransfersTransferDeleteType) -> DBXTeamLogFileTransfersTransferDeleteType {
    DBXTeamLogFileTransfersTransferDeleteType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersTransferDownloadDetailsToDBXOptional(object: DBTEAMLOGFileTransfersTransferDownloadDetails?)
    -> DBXTeamLogFileTransfersTransferDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferDownloadDetailsToDBX(object: DBTEAMLOGFileTransfersTransferDownloadDetails)
    -> DBXTeamLogFileTransfersTransferDownloadDetails {
    DBXTeamLogFileTransfersTransferDownloadDetails(fileTransferId: object.fileTransferId)
}

func mapDBTEAMLOGFileTransfersTransferDownloadTypeToDBXOptional(object: DBTEAMLOGFileTransfersTransferDownloadType?)
    -> DBXTeamLogFileTransfersTransferDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferDownloadTypeToDBX(object: DBTEAMLOGFileTransfersTransferDownloadType) -> DBXTeamLogFileTransfersTransferDownloadType {
    DBXTeamLogFileTransfersTransferDownloadType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersTransferSendDetailsToDBXOptional(object: DBTEAMLOGFileTransfersTransferSendDetails?)
    -> DBXTeamLogFileTransfersTransferSendDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferSendDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferSendDetailsToDBX(object: DBTEAMLOGFileTransfersTransferSendDetails) -> DBXTeamLogFileTransfersTransferSendDetails {
    DBXTeamLogFileTransfersTransferSendDetails(fileTransferId: object.fileTransferId)
}

func mapDBTEAMLOGFileTransfersTransferSendTypeToDBXOptional(object: DBTEAMLOGFileTransfersTransferSendType?) -> DBXTeamLogFileTransfersTransferSendType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferSendTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferSendTypeToDBX(object: DBTEAMLOGFileTransfersTransferSendType) -> DBXTeamLogFileTransfersTransferSendType {
    DBXTeamLogFileTransfersTransferSendType(description_: object.description_)
}

func mapDBTEAMLOGFileTransfersTransferViewDetailsToDBXOptional(object: DBTEAMLOGFileTransfersTransferViewDetails?)
    -> DBXTeamLogFileTransfersTransferViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferViewDetailsToDBX(object: DBTEAMLOGFileTransfersTransferViewDetails) -> DBXTeamLogFileTransfersTransferViewDetails {
    DBXTeamLogFileTransfersTransferViewDetails(fileTransferId: object.fileTransferId)
}

func mapDBTEAMLOGFileTransfersTransferViewTypeToDBXOptional(object: DBTEAMLOGFileTransfersTransferViewType?) -> DBXTeamLogFileTransfersTransferViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileTransfersTransferViewTypeToDBX(object: object)
}

func mapDBTEAMLOGFileTransfersTransferViewTypeToDBX(object: DBTEAMLOGFileTransfersTransferViewType) -> DBXTeamLogFileTransfersTransferViewType {
    DBXTeamLogFileTransfersTransferViewType(description_: object.description_)
}

func mapDBTEAMLOGFileUnlikeCommentDetailsToDBXOptional(object: DBTEAMLOGFileUnlikeCommentDetails?) -> DBXTeamLogFileUnlikeCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileUnlikeCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileUnlikeCommentDetailsToDBX(object: DBTEAMLOGFileUnlikeCommentDetails) -> DBXTeamLogFileUnlikeCommentDetails {
    DBXTeamLogFileUnlikeCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileUnlikeCommentTypeToDBXOptional(object: DBTEAMLOGFileUnlikeCommentType?) -> DBXTeamLogFileUnlikeCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileUnlikeCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileUnlikeCommentTypeToDBX(object: DBTEAMLOGFileUnlikeCommentType) -> DBXTeamLogFileUnlikeCommentType {
    DBXTeamLogFileUnlikeCommentType(description_: object.description_)
}

func mapDBTEAMLOGFileUnresolveCommentDetailsToDBXOptional(object: DBTEAMLOGFileUnresolveCommentDetails?) -> DBXTeamLogFileUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileUnresolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGFileUnresolveCommentDetailsToDBX(object: DBTEAMLOGFileUnresolveCommentDetails) -> DBXTeamLogFileUnresolveCommentDetails {
    DBXTeamLogFileUnresolveCommentDetails(commentText: object.commentText)
}

func mapDBTEAMLOGFileUnresolveCommentTypeToDBXOptional(object: DBTEAMLOGFileUnresolveCommentType?) -> DBXTeamLogFileUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFileUnresolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGFileUnresolveCommentTypeToDBX(object: DBTEAMLOGFileUnresolveCommentType) -> DBXTeamLogFileUnresolveCommentType {
    DBXTeamLogFileUnresolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyToDBXOptional(object: DBTEAMLOGFolderLinkRestrictionPolicy?) -> DBXTeamLogFolderLinkRestrictionPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderLinkRestrictionPolicyToDBX(object: object)
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyToDBX(object: DBTEAMLOGFolderLinkRestrictionPolicy) -> DBXTeamLogFolderLinkRestrictionPolicy {
    if object.isDisabled() {
        return DBXTeamLogFolderLinkRestrictionPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogFolderLinkRestrictionPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogFolderLinkRestrictionPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGFolderLinkRestrictionPolicyChangedDetails?)
    -> DBXTeamLogFolderLinkRestrictionPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderLinkRestrictionPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyChangedDetailsToDBX(object: DBTEAMLOGFolderLinkRestrictionPolicyChangedDetails)
    -> DBXTeamLogFolderLinkRestrictionPolicyChangedDetails {
    DBXTeamLogFolderLinkRestrictionPolicyChangedDetails(
        newValue: mapDBTEAMLOGFolderLinkRestrictionPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGFolderLinkRestrictionPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyChangedTypeToDBXOptional(object: DBTEAMLOGFolderLinkRestrictionPolicyChangedType?)
    -> DBXTeamLogFolderLinkRestrictionPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderLinkRestrictionPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFolderLinkRestrictionPolicyChangedTypeToDBX(object: DBTEAMLOGFolderLinkRestrictionPolicyChangedType)
    -> DBXTeamLogFolderLinkRestrictionPolicyChangedType {
    DBXTeamLogFolderLinkRestrictionPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGFolderLogInfoToDBXOptional(object: DBTEAMLOGFolderLogInfo?) -> DBXTeamLogFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderLogInfoToDBX(object: object)
}

func mapDBTEAMLOGFolderLogInfoToDBX(object: DBTEAMLOGFolderLogInfo) -> DBXTeamLogFolderLogInfo {
    DBXTeamLogFolderLogInfo(
        path: mapDBTEAMLOGPathLogInfoToDBX(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize,
        fileCount: object.fileCount
    )
}

func mapDBTEAMLOGFolderOverviewDescriptionChangedDetailsToDBXOptional(object: DBTEAMLOGFolderOverviewDescriptionChangedDetails?)
    -> DBXTeamLogFolderOverviewDescriptionChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewDescriptionChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewDescriptionChangedDetailsToDBX(object: DBTEAMLOGFolderOverviewDescriptionChangedDetails)
    -> DBXTeamLogFolderOverviewDescriptionChangedDetails {
    DBXTeamLogFolderOverviewDescriptionChangedDetails(folderOverviewLocationAsset: object.folderOverviewLocationAsset)
}

func mapDBTEAMLOGFolderOverviewDescriptionChangedTypeToDBXOptional(object: DBTEAMLOGFolderOverviewDescriptionChangedType?)
    -> DBXTeamLogFolderOverviewDescriptionChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewDescriptionChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewDescriptionChangedTypeToDBX(object: DBTEAMLOGFolderOverviewDescriptionChangedType)
    -> DBXTeamLogFolderOverviewDescriptionChangedType {
    DBXTeamLogFolderOverviewDescriptionChangedType(description_: object.description_)
}

func mapDBTEAMLOGFolderOverviewItemPinnedDetailsToDBXOptional(object: DBTEAMLOGFolderOverviewItemPinnedDetails?) -> DBXTeamLogFolderOverviewItemPinnedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewItemPinnedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewItemPinnedDetailsToDBX(object: DBTEAMLOGFolderOverviewItemPinnedDetails) -> DBXTeamLogFolderOverviewItemPinnedDetails {
    DBXTeamLogFolderOverviewItemPinnedDetails(
        folderOverviewLocationAsset: object.folderOverviewLocationAsset,
        pinnedItemsAssetIndices: object.pinnedItemsAssetIndices
    )
}

func mapDBTEAMLOGFolderOverviewItemPinnedTypeToDBXOptional(object: DBTEAMLOGFolderOverviewItemPinnedType?) -> DBXTeamLogFolderOverviewItemPinnedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewItemPinnedTypeToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewItemPinnedTypeToDBX(object: DBTEAMLOGFolderOverviewItemPinnedType) -> DBXTeamLogFolderOverviewItemPinnedType {
    DBXTeamLogFolderOverviewItemPinnedType(description_: object.description_)
}

func mapDBTEAMLOGFolderOverviewItemUnpinnedDetailsToDBXOptional(object: DBTEAMLOGFolderOverviewItemUnpinnedDetails?)
    -> DBXTeamLogFolderOverviewItemUnpinnedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewItemUnpinnedDetailsToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewItemUnpinnedDetailsToDBX(object: DBTEAMLOGFolderOverviewItemUnpinnedDetails) -> DBXTeamLogFolderOverviewItemUnpinnedDetails {
    DBXTeamLogFolderOverviewItemUnpinnedDetails(
        folderOverviewLocationAsset: object.folderOverviewLocationAsset,
        pinnedItemsAssetIndices: object.pinnedItemsAssetIndices
    )
}

func mapDBTEAMLOGFolderOverviewItemUnpinnedTypeToDBXOptional(object: DBTEAMLOGFolderOverviewItemUnpinnedType?) -> DBXTeamLogFolderOverviewItemUnpinnedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGFolderOverviewItemUnpinnedTypeToDBX(object: object)
}

func mapDBTEAMLOGFolderOverviewItemUnpinnedTypeToDBX(object: DBTEAMLOGFolderOverviewItemUnpinnedType) -> DBXTeamLogFolderOverviewItemUnpinnedType {
    DBXTeamLogFolderOverviewItemUnpinnedType(description_: object.description_)
}

func mapDBTEAMLOGGeoLocationLogInfoToDBXOptional(object: DBTEAMLOGGeoLocationLogInfo?) -> DBXTeamLogGeoLocationLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGeoLocationLogInfoToDBX(object: object)
}

func mapDBTEAMLOGGeoLocationLogInfoToDBX(object: DBTEAMLOGGeoLocationLogInfo) -> DBXTeamLogGeoLocationLogInfo {
    DBXTeamLogGeoLocationLogInfo(ipAddress: object.ipAddress, city: object.city, region: object.region, country: object.country)
}

func mapDBTEAMLOGGetTeamEventsArgToDBXOptional(object: DBTEAMLOGGetTeamEventsArg?) -> DBXTeamLogGetTeamEventsArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGetTeamEventsArgToDBX(object: object)
}

func mapDBTEAMLOGGetTeamEventsArgToDBX(object: DBTEAMLOGGetTeamEventsArg) -> DBXTeamLogGetTeamEventsArg {
    DBXTeamLogGetTeamEventsArg(
        limit: object.limit,
        accountId: object.accountId,
        time: mapDBTEAMCOMMONTimeRangeToDBXOptional(object: object.time),
        category: mapDBTEAMLOGEventCategoryToDBXOptional(object: object.category),
        eventType: mapDBTEAMLOGEventTypeArgToDBXOptional(object: object.eventType)
    )
}

func mapDBTEAMLOGGetTeamEventsContinueArgToDBXOptional(object: DBTEAMLOGGetTeamEventsContinueArg?) -> DBXTeamLogGetTeamEventsContinueArg? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGetTeamEventsContinueArgToDBX(object: object)
}

func mapDBTEAMLOGGetTeamEventsContinueArgToDBX(object: DBTEAMLOGGetTeamEventsContinueArg) -> DBXTeamLogGetTeamEventsContinueArg {
    DBXTeamLogGetTeamEventsContinueArg(cursor: object.cursor)
}

func mapDBTEAMLOGGetTeamEventsContinueErrorToDBXOptional(object: DBTEAMLOGGetTeamEventsContinueError?) -> DBXTeamLogGetTeamEventsContinueError? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGetTeamEventsContinueErrorToDBX(object: object)
}

func mapDBTEAMLOGGetTeamEventsContinueErrorToDBX(object: DBTEAMLOGGetTeamEventsContinueError) -> DBXTeamLogGetTeamEventsContinueError {
    if object.isBadCursor() {
        return DBXTeamLogGetTeamEventsContinueErrorBadCursor()
    }
    if object.isReset() {
        let reset = object.reset
        return DBXTeamLogGetTeamEventsContinueError.factory(swift: .reset(reset))
    }
    if object.isOther() {
        return DBXTeamLogGetTeamEventsContinueErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGGetTeamEventsErrorToDBXOptional(object: DBTEAMLOGGetTeamEventsError?) -> DBXTeamLogGetTeamEventsError? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGetTeamEventsErrorToDBX(object: object)
}

func mapDBTEAMLOGGetTeamEventsErrorToDBX(object: DBTEAMLOGGetTeamEventsError) -> DBXTeamLogGetTeamEventsError {
    if object.isAccountIdNotFound() {
        return DBXTeamLogGetTeamEventsErrorAccountIdNotFound()
    }
    if object.isInvalidTimeRange() {
        return DBXTeamLogGetTeamEventsErrorInvalidTimeRange()
    }
    if object.isInvalidFilters() {
        return DBXTeamLogGetTeamEventsErrorInvalidFilters()
    }
    if object.isOther() {
        return DBXTeamLogGetTeamEventsErrorOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGGetTeamEventsResultToDBXOptional(object: DBTEAMLOGGetTeamEventsResult?) -> DBXTeamLogGetTeamEventsResult? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGetTeamEventsResultToDBX(object: object)
}

func mapDBTEAMLOGGetTeamEventsResultToDBX(object: DBTEAMLOGGetTeamEventsResult) -> DBXTeamLogGetTeamEventsResult {
    DBXTeamLogGetTeamEventsResult(events: object.events.compactMap { mapDBTEAMLOGTeamEventToDBX(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBTEAMLOGGoogleSsoChangePolicyDetailsToDBXOptional(object: DBTEAMLOGGoogleSsoChangePolicyDetails?) -> DBXTeamLogGoogleSsoChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGoogleSsoChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGGoogleSsoChangePolicyDetailsToDBX(object: DBTEAMLOGGoogleSsoChangePolicyDetails) -> DBXTeamLogGoogleSsoChangePolicyDetails {
    DBXTeamLogGoogleSsoChangePolicyDetails(
        newValue: mapDBTEAMLOGGoogleSsoPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGGoogleSsoPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGGoogleSsoChangePolicyTypeToDBXOptional(object: DBTEAMLOGGoogleSsoChangePolicyType?) -> DBXTeamLogGoogleSsoChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGoogleSsoChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGGoogleSsoChangePolicyTypeToDBX(object: DBTEAMLOGGoogleSsoChangePolicyType) -> DBXTeamLogGoogleSsoChangePolicyType {
    DBXTeamLogGoogleSsoChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGGoogleSsoPolicyToDBXOptional(object: DBTEAMLOGGoogleSsoPolicy?) -> DBXTeamLogGoogleSsoPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGoogleSsoPolicyToDBX(object: object)
}

func mapDBTEAMLOGGoogleSsoPolicyToDBX(object: DBTEAMLOGGoogleSsoPolicy) -> DBXTeamLogGoogleSsoPolicy {
    if object.isDisabled() {
        return DBXTeamLogGoogleSsoPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogGoogleSsoPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogGoogleSsoPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGGovernancePolicyAddFolderFailedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyAddFolderFailedDetails?)
    -> DBXTeamLogGovernancePolicyAddFolderFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyAddFolderFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyAddFolderFailedDetailsToDBX(object: DBTEAMLOGGovernancePolicyAddFolderFailedDetails)
    -> DBXTeamLogGovernancePolicyAddFolderFailedDetails {
    DBXTeamLogGovernancePolicyAddFolderFailedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        folder: object.folder,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType),
        reason: object.reason
    )
}

func mapDBTEAMLOGGovernancePolicyAddFolderFailedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyAddFolderFailedType?)
    -> DBXTeamLogGovernancePolicyAddFolderFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyAddFolderFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyAddFolderFailedTypeToDBX(object: DBTEAMLOGGovernancePolicyAddFolderFailedType)
    -> DBXTeamLogGovernancePolicyAddFolderFailedType {
    DBXTeamLogGovernancePolicyAddFolderFailedType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyAddFoldersDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyAddFoldersDetails?)
    -> DBXTeamLogGovernancePolicyAddFoldersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyAddFoldersDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyAddFoldersDetailsToDBX(object: DBTEAMLOGGovernancePolicyAddFoldersDetails) -> DBXTeamLogGovernancePolicyAddFoldersDetails {
    DBXTeamLogGovernancePolicyAddFoldersDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType),
        folders: object.folders
    )
}

func mapDBTEAMLOGGovernancePolicyAddFoldersTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyAddFoldersType?) -> DBXTeamLogGovernancePolicyAddFoldersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyAddFoldersTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyAddFoldersTypeToDBX(object: DBTEAMLOGGovernancePolicyAddFoldersType) -> DBXTeamLogGovernancePolicyAddFoldersType {
    DBXTeamLogGovernancePolicyAddFoldersType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyContentDisposedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyContentDisposedDetails?)
    -> DBXTeamLogGovernancePolicyContentDisposedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyContentDisposedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyContentDisposedDetailsToDBX(object: DBTEAMLOGGovernancePolicyContentDisposedDetails)
    -> DBXTeamLogGovernancePolicyContentDisposedDetails {
    DBXTeamLogGovernancePolicyContentDisposedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        dispositionType: mapDBTEAMLOGDispositionActionTypeToDBX(object: object.dispositionType),
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyContentDisposedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyContentDisposedType?)
    -> DBXTeamLogGovernancePolicyContentDisposedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyContentDisposedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyContentDisposedTypeToDBX(object: DBTEAMLOGGovernancePolicyContentDisposedType)
    -> DBXTeamLogGovernancePolicyContentDisposedType {
    DBXTeamLogGovernancePolicyContentDisposedType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyCreateDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyCreateDetails?) -> DBXTeamLogGovernancePolicyCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyCreateDetailsToDBX(object: DBTEAMLOGGovernancePolicyCreateDetails) -> DBXTeamLogGovernancePolicyCreateDetails {
    DBXTeamLogGovernancePolicyCreateDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        duration: mapDBTEAMLOGDurationLogInfoToDBX(object: object.duration),
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType),
        folders: object.folders
    )
}

func mapDBTEAMLOGGovernancePolicyCreateTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyCreateType?) -> DBXTeamLogGovernancePolicyCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyCreateTypeToDBX(object: DBTEAMLOGGovernancePolicyCreateType) -> DBXTeamLogGovernancePolicyCreateType {
    DBXTeamLogGovernancePolicyCreateType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyDeleteDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyDeleteDetails?) -> DBXTeamLogGovernancePolicyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyDeleteDetailsToDBX(object: DBTEAMLOGGovernancePolicyDeleteDetails) -> DBXTeamLogGovernancePolicyDeleteDetails {
    DBXTeamLogGovernancePolicyDeleteDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyDeleteTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyDeleteType?) -> DBXTeamLogGovernancePolicyDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyDeleteTypeToDBX(object: DBTEAMLOGGovernancePolicyDeleteType) -> DBXTeamLogGovernancePolicyDeleteType {
    DBXTeamLogGovernancePolicyDeleteType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyEditDetailsDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyEditDetailsDetails?)
    -> DBXTeamLogGovernancePolicyEditDetailsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyEditDetailsDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyEditDetailsDetailsToDBX(object: DBTEAMLOGGovernancePolicyEditDetailsDetails) -> DBXTeamLogGovernancePolicyEditDetailsDetails {
    DBXTeamLogGovernancePolicyEditDetailsDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        attribute: object.attribute,
        previousValue: object.previousValue,
        newValue: object.dNewValue,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyEditDetailsTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyEditDetailsType?) -> DBXTeamLogGovernancePolicyEditDetailsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyEditDetailsTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyEditDetailsTypeToDBX(object: DBTEAMLOGGovernancePolicyEditDetailsType) -> DBXTeamLogGovernancePolicyEditDetailsType {
    DBXTeamLogGovernancePolicyEditDetailsType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyEditDurationDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyEditDurationDetails?)
    -> DBXTeamLogGovernancePolicyEditDurationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyEditDurationDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyEditDurationDetailsToDBX(object: DBTEAMLOGGovernancePolicyEditDurationDetails)
    -> DBXTeamLogGovernancePolicyEditDurationDetails {
    DBXTeamLogGovernancePolicyEditDurationDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        previousValue: mapDBTEAMLOGDurationLogInfoToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGDurationLogInfoToDBX(object: object.dNewValue),
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyEditDurationTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyEditDurationType?)
    -> DBXTeamLogGovernancePolicyEditDurationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyEditDurationTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyEditDurationTypeToDBX(object: DBTEAMLOGGovernancePolicyEditDurationType) -> DBXTeamLogGovernancePolicyEditDurationType {
    DBXTeamLogGovernancePolicyEditDurationType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyExportCreatedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyExportCreatedDetails?)
    -> DBXTeamLogGovernancePolicyExportCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyExportCreatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyExportCreatedDetailsToDBX(object: DBTEAMLOGGovernancePolicyExportCreatedDetails)
    -> DBXTeamLogGovernancePolicyExportCreatedDetails {
    DBXTeamLogGovernancePolicyExportCreatedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyExportCreatedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyExportCreatedType?)
    -> DBXTeamLogGovernancePolicyExportCreatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyExportCreatedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyExportCreatedTypeToDBX(object: DBTEAMLOGGovernancePolicyExportCreatedType) -> DBXTeamLogGovernancePolicyExportCreatedType {
    DBXTeamLogGovernancePolicyExportCreatedType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyExportRemovedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyExportRemovedDetails?)
    -> DBXTeamLogGovernancePolicyExportRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyExportRemovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyExportRemovedDetailsToDBX(object: DBTEAMLOGGovernancePolicyExportRemovedDetails)
    -> DBXTeamLogGovernancePolicyExportRemovedDetails {
    DBXTeamLogGovernancePolicyExportRemovedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyExportRemovedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyExportRemovedType?)
    -> DBXTeamLogGovernancePolicyExportRemovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyExportRemovedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyExportRemovedTypeToDBX(object: DBTEAMLOGGovernancePolicyExportRemovedType) -> DBXTeamLogGovernancePolicyExportRemovedType {
    DBXTeamLogGovernancePolicyExportRemovedType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyRemoveFoldersDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyRemoveFoldersDetails?)
    -> DBXTeamLogGovernancePolicyRemoveFoldersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyRemoveFoldersDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyRemoveFoldersDetailsToDBX(object: DBTEAMLOGGovernancePolicyRemoveFoldersDetails)
    -> DBXTeamLogGovernancePolicyRemoveFoldersDetails {
    DBXTeamLogGovernancePolicyRemoveFoldersDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType),
        folders: object.folders,
        reason: object.reason
    )
}

func mapDBTEAMLOGGovernancePolicyRemoveFoldersTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyRemoveFoldersType?)
    -> DBXTeamLogGovernancePolicyRemoveFoldersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyRemoveFoldersTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyRemoveFoldersTypeToDBX(object: DBTEAMLOGGovernancePolicyRemoveFoldersType) -> DBXTeamLogGovernancePolicyRemoveFoldersType {
    DBXTeamLogGovernancePolicyRemoveFoldersType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyReportCreatedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyReportCreatedDetails?)
    -> DBXTeamLogGovernancePolicyReportCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyReportCreatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyReportCreatedDetailsToDBX(object: DBTEAMLOGGovernancePolicyReportCreatedDetails)
    -> DBXTeamLogGovernancePolicyReportCreatedDetails {
    DBXTeamLogGovernancePolicyReportCreatedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType)
    )
}

func mapDBTEAMLOGGovernancePolicyReportCreatedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyReportCreatedType?)
    -> DBXTeamLogGovernancePolicyReportCreatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyReportCreatedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyReportCreatedTypeToDBX(object: DBTEAMLOGGovernancePolicyReportCreatedType) -> DBXTeamLogGovernancePolicyReportCreatedType {
    DBXTeamLogGovernancePolicyReportCreatedType(description_: object.description_)
}

func mapDBTEAMLOGGovernancePolicyZipPartDownloadedDetailsToDBXOptional(object: DBTEAMLOGGovernancePolicyZipPartDownloadedDetails?)
    -> DBXTeamLogGovernancePolicyZipPartDownloadedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyZipPartDownloadedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyZipPartDownloadedDetailsToDBX(object: DBTEAMLOGGovernancePolicyZipPartDownloadedDetails)
    -> DBXTeamLogGovernancePolicyZipPartDownloadedDetails {
    DBXTeamLogGovernancePolicyZipPartDownloadedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBTEAMLOGPolicyTypeToDBXOptional(object: object.policyType),
        part: object.part
    )
}

func mapDBTEAMLOGGovernancePolicyZipPartDownloadedTypeToDBXOptional(object: DBTEAMLOGGovernancePolicyZipPartDownloadedType?)
    -> DBXTeamLogGovernancePolicyZipPartDownloadedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGovernancePolicyZipPartDownloadedTypeToDBX(object: object)
}

func mapDBTEAMLOGGovernancePolicyZipPartDownloadedTypeToDBX(object: DBTEAMLOGGovernancePolicyZipPartDownloadedType)
    -> DBXTeamLogGovernancePolicyZipPartDownloadedType {
    DBXTeamLogGovernancePolicyZipPartDownloadedType(description_: object.description_)
}

func mapDBTEAMLOGGroupAddExternalIdDetailsToDBXOptional(object: DBTEAMLOGGroupAddExternalIdDetails?) -> DBXTeamLogGroupAddExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupAddExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupAddExternalIdDetailsToDBX(object: DBTEAMLOGGroupAddExternalIdDetails) -> DBXTeamLogGroupAddExternalIdDetails {
    DBXTeamLogGroupAddExternalIdDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGGroupAddExternalIdTypeToDBXOptional(object: DBTEAMLOGGroupAddExternalIdType?) -> DBXTeamLogGroupAddExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupAddExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupAddExternalIdTypeToDBX(object: DBTEAMLOGGroupAddExternalIdType) -> DBXTeamLogGroupAddExternalIdType {
    DBXTeamLogGroupAddExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGGroupAddMemberDetailsToDBXOptional(object: DBTEAMLOGGroupAddMemberDetails?) -> DBXTeamLogGroupAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupAddMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupAddMemberDetailsToDBX(object: DBTEAMLOGGroupAddMemberDetails) -> DBXTeamLogGroupAddMemberDetails {
    DBXTeamLogGroupAddMemberDetails(isGroupOwner: object.isGroupOwner)
}

func mapDBTEAMLOGGroupAddMemberTypeToDBXOptional(object: DBTEAMLOGGroupAddMemberType?) -> DBXTeamLogGroupAddMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupAddMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupAddMemberTypeToDBX(object: DBTEAMLOGGroupAddMemberType) -> DBXTeamLogGroupAddMemberType {
    DBXTeamLogGroupAddMemberType(description_: object.description_)
}

func mapDBTEAMLOGGroupChangeExternalIdDetailsToDBXOptional(object: DBTEAMLOGGroupChangeExternalIdDetails?) -> DBXTeamLogGroupChangeExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeExternalIdDetailsToDBX(object: DBTEAMLOGGroupChangeExternalIdDetails) -> DBXTeamLogGroupChangeExternalIdDetails {
    DBXTeamLogGroupChangeExternalIdDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGGroupChangeExternalIdTypeToDBXOptional(object: DBTEAMLOGGroupChangeExternalIdType?) -> DBXTeamLogGroupChangeExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeExternalIdTypeToDBX(object: DBTEAMLOGGroupChangeExternalIdType) -> DBXTeamLogGroupChangeExternalIdType {
    DBXTeamLogGroupChangeExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGGroupChangeManagementTypeDetailsToDBXOptional(object: DBTEAMLOGGroupChangeManagementTypeDetails?)
    -> DBXTeamLogGroupChangeManagementTypeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeManagementTypeDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeManagementTypeDetailsToDBX(object: DBTEAMLOGGroupChangeManagementTypeDetails) -> DBXTeamLogGroupChangeManagementTypeDetails {
    DBXTeamLogGroupChangeManagementTypeDetails(
        newValue: mapDBTEAMCOMMONGroupManagementTypeToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMCOMMONGroupManagementTypeToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGGroupChangeManagementTypeTypeToDBXOptional(object: DBTEAMLOGGroupChangeManagementTypeType?) -> DBXTeamLogGroupChangeManagementTypeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeManagementTypeTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeManagementTypeTypeToDBX(object: DBTEAMLOGGroupChangeManagementTypeType) -> DBXTeamLogGroupChangeManagementTypeType {
    DBXTeamLogGroupChangeManagementTypeType(description_: object.description_)
}

func mapDBTEAMLOGGroupChangeMemberRoleDetailsToDBXOptional(object: DBTEAMLOGGroupChangeMemberRoleDetails?) -> DBXTeamLogGroupChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeMemberRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeMemberRoleDetailsToDBX(object: DBTEAMLOGGroupChangeMemberRoleDetails) -> DBXTeamLogGroupChangeMemberRoleDetails {
    DBXTeamLogGroupChangeMemberRoleDetails(isGroupOwner: object.isGroupOwner)
}

func mapDBTEAMLOGGroupChangeMemberRoleTypeToDBXOptional(object: DBTEAMLOGGroupChangeMemberRoleType?) -> DBXTeamLogGroupChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupChangeMemberRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupChangeMemberRoleTypeToDBX(object: DBTEAMLOGGroupChangeMemberRoleType) -> DBXTeamLogGroupChangeMemberRoleType {
    DBXTeamLogGroupChangeMemberRoleType(description_: object.description_)
}

func mapDBTEAMLOGGroupCreateDetailsToDBXOptional(object: DBTEAMLOGGroupCreateDetails?) -> DBXTeamLogGroupCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupCreateDetailsToDBX(object: DBTEAMLOGGroupCreateDetails) -> DBXTeamLogGroupCreateDetails {
    DBXTeamLogGroupCreateDetails(isCompanyManaged: object.isCompanyManaged, joinPolicy: mapDBTEAMLOGGroupJoinPolicyToDBXOptional(object: object.joinPolicy))
}

func mapDBTEAMLOGGroupCreateTypeToDBXOptional(object: DBTEAMLOGGroupCreateType?) -> DBXTeamLogGroupCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupCreateTypeToDBX(object: DBTEAMLOGGroupCreateType) -> DBXTeamLogGroupCreateType {
    DBXTeamLogGroupCreateType(description_: object.description_)
}

func mapDBTEAMLOGGroupDeleteDetailsToDBXOptional(object: DBTEAMLOGGroupDeleteDetails?) -> DBXTeamLogGroupDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupDeleteDetailsToDBX(object: DBTEAMLOGGroupDeleteDetails) -> DBXTeamLogGroupDeleteDetails {
    DBXTeamLogGroupDeleteDetails(isCompanyManaged: object.isCompanyManaged)
}

func mapDBTEAMLOGGroupDeleteTypeToDBXOptional(object: DBTEAMLOGGroupDeleteType?) -> DBXTeamLogGroupDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupDeleteTypeToDBX(object: DBTEAMLOGGroupDeleteType) -> DBXTeamLogGroupDeleteType {
    DBXTeamLogGroupDeleteType(description_: object.description_)
}

func mapDBTEAMLOGGroupDescriptionUpdatedDetailsToDBXOptional(object: DBTEAMLOGGroupDescriptionUpdatedDetails?) -> DBXTeamLogGroupDescriptionUpdatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupDescriptionUpdatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupDescriptionUpdatedDetailsToDBX(object: DBTEAMLOGGroupDescriptionUpdatedDetails) -> DBXTeamLogGroupDescriptionUpdatedDetails {
    DBXTeamLogGroupDescriptionUpdatedDetails()
}

func mapDBTEAMLOGGroupDescriptionUpdatedTypeToDBXOptional(object: DBTEAMLOGGroupDescriptionUpdatedType?) -> DBXTeamLogGroupDescriptionUpdatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupDescriptionUpdatedTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupDescriptionUpdatedTypeToDBX(object: DBTEAMLOGGroupDescriptionUpdatedType) -> DBXTeamLogGroupDescriptionUpdatedType {
    DBXTeamLogGroupDescriptionUpdatedType(description_: object.description_)
}

func mapDBTEAMLOGGroupJoinPolicyToDBXOptional(object: DBTEAMLOGGroupJoinPolicy?) -> DBXTeamLogGroupJoinPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupJoinPolicyToDBX(object: object)
}

func mapDBTEAMLOGGroupJoinPolicyToDBX(object: DBTEAMLOGGroupJoinPolicy) -> DBXTeamLogGroupJoinPolicy {
    if object.isOpen() {
        return DBXTeamLogGroupJoinPolicyOpen()
    }
    if object.isRequestToJoin() {
        return DBXTeamLogGroupJoinPolicyRequestToJoin()
    }
    if object.isOther() {
        return DBXTeamLogGroupJoinPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGGroupJoinPolicyUpdatedDetailsToDBXOptional(object: DBTEAMLOGGroupJoinPolicyUpdatedDetails?) -> DBXTeamLogGroupJoinPolicyUpdatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupJoinPolicyUpdatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupJoinPolicyUpdatedDetailsToDBX(object: DBTEAMLOGGroupJoinPolicyUpdatedDetails) -> DBXTeamLogGroupJoinPolicyUpdatedDetails {
    DBXTeamLogGroupJoinPolicyUpdatedDetails(
        isCompanyManaged: object.isCompanyManaged,
        joinPolicy: mapDBTEAMLOGGroupJoinPolicyToDBXOptional(object: object.joinPolicy)
    )
}

func mapDBTEAMLOGGroupJoinPolicyUpdatedTypeToDBXOptional(object: DBTEAMLOGGroupJoinPolicyUpdatedType?) -> DBXTeamLogGroupJoinPolicyUpdatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupJoinPolicyUpdatedTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupJoinPolicyUpdatedTypeToDBX(object: DBTEAMLOGGroupJoinPolicyUpdatedType) -> DBXTeamLogGroupJoinPolicyUpdatedType {
    DBXTeamLogGroupJoinPolicyUpdatedType(description_: object.description_)
}

func mapDBTEAMLOGGroupLogInfoToDBXOptional(object: DBTEAMLOGGroupLogInfo?) -> DBXTeamLogGroupLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupLogInfoToDBX(object: object)
}

func mapDBTEAMLOGGroupLogInfoToDBX(object: DBTEAMLOGGroupLogInfo) -> DBXTeamLogGroupLogInfo {
    DBXTeamLogGroupLogInfo(displayName: object.displayName, groupId: object.groupId, externalId: object.externalId)
}

func mapDBTEAMLOGGroupMovedDetailsToDBXOptional(object: DBTEAMLOGGroupMovedDetails?) -> DBXTeamLogGroupMovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupMovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupMovedDetailsToDBX(object: DBTEAMLOGGroupMovedDetails) -> DBXTeamLogGroupMovedDetails {
    DBXTeamLogGroupMovedDetails()
}

func mapDBTEAMLOGGroupMovedTypeToDBXOptional(object: DBTEAMLOGGroupMovedType?) -> DBXTeamLogGroupMovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupMovedTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupMovedTypeToDBX(object: DBTEAMLOGGroupMovedType) -> DBXTeamLogGroupMovedType {
    DBXTeamLogGroupMovedType(description_: object.description_)
}

func mapDBTEAMLOGGroupRemoveExternalIdDetailsToDBXOptional(object: DBTEAMLOGGroupRemoveExternalIdDetails?) -> DBXTeamLogGroupRemoveExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRemoveExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupRemoveExternalIdDetailsToDBX(object: DBTEAMLOGGroupRemoveExternalIdDetails) -> DBXTeamLogGroupRemoveExternalIdDetails {
    DBXTeamLogGroupRemoveExternalIdDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGGroupRemoveExternalIdTypeToDBXOptional(object: DBTEAMLOGGroupRemoveExternalIdType?) -> DBXTeamLogGroupRemoveExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRemoveExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupRemoveExternalIdTypeToDBX(object: DBTEAMLOGGroupRemoveExternalIdType) -> DBXTeamLogGroupRemoveExternalIdType {
    DBXTeamLogGroupRemoveExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGGroupRemoveMemberDetailsToDBXOptional(object: DBTEAMLOGGroupRemoveMemberDetails?) -> DBXTeamLogGroupRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRemoveMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupRemoveMemberDetailsToDBX(object: DBTEAMLOGGroupRemoveMemberDetails) -> DBXTeamLogGroupRemoveMemberDetails {
    DBXTeamLogGroupRemoveMemberDetails()
}

func mapDBTEAMLOGGroupRemoveMemberTypeToDBXOptional(object: DBTEAMLOGGroupRemoveMemberType?) -> DBXTeamLogGroupRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRemoveMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupRemoveMemberTypeToDBX(object: DBTEAMLOGGroupRemoveMemberType) -> DBXTeamLogGroupRemoveMemberType {
    DBXTeamLogGroupRemoveMemberType(description_: object.description_)
}

func mapDBTEAMLOGGroupRenameDetailsToDBXOptional(object: DBTEAMLOGGroupRenameDetails?) -> DBXTeamLogGroupRenameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRenameDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupRenameDetailsToDBX(object: DBTEAMLOGGroupRenameDetails) -> DBXTeamLogGroupRenameDetails {
    DBXTeamLogGroupRenameDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGGroupRenameTypeToDBXOptional(object: DBTEAMLOGGroupRenameType?) -> DBXTeamLogGroupRenameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupRenameTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupRenameTypeToDBX(object: DBTEAMLOGGroupRenameType) -> DBXTeamLogGroupRenameType {
    DBXTeamLogGroupRenameType(description_: object.description_)
}

func mapDBTEAMLOGGroupUserManagementChangePolicyDetailsToDBXOptional(object: DBTEAMLOGGroupUserManagementChangePolicyDetails?)
    -> DBXTeamLogGroupUserManagementChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupUserManagementChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGGroupUserManagementChangePolicyDetailsToDBX(object: DBTEAMLOGGroupUserManagementChangePolicyDetails)
    -> DBXTeamLogGroupUserManagementChangePolicyDetails {
    DBXTeamLogGroupUserManagementChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESGroupCreationToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESGroupCreationToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGGroupUserManagementChangePolicyTypeToDBXOptional(object: DBTEAMLOGGroupUserManagementChangePolicyType?)
    -> DBXTeamLogGroupUserManagementChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGroupUserManagementChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGGroupUserManagementChangePolicyTypeToDBX(object: DBTEAMLOGGroupUserManagementChangePolicyType)
    -> DBXTeamLogGroupUserManagementChangePolicyType {
    DBXTeamLogGroupUserManagementChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGGuestAdminChangeStatusDetailsToDBXOptional(object: DBTEAMLOGGuestAdminChangeStatusDetails?) -> DBXTeamLogGuestAdminChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminChangeStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminChangeStatusDetailsToDBX(object: DBTEAMLOGGuestAdminChangeStatusDetails) -> DBXTeamLogGuestAdminChangeStatusDetails {
    DBXTeamLogGuestAdminChangeStatusDetails(
        isGuest: object.isGuest,
        previousValue: mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: object.dNewValue),
        actionDetails: mapDBTEAMLOGTrustedTeamsRequestActionToDBX(object: object.actionDetails),
        guestTeamName: object.guestTeamName,
        hostTeamName: object.hostTeamName
    )
}

func mapDBTEAMLOGGuestAdminChangeStatusTypeToDBXOptional(object: DBTEAMLOGGuestAdminChangeStatusType?) -> DBXTeamLogGuestAdminChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminChangeStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminChangeStatusTypeToDBX(object: DBTEAMLOGGuestAdminChangeStatusType) -> DBXTeamLogGuestAdminChangeStatusType {
    DBXTeamLogGuestAdminChangeStatusType(description_: object.description_)
}

func mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsToDBXOptional(object: DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails?)
    -> DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsToDBX(object: DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails)
    -> DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails {
    DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails(teamName: object.teamName, trustedTeamName: object.trustedTeamName)
}

func mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsTypeToDBXOptional(object: DBTEAMLOGGuestAdminSignedInViaTrustedTeamsType?)
    -> DBXTeamLogGuestAdminSignedInViaTrustedTeamsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsTypeToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminSignedInViaTrustedTeamsTypeToDBX(object: DBTEAMLOGGuestAdminSignedInViaTrustedTeamsType)
    -> DBXTeamLogGuestAdminSignedInViaTrustedTeamsType {
    DBXTeamLogGuestAdminSignedInViaTrustedTeamsType(description_: object.description_)
}

func mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsToDBXOptional(object: DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails?)
    -> DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsToDBX(object: DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails)
    -> DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails {
    DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails(teamName: object.teamName, trustedTeamName: object.trustedTeamName)
}

func mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsTypeToDBXOptional(object: DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsType?)
    -> DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsTypeToDBX(object: object)
}

func mapDBTEAMLOGGuestAdminSignedOutViaTrustedTeamsTypeToDBX(object: DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsType)
    -> DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType {
    DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType(description_: object.description_)
}

func mapDBTEAMLOGIdentifierTypeToDBXOptional(object: DBTEAMLOGIdentifierType?) -> DBXTeamLogIdentifierType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIdentifierTypeToDBX(object: object)
}

func mapDBTEAMLOGIdentifierTypeToDBX(object: DBTEAMLOGIdentifierType) -> DBXTeamLogIdentifierType {
    if object.isEmail() {
        return DBXTeamLogIdentifierTypeEmail()
    }
    if object.isFacebookProfileName() {
        return DBXTeamLogIdentifierTypeFacebookProfileName()
    }
    if object.isOther() {
        return DBXTeamLogIdentifierTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGIntegrationConnectedDetailsToDBXOptional(object: DBTEAMLOGIntegrationConnectedDetails?) -> DBXTeamLogIntegrationConnectedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationConnectedDetailsToDBX(object: object)
}

func mapDBTEAMLOGIntegrationConnectedDetailsToDBX(object: DBTEAMLOGIntegrationConnectedDetails) -> DBXTeamLogIntegrationConnectedDetails {
    DBXTeamLogIntegrationConnectedDetails(integrationName: object.integrationName)
}

func mapDBTEAMLOGIntegrationConnectedTypeToDBXOptional(object: DBTEAMLOGIntegrationConnectedType?) -> DBXTeamLogIntegrationConnectedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationConnectedTypeToDBX(object: object)
}

func mapDBTEAMLOGIntegrationConnectedTypeToDBX(object: DBTEAMLOGIntegrationConnectedType) -> DBXTeamLogIntegrationConnectedType {
    DBXTeamLogIntegrationConnectedType(description_: object.description_)
}

func mapDBTEAMLOGIntegrationDisconnectedDetailsToDBXOptional(object: DBTEAMLOGIntegrationDisconnectedDetails?) -> DBXTeamLogIntegrationDisconnectedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationDisconnectedDetailsToDBX(object: object)
}

func mapDBTEAMLOGIntegrationDisconnectedDetailsToDBX(object: DBTEAMLOGIntegrationDisconnectedDetails) -> DBXTeamLogIntegrationDisconnectedDetails {
    DBXTeamLogIntegrationDisconnectedDetails(integrationName: object.integrationName)
}

func mapDBTEAMLOGIntegrationDisconnectedTypeToDBXOptional(object: DBTEAMLOGIntegrationDisconnectedType?) -> DBXTeamLogIntegrationDisconnectedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationDisconnectedTypeToDBX(object: object)
}

func mapDBTEAMLOGIntegrationDisconnectedTypeToDBX(object: DBTEAMLOGIntegrationDisconnectedType) -> DBXTeamLogIntegrationDisconnectedType {
    DBXTeamLogIntegrationDisconnectedType(description_: object.description_)
}

func mapDBTEAMLOGIntegrationPolicyToDBXOptional(object: DBTEAMLOGIntegrationPolicy?) -> DBXTeamLogIntegrationPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationPolicyToDBX(object: object)
}

func mapDBTEAMLOGIntegrationPolicyToDBX(object: DBTEAMLOGIntegrationPolicy) -> DBXTeamLogIntegrationPolicy {
    if object.isDisabled() {
        return DBXTeamLogIntegrationPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogIntegrationPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogIntegrationPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGIntegrationPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGIntegrationPolicyChangedDetails?) -> DBXTeamLogIntegrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGIntegrationPolicyChangedDetailsToDBX(object: DBTEAMLOGIntegrationPolicyChangedDetails) -> DBXTeamLogIntegrationPolicyChangedDetails {
    DBXTeamLogIntegrationPolicyChangedDetails(
        integrationName: object.integrationName,
        newValue: mapDBTEAMLOGIntegrationPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGIntegrationPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGIntegrationPolicyChangedTypeToDBXOptional(object: DBTEAMLOGIntegrationPolicyChangedType?) -> DBXTeamLogIntegrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGIntegrationPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGIntegrationPolicyChangedTypeToDBX(object: DBTEAMLOGIntegrationPolicyChangedType) -> DBXTeamLogIntegrationPolicyChangedType {
    DBXTeamLogIntegrationPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyToDBXOptional(object: DBTEAMLOGInviteAcceptanceEmailPolicy?) -> DBXTeamLogInviteAcceptanceEmailPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGInviteAcceptanceEmailPolicyToDBX(object: object)
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyToDBX(object: DBTEAMLOGInviteAcceptanceEmailPolicy) -> DBXTeamLogInviteAcceptanceEmailPolicy {
    if object.isDisabled() {
        return DBXTeamLogInviteAcceptanceEmailPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogInviteAcceptanceEmailPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogInviteAcceptanceEmailPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails?)
    -> DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsToDBX(object: DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails)
    -> DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails {
    DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails(
        newValue: mapDBTEAMLOGInviteAcceptanceEmailPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGInviteAcceptanceEmailPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedTypeToDBXOptional(object: DBTEAMLOGInviteAcceptanceEmailPolicyChangedType?)
    -> DBXTeamLogInviteAcceptanceEmailPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGInviteAcceptanceEmailPolicyChangedTypeToDBX(object: DBTEAMLOGInviteAcceptanceEmailPolicyChangedType)
    -> DBXTeamLogInviteAcceptanceEmailPolicyChangedType {
    DBXTeamLogInviteAcceptanceEmailPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGInviteMethodToDBXOptional(object: DBTEAMLOGInviteMethod?) -> DBXTeamLogInviteMethod? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGInviteMethodToDBX(object: object)
}

func mapDBTEAMLOGInviteMethodToDBX(object: DBTEAMLOGInviteMethod) -> DBXTeamLogInviteMethod {
    if object.isAutoApprove() {
        return DBXTeamLogInviteMethodAutoApprove()
    }
    if object.isInviteLink() {
        return DBXTeamLogInviteMethodInviteLink()
    }
    if object.isMemberInvite() {
        return DBXTeamLogInviteMethodMemberInvite()
    }
    if object.isMovedFromAnotherTeam() {
        return DBXTeamLogInviteMethodMovedFromAnotherTeam()
    }
    if object.isOther() {
        return DBXTeamLogInviteMethodOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGJoinTeamDetailsToDBXOptional(object: DBTEAMLOGJoinTeamDetails?) -> DBXTeamLogJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGJoinTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGJoinTeamDetailsToDBX(object: DBTEAMLOGJoinTeamDetails) -> DBXTeamLogJoinTeamDetails {
    DBXTeamLogJoinTeamDetails(
        linkedApps: object.linkedApps.compactMap { mapDBTEAMLOGUserLinkedAppLogInfoToDBX(object: $0) },
        linkedDevices: object.linkedDevices.compactMap { mapDBTEAMLOGLinkedDeviceLogInfoToDBX(object: $0) },
        linkedSharedFolders: object.linkedSharedFolders.compactMap { mapDBTEAMLOGFolderLogInfoToDBX(object: $0) },
        wasLinkedAppsTruncated: object.wasLinkedAppsTruncated,
        wasLinkedDevicesTruncated: object.wasLinkedDevicesTruncated,
        wasLinkedSharedFoldersTruncated: object.wasLinkedSharedFoldersTruncated,
        hasLinkedApps: object.hasLinkedApps,
        hasLinkedDevices: object.hasLinkedDevices,
        hasLinkedSharedFolders: object.hasLinkedSharedFolders
    )
}

func mapDBTEAMLOGLabelTypeToDBXOptional(object: DBTEAMLOGLabelType?) -> DBXTeamLogLabelType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLabelTypeToDBX(object: object)
}

func mapDBTEAMLOGLabelTypeToDBX(object: DBTEAMLOGLabelType) -> DBXTeamLogLabelType {
    if object.isPersonalInformation() {
        return DBXTeamLogLabelTypePersonalInformation()
    }
    if object.isTestOnly() {
        return DBXTeamLogLabelTypeTestOnly()
    }
    if object.isUserDefinedTag() {
        return DBXTeamLogLabelTypeUserDefinedTag()
    }
    if object.isOther() {
        return DBXTeamLogLabelTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGLegacyDeviceSessionLogInfoToDBXOptional(object: DBTEAMLOGLegacyDeviceSessionLogInfo?) -> DBXTeamLogLegacyDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegacyDeviceSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGLegacyDeviceSessionLogInfoToDBX(object: DBTEAMLOGLegacyDeviceSessionLogInfo) -> DBXTeamLogLegacyDeviceSessionLogInfo {
    DBXTeamLogLegacyDeviceSessionLogInfo(
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBTEAMLOGSessionLogInfoToDBXOptional(object: object.sessionInfo),
        displayName: object.displayName,
        isEmmManaged: object.isEmmManaged,
        platform: object.platform,
        macAddress: object.macAddress,
        osVersion: object.osVersion,
        deviceType: object.deviceType,
        clientVersion: object.clientVersion,
        legacyUniqId: object.legacyUniqId
    )
}

func mapDBTEAMLOGLegalHoldsActivateAHoldDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsActivateAHoldDetails?) -> DBXTeamLogLegalHoldsActivateAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsActivateAHoldDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsActivateAHoldDetailsToDBX(object: DBTEAMLOGLegalHoldsActivateAHoldDetails) -> DBXTeamLogLegalHoldsActivateAHoldDetails {
    DBXTeamLogLegalHoldsActivateAHoldDetails(legalHoldId: object.legalHoldId, name: object.name, startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGLegalHoldsActivateAHoldTypeToDBXOptional(object: DBTEAMLOGLegalHoldsActivateAHoldType?) -> DBXTeamLogLegalHoldsActivateAHoldType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsActivateAHoldTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsActivateAHoldTypeToDBX(object: DBTEAMLOGLegalHoldsActivateAHoldType) -> DBXTeamLogLegalHoldsActivateAHoldType {
    DBXTeamLogLegalHoldsActivateAHoldType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsAddMembersDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsAddMembersDetails?) -> DBXTeamLogLegalHoldsAddMembersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsAddMembersDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsAddMembersDetailsToDBX(object: DBTEAMLOGLegalHoldsAddMembersDetails) -> DBXTeamLogLegalHoldsAddMembersDetails {
    DBXTeamLogLegalHoldsAddMembersDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBTEAMLOGLegalHoldsAddMembersTypeToDBXOptional(object: DBTEAMLOGLegalHoldsAddMembersType?) -> DBXTeamLogLegalHoldsAddMembersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsAddMembersTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsAddMembersTypeToDBX(object: DBTEAMLOGLegalHoldsAddMembersType) -> DBXTeamLogLegalHoldsAddMembersType {
    DBXTeamLogLegalHoldsAddMembersType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsChangeHoldDetailsDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsChangeHoldDetailsDetails?)
    -> DBXTeamLogLegalHoldsChangeHoldDetailsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsChangeHoldDetailsDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsChangeHoldDetailsDetailsToDBX(object: DBTEAMLOGLegalHoldsChangeHoldDetailsDetails) -> DBXTeamLogLegalHoldsChangeHoldDetailsDetails {
    DBXTeamLogLegalHoldsChangeHoldDetailsDetails(
        legalHoldId: object.legalHoldId,
        name: object.name,
        previousValue: object.previousValue,
        newValue: object.dNewValue
    )
}

func mapDBTEAMLOGLegalHoldsChangeHoldDetailsTypeToDBXOptional(object: DBTEAMLOGLegalHoldsChangeHoldDetailsType?) -> DBXTeamLogLegalHoldsChangeHoldDetailsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsChangeHoldDetailsTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsChangeHoldDetailsTypeToDBX(object: DBTEAMLOGLegalHoldsChangeHoldDetailsType) -> DBXTeamLogLegalHoldsChangeHoldDetailsType {
    DBXTeamLogLegalHoldsChangeHoldDetailsType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsChangeHoldNameDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsChangeHoldNameDetails?) -> DBXTeamLogLegalHoldsChangeHoldNameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsChangeHoldNameDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsChangeHoldNameDetailsToDBX(object: DBTEAMLOGLegalHoldsChangeHoldNameDetails) -> DBXTeamLogLegalHoldsChangeHoldNameDetails {
    DBXTeamLogLegalHoldsChangeHoldNameDetails(legalHoldId: object.legalHoldId, previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGLegalHoldsChangeHoldNameTypeToDBXOptional(object: DBTEAMLOGLegalHoldsChangeHoldNameType?) -> DBXTeamLogLegalHoldsChangeHoldNameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsChangeHoldNameTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsChangeHoldNameTypeToDBX(object: DBTEAMLOGLegalHoldsChangeHoldNameType) -> DBXTeamLogLegalHoldsChangeHoldNameType {
    DBXTeamLogLegalHoldsChangeHoldNameType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsExportAHoldDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsExportAHoldDetails?) -> DBXTeamLogLegalHoldsExportAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportAHoldDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportAHoldDetailsToDBX(object: DBTEAMLOGLegalHoldsExportAHoldDetails) -> DBXTeamLogLegalHoldsExportAHoldDetails {
    DBXTeamLogLegalHoldsExportAHoldDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBTEAMLOGLegalHoldsExportAHoldTypeToDBXOptional(object: DBTEAMLOGLegalHoldsExportAHoldType?) -> DBXTeamLogLegalHoldsExportAHoldType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportAHoldTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportAHoldTypeToDBX(object: DBTEAMLOGLegalHoldsExportAHoldType) -> DBXTeamLogLegalHoldsExportAHoldType {
    DBXTeamLogLegalHoldsExportAHoldType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsExportCancelledDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsExportCancelledDetails?)
    -> DBXTeamLogLegalHoldsExportCancelledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportCancelledDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportCancelledDetailsToDBX(object: DBTEAMLOGLegalHoldsExportCancelledDetails) -> DBXTeamLogLegalHoldsExportCancelledDetails {
    DBXTeamLogLegalHoldsExportCancelledDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBTEAMLOGLegalHoldsExportCancelledTypeToDBXOptional(object: DBTEAMLOGLegalHoldsExportCancelledType?) -> DBXTeamLogLegalHoldsExportCancelledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportCancelledTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportCancelledTypeToDBX(object: DBTEAMLOGLegalHoldsExportCancelledType) -> DBXTeamLogLegalHoldsExportCancelledType {
    DBXTeamLogLegalHoldsExportCancelledType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsExportDownloadedDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsExportDownloadedDetails?)
    -> DBXTeamLogLegalHoldsExportDownloadedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportDownloadedDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportDownloadedDetailsToDBX(object: DBTEAMLOGLegalHoldsExportDownloadedDetails) -> DBXTeamLogLegalHoldsExportDownloadedDetails {
    DBXTeamLogLegalHoldsExportDownloadedDetails(
        legalHoldId: object.legalHoldId,
        name: object.name,
        exportName: object.exportName,
        part: object.part,
        fileName: object.fileName
    )
}

func mapDBTEAMLOGLegalHoldsExportDownloadedTypeToDBXOptional(object: DBTEAMLOGLegalHoldsExportDownloadedType?) -> DBXTeamLogLegalHoldsExportDownloadedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportDownloadedTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportDownloadedTypeToDBX(object: DBTEAMLOGLegalHoldsExportDownloadedType) -> DBXTeamLogLegalHoldsExportDownloadedType {
    DBXTeamLogLegalHoldsExportDownloadedType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsExportRemovedDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsExportRemovedDetails?) -> DBXTeamLogLegalHoldsExportRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportRemovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportRemovedDetailsToDBX(object: DBTEAMLOGLegalHoldsExportRemovedDetails) -> DBXTeamLogLegalHoldsExportRemovedDetails {
    DBXTeamLogLegalHoldsExportRemovedDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBTEAMLOGLegalHoldsExportRemovedTypeToDBXOptional(object: DBTEAMLOGLegalHoldsExportRemovedType?) -> DBXTeamLogLegalHoldsExportRemovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsExportRemovedTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsExportRemovedTypeToDBX(object: DBTEAMLOGLegalHoldsExportRemovedType) -> DBXTeamLogLegalHoldsExportRemovedType {
    DBXTeamLogLegalHoldsExportRemovedType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsReleaseAHoldDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsReleaseAHoldDetails?) -> DBXTeamLogLegalHoldsReleaseAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsReleaseAHoldDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsReleaseAHoldDetailsToDBX(object: DBTEAMLOGLegalHoldsReleaseAHoldDetails) -> DBXTeamLogLegalHoldsReleaseAHoldDetails {
    DBXTeamLogLegalHoldsReleaseAHoldDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBTEAMLOGLegalHoldsReleaseAHoldTypeToDBXOptional(object: DBTEAMLOGLegalHoldsReleaseAHoldType?) -> DBXTeamLogLegalHoldsReleaseAHoldType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsReleaseAHoldTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsReleaseAHoldTypeToDBX(object: DBTEAMLOGLegalHoldsReleaseAHoldType) -> DBXTeamLogLegalHoldsReleaseAHoldType {
    DBXTeamLogLegalHoldsReleaseAHoldType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsRemoveMembersDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsRemoveMembersDetails?) -> DBXTeamLogLegalHoldsRemoveMembersDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsRemoveMembersDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsRemoveMembersDetailsToDBX(object: DBTEAMLOGLegalHoldsRemoveMembersDetails) -> DBXTeamLogLegalHoldsRemoveMembersDetails {
    DBXTeamLogLegalHoldsRemoveMembersDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBTEAMLOGLegalHoldsRemoveMembersTypeToDBXOptional(object: DBTEAMLOGLegalHoldsRemoveMembersType?) -> DBXTeamLogLegalHoldsRemoveMembersType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsRemoveMembersTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsRemoveMembersTypeToDBX(object: DBTEAMLOGLegalHoldsRemoveMembersType) -> DBXTeamLogLegalHoldsRemoveMembersType {
    DBXTeamLogLegalHoldsRemoveMembersType(description_: object.description_)
}

func mapDBTEAMLOGLegalHoldsReportAHoldDetailsToDBXOptional(object: DBTEAMLOGLegalHoldsReportAHoldDetails?) -> DBXTeamLogLegalHoldsReportAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsReportAHoldDetailsToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsReportAHoldDetailsToDBX(object: DBTEAMLOGLegalHoldsReportAHoldDetails) -> DBXTeamLogLegalHoldsReportAHoldDetails {
    DBXTeamLogLegalHoldsReportAHoldDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBTEAMLOGLegalHoldsReportAHoldTypeToDBXOptional(object: DBTEAMLOGLegalHoldsReportAHoldType?) -> DBXTeamLogLegalHoldsReportAHoldType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLegalHoldsReportAHoldTypeToDBX(object: object)
}

func mapDBTEAMLOGLegalHoldsReportAHoldTypeToDBX(object: DBTEAMLOGLegalHoldsReportAHoldType) -> DBXTeamLogLegalHoldsReportAHoldType {
    DBXTeamLogLegalHoldsReportAHoldType(description_: object.description_)
}

func mapDBTEAMLOGLinkedDeviceLogInfoToDBXOptional(object: DBTEAMLOGLinkedDeviceLogInfo?) -> DBXTeamLogLinkedDeviceLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLinkedDeviceLogInfoToDBX(object: object)
}

func mapDBTEAMLOGLinkedDeviceLogInfoToDBX(object: DBTEAMLOGLinkedDeviceLogInfo) -> DBXTeamLogLinkedDeviceLogInfo {
    if object.isDesktopDeviceSession() {
        let desktopDeviceSession = mapDBTEAMLOGDesktopDeviceSessionLogInfoToDBX(object: object.desktopDeviceSession)
        return DBXTeamLogLinkedDeviceLogInfo.factory(swift: .desktopDeviceSession(desktopDeviceSession.subSwift))
    }
    if object.isLegacyDeviceSession() {
        let legacyDeviceSession = mapDBTEAMLOGLegacyDeviceSessionLogInfoToDBX(object: object.legacyDeviceSession)
        return DBXTeamLogLinkedDeviceLogInfo.factory(swift: .legacyDeviceSession(legacyDeviceSession.subSwift))
    }
    if object.isMobileDeviceSession() {
        let mobileDeviceSession = mapDBTEAMLOGMobileDeviceSessionLogInfoToDBX(object: object.mobileDeviceSession)
        return DBXTeamLogLinkedDeviceLogInfo.factory(swift: .mobileDeviceSession(mobileDeviceSession.subSwift))
    }
    if object.isWebDeviceSession() {
        let webDeviceSession = mapDBTEAMLOGWebDeviceSessionLogInfoToDBX(object: object.webDeviceSession)
        return DBXTeamLogLinkedDeviceLogInfo.factory(swift: .webDeviceSession(webDeviceSession.subSwift))
    }
    if object.isOther() {
        return DBXTeamLogLinkedDeviceLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGLockStatusToDBXOptional(object: DBTEAMLOGLockStatus?) -> DBXTeamLogLockStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLockStatusToDBX(object: object)
}

func mapDBTEAMLOGLockStatusToDBX(object: DBTEAMLOGLockStatus) -> DBXTeamLogLockStatus {
    if object.isLocked() {
        return DBXTeamLogLockStatusLocked()
    }
    if object.isUnlocked() {
        return DBXTeamLogLockStatusUnlocked()
    }
    if object.isOther() {
        return DBXTeamLogLockStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGLoginFailDetailsToDBXOptional(object: DBTEAMLOGLoginFailDetails?) -> DBXTeamLogLoginFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLoginFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGLoginFailDetailsToDBX(object: DBTEAMLOGLoginFailDetails) -> DBXTeamLogLoginFailDetails {
    DBXTeamLogLoginFailDetails(
        loginMethod: mapDBTEAMLOGLoginMethodToDBX(object: object.loginMethod),
        errorDetails: mapDBTEAMLOGFailureDetailsLogInfoToDBX(object: object.errorDetails),
        isEmmManaged: object.isEmmManaged
    )
}

func mapDBTEAMLOGLoginFailTypeToDBXOptional(object: DBTEAMLOGLoginFailType?) -> DBXTeamLogLoginFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLoginFailTypeToDBX(object: object)
}

func mapDBTEAMLOGLoginFailTypeToDBX(object: DBTEAMLOGLoginFailType) -> DBXTeamLogLoginFailType {
    DBXTeamLogLoginFailType(description_: object.description_)
}

func mapDBTEAMLOGLoginMethodToDBXOptional(object: DBTEAMLOGLoginMethod?) -> DBXTeamLogLoginMethod? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLoginMethodToDBX(object: object)
}

func mapDBTEAMLOGLoginMethodToDBX(object: DBTEAMLOGLoginMethod) -> DBXTeamLogLoginMethod {
    if object.isAppleOauth() {
        return DBXTeamLogLoginMethodAppleOauth()
    }
    if object.isFirstPartyTokenExchange() {
        return DBXTeamLogLoginMethodFirstPartyTokenExchange()
    }
    if object.isGoogleOauth() {
        return DBXTeamLogLoginMethodGoogleOauth()
    }
    if object.isLenovoOauth() {
        return DBXTeamLogLoginMethodLenovoOauth()
    }
    if object.isPassword() {
        return DBXTeamLogLoginMethodPassword()
    }
    if object.isQrCode() {
        return DBXTeamLogLoginMethodQrCode()
    }
    if object.isSaml() {
        return DBXTeamLogLoginMethodSaml()
    }
    if object.isTwoFactorAuthentication() {
        return DBXTeamLogLoginMethodTwoFactorAuthentication()
    }
    if object.isWebSession() {
        return DBXTeamLogLoginMethodWebSession()
    }
    if object.isOther() {
        return DBXTeamLogLoginMethodOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGLoginSuccessDetailsToDBXOptional(object: DBTEAMLOGLoginSuccessDetails?) -> DBXTeamLogLoginSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLoginSuccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGLoginSuccessDetailsToDBX(object: DBTEAMLOGLoginSuccessDetails) -> DBXTeamLogLoginSuccessDetails {
    DBXTeamLogLoginSuccessDetails(loginMethod: mapDBTEAMLOGLoginMethodToDBX(object: object.loginMethod), isEmmManaged: object.isEmmManaged)
}

func mapDBTEAMLOGLoginSuccessTypeToDBXOptional(object: DBTEAMLOGLoginSuccessType?) -> DBXTeamLogLoginSuccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLoginSuccessTypeToDBX(object: object)
}

func mapDBTEAMLOGLoginSuccessTypeToDBX(object: DBTEAMLOGLoginSuccessType) -> DBXTeamLogLoginSuccessType {
    DBXTeamLogLoginSuccessType(description_: object.description_)
}

func mapDBTEAMLOGLogoutDetailsToDBXOptional(object: DBTEAMLOGLogoutDetails?) -> DBXTeamLogLogoutDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLogoutDetailsToDBX(object: object)
}

func mapDBTEAMLOGLogoutDetailsToDBX(object: DBTEAMLOGLogoutDetails) -> DBXTeamLogLogoutDetails {
    DBXTeamLogLogoutDetails(loginId: object.loginId)
}

func mapDBTEAMLOGLogoutTypeToDBXOptional(object: DBTEAMLOGLogoutType?) -> DBXTeamLogLogoutType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGLogoutTypeToDBX(object: object)
}

func mapDBTEAMLOGLogoutTypeToDBX(object: DBTEAMLOGLogoutType) -> DBXTeamLogLogoutType {
    DBXTeamLogLogoutType(description_: object.description_)
}

func mapDBTEAMLOGMemberAddExternalIdDetailsToDBXOptional(object: DBTEAMLOGMemberAddExternalIdDetails?) -> DBXTeamLogMemberAddExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberAddExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberAddExternalIdDetailsToDBX(object: DBTEAMLOGMemberAddExternalIdDetails) -> DBXTeamLogMemberAddExternalIdDetails {
    DBXTeamLogMemberAddExternalIdDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGMemberAddExternalIdTypeToDBXOptional(object: DBTEAMLOGMemberAddExternalIdType?) -> DBXTeamLogMemberAddExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberAddExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberAddExternalIdTypeToDBX(object: DBTEAMLOGMemberAddExternalIdType) -> DBXTeamLogMemberAddExternalIdType {
    DBXTeamLogMemberAddExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGMemberAddNameDetailsToDBXOptional(object: DBTEAMLOGMemberAddNameDetails?) -> DBXTeamLogMemberAddNameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberAddNameDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberAddNameDetailsToDBX(object: DBTEAMLOGMemberAddNameDetails) -> DBXTeamLogMemberAddNameDetails {
    DBXTeamLogMemberAddNameDetails(newValue: mapDBTEAMLOGUserNameLogInfoToDBX(object: object.dNewValue))
}

func mapDBTEAMLOGMemberAddNameTypeToDBXOptional(object: DBTEAMLOGMemberAddNameType?) -> DBXTeamLogMemberAddNameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberAddNameTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberAddNameTypeToDBX(object: DBTEAMLOGMemberAddNameType) -> DBXTeamLogMemberAddNameType {
    DBXTeamLogMemberAddNameType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeAdminRoleDetailsToDBXOptional(object: DBTEAMLOGMemberChangeAdminRoleDetails?) -> DBXTeamLogMemberChangeAdminRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeAdminRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeAdminRoleDetailsToDBX(object: DBTEAMLOGMemberChangeAdminRoleDetails) -> DBXTeamLogMemberChangeAdminRoleDetails {
    DBXTeamLogMemberChangeAdminRoleDetails(
        newValue: mapDBTEAMLOGAdminRoleToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGAdminRoleToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberChangeAdminRoleTypeToDBXOptional(object: DBTEAMLOGMemberChangeAdminRoleType?) -> DBXTeamLogMemberChangeAdminRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeAdminRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeAdminRoleTypeToDBX(object: DBTEAMLOGMemberChangeAdminRoleType) -> DBXTeamLogMemberChangeAdminRoleType {
    DBXTeamLogMemberChangeAdminRoleType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeEmailDetailsToDBXOptional(object: DBTEAMLOGMemberChangeEmailDetails?) -> DBXTeamLogMemberChangeEmailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeEmailDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeEmailDetailsToDBX(object: DBTEAMLOGMemberChangeEmailDetails) -> DBXTeamLogMemberChangeEmailDetails {
    DBXTeamLogMemberChangeEmailDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGMemberChangeEmailTypeToDBXOptional(object: DBTEAMLOGMemberChangeEmailType?) -> DBXTeamLogMemberChangeEmailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeEmailTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeEmailTypeToDBX(object: DBTEAMLOGMemberChangeEmailType) -> DBXTeamLogMemberChangeEmailType {
    DBXTeamLogMemberChangeEmailType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeExternalIdDetailsToDBXOptional(object: DBTEAMLOGMemberChangeExternalIdDetails?) -> DBXTeamLogMemberChangeExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeExternalIdDetailsToDBX(object: DBTEAMLOGMemberChangeExternalIdDetails) -> DBXTeamLogMemberChangeExternalIdDetails {
    DBXTeamLogMemberChangeExternalIdDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGMemberChangeExternalIdTypeToDBXOptional(object: DBTEAMLOGMemberChangeExternalIdType?) -> DBXTeamLogMemberChangeExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeExternalIdTypeToDBX(object: DBTEAMLOGMemberChangeExternalIdType) -> DBXTeamLogMemberChangeExternalIdType {
    DBXTeamLogMemberChangeExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeMembershipTypeDetailsToDBXOptional(object: DBTEAMLOGMemberChangeMembershipTypeDetails?)
    -> DBXTeamLogMemberChangeMembershipTypeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeMembershipTypeDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeMembershipTypeDetailsToDBX(object: DBTEAMLOGMemberChangeMembershipTypeDetails) -> DBXTeamLogMemberChangeMembershipTypeDetails {
    DBXTeamLogMemberChangeMembershipTypeDetails(
        prevValue: mapDBTEAMLOGTeamMembershipTypeToDBX(object: object.prevValue),
        newValue: mapDBTEAMLOGTeamMembershipTypeToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGMemberChangeMembershipTypeTypeToDBXOptional(object: DBTEAMLOGMemberChangeMembershipTypeType?) -> DBXTeamLogMemberChangeMembershipTypeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeMembershipTypeTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeMembershipTypeTypeToDBX(object: DBTEAMLOGMemberChangeMembershipTypeType) -> DBXTeamLogMemberChangeMembershipTypeType {
    DBXTeamLogMemberChangeMembershipTypeType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeNameDetailsToDBXOptional(object: DBTEAMLOGMemberChangeNameDetails?) -> DBXTeamLogMemberChangeNameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeNameDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeNameDetailsToDBX(object: DBTEAMLOGMemberChangeNameDetails) -> DBXTeamLogMemberChangeNameDetails {
    DBXTeamLogMemberChangeNameDetails(
        newValue: mapDBTEAMLOGUserNameLogInfoToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGUserNameLogInfoToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberChangeNameTypeToDBXOptional(object: DBTEAMLOGMemberChangeNameType?) -> DBXTeamLogMemberChangeNameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeNameTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeNameTypeToDBX(object: DBTEAMLOGMemberChangeNameType) -> DBXTeamLogMemberChangeNameType {
    DBXTeamLogMemberChangeNameType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeResellerRoleDetailsToDBXOptional(object: DBTEAMLOGMemberChangeResellerRoleDetails?) -> DBXTeamLogMemberChangeResellerRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeResellerRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeResellerRoleDetailsToDBX(object: DBTEAMLOGMemberChangeResellerRoleDetails) -> DBXTeamLogMemberChangeResellerRoleDetails {
    DBXTeamLogMemberChangeResellerRoleDetails(
        newValue: mapDBTEAMLOGResellerRoleToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGResellerRoleToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberChangeResellerRoleTypeToDBXOptional(object: DBTEAMLOGMemberChangeResellerRoleType?) -> DBXTeamLogMemberChangeResellerRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeResellerRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeResellerRoleTypeToDBX(object: DBTEAMLOGMemberChangeResellerRoleType) -> DBXTeamLogMemberChangeResellerRoleType {
    DBXTeamLogMemberChangeResellerRoleType(description_: object.description_)
}

func mapDBTEAMLOGMemberChangeStatusDetailsToDBXOptional(object: DBTEAMLOGMemberChangeStatusDetails?) -> DBXTeamLogMemberChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeStatusDetailsToDBX(object: DBTEAMLOGMemberChangeStatusDetails) -> DBXTeamLogMemberChangeStatusDetails {
    DBXTeamLogMemberChangeStatusDetails(
        newValue: mapDBTEAMLOGMemberStatusToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGMemberStatusToDBXOptional(object: object.previousValue),
        action: mapDBTEAMLOGActionDetailsToDBXOptional(object: object.action),
        newTeam: object.dNewTeam,
        previousTeam: object.previousTeam
    )
}

func mapDBTEAMLOGMemberChangeStatusTypeToDBXOptional(object: DBTEAMLOGMemberChangeStatusType?) -> DBXTeamLogMemberChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberChangeStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberChangeStatusTypeToDBX(object: DBTEAMLOGMemberChangeStatusType) -> DBXTeamLogMemberChangeStatusType {
    DBXTeamLogMemberChangeStatusType(description_: object.description_)
}

func mapDBTEAMLOGMemberDeleteManualContactsDetailsToDBXOptional(object: DBTEAMLOGMemberDeleteManualContactsDetails?)
    -> DBXTeamLogMemberDeleteManualContactsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberDeleteManualContactsDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberDeleteManualContactsDetailsToDBX(object: DBTEAMLOGMemberDeleteManualContactsDetails) -> DBXTeamLogMemberDeleteManualContactsDetails {
    DBXTeamLogMemberDeleteManualContactsDetails()
}

func mapDBTEAMLOGMemberDeleteManualContactsTypeToDBXOptional(object: DBTEAMLOGMemberDeleteManualContactsType?) -> DBXTeamLogMemberDeleteManualContactsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberDeleteManualContactsTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberDeleteManualContactsTypeToDBX(object: DBTEAMLOGMemberDeleteManualContactsType) -> DBXTeamLogMemberDeleteManualContactsType {
    DBXTeamLogMemberDeleteManualContactsType(description_: object.description_)
}

func mapDBTEAMLOGMemberDeleteProfilePhotoDetailsToDBXOptional(object: DBTEAMLOGMemberDeleteProfilePhotoDetails?) -> DBXTeamLogMemberDeleteProfilePhotoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberDeleteProfilePhotoDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberDeleteProfilePhotoDetailsToDBX(object: DBTEAMLOGMemberDeleteProfilePhotoDetails) -> DBXTeamLogMemberDeleteProfilePhotoDetails {
    DBXTeamLogMemberDeleteProfilePhotoDetails()
}

func mapDBTEAMLOGMemberDeleteProfilePhotoTypeToDBXOptional(object: DBTEAMLOGMemberDeleteProfilePhotoType?) -> DBXTeamLogMemberDeleteProfilePhotoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberDeleteProfilePhotoTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberDeleteProfilePhotoTypeToDBX(object: DBTEAMLOGMemberDeleteProfilePhotoType) -> DBXTeamLogMemberDeleteProfilePhotoType {
    DBXTeamLogMemberDeleteProfilePhotoType(description_: object.description_)
}

func mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsToDBXOptional(object: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails?)
    -> DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsToDBX(object: DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails)
    -> DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails {
    DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails()
}

func mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeToDBXOptional(object: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType?)
    -> DBXTeamLogMemberPermanentlyDeleteAccountContentsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberPermanentlyDeleteAccountContentsTypeToDBX(object: DBTEAMLOGMemberPermanentlyDeleteAccountContentsType)
    -> DBXTeamLogMemberPermanentlyDeleteAccountContentsType {
    DBXTeamLogMemberPermanentlyDeleteAccountContentsType(description_: object.description_)
}

func mapDBTEAMLOGMemberRemoveActionTypeToDBXOptional(object: DBTEAMLOGMemberRemoveActionType?) -> DBXTeamLogMemberRemoveActionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRemoveActionTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberRemoveActionTypeToDBX(object: DBTEAMLOGMemberRemoveActionType) -> DBXTeamLogMemberRemoveActionType {
    if object.isDelete_() {
        return DBXTeamLogMemberRemoveActionTypeDelete()
    }
    if object.isLeave() {
        return DBXTeamLogMemberRemoveActionTypeLeave()
    }
    if object.isOffboard() {
        return DBXTeamLogMemberRemoveActionTypeOffboard()
    }
    if object.isOffboardAndRetainTeamFolders() {
        return DBXTeamLogMemberRemoveActionTypeOffboardAndRetainTeamFolders()
    }
    if object.isOther() {
        return DBXTeamLogMemberRemoveActionTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMemberRemoveExternalIdDetailsToDBXOptional(object: DBTEAMLOGMemberRemoveExternalIdDetails?) -> DBXTeamLogMemberRemoveExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRemoveExternalIdDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberRemoveExternalIdDetailsToDBX(object: DBTEAMLOGMemberRemoveExternalIdDetails) -> DBXTeamLogMemberRemoveExternalIdDetails {
    DBXTeamLogMemberRemoveExternalIdDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGMemberRemoveExternalIdTypeToDBXOptional(object: DBTEAMLOGMemberRemoveExternalIdType?) -> DBXTeamLogMemberRemoveExternalIdType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRemoveExternalIdTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberRemoveExternalIdTypeToDBX(object: DBTEAMLOGMemberRemoveExternalIdType) -> DBXTeamLogMemberRemoveExternalIdType {
    DBXTeamLogMemberRemoveExternalIdType(description_: object.description_)
}

func mapDBTEAMLOGMemberRequestsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGMemberRequestsChangePolicyDetails?)
    -> DBXTeamLogMemberRequestsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRequestsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberRequestsChangePolicyDetailsToDBX(object: DBTEAMLOGMemberRequestsChangePolicyDetails) -> DBXTeamLogMemberRequestsChangePolicyDetails {
    DBXTeamLogMemberRequestsChangePolicyDetails(
        newValue: mapDBTEAMLOGMemberRequestsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGMemberRequestsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberRequestsChangePolicyTypeToDBXOptional(object: DBTEAMLOGMemberRequestsChangePolicyType?) -> DBXTeamLogMemberRequestsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRequestsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberRequestsChangePolicyTypeToDBX(object: DBTEAMLOGMemberRequestsChangePolicyType) -> DBXTeamLogMemberRequestsChangePolicyType {
    DBXTeamLogMemberRequestsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGMemberRequestsPolicyToDBXOptional(object: DBTEAMLOGMemberRequestsPolicy?) -> DBXTeamLogMemberRequestsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberRequestsPolicyToDBX(object: object)
}

func mapDBTEAMLOGMemberRequestsPolicyToDBX(object: DBTEAMLOGMemberRequestsPolicy) -> DBXTeamLogMemberRequestsPolicy {
    if object.isAutoAccept() {
        return DBXTeamLogMemberRequestsPolicyAutoAccept()
    }
    if object.isDisabled() {
        return DBXTeamLogMemberRequestsPolicyDisabled()
    }
    if object.isRequireApproval() {
        return DBXTeamLogMemberRequestsPolicyRequireApproval()
    }
    if object.isOther() {
        return DBXTeamLogMemberRequestsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMemberSendInvitePolicyToDBXOptional(object: DBTEAMLOGMemberSendInvitePolicy?) -> DBXTeamLogMemberSendInvitePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSendInvitePolicyToDBX(object: object)
}

func mapDBTEAMLOGMemberSendInvitePolicyToDBX(object: DBTEAMLOGMemberSendInvitePolicy) -> DBXTeamLogMemberSendInvitePolicy {
    if object.isDisabled() {
        return DBXTeamLogMemberSendInvitePolicyDisabled()
    }
    if object.isEveryone() {
        return DBXTeamLogMemberSendInvitePolicyEveryone()
    }
    if object.isSpecificMembers() {
        return DBXTeamLogMemberSendInvitePolicySpecificMembers()
    }
    if object.isOther() {
        return DBXTeamLogMemberSendInvitePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMemberSendInvitePolicyChangedDetailsToDBXOptional(object: DBTEAMLOGMemberSendInvitePolicyChangedDetails?)
    -> DBXTeamLogMemberSendInvitePolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSendInvitePolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSendInvitePolicyChangedDetailsToDBX(object: DBTEAMLOGMemberSendInvitePolicyChangedDetails)
    -> DBXTeamLogMemberSendInvitePolicyChangedDetails {
    DBXTeamLogMemberSendInvitePolicyChangedDetails(
        newValue: mapDBTEAMLOGMemberSendInvitePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGMemberSendInvitePolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberSendInvitePolicyChangedTypeToDBXOptional(object: DBTEAMLOGMemberSendInvitePolicyChangedType?)
    -> DBXTeamLogMemberSendInvitePolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSendInvitePolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSendInvitePolicyChangedTypeToDBX(object: DBTEAMLOGMemberSendInvitePolicyChangedType) -> DBXTeamLogMemberSendInvitePolicyChangedType {
    DBXTeamLogMemberSendInvitePolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGMemberSetProfilePhotoDetailsToDBXOptional(object: DBTEAMLOGMemberSetProfilePhotoDetails?) -> DBXTeamLogMemberSetProfilePhotoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSetProfilePhotoDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSetProfilePhotoDetailsToDBX(object: DBTEAMLOGMemberSetProfilePhotoDetails) -> DBXTeamLogMemberSetProfilePhotoDetails {
    DBXTeamLogMemberSetProfilePhotoDetails()
}

func mapDBTEAMLOGMemberSetProfilePhotoTypeToDBXOptional(object: DBTEAMLOGMemberSetProfilePhotoType?) -> DBXTeamLogMemberSetProfilePhotoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSetProfilePhotoTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSetProfilePhotoTypeToDBX(object: DBTEAMLOGMemberSetProfilePhotoType) -> DBXTeamLogMemberSetProfilePhotoType {
    DBXTeamLogMemberSetProfilePhotoType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails?)
    -> DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails)
    -> DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails {
    DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType?)
    -> DBXTeamLogMemberSpaceLimitsAddCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsAddCustomQuotaTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType)
    -> DBXTeamLogMemberSpaceLimitsAddCustomQuotaType {
    DBXTeamLogMemberSpaceLimitsAddCustomQuotaType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsAddExceptionDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails?)
    -> DBXTeamLogMemberSpaceLimitsAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsAddExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsAddExceptionDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsAddExceptionDetails)
    -> DBXTeamLogMemberSpaceLimitsAddExceptionDetails {
    DBXTeamLogMemberSpaceLimitsAddExceptionDetails()
}

func mapDBTEAMLOGMemberSpaceLimitsAddExceptionTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsAddExceptionType?)
    -> DBXTeamLogMemberSpaceLimitsAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsAddExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsAddExceptionTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsAddExceptionType) -> DBXTeamLogMemberSpaceLimitsAddExceptionType {
    DBXTeamLogMemberSpaceLimitsAddExceptionType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails?)
    -> DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails)
    -> DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails {
    DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails(
        previousValue: mapDBTEAMLOGSpaceCapsTypeToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGSpaceCapsTypeToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType?)
    -> DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType)
    -> DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType {
    DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails?)
    -> DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails)
    -> DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails {
    DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType?)
    -> DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeCustomQuotaTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType)
    -> DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType {
    DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails?)
    -> DBXTeamLogMemberSpaceLimitsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangePolicyDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsChangePolicyDetails)
    -> DBXTeamLogMemberSpaceLimitsChangePolicyDetails {
    DBXTeamLogMemberSpaceLimitsChangePolicyDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGMemberSpaceLimitsChangePolicyTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangePolicyType?)
    -> DBXTeamLogMemberSpaceLimitsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangePolicyTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsChangePolicyType) -> DBXTeamLogMemberSpaceLimitsChangePolicyType {
    DBXTeamLogMemberSpaceLimitsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeStatusDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails?)
    -> DBXTeamLogMemberSpaceLimitsChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeStatusDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeStatusDetails)
    -> DBXTeamLogMemberSpaceLimitsChangeStatusDetails {
    DBXTeamLogMemberSpaceLimitsChangeStatusDetails(
        previousValue: mapDBTEAMLOGSpaceLimitsStatusToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGSpaceLimitsStatusToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGMemberSpaceLimitsChangeStatusTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsChangeStatusType?)
    -> DBXTeamLogMemberSpaceLimitsChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsChangeStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsChangeStatusTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsChangeStatusType) -> DBXTeamLogMemberSpaceLimitsChangeStatusType {
    DBXTeamLogMemberSpaceLimitsChangeStatusType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails?)
    -> DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails)
    -> DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails {
    DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails()
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType?)
    -> DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType)
    -> DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType {
    DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType(description_: object.description_)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails?)
    -> DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsToDBX(object: DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails)
    -> DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails {
    DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails()
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeToDBXOptional(object: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType?)
    -> DBXTeamLogMemberSpaceLimitsRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSpaceLimitsRemoveExceptionTypeToDBX(object: DBTEAMLOGMemberSpaceLimitsRemoveExceptionType)
    -> DBXTeamLogMemberSpaceLimitsRemoveExceptionType {
    DBXTeamLogMemberSpaceLimitsRemoveExceptionType(description_: object.description_)
}

func mapDBTEAMLOGMemberStatusToDBXOptional(object: DBTEAMLOGMemberStatus?) -> DBXTeamLogMemberStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberStatusToDBX(object: object)
}

func mapDBTEAMLOGMemberStatusToDBX(object: DBTEAMLOGMemberStatus) -> DBXTeamLogMemberStatus {
    if object.isActive() {
        return DBXTeamLogMemberStatusActive()
    }
    if object.isInvited() {
        return DBXTeamLogMemberStatusInvited()
    }
    if object.isMovedToAnotherTeam() {
        return DBXTeamLogMemberStatusMovedToAnotherTeam()
    }
    if object.isNotJoined() {
        return DBXTeamLogMemberStatusNotJoined()
    }
    if object.isRemoved() {
        return DBXTeamLogMemberStatusRemoved()
    }
    if object.isSuspended() {
        return DBXTeamLogMemberStatusSuspended()
    }
    if object.isOther() {
        return DBXTeamLogMemberStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMemberSuggestDetailsToDBXOptional(object: DBTEAMLOGMemberSuggestDetails?) -> DBXTeamLogMemberSuggestDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSuggestDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSuggestDetailsToDBX(object: DBTEAMLOGMemberSuggestDetails) -> DBXTeamLogMemberSuggestDetails {
    DBXTeamLogMemberSuggestDetails(suggestedMembers: object.suggestedMembers)
}

func mapDBTEAMLOGMemberSuggestTypeToDBXOptional(object: DBTEAMLOGMemberSuggestType?) -> DBXTeamLogMemberSuggestType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSuggestTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSuggestTypeToDBX(object: DBTEAMLOGMemberSuggestType) -> DBXTeamLogMemberSuggestType {
    DBXTeamLogMemberSuggestType(description_: object.description_)
}

func mapDBTEAMLOGMemberSuggestionsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGMemberSuggestionsChangePolicyDetails?)
    -> DBXTeamLogMemberSuggestionsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSuggestionsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberSuggestionsChangePolicyDetailsToDBX(object: DBTEAMLOGMemberSuggestionsChangePolicyDetails)
    -> DBXTeamLogMemberSuggestionsChangePolicyDetails {
    DBXTeamLogMemberSuggestionsChangePolicyDetails(
        newValue: mapDBTEAMLOGMemberSuggestionsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGMemberSuggestionsPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGMemberSuggestionsChangePolicyTypeToDBXOptional(object: DBTEAMLOGMemberSuggestionsChangePolicyType?)
    -> DBXTeamLogMemberSuggestionsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSuggestionsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberSuggestionsChangePolicyTypeToDBX(object: DBTEAMLOGMemberSuggestionsChangePolicyType) -> DBXTeamLogMemberSuggestionsChangePolicyType {
    DBXTeamLogMemberSuggestionsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGMemberSuggestionsPolicyToDBXOptional(object: DBTEAMLOGMemberSuggestionsPolicy?) -> DBXTeamLogMemberSuggestionsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberSuggestionsPolicyToDBX(object: object)
}

func mapDBTEAMLOGMemberSuggestionsPolicyToDBX(object: DBTEAMLOGMemberSuggestionsPolicy) -> DBXTeamLogMemberSuggestionsPolicy {
    if object.isDisabled() {
        return DBXTeamLogMemberSuggestionsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogMemberSuggestionsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogMemberSuggestionsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMemberTransferAccountContentsDetailsToDBXOptional(object: DBTEAMLOGMemberTransferAccountContentsDetails?)
    -> DBXTeamLogMemberTransferAccountContentsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberTransferAccountContentsDetailsToDBX(object: object)
}

func mapDBTEAMLOGMemberTransferAccountContentsDetailsToDBX(object: DBTEAMLOGMemberTransferAccountContentsDetails)
    -> DBXTeamLogMemberTransferAccountContentsDetails {
    DBXTeamLogMemberTransferAccountContentsDetails()
}

func mapDBTEAMLOGMemberTransferAccountContentsTypeToDBXOptional(object: DBTEAMLOGMemberTransferAccountContentsType?)
    -> DBXTeamLogMemberTransferAccountContentsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberTransferAccountContentsTypeToDBX(object: object)
}

func mapDBTEAMLOGMemberTransferAccountContentsTypeToDBX(object: DBTEAMLOGMemberTransferAccountContentsType) -> DBXTeamLogMemberTransferAccountContentsType {
    DBXTeamLogMemberTransferAccountContentsType(description_: object.description_)
}

func mapDBTEAMLOGMemberTransferredInternalFieldsToDBXOptional(object: DBTEAMLOGMemberTransferredInternalFields?) -> DBXTeamLogMemberTransferredInternalFields? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMemberTransferredInternalFieldsToDBX(object: object)
}

func mapDBTEAMLOGMemberTransferredInternalFieldsToDBX(object: DBTEAMLOGMemberTransferredInternalFields) -> DBXTeamLogMemberTransferredInternalFields {
    DBXTeamLogMemberTransferredInternalFields(sourceTeamId: object.sourceTeamId, targetTeamId: object.targetTeamId)
}

func mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsToDBXOptional(object: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails?)
    -> DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsToDBX(object: DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails)
    -> DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails {
    DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails(
        newValue: mapDBTEAMLOGMicrosoftOfficeAddinPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGMicrosoftOfficeAddinPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeToDBXOptional(object: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType?)
    -> DBXTeamLogMicrosoftOfficeAddinChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGMicrosoftOfficeAddinChangePolicyTypeToDBX(object: DBTEAMLOGMicrosoftOfficeAddinChangePolicyType)
    -> DBXTeamLogMicrosoftOfficeAddinChangePolicyType {
    DBXTeamLogMicrosoftOfficeAddinChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGMicrosoftOfficeAddinPolicyToDBXOptional(object: DBTEAMLOGMicrosoftOfficeAddinPolicy?) -> DBXTeamLogMicrosoftOfficeAddinPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMicrosoftOfficeAddinPolicyToDBX(object: object)
}

func mapDBTEAMLOGMicrosoftOfficeAddinPolicyToDBX(object: DBTEAMLOGMicrosoftOfficeAddinPolicy) -> DBXTeamLogMicrosoftOfficeAddinPolicy {
    if object.isDisabled() {
        return DBXTeamLogMicrosoftOfficeAddinPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogMicrosoftOfficeAddinPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogMicrosoftOfficeAddinPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGMissingDetailsToDBXOptional(object: DBTEAMLOGMissingDetails?) -> DBXTeamLogMissingDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMissingDetailsToDBX(object: object)
}

func mapDBTEAMLOGMissingDetailsToDBX(object: DBTEAMLOGMissingDetails) -> DBXTeamLogMissingDetails {
    DBXTeamLogMissingDetails(sourceEventFields: object.sourceEventFields)
}

func mapDBTEAMLOGMobileDeviceSessionLogInfoToDBXOptional(object: DBTEAMLOGMobileDeviceSessionLogInfo?) -> DBXTeamLogMobileDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMobileDeviceSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGMobileDeviceSessionLogInfoToDBX(object: DBTEAMLOGMobileDeviceSessionLogInfo) -> DBXTeamLogMobileDeviceSessionLogInfo {
    DBXTeamLogMobileDeviceSessionLogInfo(
        deviceName: object.deviceName,
        clientType: mapDBTEAMMobileClientPlatformToDBX(object: object.clientType),
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBTEAMLOGMobileSessionLogInfoToDBXOptional(object: object.sessionInfo),
        clientVersion: object.clientVersion,
        osVersion: object.osVersion,
        lastCarrier: object.lastCarrier
    )
}

func mapDBTEAMLOGMobileSessionLogInfoToDBXOptional(object: DBTEAMLOGMobileSessionLogInfo?) -> DBXTeamLogMobileSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGMobileSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGMobileSessionLogInfoToDBX(object: DBTEAMLOGMobileSessionLogInfo) -> DBXTeamLogMobileSessionLogInfo {
    DBXTeamLogMobileSessionLogInfo(sessionId: object.sessionId)
}

func mapDBTEAMLOGNamespaceRelativePathLogInfoToDBXOptional(object: DBTEAMLOGNamespaceRelativePathLogInfo?) -> DBXTeamLogNamespaceRelativePathLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNamespaceRelativePathLogInfoToDBX(object: object)
}

func mapDBTEAMLOGNamespaceRelativePathLogInfoToDBX(object: DBTEAMLOGNamespaceRelativePathLogInfo) -> DBXTeamLogNamespaceRelativePathLogInfo {
    DBXTeamLogNamespaceRelativePathLogInfo(nsId: object.nsId, relativePath: object.relativePath, isSharedNamespace: object.isSharedNamespace)
}

func mapDBTEAMLOGNetworkControlChangePolicyDetailsToDBXOptional(object: DBTEAMLOGNetworkControlChangePolicyDetails?)
    -> DBXTeamLogNetworkControlChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNetworkControlChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGNetworkControlChangePolicyDetailsToDBX(object: DBTEAMLOGNetworkControlChangePolicyDetails) -> DBXTeamLogNetworkControlChangePolicyDetails {
    DBXTeamLogNetworkControlChangePolicyDetails(
        newValue: mapDBTEAMLOGNetworkControlPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGNetworkControlPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGNetworkControlChangePolicyTypeToDBXOptional(object: DBTEAMLOGNetworkControlChangePolicyType?) -> DBXTeamLogNetworkControlChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNetworkControlChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGNetworkControlChangePolicyTypeToDBX(object: DBTEAMLOGNetworkControlChangePolicyType) -> DBXTeamLogNetworkControlChangePolicyType {
    DBXTeamLogNetworkControlChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGNetworkControlPolicyToDBXOptional(object: DBTEAMLOGNetworkControlPolicy?) -> DBXTeamLogNetworkControlPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNetworkControlPolicyToDBX(object: object)
}

func mapDBTEAMLOGNetworkControlPolicyToDBX(object: DBTEAMLOGNetworkControlPolicy) -> DBXTeamLogNetworkControlPolicy {
    if object.isDisabled() {
        return DBXTeamLogNetworkControlPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogNetworkControlPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogNetworkControlPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGNoExpirationLinkGenCreateReportDetailsToDBXOptional(object: DBTEAMLOGNoExpirationLinkGenCreateReportDetails?)
    -> DBXTeamLogNoExpirationLinkGenCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoExpirationLinkGenCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoExpirationLinkGenCreateReportDetailsToDBX(object: DBTEAMLOGNoExpirationLinkGenCreateReportDetails)
    -> DBXTeamLogNoExpirationLinkGenCreateReportDetails {
    DBXTeamLogNoExpirationLinkGenCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGNoExpirationLinkGenCreateReportTypeToDBXOptional(object: DBTEAMLOGNoExpirationLinkGenCreateReportType?)
    -> DBXTeamLogNoExpirationLinkGenCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoExpirationLinkGenCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGNoExpirationLinkGenCreateReportTypeToDBX(object: DBTEAMLOGNoExpirationLinkGenCreateReportType)
    -> DBXTeamLogNoExpirationLinkGenCreateReportType {
    DBXTeamLogNoExpirationLinkGenCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGNoExpirationLinkGenReportFailedDetailsToDBXOptional(object: DBTEAMLOGNoExpirationLinkGenReportFailedDetails?)
    -> DBXTeamLogNoExpirationLinkGenReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoExpirationLinkGenReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoExpirationLinkGenReportFailedDetailsToDBX(object: DBTEAMLOGNoExpirationLinkGenReportFailedDetails)
    -> DBXTeamLogNoExpirationLinkGenReportFailedDetails {
    DBXTeamLogNoExpirationLinkGenReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGNoExpirationLinkGenReportFailedTypeToDBXOptional(object: DBTEAMLOGNoExpirationLinkGenReportFailedType?)
    -> DBXTeamLogNoExpirationLinkGenReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoExpirationLinkGenReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGNoExpirationLinkGenReportFailedTypeToDBX(object: DBTEAMLOGNoExpirationLinkGenReportFailedType)
    -> DBXTeamLogNoExpirationLinkGenReportFailedType {
    DBXTeamLogNoExpirationLinkGenReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGNoPasswordLinkGenCreateReportDetailsToDBXOptional(object: DBTEAMLOGNoPasswordLinkGenCreateReportDetails?)
    -> DBXTeamLogNoPasswordLinkGenCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkGenCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkGenCreateReportDetailsToDBX(object: DBTEAMLOGNoPasswordLinkGenCreateReportDetails)
    -> DBXTeamLogNoPasswordLinkGenCreateReportDetails {
    DBXTeamLogNoPasswordLinkGenCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGNoPasswordLinkGenCreateReportTypeToDBXOptional(object: DBTEAMLOGNoPasswordLinkGenCreateReportType?)
    -> DBXTeamLogNoPasswordLinkGenCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkGenCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkGenCreateReportTypeToDBX(object: DBTEAMLOGNoPasswordLinkGenCreateReportType) -> DBXTeamLogNoPasswordLinkGenCreateReportType {
    DBXTeamLogNoPasswordLinkGenCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGNoPasswordLinkGenReportFailedDetailsToDBXOptional(object: DBTEAMLOGNoPasswordLinkGenReportFailedDetails?)
    -> DBXTeamLogNoPasswordLinkGenReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkGenReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkGenReportFailedDetailsToDBX(object: DBTEAMLOGNoPasswordLinkGenReportFailedDetails)
    -> DBXTeamLogNoPasswordLinkGenReportFailedDetails {
    DBXTeamLogNoPasswordLinkGenReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGNoPasswordLinkGenReportFailedTypeToDBXOptional(object: DBTEAMLOGNoPasswordLinkGenReportFailedType?)
    -> DBXTeamLogNoPasswordLinkGenReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkGenReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkGenReportFailedTypeToDBX(object: DBTEAMLOGNoPasswordLinkGenReportFailedType) -> DBXTeamLogNoPasswordLinkGenReportFailedType {
    DBXTeamLogNoPasswordLinkGenReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGNoPasswordLinkViewCreateReportDetailsToDBXOptional(object: DBTEAMLOGNoPasswordLinkViewCreateReportDetails?)
    -> DBXTeamLogNoPasswordLinkViewCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkViewCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkViewCreateReportDetailsToDBX(object: DBTEAMLOGNoPasswordLinkViewCreateReportDetails)
    -> DBXTeamLogNoPasswordLinkViewCreateReportDetails {
    DBXTeamLogNoPasswordLinkViewCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGNoPasswordLinkViewCreateReportTypeToDBXOptional(object: DBTEAMLOGNoPasswordLinkViewCreateReportType?)
    -> DBXTeamLogNoPasswordLinkViewCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkViewCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkViewCreateReportTypeToDBX(object: DBTEAMLOGNoPasswordLinkViewCreateReportType) -> DBXTeamLogNoPasswordLinkViewCreateReportType {
    DBXTeamLogNoPasswordLinkViewCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGNoPasswordLinkViewReportFailedDetailsToDBXOptional(object: DBTEAMLOGNoPasswordLinkViewReportFailedDetails?)
    -> DBXTeamLogNoPasswordLinkViewReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkViewReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkViewReportFailedDetailsToDBX(object: DBTEAMLOGNoPasswordLinkViewReportFailedDetails)
    -> DBXTeamLogNoPasswordLinkViewReportFailedDetails {
    DBXTeamLogNoPasswordLinkViewReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGNoPasswordLinkViewReportFailedTypeToDBXOptional(object: DBTEAMLOGNoPasswordLinkViewReportFailedType?)
    -> DBXTeamLogNoPasswordLinkViewReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoPasswordLinkViewReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGNoPasswordLinkViewReportFailedTypeToDBX(object: DBTEAMLOGNoPasswordLinkViewReportFailedType) -> DBXTeamLogNoPasswordLinkViewReportFailedType {
    DBXTeamLogNoPasswordLinkViewReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGUserLogInfoToDBXOptional(object: DBTEAMLOGUserLogInfo?) -> DBXTeamLogUserLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserLogInfoToDBX(object: object)
}

func mapDBTEAMLOGUserLogInfoToDBX(object: DBTEAMLOGUserLogInfo) -> DBXTeamLogUserLogInfo {
    switch object {
    case let object as DBTEAMLOGTeamMemberLogInfo:
        return DBXTeamLogTeamMemberLogInfo(
            accountId: object.accountId,
            displayName: object.displayName,
            email: object.email,
            teamMemberId: object.teamMemberId,
            memberExternalId: object.memberExternalId,
            team: mapDBTEAMLOGTeamLogInfoToDBXOptional(object: object.team)
        )
    case let object as DBTEAMLOGTrustedNonTeamMemberLogInfo:
        return DBXTeamLogTrustedNonTeamMemberLogInfo(
            trustedNonTeamMemberType: mapDBTEAMLOGTrustedNonTeamMemberTypeToDBX(object: object.trustedNonTeamMemberType),
            accountId: object.accountId,
            displayName: object.displayName,
            email: object.email,
            team: mapDBTEAMLOGTeamLogInfoToDBXOptional(object: object.team)
        )
    case let object as DBTEAMLOGNonTeamMemberLogInfo:
        return DBXTeamLogNonTeamMemberLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
    default:
        return DBXTeamLogUserLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
    }
}

func mapDBTEAMLOGNonTeamMemberLogInfoToDBXOptional(object: DBTEAMLOGNonTeamMemberLogInfo?) -> DBXTeamLogNonTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNonTeamMemberLogInfoToDBX(object: object)
}

func mapDBTEAMLOGNonTeamMemberLogInfoToDBX(object: DBTEAMLOGNonTeamMemberLogInfo) -> DBXTeamLogNonTeamMemberLogInfo {
    DBXTeamLogNonTeamMemberLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
}

func mapDBTEAMLOGNonTrustedTeamDetailsToDBXOptional(object: DBTEAMLOGNonTrustedTeamDetails?) -> DBXTeamLogNonTrustedTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNonTrustedTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGNonTrustedTeamDetailsToDBX(object: DBTEAMLOGNonTrustedTeamDetails) -> DBXTeamLogNonTrustedTeamDetails {
    DBXTeamLogNonTrustedTeamDetails(team: object.team)
}

func mapDBTEAMLOGNoteAclInviteOnlyDetailsToDBXOptional(object: DBTEAMLOGNoteAclInviteOnlyDetails?) -> DBXTeamLogNoteAclInviteOnlyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclInviteOnlyDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoteAclInviteOnlyDetailsToDBX(object: DBTEAMLOGNoteAclInviteOnlyDetails) -> DBXTeamLogNoteAclInviteOnlyDetails {
    DBXTeamLogNoteAclInviteOnlyDetails()
}

func mapDBTEAMLOGNoteAclInviteOnlyTypeToDBXOptional(object: DBTEAMLOGNoteAclInviteOnlyType?) -> DBXTeamLogNoteAclInviteOnlyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclInviteOnlyTypeToDBX(object: object)
}

func mapDBTEAMLOGNoteAclInviteOnlyTypeToDBX(object: DBTEAMLOGNoteAclInviteOnlyType) -> DBXTeamLogNoteAclInviteOnlyType {
    DBXTeamLogNoteAclInviteOnlyType(description_: object.description_)
}

func mapDBTEAMLOGNoteAclLinkDetailsToDBXOptional(object: DBTEAMLOGNoteAclLinkDetails?) -> DBXTeamLogNoteAclLinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclLinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoteAclLinkDetailsToDBX(object: DBTEAMLOGNoteAclLinkDetails) -> DBXTeamLogNoteAclLinkDetails {
    DBXTeamLogNoteAclLinkDetails()
}

func mapDBTEAMLOGNoteAclLinkTypeToDBXOptional(object: DBTEAMLOGNoteAclLinkType?) -> DBXTeamLogNoteAclLinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclLinkTypeToDBX(object: object)
}

func mapDBTEAMLOGNoteAclLinkTypeToDBX(object: DBTEAMLOGNoteAclLinkType) -> DBXTeamLogNoteAclLinkType {
    DBXTeamLogNoteAclLinkType(description_: object.description_)
}

func mapDBTEAMLOGNoteAclTeamLinkDetailsToDBXOptional(object: DBTEAMLOGNoteAclTeamLinkDetails?) -> DBXTeamLogNoteAclTeamLinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclTeamLinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoteAclTeamLinkDetailsToDBX(object: DBTEAMLOGNoteAclTeamLinkDetails) -> DBXTeamLogNoteAclTeamLinkDetails {
    DBXTeamLogNoteAclTeamLinkDetails()
}

func mapDBTEAMLOGNoteAclTeamLinkTypeToDBXOptional(object: DBTEAMLOGNoteAclTeamLinkType?) -> DBXTeamLogNoteAclTeamLinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteAclTeamLinkTypeToDBX(object: object)
}

func mapDBTEAMLOGNoteAclTeamLinkTypeToDBX(object: DBTEAMLOGNoteAclTeamLinkType) -> DBXTeamLogNoteAclTeamLinkType {
    DBXTeamLogNoteAclTeamLinkType(description_: object.description_)
}

func mapDBTEAMLOGNoteShareReceiveDetailsToDBXOptional(object: DBTEAMLOGNoteShareReceiveDetails?) -> DBXTeamLogNoteShareReceiveDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteShareReceiveDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoteShareReceiveDetailsToDBX(object: DBTEAMLOGNoteShareReceiveDetails) -> DBXTeamLogNoteShareReceiveDetails {
    DBXTeamLogNoteShareReceiveDetails()
}

func mapDBTEAMLOGNoteShareReceiveTypeToDBXOptional(object: DBTEAMLOGNoteShareReceiveType?) -> DBXTeamLogNoteShareReceiveType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteShareReceiveTypeToDBX(object: object)
}

func mapDBTEAMLOGNoteShareReceiveTypeToDBX(object: DBTEAMLOGNoteShareReceiveType) -> DBXTeamLogNoteShareReceiveType {
    DBXTeamLogNoteShareReceiveType(description_: object.description_)
}

func mapDBTEAMLOGNoteSharedDetailsToDBXOptional(object: DBTEAMLOGNoteSharedDetails?) -> DBXTeamLogNoteSharedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteSharedDetailsToDBX(object: object)
}

func mapDBTEAMLOGNoteSharedDetailsToDBX(object: DBTEAMLOGNoteSharedDetails) -> DBXTeamLogNoteSharedDetails {
    DBXTeamLogNoteSharedDetails()
}

func mapDBTEAMLOGNoteSharedTypeToDBXOptional(object: DBTEAMLOGNoteSharedType?) -> DBXTeamLogNoteSharedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGNoteSharedTypeToDBX(object: object)
}

func mapDBTEAMLOGNoteSharedTypeToDBX(object: DBTEAMLOGNoteSharedType) -> DBXTeamLogNoteSharedType {
    DBXTeamLogNoteSharedType(description_: object.description_)
}

func mapDBTEAMLOGObjectLabelAddedDetailsToDBXOptional(object: DBTEAMLOGObjectLabelAddedDetails?) -> DBXTeamLogObjectLabelAddedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelAddedDetailsToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelAddedDetailsToDBX(object: DBTEAMLOGObjectLabelAddedDetails) -> DBXTeamLogObjectLabelAddedDetails {
    DBXTeamLogObjectLabelAddedDetails(labelType: mapDBTEAMLOGLabelTypeToDBX(object: object.labelType))
}

func mapDBTEAMLOGObjectLabelAddedTypeToDBXOptional(object: DBTEAMLOGObjectLabelAddedType?) -> DBXTeamLogObjectLabelAddedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelAddedTypeToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelAddedTypeToDBX(object: DBTEAMLOGObjectLabelAddedType) -> DBXTeamLogObjectLabelAddedType {
    DBXTeamLogObjectLabelAddedType(description_: object.description_)
}

func mapDBTEAMLOGObjectLabelRemovedDetailsToDBXOptional(object: DBTEAMLOGObjectLabelRemovedDetails?) -> DBXTeamLogObjectLabelRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelRemovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelRemovedDetailsToDBX(object: DBTEAMLOGObjectLabelRemovedDetails) -> DBXTeamLogObjectLabelRemovedDetails {
    DBXTeamLogObjectLabelRemovedDetails(labelType: mapDBTEAMLOGLabelTypeToDBX(object: object.labelType))
}

func mapDBTEAMLOGObjectLabelRemovedTypeToDBXOptional(object: DBTEAMLOGObjectLabelRemovedType?) -> DBXTeamLogObjectLabelRemovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelRemovedTypeToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelRemovedTypeToDBX(object: DBTEAMLOGObjectLabelRemovedType) -> DBXTeamLogObjectLabelRemovedType {
    DBXTeamLogObjectLabelRemovedType(description_: object.description_)
}

func mapDBTEAMLOGObjectLabelUpdatedValueDetailsToDBXOptional(object: DBTEAMLOGObjectLabelUpdatedValueDetails?) -> DBXTeamLogObjectLabelUpdatedValueDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelUpdatedValueDetailsToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelUpdatedValueDetailsToDBX(object: DBTEAMLOGObjectLabelUpdatedValueDetails) -> DBXTeamLogObjectLabelUpdatedValueDetails {
    DBXTeamLogObjectLabelUpdatedValueDetails(labelType: mapDBTEAMLOGLabelTypeToDBX(object: object.labelType))
}

func mapDBTEAMLOGObjectLabelUpdatedValueTypeToDBXOptional(object: DBTEAMLOGObjectLabelUpdatedValueType?) -> DBXTeamLogObjectLabelUpdatedValueType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGObjectLabelUpdatedValueTypeToDBX(object: object)
}

func mapDBTEAMLOGObjectLabelUpdatedValueTypeToDBX(object: DBTEAMLOGObjectLabelUpdatedValueType) -> DBXTeamLogObjectLabelUpdatedValueType {
    DBXTeamLogObjectLabelUpdatedValueType(description_: object.description_)
}

func mapDBTEAMLOGOpenNoteSharedDetailsToDBXOptional(object: DBTEAMLOGOpenNoteSharedDetails?) -> DBXTeamLogOpenNoteSharedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOpenNoteSharedDetailsToDBX(object: object)
}

func mapDBTEAMLOGOpenNoteSharedDetailsToDBX(object: DBTEAMLOGOpenNoteSharedDetails) -> DBXTeamLogOpenNoteSharedDetails {
    DBXTeamLogOpenNoteSharedDetails()
}

func mapDBTEAMLOGOpenNoteSharedTypeToDBXOptional(object: DBTEAMLOGOpenNoteSharedType?) -> DBXTeamLogOpenNoteSharedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOpenNoteSharedTypeToDBX(object: object)
}

func mapDBTEAMLOGOpenNoteSharedTypeToDBX(object: DBTEAMLOGOpenNoteSharedType) -> DBXTeamLogOpenNoteSharedType {
    DBXTeamLogOpenNoteSharedType(description_: object.description_)
}

func mapDBTEAMLOGOrganizationDetailsToDBXOptional(object: DBTEAMLOGOrganizationDetails?) -> DBXTeamLogOrganizationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOrganizationDetailsToDBX(object: object)
}

func mapDBTEAMLOGOrganizationDetailsToDBX(object: DBTEAMLOGOrganizationDetails) -> DBXTeamLogOrganizationDetails {
    DBXTeamLogOrganizationDetails(organization: object.organization)
}

func mapDBTEAMLOGOrganizationNameToDBXOptional(object: DBTEAMLOGOrganizationName?) -> DBXTeamLogOrganizationName? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOrganizationNameToDBX(object: object)
}

func mapDBTEAMLOGOrganizationNameToDBX(object: DBTEAMLOGOrganizationName) -> DBXTeamLogOrganizationName {
    DBXTeamLogOrganizationName(organization: object.organization)
}

func mapDBTEAMLOGOrganizeFolderWithTidyDetailsToDBXOptional(object: DBTEAMLOGOrganizeFolderWithTidyDetails?) -> DBXTeamLogOrganizeFolderWithTidyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOrganizeFolderWithTidyDetailsToDBX(object: object)
}

func mapDBTEAMLOGOrganizeFolderWithTidyDetailsToDBX(object: DBTEAMLOGOrganizeFolderWithTidyDetails) -> DBXTeamLogOrganizeFolderWithTidyDetails {
    DBXTeamLogOrganizeFolderWithTidyDetails()
}

func mapDBTEAMLOGOrganizeFolderWithTidyTypeToDBXOptional(object: DBTEAMLOGOrganizeFolderWithTidyType?) -> DBXTeamLogOrganizeFolderWithTidyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOrganizeFolderWithTidyTypeToDBX(object: object)
}

func mapDBTEAMLOGOrganizeFolderWithTidyTypeToDBX(object: DBTEAMLOGOrganizeFolderWithTidyType) -> DBXTeamLogOrganizeFolderWithTidyType {
    DBXTeamLogOrganizeFolderWithTidyType(description_: object.description_)
}

func mapDBTEAMLOGOriginLogInfoToDBXOptional(object: DBTEAMLOGOriginLogInfo?) -> DBXTeamLogOriginLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOriginLogInfoToDBX(object: object)
}

func mapDBTEAMLOGOriginLogInfoToDBX(object: DBTEAMLOGOriginLogInfo) -> DBXTeamLogOriginLogInfo {
    DBXTeamLogOriginLogInfo(
        accessMethod: mapDBTEAMLOGAccessMethodLogInfoToDBX(object: object.accessMethod),
        geoLocation: mapDBTEAMLOGGeoLocationLogInfoToDBXOptional(object: object.geoLocation)
    )
}

func mapDBTEAMLOGOutdatedLinkViewCreateReportDetailsToDBXOptional(object: DBTEAMLOGOutdatedLinkViewCreateReportDetails?)
    -> DBXTeamLogOutdatedLinkViewCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOutdatedLinkViewCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGOutdatedLinkViewCreateReportDetailsToDBX(object: DBTEAMLOGOutdatedLinkViewCreateReportDetails)
    -> DBXTeamLogOutdatedLinkViewCreateReportDetails {
    DBXTeamLogOutdatedLinkViewCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGOutdatedLinkViewCreateReportTypeToDBXOptional(object: DBTEAMLOGOutdatedLinkViewCreateReportType?)
    -> DBXTeamLogOutdatedLinkViewCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOutdatedLinkViewCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGOutdatedLinkViewCreateReportTypeToDBX(object: DBTEAMLOGOutdatedLinkViewCreateReportType) -> DBXTeamLogOutdatedLinkViewCreateReportType {
    DBXTeamLogOutdatedLinkViewCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGOutdatedLinkViewReportFailedDetailsToDBXOptional(object: DBTEAMLOGOutdatedLinkViewReportFailedDetails?)
    -> DBXTeamLogOutdatedLinkViewReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOutdatedLinkViewReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGOutdatedLinkViewReportFailedDetailsToDBX(object: DBTEAMLOGOutdatedLinkViewReportFailedDetails)
    -> DBXTeamLogOutdatedLinkViewReportFailedDetails {
    DBXTeamLogOutdatedLinkViewReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGOutdatedLinkViewReportFailedTypeToDBXOptional(object: DBTEAMLOGOutdatedLinkViewReportFailedType?)
    -> DBXTeamLogOutdatedLinkViewReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGOutdatedLinkViewReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGOutdatedLinkViewReportFailedTypeToDBX(object: DBTEAMLOGOutdatedLinkViewReportFailedType) -> DBXTeamLogOutdatedLinkViewReportFailedType {
    DBXTeamLogOutdatedLinkViewReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGPaperAccessTypeToDBXOptional(object: DBTEAMLOGPaperAccessType?) -> DBXTeamLogPaperAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperAccessTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperAccessTypeToDBX(object: DBTEAMLOGPaperAccessType) -> DBXTeamLogPaperAccessType {
    if object.isCommenter() {
        return DBXTeamLogPaperAccessTypeCommenter()
    }
    if object.isEditor() {
        return DBXTeamLogPaperAccessTypeEditor()
    }
    if object.isViewer() {
        return DBXTeamLogPaperAccessTypeViewer()
    }
    if object.isOther() {
        return DBXTeamLogPaperAccessTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPaperAdminExportStartDetailsToDBXOptional(object: DBTEAMLOGPaperAdminExportStartDetails?) -> DBXTeamLogPaperAdminExportStartDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperAdminExportStartDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperAdminExportStartDetailsToDBX(object: DBTEAMLOGPaperAdminExportStartDetails) -> DBXTeamLogPaperAdminExportStartDetails {
    DBXTeamLogPaperAdminExportStartDetails()
}

func mapDBTEAMLOGPaperAdminExportStartTypeToDBXOptional(object: DBTEAMLOGPaperAdminExportStartType?) -> DBXTeamLogPaperAdminExportStartType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperAdminExportStartTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperAdminExportStartTypeToDBX(object: DBTEAMLOGPaperAdminExportStartType) -> DBXTeamLogPaperAdminExportStartType {
    DBXTeamLogPaperAdminExportStartType(description_: object.description_)
}

func mapDBTEAMLOGPaperChangeDeploymentPolicyDetailsToDBXOptional(object: DBTEAMLOGPaperChangeDeploymentPolicyDetails?)
    -> DBXTeamLogPaperChangeDeploymentPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeDeploymentPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeDeploymentPolicyDetailsToDBX(object: DBTEAMLOGPaperChangeDeploymentPolicyDetails) -> DBXTeamLogPaperChangeDeploymentPolicyDetails {
    DBXTeamLogPaperChangeDeploymentPolicyDetails(
        newValue: mapDBTEAMPOLICIESPaperDeploymentPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESPaperDeploymentPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGPaperChangeDeploymentPolicyTypeToDBXOptional(object: DBTEAMLOGPaperChangeDeploymentPolicyType?) -> DBXTeamLogPaperChangeDeploymentPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeDeploymentPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeDeploymentPolicyTypeToDBX(object: DBTEAMLOGPaperChangeDeploymentPolicyType) -> DBXTeamLogPaperChangeDeploymentPolicyType {
    DBXTeamLogPaperChangeDeploymentPolicyType(description_: object.description_)
}

func mapDBTEAMLOGPaperChangeMemberLinkPolicyDetailsToDBXOptional(object: DBTEAMLOGPaperChangeMemberLinkPolicyDetails?)
    -> DBXTeamLogPaperChangeMemberLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeMemberLinkPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeMemberLinkPolicyDetailsToDBX(object: DBTEAMLOGPaperChangeMemberLinkPolicyDetails) -> DBXTeamLogPaperChangeMemberLinkPolicyDetails {
    DBXTeamLogPaperChangeMemberLinkPolicyDetails(newValue: mapDBTEAMLOGPaperMemberPolicyToDBX(object: object.dNewValue))
}

func mapDBTEAMLOGPaperChangeMemberLinkPolicyTypeToDBXOptional(object: DBTEAMLOGPaperChangeMemberLinkPolicyType?) -> DBXTeamLogPaperChangeMemberLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeMemberLinkPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeMemberLinkPolicyTypeToDBX(object: DBTEAMLOGPaperChangeMemberLinkPolicyType) -> DBXTeamLogPaperChangeMemberLinkPolicyType {
    DBXTeamLogPaperChangeMemberLinkPolicyType(description_: object.description_)
}

func mapDBTEAMLOGPaperChangeMemberPolicyDetailsToDBXOptional(object: DBTEAMLOGPaperChangeMemberPolicyDetails?) -> DBXTeamLogPaperChangeMemberPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeMemberPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeMemberPolicyDetailsToDBX(object: DBTEAMLOGPaperChangeMemberPolicyDetails) -> DBXTeamLogPaperChangeMemberPolicyDetails {
    DBXTeamLogPaperChangeMemberPolicyDetails(
        newValue: mapDBTEAMLOGPaperMemberPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGPaperMemberPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGPaperChangeMemberPolicyTypeToDBXOptional(object: DBTEAMLOGPaperChangeMemberPolicyType?) -> DBXTeamLogPaperChangeMemberPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangeMemberPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperChangeMemberPolicyTypeToDBX(object: DBTEAMLOGPaperChangeMemberPolicyType) -> DBXTeamLogPaperChangeMemberPolicyType {
    DBXTeamLogPaperChangeMemberPolicyType(description_: object.description_)
}

func mapDBTEAMLOGPaperChangePolicyDetailsToDBXOptional(object: DBTEAMLOGPaperChangePolicyDetails?) -> DBXTeamLogPaperChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperChangePolicyDetailsToDBX(object: DBTEAMLOGPaperChangePolicyDetails) -> DBXTeamLogPaperChangePolicyDetails {
    DBXTeamLogPaperChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESPaperEnabledPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESPaperEnabledPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGPaperChangePolicyTypeToDBXOptional(object: DBTEAMLOGPaperChangePolicyType?) -> DBXTeamLogPaperChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperChangePolicyTypeToDBX(object: DBTEAMLOGPaperChangePolicyType) -> DBXTeamLogPaperChangePolicyType {
    DBXTeamLogPaperChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentAddMemberDetailsToDBXOptional(object: DBTEAMLOGPaperContentAddMemberDetails?) -> DBXTeamLogPaperContentAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentAddMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentAddMemberDetailsToDBX(object: DBTEAMLOGPaperContentAddMemberDetails) -> DBXTeamLogPaperContentAddMemberDetails {
    DBXTeamLogPaperContentAddMemberDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentAddMemberTypeToDBXOptional(object: DBTEAMLOGPaperContentAddMemberType?) -> DBXTeamLogPaperContentAddMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentAddMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentAddMemberTypeToDBX(object: DBTEAMLOGPaperContentAddMemberType) -> DBXTeamLogPaperContentAddMemberType {
    DBXTeamLogPaperContentAddMemberType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentAddToFolderDetailsToDBXOptional(object: DBTEAMLOGPaperContentAddToFolderDetails?) -> DBXTeamLogPaperContentAddToFolderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentAddToFolderDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentAddToFolderDetailsToDBX(object: DBTEAMLOGPaperContentAddToFolderDetails) -> DBXTeamLogPaperContentAddToFolderDetails {
    DBXTeamLogPaperContentAddToFolderDetails(eventUuid: object.eventUuid, targetAssetIndex: object.targetAssetIndex, parentAssetIndex: object.parentAssetIndex)
}

func mapDBTEAMLOGPaperContentAddToFolderTypeToDBXOptional(object: DBTEAMLOGPaperContentAddToFolderType?) -> DBXTeamLogPaperContentAddToFolderType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentAddToFolderTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentAddToFolderTypeToDBX(object: DBTEAMLOGPaperContentAddToFolderType) -> DBXTeamLogPaperContentAddToFolderType {
    DBXTeamLogPaperContentAddToFolderType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentArchiveDetailsToDBXOptional(object: DBTEAMLOGPaperContentArchiveDetails?) -> DBXTeamLogPaperContentArchiveDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentArchiveDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentArchiveDetailsToDBX(object: DBTEAMLOGPaperContentArchiveDetails) -> DBXTeamLogPaperContentArchiveDetails {
    DBXTeamLogPaperContentArchiveDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentArchiveTypeToDBXOptional(object: DBTEAMLOGPaperContentArchiveType?) -> DBXTeamLogPaperContentArchiveType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentArchiveTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentArchiveTypeToDBX(object: DBTEAMLOGPaperContentArchiveType) -> DBXTeamLogPaperContentArchiveType {
    DBXTeamLogPaperContentArchiveType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentCreateDetailsToDBXOptional(object: DBTEAMLOGPaperContentCreateDetails?) -> DBXTeamLogPaperContentCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentCreateDetailsToDBX(object: DBTEAMLOGPaperContentCreateDetails) -> DBXTeamLogPaperContentCreateDetails {
    DBXTeamLogPaperContentCreateDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentCreateTypeToDBXOptional(object: DBTEAMLOGPaperContentCreateType?) -> DBXTeamLogPaperContentCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentCreateTypeToDBX(object: DBTEAMLOGPaperContentCreateType) -> DBXTeamLogPaperContentCreateType {
    DBXTeamLogPaperContentCreateType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentPermanentlyDeleteDetailsToDBXOptional(object: DBTEAMLOGPaperContentPermanentlyDeleteDetails?)
    -> DBXTeamLogPaperContentPermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentPermanentlyDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentPermanentlyDeleteDetailsToDBX(object: DBTEAMLOGPaperContentPermanentlyDeleteDetails)
    -> DBXTeamLogPaperContentPermanentlyDeleteDetails {
    DBXTeamLogPaperContentPermanentlyDeleteDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentPermanentlyDeleteTypeToDBXOptional(object: DBTEAMLOGPaperContentPermanentlyDeleteType?)
    -> DBXTeamLogPaperContentPermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentPermanentlyDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentPermanentlyDeleteTypeToDBX(object: DBTEAMLOGPaperContentPermanentlyDeleteType) -> DBXTeamLogPaperContentPermanentlyDeleteType {
    DBXTeamLogPaperContentPermanentlyDeleteType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentRemoveFromFolderDetailsToDBXOptional(object: DBTEAMLOGPaperContentRemoveFromFolderDetails?)
    -> DBXTeamLogPaperContentRemoveFromFolderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRemoveFromFolderDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRemoveFromFolderDetailsToDBX(object: DBTEAMLOGPaperContentRemoveFromFolderDetails)
    -> DBXTeamLogPaperContentRemoveFromFolderDetails {
    DBXTeamLogPaperContentRemoveFromFolderDetails(
        eventUuid: object.eventUuid,
        targetAssetIndex: object.targetAssetIndex,
        parentAssetIndex: object.parentAssetIndex
    )
}

func mapDBTEAMLOGPaperContentRemoveFromFolderTypeToDBXOptional(object: DBTEAMLOGPaperContentRemoveFromFolderType?)
    -> DBXTeamLogPaperContentRemoveFromFolderType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRemoveFromFolderTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRemoveFromFolderTypeToDBX(object: DBTEAMLOGPaperContentRemoveFromFolderType) -> DBXTeamLogPaperContentRemoveFromFolderType {
    DBXTeamLogPaperContentRemoveFromFolderType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentRemoveMemberDetailsToDBXOptional(object: DBTEAMLOGPaperContentRemoveMemberDetails?) -> DBXTeamLogPaperContentRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRemoveMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRemoveMemberDetailsToDBX(object: DBTEAMLOGPaperContentRemoveMemberDetails) -> DBXTeamLogPaperContentRemoveMemberDetails {
    DBXTeamLogPaperContentRemoveMemberDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentRemoveMemberTypeToDBXOptional(object: DBTEAMLOGPaperContentRemoveMemberType?) -> DBXTeamLogPaperContentRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRemoveMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRemoveMemberTypeToDBX(object: DBTEAMLOGPaperContentRemoveMemberType) -> DBXTeamLogPaperContentRemoveMemberType {
    DBXTeamLogPaperContentRemoveMemberType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentRenameDetailsToDBXOptional(object: DBTEAMLOGPaperContentRenameDetails?) -> DBXTeamLogPaperContentRenameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRenameDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRenameDetailsToDBX(object: DBTEAMLOGPaperContentRenameDetails) -> DBXTeamLogPaperContentRenameDetails {
    DBXTeamLogPaperContentRenameDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentRenameTypeToDBXOptional(object: DBTEAMLOGPaperContentRenameType?) -> DBXTeamLogPaperContentRenameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRenameTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRenameTypeToDBX(object: DBTEAMLOGPaperContentRenameType) -> DBXTeamLogPaperContentRenameType {
    DBXTeamLogPaperContentRenameType(description_: object.description_)
}

func mapDBTEAMLOGPaperContentRestoreDetailsToDBXOptional(object: DBTEAMLOGPaperContentRestoreDetails?) -> DBXTeamLogPaperContentRestoreDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRestoreDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRestoreDetailsToDBX(object: DBTEAMLOGPaperContentRestoreDetails) -> DBXTeamLogPaperContentRestoreDetails {
    DBXTeamLogPaperContentRestoreDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperContentRestoreTypeToDBXOptional(object: DBTEAMLOGPaperContentRestoreType?) -> DBXTeamLogPaperContentRestoreType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperContentRestoreTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperContentRestoreTypeToDBX(object: DBTEAMLOGPaperContentRestoreType) -> DBXTeamLogPaperContentRestoreType {
    DBXTeamLogPaperContentRestoreType(description_: object.description_)
}

func mapDBTEAMLOGPaperDefaultFolderPolicyToDBXOptional(object: DBTEAMLOGPaperDefaultFolderPolicy?) -> DBXTeamLogPaperDefaultFolderPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDefaultFolderPolicyToDBX(object: object)
}

func mapDBTEAMLOGPaperDefaultFolderPolicyToDBX(object: DBTEAMLOGPaperDefaultFolderPolicy) -> DBXTeamLogPaperDefaultFolderPolicy {
    if object.isEveryoneInTeam() {
        return DBXTeamLogPaperDefaultFolderPolicyEveryoneInTeam()
    }
    if object.isInviteOnly() {
        return DBXTeamLogPaperDefaultFolderPolicyInviteOnly()
    }
    if object.isOther() {
        return DBXTeamLogPaperDefaultFolderPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPaperDefaultFolderPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGPaperDefaultFolderPolicyChangedDetails?)
    -> DBXTeamLogPaperDefaultFolderPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDefaultFolderPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDefaultFolderPolicyChangedDetailsToDBX(object: DBTEAMLOGPaperDefaultFolderPolicyChangedDetails)
    -> DBXTeamLogPaperDefaultFolderPolicyChangedDetails {
    DBXTeamLogPaperDefaultFolderPolicyChangedDetails(
        newValue: mapDBTEAMLOGPaperDefaultFolderPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGPaperDefaultFolderPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGPaperDefaultFolderPolicyChangedTypeToDBXOptional(object: DBTEAMLOGPaperDefaultFolderPolicyChangedType?)
    -> DBXTeamLogPaperDefaultFolderPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDefaultFolderPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDefaultFolderPolicyChangedTypeToDBX(object: DBTEAMLOGPaperDefaultFolderPolicyChangedType)
    -> DBXTeamLogPaperDefaultFolderPolicyChangedType {
    DBXTeamLogPaperDefaultFolderPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDesktopPolicyToDBXOptional(object: DBTEAMLOGPaperDesktopPolicy?) -> DBXTeamLogPaperDesktopPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDesktopPolicyToDBX(object: object)
}

func mapDBTEAMLOGPaperDesktopPolicyToDBX(object: DBTEAMLOGPaperDesktopPolicy) -> DBXTeamLogPaperDesktopPolicy {
    if object.isDisabled() {
        return DBXTeamLogPaperDesktopPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogPaperDesktopPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogPaperDesktopPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPaperDesktopPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGPaperDesktopPolicyChangedDetails?)
    -> DBXTeamLogPaperDesktopPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDesktopPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDesktopPolicyChangedDetailsToDBX(object: DBTEAMLOGPaperDesktopPolicyChangedDetails) -> DBXTeamLogPaperDesktopPolicyChangedDetails {
    DBXTeamLogPaperDesktopPolicyChangedDetails(
        newValue: mapDBTEAMLOGPaperDesktopPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGPaperDesktopPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGPaperDesktopPolicyChangedTypeToDBXOptional(object: DBTEAMLOGPaperDesktopPolicyChangedType?) -> DBXTeamLogPaperDesktopPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDesktopPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDesktopPolicyChangedTypeToDBX(object: DBTEAMLOGPaperDesktopPolicyChangedType) -> DBXTeamLogPaperDesktopPolicyChangedType {
    DBXTeamLogPaperDesktopPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocAddCommentDetailsToDBXOptional(object: DBTEAMLOGPaperDocAddCommentDetails?) -> DBXTeamLogPaperDocAddCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocAddCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocAddCommentDetailsToDBX(object: DBTEAMLOGPaperDocAddCommentDetails) -> DBXTeamLogPaperDocAddCommentDetails {
    DBXTeamLogPaperDocAddCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGPaperDocAddCommentTypeToDBXOptional(object: DBTEAMLOGPaperDocAddCommentType?) -> DBXTeamLogPaperDocAddCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocAddCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocAddCommentTypeToDBX(object: DBTEAMLOGPaperDocAddCommentType) -> DBXTeamLogPaperDocAddCommentType {
    DBXTeamLogPaperDocAddCommentType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocChangeMemberRoleDetailsToDBXOptional(object: DBTEAMLOGPaperDocChangeMemberRoleDetails?) -> DBXTeamLogPaperDocChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeMemberRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeMemberRoleDetailsToDBX(object: DBTEAMLOGPaperDocChangeMemberRoleDetails) -> DBXTeamLogPaperDocChangeMemberRoleDetails {
    DBXTeamLogPaperDocChangeMemberRoleDetails(eventUuid: object.eventUuid, accessType: mapDBTEAMLOGPaperAccessTypeToDBX(object: object.accessType))
}

func mapDBTEAMLOGPaperDocChangeMemberRoleTypeToDBXOptional(object: DBTEAMLOGPaperDocChangeMemberRoleType?) -> DBXTeamLogPaperDocChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeMemberRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeMemberRoleTypeToDBX(object: DBTEAMLOGPaperDocChangeMemberRoleType) -> DBXTeamLogPaperDocChangeMemberRoleType {
    DBXTeamLogPaperDocChangeMemberRoleType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocChangeSharingPolicyDetailsToDBXOptional(object: DBTEAMLOGPaperDocChangeSharingPolicyDetails?)
    -> DBXTeamLogPaperDocChangeSharingPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeSharingPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeSharingPolicyDetailsToDBX(object: DBTEAMLOGPaperDocChangeSharingPolicyDetails) -> DBXTeamLogPaperDocChangeSharingPolicyDetails {
    DBXTeamLogPaperDocChangeSharingPolicyDetails(
        eventUuid: object.eventUuid,
        publicSharingPolicy: object.publicSharingPolicy,
        teamSharingPolicy: object.teamSharingPolicy
    )
}

func mapDBTEAMLOGPaperDocChangeSharingPolicyTypeToDBXOptional(object: DBTEAMLOGPaperDocChangeSharingPolicyType?) -> DBXTeamLogPaperDocChangeSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeSharingPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeSharingPolicyTypeToDBX(object: DBTEAMLOGPaperDocChangeSharingPolicyType) -> DBXTeamLogPaperDocChangeSharingPolicyType {
    DBXTeamLogPaperDocChangeSharingPolicyType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocChangeSubscriptionDetailsToDBXOptional(object: DBTEAMLOGPaperDocChangeSubscriptionDetails?)
    -> DBXTeamLogPaperDocChangeSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeSubscriptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeSubscriptionDetailsToDBX(object: DBTEAMLOGPaperDocChangeSubscriptionDetails) -> DBXTeamLogPaperDocChangeSubscriptionDetails {
    DBXTeamLogPaperDocChangeSubscriptionDetails(
        eventUuid: object.eventUuid,
        newSubscriptionLevel: object.dNewSubscriptionLevel,
        previousSubscriptionLevel: object.previousSubscriptionLevel
    )
}

func mapDBTEAMLOGPaperDocChangeSubscriptionTypeToDBXOptional(object: DBTEAMLOGPaperDocChangeSubscriptionType?) -> DBXTeamLogPaperDocChangeSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocChangeSubscriptionTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocChangeSubscriptionTypeToDBX(object: DBTEAMLOGPaperDocChangeSubscriptionType) -> DBXTeamLogPaperDocChangeSubscriptionType {
    DBXTeamLogPaperDocChangeSubscriptionType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocDeleteCommentDetailsToDBXOptional(object: DBTEAMLOGPaperDocDeleteCommentDetails?) -> DBXTeamLogPaperDocDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDeleteCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDeleteCommentDetailsToDBX(object: DBTEAMLOGPaperDocDeleteCommentDetails) -> DBXTeamLogPaperDocDeleteCommentDetails {
    DBXTeamLogPaperDocDeleteCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGPaperDocDeleteCommentTypeToDBXOptional(object: DBTEAMLOGPaperDocDeleteCommentType?) -> DBXTeamLogPaperDocDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDeleteCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDeleteCommentTypeToDBX(object: DBTEAMLOGPaperDocDeleteCommentType) -> DBXTeamLogPaperDocDeleteCommentType {
    DBXTeamLogPaperDocDeleteCommentType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocDeletedDetailsToDBXOptional(object: DBTEAMLOGPaperDocDeletedDetails?) -> DBXTeamLogPaperDocDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDeletedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDeletedDetailsToDBX(object: DBTEAMLOGPaperDocDeletedDetails) -> DBXTeamLogPaperDocDeletedDetails {
    DBXTeamLogPaperDocDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocDeletedTypeToDBXOptional(object: DBTEAMLOGPaperDocDeletedType?) -> DBXTeamLogPaperDocDeletedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDeletedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDeletedTypeToDBX(object: DBTEAMLOGPaperDocDeletedType) -> DBXTeamLogPaperDocDeletedType {
    DBXTeamLogPaperDocDeletedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocDownloadDetailsToDBXOptional(object: DBTEAMLOGPaperDocDownloadDetails?) -> DBXTeamLogPaperDocDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDownloadDetailsToDBX(object: DBTEAMLOGPaperDocDownloadDetails) -> DBXTeamLogPaperDocDownloadDetails {
    DBXTeamLogPaperDocDownloadDetails(eventUuid: object.eventUuid, exportFileFormat: mapDBTEAMLOGPaperDownloadFormatToDBX(object: object.exportFileFormat))
}

func mapDBTEAMLOGPaperDocDownloadTypeToDBXOptional(object: DBTEAMLOGPaperDocDownloadType?) -> DBXTeamLogPaperDocDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocDownloadTypeToDBX(object: DBTEAMLOGPaperDocDownloadType) -> DBXTeamLogPaperDocDownloadType {
    DBXTeamLogPaperDocDownloadType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocEditCommentDetailsToDBXOptional(object: DBTEAMLOGPaperDocEditCommentDetails?) -> DBXTeamLogPaperDocEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocEditCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocEditCommentDetailsToDBX(object: DBTEAMLOGPaperDocEditCommentDetails) -> DBXTeamLogPaperDocEditCommentDetails {
    DBXTeamLogPaperDocEditCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGPaperDocEditCommentTypeToDBXOptional(object: DBTEAMLOGPaperDocEditCommentType?) -> DBXTeamLogPaperDocEditCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocEditCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocEditCommentTypeToDBX(object: DBTEAMLOGPaperDocEditCommentType) -> DBXTeamLogPaperDocEditCommentType {
    DBXTeamLogPaperDocEditCommentType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocEditDetailsToDBXOptional(object: DBTEAMLOGPaperDocEditDetails?) -> DBXTeamLogPaperDocEditDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocEditDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocEditDetailsToDBX(object: DBTEAMLOGPaperDocEditDetails) -> DBXTeamLogPaperDocEditDetails {
    DBXTeamLogPaperDocEditDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocEditTypeToDBXOptional(object: DBTEAMLOGPaperDocEditType?) -> DBXTeamLogPaperDocEditType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocEditTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocEditTypeToDBX(object: DBTEAMLOGPaperDocEditType) -> DBXTeamLogPaperDocEditType {
    DBXTeamLogPaperDocEditType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocFollowedDetailsToDBXOptional(object: DBTEAMLOGPaperDocFollowedDetails?) -> DBXTeamLogPaperDocFollowedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocFollowedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocFollowedDetailsToDBX(object: DBTEAMLOGPaperDocFollowedDetails) -> DBXTeamLogPaperDocFollowedDetails {
    DBXTeamLogPaperDocFollowedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocFollowedTypeToDBXOptional(object: DBTEAMLOGPaperDocFollowedType?) -> DBXTeamLogPaperDocFollowedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocFollowedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocFollowedTypeToDBX(object: DBTEAMLOGPaperDocFollowedType) -> DBXTeamLogPaperDocFollowedType {
    DBXTeamLogPaperDocFollowedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocMentionDetailsToDBXOptional(object: DBTEAMLOGPaperDocMentionDetails?) -> DBXTeamLogPaperDocMentionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocMentionDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocMentionDetailsToDBX(object: DBTEAMLOGPaperDocMentionDetails) -> DBXTeamLogPaperDocMentionDetails {
    DBXTeamLogPaperDocMentionDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocMentionTypeToDBXOptional(object: DBTEAMLOGPaperDocMentionType?) -> DBXTeamLogPaperDocMentionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocMentionTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocMentionTypeToDBX(object: DBTEAMLOGPaperDocMentionType) -> DBXTeamLogPaperDocMentionType {
    DBXTeamLogPaperDocMentionType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocOwnershipChangedDetailsToDBXOptional(object: DBTEAMLOGPaperDocOwnershipChangedDetails?) -> DBXTeamLogPaperDocOwnershipChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocOwnershipChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocOwnershipChangedDetailsToDBX(object: DBTEAMLOGPaperDocOwnershipChangedDetails) -> DBXTeamLogPaperDocOwnershipChangedDetails {
    DBXTeamLogPaperDocOwnershipChangedDetails(eventUuid: object.eventUuid, newOwnerUserId: object.dNewOwnerUserId, oldOwnerUserId: object.oldOwnerUserId)
}

func mapDBTEAMLOGPaperDocOwnershipChangedTypeToDBXOptional(object: DBTEAMLOGPaperDocOwnershipChangedType?) -> DBXTeamLogPaperDocOwnershipChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocOwnershipChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocOwnershipChangedTypeToDBX(object: DBTEAMLOGPaperDocOwnershipChangedType) -> DBXTeamLogPaperDocOwnershipChangedType {
    DBXTeamLogPaperDocOwnershipChangedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocRequestAccessDetailsToDBXOptional(object: DBTEAMLOGPaperDocRequestAccessDetails?) -> DBXTeamLogPaperDocRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocRequestAccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocRequestAccessDetailsToDBX(object: DBTEAMLOGPaperDocRequestAccessDetails) -> DBXTeamLogPaperDocRequestAccessDetails {
    DBXTeamLogPaperDocRequestAccessDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocRequestAccessTypeToDBXOptional(object: DBTEAMLOGPaperDocRequestAccessType?) -> DBXTeamLogPaperDocRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocRequestAccessTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocRequestAccessTypeToDBX(object: DBTEAMLOGPaperDocRequestAccessType) -> DBXTeamLogPaperDocRequestAccessType {
    DBXTeamLogPaperDocRequestAccessType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocResolveCommentDetailsToDBXOptional(object: DBTEAMLOGPaperDocResolveCommentDetails?) -> DBXTeamLogPaperDocResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocResolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocResolveCommentDetailsToDBX(object: DBTEAMLOGPaperDocResolveCommentDetails) -> DBXTeamLogPaperDocResolveCommentDetails {
    DBXTeamLogPaperDocResolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGPaperDocResolveCommentTypeToDBXOptional(object: DBTEAMLOGPaperDocResolveCommentType?) -> DBXTeamLogPaperDocResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocResolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocResolveCommentTypeToDBX(object: DBTEAMLOGPaperDocResolveCommentType) -> DBXTeamLogPaperDocResolveCommentType {
    DBXTeamLogPaperDocResolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocRevertDetailsToDBXOptional(object: DBTEAMLOGPaperDocRevertDetails?) -> DBXTeamLogPaperDocRevertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocRevertDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocRevertDetailsToDBX(object: DBTEAMLOGPaperDocRevertDetails) -> DBXTeamLogPaperDocRevertDetails {
    DBXTeamLogPaperDocRevertDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocRevertTypeToDBXOptional(object: DBTEAMLOGPaperDocRevertType?) -> DBXTeamLogPaperDocRevertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocRevertTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocRevertTypeToDBX(object: DBTEAMLOGPaperDocRevertType) -> DBXTeamLogPaperDocRevertType {
    DBXTeamLogPaperDocRevertType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocSlackShareDetailsToDBXOptional(object: DBTEAMLOGPaperDocSlackShareDetails?) -> DBXTeamLogPaperDocSlackShareDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocSlackShareDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocSlackShareDetailsToDBX(object: DBTEAMLOGPaperDocSlackShareDetails) -> DBXTeamLogPaperDocSlackShareDetails {
    DBXTeamLogPaperDocSlackShareDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocSlackShareTypeToDBXOptional(object: DBTEAMLOGPaperDocSlackShareType?) -> DBXTeamLogPaperDocSlackShareType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocSlackShareTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocSlackShareTypeToDBX(object: DBTEAMLOGPaperDocSlackShareType) -> DBXTeamLogPaperDocSlackShareType {
    DBXTeamLogPaperDocSlackShareType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocTeamInviteDetailsToDBXOptional(object: DBTEAMLOGPaperDocTeamInviteDetails?) -> DBXTeamLogPaperDocTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocTeamInviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocTeamInviteDetailsToDBX(object: DBTEAMLOGPaperDocTeamInviteDetails) -> DBXTeamLogPaperDocTeamInviteDetails {
    DBXTeamLogPaperDocTeamInviteDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocTeamInviteTypeToDBXOptional(object: DBTEAMLOGPaperDocTeamInviteType?) -> DBXTeamLogPaperDocTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocTeamInviteTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocTeamInviteTypeToDBX(object: DBTEAMLOGPaperDocTeamInviteType) -> DBXTeamLogPaperDocTeamInviteType {
    DBXTeamLogPaperDocTeamInviteType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocTrashedDetailsToDBXOptional(object: DBTEAMLOGPaperDocTrashedDetails?) -> DBXTeamLogPaperDocTrashedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocTrashedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocTrashedDetailsToDBX(object: DBTEAMLOGPaperDocTrashedDetails) -> DBXTeamLogPaperDocTrashedDetails {
    DBXTeamLogPaperDocTrashedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocTrashedTypeToDBXOptional(object: DBTEAMLOGPaperDocTrashedType?) -> DBXTeamLogPaperDocTrashedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocTrashedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocTrashedTypeToDBX(object: DBTEAMLOGPaperDocTrashedType) -> DBXTeamLogPaperDocTrashedType {
    DBXTeamLogPaperDocTrashedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocUnresolveCommentDetailsToDBXOptional(object: DBTEAMLOGPaperDocUnresolveCommentDetails?) -> DBXTeamLogPaperDocUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocUnresolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocUnresolveCommentDetailsToDBX(object: DBTEAMLOGPaperDocUnresolveCommentDetails) -> DBXTeamLogPaperDocUnresolveCommentDetails {
    DBXTeamLogPaperDocUnresolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGPaperDocUnresolveCommentTypeToDBXOptional(object: DBTEAMLOGPaperDocUnresolveCommentType?) -> DBXTeamLogPaperDocUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocUnresolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocUnresolveCommentTypeToDBX(object: DBTEAMLOGPaperDocUnresolveCommentType) -> DBXTeamLogPaperDocUnresolveCommentType {
    DBXTeamLogPaperDocUnresolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocUntrashedDetailsToDBXOptional(object: DBTEAMLOGPaperDocUntrashedDetails?) -> DBXTeamLogPaperDocUntrashedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocUntrashedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocUntrashedDetailsToDBX(object: DBTEAMLOGPaperDocUntrashedDetails) -> DBXTeamLogPaperDocUntrashedDetails {
    DBXTeamLogPaperDocUntrashedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocUntrashedTypeToDBXOptional(object: DBTEAMLOGPaperDocUntrashedType?) -> DBXTeamLogPaperDocUntrashedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocUntrashedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocUntrashedTypeToDBX(object: DBTEAMLOGPaperDocUntrashedType) -> DBXTeamLogPaperDocUntrashedType {
    DBXTeamLogPaperDocUntrashedType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocViewDetailsToDBXOptional(object: DBTEAMLOGPaperDocViewDetails?) -> DBXTeamLogPaperDocViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperDocViewDetailsToDBX(object: DBTEAMLOGPaperDocViewDetails) -> DBXTeamLogPaperDocViewDetails {
    DBXTeamLogPaperDocViewDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperDocViewTypeToDBXOptional(object: DBTEAMLOGPaperDocViewType?) -> DBXTeamLogPaperDocViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocViewTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperDocViewTypeToDBX(object: DBTEAMLOGPaperDocViewType) -> DBXTeamLogPaperDocViewType {
    DBXTeamLogPaperDocViewType(description_: object.description_)
}

func mapDBTEAMLOGPaperDocumentLogInfoToDBXOptional(object: DBTEAMLOGPaperDocumentLogInfo?) -> DBXTeamLogPaperDocumentLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDocumentLogInfoToDBX(object: object)
}

func mapDBTEAMLOGPaperDocumentLogInfoToDBX(object: DBTEAMLOGPaperDocumentLogInfo) -> DBXTeamLogPaperDocumentLogInfo {
    DBXTeamLogPaperDocumentLogInfo(docId: object.docId, docTitle: object.docTitle)
}

func mapDBTEAMLOGPaperDownloadFormatToDBXOptional(object: DBTEAMLOGPaperDownloadFormat?) -> DBXTeamLogPaperDownloadFormat? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperDownloadFormatToDBX(object: object)
}

func mapDBTEAMLOGPaperDownloadFormatToDBX(object: DBTEAMLOGPaperDownloadFormat) -> DBXTeamLogPaperDownloadFormat {
    if object.isDocx() {
        return DBXTeamLogPaperDownloadFormatDocx()
    }
    if object.isHtml() {
        return DBXTeamLogPaperDownloadFormatHtml()
    }
    if object.isMarkdown() {
        return DBXTeamLogPaperDownloadFormatMarkdown()
    }
    if object.isPdf() {
        return DBXTeamLogPaperDownloadFormatPdf()
    }
    if object.isOther() {
        return DBXTeamLogPaperDownloadFormatOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPaperEnabledUsersGroupAdditionDetailsToDBXOptional(object: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails?)
    -> DBXTeamLogPaperEnabledUsersGroupAdditionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperEnabledUsersGroupAdditionDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperEnabledUsersGroupAdditionDetailsToDBX(object: DBTEAMLOGPaperEnabledUsersGroupAdditionDetails)
    -> DBXTeamLogPaperEnabledUsersGroupAdditionDetails {
    DBXTeamLogPaperEnabledUsersGroupAdditionDetails()
}

func mapDBTEAMLOGPaperEnabledUsersGroupAdditionTypeToDBXOptional(object: DBTEAMLOGPaperEnabledUsersGroupAdditionType?)
    -> DBXTeamLogPaperEnabledUsersGroupAdditionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperEnabledUsersGroupAdditionTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperEnabledUsersGroupAdditionTypeToDBX(object: DBTEAMLOGPaperEnabledUsersGroupAdditionType) -> DBXTeamLogPaperEnabledUsersGroupAdditionType {
    DBXTeamLogPaperEnabledUsersGroupAdditionType(description_: object.description_)
}

func mapDBTEAMLOGPaperEnabledUsersGroupRemovalDetailsToDBXOptional(object: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails?)
    -> DBXTeamLogPaperEnabledUsersGroupRemovalDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperEnabledUsersGroupRemovalDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperEnabledUsersGroupRemovalDetailsToDBX(object: DBTEAMLOGPaperEnabledUsersGroupRemovalDetails)
    -> DBXTeamLogPaperEnabledUsersGroupRemovalDetails {
    DBXTeamLogPaperEnabledUsersGroupRemovalDetails()
}

func mapDBTEAMLOGPaperEnabledUsersGroupRemovalTypeToDBXOptional(object: DBTEAMLOGPaperEnabledUsersGroupRemovalType?)
    -> DBXTeamLogPaperEnabledUsersGroupRemovalType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperEnabledUsersGroupRemovalTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperEnabledUsersGroupRemovalTypeToDBX(object: DBTEAMLOGPaperEnabledUsersGroupRemovalType) -> DBXTeamLogPaperEnabledUsersGroupRemovalType {
    DBXTeamLogPaperEnabledUsersGroupRemovalType(description_: object.description_)
}

func mapDBTEAMLOGPaperExternalViewAllowDetailsToDBXOptional(object: DBTEAMLOGPaperExternalViewAllowDetails?) -> DBXTeamLogPaperExternalViewAllowDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewAllowDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewAllowDetailsToDBX(object: DBTEAMLOGPaperExternalViewAllowDetails) -> DBXTeamLogPaperExternalViewAllowDetails {
    DBXTeamLogPaperExternalViewAllowDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperExternalViewAllowTypeToDBXOptional(object: DBTEAMLOGPaperExternalViewAllowType?) -> DBXTeamLogPaperExternalViewAllowType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewAllowTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewAllowTypeToDBX(object: DBTEAMLOGPaperExternalViewAllowType) -> DBXTeamLogPaperExternalViewAllowType {
    DBXTeamLogPaperExternalViewAllowType(description_: object.description_)
}

func mapDBTEAMLOGPaperExternalViewDefaultTeamDetailsToDBXOptional(object: DBTEAMLOGPaperExternalViewDefaultTeamDetails?)
    -> DBXTeamLogPaperExternalViewDefaultTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewDefaultTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewDefaultTeamDetailsToDBX(object: DBTEAMLOGPaperExternalViewDefaultTeamDetails)
    -> DBXTeamLogPaperExternalViewDefaultTeamDetails {
    DBXTeamLogPaperExternalViewDefaultTeamDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperExternalViewDefaultTeamTypeToDBXOptional(object: DBTEAMLOGPaperExternalViewDefaultTeamType?)
    -> DBXTeamLogPaperExternalViewDefaultTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewDefaultTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewDefaultTeamTypeToDBX(object: DBTEAMLOGPaperExternalViewDefaultTeamType) -> DBXTeamLogPaperExternalViewDefaultTeamType {
    DBXTeamLogPaperExternalViewDefaultTeamType(description_: object.description_)
}

func mapDBTEAMLOGPaperExternalViewForbidDetailsToDBXOptional(object: DBTEAMLOGPaperExternalViewForbidDetails?) -> DBXTeamLogPaperExternalViewForbidDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewForbidDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewForbidDetailsToDBX(object: DBTEAMLOGPaperExternalViewForbidDetails) -> DBXTeamLogPaperExternalViewForbidDetails {
    DBXTeamLogPaperExternalViewForbidDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperExternalViewForbidTypeToDBXOptional(object: DBTEAMLOGPaperExternalViewForbidType?) -> DBXTeamLogPaperExternalViewForbidType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperExternalViewForbidTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperExternalViewForbidTypeToDBX(object: DBTEAMLOGPaperExternalViewForbidType) -> DBXTeamLogPaperExternalViewForbidType {
    DBXTeamLogPaperExternalViewForbidType(description_: object.description_)
}

func mapDBTEAMLOGPaperFolderChangeSubscriptionDetailsToDBXOptional(object: DBTEAMLOGPaperFolderChangeSubscriptionDetails?)
    -> DBXTeamLogPaperFolderChangeSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderChangeSubscriptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderChangeSubscriptionDetailsToDBX(object: DBTEAMLOGPaperFolderChangeSubscriptionDetails)
    -> DBXTeamLogPaperFolderChangeSubscriptionDetails {
    DBXTeamLogPaperFolderChangeSubscriptionDetails(
        eventUuid: object.eventUuid,
        newSubscriptionLevel: object.dNewSubscriptionLevel,
        previousSubscriptionLevel: object.previousSubscriptionLevel
    )
}

func mapDBTEAMLOGPaperFolderChangeSubscriptionTypeToDBXOptional(object: DBTEAMLOGPaperFolderChangeSubscriptionType?)
    -> DBXTeamLogPaperFolderChangeSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderChangeSubscriptionTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderChangeSubscriptionTypeToDBX(object: DBTEAMLOGPaperFolderChangeSubscriptionType) -> DBXTeamLogPaperFolderChangeSubscriptionType {
    DBXTeamLogPaperFolderChangeSubscriptionType(description_: object.description_)
}

func mapDBTEAMLOGPaperFolderDeletedDetailsToDBXOptional(object: DBTEAMLOGPaperFolderDeletedDetails?) -> DBXTeamLogPaperFolderDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderDeletedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderDeletedDetailsToDBX(object: DBTEAMLOGPaperFolderDeletedDetails) -> DBXTeamLogPaperFolderDeletedDetails {
    DBXTeamLogPaperFolderDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperFolderDeletedTypeToDBXOptional(object: DBTEAMLOGPaperFolderDeletedType?) -> DBXTeamLogPaperFolderDeletedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderDeletedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderDeletedTypeToDBX(object: DBTEAMLOGPaperFolderDeletedType) -> DBXTeamLogPaperFolderDeletedType {
    DBXTeamLogPaperFolderDeletedType(description_: object.description_)
}

func mapDBTEAMLOGPaperFolderFollowedDetailsToDBXOptional(object: DBTEAMLOGPaperFolderFollowedDetails?) -> DBXTeamLogPaperFolderFollowedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderFollowedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderFollowedDetailsToDBX(object: DBTEAMLOGPaperFolderFollowedDetails) -> DBXTeamLogPaperFolderFollowedDetails {
    DBXTeamLogPaperFolderFollowedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperFolderFollowedTypeToDBXOptional(object: DBTEAMLOGPaperFolderFollowedType?) -> DBXTeamLogPaperFolderFollowedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderFollowedTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderFollowedTypeToDBX(object: DBTEAMLOGPaperFolderFollowedType) -> DBXTeamLogPaperFolderFollowedType {
    DBXTeamLogPaperFolderFollowedType(description_: object.description_)
}

func mapDBTEAMLOGPaperFolderLogInfoToDBXOptional(object: DBTEAMLOGPaperFolderLogInfo?) -> DBXTeamLogPaperFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderLogInfoToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderLogInfoToDBX(object: DBTEAMLOGPaperFolderLogInfo) -> DBXTeamLogPaperFolderLogInfo {
    DBXTeamLogPaperFolderLogInfo(folderId: object.folderId, folderName: object.folderName)
}

func mapDBTEAMLOGPaperFolderTeamInviteDetailsToDBXOptional(object: DBTEAMLOGPaperFolderTeamInviteDetails?) -> DBXTeamLogPaperFolderTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderTeamInviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderTeamInviteDetailsToDBX(object: DBTEAMLOGPaperFolderTeamInviteDetails) -> DBXTeamLogPaperFolderTeamInviteDetails {
    DBXTeamLogPaperFolderTeamInviteDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperFolderTeamInviteTypeToDBXOptional(object: DBTEAMLOGPaperFolderTeamInviteType?) -> DBXTeamLogPaperFolderTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperFolderTeamInviteTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperFolderTeamInviteTypeToDBX(object: DBTEAMLOGPaperFolderTeamInviteType) -> DBXTeamLogPaperFolderTeamInviteType {
    DBXTeamLogPaperFolderTeamInviteType(description_: object.description_)
}

func mapDBTEAMLOGPaperMemberPolicyToDBXOptional(object: DBTEAMLOGPaperMemberPolicy?) -> DBXTeamLogPaperMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperMemberPolicyToDBX(object: object)
}

func mapDBTEAMLOGPaperMemberPolicyToDBX(object: DBTEAMLOGPaperMemberPolicy) -> DBXTeamLogPaperMemberPolicy {
    if object.isAnyoneWithLink() {
        return DBXTeamLogPaperMemberPolicyAnyoneWithLink()
    }
    if object.isOnlyTeam() {
        return DBXTeamLogPaperMemberPolicyOnlyTeam()
    }
    if object.isTeamAndExplicitlyShared() {
        return DBXTeamLogPaperMemberPolicyTeamAndExplicitlyShared()
    }
    if object.isOther() {
        return DBXTeamLogPaperMemberPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPaperPublishedLinkChangePermissionDetailsToDBXOptional(object: DBTEAMLOGPaperPublishedLinkChangePermissionDetails?)
    -> DBXTeamLogPaperPublishedLinkChangePermissionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkChangePermissionDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkChangePermissionDetailsToDBX(object: DBTEAMLOGPaperPublishedLinkChangePermissionDetails)
    -> DBXTeamLogPaperPublishedLinkChangePermissionDetails {
    DBXTeamLogPaperPublishedLinkChangePermissionDetails(
        eventUuid: object.eventUuid,
        newPermissionLevel: object.dNewPermissionLevel,
        previousPermissionLevel: object.previousPermissionLevel
    )
}

func mapDBTEAMLOGPaperPublishedLinkChangePermissionTypeToDBXOptional(object: DBTEAMLOGPaperPublishedLinkChangePermissionType?)
    -> DBXTeamLogPaperPublishedLinkChangePermissionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkChangePermissionTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkChangePermissionTypeToDBX(object: DBTEAMLOGPaperPublishedLinkChangePermissionType)
    -> DBXTeamLogPaperPublishedLinkChangePermissionType {
    DBXTeamLogPaperPublishedLinkChangePermissionType(description_: object.description_)
}

func mapDBTEAMLOGPaperPublishedLinkCreateDetailsToDBXOptional(object: DBTEAMLOGPaperPublishedLinkCreateDetails?) -> DBXTeamLogPaperPublishedLinkCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkCreateDetailsToDBX(object: DBTEAMLOGPaperPublishedLinkCreateDetails) -> DBXTeamLogPaperPublishedLinkCreateDetails {
    DBXTeamLogPaperPublishedLinkCreateDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperPublishedLinkCreateTypeToDBXOptional(object: DBTEAMLOGPaperPublishedLinkCreateType?) -> DBXTeamLogPaperPublishedLinkCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkCreateTypeToDBX(object: DBTEAMLOGPaperPublishedLinkCreateType) -> DBXTeamLogPaperPublishedLinkCreateType {
    DBXTeamLogPaperPublishedLinkCreateType(description_: object.description_)
}

func mapDBTEAMLOGPaperPublishedLinkDisabledDetailsToDBXOptional(object: DBTEAMLOGPaperPublishedLinkDisabledDetails?)
    -> DBXTeamLogPaperPublishedLinkDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkDisabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkDisabledDetailsToDBX(object: DBTEAMLOGPaperPublishedLinkDisabledDetails) -> DBXTeamLogPaperPublishedLinkDisabledDetails {
    DBXTeamLogPaperPublishedLinkDisabledDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperPublishedLinkDisabledTypeToDBXOptional(object: DBTEAMLOGPaperPublishedLinkDisabledType?) -> DBXTeamLogPaperPublishedLinkDisabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkDisabledTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkDisabledTypeToDBX(object: DBTEAMLOGPaperPublishedLinkDisabledType) -> DBXTeamLogPaperPublishedLinkDisabledType {
    DBXTeamLogPaperPublishedLinkDisabledType(description_: object.description_)
}

func mapDBTEAMLOGPaperPublishedLinkViewDetailsToDBXOptional(object: DBTEAMLOGPaperPublishedLinkViewDetails?) -> DBXTeamLogPaperPublishedLinkViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkViewDetailsToDBX(object: DBTEAMLOGPaperPublishedLinkViewDetails) -> DBXTeamLogPaperPublishedLinkViewDetails {
    DBXTeamLogPaperPublishedLinkViewDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGPaperPublishedLinkViewTypeToDBXOptional(object: DBTEAMLOGPaperPublishedLinkViewType?) -> DBXTeamLogPaperPublishedLinkViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPaperPublishedLinkViewTypeToDBX(object: object)
}

func mapDBTEAMLOGPaperPublishedLinkViewTypeToDBX(object: DBTEAMLOGPaperPublishedLinkViewType) -> DBXTeamLogPaperPublishedLinkViewType {
    DBXTeamLogPaperPublishedLinkViewType(description_: object.description_)
}

func mapDBTEAMLOGParticipantLogInfoToDBXOptional(object: DBTEAMLOGParticipantLogInfo?) -> DBXTeamLogParticipantLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGParticipantLogInfoToDBX(object: object)
}

func mapDBTEAMLOGParticipantLogInfoToDBX(object: DBTEAMLOGParticipantLogInfo) -> DBXTeamLogParticipantLogInfo {
    if object.isGroup() {
        let group = mapDBTEAMLOGGroupLogInfoToDBX(object: object.group)
        return DBXTeamLogParticipantLogInfo.factory(swift: .group(group.swift))
    }
    if object.isUser() {
        let user = mapDBTEAMLOGUserLogInfoToDBX(object: object.user)
        return DBXTeamLogParticipantLogInfo.factory(swift: .user(user.swift))
    }
    if object.isOther() {
        return DBXTeamLogParticipantLogInfoOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPassPolicyToDBXOptional(object: DBTEAMLOGPassPolicy?) -> DBXTeamLogPassPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPassPolicyToDBX(object: object)
}

func mapDBTEAMLOGPassPolicyToDBX(object: DBTEAMLOGPassPolicy) -> DBXTeamLogPassPolicy {
    if object.isAllow() {
        return DBXTeamLogPassPolicyAllow()
    }
    if object.isDisabled() {
        return DBXTeamLogPassPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogPassPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogPassPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPasswordChangeDetailsToDBXOptional(object: DBTEAMLOGPasswordChangeDetails?) -> DBXTeamLogPasswordChangeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordChangeDetailsToDBX(object: object)
}

func mapDBTEAMLOGPasswordChangeDetailsToDBX(object: DBTEAMLOGPasswordChangeDetails) -> DBXTeamLogPasswordChangeDetails {
    DBXTeamLogPasswordChangeDetails()
}

func mapDBTEAMLOGPasswordChangeTypeToDBXOptional(object: DBTEAMLOGPasswordChangeType?) -> DBXTeamLogPasswordChangeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordChangeTypeToDBX(object: object)
}

func mapDBTEAMLOGPasswordChangeTypeToDBX(object: DBTEAMLOGPasswordChangeType) -> DBXTeamLogPasswordChangeType {
    DBXTeamLogPasswordChangeType(description_: object.description_)
}

func mapDBTEAMLOGPasswordResetAllDetailsToDBXOptional(object: DBTEAMLOGPasswordResetAllDetails?) -> DBXTeamLogPasswordResetAllDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordResetAllDetailsToDBX(object: object)
}

func mapDBTEAMLOGPasswordResetAllDetailsToDBX(object: DBTEAMLOGPasswordResetAllDetails) -> DBXTeamLogPasswordResetAllDetails {
    DBXTeamLogPasswordResetAllDetails()
}

func mapDBTEAMLOGPasswordResetAllTypeToDBXOptional(object: DBTEAMLOGPasswordResetAllType?) -> DBXTeamLogPasswordResetAllType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordResetAllTypeToDBX(object: object)
}

func mapDBTEAMLOGPasswordResetAllTypeToDBX(object: DBTEAMLOGPasswordResetAllType) -> DBXTeamLogPasswordResetAllType {
    DBXTeamLogPasswordResetAllType(description_: object.description_)
}

func mapDBTEAMLOGPasswordResetDetailsToDBXOptional(object: DBTEAMLOGPasswordResetDetails?) -> DBXTeamLogPasswordResetDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordResetDetailsToDBX(object: object)
}

func mapDBTEAMLOGPasswordResetDetailsToDBX(object: DBTEAMLOGPasswordResetDetails) -> DBXTeamLogPasswordResetDetails {
    DBXTeamLogPasswordResetDetails()
}

func mapDBTEAMLOGPasswordResetTypeToDBXOptional(object: DBTEAMLOGPasswordResetType?) -> DBXTeamLogPasswordResetType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordResetTypeToDBX(object: object)
}

func mapDBTEAMLOGPasswordResetTypeToDBX(object: DBTEAMLOGPasswordResetType) -> DBXTeamLogPasswordResetType {
    DBXTeamLogPasswordResetType(description_: object.description_)
}

func mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsToDBXOptional(object: DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails?)
    -> DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsToDBX(object: DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails)
    -> DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails {
    DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails(
        previousValue: mapDBTEAMPOLICIESPasswordStrengthPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMPOLICIESPasswordStrengthPolicyToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyTypeToDBXOptional(object: DBTEAMLOGPasswordStrengthRequirementsChangePolicyType?)
    -> DBXTeamLogPasswordStrengthRequirementsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPasswordStrengthRequirementsChangePolicyTypeToDBX(object: DBTEAMLOGPasswordStrengthRequirementsChangePolicyType)
    -> DBXTeamLogPasswordStrengthRequirementsChangePolicyType {
    DBXTeamLogPasswordStrengthRequirementsChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGPathLogInfoToDBXOptional(object: DBTEAMLOGPathLogInfo?) -> DBXTeamLogPathLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPathLogInfoToDBX(object: object)
}

func mapDBTEAMLOGPathLogInfoToDBX(object: DBTEAMLOGPathLogInfo) -> DBXTeamLogPathLogInfo {
    DBXTeamLogPathLogInfo(namespaceRelative: mapDBTEAMLOGNamespaceRelativePathLogInfoToDBX(object: object.namespaceRelative), contextual: object.contextual)
}

func mapDBTEAMLOGPendingSecondaryEmailAddedDetailsToDBXOptional(object: DBTEAMLOGPendingSecondaryEmailAddedDetails?)
    -> DBXTeamLogPendingSecondaryEmailAddedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPendingSecondaryEmailAddedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPendingSecondaryEmailAddedDetailsToDBX(object: DBTEAMLOGPendingSecondaryEmailAddedDetails) -> DBXTeamLogPendingSecondaryEmailAddedDetails {
    DBXTeamLogPendingSecondaryEmailAddedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBTEAMLOGPendingSecondaryEmailAddedTypeToDBXOptional(object: DBTEAMLOGPendingSecondaryEmailAddedType?) -> DBXTeamLogPendingSecondaryEmailAddedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPendingSecondaryEmailAddedTypeToDBX(object: object)
}

func mapDBTEAMLOGPendingSecondaryEmailAddedTypeToDBX(object: DBTEAMLOGPendingSecondaryEmailAddedType) -> DBXTeamLogPendingSecondaryEmailAddedType {
    DBXTeamLogPendingSecondaryEmailAddedType(description_: object.description_)
}

func mapDBTEAMLOGPermanentDeleteChangePolicyDetailsToDBXOptional(object: DBTEAMLOGPermanentDeleteChangePolicyDetails?)
    -> DBXTeamLogPermanentDeleteChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPermanentDeleteChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGPermanentDeleteChangePolicyDetailsToDBX(object: DBTEAMLOGPermanentDeleteChangePolicyDetails) -> DBXTeamLogPermanentDeleteChangePolicyDetails {
    DBXTeamLogPermanentDeleteChangePolicyDetails(
        newValue: mapDBTEAMLOGContentPermanentDeletePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGContentPermanentDeletePolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGPermanentDeleteChangePolicyTypeToDBXOptional(object: DBTEAMLOGPermanentDeleteChangePolicyType?) -> DBXTeamLogPermanentDeleteChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPermanentDeleteChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPermanentDeleteChangePolicyTypeToDBX(object: DBTEAMLOGPermanentDeleteChangePolicyType) -> DBXTeamLogPermanentDeleteChangePolicyType {
    DBXTeamLogPermanentDeleteChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGPlacementRestrictionToDBXOptional(object: DBTEAMLOGPlacementRestriction?) -> DBXTeamLogPlacementRestriction? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPlacementRestrictionToDBX(object: object)
}

func mapDBTEAMLOGPlacementRestrictionToDBX(object: DBTEAMLOGPlacementRestriction) -> DBXTeamLogPlacementRestriction {
    if object.isAustraliaOnly() {
        return DBXTeamLogPlacementRestrictionAustraliaOnly()
    }
    if object.isEuropeOnly() {
        return DBXTeamLogPlacementRestrictionEuropeOnly()
    }
    if object.isJapanOnly() {
        return DBXTeamLogPlacementRestrictionJapanOnly()
    }
    if object.isNone() {
        return DBXTeamLogPlacementRestrictionNone()
    }
    if object.isUkOnly() {
        return DBXTeamLogPlacementRestrictionUkOnly()
    }
    if object.isUsS3Only() {
        return DBXTeamLogPlacementRestrictionUsS3Only()
    }
    if object.isOther() {
        return DBXTeamLogPlacementRestrictionOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPolicyTypeToDBXOptional(object: DBTEAMLOGPolicyType?) -> DBXTeamLogPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGPolicyTypeToDBX(object: DBTEAMLOGPolicyType) -> DBXTeamLogPolicyType {
    if object.isDisposition() {
        return DBXTeamLogPolicyTypeDisposition()
    }
    if object.isRetention() {
        return DBXTeamLogPolicyTypeRetention()
    }
    if object.isOther() {
        return DBXTeamLogPolicyTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGPrimaryTeamRequestAcceptedDetailsToDBXOptional(object: DBTEAMLOGPrimaryTeamRequestAcceptedDetails?)
    -> DBXTeamLogPrimaryTeamRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPrimaryTeamRequestAcceptedDetailsToDBX(object: object)
}

func mapDBTEAMLOGPrimaryTeamRequestAcceptedDetailsToDBX(object: DBTEAMLOGPrimaryTeamRequestAcceptedDetails) -> DBXTeamLogPrimaryTeamRequestAcceptedDetails {
    DBXTeamLogPrimaryTeamRequestAcceptedDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGPrimaryTeamRequestCanceledDetailsToDBXOptional(object: DBTEAMLOGPrimaryTeamRequestCanceledDetails?)
    -> DBXTeamLogPrimaryTeamRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPrimaryTeamRequestCanceledDetailsToDBX(object: object)
}

func mapDBTEAMLOGPrimaryTeamRequestCanceledDetailsToDBX(object: DBTEAMLOGPrimaryTeamRequestCanceledDetails) -> DBXTeamLogPrimaryTeamRequestCanceledDetails {
    DBXTeamLogPrimaryTeamRequestCanceledDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGPrimaryTeamRequestExpiredDetailsToDBXOptional(object: DBTEAMLOGPrimaryTeamRequestExpiredDetails?)
    -> DBXTeamLogPrimaryTeamRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPrimaryTeamRequestExpiredDetailsToDBX(object: object)
}

func mapDBTEAMLOGPrimaryTeamRequestExpiredDetailsToDBX(object: DBTEAMLOGPrimaryTeamRequestExpiredDetails) -> DBXTeamLogPrimaryTeamRequestExpiredDetails {
    DBXTeamLogPrimaryTeamRequestExpiredDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGPrimaryTeamRequestReminderDetailsToDBXOptional(object: DBTEAMLOGPrimaryTeamRequestReminderDetails?)
    -> DBXTeamLogPrimaryTeamRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGPrimaryTeamRequestReminderDetailsToDBX(object: object)
}

func mapDBTEAMLOGPrimaryTeamRequestReminderDetailsToDBX(object: DBTEAMLOGPrimaryTeamRequestReminderDetails) -> DBXTeamLogPrimaryTeamRequestReminderDetails {
    DBXTeamLogPrimaryTeamRequestReminderDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBTEAMLOGQuickActionTypeToDBXOptional(object: DBTEAMLOGQuickActionType?) -> DBXTeamLogQuickActionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGQuickActionTypeToDBX(object: object)
}

func mapDBTEAMLOGQuickActionTypeToDBX(object: DBTEAMLOGQuickActionType) -> DBXTeamLogQuickActionType {
    if object.isDeleteSharedLink() {
        return DBXTeamLogQuickActionTypeDeleteSharedLink()
    }
    if object.isResetPassword() {
        return DBXTeamLogQuickActionTypeResetPassword()
    }
    if object.isRestoreFileOrFolder() {
        return DBXTeamLogQuickActionTypeRestoreFileOrFolder()
    }
    if object.isUnlinkApp() {
        return DBXTeamLogQuickActionTypeUnlinkApp()
    }
    if object.isUnlinkDevice() {
        return DBXTeamLogQuickActionTypeUnlinkDevice()
    }
    if object.isUnlinkSession() {
        return DBXTeamLogQuickActionTypeUnlinkSession()
    }
    if object.isOther() {
        return DBXTeamLogQuickActionTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGRansomwareAlertCreateReportDetailsToDBXOptional(object: DBTEAMLOGRansomwareAlertCreateReportDetails?)
    -> DBXTeamLogRansomwareAlertCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareAlertCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGRansomwareAlertCreateReportDetailsToDBX(object: DBTEAMLOGRansomwareAlertCreateReportDetails) -> DBXTeamLogRansomwareAlertCreateReportDetails {
    DBXTeamLogRansomwareAlertCreateReportDetails()
}

func mapDBTEAMLOGRansomwareAlertCreateReportFailedDetailsToDBXOptional(object: DBTEAMLOGRansomwareAlertCreateReportFailedDetails?)
    -> DBXTeamLogRansomwareAlertCreateReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareAlertCreateReportFailedDetailsToDBX(object: object)
}

func mapDBTEAMLOGRansomwareAlertCreateReportFailedDetailsToDBX(object: DBTEAMLOGRansomwareAlertCreateReportFailedDetails)
    -> DBXTeamLogRansomwareAlertCreateReportFailedDetails {
    DBXTeamLogRansomwareAlertCreateReportFailedDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGRansomwareAlertCreateReportFailedTypeToDBXOptional(object: DBTEAMLOGRansomwareAlertCreateReportFailedType?)
    -> DBXTeamLogRansomwareAlertCreateReportFailedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareAlertCreateReportFailedTypeToDBX(object: object)
}

func mapDBTEAMLOGRansomwareAlertCreateReportFailedTypeToDBX(object: DBTEAMLOGRansomwareAlertCreateReportFailedType)
    -> DBXTeamLogRansomwareAlertCreateReportFailedType {
    DBXTeamLogRansomwareAlertCreateReportFailedType(description_: object.description_)
}

func mapDBTEAMLOGRansomwareAlertCreateReportTypeToDBXOptional(object: DBTEAMLOGRansomwareAlertCreateReportType?) -> DBXTeamLogRansomwareAlertCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareAlertCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGRansomwareAlertCreateReportTypeToDBX(object: DBTEAMLOGRansomwareAlertCreateReportType) -> DBXTeamLogRansomwareAlertCreateReportType {
    DBXTeamLogRansomwareAlertCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGRansomwareRestoreProcessCompletedDetailsToDBXOptional(object: DBTEAMLOGRansomwareRestoreProcessCompletedDetails?)
    -> DBXTeamLogRansomwareRestoreProcessCompletedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareRestoreProcessCompletedDetailsToDBX(object: object)
}

func mapDBTEAMLOGRansomwareRestoreProcessCompletedDetailsToDBX(object: DBTEAMLOGRansomwareRestoreProcessCompletedDetails)
    -> DBXTeamLogRansomwareRestoreProcessCompletedDetails {
    DBXTeamLogRansomwareRestoreProcessCompletedDetails(
        status: object.status,
        restoredFilesCount: object.restoredFilesCount,
        restoredFilesFailedCount: object.restoredFilesFailedCount
    )
}

func mapDBTEAMLOGRansomwareRestoreProcessCompletedTypeToDBXOptional(object: DBTEAMLOGRansomwareRestoreProcessCompletedType?)
    -> DBXTeamLogRansomwareRestoreProcessCompletedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareRestoreProcessCompletedTypeToDBX(object: object)
}

func mapDBTEAMLOGRansomwareRestoreProcessCompletedTypeToDBX(object: DBTEAMLOGRansomwareRestoreProcessCompletedType)
    -> DBXTeamLogRansomwareRestoreProcessCompletedType {
    DBXTeamLogRansomwareRestoreProcessCompletedType(description_: object.description_)
}

func mapDBTEAMLOGRansomwareRestoreProcessStartedDetailsToDBXOptional(object: DBTEAMLOGRansomwareRestoreProcessStartedDetails?)
    -> DBXTeamLogRansomwareRestoreProcessStartedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareRestoreProcessStartedDetailsToDBX(object: object)
}

func mapDBTEAMLOGRansomwareRestoreProcessStartedDetailsToDBX(object: DBTEAMLOGRansomwareRestoreProcessStartedDetails)
    -> DBXTeamLogRansomwareRestoreProcessStartedDetails {
    DBXTeamLogRansomwareRestoreProcessStartedDetails(extension_: object.extension)
}

func mapDBTEAMLOGRansomwareRestoreProcessStartedTypeToDBXOptional(object: DBTEAMLOGRansomwareRestoreProcessStartedType?)
    -> DBXTeamLogRansomwareRestoreProcessStartedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRansomwareRestoreProcessStartedTypeToDBX(object: object)
}

func mapDBTEAMLOGRansomwareRestoreProcessStartedTypeToDBX(object: DBTEAMLOGRansomwareRestoreProcessStartedType)
    -> DBXTeamLogRansomwareRestoreProcessStartedType {
    DBXTeamLogRansomwareRestoreProcessStartedType(description_: object.description_)
}

func mapDBTEAMLOGRecipientsConfigurationToDBXOptional(object: DBTEAMLOGRecipientsConfiguration?) -> DBXTeamLogRecipientsConfiguration? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRecipientsConfigurationToDBX(object: object)
}

func mapDBTEAMLOGRecipientsConfigurationToDBX(object: DBTEAMLOGRecipientsConfiguration) -> DBXTeamLogRecipientsConfiguration {
    DBXTeamLogRecipientsConfiguration(
        recipientSettingType: mapDBTEAMLOGAlertRecipientsSettingTypeToDBXOptional(object: object.recipientSettingType),
        emails: object.emails,
        groups: object.groups
    )
}

func mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBXOptional(object: DBTEAMLOGRelocateAssetReferencesLogInfo?) -> DBXTeamLogRelocateAssetReferencesLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: object)
}

func mapDBTEAMLOGRelocateAssetReferencesLogInfoToDBX(object: DBTEAMLOGRelocateAssetReferencesLogInfo) -> DBXTeamLogRelocateAssetReferencesLogInfo {
    DBXTeamLogRelocateAssetReferencesLogInfo(srcAssetIndex: object.srcAssetIndex, destAssetIndex: object.destAssetIndex)
}

func mapDBTEAMLOGReplayFileDeleteDetailsToDBXOptional(object: DBTEAMLOGReplayFileDeleteDetails?) -> DBXTeamLogReplayFileDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGReplayFileDeleteDetailsToDBX(object: DBTEAMLOGReplayFileDeleteDetails) -> DBXTeamLogReplayFileDeleteDetails {
    DBXTeamLogReplayFileDeleteDetails()
}

func mapDBTEAMLOGReplayFileDeleteTypeToDBXOptional(object: DBTEAMLOGReplayFileDeleteType?) -> DBXTeamLogReplayFileDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGReplayFileDeleteTypeToDBX(object: DBTEAMLOGReplayFileDeleteType) -> DBXTeamLogReplayFileDeleteType {
    DBXTeamLogReplayFileDeleteType(description_: object.description_)
}

func mapDBTEAMLOGReplayFileSharedLinkCreatedDetailsToDBXOptional(object: DBTEAMLOGReplayFileSharedLinkCreatedDetails?)
    -> DBXTeamLogReplayFileSharedLinkCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileSharedLinkCreatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGReplayFileSharedLinkCreatedDetailsToDBX(object: DBTEAMLOGReplayFileSharedLinkCreatedDetails) -> DBXTeamLogReplayFileSharedLinkCreatedDetails {
    DBXTeamLogReplayFileSharedLinkCreatedDetails()
}

func mapDBTEAMLOGReplayFileSharedLinkCreatedTypeToDBXOptional(object: DBTEAMLOGReplayFileSharedLinkCreatedType?) -> DBXTeamLogReplayFileSharedLinkCreatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileSharedLinkCreatedTypeToDBX(object: object)
}

func mapDBTEAMLOGReplayFileSharedLinkCreatedTypeToDBX(object: DBTEAMLOGReplayFileSharedLinkCreatedType) -> DBXTeamLogReplayFileSharedLinkCreatedType {
    DBXTeamLogReplayFileSharedLinkCreatedType(description_: object.description_)
}

func mapDBTEAMLOGReplayFileSharedLinkModifiedDetailsToDBXOptional(object: DBTEAMLOGReplayFileSharedLinkModifiedDetails?)
    -> DBXTeamLogReplayFileSharedLinkModifiedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileSharedLinkModifiedDetailsToDBX(object: object)
}

func mapDBTEAMLOGReplayFileSharedLinkModifiedDetailsToDBX(object: DBTEAMLOGReplayFileSharedLinkModifiedDetails)
    -> DBXTeamLogReplayFileSharedLinkModifiedDetails {
    DBXTeamLogReplayFileSharedLinkModifiedDetails()
}

func mapDBTEAMLOGReplayFileSharedLinkModifiedTypeToDBXOptional(object: DBTEAMLOGReplayFileSharedLinkModifiedType?)
    -> DBXTeamLogReplayFileSharedLinkModifiedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayFileSharedLinkModifiedTypeToDBX(object: object)
}

func mapDBTEAMLOGReplayFileSharedLinkModifiedTypeToDBX(object: DBTEAMLOGReplayFileSharedLinkModifiedType) -> DBXTeamLogReplayFileSharedLinkModifiedType {
    DBXTeamLogReplayFileSharedLinkModifiedType(description_: object.description_)
}

func mapDBTEAMLOGReplayProjectTeamAddDetailsToDBXOptional(object: DBTEAMLOGReplayProjectTeamAddDetails?) -> DBXTeamLogReplayProjectTeamAddDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayProjectTeamAddDetailsToDBX(object: object)
}

func mapDBTEAMLOGReplayProjectTeamAddDetailsToDBX(object: DBTEAMLOGReplayProjectTeamAddDetails) -> DBXTeamLogReplayProjectTeamAddDetails {
    DBXTeamLogReplayProjectTeamAddDetails()
}

func mapDBTEAMLOGReplayProjectTeamAddTypeToDBXOptional(object: DBTEAMLOGReplayProjectTeamAddType?) -> DBXTeamLogReplayProjectTeamAddType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayProjectTeamAddTypeToDBX(object: object)
}

func mapDBTEAMLOGReplayProjectTeamAddTypeToDBX(object: DBTEAMLOGReplayProjectTeamAddType) -> DBXTeamLogReplayProjectTeamAddType {
    DBXTeamLogReplayProjectTeamAddType(description_: object.description_)
}

func mapDBTEAMLOGReplayProjectTeamDeleteDetailsToDBXOptional(object: DBTEAMLOGReplayProjectTeamDeleteDetails?) -> DBXTeamLogReplayProjectTeamDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayProjectTeamDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGReplayProjectTeamDeleteDetailsToDBX(object: DBTEAMLOGReplayProjectTeamDeleteDetails) -> DBXTeamLogReplayProjectTeamDeleteDetails {
    DBXTeamLogReplayProjectTeamDeleteDetails()
}

func mapDBTEAMLOGReplayProjectTeamDeleteTypeToDBXOptional(object: DBTEAMLOGReplayProjectTeamDeleteType?) -> DBXTeamLogReplayProjectTeamDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGReplayProjectTeamDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGReplayProjectTeamDeleteTypeToDBX(object: DBTEAMLOGReplayProjectTeamDeleteType) -> DBXTeamLogReplayProjectTeamDeleteType {
    DBXTeamLogReplayProjectTeamDeleteType(description_: object.description_)
}

func mapDBTEAMLOGResellerLogInfoToDBXOptional(object: DBTEAMLOGResellerLogInfo?) -> DBXTeamLogResellerLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerLogInfoToDBX(object: object)
}

func mapDBTEAMLOGResellerLogInfoToDBX(object: DBTEAMLOGResellerLogInfo) -> DBXTeamLogResellerLogInfo {
    DBXTeamLogResellerLogInfo(resellerName: object.resellerName, resellerEmail: object.resellerEmail)
}

func mapDBTEAMLOGResellerRoleToDBXOptional(object: DBTEAMLOGResellerRole?) -> DBXTeamLogResellerRole? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerRoleToDBX(object: object)
}

func mapDBTEAMLOGResellerRoleToDBX(object: DBTEAMLOGResellerRole) -> DBXTeamLogResellerRole {
    if object.isNotReseller() {
        return DBXTeamLogResellerRoleNotReseller()
    }
    if object.isResellerAdmin() {
        return DBXTeamLogResellerRoleResellerAdmin()
    }
    if object.isOther() {
        return DBXTeamLogResellerRoleOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGResellerSupportChangePolicyDetailsToDBXOptional(object: DBTEAMLOGResellerSupportChangePolicyDetails?)
    -> DBXTeamLogResellerSupportChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportChangePolicyDetailsToDBX(object: DBTEAMLOGResellerSupportChangePolicyDetails) -> DBXTeamLogResellerSupportChangePolicyDetails {
    DBXTeamLogResellerSupportChangePolicyDetails(
        newValue: mapDBTEAMLOGResellerSupportPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGResellerSupportPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGResellerSupportChangePolicyTypeToDBXOptional(object: DBTEAMLOGResellerSupportChangePolicyType?) -> DBXTeamLogResellerSupportChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportChangePolicyTypeToDBX(object: DBTEAMLOGResellerSupportChangePolicyType) -> DBXTeamLogResellerSupportChangePolicyType {
    DBXTeamLogResellerSupportChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGResellerSupportPolicyToDBXOptional(object: DBTEAMLOGResellerSupportPolicy?) -> DBXTeamLogResellerSupportPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportPolicyToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportPolicyToDBX(object: DBTEAMLOGResellerSupportPolicy) -> DBXTeamLogResellerSupportPolicy {
    if object.isDisabled() {
        return DBXTeamLogResellerSupportPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogResellerSupportPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogResellerSupportPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGResellerSupportSessionEndDetailsToDBXOptional(object: DBTEAMLOGResellerSupportSessionEndDetails?)
    -> DBXTeamLogResellerSupportSessionEndDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportSessionEndDetailsToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportSessionEndDetailsToDBX(object: DBTEAMLOGResellerSupportSessionEndDetails) -> DBXTeamLogResellerSupportSessionEndDetails {
    DBXTeamLogResellerSupportSessionEndDetails()
}

func mapDBTEAMLOGResellerSupportSessionEndTypeToDBXOptional(object: DBTEAMLOGResellerSupportSessionEndType?) -> DBXTeamLogResellerSupportSessionEndType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportSessionEndTypeToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportSessionEndTypeToDBX(object: DBTEAMLOGResellerSupportSessionEndType) -> DBXTeamLogResellerSupportSessionEndType {
    DBXTeamLogResellerSupportSessionEndType(description_: object.description_)
}

func mapDBTEAMLOGResellerSupportSessionStartDetailsToDBXOptional(object: DBTEAMLOGResellerSupportSessionStartDetails?)
    -> DBXTeamLogResellerSupportSessionStartDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportSessionStartDetailsToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportSessionStartDetailsToDBX(object: DBTEAMLOGResellerSupportSessionStartDetails) -> DBXTeamLogResellerSupportSessionStartDetails {
    DBXTeamLogResellerSupportSessionStartDetails()
}

func mapDBTEAMLOGResellerSupportSessionStartTypeToDBXOptional(object: DBTEAMLOGResellerSupportSessionStartType?) -> DBXTeamLogResellerSupportSessionStartType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGResellerSupportSessionStartTypeToDBX(object: object)
}

func mapDBTEAMLOGResellerSupportSessionStartTypeToDBX(object: DBTEAMLOGResellerSupportSessionStartType) -> DBXTeamLogResellerSupportSessionStartType {
    DBXTeamLogResellerSupportSessionStartType(description_: object.description_)
}

func mapDBTEAMLOGRewindFolderDetailsToDBXOptional(object: DBTEAMLOGRewindFolderDetails?) -> DBXTeamLogRewindFolderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRewindFolderDetailsToDBX(object: object)
}

func mapDBTEAMLOGRewindFolderDetailsToDBX(object: DBTEAMLOGRewindFolderDetails) -> DBXTeamLogRewindFolderDetails {
    DBXTeamLogRewindFolderDetails(rewindFolderTargetTsMs: object.rewindFolderTargetTsMs)
}

func mapDBTEAMLOGRewindFolderTypeToDBXOptional(object: DBTEAMLOGRewindFolderType?) -> DBXTeamLogRewindFolderType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRewindFolderTypeToDBX(object: object)
}

func mapDBTEAMLOGRewindFolderTypeToDBX(object: DBTEAMLOGRewindFolderType) -> DBXTeamLogRewindFolderType {
    DBXTeamLogRewindFolderType(description_: object.description_)
}

func mapDBTEAMLOGRewindPolicyToDBXOptional(object: DBTEAMLOGRewindPolicy?) -> DBXTeamLogRewindPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRewindPolicyToDBX(object: object)
}

func mapDBTEAMLOGRewindPolicyToDBX(object: DBTEAMLOGRewindPolicy) -> DBXTeamLogRewindPolicy {
    if object.isAdminsOnly() {
        return DBXTeamLogRewindPolicyAdminsOnly()
    }
    if object.isEveryone() {
        return DBXTeamLogRewindPolicyEveryone()
    }
    if object.isOther() {
        return DBXTeamLogRewindPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGRewindPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGRewindPolicyChangedDetails?) -> DBXTeamLogRewindPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRewindPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGRewindPolicyChangedDetailsToDBX(object: DBTEAMLOGRewindPolicyChangedDetails) -> DBXTeamLogRewindPolicyChangedDetails {
    DBXTeamLogRewindPolicyChangedDetails(
        newValue: mapDBTEAMLOGRewindPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGRewindPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGRewindPolicyChangedTypeToDBXOptional(object: DBTEAMLOGRewindPolicyChangedType?) -> DBXTeamLogRewindPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGRewindPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGRewindPolicyChangedTypeToDBX(object: DBTEAMLOGRewindPolicyChangedType) -> DBXTeamLogRewindPolicyChangedType {
    DBXTeamLogRewindPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGSecondaryEmailDeletedDetailsToDBXOptional(object: DBTEAMLOGSecondaryEmailDeletedDetails?) -> DBXTeamLogSecondaryEmailDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryEmailDeletedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryEmailDeletedDetailsToDBX(object: DBTEAMLOGSecondaryEmailDeletedDetails) -> DBXTeamLogSecondaryEmailDeletedDetails {
    DBXTeamLogSecondaryEmailDeletedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBTEAMLOGSecondaryEmailDeletedTypeToDBXOptional(object: DBTEAMLOGSecondaryEmailDeletedType?) -> DBXTeamLogSecondaryEmailDeletedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryEmailDeletedTypeToDBX(object: object)
}

func mapDBTEAMLOGSecondaryEmailDeletedTypeToDBX(object: DBTEAMLOGSecondaryEmailDeletedType) -> DBXTeamLogSecondaryEmailDeletedType {
    DBXTeamLogSecondaryEmailDeletedType(description_: object.description_)
}

func mapDBTEAMLOGSecondaryEmailVerifiedDetailsToDBXOptional(object: DBTEAMLOGSecondaryEmailVerifiedDetails?) -> DBXTeamLogSecondaryEmailVerifiedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryEmailVerifiedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryEmailVerifiedDetailsToDBX(object: DBTEAMLOGSecondaryEmailVerifiedDetails) -> DBXTeamLogSecondaryEmailVerifiedDetails {
    DBXTeamLogSecondaryEmailVerifiedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBTEAMLOGSecondaryEmailVerifiedTypeToDBXOptional(object: DBTEAMLOGSecondaryEmailVerifiedType?) -> DBXTeamLogSecondaryEmailVerifiedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryEmailVerifiedTypeToDBX(object: object)
}

func mapDBTEAMLOGSecondaryEmailVerifiedTypeToDBX(object: DBTEAMLOGSecondaryEmailVerifiedType) -> DBXTeamLogSecondaryEmailVerifiedType {
    DBXTeamLogSecondaryEmailVerifiedType(description_: object.description_)
}

func mapDBTEAMLOGSecondaryMailsPolicyToDBXOptional(object: DBTEAMLOGSecondaryMailsPolicy?) -> DBXTeamLogSecondaryMailsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryMailsPolicyToDBX(object: object)
}

func mapDBTEAMLOGSecondaryMailsPolicyToDBX(object: DBTEAMLOGSecondaryMailsPolicy) -> DBXTeamLogSecondaryMailsPolicy {
    if object.isDisabled() {
        return DBXTeamLogSecondaryMailsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogSecondaryMailsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogSecondaryMailsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSecondaryMailsPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGSecondaryMailsPolicyChangedDetails?)
    -> DBXTeamLogSecondaryMailsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryMailsPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryMailsPolicyChangedDetailsToDBX(object: DBTEAMLOGSecondaryMailsPolicyChangedDetails) -> DBXTeamLogSecondaryMailsPolicyChangedDetails {
    DBXTeamLogSecondaryMailsPolicyChangedDetails(
        previousValue: mapDBTEAMLOGSecondaryMailsPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGSecondaryMailsPolicyToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGSecondaryMailsPolicyChangedTypeToDBXOptional(object: DBTEAMLOGSecondaryMailsPolicyChangedType?) -> DBXTeamLogSecondaryMailsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryMailsPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGSecondaryMailsPolicyChangedTypeToDBX(object: DBTEAMLOGSecondaryMailsPolicyChangedType) -> DBXTeamLogSecondaryMailsPolicyChangedType {
    DBXTeamLogSecondaryMailsPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGSecondaryTeamRequestAcceptedDetailsToDBXOptional(object: DBTEAMLOGSecondaryTeamRequestAcceptedDetails?)
    -> DBXTeamLogSecondaryTeamRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryTeamRequestAcceptedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryTeamRequestAcceptedDetailsToDBX(object: DBTEAMLOGSecondaryTeamRequestAcceptedDetails)
    -> DBXTeamLogSecondaryTeamRequestAcceptedDetails {
    DBXTeamLogSecondaryTeamRequestAcceptedDetails(primaryTeam: object.primaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGSecondaryTeamRequestCanceledDetailsToDBXOptional(object: DBTEAMLOGSecondaryTeamRequestCanceledDetails?)
    -> DBXTeamLogSecondaryTeamRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryTeamRequestCanceledDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryTeamRequestCanceledDetailsToDBX(object: DBTEAMLOGSecondaryTeamRequestCanceledDetails)
    -> DBXTeamLogSecondaryTeamRequestCanceledDetails {
    DBXTeamLogSecondaryTeamRequestCanceledDetails(sentTo: object.sentTo, sentBy: object.sentBy)
}

func mapDBTEAMLOGSecondaryTeamRequestExpiredDetailsToDBXOptional(object: DBTEAMLOGSecondaryTeamRequestExpiredDetails?)
    -> DBXTeamLogSecondaryTeamRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryTeamRequestExpiredDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryTeamRequestExpiredDetailsToDBX(object: DBTEAMLOGSecondaryTeamRequestExpiredDetails) -> DBXTeamLogSecondaryTeamRequestExpiredDetails {
    DBXTeamLogSecondaryTeamRequestExpiredDetails(sentTo: object.sentTo)
}

func mapDBTEAMLOGSecondaryTeamRequestReminderDetailsToDBXOptional(object: DBTEAMLOGSecondaryTeamRequestReminderDetails?)
    -> DBXTeamLogSecondaryTeamRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSecondaryTeamRequestReminderDetailsToDBX(object: object)
}

func mapDBTEAMLOGSecondaryTeamRequestReminderDetailsToDBX(object: DBTEAMLOGSecondaryTeamRequestReminderDetails)
    -> DBXTeamLogSecondaryTeamRequestReminderDetails {
    DBXTeamLogSecondaryTeamRequestReminderDetails(sentTo: object.sentTo)
}

func mapDBTEAMLOGSendForSignaturePolicyToDBXOptional(object: DBTEAMLOGSendForSignaturePolicy?) -> DBXTeamLogSendForSignaturePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSendForSignaturePolicyToDBX(object: object)
}

func mapDBTEAMLOGSendForSignaturePolicyToDBX(object: DBTEAMLOGSendForSignaturePolicy) -> DBXTeamLogSendForSignaturePolicy {
    if object.isDisabled() {
        return DBXTeamLogSendForSignaturePolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogSendForSignaturePolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogSendForSignaturePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSendForSignaturePolicyChangedDetailsToDBXOptional(object: DBTEAMLOGSendForSignaturePolicyChangedDetails?)
    -> DBXTeamLogSendForSignaturePolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSendForSignaturePolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSendForSignaturePolicyChangedDetailsToDBX(object: DBTEAMLOGSendForSignaturePolicyChangedDetails)
    -> DBXTeamLogSendForSignaturePolicyChangedDetails {
    DBXTeamLogSendForSignaturePolicyChangedDetails(
        newValue: mapDBTEAMLOGSendForSignaturePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSendForSignaturePolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGSendForSignaturePolicyChangedTypeToDBXOptional(object: DBTEAMLOGSendForSignaturePolicyChangedType?)
    -> DBXTeamLogSendForSignaturePolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSendForSignaturePolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGSendForSignaturePolicyChangedTypeToDBX(object: DBTEAMLOGSendForSignaturePolicyChangedType) -> DBXTeamLogSendForSignaturePolicyChangedType {
    DBXTeamLogSendForSignaturePolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGSfAddGroupDetailsToDBXOptional(object: DBTEAMLOGSfAddGroupDetails?) -> DBXTeamLogSfAddGroupDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfAddGroupDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfAddGroupDetailsToDBX(object: DBTEAMLOGSfAddGroupDetails) -> DBXTeamLogSfAddGroupDetails {
    DBXTeamLogSfAddGroupDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        teamName: object.teamName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBTEAMLOGSfAddGroupTypeToDBXOptional(object: DBTEAMLOGSfAddGroupType?) -> DBXTeamLogSfAddGroupType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfAddGroupTypeToDBX(object: object)
}

func mapDBTEAMLOGSfAddGroupTypeToDBX(object: DBTEAMLOGSfAddGroupType) -> DBXTeamLogSfAddGroupType {
    DBXTeamLogSfAddGroupType(description_: object.description_)
}

func mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsToDBXOptional(object: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails?)
    -> DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsToDBX(object: DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails)
    -> DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails {
    DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharedFolderType: object.sharedFolderType
    )
}

func mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeToDBXOptional(object: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType?)
    -> DBXTeamLogSfAllowNonMembersToViewSharedLinksType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeToDBX(object: object)
}

func mapDBTEAMLOGSfAllowNonMembersToViewSharedLinksTypeToDBX(object: DBTEAMLOGSfAllowNonMembersToViewSharedLinksType)
    -> DBXTeamLogSfAllowNonMembersToViewSharedLinksType {
    DBXTeamLogSfAllowNonMembersToViewSharedLinksType(description_: object.description_)
}

func mapDBTEAMLOGSfExternalInviteWarnDetailsToDBXOptional(object: DBTEAMLOGSfExternalInviteWarnDetails?) -> DBXTeamLogSfExternalInviteWarnDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfExternalInviteWarnDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfExternalInviteWarnDetailsToDBX(object: DBTEAMLOGSfExternalInviteWarnDetails) -> DBXTeamLogSfExternalInviteWarnDetails {
    DBXTeamLogSfExternalInviteWarnDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        newSharingPermission: object.dNewSharingPermission,
        previousSharingPermission: object.previousSharingPermission
    )
}

func mapDBTEAMLOGSfExternalInviteWarnTypeToDBXOptional(object: DBTEAMLOGSfExternalInviteWarnType?) -> DBXTeamLogSfExternalInviteWarnType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfExternalInviteWarnTypeToDBX(object: object)
}

func mapDBTEAMLOGSfExternalInviteWarnTypeToDBX(object: DBTEAMLOGSfExternalInviteWarnType) -> DBXTeamLogSfExternalInviteWarnType {
    DBXTeamLogSfExternalInviteWarnType(description_: object.description_)
}

func mapDBTEAMLOGSfFbInviteChangeRoleDetailsToDBXOptional(object: DBTEAMLOGSfFbInviteChangeRoleDetails?) -> DBXTeamLogSfFbInviteChangeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbInviteChangeRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfFbInviteChangeRoleDetailsToDBX(object: DBTEAMLOGSfFbInviteChangeRoleDetails) -> DBXTeamLogSfFbInviteChangeRoleDetails {
    DBXTeamLogSfFbInviteChangeRoleDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        previousSharingPermission: object.previousSharingPermission,
        newSharingPermission: object.dNewSharingPermission
    )
}

func mapDBTEAMLOGSfFbInviteChangeRoleTypeToDBXOptional(object: DBTEAMLOGSfFbInviteChangeRoleType?) -> DBXTeamLogSfFbInviteChangeRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbInviteChangeRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGSfFbInviteChangeRoleTypeToDBX(object: DBTEAMLOGSfFbInviteChangeRoleType) -> DBXTeamLogSfFbInviteChangeRoleType {
    DBXTeamLogSfFbInviteChangeRoleType(description_: object.description_)
}

func mapDBTEAMLOGSfFbInviteDetailsToDBXOptional(object: DBTEAMLOGSfFbInviteDetails?) -> DBXTeamLogSfFbInviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbInviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfFbInviteDetailsToDBX(object: DBTEAMLOGSfFbInviteDetails) -> DBXTeamLogSfFbInviteDetails {
    DBXTeamLogSfFbInviteDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBTEAMLOGSfFbInviteTypeToDBXOptional(object: DBTEAMLOGSfFbInviteType?) -> DBXTeamLogSfFbInviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbInviteTypeToDBX(object: object)
}

func mapDBTEAMLOGSfFbInviteTypeToDBX(object: DBTEAMLOGSfFbInviteType) -> DBXTeamLogSfFbInviteType {
    DBXTeamLogSfFbInviteType(description_: object.description_)
}

func mapDBTEAMLOGSfFbUninviteDetailsToDBXOptional(object: DBTEAMLOGSfFbUninviteDetails?) -> DBXTeamLogSfFbUninviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbUninviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfFbUninviteDetailsToDBX(object: DBTEAMLOGSfFbUninviteDetails) -> DBXTeamLogSfFbUninviteDetails {
    DBXTeamLogSfFbUninviteDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBTEAMLOGSfFbUninviteTypeToDBXOptional(object: DBTEAMLOGSfFbUninviteType?) -> DBXTeamLogSfFbUninviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfFbUninviteTypeToDBX(object: object)
}

func mapDBTEAMLOGSfFbUninviteTypeToDBX(object: DBTEAMLOGSfFbUninviteType) -> DBXTeamLogSfFbUninviteType {
    DBXTeamLogSfFbUninviteType(description_: object.description_)
}

func mapDBTEAMLOGSfInviteGroupDetailsToDBXOptional(object: DBTEAMLOGSfInviteGroupDetails?) -> DBXTeamLogSfInviteGroupDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfInviteGroupDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfInviteGroupDetailsToDBX(object: DBTEAMLOGSfInviteGroupDetails) -> DBXTeamLogSfInviteGroupDetails {
    DBXTeamLogSfInviteGroupDetails(targetAssetIndex: object.targetAssetIndex)
}

func mapDBTEAMLOGSfInviteGroupTypeToDBXOptional(object: DBTEAMLOGSfInviteGroupType?) -> DBXTeamLogSfInviteGroupType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfInviteGroupTypeToDBX(object: object)
}

func mapDBTEAMLOGSfInviteGroupTypeToDBX(object: DBTEAMLOGSfInviteGroupType) -> DBXTeamLogSfInviteGroupType {
    DBXTeamLogSfInviteGroupType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamGrantAccessDetailsToDBXOptional(object: DBTEAMLOGSfTeamGrantAccessDetails?) -> DBXTeamLogSfTeamGrantAccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamGrantAccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamGrantAccessDetailsToDBX(object: DBTEAMLOGSfTeamGrantAccessDetails) -> DBXTeamLogSfTeamGrantAccessDetails {
    DBXTeamLogSfTeamGrantAccessDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBTEAMLOGSfTeamGrantAccessTypeToDBXOptional(object: DBTEAMLOGSfTeamGrantAccessType?) -> DBXTeamLogSfTeamGrantAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamGrantAccessTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamGrantAccessTypeToDBX(object: DBTEAMLOGSfTeamGrantAccessType) -> DBXTeamLogSfTeamGrantAccessType {
    DBXTeamLogSfTeamGrantAccessType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamInviteChangeRoleDetailsToDBXOptional(object: DBTEAMLOGSfTeamInviteChangeRoleDetails?) -> DBXTeamLogSfTeamInviteChangeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamInviteChangeRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamInviteChangeRoleDetailsToDBX(object: DBTEAMLOGSfTeamInviteChangeRoleDetails) -> DBXTeamLogSfTeamInviteChangeRoleDetails {
    DBXTeamLogSfTeamInviteChangeRoleDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        newSharingPermission: object.dNewSharingPermission,
        previousSharingPermission: object.previousSharingPermission
    )
}

func mapDBTEAMLOGSfTeamInviteChangeRoleTypeToDBXOptional(object: DBTEAMLOGSfTeamInviteChangeRoleType?) -> DBXTeamLogSfTeamInviteChangeRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamInviteChangeRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamInviteChangeRoleTypeToDBX(object: DBTEAMLOGSfTeamInviteChangeRoleType) -> DBXTeamLogSfTeamInviteChangeRoleType {
    DBXTeamLogSfTeamInviteChangeRoleType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamInviteDetailsToDBXOptional(object: DBTEAMLOGSfTeamInviteDetails?) -> DBXTeamLogSfTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamInviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamInviteDetailsToDBX(object: DBTEAMLOGSfTeamInviteDetails) -> DBXTeamLogSfTeamInviteDetails {
    DBXTeamLogSfTeamInviteDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBTEAMLOGSfTeamInviteTypeToDBXOptional(object: DBTEAMLOGSfTeamInviteType?) -> DBXTeamLogSfTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamInviteTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamInviteTypeToDBX(object: DBTEAMLOGSfTeamInviteType) -> DBXTeamLogSfTeamInviteType {
    DBXTeamLogSfTeamInviteType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamJoinDetailsToDBXOptional(object: DBTEAMLOGSfTeamJoinDetails?) -> DBXTeamLogSfTeamJoinDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamJoinDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamJoinDetailsToDBX(object: DBTEAMLOGSfTeamJoinDetails) -> DBXTeamLogSfTeamJoinDetails {
    DBXTeamLogSfTeamJoinDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBTEAMLOGSfTeamJoinFromOobLinkDetailsToDBXOptional(object: DBTEAMLOGSfTeamJoinFromOobLinkDetails?) -> DBXTeamLogSfTeamJoinFromOobLinkDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamJoinFromOobLinkDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamJoinFromOobLinkDetailsToDBX(object: DBTEAMLOGSfTeamJoinFromOobLinkDetails) -> DBXTeamLogSfTeamJoinFromOobLinkDetails {
    DBXTeamLogSfTeamJoinFromOobLinkDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        tokenKey: object.tokenKey,
        sharingPermission: object.sharingPermission
    )
}

func mapDBTEAMLOGSfTeamJoinFromOobLinkTypeToDBXOptional(object: DBTEAMLOGSfTeamJoinFromOobLinkType?) -> DBXTeamLogSfTeamJoinFromOobLinkType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamJoinFromOobLinkTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamJoinFromOobLinkTypeToDBX(object: DBTEAMLOGSfTeamJoinFromOobLinkType) -> DBXTeamLogSfTeamJoinFromOobLinkType {
    DBXTeamLogSfTeamJoinFromOobLinkType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamJoinTypeToDBXOptional(object: DBTEAMLOGSfTeamJoinType?) -> DBXTeamLogSfTeamJoinType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamJoinTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamJoinTypeToDBX(object: DBTEAMLOGSfTeamJoinType) -> DBXTeamLogSfTeamJoinType {
    DBXTeamLogSfTeamJoinType(description_: object.description_)
}

func mapDBTEAMLOGSfTeamUninviteDetailsToDBXOptional(object: DBTEAMLOGSfTeamUninviteDetails?) -> DBXTeamLogSfTeamUninviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamUninviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGSfTeamUninviteDetailsToDBX(object: DBTEAMLOGSfTeamUninviteDetails) -> DBXTeamLogSfTeamUninviteDetails {
    DBXTeamLogSfTeamUninviteDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBTEAMLOGSfTeamUninviteTypeToDBXOptional(object: DBTEAMLOGSfTeamUninviteType?) -> DBXTeamLogSfTeamUninviteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSfTeamUninviteTypeToDBX(object: object)
}

func mapDBTEAMLOGSfTeamUninviteTypeToDBX(object: DBTEAMLOGSfTeamUninviteType) -> DBXTeamLogSfTeamUninviteType {
    DBXTeamLogSfTeamUninviteType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentAddInviteesDetailsToDBXOptional(object: DBTEAMLOGSharedContentAddInviteesDetails?) -> DBXTeamLogSharedContentAddInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddInviteesDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddInviteesDetailsToDBX(object: DBTEAMLOGSharedContentAddInviteesDetails) -> DBXTeamLogSharedContentAddInviteesDetails {
    DBXTeamLogSharedContentAddInviteesDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        invitees: object.invitees
    )
}

func mapDBTEAMLOGSharedContentAddInviteesTypeToDBXOptional(object: DBTEAMLOGSharedContentAddInviteesType?) -> DBXTeamLogSharedContentAddInviteesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddInviteesTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddInviteesTypeToDBX(object: DBTEAMLOGSharedContentAddInviteesType) -> DBXTeamLogSharedContentAddInviteesType {
    DBXTeamLogSharedContentAddInviteesType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentAddLinkExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedContentAddLinkExpiryDetails?)
    -> DBXTeamLogSharedContentAddLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddLinkExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddLinkExpiryDetailsToDBX(object: DBTEAMLOGSharedContentAddLinkExpiryDetails) -> DBXTeamLogSharedContentAddLinkExpiryDetails {
    DBXTeamLogSharedContentAddLinkExpiryDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGSharedContentAddLinkExpiryTypeToDBXOptional(object: DBTEAMLOGSharedContentAddLinkExpiryType?) -> DBXTeamLogSharedContentAddLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddLinkExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddLinkExpiryTypeToDBX(object: DBTEAMLOGSharedContentAddLinkExpiryType) -> DBXTeamLogSharedContentAddLinkExpiryType {
    DBXTeamLogSharedContentAddLinkExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentAddLinkPasswordDetailsToDBXOptional(object: DBTEAMLOGSharedContentAddLinkPasswordDetails?)
    -> DBXTeamLogSharedContentAddLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddLinkPasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddLinkPasswordDetailsToDBX(object: DBTEAMLOGSharedContentAddLinkPasswordDetails)
    -> DBXTeamLogSharedContentAddLinkPasswordDetails {
    DBXTeamLogSharedContentAddLinkPasswordDetails()
}

func mapDBTEAMLOGSharedContentAddLinkPasswordTypeToDBXOptional(object: DBTEAMLOGSharedContentAddLinkPasswordType?)
    -> DBXTeamLogSharedContentAddLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddLinkPasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddLinkPasswordTypeToDBX(object: DBTEAMLOGSharedContentAddLinkPasswordType) -> DBXTeamLogSharedContentAddLinkPasswordType {
    DBXTeamLogSharedContentAddLinkPasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentAddMemberDetailsToDBXOptional(object: DBTEAMLOGSharedContentAddMemberDetails?) -> DBXTeamLogSharedContentAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddMemberDetailsToDBX(object: DBTEAMLOGSharedContentAddMemberDetails) -> DBXTeamLogSharedContentAddMemberDetails {
    DBXTeamLogSharedContentAddMemberDetails(sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel))
}

func mapDBTEAMLOGSharedContentAddMemberTypeToDBXOptional(object: DBTEAMLOGSharedContentAddMemberType?) -> DBXTeamLogSharedContentAddMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentAddMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentAddMemberTypeToDBX(object: DBTEAMLOGSharedContentAddMemberType) -> DBXTeamLogSharedContentAddMemberType {
    DBXTeamLogSharedContentAddMemberType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeDownloadsPolicyDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails?)
    -> DBXTeamLogSharedContentChangeDownloadsPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeDownloadsPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeDownloadsPolicyDetailsToDBX(object: DBTEAMLOGSharedContentChangeDownloadsPolicyDetails)
    -> DBXTeamLogSharedContentChangeDownloadsPolicyDetails {
    DBXTeamLogSharedContentChangeDownloadsPolicyDetails(
        newValue: mapDBTEAMLOGDownloadPolicyTypeToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDownloadPolicyTypeToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedContentChangeDownloadsPolicyTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeDownloadsPolicyType?)
    -> DBXTeamLogSharedContentChangeDownloadsPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeDownloadsPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeDownloadsPolicyTypeToDBX(object: DBTEAMLOGSharedContentChangeDownloadsPolicyType)
    -> DBXTeamLogSharedContentChangeDownloadsPolicyType {
    DBXTeamLogSharedContentChangeDownloadsPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeInviteeRoleDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeInviteeRoleDetails?)
    -> DBXTeamLogSharedContentChangeInviteeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeInviteeRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeInviteeRoleDetailsToDBX(object: DBTEAMLOGSharedContentChangeInviteeRoleDetails)
    -> DBXTeamLogSharedContentChangeInviteeRoleDetails {
    DBXTeamLogSharedContentChangeInviteeRoleDetails(
        newAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.dNewAccessLevel),
        invitee: object.invitee,
        previousAccessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.previousAccessLevel)
    )
}

func mapDBTEAMLOGSharedContentChangeInviteeRoleTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeInviteeRoleType?)
    -> DBXTeamLogSharedContentChangeInviteeRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeInviteeRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeInviteeRoleTypeToDBX(object: DBTEAMLOGSharedContentChangeInviteeRoleType) -> DBXTeamLogSharedContentChangeInviteeRoleType {
    DBXTeamLogSharedContentChangeInviteeRoleType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeLinkAudienceDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkAudienceDetails?)
    -> DBXTeamLogSharedContentChangeLinkAudienceDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkAudienceDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkAudienceDetailsToDBX(object: DBTEAMLOGSharedContentChangeLinkAudienceDetails)
    -> DBXTeamLogSharedContentChangeLinkAudienceDetails {
    DBXTeamLogSharedContentChangeLinkAudienceDetails(
        newValue: mapDBSHARINGLinkAudienceToDBX(object: object.dNewValue),
        previousValue: mapDBSHARINGLinkAudienceToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedContentChangeLinkAudienceTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkAudienceType?)
    -> DBXTeamLogSharedContentChangeLinkAudienceType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkAudienceTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkAudienceTypeToDBX(object: DBTEAMLOGSharedContentChangeLinkAudienceType)
    -> DBXTeamLogSharedContentChangeLinkAudienceType {
    DBXTeamLogSharedContentChangeLinkAudienceType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeLinkExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkExpiryDetails?)
    -> DBXTeamLogSharedContentChangeLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkExpiryDetailsToDBX(object: DBTEAMLOGSharedContentChangeLinkExpiryDetails)
    -> DBXTeamLogSharedContentChangeLinkExpiryDetails {
    DBXTeamLogSharedContentChangeLinkExpiryDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGSharedContentChangeLinkExpiryTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkExpiryType?)
    -> DBXTeamLogSharedContentChangeLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkExpiryTypeToDBX(object: DBTEAMLOGSharedContentChangeLinkExpiryType) -> DBXTeamLogSharedContentChangeLinkExpiryType {
    DBXTeamLogSharedContentChangeLinkExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeLinkPasswordDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkPasswordDetails?)
    -> DBXTeamLogSharedContentChangeLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkPasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkPasswordDetailsToDBX(object: DBTEAMLOGSharedContentChangeLinkPasswordDetails)
    -> DBXTeamLogSharedContentChangeLinkPasswordDetails {
    DBXTeamLogSharedContentChangeLinkPasswordDetails()
}

func mapDBTEAMLOGSharedContentChangeLinkPasswordTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeLinkPasswordType?)
    -> DBXTeamLogSharedContentChangeLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeLinkPasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeLinkPasswordTypeToDBX(object: DBTEAMLOGSharedContentChangeLinkPasswordType)
    -> DBXTeamLogSharedContentChangeLinkPasswordType {
    DBXTeamLogSharedContentChangeLinkPasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeMemberRoleDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeMemberRoleDetails?)
    -> DBXTeamLogSharedContentChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeMemberRoleDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeMemberRoleDetailsToDBX(object: DBTEAMLOGSharedContentChangeMemberRoleDetails)
    -> DBXTeamLogSharedContentChangeMemberRoleDetails {
    DBXTeamLogSharedContentChangeMemberRoleDetails(
        newAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.dNewAccessLevel),
        previousAccessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.previousAccessLevel)
    )
}

func mapDBTEAMLOGSharedContentChangeMemberRoleTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeMemberRoleType?)
    -> DBXTeamLogSharedContentChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeMemberRoleTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeMemberRoleTypeToDBX(object: DBTEAMLOGSharedContentChangeMemberRoleType) -> DBXTeamLogSharedContentChangeMemberRoleType {
    DBXTeamLogSharedContentChangeMemberRoleType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsToDBXOptional(object: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails?)
    -> DBXTeamLogSharedContentChangeViewerInfoPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsToDBX(object: DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails)
    -> DBXTeamLogSharedContentChangeViewerInfoPolicyDetails {
    DBXTeamLogSharedContentChangeViewerInfoPolicyDetails(
        newValue: mapDBSHARINGViewerInfoPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBSHARINGViewerInfoPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedContentChangeViewerInfoPolicyTypeToDBXOptional(object: DBTEAMLOGSharedContentChangeViewerInfoPolicyType?)
    -> DBXTeamLogSharedContentChangeViewerInfoPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentChangeViewerInfoPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentChangeViewerInfoPolicyTypeToDBX(object: DBTEAMLOGSharedContentChangeViewerInfoPolicyType)
    -> DBXTeamLogSharedContentChangeViewerInfoPolicyType {
    DBXTeamLogSharedContentChangeViewerInfoPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentClaimInvitationDetailsToDBXOptional(object: DBTEAMLOGSharedContentClaimInvitationDetails?)
    -> DBXTeamLogSharedContentClaimInvitationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentClaimInvitationDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentClaimInvitationDetailsToDBX(object: DBTEAMLOGSharedContentClaimInvitationDetails)
    -> DBXTeamLogSharedContentClaimInvitationDetails {
    DBXTeamLogSharedContentClaimInvitationDetails(sharedContentLink: object.sharedContentLink)
}

func mapDBTEAMLOGSharedContentClaimInvitationTypeToDBXOptional(object: DBTEAMLOGSharedContentClaimInvitationType?)
    -> DBXTeamLogSharedContentClaimInvitationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentClaimInvitationTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentClaimInvitationTypeToDBX(object: DBTEAMLOGSharedContentClaimInvitationType) -> DBXTeamLogSharedContentClaimInvitationType {
    DBXTeamLogSharedContentClaimInvitationType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentCopyDetailsToDBXOptional(object: DBTEAMLOGSharedContentCopyDetails?) -> DBXTeamLogSharedContentCopyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentCopyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentCopyDetailsToDBX(object: DBTEAMLOGSharedContentCopyDetails) -> DBXTeamLogSharedContentCopyDetails {
    DBXTeamLogSharedContentCopyDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        destinationPath: object.destinationPath,
        sharedContentOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedContentOwner)
    )
}

func mapDBTEAMLOGSharedContentCopyTypeToDBXOptional(object: DBTEAMLOGSharedContentCopyType?) -> DBXTeamLogSharedContentCopyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentCopyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentCopyTypeToDBX(object: DBTEAMLOGSharedContentCopyType) -> DBXTeamLogSharedContentCopyType {
    DBXTeamLogSharedContentCopyType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentDownloadDetailsToDBXOptional(object: DBTEAMLOGSharedContentDownloadDetails?) -> DBXTeamLogSharedContentDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentDownloadDetailsToDBX(object: DBTEAMLOGSharedContentDownloadDetails) -> DBXTeamLogSharedContentDownloadDetails {
    DBXTeamLogSharedContentDownloadDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedContentOwner)
    )
}

func mapDBTEAMLOGSharedContentDownloadTypeToDBXOptional(object: DBTEAMLOGSharedContentDownloadType?) -> DBXTeamLogSharedContentDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentDownloadTypeToDBX(object: DBTEAMLOGSharedContentDownloadType) -> DBXTeamLogSharedContentDownloadType {
    DBXTeamLogSharedContentDownloadType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRelinquishMembershipDetailsToDBXOptional(object: DBTEAMLOGSharedContentRelinquishMembershipDetails?)
    -> DBXTeamLogSharedContentRelinquishMembershipDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRelinquishMembershipDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRelinquishMembershipDetailsToDBX(object: DBTEAMLOGSharedContentRelinquishMembershipDetails)
    -> DBXTeamLogSharedContentRelinquishMembershipDetails {
    DBXTeamLogSharedContentRelinquishMembershipDetails()
}

func mapDBTEAMLOGSharedContentRelinquishMembershipTypeToDBXOptional(object: DBTEAMLOGSharedContentRelinquishMembershipType?)
    -> DBXTeamLogSharedContentRelinquishMembershipType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRelinquishMembershipTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRelinquishMembershipTypeToDBX(object: DBTEAMLOGSharedContentRelinquishMembershipType)
    -> DBXTeamLogSharedContentRelinquishMembershipType {
    DBXTeamLogSharedContentRelinquishMembershipType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRemoveInviteesDetailsToDBXOptional(object: DBTEAMLOGSharedContentRemoveInviteesDetails?)
    -> DBXTeamLogSharedContentRemoveInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveInviteesDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveInviteesDetailsToDBX(object: DBTEAMLOGSharedContentRemoveInviteesDetails) -> DBXTeamLogSharedContentRemoveInviteesDetails {
    DBXTeamLogSharedContentRemoveInviteesDetails(invitees: object.invitees)
}

func mapDBTEAMLOGSharedContentRemoveInviteesTypeToDBXOptional(object: DBTEAMLOGSharedContentRemoveInviteesType?) -> DBXTeamLogSharedContentRemoveInviteesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveInviteesTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveInviteesTypeToDBX(object: DBTEAMLOGSharedContentRemoveInviteesType) -> DBXTeamLogSharedContentRemoveInviteesType {
    DBXTeamLogSharedContentRemoveInviteesType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRemoveLinkExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedContentRemoveLinkExpiryDetails?)
    -> DBXTeamLogSharedContentRemoveLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveLinkExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveLinkExpiryDetailsToDBX(object: DBTEAMLOGSharedContentRemoveLinkExpiryDetails)
    -> DBXTeamLogSharedContentRemoveLinkExpiryDetails {
    DBXTeamLogSharedContentRemoveLinkExpiryDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGSharedContentRemoveLinkExpiryTypeToDBXOptional(object: DBTEAMLOGSharedContentRemoveLinkExpiryType?)
    -> DBXTeamLogSharedContentRemoveLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveLinkExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveLinkExpiryTypeToDBX(object: DBTEAMLOGSharedContentRemoveLinkExpiryType) -> DBXTeamLogSharedContentRemoveLinkExpiryType {
    DBXTeamLogSharedContentRemoveLinkExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRemoveLinkPasswordDetailsToDBXOptional(object: DBTEAMLOGSharedContentRemoveLinkPasswordDetails?)
    -> DBXTeamLogSharedContentRemoveLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveLinkPasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveLinkPasswordDetailsToDBX(object: DBTEAMLOGSharedContentRemoveLinkPasswordDetails)
    -> DBXTeamLogSharedContentRemoveLinkPasswordDetails {
    DBXTeamLogSharedContentRemoveLinkPasswordDetails()
}

func mapDBTEAMLOGSharedContentRemoveLinkPasswordTypeToDBXOptional(object: DBTEAMLOGSharedContentRemoveLinkPasswordType?)
    -> DBXTeamLogSharedContentRemoveLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveLinkPasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveLinkPasswordTypeToDBX(object: DBTEAMLOGSharedContentRemoveLinkPasswordType)
    -> DBXTeamLogSharedContentRemoveLinkPasswordType {
    DBXTeamLogSharedContentRemoveLinkPasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRemoveMemberDetailsToDBXOptional(object: DBTEAMLOGSharedContentRemoveMemberDetails?)
    -> DBXTeamLogSharedContentRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveMemberDetailsToDBX(object: DBTEAMLOGSharedContentRemoveMemberDetails) -> DBXTeamLogSharedContentRemoveMemberDetails {
    DBXTeamLogSharedContentRemoveMemberDetails(sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBXOptional(object: object.sharedContentAccessLevel))
}

func mapDBTEAMLOGSharedContentRemoveMemberTypeToDBXOptional(object: DBTEAMLOGSharedContentRemoveMemberType?) -> DBXTeamLogSharedContentRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRemoveMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRemoveMemberTypeToDBX(object: DBTEAMLOGSharedContentRemoveMemberType) -> DBXTeamLogSharedContentRemoveMemberType {
    DBXTeamLogSharedContentRemoveMemberType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRequestAccessDetailsToDBXOptional(object: DBTEAMLOGSharedContentRequestAccessDetails?)
    -> DBXTeamLogSharedContentRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRequestAccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRequestAccessDetailsToDBX(object: DBTEAMLOGSharedContentRequestAccessDetails) -> DBXTeamLogSharedContentRequestAccessDetails {
    DBXTeamLogSharedContentRequestAccessDetails(sharedContentLink: object.sharedContentLink)
}

func mapDBTEAMLOGSharedContentRequestAccessTypeToDBXOptional(object: DBTEAMLOGSharedContentRequestAccessType?) -> DBXTeamLogSharedContentRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRequestAccessTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRequestAccessTypeToDBX(object: DBTEAMLOGSharedContentRequestAccessType) -> DBXTeamLogSharedContentRequestAccessType {
    DBXTeamLogSharedContentRequestAccessType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRestoreInviteesDetailsToDBXOptional(object: DBTEAMLOGSharedContentRestoreInviteesDetails?)
    -> DBXTeamLogSharedContentRestoreInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRestoreInviteesDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRestoreInviteesDetailsToDBX(object: DBTEAMLOGSharedContentRestoreInviteesDetails)
    -> DBXTeamLogSharedContentRestoreInviteesDetails {
    DBXTeamLogSharedContentRestoreInviteesDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        invitees: object.invitees
    )
}

func mapDBTEAMLOGSharedContentRestoreInviteesTypeToDBXOptional(object: DBTEAMLOGSharedContentRestoreInviteesType?)
    -> DBXTeamLogSharedContentRestoreInviteesType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRestoreInviteesTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRestoreInviteesTypeToDBX(object: DBTEAMLOGSharedContentRestoreInviteesType) -> DBXTeamLogSharedContentRestoreInviteesType {
    DBXTeamLogSharedContentRestoreInviteesType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentRestoreMemberDetailsToDBXOptional(object: DBTEAMLOGSharedContentRestoreMemberDetails?)
    -> DBXTeamLogSharedContentRestoreMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRestoreMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRestoreMemberDetailsToDBX(object: DBTEAMLOGSharedContentRestoreMemberDetails) -> DBXTeamLogSharedContentRestoreMemberDetails {
    DBXTeamLogSharedContentRestoreMemberDetails(sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel))
}

func mapDBTEAMLOGSharedContentRestoreMemberTypeToDBXOptional(object: DBTEAMLOGSharedContentRestoreMemberType?) -> DBXTeamLogSharedContentRestoreMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentRestoreMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentRestoreMemberTypeToDBX(object: DBTEAMLOGSharedContentRestoreMemberType) -> DBXTeamLogSharedContentRestoreMemberType {
    DBXTeamLogSharedContentRestoreMemberType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentUnshareDetailsToDBXOptional(object: DBTEAMLOGSharedContentUnshareDetails?) -> DBXTeamLogSharedContentUnshareDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentUnshareDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentUnshareDetailsToDBX(object: DBTEAMLOGSharedContentUnshareDetails) -> DBXTeamLogSharedContentUnshareDetails {
    DBXTeamLogSharedContentUnshareDetails()
}

func mapDBTEAMLOGSharedContentUnshareTypeToDBXOptional(object: DBTEAMLOGSharedContentUnshareType?) -> DBXTeamLogSharedContentUnshareType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentUnshareTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentUnshareTypeToDBX(object: DBTEAMLOGSharedContentUnshareType) -> DBXTeamLogSharedContentUnshareType {
    DBXTeamLogSharedContentUnshareType(description_: object.description_)
}

func mapDBTEAMLOGSharedContentViewDetailsToDBXOptional(object: DBTEAMLOGSharedContentViewDetails?) -> DBXTeamLogSharedContentViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedContentViewDetailsToDBX(object: DBTEAMLOGSharedContentViewDetails) -> DBXTeamLogSharedContentViewDetails {
    DBXTeamLogSharedContentViewDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedContentOwner)
    )
}

func mapDBTEAMLOGSharedContentViewTypeToDBXOptional(object: DBTEAMLOGSharedContentViewType?) -> DBXTeamLogSharedContentViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedContentViewTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedContentViewTypeToDBX(object: DBTEAMLOGSharedContentViewType) -> DBXTeamLogSharedContentViewType {
    DBXTeamLogSharedContentViewType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderChangeLinkPolicyDetailsToDBXOptional(object: DBTEAMLOGSharedFolderChangeLinkPolicyDetails?)
    -> DBXTeamLogSharedFolderChangeLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeLinkPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeLinkPolicyDetailsToDBX(object: DBTEAMLOGSharedFolderChangeLinkPolicyDetails)
    -> DBXTeamLogSharedFolderChangeLinkPolicyDetails {
    DBXTeamLogSharedFolderChangeLinkPolicyDetails(
        newValue: mapDBSHARINGSharedLinkPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBSHARINGSharedLinkPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedFolderChangeLinkPolicyTypeToDBXOptional(object: DBTEAMLOGSharedFolderChangeLinkPolicyType?)
    -> DBXTeamLogSharedFolderChangeLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeLinkPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeLinkPolicyTypeToDBX(object: DBTEAMLOGSharedFolderChangeLinkPolicyType) -> DBXTeamLogSharedFolderChangeLinkPolicyType {
    DBXTeamLogSharedFolderChangeLinkPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails?)
    -> DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsToDBX(object: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails)
    -> DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails {
    DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails(
        newValue: mapDBTEAMLOGSharedFolderMembersInheritancePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSharedFolderMembersInheritancePolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType?)
    -> DBXTeamLogSharedFolderChangeMembersInheritancePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersInheritancePolicyTypeToDBX(object: DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType)
    -> DBXTeamLogSharedFolderChangeMembersInheritancePolicyType {
    DBXTeamLogSharedFolderChangeMembersInheritancePolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails?)
    -> DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsToDBX(object: DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails)
    -> DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails {
    DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails(
        newValue: mapDBSHARINGAclUpdatePolicyToDBX(object: object.dNewValue),
        previousValue: mapDBSHARINGAclUpdatePolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType?)
    -> DBXTeamLogSharedFolderChangeMembersManagementPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersManagementPolicyTypeToDBX(object: DBTEAMLOGSharedFolderChangeMembersManagementPolicyType)
    -> DBXTeamLogSharedFolderChangeMembersManagementPolicyType {
    DBXTeamLogSharedFolderChangeMembersManagementPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderChangeMembersPolicyDetailsToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersPolicyDetails?)
    -> DBXTeamLogSharedFolderChangeMembersPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersPolicyDetailsToDBX(object: DBTEAMLOGSharedFolderChangeMembersPolicyDetails)
    -> DBXTeamLogSharedFolderChangeMembersPolicyDetails {
    DBXTeamLogSharedFolderChangeMembersPolicyDetails(
        newValue: mapDBSHARINGMemberPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBSHARINGMemberPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedFolderChangeMembersPolicyTypeToDBXOptional(object: DBTEAMLOGSharedFolderChangeMembersPolicyType?)
    -> DBXTeamLogSharedFolderChangeMembersPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderChangeMembersPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderChangeMembersPolicyTypeToDBX(object: DBTEAMLOGSharedFolderChangeMembersPolicyType)
    -> DBXTeamLogSharedFolderChangeMembersPolicyType {
    DBXTeamLogSharedFolderChangeMembersPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderCreateDetailsToDBXOptional(object: DBTEAMLOGSharedFolderCreateDetails?) -> DBXTeamLogSharedFolderCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderCreateDetailsToDBX(object: DBTEAMLOGSharedFolderCreateDetails) -> DBXTeamLogSharedFolderCreateDetails {
    DBXTeamLogSharedFolderCreateDetails(targetNsId: object.targetNsId)
}

func mapDBTEAMLOGSharedFolderCreateTypeToDBXOptional(object: DBTEAMLOGSharedFolderCreateType?) -> DBXTeamLogSharedFolderCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderCreateTypeToDBX(object: DBTEAMLOGSharedFolderCreateType) -> DBXTeamLogSharedFolderCreateType {
    DBXTeamLogSharedFolderCreateType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderDeclineInvitationDetailsToDBXOptional(object: DBTEAMLOGSharedFolderDeclineInvitationDetails?)
    -> DBXTeamLogSharedFolderDeclineInvitationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderDeclineInvitationDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderDeclineInvitationDetailsToDBX(object: DBTEAMLOGSharedFolderDeclineInvitationDetails)
    -> DBXTeamLogSharedFolderDeclineInvitationDetails {
    DBXTeamLogSharedFolderDeclineInvitationDetails()
}

func mapDBTEAMLOGSharedFolderDeclineInvitationTypeToDBXOptional(object: DBTEAMLOGSharedFolderDeclineInvitationType?)
    -> DBXTeamLogSharedFolderDeclineInvitationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderDeclineInvitationTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderDeclineInvitationTypeToDBX(object: DBTEAMLOGSharedFolderDeclineInvitationType) -> DBXTeamLogSharedFolderDeclineInvitationType {
    DBXTeamLogSharedFolderDeclineInvitationType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderMembersInheritancePolicyToDBXOptional(object: DBTEAMLOGSharedFolderMembersInheritancePolicy?)
    -> DBXTeamLogSharedFolderMembersInheritancePolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderMembersInheritancePolicyToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderMembersInheritancePolicyToDBX(object: DBTEAMLOGSharedFolderMembersInheritancePolicy)
    -> DBXTeamLogSharedFolderMembersInheritancePolicy {
    if object.isDontInheritMembers() {
        return DBXTeamLogSharedFolderMembersInheritancePolicyDontInheritMembers()
    }
    if object.isInheritMembers() {
        return DBXTeamLogSharedFolderMembersInheritancePolicyInheritMembers()
    }
    if object.isOther() {
        return DBXTeamLogSharedFolderMembersInheritancePolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSharedFolderMountDetailsToDBXOptional(object: DBTEAMLOGSharedFolderMountDetails?) -> DBXTeamLogSharedFolderMountDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderMountDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderMountDetailsToDBX(object: DBTEAMLOGSharedFolderMountDetails) -> DBXTeamLogSharedFolderMountDetails {
    DBXTeamLogSharedFolderMountDetails()
}

func mapDBTEAMLOGSharedFolderMountTypeToDBXOptional(object: DBTEAMLOGSharedFolderMountType?) -> DBXTeamLogSharedFolderMountType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderMountTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderMountTypeToDBX(object: DBTEAMLOGSharedFolderMountType) -> DBXTeamLogSharedFolderMountType {
    DBXTeamLogSharedFolderMountType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderNestDetailsToDBXOptional(object: DBTEAMLOGSharedFolderNestDetails?) -> DBXTeamLogSharedFolderNestDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderNestDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderNestDetailsToDBX(object: DBTEAMLOGSharedFolderNestDetails) -> DBXTeamLogSharedFolderNestDetails {
    DBXTeamLogSharedFolderNestDetails(
        previousParentNsId: object.previousParentNsId,
        newParentNsId: object.dNewParentNsId,
        previousNsPath: object.previousNsPath,
        newNsPath: object.dNewNsPath
    )
}

func mapDBTEAMLOGSharedFolderNestTypeToDBXOptional(object: DBTEAMLOGSharedFolderNestType?) -> DBXTeamLogSharedFolderNestType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderNestTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderNestTypeToDBX(object: DBTEAMLOGSharedFolderNestType) -> DBXTeamLogSharedFolderNestType {
    DBXTeamLogSharedFolderNestType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderTransferOwnershipDetailsToDBXOptional(object: DBTEAMLOGSharedFolderTransferOwnershipDetails?)
    -> DBXTeamLogSharedFolderTransferOwnershipDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderTransferOwnershipDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderTransferOwnershipDetailsToDBX(object: DBTEAMLOGSharedFolderTransferOwnershipDetails)
    -> DBXTeamLogSharedFolderTransferOwnershipDetails {
    DBXTeamLogSharedFolderTransferOwnershipDetails(newOwnerEmail: object.dNewOwnerEmail, previousOwnerEmail: object.previousOwnerEmail)
}

func mapDBTEAMLOGSharedFolderTransferOwnershipTypeToDBXOptional(object: DBTEAMLOGSharedFolderTransferOwnershipType?)
    -> DBXTeamLogSharedFolderTransferOwnershipType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderTransferOwnershipTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderTransferOwnershipTypeToDBX(object: DBTEAMLOGSharedFolderTransferOwnershipType) -> DBXTeamLogSharedFolderTransferOwnershipType {
    DBXTeamLogSharedFolderTransferOwnershipType(description_: object.description_)
}

func mapDBTEAMLOGSharedFolderUnmountDetailsToDBXOptional(object: DBTEAMLOGSharedFolderUnmountDetails?) -> DBXTeamLogSharedFolderUnmountDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderUnmountDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderUnmountDetailsToDBX(object: DBTEAMLOGSharedFolderUnmountDetails) -> DBXTeamLogSharedFolderUnmountDetails {
    DBXTeamLogSharedFolderUnmountDetails()
}

func mapDBTEAMLOGSharedFolderUnmountTypeToDBXOptional(object: DBTEAMLOGSharedFolderUnmountType?) -> DBXTeamLogSharedFolderUnmountType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedFolderUnmountTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedFolderUnmountTypeToDBX(object: DBTEAMLOGSharedFolderUnmountType) -> DBXTeamLogSharedFolderUnmountType {
    DBXTeamLogSharedFolderUnmountType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkAccessLevelToDBXOptional(object: DBTEAMLOGSharedLinkAccessLevel?) -> DBXTeamLogSharedLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkAccessLevelToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkAccessLevelToDBX(object: DBTEAMLOGSharedLinkAccessLevel) -> DBXTeamLogSharedLinkAccessLevel {
    if object.isNone() {
        return DBXTeamLogSharedLinkAccessLevelNone()
    }
    if object.isReader() {
        return DBXTeamLogSharedLinkAccessLevelReader()
    }
    if object.isWriter() {
        return DBXTeamLogSharedLinkAccessLevelWriter()
    }
    if object.isOther() {
        return DBXTeamLogSharedLinkAccessLevelOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSharedLinkAddExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedLinkAddExpiryDetails?) -> DBXTeamLogSharedLinkAddExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkAddExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkAddExpiryDetailsToDBX(object: DBTEAMLOGSharedLinkAddExpiryDetails) -> DBXTeamLogSharedLinkAddExpiryDetails {
    DBXTeamLogSharedLinkAddExpiryDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGSharedLinkAddExpiryTypeToDBXOptional(object: DBTEAMLOGSharedLinkAddExpiryType?) -> DBXTeamLogSharedLinkAddExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkAddExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkAddExpiryTypeToDBX(object: DBTEAMLOGSharedLinkAddExpiryType) -> DBXTeamLogSharedLinkAddExpiryType {
    DBXTeamLogSharedLinkAddExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkChangeExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedLinkChangeExpiryDetails?) -> DBXTeamLogSharedLinkChangeExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkChangeExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkChangeExpiryDetailsToDBX(object: DBTEAMLOGSharedLinkChangeExpiryDetails) -> DBXTeamLogSharedLinkChangeExpiryDetails {
    DBXTeamLogSharedLinkChangeExpiryDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGSharedLinkChangeExpiryTypeToDBXOptional(object: DBTEAMLOGSharedLinkChangeExpiryType?) -> DBXTeamLogSharedLinkChangeExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkChangeExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkChangeExpiryTypeToDBX(object: DBTEAMLOGSharedLinkChangeExpiryType) -> DBXTeamLogSharedLinkChangeExpiryType {
    DBXTeamLogSharedLinkChangeExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkChangeVisibilityDetailsToDBXOptional(object: DBTEAMLOGSharedLinkChangeVisibilityDetails?)
    -> DBXTeamLogSharedLinkChangeVisibilityDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkChangeVisibilityDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkChangeVisibilityDetailsToDBX(object: DBTEAMLOGSharedLinkChangeVisibilityDetails) -> DBXTeamLogSharedLinkChangeVisibilityDetails {
    DBXTeamLogSharedLinkChangeVisibilityDetails(
        newValue: mapDBTEAMLOGSharedLinkVisibilityToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSharedLinkVisibilityToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedLinkChangeVisibilityTypeToDBXOptional(object: DBTEAMLOGSharedLinkChangeVisibilityType?) -> DBXTeamLogSharedLinkChangeVisibilityType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkChangeVisibilityTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkChangeVisibilityTypeToDBX(object: DBTEAMLOGSharedLinkChangeVisibilityType) -> DBXTeamLogSharedLinkChangeVisibilityType {
    DBXTeamLogSharedLinkChangeVisibilityType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkCopyDetailsToDBXOptional(object: DBTEAMLOGSharedLinkCopyDetails?) -> DBXTeamLogSharedLinkCopyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkCopyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkCopyDetailsToDBX(object: DBTEAMLOGSharedLinkCopyDetails) -> DBXTeamLogSharedLinkCopyDetails {
    DBXTeamLogSharedLinkCopyDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGSharedLinkCopyTypeToDBXOptional(object: DBTEAMLOGSharedLinkCopyType?) -> DBXTeamLogSharedLinkCopyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkCopyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkCopyTypeToDBX(object: DBTEAMLOGSharedLinkCopyType) -> DBXTeamLogSharedLinkCopyType {
    DBXTeamLogSharedLinkCopyType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkCreateDetailsToDBXOptional(object: DBTEAMLOGSharedLinkCreateDetails?) -> DBXTeamLogSharedLinkCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkCreateDetailsToDBX(object: DBTEAMLOGSharedLinkCreateDetails) -> DBXTeamLogSharedLinkCreateDetails {
    DBXTeamLogSharedLinkCreateDetails(sharedLinkAccessLevel: mapDBTEAMLOGSharedLinkAccessLevelToDBXOptional(object: object.sharedLinkAccessLevel))
}

func mapDBTEAMLOGSharedLinkCreateTypeToDBXOptional(object: DBTEAMLOGSharedLinkCreateType?) -> DBXTeamLogSharedLinkCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkCreateTypeToDBX(object: DBTEAMLOGSharedLinkCreateType) -> DBXTeamLogSharedLinkCreateType {
    DBXTeamLogSharedLinkCreateType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkDisableDetailsToDBXOptional(object: DBTEAMLOGSharedLinkDisableDetails?) -> DBXTeamLogSharedLinkDisableDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkDisableDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkDisableDetailsToDBX(object: DBTEAMLOGSharedLinkDisableDetails) -> DBXTeamLogSharedLinkDisableDetails {
    DBXTeamLogSharedLinkDisableDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGSharedLinkDisableTypeToDBXOptional(object: DBTEAMLOGSharedLinkDisableType?) -> DBXTeamLogSharedLinkDisableType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkDisableTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkDisableTypeToDBX(object: DBTEAMLOGSharedLinkDisableType) -> DBXTeamLogSharedLinkDisableType {
    DBXTeamLogSharedLinkDisableType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkDownloadDetailsToDBXOptional(object: DBTEAMLOGSharedLinkDownloadDetails?) -> DBXTeamLogSharedLinkDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkDownloadDetailsToDBX(object: DBTEAMLOGSharedLinkDownloadDetails) -> DBXTeamLogSharedLinkDownloadDetails {
    DBXTeamLogSharedLinkDownloadDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGSharedLinkDownloadTypeToDBXOptional(object: DBTEAMLOGSharedLinkDownloadType?) -> DBXTeamLogSharedLinkDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkDownloadTypeToDBX(object: DBTEAMLOGSharedLinkDownloadType) -> DBXTeamLogSharedLinkDownloadType {
    DBXTeamLogSharedLinkDownloadType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkRemoveExpiryDetailsToDBXOptional(object: DBTEAMLOGSharedLinkRemoveExpiryDetails?) -> DBXTeamLogSharedLinkRemoveExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkRemoveExpiryDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkRemoveExpiryDetailsToDBX(object: DBTEAMLOGSharedLinkRemoveExpiryDetails) -> DBXTeamLogSharedLinkRemoveExpiryDetails {
    DBXTeamLogSharedLinkRemoveExpiryDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGSharedLinkRemoveExpiryTypeToDBXOptional(object: DBTEAMLOGSharedLinkRemoveExpiryType?) -> DBXTeamLogSharedLinkRemoveExpiryType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkRemoveExpiryTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkRemoveExpiryTypeToDBX(object: DBTEAMLOGSharedLinkRemoveExpiryType) -> DBXTeamLogSharedLinkRemoveExpiryType {
    DBXTeamLogSharedLinkRemoveExpiryType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsAddExpirationDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAddExpirationDetails?)
    -> DBXTeamLogSharedLinkSettingsAddExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAddExpirationDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAddExpirationDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsAddExpirationDetails)
    -> DBXTeamLogSharedLinkSettingsAddExpirationDetails {
    DBXTeamLogSharedLinkSettingsAddExpirationDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        newValue: object.dNewValue
    )
}

func mapDBTEAMLOGSharedLinkSettingsAddExpirationTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAddExpirationType?)
    -> DBXTeamLogSharedLinkSettingsAddExpirationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAddExpirationTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAddExpirationTypeToDBX(object: DBTEAMLOGSharedLinkSettingsAddExpirationType)
    -> DBXTeamLogSharedLinkSettingsAddExpirationType {
    DBXTeamLogSharedLinkSettingsAddExpirationType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsAddPasswordDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAddPasswordDetails?)
    -> DBXTeamLogSharedLinkSettingsAddPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAddPasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAddPasswordDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsAddPasswordDetails)
    -> DBXTeamLogSharedLinkSettingsAddPasswordDetails {
    DBXTeamLogSharedLinkSettingsAddPasswordDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBTEAMLOGSharedLinkSettingsAddPasswordTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAddPasswordType?)
    -> DBXTeamLogSharedLinkSettingsAddPasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAddPasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAddPasswordTypeToDBX(object: DBTEAMLOGSharedLinkSettingsAddPasswordType) -> DBXTeamLogSharedLinkSettingsAddPasswordType {
    DBXTeamLogSharedLinkSettingsAddPasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails?)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails {
    DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledType?)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadDisabledTypeToDBX(object: DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledType)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType {
    DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails?)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails {
    DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledType?)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsAllowDownloadEnabledTypeToDBX(object: DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledType)
    -> DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType {
    DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsChangeAudienceDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangeAudienceDetails?)
    -> DBXTeamLogSharedLinkSettingsChangeAudienceDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangeAudienceDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangeAudienceDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsChangeAudienceDetails)
    -> DBXTeamLogSharedLinkSettingsChangeAudienceDetails {
    DBXTeamLogSharedLinkSettingsChangeAudienceDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        newValue: mapDBSHARINGLinkAudienceToDBX(object: object.dNewValue),
        sharedContentLink: object.sharedContentLink,
        previousValue: mapDBSHARINGLinkAudienceToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharedLinkSettingsChangeAudienceTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangeAudienceType?)
    -> DBXTeamLogSharedLinkSettingsChangeAudienceType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangeAudienceTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangeAudienceTypeToDBX(object: DBTEAMLOGSharedLinkSettingsChangeAudienceType)
    -> DBXTeamLogSharedLinkSettingsChangeAudienceType {
    DBXTeamLogSharedLinkSettingsChangeAudienceType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsChangeExpirationDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangeExpirationDetails?)
    -> DBXTeamLogSharedLinkSettingsChangeExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangeExpirationDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangeExpirationDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsChangeExpirationDetails)
    -> DBXTeamLogSharedLinkSettingsChangeExpirationDetails {
    DBXTeamLogSharedLinkSettingsChangeExpirationDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        newValue: object.dNewValue,
        previousValue: object.previousValue
    )
}

func mapDBTEAMLOGSharedLinkSettingsChangeExpirationTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangeExpirationType?)
    -> DBXTeamLogSharedLinkSettingsChangeExpirationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangeExpirationTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangeExpirationTypeToDBX(object: DBTEAMLOGSharedLinkSettingsChangeExpirationType)
    -> DBXTeamLogSharedLinkSettingsChangeExpirationType {
    DBXTeamLogSharedLinkSettingsChangeExpirationType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsChangePasswordDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangePasswordDetails?)
    -> DBXTeamLogSharedLinkSettingsChangePasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangePasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangePasswordDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsChangePasswordDetails)
    -> DBXTeamLogSharedLinkSettingsChangePasswordDetails {
    DBXTeamLogSharedLinkSettingsChangePasswordDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBTEAMLOGSharedLinkSettingsChangePasswordTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsChangePasswordType?)
    -> DBXTeamLogSharedLinkSettingsChangePasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsChangePasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsChangePasswordTypeToDBX(object: DBTEAMLOGSharedLinkSettingsChangePasswordType)
    -> DBXTeamLogSharedLinkSettingsChangePasswordType {
    DBXTeamLogSharedLinkSettingsChangePasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails?)
    -> DBXTeamLogSharedLinkSettingsRemoveExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails)
    -> DBXTeamLogSharedLinkSettingsRemoveExpirationDetails {
    DBXTeamLogSharedLinkSettingsRemoveExpirationDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        previousValue: object.previousValue
    )
}

func mapDBTEAMLOGSharedLinkSettingsRemoveExpirationTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsRemoveExpirationType?)
    -> DBXTeamLogSharedLinkSettingsRemoveExpirationType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsRemoveExpirationTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsRemoveExpirationTypeToDBX(object: DBTEAMLOGSharedLinkSettingsRemoveExpirationType)
    -> DBXTeamLogSharedLinkSettingsRemoveExpirationType {
    DBXTeamLogSharedLinkSettingsRemoveExpirationType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkSettingsRemovePasswordDetailsToDBXOptional(object: DBTEAMLOGSharedLinkSettingsRemovePasswordDetails?)
    -> DBXTeamLogSharedLinkSettingsRemovePasswordDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsRemovePasswordDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsRemovePasswordDetailsToDBX(object: DBTEAMLOGSharedLinkSettingsRemovePasswordDetails)
    -> DBXTeamLogSharedLinkSettingsRemovePasswordDetails {
    DBXTeamLogSharedLinkSettingsRemovePasswordDetails(
        sharedContentAccessLevel: mapDBSHARINGAccessLevelToDBX(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBTEAMLOGSharedLinkSettingsRemovePasswordTypeToDBXOptional(object: DBTEAMLOGSharedLinkSettingsRemovePasswordType?)
    -> DBXTeamLogSharedLinkSettingsRemovePasswordType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkSettingsRemovePasswordTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkSettingsRemovePasswordTypeToDBX(object: DBTEAMLOGSharedLinkSettingsRemovePasswordType)
    -> DBXTeamLogSharedLinkSettingsRemovePasswordType {
    DBXTeamLogSharedLinkSettingsRemovePasswordType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkShareDetailsToDBXOptional(object: DBTEAMLOGSharedLinkShareDetails?) -> DBXTeamLogSharedLinkShareDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkShareDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkShareDetailsToDBX(object: DBTEAMLOGSharedLinkShareDetails) -> DBXTeamLogSharedLinkShareDetails {
    DBXTeamLogSharedLinkShareDetails(
        sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner),
        externalUsers: object.externalUsers?.compactMap { mapDBTEAMLOGExternalUserLogInfoToDBX(object: $0) }
    )
}

func mapDBTEAMLOGSharedLinkShareTypeToDBXOptional(object: DBTEAMLOGSharedLinkShareType?) -> DBXTeamLogSharedLinkShareType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkShareTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkShareTypeToDBX(object: DBTEAMLOGSharedLinkShareType) -> DBXTeamLogSharedLinkShareType {
    DBXTeamLogSharedLinkShareType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkViewDetailsToDBXOptional(object: DBTEAMLOGSharedLinkViewDetails?) -> DBXTeamLogSharedLinkViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkViewDetailsToDBX(object: DBTEAMLOGSharedLinkViewDetails) -> DBXTeamLogSharedLinkViewDetails {
    DBXTeamLogSharedLinkViewDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGSharedLinkViewTypeToDBXOptional(object: DBTEAMLOGSharedLinkViewType?) -> DBXTeamLogSharedLinkViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkViewTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkViewTypeToDBX(object: DBTEAMLOGSharedLinkViewType) -> DBXTeamLogSharedLinkViewType {
    DBXTeamLogSharedLinkViewType(description_: object.description_)
}

func mapDBTEAMLOGSharedLinkVisibilityToDBXOptional(object: DBTEAMLOGSharedLinkVisibility?) -> DBXTeamLogSharedLinkVisibility? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedLinkVisibilityToDBX(object: object)
}

func mapDBTEAMLOGSharedLinkVisibilityToDBX(object: DBTEAMLOGSharedLinkVisibility) -> DBXTeamLogSharedLinkVisibility {
    if object.isNoOne() {
        return DBXTeamLogSharedLinkVisibilityNoOne()
    }
    if object.isPassword() {
        return DBXTeamLogSharedLinkVisibilityPassword()
    }
    if object.isPublic() {
        return DBXTeamLogSharedLinkVisibilityPublic_()
    }
    if object.isTeamOnly() {
        return DBXTeamLogSharedLinkVisibilityTeamOnly()
    }
    if object.isOther() {
        return DBXTeamLogSharedLinkVisibilityOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSharedNoteOpenedDetailsToDBXOptional(object: DBTEAMLOGSharedNoteOpenedDetails?) -> DBXTeamLogSharedNoteOpenedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedNoteOpenedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharedNoteOpenedDetailsToDBX(object: DBTEAMLOGSharedNoteOpenedDetails) -> DBXTeamLogSharedNoteOpenedDetails {
    DBXTeamLogSharedNoteOpenedDetails()
}

func mapDBTEAMLOGSharedNoteOpenedTypeToDBXOptional(object: DBTEAMLOGSharedNoteOpenedType?) -> DBXTeamLogSharedNoteOpenedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharedNoteOpenedTypeToDBX(object: object)
}

func mapDBTEAMLOGSharedNoteOpenedTypeToDBX(object: DBTEAMLOGSharedNoteOpenedType) -> DBXTeamLogSharedNoteOpenedType {
    DBXTeamLogSharedNoteOpenedType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeFolderJoinPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeFolderJoinPolicyDetails?)
    -> DBXTeamLogSharingChangeFolderJoinPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeFolderJoinPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeFolderJoinPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeFolderJoinPolicyDetails)
    -> DBXTeamLogSharingChangeFolderJoinPolicyDetails {
    DBXTeamLogSharingChangeFolderJoinPolicyDetails(
        newValue: mapDBTEAMLOGSharingFolderJoinPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSharingFolderJoinPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeFolderJoinPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeFolderJoinPolicyType?)
    -> DBXTeamLogSharingChangeFolderJoinPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeFolderJoinPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeFolderJoinPolicyTypeToDBX(object: DBTEAMLOGSharingChangeFolderJoinPolicyType) -> DBXTeamLogSharingChangeFolderJoinPolicyType {
    DBXTeamLogSharingChangeFolderJoinPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails?)
    -> DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails)
    -> DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails {
    DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails(
        newValue: mapDBTEAMLOGEnforceLinkPasswordPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGEnforceLinkPasswordPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyType?)
    -> DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyTypeToDBX(object: DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyType)
    -> DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType {
    DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails?)
    -> DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails)
    -> DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails {
    DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails(
        newValue: mapDBTEAMLOGDefaultLinkExpirationDaysPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGDefaultLinkExpirationDaysPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyType?)
    -> DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkDefaultExpirationPolicyTypeToDBX(object: DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyType)
    -> DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType {
    DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails?)
    -> DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails)
    -> DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails {
    DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails(
        newValue: mapDBTEAMLOGChangeLinkExpirationPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGChangeLinkExpirationPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyType?)
    -> DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkEnforcePasswordPolicyTypeToDBX(object: DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyType)
    -> DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType {
    DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeLinkPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeLinkPolicyDetails?) -> DBXTeamLogSharingChangeLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeLinkPolicyDetails) -> DBXTeamLogSharingChangeLinkPolicyDetails {
    DBXTeamLogSharingChangeLinkPolicyDetails(
        newValue: mapDBTEAMLOGSharingLinkPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSharingLinkPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeLinkPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeLinkPolicyType?) -> DBXTeamLogSharingChangeLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeLinkPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeLinkPolicyTypeToDBX(object: DBTEAMLOGSharingChangeLinkPolicyType) -> DBXTeamLogSharingChangeLinkPolicyType {
    DBXTeamLogSharingChangeLinkPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingChangeMemberPolicyDetailsToDBXOptional(object: DBTEAMLOGSharingChangeMemberPolicyDetails?)
    -> DBXTeamLogSharingChangeMemberPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeMemberPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeMemberPolicyDetailsToDBX(object: DBTEAMLOGSharingChangeMemberPolicyDetails) -> DBXTeamLogSharingChangeMemberPolicyDetails {
    DBXTeamLogSharingChangeMemberPolicyDetails(
        newValue: mapDBTEAMLOGSharingMemberPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGSharingMemberPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSharingChangeMemberPolicyTypeToDBXOptional(object: DBTEAMLOGSharingChangeMemberPolicyType?) -> DBXTeamLogSharingChangeMemberPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingChangeMemberPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSharingChangeMemberPolicyTypeToDBX(object: DBTEAMLOGSharingChangeMemberPolicyType) -> DBXTeamLogSharingChangeMemberPolicyType {
    DBXTeamLogSharingChangeMemberPolicyType(description_: object.description_)
}

func mapDBTEAMLOGSharingFolderJoinPolicyToDBXOptional(object: DBTEAMLOGSharingFolderJoinPolicy?) -> DBXTeamLogSharingFolderJoinPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingFolderJoinPolicyToDBX(object: object)
}

func mapDBTEAMLOGSharingFolderJoinPolicyToDBX(object: DBTEAMLOGSharingFolderJoinPolicy) -> DBXTeamLogSharingFolderJoinPolicy {
    if object.isFromAnyone() {
        return DBXTeamLogSharingFolderJoinPolicyFromAnyone()
    }
    if object.isFromTeamOnly() {
        return DBXTeamLogSharingFolderJoinPolicyFromTeamOnly()
    }
    if object.isOther() {
        return DBXTeamLogSharingFolderJoinPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSharingLinkPolicyToDBXOptional(object: DBTEAMLOGSharingLinkPolicy?) -> DBXTeamLogSharingLinkPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingLinkPolicyToDBX(object: object)
}

func mapDBTEAMLOGSharingLinkPolicyToDBX(object: DBTEAMLOGSharingLinkPolicy) -> DBXTeamLogSharingLinkPolicy {
    if object.isDefaultNoOne() {
        return DBXTeamLogSharingLinkPolicyDefaultNoOne()
    }
    if object.isDefaultPrivate() {
        return DBXTeamLogSharingLinkPolicyDefaultPrivate()
    }
    if object.isDefaultPublic() {
        return DBXTeamLogSharingLinkPolicyDefaultPublic()
    }
    if object.isOnlyPrivate() {
        return DBXTeamLogSharingLinkPolicyOnlyPrivate()
    }
    if object.isOther() {
        return DBXTeamLogSharingLinkPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSharingMemberPolicyToDBXOptional(object: DBTEAMLOGSharingMemberPolicy?) -> DBXTeamLogSharingMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSharingMemberPolicyToDBX(object: object)
}

func mapDBTEAMLOGSharingMemberPolicyToDBX(object: DBTEAMLOGSharingMemberPolicy) -> DBXTeamLogSharingMemberPolicy {
    if object.isAllow() {
        return DBXTeamLogSharingMemberPolicyAllow()
    }
    if object.isForbid() {
        return DBXTeamLogSharingMemberPolicyForbid()
    }
    if object.isForbidWithExclusions() {
        return DBXTeamLogSharingMemberPolicyForbidWithExclusions()
    }
    if object.isOther() {
        return DBXTeamLogSharingMemberPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGShmodelDisableDownloadsDetailsToDBXOptional(object: DBTEAMLOGShmodelDisableDownloadsDetails?) -> DBXTeamLogShmodelDisableDownloadsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelDisableDownloadsDetailsToDBX(object: object)
}

func mapDBTEAMLOGShmodelDisableDownloadsDetailsToDBX(object: DBTEAMLOGShmodelDisableDownloadsDetails) -> DBXTeamLogShmodelDisableDownloadsDetails {
    DBXTeamLogShmodelDisableDownloadsDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGShmodelDisableDownloadsTypeToDBXOptional(object: DBTEAMLOGShmodelDisableDownloadsType?) -> DBXTeamLogShmodelDisableDownloadsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelDisableDownloadsTypeToDBX(object: object)
}

func mapDBTEAMLOGShmodelDisableDownloadsTypeToDBX(object: DBTEAMLOGShmodelDisableDownloadsType) -> DBXTeamLogShmodelDisableDownloadsType {
    DBXTeamLogShmodelDisableDownloadsType(description_: object.description_)
}

func mapDBTEAMLOGShmodelEnableDownloadsDetailsToDBXOptional(object: DBTEAMLOGShmodelEnableDownloadsDetails?) -> DBXTeamLogShmodelEnableDownloadsDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelEnableDownloadsDetailsToDBX(object: object)
}

func mapDBTEAMLOGShmodelEnableDownloadsDetailsToDBX(object: DBTEAMLOGShmodelEnableDownloadsDetails) -> DBXTeamLogShmodelEnableDownloadsDetails {
    DBXTeamLogShmodelEnableDownloadsDetails(sharedLinkOwner: mapDBTEAMLOGUserLogInfoToDBXOptional(object: object.sharedLinkOwner))
}

func mapDBTEAMLOGShmodelEnableDownloadsTypeToDBXOptional(object: DBTEAMLOGShmodelEnableDownloadsType?) -> DBXTeamLogShmodelEnableDownloadsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelEnableDownloadsTypeToDBX(object: object)
}

func mapDBTEAMLOGShmodelEnableDownloadsTypeToDBX(object: DBTEAMLOGShmodelEnableDownloadsType) -> DBXTeamLogShmodelEnableDownloadsType {
    DBXTeamLogShmodelEnableDownloadsType(description_: object.description_)
}

func mapDBTEAMLOGShmodelGroupShareDetailsToDBXOptional(object: DBTEAMLOGShmodelGroupShareDetails?) -> DBXTeamLogShmodelGroupShareDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelGroupShareDetailsToDBX(object: object)
}

func mapDBTEAMLOGShmodelGroupShareDetailsToDBX(object: DBTEAMLOGShmodelGroupShareDetails) -> DBXTeamLogShmodelGroupShareDetails {
    DBXTeamLogShmodelGroupShareDetails()
}

func mapDBTEAMLOGShmodelGroupShareTypeToDBXOptional(object: DBTEAMLOGShmodelGroupShareType?) -> DBXTeamLogShmodelGroupShareType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShmodelGroupShareTypeToDBX(object: object)
}

func mapDBTEAMLOGShmodelGroupShareTypeToDBX(object: DBTEAMLOGShmodelGroupShareType) -> DBXTeamLogShmodelGroupShareType {
    DBXTeamLogShmodelGroupShareType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseAccessGrantedDetailsToDBXOptional(object: DBTEAMLOGShowcaseAccessGrantedDetails?) -> DBXTeamLogShowcaseAccessGrantedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseAccessGrantedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseAccessGrantedDetailsToDBX(object: DBTEAMLOGShowcaseAccessGrantedDetails) -> DBXTeamLogShowcaseAccessGrantedDetails {
    DBXTeamLogShowcaseAccessGrantedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseAccessGrantedTypeToDBXOptional(object: DBTEAMLOGShowcaseAccessGrantedType?) -> DBXTeamLogShowcaseAccessGrantedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseAccessGrantedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseAccessGrantedTypeToDBX(object: DBTEAMLOGShowcaseAccessGrantedType) -> DBXTeamLogShowcaseAccessGrantedType {
    DBXTeamLogShowcaseAccessGrantedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseAddMemberDetailsToDBXOptional(object: DBTEAMLOGShowcaseAddMemberDetails?) -> DBXTeamLogShowcaseAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseAddMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseAddMemberDetailsToDBX(object: DBTEAMLOGShowcaseAddMemberDetails) -> DBXTeamLogShowcaseAddMemberDetails {
    DBXTeamLogShowcaseAddMemberDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseAddMemberTypeToDBXOptional(object: DBTEAMLOGShowcaseAddMemberType?) -> DBXTeamLogShowcaseAddMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseAddMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseAddMemberTypeToDBX(object: DBTEAMLOGShowcaseAddMemberType) -> DBXTeamLogShowcaseAddMemberType {
    DBXTeamLogShowcaseAddMemberType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseArchivedDetailsToDBXOptional(object: DBTEAMLOGShowcaseArchivedDetails?) -> DBXTeamLogShowcaseArchivedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseArchivedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseArchivedDetailsToDBX(object: DBTEAMLOGShowcaseArchivedDetails) -> DBXTeamLogShowcaseArchivedDetails {
    DBXTeamLogShowcaseArchivedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseArchivedTypeToDBXOptional(object: DBTEAMLOGShowcaseArchivedType?) -> DBXTeamLogShowcaseArchivedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseArchivedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseArchivedTypeToDBX(object: DBTEAMLOGShowcaseArchivedType) -> DBXTeamLogShowcaseArchivedType {
    DBXTeamLogShowcaseArchivedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseChangeDownloadPolicyDetailsToDBXOptional(object: DBTEAMLOGShowcaseChangeDownloadPolicyDetails?)
    -> DBXTeamLogShowcaseChangeDownloadPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeDownloadPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeDownloadPolicyDetailsToDBX(object: DBTEAMLOGShowcaseChangeDownloadPolicyDetails)
    -> DBXTeamLogShowcaseChangeDownloadPolicyDetails {
    DBXTeamLogShowcaseChangeDownloadPolicyDetails(
        newValue: mapDBTEAMLOGShowcaseDownloadPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGShowcaseDownloadPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGShowcaseChangeDownloadPolicyTypeToDBXOptional(object: DBTEAMLOGShowcaseChangeDownloadPolicyType?)
    -> DBXTeamLogShowcaseChangeDownloadPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeDownloadPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeDownloadPolicyTypeToDBX(object: DBTEAMLOGShowcaseChangeDownloadPolicyType) -> DBXTeamLogShowcaseChangeDownloadPolicyType {
    DBXTeamLogShowcaseChangeDownloadPolicyType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseChangeEnabledPolicyDetailsToDBXOptional(object: DBTEAMLOGShowcaseChangeEnabledPolicyDetails?)
    -> DBXTeamLogShowcaseChangeEnabledPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeEnabledPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeEnabledPolicyDetailsToDBX(object: DBTEAMLOGShowcaseChangeEnabledPolicyDetails) -> DBXTeamLogShowcaseChangeEnabledPolicyDetails {
    DBXTeamLogShowcaseChangeEnabledPolicyDetails(
        newValue: mapDBTEAMLOGShowcaseEnabledPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGShowcaseEnabledPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGShowcaseChangeEnabledPolicyTypeToDBXOptional(object: DBTEAMLOGShowcaseChangeEnabledPolicyType?) -> DBXTeamLogShowcaseChangeEnabledPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeEnabledPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeEnabledPolicyTypeToDBX(object: DBTEAMLOGShowcaseChangeEnabledPolicyType) -> DBXTeamLogShowcaseChangeEnabledPolicyType {
    DBXTeamLogShowcaseChangeEnabledPolicyType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsToDBXOptional(object: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails?)
    -> DBXTeamLogShowcaseChangeExternalSharingPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsToDBX(object: DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails)
    -> DBXTeamLogShowcaseChangeExternalSharingPolicyDetails {
    DBXTeamLogShowcaseChangeExternalSharingPolicyDetails(
        newValue: mapDBTEAMLOGShowcaseExternalSharingPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGShowcaseExternalSharingPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGShowcaseChangeExternalSharingPolicyTypeToDBXOptional(object: DBTEAMLOGShowcaseChangeExternalSharingPolicyType?)
    -> DBXTeamLogShowcaseChangeExternalSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseChangeExternalSharingPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseChangeExternalSharingPolicyTypeToDBX(object: DBTEAMLOGShowcaseChangeExternalSharingPolicyType)
    -> DBXTeamLogShowcaseChangeExternalSharingPolicyType {
    DBXTeamLogShowcaseChangeExternalSharingPolicyType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseCreatedDetailsToDBXOptional(object: DBTEAMLOGShowcaseCreatedDetails?) -> DBXTeamLogShowcaseCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseCreatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseCreatedDetailsToDBX(object: DBTEAMLOGShowcaseCreatedDetails) -> DBXTeamLogShowcaseCreatedDetails {
    DBXTeamLogShowcaseCreatedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseCreatedTypeToDBXOptional(object: DBTEAMLOGShowcaseCreatedType?) -> DBXTeamLogShowcaseCreatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseCreatedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseCreatedTypeToDBX(object: DBTEAMLOGShowcaseCreatedType) -> DBXTeamLogShowcaseCreatedType {
    DBXTeamLogShowcaseCreatedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseDeleteCommentDetailsToDBXOptional(object: DBTEAMLOGShowcaseDeleteCommentDetails?) -> DBXTeamLogShowcaseDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseDeleteCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseDeleteCommentDetailsToDBX(object: DBTEAMLOGShowcaseDeleteCommentDetails) -> DBXTeamLogShowcaseDeleteCommentDetails {
    DBXTeamLogShowcaseDeleteCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGShowcaseDeleteCommentTypeToDBXOptional(object: DBTEAMLOGShowcaseDeleteCommentType?) -> DBXTeamLogShowcaseDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseDeleteCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseDeleteCommentTypeToDBX(object: DBTEAMLOGShowcaseDeleteCommentType) -> DBXTeamLogShowcaseDeleteCommentType {
    DBXTeamLogShowcaseDeleteCommentType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseDocumentLogInfoToDBXOptional(object: DBTEAMLOGShowcaseDocumentLogInfo?) -> DBXTeamLogShowcaseDocumentLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseDocumentLogInfoToDBX(object: object)
}

func mapDBTEAMLOGShowcaseDocumentLogInfoToDBX(object: DBTEAMLOGShowcaseDocumentLogInfo) -> DBXTeamLogShowcaseDocumentLogInfo {
    DBXTeamLogShowcaseDocumentLogInfo(showcaseId: object.showcaseId, showcaseTitle: object.showcaseTitle)
}

func mapDBTEAMLOGShowcaseDownloadPolicyToDBXOptional(object: DBTEAMLOGShowcaseDownloadPolicy?) -> DBXTeamLogShowcaseDownloadPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseDownloadPolicyToDBX(object: object)
}

func mapDBTEAMLOGShowcaseDownloadPolicyToDBX(object: DBTEAMLOGShowcaseDownloadPolicy) -> DBXTeamLogShowcaseDownloadPolicy {
    if object.isDisabled() {
        return DBXTeamLogShowcaseDownloadPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogShowcaseDownloadPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogShowcaseDownloadPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGShowcaseEditCommentDetailsToDBXOptional(object: DBTEAMLOGShowcaseEditCommentDetails?) -> DBXTeamLogShowcaseEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseEditCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseEditCommentDetailsToDBX(object: DBTEAMLOGShowcaseEditCommentDetails) -> DBXTeamLogShowcaseEditCommentDetails {
    DBXTeamLogShowcaseEditCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGShowcaseEditCommentTypeToDBXOptional(object: DBTEAMLOGShowcaseEditCommentType?) -> DBXTeamLogShowcaseEditCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseEditCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseEditCommentTypeToDBX(object: DBTEAMLOGShowcaseEditCommentType) -> DBXTeamLogShowcaseEditCommentType {
    DBXTeamLogShowcaseEditCommentType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseEditedDetailsToDBXOptional(object: DBTEAMLOGShowcaseEditedDetails?) -> DBXTeamLogShowcaseEditedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseEditedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseEditedDetailsToDBX(object: DBTEAMLOGShowcaseEditedDetails) -> DBXTeamLogShowcaseEditedDetails {
    DBXTeamLogShowcaseEditedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseEditedTypeToDBXOptional(object: DBTEAMLOGShowcaseEditedType?) -> DBXTeamLogShowcaseEditedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseEditedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseEditedTypeToDBX(object: DBTEAMLOGShowcaseEditedType) -> DBXTeamLogShowcaseEditedType {
    DBXTeamLogShowcaseEditedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseEnabledPolicyToDBXOptional(object: DBTEAMLOGShowcaseEnabledPolicy?) -> DBXTeamLogShowcaseEnabledPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseEnabledPolicyToDBX(object: object)
}

func mapDBTEAMLOGShowcaseEnabledPolicyToDBX(object: DBTEAMLOGShowcaseEnabledPolicy) -> DBXTeamLogShowcaseEnabledPolicy {
    if object.isDisabled() {
        return DBXTeamLogShowcaseEnabledPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogShowcaseEnabledPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogShowcaseEnabledPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGShowcaseExternalSharingPolicyToDBXOptional(object: DBTEAMLOGShowcaseExternalSharingPolicy?) -> DBXTeamLogShowcaseExternalSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseExternalSharingPolicyToDBX(object: object)
}

func mapDBTEAMLOGShowcaseExternalSharingPolicyToDBX(object: DBTEAMLOGShowcaseExternalSharingPolicy) -> DBXTeamLogShowcaseExternalSharingPolicy {
    if object.isDisabled() {
        return DBXTeamLogShowcaseExternalSharingPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogShowcaseExternalSharingPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogShowcaseExternalSharingPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGShowcaseFileAddedDetailsToDBXOptional(object: DBTEAMLOGShowcaseFileAddedDetails?) -> DBXTeamLogShowcaseFileAddedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileAddedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileAddedDetailsToDBX(object: DBTEAMLOGShowcaseFileAddedDetails) -> DBXTeamLogShowcaseFileAddedDetails {
    DBXTeamLogShowcaseFileAddedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseFileAddedTypeToDBXOptional(object: DBTEAMLOGShowcaseFileAddedType?) -> DBXTeamLogShowcaseFileAddedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileAddedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileAddedTypeToDBX(object: DBTEAMLOGShowcaseFileAddedType) -> DBXTeamLogShowcaseFileAddedType {
    DBXTeamLogShowcaseFileAddedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseFileDownloadDetailsToDBXOptional(object: DBTEAMLOGShowcaseFileDownloadDetails?) -> DBXTeamLogShowcaseFileDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileDownloadDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileDownloadDetailsToDBX(object: DBTEAMLOGShowcaseFileDownloadDetails) -> DBXTeamLogShowcaseFileDownloadDetails {
    DBXTeamLogShowcaseFileDownloadDetails(eventUuid: object.eventUuid, downloadType: object.downloadType)
}

func mapDBTEAMLOGShowcaseFileDownloadTypeToDBXOptional(object: DBTEAMLOGShowcaseFileDownloadType?) -> DBXTeamLogShowcaseFileDownloadType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileDownloadTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileDownloadTypeToDBX(object: DBTEAMLOGShowcaseFileDownloadType) -> DBXTeamLogShowcaseFileDownloadType {
    DBXTeamLogShowcaseFileDownloadType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseFileRemovedDetailsToDBXOptional(object: DBTEAMLOGShowcaseFileRemovedDetails?) -> DBXTeamLogShowcaseFileRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileRemovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileRemovedDetailsToDBX(object: DBTEAMLOGShowcaseFileRemovedDetails) -> DBXTeamLogShowcaseFileRemovedDetails {
    DBXTeamLogShowcaseFileRemovedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseFileRemovedTypeToDBXOptional(object: DBTEAMLOGShowcaseFileRemovedType?) -> DBXTeamLogShowcaseFileRemovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileRemovedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileRemovedTypeToDBX(object: DBTEAMLOGShowcaseFileRemovedType) -> DBXTeamLogShowcaseFileRemovedType {
    DBXTeamLogShowcaseFileRemovedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseFileViewDetailsToDBXOptional(object: DBTEAMLOGShowcaseFileViewDetails?) -> DBXTeamLogShowcaseFileViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileViewDetailsToDBX(object: DBTEAMLOGShowcaseFileViewDetails) -> DBXTeamLogShowcaseFileViewDetails {
    DBXTeamLogShowcaseFileViewDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseFileViewTypeToDBXOptional(object: DBTEAMLOGShowcaseFileViewType?) -> DBXTeamLogShowcaseFileViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseFileViewTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseFileViewTypeToDBX(object: DBTEAMLOGShowcaseFileViewType) -> DBXTeamLogShowcaseFileViewType {
    DBXTeamLogShowcaseFileViewType(description_: object.description_)
}

func mapDBTEAMLOGShowcasePermanentlyDeletedDetailsToDBXOptional(object: DBTEAMLOGShowcasePermanentlyDeletedDetails?)
    -> DBXTeamLogShowcasePermanentlyDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcasePermanentlyDeletedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcasePermanentlyDeletedDetailsToDBX(object: DBTEAMLOGShowcasePermanentlyDeletedDetails) -> DBXTeamLogShowcasePermanentlyDeletedDetails {
    DBXTeamLogShowcasePermanentlyDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcasePermanentlyDeletedTypeToDBXOptional(object: DBTEAMLOGShowcasePermanentlyDeletedType?) -> DBXTeamLogShowcasePermanentlyDeletedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcasePermanentlyDeletedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcasePermanentlyDeletedTypeToDBX(object: DBTEAMLOGShowcasePermanentlyDeletedType) -> DBXTeamLogShowcasePermanentlyDeletedType {
    DBXTeamLogShowcasePermanentlyDeletedType(description_: object.description_)
}

func mapDBTEAMLOGShowcasePostCommentDetailsToDBXOptional(object: DBTEAMLOGShowcasePostCommentDetails?) -> DBXTeamLogShowcasePostCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcasePostCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcasePostCommentDetailsToDBX(object: DBTEAMLOGShowcasePostCommentDetails) -> DBXTeamLogShowcasePostCommentDetails {
    DBXTeamLogShowcasePostCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGShowcasePostCommentTypeToDBXOptional(object: DBTEAMLOGShowcasePostCommentType?) -> DBXTeamLogShowcasePostCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcasePostCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcasePostCommentTypeToDBX(object: DBTEAMLOGShowcasePostCommentType) -> DBXTeamLogShowcasePostCommentType {
    DBXTeamLogShowcasePostCommentType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseRemoveMemberDetailsToDBXOptional(object: DBTEAMLOGShowcaseRemoveMemberDetails?) -> DBXTeamLogShowcaseRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRemoveMemberDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRemoveMemberDetailsToDBX(object: DBTEAMLOGShowcaseRemoveMemberDetails) -> DBXTeamLogShowcaseRemoveMemberDetails {
    DBXTeamLogShowcaseRemoveMemberDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseRemoveMemberTypeToDBXOptional(object: DBTEAMLOGShowcaseRemoveMemberType?) -> DBXTeamLogShowcaseRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRemoveMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRemoveMemberTypeToDBX(object: DBTEAMLOGShowcaseRemoveMemberType) -> DBXTeamLogShowcaseRemoveMemberType {
    DBXTeamLogShowcaseRemoveMemberType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseRenamedDetailsToDBXOptional(object: DBTEAMLOGShowcaseRenamedDetails?) -> DBXTeamLogShowcaseRenamedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRenamedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRenamedDetailsToDBX(object: DBTEAMLOGShowcaseRenamedDetails) -> DBXTeamLogShowcaseRenamedDetails {
    DBXTeamLogShowcaseRenamedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseRenamedTypeToDBXOptional(object: DBTEAMLOGShowcaseRenamedType?) -> DBXTeamLogShowcaseRenamedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRenamedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRenamedTypeToDBX(object: DBTEAMLOGShowcaseRenamedType) -> DBXTeamLogShowcaseRenamedType {
    DBXTeamLogShowcaseRenamedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseRequestAccessDetailsToDBXOptional(object: DBTEAMLOGShowcaseRequestAccessDetails?) -> DBXTeamLogShowcaseRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRequestAccessDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRequestAccessDetailsToDBX(object: DBTEAMLOGShowcaseRequestAccessDetails) -> DBXTeamLogShowcaseRequestAccessDetails {
    DBXTeamLogShowcaseRequestAccessDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseRequestAccessTypeToDBXOptional(object: DBTEAMLOGShowcaseRequestAccessType?) -> DBXTeamLogShowcaseRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRequestAccessTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRequestAccessTypeToDBX(object: DBTEAMLOGShowcaseRequestAccessType) -> DBXTeamLogShowcaseRequestAccessType {
    DBXTeamLogShowcaseRequestAccessType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseResolveCommentDetailsToDBXOptional(object: DBTEAMLOGShowcaseResolveCommentDetails?) -> DBXTeamLogShowcaseResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseResolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseResolveCommentDetailsToDBX(object: DBTEAMLOGShowcaseResolveCommentDetails) -> DBXTeamLogShowcaseResolveCommentDetails {
    DBXTeamLogShowcaseResolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGShowcaseResolveCommentTypeToDBXOptional(object: DBTEAMLOGShowcaseResolveCommentType?) -> DBXTeamLogShowcaseResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseResolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseResolveCommentTypeToDBX(object: DBTEAMLOGShowcaseResolveCommentType) -> DBXTeamLogShowcaseResolveCommentType {
    DBXTeamLogShowcaseResolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseRestoredDetailsToDBXOptional(object: DBTEAMLOGShowcaseRestoredDetails?) -> DBXTeamLogShowcaseRestoredDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRestoredDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRestoredDetailsToDBX(object: DBTEAMLOGShowcaseRestoredDetails) -> DBXTeamLogShowcaseRestoredDetails {
    DBXTeamLogShowcaseRestoredDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseRestoredTypeToDBXOptional(object: DBTEAMLOGShowcaseRestoredType?) -> DBXTeamLogShowcaseRestoredType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseRestoredTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseRestoredTypeToDBX(object: DBTEAMLOGShowcaseRestoredType) -> DBXTeamLogShowcaseRestoredType {
    DBXTeamLogShowcaseRestoredType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseTrashedDeprecatedDetailsToDBXOptional(object: DBTEAMLOGShowcaseTrashedDeprecatedDetails?)
    -> DBXTeamLogShowcaseTrashedDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseTrashedDeprecatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseTrashedDeprecatedDetailsToDBX(object: DBTEAMLOGShowcaseTrashedDeprecatedDetails) -> DBXTeamLogShowcaseTrashedDeprecatedDetails {
    DBXTeamLogShowcaseTrashedDeprecatedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseTrashedDeprecatedTypeToDBXOptional(object: DBTEAMLOGShowcaseTrashedDeprecatedType?) -> DBXTeamLogShowcaseTrashedDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseTrashedDeprecatedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseTrashedDeprecatedTypeToDBX(object: DBTEAMLOGShowcaseTrashedDeprecatedType) -> DBXTeamLogShowcaseTrashedDeprecatedType {
    DBXTeamLogShowcaseTrashedDeprecatedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseTrashedDetailsToDBXOptional(object: DBTEAMLOGShowcaseTrashedDetails?) -> DBXTeamLogShowcaseTrashedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseTrashedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseTrashedDetailsToDBX(object: DBTEAMLOGShowcaseTrashedDetails) -> DBXTeamLogShowcaseTrashedDetails {
    DBXTeamLogShowcaseTrashedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseTrashedTypeToDBXOptional(object: DBTEAMLOGShowcaseTrashedType?) -> DBXTeamLogShowcaseTrashedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseTrashedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseTrashedTypeToDBX(object: DBTEAMLOGShowcaseTrashedType) -> DBXTeamLogShowcaseTrashedType {
    DBXTeamLogShowcaseTrashedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseUnresolveCommentDetailsToDBXOptional(object: DBTEAMLOGShowcaseUnresolveCommentDetails?) -> DBXTeamLogShowcaseUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUnresolveCommentDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUnresolveCommentDetailsToDBX(object: DBTEAMLOGShowcaseUnresolveCommentDetails) -> DBXTeamLogShowcaseUnresolveCommentDetails {
    DBXTeamLogShowcaseUnresolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBTEAMLOGShowcaseUnresolveCommentTypeToDBXOptional(object: DBTEAMLOGShowcaseUnresolveCommentType?) -> DBXTeamLogShowcaseUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUnresolveCommentTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUnresolveCommentTypeToDBX(object: DBTEAMLOGShowcaseUnresolveCommentType) -> DBXTeamLogShowcaseUnresolveCommentType {
    DBXTeamLogShowcaseUnresolveCommentType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseUntrashedDeprecatedDetailsToDBXOptional(object: DBTEAMLOGShowcaseUntrashedDeprecatedDetails?)
    -> DBXTeamLogShowcaseUntrashedDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUntrashedDeprecatedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUntrashedDeprecatedDetailsToDBX(object: DBTEAMLOGShowcaseUntrashedDeprecatedDetails) -> DBXTeamLogShowcaseUntrashedDeprecatedDetails {
    DBXTeamLogShowcaseUntrashedDeprecatedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseUntrashedDeprecatedTypeToDBXOptional(object: DBTEAMLOGShowcaseUntrashedDeprecatedType?) -> DBXTeamLogShowcaseUntrashedDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUntrashedDeprecatedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUntrashedDeprecatedTypeToDBX(object: DBTEAMLOGShowcaseUntrashedDeprecatedType) -> DBXTeamLogShowcaseUntrashedDeprecatedType {
    DBXTeamLogShowcaseUntrashedDeprecatedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseUntrashedDetailsToDBXOptional(object: DBTEAMLOGShowcaseUntrashedDetails?) -> DBXTeamLogShowcaseUntrashedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUntrashedDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUntrashedDetailsToDBX(object: DBTEAMLOGShowcaseUntrashedDetails) -> DBXTeamLogShowcaseUntrashedDetails {
    DBXTeamLogShowcaseUntrashedDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseUntrashedTypeToDBXOptional(object: DBTEAMLOGShowcaseUntrashedType?) -> DBXTeamLogShowcaseUntrashedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseUntrashedTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseUntrashedTypeToDBX(object: DBTEAMLOGShowcaseUntrashedType) -> DBXTeamLogShowcaseUntrashedType {
    DBXTeamLogShowcaseUntrashedType(description_: object.description_)
}

func mapDBTEAMLOGShowcaseViewDetailsToDBXOptional(object: DBTEAMLOGShowcaseViewDetails?) -> DBXTeamLogShowcaseViewDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseViewDetailsToDBX(object: object)
}

func mapDBTEAMLOGShowcaseViewDetailsToDBX(object: DBTEAMLOGShowcaseViewDetails) -> DBXTeamLogShowcaseViewDetails {
    DBXTeamLogShowcaseViewDetails(eventUuid: object.eventUuid)
}

func mapDBTEAMLOGShowcaseViewTypeToDBXOptional(object: DBTEAMLOGShowcaseViewType?) -> DBXTeamLogShowcaseViewType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGShowcaseViewTypeToDBX(object: object)
}

func mapDBTEAMLOGShowcaseViewTypeToDBX(object: DBTEAMLOGShowcaseViewType) -> DBXTeamLogShowcaseViewType {
    DBXTeamLogShowcaseViewType(description_: object.description_)
}

func mapDBTEAMLOGSignInAsSessionEndDetailsToDBXOptional(object: DBTEAMLOGSignInAsSessionEndDetails?) -> DBXTeamLogSignInAsSessionEndDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSignInAsSessionEndDetailsToDBX(object: object)
}

func mapDBTEAMLOGSignInAsSessionEndDetailsToDBX(object: DBTEAMLOGSignInAsSessionEndDetails) -> DBXTeamLogSignInAsSessionEndDetails {
    DBXTeamLogSignInAsSessionEndDetails()
}

func mapDBTEAMLOGSignInAsSessionEndTypeToDBXOptional(object: DBTEAMLOGSignInAsSessionEndType?) -> DBXTeamLogSignInAsSessionEndType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSignInAsSessionEndTypeToDBX(object: object)
}

func mapDBTEAMLOGSignInAsSessionEndTypeToDBX(object: DBTEAMLOGSignInAsSessionEndType) -> DBXTeamLogSignInAsSessionEndType {
    DBXTeamLogSignInAsSessionEndType(description_: object.description_)
}

func mapDBTEAMLOGSignInAsSessionStartDetailsToDBXOptional(object: DBTEAMLOGSignInAsSessionStartDetails?) -> DBXTeamLogSignInAsSessionStartDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSignInAsSessionStartDetailsToDBX(object: object)
}

func mapDBTEAMLOGSignInAsSessionStartDetailsToDBX(object: DBTEAMLOGSignInAsSessionStartDetails) -> DBXTeamLogSignInAsSessionStartDetails {
    DBXTeamLogSignInAsSessionStartDetails()
}

func mapDBTEAMLOGSignInAsSessionStartTypeToDBXOptional(object: DBTEAMLOGSignInAsSessionStartType?) -> DBXTeamLogSignInAsSessionStartType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSignInAsSessionStartTypeToDBX(object: object)
}

func mapDBTEAMLOGSignInAsSessionStartTypeToDBX(object: DBTEAMLOGSignInAsSessionStartType) -> DBXTeamLogSignInAsSessionStartType {
    DBXTeamLogSignInAsSessionStartType(description_: object.description_)
}

func mapDBTEAMLOGSmartSyncChangePolicyDetailsToDBXOptional(object: DBTEAMLOGSmartSyncChangePolicyDetails?) -> DBXTeamLogSmartSyncChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncChangePolicyDetailsToDBX(object: DBTEAMLOGSmartSyncChangePolicyDetails) -> DBXTeamLogSmartSyncChangePolicyDetails {
    DBXTeamLogSmartSyncChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESSmartSyncPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESSmartSyncPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSmartSyncChangePolicyTypeToDBXOptional(object: DBTEAMLOGSmartSyncChangePolicyType?) -> DBXTeamLogSmartSyncChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncChangePolicyTypeToDBX(object: DBTEAMLOGSmartSyncChangePolicyType) -> DBXTeamLogSmartSyncChangePolicyType {
    DBXTeamLogSmartSyncChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsToDBXOptional(object: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails?)
    -> DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsToDBX(object: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails)
    -> DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails {
    DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails()
}

func mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeToDBXOptional(object: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType?)
    -> DBXTeamLogSmartSyncCreateAdminPrivilegeReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncCreateAdminPrivilegeReportTypeToDBX(object: DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType)
    -> DBXTeamLogSmartSyncCreateAdminPrivilegeReportType {
    DBXTeamLogSmartSyncCreateAdminPrivilegeReportType(description_: object.description_)
}

func mapDBTEAMLOGSmartSyncNotOptOutDetailsToDBXOptional(object: DBTEAMLOGSmartSyncNotOptOutDetails?) -> DBXTeamLogSmartSyncNotOptOutDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncNotOptOutDetailsToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncNotOptOutDetailsToDBX(object: DBTEAMLOGSmartSyncNotOptOutDetails) -> DBXTeamLogSmartSyncNotOptOutDetails {
    DBXTeamLogSmartSyncNotOptOutDetails(
        previousValue: mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGSmartSyncNotOptOutTypeToDBXOptional(object: DBTEAMLOGSmartSyncNotOptOutType?) -> DBXTeamLogSmartSyncNotOptOutType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncNotOptOutTypeToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncNotOptOutTypeToDBX(object: DBTEAMLOGSmartSyncNotOptOutType) -> DBXTeamLogSmartSyncNotOptOutType {
    DBXTeamLogSmartSyncNotOptOutType(description_: object.description_)
}

func mapDBTEAMLOGSmartSyncOptOutDetailsToDBXOptional(object: DBTEAMLOGSmartSyncOptOutDetails?) -> DBXTeamLogSmartSyncOptOutDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncOptOutDetailsToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncOptOutDetailsToDBX(object: DBTEAMLOGSmartSyncOptOutDetails) -> DBXTeamLogSmartSyncOptOutDetails {
    DBXTeamLogSmartSyncOptOutDetails(
        previousValue: mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGSmartSyncOptOutPolicyToDBXOptional(object: DBTEAMLOGSmartSyncOptOutPolicy?) -> DBXTeamLogSmartSyncOptOutPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncOptOutPolicyToDBX(object: DBTEAMLOGSmartSyncOptOutPolicy) -> DBXTeamLogSmartSyncOptOutPolicy {
    if object.isDefault_() {
        return DBXTeamLogSmartSyncOptOutPolicyDefault_()
    }
    if object.isOptedOut() {
        return DBXTeamLogSmartSyncOptOutPolicyOptedOut()
    }
    if object.isOther() {
        return DBXTeamLogSmartSyncOptOutPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSmartSyncOptOutTypeToDBXOptional(object: DBTEAMLOGSmartSyncOptOutType?) -> DBXTeamLogSmartSyncOptOutType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmartSyncOptOutTypeToDBX(object: object)
}

func mapDBTEAMLOGSmartSyncOptOutTypeToDBX(object: DBTEAMLOGSmartSyncOptOutType) -> DBXTeamLogSmartSyncOptOutType {
    DBXTeamLogSmartSyncOptOutType(description_: object.description_)
}

func mapDBTEAMLOGSmarterSmartSyncPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGSmarterSmartSyncPolicyChangedDetails?)
    -> DBXTeamLogSmarterSmartSyncPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmarterSmartSyncPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGSmarterSmartSyncPolicyChangedDetailsToDBX(object: DBTEAMLOGSmarterSmartSyncPolicyChangedDetails)
    -> DBXTeamLogSmarterSmartSyncPolicyChangedDetails {
    DBXTeamLogSmarterSmartSyncPolicyChangedDetails(
        previousValue: mapDBTEAMPOLICIESSmarterSmartSyncPolicyStateToDBX(object: object.previousValue),
        newValue: mapDBTEAMPOLICIESSmarterSmartSyncPolicyStateToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGSmarterSmartSyncPolicyChangedTypeToDBXOptional(object: DBTEAMLOGSmarterSmartSyncPolicyChangedType?)
    -> DBXTeamLogSmarterSmartSyncPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSmarterSmartSyncPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGSmarterSmartSyncPolicyChangedTypeToDBX(object: DBTEAMLOGSmarterSmartSyncPolicyChangedType) -> DBXTeamLogSmarterSmartSyncPolicyChangedType {
    DBXTeamLogSmarterSmartSyncPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGSpaceCapsTypeToDBXOptional(object: DBTEAMLOGSpaceCapsType?) -> DBXTeamLogSpaceCapsType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSpaceCapsTypeToDBX(object: object)
}

func mapDBTEAMLOGSpaceCapsTypeToDBX(object: DBTEAMLOGSpaceCapsType) -> DBXTeamLogSpaceCapsType {
    if object.isHard() {
        return DBXTeamLogSpaceCapsTypeHard()
    }
    if object.isOff() {
        return DBXTeamLogSpaceCapsTypeOff()
    }
    if object.isSoft() {
        return DBXTeamLogSpaceCapsTypeSoft()
    }
    if object.isOther() {
        return DBXTeamLogSpaceCapsTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSpaceLimitsStatusToDBXOptional(object: DBTEAMLOGSpaceLimitsStatus?) -> DBXTeamLogSpaceLimitsStatus? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSpaceLimitsStatusToDBX(object: object)
}

func mapDBTEAMLOGSpaceLimitsStatusToDBX(object: DBTEAMLOGSpaceLimitsStatus) -> DBXTeamLogSpaceLimitsStatus {
    if object.isNearQuota() {
        return DBXTeamLogSpaceLimitsStatusNearQuota()
    }
    if object.isOverQuota() {
        return DBXTeamLogSpaceLimitsStatusOverQuota()
    }
    if object.isWithinQuota() {
        return DBXTeamLogSpaceLimitsStatusWithinQuota()
    }
    if object.isOther() {
        return DBXTeamLogSpaceLimitsStatusOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGSsoAddCertDetailsToDBXOptional(object: DBTEAMLOGSsoAddCertDetails?) -> DBXTeamLogSsoAddCertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddCertDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoAddCertDetailsToDBX(object: DBTEAMLOGSsoAddCertDetails) -> DBXTeamLogSsoAddCertDetails {
    DBXTeamLogSsoAddCertDetails(certificateDetails: mapDBTEAMLOGCertificateToDBX(object: object.certificateDetails))
}

func mapDBTEAMLOGSsoAddCertTypeToDBXOptional(object: DBTEAMLOGSsoAddCertType?) -> DBXTeamLogSsoAddCertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddCertTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoAddCertTypeToDBX(object: DBTEAMLOGSsoAddCertType) -> DBXTeamLogSsoAddCertType {
    DBXTeamLogSsoAddCertType(description_: object.description_)
}

func mapDBTEAMLOGSsoAddLoginUrlDetailsToDBXOptional(object: DBTEAMLOGSsoAddLoginUrlDetails?) -> DBXTeamLogSsoAddLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddLoginUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoAddLoginUrlDetailsToDBX(object: DBTEAMLOGSsoAddLoginUrlDetails) -> DBXTeamLogSsoAddLoginUrlDetails {
    DBXTeamLogSsoAddLoginUrlDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGSsoAddLoginUrlTypeToDBXOptional(object: DBTEAMLOGSsoAddLoginUrlType?) -> DBXTeamLogSsoAddLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddLoginUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoAddLoginUrlTypeToDBX(object: DBTEAMLOGSsoAddLoginUrlType) -> DBXTeamLogSsoAddLoginUrlType {
    DBXTeamLogSsoAddLoginUrlType(description_: object.description_)
}

func mapDBTEAMLOGSsoAddLogoutUrlDetailsToDBXOptional(object: DBTEAMLOGSsoAddLogoutUrlDetails?) -> DBXTeamLogSsoAddLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddLogoutUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoAddLogoutUrlDetailsToDBX(object: DBTEAMLOGSsoAddLogoutUrlDetails) -> DBXTeamLogSsoAddLogoutUrlDetails {
    DBXTeamLogSsoAddLogoutUrlDetails(newValue: object.dNewValue)
}

func mapDBTEAMLOGSsoAddLogoutUrlTypeToDBXOptional(object: DBTEAMLOGSsoAddLogoutUrlType?) -> DBXTeamLogSsoAddLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoAddLogoutUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoAddLogoutUrlTypeToDBX(object: DBTEAMLOGSsoAddLogoutUrlType) -> DBXTeamLogSsoAddLogoutUrlType {
    DBXTeamLogSsoAddLogoutUrlType(description_: object.description_)
}

func mapDBTEAMLOGSsoChangeCertDetailsToDBXOptional(object: DBTEAMLOGSsoChangeCertDetails?) -> DBXTeamLogSsoChangeCertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeCertDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeCertDetailsToDBX(object: DBTEAMLOGSsoChangeCertDetails) -> DBXTeamLogSsoChangeCertDetails {
    DBXTeamLogSsoChangeCertDetails(
        newCertificateDetails: mapDBTEAMLOGCertificateToDBX(object: object.dNewCertificateDetails),
        previousCertificateDetails: mapDBTEAMLOGCertificateToDBXOptional(object: object.previousCertificateDetails)
    )
}

func mapDBTEAMLOGSsoChangeCertTypeToDBXOptional(object: DBTEAMLOGSsoChangeCertType?) -> DBXTeamLogSsoChangeCertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeCertTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeCertTypeToDBX(object: DBTEAMLOGSsoChangeCertType) -> DBXTeamLogSsoChangeCertType {
    DBXTeamLogSsoChangeCertType(description_: object.description_)
}

func mapDBTEAMLOGSsoChangeLoginUrlDetailsToDBXOptional(object: DBTEAMLOGSsoChangeLoginUrlDetails?) -> DBXTeamLogSsoChangeLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeLoginUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeLoginUrlDetailsToDBX(object: DBTEAMLOGSsoChangeLoginUrlDetails) -> DBXTeamLogSsoChangeLoginUrlDetails {
    DBXTeamLogSsoChangeLoginUrlDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGSsoChangeLoginUrlTypeToDBXOptional(object: DBTEAMLOGSsoChangeLoginUrlType?) -> DBXTeamLogSsoChangeLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeLoginUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeLoginUrlTypeToDBX(object: DBTEAMLOGSsoChangeLoginUrlType) -> DBXTeamLogSsoChangeLoginUrlType {
    DBXTeamLogSsoChangeLoginUrlType(description_: object.description_)
}

func mapDBTEAMLOGSsoChangeLogoutUrlDetailsToDBXOptional(object: DBTEAMLOGSsoChangeLogoutUrlDetails?) -> DBXTeamLogSsoChangeLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeLogoutUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeLogoutUrlDetailsToDBX(object: DBTEAMLOGSsoChangeLogoutUrlDetails) -> DBXTeamLogSsoChangeLogoutUrlDetails {
    DBXTeamLogSsoChangeLogoutUrlDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGSsoChangeLogoutUrlTypeToDBXOptional(object: DBTEAMLOGSsoChangeLogoutUrlType?) -> DBXTeamLogSsoChangeLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeLogoutUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeLogoutUrlTypeToDBX(object: DBTEAMLOGSsoChangeLogoutUrlType) -> DBXTeamLogSsoChangeLogoutUrlType {
    DBXTeamLogSsoChangeLogoutUrlType(description_: object.description_)
}

func mapDBTEAMLOGSsoChangePolicyDetailsToDBXOptional(object: DBTEAMLOGSsoChangePolicyDetails?) -> DBXTeamLogSsoChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoChangePolicyDetailsToDBX(object: DBTEAMLOGSsoChangePolicyDetails) -> DBXTeamLogSsoChangePolicyDetails {
    DBXTeamLogSsoChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESSsoPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESSsoPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGSsoChangePolicyTypeToDBXOptional(object: DBTEAMLOGSsoChangePolicyType?) -> DBXTeamLogSsoChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoChangePolicyTypeToDBX(object: DBTEAMLOGSsoChangePolicyType) -> DBXTeamLogSsoChangePolicyType {
    DBXTeamLogSsoChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGSsoChangeSamlIdentityModeDetailsToDBXOptional(object: DBTEAMLOGSsoChangeSamlIdentityModeDetails?)
    -> DBXTeamLogSsoChangeSamlIdentityModeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeSamlIdentityModeDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeSamlIdentityModeDetailsToDBX(object: DBTEAMLOGSsoChangeSamlIdentityModeDetails) -> DBXTeamLogSsoChangeSamlIdentityModeDetails {
    DBXTeamLogSsoChangeSamlIdentityModeDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGSsoChangeSamlIdentityModeTypeToDBXOptional(object: DBTEAMLOGSsoChangeSamlIdentityModeType?) -> DBXTeamLogSsoChangeSamlIdentityModeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoChangeSamlIdentityModeTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoChangeSamlIdentityModeTypeToDBX(object: DBTEAMLOGSsoChangeSamlIdentityModeType) -> DBXTeamLogSsoChangeSamlIdentityModeType {
    DBXTeamLogSsoChangeSamlIdentityModeType(description_: object.description_)
}

func mapDBTEAMLOGSsoErrorDetailsToDBXOptional(object: DBTEAMLOGSsoErrorDetails?) -> DBXTeamLogSsoErrorDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoErrorDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoErrorDetailsToDBX(object: DBTEAMLOGSsoErrorDetails) -> DBXTeamLogSsoErrorDetails {
    DBXTeamLogSsoErrorDetails(errorDetails: mapDBTEAMLOGFailureDetailsLogInfoToDBX(object: object.errorDetails))
}

func mapDBTEAMLOGSsoErrorTypeToDBXOptional(object: DBTEAMLOGSsoErrorType?) -> DBXTeamLogSsoErrorType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoErrorTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoErrorTypeToDBX(object: DBTEAMLOGSsoErrorType) -> DBXTeamLogSsoErrorType {
    DBXTeamLogSsoErrorType(description_: object.description_)
}

func mapDBTEAMLOGSsoRemoveCertDetailsToDBXOptional(object: DBTEAMLOGSsoRemoveCertDetails?) -> DBXTeamLogSsoRemoveCertDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveCertDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveCertDetailsToDBX(object: DBTEAMLOGSsoRemoveCertDetails) -> DBXTeamLogSsoRemoveCertDetails {
    DBXTeamLogSsoRemoveCertDetails()
}

func mapDBTEAMLOGSsoRemoveCertTypeToDBXOptional(object: DBTEAMLOGSsoRemoveCertType?) -> DBXTeamLogSsoRemoveCertType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveCertTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveCertTypeToDBX(object: DBTEAMLOGSsoRemoveCertType) -> DBXTeamLogSsoRemoveCertType {
    DBXTeamLogSsoRemoveCertType(description_: object.description_)
}

func mapDBTEAMLOGSsoRemoveLoginUrlDetailsToDBXOptional(object: DBTEAMLOGSsoRemoveLoginUrlDetails?) -> DBXTeamLogSsoRemoveLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveLoginUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveLoginUrlDetailsToDBX(object: DBTEAMLOGSsoRemoveLoginUrlDetails) -> DBXTeamLogSsoRemoveLoginUrlDetails {
    DBXTeamLogSsoRemoveLoginUrlDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGSsoRemoveLoginUrlTypeToDBXOptional(object: DBTEAMLOGSsoRemoveLoginUrlType?) -> DBXTeamLogSsoRemoveLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveLoginUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveLoginUrlTypeToDBX(object: DBTEAMLOGSsoRemoveLoginUrlType) -> DBXTeamLogSsoRemoveLoginUrlType {
    DBXTeamLogSsoRemoveLoginUrlType(description_: object.description_)
}

func mapDBTEAMLOGSsoRemoveLogoutUrlDetailsToDBXOptional(object: DBTEAMLOGSsoRemoveLogoutUrlDetails?) -> DBXTeamLogSsoRemoveLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveLogoutUrlDetailsToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveLogoutUrlDetailsToDBX(object: DBTEAMLOGSsoRemoveLogoutUrlDetails) -> DBXTeamLogSsoRemoveLogoutUrlDetails {
    DBXTeamLogSsoRemoveLogoutUrlDetails(previousValue: object.previousValue)
}

func mapDBTEAMLOGSsoRemoveLogoutUrlTypeToDBXOptional(object: DBTEAMLOGSsoRemoveLogoutUrlType?) -> DBXTeamLogSsoRemoveLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGSsoRemoveLogoutUrlTypeToDBX(object: object)
}

func mapDBTEAMLOGSsoRemoveLogoutUrlTypeToDBX(object: DBTEAMLOGSsoRemoveLogoutUrlType) -> DBXTeamLogSsoRemoveLogoutUrlType {
    DBXTeamLogSsoRemoveLogoutUrlType(description_: object.description_)
}

func mapDBTEAMLOGStartedEnterpriseAdminSessionDetailsToDBXOptional(object: DBTEAMLOGStartedEnterpriseAdminSessionDetails?)
    -> DBXTeamLogStartedEnterpriseAdminSessionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGStartedEnterpriseAdminSessionDetailsToDBX(object: object)
}

func mapDBTEAMLOGStartedEnterpriseAdminSessionDetailsToDBX(object: DBTEAMLOGStartedEnterpriseAdminSessionDetails)
    -> DBXTeamLogStartedEnterpriseAdminSessionDetails {
    DBXTeamLogStartedEnterpriseAdminSessionDetails(federationExtraDetails: mapDBTEAMLOGFedExtraDetailsToDBX(object: object.federationExtraDetails))
}

func mapDBTEAMLOGStartedEnterpriseAdminSessionTypeToDBXOptional(object: DBTEAMLOGStartedEnterpriseAdminSessionType?)
    -> DBXTeamLogStartedEnterpriseAdminSessionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGStartedEnterpriseAdminSessionTypeToDBX(object: object)
}

func mapDBTEAMLOGStartedEnterpriseAdminSessionTypeToDBX(object: DBTEAMLOGStartedEnterpriseAdminSessionType) -> DBXTeamLogStartedEnterpriseAdminSessionType {
    DBXTeamLogStartedEnterpriseAdminSessionType(description_: object.description_)
}

func mapDBTEAMLOGTeamActivityCreateReportDetailsToDBXOptional(object: DBTEAMLOGTeamActivityCreateReportDetails?) -> DBXTeamLogTeamActivityCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamActivityCreateReportDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamActivityCreateReportDetailsToDBX(object: DBTEAMLOGTeamActivityCreateReportDetails) -> DBXTeamLogTeamActivityCreateReportDetails {
    DBXTeamLogTeamActivityCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBTEAMLOGTeamActivityCreateReportFailDetailsToDBXOptional(object: DBTEAMLOGTeamActivityCreateReportFailDetails?)
    -> DBXTeamLogTeamActivityCreateReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamActivityCreateReportFailDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamActivityCreateReportFailDetailsToDBX(object: DBTEAMLOGTeamActivityCreateReportFailDetails)
    -> DBXTeamLogTeamActivityCreateReportFailDetails {
    DBXTeamLogTeamActivityCreateReportFailDetails(failureReason: mapDBTEAMTeamReportFailureReasonToDBX(object: object.failureReason))
}

func mapDBTEAMLOGTeamActivityCreateReportFailTypeToDBXOptional(object: DBTEAMLOGTeamActivityCreateReportFailType?)
    -> DBXTeamLogTeamActivityCreateReportFailType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamActivityCreateReportFailTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamActivityCreateReportFailTypeToDBX(object: DBTEAMLOGTeamActivityCreateReportFailType) -> DBXTeamLogTeamActivityCreateReportFailType {
    DBXTeamLogTeamActivityCreateReportFailType(description_: object.description_)
}

func mapDBTEAMLOGTeamActivityCreateReportTypeToDBXOptional(object: DBTEAMLOGTeamActivityCreateReportType?) -> DBXTeamLogTeamActivityCreateReportType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamActivityCreateReportTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamActivityCreateReportTypeToDBX(object: DBTEAMLOGTeamActivityCreateReportType) -> DBXTeamLogTeamActivityCreateReportType {
    DBXTeamLogTeamActivityCreateReportType(description_: object.description_)
}

func mapDBTEAMLOGTeamBrandingPolicyToDBXOptional(object: DBTEAMLOGTeamBrandingPolicy?) -> DBXTeamLogTeamBrandingPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamBrandingPolicyToDBX(object: object)
}

func mapDBTEAMLOGTeamBrandingPolicyToDBX(object: DBTEAMLOGTeamBrandingPolicy) -> DBXTeamLogTeamBrandingPolicy {
    if object.isDisabled() {
        return DBXTeamLogTeamBrandingPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogTeamBrandingPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogTeamBrandingPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamBrandingPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGTeamBrandingPolicyChangedDetails?)
    -> DBXTeamLogTeamBrandingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamBrandingPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamBrandingPolicyChangedDetailsToDBX(object: DBTEAMLOGTeamBrandingPolicyChangedDetails) -> DBXTeamLogTeamBrandingPolicyChangedDetails {
    DBXTeamLogTeamBrandingPolicyChangedDetails(
        newValue: mapDBTEAMLOGTeamBrandingPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTeamBrandingPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGTeamBrandingPolicyChangedTypeToDBXOptional(object: DBTEAMLOGTeamBrandingPolicyChangedType?) -> DBXTeamLogTeamBrandingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamBrandingPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamBrandingPolicyChangedTypeToDBX(object: DBTEAMLOGTeamBrandingPolicyChangedType) -> DBXTeamLogTeamBrandingPolicyChangedType {
    DBXTeamLogTeamBrandingPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGTeamDetailsToDBXOptional(object: DBTEAMLOGTeamDetails?) -> DBXTeamLogTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamDetailsToDBX(object: DBTEAMLOGTeamDetails) -> DBXTeamLogTeamDetails {
    DBXTeamLogTeamDetails(team: object.team)
}

func mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetails?)
    -> DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetails)
    -> DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails {
    DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionType?)
    -> DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyCancelKeyDeletionTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionType)
    -> DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType {
    DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyCreateKeyDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyCreateKeyDetails?)
    -> DBXTeamLogTeamEncryptionKeyCreateKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyCreateKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyCreateKeyDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyCreateKeyDetails) -> DBXTeamLogTeamEncryptionKeyCreateKeyDetails {
    DBXTeamLogTeamEncryptionKeyCreateKeyDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyCreateKeyTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyCreateKeyType?) -> DBXTeamLogTeamEncryptionKeyCreateKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyCreateKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyCreateKeyTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyCreateKeyType) -> DBXTeamLogTeamEncryptionKeyCreateKeyType {
    DBXTeamLogTeamEncryptionKeyCreateKeyType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyDeleteKeyDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyDeleteKeyDetails?)
    -> DBXTeamLogTeamEncryptionKeyDeleteKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyDeleteKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyDeleteKeyDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyDeleteKeyDetails) -> DBXTeamLogTeamEncryptionKeyDeleteKeyDetails {
    DBXTeamLogTeamEncryptionKeyDeleteKeyDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyDeleteKeyTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyDeleteKeyType?) -> DBXTeamLogTeamEncryptionKeyDeleteKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyDeleteKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyDeleteKeyTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyDeleteKeyType) -> DBXTeamLogTeamEncryptionKeyDeleteKeyType {
    DBXTeamLogTeamEncryptionKeyDeleteKeyType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyDisableKeyDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyDisableKeyDetails?)
    -> DBXTeamLogTeamEncryptionKeyDisableKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyDisableKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyDisableKeyDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyDisableKeyDetails) -> DBXTeamLogTeamEncryptionKeyDisableKeyDetails {
    DBXTeamLogTeamEncryptionKeyDisableKeyDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyDisableKeyTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyDisableKeyType?) -> DBXTeamLogTeamEncryptionKeyDisableKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyDisableKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyDisableKeyTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyDisableKeyType) -> DBXTeamLogTeamEncryptionKeyDisableKeyType {
    DBXTeamLogTeamEncryptionKeyDisableKeyType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyEnableKeyDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyEnableKeyDetails?)
    -> DBXTeamLogTeamEncryptionKeyEnableKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyEnableKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyEnableKeyDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyEnableKeyDetails) -> DBXTeamLogTeamEncryptionKeyEnableKeyDetails {
    DBXTeamLogTeamEncryptionKeyEnableKeyDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyEnableKeyTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyEnableKeyType?) -> DBXTeamLogTeamEncryptionKeyEnableKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyEnableKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyEnableKeyTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyEnableKeyType) -> DBXTeamLogTeamEncryptionKeyEnableKeyType {
    DBXTeamLogTeamEncryptionKeyEnableKeyType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyRotateKeyDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyRotateKeyDetails?)
    -> DBXTeamLogTeamEncryptionKeyRotateKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyRotateKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyRotateKeyDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyRotateKeyDetails) -> DBXTeamLogTeamEncryptionKeyRotateKeyDetails {
    DBXTeamLogTeamEncryptionKeyRotateKeyDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyRotateKeyTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyRotateKeyType?) -> DBXTeamLogTeamEncryptionKeyRotateKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyRotateKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyRotateKeyTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyRotateKeyType) -> DBXTeamLogTeamEncryptionKeyRotateKeyType {
    DBXTeamLogTeamEncryptionKeyRotateKeyType(description_: object.description_)
}

func mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetailsToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetails?)
    -> DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetailsToDBX(object: DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetails)
    -> DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails {
    DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails()
}

func mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionTypeToDBXOptional(object: DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionType?)
    -> DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionTypeToDBX(object: DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionType)
    -> DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType {
    DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType(description_: object.description_)
}

func mapDBTEAMLOGTeamEventToDBXOptional(object: DBTEAMLOGTeamEvent?) -> DBXTeamLogTeamEvent? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamEventToDBX(object: object)
}

func mapDBTEAMLOGTeamEventToDBX(object: DBTEAMLOGTeamEvent) -> DBXTeamLogTeamEvent {
    DBXTeamLogTeamEvent(
        timestamp_: object.timestamp,
        eventCategory: mapDBTEAMLOGEventCategoryToDBX(object: object.eventCategory),
        eventType: mapDBTEAMLOGEventTypeToDBX(object: object.eventType),
        details: mapDBTEAMLOGEventDetailsToDBX(object: object.details),
        actor: mapDBTEAMLOGActorLogInfoToDBXOptional(object: object.actor),
        origin: mapDBTEAMLOGOriginLogInfoToDBXOptional(object: object.origin),
        involveNonTeamMember: object.involveNonTeamMember,
        context: mapDBTEAMLOGContextLogInfoToDBXOptional(object: object.context),
        participants: object.participants?.compactMap { mapDBTEAMLOGParticipantLogInfoToDBX(object: $0) },
        assets: object.assets?.compactMap { mapDBTEAMLOGAssetLogInfoToDBX(object: $0) }
    )
}

func mapDBTEAMLOGTeamExtensionsPolicyToDBXOptional(object: DBTEAMLOGTeamExtensionsPolicy?) -> DBXTeamLogTeamExtensionsPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamExtensionsPolicyToDBX(object: object)
}

func mapDBTEAMLOGTeamExtensionsPolicyToDBX(object: DBTEAMLOGTeamExtensionsPolicy) -> DBXTeamLogTeamExtensionsPolicy {
    if object.isDisabled() {
        return DBXTeamLogTeamExtensionsPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogTeamExtensionsPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogTeamExtensionsPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamExtensionsPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGTeamExtensionsPolicyChangedDetails?)
    -> DBXTeamLogTeamExtensionsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamExtensionsPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamExtensionsPolicyChangedDetailsToDBX(object: DBTEAMLOGTeamExtensionsPolicyChangedDetails) -> DBXTeamLogTeamExtensionsPolicyChangedDetails {
    DBXTeamLogTeamExtensionsPolicyChangedDetails(
        newValue: mapDBTEAMLOGTeamExtensionsPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTeamExtensionsPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGTeamExtensionsPolicyChangedTypeToDBXOptional(object: DBTEAMLOGTeamExtensionsPolicyChangedType?) -> DBXTeamLogTeamExtensionsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamExtensionsPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamExtensionsPolicyChangedTypeToDBX(object: DBTEAMLOGTeamExtensionsPolicyChangedType) -> DBXTeamLogTeamExtensionsPolicyChangedType {
    DBXTeamLogTeamExtensionsPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGTeamFolderChangeStatusDetailsToDBXOptional(object: DBTEAMLOGTeamFolderChangeStatusDetails?) -> DBXTeamLogTeamFolderChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderChangeStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderChangeStatusDetailsToDBX(object: DBTEAMLOGTeamFolderChangeStatusDetails) -> DBXTeamLogTeamFolderChangeStatusDetails {
    DBXTeamLogTeamFolderChangeStatusDetails(
        newValue: mapDBTEAMTeamFolderStatusToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMTeamFolderStatusToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGTeamFolderChangeStatusTypeToDBXOptional(object: DBTEAMLOGTeamFolderChangeStatusType?) -> DBXTeamLogTeamFolderChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderChangeStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderChangeStatusTypeToDBX(object: DBTEAMLOGTeamFolderChangeStatusType) -> DBXTeamLogTeamFolderChangeStatusType {
    DBXTeamLogTeamFolderChangeStatusType(description_: object.description_)
}

func mapDBTEAMLOGTeamFolderCreateDetailsToDBXOptional(object: DBTEAMLOGTeamFolderCreateDetails?) -> DBXTeamLogTeamFolderCreateDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderCreateDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderCreateDetailsToDBX(object: DBTEAMLOGTeamFolderCreateDetails) -> DBXTeamLogTeamFolderCreateDetails {
    DBXTeamLogTeamFolderCreateDetails()
}

func mapDBTEAMLOGTeamFolderCreateTypeToDBXOptional(object: DBTEAMLOGTeamFolderCreateType?) -> DBXTeamLogTeamFolderCreateType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderCreateTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderCreateTypeToDBX(object: DBTEAMLOGTeamFolderCreateType) -> DBXTeamLogTeamFolderCreateType {
    DBXTeamLogTeamFolderCreateType(description_: object.description_)
}

func mapDBTEAMLOGTeamFolderDowngradeDetailsToDBXOptional(object: DBTEAMLOGTeamFolderDowngradeDetails?) -> DBXTeamLogTeamFolderDowngradeDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderDowngradeDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderDowngradeDetailsToDBX(object: DBTEAMLOGTeamFolderDowngradeDetails) -> DBXTeamLogTeamFolderDowngradeDetails {
    DBXTeamLogTeamFolderDowngradeDetails(targetAssetIndex: object.targetAssetIndex)
}

func mapDBTEAMLOGTeamFolderDowngradeTypeToDBXOptional(object: DBTEAMLOGTeamFolderDowngradeType?) -> DBXTeamLogTeamFolderDowngradeType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderDowngradeTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderDowngradeTypeToDBX(object: DBTEAMLOGTeamFolderDowngradeType) -> DBXTeamLogTeamFolderDowngradeType {
    DBXTeamLogTeamFolderDowngradeType(description_: object.description_)
}

func mapDBTEAMLOGTeamFolderPermanentlyDeleteDetailsToDBXOptional(object: DBTEAMLOGTeamFolderPermanentlyDeleteDetails?)
    -> DBXTeamLogTeamFolderPermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderPermanentlyDeleteDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderPermanentlyDeleteDetailsToDBX(object: DBTEAMLOGTeamFolderPermanentlyDeleteDetails) -> DBXTeamLogTeamFolderPermanentlyDeleteDetails {
    DBXTeamLogTeamFolderPermanentlyDeleteDetails()
}

func mapDBTEAMLOGTeamFolderPermanentlyDeleteTypeToDBXOptional(object: DBTEAMLOGTeamFolderPermanentlyDeleteType?) -> DBXTeamLogTeamFolderPermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderPermanentlyDeleteTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderPermanentlyDeleteTypeToDBX(object: DBTEAMLOGTeamFolderPermanentlyDeleteType) -> DBXTeamLogTeamFolderPermanentlyDeleteType {
    DBXTeamLogTeamFolderPermanentlyDeleteType(description_: object.description_)
}

func mapDBTEAMLOGTeamFolderRenameDetailsToDBXOptional(object: DBTEAMLOGTeamFolderRenameDetails?) -> DBXTeamLogTeamFolderRenameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderRenameDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderRenameDetailsToDBX(object: DBTEAMLOGTeamFolderRenameDetails) -> DBXTeamLogTeamFolderRenameDetails {
    DBXTeamLogTeamFolderRenameDetails(previousFolderName: object.previousFolderName, newFolderName: object.dNewFolderName)
}

func mapDBTEAMLOGTeamFolderRenameTypeToDBXOptional(object: DBTEAMLOGTeamFolderRenameType?) -> DBXTeamLogTeamFolderRenameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamFolderRenameTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamFolderRenameTypeToDBX(object: DBTEAMLOGTeamFolderRenameType) -> DBXTeamLogTeamFolderRenameType {
    DBXTeamLogTeamFolderRenameType(description_: object.description_)
}

func mapDBTEAMLOGTeamInviteDetailsToDBXOptional(object: DBTEAMLOGTeamInviteDetails?) -> DBXTeamLogTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamInviteDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamInviteDetailsToDBX(object: DBTEAMLOGTeamInviteDetails) -> DBXTeamLogTeamInviteDetails {
    DBXTeamLogTeamInviteDetails(
        inviteMethod: mapDBTEAMLOGInviteMethodToDBX(object: object.inviteMethod),
        additionalLicensePurchase: object.additionalLicensePurchase
    )
}

func mapDBTEAMLOGTeamLinkedAppLogInfoToDBXOptional(object: DBTEAMLOGTeamLinkedAppLogInfo?) -> DBXTeamLogTeamLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamLinkedAppLogInfoToDBX(object: object)
}

func mapDBTEAMLOGTeamLinkedAppLogInfoToDBX(object: DBTEAMLOGTeamLinkedAppLogInfo) -> DBXTeamLogTeamLinkedAppLogInfo {
    DBXTeamLogTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBTEAMLOGTeamLogInfoToDBXOptional(object: DBTEAMLOGTeamLogInfo?) -> DBXTeamLogTeamLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamLogInfoToDBX(object: object)
}

func mapDBTEAMLOGTeamLogInfoToDBX(object: DBTEAMLOGTeamLogInfo) -> DBXTeamLogTeamLogInfo {
    DBXTeamLogTeamLogInfo(displayName: object.displayName)
}

func mapDBTEAMLOGTeamMemberLogInfoToDBXOptional(object: DBTEAMLOGTeamMemberLogInfo?) -> DBXTeamLogTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMemberLogInfoToDBX(object: object)
}

func mapDBTEAMLOGTeamMemberLogInfoToDBX(object: DBTEAMLOGTeamMemberLogInfo) -> DBXTeamLogTeamMemberLogInfo {
    DBXTeamLogTeamMemberLogInfo(
        accountId: object.accountId,
        displayName: object.displayName,
        email: object.email,
        teamMemberId: object.teamMemberId,
        memberExternalId: object.memberExternalId,
        team: mapDBTEAMLOGTeamLogInfoToDBXOptional(object: object.team)
    )
}

func mapDBTEAMLOGTeamMembershipTypeToDBXOptional(object: DBTEAMLOGTeamMembershipType?) -> DBXTeamLogTeamMembershipType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMembershipTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMembershipTypeToDBX(object: DBTEAMLOGTeamMembershipType) -> DBXTeamLogTeamMembershipType {
    if object.isFree() {
        return DBXTeamLogTeamMembershipTypeFree()
    }
    if object.isFull() {
        return DBXTeamLogTeamMembershipTypeFull()
    }
    if object.isGuest() {
        return DBXTeamLogTeamMembershipTypeGuest()
    }
    if object.isOther() {
        return DBXTeamLogTeamMembershipTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamMergeFromDetailsToDBXOptional(object: DBTEAMLOGTeamMergeFromDetails?) -> DBXTeamLogTeamMergeFromDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeFromDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeFromDetailsToDBX(object: DBTEAMLOGTeamMergeFromDetails) -> DBXTeamLogTeamMergeFromDetails {
    DBXTeamLogTeamMergeFromDetails(teamName: object.teamName)
}

func mapDBTEAMLOGTeamMergeFromTypeToDBXOptional(object: DBTEAMLOGTeamMergeFromType?) -> DBXTeamLogTeamMergeFromType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeFromTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeFromTypeToDBX(object: DBTEAMLOGTeamMergeFromType) -> DBXTeamLogTeamMergeFromType {
    DBXTeamLogTeamMergeFromType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedDetails?) -> DBXTeamLogTeamMergeRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedDetailsToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedDetails) -> DBXTeamLogTeamMergeRequestAcceptedDetails {
    DBXTeamLogTeamMergeRequestAcceptedDetails(requestAcceptedDetails: mapDBTEAMLOGTeamMergeRequestAcceptedExtraDetailsToDBX(
        object: object
            .requestAcceptedDetails
    ))
}

func mapDBTEAMLOGTeamMergeRequestAcceptedExtraDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedExtraDetails?)
    -> DBXTeamLogTeamMergeRequestAcceptedExtraDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedExtraDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedExtraDetailsToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedExtraDetails)
    -> DBXTeamLogTeamMergeRequestAcceptedExtraDetails {
    if object.isPrimaryTeam() {
        let primaryTeam = mapDBTEAMLOGPrimaryTeamRequestAcceptedDetailsToDBX(object: object.primaryTeam)
        return DBXTeamLogTeamMergeRequestAcceptedExtraDetails.factory(swift: .primaryTeam(primaryTeam.swift))
    }
    if object.isSecondaryTeam() {
        let secondaryTeam = mapDBTEAMLOGSecondaryTeamRequestAcceptedDetailsToDBX(object: object.secondaryTeam)
        return DBXTeamLogTeamMergeRequestAcceptedExtraDetails.factory(swift: .secondaryTeam(secondaryTeam.swift))
    }
    if object.isOther() {
        return DBXTeamLogTeamMergeRequestAcceptedExtraDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails(primaryTeam: object.primaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestAcceptedType?) -> DBXTeamLogTeamMergeRequestAcceptedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAcceptedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAcceptedTypeToDBX(object: DBTEAMLOGTeamMergeRequestAcceptedType) -> DBXTeamLogTeamMergeRequestAcceptedType {
    DBXTeamLogTeamMergeRequestAcceptedType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestAutoCanceledDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestAutoCanceledDetails?)
    -> DBXTeamLogTeamMergeRequestAutoCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAutoCanceledDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAutoCanceledDetailsToDBX(object: DBTEAMLOGTeamMergeRequestAutoCanceledDetails)
    -> DBXTeamLogTeamMergeRequestAutoCanceledDetails {
    DBXTeamLogTeamMergeRequestAutoCanceledDetails(details: object.details)
}

func mapDBTEAMLOGTeamMergeRequestAutoCanceledTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestAutoCanceledType?)
    -> DBXTeamLogTeamMergeRequestAutoCanceledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestAutoCanceledTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestAutoCanceledTypeToDBX(object: DBTEAMLOGTeamMergeRequestAutoCanceledType) -> DBXTeamLogTeamMergeRequestAutoCanceledType {
    DBXTeamLogTeamMergeRequestAutoCanceledType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestCanceledDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledDetails?) -> DBXTeamLogTeamMergeRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledDetailsToDBX(object: DBTEAMLOGTeamMergeRequestCanceledDetails) -> DBXTeamLogTeamMergeRequestCanceledDetails {
    DBXTeamLogTeamMergeRequestCanceledDetails(requestCanceledDetails: mapDBTEAMLOGTeamMergeRequestCanceledExtraDetailsToDBX(
        object: object
            .requestCanceledDetails
    ))
}

func mapDBTEAMLOGTeamMergeRequestCanceledExtraDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledExtraDetails?)
    -> DBXTeamLogTeamMergeRequestCanceledExtraDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledExtraDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledExtraDetailsToDBX(object: DBTEAMLOGTeamMergeRequestCanceledExtraDetails)
    -> DBXTeamLogTeamMergeRequestCanceledExtraDetails {
    if object.isPrimaryTeam() {
        let primaryTeam = mapDBTEAMLOGPrimaryTeamRequestCanceledDetailsToDBX(object: object.primaryTeam)
        return DBXTeamLogTeamMergeRequestCanceledExtraDetails.factory(swift: .primaryTeam(primaryTeam.swift))
    }
    if object.isSecondaryTeam() {
        let secondaryTeam = mapDBTEAMLOGSecondaryTeamRequestCanceledDetailsToDBX(object: object.secondaryTeam)
        return DBXTeamLogTeamMergeRequestCanceledExtraDetails.factory(swift: .secondaryTeam(secondaryTeam.swift))
    }
    if object.isOther() {
        return DBXTeamLogTeamMergeRequestCanceledExtraDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails(sentTo: object.sentTo, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestCanceledTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestCanceledType?) -> DBXTeamLogTeamMergeRequestCanceledType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestCanceledTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestCanceledTypeToDBX(object: DBTEAMLOGTeamMergeRequestCanceledType) -> DBXTeamLogTeamMergeRequestCanceledType {
    DBXTeamLogTeamMergeRequestCanceledType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestExpiredDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredDetails?) -> DBXTeamLogTeamMergeRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredDetailsToDBX(object: DBTEAMLOGTeamMergeRequestExpiredDetails) -> DBXTeamLogTeamMergeRequestExpiredDetails {
    DBXTeamLogTeamMergeRequestExpiredDetails(requestExpiredDetails: mapDBTEAMLOGTeamMergeRequestExpiredExtraDetailsToDBX(object: object.requestExpiredDetails))
}

func mapDBTEAMLOGTeamMergeRequestExpiredExtraDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredExtraDetails?)
    -> DBXTeamLogTeamMergeRequestExpiredExtraDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredExtraDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredExtraDetailsToDBX(object: DBTEAMLOGTeamMergeRequestExpiredExtraDetails)
    -> DBXTeamLogTeamMergeRequestExpiredExtraDetails {
    if object.isPrimaryTeam() {
        let primaryTeam = mapDBTEAMLOGPrimaryTeamRequestExpiredDetailsToDBX(object: object.primaryTeam)
        return DBXTeamLogTeamMergeRequestExpiredExtraDetails.factory(swift: .primaryTeam(primaryTeam.swift))
    }
    if object.isSecondaryTeam() {
        let secondaryTeam = mapDBTEAMLOGSecondaryTeamRequestExpiredDetailsToDBX(object: object.secondaryTeam)
        return DBXTeamLogTeamMergeRequestExpiredExtraDetails.factory(swift: .secondaryTeam(secondaryTeam.swift))
    }
    if object.isOther() {
        return DBXTeamLogTeamMergeRequestExpiredExtraDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestExpiredTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestExpiredType?) -> DBXTeamLogTeamMergeRequestExpiredType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestExpiredTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestExpiredTypeToDBX(object: DBTEAMLOGTeamMergeRequestExpiredType) -> DBXTeamLogTeamMergeRequestExpiredType {
    DBXTeamLogTeamMergeRequestExpiredType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails(sentBy: object.sentBy)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestReminderDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderDetails?) -> DBXTeamLogTeamMergeRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderDetailsToDBX(object: DBTEAMLOGTeamMergeRequestReminderDetails) -> DBXTeamLogTeamMergeRequestReminderDetails {
    DBXTeamLogTeamMergeRequestReminderDetails(requestReminderDetails: mapDBTEAMLOGTeamMergeRequestReminderExtraDetailsToDBX(
        object: object
            .requestReminderDetails
    ))
}

func mapDBTEAMLOGTeamMergeRequestReminderExtraDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderExtraDetails?)
    -> DBXTeamLogTeamMergeRequestReminderExtraDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderExtraDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderExtraDetailsToDBX(object: DBTEAMLOGTeamMergeRequestReminderExtraDetails)
    -> DBXTeamLogTeamMergeRequestReminderExtraDetails {
    if object.isPrimaryTeam() {
        let primaryTeam = mapDBTEAMLOGPrimaryTeamRequestReminderDetailsToDBX(object: object.primaryTeam)
        return DBXTeamLogTeamMergeRequestReminderExtraDetails.factory(swift: .primaryTeam(primaryTeam.swift))
    }
    if object.isSecondaryTeam() {
        let secondaryTeam = mapDBTEAMLOGSecondaryTeamRequestReminderDetailsToDBX(object: object.secondaryTeam)
        return DBXTeamLogTeamMergeRequestReminderExtraDetails.factory(swift: .secondaryTeam(secondaryTeam.swift))
    }
    if object.isOther() {
        return DBXTeamLogTeamMergeRequestReminderExtraDetailsOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestReminderTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestReminderType?) -> DBXTeamLogTeamMergeRequestReminderType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestReminderTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestReminderTypeToDBX(object: DBTEAMLOGTeamMergeRequestReminderType) -> DBXTeamLogTeamMergeRequestReminderType {
    DBXTeamLogTeamMergeRequestReminderType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestRevokedDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestRevokedDetails?) -> DBXTeamLogTeamMergeRequestRevokedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRevokedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRevokedDetailsToDBX(object: DBTEAMLOGTeamMergeRequestRevokedDetails) -> DBXTeamLogTeamMergeRequestRevokedDetails {
    DBXTeamLogTeamMergeRequestRevokedDetails(team: object.team)
}

func mapDBTEAMLOGTeamMergeRequestRevokedTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestRevokedType?) -> DBXTeamLogTeamMergeRequestRevokedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestRevokedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestRevokedTypeToDBX(object: DBTEAMLOGTeamMergeRequestRevokedType) -> DBXTeamLogTeamMergeRequestRevokedType {
    DBXTeamLogTeamMergeRequestRevokedType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails {
    DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamType?)
    -> DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamType)
    -> DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType {
    DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsToDBXOptional(object: DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails?)
    -> DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsToDBX(object: DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails)
    -> DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails {
    DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamTypeToDBXOptional(object: DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamType?)
    -> DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamTypeToDBX(object: DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamType)
    -> DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType {
    DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType(description_: object.description_)
}

func mapDBTEAMLOGTeamMergeToDetailsToDBXOptional(object: DBTEAMLOGTeamMergeToDetails?) -> DBXTeamLogTeamMergeToDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeToDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeToDetailsToDBX(object: DBTEAMLOGTeamMergeToDetails) -> DBXTeamLogTeamMergeToDetails {
    DBXTeamLogTeamMergeToDetails(teamName: object.teamName)
}

func mapDBTEAMLOGTeamMergeToTypeToDBXOptional(object: DBTEAMLOGTeamMergeToType?) -> DBXTeamLogTeamMergeToType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamMergeToTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamMergeToTypeToDBX(object: DBTEAMLOGTeamMergeToType) -> DBXTeamLogTeamMergeToType {
    DBXTeamLogTeamMergeToType(description_: object.description_)
}

func mapDBTEAMLOGTeamNameToDBXOptional(object: DBTEAMLOGTeamName?) -> DBXTeamLogTeamName? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamNameToDBX(object: object)
}

func mapDBTEAMLOGTeamNameToDBX(object: DBTEAMLOGTeamName) -> DBXTeamLogTeamName {
    DBXTeamLogTeamName(teamDisplayName: object.teamDisplayName, teamLegalName: object.teamLegalName)
}

func mapDBTEAMLOGTeamProfileAddBackgroundDetailsToDBXOptional(object: DBTEAMLOGTeamProfileAddBackgroundDetails?) -> DBXTeamLogTeamProfileAddBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileAddBackgroundDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileAddBackgroundDetailsToDBX(object: DBTEAMLOGTeamProfileAddBackgroundDetails) -> DBXTeamLogTeamProfileAddBackgroundDetails {
    DBXTeamLogTeamProfileAddBackgroundDetails()
}

func mapDBTEAMLOGTeamProfileAddBackgroundTypeToDBXOptional(object: DBTEAMLOGTeamProfileAddBackgroundType?) -> DBXTeamLogTeamProfileAddBackgroundType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileAddBackgroundTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileAddBackgroundTypeToDBX(object: DBTEAMLOGTeamProfileAddBackgroundType) -> DBXTeamLogTeamProfileAddBackgroundType {
    DBXTeamLogTeamProfileAddBackgroundType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileAddLogoDetailsToDBXOptional(object: DBTEAMLOGTeamProfileAddLogoDetails?) -> DBXTeamLogTeamProfileAddLogoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileAddLogoDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileAddLogoDetailsToDBX(object: DBTEAMLOGTeamProfileAddLogoDetails) -> DBXTeamLogTeamProfileAddLogoDetails {
    DBXTeamLogTeamProfileAddLogoDetails()
}

func mapDBTEAMLOGTeamProfileAddLogoTypeToDBXOptional(object: DBTEAMLOGTeamProfileAddLogoType?) -> DBXTeamLogTeamProfileAddLogoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileAddLogoTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileAddLogoTypeToDBX(object: DBTEAMLOGTeamProfileAddLogoType) -> DBXTeamLogTeamProfileAddLogoType {
    DBXTeamLogTeamProfileAddLogoType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileChangeBackgroundDetailsToDBXOptional(object: DBTEAMLOGTeamProfileChangeBackgroundDetails?)
    -> DBXTeamLogTeamProfileChangeBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeBackgroundDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeBackgroundDetailsToDBX(object: DBTEAMLOGTeamProfileChangeBackgroundDetails) -> DBXTeamLogTeamProfileChangeBackgroundDetails {
    DBXTeamLogTeamProfileChangeBackgroundDetails()
}

func mapDBTEAMLOGTeamProfileChangeBackgroundTypeToDBXOptional(object: DBTEAMLOGTeamProfileChangeBackgroundType?) -> DBXTeamLogTeamProfileChangeBackgroundType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeBackgroundTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeBackgroundTypeToDBX(object: DBTEAMLOGTeamProfileChangeBackgroundType) -> DBXTeamLogTeamProfileChangeBackgroundType {
    DBXTeamLogTeamProfileChangeBackgroundType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileChangeDefaultLanguageDetailsToDBXOptional(object: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails?)
    -> DBXTeamLogTeamProfileChangeDefaultLanguageDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeDefaultLanguageDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeDefaultLanguageDetailsToDBX(object: DBTEAMLOGTeamProfileChangeDefaultLanguageDetails)
    -> DBXTeamLogTeamProfileChangeDefaultLanguageDetails {
    DBXTeamLogTeamProfileChangeDefaultLanguageDetails(newValue: object.dNewValue, previousValue: object.previousValue)
}

func mapDBTEAMLOGTeamProfileChangeDefaultLanguageTypeToDBXOptional(object: DBTEAMLOGTeamProfileChangeDefaultLanguageType?)
    -> DBXTeamLogTeamProfileChangeDefaultLanguageType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeDefaultLanguageTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeDefaultLanguageTypeToDBX(object: DBTEAMLOGTeamProfileChangeDefaultLanguageType)
    -> DBXTeamLogTeamProfileChangeDefaultLanguageType {
    DBXTeamLogTeamProfileChangeDefaultLanguageType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileChangeLogoDetailsToDBXOptional(object: DBTEAMLOGTeamProfileChangeLogoDetails?) -> DBXTeamLogTeamProfileChangeLogoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeLogoDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeLogoDetailsToDBX(object: DBTEAMLOGTeamProfileChangeLogoDetails) -> DBXTeamLogTeamProfileChangeLogoDetails {
    DBXTeamLogTeamProfileChangeLogoDetails()
}

func mapDBTEAMLOGTeamProfileChangeLogoTypeToDBXOptional(object: DBTEAMLOGTeamProfileChangeLogoType?) -> DBXTeamLogTeamProfileChangeLogoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeLogoTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeLogoTypeToDBX(object: DBTEAMLOGTeamProfileChangeLogoType) -> DBXTeamLogTeamProfileChangeLogoType {
    DBXTeamLogTeamProfileChangeLogoType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileChangeNameDetailsToDBXOptional(object: DBTEAMLOGTeamProfileChangeNameDetails?) -> DBXTeamLogTeamProfileChangeNameDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeNameDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeNameDetailsToDBX(object: DBTEAMLOGTeamProfileChangeNameDetails) -> DBXTeamLogTeamProfileChangeNameDetails {
    DBXTeamLogTeamProfileChangeNameDetails(
        newValue: mapDBTEAMLOGTeamNameToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTeamNameToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGTeamProfileChangeNameTypeToDBXOptional(object: DBTEAMLOGTeamProfileChangeNameType?) -> DBXTeamLogTeamProfileChangeNameType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileChangeNameTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileChangeNameTypeToDBX(object: DBTEAMLOGTeamProfileChangeNameType) -> DBXTeamLogTeamProfileChangeNameType {
    DBXTeamLogTeamProfileChangeNameType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileRemoveBackgroundDetailsToDBXOptional(object: DBTEAMLOGTeamProfileRemoveBackgroundDetails?)
    -> DBXTeamLogTeamProfileRemoveBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileRemoveBackgroundDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileRemoveBackgroundDetailsToDBX(object: DBTEAMLOGTeamProfileRemoveBackgroundDetails) -> DBXTeamLogTeamProfileRemoveBackgroundDetails {
    DBXTeamLogTeamProfileRemoveBackgroundDetails()
}

func mapDBTEAMLOGTeamProfileRemoveBackgroundTypeToDBXOptional(object: DBTEAMLOGTeamProfileRemoveBackgroundType?) -> DBXTeamLogTeamProfileRemoveBackgroundType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileRemoveBackgroundTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileRemoveBackgroundTypeToDBX(object: DBTEAMLOGTeamProfileRemoveBackgroundType) -> DBXTeamLogTeamProfileRemoveBackgroundType {
    DBXTeamLogTeamProfileRemoveBackgroundType(description_: object.description_)
}

func mapDBTEAMLOGTeamProfileRemoveLogoDetailsToDBXOptional(object: DBTEAMLOGTeamProfileRemoveLogoDetails?) -> DBXTeamLogTeamProfileRemoveLogoDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileRemoveLogoDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileRemoveLogoDetailsToDBX(object: DBTEAMLOGTeamProfileRemoveLogoDetails) -> DBXTeamLogTeamProfileRemoveLogoDetails {
    DBXTeamLogTeamProfileRemoveLogoDetails()
}

func mapDBTEAMLOGTeamProfileRemoveLogoTypeToDBXOptional(object: DBTEAMLOGTeamProfileRemoveLogoType?) -> DBXTeamLogTeamProfileRemoveLogoType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamProfileRemoveLogoTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamProfileRemoveLogoTypeToDBX(object: DBTEAMLOGTeamProfileRemoveLogoType) -> DBXTeamLogTeamProfileRemoveLogoType {
    DBXTeamLogTeamProfileRemoveLogoType(description_: object.description_)
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyToDBXOptional(object: DBTEAMLOGTeamSelectiveSyncPolicy?) -> DBXTeamLogTeamSelectiveSyncPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSelectiveSyncPolicyToDBX(object: object)
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyToDBX(object: DBTEAMLOGTeamSelectiveSyncPolicy) -> DBXTeamLogTeamSelectiveSyncPolicy {
    if object.isDisabled() {
        return DBXTeamLogTeamSelectiveSyncPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogTeamSelectiveSyncPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogTeamSelectiveSyncPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails?)
    -> DBXTeamLogTeamSelectiveSyncPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsToDBX(object: DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails)
    -> DBXTeamLogTeamSelectiveSyncPolicyChangedDetails {
    DBXTeamLogTeamSelectiveSyncPolicyChangedDetails(
        newValue: mapDBTEAMLOGTeamSelectiveSyncPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTeamSelectiveSyncPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyChangedTypeToDBXOptional(object: DBTEAMLOGTeamSelectiveSyncPolicyChangedType?)
    -> DBXTeamLogTeamSelectiveSyncPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSelectiveSyncPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamSelectiveSyncPolicyChangedTypeToDBX(object: DBTEAMLOGTeamSelectiveSyncPolicyChangedType) -> DBXTeamLogTeamSelectiveSyncPolicyChangedType {
    DBXTeamLogTeamSelectiveSyncPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsToDBXOptional(object: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails?)
    -> DBXTeamLogTeamSelectiveSyncSettingsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsToDBX(object: DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails)
    -> DBXTeamLogTeamSelectiveSyncSettingsChangedDetails {
    DBXTeamLogTeamSelectiveSyncSettingsChangedDetails(
        previousValue: mapDBFILESSyncSettingToDBX(object: object.previousValue),
        newValue: mapDBFILESSyncSettingToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGTeamSelectiveSyncSettingsChangedTypeToDBXOptional(object: DBTEAMLOGTeamSelectiveSyncSettingsChangedType?)
    -> DBXTeamLogTeamSelectiveSyncSettingsChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSelectiveSyncSettingsChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamSelectiveSyncSettingsChangedTypeToDBX(object: DBTEAMLOGTeamSelectiveSyncSettingsChangedType)
    -> DBXTeamLogTeamSelectiveSyncSettingsChangedType {
    DBXTeamLogTeamSelectiveSyncSettingsChangedType(description_: object.description_)
}

func mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsToDBXOptional(object: DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails?)
    -> DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsToDBX(object: DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails)
    -> DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails {
    DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails(
        addedWhitelistSubjects: object.addedWhitelistSubjects,
        removedWhitelistSubjects: object.removedWhitelistSubjects
    )
}

func mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedTypeToDBXOptional(object: DBTEAMLOGTeamSharingWhitelistSubjectsChangedType?)
    -> DBXTeamLogTeamSharingWhitelistSubjectsChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGTeamSharingWhitelistSubjectsChangedTypeToDBX(object: DBTEAMLOGTeamSharingWhitelistSubjectsChangedType)
    -> DBXTeamLogTeamSharingWhitelistSubjectsChangedType {
    DBXTeamLogTeamSharingWhitelistSubjectsChangedType(description_: object.description_)
}

func mapDBTEAMLOGTfaAddBackupPhoneDetailsToDBXOptional(object: DBTEAMLOGTfaAddBackupPhoneDetails?) -> DBXTeamLogTfaAddBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddBackupPhoneDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaAddBackupPhoneDetailsToDBX(object: DBTEAMLOGTfaAddBackupPhoneDetails) -> DBXTeamLogTfaAddBackupPhoneDetails {
    DBXTeamLogTfaAddBackupPhoneDetails()
}

func mapDBTEAMLOGTfaAddBackupPhoneTypeToDBXOptional(object: DBTEAMLOGTfaAddBackupPhoneType?) -> DBXTeamLogTfaAddBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddBackupPhoneTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaAddBackupPhoneTypeToDBX(object: DBTEAMLOGTfaAddBackupPhoneType) -> DBXTeamLogTfaAddBackupPhoneType {
    DBXTeamLogTfaAddBackupPhoneType(description_: object.description_)
}

func mapDBTEAMLOGTfaAddExceptionDetailsToDBXOptional(object: DBTEAMLOGTfaAddExceptionDetails?) -> DBXTeamLogTfaAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaAddExceptionDetailsToDBX(object: DBTEAMLOGTfaAddExceptionDetails) -> DBXTeamLogTfaAddExceptionDetails {
    DBXTeamLogTfaAddExceptionDetails()
}

func mapDBTEAMLOGTfaAddExceptionTypeToDBXOptional(object: DBTEAMLOGTfaAddExceptionType?) -> DBXTeamLogTfaAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaAddExceptionTypeToDBX(object: DBTEAMLOGTfaAddExceptionType) -> DBXTeamLogTfaAddExceptionType {
    DBXTeamLogTfaAddExceptionType(description_: object.description_)
}

func mapDBTEAMLOGTfaAddSecurityKeyDetailsToDBXOptional(object: DBTEAMLOGTfaAddSecurityKeyDetails?) -> DBXTeamLogTfaAddSecurityKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddSecurityKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaAddSecurityKeyDetailsToDBX(object: DBTEAMLOGTfaAddSecurityKeyDetails) -> DBXTeamLogTfaAddSecurityKeyDetails {
    DBXTeamLogTfaAddSecurityKeyDetails()
}

func mapDBTEAMLOGTfaAddSecurityKeyTypeToDBXOptional(object: DBTEAMLOGTfaAddSecurityKeyType?) -> DBXTeamLogTfaAddSecurityKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaAddSecurityKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaAddSecurityKeyTypeToDBX(object: DBTEAMLOGTfaAddSecurityKeyType) -> DBXTeamLogTfaAddSecurityKeyType {
    DBXTeamLogTfaAddSecurityKeyType(description_: object.description_)
}

func mapDBTEAMLOGTfaChangeBackupPhoneDetailsToDBXOptional(object: DBTEAMLOGTfaChangeBackupPhoneDetails?) -> DBXTeamLogTfaChangeBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangeBackupPhoneDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaChangeBackupPhoneDetailsToDBX(object: DBTEAMLOGTfaChangeBackupPhoneDetails) -> DBXTeamLogTfaChangeBackupPhoneDetails {
    DBXTeamLogTfaChangeBackupPhoneDetails()
}

func mapDBTEAMLOGTfaChangeBackupPhoneTypeToDBXOptional(object: DBTEAMLOGTfaChangeBackupPhoneType?) -> DBXTeamLogTfaChangeBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangeBackupPhoneTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaChangeBackupPhoneTypeToDBX(object: DBTEAMLOGTfaChangeBackupPhoneType) -> DBXTeamLogTfaChangeBackupPhoneType {
    DBXTeamLogTfaChangeBackupPhoneType(description_: object.description_)
}

func mapDBTEAMLOGTfaChangePolicyDetailsToDBXOptional(object: DBTEAMLOGTfaChangePolicyDetails?) -> DBXTeamLogTfaChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaChangePolicyDetailsToDBX(object: DBTEAMLOGTfaChangePolicyDetails) -> DBXTeamLogTfaChangePolicyDetails {
    DBXTeamLogTfaChangePolicyDetails(
        newValue: mapDBTEAMPOLICIESTwoStepVerificationPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMPOLICIESTwoStepVerificationPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGTfaChangePolicyTypeToDBXOptional(object: DBTEAMLOGTfaChangePolicyType?) -> DBXTeamLogTfaChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaChangePolicyTypeToDBX(object: DBTEAMLOGTfaChangePolicyType) -> DBXTeamLogTfaChangePolicyType {
    DBXTeamLogTfaChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGTfaChangeStatusDetailsToDBXOptional(object: DBTEAMLOGTfaChangeStatusDetails?) -> DBXTeamLogTfaChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangeStatusDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaChangeStatusDetailsToDBX(object: DBTEAMLOGTfaChangeStatusDetails) -> DBXTeamLogTfaChangeStatusDetails {
    DBXTeamLogTfaChangeStatusDetails(
        newValue: mapDBTEAMLOGTfaConfigurationToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTfaConfigurationToDBXOptional(object: object.previousValue),
        usedRescueCode: object.usedRescueCode
    )
}

func mapDBTEAMLOGTfaChangeStatusTypeToDBXOptional(object: DBTEAMLOGTfaChangeStatusType?) -> DBXTeamLogTfaChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaChangeStatusTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaChangeStatusTypeToDBX(object: DBTEAMLOGTfaChangeStatusType) -> DBXTeamLogTfaChangeStatusType {
    DBXTeamLogTfaChangeStatusType(description_: object.description_)
}

func mapDBTEAMLOGTfaConfigurationToDBXOptional(object: DBTEAMLOGTfaConfiguration?) -> DBXTeamLogTfaConfiguration? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaConfigurationToDBX(object: object)
}

func mapDBTEAMLOGTfaConfigurationToDBX(object: DBTEAMLOGTfaConfiguration) -> DBXTeamLogTfaConfiguration {
    if object.isAuthenticator() {
        return DBXTeamLogTfaConfigurationAuthenticator()
    }
    if object.isDisabled() {
        return DBXTeamLogTfaConfigurationDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogTfaConfigurationEnabled()
    }
    if object.isSms() {
        return DBXTeamLogTfaConfigurationSms()
    }
    if object.isOther() {
        return DBXTeamLogTfaConfigurationOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTfaRemoveBackupPhoneDetailsToDBXOptional(object: DBTEAMLOGTfaRemoveBackupPhoneDetails?) -> DBXTeamLogTfaRemoveBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveBackupPhoneDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveBackupPhoneDetailsToDBX(object: DBTEAMLOGTfaRemoveBackupPhoneDetails) -> DBXTeamLogTfaRemoveBackupPhoneDetails {
    DBXTeamLogTfaRemoveBackupPhoneDetails()
}

func mapDBTEAMLOGTfaRemoveBackupPhoneTypeToDBXOptional(object: DBTEAMLOGTfaRemoveBackupPhoneType?) -> DBXTeamLogTfaRemoveBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveBackupPhoneTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveBackupPhoneTypeToDBX(object: DBTEAMLOGTfaRemoveBackupPhoneType) -> DBXTeamLogTfaRemoveBackupPhoneType {
    DBXTeamLogTfaRemoveBackupPhoneType(description_: object.description_)
}

func mapDBTEAMLOGTfaRemoveExceptionDetailsToDBXOptional(object: DBTEAMLOGTfaRemoveExceptionDetails?) -> DBXTeamLogTfaRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveExceptionDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveExceptionDetailsToDBX(object: DBTEAMLOGTfaRemoveExceptionDetails) -> DBXTeamLogTfaRemoveExceptionDetails {
    DBXTeamLogTfaRemoveExceptionDetails()
}

func mapDBTEAMLOGTfaRemoveExceptionTypeToDBXOptional(object: DBTEAMLOGTfaRemoveExceptionType?) -> DBXTeamLogTfaRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveExceptionTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveExceptionTypeToDBX(object: DBTEAMLOGTfaRemoveExceptionType) -> DBXTeamLogTfaRemoveExceptionType {
    DBXTeamLogTfaRemoveExceptionType(description_: object.description_)
}

func mapDBTEAMLOGTfaRemoveSecurityKeyDetailsToDBXOptional(object: DBTEAMLOGTfaRemoveSecurityKeyDetails?) -> DBXTeamLogTfaRemoveSecurityKeyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveSecurityKeyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveSecurityKeyDetailsToDBX(object: DBTEAMLOGTfaRemoveSecurityKeyDetails) -> DBXTeamLogTfaRemoveSecurityKeyDetails {
    DBXTeamLogTfaRemoveSecurityKeyDetails()
}

func mapDBTEAMLOGTfaRemoveSecurityKeyTypeToDBXOptional(object: DBTEAMLOGTfaRemoveSecurityKeyType?) -> DBXTeamLogTfaRemoveSecurityKeyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaRemoveSecurityKeyTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaRemoveSecurityKeyTypeToDBX(object: DBTEAMLOGTfaRemoveSecurityKeyType) -> DBXTeamLogTfaRemoveSecurityKeyType {
    DBXTeamLogTfaRemoveSecurityKeyType(description_: object.description_)
}

func mapDBTEAMLOGTfaResetDetailsToDBXOptional(object: DBTEAMLOGTfaResetDetails?) -> DBXTeamLogTfaResetDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaResetDetailsToDBX(object: object)
}

func mapDBTEAMLOGTfaResetDetailsToDBX(object: DBTEAMLOGTfaResetDetails) -> DBXTeamLogTfaResetDetails {
    DBXTeamLogTfaResetDetails()
}

func mapDBTEAMLOGTfaResetTypeToDBXOptional(object: DBTEAMLOGTfaResetType?) -> DBXTeamLogTfaResetType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTfaResetTypeToDBX(object: object)
}

func mapDBTEAMLOGTfaResetTypeToDBX(object: DBTEAMLOGTfaResetType) -> DBXTeamLogTfaResetType {
    DBXTeamLogTfaResetType(description_: object.description_)
}

func mapDBTEAMLOGTimeUnitToDBXOptional(object: DBTEAMLOGTimeUnit?) -> DBXTeamLogTimeUnit? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTimeUnitToDBX(object: object)
}

func mapDBTEAMLOGTimeUnitToDBX(object: DBTEAMLOGTimeUnit) -> DBXTeamLogTimeUnit {
    if object.isDays() {
        return DBXTeamLogTimeUnitDays()
    }
    if object.isHours() {
        return DBXTeamLogTimeUnitHours()
    }
    if object.isMilliseconds() {
        return DBXTeamLogTimeUnitMilliseconds()
    }
    if object.isMinutes() {
        return DBXTeamLogTimeUnitMinutes()
    }
    if object.isMonths() {
        return DBXTeamLogTimeUnitMonths()
    }
    if object.isSeconds() {
        return DBXTeamLogTimeUnitSeconds()
    }
    if object.isWeeks() {
        return DBXTeamLogTimeUnitWeeks()
    }
    if object.isYears() {
        return DBXTeamLogTimeUnitYears()
    }
    if object.isOther() {
        return DBXTeamLogTimeUnitOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTrustedNonTeamMemberLogInfoToDBXOptional(object: DBTEAMLOGTrustedNonTeamMemberLogInfo?) -> DBXTeamLogTrustedNonTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTrustedNonTeamMemberLogInfoToDBX(object: object)
}

func mapDBTEAMLOGTrustedNonTeamMemberLogInfoToDBX(object: DBTEAMLOGTrustedNonTeamMemberLogInfo) -> DBXTeamLogTrustedNonTeamMemberLogInfo {
    DBXTeamLogTrustedNonTeamMemberLogInfo(
        trustedNonTeamMemberType: mapDBTEAMLOGTrustedNonTeamMemberTypeToDBX(object: object.trustedNonTeamMemberType),
        accountId: object.accountId,
        displayName: object.displayName,
        email: object.email,
        team: mapDBTEAMLOGTeamLogInfoToDBXOptional(object: object.team)
    )
}

func mapDBTEAMLOGTrustedNonTeamMemberTypeToDBXOptional(object: DBTEAMLOGTrustedNonTeamMemberType?) -> DBXTeamLogTrustedNonTeamMemberType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTrustedNonTeamMemberTypeToDBX(object: object)
}

func mapDBTEAMLOGTrustedNonTeamMemberTypeToDBX(object: DBTEAMLOGTrustedNonTeamMemberType) -> DBXTeamLogTrustedNonTeamMemberType {
    if object.isEnterpriseAdmin() {
        return DBXTeamLogTrustedNonTeamMemberTypeEnterpriseAdmin()
    }
    if object.isMultiInstanceAdmin() {
        return DBXTeamLogTrustedNonTeamMemberTypeMultiInstanceAdmin()
    }
    if object.isOther() {
        return DBXTeamLogTrustedNonTeamMemberTypeOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTrustedTeamsRequestActionToDBXOptional(object: DBTEAMLOGTrustedTeamsRequestAction?) -> DBXTeamLogTrustedTeamsRequestAction? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTrustedTeamsRequestActionToDBX(object: object)
}

func mapDBTEAMLOGTrustedTeamsRequestActionToDBX(object: DBTEAMLOGTrustedTeamsRequestAction) -> DBXTeamLogTrustedTeamsRequestAction {
    if object.isAccepted() {
        return DBXTeamLogTrustedTeamsRequestActionAccepted()
    }
    if object.isDeclined() {
        return DBXTeamLogTrustedTeamsRequestActionDeclined()
    }
    if object.isExpired() {
        return DBXTeamLogTrustedTeamsRequestActionExpired()
    }
    if object.isInvited() {
        return DBXTeamLogTrustedTeamsRequestActionInvited()
    }
    if object.isRevoked() {
        return DBXTeamLogTrustedTeamsRequestActionRevoked()
    }
    if object.isOther() {
        return DBXTeamLogTrustedTeamsRequestActionOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTrustedTeamsRequestStateToDBXOptional(object: DBTEAMLOGTrustedTeamsRequestState?) -> DBXTeamLogTrustedTeamsRequestState? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: object)
}

func mapDBTEAMLOGTrustedTeamsRequestStateToDBX(object: DBTEAMLOGTrustedTeamsRequestState) -> DBXTeamLogTrustedTeamsRequestState {
    if object.isInvited() {
        return DBXTeamLogTrustedTeamsRequestStateInvited()
    }
    if object.isLinked() {
        return DBXTeamLogTrustedTeamsRequestStateLinked()
    }
    if object.isUnlinked() {
        return DBXTeamLogTrustedTeamsRequestStateUnlinked()
    }
    if object.isOther() {
        return DBXTeamLogTrustedTeamsRequestStateOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGTwoAccountChangePolicyDetailsToDBXOptional(object: DBTEAMLOGTwoAccountChangePolicyDetails?) -> DBXTeamLogTwoAccountChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTwoAccountChangePolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGTwoAccountChangePolicyDetailsToDBX(object: DBTEAMLOGTwoAccountChangePolicyDetails) -> DBXTeamLogTwoAccountChangePolicyDetails {
    DBXTeamLogTwoAccountChangePolicyDetails(
        newValue: mapDBTEAMLOGTwoAccountPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGTwoAccountPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGTwoAccountChangePolicyTypeToDBXOptional(object: DBTEAMLOGTwoAccountChangePolicyType?) -> DBXTeamLogTwoAccountChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTwoAccountChangePolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGTwoAccountChangePolicyTypeToDBX(object: DBTEAMLOGTwoAccountChangePolicyType) -> DBXTeamLogTwoAccountChangePolicyType {
    DBXTeamLogTwoAccountChangePolicyType(description_: object.description_)
}

func mapDBTEAMLOGTwoAccountPolicyToDBXOptional(object: DBTEAMLOGTwoAccountPolicy?) -> DBXTeamLogTwoAccountPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGTwoAccountPolicyToDBX(object: object)
}

func mapDBTEAMLOGTwoAccountPolicyToDBX(object: DBTEAMLOGTwoAccountPolicy) -> DBXTeamLogTwoAccountPolicy {
    if object.isDisabled() {
        return DBXTeamLogTwoAccountPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogTwoAccountPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogTwoAccountPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGUndoNamingConventionDetailsToDBXOptional(object: DBTEAMLOGUndoNamingConventionDetails?) -> DBXTeamLogUndoNamingConventionDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUndoNamingConventionDetailsToDBX(object: object)
}

func mapDBTEAMLOGUndoNamingConventionDetailsToDBX(object: DBTEAMLOGUndoNamingConventionDetails) -> DBXTeamLogUndoNamingConventionDetails {
    DBXTeamLogUndoNamingConventionDetails()
}

func mapDBTEAMLOGUndoNamingConventionTypeToDBXOptional(object: DBTEAMLOGUndoNamingConventionType?) -> DBXTeamLogUndoNamingConventionType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUndoNamingConventionTypeToDBX(object: object)
}

func mapDBTEAMLOGUndoNamingConventionTypeToDBX(object: DBTEAMLOGUndoNamingConventionType) -> DBXTeamLogUndoNamingConventionType {
    DBXTeamLogUndoNamingConventionType(description_: object.description_)
}

func mapDBTEAMLOGUndoOrganizeFolderWithTidyDetailsToDBXOptional(object: DBTEAMLOGUndoOrganizeFolderWithTidyDetails?)
    -> DBXTeamLogUndoOrganizeFolderWithTidyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUndoOrganizeFolderWithTidyDetailsToDBX(object: object)
}

func mapDBTEAMLOGUndoOrganizeFolderWithTidyDetailsToDBX(object: DBTEAMLOGUndoOrganizeFolderWithTidyDetails) -> DBXTeamLogUndoOrganizeFolderWithTidyDetails {
    DBXTeamLogUndoOrganizeFolderWithTidyDetails()
}

func mapDBTEAMLOGUndoOrganizeFolderWithTidyTypeToDBXOptional(object: DBTEAMLOGUndoOrganizeFolderWithTidyType?) -> DBXTeamLogUndoOrganizeFolderWithTidyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUndoOrganizeFolderWithTidyTypeToDBX(object: object)
}

func mapDBTEAMLOGUndoOrganizeFolderWithTidyTypeToDBX(object: DBTEAMLOGUndoOrganizeFolderWithTidyType) -> DBXTeamLogUndoOrganizeFolderWithTidyType {
    DBXTeamLogUndoOrganizeFolderWithTidyType(description_: object.description_)
}

func mapDBTEAMLOGUserLinkedAppLogInfoToDBXOptional(object: DBTEAMLOGUserLinkedAppLogInfo?) -> DBXTeamLogUserLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserLinkedAppLogInfoToDBX(object: object)
}

func mapDBTEAMLOGUserLinkedAppLogInfoToDBX(object: DBTEAMLOGUserLinkedAppLogInfo) -> DBXTeamLogUserLinkedAppLogInfo {
    DBXTeamLogUserLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBTEAMLOGUserNameLogInfoToDBXOptional(object: DBTEAMLOGUserNameLogInfo?) -> DBXTeamLogUserNameLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserNameLogInfoToDBX(object: object)
}

func mapDBTEAMLOGUserNameLogInfoToDBX(object: DBTEAMLOGUserNameLogInfo) -> DBXTeamLogUserNameLogInfo {
    DBXTeamLogUserNameLogInfo(givenName: object.givenName, surname: object.surname, locale: object.locale)
}

func mapDBTEAMLOGUserOrTeamLinkedAppLogInfoToDBXOptional(object: DBTEAMLOGUserOrTeamLinkedAppLogInfo?) -> DBXTeamLogUserOrTeamLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserOrTeamLinkedAppLogInfoToDBX(object: object)
}

func mapDBTEAMLOGUserOrTeamLinkedAppLogInfoToDBX(object: DBTEAMLOGUserOrTeamLinkedAppLogInfo) -> DBXTeamLogUserOrTeamLinkedAppLogInfo {
    DBXTeamLogUserOrTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBTEAMLOGUserTagsAddedDetailsToDBXOptional(object: DBTEAMLOGUserTagsAddedDetails?) -> DBXTeamLogUserTagsAddedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserTagsAddedDetailsToDBX(object: object)
}

func mapDBTEAMLOGUserTagsAddedDetailsToDBX(object: DBTEAMLOGUserTagsAddedDetails) -> DBXTeamLogUserTagsAddedDetails {
    DBXTeamLogUserTagsAddedDetails(values: object.values)
}

func mapDBTEAMLOGUserTagsAddedTypeToDBXOptional(object: DBTEAMLOGUserTagsAddedType?) -> DBXTeamLogUserTagsAddedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserTagsAddedTypeToDBX(object: object)
}

func mapDBTEAMLOGUserTagsAddedTypeToDBX(object: DBTEAMLOGUserTagsAddedType) -> DBXTeamLogUserTagsAddedType {
    DBXTeamLogUserTagsAddedType(description_: object.description_)
}

func mapDBTEAMLOGUserTagsRemovedDetailsToDBXOptional(object: DBTEAMLOGUserTagsRemovedDetails?) -> DBXTeamLogUserTagsRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserTagsRemovedDetailsToDBX(object: object)
}

func mapDBTEAMLOGUserTagsRemovedDetailsToDBX(object: DBTEAMLOGUserTagsRemovedDetails) -> DBXTeamLogUserTagsRemovedDetails {
    DBXTeamLogUserTagsRemovedDetails(values: object.values)
}

func mapDBTEAMLOGUserTagsRemovedTypeToDBXOptional(object: DBTEAMLOGUserTagsRemovedType?) -> DBXTeamLogUserTagsRemovedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGUserTagsRemovedTypeToDBX(object: object)
}

func mapDBTEAMLOGUserTagsRemovedTypeToDBX(object: DBTEAMLOGUserTagsRemovedType) -> DBXTeamLogUserTagsRemovedType {
    DBXTeamLogUserTagsRemovedType(description_: object.description_)
}

func mapDBTEAMLOGViewerInfoPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGViewerInfoPolicyChangedDetails?) -> DBXTeamLogViewerInfoPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGViewerInfoPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGViewerInfoPolicyChangedDetailsToDBX(object: DBTEAMLOGViewerInfoPolicyChangedDetails) -> DBXTeamLogViewerInfoPolicyChangedDetails {
    DBXTeamLogViewerInfoPolicyChangedDetails(
        previousValue: mapDBTEAMLOGPassPolicyToDBX(object: object.previousValue),
        newValue: mapDBTEAMLOGPassPolicyToDBX(object: object.dNewValue)
    )
}

func mapDBTEAMLOGViewerInfoPolicyChangedTypeToDBXOptional(object: DBTEAMLOGViewerInfoPolicyChangedType?) -> DBXTeamLogViewerInfoPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGViewerInfoPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGViewerInfoPolicyChangedTypeToDBX(object: DBTEAMLOGViewerInfoPolicyChangedType) -> DBXTeamLogViewerInfoPolicyChangedType {
    DBXTeamLogViewerInfoPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGWatermarkingPolicyToDBXOptional(object: DBTEAMLOGWatermarkingPolicy?) -> DBXTeamLogWatermarkingPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWatermarkingPolicyToDBX(object: object)
}

func mapDBTEAMLOGWatermarkingPolicyToDBX(object: DBTEAMLOGWatermarkingPolicy) -> DBXTeamLogWatermarkingPolicy {
    if object.isDisabled() {
        return DBXTeamLogWatermarkingPolicyDisabled()
    }
    if object.isEnabled() {
        return DBXTeamLogWatermarkingPolicyEnabled()
    }
    if object.isOther() {
        return DBXTeamLogWatermarkingPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGWatermarkingPolicyChangedDetailsToDBXOptional(object: DBTEAMLOGWatermarkingPolicyChangedDetails?)
    -> DBXTeamLogWatermarkingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWatermarkingPolicyChangedDetailsToDBX(object: object)
}

func mapDBTEAMLOGWatermarkingPolicyChangedDetailsToDBX(object: DBTEAMLOGWatermarkingPolicyChangedDetails) -> DBXTeamLogWatermarkingPolicyChangedDetails {
    DBXTeamLogWatermarkingPolicyChangedDetails(
        newValue: mapDBTEAMLOGWatermarkingPolicyToDBX(object: object.dNewValue),
        previousValue: mapDBTEAMLOGWatermarkingPolicyToDBX(object: object.previousValue)
    )
}

func mapDBTEAMLOGWatermarkingPolicyChangedTypeToDBXOptional(object: DBTEAMLOGWatermarkingPolicyChangedType?) -> DBXTeamLogWatermarkingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWatermarkingPolicyChangedTypeToDBX(object: object)
}

func mapDBTEAMLOGWatermarkingPolicyChangedTypeToDBX(object: DBTEAMLOGWatermarkingPolicyChangedType) -> DBXTeamLogWatermarkingPolicyChangedType {
    DBXTeamLogWatermarkingPolicyChangedType(description_: object.description_)
}

func mapDBTEAMLOGWebDeviceSessionLogInfoToDBXOptional(object: DBTEAMLOGWebDeviceSessionLogInfo?) -> DBXTeamLogWebDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebDeviceSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGWebDeviceSessionLogInfoToDBX(object: DBTEAMLOGWebDeviceSessionLogInfo) -> DBXTeamLogWebDeviceSessionLogInfo {
    DBXTeamLogWebDeviceSessionLogInfo(
        userAgent: object.userAgent,
        os: object.os,
        browser: object.browser,
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBTEAMLOGWebSessionLogInfoToDBXOptional(object: object.sessionInfo)
    )
}

func mapDBTEAMLOGWebSessionLogInfoToDBXOptional(object: DBTEAMLOGWebSessionLogInfo?) -> DBXTeamLogWebSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionLogInfoToDBX(object: object)
}

func mapDBTEAMLOGWebSessionLogInfoToDBX(object: DBTEAMLOGWebSessionLogInfo) -> DBXTeamLogWebSessionLogInfo {
    DBXTeamLogWebSessionLogInfo(sessionId: object.sessionId)
}

func mapDBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsToDBXOptional(object: DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails?)
    -> DBXTeamLogWebSessionsChangeActiveSessionLimitDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsToDBX(object: DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails)
    -> DBXTeamLogWebSessionsChangeActiveSessionLimitDetails {
    DBXTeamLogWebSessionsChangeActiveSessionLimitDetails(previousValue: object.previousValue, newValue: object.dNewValue)
}

func mapDBTEAMLOGWebSessionsChangeActiveSessionLimitTypeToDBXOptional(object: DBTEAMLOGWebSessionsChangeActiveSessionLimitType?)
    -> DBXTeamLogWebSessionsChangeActiveSessionLimitType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeActiveSessionLimitTypeToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeActiveSessionLimitTypeToDBX(object: DBTEAMLOGWebSessionsChangeActiveSessionLimitType)
    -> DBXTeamLogWebSessionsChangeActiveSessionLimitType {
    DBXTeamLogWebSessionsChangeActiveSessionLimitType(description_: object.description_)
}

func mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsToDBXOptional(object: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails?)
    -> DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsToDBX(object: DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails)
    -> DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails {
    DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails(
        newValue: mapDBTEAMLOGWebSessionsFixedLengthPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGWebSessionsFixedLengthPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeToDBXOptional(object: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType?)
    -> DBXTeamLogWebSessionsChangeFixedLengthPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeFixedLengthPolicyTypeToDBX(object: DBTEAMLOGWebSessionsChangeFixedLengthPolicyType)
    -> DBXTeamLogWebSessionsChangeFixedLengthPolicyType {
    DBXTeamLogWebSessionsChangeFixedLengthPolicyType(description_: object.description_)
}

func mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsToDBXOptional(object: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails?)
    -> DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsToDBX(object: DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails)
    -> DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails {
    DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails(
        newValue: mapDBTEAMLOGWebSessionsIdleLengthPolicyToDBXOptional(object: object.dNewValue),
        previousValue: mapDBTEAMLOGWebSessionsIdleLengthPolicyToDBXOptional(object: object.previousValue)
    )
}

func mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeToDBXOptional(object: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType?)
    -> DBXTeamLogWebSessionsChangeIdleLengthPolicyType? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsChangeIdleLengthPolicyTypeToDBX(object: DBTEAMLOGWebSessionsChangeIdleLengthPolicyType)
    -> DBXTeamLogWebSessionsChangeIdleLengthPolicyType {
    DBXTeamLogWebSessionsChangeIdleLengthPolicyType(description_: object.description_)
}

func mapDBTEAMLOGWebSessionsFixedLengthPolicyToDBXOptional(object: DBTEAMLOGWebSessionsFixedLengthPolicy?) -> DBXTeamLogWebSessionsFixedLengthPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsFixedLengthPolicyToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsFixedLengthPolicyToDBX(object: DBTEAMLOGWebSessionsFixedLengthPolicy) -> DBXTeamLogWebSessionsFixedLengthPolicy {
    if object.isDefined() {
        let defined = mapDBTEAMLOGDurationLogInfoToDBX(object: object.defined)
        return DBXTeamLogWebSessionsFixedLengthPolicy.factory(swift: .defined(defined.swift))
    }
    if object.isUndefined() {
        return DBXTeamLogWebSessionsFixedLengthPolicyUndefined()
    }
    if object.isOther() {
        return DBXTeamLogWebSessionsFixedLengthPolicyOther()
    }
    fatalError("codegen error")
}

func mapDBTEAMLOGWebSessionsIdleLengthPolicyToDBXOptional(object: DBTEAMLOGWebSessionsIdleLengthPolicy?) -> DBXTeamLogWebSessionsIdleLengthPolicy? {
    guard let object = object else { return nil }
    return mapDBTEAMLOGWebSessionsIdleLengthPolicyToDBX(object: object)
}

func mapDBTEAMLOGWebSessionsIdleLengthPolicyToDBX(object: DBTEAMLOGWebSessionsIdleLengthPolicy) -> DBXTeamLogWebSessionsIdleLengthPolicy {
    if object.isDefined() {
        let defined = mapDBTEAMLOGDurationLogInfoToDBX(object: object.defined)
        return DBXTeamLogWebSessionsIdleLengthPolicy.factory(swift: .defined(defined.swift))
    }
    if object.isUndefined() {
        return DBXTeamLogWebSessionsIdleLengthPolicyUndefined()
    }
    if object.isOther() {
        return DBXTeamLogWebSessionsIdleLengthPolicyOther()
    }
    fatalError("codegen error")
}
