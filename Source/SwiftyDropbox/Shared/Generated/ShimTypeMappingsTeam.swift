///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXTeamDeviceSessionToDBOptional(object: DBXTeamDeviceSession?) -> DBTEAMDeviceSession? {
    guard let object = object else { return nil }
    return mapDBXTeamDeviceSessionToDB(object: object)
}

func mapDBXTeamDeviceSessionToDB(object: DBXTeamDeviceSession) -> DBTEAMDeviceSession {
    DBTEAMDeviceSession(sessionId: object.sessionId, ipAddress: object.ipAddress, country: object.country, created: object.created, updated: object.updated)
}

func mapDBXTeamActiveWebSessionToDBOptional(object: DBXTeamActiveWebSession?) -> DBTEAMActiveWebSession? {
    guard let object = object else { return nil }
    return mapDBXTeamActiveWebSessionToDB(object: object)
}

func mapDBXTeamActiveWebSessionToDB(object: DBXTeamActiveWebSession) -> DBTEAMActiveWebSession {
    DBTEAMActiveWebSession(
        sessionId: object.sessionId,
        userAgent: object.userAgent,
        os: object.os,
        browser: object.browser,
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated,
        expires: object.expires
    )
}

func mapDBXTeamAddSecondaryEmailResultToDBOptional(object: DBXTeamAddSecondaryEmailResult?) -> DBTEAMAddSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBXTeamAddSecondaryEmailResultToDB(object: object)
}

func mapDBXTeamAddSecondaryEmailResultToDB(object: DBXTeamAddSecondaryEmailResult) -> DBTEAMAddSecondaryEmailResult {
    if let object = object.asSuccess {
        let success = mapDBXSecondaryEmailsSecondaryEmailToDB(object: object.success)
        return DBTEAMAddSecondaryEmailResult(success: success)
    }
    if let object = object.asUnavailable {
        let unavailable = object.unavailable
        return DBTEAMAddSecondaryEmailResult(unavailable: unavailable)
    }
    if let object = object.asAlreadyPending {
        let alreadyPending = object.alreadyPending
        return DBTEAMAddSecondaryEmailResult(alreadyPending: alreadyPending)
    }
    if let object = object.asAlreadyOwnedByUser {
        let alreadyOwnedByUser = object.alreadyOwnedByUser
        return DBTEAMAddSecondaryEmailResult(alreadyOwnedByUser: alreadyOwnedByUser)
    }
    if let object = object.asReachedLimit {
        let reachedLimit = object.reachedLimit
        return DBTEAMAddSecondaryEmailResult(reachedLimit: reachedLimit)
    }
    if let object = object.asTransientError {
        let transientError = object.transientError
        return DBTEAMAddSecondaryEmailResult(transientError: transientError)
    }
    if let object = object.asTooManyUpdates {
        let tooManyUpdates = object.tooManyUpdates
        return DBTEAMAddSecondaryEmailResult(tooManyUpdates: tooManyUpdates)
    }
    if let object = object.asUnknownError {
        let unknownError = object.unknownError
        return DBTEAMAddSecondaryEmailResult(unknownError: unknownError)
    }
    if let object = object.asRateLimited {
        let rateLimited = object.rateLimited
        return DBTEAMAddSecondaryEmailResult(rateLimited: rateLimited)
    }
    if object.asOther != nil {
        return DBTEAMAddSecondaryEmailResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamAddSecondaryEmailsArgToDBOptional(object: DBXTeamAddSecondaryEmailsArg?) -> DBTEAMAddSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamAddSecondaryEmailsArgToDB(object: object)
}

func mapDBXTeamAddSecondaryEmailsArgToDB(object: DBXTeamAddSecondaryEmailsArg) -> DBTEAMAddSecondaryEmailsArg {
    DBTEAMAddSecondaryEmailsArg(dNewSecondaryEmails: object.newSecondaryEmails.compactMap { mapDBXTeamUserSecondaryEmailsArgToDB(object: $0) })
}

func mapDBXTeamAddSecondaryEmailsErrorToDBOptional(object: DBXTeamAddSecondaryEmailsError?) -> DBTEAMAddSecondaryEmailsError? {
    guard let object = object else { return nil }
    return mapDBXTeamAddSecondaryEmailsErrorToDB(object: object)
}

func mapDBXTeamAddSecondaryEmailsErrorToDB(object: DBXTeamAddSecondaryEmailsError) -> DBTEAMAddSecondaryEmailsError {
    if object.asSecondaryEmailsDisabled != nil {
        return DBTEAMAddSecondaryEmailsError(secondaryEmailsDisabled: ())
    }
    if object.asTooManyEmails != nil {
        return DBTEAMAddSecondaryEmailsError(tooManyEmails: ())
    }
    if object.asOther != nil {
        return DBTEAMAddSecondaryEmailsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamAddSecondaryEmailsResultToDBOptional(object: DBXTeamAddSecondaryEmailsResult?) -> DBTEAMAddSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamAddSecondaryEmailsResultToDB(object: object)
}

func mapDBXTeamAddSecondaryEmailsResultToDB(object: DBXTeamAddSecondaryEmailsResult) -> DBTEAMAddSecondaryEmailsResult {
    DBTEAMAddSecondaryEmailsResult(results: object.results.compactMap { mapDBXTeamUserAddResultToDB(object: $0) })
}

func mapDBXTeamAdminTierToDBOptional(object: DBXTeamAdminTier?) -> DBTEAMAdminTier? {
    guard let object = object else { return nil }
    return mapDBXTeamAdminTierToDB(object: object)
}

func mapDBXTeamAdminTierToDB(object: DBXTeamAdminTier) -> DBTEAMAdminTier {
    if object.asTeamAdmin != nil {
        return DBTEAMAdminTier(teamAdmin: ())
    }
    if object.asUserManagementAdmin != nil {
        return DBTEAMAdminTier(userManagementAdmin: ())
    }
    if object.asSupportAdmin != nil {
        return DBTEAMAdminTier(supportAdmin: ())
    }
    if object.asMemberOnly != nil {
        return DBTEAMAdminTier(memberOnly: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamApiAppToDBOptional(object: DBXTeamApiApp?) -> DBTEAMApiApp? {
    guard let object = object else { return nil }
    return mapDBXTeamApiAppToDB(object: object)
}

func mapDBXTeamApiAppToDB(object: DBXTeamApiApp) -> DBTEAMApiApp {
    DBTEAMApiApp(
        appId: object.appId,
        appName: object.appName,
        isAppFolder: object.isAppFolder,
        publisher: object.publisher,
        publisherUrl: object.publisherUrl,
        linked: object.linked
    )
}

func mapDBXTeamBaseDfbReportToDBOptional(object: DBXTeamBaseDfbReport?) -> DBTEAMBaseDfbReport? {
    guard let object = object else { return nil }
    return mapDBXTeamBaseDfbReportToDB(object: object)
}

func mapDBXTeamBaseDfbReportToDB(object: DBXTeamBaseDfbReport) -> DBTEAMBaseDfbReport {
    DBTEAMBaseDfbReport(startDate: object.startDate)
}

func mapDBXTeamBaseTeamFolderErrorToDBOptional(object: DBXTeamBaseTeamFolderError?) -> DBTEAMBaseTeamFolderError? {
    guard let object = object else { return nil }
    return mapDBXTeamBaseTeamFolderErrorToDB(object: object)
}

func mapDBXTeamBaseTeamFolderErrorToDB(object: DBXTeamBaseTeamFolderError) -> DBTEAMBaseTeamFolderError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMBaseTeamFolderError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMBaseTeamFolderError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMBaseTeamFolderError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMBaseTeamFolderError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCustomQuotaErrorToDBOptional(object: DBXTeamCustomQuotaError?) -> DBTEAMCustomQuotaError? {
    guard let object = object else { return nil }
    return mapDBXTeamCustomQuotaErrorToDB(object: object)
}

func mapDBXTeamCustomQuotaErrorToDB(object: DBXTeamCustomQuotaError) -> DBTEAMCustomQuotaError {
    if object.asTooManyUsers != nil {
        return DBTEAMCustomQuotaError(tooManyUsers: ())
    }
    if object.asOther != nil {
        return DBTEAMCustomQuotaError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCustomQuotaResultToDBOptional(object: DBXTeamCustomQuotaResult?) -> DBTEAMCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBXTeamCustomQuotaResultToDB(object: object)
}

func mapDBXTeamCustomQuotaResultToDB(object: DBXTeamCustomQuotaResult) -> DBTEAMCustomQuotaResult {
    if let object = object.asSuccess {
        let success = mapDBXTeamUserCustomQuotaResultToDB(object: object.success)
        return DBTEAMCustomQuotaResult(success: success)
    }
    if let object = object.asInvalidUser {
        let invalidUser = mapDBXTeamUserSelectorArgToDB(object: object.invalidUser)
        return DBTEAMCustomQuotaResult(invalidUser: invalidUser)
    }
    if object.asOther != nil {
        return DBTEAMCustomQuotaResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamCustomQuotaUsersArgToDBOptional(object: DBXTeamCustomQuotaUsersArg?) -> DBTEAMCustomQuotaUsersArg? {
    guard let object = object else { return nil }
    return mapDBXTeamCustomQuotaUsersArgToDB(object: object)
}

func mapDBXTeamCustomQuotaUsersArgToDB(object: DBXTeamCustomQuotaUsersArg) -> DBTEAMCustomQuotaUsersArg {
    DBTEAMCustomQuotaUsersArg(users: object.users.compactMap { mapDBXTeamUserSelectorArgToDB(object: $0) })
}

func mapDBXTeamDateRangeToDBOptional(object: DBXTeamDateRange?) -> DBTEAMDateRange? {
    guard let object = object else { return nil }
    return mapDBXTeamDateRangeToDB(object: object)
}

func mapDBXTeamDateRangeToDB(object: DBXTeamDateRange) -> DBTEAMDateRange {
    DBTEAMDateRange(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamDateRangeErrorToDBOptional(object: DBXTeamDateRangeError?) -> DBTEAMDateRangeError? {
    guard let object = object else { return nil }
    return mapDBXTeamDateRangeErrorToDB(object: object)
}

func mapDBXTeamDateRangeErrorToDB(object: DBXTeamDateRangeError) -> DBTEAMDateRangeError {
    if object.asOther != nil {
        return DBTEAMDateRangeError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamDeleteSecondaryEmailResultToDBOptional(object: DBXTeamDeleteSecondaryEmailResult?) -> DBTEAMDeleteSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBXTeamDeleteSecondaryEmailResultToDB(object: object)
}

func mapDBXTeamDeleteSecondaryEmailResultToDB(object: DBXTeamDeleteSecondaryEmailResult) -> DBTEAMDeleteSecondaryEmailResult {
    if let object = object.asSuccess {
        let success = object.success
        return DBTEAMDeleteSecondaryEmailResult(success: success)
    }
    if let object = object.asNotFound {
        let notFound = object.notFound
        return DBTEAMDeleteSecondaryEmailResult(notFound: notFound)
    }
    if let object = object.asCannotRemovePrimary {
        let cannotRemovePrimary = object.cannotRemovePrimary
        return DBTEAMDeleteSecondaryEmailResult(cannotRemovePrimary: cannotRemovePrimary)
    }
    if object.asOther != nil {
        return DBTEAMDeleteSecondaryEmailResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamDeleteSecondaryEmailsArgToDBOptional(object: DBXTeamDeleteSecondaryEmailsArg?) -> DBTEAMDeleteSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamDeleteSecondaryEmailsArgToDB(object: object)
}

func mapDBXTeamDeleteSecondaryEmailsArgToDB(object: DBXTeamDeleteSecondaryEmailsArg) -> DBTEAMDeleteSecondaryEmailsArg {
    DBTEAMDeleteSecondaryEmailsArg(emailsToDelete: object.emailsToDelete.compactMap { mapDBXTeamUserSecondaryEmailsArgToDB(object: $0) })
}

func mapDBXTeamDeleteSecondaryEmailsResultToDBOptional(object: DBXTeamDeleteSecondaryEmailsResult?) -> DBTEAMDeleteSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamDeleteSecondaryEmailsResultToDB(object: object)
}

func mapDBXTeamDeleteSecondaryEmailsResultToDB(object: DBXTeamDeleteSecondaryEmailsResult) -> DBTEAMDeleteSecondaryEmailsResult {
    DBTEAMDeleteSecondaryEmailsResult(results: object.results.compactMap { mapDBXTeamUserDeleteResultToDB(object: $0) })
}

func mapDBXTeamDesktopClientSessionToDBOptional(object: DBXTeamDesktopClientSession?) -> DBTEAMDesktopClientSession? {
    guard let object = object else { return nil }
    return mapDBXTeamDesktopClientSessionToDB(object: object)
}

func mapDBXTeamDesktopClientSessionToDB(object: DBXTeamDesktopClientSession) -> DBTEAMDesktopClientSession {
    DBTEAMDesktopClientSession(
        sessionId: object.sessionId,
        hostName: object.hostName,
        clientType: mapDBXTeamDesktopPlatformToDB(object: object.clientType),
        clientVersion: object.clientVersion,
        platform: object.platform,
        isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated
    )
}

func mapDBXTeamDesktopPlatformToDBOptional(object: DBXTeamDesktopPlatform?) -> DBTEAMDesktopPlatform? {
    guard let object = object else { return nil }
    return mapDBXTeamDesktopPlatformToDB(object: object)
}

func mapDBXTeamDesktopPlatformToDB(object: DBXTeamDesktopPlatform) -> DBTEAMDesktopPlatform {
    if object.asWindows != nil {
        return DBTEAMDesktopPlatform(windows: ())
    }
    if object.asMac != nil {
        return DBTEAMDesktopPlatform(mac: ())
    }
    if object.asLinux != nil {
        return DBTEAMDesktopPlatform(linux: ())
    }
    if object.asOther != nil {
        return DBTEAMDesktopPlatform(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamDeviceSessionArgToDBOptional(object: DBXTeamDeviceSessionArg?) -> DBTEAMDeviceSessionArg? {
    guard let object = object else { return nil }
    return mapDBXTeamDeviceSessionArgToDB(object: object)
}

func mapDBXTeamDeviceSessionArgToDB(object: DBXTeamDeviceSessionArg) -> DBTEAMDeviceSessionArg {
    DBTEAMDeviceSessionArg(sessionId: object.sessionId, teamMemberId: object.teamMemberId)
}

func mapDBXTeamDevicesActiveToDBOptional(object: DBXTeamDevicesActive?) -> DBTEAMDevicesActive? {
    guard let object = object else { return nil }
    return mapDBXTeamDevicesActiveToDB(object: object)
}

func mapDBXTeamDevicesActiveToDB(object: DBXTeamDevicesActive) -> DBTEAMDevicesActive {
    DBTEAMDevicesActive(
        windows: object.windows.compactMap { $0 },
        macos: object.macos.compactMap { $0 },
        linux: object.linux.compactMap { $0 },
        ios: object.ios.compactMap { $0 },
        android: object.android.compactMap { $0 },
        other: object.other.compactMap { $0 },
        total: object.total.compactMap { $0 }
    )
}

func mapDBXTeamExcludedUsersListArgToDBOptional(object: DBXTeamExcludedUsersListArg?) -> DBTEAMExcludedUsersListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersListArgToDB(object: object)
}

func mapDBXTeamExcludedUsersListArgToDB(object: DBXTeamExcludedUsersListArg) -> DBTEAMExcludedUsersListArg {
    DBTEAMExcludedUsersListArg(limit: object.limit)
}

func mapDBXTeamExcludedUsersListContinueArgToDBOptional(object: DBXTeamExcludedUsersListContinueArg?) -> DBTEAMExcludedUsersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersListContinueArgToDB(object: object)
}

func mapDBXTeamExcludedUsersListContinueArgToDB(object: DBXTeamExcludedUsersListContinueArg) -> DBTEAMExcludedUsersListContinueArg {
    DBTEAMExcludedUsersListContinueArg(cursor: object.cursor)
}

func mapDBXTeamExcludedUsersListContinueErrorToDBOptional(object: DBXTeamExcludedUsersListContinueError?) -> DBTEAMExcludedUsersListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersListContinueErrorToDB(object: object)
}

func mapDBXTeamExcludedUsersListContinueErrorToDB(object: DBXTeamExcludedUsersListContinueError) -> DBTEAMExcludedUsersListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMExcludedUsersListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMExcludedUsersListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamExcludedUsersListErrorToDBOptional(object: DBXTeamExcludedUsersListError?) -> DBTEAMExcludedUsersListError? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersListErrorToDB(object: object)
}

func mapDBXTeamExcludedUsersListErrorToDB(object: DBXTeamExcludedUsersListError) -> DBTEAMExcludedUsersListError {
    if object.asListError != nil {
        return DBTEAMExcludedUsersListError(listError: ())
    }
    if object.asOther != nil {
        return DBTEAMExcludedUsersListError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamExcludedUsersListResultToDBOptional(object: DBXTeamExcludedUsersListResult?) -> DBTEAMExcludedUsersListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersListResultToDB(object: object)
}

func mapDBXTeamExcludedUsersListResultToDB(object: DBXTeamExcludedUsersListResult) -> DBTEAMExcludedUsersListResult {
    DBTEAMExcludedUsersListResult(users: object.users.compactMap { mapDBXTeamMemberProfileToDB(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBXTeamExcludedUsersUpdateArgToDBOptional(object: DBXTeamExcludedUsersUpdateArg?) -> DBTEAMExcludedUsersUpdateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersUpdateArgToDB(object: object)
}

func mapDBXTeamExcludedUsersUpdateArgToDB(object: DBXTeamExcludedUsersUpdateArg) -> DBTEAMExcludedUsersUpdateArg {
    DBTEAMExcludedUsersUpdateArg(users: object.users?.compactMap { mapDBXTeamUserSelectorArgToDB(object: $0) })
}

func mapDBXTeamExcludedUsersUpdateErrorToDBOptional(object: DBXTeamExcludedUsersUpdateError?) -> DBTEAMExcludedUsersUpdateError? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersUpdateErrorToDB(object: object)
}

func mapDBXTeamExcludedUsersUpdateErrorToDB(object: DBXTeamExcludedUsersUpdateError) -> DBTEAMExcludedUsersUpdateError {
    if object.asUsersNotInTeam != nil {
        return DBTEAMExcludedUsersUpdateError(usersNotInTeam: ())
    }
    if object.asTooManyUsers != nil {
        return DBTEAMExcludedUsersUpdateError(tooManyUsers: ())
    }
    if object.asOther != nil {
        return DBTEAMExcludedUsersUpdateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamExcludedUsersUpdateResultToDBOptional(object: DBXTeamExcludedUsersUpdateResult?) -> DBTEAMExcludedUsersUpdateResult? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersUpdateResultToDB(object: object)
}

func mapDBXTeamExcludedUsersUpdateResultToDB(object: DBXTeamExcludedUsersUpdateResult) -> DBTEAMExcludedUsersUpdateResult {
    DBTEAMExcludedUsersUpdateResult(status: mapDBXTeamExcludedUsersUpdateStatusToDB(object: object.status))
}

func mapDBXTeamExcludedUsersUpdateStatusToDBOptional(object: DBXTeamExcludedUsersUpdateStatus?) -> DBTEAMExcludedUsersUpdateStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamExcludedUsersUpdateStatusToDB(object: object)
}

func mapDBXTeamExcludedUsersUpdateStatusToDB(object: DBXTeamExcludedUsersUpdateStatus) -> DBTEAMExcludedUsersUpdateStatus {
    if object.asSuccess != nil {
        return DBTEAMExcludedUsersUpdateStatus(success: ())
    }
    if object.asOther != nil {
        return DBTEAMExcludedUsersUpdateStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamFeatureToDBOptional(object: DBXTeamFeature?) -> DBTEAMFeature? {
    guard let object = object else { return nil }
    return mapDBXTeamFeatureToDB(object: object)
}

func mapDBXTeamFeatureToDB(object: DBXTeamFeature) -> DBTEAMFeature {
    if object.asUploadApiRateLimit != nil {
        return DBTEAMFeature(uploadApiRateLimit: ())
    }
    if object.asHasTeamSharedDropbox != nil {
        return DBTEAMFeature(hasTeamSharedDropbox: ())
    }
    if object.asHasTeamFileEvents != nil {
        return DBTEAMFeature(hasTeamFileEvents: ())
    }
    if object.asHasTeamSelectiveSync != nil {
        return DBTEAMFeature(hasTeamSelectiveSync: ())
    }
    if object.asOther != nil {
        return DBTEAMFeature(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamFeatureValueToDBOptional(object: DBXTeamFeatureValue?) -> DBTEAMFeatureValue? {
    guard let object = object else { return nil }
    return mapDBXTeamFeatureValueToDB(object: object)
}

func mapDBXTeamFeatureValueToDB(object: DBXTeamFeatureValue) -> DBTEAMFeatureValue {
    if let object = object.asUploadApiRateLimit {
        let uploadApiRateLimit = mapDBXTeamUploadApiRateLimitValueToDB(object: object.uploadApiRateLimit)
        return DBTEAMFeatureValue(uploadApiRateLimit: uploadApiRateLimit)
    }
    if let object = object.asHasTeamSharedDropbox {
        let hasTeamSharedDropbox = mapDBXTeamHasTeamSharedDropboxValueToDB(object: object.hasTeamSharedDropbox)
        return DBTEAMFeatureValue(hasTeamSharedDropbox: hasTeamSharedDropbox)
    }
    if let object = object.asHasTeamFileEvents {
        let hasTeamFileEvents = mapDBXTeamHasTeamFileEventsValueToDB(object: object.hasTeamFileEvents)
        return DBTEAMFeatureValue(hasTeamFileEvents: hasTeamFileEvents)
    }
    if let object = object.asHasTeamSelectiveSync {
        let hasTeamSelectiveSync = mapDBXTeamHasTeamSelectiveSyncValueToDB(object: object.hasTeamSelectiveSync)
        return DBTEAMFeatureValue(hasTeamSelectiveSync: hasTeamSelectiveSync)
    }
    if object.asOther != nil {
        return DBTEAMFeatureValue(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamFeaturesGetValuesBatchArgToDBOptional(object: DBXTeamFeaturesGetValuesBatchArg?) -> DBTEAMFeaturesGetValuesBatchArg? {
    guard let object = object else { return nil }
    return mapDBXTeamFeaturesGetValuesBatchArgToDB(object: object)
}

func mapDBXTeamFeaturesGetValuesBatchArgToDB(object: DBXTeamFeaturesGetValuesBatchArg) -> DBTEAMFeaturesGetValuesBatchArg {
    DBTEAMFeaturesGetValuesBatchArg(features: object.features.compactMap { mapDBXTeamFeatureToDB(object: $0) })
}

func mapDBXTeamFeaturesGetValuesBatchErrorToDBOptional(object: DBXTeamFeaturesGetValuesBatchError?) -> DBTEAMFeaturesGetValuesBatchError? {
    guard let object = object else { return nil }
    return mapDBXTeamFeaturesGetValuesBatchErrorToDB(object: object)
}

func mapDBXTeamFeaturesGetValuesBatchErrorToDB(object: DBXTeamFeaturesGetValuesBatchError) -> DBTEAMFeaturesGetValuesBatchError {
    if object.asEmptyFeaturesList != nil {
        return DBTEAMFeaturesGetValuesBatchError(emptyFeaturesList: ())
    }
    if object.asOther != nil {
        return DBTEAMFeaturesGetValuesBatchError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamFeaturesGetValuesBatchResultToDBOptional(object: DBXTeamFeaturesGetValuesBatchResult?) -> DBTEAMFeaturesGetValuesBatchResult? {
    guard let object = object else { return nil }
    return mapDBXTeamFeaturesGetValuesBatchResultToDB(object: object)
}

func mapDBXTeamFeaturesGetValuesBatchResultToDB(object: DBXTeamFeaturesGetValuesBatchResult) -> DBTEAMFeaturesGetValuesBatchResult {
    DBTEAMFeaturesGetValuesBatchResult(values: object.values.compactMap { mapDBXTeamFeatureValueToDB(object: $0) })
}

func mapDBXTeamGetActivityReportToDBOptional(object: DBXTeamGetActivityReport?) -> DBTEAMGetActivityReport? {
    guard let object = object else { return nil }
    return mapDBXTeamGetActivityReportToDB(object: object)
}

func mapDBXTeamGetActivityReportToDB(object: DBXTeamGetActivityReport) -> DBTEAMGetActivityReport {
    DBTEAMGetActivityReport(
        startDate: object.startDate,
        adds: object.adds.compactMap { $0 },
        edits: object.edits.compactMap { $0 },
        deletes: object.deletes.compactMap { $0 },
        activeUsers28Day: object.activeUsers28Day.compactMap { $0 },
        activeUsers7Day: object.activeUsers7Day.compactMap { $0 },
        activeUsers1Day: object.activeUsers1Day.compactMap { $0 },
        activeSharedFolders28Day: object.activeSharedFolders28Day.compactMap { $0 },
        activeSharedFolders7Day: object.activeSharedFolders7Day.compactMap { $0 },
        activeSharedFolders1Day: object.activeSharedFolders1Day.compactMap { $0 },
        sharedLinksCreated: object.sharedLinksCreated.compactMap { $0 },
        sharedLinksViewedByTeam: object.sharedLinksViewedByTeam.compactMap { $0 },
        sharedLinksViewedByOutsideUser: object.sharedLinksViewedByOutsideUser.compactMap { $0 },
        sharedLinksViewedByNotLoggedIn: object.sharedLinksViewedByNotLoggedIn.compactMap { $0 },
        sharedLinksViewedTotal: object.sharedLinksViewedTotal.compactMap { $0 }
    )
}

func mapDBXTeamGetDevicesReportToDBOptional(object: DBXTeamGetDevicesReport?) -> DBTEAMGetDevicesReport? {
    guard let object = object else { return nil }
    return mapDBXTeamGetDevicesReportToDB(object: object)
}

func mapDBXTeamGetDevicesReportToDB(object: DBXTeamGetDevicesReport) -> DBTEAMGetDevicesReport {
    DBTEAMGetDevicesReport(
        startDate: object.startDate,
        active1Day: mapDBXTeamDevicesActiveToDB(object: object.active1Day),
        active7Day: mapDBXTeamDevicesActiveToDB(object: object.active7Day),
        active28Day: mapDBXTeamDevicesActiveToDB(object: object.active28Day)
    )
}

func mapDBXTeamGetMembershipReportToDBOptional(object: DBXTeamGetMembershipReport?) -> DBTEAMGetMembershipReport? {
    guard let object = object else { return nil }
    return mapDBXTeamGetMembershipReportToDB(object: object)
}

func mapDBXTeamGetMembershipReportToDB(object: DBXTeamGetMembershipReport) -> DBTEAMGetMembershipReport {
    DBTEAMGetMembershipReport(
        startDate: object.startDate,
        teamSize: object.teamSize.compactMap { $0 },
        pendingInvites: object.pendingInvites.compactMap { $0 },
        membersJoined: object.membersJoined.compactMap { $0 },
        suspendedMembers: object.suspendedMembers.compactMap { $0 },
        licenses: object.licenses.compactMap { $0 }
    )
}

func mapDBXTeamGetStorageReportToDBOptional(object: DBXTeamGetStorageReport?) -> DBTEAMGetStorageReport? {
    guard let object = object else { return nil }
    return mapDBXTeamGetStorageReportToDB(object: object)
}

func mapDBXTeamGetStorageReportToDB(object: DBXTeamGetStorageReport) -> DBTEAMGetStorageReport {
    DBTEAMGetStorageReport(
        startDate: object.startDate,
        totalUsage: object.totalUsage.compactMap { $0 },
        sharedUsage: object.sharedUsage.compactMap { $0 },
        unsharedUsage: object.unsharedUsage.compactMap { $0 },
        sharedFolders: object.sharedFolders.compactMap { $0 },
        memberStorageMap: object.memberStorageMap.compactMap { $0.map { mapDBXTeamStorageBucketToDB(object: $0) } }
    )
}

func mapDBXTeamGroupAccessTypeToDBOptional(object: DBXTeamGroupAccessType?) -> DBTEAMGroupAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupAccessTypeToDB(object: object)
}

func mapDBXTeamGroupAccessTypeToDB(object: DBXTeamGroupAccessType) -> DBTEAMGroupAccessType {
    if object.asMember != nil {
        return DBTEAMGroupAccessType(member: ())
    }
    if object.asOwner != nil {
        return DBTEAMGroupAccessType(owner: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupCreateArgToDBOptional(object: DBXTeamGroupCreateArg?) -> DBTEAMGroupCreateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupCreateArgToDB(object: object)
}

func mapDBXTeamGroupCreateArgToDB(object: DBXTeamGroupCreateArg) -> DBTEAMGroupCreateArg {
    DBTEAMGroupCreateArg(
        groupName: object.groupName,
        addCreatorAsOwner: object.addCreatorAsOwner,
        groupExternalId: object.groupExternalId,
        groupManagementType: mapDBXTeamCommonGroupManagementTypeToDBOptional(object: object.groupManagementType)
    )
}

func mapDBXTeamGroupCreateErrorToDBOptional(object: DBXTeamGroupCreateError?) -> DBTEAMGroupCreateError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupCreateErrorToDB(object: object)
}

func mapDBXTeamGroupCreateErrorToDB(object: DBXTeamGroupCreateError) -> DBTEAMGroupCreateError {
    if object.asGroupNameAlreadyUsed != nil {
        return DBTEAMGroupCreateError(groupNameAlreadyUsed: ())
    }
    if object.asGroupNameInvalid != nil {
        return DBTEAMGroupCreateError(groupNameInvalid: ())
    }
    if object.asExternalIdAlreadyInUse != nil {
        return DBTEAMGroupCreateError(externalIdAlreadyInUse: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupCreateError(systemManagedGroupDisallowed: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupCreateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupSelectorErrorToDBOptional(object: DBXTeamGroupSelectorError?) -> DBTEAMGroupSelectorError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupSelectorErrorToDB(object: object)
}

func mapDBXTeamGroupSelectorErrorToDB(object: DBXTeamGroupSelectorError) -> DBTEAMGroupSelectorError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupSelectorError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupSelectorError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupSelectorWithTeamGroupErrorToDBOptional(object: DBXTeamGroupSelectorWithTeamGroupError?) -> DBTEAMGroupSelectorWithTeamGroupError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupSelectorWithTeamGroupErrorToDB(object: object)
}

func mapDBXTeamGroupSelectorWithTeamGroupErrorToDB(object: DBXTeamGroupSelectorWithTeamGroupError) -> DBTEAMGroupSelectorWithTeamGroupError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupSelectorWithTeamGroupError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupSelectorWithTeamGroupError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupSelectorWithTeamGroupError(systemManagedGroupDisallowed: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupDeleteErrorToDBOptional(object: DBXTeamGroupDeleteError?) -> DBTEAMGroupDeleteError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupDeleteErrorToDB(object: object)
}

func mapDBXTeamGroupDeleteErrorToDB(object: DBXTeamGroupDeleteError) -> DBTEAMGroupDeleteError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupDeleteError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupDeleteError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupDeleteError(systemManagedGroupDisallowed: ())
    }
    if object.asGroupAlreadyDeleted != nil {
        return DBTEAMGroupDeleteError(groupAlreadyDeleted: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupFullInfoToDBOptional(object: DBXTeamGroupFullInfo?) -> DBTEAMGroupFullInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupFullInfoToDB(object: object)
}

func mapDBXTeamGroupFullInfoToDB(object: DBXTeamGroupFullInfo) -> DBTEAMGroupFullInfo {
    DBTEAMGroupFullInfo(
        groupName: object.groupName,
        groupId: object.groupId,
        groupManagementType: mapDBXTeamCommonGroupManagementTypeToDB(object: object.groupManagementType),
        created: object.created,
        groupExternalId: object.groupExternalId,
        memberCount: object.memberCount,
        members: object.members?.compactMap { mapDBXTeamGroupMemberInfoToDB(object: $0) }
    )
}

func mapDBXTeamGroupMemberInfoToDBOptional(object: DBXTeamGroupMemberInfo?) -> DBTEAMGroupMemberInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMemberInfoToDB(object: object)
}

func mapDBXTeamGroupMemberInfoToDB(object: DBXTeamGroupMemberInfo) -> DBTEAMGroupMemberInfo {
    DBTEAMGroupMemberInfo(profile: mapDBXTeamMemberProfileToDB(object: object.profile), accessType: mapDBXTeamGroupAccessTypeToDB(object: object.accessType))
}

func mapDBXTeamGroupMemberSelectorToDBOptional(object: DBXTeamGroupMemberSelector?) -> DBTEAMGroupMemberSelector? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMemberSelectorToDB(object: object)
}

func mapDBXTeamGroupMemberSelectorToDB(object: DBXTeamGroupMemberSelector) -> DBTEAMGroupMemberSelector {
    DBTEAMGroupMemberSelector(group: mapDBXTeamGroupSelectorToDB(object: object.group), user: mapDBXTeamUserSelectorArgToDB(object: object.user))
}

func mapDBXTeamGroupMemberSelectorErrorToDBOptional(object: DBXTeamGroupMemberSelectorError?) -> DBTEAMGroupMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMemberSelectorErrorToDB(object: object)
}

func mapDBXTeamGroupMemberSelectorErrorToDB(object: DBXTeamGroupMemberSelectorError) -> DBTEAMGroupMemberSelectorError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupMemberSelectorError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupMemberSelectorError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupMemberSelectorError(systemManagedGroupDisallowed: ())
    }
    if object.asMemberNotInGroup != nil {
        return DBTEAMGroupMemberSelectorError(memberNotInGroup: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupMemberSetAccessTypeErrorToDBOptional(object: DBXTeamGroupMemberSetAccessTypeError?) -> DBTEAMGroupMemberSetAccessTypeError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMemberSetAccessTypeErrorToDB(object: object)
}

func mapDBXTeamGroupMemberSetAccessTypeErrorToDB(object: DBXTeamGroupMemberSetAccessTypeError) -> DBTEAMGroupMemberSetAccessTypeError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupMemberSetAccessTypeError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupMemberSetAccessTypeError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupMemberSetAccessTypeError(systemManagedGroupDisallowed: ())
    }
    if object.asMemberNotInGroup != nil {
        return DBTEAMGroupMemberSetAccessTypeError(memberNotInGroup: ())
    }
    if object.asUserCannotBeManagerOfCompanyManagedGroup != nil {
        return DBTEAMGroupMemberSetAccessTypeError(userCannotBeManagerOfCompanyManagedGroup: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamIncludeMembersArgToDBOptional(object: DBXTeamIncludeMembersArg?) -> DBTEAMIncludeMembersArg? {
    guard let object = object else { return nil }
    return mapDBXTeamIncludeMembersArgToDB(object: object)
}

func mapDBXTeamIncludeMembersArgToDB(object: DBXTeamIncludeMembersArg) -> DBTEAMIncludeMembersArg {
    DBTEAMIncludeMembersArg(returnMembers: object.returnMembers)
}

func mapDBXTeamGroupMembersAddArgToDBOptional(object: DBXTeamGroupMembersAddArg?) -> DBTEAMGroupMembersAddArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersAddArgToDB(object: object)
}

func mapDBXTeamGroupMembersAddArgToDB(object: DBXTeamGroupMembersAddArg) -> DBTEAMGroupMembersAddArg {
    DBTEAMGroupMembersAddArg(
        group: mapDBXTeamGroupSelectorToDB(object: object.group),
        members: object.members.compactMap { mapDBXTeamMemberAccessToDB(object: $0) },
        returnMembers: object.returnMembers
    )
}

func mapDBXTeamGroupMembersAddErrorToDBOptional(object: DBXTeamGroupMembersAddError?) -> DBTEAMGroupMembersAddError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersAddErrorToDB(object: object)
}

func mapDBXTeamGroupMembersAddErrorToDB(object: DBXTeamGroupMembersAddError) -> DBTEAMGroupMembersAddError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupMembersAddError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupMembersAddError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupMembersAddError(systemManagedGroupDisallowed: ())
    }
    if object.asDuplicateUser != nil {
        return DBTEAMGroupMembersAddError(duplicateUser: ())
    }
    if object.asGroupNotInTeam != nil {
        return DBTEAMGroupMembersAddError(groupNotInTeam: ())
    }
    if let object = object.asMembersNotInTeam {
        let membersNotInTeam = object.membersNotInTeam
        return DBTEAMGroupMembersAddError(membersNotInTeam: membersNotInTeam)
    }
    if let object = object.asUsersNotFound {
        let usersNotFound = object.usersNotFound
        return DBTEAMGroupMembersAddError(usersNotFound: usersNotFound)
    }
    if object.asUserMustBeActiveToBeOwner != nil {
        return DBTEAMGroupMembersAddError(userMustBeActiveToBeOwner: ())
    }
    if let object = object.asUserCannotBeManagerOfCompanyManagedGroup {
        let userCannotBeManagerOfCompanyManagedGroup = object.userCannotBeManagerOfCompanyManagedGroup
        return DBTEAMGroupMembersAddError(userCannotBeManagerOfCompanyManagedGroup: userCannotBeManagerOfCompanyManagedGroup)
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupMembersChangeResultToDBOptional(object: DBXTeamGroupMembersChangeResult?) -> DBTEAMGroupMembersChangeResult? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersChangeResultToDB(object: object)
}

func mapDBXTeamGroupMembersChangeResultToDB(object: DBXTeamGroupMembersChangeResult) -> DBTEAMGroupMembersChangeResult {
    DBTEAMGroupMembersChangeResult(groupInfo: mapDBXTeamGroupFullInfoToDB(object: object.groupInfo), asyncJobId: object.asyncJobId)
}

func mapDBXTeamGroupMembersRemoveArgToDBOptional(object: DBXTeamGroupMembersRemoveArg?) -> DBTEAMGroupMembersRemoveArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersRemoveArgToDB(object: object)
}

func mapDBXTeamGroupMembersRemoveArgToDB(object: DBXTeamGroupMembersRemoveArg) -> DBTEAMGroupMembersRemoveArg {
    DBTEAMGroupMembersRemoveArg(
        group: mapDBXTeamGroupSelectorToDB(object: object.group),
        users: object.users.compactMap { mapDBXTeamUserSelectorArgToDB(object: $0) },
        returnMembers: object.returnMembers
    )
}

func mapDBXTeamGroupMembersSelectorErrorToDBOptional(object: DBXTeamGroupMembersSelectorError?) -> DBTEAMGroupMembersSelectorError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersSelectorErrorToDB(object: object)
}

func mapDBXTeamGroupMembersSelectorErrorToDB(object: DBXTeamGroupMembersSelectorError) -> DBTEAMGroupMembersSelectorError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupMembersSelectorError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupMembersSelectorError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupMembersSelectorError(systemManagedGroupDisallowed: ())
    }
    if object.asMemberNotInGroup != nil {
        return DBTEAMGroupMembersSelectorError(memberNotInGroup: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupMembersRemoveErrorToDBOptional(object: DBXTeamGroupMembersRemoveError?) -> DBTEAMGroupMembersRemoveError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersRemoveErrorToDB(object: object)
}

func mapDBXTeamGroupMembersRemoveErrorToDB(object: DBXTeamGroupMembersRemoveError) -> DBTEAMGroupMembersRemoveError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupMembersRemoveError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupMembersRemoveError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupMembersRemoveError(systemManagedGroupDisallowed: ())
    }
    if object.asMemberNotInGroup != nil {
        return DBTEAMGroupMembersRemoveError(memberNotInGroup: ())
    }
    if object.asGroupNotInTeam != nil {
        return DBTEAMGroupMembersRemoveError(groupNotInTeam: ())
    }
    if let object = object.asMembersNotInTeam {
        let membersNotInTeam = object.membersNotInTeam
        return DBTEAMGroupMembersRemoveError(membersNotInTeam: membersNotInTeam)
    }
    if let object = object.asUsersNotFound {
        let usersNotFound = object.usersNotFound
        return DBTEAMGroupMembersRemoveError(usersNotFound: usersNotFound)
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupMembersSelectorToDBOptional(object: DBXTeamGroupMembersSelector?) -> DBTEAMGroupMembersSelector? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersSelectorToDB(object: object)
}

func mapDBXTeamGroupMembersSelectorToDB(object: DBXTeamGroupMembersSelector) -> DBTEAMGroupMembersSelector {
    DBTEAMGroupMembersSelector(group: mapDBXTeamGroupSelectorToDB(object: object.group), users: mapDBXTeamUsersSelectorArgToDB(object: object.users))
}

func mapDBXTeamGroupMembersSetAccessTypeArgToDBOptional(object: DBXTeamGroupMembersSetAccessTypeArg?) -> DBTEAMGroupMembersSetAccessTypeArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupMembersSetAccessTypeArgToDB(object: object)
}

func mapDBXTeamGroupMembersSetAccessTypeArgToDB(object: DBXTeamGroupMembersSetAccessTypeArg) -> DBTEAMGroupMembersSetAccessTypeArg {
    DBTEAMGroupMembersSetAccessTypeArg(
        group: mapDBXTeamGroupSelectorToDB(object: object.group),
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        accessType: mapDBXTeamGroupAccessTypeToDB(object: object.accessType),
        returnMembers: object.returnMembers
    )
}

func mapDBXTeamGroupSelectorToDBOptional(object: DBXTeamGroupSelector?) -> DBTEAMGroupSelector? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupSelectorToDB(object: object)
}

func mapDBXTeamGroupSelectorToDB(object: DBXTeamGroupSelector) -> DBTEAMGroupSelector {
    if let object = object.asGroupId {
        let groupId = object.groupId
        return DBTEAMGroupSelector(groupId: groupId)
    }
    if let object = object.asGroupExternalId {
        let groupExternalId = object.groupExternalId
        return DBTEAMGroupSelector(groupExternalId: groupExternalId)
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupUpdateArgsToDBOptional(object: DBXTeamGroupUpdateArgs?) -> DBTEAMGroupUpdateArgs? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupUpdateArgsToDB(object: object)
}

func mapDBXTeamGroupUpdateArgsToDB(object: DBXTeamGroupUpdateArgs) -> DBTEAMGroupUpdateArgs {
    DBTEAMGroupUpdateArgs(
        group: mapDBXTeamGroupSelectorToDB(object: object.group),
        returnMembers: object.returnMembers,
        dNewGroupName: object.newGroupName,
        dNewGroupExternalId: object.newGroupExternalId,
        dNewGroupManagementType: mapDBXTeamCommonGroupManagementTypeToDBOptional(object: object.newGroupManagementType)
    )
}

func mapDBXTeamGroupUpdateErrorToDBOptional(object: DBXTeamGroupUpdateError?) -> DBTEAMGroupUpdateError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupUpdateErrorToDB(object: object)
}

func mapDBXTeamGroupUpdateErrorToDB(object: DBXTeamGroupUpdateError) -> DBTEAMGroupUpdateError {
    if object.asGroupNotFound != nil {
        return DBTEAMGroupUpdateError(groupNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupUpdateError(other: ())
    }
    if object.asSystemManagedGroupDisallowed != nil {
        return DBTEAMGroupUpdateError(systemManagedGroupDisallowed: ())
    }
    if object.asGroupNameAlreadyUsed != nil {
        return DBTEAMGroupUpdateError(groupNameAlreadyUsed: ())
    }
    if object.asGroupNameInvalid != nil {
        return DBTEAMGroupUpdateError(groupNameInvalid: ())
    }
    if object.asExternalIdAlreadyInUse != nil {
        return DBTEAMGroupUpdateError(externalIdAlreadyInUse: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsGetInfoErrorToDBOptional(object: DBXTeamGroupsGetInfoError?) -> DBTEAMGroupsGetInfoError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsGetInfoErrorToDB(object: object)
}

func mapDBXTeamGroupsGetInfoErrorToDB(object: DBXTeamGroupsGetInfoError) -> DBTEAMGroupsGetInfoError {
    if object.asGroupNotOnTeam != nil {
        return DBTEAMGroupsGetInfoError(groupNotOnTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupsGetInfoError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsGetInfoItemToDBOptional(object: DBXTeamGroupsGetInfoItem?) -> DBTEAMGroupsGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsGetInfoItemToDB(object: object)
}

func mapDBXTeamGroupsGetInfoItemToDB(object: DBXTeamGroupsGetInfoItem) -> DBTEAMGroupsGetInfoItem {
    if let object = object.asIdNotFound {
        let idNotFound = object.idNotFound
        return DBTEAMGroupsGetInfoItem(idNotFound: idNotFound)
    }
    if let object = object.asGroupInfo {
        let groupInfo = mapDBXTeamGroupFullInfoToDB(object: object.groupInfo)
        return DBTEAMGroupsGetInfoItem(groupInfo: groupInfo)
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsListArgToDBOptional(object: DBXTeamGroupsListArg?) -> DBTEAMGroupsListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsListArgToDB(object: object)
}

func mapDBXTeamGroupsListArgToDB(object: DBXTeamGroupsListArg) -> DBTEAMGroupsListArg {
    DBTEAMGroupsListArg(limit: object.limit)
}

func mapDBXTeamGroupsListContinueArgToDBOptional(object: DBXTeamGroupsListContinueArg?) -> DBTEAMGroupsListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsListContinueArgToDB(object: object)
}

func mapDBXTeamGroupsListContinueArgToDB(object: DBXTeamGroupsListContinueArg) -> DBTEAMGroupsListContinueArg {
    DBTEAMGroupsListContinueArg(cursor: object.cursor)
}

func mapDBXTeamGroupsListContinueErrorToDBOptional(object: DBXTeamGroupsListContinueError?) -> DBTEAMGroupsListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsListContinueErrorToDB(object: object)
}

func mapDBXTeamGroupsListContinueErrorToDB(object: DBXTeamGroupsListContinueError) -> DBTEAMGroupsListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMGroupsListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupsListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsListResultToDBOptional(object: DBXTeamGroupsListResult?) -> DBTEAMGroupsListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsListResultToDB(object: object)
}

func mapDBXTeamGroupsListResultToDB(object: DBXTeamGroupsListResult) -> DBTEAMGroupsListResult {
    DBTEAMGroupsListResult(groups: object.groups.compactMap { mapDBXTeamCommonGroupSummaryToDB(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBXTeamGroupsMembersListArgToDBOptional(object: DBXTeamGroupsMembersListArg?) -> DBTEAMGroupsMembersListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsMembersListArgToDB(object: object)
}

func mapDBXTeamGroupsMembersListArgToDB(object: DBXTeamGroupsMembersListArg) -> DBTEAMGroupsMembersListArg {
    DBTEAMGroupsMembersListArg(group: mapDBXTeamGroupSelectorToDB(object: object.group), limit: object.limit)
}

func mapDBXTeamGroupsMembersListContinueArgToDBOptional(object: DBXTeamGroupsMembersListContinueArg?) -> DBTEAMGroupsMembersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsMembersListContinueArgToDB(object: object)
}

func mapDBXTeamGroupsMembersListContinueArgToDB(object: DBXTeamGroupsMembersListContinueArg) -> DBTEAMGroupsMembersListContinueArg {
    DBTEAMGroupsMembersListContinueArg(cursor: object.cursor)
}

func mapDBXTeamGroupsMembersListContinueErrorToDBOptional(object: DBXTeamGroupsMembersListContinueError?) -> DBTEAMGroupsMembersListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsMembersListContinueErrorToDB(object: object)
}

func mapDBXTeamGroupsMembersListContinueErrorToDB(object: DBXTeamGroupsMembersListContinueError) -> DBTEAMGroupsMembersListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMGroupsMembersListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupsMembersListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsMembersListResultToDBOptional(object: DBXTeamGroupsMembersListResult?) -> DBTEAMGroupsMembersListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsMembersListResultToDB(object: object)
}

func mapDBXTeamGroupsMembersListResultToDB(object: DBXTeamGroupsMembersListResult) -> DBTEAMGroupsMembersListResult {
    DBTEAMGroupsMembersListResult(
        members: object.members.compactMap { mapDBXTeamGroupMemberInfoToDB(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBXTeamGroupsPollErrorToDBOptional(object: DBXTeamGroupsPollError?) -> DBTEAMGroupsPollError? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsPollErrorToDB(object: object)
}

func mapDBXTeamGroupsPollErrorToDB(object: DBXTeamGroupsPollError) -> DBTEAMGroupsPollError {
    if object.asInvalidAsyncJobId != nil {
        return DBTEAMGroupsPollError(invalidAsyncJobId: ())
    }
    if object.asInternalError != nil {
        return DBTEAMGroupsPollError(internalError: ())
    }
    if object.asOther != nil {
        return DBTEAMGroupsPollError(other: ())
    }
    if object.asAccessDenied != nil {
        return DBTEAMGroupsPollError(accessDenied: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamGroupsSelectorToDBOptional(object: DBXTeamGroupsSelector?) -> DBTEAMGroupsSelector? {
    guard let object = object else { return nil }
    return mapDBXTeamGroupsSelectorToDB(object: object)
}

func mapDBXTeamGroupsSelectorToDB(object: DBXTeamGroupsSelector) -> DBTEAMGroupsSelector {
    if let object = object.asGroupIds {
        let groupIds = object.groupIds
        return DBTEAMGroupsSelector(groupIds: groupIds)
    }
    if let object = object.asGroupExternalIds {
        let groupExternalIds = object.groupExternalIds
        return DBTEAMGroupsSelector(groupExternalIds: groupExternalIds)
    }
    fatalError("codegen error")
}

func mapDBXTeamHasTeamFileEventsValueToDBOptional(object: DBXTeamHasTeamFileEventsValue?) -> DBTEAMHasTeamFileEventsValue? {
    guard let object = object else { return nil }
    return mapDBXTeamHasTeamFileEventsValueToDB(object: object)
}

func mapDBXTeamHasTeamFileEventsValueToDB(object: DBXTeamHasTeamFileEventsValue) -> DBTEAMHasTeamFileEventsValue {
    if let object = object.asEnabled {
        let enabled = object.enabled
        return DBTEAMHasTeamFileEventsValue(enabled: enabled)
    }
    if object.asOther != nil {
        return DBTEAMHasTeamFileEventsValue(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamHasTeamSelectiveSyncValueToDBOptional(object: DBXTeamHasTeamSelectiveSyncValue?) -> DBTEAMHasTeamSelectiveSyncValue? {
    guard let object = object else { return nil }
    return mapDBXTeamHasTeamSelectiveSyncValueToDB(object: object)
}

func mapDBXTeamHasTeamSelectiveSyncValueToDB(object: DBXTeamHasTeamSelectiveSyncValue) -> DBTEAMHasTeamSelectiveSyncValue {
    if let object = object.asHasTeamSelectiveSync {
        let hasTeamSelectiveSync = object.hasTeamSelectiveSync
        return DBTEAMHasTeamSelectiveSyncValue(hasTeamSelectiveSync: hasTeamSelectiveSync)
    }
    if object.asOther != nil {
        return DBTEAMHasTeamSelectiveSyncValue(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamHasTeamSharedDropboxValueToDBOptional(object: DBXTeamHasTeamSharedDropboxValue?) -> DBTEAMHasTeamSharedDropboxValue? {
    guard let object = object else { return nil }
    return mapDBXTeamHasTeamSharedDropboxValueToDB(object: object)
}

func mapDBXTeamHasTeamSharedDropboxValueToDB(object: DBXTeamHasTeamSharedDropboxValue) -> DBTEAMHasTeamSharedDropboxValue {
    if let object = object.asHasTeamSharedDropbox {
        let hasTeamSharedDropbox = object.hasTeamSharedDropbox
        return DBTEAMHasTeamSharedDropboxValue(hasTeamSharedDropbox: hasTeamSharedDropbox)
    }
    if object.asOther != nil {
        return DBTEAMHasTeamSharedDropboxValue(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldHeldRevisionMetadataToDBOptional(object: DBXTeamLegalHoldHeldRevisionMetadata?) -> DBTEAMLegalHoldHeldRevisionMetadata? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldHeldRevisionMetadataToDB(object: object)
}

func mapDBXTeamLegalHoldHeldRevisionMetadataToDB(object: DBXTeamLegalHoldHeldRevisionMetadata) -> DBTEAMLegalHoldHeldRevisionMetadata {
    DBTEAMLegalHoldHeldRevisionMetadata(
        dNewFilename: object.newFilename,
        originalRevisionId: object.originalRevisionId,
        originalFilePath: object.originalFilePath,
        serverModified: object.serverModified,
        authorMemberId: object.authorMemberId,
        authorMemberStatus: mapDBXTeamTeamMemberStatusToDB(object: object.authorMemberStatus),
        authorEmail: object.authorEmail,
        fileType: object.fileType,
        size: object.size,
        contentHash: object.contentHash
    )
}

func mapDBXTeamLegalHoldPolicyToDBOptional(object: DBXTeamLegalHoldPolicy?) -> DBTEAMLegalHoldPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldPolicyToDB(object: object)
}

func mapDBXTeamLegalHoldPolicyToDB(object: DBXTeamLegalHoldPolicy) -> DBTEAMLegalHoldPolicy {
    DBTEAMLegalHoldPolicy(
        id_: object.id,
        name: object.name,
        members: mapDBXTeamMembersInfoToDB(object: object.members),
        status: mapDBXTeamLegalHoldStatusToDB(object: object.status),
        startDate: object.startDate,
        description_: object.description_,
        activationTime: object.activationTime,
        endDate: object.endDate
    )
}

func mapDBXTeamLegalHoldStatusToDBOptional(object: DBXTeamLegalHoldStatus?) -> DBTEAMLegalHoldStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldStatusToDB(object: object)
}

func mapDBXTeamLegalHoldStatusToDB(object: DBXTeamLegalHoldStatus) -> DBTEAMLegalHoldStatus {
    if object.asActive != nil {
        return DBTEAMLegalHoldStatus(active: ())
    }
    if object.asReleased != nil {
        return DBTEAMLegalHoldStatus(released: ())
    }
    if object.asActivating != nil {
        return DBTEAMLegalHoldStatus(activating: ())
    }
    if object.asUpdating != nil {
        return DBTEAMLegalHoldStatus(updating: ())
    }
    if object.asExporting != nil {
        return DBTEAMLegalHoldStatus(exporting: ())
    }
    if object.asReleasing != nil {
        return DBTEAMLegalHoldStatus(releasing: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsErrorToDBOptional(object: DBXTeamLegalHoldsError?) -> DBTEAMLegalHoldsError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsErrorToDB(object: DBXTeamLegalHoldsError) -> DBTEAMLegalHoldsError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsGetPolicyArgToDBOptional(object: DBXTeamLegalHoldsGetPolicyArg?) -> DBTEAMLegalHoldsGetPolicyArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsGetPolicyArgToDB(object: object)
}

func mapDBXTeamLegalHoldsGetPolicyArgToDB(object: DBXTeamLegalHoldsGetPolicyArg) -> DBTEAMLegalHoldsGetPolicyArg {
    DBTEAMLegalHoldsGetPolicyArg(id_: object.id)
}

func mapDBXTeamLegalHoldsGetPolicyErrorToDBOptional(object: DBXTeamLegalHoldsGetPolicyError?) -> DBTEAMLegalHoldsGetPolicyError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsGetPolicyErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsGetPolicyErrorToDB(object: DBXTeamLegalHoldsGetPolicyError) -> DBTEAMLegalHoldsGetPolicyError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsGetPolicyError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsGetPolicyError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsGetPolicyError(other: ())
    }
    if object.asLegalHoldPolicyNotFound != nil {
        return DBTEAMLegalHoldsGetPolicyError(legalHoldPolicyNotFound: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsListHeldRevisionResultToDBOptional(object: DBXTeamLegalHoldsListHeldRevisionResult?) -> DBTEAMLegalHoldsListHeldRevisionResult? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListHeldRevisionResultToDB(object: object)
}

func mapDBXTeamLegalHoldsListHeldRevisionResultToDB(object: DBXTeamLegalHoldsListHeldRevisionResult) -> DBTEAMLegalHoldsListHeldRevisionResult {
    DBTEAMLegalHoldsListHeldRevisionResult(
        entries: object.entries.compactMap { mapDBXTeamLegalHoldHeldRevisionMetadataToDB(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBXTeamLegalHoldsListHeldRevisionsArgToDBOptional(object: DBXTeamLegalHoldsListHeldRevisionsArg?) -> DBTEAMLegalHoldsListHeldRevisionsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListHeldRevisionsArgToDB(object: object)
}

func mapDBXTeamLegalHoldsListHeldRevisionsArgToDB(object: DBXTeamLegalHoldsListHeldRevisionsArg) -> DBTEAMLegalHoldsListHeldRevisionsArg {
    DBTEAMLegalHoldsListHeldRevisionsArg(id_: object.id)
}

func mapDBXTeamLegalHoldsListHeldRevisionsContinueArgToDBOptional(object: DBXTeamLegalHoldsListHeldRevisionsContinueArg?)
    -> DBTEAMLegalHoldsListHeldRevisionsContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListHeldRevisionsContinueArgToDB(object: object)
}

func mapDBXTeamLegalHoldsListHeldRevisionsContinueArgToDB(object: DBXTeamLegalHoldsListHeldRevisionsContinueArg)
    -> DBTEAMLegalHoldsListHeldRevisionsContinueArg {
    DBTEAMLegalHoldsListHeldRevisionsContinueArg(id_: object.id, cursor: object.cursor)
}

func mapDBXTeamLegalHoldsListHeldRevisionsContinueErrorToDBOptional(object: DBXTeamLegalHoldsListHeldRevisionsContinueError?)
    -> DBTEAMLegalHoldsListHeldRevisionsContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListHeldRevisionsContinueErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsListHeldRevisionsContinueErrorToDB(object: DBXTeamLegalHoldsListHeldRevisionsContinueError)
    -> DBTEAMLegalHoldsListHeldRevisionsContinueError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsListHeldRevisionsContinueError(unknownLegalHoldError: ())
    }
    if object.asTransientError != nil {
        return DBTEAMLegalHoldsListHeldRevisionsContinueError(transientError: ())
    }
    if object.asReset != nil {
        return DBTEAMLegalHoldsListHeldRevisionsContinueError(reset: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsListHeldRevisionsContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsListHeldRevisionsErrorToDBOptional(object: DBXTeamLegalHoldsListHeldRevisionsError?) -> DBTEAMLegalHoldsListHeldRevisionsError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListHeldRevisionsErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsListHeldRevisionsErrorToDB(object: DBXTeamLegalHoldsListHeldRevisionsError) -> DBTEAMLegalHoldsListHeldRevisionsError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(other: ())
    }
    if object.asTransientError != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(transientError: ())
    }
    if object.asLegalHoldStillEmpty != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(legalHoldStillEmpty: ())
    }
    if object.asInactiveLegalHold != nil {
        return DBTEAMLegalHoldsListHeldRevisionsError(inactiveLegalHold: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsListPoliciesArgToDBOptional(object: DBXTeamLegalHoldsListPoliciesArg?) -> DBTEAMLegalHoldsListPoliciesArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListPoliciesArgToDB(object: object)
}

func mapDBXTeamLegalHoldsListPoliciesArgToDB(object: DBXTeamLegalHoldsListPoliciesArg) -> DBTEAMLegalHoldsListPoliciesArg {
    DBTEAMLegalHoldsListPoliciesArg(includeReleased: object.includeReleased)
}

func mapDBXTeamLegalHoldsListPoliciesErrorToDBOptional(object: DBXTeamLegalHoldsListPoliciesError?) -> DBTEAMLegalHoldsListPoliciesError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListPoliciesErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsListPoliciesErrorToDB(object: DBXTeamLegalHoldsListPoliciesError) -> DBTEAMLegalHoldsListPoliciesError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsListPoliciesError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsListPoliciesError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsListPoliciesError(other: ())
    }
    if object.asTransientError != nil {
        return DBTEAMLegalHoldsListPoliciesError(transientError: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsListPoliciesResultToDBOptional(object: DBXTeamLegalHoldsListPoliciesResult?) -> DBTEAMLegalHoldsListPoliciesResult? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsListPoliciesResultToDB(object: object)
}

func mapDBXTeamLegalHoldsListPoliciesResultToDB(object: DBXTeamLegalHoldsListPoliciesResult) -> DBTEAMLegalHoldsListPoliciesResult {
    DBTEAMLegalHoldsListPoliciesResult(policies: object.policies.compactMap { mapDBXTeamLegalHoldPolicyToDB(object: $0) })
}

func mapDBXTeamLegalHoldsPolicyCreateArgToDBOptional(object: DBXTeamLegalHoldsPolicyCreateArg?) -> DBTEAMLegalHoldsPolicyCreateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyCreateArgToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyCreateArgToDB(object: DBXTeamLegalHoldsPolicyCreateArg) -> DBTEAMLegalHoldsPolicyCreateArg {
    DBTEAMLegalHoldsPolicyCreateArg(
        name: object.name,
        members: object.members,
        description_: object.description_,
        startDate: object.startDate,
        endDate: object.endDate
    )
}

func mapDBXTeamLegalHoldsPolicyCreateErrorToDBOptional(object: DBXTeamLegalHoldsPolicyCreateError?) -> DBTEAMLegalHoldsPolicyCreateError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyCreateErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyCreateErrorToDB(object: DBXTeamLegalHoldsPolicyCreateError) -> DBTEAMLegalHoldsPolicyCreateError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsPolicyCreateError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsPolicyCreateError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsPolicyCreateError(other: ())
    }
    if object.asStartDateIsLaterThanEndDate != nil {
        return DBTEAMLegalHoldsPolicyCreateError(startDateIsLaterThanEndDate: ())
    }
    if object.asEmptyMembersList != nil {
        return DBTEAMLegalHoldsPolicyCreateError(emptyMembersList: ())
    }
    if object.asInvalidMembers != nil {
        return DBTEAMLegalHoldsPolicyCreateError(invalidMembers: ())
    }
    if object.asNumberOfUsersOnHoldIsGreaterThanHoldLimitation != nil {
        return DBTEAMLegalHoldsPolicyCreateError(numberOfUsersOnHoldIsGreaterThanHoldLimitation: ())
    }
    if object.asTransientError != nil {
        return DBTEAMLegalHoldsPolicyCreateError(transientError: ())
    }
    if object.asNameMustBeUnique != nil {
        return DBTEAMLegalHoldsPolicyCreateError(nameMustBeUnique: ())
    }
    if object.asTeamExceededLegalHoldQuota != nil {
        return DBTEAMLegalHoldsPolicyCreateError(teamExceededLegalHoldQuota: ())
    }
    if object.asInvalidDate != nil {
        return DBTEAMLegalHoldsPolicyCreateError(invalidDate: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsPolicyReleaseArgToDBOptional(object: DBXTeamLegalHoldsPolicyReleaseArg?) -> DBTEAMLegalHoldsPolicyReleaseArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyReleaseArgToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyReleaseArgToDB(object: DBXTeamLegalHoldsPolicyReleaseArg) -> DBTEAMLegalHoldsPolicyReleaseArg {
    DBTEAMLegalHoldsPolicyReleaseArg(id_: object.id)
}

func mapDBXTeamLegalHoldsPolicyReleaseErrorToDBOptional(object: DBXTeamLegalHoldsPolicyReleaseError?) -> DBTEAMLegalHoldsPolicyReleaseError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyReleaseErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyReleaseErrorToDB(object: DBXTeamLegalHoldsPolicyReleaseError) -> DBTEAMLegalHoldsPolicyReleaseError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(other: ())
    }
    if object.asLegalHoldPerformingAnotherOperation != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(legalHoldPerformingAnotherOperation: ())
    }
    if object.asLegalHoldAlreadyReleasing != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(legalHoldAlreadyReleasing: ())
    }
    if object.asLegalHoldPolicyNotFound != nil {
        return DBTEAMLegalHoldsPolicyReleaseError(legalHoldPolicyNotFound: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLegalHoldsPolicyUpdateArgToDBOptional(object: DBXTeamLegalHoldsPolicyUpdateArg?) -> DBTEAMLegalHoldsPolicyUpdateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyUpdateArgToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyUpdateArgToDB(object: DBXTeamLegalHoldsPolicyUpdateArg) -> DBTEAMLegalHoldsPolicyUpdateArg {
    DBTEAMLegalHoldsPolicyUpdateArg(id_: object.id, name: object.name, description_: object.description_, members: object.members)
}

func mapDBXTeamLegalHoldsPolicyUpdateErrorToDBOptional(object: DBXTeamLegalHoldsPolicyUpdateError?) -> DBTEAMLegalHoldsPolicyUpdateError? {
    guard let object = object else { return nil }
    return mapDBXTeamLegalHoldsPolicyUpdateErrorToDB(object: object)
}

func mapDBXTeamLegalHoldsPolicyUpdateErrorToDB(object: DBXTeamLegalHoldsPolicyUpdateError) -> DBTEAMLegalHoldsPolicyUpdateError {
    if object.asUnknownLegalHoldError != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(unknownLegalHoldError: ())
    }
    if object.asInsufficientPermissions != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(insufficientPermissions: ())
    }
    if object.asOther != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(other: ())
    }
    if object.asTransientError != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(transientError: ())
    }
    if object.asInactiveLegalHold != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(inactiveLegalHold: ())
    }
    if object.asLegalHoldPerformingAnotherOperation != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(legalHoldPerformingAnotherOperation: ())
    }
    if object.asInvalidMembers != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(invalidMembers: ())
    }
    if object.asNumberOfUsersOnHoldIsGreaterThanHoldLimitation != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(numberOfUsersOnHoldIsGreaterThanHoldLimitation: ())
    }
    if object.asEmptyMembersList != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(emptyMembersList: ())
    }
    if object.asNameMustBeUnique != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(nameMustBeUnique: ())
    }
    if object.asLegalHoldPolicyNotFound != nil {
        return DBTEAMLegalHoldsPolicyUpdateError(legalHoldPolicyNotFound: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListMemberAppsArgToDBOptional(object: DBXTeamListMemberAppsArg?) -> DBTEAMListMemberAppsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberAppsArgToDB(object: object)
}

func mapDBXTeamListMemberAppsArgToDB(object: DBXTeamListMemberAppsArg) -> DBTEAMListMemberAppsArg {
    DBTEAMListMemberAppsArg(teamMemberId: object.teamMemberId)
}

func mapDBXTeamListMemberAppsErrorToDBOptional(object: DBXTeamListMemberAppsError?) -> DBTEAMListMemberAppsError? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberAppsErrorToDB(object: object)
}

func mapDBXTeamListMemberAppsErrorToDB(object: DBXTeamListMemberAppsError) -> DBTEAMListMemberAppsError {
    if object.asMemberNotFound != nil {
        return DBTEAMListMemberAppsError(memberNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMListMemberAppsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListMemberAppsResultToDBOptional(object: DBXTeamListMemberAppsResult?) -> DBTEAMListMemberAppsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberAppsResultToDB(object: object)
}

func mapDBXTeamListMemberAppsResultToDB(object: DBXTeamListMemberAppsResult) -> DBTEAMListMemberAppsResult {
    DBTEAMListMemberAppsResult(linkedApiApps: object.linkedApiApps.compactMap { mapDBXTeamApiAppToDB(object: $0) })
}

func mapDBXTeamListMemberDevicesArgToDBOptional(object: DBXTeamListMemberDevicesArg?) -> DBTEAMListMemberDevicesArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberDevicesArgToDB(object: object)
}

func mapDBXTeamListMemberDevicesArgToDB(object: DBXTeamListMemberDevicesArg) -> DBTEAMListMemberDevicesArg {
    DBTEAMListMemberDevicesArg(
        teamMemberId: object.teamMemberId,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBXTeamListMemberDevicesErrorToDBOptional(object: DBXTeamListMemberDevicesError?) -> DBTEAMListMemberDevicesError? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberDevicesErrorToDB(object: object)
}

func mapDBXTeamListMemberDevicesErrorToDB(object: DBXTeamListMemberDevicesError) -> DBTEAMListMemberDevicesError {
    if object.asMemberNotFound != nil {
        return DBTEAMListMemberDevicesError(memberNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMListMemberDevicesError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListMemberDevicesResultToDBOptional(object: DBXTeamListMemberDevicesResult?) -> DBTEAMListMemberDevicesResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListMemberDevicesResultToDB(object: object)
}

func mapDBXTeamListMemberDevicesResultToDB(object: DBXTeamListMemberDevicesResult) -> DBTEAMListMemberDevicesResult {
    DBTEAMListMemberDevicesResult(
        activeWebSessions: object.activeWebSessions?.compactMap { mapDBXTeamActiveWebSessionToDB(object: $0) },
        desktopClientSessions: object.desktopClientSessions?.compactMap { mapDBXTeamDesktopClientSessionToDB(object: $0) },
        mobileClientSessions: object.mobileClientSessions?.compactMap { mapDBXTeamMobileClientSessionToDB(object: $0) }
    )
}

func mapDBXTeamListMembersAppsArgToDBOptional(object: DBXTeamListMembersAppsArg?) -> DBTEAMListMembersAppsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersAppsArgToDB(object: object)
}

func mapDBXTeamListMembersAppsArgToDB(object: DBXTeamListMembersAppsArg) -> DBTEAMListMembersAppsArg {
    DBTEAMListMembersAppsArg(cursor: object.cursor)
}

func mapDBXTeamListMembersAppsErrorToDBOptional(object: DBXTeamListMembersAppsError?) -> DBTEAMListMembersAppsError? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersAppsErrorToDB(object: object)
}

func mapDBXTeamListMembersAppsErrorToDB(object: DBXTeamListMembersAppsError) -> DBTEAMListMembersAppsError {
    if object.asReset != nil {
        return DBTEAMListMembersAppsError(reset: ())
    }
    if object.asOther != nil {
        return DBTEAMListMembersAppsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListMembersAppsResultToDBOptional(object: DBXTeamListMembersAppsResult?) -> DBTEAMListMembersAppsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersAppsResultToDB(object: object)
}

func mapDBXTeamListMembersAppsResultToDB(object: DBXTeamListMembersAppsResult) -> DBTEAMListMembersAppsResult {
    DBTEAMListMembersAppsResult(apps: object.apps.compactMap { mapDBXTeamMemberLinkedAppsToDB(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBXTeamListMembersDevicesArgToDBOptional(object: DBXTeamListMembersDevicesArg?) -> DBTEAMListMembersDevicesArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersDevicesArgToDB(object: object)
}

func mapDBXTeamListMembersDevicesArgToDB(object: DBXTeamListMembersDevicesArg) -> DBTEAMListMembersDevicesArg {
    DBTEAMListMembersDevicesArg(
        cursor: object.cursor,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBXTeamListMembersDevicesErrorToDBOptional(object: DBXTeamListMembersDevicesError?) -> DBTEAMListMembersDevicesError? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersDevicesErrorToDB(object: object)
}

func mapDBXTeamListMembersDevicesErrorToDB(object: DBXTeamListMembersDevicesError) -> DBTEAMListMembersDevicesError {
    if object.asReset != nil {
        return DBTEAMListMembersDevicesError(reset: ())
    }
    if object.asOther != nil {
        return DBTEAMListMembersDevicesError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListMembersDevicesResultToDBOptional(object: DBXTeamListMembersDevicesResult?) -> DBTEAMListMembersDevicesResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListMembersDevicesResultToDB(object: object)
}

func mapDBXTeamListMembersDevicesResultToDB(object: DBXTeamListMembersDevicesResult) -> DBTEAMListMembersDevicesResult {
    DBTEAMListMembersDevicesResult(
        devices: object.devices.compactMap { mapDBXTeamMemberDevicesToDB(object: $0) },
        hasMore: object.hasMore,
        cursor: object.cursor
    )
}

func mapDBXTeamListTeamAppsArgToDBOptional(object: DBXTeamListTeamAppsArg?) -> DBTEAMListTeamAppsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamAppsArgToDB(object: object)
}

func mapDBXTeamListTeamAppsArgToDB(object: DBXTeamListTeamAppsArg) -> DBTEAMListTeamAppsArg {
    DBTEAMListTeamAppsArg(cursor: object.cursor)
}

func mapDBXTeamListTeamAppsErrorToDBOptional(object: DBXTeamListTeamAppsError?) -> DBTEAMListTeamAppsError? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamAppsErrorToDB(object: object)
}

func mapDBXTeamListTeamAppsErrorToDB(object: DBXTeamListTeamAppsError) -> DBTEAMListTeamAppsError {
    if object.asReset != nil {
        return DBTEAMListTeamAppsError(reset: ())
    }
    if object.asOther != nil {
        return DBTEAMListTeamAppsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListTeamAppsResultToDBOptional(object: DBXTeamListTeamAppsResult?) -> DBTEAMListTeamAppsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamAppsResultToDB(object: object)
}

func mapDBXTeamListTeamAppsResultToDB(object: DBXTeamListTeamAppsResult) -> DBTEAMListTeamAppsResult {
    DBTEAMListTeamAppsResult(apps: object.apps.compactMap { mapDBXTeamMemberLinkedAppsToDB(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBXTeamListTeamDevicesArgToDBOptional(object: DBXTeamListTeamDevicesArg?) -> DBTEAMListTeamDevicesArg? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamDevicesArgToDB(object: object)
}

func mapDBXTeamListTeamDevicesArgToDB(object: DBXTeamListTeamDevicesArg) -> DBTEAMListTeamDevicesArg {
    DBTEAMListTeamDevicesArg(
        cursor: object.cursor,
        includeWebSessions: object.includeWebSessions,
        includeDesktopClients: object.includeDesktopClients,
        includeMobileClients: object.includeMobileClients
    )
}

func mapDBXTeamListTeamDevicesErrorToDBOptional(object: DBXTeamListTeamDevicesError?) -> DBTEAMListTeamDevicesError? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamDevicesErrorToDB(object: object)
}

func mapDBXTeamListTeamDevicesErrorToDB(object: DBXTeamListTeamDevicesError) -> DBTEAMListTeamDevicesError {
    if object.asReset != nil {
        return DBTEAMListTeamDevicesError(reset: ())
    }
    if object.asOther != nil {
        return DBTEAMListTeamDevicesError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamListTeamDevicesResultToDBOptional(object: DBXTeamListTeamDevicesResult?) -> DBTEAMListTeamDevicesResult? {
    guard let object = object else { return nil }
    return mapDBXTeamListTeamDevicesResultToDB(object: object)
}

func mapDBXTeamListTeamDevicesResultToDB(object: DBXTeamListTeamDevicesResult) -> DBTEAMListTeamDevicesResult {
    DBTEAMListTeamDevicesResult(devices: object.devices.compactMap { mapDBXTeamMemberDevicesToDB(object: $0) }, hasMore: object.hasMore, cursor: object.cursor)
}

func mapDBXTeamMemberAccessToDBOptional(object: DBXTeamMemberAccess?) -> DBTEAMMemberAccess? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAccessToDB(object: object)
}

func mapDBXTeamMemberAccessToDB(object: DBXTeamMemberAccess) -> DBTEAMMemberAccess {
    DBTEAMMemberAccess(user: mapDBXTeamUserSelectorArgToDB(object: object.user), accessType: mapDBXTeamGroupAccessTypeToDB(object: object.accessType))
}

func mapDBXTeamMemberAddArgBaseToDBOptional(object: DBXTeamMemberAddArgBase?) -> DBTEAMMemberAddArgBase? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddArgBaseToDB(object: object)
}

func mapDBXTeamMemberAddArgBaseToDB(object: DBXTeamMemberAddArgBase) -> DBTEAMMemberAddArgBase {
    DBTEAMMemberAddArgBase(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted
    )
}

func mapDBXTeamMemberAddArgToDBOptional(object: DBXTeamMemberAddArg?) -> DBTEAMMemberAddArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddArgToDB(object: object)
}

func mapDBXTeamMemberAddArgToDB(object: DBXTeamMemberAddArg) -> DBTEAMMemberAddArg {
    DBTEAMMemberAddArg(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted,
        role: mapDBXTeamAdminTierToDB(object: object.role)
    )
}

func mapDBXTeamMemberAddResultBaseToDBOptional(object: DBXTeamMemberAddResultBase?) -> DBTEAMMemberAddResultBase? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddResultBaseToDB(object: object)
}

func mapDBXTeamMemberAddResultBaseToDB(object: DBXTeamMemberAddResultBase) -> DBTEAMMemberAddResultBase {
    if let object = object.asTeamLicenseLimit {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBTEAMMemberAddResultBase(teamLicenseLimit: teamLicenseLimit)
    }
    if let object = object.asFreeTeamMemberLimitReached {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBTEAMMemberAddResultBase(freeTeamMemberLimitReached: freeTeamMemberLimitReached)
    }
    if let object = object.asUserAlreadyOnTeam {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBTEAMMemberAddResultBase(userAlreadyOnTeam: userAlreadyOnTeam)
    }
    if let object = object.asUserOnAnotherTeam {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBTEAMMemberAddResultBase(userOnAnotherTeam: userOnAnotherTeam)
    }
    if let object = object.asUserAlreadyPaired {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBTEAMMemberAddResultBase(userAlreadyPaired: userAlreadyPaired)
    }
    if let object = object.asUserMigrationFailed {
        let userMigrationFailed = object.userMigrationFailed
        return DBTEAMMemberAddResultBase(userMigrationFailed: userMigrationFailed)
    }
    if let object = object.asDuplicateExternalMemberId {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBTEAMMemberAddResultBase(duplicateExternalMemberId: duplicateExternalMemberId)
    }
    if let object = object.asDuplicateMemberPersistentId {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBTEAMMemberAddResultBase(duplicateMemberPersistentId: duplicateMemberPersistentId)
    }
    if let object = object.asPersistentIdDisabled {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBTEAMMemberAddResultBase(persistentIdDisabled: persistentIdDisabled)
    }
    if let object = object.asUserCreationFailed {
        let userCreationFailed = object.userCreationFailed
        return DBTEAMMemberAddResultBase(userCreationFailed: userCreationFailed)
    }
    fatalError("codegen error")
}

func mapDBXTeamMemberAddResultToDBOptional(object: DBXTeamMemberAddResult?) -> DBTEAMMemberAddResult? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddResultToDB(object: object)
}

func mapDBXTeamMemberAddResultToDB(object: DBXTeamMemberAddResult) -> DBTEAMMemberAddResult {
    if let object = object.asTeamLicenseLimit {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBTEAMMemberAddResult(teamLicenseLimit: teamLicenseLimit)
    }
    if let object = object.asFreeTeamMemberLimitReached {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBTEAMMemberAddResult(freeTeamMemberLimitReached: freeTeamMemberLimitReached)
    }
    if let object = object.asUserAlreadyOnTeam {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBTEAMMemberAddResult(userAlreadyOnTeam: userAlreadyOnTeam)
    }
    if let object = object.asUserOnAnotherTeam {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBTEAMMemberAddResult(userOnAnotherTeam: userOnAnotherTeam)
    }
    if let object = object.asUserAlreadyPaired {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBTEAMMemberAddResult(userAlreadyPaired: userAlreadyPaired)
    }
    if let object = object.asUserMigrationFailed {
        let userMigrationFailed = object.userMigrationFailed
        return DBTEAMMemberAddResult(userMigrationFailed: userMigrationFailed)
    }
    if let object = object.asDuplicateExternalMemberId {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBTEAMMemberAddResult(duplicateExternalMemberId: duplicateExternalMemberId)
    }
    if let object = object.asDuplicateMemberPersistentId {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBTEAMMemberAddResult(duplicateMemberPersistentId: duplicateMemberPersistentId)
    }
    if let object = object.asPersistentIdDisabled {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBTEAMMemberAddResult(persistentIdDisabled: persistentIdDisabled)
    }
    if let object = object.asUserCreationFailed {
        let userCreationFailed = object.userCreationFailed
        return DBTEAMMemberAddResult(userCreationFailed: userCreationFailed)
    }
    if let object = object.asSuccess {
        let success = mapDBXTeamTeamMemberInfoToDB(object: object.success)
        return DBTEAMMemberAddResult(success: success)
    }
    fatalError("codegen error")
}

func mapDBXTeamMemberAddV2ArgToDBOptional(object: DBXTeamMemberAddV2Arg?) -> DBTEAMMemberAddV2Arg? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddV2ArgToDB(object: object)
}

func mapDBXTeamMemberAddV2ArgToDB(object: DBXTeamMemberAddV2Arg) -> DBTEAMMemberAddV2Arg {
    DBTEAMMemberAddV2Arg(
        memberEmail: object.memberEmail,
        memberGivenName: object.memberGivenName,
        memberSurname: object.memberSurname,
        memberExternalId: object.memberExternalId,
        memberPersistentId: object.memberPersistentId,
        sendWelcomeEmail: object.sendWelcomeEmail,
        isDirectoryRestricted: object.isDirectoryRestricted,
        roleIds: object.roleIds
    )
}

func mapDBXTeamMemberAddV2ResultToDBOptional(object: DBXTeamMemberAddV2Result?) -> DBTEAMMemberAddV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberAddV2ResultToDB(object: object)
}

func mapDBXTeamMemberAddV2ResultToDB(object: DBXTeamMemberAddV2Result) -> DBTEAMMemberAddV2Result {
    if let object = object.asTeamLicenseLimit {
        let teamLicenseLimit = object.teamLicenseLimit
        return DBTEAMMemberAddV2Result(teamLicenseLimit: teamLicenseLimit)
    }
    if let object = object.asFreeTeamMemberLimitReached {
        let freeTeamMemberLimitReached = object.freeTeamMemberLimitReached
        return DBTEAMMemberAddV2Result(freeTeamMemberLimitReached: freeTeamMemberLimitReached)
    }
    if let object = object.asUserAlreadyOnTeam {
        let userAlreadyOnTeam = object.userAlreadyOnTeam
        return DBTEAMMemberAddV2Result(userAlreadyOnTeam: userAlreadyOnTeam)
    }
    if let object = object.asUserOnAnotherTeam {
        let userOnAnotherTeam = object.userOnAnotherTeam
        return DBTEAMMemberAddV2Result(userOnAnotherTeam: userOnAnotherTeam)
    }
    if let object = object.asUserAlreadyPaired {
        let userAlreadyPaired = object.userAlreadyPaired
        return DBTEAMMemberAddV2Result(userAlreadyPaired: userAlreadyPaired)
    }
    if let object = object.asUserMigrationFailed {
        let userMigrationFailed = object.userMigrationFailed
        return DBTEAMMemberAddV2Result(userMigrationFailed: userMigrationFailed)
    }
    if let object = object.asDuplicateExternalMemberId {
        let duplicateExternalMemberId = object.duplicateExternalMemberId
        return DBTEAMMemberAddV2Result(duplicateExternalMemberId: duplicateExternalMemberId)
    }
    if let object = object.asDuplicateMemberPersistentId {
        let duplicateMemberPersistentId = object.duplicateMemberPersistentId
        return DBTEAMMemberAddV2Result(duplicateMemberPersistentId: duplicateMemberPersistentId)
    }
    if let object = object.asPersistentIdDisabled {
        let persistentIdDisabled = object.persistentIdDisabled
        return DBTEAMMemberAddV2Result(persistentIdDisabled: persistentIdDisabled)
    }
    if let object = object.asUserCreationFailed {
        let userCreationFailed = object.userCreationFailed
        return DBTEAMMemberAddV2Result(userCreationFailed: userCreationFailed)
    }
    if let object = object.asSuccess {
        let success = mapDBXTeamTeamMemberInfoV2ToDB(object: object.success)
        return DBTEAMMemberAddV2Result(success: success)
    }
    if object.asOther != nil {
        return DBTEAMMemberAddV2Result(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMemberDevicesToDBOptional(object: DBXTeamMemberDevices?) -> DBTEAMMemberDevices? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberDevicesToDB(object: object)
}

func mapDBXTeamMemberDevicesToDB(object: DBXTeamMemberDevices) -> DBTEAMMemberDevices {
    DBTEAMMemberDevices(
        teamMemberId: object.teamMemberId,
        webSessions: object.webSessions?.compactMap { mapDBXTeamActiveWebSessionToDB(object: $0) },
        desktopClients: object.desktopClients?.compactMap { mapDBXTeamDesktopClientSessionToDB(object: $0) },
        mobileClients: object.mobileClients?.compactMap { mapDBXTeamMobileClientSessionToDB(object: $0) }
    )
}

func mapDBXTeamMemberLinkedAppsToDBOptional(object: DBXTeamMemberLinkedApps?) -> DBTEAMMemberLinkedApps? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberLinkedAppsToDB(object: object)
}

func mapDBXTeamMemberLinkedAppsToDB(object: DBXTeamMemberLinkedApps) -> DBTEAMMemberLinkedApps {
    DBTEAMMemberLinkedApps(teamMemberId: object.teamMemberId, linkedApiApps: object.linkedApiApps.compactMap { mapDBXTeamApiAppToDB(object: $0) })
}

func mapDBXTeamMemberProfileToDBOptional(object: DBXTeamMemberProfile?) -> DBTEAMMemberProfile? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberProfileToDB(object: object)
}

func mapDBXTeamMemberProfileToDB(object: DBXTeamMemberProfile) -> DBTEAMMemberProfile {
    DBTEAMMemberProfile(
        teamMemberId: object.teamMemberId,
        email: object.email,
        emailVerified: object.emailVerified,
        status: mapDBXTeamTeamMemberStatusToDB(object: object.status),
        name: mapDBXUsersNameToDB(object: object.name),
        membershipType: mapDBXTeamTeamMembershipTypeToDB(object: object.membershipType),
        externalId: object.externalId,
        accountId: object.accountId,
        secondaryEmails: object.secondaryEmails?.compactMap { mapDBXSecondaryEmailsSecondaryEmailToDB(object: $0) },
        invitedOn: object.invitedOn,
        joinedOn: object.joinedOn,
        suspendedOn: object.suspendedOn,
        persistentId: object.persistentId,
        isDirectoryRestricted: object.isDirectoryRestricted,
        profilePhotoUrl: object.profilePhotoUrl
    )
}

func mapDBXTeamUserSelectorErrorToDBOptional(object: DBXTeamUserSelectorError?) -> DBTEAMUserSelectorError? {
    guard let object = object else { return nil }
    return mapDBXTeamUserSelectorErrorToDB(object: object)
}

func mapDBXTeamUserSelectorErrorToDB(object: DBXTeamUserSelectorError) -> DBTEAMUserSelectorError {
    if object.asUserNotFound != nil {
        return DBTEAMUserSelectorError(userNotFound: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMemberSelectorErrorToDBOptional(object: DBXTeamMemberSelectorError?) -> DBTEAMMemberSelectorError? {
    guard let object = object else { return nil }
    return mapDBXTeamMemberSelectorErrorToDB(object: object)
}

func mapDBXTeamMemberSelectorErrorToDB(object: DBXTeamMemberSelectorError) -> DBTEAMMemberSelectorError {
    if object.asUserNotFound != nil {
        return DBTEAMMemberSelectorError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMemberSelectorError(userNotInTeam: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersAddArgBaseToDBOptional(object: DBXTeamMembersAddArgBase?) -> DBTEAMMembersAddArgBase? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddArgBaseToDB(object: object)
}

func mapDBXTeamMembersAddArgBaseToDB(object: DBXTeamMembersAddArgBase) -> DBTEAMMembersAddArgBase {
    DBTEAMMembersAddArgBase(forceAsync: object.forceAsync)
}

func mapDBXTeamMembersAddArgToDBOptional(object: DBXTeamMembersAddArg?) -> DBTEAMMembersAddArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddArgToDB(object: object)
}

func mapDBXTeamMembersAddArgToDB(object: DBXTeamMembersAddArg) -> DBTEAMMembersAddArg {
    DBTEAMMembersAddArg(dNewMembers: object.newMembers.compactMap { mapDBXTeamMemberAddArgToDB(object: $0) }, forceAsync: object.forceAsync)
}

func mapDBXTeamMembersAddJobStatusToDBOptional(object: DBXTeamMembersAddJobStatus?) -> DBTEAMMembersAddJobStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddJobStatusToDB(object: object)
}

func mapDBXTeamMembersAddJobStatusToDB(object: DBXTeamMembersAddJobStatus) -> DBTEAMMembersAddJobStatus {
    if object.asInProgress != nil {
        return DBTEAMMembersAddJobStatus(inProgress: ())
    }
    if let object = object.asComplete {
        let complete = object.complete.compactMap { mapDBXTeamMemberAddResultToDB(object: $0) }
        return DBTEAMMembersAddJobStatus(complete: complete)
    }
    if let object = object.asFailed {
        let failed = object.failed
        return DBTEAMMembersAddJobStatus(failed: failed)
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersAddJobStatusV2ResultToDBOptional(object: DBXTeamMembersAddJobStatusV2Result?) -> DBTEAMMembersAddJobStatusV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddJobStatusV2ResultToDB(object: object)
}

func mapDBXTeamMembersAddJobStatusV2ResultToDB(object: DBXTeamMembersAddJobStatusV2Result) -> DBTEAMMembersAddJobStatusV2Result {
    if object.asInProgress != nil {
        return DBTEAMMembersAddJobStatusV2Result(inProgress: ())
    }
    if let object = object.asComplete {
        let complete = object.complete.compactMap { mapDBXTeamMemberAddV2ResultToDB(object: $0) }
        return DBTEAMMembersAddJobStatusV2Result(complete: complete)
    }
    if let object = object.asFailed {
        let failed = object.failed
        return DBTEAMMembersAddJobStatusV2Result(failed: failed)
    }
    if object.asOther != nil {
        return DBTEAMMembersAddJobStatusV2Result(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersAddLaunchToDBOptional(object: DBXTeamMembersAddLaunch?) -> DBTEAMMembersAddLaunch? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddLaunchToDB(object: object)
}

func mapDBXTeamMembersAddLaunchToDB(object: DBXTeamMembersAddLaunch) -> DBTEAMMembersAddLaunch {
    if let object = object.asAsyncJobId {
        let asyncJobId = object.asyncJobId
        return DBTEAMMembersAddLaunch(asyncJobId: asyncJobId)
    }
    if let object = object.asComplete {
        let complete = object.complete.compactMap { mapDBXTeamMemberAddResultToDB(object: $0) }
        return DBTEAMMembersAddLaunch(complete: complete)
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersAddLaunchV2ResultToDBOptional(object: DBXTeamMembersAddLaunchV2Result?) -> DBTEAMMembersAddLaunchV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddLaunchV2ResultToDB(object: object)
}

func mapDBXTeamMembersAddLaunchV2ResultToDB(object: DBXTeamMembersAddLaunchV2Result) -> DBTEAMMembersAddLaunchV2Result {
    if let object = object.asAsyncJobId {
        let asyncJobId = object.asyncJobId
        return DBTEAMMembersAddLaunchV2Result(asyncJobId: asyncJobId)
    }
    if let object = object.asComplete {
        let complete = object.complete.compactMap { mapDBXTeamMemberAddV2ResultToDB(object: $0) }
        return DBTEAMMembersAddLaunchV2Result(complete: complete)
    }
    if object.asOther != nil {
        return DBTEAMMembersAddLaunchV2Result(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersAddV2ArgToDBOptional(object: DBXTeamMembersAddV2Arg?) -> DBTEAMMembersAddV2Arg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersAddV2ArgToDB(object: object)
}

func mapDBXTeamMembersAddV2ArgToDB(object: DBXTeamMembersAddV2Arg) -> DBTEAMMembersAddV2Arg {
    DBTEAMMembersAddV2Arg(dNewMembers: object.newMembers.compactMap { mapDBXTeamMemberAddV2ArgToDB(object: $0) }, forceAsync: object.forceAsync)
}

func mapDBXTeamMembersDeactivateBaseArgToDBOptional(object: DBXTeamMembersDeactivateBaseArg?) -> DBTEAMMembersDeactivateBaseArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDeactivateBaseArgToDB(object: object)
}

func mapDBXTeamMembersDeactivateBaseArgToDB(object: DBXTeamMembersDeactivateBaseArg) -> DBTEAMMembersDeactivateBaseArg {
    DBTEAMMembersDeactivateBaseArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user))
}

func mapDBXTeamMembersDataTransferArgToDBOptional(object: DBXTeamMembersDataTransferArg?) -> DBTEAMMembersDataTransferArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDataTransferArgToDB(object: object)
}

func mapDBXTeamMembersDataTransferArgToDB(object: DBXTeamMembersDataTransferArg) -> DBTEAMMembersDataTransferArg {
    DBTEAMMembersDataTransferArg(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        transferDestId: mapDBXTeamUserSelectorArgToDB(object: object.transferDestId),
        transferAdminId: mapDBXTeamUserSelectorArgToDB(object: object.transferAdminId)
    )
}

func mapDBXTeamMembersDeactivateArgToDBOptional(object: DBXTeamMembersDeactivateArg?) -> DBTEAMMembersDeactivateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDeactivateArgToDB(object: object)
}

func mapDBXTeamMembersDeactivateArgToDB(object: DBXTeamMembersDeactivateArg) -> DBTEAMMembersDeactivateArg {
    DBTEAMMembersDeactivateArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), wipeData: object.wipeData)
}

func mapDBXTeamMembersDeactivateErrorToDBOptional(object: DBXTeamMembersDeactivateError?) -> DBTEAMMembersDeactivateError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDeactivateErrorToDB(object: object)
}

func mapDBXTeamMembersDeactivateErrorToDB(object: DBXTeamMembersDeactivateError) -> DBTEAMMembersDeactivateError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersDeactivateError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersDeactivateError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersDeactivateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersDeleteProfilePhotoArgToDBOptional(object: DBXTeamMembersDeleteProfilePhotoArg?) -> DBTEAMMembersDeleteProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDeleteProfilePhotoArgToDB(object: object)
}

func mapDBXTeamMembersDeleteProfilePhotoArgToDB(object: DBXTeamMembersDeleteProfilePhotoArg) -> DBTEAMMembersDeleteProfilePhotoArg {
    DBTEAMMembersDeleteProfilePhotoArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user))
}

func mapDBXTeamMembersDeleteProfilePhotoErrorToDBOptional(object: DBXTeamMembersDeleteProfilePhotoError?) -> DBTEAMMembersDeleteProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersDeleteProfilePhotoErrorToDB(object: object)
}

func mapDBXTeamMembersDeleteProfilePhotoErrorToDB(object: DBXTeamMembersDeleteProfilePhotoError) -> DBTEAMMembersDeleteProfilePhotoError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersDeleteProfilePhotoError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersDeleteProfilePhotoError(userNotInTeam: ())
    }
    if object.asSetProfileDisallowed != nil {
        return DBTEAMMembersDeleteProfilePhotoError(setProfileDisallowed: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersDeleteProfilePhotoError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersGetAvailableTeamMemberRolesResultToDBOptional(object: DBXTeamMembersGetAvailableTeamMemberRolesResult?)
    -> DBTEAMMembersGetAvailableTeamMemberRolesResult? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetAvailableTeamMemberRolesResultToDB(object: object)
}

func mapDBXTeamMembersGetAvailableTeamMemberRolesResultToDB(object: DBXTeamMembersGetAvailableTeamMemberRolesResult)
    -> DBTEAMMembersGetAvailableTeamMemberRolesResult {
    DBTEAMMembersGetAvailableTeamMemberRolesResult(roles: object.roles.compactMap { mapDBXTeamTeamMemberRoleToDB(object: $0) })
}

func mapDBXTeamMembersGetInfoArgsToDBOptional(object: DBXTeamMembersGetInfoArgs?) -> DBTEAMMembersGetInfoArgs? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoArgsToDB(object: object)
}

func mapDBXTeamMembersGetInfoArgsToDB(object: DBXTeamMembersGetInfoArgs) -> DBTEAMMembersGetInfoArgs {
    DBTEAMMembersGetInfoArgs(members: object.members.compactMap { mapDBXTeamUserSelectorArgToDB(object: $0) })
}

func mapDBXTeamMembersGetInfoErrorToDBOptional(object: DBXTeamMembersGetInfoError?) -> DBTEAMMembersGetInfoError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoErrorToDB(object: object)
}

func mapDBXTeamMembersGetInfoErrorToDB(object: DBXTeamMembersGetInfoError) -> DBTEAMMembersGetInfoError {
    if object.asOther != nil {
        return DBTEAMMembersGetInfoError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersGetInfoItemBaseToDBOptional(object: DBXTeamMembersGetInfoItemBase?) -> DBTEAMMembersGetInfoItemBase? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoItemBaseToDB(object: object)
}

func mapDBXTeamMembersGetInfoItemBaseToDB(object: DBXTeamMembersGetInfoItemBase) -> DBTEAMMembersGetInfoItemBase {
    if let object = object.asIdNotFound {
        let idNotFound = object.idNotFound
        return DBTEAMMembersGetInfoItemBase(idNotFound: idNotFound)
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersGetInfoItemToDBOptional(object: DBXTeamMembersGetInfoItem?) -> DBTEAMMembersGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoItemToDB(object: object)
}

func mapDBXTeamMembersGetInfoItemToDB(object: DBXTeamMembersGetInfoItem) -> DBTEAMMembersGetInfoItem {
    if let object = object.asIdNotFound {
        let idNotFound = object.idNotFound
        return DBTEAMMembersGetInfoItem(idNotFound: idNotFound)
    }
    if let object = object.asMemberInfo {
        let memberInfo = mapDBXTeamTeamMemberInfoToDB(object: object.memberInfo)
        return DBTEAMMembersGetInfoItem(memberInfo: memberInfo)
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersGetInfoItemV2ToDBOptional(object: DBXTeamMembersGetInfoItemV2?) -> DBTEAMMembersGetInfoItemV2? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoItemV2ToDB(object: object)
}

func mapDBXTeamMembersGetInfoItemV2ToDB(object: DBXTeamMembersGetInfoItemV2) -> DBTEAMMembersGetInfoItemV2 {
    if let object = object.asIdNotFound {
        let idNotFound = object.idNotFound
        return DBTEAMMembersGetInfoItemV2(idNotFound: idNotFound)
    }
    if let object = object.asMemberInfo {
        let memberInfo = mapDBXTeamTeamMemberInfoV2ToDB(object: object.memberInfo)
        return DBTEAMMembersGetInfoItemV2(memberInfo: memberInfo)
    }
    if object.asOther != nil {
        return DBTEAMMembersGetInfoItemV2(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersGetInfoV2ArgToDBOptional(object: DBXTeamMembersGetInfoV2Arg?) -> DBTEAMMembersGetInfoV2Arg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoV2ArgToDB(object: object)
}

func mapDBXTeamMembersGetInfoV2ArgToDB(object: DBXTeamMembersGetInfoV2Arg) -> DBTEAMMembersGetInfoV2Arg {
    DBTEAMMembersGetInfoV2Arg(members: object.members.compactMap { mapDBXTeamUserSelectorArgToDB(object: $0) })
}

func mapDBXTeamMembersGetInfoV2ResultToDBOptional(object: DBXTeamMembersGetInfoV2Result?) -> DBTEAMMembersGetInfoV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersGetInfoV2ResultToDB(object: object)
}

func mapDBXTeamMembersGetInfoV2ResultToDB(object: DBXTeamMembersGetInfoV2Result) -> DBTEAMMembersGetInfoV2Result {
    DBTEAMMembersGetInfoV2Result(membersInfo: object.membersInfo.compactMap { mapDBXTeamMembersGetInfoItemV2ToDB(object: $0) })
}

func mapDBXTeamMembersInfoToDBOptional(object: DBXTeamMembersInfo?) -> DBTEAMMembersInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersInfoToDB(object: object)
}

func mapDBXTeamMembersInfoToDB(object: DBXTeamMembersInfo) -> DBTEAMMembersInfo {
    DBTEAMMembersInfo(teamMemberIds: object.teamMemberIds, permanentlyDeletedUsers: object.permanentlyDeletedUsers)
}

func mapDBXTeamMembersListArgToDBOptional(object: DBXTeamMembersListArg?) -> DBTEAMMembersListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListArgToDB(object: object)
}

func mapDBXTeamMembersListArgToDB(object: DBXTeamMembersListArg) -> DBTEAMMembersListArg {
    DBTEAMMembersListArg(limit: object.limit, includeRemoved: object.includeRemoved)
}

func mapDBXTeamMembersListContinueArgToDBOptional(object: DBXTeamMembersListContinueArg?) -> DBTEAMMembersListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListContinueArgToDB(object: object)
}

func mapDBXTeamMembersListContinueArgToDB(object: DBXTeamMembersListContinueArg) -> DBTEAMMembersListContinueArg {
    DBTEAMMembersListContinueArg(cursor: object.cursor)
}

func mapDBXTeamMembersListContinueErrorToDBOptional(object: DBXTeamMembersListContinueError?) -> DBTEAMMembersListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListContinueErrorToDB(object: object)
}

func mapDBXTeamMembersListContinueErrorToDB(object: DBXTeamMembersListContinueError) -> DBTEAMMembersListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMMembersListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersListErrorToDBOptional(object: DBXTeamMembersListError?) -> DBTEAMMembersListError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListErrorToDB(object: object)
}

func mapDBXTeamMembersListErrorToDB(object: DBXTeamMembersListError) -> DBTEAMMembersListError {
    if object.asOther != nil {
        return DBTEAMMembersListError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersListResultToDBOptional(object: DBXTeamMembersListResult?) -> DBTEAMMembersListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListResultToDB(object: object)
}

func mapDBXTeamMembersListResultToDB(object: DBXTeamMembersListResult) -> DBTEAMMembersListResult {
    DBTEAMMembersListResult(members: object.members.compactMap { mapDBXTeamTeamMemberInfoToDB(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBXTeamMembersListV2ResultToDBOptional(object: DBXTeamMembersListV2Result?) -> DBTEAMMembersListV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersListV2ResultToDB(object: object)
}

func mapDBXTeamMembersListV2ResultToDB(object: DBXTeamMembersListV2Result) -> DBTEAMMembersListV2Result {
    DBTEAMMembersListV2Result(members: object.members.compactMap { mapDBXTeamTeamMemberInfoV2ToDB(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBXTeamMembersRecoverArgToDBOptional(object: DBXTeamMembersRecoverArg?) -> DBTEAMMembersRecoverArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersRecoverArgToDB(object: object)
}

func mapDBXTeamMembersRecoverArgToDB(object: DBXTeamMembersRecoverArg) -> DBTEAMMembersRecoverArg {
    DBTEAMMembersRecoverArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user))
}

func mapDBXTeamMembersRecoverErrorToDBOptional(object: DBXTeamMembersRecoverError?) -> DBTEAMMembersRecoverError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersRecoverErrorToDB(object: object)
}

func mapDBXTeamMembersRecoverErrorToDB(object: DBXTeamMembersRecoverError) -> DBTEAMMembersRecoverError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersRecoverError(userNotFound: ())
    }
    if object.asUserUnrecoverable != nil {
        return DBTEAMMembersRecoverError(userUnrecoverable: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersRecoverError(userNotInTeam: ())
    }
    if object.asTeamLicenseLimit != nil {
        return DBTEAMMembersRecoverError(teamLicenseLimit: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersRecoverError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersRemoveArgToDBOptional(object: DBXTeamMembersRemoveArg?) -> DBTEAMMembersRemoveArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersRemoveArgToDB(object: object)
}

func mapDBXTeamMembersRemoveArgToDB(object: DBXTeamMembersRemoveArg) -> DBTEAMMembersRemoveArg {
    DBTEAMMembersRemoveArg(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        wipeData: object.wipeData,
        transferDestId: mapDBXTeamUserSelectorArgToDBOptional(object: object.transferDestId),
        transferAdminId: mapDBXTeamUserSelectorArgToDBOptional(object: object.transferAdminId),
        keepAccount: object.keepAccount,
        retainTeamShares: object.retainTeamShares
    )
}

func mapDBXTeamMembersTransferFilesErrorToDBOptional(object: DBXTeamMembersTransferFilesError?) -> DBTEAMMembersTransferFilesError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersTransferFilesErrorToDB(object: object)
}

func mapDBXTeamMembersTransferFilesErrorToDB(object: DBXTeamMembersTransferFilesError) -> DBTEAMMembersTransferFilesError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersTransferFilesError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersTransferFilesError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersTransferFilesError(other: ())
    }
    if object.asRemovedAndTransferDestShouldDiffer != nil {
        return DBTEAMMembersTransferFilesError(removedAndTransferDestShouldDiffer: ())
    }
    if object.asRemovedAndTransferAdminShouldDiffer != nil {
        return DBTEAMMembersTransferFilesError(removedAndTransferAdminShouldDiffer: ())
    }
    if object.asTransferDestUserNotFound != nil {
        return DBTEAMMembersTransferFilesError(transferDestUserNotFound: ())
    }
    if object.asTransferDestUserNotInTeam != nil {
        return DBTEAMMembersTransferFilesError(transferDestUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotInTeam != nil {
        return DBTEAMMembersTransferFilesError(transferAdminUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotFound != nil {
        return DBTEAMMembersTransferFilesError(transferAdminUserNotFound: ())
    }
    if object.asUnspecifiedTransferAdminId != nil {
        return DBTEAMMembersTransferFilesError(unspecifiedTransferAdminId: ())
    }
    if object.asTransferAdminIsNotAdmin != nil {
        return DBTEAMMembersTransferFilesError(transferAdminIsNotAdmin: ())
    }
    if object.asRecipientNotVerified != nil {
        return DBTEAMMembersTransferFilesError(recipientNotVerified: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersRemoveErrorToDBOptional(object: DBXTeamMembersRemoveError?) -> DBTEAMMembersRemoveError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersRemoveErrorToDB(object: object)
}

func mapDBXTeamMembersRemoveErrorToDB(object: DBXTeamMembersRemoveError) -> DBTEAMMembersRemoveError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersRemoveError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersRemoveError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersRemoveError(other: ())
    }
    if object.asRemovedAndTransferDestShouldDiffer != nil {
        return DBTEAMMembersRemoveError(removedAndTransferDestShouldDiffer: ())
    }
    if object.asRemovedAndTransferAdminShouldDiffer != nil {
        return DBTEAMMembersRemoveError(removedAndTransferAdminShouldDiffer: ())
    }
    if object.asTransferDestUserNotFound != nil {
        return DBTEAMMembersRemoveError(transferDestUserNotFound: ())
    }
    if object.asTransferDestUserNotInTeam != nil {
        return DBTEAMMembersRemoveError(transferDestUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotInTeam != nil {
        return DBTEAMMembersRemoveError(transferAdminUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotFound != nil {
        return DBTEAMMembersRemoveError(transferAdminUserNotFound: ())
    }
    if object.asUnspecifiedTransferAdminId != nil {
        return DBTEAMMembersRemoveError(unspecifiedTransferAdminId: ())
    }
    if object.asTransferAdminIsNotAdmin != nil {
        return DBTEAMMembersRemoveError(transferAdminIsNotAdmin: ())
    }
    if object.asRecipientNotVerified != nil {
        return DBTEAMMembersRemoveError(recipientNotVerified: ())
    }
    if object.asRemoveLastAdmin != nil {
        return DBTEAMMembersRemoveError(removeLastAdmin: ())
    }
    if object.asCannotKeepAccountAndTransfer != nil {
        return DBTEAMMembersRemoveError(cannotKeepAccountAndTransfer: ())
    }
    if object.asCannotKeepAccountAndDeleteData != nil {
        return DBTEAMMembersRemoveError(cannotKeepAccountAndDeleteData: ())
    }
    if object.asEmailAddressTooLongToBeDisabled != nil {
        return DBTEAMMembersRemoveError(emailAddressTooLongToBeDisabled: ())
    }
    if object.asCannotKeepInvitedUserAccount != nil {
        return DBTEAMMembersRemoveError(cannotKeepInvitedUserAccount: ())
    }
    if object.asCannotRetainSharesWhenDataWiped != nil {
        return DBTEAMMembersRemoveError(cannotRetainSharesWhenDataWiped: ())
    }
    if object.asCannotRetainSharesWhenNoAccountKept != nil {
        return DBTEAMMembersRemoveError(cannotRetainSharesWhenNoAccountKept: ())
    }
    if object.asCannotRetainSharesWhenTeamExternalSharingOff != nil {
        return DBTEAMMembersRemoveError(cannotRetainSharesWhenTeamExternalSharingOff: ())
    }
    if object.asCannotKeepAccount != nil {
        return DBTEAMMembersRemoveError(cannotKeepAccount: ())
    }
    if object.asCannotKeepAccountUnderLegalHold != nil {
        return DBTEAMMembersRemoveError(cannotKeepAccountUnderLegalHold: ())
    }
    if object.asCannotKeepAccountRequiredToSignTos != nil {
        return DBTEAMMembersRemoveError(cannotKeepAccountRequiredToSignTos: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSendWelcomeErrorToDBOptional(object: DBXTeamMembersSendWelcomeError?) -> DBTEAMMembersSendWelcomeError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSendWelcomeErrorToDB(object: object)
}

func mapDBXTeamMembersSendWelcomeErrorToDB(object: DBXTeamMembersSendWelcomeError) -> DBTEAMMembersSendWelcomeError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSendWelcomeError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSendWelcomeError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersSendWelcomeError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSetPermissions2ArgToDBOptional(object: DBXTeamMembersSetPermissions2Arg?) -> DBTEAMMembersSetPermissions2Arg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissions2ArgToDB(object: object)
}

func mapDBXTeamMembersSetPermissions2ArgToDB(object: DBXTeamMembersSetPermissions2Arg) -> DBTEAMMembersSetPermissions2Arg {
    DBTEAMMembersSetPermissions2Arg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), dNewRoles: object.newRoles)
}

func mapDBXTeamMembersSetPermissions2ErrorToDBOptional(object: DBXTeamMembersSetPermissions2Error?) -> DBTEAMMembersSetPermissions2Error? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissions2ErrorToDB(object: object)
}

func mapDBXTeamMembersSetPermissions2ErrorToDB(object: DBXTeamMembersSetPermissions2Error) -> DBTEAMMembersSetPermissions2Error {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSetPermissions2Error(userNotFound: ())
    }
    if object.asLastAdmin != nil {
        return DBTEAMMembersSetPermissions2Error(lastAdmin: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSetPermissions2Error(userNotInTeam: ())
    }
    if object.asCannotSetPermissions != nil {
        return DBTEAMMembersSetPermissions2Error(cannotSetPermissions: ())
    }
    if object.asRoleNotFound != nil {
        return DBTEAMMembersSetPermissions2Error(roleNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersSetPermissions2Error(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSetPermissions2ResultToDBOptional(object: DBXTeamMembersSetPermissions2Result?) -> DBTEAMMembersSetPermissions2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissions2ResultToDB(object: object)
}

func mapDBXTeamMembersSetPermissions2ResultToDB(object: DBXTeamMembersSetPermissions2Result) -> DBTEAMMembersSetPermissions2Result {
    DBTEAMMembersSetPermissions2Result(teamMemberId: object.teamMemberId, roles: object.roles?.compactMap { mapDBXTeamTeamMemberRoleToDB(object: $0) })
}

func mapDBXTeamMembersSetPermissionsArgToDBOptional(object: DBXTeamMembersSetPermissionsArg?) -> DBTEAMMembersSetPermissionsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissionsArgToDB(object: object)
}

func mapDBXTeamMembersSetPermissionsArgToDB(object: DBXTeamMembersSetPermissionsArg) -> DBTEAMMembersSetPermissionsArg {
    DBTEAMMembersSetPermissionsArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), dNewRole: mapDBXTeamAdminTierToDB(object: object.newRole))
}

func mapDBXTeamMembersSetPermissionsErrorToDBOptional(object: DBXTeamMembersSetPermissionsError?) -> DBTEAMMembersSetPermissionsError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissionsErrorToDB(object: object)
}

func mapDBXTeamMembersSetPermissionsErrorToDB(object: DBXTeamMembersSetPermissionsError) -> DBTEAMMembersSetPermissionsError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSetPermissionsError(userNotFound: ())
    }
    if object.asLastAdmin != nil {
        return DBTEAMMembersSetPermissionsError(lastAdmin: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSetPermissionsError(userNotInTeam: ())
    }
    if object.asCannotSetPermissions != nil {
        return DBTEAMMembersSetPermissionsError(cannotSetPermissions: ())
    }
    if object.asTeamLicenseLimit != nil {
        return DBTEAMMembersSetPermissionsError(teamLicenseLimit: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersSetPermissionsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSetPermissionsResultToDBOptional(object: DBXTeamMembersSetPermissionsResult?) -> DBTEAMMembersSetPermissionsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetPermissionsResultToDB(object: object)
}

func mapDBXTeamMembersSetPermissionsResultToDB(object: DBXTeamMembersSetPermissionsResult) -> DBTEAMMembersSetPermissionsResult {
    DBTEAMMembersSetPermissionsResult(teamMemberId: object.teamMemberId, role: mapDBXTeamAdminTierToDB(object: object.role))
}

func mapDBXTeamMembersSetProfileArgToDBOptional(object: DBXTeamMembersSetProfileArg?) -> DBTEAMMembersSetProfileArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetProfileArgToDB(object: object)
}

func mapDBXTeamMembersSetProfileArgToDB(object: DBXTeamMembersSetProfileArg) -> DBTEAMMembersSetProfileArg {
    DBTEAMMembersSetProfileArg(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        dNewEmail: object.newEmail,
        dNewExternalId: object.newExternalId,
        dNewGivenName: object.newGivenName,
        dNewSurname: object.newSurname,
        dNewPersistentId: object.newPersistentId,
        dNewIsDirectoryRestricted: object.newIsDirectoryRestricted
    )
}

func mapDBXTeamMembersSetProfileErrorToDBOptional(object: DBXTeamMembersSetProfileError?) -> DBTEAMMembersSetProfileError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetProfileErrorToDB(object: object)
}

func mapDBXTeamMembersSetProfileErrorToDB(object: DBXTeamMembersSetProfileError) -> DBTEAMMembersSetProfileError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSetProfileError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSetProfileError(userNotInTeam: ())
    }
    if object.asExternalIdAndNewExternalIdUnsafe != nil {
        return DBTEAMMembersSetProfileError(externalIdAndNewExternalIdUnsafe: ())
    }
    if object.asNoNewDataSpecified != nil {
        return DBTEAMMembersSetProfileError(noNewDataSpecified: ())
    }
    if object.asEmailReservedForOtherUser != nil {
        return DBTEAMMembersSetProfileError(emailReservedForOtherUser: ())
    }
    if object.asExternalIdUsedByOtherUser != nil {
        return DBTEAMMembersSetProfileError(externalIdUsedByOtherUser: ())
    }
    if object.asSetProfileDisallowed != nil {
        return DBTEAMMembersSetProfileError(setProfileDisallowed: ())
    }
    if object.asParamCannotBeEmpty != nil {
        return DBTEAMMembersSetProfileError(paramCannotBeEmpty: ())
    }
    if object.asPersistentIdDisabled != nil {
        return DBTEAMMembersSetProfileError(persistentIdDisabled: ())
    }
    if object.asPersistentIdUsedByOtherUser != nil {
        return DBTEAMMembersSetProfileError(persistentIdUsedByOtherUser: ())
    }
    if object.asDirectoryRestrictedOff != nil {
        return DBTEAMMembersSetProfileError(directoryRestrictedOff: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersSetProfileError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSetProfilePhotoArgToDBOptional(object: DBXTeamMembersSetProfilePhotoArg?) -> DBTEAMMembersSetProfilePhotoArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetProfilePhotoArgToDB(object: object)
}

func mapDBXTeamMembersSetProfilePhotoArgToDB(object: DBXTeamMembersSetProfilePhotoArg) -> DBTEAMMembersSetProfilePhotoArg {
    DBTEAMMembersSetProfilePhotoArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), photo: mapDBXAccountPhotoSourceArgToDB(object: object.photo))
}

func mapDBXTeamMembersSetProfilePhotoErrorToDBOptional(object: DBXTeamMembersSetProfilePhotoError?) -> DBTEAMMembersSetProfilePhotoError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSetProfilePhotoErrorToDB(object: object)
}

func mapDBXTeamMembersSetProfilePhotoErrorToDB(object: DBXTeamMembersSetProfilePhotoError) -> DBTEAMMembersSetProfilePhotoError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSetProfilePhotoError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSetProfilePhotoError(userNotInTeam: ())
    }
    if object.asSetProfileDisallowed != nil {
        return DBTEAMMembersSetProfilePhotoError(setProfileDisallowed: ())
    }
    if let object = object.asPhotoError {
        let photoError = mapDBXAccountSetProfilePhotoErrorToDB(object: object.photoError)
        return DBTEAMMembersSetProfilePhotoError(photoError: photoError)
    }
    if object.asOther != nil {
        return DBTEAMMembersSetProfilePhotoError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersSuspendErrorToDBOptional(object: DBXTeamMembersSuspendError?) -> DBTEAMMembersSuspendError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersSuspendErrorToDB(object: object)
}

func mapDBXTeamMembersSuspendErrorToDB(object: DBXTeamMembersSuspendError) -> DBTEAMMembersSuspendError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersSuspendError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersSuspendError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersSuspendError(other: ())
    }
    if object.asSuspendInactiveUser != nil {
        return DBTEAMMembersSuspendError(suspendInactiveUser: ())
    }
    if object.asSuspendLastAdmin != nil {
        return DBTEAMMembersSuspendError(suspendLastAdmin: ())
    }
    if object.asTeamLicenseLimit != nil {
        return DBTEAMMembersSuspendError(teamLicenseLimit: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersTransferFormerMembersFilesErrorToDBOptional(object: DBXTeamMembersTransferFormerMembersFilesError?)
    -> DBTEAMMembersTransferFormerMembersFilesError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersTransferFormerMembersFilesErrorToDB(object: object)
}

func mapDBXTeamMembersTransferFormerMembersFilesErrorToDB(object: DBXTeamMembersTransferFormerMembersFilesError)
    -> DBTEAMMembersTransferFormerMembersFilesError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(other: ())
    }
    if object.asRemovedAndTransferDestShouldDiffer != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(removedAndTransferDestShouldDiffer: ())
    }
    if object.asRemovedAndTransferAdminShouldDiffer != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(removedAndTransferAdminShouldDiffer: ())
    }
    if object.asTransferDestUserNotFound != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(transferDestUserNotFound: ())
    }
    if object.asTransferDestUserNotInTeam != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(transferDestUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotInTeam != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(transferAdminUserNotInTeam: ())
    }
    if object.asTransferAdminUserNotFound != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(transferAdminUserNotFound: ())
    }
    if object.asUnspecifiedTransferAdminId != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(unspecifiedTransferAdminId: ())
    }
    if object.asTransferAdminIsNotAdmin != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(transferAdminIsNotAdmin: ())
    }
    if object.asRecipientNotVerified != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(recipientNotVerified: ())
    }
    if object.asUserDataIsBeingTransferred != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userDataIsBeingTransferred: ())
    }
    if object.asUserNotRemoved != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userNotRemoved: ())
    }
    if object.asUserDataCannotBeTransferred != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userDataCannotBeTransferred: ())
    }
    if object.asUserDataAlreadyTransferred != nil {
        return DBTEAMMembersTransferFormerMembersFilesError(userDataAlreadyTransferred: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMembersUnsuspendArgToDBOptional(object: DBXTeamMembersUnsuspendArg?) -> DBTEAMMembersUnsuspendArg? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersUnsuspendArgToDB(object: object)
}

func mapDBXTeamMembersUnsuspendArgToDB(object: DBXTeamMembersUnsuspendArg) -> DBTEAMMembersUnsuspendArg {
    DBTEAMMembersUnsuspendArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user))
}

func mapDBXTeamMembersUnsuspendErrorToDBOptional(object: DBXTeamMembersUnsuspendError?) -> DBTEAMMembersUnsuspendError? {
    guard let object = object else { return nil }
    return mapDBXTeamMembersUnsuspendErrorToDB(object: object)
}

func mapDBXTeamMembersUnsuspendErrorToDB(object: DBXTeamMembersUnsuspendError) -> DBTEAMMembersUnsuspendError {
    if object.asUserNotFound != nil {
        return DBTEAMMembersUnsuspendError(userNotFound: ())
    }
    if object.asUserNotInTeam != nil {
        return DBTEAMMembersUnsuspendError(userNotInTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMMembersUnsuspendError(other: ())
    }
    if object.asUnsuspendNonSuspendedMember != nil {
        return DBTEAMMembersUnsuspendError(unsuspendNonSuspendedMember: ())
    }
    if object.asTeamLicenseLimit != nil {
        return DBTEAMMembersUnsuspendError(teamLicenseLimit: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMobileClientPlatformToDBOptional(object: DBXTeamMobileClientPlatform?) -> DBTEAMMobileClientPlatform? {
    guard let object = object else { return nil }
    return mapDBXTeamMobileClientPlatformToDB(object: object)
}

func mapDBXTeamMobileClientPlatformToDB(object: DBXTeamMobileClientPlatform) -> DBTEAMMobileClientPlatform {
    if object.asIphone != nil {
        return DBTEAMMobileClientPlatform(iphone: ())
    }
    if object.asIpad != nil {
        return DBTEAMMobileClientPlatform(ipad: ())
    }
    if object.asAndroid != nil {
        return DBTEAMMobileClientPlatform(android: ())
    }
    if object.asWindowsPhone != nil {
        return DBTEAMMobileClientPlatform(windowsPhone: ())
    }
    if object.asBlackberry != nil {
        return DBTEAMMobileClientPlatform(blackberry: ())
    }
    if object.asOther != nil {
        return DBTEAMMobileClientPlatform(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamMobileClientSessionToDBOptional(object: DBXTeamMobileClientSession?) -> DBTEAMMobileClientSession? {
    guard let object = object else { return nil }
    return mapDBXTeamMobileClientSessionToDB(object: object)
}

func mapDBXTeamMobileClientSessionToDB(object: DBXTeamMobileClientSession) -> DBTEAMMobileClientSession {
    DBTEAMMobileClientSession(
        sessionId: object.sessionId,
        deviceName: object.deviceName,
        clientType: mapDBXTeamMobileClientPlatformToDB(object: object.clientType),
        ipAddress: object.ipAddress,
        country: object.country,
        created: object.created,
        updated: object.updated,
        clientVersion: object.clientVersion,
        osVersion: object.osVersion,
        lastCarrier: object.lastCarrier
    )
}

func mapDBXTeamNamespaceMetadataToDBOptional(object: DBXTeamNamespaceMetadata?) -> DBTEAMNamespaceMetadata? {
    guard let object = object else { return nil }
    return mapDBXTeamNamespaceMetadataToDB(object: object)
}

func mapDBXTeamNamespaceMetadataToDB(object: DBXTeamNamespaceMetadata) -> DBTEAMNamespaceMetadata {
    DBTEAMNamespaceMetadata(
        name: object.name,
        namespaceId: object.namespaceId,
        namespaceType: mapDBXTeamNamespaceTypeToDB(object: object.namespaceType),
        teamMemberId: object.teamMemberId
    )
}

func mapDBXTeamNamespaceTypeToDBOptional(object: DBXTeamNamespaceType?) -> DBTEAMNamespaceType? {
    guard let object = object else { return nil }
    return mapDBXTeamNamespaceTypeToDB(object: object)
}

func mapDBXTeamNamespaceTypeToDB(object: DBXTeamNamespaceType) -> DBTEAMNamespaceType {
    if object.asAppFolder != nil {
        return DBTEAMNamespaceType(appFolder: ())
    }
    if object.asSharedFolder != nil {
        return DBTEAMNamespaceType(sharedFolder: ())
    }
    if object.asTeamFolder != nil {
        return DBTEAMNamespaceType(teamFolder: ())
    }
    if object.asTeamMemberFolder != nil {
        return DBTEAMNamespaceType(teamMemberFolder: ())
    }
    if object.asOther != nil {
        return DBTEAMNamespaceType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRemoveCustomQuotaResultToDBOptional(object: DBXTeamRemoveCustomQuotaResult?) -> DBTEAMRemoveCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBXTeamRemoveCustomQuotaResultToDB(object: object)
}

func mapDBXTeamRemoveCustomQuotaResultToDB(object: DBXTeamRemoveCustomQuotaResult) -> DBTEAMRemoveCustomQuotaResult {
    if let object = object.asSuccess {
        let success = mapDBXTeamUserSelectorArgToDB(object: object.success)
        return DBTEAMRemoveCustomQuotaResult(success: success)
    }
    if let object = object.asInvalidUser {
        let invalidUser = mapDBXTeamUserSelectorArgToDB(object: object.invalidUser)
        return DBTEAMRemoveCustomQuotaResult(invalidUser: invalidUser)
    }
    if object.asOther != nil {
        return DBTEAMRemoveCustomQuotaResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRemovedStatusToDBOptional(object: DBXTeamRemovedStatus?) -> DBTEAMRemovedStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamRemovedStatusToDB(object: object)
}

func mapDBXTeamRemovedStatusToDB(object: DBXTeamRemovedStatus) -> DBTEAMRemovedStatus {
    DBTEAMRemovedStatus(isRecoverable: object.isRecoverable, isDisconnected: object.isDisconnected)
}

func mapDBXTeamResendSecondaryEmailResultToDBOptional(object: DBXTeamResendSecondaryEmailResult?) -> DBTEAMResendSecondaryEmailResult? {
    guard let object = object else { return nil }
    return mapDBXTeamResendSecondaryEmailResultToDB(object: object)
}

func mapDBXTeamResendSecondaryEmailResultToDB(object: DBXTeamResendSecondaryEmailResult) -> DBTEAMResendSecondaryEmailResult {
    if let object = object.asSuccess {
        let success = object.success
        return DBTEAMResendSecondaryEmailResult(success: success)
    }
    if let object = object.asNotPending {
        let notPending = object.notPending
        return DBTEAMResendSecondaryEmailResult(notPending: notPending)
    }
    if let object = object.asRateLimited {
        let rateLimited = object.rateLimited
        return DBTEAMResendSecondaryEmailResult(rateLimited: rateLimited)
    }
    if object.asOther != nil {
        return DBTEAMResendSecondaryEmailResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamResendVerificationEmailArgToDBOptional(object: DBXTeamResendVerificationEmailArg?) -> DBTEAMResendVerificationEmailArg? {
    guard let object = object else { return nil }
    return mapDBXTeamResendVerificationEmailArgToDB(object: object)
}

func mapDBXTeamResendVerificationEmailArgToDB(object: DBXTeamResendVerificationEmailArg) -> DBTEAMResendVerificationEmailArg {
    DBTEAMResendVerificationEmailArg(emailsToResend: object.emailsToResend.compactMap { mapDBXTeamUserSecondaryEmailsArgToDB(object: $0) })
}

func mapDBXTeamResendVerificationEmailResultToDBOptional(object: DBXTeamResendVerificationEmailResult?) -> DBTEAMResendVerificationEmailResult? {
    guard let object = object else { return nil }
    return mapDBXTeamResendVerificationEmailResultToDB(object: object)
}

func mapDBXTeamResendVerificationEmailResultToDB(object: DBXTeamResendVerificationEmailResult) -> DBTEAMResendVerificationEmailResult {
    DBTEAMResendVerificationEmailResult(results: object.results.compactMap { mapDBXTeamUserResendResultToDB(object: $0) })
}

func mapDBXTeamRevokeDesktopClientArgToDBOptional(object: DBXTeamRevokeDesktopClientArg?) -> DBTEAMRevokeDesktopClientArg? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDesktopClientArgToDB(object: object)
}

func mapDBXTeamRevokeDesktopClientArgToDB(object: DBXTeamRevokeDesktopClientArg) -> DBTEAMRevokeDesktopClientArg {
    DBTEAMRevokeDesktopClientArg(sessionId: object.sessionId, teamMemberId: object.teamMemberId, deleteOnUnlink: object.deleteOnUnlink)
}

func mapDBXTeamRevokeDeviceSessionArgToDBOptional(object: DBXTeamRevokeDeviceSessionArg?) -> DBTEAMRevokeDeviceSessionArg? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionArgToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionArgToDB(object: DBXTeamRevokeDeviceSessionArg) -> DBTEAMRevokeDeviceSessionArg {
    if let object = object.asWebSession {
        let webSession = mapDBXTeamDeviceSessionArgToDB(object: object.webSession)
        return DBTEAMRevokeDeviceSessionArg(webSession: webSession)
    }
    if let object = object.asDesktopClient {
        let desktopClient = mapDBXTeamRevokeDesktopClientArgToDB(object: object.desktopClient)
        return DBTEAMRevokeDeviceSessionArg(desktopClient: desktopClient)
    }
    if let object = object.asMobileClient {
        let mobileClient = mapDBXTeamDeviceSessionArgToDB(object: object.mobileClient)
        return DBTEAMRevokeDeviceSessionArg(mobileClient: mobileClient)
    }
    fatalError("codegen error")
}

func mapDBXTeamRevokeDeviceSessionBatchArgToDBOptional(object: DBXTeamRevokeDeviceSessionBatchArg?) -> DBTEAMRevokeDeviceSessionBatchArg? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionBatchArgToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionBatchArgToDB(object: DBXTeamRevokeDeviceSessionBatchArg) -> DBTEAMRevokeDeviceSessionBatchArg {
    DBTEAMRevokeDeviceSessionBatchArg(revokeDevices: object.revokeDevices.compactMap { mapDBXTeamRevokeDeviceSessionArgToDB(object: $0) })
}

func mapDBXTeamRevokeDeviceSessionBatchErrorToDBOptional(object: DBXTeamRevokeDeviceSessionBatchError?) -> DBTEAMRevokeDeviceSessionBatchError? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionBatchErrorToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionBatchErrorToDB(object: DBXTeamRevokeDeviceSessionBatchError) -> DBTEAMRevokeDeviceSessionBatchError {
    if object.asOther != nil {
        return DBTEAMRevokeDeviceSessionBatchError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRevokeDeviceSessionBatchResultToDBOptional(object: DBXTeamRevokeDeviceSessionBatchResult?) -> DBTEAMRevokeDeviceSessionBatchResult? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionBatchResultToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionBatchResultToDB(object: DBXTeamRevokeDeviceSessionBatchResult) -> DBTEAMRevokeDeviceSessionBatchResult {
    DBTEAMRevokeDeviceSessionBatchResult(revokeDevicesStatus: object.revokeDevicesStatus.compactMap { mapDBXTeamRevokeDeviceSessionStatusToDB(object: $0) })
}

func mapDBXTeamRevokeDeviceSessionErrorToDBOptional(object: DBXTeamRevokeDeviceSessionError?) -> DBTEAMRevokeDeviceSessionError? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionErrorToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionErrorToDB(object: DBXTeamRevokeDeviceSessionError) -> DBTEAMRevokeDeviceSessionError {
    if object.asDeviceSessionNotFound != nil {
        return DBTEAMRevokeDeviceSessionError(deviceSessionNotFound: ())
    }
    if object.asMemberNotFound != nil {
        return DBTEAMRevokeDeviceSessionError(memberNotFound: ())
    }
    if object.asOther != nil {
        return DBTEAMRevokeDeviceSessionError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRevokeDeviceSessionStatusToDBOptional(object: DBXTeamRevokeDeviceSessionStatus?) -> DBTEAMRevokeDeviceSessionStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeDeviceSessionStatusToDB(object: object)
}

func mapDBXTeamRevokeDeviceSessionStatusToDB(object: DBXTeamRevokeDeviceSessionStatus) -> DBTEAMRevokeDeviceSessionStatus {
    DBTEAMRevokeDeviceSessionStatus(success: object.success, errorType: mapDBXTeamRevokeDeviceSessionErrorToDBOptional(object: object.errorType))
}

func mapDBXTeamRevokeLinkedApiAppArgToDBOptional(object: DBXTeamRevokeLinkedApiAppArg?) -> DBTEAMRevokeLinkedApiAppArg? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedApiAppArgToDB(object: object)
}

func mapDBXTeamRevokeLinkedApiAppArgToDB(object: DBXTeamRevokeLinkedApiAppArg) -> DBTEAMRevokeLinkedApiAppArg {
    DBTEAMRevokeLinkedApiAppArg(appId: object.appId, teamMemberId: object.teamMemberId, keepAppFolder: object.keepAppFolder)
}

func mapDBXTeamRevokeLinkedApiAppBatchArgToDBOptional(object: DBXTeamRevokeLinkedApiAppBatchArg?) -> DBTEAMRevokeLinkedApiAppBatchArg? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedApiAppBatchArgToDB(object: object)
}

func mapDBXTeamRevokeLinkedApiAppBatchArgToDB(object: DBXTeamRevokeLinkedApiAppBatchArg) -> DBTEAMRevokeLinkedApiAppBatchArg {
    DBTEAMRevokeLinkedApiAppBatchArg(revokeLinkedApp: object.revokeLinkedApp.compactMap { mapDBXTeamRevokeLinkedApiAppArgToDB(object: $0) })
}

func mapDBXTeamRevokeLinkedAppBatchErrorToDBOptional(object: DBXTeamRevokeLinkedAppBatchError?) -> DBTEAMRevokeLinkedAppBatchError? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedAppBatchErrorToDB(object: object)
}

func mapDBXTeamRevokeLinkedAppBatchErrorToDB(object: DBXTeamRevokeLinkedAppBatchError) -> DBTEAMRevokeLinkedAppBatchError {
    if object.asOther != nil {
        return DBTEAMRevokeLinkedAppBatchError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRevokeLinkedAppBatchResultToDBOptional(object: DBXTeamRevokeLinkedAppBatchResult?) -> DBTEAMRevokeLinkedAppBatchResult? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedAppBatchResultToDB(object: object)
}

func mapDBXTeamRevokeLinkedAppBatchResultToDB(object: DBXTeamRevokeLinkedAppBatchResult) -> DBTEAMRevokeLinkedAppBatchResult {
    DBTEAMRevokeLinkedAppBatchResult(revokeLinkedAppStatus: object.revokeLinkedAppStatus.compactMap { mapDBXTeamRevokeLinkedAppStatusToDB(object: $0) })
}

func mapDBXTeamRevokeLinkedAppErrorToDBOptional(object: DBXTeamRevokeLinkedAppError?) -> DBTEAMRevokeLinkedAppError? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedAppErrorToDB(object: object)
}

func mapDBXTeamRevokeLinkedAppErrorToDB(object: DBXTeamRevokeLinkedAppError) -> DBTEAMRevokeLinkedAppError {
    if object.asAppNotFound != nil {
        return DBTEAMRevokeLinkedAppError(appNotFound: ())
    }
    if object.asMemberNotFound != nil {
        return DBTEAMRevokeLinkedAppError(memberNotFound: ())
    }
    if object.asAppFolderRemovalNotSupported != nil {
        return DBTEAMRevokeLinkedAppError(appFolderRemovalNotSupported: ())
    }
    if object.asOther != nil {
        return DBTEAMRevokeLinkedAppError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamRevokeLinkedAppStatusToDBOptional(object: DBXTeamRevokeLinkedAppStatus?) -> DBTEAMRevokeLinkedAppStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamRevokeLinkedAppStatusToDB(object: object)
}

func mapDBXTeamRevokeLinkedAppStatusToDB(object: DBXTeamRevokeLinkedAppStatus) -> DBTEAMRevokeLinkedAppStatus {
    DBTEAMRevokeLinkedAppStatus(success: object.success, errorType: mapDBXTeamRevokeLinkedAppErrorToDBOptional(object: object.errorType))
}

func mapDBXTeamSetCustomQuotaArgToDBOptional(object: DBXTeamSetCustomQuotaArg?) -> DBTEAMSetCustomQuotaArg? {
    guard let object = object else { return nil }
    return mapDBXTeamSetCustomQuotaArgToDB(object: object)
}

func mapDBXTeamSetCustomQuotaArgToDB(object: DBXTeamSetCustomQuotaArg) -> DBTEAMSetCustomQuotaArg {
    DBTEAMSetCustomQuotaArg(usersAndQuotas: object.usersAndQuotas.compactMap { mapDBXTeamUserCustomQuotaArgToDB(object: $0) })
}

func mapDBXTeamSetCustomQuotaErrorToDBOptional(object: DBXTeamSetCustomQuotaError?) -> DBTEAMSetCustomQuotaError? {
    guard let object = object else { return nil }
    return mapDBXTeamSetCustomQuotaErrorToDB(object: object)
}

func mapDBXTeamSetCustomQuotaErrorToDB(object: DBXTeamSetCustomQuotaError) -> DBTEAMSetCustomQuotaError {
    if object.asTooManyUsers != nil {
        return DBTEAMSetCustomQuotaError(tooManyUsers: ())
    }
    if object.asOther != nil {
        return DBTEAMSetCustomQuotaError(other: ())
    }
    if object.asSomeUsersAreExcluded != nil {
        return DBTEAMSetCustomQuotaError(someUsersAreExcluded: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamSharingAllowlistAddArgsToDBOptional(object: DBXTeamSharingAllowlistAddArgs?) -> DBTEAMSharingAllowlistAddArgs? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistAddArgsToDB(object: object)
}

func mapDBXTeamSharingAllowlistAddArgsToDB(object: DBXTeamSharingAllowlistAddArgs) -> DBTEAMSharingAllowlistAddArgs {
    DBTEAMSharingAllowlistAddArgs(domains: object.domains, emails: object.emails)
}

func mapDBXTeamSharingAllowlistAddErrorToDBOptional(object: DBXTeamSharingAllowlistAddError?) -> DBTEAMSharingAllowlistAddError? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistAddErrorToDB(object: object)
}

func mapDBXTeamSharingAllowlistAddErrorToDB(object: DBXTeamSharingAllowlistAddError) -> DBTEAMSharingAllowlistAddError {
    if let object = object.asMalformedEntry {
        let malformedEntry = object.malformedEntry
        return DBTEAMSharingAllowlistAddError(malformedEntry: malformedEntry)
    }
    if object.asNoEntriesProvided != nil {
        return DBTEAMSharingAllowlistAddError(noEntriesProvided: ())
    }
    if object.asTooManyEntriesProvided != nil {
        return DBTEAMSharingAllowlistAddError(tooManyEntriesProvided: ())
    }
    if object.asTeamLimitReached != nil {
        return DBTEAMSharingAllowlistAddError(teamLimitReached: ())
    }
    if object.asUnknownError != nil {
        return DBTEAMSharingAllowlistAddError(unknownError: ())
    }
    if let object = object.asEntriesAlreadyExist {
        let entriesAlreadyExist = object.entriesAlreadyExist
        return DBTEAMSharingAllowlistAddError(entriesAlreadyExist: entriesAlreadyExist)
    }
    if object.asOther != nil {
        return DBTEAMSharingAllowlistAddError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamSharingAllowlistAddResponseToDBOptional(object: DBXTeamSharingAllowlistAddResponse?) -> DBTEAMSharingAllowlistAddResponse? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistAddResponseToDB(object: object)
}

func mapDBXTeamSharingAllowlistAddResponseToDB(object: DBXTeamSharingAllowlistAddResponse) -> DBTEAMSharingAllowlistAddResponse {
    DBTEAMSharingAllowlistAddResponse(default: ())
}

func mapDBXTeamSharingAllowlistListArgToDBOptional(object: DBXTeamSharingAllowlistListArg?) -> DBTEAMSharingAllowlistListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistListArgToDB(object: object)
}

func mapDBXTeamSharingAllowlistListArgToDB(object: DBXTeamSharingAllowlistListArg) -> DBTEAMSharingAllowlistListArg {
    DBTEAMSharingAllowlistListArg(limit: object.limit)
}

func mapDBXTeamSharingAllowlistListContinueArgToDBOptional(object: DBXTeamSharingAllowlistListContinueArg?) -> DBTEAMSharingAllowlistListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistListContinueArgToDB(object: object)
}

func mapDBXTeamSharingAllowlistListContinueArgToDB(object: DBXTeamSharingAllowlistListContinueArg) -> DBTEAMSharingAllowlistListContinueArg {
    DBTEAMSharingAllowlistListContinueArg(cursor: object.cursor)
}

func mapDBXTeamSharingAllowlistListContinueErrorToDBOptional(object: DBXTeamSharingAllowlistListContinueError?) -> DBTEAMSharingAllowlistListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistListContinueErrorToDB(object: object)
}

func mapDBXTeamSharingAllowlistListContinueErrorToDB(object: DBXTeamSharingAllowlistListContinueError) -> DBTEAMSharingAllowlistListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMSharingAllowlistListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMSharingAllowlistListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamSharingAllowlistListErrorToDBOptional(object: DBXTeamSharingAllowlistListError?) -> DBTEAMSharingAllowlistListError? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistListErrorToDB(object: object)
}

func mapDBXTeamSharingAllowlistListErrorToDB(object: DBXTeamSharingAllowlistListError) -> DBTEAMSharingAllowlistListError {
    DBTEAMSharingAllowlistListError(default: ())
}

func mapDBXTeamSharingAllowlistListResponseToDBOptional(object: DBXTeamSharingAllowlistListResponse?) -> DBTEAMSharingAllowlistListResponse? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistListResponseToDB(object: object)
}

func mapDBXTeamSharingAllowlistListResponseToDB(object: DBXTeamSharingAllowlistListResponse) -> DBTEAMSharingAllowlistListResponse {
    DBTEAMSharingAllowlistListResponse(domains: object.domains, emails: object.emails, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBXTeamSharingAllowlistRemoveArgsToDBOptional(object: DBXTeamSharingAllowlistRemoveArgs?) -> DBTEAMSharingAllowlistRemoveArgs? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistRemoveArgsToDB(object: object)
}

func mapDBXTeamSharingAllowlistRemoveArgsToDB(object: DBXTeamSharingAllowlistRemoveArgs) -> DBTEAMSharingAllowlistRemoveArgs {
    DBTEAMSharingAllowlistRemoveArgs(domains: object.domains, emails: object.emails)
}

func mapDBXTeamSharingAllowlistRemoveErrorToDBOptional(object: DBXTeamSharingAllowlistRemoveError?) -> DBTEAMSharingAllowlistRemoveError? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistRemoveErrorToDB(object: object)
}

func mapDBXTeamSharingAllowlistRemoveErrorToDB(object: DBXTeamSharingAllowlistRemoveError) -> DBTEAMSharingAllowlistRemoveError {
    if let object = object.asMalformedEntry {
        let malformedEntry = object.malformedEntry
        return DBTEAMSharingAllowlistRemoveError(malformedEntry: malformedEntry)
    }
    if let object = object.asEntriesDoNotExist {
        let entriesDoNotExist = object.entriesDoNotExist
        return DBTEAMSharingAllowlistRemoveError(entriesDoNotExist: entriesDoNotExist)
    }
    if object.asNoEntriesProvided != nil {
        return DBTEAMSharingAllowlistRemoveError(noEntriesProvided: ())
    }
    if object.asTooManyEntriesProvided != nil {
        return DBTEAMSharingAllowlistRemoveError(tooManyEntriesProvided: ())
    }
    if object.asUnknownError != nil {
        return DBTEAMSharingAllowlistRemoveError(unknownError: ())
    }
    if object.asOther != nil {
        return DBTEAMSharingAllowlistRemoveError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamSharingAllowlistRemoveResponseToDBOptional(object: DBXTeamSharingAllowlistRemoveResponse?) -> DBTEAMSharingAllowlistRemoveResponse? {
    guard let object = object else { return nil }
    return mapDBXTeamSharingAllowlistRemoveResponseToDB(object: object)
}

func mapDBXTeamSharingAllowlistRemoveResponseToDB(object: DBXTeamSharingAllowlistRemoveResponse) -> DBTEAMSharingAllowlistRemoveResponse {
    DBTEAMSharingAllowlistRemoveResponse(default: ())
}

func mapDBXTeamStorageBucketToDBOptional(object: DBXTeamStorageBucket?) -> DBTEAMStorageBucket? {
    guard let object = object else { return nil }
    return mapDBXTeamStorageBucketToDB(object: object)
}

func mapDBXTeamStorageBucketToDB(object: DBXTeamStorageBucket) -> DBTEAMStorageBucket {
    DBTEAMStorageBucket(bucket: object.bucket, users: object.users)
}

func mapDBXTeamTeamFolderAccessErrorToDBOptional(object: DBXTeamTeamFolderAccessError?) -> DBTEAMTeamFolderAccessError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderAccessErrorToDB(object: object)
}

func mapDBXTeamTeamFolderAccessErrorToDB(object: DBXTeamTeamFolderAccessError) -> DBTEAMTeamFolderAccessError {
    if object.asInvalidTeamFolderId != nil {
        return DBTEAMTeamFolderAccessError(invalidTeamFolderId: ())
    }
    if object.asNoAccess != nil {
        return DBTEAMTeamFolderAccessError(noAccess: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderAccessError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderActivateErrorToDBOptional(object: DBXTeamTeamFolderActivateError?) -> DBTEAMTeamFolderActivateError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderActivateErrorToDB(object: object)
}

func mapDBXTeamTeamFolderActivateErrorToDB(object: DBXTeamTeamFolderActivateError) -> DBTEAMTeamFolderActivateError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMTeamFolderActivateError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMTeamFolderActivateError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMTeamFolderActivateError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderActivateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderIdArgToDBOptional(object: DBXTeamTeamFolderIdArg?) -> DBTEAMTeamFolderIdArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderIdArgToDB(object: object)
}

func mapDBXTeamTeamFolderIdArgToDB(object: DBXTeamTeamFolderIdArg) -> DBTEAMTeamFolderIdArg {
    DBTEAMTeamFolderIdArg(teamFolderId: object.teamFolderId)
}

func mapDBXTeamTeamFolderArchiveArgToDBOptional(object: DBXTeamTeamFolderArchiveArg?) -> DBTEAMTeamFolderArchiveArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderArchiveArgToDB(object: object)
}

func mapDBXTeamTeamFolderArchiveArgToDB(object: DBXTeamTeamFolderArchiveArg) -> DBTEAMTeamFolderArchiveArg {
    DBTEAMTeamFolderArchiveArg(teamFolderId: object.teamFolderId, forceAsyncOff: object.forceAsyncOff)
}

func mapDBXTeamTeamFolderArchiveErrorToDBOptional(object: DBXTeamTeamFolderArchiveError?) -> DBTEAMTeamFolderArchiveError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderArchiveErrorToDB(object: object)
}

func mapDBXTeamTeamFolderArchiveErrorToDB(object: DBXTeamTeamFolderArchiveError) -> DBTEAMTeamFolderArchiveError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMTeamFolderArchiveError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMTeamFolderArchiveError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMTeamFolderArchiveError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderArchiveError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderArchiveJobStatusToDBOptional(object: DBXTeamTeamFolderArchiveJobStatus?) -> DBTEAMTeamFolderArchiveJobStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderArchiveJobStatusToDB(object: object)
}

func mapDBXTeamTeamFolderArchiveJobStatusToDB(object: DBXTeamTeamFolderArchiveJobStatus) -> DBTEAMTeamFolderArchiveJobStatus {
    if object.asInProgress != nil {
        return DBTEAMTeamFolderArchiveJobStatus(inProgress: ())
    }
    if let object = object.asComplete {
        let complete = mapDBXTeamTeamFolderMetadataToDB(object: object.complete)
        return DBTEAMTeamFolderArchiveJobStatus(complete: complete)
    }
    if let object = object.asFailed {
        let failed = mapDBXTeamTeamFolderArchiveErrorToDB(object: object.failed)
        return DBTEAMTeamFolderArchiveJobStatus(failed: failed)
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderArchiveLaunchToDBOptional(object: DBXTeamTeamFolderArchiveLaunch?) -> DBTEAMTeamFolderArchiveLaunch? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderArchiveLaunchToDB(object: object)
}

func mapDBXTeamTeamFolderArchiveLaunchToDB(object: DBXTeamTeamFolderArchiveLaunch) -> DBTEAMTeamFolderArchiveLaunch {
    if let object = object.asAsyncJobId {
        let asyncJobId = object.asyncJobId
        return DBTEAMTeamFolderArchiveLaunch(asyncJobId: asyncJobId)
    }
    if let object = object.asComplete {
        let complete = mapDBXTeamTeamFolderMetadataToDB(object: object.complete)
        return DBTEAMTeamFolderArchiveLaunch(complete: complete)
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderCreateArgToDBOptional(object: DBXTeamTeamFolderCreateArg?) -> DBTEAMTeamFolderCreateArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderCreateArgToDB(object: object)
}

func mapDBXTeamTeamFolderCreateArgToDB(object: DBXTeamTeamFolderCreateArg) -> DBTEAMTeamFolderCreateArg {
    DBTEAMTeamFolderCreateArg(name: object.name, syncSetting: mapDBXFilesSyncSettingArgToDBOptional(object: object.syncSetting))
}

func mapDBXTeamTeamFolderCreateErrorToDBOptional(object: DBXTeamTeamFolderCreateError?) -> DBTEAMTeamFolderCreateError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderCreateErrorToDB(object: object)
}

func mapDBXTeamTeamFolderCreateErrorToDB(object: DBXTeamTeamFolderCreateError) -> DBTEAMTeamFolderCreateError {
    if object.asInvalidFolderName != nil {
        return DBTEAMTeamFolderCreateError(invalidFolderName: ())
    }
    if object.asFolderNameAlreadyUsed != nil {
        return DBTEAMTeamFolderCreateError(folderNameAlreadyUsed: ())
    }
    if object.asFolderNameReserved != nil {
        return DBTEAMTeamFolderCreateError(folderNameReserved: ())
    }
    if let object = object.asSyncSettingsError {
        let syncSettingsError = mapDBXFilesSyncSettingsErrorToDB(object: object.syncSettingsError)
        return DBTEAMTeamFolderCreateError(syncSettingsError: syncSettingsError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderCreateError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderGetInfoItemToDBOptional(object: DBXTeamTeamFolderGetInfoItem?) -> DBTEAMTeamFolderGetInfoItem? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderGetInfoItemToDB(object: object)
}

func mapDBXTeamTeamFolderGetInfoItemToDB(object: DBXTeamTeamFolderGetInfoItem) -> DBTEAMTeamFolderGetInfoItem {
    if let object = object.asIdNotFound {
        let idNotFound = object.idNotFound
        return DBTEAMTeamFolderGetInfoItem(idNotFound: idNotFound)
    }
    if let object = object.asTeamFolderMetadata {
        let teamFolderMetadata = mapDBXTeamTeamFolderMetadataToDB(object: object.teamFolderMetadata)
        return DBTEAMTeamFolderGetInfoItem(teamFolderMetadata: teamFolderMetadata)
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderIdListArgToDBOptional(object: DBXTeamTeamFolderIdListArg?) -> DBTEAMTeamFolderIdListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderIdListArgToDB(object: object)
}

func mapDBXTeamTeamFolderIdListArgToDB(object: DBXTeamTeamFolderIdListArg) -> DBTEAMTeamFolderIdListArg {
    DBTEAMTeamFolderIdListArg(teamFolderIds: object.teamFolderIds)
}

func mapDBXTeamTeamFolderInvalidStatusErrorToDBOptional(object: DBXTeamTeamFolderInvalidStatusError?) -> DBTEAMTeamFolderInvalidStatusError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object)
}

func mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: DBXTeamTeamFolderInvalidStatusError) -> DBTEAMTeamFolderInvalidStatusError {
    if object.asActive != nil {
        return DBTEAMTeamFolderInvalidStatusError(active: ())
    }
    if object.asArchived != nil {
        return DBTEAMTeamFolderInvalidStatusError(archived: ())
    }
    if object.asArchiveInProgress != nil {
        return DBTEAMTeamFolderInvalidStatusError(archiveInProgress: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderInvalidStatusError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderListArgToDBOptional(object: DBXTeamTeamFolderListArg?) -> DBTEAMTeamFolderListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderListArgToDB(object: object)
}

func mapDBXTeamTeamFolderListArgToDB(object: DBXTeamTeamFolderListArg) -> DBTEAMTeamFolderListArg {
    DBTEAMTeamFolderListArg(limit: object.limit)
}

func mapDBXTeamTeamFolderListContinueArgToDBOptional(object: DBXTeamTeamFolderListContinueArg?) -> DBTEAMTeamFolderListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderListContinueArgToDB(object: object)
}

func mapDBXTeamTeamFolderListContinueArgToDB(object: DBXTeamTeamFolderListContinueArg) -> DBTEAMTeamFolderListContinueArg {
    DBTEAMTeamFolderListContinueArg(cursor: object.cursor)
}

func mapDBXTeamTeamFolderListContinueErrorToDBOptional(object: DBXTeamTeamFolderListContinueError?) -> DBTEAMTeamFolderListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderListContinueErrorToDB(object: object)
}

func mapDBXTeamTeamFolderListContinueErrorToDB(object: DBXTeamTeamFolderListContinueError) -> DBTEAMTeamFolderListContinueError {
    if object.asInvalidCursor != nil {
        return DBTEAMTeamFolderListContinueError(invalidCursor: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderListContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderListErrorToDBOptional(object: DBXTeamTeamFolderListError?) -> DBTEAMTeamFolderListError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderListErrorToDB(object: object)
}

func mapDBXTeamTeamFolderListErrorToDB(object: DBXTeamTeamFolderListError) -> DBTEAMTeamFolderListError {
    DBTEAMTeamFolderListError(accessError: mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError))
}

func mapDBXTeamTeamFolderListResultToDBOptional(object: DBXTeamTeamFolderListResult?) -> DBTEAMTeamFolderListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderListResultToDB(object: object)
}

func mapDBXTeamTeamFolderListResultToDB(object: DBXTeamTeamFolderListResult) -> DBTEAMTeamFolderListResult {
    DBTEAMTeamFolderListResult(
        teamFolders: object.teamFolders.compactMap { mapDBXTeamTeamFolderMetadataToDB(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBXTeamTeamFolderMetadataToDBOptional(object: DBXTeamTeamFolderMetadata?) -> DBTEAMTeamFolderMetadata? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderMetadataToDB(object: object)
}

func mapDBXTeamTeamFolderMetadataToDB(object: DBXTeamTeamFolderMetadata) -> DBTEAMTeamFolderMetadata {
    DBTEAMTeamFolderMetadata(
        teamFolderId: object.teamFolderId,
        name: object.name,
        status: mapDBXTeamTeamFolderStatusToDB(object: object.status),
        isTeamSharedDropbox: object.isTeamSharedDropbox,
        syncSetting: mapDBXFilesSyncSettingToDB(object: object.syncSetting),
        contentSyncSettings: object.contentSyncSettings.compactMap { mapDBXFilesContentSyncSettingToDB(object: $0) }
    )
}

func mapDBXTeamTeamFolderPermanentlyDeleteErrorToDBOptional(object: DBXTeamTeamFolderPermanentlyDeleteError?) -> DBTEAMTeamFolderPermanentlyDeleteError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderPermanentlyDeleteErrorToDB(object: object)
}

func mapDBXTeamTeamFolderPermanentlyDeleteErrorToDB(object: DBXTeamTeamFolderPermanentlyDeleteError) -> DBTEAMTeamFolderPermanentlyDeleteError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMTeamFolderPermanentlyDeleteError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMTeamFolderPermanentlyDeleteError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMTeamFolderPermanentlyDeleteError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderPermanentlyDeleteError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderRenameArgToDBOptional(object: DBXTeamTeamFolderRenameArg?) -> DBTEAMTeamFolderRenameArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderRenameArgToDB(object: object)
}

func mapDBXTeamTeamFolderRenameArgToDB(object: DBXTeamTeamFolderRenameArg) -> DBTEAMTeamFolderRenameArg {
    DBTEAMTeamFolderRenameArg(teamFolderId: object.teamFolderId, name: object.name)
}

func mapDBXTeamTeamFolderRenameErrorToDBOptional(object: DBXTeamTeamFolderRenameError?) -> DBTEAMTeamFolderRenameError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderRenameErrorToDB(object: object)
}

func mapDBXTeamTeamFolderRenameErrorToDB(object: DBXTeamTeamFolderRenameError) -> DBTEAMTeamFolderRenameError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMTeamFolderRenameError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMTeamFolderRenameError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMTeamFolderRenameError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderRenameError(other: ())
    }
    if object.asInvalidFolderName != nil {
        return DBTEAMTeamFolderRenameError(invalidFolderName: ())
    }
    if object.asFolderNameAlreadyUsed != nil {
        return DBTEAMTeamFolderRenameError(folderNameAlreadyUsed: ())
    }
    if object.asFolderNameReserved != nil {
        return DBTEAMTeamFolderRenameError(folderNameReserved: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderStatusToDBOptional(object: DBXTeamTeamFolderStatus?) -> DBTEAMTeamFolderStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderStatusToDB(object: object)
}

func mapDBXTeamTeamFolderStatusToDB(object: DBXTeamTeamFolderStatus) -> DBTEAMTeamFolderStatus {
    if object.asActive != nil {
        return DBTEAMTeamFolderStatus(active: ())
    }
    if object.asArchived != nil {
        return DBTEAMTeamFolderStatus(archived: ())
    }
    if object.asArchiveInProgress != nil {
        return DBTEAMTeamFolderStatus(archiveInProgress: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderTeamSharedDropboxErrorToDBOptional(object: DBXTeamTeamFolderTeamSharedDropboxError?) -> DBTEAMTeamFolderTeamSharedDropboxError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object)
}

func mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: DBXTeamTeamFolderTeamSharedDropboxError) -> DBTEAMTeamFolderTeamSharedDropboxError {
    if object.asDisallowed != nil {
        return DBTEAMTeamFolderTeamSharedDropboxError(disallowed: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderTeamSharedDropboxError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamFolderUpdateSyncSettingsArgToDBOptional(object: DBXTeamTeamFolderUpdateSyncSettingsArg?) -> DBTEAMTeamFolderUpdateSyncSettingsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderUpdateSyncSettingsArgToDB(object: object)
}

func mapDBXTeamTeamFolderUpdateSyncSettingsArgToDB(object: DBXTeamTeamFolderUpdateSyncSettingsArg) -> DBTEAMTeamFolderUpdateSyncSettingsArg {
    DBTEAMTeamFolderUpdateSyncSettingsArg(
        teamFolderId: object.teamFolderId,
        syncSetting: mapDBXFilesSyncSettingArgToDBOptional(object: object.syncSetting),
        contentSyncSettings: object.contentSyncSettings?.compactMap { mapDBXFilesContentSyncSettingArgToDB(object: $0) }
    )
}

func mapDBXTeamTeamFolderUpdateSyncSettingsErrorToDBOptional(object: DBXTeamTeamFolderUpdateSyncSettingsError?) -> DBTEAMTeamFolderUpdateSyncSettingsError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamFolderUpdateSyncSettingsErrorToDB(object: object)
}

func mapDBXTeamTeamFolderUpdateSyncSettingsErrorToDB(object: DBXTeamTeamFolderUpdateSyncSettingsError) -> DBTEAMTeamFolderUpdateSyncSettingsError {
    if let object = object.asAccessError {
        let accessError = mapDBXTeamTeamFolderAccessErrorToDB(object: object.accessError)
        return DBTEAMTeamFolderUpdateSyncSettingsError(accessError: accessError)
    }
    if let object = object.asStatusError {
        let statusError = mapDBXTeamTeamFolderInvalidStatusErrorToDB(object: object.statusError)
        return DBTEAMTeamFolderUpdateSyncSettingsError(statusError: statusError)
    }
    if let object = object.asTeamSharedDropboxError {
        let teamSharedDropboxError = mapDBXTeamTeamFolderTeamSharedDropboxErrorToDB(object: object.teamSharedDropboxError)
        return DBTEAMTeamFolderUpdateSyncSettingsError(teamSharedDropboxError: teamSharedDropboxError)
    }
    if object.asOther != nil {
        return DBTEAMTeamFolderUpdateSyncSettingsError(other: ())
    }
    if let object = object.asSyncSettingsError {
        let syncSettingsError = mapDBXFilesSyncSettingsErrorToDB(object: object.syncSettingsError)
        return DBTEAMTeamFolderUpdateSyncSettingsError(syncSettingsError: syncSettingsError)
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamGetInfoResultToDBOptional(object: DBXTeamTeamGetInfoResult?) -> DBTEAMTeamGetInfoResult? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamGetInfoResultToDB(object: object)
}

func mapDBXTeamTeamGetInfoResultToDB(object: DBXTeamTeamGetInfoResult) -> DBTEAMTeamGetInfoResult {
    DBTEAMTeamGetInfoResult(
        name: object.name,
        teamId: object.teamId,
        numLicensedUsers: object.numLicensedUsers,
        numProvisionedUsers: object.numProvisionedUsers,
        policies: mapDBXTeamPoliciesTeamMemberPoliciesToDB(object: object.policies),
        numUsedLicenses: object.numUsedLicenses
    )
}

func mapDBXTeamTeamMemberInfoToDBOptional(object: DBXTeamTeamMemberInfo?) -> DBTEAMTeamMemberInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberInfoToDB(object: object)
}

func mapDBXTeamTeamMemberInfoToDB(object: DBXTeamTeamMemberInfo) -> DBTEAMTeamMemberInfo {
    DBTEAMTeamMemberInfo(profile: mapDBXTeamTeamMemberProfileToDB(object: object.profile), role: mapDBXTeamAdminTierToDB(object: object.role))
}

func mapDBXTeamTeamMemberInfoV2ToDBOptional(object: DBXTeamTeamMemberInfoV2?) -> DBTEAMTeamMemberInfoV2? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberInfoV2ToDB(object: object)
}

func mapDBXTeamTeamMemberInfoV2ToDB(object: DBXTeamTeamMemberInfoV2) -> DBTEAMTeamMemberInfoV2 {
    DBTEAMTeamMemberInfoV2(
        profile: mapDBXTeamTeamMemberProfileToDB(object: object.profile),
        roles: object.roles?.compactMap { mapDBXTeamTeamMemberRoleToDB(object: $0) }
    )
}

func mapDBXTeamTeamMemberInfoV2ResultToDBOptional(object: DBXTeamTeamMemberInfoV2Result?) -> DBTEAMTeamMemberInfoV2Result? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberInfoV2ResultToDB(object: object)
}

func mapDBXTeamTeamMemberInfoV2ResultToDB(object: DBXTeamTeamMemberInfoV2Result) -> DBTEAMTeamMemberInfoV2Result {
    DBTEAMTeamMemberInfoV2Result(memberInfo: mapDBXTeamTeamMemberInfoV2ToDB(object: object.memberInfo))
}

func mapDBXTeamTeamMemberProfileToDBOptional(object: DBXTeamTeamMemberProfile?) -> DBTEAMTeamMemberProfile? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberProfileToDB(object: object)
}

func mapDBXTeamTeamMemberProfileToDB(object: DBXTeamTeamMemberProfile) -> DBTEAMTeamMemberProfile {
    DBTEAMTeamMemberProfile(
        teamMemberId: object.teamMemberId,
        email: object.email,
        emailVerified: object.emailVerified,
        status: mapDBXTeamTeamMemberStatusToDB(object: object.status),
        name: mapDBXUsersNameToDB(object: object.name),
        membershipType: mapDBXTeamTeamMembershipTypeToDB(object: object.membershipType),
        groups: object.groups,
        memberFolderId: object.memberFolderId,
        externalId: object.externalId,
        accountId: object.accountId,
        secondaryEmails: object.secondaryEmails?.compactMap { mapDBXSecondaryEmailsSecondaryEmailToDB(object: $0) },
        invitedOn: object.invitedOn,
        joinedOn: object.joinedOn,
        suspendedOn: object.suspendedOn,
        persistentId: object.persistentId,
        isDirectoryRestricted: object.isDirectoryRestricted,
        profilePhotoUrl: object.profilePhotoUrl
    )
}

func mapDBXTeamTeamMemberRoleToDBOptional(object: DBXTeamTeamMemberRole?) -> DBTEAMTeamMemberRole? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberRoleToDB(object: object)
}

func mapDBXTeamTeamMemberRoleToDB(object: DBXTeamTeamMemberRole) -> DBTEAMTeamMemberRole {
    DBTEAMTeamMemberRole(roleId: object.roleId, name: object.name, description_: object.description_)
}

func mapDBXTeamTeamMemberStatusToDBOptional(object: DBXTeamTeamMemberStatus?) -> DBTEAMTeamMemberStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMemberStatusToDB(object: object)
}

func mapDBXTeamTeamMemberStatusToDB(object: DBXTeamTeamMemberStatus) -> DBTEAMTeamMemberStatus {
    if object.asActive != nil {
        return DBTEAMTeamMemberStatus(active: ())
    }
    if object.asInvited != nil {
        return DBTEAMTeamMemberStatus(invited: ())
    }
    if object.asSuspended != nil {
        return DBTEAMTeamMemberStatus(suspended: ())
    }
    if let object = object.asRemoved {
        let removed = mapDBXTeamRemovedStatusToDB(object: object.removed)
        return DBTEAMTeamMemberStatus(removed: removed)
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamMembershipTypeToDBOptional(object: DBXTeamTeamMembershipType?) -> DBTEAMTeamMembershipType? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamMembershipTypeToDB(object: object)
}

func mapDBXTeamTeamMembershipTypeToDB(object: DBXTeamTeamMembershipType) -> DBTEAMTeamMembershipType {
    if object.asFull != nil {
        return DBTEAMTeamMembershipType(full: ())
    }
    if object.asLimited != nil {
        return DBTEAMTeamMembershipType(limited: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamNamespacesListArgToDBOptional(object: DBXTeamTeamNamespacesListArg?) -> DBTEAMTeamNamespacesListArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamNamespacesListArgToDB(object: object)
}

func mapDBXTeamTeamNamespacesListArgToDB(object: DBXTeamTeamNamespacesListArg) -> DBTEAMTeamNamespacesListArg {
    DBTEAMTeamNamespacesListArg(limit: object.limit)
}

func mapDBXTeamTeamNamespacesListContinueArgToDBOptional(object: DBXTeamTeamNamespacesListContinueArg?) -> DBTEAMTeamNamespacesListContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamNamespacesListContinueArgToDB(object: object)
}

func mapDBXTeamTeamNamespacesListContinueArgToDB(object: DBXTeamTeamNamespacesListContinueArg) -> DBTEAMTeamNamespacesListContinueArg {
    DBTEAMTeamNamespacesListContinueArg(cursor: object.cursor)
}

func mapDBXTeamTeamNamespacesListErrorToDBOptional(object: DBXTeamTeamNamespacesListError?) -> DBTEAMTeamNamespacesListError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamNamespacesListErrorToDB(object: object)
}

func mapDBXTeamTeamNamespacesListErrorToDB(object: DBXTeamTeamNamespacesListError) -> DBTEAMTeamNamespacesListError {
    if object.asInvalidArg != nil {
        return DBTEAMTeamNamespacesListError(invalidArg: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamNamespacesListError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamNamespacesListContinueErrorToDBOptional(object: DBXTeamTeamNamespacesListContinueError?) -> DBTEAMTeamNamespacesListContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamNamespacesListContinueErrorToDB(object: object)
}

func mapDBXTeamTeamNamespacesListContinueErrorToDB(object: DBXTeamTeamNamespacesListContinueError) -> DBTEAMTeamNamespacesListContinueError {
    if object.asInvalidArg != nil {
        return DBTEAMTeamNamespacesListContinueError(invalidArg: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamNamespacesListContinueError(other: ())
    }
    if object.asInvalidCursor != nil {
        return DBTEAMTeamNamespacesListContinueError(invalidCursor: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTeamNamespacesListResultToDBOptional(object: DBXTeamTeamNamespacesListResult?) -> DBTEAMTeamNamespacesListResult? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamNamespacesListResultToDB(object: object)
}

func mapDBXTeamTeamNamespacesListResultToDB(object: DBXTeamTeamNamespacesListResult) -> DBTEAMTeamNamespacesListResult {
    DBTEAMTeamNamespacesListResult(
        namespaces: object.namespaces.compactMap { mapDBXTeamNamespaceMetadataToDB(object: $0) },
        cursor: object.cursor,
        hasMore: object.hasMore
    )
}

func mapDBXTeamTeamReportFailureReasonToDBOptional(object: DBXTeamTeamReportFailureReason?) -> DBTEAMTeamReportFailureReason? {
    guard let object = object else { return nil }
    return mapDBXTeamTeamReportFailureReasonToDB(object: object)
}

func mapDBXTeamTeamReportFailureReasonToDB(object: DBXTeamTeamReportFailureReason) -> DBTEAMTeamReportFailureReason {
    if object.asTemporaryError != nil {
        return DBTEAMTeamReportFailureReason(temporaryError: ())
    }
    if object.asManyReportsAtOnce != nil {
        return DBTEAMTeamReportFailureReason(manyReportsAtOnce: ())
    }
    if object.asTooMuchData != nil {
        return DBTEAMTeamReportFailureReason(tooMuchData: ())
    }
    if object.asOther != nil {
        return DBTEAMTeamReportFailureReason(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTokenGetAuthenticatedAdminErrorToDBOptional(object: DBXTeamTokenGetAuthenticatedAdminError?) -> DBTEAMTokenGetAuthenticatedAdminError? {
    guard let object = object else { return nil }
    return mapDBXTeamTokenGetAuthenticatedAdminErrorToDB(object: object)
}

func mapDBXTeamTokenGetAuthenticatedAdminErrorToDB(object: DBXTeamTokenGetAuthenticatedAdminError) -> DBTEAMTokenGetAuthenticatedAdminError {
    if object.asMappingNotFound != nil {
        return DBTEAMTokenGetAuthenticatedAdminError(mappingNotFound: ())
    }
    if object.asAdminNotActive != nil {
        return DBTEAMTokenGetAuthenticatedAdminError(adminNotActive: ())
    }
    if object.asOther != nil {
        return DBTEAMTokenGetAuthenticatedAdminError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamTokenGetAuthenticatedAdminResultToDBOptional(object: DBXTeamTokenGetAuthenticatedAdminResult?) -> DBTEAMTokenGetAuthenticatedAdminResult? {
    guard let object = object else { return nil }
    return mapDBXTeamTokenGetAuthenticatedAdminResultToDB(object: object)
}

func mapDBXTeamTokenGetAuthenticatedAdminResultToDB(object: DBXTeamTokenGetAuthenticatedAdminResult) -> DBTEAMTokenGetAuthenticatedAdminResult {
    DBTEAMTokenGetAuthenticatedAdminResult(adminProfile: mapDBXTeamTeamMemberProfileToDB(object: object.adminProfile))
}

func mapDBXTeamUploadApiRateLimitValueToDBOptional(object: DBXTeamUploadApiRateLimitValue?) -> DBTEAMUploadApiRateLimitValue? {
    guard let object = object else { return nil }
    return mapDBXTeamUploadApiRateLimitValueToDB(object: object)
}

func mapDBXTeamUploadApiRateLimitValueToDB(object: DBXTeamUploadApiRateLimitValue) -> DBTEAMUploadApiRateLimitValue {
    if object.asUnlimited != nil {
        return DBTEAMUploadApiRateLimitValue(unlimited: ())
    }
    if let object = object.asLimit {
        let limit = object.limit
        return DBTEAMUploadApiRateLimitValue(limit: limit)
    }
    if object.asOther != nil {
        return DBTEAMUploadApiRateLimitValue(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamUserAddResultToDBOptional(object: DBXTeamUserAddResult?) -> DBTEAMUserAddResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserAddResultToDB(object: object)
}

func mapDBXTeamUserAddResultToDB(object: DBXTeamUserAddResult) -> DBTEAMUserAddResult {
    if let object = object.asSuccess {
        let success = mapDBXTeamUserSecondaryEmailsResultToDB(object: object.success)
        return DBTEAMUserAddResult(success: success)
    }
    if let object = object.asInvalidUser {
        let invalidUser = mapDBXTeamUserSelectorArgToDB(object: object.invalidUser)
        return DBTEAMUserAddResult(invalidUser: invalidUser)
    }
    if let object = object.asUnverified {
        let unverified = mapDBXTeamUserSelectorArgToDB(object: object.unverified)
        return DBTEAMUserAddResult(unverified: unverified)
    }
    if let object = object.asPlaceholderUser {
        let placeholderUser = mapDBXTeamUserSelectorArgToDB(object: object.placeholderUser)
        return DBTEAMUserAddResult(placeholderUser: placeholderUser)
    }
    if object.asOther != nil {
        return DBTEAMUserAddResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamUserCustomQuotaArgToDBOptional(object: DBXTeamUserCustomQuotaArg?) -> DBTEAMUserCustomQuotaArg? {
    guard let object = object else { return nil }
    return mapDBXTeamUserCustomQuotaArgToDB(object: object)
}

func mapDBXTeamUserCustomQuotaArgToDB(object: DBXTeamUserCustomQuotaArg) -> DBTEAMUserCustomQuotaArg {
    DBTEAMUserCustomQuotaArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), quotaGb: object.quotaGb)
}

func mapDBXTeamUserCustomQuotaResultToDBOptional(object: DBXTeamUserCustomQuotaResult?) -> DBTEAMUserCustomQuotaResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserCustomQuotaResultToDB(object: object)
}

func mapDBXTeamUserCustomQuotaResultToDB(object: DBXTeamUserCustomQuotaResult) -> DBTEAMUserCustomQuotaResult {
    DBTEAMUserCustomQuotaResult(user: mapDBXTeamUserSelectorArgToDB(object: object.user), quotaGb: object.quotaGb)
}

func mapDBXTeamUserDeleteEmailsResultToDBOptional(object: DBXTeamUserDeleteEmailsResult?) -> DBTEAMUserDeleteEmailsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserDeleteEmailsResultToDB(object: object)
}

func mapDBXTeamUserDeleteEmailsResultToDB(object: DBXTeamUserDeleteEmailsResult) -> DBTEAMUserDeleteEmailsResult {
    DBTEAMUserDeleteEmailsResult(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        results: object.results.compactMap { mapDBXTeamDeleteSecondaryEmailResultToDB(object: $0) }
    )
}

func mapDBXTeamUserDeleteResultToDBOptional(object: DBXTeamUserDeleteResult?) -> DBTEAMUserDeleteResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserDeleteResultToDB(object: object)
}

func mapDBXTeamUserDeleteResultToDB(object: DBXTeamUserDeleteResult) -> DBTEAMUserDeleteResult {
    if let object = object.asSuccess {
        let success = mapDBXTeamUserDeleteEmailsResultToDB(object: object.success)
        return DBTEAMUserDeleteResult(success: success)
    }
    if let object = object.asInvalidUser {
        let invalidUser = mapDBXTeamUserSelectorArgToDB(object: object.invalidUser)
        return DBTEAMUserDeleteResult(invalidUser: invalidUser)
    }
    if object.asOther != nil {
        return DBTEAMUserDeleteResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamUserResendEmailsResultToDBOptional(object: DBXTeamUserResendEmailsResult?) -> DBTEAMUserResendEmailsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserResendEmailsResultToDB(object: object)
}

func mapDBXTeamUserResendEmailsResultToDB(object: DBXTeamUserResendEmailsResult) -> DBTEAMUserResendEmailsResult {
    DBTEAMUserResendEmailsResult(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        results: object.results.compactMap { mapDBXTeamResendSecondaryEmailResultToDB(object: $0) }
    )
}

func mapDBXTeamUserResendResultToDBOptional(object: DBXTeamUserResendResult?) -> DBTEAMUserResendResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserResendResultToDB(object: object)
}

func mapDBXTeamUserResendResultToDB(object: DBXTeamUserResendResult) -> DBTEAMUserResendResult {
    if let object = object.asSuccess {
        let success = mapDBXTeamUserResendEmailsResultToDB(object: object.success)
        return DBTEAMUserResendResult(success: success)
    }
    if let object = object.asInvalidUser {
        let invalidUser = mapDBXTeamUserSelectorArgToDB(object: object.invalidUser)
        return DBTEAMUserResendResult(invalidUser: invalidUser)
    }
    if object.asOther != nil {
        return DBTEAMUserResendResult(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamUserSecondaryEmailsArgToDBOptional(object: DBXTeamUserSecondaryEmailsArg?) -> DBTEAMUserSecondaryEmailsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamUserSecondaryEmailsArgToDB(object: object)
}

func mapDBXTeamUserSecondaryEmailsArgToDB(object: DBXTeamUserSecondaryEmailsArg) -> DBTEAMUserSecondaryEmailsArg {
    DBTEAMUserSecondaryEmailsArg(user: mapDBXTeamUserSelectorArgToDB(object: object.user), secondaryEmails: object.secondaryEmails)
}

func mapDBXTeamUserSecondaryEmailsResultToDBOptional(object: DBXTeamUserSecondaryEmailsResult?) -> DBTEAMUserSecondaryEmailsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamUserSecondaryEmailsResultToDB(object: object)
}

func mapDBXTeamUserSecondaryEmailsResultToDB(object: DBXTeamUserSecondaryEmailsResult) -> DBTEAMUserSecondaryEmailsResult {
    DBTEAMUserSecondaryEmailsResult(
        user: mapDBXTeamUserSelectorArgToDB(object: object.user),
        results: object.results.compactMap { mapDBXTeamAddSecondaryEmailResultToDB(object: $0) }
    )
}

func mapDBXTeamUserSelectorArgToDBOptional(object: DBXTeamUserSelectorArg?) -> DBTEAMUserSelectorArg? {
    guard let object = object else { return nil }
    return mapDBXTeamUserSelectorArgToDB(object: object)
}

func mapDBXTeamUserSelectorArgToDB(object: DBXTeamUserSelectorArg) -> DBTEAMUserSelectorArg {
    if let object = object.asTeamMemberId {
        let teamMemberId = object.teamMemberId
        return DBTEAMUserSelectorArg(teamMemberId: teamMemberId)
    }
    if let object = object.asExternalId {
        let externalId = object.externalId
        return DBTEAMUserSelectorArg(externalId: externalId)
    }
    if let object = object.asEmail {
        let email = object.email
        return DBTEAMUserSelectorArg(email: email)
    }
    fatalError("codegen error")
}

func mapDBXTeamUsersSelectorArgToDBOptional(object: DBXTeamUsersSelectorArg?) -> DBTEAMUsersSelectorArg? {
    guard let object = object else { return nil }
    return mapDBXTeamUsersSelectorArgToDB(object: object)
}

func mapDBXTeamUsersSelectorArgToDB(object: DBXTeamUsersSelectorArg) -> DBTEAMUsersSelectorArg {
    if let object = object.asTeamMemberIds {
        let teamMemberIds = object.teamMemberIds
        return DBTEAMUsersSelectorArg(teamMemberIds: teamMemberIds)
    }
    if let object = object.asExternalIds {
        let externalIds = object.externalIds
        return DBTEAMUsersSelectorArg(externalIds: externalIds)
    }
    if let object = object.asEmails {
        let emails = object.emails
        return DBTEAMUsersSelectorArg(emails: emails)
    }
    fatalError("codegen error")
}
