///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation

/// Datatypes and serializers for the users_common namespace
public class UsersCommon {
    /// What type of account this user has.
    public enum AccountType: CustomStringConvertible, JSONRepresentable {
        /// The basic account type.
        case basic
        /// The Dropbox Pro account type.
        case pro
        /// The Dropbox Business account type.
        case business

        func json() throws -> JSON {
            try AccountTypeSerializer().serialize(self)
        }

        public var description: String {
            do {
                return "\(SerializeUtil.prepareJSONForSerialization(try AccountTypeSerializer().serialize(self)))"
            } catch {
                return "Failed to generate description for AccountType: \(error)"
            }
        }
    }

    public class AccountTypeSerializer: JSONSerializer {
        public init() {}
        public func serialize(_ value: AccountType) throws -> JSON {
            switch value {
            case .basic:
                var d = [String: JSON]()
                d[".tag"] = .str("basic")
                return .dictionary(d)
            case .pro:
                var d = [String: JSON]()
                d[".tag"] = .str("pro")
                return .dictionary(d)
            case .business:
                var d = [String: JSON]()
                d[".tag"] = .str("business")
                return .dictionary(d)
            }
        }

        public func deserialize(_ json: JSON) throws -> AccountType {
            switch json {
            case .dictionary(let d):
                let tag = try Serialization.getTag(d)
                switch tag {
                case "basic":
                    return AccountType.basic
                case "pro":
                    return AccountType.pro
                case "business":
                    return AccountType.business
                default:
                    throw JSONSerializerError.unknownTag(type: AccountType.self, json: json, tag: tag)
                }
            default:
                throw JSONSerializerError.deserializeError(type: AccountType.self, json: json)
            }
        }
    }
}
