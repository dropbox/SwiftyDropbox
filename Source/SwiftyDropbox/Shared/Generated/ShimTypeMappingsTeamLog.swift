///
/// Copyright (c) 2024 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

import Foundation
import stone_sdk_objc
import stone_sdk_swift
import stone_sdk_swift_objc

func mapDBXTeamLogAccessMethodLogInfoToDBOptional(object: DBXTeamLogAccessMethodLogInfo?) -> DBTEAMLOGAccessMethodLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccessMethodLogInfoToDB(object: object)
}

func mapDBXTeamLogAccessMethodLogInfoToDB(object: DBXTeamLogAccessMethodLogInfo) -> DBTEAMLOGAccessMethodLogInfo {
    if let object = object.asAdminConsole {
        let adminConsole = mapDBXTeamLogWebSessionLogInfoToDB(object: object.adminConsole)
        return DBTEAMLOGAccessMethodLogInfo(adminConsole: adminConsole)
    }
    if let object = object.asApi {
        let api = mapDBXTeamLogApiSessionLogInfoToDB(object: object.api)
        return DBTEAMLOGAccessMethodLogInfo(api: api)
    }
    if let object = object.asContentManager {
        let contentManager = mapDBXTeamLogWebSessionLogInfoToDB(object: object.contentManager)
        return DBTEAMLOGAccessMethodLogInfo(contentManager: contentManager)
    }
    if let object = object.asEndUser {
        let endUser = mapDBXTeamLogSessionLogInfoToDB(object: object.endUser)
        return DBTEAMLOGAccessMethodLogInfo(endUser: endUser)
    }
    if let object = object.asEnterpriseConsole {
        let enterpriseConsole = mapDBXTeamLogWebSessionLogInfoToDB(object: object.enterpriseConsole)
        return DBTEAMLOGAccessMethodLogInfo(enterpriseConsole: enterpriseConsole)
    }
    if let object = object.asSignInAs {
        let signInAs = mapDBXTeamLogWebSessionLogInfoToDB(object: object.signInAs)
        return DBTEAMLOGAccessMethodLogInfo(signInAs: signInAs)
    }
    if object.asOther != nil {
        return DBTEAMLOGAccessMethodLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAccountCaptureAvailabilityToDBOptional(object: DBXTeamLogAccountCaptureAvailability?) -> DBTEAMLOGAccountCaptureAvailability? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureAvailabilityToDB(object: object)
}

func mapDBXTeamLogAccountCaptureAvailabilityToDB(object: DBXTeamLogAccountCaptureAvailability) -> DBTEAMLOGAccountCaptureAvailability {
    if object.asAvailable != nil {
        return DBTEAMLOGAccountCaptureAvailability(available: ())
    }
    if object.asUnavailable != nil {
        return DBTEAMLOGAccountCaptureAvailability(unavailable: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAccountCaptureAvailability(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAccountCaptureChangeAvailabilityDetailsToDBOptional(object: DBXTeamLogAccountCaptureChangeAvailabilityDetails?)
    -> DBTEAMLOGAccountCaptureChangeAvailabilityDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureChangeAvailabilityDetailsToDB(object: object)
}

func mapDBXTeamLogAccountCaptureChangeAvailabilityDetailsToDB(object: DBXTeamLogAccountCaptureChangeAvailabilityDetails)
    -> DBTEAMLOGAccountCaptureChangeAvailabilityDetails {
    DBTEAMLOGAccountCaptureChangeAvailabilityDetails(
        dNewValue: mapDBXTeamLogAccountCaptureAvailabilityToDB(object: object.newValue),
        previousValue: mapDBXTeamLogAccountCaptureAvailabilityToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogAccountCaptureChangeAvailabilityTypeToDBOptional(object: DBXTeamLogAccountCaptureChangeAvailabilityType?)
    -> DBTEAMLOGAccountCaptureChangeAvailabilityType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureChangeAvailabilityTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureChangeAvailabilityTypeToDB(object: DBXTeamLogAccountCaptureChangeAvailabilityType)
    -> DBTEAMLOGAccountCaptureChangeAvailabilityType {
    DBTEAMLOGAccountCaptureChangeAvailabilityType(description_: object.description_)
}

func mapDBXTeamLogAccountCaptureChangePolicyDetailsToDBOptional(object: DBXTeamLogAccountCaptureChangePolicyDetails?)
    -> DBTEAMLOGAccountCaptureChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogAccountCaptureChangePolicyDetailsToDB(object: DBXTeamLogAccountCaptureChangePolicyDetails) -> DBTEAMLOGAccountCaptureChangePolicyDetails {
    DBTEAMLOGAccountCaptureChangePolicyDetails(
        dNewValue: mapDBXTeamLogAccountCapturePolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogAccountCapturePolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogAccountCaptureChangePolicyTypeToDBOptional(object: DBXTeamLogAccountCaptureChangePolicyType?) -> DBTEAMLOGAccountCaptureChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureChangePolicyTypeToDB(object: DBXTeamLogAccountCaptureChangePolicyType) -> DBTEAMLOGAccountCaptureChangePolicyType {
    DBTEAMLOGAccountCaptureChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogAccountCaptureMigrateAccountDetailsToDBOptional(object: DBXTeamLogAccountCaptureMigrateAccountDetails?)
    -> DBTEAMLOGAccountCaptureMigrateAccountDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureMigrateAccountDetailsToDB(object: object)
}

func mapDBXTeamLogAccountCaptureMigrateAccountDetailsToDB(object: DBXTeamLogAccountCaptureMigrateAccountDetails)
    -> DBTEAMLOGAccountCaptureMigrateAccountDetails {
    DBTEAMLOGAccountCaptureMigrateAccountDetails(domainName: object.domainName)
}

func mapDBXTeamLogAccountCaptureMigrateAccountTypeToDBOptional(object: DBXTeamLogAccountCaptureMigrateAccountType?)
    -> DBTEAMLOGAccountCaptureMigrateAccountType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureMigrateAccountTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureMigrateAccountTypeToDB(object: DBXTeamLogAccountCaptureMigrateAccountType) -> DBTEAMLOGAccountCaptureMigrateAccountType {
    DBTEAMLOGAccountCaptureMigrateAccountType(description_: object.description_)
}

func mapDBXTeamLogAccountCaptureNotificationEmailsSentDetailsToDBOptional(object: DBXTeamLogAccountCaptureNotificationEmailsSentDetails?)
    -> DBTEAMLOGAccountCaptureNotificationEmailsSentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureNotificationEmailsSentDetailsToDB(object: object)
}

func mapDBXTeamLogAccountCaptureNotificationEmailsSentDetailsToDB(object: DBXTeamLogAccountCaptureNotificationEmailsSentDetails)
    -> DBTEAMLOGAccountCaptureNotificationEmailsSentDetails {
    DBTEAMLOGAccountCaptureNotificationEmailsSentDetails(
        domainName: object.domainName,
        notificationType: mapDBXTeamLogAccountCaptureNotificationTypeToDBOptional(object: object.notificationType)
    )
}

func mapDBXTeamLogAccountCaptureNotificationEmailsSentTypeToDBOptional(object: DBXTeamLogAccountCaptureNotificationEmailsSentType?)
    -> DBTEAMLOGAccountCaptureNotificationEmailsSentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureNotificationEmailsSentTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureNotificationEmailsSentTypeToDB(object: DBXTeamLogAccountCaptureNotificationEmailsSentType)
    -> DBTEAMLOGAccountCaptureNotificationEmailsSentType {
    DBTEAMLOGAccountCaptureNotificationEmailsSentType(description_: object.description_)
}

func mapDBXTeamLogAccountCaptureNotificationTypeToDBOptional(object: DBXTeamLogAccountCaptureNotificationType?) -> DBTEAMLOGAccountCaptureNotificationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureNotificationTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureNotificationTypeToDB(object: DBXTeamLogAccountCaptureNotificationType) -> DBTEAMLOGAccountCaptureNotificationType {
    if object.asActionableNotification != nil {
        return DBTEAMLOGAccountCaptureNotificationType(actionableNotification: ())
    }
    if object.asProactiveWarningNotification != nil {
        return DBTEAMLOGAccountCaptureNotificationType(proactiveWarningNotification: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAccountCaptureNotificationType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAccountCapturePolicyToDBOptional(object: DBXTeamLogAccountCapturePolicy?) -> DBTEAMLOGAccountCapturePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCapturePolicyToDB(object: object)
}

func mapDBXTeamLogAccountCapturePolicyToDB(object: DBXTeamLogAccountCapturePolicy) -> DBTEAMLOGAccountCapturePolicy {
    if object.asAllUsers != nil {
        return DBTEAMLOGAccountCapturePolicy(allUsers: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGAccountCapturePolicy(disabled: ())
    }
    if object.asInvitedUsers != nil {
        return DBTEAMLOGAccountCapturePolicy(invitedUsers: ())
    }
    if object.asPreventPersonalCreation != nil {
        return DBTEAMLOGAccountCapturePolicy(preventPersonalCreation: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAccountCapturePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAccountCaptureRelinquishAccountDetailsToDBOptional(object: DBXTeamLogAccountCaptureRelinquishAccountDetails?)
    -> DBTEAMLOGAccountCaptureRelinquishAccountDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureRelinquishAccountDetailsToDB(object: object)
}

func mapDBXTeamLogAccountCaptureRelinquishAccountDetailsToDB(object: DBXTeamLogAccountCaptureRelinquishAccountDetails)
    -> DBTEAMLOGAccountCaptureRelinquishAccountDetails {
    DBTEAMLOGAccountCaptureRelinquishAccountDetails(domainName: object.domainName)
}

func mapDBXTeamLogAccountCaptureRelinquishAccountTypeToDBOptional(object: DBXTeamLogAccountCaptureRelinquishAccountType?)
    -> DBTEAMLOGAccountCaptureRelinquishAccountType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountCaptureRelinquishAccountTypeToDB(object: object)
}

func mapDBXTeamLogAccountCaptureRelinquishAccountTypeToDB(object: DBXTeamLogAccountCaptureRelinquishAccountType)
    -> DBTEAMLOGAccountCaptureRelinquishAccountType {
    DBTEAMLOGAccountCaptureRelinquishAccountType(description_: object.description_)
}

func mapDBXTeamLogAccountLockOrUnlockedDetailsToDBOptional(object: DBXTeamLogAccountLockOrUnlockedDetails?) -> DBTEAMLOGAccountLockOrUnlockedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountLockOrUnlockedDetailsToDB(object: object)
}

func mapDBXTeamLogAccountLockOrUnlockedDetailsToDB(object: DBXTeamLogAccountLockOrUnlockedDetails) -> DBTEAMLOGAccountLockOrUnlockedDetails {
    DBTEAMLOGAccountLockOrUnlockedDetails(
        previousValue: mapDBXTeamLogAccountStateToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogAccountStateToDB(object: object.newValue)
    )
}

func mapDBXTeamLogAccountLockOrUnlockedTypeToDBOptional(object: DBXTeamLogAccountLockOrUnlockedType?) -> DBTEAMLOGAccountLockOrUnlockedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountLockOrUnlockedTypeToDB(object: object)
}

func mapDBXTeamLogAccountLockOrUnlockedTypeToDB(object: DBXTeamLogAccountLockOrUnlockedType) -> DBTEAMLOGAccountLockOrUnlockedType {
    DBTEAMLOGAccountLockOrUnlockedType(description_: object.description_)
}

func mapDBXTeamLogAccountStateToDBOptional(object: DBXTeamLogAccountState?) -> DBTEAMLOGAccountState? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAccountStateToDB(object: object)
}

func mapDBXTeamLogAccountStateToDB(object: DBXTeamLogAccountState) -> DBTEAMLOGAccountState {
    if object.asLocked != nil {
        return DBTEAMLOGAccountState(locked: ())
    }
    if object.asUnlocked != nil {
        return DBTEAMLOGAccountState(unlocked: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAccountState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogActionDetailsToDBOptional(object: DBXTeamLogActionDetails?) -> DBTEAMLOGActionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogActionDetailsToDB(object: object)
}

func mapDBXTeamLogActionDetailsToDB(object: DBXTeamLogActionDetails) -> DBTEAMLOGActionDetails {
    if let object = object.asRemoveAction {
        let removeAction = mapDBXTeamLogMemberRemoveActionTypeToDB(object: object.removeAction)
        return DBTEAMLOGActionDetails(removeAction: removeAction)
    }
    if let object = object.asTeamInviteDetails {
        let teamInviteDetails = mapDBXTeamLogTeamInviteDetailsToDB(object: object.teamInviteDetails)
        return DBTEAMLOGActionDetails(teamInviteDetails: teamInviteDetails)
    }
    if let object = object.asTeamJoinDetails {
        let teamJoinDetails = mapDBXTeamLogJoinTeamDetailsToDB(object: object.teamJoinDetails)
        return DBTEAMLOGActionDetails(teamJoinDetails: teamJoinDetails)
    }
    if object.asOther != nil {
        return DBTEAMLOGActionDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogActorLogInfoToDBOptional(object: DBXTeamLogActorLogInfo?) -> DBTEAMLOGActorLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogActorLogInfoToDB(object: object)
}

func mapDBXTeamLogActorLogInfoToDB(object: DBXTeamLogActorLogInfo) -> DBTEAMLOGActorLogInfo {
    if let object = object.asAdmin {
        let admin = mapDBXTeamLogUserLogInfoToDB(object: object.admin)
        return DBTEAMLOGActorLogInfo(admin: admin)
    }
    if object.asAnonymous != nil {
        return DBTEAMLOGActorLogInfo(anonymous: ())
    }
    if let object = object.asApp {
        let app = mapDBXTeamLogAppLogInfoToDB(object: object.app)
        return DBTEAMLOGActorLogInfo(app: app)
    }
    if object.asDropbox != nil {
        return DBTEAMLOGActorLogInfo(dropbox: ())
    }
    if let object = object.asReseller {
        let reseller = mapDBXTeamLogResellerLogInfoToDB(object: object.reseller)
        return DBTEAMLOGActorLogInfo(reseller: reseller)
    }
    if let object = object.asUser {
        let user = mapDBXTeamLogUserLogInfoToDB(object: object.user)
        return DBTEAMLOGActorLogInfo(user: user)
    }
    if object.asOther != nil {
        return DBTEAMLOGActorLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertCategoryEnumToDBOptional(object: DBXTeamLogAdminAlertCategoryEnum?) -> DBTEAMLOGAdminAlertCategoryEnum? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertCategoryEnumToDB(object: object)
}

func mapDBXTeamLogAdminAlertCategoryEnumToDB(object: DBXTeamLogAdminAlertCategoryEnum) -> DBTEAMLOGAdminAlertCategoryEnum {
    if object.asAccountTakeover != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(accountTakeover: ())
    }
    if object.asDataLossProtection != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(dataLossProtection: ())
    }
    if object.asInformationGovernance != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(informationGovernance: ())
    }
    if object.asMalwareSharing != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(malwareSharing: ())
    }
    if object.asMassiveFileOperation != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(massiveFileOperation: ())
    }
    if object.asNa != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(na: ())
    }
    if object.asThreatManagement != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(threatManagement: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminAlertCategoryEnum(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertGeneralStateEnumToDBOptional(object: DBXTeamLogAdminAlertGeneralStateEnum?) -> DBTEAMLOGAdminAlertGeneralStateEnum? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertGeneralStateEnumToDB(object: object)
}

func mapDBXTeamLogAdminAlertGeneralStateEnumToDB(object: DBXTeamLogAdminAlertGeneralStateEnum) -> DBTEAMLOGAdminAlertGeneralStateEnum {
    if object.asActive != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(active: ())
    }
    if object.asDismissed != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(dismissed: ())
    }
    if object.asInProgress != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(inProgress: ())
    }
    if object.asNa != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(na: ())
    }
    if object.asResolved != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(resolved: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminAlertGeneralStateEnum(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertSeverityEnumToDBOptional(object: DBXTeamLogAdminAlertSeverityEnum?) -> DBTEAMLOGAdminAlertSeverityEnum? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertSeverityEnumToDB(object: object)
}

func mapDBXTeamLogAdminAlertSeverityEnumToDB(object: DBXTeamLogAdminAlertSeverityEnum) -> DBTEAMLOGAdminAlertSeverityEnum {
    if object.asHigh != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(high: ())
    }
    if object.asInfo != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(info: ())
    }
    if object.asLow != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(low: ())
    }
    if object.asMedium != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(medium: ())
    }
    if object.asNa != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(na: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminAlertSeverityEnum(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertingAlertConfigurationToDBOptional(object: DBXTeamLogAdminAlertingAlertConfiguration?) -> DBTEAMLOGAdminAlertingAlertConfiguration? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingAlertConfigurationToDB(object: object)
}

func mapDBXTeamLogAdminAlertingAlertConfigurationToDB(object: DBXTeamLogAdminAlertingAlertConfiguration) -> DBTEAMLOGAdminAlertingAlertConfiguration {
    DBTEAMLOGAdminAlertingAlertConfiguration(
        alertState: mapDBXTeamLogAdminAlertingAlertStatePolicyToDBOptional(object: object.alertState),
        sensitivityLevel: mapDBXTeamLogAdminAlertingAlertSensitivityToDBOptional(object: object.sensitivityLevel),
        recipientsSettings: mapDBXTeamLogRecipientsConfigurationToDBOptional(object: object.recipientsSettings),
        text: object.text,
        excludedFileExtensions: object.excludedFileExtensions
    )
}

func mapDBXTeamLogAdminAlertingAlertSensitivityToDBOptional(object: DBXTeamLogAdminAlertingAlertSensitivity?) -> DBTEAMLOGAdminAlertingAlertSensitivity? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingAlertSensitivityToDB(object: object)
}

func mapDBXTeamLogAdminAlertingAlertSensitivityToDB(object: DBXTeamLogAdminAlertingAlertSensitivity) -> DBTEAMLOGAdminAlertingAlertSensitivity {
    if object.asHigh != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(high: ())
    }
    if object.asHighest != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(highest: ())
    }
    if object.asInvalid != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(invalid: ())
    }
    if object.asLow != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(low: ())
    }
    if object.asLowest != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(lowest: ())
    }
    if object.asMedium != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(medium: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminAlertingAlertSensitivity(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertingAlertStateChangedDetailsToDBOptional(object: DBXTeamLogAdminAlertingAlertStateChangedDetails?)
    -> DBTEAMLOGAdminAlertingAlertStateChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingAlertStateChangedDetailsToDB(object: object)
}

func mapDBXTeamLogAdminAlertingAlertStateChangedDetailsToDB(object: DBXTeamLogAdminAlertingAlertStateChangedDetails)
    -> DBTEAMLOGAdminAlertingAlertStateChangedDetails {
    DBTEAMLOGAdminAlertingAlertStateChangedDetails(
        alertName: object.alertName,
        alertSeverity: mapDBXTeamLogAdminAlertSeverityEnumToDB(object: object.alertSeverity),
        alertCategory: mapDBXTeamLogAdminAlertCategoryEnumToDB(object: object.alertCategory),
        alertInstanceId: object.alertInstanceId,
        previousValue: mapDBXTeamLogAdminAlertGeneralStateEnumToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogAdminAlertGeneralStateEnumToDB(object: object.newValue)
    )
}

func mapDBXTeamLogAdminAlertingAlertStateChangedTypeToDBOptional(object: DBXTeamLogAdminAlertingAlertStateChangedType?)
    -> DBTEAMLOGAdminAlertingAlertStateChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingAlertStateChangedTypeToDB(object: object)
}

func mapDBXTeamLogAdminAlertingAlertStateChangedTypeToDB(object: DBXTeamLogAdminAlertingAlertStateChangedType) -> DBTEAMLOGAdminAlertingAlertStateChangedType {
    DBTEAMLOGAdminAlertingAlertStateChangedType(description_: object.description_)
}

func mapDBXTeamLogAdminAlertingAlertStatePolicyToDBOptional(object: DBXTeamLogAdminAlertingAlertStatePolicy?) -> DBTEAMLOGAdminAlertingAlertStatePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingAlertStatePolicyToDB(object: object)
}

func mapDBXTeamLogAdminAlertingAlertStatePolicyToDB(object: DBXTeamLogAdminAlertingAlertStatePolicy) -> DBTEAMLOGAdminAlertingAlertStatePolicy {
    if object.asOff != nil {
        return DBTEAMLOGAdminAlertingAlertStatePolicy(off: ())
    }
    if object.asOn != nil {
        return DBTEAMLOGAdminAlertingAlertStatePolicy(on: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminAlertingAlertStatePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminAlertingChangedAlertConfigDetailsToDBOptional(object: DBXTeamLogAdminAlertingChangedAlertConfigDetails?)
    -> DBTEAMLOGAdminAlertingChangedAlertConfigDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingChangedAlertConfigDetailsToDB(object: object)
}

func mapDBXTeamLogAdminAlertingChangedAlertConfigDetailsToDB(object: DBXTeamLogAdminAlertingChangedAlertConfigDetails)
    -> DBTEAMLOGAdminAlertingChangedAlertConfigDetails {
    DBTEAMLOGAdminAlertingChangedAlertConfigDetails(
        alertName: object.alertName,
        previousAlertConfig: mapDBXTeamLogAdminAlertingAlertConfigurationToDB(object: object.previousAlertConfig),
        dNewAlertConfig: mapDBXTeamLogAdminAlertingAlertConfigurationToDB(object: object.newAlertConfig)
    )
}

func mapDBXTeamLogAdminAlertingChangedAlertConfigTypeToDBOptional(object: DBXTeamLogAdminAlertingChangedAlertConfigType?)
    -> DBTEAMLOGAdminAlertingChangedAlertConfigType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingChangedAlertConfigTypeToDB(object: object)
}

func mapDBXTeamLogAdminAlertingChangedAlertConfigTypeToDB(object: DBXTeamLogAdminAlertingChangedAlertConfigType)
    -> DBTEAMLOGAdminAlertingChangedAlertConfigType {
    DBTEAMLOGAdminAlertingChangedAlertConfigType(description_: object.description_)
}

func mapDBXTeamLogAdminAlertingTriggeredAlertDetailsToDBOptional(object: DBXTeamLogAdminAlertingTriggeredAlertDetails?)
    -> DBTEAMLOGAdminAlertingTriggeredAlertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingTriggeredAlertDetailsToDB(object: object)
}

func mapDBXTeamLogAdminAlertingTriggeredAlertDetailsToDB(object: DBXTeamLogAdminAlertingTriggeredAlertDetails) -> DBTEAMLOGAdminAlertingTriggeredAlertDetails {
    DBTEAMLOGAdminAlertingTriggeredAlertDetails(
        alertName: object.alertName,
        alertSeverity: mapDBXTeamLogAdminAlertSeverityEnumToDB(object: object.alertSeverity),
        alertCategory: mapDBXTeamLogAdminAlertCategoryEnumToDB(object: object.alertCategory),
        alertInstanceId: object.alertInstanceId
    )
}

func mapDBXTeamLogAdminAlertingTriggeredAlertTypeToDBOptional(object: DBXTeamLogAdminAlertingTriggeredAlertType?) -> DBTEAMLOGAdminAlertingTriggeredAlertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminAlertingTriggeredAlertTypeToDB(object: object)
}

func mapDBXTeamLogAdminAlertingTriggeredAlertTypeToDB(object: DBXTeamLogAdminAlertingTriggeredAlertType) -> DBTEAMLOGAdminAlertingTriggeredAlertType {
    DBTEAMLOGAdminAlertingTriggeredAlertType(description_: object.description_)
}

func mapDBXTeamLogAdminConsoleAppPermissionToDBOptional(object: DBXTeamLogAdminConsoleAppPermission?) -> DBTEAMLOGAdminConsoleAppPermission? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminConsoleAppPermissionToDB(object: object)
}

func mapDBXTeamLogAdminConsoleAppPermissionToDB(object: DBXTeamLogAdminConsoleAppPermission) -> DBTEAMLOGAdminConsoleAppPermission {
    if object.asDefaultForListedApps != nil {
        return DBTEAMLOGAdminConsoleAppPermission(defaultForListedApps: ())
    }
    if object.asDefaultForUnlistedApps != nil {
        return DBTEAMLOGAdminConsoleAppPermission(defaultForUnlistedApps: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminConsoleAppPermission(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminConsoleAppPolicyToDBOptional(object: DBXTeamLogAdminConsoleAppPolicy?) -> DBTEAMLOGAdminConsoleAppPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminConsoleAppPolicyToDB(object: object)
}

func mapDBXTeamLogAdminConsoleAppPolicyToDB(object: DBXTeamLogAdminConsoleAppPolicy) -> DBTEAMLOGAdminConsoleAppPolicy {
    if object.asAllow != nil {
        return DBTEAMLOGAdminConsoleAppPolicy(allow: ())
    }
    if object.asBlock != nil {
        return DBTEAMLOGAdminConsoleAppPolicy(block: ())
    }
    if object.asDefault_ != nil {
        return DBTEAMLOGAdminConsoleAppPolicy(default_: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminConsoleAppPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminEmailRemindersChangedDetailsToDBOptional(object: DBXTeamLogAdminEmailRemindersChangedDetails?)
    -> DBTEAMLOGAdminEmailRemindersChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminEmailRemindersChangedDetailsToDB(object: object)
}

func mapDBXTeamLogAdminEmailRemindersChangedDetailsToDB(object: DBXTeamLogAdminEmailRemindersChangedDetails) -> DBTEAMLOGAdminEmailRemindersChangedDetails {
    DBTEAMLOGAdminEmailRemindersChangedDetails(
        dNewValue: mapDBXTeamLogAdminEmailRemindersPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogAdminEmailRemindersPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogAdminEmailRemindersChangedTypeToDBOptional(object: DBXTeamLogAdminEmailRemindersChangedType?) -> DBTEAMLOGAdminEmailRemindersChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminEmailRemindersChangedTypeToDB(object: object)
}

func mapDBXTeamLogAdminEmailRemindersChangedTypeToDB(object: DBXTeamLogAdminEmailRemindersChangedType) -> DBTEAMLOGAdminEmailRemindersChangedType {
    DBTEAMLOGAdminEmailRemindersChangedType(description_: object.description_)
}

func mapDBXTeamLogAdminEmailRemindersPolicyToDBOptional(object: DBXTeamLogAdminEmailRemindersPolicy?) -> DBTEAMLOGAdminEmailRemindersPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminEmailRemindersPolicyToDB(object: object)
}

func mapDBXTeamLogAdminEmailRemindersPolicyToDB(object: DBXTeamLogAdminEmailRemindersPolicy) -> DBTEAMLOGAdminEmailRemindersPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGAdminEmailRemindersPolicy(default_: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGAdminEmailRemindersPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGAdminEmailRemindersPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminEmailRemindersPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAdminRoleToDBOptional(object: DBXTeamLogAdminRole?) -> DBTEAMLOGAdminRole? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAdminRoleToDB(object: object)
}

func mapDBXTeamLogAdminRoleToDB(object: DBXTeamLogAdminRole) -> DBTEAMLOGAdminRole {
    if object.asBillingAdmin != nil {
        return DBTEAMLOGAdminRole(billingAdmin: ())
    }
    if object.asComplianceAdmin != nil {
        return DBTEAMLOGAdminRole(complianceAdmin: ())
    }
    if object.asContentAdmin != nil {
        return DBTEAMLOGAdminRole(contentAdmin: ())
    }
    if object.asLimitedAdmin != nil {
        return DBTEAMLOGAdminRole(limitedAdmin: ())
    }
    if object.asMemberOnly != nil {
        return DBTEAMLOGAdminRole(memberOnly: ())
    }
    if object.asReportingAdmin != nil {
        return DBTEAMLOGAdminRole(reportingAdmin: ())
    }
    if object.asSecurityAdmin != nil {
        return DBTEAMLOGAdminRole(securityAdmin: ())
    }
    if object.asSupportAdmin != nil {
        return DBTEAMLOGAdminRole(supportAdmin: ())
    }
    if object.asTeamAdmin != nil {
        return DBTEAMLOGAdminRole(teamAdmin: ())
    }
    if object.asUserManagementAdmin != nil {
        return DBTEAMLOGAdminRole(userManagementAdmin: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAdminRole(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAlertRecipientsSettingTypeToDBOptional(object: DBXTeamLogAlertRecipientsSettingType?) -> DBTEAMLOGAlertRecipientsSettingType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAlertRecipientsSettingTypeToDB(object: object)
}

func mapDBXTeamLogAlertRecipientsSettingTypeToDB(object: DBXTeamLogAlertRecipientsSettingType) -> DBTEAMLOGAlertRecipientsSettingType {
    if object.asCustomList != nil {
        return DBTEAMLOGAlertRecipientsSettingType(customList: ())
    }
    if object.asInvalid != nil {
        return DBTEAMLOGAlertRecipientsSettingType(invalid: ())
    }
    if object.asNone != nil {
        return DBTEAMLOGAlertRecipientsSettingType(none: ())
    }
    if object.asTeamAdmins != nil {
        return DBTEAMLOGAlertRecipientsSettingType(teamAdmins: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGAlertRecipientsSettingType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogAllowDownloadDisabledDetailsToDBOptional(object: DBXTeamLogAllowDownloadDisabledDetails?) -> DBTEAMLOGAllowDownloadDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAllowDownloadDisabledDetailsToDB(object: object)
}

func mapDBXTeamLogAllowDownloadDisabledDetailsToDB(object: DBXTeamLogAllowDownloadDisabledDetails) -> DBTEAMLOGAllowDownloadDisabledDetails {
    DBTEAMLOGAllowDownloadDisabledDetails(default: ())
}

func mapDBXTeamLogAllowDownloadDisabledTypeToDBOptional(object: DBXTeamLogAllowDownloadDisabledType?) -> DBTEAMLOGAllowDownloadDisabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAllowDownloadDisabledTypeToDB(object: object)
}

func mapDBXTeamLogAllowDownloadDisabledTypeToDB(object: DBXTeamLogAllowDownloadDisabledType) -> DBTEAMLOGAllowDownloadDisabledType {
    DBTEAMLOGAllowDownloadDisabledType(description_: object.description_)
}

func mapDBXTeamLogAllowDownloadEnabledDetailsToDBOptional(object: DBXTeamLogAllowDownloadEnabledDetails?) -> DBTEAMLOGAllowDownloadEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAllowDownloadEnabledDetailsToDB(object: object)
}

func mapDBXTeamLogAllowDownloadEnabledDetailsToDB(object: DBXTeamLogAllowDownloadEnabledDetails) -> DBTEAMLOGAllowDownloadEnabledDetails {
    DBTEAMLOGAllowDownloadEnabledDetails(default: ())
}

func mapDBXTeamLogAllowDownloadEnabledTypeToDBOptional(object: DBXTeamLogAllowDownloadEnabledType?) -> DBTEAMLOGAllowDownloadEnabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAllowDownloadEnabledTypeToDB(object: object)
}

func mapDBXTeamLogAllowDownloadEnabledTypeToDB(object: DBXTeamLogAllowDownloadEnabledType) -> DBTEAMLOGAllowDownloadEnabledType {
    DBTEAMLOGAllowDownloadEnabledType(description_: object.description_)
}

func mapDBXTeamLogApiSessionLogInfoToDBOptional(object: DBXTeamLogApiSessionLogInfo?) -> DBTEAMLOGApiSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogApiSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogApiSessionLogInfoToDB(object: DBXTeamLogApiSessionLogInfo) -> DBTEAMLOGApiSessionLogInfo {
    DBTEAMLOGApiSessionLogInfo(requestId: object.requestId)
}

func mapDBXTeamLogAppBlockedByPermissionsDetailsToDBOptional(object: DBXTeamLogAppBlockedByPermissionsDetails?) -> DBTEAMLOGAppBlockedByPermissionsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppBlockedByPermissionsDetailsToDB(object: object)
}

func mapDBXTeamLogAppBlockedByPermissionsDetailsToDB(object: DBXTeamLogAppBlockedByPermissionsDetails) -> DBTEAMLOGAppBlockedByPermissionsDetails {
    DBTEAMLOGAppBlockedByPermissionsDetails(appInfo: mapDBXTeamLogAppLogInfoToDB(object: object.appInfo))
}

func mapDBXTeamLogAppBlockedByPermissionsTypeToDBOptional(object: DBXTeamLogAppBlockedByPermissionsType?) -> DBTEAMLOGAppBlockedByPermissionsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppBlockedByPermissionsTypeToDB(object: object)
}

func mapDBXTeamLogAppBlockedByPermissionsTypeToDB(object: DBXTeamLogAppBlockedByPermissionsType) -> DBTEAMLOGAppBlockedByPermissionsType {
    DBTEAMLOGAppBlockedByPermissionsType(description_: object.description_)
}

func mapDBXTeamLogAppLinkTeamDetailsToDBOptional(object: DBXTeamLogAppLinkTeamDetails?) -> DBTEAMLOGAppLinkTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppLinkTeamDetailsToDB(object: object)
}

func mapDBXTeamLogAppLinkTeamDetailsToDB(object: DBXTeamLogAppLinkTeamDetails) -> DBTEAMLOGAppLinkTeamDetails {
    DBTEAMLOGAppLinkTeamDetails(appInfo: mapDBXTeamLogAppLogInfoToDB(object: object.appInfo))
}

func mapDBXTeamLogAppLinkTeamTypeToDBOptional(object: DBXTeamLogAppLinkTeamType?) -> DBTEAMLOGAppLinkTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppLinkTeamTypeToDB(object: object)
}

func mapDBXTeamLogAppLinkTeamTypeToDB(object: DBXTeamLogAppLinkTeamType) -> DBTEAMLOGAppLinkTeamType {
    DBTEAMLOGAppLinkTeamType(description_: object.description_)
}

func mapDBXTeamLogAppLinkUserDetailsToDBOptional(object: DBXTeamLogAppLinkUserDetails?) -> DBTEAMLOGAppLinkUserDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppLinkUserDetailsToDB(object: object)
}

func mapDBXTeamLogAppLinkUserDetailsToDB(object: DBXTeamLogAppLinkUserDetails) -> DBTEAMLOGAppLinkUserDetails {
    DBTEAMLOGAppLinkUserDetails(appInfo: mapDBXTeamLogAppLogInfoToDB(object: object.appInfo))
}

func mapDBXTeamLogAppLinkUserTypeToDBOptional(object: DBXTeamLogAppLinkUserType?) -> DBTEAMLOGAppLinkUserType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppLinkUserTypeToDB(object: object)
}

func mapDBXTeamLogAppLinkUserTypeToDB(object: DBXTeamLogAppLinkUserType) -> DBTEAMLOGAppLinkUserType {
    DBTEAMLOGAppLinkUserType(description_: object.description_)
}

func mapDBXTeamLogAppLogInfoToDBOptional(object: DBXTeamLogAppLogInfo?) -> DBTEAMLOGAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppLogInfoToDB(object: object)
}

func mapDBXTeamLogAppLogInfoToDB(object: DBXTeamLogAppLogInfo) -> DBTEAMLOGAppLogInfo {
    switch object {
    case let object as DBXTeamLogUserOrTeamLinkedAppLogInfo:
        return DBTEAMLOGUserOrTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    case let object as DBXTeamLogUserLinkedAppLogInfo:
        return DBTEAMLOGUserLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    case let object as DBXTeamLogTeamLinkedAppLogInfo:
        return DBTEAMLOGTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
    default:
        return DBTEAMLOGAppLogInfo(appId: object.appId, displayName: object.displayName)
    }
}

func mapDBXTeamLogAppPermissionsChangedDetailsToDBOptional(object: DBXTeamLogAppPermissionsChangedDetails?) -> DBTEAMLOGAppPermissionsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppPermissionsChangedDetailsToDB(object: object)
}

func mapDBXTeamLogAppPermissionsChangedDetailsToDB(object: DBXTeamLogAppPermissionsChangedDetails) -> DBTEAMLOGAppPermissionsChangedDetails {
    DBTEAMLOGAppPermissionsChangedDetails(
        previousValue: mapDBXTeamLogAdminConsoleAppPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogAdminConsoleAppPolicyToDB(object: object.newValue),
        appName: object.appName,
        permission: mapDBXTeamLogAdminConsoleAppPermissionToDBOptional(object: object.permission)
    )
}

func mapDBXTeamLogAppPermissionsChangedTypeToDBOptional(object: DBXTeamLogAppPermissionsChangedType?) -> DBTEAMLOGAppPermissionsChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppPermissionsChangedTypeToDB(object: object)
}

func mapDBXTeamLogAppPermissionsChangedTypeToDB(object: DBXTeamLogAppPermissionsChangedType) -> DBTEAMLOGAppPermissionsChangedType {
    DBTEAMLOGAppPermissionsChangedType(description_: object.description_)
}

func mapDBXTeamLogAppUnlinkTeamDetailsToDBOptional(object: DBXTeamLogAppUnlinkTeamDetails?) -> DBTEAMLOGAppUnlinkTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppUnlinkTeamDetailsToDB(object: object)
}

func mapDBXTeamLogAppUnlinkTeamDetailsToDB(object: DBXTeamLogAppUnlinkTeamDetails) -> DBTEAMLOGAppUnlinkTeamDetails {
    DBTEAMLOGAppUnlinkTeamDetails(appInfo: mapDBXTeamLogAppLogInfoToDB(object: object.appInfo))
}

func mapDBXTeamLogAppUnlinkTeamTypeToDBOptional(object: DBXTeamLogAppUnlinkTeamType?) -> DBTEAMLOGAppUnlinkTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppUnlinkTeamTypeToDB(object: object)
}

func mapDBXTeamLogAppUnlinkTeamTypeToDB(object: DBXTeamLogAppUnlinkTeamType) -> DBTEAMLOGAppUnlinkTeamType {
    DBTEAMLOGAppUnlinkTeamType(description_: object.description_)
}

func mapDBXTeamLogAppUnlinkUserDetailsToDBOptional(object: DBXTeamLogAppUnlinkUserDetails?) -> DBTEAMLOGAppUnlinkUserDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppUnlinkUserDetailsToDB(object: object)
}

func mapDBXTeamLogAppUnlinkUserDetailsToDB(object: DBXTeamLogAppUnlinkUserDetails) -> DBTEAMLOGAppUnlinkUserDetails {
    DBTEAMLOGAppUnlinkUserDetails(appInfo: mapDBXTeamLogAppLogInfoToDB(object: object.appInfo))
}

func mapDBXTeamLogAppUnlinkUserTypeToDBOptional(object: DBXTeamLogAppUnlinkUserType?) -> DBTEAMLOGAppUnlinkUserType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAppUnlinkUserTypeToDB(object: object)
}

func mapDBXTeamLogAppUnlinkUserTypeToDB(object: DBXTeamLogAppUnlinkUserType) -> DBTEAMLOGAppUnlinkUserType {
    DBTEAMLOGAppUnlinkUserType(description_: object.description_)
}

func mapDBXTeamLogApplyNamingConventionDetailsToDBOptional(object: DBXTeamLogApplyNamingConventionDetails?) -> DBTEAMLOGApplyNamingConventionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogApplyNamingConventionDetailsToDB(object: object)
}

func mapDBXTeamLogApplyNamingConventionDetailsToDB(object: DBXTeamLogApplyNamingConventionDetails) -> DBTEAMLOGApplyNamingConventionDetails {
    DBTEAMLOGApplyNamingConventionDetails(default: ())
}

func mapDBXTeamLogApplyNamingConventionTypeToDBOptional(object: DBXTeamLogApplyNamingConventionType?) -> DBTEAMLOGApplyNamingConventionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogApplyNamingConventionTypeToDB(object: object)
}

func mapDBXTeamLogApplyNamingConventionTypeToDB(object: DBXTeamLogApplyNamingConventionType) -> DBTEAMLOGApplyNamingConventionType {
    DBTEAMLOGApplyNamingConventionType(description_: object.description_)
}

func mapDBXTeamLogAssetLogInfoToDBOptional(object: DBXTeamLogAssetLogInfo?) -> DBTEAMLOGAssetLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogAssetLogInfoToDB(object: object)
}

func mapDBXTeamLogAssetLogInfoToDB(object: DBXTeamLogAssetLogInfo) -> DBTEAMLOGAssetLogInfo {
    if let object = object.asFile {
        let file = mapDBXTeamLogFileLogInfoToDB(object: object.file)
        return DBTEAMLOGAssetLogInfo(file: file)
    }
    if let object = object.asFolder {
        let folder = mapDBXTeamLogFolderLogInfoToDB(object: object.folder)
        return DBTEAMLOGAssetLogInfo(folder: folder)
    }
    if let object = object.asPaperDocument {
        let paperDocument = mapDBXTeamLogPaperDocumentLogInfoToDB(object: object.paperDocument)
        return DBTEAMLOGAssetLogInfo(paperDocument: paperDocument)
    }
    if let object = object.asPaperFolder {
        let paperFolder = mapDBXTeamLogPaperFolderLogInfoToDB(object: object.paperFolder)
        return DBTEAMLOGAssetLogInfo(paperFolder: paperFolder)
    }
    if let object = object.asShowcaseDocument {
        let showcaseDocument = mapDBXTeamLogShowcaseDocumentLogInfoToDB(object: object.showcaseDocument)
        return DBTEAMLOGAssetLogInfo(showcaseDocument: showcaseDocument)
    }
    if object.asOther != nil {
        return DBTEAMLOGAssetLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogBackupAdminInvitationSentDetailsToDBOptional(object: DBXTeamLogBackupAdminInvitationSentDetails?)
    -> DBTEAMLOGBackupAdminInvitationSentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBackupAdminInvitationSentDetailsToDB(object: object)
}

func mapDBXTeamLogBackupAdminInvitationSentDetailsToDB(object: DBXTeamLogBackupAdminInvitationSentDetails) -> DBTEAMLOGBackupAdminInvitationSentDetails {
    DBTEAMLOGBackupAdminInvitationSentDetails(default: ())
}

func mapDBXTeamLogBackupAdminInvitationSentTypeToDBOptional(object: DBXTeamLogBackupAdminInvitationSentType?) -> DBTEAMLOGBackupAdminInvitationSentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBackupAdminInvitationSentTypeToDB(object: object)
}

func mapDBXTeamLogBackupAdminInvitationSentTypeToDB(object: DBXTeamLogBackupAdminInvitationSentType) -> DBTEAMLOGBackupAdminInvitationSentType {
    DBTEAMLOGBackupAdminInvitationSentType(description_: object.description_)
}

func mapDBXTeamLogBackupInvitationOpenedDetailsToDBOptional(object: DBXTeamLogBackupInvitationOpenedDetails?) -> DBTEAMLOGBackupInvitationOpenedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBackupInvitationOpenedDetailsToDB(object: object)
}

func mapDBXTeamLogBackupInvitationOpenedDetailsToDB(object: DBXTeamLogBackupInvitationOpenedDetails) -> DBTEAMLOGBackupInvitationOpenedDetails {
    DBTEAMLOGBackupInvitationOpenedDetails(default: ())
}

func mapDBXTeamLogBackupInvitationOpenedTypeToDBOptional(object: DBXTeamLogBackupInvitationOpenedType?) -> DBTEAMLOGBackupInvitationOpenedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBackupInvitationOpenedTypeToDB(object: object)
}

func mapDBXTeamLogBackupInvitationOpenedTypeToDB(object: DBXTeamLogBackupInvitationOpenedType) -> DBTEAMLOGBackupInvitationOpenedType {
    DBTEAMLOGBackupInvitationOpenedType(description_: object.description_)
}

func mapDBXTeamLogBackupStatusToDBOptional(object: DBXTeamLogBackupStatus?) -> DBTEAMLOGBackupStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBackupStatusToDB(object: object)
}

func mapDBXTeamLogBackupStatusToDB(object: DBXTeamLogBackupStatus) -> DBTEAMLOGBackupStatus {
    if object.asDisabled != nil {
        return DBTEAMLOGBackupStatus(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGBackupStatus(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGBackupStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogBinderAddPageDetailsToDBOptional(object: DBXTeamLogBinderAddPageDetails?) -> DBTEAMLOGBinderAddPageDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderAddPageDetailsToDB(object: object)
}

func mapDBXTeamLogBinderAddPageDetailsToDB(object: DBXTeamLogBinderAddPageDetails) -> DBTEAMLOGBinderAddPageDetails {
    DBTEAMLOGBinderAddPageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderAddPageTypeToDBOptional(object: DBXTeamLogBinderAddPageType?) -> DBTEAMLOGBinderAddPageType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderAddPageTypeToDB(object: object)
}

func mapDBXTeamLogBinderAddPageTypeToDB(object: DBXTeamLogBinderAddPageType) -> DBTEAMLOGBinderAddPageType {
    DBTEAMLOGBinderAddPageType(description_: object.description_)
}

func mapDBXTeamLogBinderAddSectionDetailsToDBOptional(object: DBXTeamLogBinderAddSectionDetails?) -> DBTEAMLOGBinderAddSectionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderAddSectionDetailsToDB(object: object)
}

func mapDBXTeamLogBinderAddSectionDetailsToDB(object: DBXTeamLogBinderAddSectionDetails) -> DBTEAMLOGBinderAddSectionDetails {
    DBTEAMLOGBinderAddSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderAddSectionTypeToDBOptional(object: DBXTeamLogBinderAddSectionType?) -> DBTEAMLOGBinderAddSectionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderAddSectionTypeToDB(object: object)
}

func mapDBXTeamLogBinderAddSectionTypeToDB(object: DBXTeamLogBinderAddSectionType) -> DBTEAMLOGBinderAddSectionType {
    DBTEAMLOGBinderAddSectionType(description_: object.description_)
}

func mapDBXTeamLogBinderRemovePageDetailsToDBOptional(object: DBXTeamLogBinderRemovePageDetails?) -> DBTEAMLOGBinderRemovePageDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRemovePageDetailsToDB(object: object)
}

func mapDBXTeamLogBinderRemovePageDetailsToDB(object: DBXTeamLogBinderRemovePageDetails) -> DBTEAMLOGBinderRemovePageDetails {
    DBTEAMLOGBinderRemovePageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderRemovePageTypeToDBOptional(object: DBXTeamLogBinderRemovePageType?) -> DBTEAMLOGBinderRemovePageType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRemovePageTypeToDB(object: object)
}

func mapDBXTeamLogBinderRemovePageTypeToDB(object: DBXTeamLogBinderRemovePageType) -> DBTEAMLOGBinderRemovePageType {
    DBTEAMLOGBinderRemovePageType(description_: object.description_)
}

func mapDBXTeamLogBinderRemoveSectionDetailsToDBOptional(object: DBXTeamLogBinderRemoveSectionDetails?) -> DBTEAMLOGBinderRemoveSectionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRemoveSectionDetailsToDB(object: object)
}

func mapDBXTeamLogBinderRemoveSectionDetailsToDB(object: DBXTeamLogBinderRemoveSectionDetails) -> DBTEAMLOGBinderRemoveSectionDetails {
    DBTEAMLOGBinderRemoveSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderRemoveSectionTypeToDBOptional(object: DBXTeamLogBinderRemoveSectionType?) -> DBTEAMLOGBinderRemoveSectionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRemoveSectionTypeToDB(object: object)
}

func mapDBXTeamLogBinderRemoveSectionTypeToDB(object: DBXTeamLogBinderRemoveSectionType) -> DBTEAMLOGBinderRemoveSectionType {
    DBTEAMLOGBinderRemoveSectionType(description_: object.description_)
}

func mapDBXTeamLogBinderRenamePageDetailsToDBOptional(object: DBXTeamLogBinderRenamePageDetails?) -> DBTEAMLOGBinderRenamePageDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRenamePageDetailsToDB(object: object)
}

func mapDBXTeamLogBinderRenamePageDetailsToDB(object: DBXTeamLogBinderRenamePageDetails) -> DBTEAMLOGBinderRenamePageDetails {
    DBTEAMLOGBinderRenamePageDetails(
        eventUuid: object.eventUuid,
        docTitle: object.docTitle,
        binderItemName: object.binderItemName,
        previousBinderItemName: object.previousBinderItemName
    )
}

func mapDBXTeamLogBinderRenamePageTypeToDBOptional(object: DBXTeamLogBinderRenamePageType?) -> DBTEAMLOGBinderRenamePageType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRenamePageTypeToDB(object: object)
}

func mapDBXTeamLogBinderRenamePageTypeToDB(object: DBXTeamLogBinderRenamePageType) -> DBTEAMLOGBinderRenamePageType {
    DBTEAMLOGBinderRenamePageType(description_: object.description_)
}

func mapDBXTeamLogBinderRenameSectionDetailsToDBOptional(object: DBXTeamLogBinderRenameSectionDetails?) -> DBTEAMLOGBinderRenameSectionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRenameSectionDetailsToDB(object: object)
}

func mapDBXTeamLogBinderRenameSectionDetailsToDB(object: DBXTeamLogBinderRenameSectionDetails) -> DBTEAMLOGBinderRenameSectionDetails {
    DBTEAMLOGBinderRenameSectionDetails(
        eventUuid: object.eventUuid,
        docTitle: object.docTitle,
        binderItemName: object.binderItemName,
        previousBinderItemName: object.previousBinderItemName
    )
}

func mapDBXTeamLogBinderRenameSectionTypeToDBOptional(object: DBXTeamLogBinderRenameSectionType?) -> DBTEAMLOGBinderRenameSectionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderRenameSectionTypeToDB(object: object)
}

func mapDBXTeamLogBinderRenameSectionTypeToDB(object: DBXTeamLogBinderRenameSectionType) -> DBTEAMLOGBinderRenameSectionType {
    DBTEAMLOGBinderRenameSectionType(description_: object.description_)
}

func mapDBXTeamLogBinderReorderPageDetailsToDBOptional(object: DBXTeamLogBinderReorderPageDetails?) -> DBTEAMLOGBinderReorderPageDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderReorderPageDetailsToDB(object: object)
}

func mapDBXTeamLogBinderReorderPageDetailsToDB(object: DBXTeamLogBinderReorderPageDetails) -> DBTEAMLOGBinderReorderPageDetails {
    DBTEAMLOGBinderReorderPageDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderReorderPageTypeToDBOptional(object: DBXTeamLogBinderReorderPageType?) -> DBTEAMLOGBinderReorderPageType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderReorderPageTypeToDB(object: object)
}

func mapDBXTeamLogBinderReorderPageTypeToDB(object: DBXTeamLogBinderReorderPageType) -> DBTEAMLOGBinderReorderPageType {
    DBTEAMLOGBinderReorderPageType(description_: object.description_)
}

func mapDBXTeamLogBinderReorderSectionDetailsToDBOptional(object: DBXTeamLogBinderReorderSectionDetails?) -> DBTEAMLOGBinderReorderSectionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderReorderSectionDetailsToDB(object: object)
}

func mapDBXTeamLogBinderReorderSectionDetailsToDB(object: DBXTeamLogBinderReorderSectionDetails) -> DBTEAMLOGBinderReorderSectionDetails {
    DBTEAMLOGBinderReorderSectionDetails(eventUuid: object.eventUuid, docTitle: object.docTitle, binderItemName: object.binderItemName)
}

func mapDBXTeamLogBinderReorderSectionTypeToDBOptional(object: DBXTeamLogBinderReorderSectionType?) -> DBTEAMLOGBinderReorderSectionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogBinderReorderSectionTypeToDB(object: object)
}

func mapDBXTeamLogBinderReorderSectionTypeToDB(object: DBXTeamLogBinderReorderSectionType) -> DBTEAMLOGBinderReorderSectionType {
    DBTEAMLOGBinderReorderSectionType(description_: object.description_)
}

func mapDBXTeamLogCameraUploadsPolicyToDBOptional(object: DBXTeamLogCameraUploadsPolicy?) -> DBTEAMLOGCameraUploadsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCameraUploadsPolicyToDB(object: object)
}

func mapDBXTeamLogCameraUploadsPolicyToDB(object: DBXTeamLogCameraUploadsPolicy) -> DBTEAMLOGCameraUploadsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGCameraUploadsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGCameraUploadsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGCameraUploadsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogCameraUploadsPolicyChangedDetailsToDBOptional(object: DBXTeamLogCameraUploadsPolicyChangedDetails?)
    -> DBTEAMLOGCameraUploadsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCameraUploadsPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogCameraUploadsPolicyChangedDetailsToDB(object: DBXTeamLogCameraUploadsPolicyChangedDetails) -> DBTEAMLOGCameraUploadsPolicyChangedDetails {
    DBTEAMLOGCameraUploadsPolicyChangedDetails(
        dNewValue: mapDBXTeamLogCameraUploadsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogCameraUploadsPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogCameraUploadsPolicyChangedTypeToDBOptional(object: DBXTeamLogCameraUploadsPolicyChangedType?) -> DBTEAMLOGCameraUploadsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCameraUploadsPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogCameraUploadsPolicyChangedTypeToDB(object: DBXTeamLogCameraUploadsPolicyChangedType) -> DBTEAMLOGCameraUploadsPolicyChangedType {
    DBTEAMLOGCameraUploadsPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogCaptureTranscriptPolicyToDBOptional(object: DBXTeamLogCaptureTranscriptPolicy?) -> DBTEAMLOGCaptureTranscriptPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCaptureTranscriptPolicyToDB(object: object)
}

func mapDBXTeamLogCaptureTranscriptPolicyToDB(object: DBXTeamLogCaptureTranscriptPolicy) -> DBTEAMLOGCaptureTranscriptPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGCaptureTranscriptPolicy(default_: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGCaptureTranscriptPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGCaptureTranscriptPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGCaptureTranscriptPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogCaptureTranscriptPolicyChangedDetailsToDBOptional(object: DBXTeamLogCaptureTranscriptPolicyChangedDetails?)
    -> DBTEAMLOGCaptureTranscriptPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCaptureTranscriptPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogCaptureTranscriptPolicyChangedDetailsToDB(object: DBXTeamLogCaptureTranscriptPolicyChangedDetails)
    -> DBTEAMLOGCaptureTranscriptPolicyChangedDetails {
    DBTEAMLOGCaptureTranscriptPolicyChangedDetails(
        dNewValue: mapDBXTeamLogCaptureTranscriptPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogCaptureTranscriptPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogCaptureTranscriptPolicyChangedTypeToDBOptional(object: DBXTeamLogCaptureTranscriptPolicyChangedType?)
    -> DBTEAMLOGCaptureTranscriptPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCaptureTranscriptPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogCaptureTranscriptPolicyChangedTypeToDB(object: DBXTeamLogCaptureTranscriptPolicyChangedType) -> DBTEAMLOGCaptureTranscriptPolicyChangedType {
    DBTEAMLOGCaptureTranscriptPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogCertificateToDBOptional(object: DBXTeamLogCertificate?) -> DBTEAMLOGCertificate? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCertificateToDB(object: object)
}

func mapDBXTeamLogCertificateToDB(object: DBXTeamLogCertificate) -> DBTEAMLOGCertificate {
    DBTEAMLOGCertificate(
        subject: object.subject,
        issuer: object.issuer,
        issueDate: object.issueDate,
        expirationDate: object.expirationDate,
        serialNumber: object.serialNumber,
        sha1Fingerprint: object.sha1Fingerprint,
        commonName: object.commonName
    )
}

func mapDBXTeamLogChangeLinkExpirationPolicyToDBOptional(object: DBXTeamLogChangeLinkExpirationPolicy?) -> DBTEAMLOGChangeLinkExpirationPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogChangeLinkExpirationPolicyToDB(object: object)
}

func mapDBXTeamLogChangeLinkExpirationPolicyToDB(object: DBXTeamLogChangeLinkExpirationPolicy) -> DBTEAMLOGChangeLinkExpirationPolicy {
    if object.asAllowed != nil {
        return DBTEAMLOGChangeLinkExpirationPolicy(allowed: ())
    }
    if object.asNotAllowed != nil {
        return DBTEAMLOGChangeLinkExpirationPolicy(notAllowed: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGChangeLinkExpirationPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogChangedEnterpriseAdminRoleDetailsToDBOptional(object: DBXTeamLogChangedEnterpriseAdminRoleDetails?)
    -> DBTEAMLOGChangedEnterpriseAdminRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogChangedEnterpriseAdminRoleDetailsToDB(object: object)
}

func mapDBXTeamLogChangedEnterpriseAdminRoleDetailsToDB(object: DBXTeamLogChangedEnterpriseAdminRoleDetails) -> DBTEAMLOGChangedEnterpriseAdminRoleDetails {
    DBTEAMLOGChangedEnterpriseAdminRoleDetails(
        previousValue: mapDBXTeamLogFedAdminRoleToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogFedAdminRoleToDB(object: object.newValue),
        teamName: object.teamName
    )
}

func mapDBXTeamLogChangedEnterpriseAdminRoleTypeToDBOptional(object: DBXTeamLogChangedEnterpriseAdminRoleType?) -> DBTEAMLOGChangedEnterpriseAdminRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogChangedEnterpriseAdminRoleTypeToDB(object: object)
}

func mapDBXTeamLogChangedEnterpriseAdminRoleTypeToDB(object: DBXTeamLogChangedEnterpriseAdminRoleType) -> DBTEAMLOGChangedEnterpriseAdminRoleType {
    DBTEAMLOGChangedEnterpriseAdminRoleType(description_: object.description_)
}

func mapDBXTeamLogChangedEnterpriseConnectedTeamStatusDetailsToDBOptional(object: DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails?)
    -> DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogChangedEnterpriseConnectedTeamStatusDetailsToDB(object: object)
}

func mapDBXTeamLogChangedEnterpriseConnectedTeamStatusDetailsToDB(object: DBXTeamLogChangedEnterpriseConnectedTeamStatusDetails)
    -> DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails {
    DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails(
        action: mapDBXTeamLogFedHandshakeActionToDB(object: object.action),
        additionalInfo: mapDBXTeamLogFederationStatusChangeAdditionalInfoToDB(object: object.additionalInfo),
        previousValue: mapDBXTeamLogTrustedTeamsRequestStateToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogTrustedTeamsRequestStateToDB(object: object.newValue)
    )
}

func mapDBXTeamLogChangedEnterpriseConnectedTeamStatusTypeToDBOptional(object: DBXTeamLogChangedEnterpriseConnectedTeamStatusType?)
    -> DBTEAMLOGChangedEnterpriseConnectedTeamStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogChangedEnterpriseConnectedTeamStatusTypeToDB(object: object)
}

func mapDBXTeamLogChangedEnterpriseConnectedTeamStatusTypeToDB(object: DBXTeamLogChangedEnterpriseConnectedTeamStatusType)
    -> DBTEAMLOGChangedEnterpriseConnectedTeamStatusType {
    DBTEAMLOGChangedEnterpriseConnectedTeamStatusType(description_: object.description_)
}

func mapDBXTeamLogClassificationChangePolicyDetailsToDBOptional(object: DBXTeamLogClassificationChangePolicyDetails?)
    -> DBTEAMLOGClassificationChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogClassificationChangePolicyDetailsToDB(object: DBXTeamLogClassificationChangePolicyDetails) -> DBTEAMLOGClassificationChangePolicyDetails {
    DBTEAMLOGClassificationChangePolicyDetails(
        previousValue: mapDBXTeamLogClassificationPolicyEnumWrapperToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogClassificationPolicyEnumWrapperToDB(object: object.newValue),
        classificationType: mapDBXTeamLogClassificationTypeToDB(object: object.classificationType)
    )
}

func mapDBXTeamLogClassificationChangePolicyTypeToDBOptional(object: DBXTeamLogClassificationChangePolicyType?) -> DBTEAMLOGClassificationChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogClassificationChangePolicyTypeToDB(object: DBXTeamLogClassificationChangePolicyType) -> DBTEAMLOGClassificationChangePolicyType {
    DBTEAMLOGClassificationChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogClassificationCreateReportDetailsToDBOptional(object: DBXTeamLogClassificationCreateReportDetails?)
    -> DBTEAMLOGClassificationCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogClassificationCreateReportDetailsToDB(object: DBXTeamLogClassificationCreateReportDetails) -> DBTEAMLOGClassificationCreateReportDetails {
    DBTEAMLOGClassificationCreateReportDetails(default: ())
}

func mapDBXTeamLogClassificationCreateReportFailDetailsToDBOptional(object: DBXTeamLogClassificationCreateReportFailDetails?)
    -> DBTEAMLOGClassificationCreateReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationCreateReportFailDetailsToDB(object: object)
}

func mapDBXTeamLogClassificationCreateReportFailDetailsToDB(object: DBXTeamLogClassificationCreateReportFailDetails)
    -> DBTEAMLOGClassificationCreateReportFailDetails {
    DBTEAMLOGClassificationCreateReportFailDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogClassificationCreateReportFailTypeToDBOptional(object: DBXTeamLogClassificationCreateReportFailType?)
    -> DBTEAMLOGClassificationCreateReportFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationCreateReportFailTypeToDB(object: object)
}

func mapDBXTeamLogClassificationCreateReportFailTypeToDB(object: DBXTeamLogClassificationCreateReportFailType) -> DBTEAMLOGClassificationCreateReportFailType {
    DBTEAMLOGClassificationCreateReportFailType(description_: object.description_)
}

func mapDBXTeamLogClassificationCreateReportTypeToDBOptional(object: DBXTeamLogClassificationCreateReportType?) -> DBTEAMLOGClassificationCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogClassificationCreateReportTypeToDB(object: DBXTeamLogClassificationCreateReportType) -> DBTEAMLOGClassificationCreateReportType {
    DBTEAMLOGClassificationCreateReportType(description_: object.description_)
}

func mapDBXTeamLogClassificationPolicyEnumWrapperToDBOptional(object: DBXTeamLogClassificationPolicyEnumWrapper?) -> DBTEAMLOGClassificationPolicyEnumWrapper? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationPolicyEnumWrapperToDB(object: object)
}

func mapDBXTeamLogClassificationPolicyEnumWrapperToDB(object: DBXTeamLogClassificationPolicyEnumWrapper) -> DBTEAMLOGClassificationPolicyEnumWrapper {
    if object.asDisabled != nil {
        return DBTEAMLOGClassificationPolicyEnumWrapper(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGClassificationPolicyEnumWrapper(enabled: ())
    }
    if object.asMemberAndTeamFolders != nil {
        return DBTEAMLOGClassificationPolicyEnumWrapper(memberAndTeamFolders: ())
    }
    if object.asTeamFolders != nil {
        return DBTEAMLOGClassificationPolicyEnumWrapper(teamFolders: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGClassificationPolicyEnumWrapper(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogClassificationTypeToDBOptional(object: DBXTeamLogClassificationType?) -> DBTEAMLOGClassificationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogClassificationTypeToDB(object: object)
}

func mapDBXTeamLogClassificationTypeToDB(object: DBXTeamLogClassificationType) -> DBTEAMLOGClassificationType {
    if object.asPersonalInformation != nil {
        return DBTEAMLOGClassificationType(personalInformation: ())
    }
    if object.asPii != nil {
        return DBTEAMLOGClassificationType(pii: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGClassificationType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogCollectionShareDetailsToDBOptional(object: DBXTeamLogCollectionShareDetails?) -> DBTEAMLOGCollectionShareDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCollectionShareDetailsToDB(object: object)
}

func mapDBXTeamLogCollectionShareDetailsToDB(object: DBXTeamLogCollectionShareDetails) -> DBTEAMLOGCollectionShareDetails {
    DBTEAMLOGCollectionShareDetails(albumName: object.albumName)
}

func mapDBXTeamLogCollectionShareTypeToDBOptional(object: DBXTeamLogCollectionShareType?) -> DBTEAMLOGCollectionShareType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCollectionShareTypeToDB(object: object)
}

func mapDBXTeamLogCollectionShareTypeToDB(object: DBXTeamLogCollectionShareType) -> DBTEAMLOGCollectionShareType {
    DBTEAMLOGCollectionShareType(description_: object.description_)
}

func mapDBXTeamLogComputerBackupPolicyToDBOptional(object: DBXTeamLogComputerBackupPolicy?) -> DBTEAMLOGComputerBackupPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogComputerBackupPolicyToDB(object: object)
}

func mapDBXTeamLogComputerBackupPolicyToDB(object: DBXTeamLogComputerBackupPolicy) -> DBTEAMLOGComputerBackupPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGComputerBackupPolicy(default_: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGComputerBackupPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGComputerBackupPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGComputerBackupPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogComputerBackupPolicyChangedDetailsToDBOptional(object: DBXTeamLogComputerBackupPolicyChangedDetails?)
    -> DBTEAMLOGComputerBackupPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogComputerBackupPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogComputerBackupPolicyChangedDetailsToDB(object: DBXTeamLogComputerBackupPolicyChangedDetails) -> DBTEAMLOGComputerBackupPolicyChangedDetails {
    DBTEAMLOGComputerBackupPolicyChangedDetails(
        dNewValue: mapDBXTeamLogComputerBackupPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogComputerBackupPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogComputerBackupPolicyChangedTypeToDBOptional(object: DBXTeamLogComputerBackupPolicyChangedType?) -> DBTEAMLOGComputerBackupPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogComputerBackupPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogComputerBackupPolicyChangedTypeToDB(object: DBXTeamLogComputerBackupPolicyChangedType) -> DBTEAMLOGComputerBackupPolicyChangedType {
    DBTEAMLOGComputerBackupPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogConnectedTeamNameToDBOptional(object: DBXTeamLogConnectedTeamName?) -> DBTEAMLOGConnectedTeamName? {
    guard let object = object else { return nil }
    return mapDBXTeamLogConnectedTeamNameToDB(object: object)
}

func mapDBXTeamLogConnectedTeamNameToDB(object: DBXTeamLogConnectedTeamName) -> DBTEAMLOGConnectedTeamName {
    DBTEAMLOGConnectedTeamName(team: object.team)
}

func mapDBXTeamLogContentAdministrationPolicyChangedDetailsToDBOptional(object: DBXTeamLogContentAdministrationPolicyChangedDetails?)
    -> DBTEAMLOGContentAdministrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogContentAdministrationPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogContentAdministrationPolicyChangedDetailsToDB(object: DBXTeamLogContentAdministrationPolicyChangedDetails)
    -> DBTEAMLOGContentAdministrationPolicyChangedDetails {
    DBTEAMLOGContentAdministrationPolicyChangedDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogContentAdministrationPolicyChangedTypeToDBOptional(object: DBXTeamLogContentAdministrationPolicyChangedType?)
    -> DBTEAMLOGContentAdministrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogContentAdministrationPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogContentAdministrationPolicyChangedTypeToDB(object: DBXTeamLogContentAdministrationPolicyChangedType)
    -> DBTEAMLOGContentAdministrationPolicyChangedType {
    DBTEAMLOGContentAdministrationPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogContentPermanentDeletePolicyToDBOptional(object: DBXTeamLogContentPermanentDeletePolicy?) -> DBTEAMLOGContentPermanentDeletePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogContentPermanentDeletePolicyToDB(object: object)
}

func mapDBXTeamLogContentPermanentDeletePolicyToDB(object: DBXTeamLogContentPermanentDeletePolicy) -> DBTEAMLOGContentPermanentDeletePolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGContentPermanentDeletePolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGContentPermanentDeletePolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGContentPermanentDeletePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogContextLogInfoToDBOptional(object: DBXTeamLogContextLogInfo?) -> DBTEAMLOGContextLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogContextLogInfoToDB(object: object)
}

func mapDBXTeamLogContextLogInfoToDB(object: DBXTeamLogContextLogInfo) -> DBTEAMLOGContextLogInfo {
    if object.asAnonymous != nil {
        return DBTEAMLOGContextLogInfo(anonymous: ())
    }
    if let object = object.asNonTeamMember {
        let nonTeamMember = mapDBXTeamLogNonTeamMemberLogInfoToDB(object: object.nonTeamMember)
        return DBTEAMLOGContextLogInfo(nonTeamMember: nonTeamMember)
    }
    if let object = object.asOrganizationTeam {
        let organizationTeam = mapDBXTeamLogTeamLogInfoToDB(object: object.organizationTeam)
        return DBTEAMLOGContextLogInfo(organizationTeam: organizationTeam)
    }
    if object.asTeam != nil {
        return DBTEAMLOGContextLogInfo(team: ())
    }
    if let object = object.asTeamMember {
        let teamMember = mapDBXTeamLogTeamMemberLogInfoToDB(object: object.teamMember)
        return DBTEAMLOGContextLogInfo(teamMember: teamMember)
    }
    if let object = object.asTrustedNonTeamMember {
        let trustedNonTeamMember = mapDBXTeamLogTrustedNonTeamMemberLogInfoToDB(object: object.trustedNonTeamMember)
        return DBTEAMLOGContextLogInfo(trustedNonTeamMember: trustedNonTeamMember)
    }
    if object.asOther != nil {
        return DBTEAMLOGContextLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogCreateFolderDetailsToDBOptional(object: DBXTeamLogCreateFolderDetails?) -> DBTEAMLOGCreateFolderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCreateFolderDetailsToDB(object: object)
}

func mapDBXTeamLogCreateFolderDetailsToDB(object: DBXTeamLogCreateFolderDetails) -> DBTEAMLOGCreateFolderDetails {
    DBTEAMLOGCreateFolderDetails(default: ())
}

func mapDBXTeamLogCreateFolderTypeToDBOptional(object: DBXTeamLogCreateFolderType?) -> DBTEAMLOGCreateFolderType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCreateFolderTypeToDB(object: object)
}

func mapDBXTeamLogCreateFolderTypeToDB(object: DBXTeamLogCreateFolderType) -> DBTEAMLOGCreateFolderType {
    DBTEAMLOGCreateFolderType(description_: object.description_)
}

func mapDBXTeamLogCreateTeamInviteLinkDetailsToDBOptional(object: DBXTeamLogCreateTeamInviteLinkDetails?) -> DBTEAMLOGCreateTeamInviteLinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCreateTeamInviteLinkDetailsToDB(object: object)
}

func mapDBXTeamLogCreateTeamInviteLinkDetailsToDB(object: DBXTeamLogCreateTeamInviteLinkDetails) -> DBTEAMLOGCreateTeamInviteLinkDetails {
    DBTEAMLOGCreateTeamInviteLinkDetails(linkUrl: object.linkUrl, expiryDate: object.expiryDate)
}

func mapDBXTeamLogCreateTeamInviteLinkTypeToDBOptional(object: DBXTeamLogCreateTeamInviteLinkType?) -> DBTEAMLOGCreateTeamInviteLinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogCreateTeamInviteLinkTypeToDB(object: object)
}

func mapDBXTeamLogCreateTeamInviteLinkTypeToDB(object: DBXTeamLogCreateTeamInviteLinkType) -> DBTEAMLOGCreateTeamInviteLinkType {
    DBTEAMLOGCreateTeamInviteLinkType(description_: object.description_)
}

func mapDBXTeamLogDataPlacementRestrictionChangePolicyDetailsToDBOptional(object: DBXTeamLogDataPlacementRestrictionChangePolicyDetails?)
    -> DBTEAMLOGDataPlacementRestrictionChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataPlacementRestrictionChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogDataPlacementRestrictionChangePolicyDetailsToDB(object: DBXTeamLogDataPlacementRestrictionChangePolicyDetails)
    -> DBTEAMLOGDataPlacementRestrictionChangePolicyDetails {
    DBTEAMLOGDataPlacementRestrictionChangePolicyDetails(
        previousValue: mapDBXTeamLogPlacementRestrictionToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogPlacementRestrictionToDB(object: object.newValue)
    )
}

func mapDBXTeamLogDataPlacementRestrictionChangePolicyTypeToDBOptional(object: DBXTeamLogDataPlacementRestrictionChangePolicyType?)
    -> DBTEAMLOGDataPlacementRestrictionChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataPlacementRestrictionChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogDataPlacementRestrictionChangePolicyTypeToDB(object: DBXTeamLogDataPlacementRestrictionChangePolicyType)
    -> DBTEAMLOGDataPlacementRestrictionChangePolicyType {
    DBTEAMLOGDataPlacementRestrictionChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyDetailsToDBOptional(object: DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails?)
    -> DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyDetailsToDB(object: DBXTeamLogDataPlacementRestrictionSatisfyPolicyDetails)
    -> DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails(placementRestriction: mapDBXTeamLogPlacementRestrictionToDB(object: object.placementRestriction))
}

func mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyTypeToDBOptional(object: DBXTeamLogDataPlacementRestrictionSatisfyPolicyType?)
    -> DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyTypeToDB(object: object)
}

func mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyTypeToDB(object: DBXTeamLogDataPlacementRestrictionSatisfyPolicyType)
    -> DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType(description_: object.description_)
}

func mapDBXTeamLogDataResidencyMigrationRequestSuccessfulDetailsToDBOptional(object: DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails?)
    -> DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataResidencyMigrationRequestSuccessfulDetailsToDB(object: object)
}

func mapDBXTeamLogDataResidencyMigrationRequestSuccessfulDetailsToDB(object: DBXTeamLogDataResidencyMigrationRequestSuccessfulDetails)
    -> DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails {
    DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails(default: ())
}

func mapDBXTeamLogDataResidencyMigrationRequestSuccessfulTypeToDBOptional(object: DBXTeamLogDataResidencyMigrationRequestSuccessfulType?)
    -> DBTEAMLOGDataResidencyMigrationRequestSuccessfulType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataResidencyMigrationRequestSuccessfulTypeToDB(object: object)
}

func mapDBXTeamLogDataResidencyMigrationRequestSuccessfulTypeToDB(object: DBXTeamLogDataResidencyMigrationRequestSuccessfulType)
    -> DBTEAMLOGDataResidencyMigrationRequestSuccessfulType {
    DBTEAMLOGDataResidencyMigrationRequestSuccessfulType(description_: object.description_)
}

func mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetailsToDBOptional(object: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails?)
    -> DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetailsToDB(object: object)
}

func mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetailsToDB(object: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetails)
    -> DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails {
    DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails(default: ())
}

func mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulTypeToDBOptional(object: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType?)
    -> DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulTypeToDB(object: object)
}

func mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulTypeToDB(object: DBXTeamLogDataResidencyMigrationRequestUnsuccessfulType)
    -> DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType {
    DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType(description_: object.description_)
}

func mapDBXTeamLogDefaultLinkExpirationDaysPolicyToDBOptional(object: DBXTeamLogDefaultLinkExpirationDaysPolicy?) -> DBTEAMLOGDefaultLinkExpirationDaysPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDefaultLinkExpirationDaysPolicyToDB(object: object)
}

func mapDBXTeamLogDefaultLinkExpirationDaysPolicyToDB(object: DBXTeamLogDefaultLinkExpirationDaysPolicy) -> DBTEAMLOGDefaultLinkExpirationDaysPolicy {
    if object.asDay1 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day1: ())
    }
    if object.asDay180 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day180: ())
    }
    if object.asDay3 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day3: ())
    }
    if object.asDay30 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day30: ())
    }
    if object.asDay7 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day7: ())
    }
    if object.asDay90 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(day90: ())
    }
    if object.asNone != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(none: ())
    }
    if object.asYear1 != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(year1: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDefaultLinkExpirationDaysPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDeleteTeamInviteLinkDetailsToDBOptional(object: DBXTeamLogDeleteTeamInviteLinkDetails?) -> DBTEAMLOGDeleteTeamInviteLinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeleteTeamInviteLinkDetailsToDB(object: object)
}

func mapDBXTeamLogDeleteTeamInviteLinkDetailsToDB(object: DBXTeamLogDeleteTeamInviteLinkDetails) -> DBTEAMLOGDeleteTeamInviteLinkDetails {
    DBTEAMLOGDeleteTeamInviteLinkDetails(linkUrl: object.linkUrl)
}

func mapDBXTeamLogDeleteTeamInviteLinkTypeToDBOptional(object: DBXTeamLogDeleteTeamInviteLinkType?) -> DBTEAMLOGDeleteTeamInviteLinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeleteTeamInviteLinkTypeToDB(object: object)
}

func mapDBXTeamLogDeleteTeamInviteLinkTypeToDB(object: DBXTeamLogDeleteTeamInviteLinkType) -> DBTEAMLOGDeleteTeamInviteLinkType {
    DBTEAMLOGDeleteTeamInviteLinkType(description_: object.description_)
}

func mapDBXTeamLogDeviceSessionLogInfoToDBOptional(object: DBXTeamLogDeviceSessionLogInfo?) -> DBTEAMLOGDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogDeviceSessionLogInfoToDB(object: DBXTeamLogDeviceSessionLogInfo) -> DBTEAMLOGDeviceSessionLogInfo {
    switch object {
    case let object as DBXTeamLogDesktopDeviceSessionLogInfo:
        return DBTEAMLOGDesktopDeviceSessionLogInfo(
            hostName: object.hostName,
            clientType: mapDBXTeamDesktopPlatformToDB(object: object.clientType),
            platform: object.platform,
            isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBXTeamLogDesktopSessionLogInfoToDBOptional(object: object.sessionInfo),
            clientVersion: object.clientVersion
        )
    case let object as DBXTeamLogMobileDeviceSessionLogInfo:
        return DBTEAMLOGMobileDeviceSessionLogInfo(
            deviceName: object.deviceName,
            clientType: mapDBXTeamMobileClientPlatformToDB(object: object.clientType),
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBXTeamLogMobileSessionLogInfoToDBOptional(object: object.sessionInfo),
            clientVersion: object.clientVersion,
            osVersion: object.osVersion,
            lastCarrier: object.lastCarrier
        )
    case let object as DBXTeamLogWebDeviceSessionLogInfo:
        return DBTEAMLOGWebDeviceSessionLogInfo(
            userAgent: object.userAgent,
            os: object.os,
            browser: object.browser,
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBXTeamLogWebSessionLogInfoToDBOptional(object: object.sessionInfo)
        )
    case let object as DBXTeamLogLegacyDeviceSessionLogInfo:
        return DBTEAMLOGLegacyDeviceSessionLogInfo(
            ipAddress: object.ipAddress,
            created: object.created,
            updated: object.updated,
            sessionInfo: mapDBXTeamLogSessionLogInfoToDBOptional(object: object.sessionInfo),
            displayName: object.displayName,
            isEmmManaged: object.isEmmManaged,
            platform: object.platform,
            macAddress: object.macAddress,
            osVersion: object.osVersion,
            deviceType: object.deviceType,
            clientVersion: object.clientVersion,
            legacyUniqId: object.legacyUniqId
        )
    default:
        return DBTEAMLOGDeviceSessionLogInfo(ipAddress: object.ipAddress, created: object.created, updated: object.updated)
    }
}

func mapDBXTeamLogDesktopDeviceSessionLogInfoToDBOptional(object: DBXTeamLogDesktopDeviceSessionLogInfo?) -> DBTEAMLOGDesktopDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: DBXTeamLogDesktopDeviceSessionLogInfo) -> DBTEAMLOGDesktopDeviceSessionLogInfo {
    DBTEAMLOGDesktopDeviceSessionLogInfo(
        hostName: object.hostName,
        clientType: mapDBXTeamDesktopPlatformToDB(object: object.clientType),
        platform: object.platform,
        isDeleteOnUnlinkSupported: object.isDeleteOnUnlinkSupported,
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBXTeamLogDesktopSessionLogInfoToDBOptional(object: object.sessionInfo),
        clientVersion: object.clientVersion
    )
}

func mapDBXTeamLogSessionLogInfoToDBOptional(object: DBXTeamLogSessionLogInfo?) -> DBTEAMLOGSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogSessionLogInfoToDB(object: DBXTeamLogSessionLogInfo) -> DBTEAMLOGSessionLogInfo {
    switch object {
    case let object as DBXTeamLogWebSessionLogInfo:
        return DBTEAMLOGWebSessionLogInfo(sessionId: object.sessionId)
    case let object as DBXTeamLogDesktopSessionLogInfo:
        return DBTEAMLOGDesktopSessionLogInfo(sessionId: object.sessionId)
    case let object as DBXTeamLogMobileSessionLogInfo:
        return DBTEAMLOGMobileSessionLogInfo(sessionId: object.sessionId)
    default:
        return DBTEAMLOGSessionLogInfo(sessionId: object.sessionId)
    }
}

func mapDBXTeamLogDesktopSessionLogInfoToDBOptional(object: DBXTeamLogDesktopSessionLogInfo?) -> DBTEAMLOGDesktopSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDesktopSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogDesktopSessionLogInfoToDB(object: DBXTeamLogDesktopSessionLogInfo) -> DBTEAMLOGDesktopSessionLogInfo {
    DBTEAMLOGDesktopSessionLogInfo(sessionId: object.sessionId)
}

func mapDBXTeamLogDeviceApprovalsAddExceptionDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsAddExceptionDetails?)
    -> DBTEAMLOGDeviceApprovalsAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsAddExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsAddExceptionDetailsToDB(object: DBXTeamLogDeviceApprovalsAddExceptionDetails) -> DBTEAMLOGDeviceApprovalsAddExceptionDetails {
    DBTEAMLOGDeviceApprovalsAddExceptionDetails(default: ())
}

func mapDBXTeamLogDeviceApprovalsAddExceptionTypeToDBOptional(object: DBXTeamLogDeviceApprovalsAddExceptionType?) -> DBTEAMLOGDeviceApprovalsAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsAddExceptionTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsAddExceptionTypeToDB(object: DBXTeamLogDeviceApprovalsAddExceptionType) -> DBTEAMLOGDeviceApprovalsAddExceptionType {
    DBTEAMLOGDeviceApprovalsAddExceptionType(description_: object.description_)
}

func mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails?)
    -> DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyDetailsToDB(object: DBXTeamLogDeviceApprovalsChangeDesktopPolicyDetails)
    -> DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails(
        dNewValue: mapDBXTeamLogDeviceApprovalsPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogDeviceApprovalsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyTypeToDBOptional(object: DBXTeamLogDeviceApprovalsChangeDesktopPolicyType?)
    -> DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyTypeToDB(object: DBXTeamLogDeviceApprovalsChangeDesktopPolicyType)
    -> DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType(description_: object.description_)
}

func mapDBXTeamLogDeviceApprovalsChangeMobilePolicyDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails?)
    -> DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeMobilePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeMobilePolicyDetailsToDB(object: DBXTeamLogDeviceApprovalsChangeMobilePolicyDetails)
    -> DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails(
        dNewValue: mapDBXTeamLogDeviceApprovalsPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogDeviceApprovalsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogDeviceApprovalsChangeMobilePolicyTypeToDBOptional(object: DBXTeamLogDeviceApprovalsChangeMobilePolicyType?)
    -> DBTEAMLOGDeviceApprovalsChangeMobilePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeMobilePolicyTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeMobilePolicyTypeToDB(object: DBXTeamLogDeviceApprovalsChangeMobilePolicyType)
    -> DBTEAMLOGDeviceApprovalsChangeMobilePolicyType {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyType(description_: object.description_)
}

func mapDBXTeamLogDeviceApprovalsChangeOverageActionDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsChangeOverageActionDetails?)
    -> DBTEAMLOGDeviceApprovalsChangeOverageActionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeOverageActionDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeOverageActionDetailsToDB(object: DBXTeamLogDeviceApprovalsChangeOverageActionDetails)
    -> DBTEAMLOGDeviceApprovalsChangeOverageActionDetails {
    DBTEAMLOGDeviceApprovalsChangeOverageActionDetails(
        dNewValue: mapDBXTeamPoliciesRolloutMethodToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamPoliciesRolloutMethodToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogDeviceApprovalsChangeOverageActionTypeToDBOptional(object: DBXTeamLogDeviceApprovalsChangeOverageActionType?)
    -> DBTEAMLOGDeviceApprovalsChangeOverageActionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeOverageActionTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeOverageActionTypeToDB(object: DBXTeamLogDeviceApprovalsChangeOverageActionType)
    -> DBTEAMLOGDeviceApprovalsChangeOverageActionType {
    DBTEAMLOGDeviceApprovalsChangeOverageActionType(description_: object.description_)
}

func mapDBXTeamLogDeviceApprovalsChangeUnlinkActionDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails?)
    -> DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeUnlinkActionDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeUnlinkActionDetailsToDB(object: DBXTeamLogDeviceApprovalsChangeUnlinkActionDetails)
    -> DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails(
        dNewValue: mapDBXTeamLogDeviceUnlinkPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogDeviceUnlinkPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogDeviceApprovalsChangeUnlinkActionTypeToDBOptional(object: DBXTeamLogDeviceApprovalsChangeUnlinkActionType?)
    -> DBTEAMLOGDeviceApprovalsChangeUnlinkActionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsChangeUnlinkActionTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsChangeUnlinkActionTypeToDB(object: DBXTeamLogDeviceApprovalsChangeUnlinkActionType)
    -> DBTEAMLOGDeviceApprovalsChangeUnlinkActionType {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionType(description_: object.description_)
}

func mapDBXTeamLogDeviceApprovalsPolicyToDBOptional(object: DBXTeamLogDeviceApprovalsPolicy?) -> DBTEAMLOGDeviceApprovalsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsPolicyToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsPolicyToDB(object: DBXTeamLogDeviceApprovalsPolicy) -> DBTEAMLOGDeviceApprovalsPolicy {
    if object.asLimited != nil {
        return DBTEAMLOGDeviceApprovalsPolicy(limited: ())
    }
    if object.asUnlimited != nil {
        return DBTEAMLOGDeviceApprovalsPolicy(unlimited: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDeviceApprovalsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDeviceApprovalsRemoveExceptionDetailsToDBOptional(object: DBXTeamLogDeviceApprovalsRemoveExceptionDetails?)
    -> DBTEAMLOGDeviceApprovalsRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsRemoveExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsRemoveExceptionDetailsToDB(object: DBXTeamLogDeviceApprovalsRemoveExceptionDetails)
    -> DBTEAMLOGDeviceApprovalsRemoveExceptionDetails {
    DBTEAMLOGDeviceApprovalsRemoveExceptionDetails(default: ())
}

func mapDBXTeamLogDeviceApprovalsRemoveExceptionTypeToDBOptional(object: DBXTeamLogDeviceApprovalsRemoveExceptionType?)
    -> DBTEAMLOGDeviceApprovalsRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceApprovalsRemoveExceptionTypeToDB(object: object)
}

func mapDBXTeamLogDeviceApprovalsRemoveExceptionTypeToDB(object: DBXTeamLogDeviceApprovalsRemoveExceptionType) -> DBTEAMLOGDeviceApprovalsRemoveExceptionType {
    DBTEAMLOGDeviceApprovalsRemoveExceptionType(description_: object.description_)
}

func mapDBXTeamLogDeviceChangeIpDesktopDetailsToDBOptional(object: DBXTeamLogDeviceChangeIpDesktopDetails?) -> DBTEAMLOGDeviceChangeIpDesktopDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpDesktopDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpDesktopDetailsToDB(object: DBXTeamLogDeviceChangeIpDesktopDetails) -> DBTEAMLOGDeviceChangeIpDesktopDetails {
    DBTEAMLOGDeviceChangeIpDesktopDetails(deviceSessionInfo: mapDBXTeamLogDeviceSessionLogInfoToDB(object: object.deviceSessionInfo))
}

func mapDBXTeamLogDeviceChangeIpDesktopTypeToDBOptional(object: DBXTeamLogDeviceChangeIpDesktopType?) -> DBTEAMLOGDeviceChangeIpDesktopType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpDesktopTypeToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpDesktopTypeToDB(object: DBXTeamLogDeviceChangeIpDesktopType) -> DBTEAMLOGDeviceChangeIpDesktopType {
    DBTEAMLOGDeviceChangeIpDesktopType(description_: object.description_)
}

func mapDBXTeamLogDeviceChangeIpMobileDetailsToDBOptional(object: DBXTeamLogDeviceChangeIpMobileDetails?) -> DBTEAMLOGDeviceChangeIpMobileDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpMobileDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpMobileDetailsToDB(object: DBXTeamLogDeviceChangeIpMobileDetails) -> DBTEAMLOGDeviceChangeIpMobileDetails {
    DBTEAMLOGDeviceChangeIpMobileDetails(deviceSessionInfo: mapDBXTeamLogDeviceSessionLogInfoToDBOptional(object: object.deviceSessionInfo))
}

func mapDBXTeamLogDeviceChangeIpMobileTypeToDBOptional(object: DBXTeamLogDeviceChangeIpMobileType?) -> DBTEAMLOGDeviceChangeIpMobileType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpMobileTypeToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpMobileTypeToDB(object: DBXTeamLogDeviceChangeIpMobileType) -> DBTEAMLOGDeviceChangeIpMobileType {
    DBTEAMLOGDeviceChangeIpMobileType(description_: object.description_)
}

func mapDBXTeamLogDeviceChangeIpWebDetailsToDBOptional(object: DBXTeamLogDeviceChangeIpWebDetails?) -> DBTEAMLOGDeviceChangeIpWebDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpWebDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpWebDetailsToDB(object: DBXTeamLogDeviceChangeIpWebDetails) -> DBTEAMLOGDeviceChangeIpWebDetails {
    DBTEAMLOGDeviceChangeIpWebDetails(userAgent: object.userAgent)
}

func mapDBXTeamLogDeviceChangeIpWebTypeToDBOptional(object: DBXTeamLogDeviceChangeIpWebType?) -> DBTEAMLOGDeviceChangeIpWebType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceChangeIpWebTypeToDB(object: object)
}

func mapDBXTeamLogDeviceChangeIpWebTypeToDB(object: DBXTeamLogDeviceChangeIpWebType) -> DBTEAMLOGDeviceChangeIpWebType {
    DBTEAMLOGDeviceChangeIpWebType(description_: object.description_)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkFailDetailsToDBOptional(object: DBXTeamLogDeviceDeleteOnUnlinkFailDetails?) -> DBTEAMLOGDeviceDeleteOnUnlinkFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceDeleteOnUnlinkFailDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkFailDetailsToDB(object: DBXTeamLogDeviceDeleteOnUnlinkFailDetails) -> DBTEAMLOGDeviceDeleteOnUnlinkFailDetails {
    DBTEAMLOGDeviceDeleteOnUnlinkFailDetails(
        numFailures: object.numFailures,
        sessionInfo: mapDBXTeamLogSessionLogInfoToDBOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBXTeamLogDeviceDeleteOnUnlinkFailTypeToDBOptional(object: DBXTeamLogDeviceDeleteOnUnlinkFailType?) -> DBTEAMLOGDeviceDeleteOnUnlinkFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceDeleteOnUnlinkFailTypeToDB(object: object)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkFailTypeToDB(object: DBXTeamLogDeviceDeleteOnUnlinkFailType) -> DBTEAMLOGDeviceDeleteOnUnlinkFailType {
    DBTEAMLOGDeviceDeleteOnUnlinkFailType(description_: object.description_)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkSuccessDetailsToDBOptional(object: DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails?)
    -> DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceDeleteOnUnlinkSuccessDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkSuccessDetailsToDB(object: DBXTeamLogDeviceDeleteOnUnlinkSuccessDetails) -> DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails(
        sessionInfo: mapDBXTeamLogSessionLogInfoToDBOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBXTeamLogDeviceDeleteOnUnlinkSuccessTypeToDBOptional(object: DBXTeamLogDeviceDeleteOnUnlinkSuccessType?) -> DBTEAMLOGDeviceDeleteOnUnlinkSuccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceDeleteOnUnlinkSuccessTypeToDB(object: object)
}

func mapDBXTeamLogDeviceDeleteOnUnlinkSuccessTypeToDB(object: DBXTeamLogDeviceDeleteOnUnlinkSuccessType) -> DBTEAMLOGDeviceDeleteOnUnlinkSuccessType {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessType(description_: object.description_)
}

func mapDBXTeamLogDeviceLinkFailDetailsToDBOptional(object: DBXTeamLogDeviceLinkFailDetails?) -> DBTEAMLOGDeviceLinkFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceLinkFailDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceLinkFailDetailsToDB(object: DBXTeamLogDeviceLinkFailDetails) -> DBTEAMLOGDeviceLinkFailDetails {
    DBTEAMLOGDeviceLinkFailDetails(deviceType: mapDBXTeamLogDeviceTypeToDB(object: object.deviceType), ipAddress: object.ipAddress)
}

func mapDBXTeamLogDeviceLinkFailTypeToDBOptional(object: DBXTeamLogDeviceLinkFailType?) -> DBTEAMLOGDeviceLinkFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceLinkFailTypeToDB(object: object)
}

func mapDBXTeamLogDeviceLinkFailTypeToDB(object: DBXTeamLogDeviceLinkFailType) -> DBTEAMLOGDeviceLinkFailType {
    DBTEAMLOGDeviceLinkFailType(description_: object.description_)
}

func mapDBXTeamLogDeviceLinkSuccessDetailsToDBOptional(object: DBXTeamLogDeviceLinkSuccessDetails?) -> DBTEAMLOGDeviceLinkSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceLinkSuccessDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceLinkSuccessDetailsToDB(object: DBXTeamLogDeviceLinkSuccessDetails) -> DBTEAMLOGDeviceLinkSuccessDetails {
    DBTEAMLOGDeviceLinkSuccessDetails(deviceSessionInfo: mapDBXTeamLogDeviceSessionLogInfoToDBOptional(object: object.deviceSessionInfo))
}

func mapDBXTeamLogDeviceLinkSuccessTypeToDBOptional(object: DBXTeamLogDeviceLinkSuccessType?) -> DBTEAMLOGDeviceLinkSuccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceLinkSuccessTypeToDB(object: object)
}

func mapDBXTeamLogDeviceLinkSuccessTypeToDB(object: DBXTeamLogDeviceLinkSuccessType) -> DBTEAMLOGDeviceLinkSuccessType {
    DBTEAMLOGDeviceLinkSuccessType(description_: object.description_)
}

func mapDBXTeamLogDeviceManagementDisabledDetailsToDBOptional(object: DBXTeamLogDeviceManagementDisabledDetails?) -> DBTEAMLOGDeviceManagementDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceManagementDisabledDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceManagementDisabledDetailsToDB(object: DBXTeamLogDeviceManagementDisabledDetails) -> DBTEAMLOGDeviceManagementDisabledDetails {
    DBTEAMLOGDeviceManagementDisabledDetails(default: ())
}

func mapDBXTeamLogDeviceManagementDisabledTypeToDBOptional(object: DBXTeamLogDeviceManagementDisabledType?) -> DBTEAMLOGDeviceManagementDisabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceManagementDisabledTypeToDB(object: object)
}

func mapDBXTeamLogDeviceManagementDisabledTypeToDB(object: DBXTeamLogDeviceManagementDisabledType) -> DBTEAMLOGDeviceManagementDisabledType {
    DBTEAMLOGDeviceManagementDisabledType(description_: object.description_)
}

func mapDBXTeamLogDeviceManagementEnabledDetailsToDBOptional(object: DBXTeamLogDeviceManagementEnabledDetails?) -> DBTEAMLOGDeviceManagementEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceManagementEnabledDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceManagementEnabledDetailsToDB(object: DBXTeamLogDeviceManagementEnabledDetails) -> DBTEAMLOGDeviceManagementEnabledDetails {
    DBTEAMLOGDeviceManagementEnabledDetails(default: ())
}

func mapDBXTeamLogDeviceManagementEnabledTypeToDBOptional(object: DBXTeamLogDeviceManagementEnabledType?) -> DBTEAMLOGDeviceManagementEnabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceManagementEnabledTypeToDB(object: object)
}

func mapDBXTeamLogDeviceManagementEnabledTypeToDB(object: DBXTeamLogDeviceManagementEnabledType) -> DBTEAMLOGDeviceManagementEnabledType {
    DBTEAMLOGDeviceManagementEnabledType(description_: object.description_)
}

func mapDBXTeamLogDeviceSyncBackupStatusChangedDetailsToDBOptional(object: DBXTeamLogDeviceSyncBackupStatusChangedDetails?)
    -> DBTEAMLOGDeviceSyncBackupStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceSyncBackupStatusChangedDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceSyncBackupStatusChangedDetailsToDB(object: DBXTeamLogDeviceSyncBackupStatusChangedDetails)
    -> DBTEAMLOGDeviceSyncBackupStatusChangedDetails {
    DBTEAMLOGDeviceSyncBackupStatusChangedDetails(
        desktopDeviceSessionInfo: mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: object.desktopDeviceSessionInfo),
        previousValue: mapDBXTeamLogBackupStatusToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogBackupStatusToDB(object: object.newValue)
    )
}

func mapDBXTeamLogDeviceSyncBackupStatusChangedTypeToDBOptional(object: DBXTeamLogDeviceSyncBackupStatusChangedType?)
    -> DBTEAMLOGDeviceSyncBackupStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceSyncBackupStatusChangedTypeToDB(object: object)
}

func mapDBXTeamLogDeviceSyncBackupStatusChangedTypeToDB(object: DBXTeamLogDeviceSyncBackupStatusChangedType) -> DBTEAMLOGDeviceSyncBackupStatusChangedType {
    DBTEAMLOGDeviceSyncBackupStatusChangedType(description_: object.description_)
}

func mapDBXTeamLogDeviceTypeToDBOptional(object: DBXTeamLogDeviceType?) -> DBTEAMLOGDeviceType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceTypeToDB(object: object)
}

func mapDBXTeamLogDeviceTypeToDB(object: DBXTeamLogDeviceType) -> DBTEAMLOGDeviceType {
    if object.asDesktop != nil {
        return DBTEAMLOGDeviceType(desktop: ())
    }
    if object.asMobile != nil {
        return DBTEAMLOGDeviceType(mobile: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDeviceType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDeviceUnlinkDetailsToDBOptional(object: DBXTeamLogDeviceUnlinkDetails?) -> DBTEAMLOGDeviceUnlinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceUnlinkDetailsToDB(object: object)
}

func mapDBXTeamLogDeviceUnlinkDetailsToDB(object: DBXTeamLogDeviceUnlinkDetails) -> DBTEAMLOGDeviceUnlinkDetails {
    DBTEAMLOGDeviceUnlinkDetails(
        deleteData: object.deleteData,
        sessionInfo: mapDBXTeamLogSessionLogInfoToDBOptional(object: object.sessionInfo),
        displayName: object.displayName
    )
}

func mapDBXTeamLogDeviceUnlinkPolicyToDBOptional(object: DBXTeamLogDeviceUnlinkPolicy?) -> DBTEAMLOGDeviceUnlinkPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceUnlinkPolicyToDB(object: object)
}

func mapDBXTeamLogDeviceUnlinkPolicyToDB(object: DBXTeamLogDeviceUnlinkPolicy) -> DBTEAMLOGDeviceUnlinkPolicy {
    if object.asKeep != nil {
        return DBTEAMLOGDeviceUnlinkPolicy(keep: ())
    }
    if object.asRemove != nil {
        return DBTEAMLOGDeviceUnlinkPolicy(remove: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDeviceUnlinkPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDeviceUnlinkTypeToDBOptional(object: DBXTeamLogDeviceUnlinkType?) -> DBTEAMLOGDeviceUnlinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDeviceUnlinkTypeToDB(object: object)
}

func mapDBXTeamLogDeviceUnlinkTypeToDB(object: DBXTeamLogDeviceUnlinkType) -> DBTEAMLOGDeviceUnlinkType {
    DBTEAMLOGDeviceUnlinkType(description_: object.description_)
}

func mapDBXTeamLogDirectoryRestrictionsAddMembersDetailsToDBOptional(object: DBXTeamLogDirectoryRestrictionsAddMembersDetails?)
    -> DBTEAMLOGDirectoryRestrictionsAddMembersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDirectoryRestrictionsAddMembersDetailsToDB(object: object)
}

func mapDBXTeamLogDirectoryRestrictionsAddMembersDetailsToDB(object: DBXTeamLogDirectoryRestrictionsAddMembersDetails)
    -> DBTEAMLOGDirectoryRestrictionsAddMembersDetails {
    DBTEAMLOGDirectoryRestrictionsAddMembersDetails(default: ())
}

func mapDBXTeamLogDirectoryRestrictionsAddMembersTypeToDBOptional(object: DBXTeamLogDirectoryRestrictionsAddMembersType?)
    -> DBTEAMLOGDirectoryRestrictionsAddMembersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDirectoryRestrictionsAddMembersTypeToDB(object: object)
}

func mapDBXTeamLogDirectoryRestrictionsAddMembersTypeToDB(object: DBXTeamLogDirectoryRestrictionsAddMembersType)
    -> DBTEAMLOGDirectoryRestrictionsAddMembersType {
    DBTEAMLOGDirectoryRestrictionsAddMembersType(description_: object.description_)
}

func mapDBXTeamLogDirectoryRestrictionsRemoveMembersDetailsToDBOptional(object: DBXTeamLogDirectoryRestrictionsRemoveMembersDetails?)
    -> DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDirectoryRestrictionsRemoveMembersDetailsToDB(object: object)
}

func mapDBXTeamLogDirectoryRestrictionsRemoveMembersDetailsToDB(object: DBXTeamLogDirectoryRestrictionsRemoveMembersDetails)
    -> DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails {
    DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails(default: ())
}

func mapDBXTeamLogDirectoryRestrictionsRemoveMembersTypeToDBOptional(object: DBXTeamLogDirectoryRestrictionsRemoveMembersType?)
    -> DBTEAMLOGDirectoryRestrictionsRemoveMembersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDirectoryRestrictionsRemoveMembersTypeToDB(object: object)
}

func mapDBXTeamLogDirectoryRestrictionsRemoveMembersTypeToDB(object: DBXTeamLogDirectoryRestrictionsRemoveMembersType)
    -> DBTEAMLOGDirectoryRestrictionsRemoveMembersType {
    DBTEAMLOGDirectoryRestrictionsRemoveMembersType(description_: object.description_)
}

func mapDBXTeamLogDisabledDomainInvitesDetailsToDBOptional(object: DBXTeamLogDisabledDomainInvitesDetails?) -> DBTEAMLOGDisabledDomainInvitesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDisabledDomainInvitesDetailsToDB(object: object)
}

func mapDBXTeamLogDisabledDomainInvitesDetailsToDB(object: DBXTeamLogDisabledDomainInvitesDetails) -> DBTEAMLOGDisabledDomainInvitesDetails {
    DBTEAMLOGDisabledDomainInvitesDetails(default: ())
}

func mapDBXTeamLogDisabledDomainInvitesTypeToDBOptional(object: DBXTeamLogDisabledDomainInvitesType?) -> DBTEAMLOGDisabledDomainInvitesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDisabledDomainInvitesTypeToDB(object: object)
}

func mapDBXTeamLogDisabledDomainInvitesTypeToDB(object: DBXTeamLogDisabledDomainInvitesType) -> DBTEAMLOGDisabledDomainInvitesType {
    DBTEAMLOGDisabledDomainInvitesType(description_: object.description_)
}

func mapDBXTeamLogDispositionActionTypeToDBOptional(object: DBXTeamLogDispositionActionType?) -> DBTEAMLOGDispositionActionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDispositionActionTypeToDB(object: object)
}

func mapDBXTeamLogDispositionActionTypeToDB(object: DBXTeamLogDispositionActionType) -> DBTEAMLOGDispositionActionType {
    if object.asAutomaticDelete != nil {
        return DBTEAMLOGDispositionActionType(automaticDelete: ())
    }
    if object.asAutomaticPermanentlyDelete != nil {
        return DBTEAMLOGDispositionActionType(automaticPermanentlyDelete: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDispositionActionType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamDetailsToDBOptional(object: DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails?)
    -> DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamDetailsToDB(object: DBXTeamLogDomainInvitesApproveRequestToJoinTeamDetails)
    -> DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails(default: ())
}

func mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamTypeToDBOptional(object: DBXTeamLogDomainInvitesApproveRequestToJoinTeamType?)
    -> DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamTypeToDB(object: DBXTeamLogDomainInvitesApproveRequestToJoinTeamType)
    -> DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType(description_: object.description_)
}

func mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetailsToDBOptional(object: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails?)
    -> DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetailsToDB(object: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetails)
    -> DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails(default: ())
}

func mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamTypeToDBOptional(object: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType?)
    -> DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamTypeToDB(object: DBXTeamLogDomainInvitesDeclineRequestToJoinTeamType)
    -> DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType(description_: object.description_)
}

func mapDBXTeamLogDomainInvitesEmailExistingUsersDetailsToDBOptional(object: DBXTeamLogDomainInvitesEmailExistingUsersDetails?)
    -> DBTEAMLOGDomainInvitesEmailExistingUsersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesEmailExistingUsersDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesEmailExistingUsersDetailsToDB(object: DBXTeamLogDomainInvitesEmailExistingUsersDetails)
    -> DBTEAMLOGDomainInvitesEmailExistingUsersDetails {
    DBTEAMLOGDomainInvitesEmailExistingUsersDetails(domainName: object.domainName, numRecipients: object.numRecipients)
}

func mapDBXTeamLogDomainInvitesEmailExistingUsersTypeToDBOptional(object: DBXTeamLogDomainInvitesEmailExistingUsersType?)
    -> DBTEAMLOGDomainInvitesEmailExistingUsersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesEmailExistingUsersTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesEmailExistingUsersTypeToDB(object: DBXTeamLogDomainInvitesEmailExistingUsersType)
    -> DBTEAMLOGDomainInvitesEmailExistingUsersType {
    DBTEAMLOGDomainInvitesEmailExistingUsersType(description_: object.description_)
}

func mapDBXTeamLogDomainInvitesRequestToJoinTeamDetailsToDBOptional(object: DBXTeamLogDomainInvitesRequestToJoinTeamDetails?)
    -> DBTEAMLOGDomainInvitesRequestToJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesRequestToJoinTeamDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesRequestToJoinTeamDetailsToDB(object: DBXTeamLogDomainInvitesRequestToJoinTeamDetails)
    -> DBTEAMLOGDomainInvitesRequestToJoinTeamDetails {
    DBTEAMLOGDomainInvitesRequestToJoinTeamDetails(default: ())
}

func mapDBXTeamLogDomainInvitesRequestToJoinTeamTypeToDBOptional(object: DBXTeamLogDomainInvitesRequestToJoinTeamType?)
    -> DBTEAMLOGDomainInvitesRequestToJoinTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesRequestToJoinTeamTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesRequestToJoinTeamTypeToDB(object: DBXTeamLogDomainInvitesRequestToJoinTeamType) -> DBTEAMLOGDomainInvitesRequestToJoinTeamType {
    DBTEAMLOGDomainInvitesRequestToJoinTeamType(description_: object.description_)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetailsToDBOptional(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails?)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetailsToDB(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetails)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails(default: ())
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoTypeToDBOptional(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType?)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoTypeToDB(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToNoType)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType(description_: object.description_)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetailsToDBOptional(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails?)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetailsToDB(object: object)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetailsToDB(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetails)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails(default: ())
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesTypeToDBOptional(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType?)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesTypeToDB(object: object)
}

func mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesTypeToDB(object: DBXTeamLogDomainInvitesSetInviteNewUserPrefToYesType)
    -> DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType(description_: object.description_)
}

func mapDBXTeamLogDomainVerificationAddDomainFailDetailsToDBOptional(object: DBXTeamLogDomainVerificationAddDomainFailDetails?)
    -> DBTEAMLOGDomainVerificationAddDomainFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationAddDomainFailDetailsToDB(object: object)
}

func mapDBXTeamLogDomainVerificationAddDomainFailDetailsToDB(object: DBXTeamLogDomainVerificationAddDomainFailDetails)
    -> DBTEAMLOGDomainVerificationAddDomainFailDetails {
    DBTEAMLOGDomainVerificationAddDomainFailDetails(domainName: object.domainName, verificationMethod: object.verificationMethod)
}

func mapDBXTeamLogDomainVerificationAddDomainFailTypeToDBOptional(object: DBXTeamLogDomainVerificationAddDomainFailType?)
    -> DBTEAMLOGDomainVerificationAddDomainFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationAddDomainFailTypeToDB(object: object)
}

func mapDBXTeamLogDomainVerificationAddDomainFailTypeToDB(object: DBXTeamLogDomainVerificationAddDomainFailType)
    -> DBTEAMLOGDomainVerificationAddDomainFailType {
    DBTEAMLOGDomainVerificationAddDomainFailType(description_: object.description_)
}

func mapDBXTeamLogDomainVerificationAddDomainSuccessDetailsToDBOptional(object: DBXTeamLogDomainVerificationAddDomainSuccessDetails?)
    -> DBTEAMLOGDomainVerificationAddDomainSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationAddDomainSuccessDetailsToDB(object: object)
}

func mapDBXTeamLogDomainVerificationAddDomainSuccessDetailsToDB(object: DBXTeamLogDomainVerificationAddDomainSuccessDetails)
    -> DBTEAMLOGDomainVerificationAddDomainSuccessDetails {
    DBTEAMLOGDomainVerificationAddDomainSuccessDetails(domainNames: object.domainNames, verificationMethod: object.verificationMethod)
}

func mapDBXTeamLogDomainVerificationAddDomainSuccessTypeToDBOptional(object: DBXTeamLogDomainVerificationAddDomainSuccessType?)
    -> DBTEAMLOGDomainVerificationAddDomainSuccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationAddDomainSuccessTypeToDB(object: object)
}

func mapDBXTeamLogDomainVerificationAddDomainSuccessTypeToDB(object: DBXTeamLogDomainVerificationAddDomainSuccessType)
    -> DBTEAMLOGDomainVerificationAddDomainSuccessType {
    DBTEAMLOGDomainVerificationAddDomainSuccessType(description_: object.description_)
}

func mapDBXTeamLogDomainVerificationRemoveDomainDetailsToDBOptional(object: DBXTeamLogDomainVerificationRemoveDomainDetails?)
    -> DBTEAMLOGDomainVerificationRemoveDomainDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationRemoveDomainDetailsToDB(object: object)
}

func mapDBXTeamLogDomainVerificationRemoveDomainDetailsToDB(object: DBXTeamLogDomainVerificationRemoveDomainDetails)
    -> DBTEAMLOGDomainVerificationRemoveDomainDetails {
    DBTEAMLOGDomainVerificationRemoveDomainDetails(domainNames: object.domainNames)
}

func mapDBXTeamLogDomainVerificationRemoveDomainTypeToDBOptional(object: DBXTeamLogDomainVerificationRemoveDomainType?)
    -> DBTEAMLOGDomainVerificationRemoveDomainType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDomainVerificationRemoveDomainTypeToDB(object: object)
}

func mapDBXTeamLogDomainVerificationRemoveDomainTypeToDB(object: DBXTeamLogDomainVerificationRemoveDomainType) -> DBTEAMLOGDomainVerificationRemoveDomainType {
    DBTEAMLOGDomainVerificationRemoveDomainType(description_: object.description_)
}

func mapDBXTeamLogDownloadPolicyTypeToDBOptional(object: DBXTeamLogDownloadPolicyType?) -> DBTEAMLOGDownloadPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDownloadPolicyTypeToDB(object: object)
}

func mapDBXTeamLogDownloadPolicyTypeToDB(object: DBXTeamLogDownloadPolicyType) -> DBTEAMLOGDownloadPolicyType {
    if object.asAllow != nil {
        return DBTEAMLOGDownloadPolicyType(allow: ())
    }
    if object.asDisallow != nil {
        return DBTEAMLOGDownloadPolicyType(disallow: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDownloadPolicyType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDropboxPasswordsExportedDetailsToDBOptional(object: DBXTeamLogDropboxPasswordsExportedDetails?) -> DBTEAMLOGDropboxPasswordsExportedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsExportedDetailsToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsExportedDetailsToDB(object: DBXTeamLogDropboxPasswordsExportedDetails) -> DBTEAMLOGDropboxPasswordsExportedDetails {
    DBTEAMLOGDropboxPasswordsExportedDetails(platform: object.platform)
}

func mapDBXTeamLogDropboxPasswordsExportedTypeToDBOptional(object: DBXTeamLogDropboxPasswordsExportedType?) -> DBTEAMLOGDropboxPasswordsExportedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsExportedTypeToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsExportedTypeToDB(object: DBXTeamLogDropboxPasswordsExportedType) -> DBTEAMLOGDropboxPasswordsExportedType {
    DBTEAMLOGDropboxPasswordsExportedType(description_: object.description_)
}

func mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledDetailsToDBOptional(object: DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails?)
    -> DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledDetailsToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledDetailsToDB(object: DBXTeamLogDropboxPasswordsNewDeviceEnrolledDetails)
    -> DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails {
    DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails(isFirstDevice: object.isFirstDevice, platform: object.platform)
}

func mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledTypeToDBOptional(object: DBXTeamLogDropboxPasswordsNewDeviceEnrolledType?)
    -> DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledTypeToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledTypeToDB(object: DBXTeamLogDropboxPasswordsNewDeviceEnrolledType)
    -> DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType {
    DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType(description_: object.description_)
}

func mapDBXTeamLogDropboxPasswordsPolicyToDBOptional(object: DBXTeamLogDropboxPasswordsPolicy?) -> DBTEAMLOGDropboxPasswordsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsPolicyToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsPolicyToDB(object: DBXTeamLogDropboxPasswordsPolicy) -> DBTEAMLOGDropboxPasswordsPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGDropboxPasswordsPolicy(default_: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGDropboxPasswordsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGDropboxPasswordsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGDropboxPasswordsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogDropboxPasswordsPolicyChangedDetailsToDBOptional(object: DBXTeamLogDropboxPasswordsPolicyChangedDetails?)
    -> DBTEAMLOGDropboxPasswordsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsPolicyChangedDetailsToDB(object: DBXTeamLogDropboxPasswordsPolicyChangedDetails)
    -> DBTEAMLOGDropboxPasswordsPolicyChangedDetails {
    DBTEAMLOGDropboxPasswordsPolicyChangedDetails(
        dNewValue: mapDBXTeamLogDropboxPasswordsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogDropboxPasswordsPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogDropboxPasswordsPolicyChangedTypeToDBOptional(object: DBXTeamLogDropboxPasswordsPolicyChangedType?)
    -> DBTEAMLOGDropboxPasswordsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDropboxPasswordsPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogDropboxPasswordsPolicyChangedTypeToDB(object: DBXTeamLogDropboxPasswordsPolicyChangedType) -> DBTEAMLOGDropboxPasswordsPolicyChangedType {
    DBTEAMLOGDropboxPasswordsPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogDurationLogInfoToDBOptional(object: DBXTeamLogDurationLogInfo?) -> DBTEAMLOGDurationLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogDurationLogInfoToDB(object: object)
}

func mapDBXTeamLogDurationLogInfoToDB(object: DBXTeamLogDurationLogInfo) -> DBTEAMLOGDurationLogInfo {
    DBTEAMLOGDurationLogInfo(unit: mapDBXTeamLogTimeUnitToDB(object: object.unit), amount: object.amount)
}

func mapDBXTeamLogEmailIngestPolicyToDBOptional(object: DBXTeamLogEmailIngestPolicy?) -> DBTEAMLOGEmailIngestPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmailIngestPolicyToDB(object: object)
}

func mapDBXTeamLogEmailIngestPolicyToDB(object: DBXTeamLogEmailIngestPolicy) -> DBTEAMLOGEmailIngestPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGEmailIngestPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGEmailIngestPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGEmailIngestPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogEmailIngestPolicyChangedDetailsToDBOptional(object: DBXTeamLogEmailIngestPolicyChangedDetails?) -> DBTEAMLOGEmailIngestPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmailIngestPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogEmailIngestPolicyChangedDetailsToDB(object: DBXTeamLogEmailIngestPolicyChangedDetails) -> DBTEAMLOGEmailIngestPolicyChangedDetails {
    DBTEAMLOGEmailIngestPolicyChangedDetails(
        dNewValue: mapDBXTeamLogEmailIngestPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogEmailIngestPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogEmailIngestPolicyChangedTypeToDBOptional(object: DBXTeamLogEmailIngestPolicyChangedType?) -> DBTEAMLOGEmailIngestPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmailIngestPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogEmailIngestPolicyChangedTypeToDB(object: DBXTeamLogEmailIngestPolicyChangedType) -> DBTEAMLOGEmailIngestPolicyChangedType {
    DBTEAMLOGEmailIngestPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogEmailIngestReceiveFileDetailsToDBOptional(object: DBXTeamLogEmailIngestReceiveFileDetails?) -> DBTEAMLOGEmailIngestReceiveFileDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmailIngestReceiveFileDetailsToDB(object: object)
}

func mapDBXTeamLogEmailIngestReceiveFileDetailsToDB(object: DBXTeamLogEmailIngestReceiveFileDetails) -> DBTEAMLOGEmailIngestReceiveFileDetails {
    DBTEAMLOGEmailIngestReceiveFileDetails(
        inboxName: object.inboxName,
        attachmentNames: object.attachmentNames,
        subject: object.subject,
        fromName: object.fromName,
        fromEmail: object.fromEmail
    )
}

func mapDBXTeamLogEmailIngestReceiveFileTypeToDBOptional(object: DBXTeamLogEmailIngestReceiveFileType?) -> DBTEAMLOGEmailIngestReceiveFileType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmailIngestReceiveFileTypeToDB(object: object)
}

func mapDBXTeamLogEmailIngestReceiveFileTypeToDB(object: DBXTeamLogEmailIngestReceiveFileType) -> DBTEAMLOGEmailIngestReceiveFileType {
    DBTEAMLOGEmailIngestReceiveFileType(description_: object.description_)
}

func mapDBXTeamLogEmmAddExceptionDetailsToDBOptional(object: DBXTeamLogEmmAddExceptionDetails?) -> DBTEAMLOGEmmAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmAddExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogEmmAddExceptionDetailsToDB(object: DBXTeamLogEmmAddExceptionDetails) -> DBTEAMLOGEmmAddExceptionDetails {
    DBTEAMLOGEmmAddExceptionDetails(default: ())
}

func mapDBXTeamLogEmmAddExceptionTypeToDBOptional(object: DBXTeamLogEmmAddExceptionType?) -> DBTEAMLOGEmmAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmAddExceptionTypeToDB(object: object)
}

func mapDBXTeamLogEmmAddExceptionTypeToDB(object: DBXTeamLogEmmAddExceptionType) -> DBTEAMLOGEmmAddExceptionType {
    DBTEAMLOGEmmAddExceptionType(description_: object.description_)
}

func mapDBXTeamLogEmmChangePolicyDetailsToDBOptional(object: DBXTeamLogEmmChangePolicyDetails?) -> DBTEAMLOGEmmChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogEmmChangePolicyDetailsToDB(object: DBXTeamLogEmmChangePolicyDetails) -> DBTEAMLOGEmmChangePolicyDetails {
    DBTEAMLOGEmmChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesEmmStateToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesEmmStateToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogEmmChangePolicyTypeToDBOptional(object: DBXTeamLogEmmChangePolicyType?) -> DBTEAMLOGEmmChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogEmmChangePolicyTypeToDB(object: DBXTeamLogEmmChangePolicyType) -> DBTEAMLOGEmmChangePolicyType {
    DBTEAMLOGEmmChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogEmmCreateExceptionsReportDetailsToDBOptional(object: DBXTeamLogEmmCreateExceptionsReportDetails?)
    -> DBTEAMLOGEmmCreateExceptionsReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmCreateExceptionsReportDetailsToDB(object: object)
}

func mapDBXTeamLogEmmCreateExceptionsReportDetailsToDB(object: DBXTeamLogEmmCreateExceptionsReportDetails) -> DBTEAMLOGEmmCreateExceptionsReportDetails {
    DBTEAMLOGEmmCreateExceptionsReportDetails(default: ())
}

func mapDBXTeamLogEmmCreateExceptionsReportTypeToDBOptional(object: DBXTeamLogEmmCreateExceptionsReportType?) -> DBTEAMLOGEmmCreateExceptionsReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmCreateExceptionsReportTypeToDB(object: object)
}

func mapDBXTeamLogEmmCreateExceptionsReportTypeToDB(object: DBXTeamLogEmmCreateExceptionsReportType) -> DBTEAMLOGEmmCreateExceptionsReportType {
    DBTEAMLOGEmmCreateExceptionsReportType(description_: object.description_)
}

func mapDBXTeamLogEmmCreateUsageReportDetailsToDBOptional(object: DBXTeamLogEmmCreateUsageReportDetails?) -> DBTEAMLOGEmmCreateUsageReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmCreateUsageReportDetailsToDB(object: object)
}

func mapDBXTeamLogEmmCreateUsageReportDetailsToDB(object: DBXTeamLogEmmCreateUsageReportDetails) -> DBTEAMLOGEmmCreateUsageReportDetails {
    DBTEAMLOGEmmCreateUsageReportDetails(default: ())
}

func mapDBXTeamLogEmmCreateUsageReportTypeToDBOptional(object: DBXTeamLogEmmCreateUsageReportType?) -> DBTEAMLOGEmmCreateUsageReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmCreateUsageReportTypeToDB(object: object)
}

func mapDBXTeamLogEmmCreateUsageReportTypeToDB(object: DBXTeamLogEmmCreateUsageReportType) -> DBTEAMLOGEmmCreateUsageReportType {
    DBTEAMLOGEmmCreateUsageReportType(description_: object.description_)
}

func mapDBXTeamLogEmmErrorDetailsToDBOptional(object: DBXTeamLogEmmErrorDetails?) -> DBTEAMLOGEmmErrorDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmErrorDetailsToDB(object: object)
}

func mapDBXTeamLogEmmErrorDetailsToDB(object: DBXTeamLogEmmErrorDetails) -> DBTEAMLOGEmmErrorDetails {
    DBTEAMLOGEmmErrorDetails(errorDetails: mapDBXTeamLogFailureDetailsLogInfoToDB(object: object.errorDetails))
}

func mapDBXTeamLogEmmErrorTypeToDBOptional(object: DBXTeamLogEmmErrorType?) -> DBTEAMLOGEmmErrorType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmErrorTypeToDB(object: object)
}

func mapDBXTeamLogEmmErrorTypeToDB(object: DBXTeamLogEmmErrorType) -> DBTEAMLOGEmmErrorType {
    DBTEAMLOGEmmErrorType(description_: object.description_)
}

func mapDBXTeamLogEmmRefreshAuthTokenDetailsToDBOptional(object: DBXTeamLogEmmRefreshAuthTokenDetails?) -> DBTEAMLOGEmmRefreshAuthTokenDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmRefreshAuthTokenDetailsToDB(object: object)
}

func mapDBXTeamLogEmmRefreshAuthTokenDetailsToDB(object: DBXTeamLogEmmRefreshAuthTokenDetails) -> DBTEAMLOGEmmRefreshAuthTokenDetails {
    DBTEAMLOGEmmRefreshAuthTokenDetails(default: ())
}

func mapDBXTeamLogEmmRefreshAuthTokenTypeToDBOptional(object: DBXTeamLogEmmRefreshAuthTokenType?) -> DBTEAMLOGEmmRefreshAuthTokenType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmRefreshAuthTokenTypeToDB(object: object)
}

func mapDBXTeamLogEmmRefreshAuthTokenTypeToDB(object: DBXTeamLogEmmRefreshAuthTokenType) -> DBTEAMLOGEmmRefreshAuthTokenType {
    DBTEAMLOGEmmRefreshAuthTokenType(description_: object.description_)
}

func mapDBXTeamLogEmmRemoveExceptionDetailsToDBOptional(object: DBXTeamLogEmmRemoveExceptionDetails?) -> DBTEAMLOGEmmRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmRemoveExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogEmmRemoveExceptionDetailsToDB(object: DBXTeamLogEmmRemoveExceptionDetails) -> DBTEAMLOGEmmRemoveExceptionDetails {
    DBTEAMLOGEmmRemoveExceptionDetails(default: ())
}

func mapDBXTeamLogEmmRemoveExceptionTypeToDBOptional(object: DBXTeamLogEmmRemoveExceptionType?) -> DBTEAMLOGEmmRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEmmRemoveExceptionTypeToDB(object: object)
}

func mapDBXTeamLogEmmRemoveExceptionTypeToDB(object: DBXTeamLogEmmRemoveExceptionType) -> DBTEAMLOGEmmRemoveExceptionType {
    DBTEAMLOGEmmRemoveExceptionType(description_: object.description_)
}

func mapDBXTeamLogEnabledDomainInvitesDetailsToDBOptional(object: DBXTeamLogEnabledDomainInvitesDetails?) -> DBTEAMLOGEnabledDomainInvitesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEnabledDomainInvitesDetailsToDB(object: object)
}

func mapDBXTeamLogEnabledDomainInvitesDetailsToDB(object: DBXTeamLogEnabledDomainInvitesDetails) -> DBTEAMLOGEnabledDomainInvitesDetails {
    DBTEAMLOGEnabledDomainInvitesDetails(default: ())
}

func mapDBXTeamLogEnabledDomainInvitesTypeToDBOptional(object: DBXTeamLogEnabledDomainInvitesType?) -> DBTEAMLOGEnabledDomainInvitesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEnabledDomainInvitesTypeToDB(object: object)
}

func mapDBXTeamLogEnabledDomainInvitesTypeToDB(object: DBXTeamLogEnabledDomainInvitesType) -> DBTEAMLOGEnabledDomainInvitesType {
    DBTEAMLOGEnabledDomainInvitesType(description_: object.description_)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetailsToDBOptional(object: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails?)
    -> DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetailsToDB(object: object)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetailsToDB(object: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetails)
    -> DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails {
    DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails(federationExtraDetails: mapDBXTeamLogFedExtraDetailsToDB(object: object.federationExtraDetails))
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedTypeToDBOptional(object: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType?)
    -> DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedTypeToDB(object: object)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedTypeToDB(object: DBXTeamLogEndedEnterpriseAdminSessionDeprecatedType)
    -> DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType {
    DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType(description_: object.description_)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDetailsToDBOptional(object: DBXTeamLogEndedEnterpriseAdminSessionDetails?)
    -> DBTEAMLOGEndedEnterpriseAdminSessionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEndedEnterpriseAdminSessionDetailsToDB(object: object)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionDetailsToDB(object: DBXTeamLogEndedEnterpriseAdminSessionDetails) -> DBTEAMLOGEndedEnterpriseAdminSessionDetails {
    DBTEAMLOGEndedEnterpriseAdminSessionDetails(default: ())
}

func mapDBXTeamLogEndedEnterpriseAdminSessionTypeToDBOptional(object: DBXTeamLogEndedEnterpriseAdminSessionType?) -> DBTEAMLOGEndedEnterpriseAdminSessionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEndedEnterpriseAdminSessionTypeToDB(object: object)
}

func mapDBXTeamLogEndedEnterpriseAdminSessionTypeToDB(object: DBXTeamLogEndedEnterpriseAdminSessionType) -> DBTEAMLOGEndedEnterpriseAdminSessionType {
    DBTEAMLOGEndedEnterpriseAdminSessionType(description_: object.description_)
}

func mapDBXTeamLogEnforceLinkPasswordPolicyToDBOptional(object: DBXTeamLogEnforceLinkPasswordPolicy?) -> DBTEAMLOGEnforceLinkPasswordPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEnforceLinkPasswordPolicyToDB(object: object)
}

func mapDBXTeamLogEnforceLinkPasswordPolicyToDB(object: DBXTeamLogEnforceLinkPasswordPolicy) -> DBTEAMLOGEnforceLinkPasswordPolicy {
    if object.asOptional != nil {
        return DBTEAMLOGEnforceLinkPasswordPolicy(optional: ())
    }
    if object.asRequired != nil {
        return DBTEAMLOGEnforceLinkPasswordPolicy(required: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGEnforceLinkPasswordPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogEnterpriseSettingsLockingDetailsToDBOptional(object: DBXTeamLogEnterpriseSettingsLockingDetails?)
    -> DBTEAMLOGEnterpriseSettingsLockingDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEnterpriseSettingsLockingDetailsToDB(object: object)
}

func mapDBXTeamLogEnterpriseSettingsLockingDetailsToDB(object: DBXTeamLogEnterpriseSettingsLockingDetails) -> DBTEAMLOGEnterpriseSettingsLockingDetails {
    DBTEAMLOGEnterpriseSettingsLockingDetails(
        teamName: object.teamName,
        settingsPageName: object.settingsPageName,
        previousSettingsPageLockingState: object.previousSettingsPageLockingState,
        dNewSettingsPageLockingState: object.newSettingsPageLockingState
    )
}

func mapDBXTeamLogEnterpriseSettingsLockingTypeToDBOptional(object: DBXTeamLogEnterpriseSettingsLockingType?) -> DBTEAMLOGEnterpriseSettingsLockingType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEnterpriseSettingsLockingTypeToDB(object: object)
}

func mapDBXTeamLogEnterpriseSettingsLockingTypeToDB(object: DBXTeamLogEnterpriseSettingsLockingType) -> DBTEAMLOGEnterpriseSettingsLockingType {
    DBTEAMLOGEnterpriseSettingsLockingType(description_: object.description_)
}

func mapDBXTeamLogEventCategoryToDBOptional(object: DBXTeamLogEventCategory?) -> DBTEAMLOGEventCategory? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEventCategoryToDB(object: object)
}

func mapDBXTeamLogEventCategoryToDB(object: DBXTeamLogEventCategory) -> DBTEAMLOGEventCategory {
    if object.asAdminAlerting != nil {
        return DBTEAMLOGEventCategory(adminAlerting: ())
    }
    if object.asApps != nil {
        return DBTEAMLOGEventCategory(apps: ())
    }
    if object.asComments != nil {
        return DBTEAMLOGEventCategory(comments: ())
    }
    if object.asDataGovernance != nil {
        return DBTEAMLOGEventCategory(dataGovernance: ())
    }
    if object.asDevices != nil {
        return DBTEAMLOGEventCategory(devices: ())
    }
    if object.asDomains != nil {
        return DBTEAMLOGEventCategory(domains: ())
    }
    if object.asEncryption != nil {
        return DBTEAMLOGEventCategory(encryption: ())
    }
    if object.asFileOperations != nil {
        return DBTEAMLOGEventCategory(fileOperations: ())
    }
    if object.asFileRequests != nil {
        return DBTEAMLOGEventCategory(fileRequests: ())
    }
    if object.asGroups != nil {
        return DBTEAMLOGEventCategory(groups: ())
    }
    if object.asLogins != nil {
        return DBTEAMLOGEventCategory(logins: ())
    }
    if object.asMembers != nil {
        return DBTEAMLOGEventCategory(members: ())
    }
    if object.asPaper != nil {
        return DBTEAMLOGEventCategory(paper: ())
    }
    if object.asPasswords != nil {
        return DBTEAMLOGEventCategory(passwords: ())
    }
    if object.asReports != nil {
        return DBTEAMLOGEventCategory(reports: ())
    }
    if object.asSharing != nil {
        return DBTEAMLOGEventCategory(sharing: ())
    }
    if object.asShowcase != nil {
        return DBTEAMLOGEventCategory(showcase: ())
    }
    if object.asSso != nil {
        return DBTEAMLOGEventCategory(sso: ())
    }
    if object.asTeamFolders != nil {
        return DBTEAMLOGEventCategory(teamFolders: ())
    }
    if object.asTeamPolicies != nil {
        return DBTEAMLOGEventCategory(teamPolicies: ())
    }
    if object.asTeamProfile != nil {
        return DBTEAMLOGEventCategory(teamProfile: ())
    }
    if object.asTfa != nil {
        return DBTEAMLOGEventCategory(tfa: ())
    }
    if object.asTrustedTeams != nil {
        return DBTEAMLOGEventCategory(trustedTeams: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGEventCategory(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogEventDetailsToDBOptional(object: DBXTeamLogEventDetails?) -> DBTEAMLOGEventDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEventDetailsToDB(object: object)
}

func mapDBXTeamLogEventDetailsToDB(object: DBXTeamLogEventDetails) -> DBTEAMLOGEventDetails {
    if let object = object.asAdminAlertingAlertStateChangedDetails {
        let adminAlertingAlertStateChangedDetails = mapDBXTeamLogAdminAlertingAlertStateChangedDetailsToDB(object: object.adminAlertingAlertStateChangedDetails)
        return DBTEAMLOGEventDetails(adminAlertingAlertStateChangedDetails: adminAlertingAlertStateChangedDetails)
    }
    if let object = object.asAdminAlertingChangedAlertConfigDetails {
        let adminAlertingChangedAlertConfigDetails = mapDBXTeamLogAdminAlertingChangedAlertConfigDetailsToDB(
            object: object
                .adminAlertingChangedAlertConfigDetails
        )
        return DBTEAMLOGEventDetails(adminAlertingChangedAlertConfigDetails: adminAlertingChangedAlertConfigDetails)
    }
    if let object = object.asAdminAlertingTriggeredAlertDetails {
        let adminAlertingTriggeredAlertDetails = mapDBXTeamLogAdminAlertingTriggeredAlertDetailsToDB(object: object.adminAlertingTriggeredAlertDetails)
        return DBTEAMLOGEventDetails(adminAlertingTriggeredAlertDetails: adminAlertingTriggeredAlertDetails)
    }
    if let object = object.asRansomwareRestoreProcessCompletedDetails {
        let ransomwareRestoreProcessCompletedDetails = mapDBXTeamLogRansomwareRestoreProcessCompletedDetailsToDB(
            object: object
                .ransomwareRestoreProcessCompletedDetails
        )
        return DBTEAMLOGEventDetails(ransomwareRestoreProcessCompletedDetails: ransomwareRestoreProcessCompletedDetails)
    }
    if let object = object.asRansomwareRestoreProcessStartedDetails {
        let ransomwareRestoreProcessStartedDetails = mapDBXTeamLogRansomwareRestoreProcessStartedDetailsToDB(
            object: object
                .ransomwareRestoreProcessStartedDetails
        )
        return DBTEAMLOGEventDetails(ransomwareRestoreProcessStartedDetails: ransomwareRestoreProcessStartedDetails)
    }
    if let object = object.asAppBlockedByPermissionsDetails {
        let appBlockedByPermissionsDetails = mapDBXTeamLogAppBlockedByPermissionsDetailsToDB(object: object.appBlockedByPermissionsDetails)
        return DBTEAMLOGEventDetails(appBlockedByPermissionsDetails: appBlockedByPermissionsDetails)
    }
    if let object = object.asAppLinkTeamDetails {
        let appLinkTeamDetails = mapDBXTeamLogAppLinkTeamDetailsToDB(object: object.appLinkTeamDetails)
        return DBTEAMLOGEventDetails(appLinkTeamDetails: appLinkTeamDetails)
    }
    if let object = object.asAppLinkUserDetails {
        let appLinkUserDetails = mapDBXTeamLogAppLinkUserDetailsToDB(object: object.appLinkUserDetails)
        return DBTEAMLOGEventDetails(appLinkUserDetails: appLinkUserDetails)
    }
    if let object = object.asAppUnlinkTeamDetails {
        let appUnlinkTeamDetails = mapDBXTeamLogAppUnlinkTeamDetailsToDB(object: object.appUnlinkTeamDetails)
        return DBTEAMLOGEventDetails(appUnlinkTeamDetails: appUnlinkTeamDetails)
    }
    if let object = object.asAppUnlinkUserDetails {
        let appUnlinkUserDetails = mapDBXTeamLogAppUnlinkUserDetailsToDB(object: object.appUnlinkUserDetails)
        return DBTEAMLOGEventDetails(appUnlinkUserDetails: appUnlinkUserDetails)
    }
    if let object = object.asIntegrationConnectedDetails {
        let integrationConnectedDetails = mapDBXTeamLogIntegrationConnectedDetailsToDB(object: object.integrationConnectedDetails)
        return DBTEAMLOGEventDetails(integrationConnectedDetails: integrationConnectedDetails)
    }
    if let object = object.asIntegrationDisconnectedDetails {
        let integrationDisconnectedDetails = mapDBXTeamLogIntegrationDisconnectedDetailsToDB(object: object.integrationDisconnectedDetails)
        return DBTEAMLOGEventDetails(integrationDisconnectedDetails: integrationDisconnectedDetails)
    }
    if let object = object.asFileAddCommentDetails {
        let fileAddCommentDetails = mapDBXTeamLogFileAddCommentDetailsToDB(object: object.fileAddCommentDetails)
        return DBTEAMLOGEventDetails(fileAddCommentDetails: fileAddCommentDetails)
    }
    if let object = object.asFileChangeCommentSubscriptionDetails {
        let fileChangeCommentSubscriptionDetails = mapDBXTeamLogFileChangeCommentSubscriptionDetailsToDB(object: object.fileChangeCommentSubscriptionDetails)
        return DBTEAMLOGEventDetails(fileChangeCommentSubscriptionDetails: fileChangeCommentSubscriptionDetails)
    }
    if let object = object.asFileDeleteCommentDetails {
        let fileDeleteCommentDetails = mapDBXTeamLogFileDeleteCommentDetailsToDB(object: object.fileDeleteCommentDetails)
        return DBTEAMLOGEventDetails(fileDeleteCommentDetails: fileDeleteCommentDetails)
    }
    if let object = object.asFileEditCommentDetails {
        let fileEditCommentDetails = mapDBXTeamLogFileEditCommentDetailsToDB(object: object.fileEditCommentDetails)
        return DBTEAMLOGEventDetails(fileEditCommentDetails: fileEditCommentDetails)
    }
    if let object = object.asFileLikeCommentDetails {
        let fileLikeCommentDetails = mapDBXTeamLogFileLikeCommentDetailsToDB(object: object.fileLikeCommentDetails)
        return DBTEAMLOGEventDetails(fileLikeCommentDetails: fileLikeCommentDetails)
    }
    if let object = object.asFileResolveCommentDetails {
        let fileResolveCommentDetails = mapDBXTeamLogFileResolveCommentDetailsToDB(object: object.fileResolveCommentDetails)
        return DBTEAMLOGEventDetails(fileResolveCommentDetails: fileResolveCommentDetails)
    }
    if let object = object.asFileUnlikeCommentDetails {
        let fileUnlikeCommentDetails = mapDBXTeamLogFileUnlikeCommentDetailsToDB(object: object.fileUnlikeCommentDetails)
        return DBTEAMLOGEventDetails(fileUnlikeCommentDetails: fileUnlikeCommentDetails)
    }
    if let object = object.asFileUnresolveCommentDetails {
        let fileUnresolveCommentDetails = mapDBXTeamLogFileUnresolveCommentDetailsToDB(object: object.fileUnresolveCommentDetails)
        return DBTEAMLOGEventDetails(fileUnresolveCommentDetails: fileUnresolveCommentDetails)
    }
    if let object = object.asGovernancePolicyAddFoldersDetails {
        let governancePolicyAddFoldersDetails = mapDBXTeamLogGovernancePolicyAddFoldersDetailsToDB(object: object.governancePolicyAddFoldersDetails)
        return DBTEAMLOGEventDetails(governancePolicyAddFoldersDetails: governancePolicyAddFoldersDetails)
    }
    if let object = object.asGovernancePolicyAddFolderFailedDetails {
        let governancePolicyAddFolderFailedDetails = mapDBXTeamLogGovernancePolicyAddFolderFailedDetailsToDB(
            object: object
                .governancePolicyAddFolderFailedDetails
        )
        return DBTEAMLOGEventDetails(governancePolicyAddFolderFailedDetails: governancePolicyAddFolderFailedDetails)
    }
    if let object = object.asGovernancePolicyContentDisposedDetails {
        let governancePolicyContentDisposedDetails = mapDBXTeamLogGovernancePolicyContentDisposedDetailsToDB(
            object: object
                .governancePolicyContentDisposedDetails
        )
        return DBTEAMLOGEventDetails(governancePolicyContentDisposedDetails: governancePolicyContentDisposedDetails)
    }
    if let object = object.asGovernancePolicyCreateDetails {
        let governancePolicyCreateDetails = mapDBXTeamLogGovernancePolicyCreateDetailsToDB(object: object.governancePolicyCreateDetails)
        return DBTEAMLOGEventDetails(governancePolicyCreateDetails: governancePolicyCreateDetails)
    }
    if let object = object.asGovernancePolicyDeleteDetails {
        let governancePolicyDeleteDetails = mapDBXTeamLogGovernancePolicyDeleteDetailsToDB(object: object.governancePolicyDeleteDetails)
        return DBTEAMLOGEventDetails(governancePolicyDeleteDetails: governancePolicyDeleteDetails)
    }
    if let object = object.asGovernancePolicyEditDetailsDetails {
        let governancePolicyEditDetailsDetails = mapDBXTeamLogGovernancePolicyEditDetailsDetailsToDB(object: object.governancePolicyEditDetailsDetails)
        return DBTEAMLOGEventDetails(governancePolicyEditDetailsDetails: governancePolicyEditDetailsDetails)
    }
    if let object = object.asGovernancePolicyEditDurationDetails {
        let governancePolicyEditDurationDetails = mapDBXTeamLogGovernancePolicyEditDurationDetailsToDB(object: object.governancePolicyEditDurationDetails)
        return DBTEAMLOGEventDetails(governancePolicyEditDurationDetails: governancePolicyEditDurationDetails)
    }
    if let object = object.asGovernancePolicyExportCreatedDetails {
        let governancePolicyExportCreatedDetails = mapDBXTeamLogGovernancePolicyExportCreatedDetailsToDB(object: object.governancePolicyExportCreatedDetails)
        return DBTEAMLOGEventDetails(governancePolicyExportCreatedDetails: governancePolicyExportCreatedDetails)
    }
    if let object = object.asGovernancePolicyExportRemovedDetails {
        let governancePolicyExportRemovedDetails = mapDBXTeamLogGovernancePolicyExportRemovedDetailsToDB(object: object.governancePolicyExportRemovedDetails)
        return DBTEAMLOGEventDetails(governancePolicyExportRemovedDetails: governancePolicyExportRemovedDetails)
    }
    if let object = object.asGovernancePolicyRemoveFoldersDetails {
        let governancePolicyRemoveFoldersDetails = mapDBXTeamLogGovernancePolicyRemoveFoldersDetailsToDB(object: object.governancePolicyRemoveFoldersDetails)
        return DBTEAMLOGEventDetails(governancePolicyRemoveFoldersDetails: governancePolicyRemoveFoldersDetails)
    }
    if let object = object.asGovernancePolicyReportCreatedDetails {
        let governancePolicyReportCreatedDetails = mapDBXTeamLogGovernancePolicyReportCreatedDetailsToDB(object: object.governancePolicyReportCreatedDetails)
        return DBTEAMLOGEventDetails(governancePolicyReportCreatedDetails: governancePolicyReportCreatedDetails)
    }
    if let object = object.asGovernancePolicyZipPartDownloadedDetails {
        let governancePolicyZipPartDownloadedDetails = mapDBXTeamLogGovernancePolicyZipPartDownloadedDetailsToDB(
            object: object
                .governancePolicyZipPartDownloadedDetails
        )
        return DBTEAMLOGEventDetails(governancePolicyZipPartDownloadedDetails: governancePolicyZipPartDownloadedDetails)
    }
    if let object = object.asLegalHoldsActivateAHoldDetails {
        let legalHoldsActivateAHoldDetails = mapDBXTeamLogLegalHoldsActivateAHoldDetailsToDB(object: object.legalHoldsActivateAHoldDetails)
        return DBTEAMLOGEventDetails(legalHoldsActivateAHoldDetails: legalHoldsActivateAHoldDetails)
    }
    if let object = object.asLegalHoldsAddMembersDetails {
        let legalHoldsAddMembersDetails = mapDBXTeamLogLegalHoldsAddMembersDetailsToDB(object: object.legalHoldsAddMembersDetails)
        return DBTEAMLOGEventDetails(legalHoldsAddMembersDetails: legalHoldsAddMembersDetails)
    }
    if let object = object.asLegalHoldsChangeHoldDetailsDetails {
        let legalHoldsChangeHoldDetailsDetails = mapDBXTeamLogLegalHoldsChangeHoldDetailsDetailsToDB(object: object.legalHoldsChangeHoldDetailsDetails)
        return DBTEAMLOGEventDetails(legalHoldsChangeHoldDetailsDetails: legalHoldsChangeHoldDetailsDetails)
    }
    if let object = object.asLegalHoldsChangeHoldNameDetails {
        let legalHoldsChangeHoldNameDetails = mapDBXTeamLogLegalHoldsChangeHoldNameDetailsToDB(object: object.legalHoldsChangeHoldNameDetails)
        return DBTEAMLOGEventDetails(legalHoldsChangeHoldNameDetails: legalHoldsChangeHoldNameDetails)
    }
    if let object = object.asLegalHoldsExportAHoldDetails {
        let legalHoldsExportAHoldDetails = mapDBXTeamLogLegalHoldsExportAHoldDetailsToDB(object: object.legalHoldsExportAHoldDetails)
        return DBTEAMLOGEventDetails(legalHoldsExportAHoldDetails: legalHoldsExportAHoldDetails)
    }
    if let object = object.asLegalHoldsExportCancelledDetails {
        let legalHoldsExportCancelledDetails = mapDBXTeamLogLegalHoldsExportCancelledDetailsToDB(object: object.legalHoldsExportCancelledDetails)
        return DBTEAMLOGEventDetails(legalHoldsExportCancelledDetails: legalHoldsExportCancelledDetails)
    }
    if let object = object.asLegalHoldsExportDownloadedDetails {
        let legalHoldsExportDownloadedDetails = mapDBXTeamLogLegalHoldsExportDownloadedDetailsToDB(object: object.legalHoldsExportDownloadedDetails)
        return DBTEAMLOGEventDetails(legalHoldsExportDownloadedDetails: legalHoldsExportDownloadedDetails)
    }
    if let object = object.asLegalHoldsExportRemovedDetails {
        let legalHoldsExportRemovedDetails = mapDBXTeamLogLegalHoldsExportRemovedDetailsToDB(object: object.legalHoldsExportRemovedDetails)
        return DBTEAMLOGEventDetails(legalHoldsExportRemovedDetails: legalHoldsExportRemovedDetails)
    }
    if let object = object.asLegalHoldsReleaseAHoldDetails {
        let legalHoldsReleaseAHoldDetails = mapDBXTeamLogLegalHoldsReleaseAHoldDetailsToDB(object: object.legalHoldsReleaseAHoldDetails)
        return DBTEAMLOGEventDetails(legalHoldsReleaseAHoldDetails: legalHoldsReleaseAHoldDetails)
    }
    if let object = object.asLegalHoldsRemoveMembersDetails {
        let legalHoldsRemoveMembersDetails = mapDBXTeamLogLegalHoldsRemoveMembersDetailsToDB(object: object.legalHoldsRemoveMembersDetails)
        return DBTEAMLOGEventDetails(legalHoldsRemoveMembersDetails: legalHoldsRemoveMembersDetails)
    }
    if let object = object.asLegalHoldsReportAHoldDetails {
        let legalHoldsReportAHoldDetails = mapDBXTeamLogLegalHoldsReportAHoldDetailsToDB(object: object.legalHoldsReportAHoldDetails)
        return DBTEAMLOGEventDetails(legalHoldsReportAHoldDetails: legalHoldsReportAHoldDetails)
    }
    if let object = object.asDeviceChangeIpDesktopDetails {
        let deviceChangeIpDesktopDetails = mapDBXTeamLogDeviceChangeIpDesktopDetailsToDB(object: object.deviceChangeIpDesktopDetails)
        return DBTEAMLOGEventDetails(deviceChangeIpDesktopDetails: deviceChangeIpDesktopDetails)
    }
    if let object = object.asDeviceChangeIpMobileDetails {
        let deviceChangeIpMobileDetails = mapDBXTeamLogDeviceChangeIpMobileDetailsToDB(object: object.deviceChangeIpMobileDetails)
        return DBTEAMLOGEventDetails(deviceChangeIpMobileDetails: deviceChangeIpMobileDetails)
    }
    if let object = object.asDeviceChangeIpWebDetails {
        let deviceChangeIpWebDetails = mapDBXTeamLogDeviceChangeIpWebDetailsToDB(object: object.deviceChangeIpWebDetails)
        return DBTEAMLOGEventDetails(deviceChangeIpWebDetails: deviceChangeIpWebDetails)
    }
    if let object = object.asDeviceDeleteOnUnlinkFailDetails {
        let deviceDeleteOnUnlinkFailDetails = mapDBXTeamLogDeviceDeleteOnUnlinkFailDetailsToDB(object: object.deviceDeleteOnUnlinkFailDetails)
        return DBTEAMLOGEventDetails(deviceDeleteOnUnlinkFailDetails: deviceDeleteOnUnlinkFailDetails)
    }
    if let object = object.asDeviceDeleteOnUnlinkSuccessDetails {
        let deviceDeleteOnUnlinkSuccessDetails = mapDBXTeamLogDeviceDeleteOnUnlinkSuccessDetailsToDB(object: object.deviceDeleteOnUnlinkSuccessDetails)
        return DBTEAMLOGEventDetails(deviceDeleteOnUnlinkSuccessDetails: deviceDeleteOnUnlinkSuccessDetails)
    }
    if let object = object.asDeviceLinkFailDetails {
        let deviceLinkFailDetails = mapDBXTeamLogDeviceLinkFailDetailsToDB(object: object.deviceLinkFailDetails)
        return DBTEAMLOGEventDetails(deviceLinkFailDetails: deviceLinkFailDetails)
    }
    if let object = object.asDeviceLinkSuccessDetails {
        let deviceLinkSuccessDetails = mapDBXTeamLogDeviceLinkSuccessDetailsToDB(object: object.deviceLinkSuccessDetails)
        return DBTEAMLOGEventDetails(deviceLinkSuccessDetails: deviceLinkSuccessDetails)
    }
    if let object = object.asDeviceManagementDisabledDetails {
        let deviceManagementDisabledDetails = mapDBXTeamLogDeviceManagementDisabledDetailsToDB(object: object.deviceManagementDisabledDetails)
        return DBTEAMLOGEventDetails(deviceManagementDisabledDetails: deviceManagementDisabledDetails)
    }
    if let object = object.asDeviceManagementEnabledDetails {
        let deviceManagementEnabledDetails = mapDBXTeamLogDeviceManagementEnabledDetailsToDB(object: object.deviceManagementEnabledDetails)
        return DBTEAMLOGEventDetails(deviceManagementEnabledDetails: deviceManagementEnabledDetails)
    }
    if let object = object.asDeviceSyncBackupStatusChangedDetails {
        let deviceSyncBackupStatusChangedDetails = mapDBXTeamLogDeviceSyncBackupStatusChangedDetailsToDB(object: object.deviceSyncBackupStatusChangedDetails)
        return DBTEAMLOGEventDetails(deviceSyncBackupStatusChangedDetails: deviceSyncBackupStatusChangedDetails)
    }
    if let object = object.asDeviceUnlinkDetails {
        let deviceUnlinkDetails = mapDBXTeamLogDeviceUnlinkDetailsToDB(object: object.deviceUnlinkDetails)
        return DBTEAMLOGEventDetails(deviceUnlinkDetails: deviceUnlinkDetails)
    }
    if let object = object.asDropboxPasswordsExportedDetails {
        let dropboxPasswordsExportedDetails = mapDBXTeamLogDropboxPasswordsExportedDetailsToDB(object: object.dropboxPasswordsExportedDetails)
        return DBTEAMLOGEventDetails(dropboxPasswordsExportedDetails: dropboxPasswordsExportedDetails)
    }
    if let object = object.asDropboxPasswordsNewDeviceEnrolledDetails {
        let dropboxPasswordsNewDeviceEnrolledDetails = mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledDetailsToDB(
            object: object
                .dropboxPasswordsNewDeviceEnrolledDetails
        )
        return DBTEAMLOGEventDetails(dropboxPasswordsNewDeviceEnrolledDetails: dropboxPasswordsNewDeviceEnrolledDetails)
    }
    if let object = object.asEmmRefreshAuthTokenDetails {
        let emmRefreshAuthTokenDetails = mapDBXTeamLogEmmRefreshAuthTokenDetailsToDB(object: object.emmRefreshAuthTokenDetails)
        return DBTEAMLOGEventDetails(emmRefreshAuthTokenDetails: emmRefreshAuthTokenDetails)
    }
    if let object = object.asExternalDriveBackupEligibilityStatusCheckedDetails {
        let externalDriveBackupEligibilityStatusCheckedDetails = mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetailsToDB(
            object: object
                .externalDriveBackupEligibilityStatusCheckedDetails
        )
        return DBTEAMLOGEventDetails(externalDriveBackupEligibilityStatusCheckedDetails: externalDriveBackupEligibilityStatusCheckedDetails)
    }
    if let object = object.asExternalDriveBackupStatusChangedDetails {
        let externalDriveBackupStatusChangedDetails = mapDBXTeamLogExternalDriveBackupStatusChangedDetailsToDB(
            object: object
                .externalDriveBackupStatusChangedDetails
        )
        return DBTEAMLOGEventDetails(externalDriveBackupStatusChangedDetails: externalDriveBackupStatusChangedDetails)
    }
    if let object = object.asAccountCaptureChangeAvailabilityDetails {
        let accountCaptureChangeAvailabilityDetails = mapDBXTeamLogAccountCaptureChangeAvailabilityDetailsToDB(
            object: object
                .accountCaptureChangeAvailabilityDetails
        )
        return DBTEAMLOGEventDetails(accountCaptureChangeAvailabilityDetails: accountCaptureChangeAvailabilityDetails)
    }
    if let object = object.asAccountCaptureMigrateAccountDetails {
        let accountCaptureMigrateAccountDetails = mapDBXTeamLogAccountCaptureMigrateAccountDetailsToDB(object: object.accountCaptureMigrateAccountDetails)
        return DBTEAMLOGEventDetails(accountCaptureMigrateAccountDetails: accountCaptureMigrateAccountDetails)
    }
    if let object = object.asAccountCaptureNotificationEmailsSentDetails {
        let accountCaptureNotificationEmailsSentDetails = mapDBXTeamLogAccountCaptureNotificationEmailsSentDetailsToDB(
            object: object
                .accountCaptureNotificationEmailsSentDetails
        )
        return DBTEAMLOGEventDetails(accountCaptureNotificationEmailsSentDetails: accountCaptureNotificationEmailsSentDetails)
    }
    if let object = object.asAccountCaptureRelinquishAccountDetails {
        let accountCaptureRelinquishAccountDetails = mapDBXTeamLogAccountCaptureRelinquishAccountDetailsToDB(
            object: object
                .accountCaptureRelinquishAccountDetails
        )
        return DBTEAMLOGEventDetails(accountCaptureRelinquishAccountDetails: accountCaptureRelinquishAccountDetails)
    }
    if let object = object.asDisabledDomainInvitesDetails {
        let disabledDomainInvitesDetails = mapDBXTeamLogDisabledDomainInvitesDetailsToDB(object: object.disabledDomainInvitesDetails)
        return DBTEAMLOGEventDetails(disabledDomainInvitesDetails: disabledDomainInvitesDetails)
    }
    if let object = object.asDomainInvitesApproveRequestToJoinTeamDetails {
        let domainInvitesApproveRequestToJoinTeamDetails = mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamDetailsToDB(
            object: object
                .domainInvitesApproveRequestToJoinTeamDetails
        )
        return DBTEAMLOGEventDetails(domainInvitesApproveRequestToJoinTeamDetails: domainInvitesApproveRequestToJoinTeamDetails)
    }
    if let object = object.asDomainInvitesDeclineRequestToJoinTeamDetails {
        let domainInvitesDeclineRequestToJoinTeamDetails = mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamDetailsToDB(
            object: object
                .domainInvitesDeclineRequestToJoinTeamDetails
        )
        return DBTEAMLOGEventDetails(domainInvitesDeclineRequestToJoinTeamDetails: domainInvitesDeclineRequestToJoinTeamDetails)
    }
    if let object = object.asDomainInvitesEmailExistingUsersDetails {
        let domainInvitesEmailExistingUsersDetails = mapDBXTeamLogDomainInvitesEmailExistingUsersDetailsToDB(
            object: object
                .domainInvitesEmailExistingUsersDetails
        )
        return DBTEAMLOGEventDetails(domainInvitesEmailExistingUsersDetails: domainInvitesEmailExistingUsersDetails)
    }
    if let object = object.asDomainInvitesRequestToJoinTeamDetails {
        let domainInvitesRequestToJoinTeamDetails = mapDBXTeamLogDomainInvitesRequestToJoinTeamDetailsToDB(object: object.domainInvitesRequestToJoinTeamDetails)
        return DBTEAMLOGEventDetails(domainInvitesRequestToJoinTeamDetails: domainInvitesRequestToJoinTeamDetails)
    }
    if let object = object.asDomainInvitesSetInviteNewUserPrefToNoDetails {
        let domainInvitesSetInviteNewUserPrefToNoDetails = mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoDetailsToDB(
            object: object
                .domainInvitesSetInviteNewUserPrefToNoDetails
        )
        return DBTEAMLOGEventDetails(domainInvitesSetInviteNewUserPrefToNoDetails: domainInvitesSetInviteNewUserPrefToNoDetails)
    }
    if let object = object.asDomainInvitesSetInviteNewUserPrefToYesDetails {
        let domainInvitesSetInviteNewUserPrefToYesDetails = mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesDetailsToDB(
            object: object
                .domainInvitesSetInviteNewUserPrefToYesDetails
        )
        return DBTEAMLOGEventDetails(domainInvitesSetInviteNewUserPrefToYesDetails: domainInvitesSetInviteNewUserPrefToYesDetails)
    }
    if let object = object.asDomainVerificationAddDomainFailDetails {
        let domainVerificationAddDomainFailDetails = mapDBXTeamLogDomainVerificationAddDomainFailDetailsToDB(
            object: object
                .domainVerificationAddDomainFailDetails
        )
        return DBTEAMLOGEventDetails(domainVerificationAddDomainFailDetails: domainVerificationAddDomainFailDetails)
    }
    if let object = object.asDomainVerificationAddDomainSuccessDetails {
        let domainVerificationAddDomainSuccessDetails = mapDBXTeamLogDomainVerificationAddDomainSuccessDetailsToDB(
            object: object
                .domainVerificationAddDomainSuccessDetails
        )
        return DBTEAMLOGEventDetails(domainVerificationAddDomainSuccessDetails: domainVerificationAddDomainSuccessDetails)
    }
    if let object = object.asDomainVerificationRemoveDomainDetails {
        let domainVerificationRemoveDomainDetails = mapDBXTeamLogDomainVerificationRemoveDomainDetailsToDB(object: object.domainVerificationRemoveDomainDetails)
        return DBTEAMLOGEventDetails(domainVerificationRemoveDomainDetails: domainVerificationRemoveDomainDetails)
    }
    if let object = object.asEnabledDomainInvitesDetails {
        let enabledDomainInvitesDetails = mapDBXTeamLogEnabledDomainInvitesDetailsToDB(object: object.enabledDomainInvitesDetails)
        return DBTEAMLOGEventDetails(enabledDomainInvitesDetails: enabledDomainInvitesDetails)
    }
    if let object = object.asTeamEncryptionKeyCancelKeyDeletionDetails {
        let teamEncryptionKeyCancelKeyDeletionDetails = mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetailsToDB(
            object: object
                .teamEncryptionKeyCancelKeyDeletionDetails
        )
        return DBTEAMLOGEventDetails(teamEncryptionKeyCancelKeyDeletionDetails: teamEncryptionKeyCancelKeyDeletionDetails)
    }
    if let object = object.asTeamEncryptionKeyCreateKeyDetails {
        let teamEncryptionKeyCreateKeyDetails = mapDBXTeamLogTeamEncryptionKeyCreateKeyDetailsToDB(object: object.teamEncryptionKeyCreateKeyDetails)
        return DBTEAMLOGEventDetails(teamEncryptionKeyCreateKeyDetails: teamEncryptionKeyCreateKeyDetails)
    }
    if let object = object.asTeamEncryptionKeyDeleteKeyDetails {
        let teamEncryptionKeyDeleteKeyDetails = mapDBXTeamLogTeamEncryptionKeyDeleteKeyDetailsToDB(object: object.teamEncryptionKeyDeleteKeyDetails)
        return DBTEAMLOGEventDetails(teamEncryptionKeyDeleteKeyDetails: teamEncryptionKeyDeleteKeyDetails)
    }
    if let object = object.asTeamEncryptionKeyDisableKeyDetails {
        let teamEncryptionKeyDisableKeyDetails = mapDBXTeamLogTeamEncryptionKeyDisableKeyDetailsToDB(object: object.teamEncryptionKeyDisableKeyDetails)
        return DBTEAMLOGEventDetails(teamEncryptionKeyDisableKeyDetails: teamEncryptionKeyDisableKeyDetails)
    }
    if let object = object.asTeamEncryptionKeyEnableKeyDetails {
        let teamEncryptionKeyEnableKeyDetails = mapDBXTeamLogTeamEncryptionKeyEnableKeyDetailsToDB(object: object.teamEncryptionKeyEnableKeyDetails)
        return DBTEAMLOGEventDetails(teamEncryptionKeyEnableKeyDetails: teamEncryptionKeyEnableKeyDetails)
    }
    if let object = object.asTeamEncryptionKeyRotateKeyDetails {
        let teamEncryptionKeyRotateKeyDetails = mapDBXTeamLogTeamEncryptionKeyRotateKeyDetailsToDB(object: object.teamEncryptionKeyRotateKeyDetails)
        return DBTEAMLOGEventDetails(teamEncryptionKeyRotateKeyDetails: teamEncryptionKeyRotateKeyDetails)
    }
    if let object = object.asTeamEncryptionKeyScheduleKeyDeletionDetails {
        let teamEncryptionKeyScheduleKeyDeletionDetails = mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetailsToDB(
            object: object
                .teamEncryptionKeyScheduleKeyDeletionDetails
        )
        return DBTEAMLOGEventDetails(teamEncryptionKeyScheduleKeyDeletionDetails: teamEncryptionKeyScheduleKeyDeletionDetails)
    }
    if let object = object.asApplyNamingConventionDetails {
        let applyNamingConventionDetails = mapDBXTeamLogApplyNamingConventionDetailsToDB(object: object.applyNamingConventionDetails)
        return DBTEAMLOGEventDetails(applyNamingConventionDetails: applyNamingConventionDetails)
    }
    if let object = object.asCreateFolderDetails {
        let createFolderDetails = mapDBXTeamLogCreateFolderDetailsToDB(object: object.createFolderDetails)
        return DBTEAMLOGEventDetails(createFolderDetails: createFolderDetails)
    }
    if let object = object.asFileAddDetails {
        let fileAddDetails = mapDBXTeamLogFileAddDetailsToDB(object: object.fileAddDetails)
        return DBTEAMLOGEventDetails(fileAddDetails: fileAddDetails)
    }
    if let object = object.asFileAddFromAutomationDetails {
        let fileAddFromAutomationDetails = mapDBXTeamLogFileAddFromAutomationDetailsToDB(object: object.fileAddFromAutomationDetails)
        return DBTEAMLOGEventDetails(fileAddFromAutomationDetails: fileAddFromAutomationDetails)
    }
    if let object = object.asFileCopyDetails {
        let fileCopyDetails = mapDBXTeamLogFileCopyDetailsToDB(object: object.fileCopyDetails)
        return DBTEAMLOGEventDetails(fileCopyDetails: fileCopyDetails)
    }
    if let object = object.asFileDeleteDetails {
        let fileDeleteDetails = mapDBXTeamLogFileDeleteDetailsToDB(object: object.fileDeleteDetails)
        return DBTEAMLOGEventDetails(fileDeleteDetails: fileDeleteDetails)
    }
    if let object = object.asFileDownloadDetails {
        let fileDownloadDetails = mapDBXTeamLogFileDownloadDetailsToDB(object: object.fileDownloadDetails)
        return DBTEAMLOGEventDetails(fileDownloadDetails: fileDownloadDetails)
    }
    if let object = object.asFileEditDetails {
        let fileEditDetails = mapDBXTeamLogFileEditDetailsToDB(object: object.fileEditDetails)
        return DBTEAMLOGEventDetails(fileEditDetails: fileEditDetails)
    }
    if let object = object.asFileGetCopyReferenceDetails {
        let fileGetCopyReferenceDetails = mapDBXTeamLogFileGetCopyReferenceDetailsToDB(object: object.fileGetCopyReferenceDetails)
        return DBTEAMLOGEventDetails(fileGetCopyReferenceDetails: fileGetCopyReferenceDetails)
    }
    if let object = object.asFileLockingLockStatusChangedDetails {
        let fileLockingLockStatusChangedDetails = mapDBXTeamLogFileLockingLockStatusChangedDetailsToDB(object: object.fileLockingLockStatusChangedDetails)
        return DBTEAMLOGEventDetails(fileLockingLockStatusChangedDetails: fileLockingLockStatusChangedDetails)
    }
    if let object = object.asFileMoveDetails {
        let fileMoveDetails = mapDBXTeamLogFileMoveDetailsToDB(object: object.fileMoveDetails)
        return DBTEAMLOGEventDetails(fileMoveDetails: fileMoveDetails)
    }
    if let object = object.asFilePermanentlyDeleteDetails {
        let filePermanentlyDeleteDetails = mapDBXTeamLogFilePermanentlyDeleteDetailsToDB(object: object.filePermanentlyDeleteDetails)
        return DBTEAMLOGEventDetails(filePermanentlyDeleteDetails: filePermanentlyDeleteDetails)
    }
    if let object = object.asFilePreviewDetails {
        let filePreviewDetails = mapDBXTeamLogFilePreviewDetailsToDB(object: object.filePreviewDetails)
        return DBTEAMLOGEventDetails(filePreviewDetails: filePreviewDetails)
    }
    if let object = object.asFileRenameDetails {
        let fileRenameDetails = mapDBXTeamLogFileRenameDetailsToDB(object: object.fileRenameDetails)
        return DBTEAMLOGEventDetails(fileRenameDetails: fileRenameDetails)
    }
    if let object = object.asFileRestoreDetails {
        let fileRestoreDetails = mapDBXTeamLogFileRestoreDetailsToDB(object: object.fileRestoreDetails)
        return DBTEAMLOGEventDetails(fileRestoreDetails: fileRestoreDetails)
    }
    if let object = object.asFileRevertDetails {
        let fileRevertDetails = mapDBXTeamLogFileRevertDetailsToDB(object: object.fileRevertDetails)
        return DBTEAMLOGEventDetails(fileRevertDetails: fileRevertDetails)
    }
    if let object = object.asFileRollbackChangesDetails {
        let fileRollbackChangesDetails = mapDBXTeamLogFileRollbackChangesDetailsToDB(object: object.fileRollbackChangesDetails)
        return DBTEAMLOGEventDetails(fileRollbackChangesDetails: fileRollbackChangesDetails)
    }
    if let object = object.asFileSaveCopyReferenceDetails {
        let fileSaveCopyReferenceDetails = mapDBXTeamLogFileSaveCopyReferenceDetailsToDB(object: object.fileSaveCopyReferenceDetails)
        return DBTEAMLOGEventDetails(fileSaveCopyReferenceDetails: fileSaveCopyReferenceDetails)
    }
    if let object = object.asFolderOverviewDescriptionChangedDetails {
        let folderOverviewDescriptionChangedDetails = mapDBXTeamLogFolderOverviewDescriptionChangedDetailsToDB(
            object: object
                .folderOverviewDescriptionChangedDetails
        )
        return DBTEAMLOGEventDetails(folderOverviewDescriptionChangedDetails: folderOverviewDescriptionChangedDetails)
    }
    if let object = object.asFolderOverviewItemPinnedDetails {
        let folderOverviewItemPinnedDetails = mapDBXTeamLogFolderOverviewItemPinnedDetailsToDB(object: object.folderOverviewItemPinnedDetails)
        return DBTEAMLOGEventDetails(folderOverviewItemPinnedDetails: folderOverviewItemPinnedDetails)
    }
    if let object = object.asFolderOverviewItemUnpinnedDetails {
        let folderOverviewItemUnpinnedDetails = mapDBXTeamLogFolderOverviewItemUnpinnedDetailsToDB(object: object.folderOverviewItemUnpinnedDetails)
        return DBTEAMLOGEventDetails(folderOverviewItemUnpinnedDetails: folderOverviewItemUnpinnedDetails)
    }
    if let object = object.asObjectLabelAddedDetails {
        let objectLabelAddedDetails = mapDBXTeamLogObjectLabelAddedDetailsToDB(object: object.objectLabelAddedDetails)
        return DBTEAMLOGEventDetails(objectLabelAddedDetails: objectLabelAddedDetails)
    }
    if let object = object.asObjectLabelRemovedDetails {
        let objectLabelRemovedDetails = mapDBXTeamLogObjectLabelRemovedDetailsToDB(object: object.objectLabelRemovedDetails)
        return DBTEAMLOGEventDetails(objectLabelRemovedDetails: objectLabelRemovedDetails)
    }
    if let object = object.asObjectLabelUpdatedValueDetails {
        let objectLabelUpdatedValueDetails = mapDBXTeamLogObjectLabelUpdatedValueDetailsToDB(object: object.objectLabelUpdatedValueDetails)
        return DBTEAMLOGEventDetails(objectLabelUpdatedValueDetails: objectLabelUpdatedValueDetails)
    }
    if let object = object.asOrganizeFolderWithTidyDetails {
        let organizeFolderWithTidyDetails = mapDBXTeamLogOrganizeFolderWithTidyDetailsToDB(object: object.organizeFolderWithTidyDetails)
        return DBTEAMLOGEventDetails(organizeFolderWithTidyDetails: organizeFolderWithTidyDetails)
    }
    if let object = object.asReplayFileDeleteDetails {
        let replayFileDeleteDetails = mapDBXTeamLogReplayFileDeleteDetailsToDB(object: object.replayFileDeleteDetails)
        return DBTEAMLOGEventDetails(replayFileDeleteDetails: replayFileDeleteDetails)
    }
    if let object = object.asRewindFolderDetails {
        let rewindFolderDetails = mapDBXTeamLogRewindFolderDetailsToDB(object: object.rewindFolderDetails)
        return DBTEAMLOGEventDetails(rewindFolderDetails: rewindFolderDetails)
    }
    if let object = object.asUndoNamingConventionDetails {
        let undoNamingConventionDetails = mapDBXTeamLogUndoNamingConventionDetailsToDB(object: object.undoNamingConventionDetails)
        return DBTEAMLOGEventDetails(undoNamingConventionDetails: undoNamingConventionDetails)
    }
    if let object = object.asUndoOrganizeFolderWithTidyDetails {
        let undoOrganizeFolderWithTidyDetails = mapDBXTeamLogUndoOrganizeFolderWithTidyDetailsToDB(object: object.undoOrganizeFolderWithTidyDetails)
        return DBTEAMLOGEventDetails(undoOrganizeFolderWithTidyDetails: undoOrganizeFolderWithTidyDetails)
    }
    if let object = object.asUserTagsAddedDetails {
        let userTagsAddedDetails = mapDBXTeamLogUserTagsAddedDetailsToDB(object: object.userTagsAddedDetails)
        return DBTEAMLOGEventDetails(userTagsAddedDetails: userTagsAddedDetails)
    }
    if let object = object.asUserTagsRemovedDetails {
        let userTagsRemovedDetails = mapDBXTeamLogUserTagsRemovedDetailsToDB(object: object.userTagsRemovedDetails)
        return DBTEAMLOGEventDetails(userTagsRemovedDetails: userTagsRemovedDetails)
    }
    if let object = object.asEmailIngestReceiveFileDetails {
        let emailIngestReceiveFileDetails = mapDBXTeamLogEmailIngestReceiveFileDetailsToDB(object: object.emailIngestReceiveFileDetails)
        return DBTEAMLOGEventDetails(emailIngestReceiveFileDetails: emailIngestReceiveFileDetails)
    }
    if let object = object.asFileRequestChangeDetails {
        let fileRequestChangeDetails = mapDBXTeamLogFileRequestChangeDetailsToDB(object: object.fileRequestChangeDetails)
        return DBTEAMLOGEventDetails(fileRequestChangeDetails: fileRequestChangeDetails)
    }
    if let object = object.asFileRequestCloseDetails {
        let fileRequestCloseDetails = mapDBXTeamLogFileRequestCloseDetailsToDB(object: object.fileRequestCloseDetails)
        return DBTEAMLOGEventDetails(fileRequestCloseDetails: fileRequestCloseDetails)
    }
    if let object = object.asFileRequestCreateDetails {
        let fileRequestCreateDetails = mapDBXTeamLogFileRequestCreateDetailsToDB(object: object.fileRequestCreateDetails)
        return DBTEAMLOGEventDetails(fileRequestCreateDetails: fileRequestCreateDetails)
    }
    if let object = object.asFileRequestDeleteDetails {
        let fileRequestDeleteDetails = mapDBXTeamLogFileRequestDeleteDetailsToDB(object: object.fileRequestDeleteDetails)
        return DBTEAMLOGEventDetails(fileRequestDeleteDetails: fileRequestDeleteDetails)
    }
    if let object = object.asFileRequestReceiveFileDetails {
        let fileRequestReceiveFileDetails = mapDBXTeamLogFileRequestReceiveFileDetailsToDB(object: object.fileRequestReceiveFileDetails)
        return DBTEAMLOGEventDetails(fileRequestReceiveFileDetails: fileRequestReceiveFileDetails)
    }
    if let object = object.asGroupAddExternalIdDetails {
        let groupAddExternalIdDetails = mapDBXTeamLogGroupAddExternalIdDetailsToDB(object: object.groupAddExternalIdDetails)
        return DBTEAMLOGEventDetails(groupAddExternalIdDetails: groupAddExternalIdDetails)
    }
    if let object = object.asGroupAddMemberDetails {
        let groupAddMemberDetails = mapDBXTeamLogGroupAddMemberDetailsToDB(object: object.groupAddMemberDetails)
        return DBTEAMLOGEventDetails(groupAddMemberDetails: groupAddMemberDetails)
    }
    if let object = object.asGroupChangeExternalIdDetails {
        let groupChangeExternalIdDetails = mapDBXTeamLogGroupChangeExternalIdDetailsToDB(object: object.groupChangeExternalIdDetails)
        return DBTEAMLOGEventDetails(groupChangeExternalIdDetails: groupChangeExternalIdDetails)
    }
    if let object = object.asGroupChangeManagementTypeDetails {
        let groupChangeManagementTypeDetails = mapDBXTeamLogGroupChangeManagementTypeDetailsToDB(object: object.groupChangeManagementTypeDetails)
        return DBTEAMLOGEventDetails(groupChangeManagementTypeDetails: groupChangeManagementTypeDetails)
    }
    if let object = object.asGroupChangeMemberRoleDetails {
        let groupChangeMemberRoleDetails = mapDBXTeamLogGroupChangeMemberRoleDetailsToDB(object: object.groupChangeMemberRoleDetails)
        return DBTEAMLOGEventDetails(groupChangeMemberRoleDetails: groupChangeMemberRoleDetails)
    }
    if let object = object.asGroupCreateDetails {
        let groupCreateDetails = mapDBXTeamLogGroupCreateDetailsToDB(object: object.groupCreateDetails)
        return DBTEAMLOGEventDetails(groupCreateDetails: groupCreateDetails)
    }
    if let object = object.asGroupDeleteDetails {
        let groupDeleteDetails = mapDBXTeamLogGroupDeleteDetailsToDB(object: object.groupDeleteDetails)
        return DBTEAMLOGEventDetails(groupDeleteDetails: groupDeleteDetails)
    }
    if let object = object.asGroupDescriptionUpdatedDetails {
        let groupDescriptionUpdatedDetails = mapDBXTeamLogGroupDescriptionUpdatedDetailsToDB(object: object.groupDescriptionUpdatedDetails)
        return DBTEAMLOGEventDetails(groupDescriptionUpdatedDetails: groupDescriptionUpdatedDetails)
    }
    if let object = object.asGroupJoinPolicyUpdatedDetails {
        let groupJoinPolicyUpdatedDetails = mapDBXTeamLogGroupJoinPolicyUpdatedDetailsToDB(object: object.groupJoinPolicyUpdatedDetails)
        return DBTEAMLOGEventDetails(groupJoinPolicyUpdatedDetails: groupJoinPolicyUpdatedDetails)
    }
    if let object = object.asGroupMovedDetails {
        let groupMovedDetails = mapDBXTeamLogGroupMovedDetailsToDB(object: object.groupMovedDetails)
        return DBTEAMLOGEventDetails(groupMovedDetails: groupMovedDetails)
    }
    if let object = object.asGroupRemoveExternalIdDetails {
        let groupRemoveExternalIdDetails = mapDBXTeamLogGroupRemoveExternalIdDetailsToDB(object: object.groupRemoveExternalIdDetails)
        return DBTEAMLOGEventDetails(groupRemoveExternalIdDetails: groupRemoveExternalIdDetails)
    }
    if let object = object.asGroupRemoveMemberDetails {
        let groupRemoveMemberDetails = mapDBXTeamLogGroupRemoveMemberDetailsToDB(object: object.groupRemoveMemberDetails)
        return DBTEAMLOGEventDetails(groupRemoveMemberDetails: groupRemoveMemberDetails)
    }
    if let object = object.asGroupRenameDetails {
        let groupRenameDetails = mapDBXTeamLogGroupRenameDetailsToDB(object: object.groupRenameDetails)
        return DBTEAMLOGEventDetails(groupRenameDetails: groupRenameDetails)
    }
    if let object = object.asAccountLockOrUnlockedDetails {
        let accountLockOrUnlockedDetails = mapDBXTeamLogAccountLockOrUnlockedDetailsToDB(object: object.accountLockOrUnlockedDetails)
        return DBTEAMLOGEventDetails(accountLockOrUnlockedDetails: accountLockOrUnlockedDetails)
    }
    if let object = object.asEmmErrorDetails {
        let emmErrorDetails = mapDBXTeamLogEmmErrorDetailsToDB(object: object.emmErrorDetails)
        return DBTEAMLOGEventDetails(emmErrorDetails: emmErrorDetails)
    }
    if let object = object.asGuestAdminSignedInViaTrustedTeamsDetails {
        let guestAdminSignedInViaTrustedTeamsDetails = mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsDetailsToDB(
            object: object
                .guestAdminSignedInViaTrustedTeamsDetails
        )
        return DBTEAMLOGEventDetails(guestAdminSignedInViaTrustedTeamsDetails: guestAdminSignedInViaTrustedTeamsDetails)
    }
    if let object = object.asGuestAdminSignedOutViaTrustedTeamsDetails {
        let guestAdminSignedOutViaTrustedTeamsDetails = mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetailsToDB(
            object: object
                .guestAdminSignedOutViaTrustedTeamsDetails
        )
        return DBTEAMLOGEventDetails(guestAdminSignedOutViaTrustedTeamsDetails: guestAdminSignedOutViaTrustedTeamsDetails)
    }
    if let object = object.asLoginFailDetails {
        let loginFailDetails = mapDBXTeamLogLoginFailDetailsToDB(object: object.loginFailDetails)
        return DBTEAMLOGEventDetails(loginFailDetails: loginFailDetails)
    }
    if let object = object.asLoginSuccessDetails {
        let loginSuccessDetails = mapDBXTeamLogLoginSuccessDetailsToDB(object: object.loginSuccessDetails)
        return DBTEAMLOGEventDetails(loginSuccessDetails: loginSuccessDetails)
    }
    if let object = object.asLogoutDetails {
        let logoutDetails = mapDBXTeamLogLogoutDetailsToDB(object: object.logoutDetails)
        return DBTEAMLOGEventDetails(logoutDetails: logoutDetails)
    }
    if let object = object.asResellerSupportSessionEndDetails {
        let resellerSupportSessionEndDetails = mapDBXTeamLogResellerSupportSessionEndDetailsToDB(object: object.resellerSupportSessionEndDetails)
        return DBTEAMLOGEventDetails(resellerSupportSessionEndDetails: resellerSupportSessionEndDetails)
    }
    if let object = object.asResellerSupportSessionStartDetails {
        let resellerSupportSessionStartDetails = mapDBXTeamLogResellerSupportSessionStartDetailsToDB(object: object.resellerSupportSessionStartDetails)
        return DBTEAMLOGEventDetails(resellerSupportSessionStartDetails: resellerSupportSessionStartDetails)
    }
    if let object = object.asSignInAsSessionEndDetails {
        let signInAsSessionEndDetails = mapDBXTeamLogSignInAsSessionEndDetailsToDB(object: object.signInAsSessionEndDetails)
        return DBTEAMLOGEventDetails(signInAsSessionEndDetails: signInAsSessionEndDetails)
    }
    if let object = object.asSignInAsSessionStartDetails {
        let signInAsSessionStartDetails = mapDBXTeamLogSignInAsSessionStartDetailsToDB(object: object.signInAsSessionStartDetails)
        return DBTEAMLOGEventDetails(signInAsSessionStartDetails: signInAsSessionStartDetails)
    }
    if let object = object.asSsoErrorDetails {
        let ssoErrorDetails = mapDBXTeamLogSsoErrorDetailsToDB(object: object.ssoErrorDetails)
        return DBTEAMLOGEventDetails(ssoErrorDetails: ssoErrorDetails)
    }
    if let object = object.asBackupAdminInvitationSentDetails {
        let backupAdminInvitationSentDetails = mapDBXTeamLogBackupAdminInvitationSentDetailsToDB(object: object.backupAdminInvitationSentDetails)
        return DBTEAMLOGEventDetails(backupAdminInvitationSentDetails: backupAdminInvitationSentDetails)
    }
    if let object = object.asBackupInvitationOpenedDetails {
        let backupInvitationOpenedDetails = mapDBXTeamLogBackupInvitationOpenedDetailsToDB(object: object.backupInvitationOpenedDetails)
        return DBTEAMLOGEventDetails(backupInvitationOpenedDetails: backupInvitationOpenedDetails)
    }
    if let object = object.asCreateTeamInviteLinkDetails {
        let createTeamInviteLinkDetails = mapDBXTeamLogCreateTeamInviteLinkDetailsToDB(object: object.createTeamInviteLinkDetails)
        return DBTEAMLOGEventDetails(createTeamInviteLinkDetails: createTeamInviteLinkDetails)
    }
    if let object = object.asDeleteTeamInviteLinkDetails {
        let deleteTeamInviteLinkDetails = mapDBXTeamLogDeleteTeamInviteLinkDetailsToDB(object: object.deleteTeamInviteLinkDetails)
        return DBTEAMLOGEventDetails(deleteTeamInviteLinkDetails: deleteTeamInviteLinkDetails)
    }
    if let object = object.asMemberAddExternalIdDetails {
        let memberAddExternalIdDetails = mapDBXTeamLogMemberAddExternalIdDetailsToDB(object: object.memberAddExternalIdDetails)
        return DBTEAMLOGEventDetails(memberAddExternalIdDetails: memberAddExternalIdDetails)
    }
    if let object = object.asMemberAddNameDetails {
        let memberAddNameDetails = mapDBXTeamLogMemberAddNameDetailsToDB(object: object.memberAddNameDetails)
        return DBTEAMLOGEventDetails(memberAddNameDetails: memberAddNameDetails)
    }
    if let object = object.asMemberChangeAdminRoleDetails {
        let memberChangeAdminRoleDetails = mapDBXTeamLogMemberChangeAdminRoleDetailsToDB(object: object.memberChangeAdminRoleDetails)
        return DBTEAMLOGEventDetails(memberChangeAdminRoleDetails: memberChangeAdminRoleDetails)
    }
    if let object = object.asMemberChangeEmailDetails {
        let memberChangeEmailDetails = mapDBXTeamLogMemberChangeEmailDetailsToDB(object: object.memberChangeEmailDetails)
        return DBTEAMLOGEventDetails(memberChangeEmailDetails: memberChangeEmailDetails)
    }
    if let object = object.asMemberChangeExternalIdDetails {
        let memberChangeExternalIdDetails = mapDBXTeamLogMemberChangeExternalIdDetailsToDB(object: object.memberChangeExternalIdDetails)
        return DBTEAMLOGEventDetails(memberChangeExternalIdDetails: memberChangeExternalIdDetails)
    }
    if let object = object.asMemberChangeMembershipTypeDetails {
        let memberChangeMembershipTypeDetails = mapDBXTeamLogMemberChangeMembershipTypeDetailsToDB(object: object.memberChangeMembershipTypeDetails)
        return DBTEAMLOGEventDetails(memberChangeMembershipTypeDetails: memberChangeMembershipTypeDetails)
    }
    if let object = object.asMemberChangeNameDetails {
        let memberChangeNameDetails = mapDBXTeamLogMemberChangeNameDetailsToDB(object: object.memberChangeNameDetails)
        return DBTEAMLOGEventDetails(memberChangeNameDetails: memberChangeNameDetails)
    }
    if let object = object.asMemberChangeResellerRoleDetails {
        let memberChangeResellerRoleDetails = mapDBXTeamLogMemberChangeResellerRoleDetailsToDB(object: object.memberChangeResellerRoleDetails)
        return DBTEAMLOGEventDetails(memberChangeResellerRoleDetails: memberChangeResellerRoleDetails)
    }
    if let object = object.asMemberChangeStatusDetails {
        let memberChangeStatusDetails = mapDBXTeamLogMemberChangeStatusDetailsToDB(object: object.memberChangeStatusDetails)
        return DBTEAMLOGEventDetails(memberChangeStatusDetails: memberChangeStatusDetails)
    }
    if let object = object.asMemberDeleteManualContactsDetails {
        let memberDeleteManualContactsDetails = mapDBXTeamLogMemberDeleteManualContactsDetailsToDB(object: object.memberDeleteManualContactsDetails)
        return DBTEAMLOGEventDetails(memberDeleteManualContactsDetails: memberDeleteManualContactsDetails)
    }
    if let object = object.asMemberDeleteProfilePhotoDetails {
        let memberDeleteProfilePhotoDetails = mapDBXTeamLogMemberDeleteProfilePhotoDetailsToDB(object: object.memberDeleteProfilePhotoDetails)
        return DBTEAMLOGEventDetails(memberDeleteProfilePhotoDetails: memberDeleteProfilePhotoDetails)
    }
    if let object = object.asMemberPermanentlyDeleteAccountContentsDetails {
        let memberPermanentlyDeleteAccountContentsDetails = mapDBXTeamLogMemberPermanentlyDeleteAccountContentsDetailsToDB(
            object: object
                .memberPermanentlyDeleteAccountContentsDetails
        )
        return DBTEAMLOGEventDetails(memberPermanentlyDeleteAccountContentsDetails: memberPermanentlyDeleteAccountContentsDetails)
    }
    if let object = object.asMemberRemoveExternalIdDetails {
        let memberRemoveExternalIdDetails = mapDBXTeamLogMemberRemoveExternalIdDetailsToDB(object: object.memberRemoveExternalIdDetails)
        return DBTEAMLOGEventDetails(memberRemoveExternalIdDetails: memberRemoveExternalIdDetails)
    }
    if let object = object.asMemberSetProfilePhotoDetails {
        let memberSetProfilePhotoDetails = mapDBXTeamLogMemberSetProfilePhotoDetailsToDB(object: object.memberSetProfilePhotoDetails)
        return DBTEAMLOGEventDetails(memberSetProfilePhotoDetails: memberSetProfilePhotoDetails)
    }
    if let object = object.asMemberSpaceLimitsAddCustomQuotaDetails {
        let memberSpaceLimitsAddCustomQuotaDetails = mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaDetailsToDB(
            object: object
                .memberSpaceLimitsAddCustomQuotaDetails
        )
        return DBTEAMLOGEventDetails(memberSpaceLimitsAddCustomQuotaDetails: memberSpaceLimitsAddCustomQuotaDetails)
    }
    if let object = object.asMemberSpaceLimitsChangeCustomQuotaDetails {
        let memberSpaceLimitsChangeCustomQuotaDetails = mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetailsToDB(
            object: object
                .memberSpaceLimitsChangeCustomQuotaDetails
        )
        return DBTEAMLOGEventDetails(memberSpaceLimitsChangeCustomQuotaDetails: memberSpaceLimitsChangeCustomQuotaDetails)
    }
    if let object = object.asMemberSpaceLimitsChangeStatusDetails {
        let memberSpaceLimitsChangeStatusDetails = mapDBXTeamLogMemberSpaceLimitsChangeStatusDetailsToDB(object: object.memberSpaceLimitsChangeStatusDetails)
        return DBTEAMLOGEventDetails(memberSpaceLimitsChangeStatusDetails: memberSpaceLimitsChangeStatusDetails)
    }
    if let object = object.asMemberSpaceLimitsRemoveCustomQuotaDetails {
        let memberSpaceLimitsRemoveCustomQuotaDetails = mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetailsToDB(
            object: object
                .memberSpaceLimitsRemoveCustomQuotaDetails
        )
        return DBTEAMLOGEventDetails(memberSpaceLimitsRemoveCustomQuotaDetails: memberSpaceLimitsRemoveCustomQuotaDetails)
    }
    if let object = object.asMemberSuggestDetails {
        let memberSuggestDetails = mapDBXTeamLogMemberSuggestDetailsToDB(object: object.memberSuggestDetails)
        return DBTEAMLOGEventDetails(memberSuggestDetails: memberSuggestDetails)
    }
    if let object = object.asMemberTransferAccountContentsDetails {
        let memberTransferAccountContentsDetails = mapDBXTeamLogMemberTransferAccountContentsDetailsToDB(object: object.memberTransferAccountContentsDetails)
        return DBTEAMLOGEventDetails(memberTransferAccountContentsDetails: memberTransferAccountContentsDetails)
    }
    if let object = object.asPendingSecondaryEmailAddedDetails {
        let pendingSecondaryEmailAddedDetails = mapDBXTeamLogPendingSecondaryEmailAddedDetailsToDB(object: object.pendingSecondaryEmailAddedDetails)
        return DBTEAMLOGEventDetails(pendingSecondaryEmailAddedDetails: pendingSecondaryEmailAddedDetails)
    }
    if let object = object.asSecondaryEmailDeletedDetails {
        let secondaryEmailDeletedDetails = mapDBXTeamLogSecondaryEmailDeletedDetailsToDB(object: object.secondaryEmailDeletedDetails)
        return DBTEAMLOGEventDetails(secondaryEmailDeletedDetails: secondaryEmailDeletedDetails)
    }
    if let object = object.asSecondaryEmailVerifiedDetails {
        let secondaryEmailVerifiedDetails = mapDBXTeamLogSecondaryEmailVerifiedDetailsToDB(object: object.secondaryEmailVerifiedDetails)
        return DBTEAMLOGEventDetails(secondaryEmailVerifiedDetails: secondaryEmailVerifiedDetails)
    }
    if let object = object.asSecondaryMailsPolicyChangedDetails {
        let secondaryMailsPolicyChangedDetails = mapDBXTeamLogSecondaryMailsPolicyChangedDetailsToDB(object: object.secondaryMailsPolicyChangedDetails)
        return DBTEAMLOGEventDetails(secondaryMailsPolicyChangedDetails: secondaryMailsPolicyChangedDetails)
    }
    if let object = object.asBinderAddPageDetails {
        let binderAddPageDetails = mapDBXTeamLogBinderAddPageDetailsToDB(object: object.binderAddPageDetails)
        return DBTEAMLOGEventDetails(binderAddPageDetails: binderAddPageDetails)
    }
    if let object = object.asBinderAddSectionDetails {
        let binderAddSectionDetails = mapDBXTeamLogBinderAddSectionDetailsToDB(object: object.binderAddSectionDetails)
        return DBTEAMLOGEventDetails(binderAddSectionDetails: binderAddSectionDetails)
    }
    if let object = object.asBinderRemovePageDetails {
        let binderRemovePageDetails = mapDBXTeamLogBinderRemovePageDetailsToDB(object: object.binderRemovePageDetails)
        return DBTEAMLOGEventDetails(binderRemovePageDetails: binderRemovePageDetails)
    }
    if let object = object.asBinderRemoveSectionDetails {
        let binderRemoveSectionDetails = mapDBXTeamLogBinderRemoveSectionDetailsToDB(object: object.binderRemoveSectionDetails)
        return DBTEAMLOGEventDetails(binderRemoveSectionDetails: binderRemoveSectionDetails)
    }
    if let object = object.asBinderRenamePageDetails {
        let binderRenamePageDetails = mapDBXTeamLogBinderRenamePageDetailsToDB(object: object.binderRenamePageDetails)
        return DBTEAMLOGEventDetails(binderRenamePageDetails: binderRenamePageDetails)
    }
    if let object = object.asBinderRenameSectionDetails {
        let binderRenameSectionDetails = mapDBXTeamLogBinderRenameSectionDetailsToDB(object: object.binderRenameSectionDetails)
        return DBTEAMLOGEventDetails(binderRenameSectionDetails: binderRenameSectionDetails)
    }
    if let object = object.asBinderReorderPageDetails {
        let binderReorderPageDetails = mapDBXTeamLogBinderReorderPageDetailsToDB(object: object.binderReorderPageDetails)
        return DBTEAMLOGEventDetails(binderReorderPageDetails: binderReorderPageDetails)
    }
    if let object = object.asBinderReorderSectionDetails {
        let binderReorderSectionDetails = mapDBXTeamLogBinderReorderSectionDetailsToDB(object: object.binderReorderSectionDetails)
        return DBTEAMLOGEventDetails(binderReorderSectionDetails: binderReorderSectionDetails)
    }
    if let object = object.asPaperContentAddMemberDetails {
        let paperContentAddMemberDetails = mapDBXTeamLogPaperContentAddMemberDetailsToDB(object: object.paperContentAddMemberDetails)
        return DBTEAMLOGEventDetails(paperContentAddMemberDetails: paperContentAddMemberDetails)
    }
    if let object = object.asPaperContentAddToFolderDetails {
        let paperContentAddToFolderDetails = mapDBXTeamLogPaperContentAddToFolderDetailsToDB(object: object.paperContentAddToFolderDetails)
        return DBTEAMLOGEventDetails(paperContentAddToFolderDetails: paperContentAddToFolderDetails)
    }
    if let object = object.asPaperContentArchiveDetails {
        let paperContentArchiveDetails = mapDBXTeamLogPaperContentArchiveDetailsToDB(object: object.paperContentArchiveDetails)
        return DBTEAMLOGEventDetails(paperContentArchiveDetails: paperContentArchiveDetails)
    }
    if let object = object.asPaperContentCreateDetails {
        let paperContentCreateDetails = mapDBXTeamLogPaperContentCreateDetailsToDB(object: object.paperContentCreateDetails)
        return DBTEAMLOGEventDetails(paperContentCreateDetails: paperContentCreateDetails)
    }
    if let object = object.asPaperContentPermanentlyDeleteDetails {
        let paperContentPermanentlyDeleteDetails = mapDBXTeamLogPaperContentPermanentlyDeleteDetailsToDB(object: object.paperContentPermanentlyDeleteDetails)
        return DBTEAMLOGEventDetails(paperContentPermanentlyDeleteDetails: paperContentPermanentlyDeleteDetails)
    }
    if let object = object.asPaperContentRemoveFromFolderDetails {
        let paperContentRemoveFromFolderDetails = mapDBXTeamLogPaperContentRemoveFromFolderDetailsToDB(object: object.paperContentRemoveFromFolderDetails)
        return DBTEAMLOGEventDetails(paperContentRemoveFromFolderDetails: paperContentRemoveFromFolderDetails)
    }
    if let object = object.asPaperContentRemoveMemberDetails {
        let paperContentRemoveMemberDetails = mapDBXTeamLogPaperContentRemoveMemberDetailsToDB(object: object.paperContentRemoveMemberDetails)
        return DBTEAMLOGEventDetails(paperContentRemoveMemberDetails: paperContentRemoveMemberDetails)
    }
    if let object = object.asPaperContentRenameDetails {
        let paperContentRenameDetails = mapDBXTeamLogPaperContentRenameDetailsToDB(object: object.paperContentRenameDetails)
        return DBTEAMLOGEventDetails(paperContentRenameDetails: paperContentRenameDetails)
    }
    if let object = object.asPaperContentRestoreDetails {
        let paperContentRestoreDetails = mapDBXTeamLogPaperContentRestoreDetailsToDB(object: object.paperContentRestoreDetails)
        return DBTEAMLOGEventDetails(paperContentRestoreDetails: paperContentRestoreDetails)
    }
    if let object = object.asPaperDocAddCommentDetails {
        let paperDocAddCommentDetails = mapDBXTeamLogPaperDocAddCommentDetailsToDB(object: object.paperDocAddCommentDetails)
        return DBTEAMLOGEventDetails(paperDocAddCommentDetails: paperDocAddCommentDetails)
    }
    if let object = object.asPaperDocChangeMemberRoleDetails {
        let paperDocChangeMemberRoleDetails = mapDBXTeamLogPaperDocChangeMemberRoleDetailsToDB(object: object.paperDocChangeMemberRoleDetails)
        return DBTEAMLOGEventDetails(paperDocChangeMemberRoleDetails: paperDocChangeMemberRoleDetails)
    }
    if let object = object.asPaperDocChangeSharingPolicyDetails {
        let paperDocChangeSharingPolicyDetails = mapDBXTeamLogPaperDocChangeSharingPolicyDetailsToDB(object: object.paperDocChangeSharingPolicyDetails)
        return DBTEAMLOGEventDetails(paperDocChangeSharingPolicyDetails: paperDocChangeSharingPolicyDetails)
    }
    if let object = object.asPaperDocChangeSubscriptionDetails {
        let paperDocChangeSubscriptionDetails = mapDBXTeamLogPaperDocChangeSubscriptionDetailsToDB(object: object.paperDocChangeSubscriptionDetails)
        return DBTEAMLOGEventDetails(paperDocChangeSubscriptionDetails: paperDocChangeSubscriptionDetails)
    }
    if let object = object.asPaperDocDeletedDetails {
        let paperDocDeletedDetails = mapDBXTeamLogPaperDocDeletedDetailsToDB(object: object.paperDocDeletedDetails)
        return DBTEAMLOGEventDetails(paperDocDeletedDetails: paperDocDeletedDetails)
    }
    if let object = object.asPaperDocDeleteCommentDetails {
        let paperDocDeleteCommentDetails = mapDBXTeamLogPaperDocDeleteCommentDetailsToDB(object: object.paperDocDeleteCommentDetails)
        return DBTEAMLOGEventDetails(paperDocDeleteCommentDetails: paperDocDeleteCommentDetails)
    }
    if let object = object.asPaperDocDownloadDetails {
        let paperDocDownloadDetails = mapDBXTeamLogPaperDocDownloadDetailsToDB(object: object.paperDocDownloadDetails)
        return DBTEAMLOGEventDetails(paperDocDownloadDetails: paperDocDownloadDetails)
    }
    if let object = object.asPaperDocEditDetails {
        let paperDocEditDetails = mapDBXTeamLogPaperDocEditDetailsToDB(object: object.paperDocEditDetails)
        return DBTEAMLOGEventDetails(paperDocEditDetails: paperDocEditDetails)
    }
    if let object = object.asPaperDocEditCommentDetails {
        let paperDocEditCommentDetails = mapDBXTeamLogPaperDocEditCommentDetailsToDB(object: object.paperDocEditCommentDetails)
        return DBTEAMLOGEventDetails(paperDocEditCommentDetails: paperDocEditCommentDetails)
    }
    if let object = object.asPaperDocFollowedDetails {
        let paperDocFollowedDetails = mapDBXTeamLogPaperDocFollowedDetailsToDB(object: object.paperDocFollowedDetails)
        return DBTEAMLOGEventDetails(paperDocFollowedDetails: paperDocFollowedDetails)
    }
    if let object = object.asPaperDocMentionDetails {
        let paperDocMentionDetails = mapDBXTeamLogPaperDocMentionDetailsToDB(object: object.paperDocMentionDetails)
        return DBTEAMLOGEventDetails(paperDocMentionDetails: paperDocMentionDetails)
    }
    if let object = object.asPaperDocOwnershipChangedDetails {
        let paperDocOwnershipChangedDetails = mapDBXTeamLogPaperDocOwnershipChangedDetailsToDB(object: object.paperDocOwnershipChangedDetails)
        return DBTEAMLOGEventDetails(paperDocOwnershipChangedDetails: paperDocOwnershipChangedDetails)
    }
    if let object = object.asPaperDocRequestAccessDetails {
        let paperDocRequestAccessDetails = mapDBXTeamLogPaperDocRequestAccessDetailsToDB(object: object.paperDocRequestAccessDetails)
        return DBTEAMLOGEventDetails(paperDocRequestAccessDetails: paperDocRequestAccessDetails)
    }
    if let object = object.asPaperDocResolveCommentDetails {
        let paperDocResolveCommentDetails = mapDBXTeamLogPaperDocResolveCommentDetailsToDB(object: object.paperDocResolveCommentDetails)
        return DBTEAMLOGEventDetails(paperDocResolveCommentDetails: paperDocResolveCommentDetails)
    }
    if let object = object.asPaperDocRevertDetails {
        let paperDocRevertDetails = mapDBXTeamLogPaperDocRevertDetailsToDB(object: object.paperDocRevertDetails)
        return DBTEAMLOGEventDetails(paperDocRevertDetails: paperDocRevertDetails)
    }
    if let object = object.asPaperDocSlackShareDetails {
        let paperDocSlackShareDetails = mapDBXTeamLogPaperDocSlackShareDetailsToDB(object: object.paperDocSlackShareDetails)
        return DBTEAMLOGEventDetails(paperDocSlackShareDetails: paperDocSlackShareDetails)
    }
    if let object = object.asPaperDocTeamInviteDetails {
        let paperDocTeamInviteDetails = mapDBXTeamLogPaperDocTeamInviteDetailsToDB(object: object.paperDocTeamInviteDetails)
        return DBTEAMLOGEventDetails(paperDocTeamInviteDetails: paperDocTeamInviteDetails)
    }
    if let object = object.asPaperDocTrashedDetails {
        let paperDocTrashedDetails = mapDBXTeamLogPaperDocTrashedDetailsToDB(object: object.paperDocTrashedDetails)
        return DBTEAMLOGEventDetails(paperDocTrashedDetails: paperDocTrashedDetails)
    }
    if let object = object.asPaperDocUnresolveCommentDetails {
        let paperDocUnresolveCommentDetails = mapDBXTeamLogPaperDocUnresolveCommentDetailsToDB(object: object.paperDocUnresolveCommentDetails)
        return DBTEAMLOGEventDetails(paperDocUnresolveCommentDetails: paperDocUnresolveCommentDetails)
    }
    if let object = object.asPaperDocUntrashedDetails {
        let paperDocUntrashedDetails = mapDBXTeamLogPaperDocUntrashedDetailsToDB(object: object.paperDocUntrashedDetails)
        return DBTEAMLOGEventDetails(paperDocUntrashedDetails: paperDocUntrashedDetails)
    }
    if let object = object.asPaperDocViewDetails {
        let paperDocViewDetails = mapDBXTeamLogPaperDocViewDetailsToDB(object: object.paperDocViewDetails)
        return DBTEAMLOGEventDetails(paperDocViewDetails: paperDocViewDetails)
    }
    if let object = object.asPaperExternalViewAllowDetails {
        let paperExternalViewAllowDetails = mapDBXTeamLogPaperExternalViewAllowDetailsToDB(object: object.paperExternalViewAllowDetails)
        return DBTEAMLOGEventDetails(paperExternalViewAllowDetails: paperExternalViewAllowDetails)
    }
    if let object = object.asPaperExternalViewDefaultTeamDetails {
        let paperExternalViewDefaultTeamDetails = mapDBXTeamLogPaperExternalViewDefaultTeamDetailsToDB(object: object.paperExternalViewDefaultTeamDetails)
        return DBTEAMLOGEventDetails(paperExternalViewDefaultTeamDetails: paperExternalViewDefaultTeamDetails)
    }
    if let object = object.asPaperExternalViewForbidDetails {
        let paperExternalViewForbidDetails = mapDBXTeamLogPaperExternalViewForbidDetailsToDB(object: object.paperExternalViewForbidDetails)
        return DBTEAMLOGEventDetails(paperExternalViewForbidDetails: paperExternalViewForbidDetails)
    }
    if let object = object.asPaperFolderChangeSubscriptionDetails {
        let paperFolderChangeSubscriptionDetails = mapDBXTeamLogPaperFolderChangeSubscriptionDetailsToDB(object: object.paperFolderChangeSubscriptionDetails)
        return DBTEAMLOGEventDetails(paperFolderChangeSubscriptionDetails: paperFolderChangeSubscriptionDetails)
    }
    if let object = object.asPaperFolderDeletedDetails {
        let paperFolderDeletedDetails = mapDBXTeamLogPaperFolderDeletedDetailsToDB(object: object.paperFolderDeletedDetails)
        return DBTEAMLOGEventDetails(paperFolderDeletedDetails: paperFolderDeletedDetails)
    }
    if let object = object.asPaperFolderFollowedDetails {
        let paperFolderFollowedDetails = mapDBXTeamLogPaperFolderFollowedDetailsToDB(object: object.paperFolderFollowedDetails)
        return DBTEAMLOGEventDetails(paperFolderFollowedDetails: paperFolderFollowedDetails)
    }
    if let object = object.asPaperFolderTeamInviteDetails {
        let paperFolderTeamInviteDetails = mapDBXTeamLogPaperFolderTeamInviteDetailsToDB(object: object.paperFolderTeamInviteDetails)
        return DBTEAMLOGEventDetails(paperFolderTeamInviteDetails: paperFolderTeamInviteDetails)
    }
    if let object = object.asPaperPublishedLinkChangePermissionDetails {
        let paperPublishedLinkChangePermissionDetails = mapDBXTeamLogPaperPublishedLinkChangePermissionDetailsToDB(
            object: object
                .paperPublishedLinkChangePermissionDetails
        )
        return DBTEAMLOGEventDetails(paperPublishedLinkChangePermissionDetails: paperPublishedLinkChangePermissionDetails)
    }
    if let object = object.asPaperPublishedLinkCreateDetails {
        let paperPublishedLinkCreateDetails = mapDBXTeamLogPaperPublishedLinkCreateDetailsToDB(object: object.paperPublishedLinkCreateDetails)
        return DBTEAMLOGEventDetails(paperPublishedLinkCreateDetails: paperPublishedLinkCreateDetails)
    }
    if let object = object.asPaperPublishedLinkDisabledDetails {
        let paperPublishedLinkDisabledDetails = mapDBXTeamLogPaperPublishedLinkDisabledDetailsToDB(object: object.paperPublishedLinkDisabledDetails)
        return DBTEAMLOGEventDetails(paperPublishedLinkDisabledDetails: paperPublishedLinkDisabledDetails)
    }
    if let object = object.asPaperPublishedLinkViewDetails {
        let paperPublishedLinkViewDetails = mapDBXTeamLogPaperPublishedLinkViewDetailsToDB(object: object.paperPublishedLinkViewDetails)
        return DBTEAMLOGEventDetails(paperPublishedLinkViewDetails: paperPublishedLinkViewDetails)
    }
    if let object = object.asPasswordChangeDetails {
        let passwordChangeDetails = mapDBXTeamLogPasswordChangeDetailsToDB(object: object.passwordChangeDetails)
        return DBTEAMLOGEventDetails(passwordChangeDetails: passwordChangeDetails)
    }
    if let object = object.asPasswordResetDetails {
        let passwordResetDetails = mapDBXTeamLogPasswordResetDetailsToDB(object: object.passwordResetDetails)
        return DBTEAMLOGEventDetails(passwordResetDetails: passwordResetDetails)
    }
    if let object = object.asPasswordResetAllDetails {
        let passwordResetAllDetails = mapDBXTeamLogPasswordResetAllDetailsToDB(object: object.passwordResetAllDetails)
        return DBTEAMLOGEventDetails(passwordResetAllDetails: passwordResetAllDetails)
    }
    if let object = object.asClassificationCreateReportDetails {
        let classificationCreateReportDetails = mapDBXTeamLogClassificationCreateReportDetailsToDB(object: object.classificationCreateReportDetails)
        return DBTEAMLOGEventDetails(classificationCreateReportDetails: classificationCreateReportDetails)
    }
    if let object = object.asClassificationCreateReportFailDetails {
        let classificationCreateReportFailDetails = mapDBXTeamLogClassificationCreateReportFailDetailsToDB(object: object.classificationCreateReportFailDetails)
        return DBTEAMLOGEventDetails(classificationCreateReportFailDetails: classificationCreateReportFailDetails)
    }
    if let object = object.asEmmCreateExceptionsReportDetails {
        let emmCreateExceptionsReportDetails = mapDBXTeamLogEmmCreateExceptionsReportDetailsToDB(object: object.emmCreateExceptionsReportDetails)
        return DBTEAMLOGEventDetails(emmCreateExceptionsReportDetails: emmCreateExceptionsReportDetails)
    }
    if let object = object.asEmmCreateUsageReportDetails {
        let emmCreateUsageReportDetails = mapDBXTeamLogEmmCreateUsageReportDetailsToDB(object: object.emmCreateUsageReportDetails)
        return DBTEAMLOGEventDetails(emmCreateUsageReportDetails: emmCreateUsageReportDetails)
    }
    if let object = object.asExportMembersReportDetails {
        let exportMembersReportDetails = mapDBXTeamLogExportMembersReportDetailsToDB(object: object.exportMembersReportDetails)
        return DBTEAMLOGEventDetails(exportMembersReportDetails: exportMembersReportDetails)
    }
    if let object = object.asExportMembersReportFailDetails {
        let exportMembersReportFailDetails = mapDBXTeamLogExportMembersReportFailDetailsToDB(object: object.exportMembersReportFailDetails)
        return DBTEAMLOGEventDetails(exportMembersReportFailDetails: exportMembersReportFailDetails)
    }
    if let object = object.asExternalSharingCreateReportDetails {
        let externalSharingCreateReportDetails = mapDBXTeamLogExternalSharingCreateReportDetailsToDB(object: object.externalSharingCreateReportDetails)
        return DBTEAMLOGEventDetails(externalSharingCreateReportDetails: externalSharingCreateReportDetails)
    }
    if let object = object.asExternalSharingReportFailedDetails {
        let externalSharingReportFailedDetails = mapDBXTeamLogExternalSharingReportFailedDetailsToDB(object: object.externalSharingReportFailedDetails)
        return DBTEAMLOGEventDetails(externalSharingReportFailedDetails: externalSharingReportFailedDetails)
    }
    if let object = object.asNoExpirationLinkGenCreateReportDetails {
        let noExpirationLinkGenCreateReportDetails = mapDBXTeamLogNoExpirationLinkGenCreateReportDetailsToDB(
            object: object
                .noExpirationLinkGenCreateReportDetails
        )
        return DBTEAMLOGEventDetails(noExpirationLinkGenCreateReportDetails: noExpirationLinkGenCreateReportDetails)
    }
    if let object = object.asNoExpirationLinkGenReportFailedDetails {
        let noExpirationLinkGenReportFailedDetails = mapDBXTeamLogNoExpirationLinkGenReportFailedDetailsToDB(
            object: object
                .noExpirationLinkGenReportFailedDetails
        )
        return DBTEAMLOGEventDetails(noExpirationLinkGenReportFailedDetails: noExpirationLinkGenReportFailedDetails)
    }
    if let object = object.asNoPasswordLinkGenCreateReportDetails {
        let noPasswordLinkGenCreateReportDetails = mapDBXTeamLogNoPasswordLinkGenCreateReportDetailsToDB(object: object.noPasswordLinkGenCreateReportDetails)
        return DBTEAMLOGEventDetails(noPasswordLinkGenCreateReportDetails: noPasswordLinkGenCreateReportDetails)
    }
    if let object = object.asNoPasswordLinkGenReportFailedDetails {
        let noPasswordLinkGenReportFailedDetails = mapDBXTeamLogNoPasswordLinkGenReportFailedDetailsToDB(object: object.noPasswordLinkGenReportFailedDetails)
        return DBTEAMLOGEventDetails(noPasswordLinkGenReportFailedDetails: noPasswordLinkGenReportFailedDetails)
    }
    if let object = object.asNoPasswordLinkViewCreateReportDetails {
        let noPasswordLinkViewCreateReportDetails = mapDBXTeamLogNoPasswordLinkViewCreateReportDetailsToDB(object: object.noPasswordLinkViewCreateReportDetails)
        return DBTEAMLOGEventDetails(noPasswordLinkViewCreateReportDetails: noPasswordLinkViewCreateReportDetails)
    }
    if let object = object.asNoPasswordLinkViewReportFailedDetails {
        let noPasswordLinkViewReportFailedDetails = mapDBXTeamLogNoPasswordLinkViewReportFailedDetailsToDB(object: object.noPasswordLinkViewReportFailedDetails)
        return DBTEAMLOGEventDetails(noPasswordLinkViewReportFailedDetails: noPasswordLinkViewReportFailedDetails)
    }
    if let object = object.asOutdatedLinkViewCreateReportDetails {
        let outdatedLinkViewCreateReportDetails = mapDBXTeamLogOutdatedLinkViewCreateReportDetailsToDB(object: object.outdatedLinkViewCreateReportDetails)
        return DBTEAMLOGEventDetails(outdatedLinkViewCreateReportDetails: outdatedLinkViewCreateReportDetails)
    }
    if let object = object.asOutdatedLinkViewReportFailedDetails {
        let outdatedLinkViewReportFailedDetails = mapDBXTeamLogOutdatedLinkViewReportFailedDetailsToDB(object: object.outdatedLinkViewReportFailedDetails)
        return DBTEAMLOGEventDetails(outdatedLinkViewReportFailedDetails: outdatedLinkViewReportFailedDetails)
    }
    if let object = object.asPaperAdminExportStartDetails {
        let paperAdminExportStartDetails = mapDBXTeamLogPaperAdminExportStartDetailsToDB(object: object.paperAdminExportStartDetails)
        return DBTEAMLOGEventDetails(paperAdminExportStartDetails: paperAdminExportStartDetails)
    }
    if let object = object.asRansomwareAlertCreateReportDetails {
        let ransomwareAlertCreateReportDetails = mapDBXTeamLogRansomwareAlertCreateReportDetailsToDB(object: object.ransomwareAlertCreateReportDetails)
        return DBTEAMLOGEventDetails(ransomwareAlertCreateReportDetails: ransomwareAlertCreateReportDetails)
    }
    if let object = object.asRansomwareAlertCreateReportFailedDetails {
        let ransomwareAlertCreateReportFailedDetails = mapDBXTeamLogRansomwareAlertCreateReportFailedDetailsToDB(
            object: object
                .ransomwareAlertCreateReportFailedDetails
        )
        return DBTEAMLOGEventDetails(ransomwareAlertCreateReportFailedDetails: ransomwareAlertCreateReportFailedDetails)
    }
    if let object = object.asSmartSyncCreateAdminPrivilegeReportDetails {
        let smartSyncCreateAdminPrivilegeReportDetails = mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportDetailsToDB(
            object: object
                .smartSyncCreateAdminPrivilegeReportDetails
        )
        return DBTEAMLOGEventDetails(smartSyncCreateAdminPrivilegeReportDetails: smartSyncCreateAdminPrivilegeReportDetails)
    }
    if let object = object.asTeamActivityCreateReportDetails {
        let teamActivityCreateReportDetails = mapDBXTeamLogTeamActivityCreateReportDetailsToDB(object: object.teamActivityCreateReportDetails)
        return DBTEAMLOGEventDetails(teamActivityCreateReportDetails: teamActivityCreateReportDetails)
    }
    if let object = object.asTeamActivityCreateReportFailDetails {
        let teamActivityCreateReportFailDetails = mapDBXTeamLogTeamActivityCreateReportFailDetailsToDB(object: object.teamActivityCreateReportFailDetails)
        return DBTEAMLOGEventDetails(teamActivityCreateReportFailDetails: teamActivityCreateReportFailDetails)
    }
    if let object = object.asCollectionShareDetails {
        let collectionShareDetails = mapDBXTeamLogCollectionShareDetailsToDB(object: object.collectionShareDetails)
        return DBTEAMLOGEventDetails(collectionShareDetails: collectionShareDetails)
    }
    if let object = object.asFileTransfersFileAddDetails {
        let fileTransfersFileAddDetails = mapDBXTeamLogFileTransfersFileAddDetailsToDB(object: object.fileTransfersFileAddDetails)
        return DBTEAMLOGEventDetails(fileTransfersFileAddDetails: fileTransfersFileAddDetails)
    }
    if let object = object.asFileTransfersTransferDeleteDetails {
        let fileTransfersTransferDeleteDetails = mapDBXTeamLogFileTransfersTransferDeleteDetailsToDB(object: object.fileTransfersTransferDeleteDetails)
        return DBTEAMLOGEventDetails(fileTransfersTransferDeleteDetails: fileTransfersTransferDeleteDetails)
    }
    if let object = object.asFileTransfersTransferDownloadDetails {
        let fileTransfersTransferDownloadDetails = mapDBXTeamLogFileTransfersTransferDownloadDetailsToDB(object: object.fileTransfersTransferDownloadDetails)
        return DBTEAMLOGEventDetails(fileTransfersTransferDownloadDetails: fileTransfersTransferDownloadDetails)
    }
    if let object = object.asFileTransfersTransferSendDetails {
        let fileTransfersTransferSendDetails = mapDBXTeamLogFileTransfersTransferSendDetailsToDB(object: object.fileTransfersTransferSendDetails)
        return DBTEAMLOGEventDetails(fileTransfersTransferSendDetails: fileTransfersTransferSendDetails)
    }
    if let object = object.asFileTransfersTransferViewDetails {
        let fileTransfersTransferViewDetails = mapDBXTeamLogFileTransfersTransferViewDetailsToDB(object: object.fileTransfersTransferViewDetails)
        return DBTEAMLOGEventDetails(fileTransfersTransferViewDetails: fileTransfersTransferViewDetails)
    }
    if let object = object.asNoteAclInviteOnlyDetails {
        let noteAclInviteOnlyDetails = mapDBXTeamLogNoteAclInviteOnlyDetailsToDB(object: object.noteAclInviteOnlyDetails)
        return DBTEAMLOGEventDetails(noteAclInviteOnlyDetails: noteAclInviteOnlyDetails)
    }
    if let object = object.asNoteAclLinkDetails {
        let noteAclLinkDetails = mapDBXTeamLogNoteAclLinkDetailsToDB(object: object.noteAclLinkDetails)
        return DBTEAMLOGEventDetails(noteAclLinkDetails: noteAclLinkDetails)
    }
    if let object = object.asNoteAclTeamLinkDetails {
        let noteAclTeamLinkDetails = mapDBXTeamLogNoteAclTeamLinkDetailsToDB(object: object.noteAclTeamLinkDetails)
        return DBTEAMLOGEventDetails(noteAclTeamLinkDetails: noteAclTeamLinkDetails)
    }
    if let object = object.asNoteSharedDetails {
        let noteSharedDetails = mapDBXTeamLogNoteSharedDetailsToDB(object: object.noteSharedDetails)
        return DBTEAMLOGEventDetails(noteSharedDetails: noteSharedDetails)
    }
    if let object = object.asNoteShareReceiveDetails {
        let noteShareReceiveDetails = mapDBXTeamLogNoteShareReceiveDetailsToDB(object: object.noteShareReceiveDetails)
        return DBTEAMLOGEventDetails(noteShareReceiveDetails: noteShareReceiveDetails)
    }
    if let object = object.asOpenNoteSharedDetails {
        let openNoteSharedDetails = mapDBXTeamLogOpenNoteSharedDetailsToDB(object: object.openNoteSharedDetails)
        return DBTEAMLOGEventDetails(openNoteSharedDetails: openNoteSharedDetails)
    }
    if let object = object.asReplayFileSharedLinkCreatedDetails {
        let replayFileSharedLinkCreatedDetails = mapDBXTeamLogReplayFileSharedLinkCreatedDetailsToDB(object: object.replayFileSharedLinkCreatedDetails)
        return DBTEAMLOGEventDetails(replayFileSharedLinkCreatedDetails: replayFileSharedLinkCreatedDetails)
    }
    if let object = object.asReplayFileSharedLinkModifiedDetails {
        let replayFileSharedLinkModifiedDetails = mapDBXTeamLogReplayFileSharedLinkModifiedDetailsToDB(object: object.replayFileSharedLinkModifiedDetails)
        return DBTEAMLOGEventDetails(replayFileSharedLinkModifiedDetails: replayFileSharedLinkModifiedDetails)
    }
    if let object = object.asReplayProjectTeamAddDetails {
        let replayProjectTeamAddDetails = mapDBXTeamLogReplayProjectTeamAddDetailsToDB(object: object.replayProjectTeamAddDetails)
        return DBTEAMLOGEventDetails(replayProjectTeamAddDetails: replayProjectTeamAddDetails)
    }
    if let object = object.asReplayProjectTeamDeleteDetails {
        let replayProjectTeamDeleteDetails = mapDBXTeamLogReplayProjectTeamDeleteDetailsToDB(object: object.replayProjectTeamDeleteDetails)
        return DBTEAMLOGEventDetails(replayProjectTeamDeleteDetails: replayProjectTeamDeleteDetails)
    }
    if let object = object.asSfAddGroupDetails {
        let sfAddGroupDetails = mapDBXTeamLogSfAddGroupDetailsToDB(object: object.sfAddGroupDetails)
        return DBTEAMLOGEventDetails(sfAddGroupDetails: sfAddGroupDetails)
    }
    if let object = object.asSfAllowNonMembersToViewSharedLinksDetails {
        let sfAllowNonMembersToViewSharedLinksDetails = mapDBXTeamLogSfAllowNonMembersToViewSharedLinksDetailsToDB(
            object: object
                .sfAllowNonMembersToViewSharedLinksDetails
        )
        return DBTEAMLOGEventDetails(sfAllowNonMembersToViewSharedLinksDetails: sfAllowNonMembersToViewSharedLinksDetails)
    }
    if let object = object.asSfExternalInviteWarnDetails {
        let sfExternalInviteWarnDetails = mapDBXTeamLogSfExternalInviteWarnDetailsToDB(object: object.sfExternalInviteWarnDetails)
        return DBTEAMLOGEventDetails(sfExternalInviteWarnDetails: sfExternalInviteWarnDetails)
    }
    if let object = object.asSfFbInviteDetails {
        let sfFbInviteDetails = mapDBXTeamLogSfFbInviteDetailsToDB(object: object.sfFbInviteDetails)
        return DBTEAMLOGEventDetails(sfFbInviteDetails: sfFbInviteDetails)
    }
    if let object = object.asSfFbInviteChangeRoleDetails {
        let sfFbInviteChangeRoleDetails = mapDBXTeamLogSfFbInviteChangeRoleDetailsToDB(object: object.sfFbInviteChangeRoleDetails)
        return DBTEAMLOGEventDetails(sfFbInviteChangeRoleDetails: sfFbInviteChangeRoleDetails)
    }
    if let object = object.asSfFbUninviteDetails {
        let sfFbUninviteDetails = mapDBXTeamLogSfFbUninviteDetailsToDB(object: object.sfFbUninviteDetails)
        return DBTEAMLOGEventDetails(sfFbUninviteDetails: sfFbUninviteDetails)
    }
    if let object = object.asSfInviteGroupDetails {
        let sfInviteGroupDetails = mapDBXTeamLogSfInviteGroupDetailsToDB(object: object.sfInviteGroupDetails)
        return DBTEAMLOGEventDetails(sfInviteGroupDetails: sfInviteGroupDetails)
    }
    if let object = object.asSfTeamGrantAccessDetails {
        let sfTeamGrantAccessDetails = mapDBXTeamLogSfTeamGrantAccessDetailsToDB(object: object.sfTeamGrantAccessDetails)
        return DBTEAMLOGEventDetails(sfTeamGrantAccessDetails: sfTeamGrantAccessDetails)
    }
    if let object = object.asSfTeamInviteDetails {
        let sfTeamInviteDetails = mapDBXTeamLogSfTeamInviteDetailsToDB(object: object.sfTeamInviteDetails)
        return DBTEAMLOGEventDetails(sfTeamInviteDetails: sfTeamInviteDetails)
    }
    if let object = object.asSfTeamInviteChangeRoleDetails {
        let sfTeamInviteChangeRoleDetails = mapDBXTeamLogSfTeamInviteChangeRoleDetailsToDB(object: object.sfTeamInviteChangeRoleDetails)
        return DBTEAMLOGEventDetails(sfTeamInviteChangeRoleDetails: sfTeamInviteChangeRoleDetails)
    }
    if let object = object.asSfTeamJoinDetails {
        let sfTeamJoinDetails = mapDBXTeamLogSfTeamJoinDetailsToDB(object: object.sfTeamJoinDetails)
        return DBTEAMLOGEventDetails(sfTeamJoinDetails: sfTeamJoinDetails)
    }
    if let object = object.asSfTeamJoinFromOobLinkDetails {
        let sfTeamJoinFromOobLinkDetails = mapDBXTeamLogSfTeamJoinFromOobLinkDetailsToDB(object: object.sfTeamJoinFromOobLinkDetails)
        return DBTEAMLOGEventDetails(sfTeamJoinFromOobLinkDetails: sfTeamJoinFromOobLinkDetails)
    }
    if let object = object.asSfTeamUninviteDetails {
        let sfTeamUninviteDetails = mapDBXTeamLogSfTeamUninviteDetailsToDB(object: object.sfTeamUninviteDetails)
        return DBTEAMLOGEventDetails(sfTeamUninviteDetails: sfTeamUninviteDetails)
    }
    if let object = object.asSharedContentAddInviteesDetails {
        let sharedContentAddInviteesDetails = mapDBXTeamLogSharedContentAddInviteesDetailsToDB(object: object.sharedContentAddInviteesDetails)
        return DBTEAMLOGEventDetails(sharedContentAddInviteesDetails: sharedContentAddInviteesDetails)
    }
    if let object = object.asSharedContentAddLinkExpiryDetails {
        let sharedContentAddLinkExpiryDetails = mapDBXTeamLogSharedContentAddLinkExpiryDetailsToDB(object: object.sharedContentAddLinkExpiryDetails)
        return DBTEAMLOGEventDetails(sharedContentAddLinkExpiryDetails: sharedContentAddLinkExpiryDetails)
    }
    if let object = object.asSharedContentAddLinkPasswordDetails {
        let sharedContentAddLinkPasswordDetails = mapDBXTeamLogSharedContentAddLinkPasswordDetailsToDB(object: object.sharedContentAddLinkPasswordDetails)
        return DBTEAMLOGEventDetails(sharedContentAddLinkPasswordDetails: sharedContentAddLinkPasswordDetails)
    }
    if let object = object.asSharedContentAddMemberDetails {
        let sharedContentAddMemberDetails = mapDBXTeamLogSharedContentAddMemberDetailsToDB(object: object.sharedContentAddMemberDetails)
        return DBTEAMLOGEventDetails(sharedContentAddMemberDetails: sharedContentAddMemberDetails)
    }
    if let object = object.asSharedContentChangeDownloadsPolicyDetails {
        let sharedContentChangeDownloadsPolicyDetails = mapDBXTeamLogSharedContentChangeDownloadsPolicyDetailsToDB(
            object: object
                .sharedContentChangeDownloadsPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharedContentChangeDownloadsPolicyDetails: sharedContentChangeDownloadsPolicyDetails)
    }
    if let object = object.asSharedContentChangeInviteeRoleDetails {
        let sharedContentChangeInviteeRoleDetails = mapDBXTeamLogSharedContentChangeInviteeRoleDetailsToDB(object: object.sharedContentChangeInviteeRoleDetails)
        return DBTEAMLOGEventDetails(sharedContentChangeInviteeRoleDetails: sharedContentChangeInviteeRoleDetails)
    }
    if let object = object.asSharedContentChangeLinkAudienceDetails {
        let sharedContentChangeLinkAudienceDetails = mapDBXTeamLogSharedContentChangeLinkAudienceDetailsToDB(
            object: object
                .sharedContentChangeLinkAudienceDetails
        )
        return DBTEAMLOGEventDetails(sharedContentChangeLinkAudienceDetails: sharedContentChangeLinkAudienceDetails)
    }
    if let object = object.asSharedContentChangeLinkExpiryDetails {
        let sharedContentChangeLinkExpiryDetails = mapDBXTeamLogSharedContentChangeLinkExpiryDetailsToDB(object: object.sharedContentChangeLinkExpiryDetails)
        return DBTEAMLOGEventDetails(sharedContentChangeLinkExpiryDetails: sharedContentChangeLinkExpiryDetails)
    }
    if let object = object.asSharedContentChangeLinkPasswordDetails {
        let sharedContentChangeLinkPasswordDetails = mapDBXTeamLogSharedContentChangeLinkPasswordDetailsToDB(
            object: object
                .sharedContentChangeLinkPasswordDetails
        )
        return DBTEAMLOGEventDetails(sharedContentChangeLinkPasswordDetails: sharedContentChangeLinkPasswordDetails)
    }
    if let object = object.asSharedContentChangeMemberRoleDetails {
        let sharedContentChangeMemberRoleDetails = mapDBXTeamLogSharedContentChangeMemberRoleDetailsToDB(object: object.sharedContentChangeMemberRoleDetails)
        return DBTEAMLOGEventDetails(sharedContentChangeMemberRoleDetails: sharedContentChangeMemberRoleDetails)
    }
    if let object = object.asSharedContentChangeViewerInfoPolicyDetails {
        let sharedContentChangeViewerInfoPolicyDetails = mapDBXTeamLogSharedContentChangeViewerInfoPolicyDetailsToDB(
            object: object
                .sharedContentChangeViewerInfoPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharedContentChangeViewerInfoPolicyDetails: sharedContentChangeViewerInfoPolicyDetails)
    }
    if let object = object.asSharedContentClaimInvitationDetails {
        let sharedContentClaimInvitationDetails = mapDBXTeamLogSharedContentClaimInvitationDetailsToDB(object: object.sharedContentClaimInvitationDetails)
        return DBTEAMLOGEventDetails(sharedContentClaimInvitationDetails: sharedContentClaimInvitationDetails)
    }
    if let object = object.asSharedContentCopyDetails {
        let sharedContentCopyDetails = mapDBXTeamLogSharedContentCopyDetailsToDB(object: object.sharedContentCopyDetails)
        return DBTEAMLOGEventDetails(sharedContentCopyDetails: sharedContentCopyDetails)
    }
    if let object = object.asSharedContentDownloadDetails {
        let sharedContentDownloadDetails = mapDBXTeamLogSharedContentDownloadDetailsToDB(object: object.sharedContentDownloadDetails)
        return DBTEAMLOGEventDetails(sharedContentDownloadDetails: sharedContentDownloadDetails)
    }
    if let object = object.asSharedContentRelinquishMembershipDetails {
        let sharedContentRelinquishMembershipDetails = mapDBXTeamLogSharedContentRelinquishMembershipDetailsToDB(
            object: object
                .sharedContentRelinquishMembershipDetails
        )
        return DBTEAMLOGEventDetails(sharedContentRelinquishMembershipDetails: sharedContentRelinquishMembershipDetails)
    }
    if let object = object.asSharedContentRemoveInviteesDetails {
        let sharedContentRemoveInviteesDetails = mapDBXTeamLogSharedContentRemoveInviteesDetailsToDB(object: object.sharedContentRemoveInviteesDetails)
        return DBTEAMLOGEventDetails(sharedContentRemoveInviteesDetails: sharedContentRemoveInviteesDetails)
    }
    if let object = object.asSharedContentRemoveLinkExpiryDetails {
        let sharedContentRemoveLinkExpiryDetails = mapDBXTeamLogSharedContentRemoveLinkExpiryDetailsToDB(object: object.sharedContentRemoveLinkExpiryDetails)
        return DBTEAMLOGEventDetails(sharedContentRemoveLinkExpiryDetails: sharedContentRemoveLinkExpiryDetails)
    }
    if let object = object.asSharedContentRemoveLinkPasswordDetails {
        let sharedContentRemoveLinkPasswordDetails = mapDBXTeamLogSharedContentRemoveLinkPasswordDetailsToDB(
            object: object
                .sharedContentRemoveLinkPasswordDetails
        )
        return DBTEAMLOGEventDetails(sharedContentRemoveLinkPasswordDetails: sharedContentRemoveLinkPasswordDetails)
    }
    if let object = object.asSharedContentRemoveMemberDetails {
        let sharedContentRemoveMemberDetails = mapDBXTeamLogSharedContentRemoveMemberDetailsToDB(object: object.sharedContentRemoveMemberDetails)
        return DBTEAMLOGEventDetails(sharedContentRemoveMemberDetails: sharedContentRemoveMemberDetails)
    }
    if let object = object.asSharedContentRequestAccessDetails {
        let sharedContentRequestAccessDetails = mapDBXTeamLogSharedContentRequestAccessDetailsToDB(object: object.sharedContentRequestAccessDetails)
        return DBTEAMLOGEventDetails(sharedContentRequestAccessDetails: sharedContentRequestAccessDetails)
    }
    if let object = object.asSharedContentRestoreInviteesDetails {
        let sharedContentRestoreInviteesDetails = mapDBXTeamLogSharedContentRestoreInviteesDetailsToDB(object: object.sharedContentRestoreInviteesDetails)
        return DBTEAMLOGEventDetails(sharedContentRestoreInviteesDetails: sharedContentRestoreInviteesDetails)
    }
    if let object = object.asSharedContentRestoreMemberDetails {
        let sharedContentRestoreMemberDetails = mapDBXTeamLogSharedContentRestoreMemberDetailsToDB(object: object.sharedContentRestoreMemberDetails)
        return DBTEAMLOGEventDetails(sharedContentRestoreMemberDetails: sharedContentRestoreMemberDetails)
    }
    if let object = object.asSharedContentUnshareDetails {
        let sharedContentUnshareDetails = mapDBXTeamLogSharedContentUnshareDetailsToDB(object: object.sharedContentUnshareDetails)
        return DBTEAMLOGEventDetails(sharedContentUnshareDetails: sharedContentUnshareDetails)
    }
    if let object = object.asSharedContentViewDetails {
        let sharedContentViewDetails = mapDBXTeamLogSharedContentViewDetailsToDB(object: object.sharedContentViewDetails)
        return DBTEAMLOGEventDetails(sharedContentViewDetails: sharedContentViewDetails)
    }
    if let object = object.asSharedFolderChangeLinkPolicyDetails {
        let sharedFolderChangeLinkPolicyDetails = mapDBXTeamLogSharedFolderChangeLinkPolicyDetailsToDB(object: object.sharedFolderChangeLinkPolicyDetails)
        return DBTEAMLOGEventDetails(sharedFolderChangeLinkPolicyDetails: sharedFolderChangeLinkPolicyDetails)
    }
    if let object = object.asSharedFolderChangeMembersInheritancePolicyDetails {
        let sharedFolderChangeMembersInheritancePolicyDetails = mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyDetailsToDB(
            object: object
                .sharedFolderChangeMembersInheritancePolicyDetails
        )
        return DBTEAMLOGEventDetails(sharedFolderChangeMembersInheritancePolicyDetails: sharedFolderChangeMembersInheritancePolicyDetails)
    }
    if let object = object.asSharedFolderChangeMembersManagementPolicyDetails {
        let sharedFolderChangeMembersManagementPolicyDetails = mapDBXTeamLogSharedFolderChangeMembersManagementPolicyDetailsToDB(
            object: object
                .sharedFolderChangeMembersManagementPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharedFolderChangeMembersManagementPolicyDetails: sharedFolderChangeMembersManagementPolicyDetails)
    }
    if let object = object.asSharedFolderChangeMembersPolicyDetails {
        let sharedFolderChangeMembersPolicyDetails = mapDBXTeamLogSharedFolderChangeMembersPolicyDetailsToDB(
            object: object
                .sharedFolderChangeMembersPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharedFolderChangeMembersPolicyDetails: sharedFolderChangeMembersPolicyDetails)
    }
    if let object = object.asSharedFolderCreateDetails {
        let sharedFolderCreateDetails = mapDBXTeamLogSharedFolderCreateDetailsToDB(object: object.sharedFolderCreateDetails)
        return DBTEAMLOGEventDetails(sharedFolderCreateDetails: sharedFolderCreateDetails)
    }
    if let object = object.asSharedFolderDeclineInvitationDetails {
        let sharedFolderDeclineInvitationDetails = mapDBXTeamLogSharedFolderDeclineInvitationDetailsToDB(object: object.sharedFolderDeclineInvitationDetails)
        return DBTEAMLOGEventDetails(sharedFolderDeclineInvitationDetails: sharedFolderDeclineInvitationDetails)
    }
    if let object = object.asSharedFolderMountDetails {
        let sharedFolderMountDetails = mapDBXTeamLogSharedFolderMountDetailsToDB(object: object.sharedFolderMountDetails)
        return DBTEAMLOGEventDetails(sharedFolderMountDetails: sharedFolderMountDetails)
    }
    if let object = object.asSharedFolderNestDetails {
        let sharedFolderNestDetails = mapDBXTeamLogSharedFolderNestDetailsToDB(object: object.sharedFolderNestDetails)
        return DBTEAMLOGEventDetails(sharedFolderNestDetails: sharedFolderNestDetails)
    }
    if let object = object.asSharedFolderTransferOwnershipDetails {
        let sharedFolderTransferOwnershipDetails = mapDBXTeamLogSharedFolderTransferOwnershipDetailsToDB(object: object.sharedFolderTransferOwnershipDetails)
        return DBTEAMLOGEventDetails(sharedFolderTransferOwnershipDetails: sharedFolderTransferOwnershipDetails)
    }
    if let object = object.asSharedFolderUnmountDetails {
        let sharedFolderUnmountDetails = mapDBXTeamLogSharedFolderUnmountDetailsToDB(object: object.sharedFolderUnmountDetails)
        return DBTEAMLOGEventDetails(sharedFolderUnmountDetails: sharedFolderUnmountDetails)
    }
    if let object = object.asSharedLinkAddExpiryDetails {
        let sharedLinkAddExpiryDetails = mapDBXTeamLogSharedLinkAddExpiryDetailsToDB(object: object.sharedLinkAddExpiryDetails)
        return DBTEAMLOGEventDetails(sharedLinkAddExpiryDetails: sharedLinkAddExpiryDetails)
    }
    if let object = object.asSharedLinkChangeExpiryDetails {
        let sharedLinkChangeExpiryDetails = mapDBXTeamLogSharedLinkChangeExpiryDetailsToDB(object: object.sharedLinkChangeExpiryDetails)
        return DBTEAMLOGEventDetails(sharedLinkChangeExpiryDetails: sharedLinkChangeExpiryDetails)
    }
    if let object = object.asSharedLinkChangeVisibilityDetails {
        let sharedLinkChangeVisibilityDetails = mapDBXTeamLogSharedLinkChangeVisibilityDetailsToDB(object: object.sharedLinkChangeVisibilityDetails)
        return DBTEAMLOGEventDetails(sharedLinkChangeVisibilityDetails: sharedLinkChangeVisibilityDetails)
    }
    if let object = object.asSharedLinkCopyDetails {
        let sharedLinkCopyDetails = mapDBXTeamLogSharedLinkCopyDetailsToDB(object: object.sharedLinkCopyDetails)
        return DBTEAMLOGEventDetails(sharedLinkCopyDetails: sharedLinkCopyDetails)
    }
    if let object = object.asSharedLinkCreateDetails {
        let sharedLinkCreateDetails = mapDBXTeamLogSharedLinkCreateDetailsToDB(object: object.sharedLinkCreateDetails)
        return DBTEAMLOGEventDetails(sharedLinkCreateDetails: sharedLinkCreateDetails)
    }
    if let object = object.asSharedLinkDisableDetails {
        let sharedLinkDisableDetails = mapDBXTeamLogSharedLinkDisableDetailsToDB(object: object.sharedLinkDisableDetails)
        return DBTEAMLOGEventDetails(sharedLinkDisableDetails: sharedLinkDisableDetails)
    }
    if let object = object.asSharedLinkDownloadDetails {
        let sharedLinkDownloadDetails = mapDBXTeamLogSharedLinkDownloadDetailsToDB(object: object.sharedLinkDownloadDetails)
        return DBTEAMLOGEventDetails(sharedLinkDownloadDetails: sharedLinkDownloadDetails)
    }
    if let object = object.asSharedLinkRemoveExpiryDetails {
        let sharedLinkRemoveExpiryDetails = mapDBXTeamLogSharedLinkRemoveExpiryDetailsToDB(object: object.sharedLinkRemoveExpiryDetails)
        return DBTEAMLOGEventDetails(sharedLinkRemoveExpiryDetails: sharedLinkRemoveExpiryDetails)
    }
    if let object = object.asSharedLinkSettingsAddExpirationDetails {
        let sharedLinkSettingsAddExpirationDetails = mapDBXTeamLogSharedLinkSettingsAddExpirationDetailsToDB(
            object: object
                .sharedLinkSettingsAddExpirationDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsAddExpirationDetails: sharedLinkSettingsAddExpirationDetails)
    }
    if let object = object.asSharedLinkSettingsAddPasswordDetails {
        let sharedLinkSettingsAddPasswordDetails = mapDBXTeamLogSharedLinkSettingsAddPasswordDetailsToDB(object: object.sharedLinkSettingsAddPasswordDetails)
        return DBTEAMLOGEventDetails(sharedLinkSettingsAddPasswordDetails: sharedLinkSettingsAddPasswordDetails)
    }
    if let object = object.asSharedLinkSettingsAllowDownloadDisabledDetails {
        let sharedLinkSettingsAllowDownloadDisabledDetails = mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetailsToDB(
            object: object
                .sharedLinkSettingsAllowDownloadDisabledDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsAllowDownloadDisabledDetails: sharedLinkSettingsAllowDownloadDisabledDetails)
    }
    if let object = object.asSharedLinkSettingsAllowDownloadEnabledDetails {
        let sharedLinkSettingsAllowDownloadEnabledDetails = mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetailsToDB(
            object: object
                .sharedLinkSettingsAllowDownloadEnabledDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsAllowDownloadEnabledDetails: sharedLinkSettingsAllowDownloadEnabledDetails)
    }
    if let object = object.asSharedLinkSettingsChangeAudienceDetails {
        let sharedLinkSettingsChangeAudienceDetails = mapDBXTeamLogSharedLinkSettingsChangeAudienceDetailsToDB(
            object: object
                .sharedLinkSettingsChangeAudienceDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsChangeAudienceDetails: sharedLinkSettingsChangeAudienceDetails)
    }
    if let object = object.asSharedLinkSettingsChangeExpirationDetails {
        let sharedLinkSettingsChangeExpirationDetails = mapDBXTeamLogSharedLinkSettingsChangeExpirationDetailsToDB(
            object: object
                .sharedLinkSettingsChangeExpirationDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsChangeExpirationDetails: sharedLinkSettingsChangeExpirationDetails)
    }
    if let object = object.asSharedLinkSettingsChangePasswordDetails {
        let sharedLinkSettingsChangePasswordDetails = mapDBXTeamLogSharedLinkSettingsChangePasswordDetailsToDB(
            object: object
                .sharedLinkSettingsChangePasswordDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsChangePasswordDetails: sharedLinkSettingsChangePasswordDetails)
    }
    if let object = object.asSharedLinkSettingsRemoveExpirationDetails {
        let sharedLinkSettingsRemoveExpirationDetails = mapDBXTeamLogSharedLinkSettingsRemoveExpirationDetailsToDB(
            object: object
                .sharedLinkSettingsRemoveExpirationDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsRemoveExpirationDetails: sharedLinkSettingsRemoveExpirationDetails)
    }
    if let object = object.asSharedLinkSettingsRemovePasswordDetails {
        let sharedLinkSettingsRemovePasswordDetails = mapDBXTeamLogSharedLinkSettingsRemovePasswordDetailsToDB(
            object: object
                .sharedLinkSettingsRemovePasswordDetails
        )
        return DBTEAMLOGEventDetails(sharedLinkSettingsRemovePasswordDetails: sharedLinkSettingsRemovePasswordDetails)
    }
    if let object = object.asSharedLinkShareDetails {
        let sharedLinkShareDetails = mapDBXTeamLogSharedLinkShareDetailsToDB(object: object.sharedLinkShareDetails)
        return DBTEAMLOGEventDetails(sharedLinkShareDetails: sharedLinkShareDetails)
    }
    if let object = object.asSharedLinkViewDetails {
        let sharedLinkViewDetails = mapDBXTeamLogSharedLinkViewDetailsToDB(object: object.sharedLinkViewDetails)
        return DBTEAMLOGEventDetails(sharedLinkViewDetails: sharedLinkViewDetails)
    }
    if let object = object.asSharedNoteOpenedDetails {
        let sharedNoteOpenedDetails = mapDBXTeamLogSharedNoteOpenedDetailsToDB(object: object.sharedNoteOpenedDetails)
        return DBTEAMLOGEventDetails(sharedNoteOpenedDetails: sharedNoteOpenedDetails)
    }
    if let object = object.asShmodelDisableDownloadsDetails {
        let shmodelDisableDownloadsDetails = mapDBXTeamLogShmodelDisableDownloadsDetailsToDB(object: object.shmodelDisableDownloadsDetails)
        return DBTEAMLOGEventDetails(shmodelDisableDownloadsDetails: shmodelDisableDownloadsDetails)
    }
    if let object = object.asShmodelEnableDownloadsDetails {
        let shmodelEnableDownloadsDetails = mapDBXTeamLogShmodelEnableDownloadsDetailsToDB(object: object.shmodelEnableDownloadsDetails)
        return DBTEAMLOGEventDetails(shmodelEnableDownloadsDetails: shmodelEnableDownloadsDetails)
    }
    if let object = object.asShmodelGroupShareDetails {
        let shmodelGroupShareDetails = mapDBXTeamLogShmodelGroupShareDetailsToDB(object: object.shmodelGroupShareDetails)
        return DBTEAMLOGEventDetails(shmodelGroupShareDetails: shmodelGroupShareDetails)
    }
    if let object = object.asShowcaseAccessGrantedDetails {
        let showcaseAccessGrantedDetails = mapDBXTeamLogShowcaseAccessGrantedDetailsToDB(object: object.showcaseAccessGrantedDetails)
        return DBTEAMLOGEventDetails(showcaseAccessGrantedDetails: showcaseAccessGrantedDetails)
    }
    if let object = object.asShowcaseAddMemberDetails {
        let showcaseAddMemberDetails = mapDBXTeamLogShowcaseAddMemberDetailsToDB(object: object.showcaseAddMemberDetails)
        return DBTEAMLOGEventDetails(showcaseAddMemberDetails: showcaseAddMemberDetails)
    }
    if let object = object.asShowcaseArchivedDetails {
        let showcaseArchivedDetails = mapDBXTeamLogShowcaseArchivedDetailsToDB(object: object.showcaseArchivedDetails)
        return DBTEAMLOGEventDetails(showcaseArchivedDetails: showcaseArchivedDetails)
    }
    if let object = object.asShowcaseCreatedDetails {
        let showcaseCreatedDetails = mapDBXTeamLogShowcaseCreatedDetailsToDB(object: object.showcaseCreatedDetails)
        return DBTEAMLOGEventDetails(showcaseCreatedDetails: showcaseCreatedDetails)
    }
    if let object = object.asShowcaseDeleteCommentDetails {
        let showcaseDeleteCommentDetails = mapDBXTeamLogShowcaseDeleteCommentDetailsToDB(object: object.showcaseDeleteCommentDetails)
        return DBTEAMLOGEventDetails(showcaseDeleteCommentDetails: showcaseDeleteCommentDetails)
    }
    if let object = object.asShowcaseEditedDetails {
        let showcaseEditedDetails = mapDBXTeamLogShowcaseEditedDetailsToDB(object: object.showcaseEditedDetails)
        return DBTEAMLOGEventDetails(showcaseEditedDetails: showcaseEditedDetails)
    }
    if let object = object.asShowcaseEditCommentDetails {
        let showcaseEditCommentDetails = mapDBXTeamLogShowcaseEditCommentDetailsToDB(object: object.showcaseEditCommentDetails)
        return DBTEAMLOGEventDetails(showcaseEditCommentDetails: showcaseEditCommentDetails)
    }
    if let object = object.asShowcaseFileAddedDetails {
        let showcaseFileAddedDetails = mapDBXTeamLogShowcaseFileAddedDetailsToDB(object: object.showcaseFileAddedDetails)
        return DBTEAMLOGEventDetails(showcaseFileAddedDetails: showcaseFileAddedDetails)
    }
    if let object = object.asShowcaseFileDownloadDetails {
        let showcaseFileDownloadDetails = mapDBXTeamLogShowcaseFileDownloadDetailsToDB(object: object.showcaseFileDownloadDetails)
        return DBTEAMLOGEventDetails(showcaseFileDownloadDetails: showcaseFileDownloadDetails)
    }
    if let object = object.asShowcaseFileRemovedDetails {
        let showcaseFileRemovedDetails = mapDBXTeamLogShowcaseFileRemovedDetailsToDB(object: object.showcaseFileRemovedDetails)
        return DBTEAMLOGEventDetails(showcaseFileRemovedDetails: showcaseFileRemovedDetails)
    }
    if let object = object.asShowcaseFileViewDetails {
        let showcaseFileViewDetails = mapDBXTeamLogShowcaseFileViewDetailsToDB(object: object.showcaseFileViewDetails)
        return DBTEAMLOGEventDetails(showcaseFileViewDetails: showcaseFileViewDetails)
    }
    if let object = object.asShowcasePermanentlyDeletedDetails {
        let showcasePermanentlyDeletedDetails = mapDBXTeamLogShowcasePermanentlyDeletedDetailsToDB(object: object.showcasePermanentlyDeletedDetails)
        return DBTEAMLOGEventDetails(showcasePermanentlyDeletedDetails: showcasePermanentlyDeletedDetails)
    }
    if let object = object.asShowcasePostCommentDetails {
        let showcasePostCommentDetails = mapDBXTeamLogShowcasePostCommentDetailsToDB(object: object.showcasePostCommentDetails)
        return DBTEAMLOGEventDetails(showcasePostCommentDetails: showcasePostCommentDetails)
    }
    if let object = object.asShowcaseRemoveMemberDetails {
        let showcaseRemoveMemberDetails = mapDBXTeamLogShowcaseRemoveMemberDetailsToDB(object: object.showcaseRemoveMemberDetails)
        return DBTEAMLOGEventDetails(showcaseRemoveMemberDetails: showcaseRemoveMemberDetails)
    }
    if let object = object.asShowcaseRenamedDetails {
        let showcaseRenamedDetails = mapDBXTeamLogShowcaseRenamedDetailsToDB(object: object.showcaseRenamedDetails)
        return DBTEAMLOGEventDetails(showcaseRenamedDetails: showcaseRenamedDetails)
    }
    if let object = object.asShowcaseRequestAccessDetails {
        let showcaseRequestAccessDetails = mapDBXTeamLogShowcaseRequestAccessDetailsToDB(object: object.showcaseRequestAccessDetails)
        return DBTEAMLOGEventDetails(showcaseRequestAccessDetails: showcaseRequestAccessDetails)
    }
    if let object = object.asShowcaseResolveCommentDetails {
        let showcaseResolveCommentDetails = mapDBXTeamLogShowcaseResolveCommentDetailsToDB(object: object.showcaseResolveCommentDetails)
        return DBTEAMLOGEventDetails(showcaseResolveCommentDetails: showcaseResolveCommentDetails)
    }
    if let object = object.asShowcaseRestoredDetails {
        let showcaseRestoredDetails = mapDBXTeamLogShowcaseRestoredDetailsToDB(object: object.showcaseRestoredDetails)
        return DBTEAMLOGEventDetails(showcaseRestoredDetails: showcaseRestoredDetails)
    }
    if let object = object.asShowcaseTrashedDetails {
        let showcaseTrashedDetails = mapDBXTeamLogShowcaseTrashedDetailsToDB(object: object.showcaseTrashedDetails)
        return DBTEAMLOGEventDetails(showcaseTrashedDetails: showcaseTrashedDetails)
    }
    if let object = object.asShowcaseTrashedDeprecatedDetails {
        let showcaseTrashedDeprecatedDetails = mapDBXTeamLogShowcaseTrashedDeprecatedDetailsToDB(object: object.showcaseTrashedDeprecatedDetails)
        return DBTEAMLOGEventDetails(showcaseTrashedDeprecatedDetails: showcaseTrashedDeprecatedDetails)
    }
    if let object = object.asShowcaseUnresolveCommentDetails {
        let showcaseUnresolveCommentDetails = mapDBXTeamLogShowcaseUnresolveCommentDetailsToDB(object: object.showcaseUnresolveCommentDetails)
        return DBTEAMLOGEventDetails(showcaseUnresolveCommentDetails: showcaseUnresolveCommentDetails)
    }
    if let object = object.asShowcaseUntrashedDetails {
        let showcaseUntrashedDetails = mapDBXTeamLogShowcaseUntrashedDetailsToDB(object: object.showcaseUntrashedDetails)
        return DBTEAMLOGEventDetails(showcaseUntrashedDetails: showcaseUntrashedDetails)
    }
    if let object = object.asShowcaseUntrashedDeprecatedDetails {
        let showcaseUntrashedDeprecatedDetails = mapDBXTeamLogShowcaseUntrashedDeprecatedDetailsToDB(object: object.showcaseUntrashedDeprecatedDetails)
        return DBTEAMLOGEventDetails(showcaseUntrashedDeprecatedDetails: showcaseUntrashedDeprecatedDetails)
    }
    if let object = object.asShowcaseViewDetails {
        let showcaseViewDetails = mapDBXTeamLogShowcaseViewDetailsToDB(object: object.showcaseViewDetails)
        return DBTEAMLOGEventDetails(showcaseViewDetails: showcaseViewDetails)
    }
    if let object = object.asSsoAddCertDetails {
        let ssoAddCertDetails = mapDBXTeamLogSsoAddCertDetailsToDB(object: object.ssoAddCertDetails)
        return DBTEAMLOGEventDetails(ssoAddCertDetails: ssoAddCertDetails)
    }
    if let object = object.asSsoAddLoginUrlDetails {
        let ssoAddLoginUrlDetails = mapDBXTeamLogSsoAddLoginUrlDetailsToDB(object: object.ssoAddLoginUrlDetails)
        return DBTEAMLOGEventDetails(ssoAddLoginUrlDetails: ssoAddLoginUrlDetails)
    }
    if let object = object.asSsoAddLogoutUrlDetails {
        let ssoAddLogoutUrlDetails = mapDBXTeamLogSsoAddLogoutUrlDetailsToDB(object: object.ssoAddLogoutUrlDetails)
        return DBTEAMLOGEventDetails(ssoAddLogoutUrlDetails: ssoAddLogoutUrlDetails)
    }
    if let object = object.asSsoChangeCertDetails {
        let ssoChangeCertDetails = mapDBXTeamLogSsoChangeCertDetailsToDB(object: object.ssoChangeCertDetails)
        return DBTEAMLOGEventDetails(ssoChangeCertDetails: ssoChangeCertDetails)
    }
    if let object = object.asSsoChangeLoginUrlDetails {
        let ssoChangeLoginUrlDetails = mapDBXTeamLogSsoChangeLoginUrlDetailsToDB(object: object.ssoChangeLoginUrlDetails)
        return DBTEAMLOGEventDetails(ssoChangeLoginUrlDetails: ssoChangeLoginUrlDetails)
    }
    if let object = object.asSsoChangeLogoutUrlDetails {
        let ssoChangeLogoutUrlDetails = mapDBXTeamLogSsoChangeLogoutUrlDetailsToDB(object: object.ssoChangeLogoutUrlDetails)
        return DBTEAMLOGEventDetails(ssoChangeLogoutUrlDetails: ssoChangeLogoutUrlDetails)
    }
    if let object = object.asSsoChangeSamlIdentityModeDetails {
        let ssoChangeSamlIdentityModeDetails = mapDBXTeamLogSsoChangeSamlIdentityModeDetailsToDB(object: object.ssoChangeSamlIdentityModeDetails)
        return DBTEAMLOGEventDetails(ssoChangeSamlIdentityModeDetails: ssoChangeSamlIdentityModeDetails)
    }
    if let object = object.asSsoRemoveCertDetails {
        let ssoRemoveCertDetails = mapDBXTeamLogSsoRemoveCertDetailsToDB(object: object.ssoRemoveCertDetails)
        return DBTEAMLOGEventDetails(ssoRemoveCertDetails: ssoRemoveCertDetails)
    }
    if let object = object.asSsoRemoveLoginUrlDetails {
        let ssoRemoveLoginUrlDetails = mapDBXTeamLogSsoRemoveLoginUrlDetailsToDB(object: object.ssoRemoveLoginUrlDetails)
        return DBTEAMLOGEventDetails(ssoRemoveLoginUrlDetails: ssoRemoveLoginUrlDetails)
    }
    if let object = object.asSsoRemoveLogoutUrlDetails {
        let ssoRemoveLogoutUrlDetails = mapDBXTeamLogSsoRemoveLogoutUrlDetailsToDB(object: object.ssoRemoveLogoutUrlDetails)
        return DBTEAMLOGEventDetails(ssoRemoveLogoutUrlDetails: ssoRemoveLogoutUrlDetails)
    }
    if let object = object.asTeamFolderChangeStatusDetails {
        let teamFolderChangeStatusDetails = mapDBXTeamLogTeamFolderChangeStatusDetailsToDB(object: object.teamFolderChangeStatusDetails)
        return DBTEAMLOGEventDetails(teamFolderChangeStatusDetails: teamFolderChangeStatusDetails)
    }
    if let object = object.asTeamFolderCreateDetails {
        let teamFolderCreateDetails = mapDBXTeamLogTeamFolderCreateDetailsToDB(object: object.teamFolderCreateDetails)
        return DBTEAMLOGEventDetails(teamFolderCreateDetails: teamFolderCreateDetails)
    }
    if let object = object.asTeamFolderDowngradeDetails {
        let teamFolderDowngradeDetails = mapDBXTeamLogTeamFolderDowngradeDetailsToDB(object: object.teamFolderDowngradeDetails)
        return DBTEAMLOGEventDetails(teamFolderDowngradeDetails: teamFolderDowngradeDetails)
    }
    if let object = object.asTeamFolderPermanentlyDeleteDetails {
        let teamFolderPermanentlyDeleteDetails = mapDBXTeamLogTeamFolderPermanentlyDeleteDetailsToDB(object: object.teamFolderPermanentlyDeleteDetails)
        return DBTEAMLOGEventDetails(teamFolderPermanentlyDeleteDetails: teamFolderPermanentlyDeleteDetails)
    }
    if let object = object.asTeamFolderRenameDetails {
        let teamFolderRenameDetails = mapDBXTeamLogTeamFolderRenameDetailsToDB(object: object.teamFolderRenameDetails)
        return DBTEAMLOGEventDetails(teamFolderRenameDetails: teamFolderRenameDetails)
    }
    if let object = object.asTeamSelectiveSyncSettingsChangedDetails {
        let teamSelectiveSyncSettingsChangedDetails = mapDBXTeamLogTeamSelectiveSyncSettingsChangedDetailsToDB(
            object: object
                .teamSelectiveSyncSettingsChangedDetails
        )
        return DBTEAMLOGEventDetails(teamSelectiveSyncSettingsChangedDetails: teamSelectiveSyncSettingsChangedDetails)
    }
    if let object = object.asAccountCaptureChangePolicyDetails {
        let accountCaptureChangePolicyDetails = mapDBXTeamLogAccountCaptureChangePolicyDetailsToDB(object: object.accountCaptureChangePolicyDetails)
        return DBTEAMLOGEventDetails(accountCaptureChangePolicyDetails: accountCaptureChangePolicyDetails)
    }
    if let object = object.asAdminEmailRemindersChangedDetails {
        let adminEmailRemindersChangedDetails = mapDBXTeamLogAdminEmailRemindersChangedDetailsToDB(object: object.adminEmailRemindersChangedDetails)
        return DBTEAMLOGEventDetails(adminEmailRemindersChangedDetails: adminEmailRemindersChangedDetails)
    }
    if let object = object.asAllowDownloadDisabledDetails {
        let allowDownloadDisabledDetails = mapDBXTeamLogAllowDownloadDisabledDetailsToDB(object: object.allowDownloadDisabledDetails)
        return DBTEAMLOGEventDetails(allowDownloadDisabledDetails: allowDownloadDisabledDetails)
    }
    if let object = object.asAllowDownloadEnabledDetails {
        let allowDownloadEnabledDetails = mapDBXTeamLogAllowDownloadEnabledDetailsToDB(object: object.allowDownloadEnabledDetails)
        return DBTEAMLOGEventDetails(allowDownloadEnabledDetails: allowDownloadEnabledDetails)
    }
    if let object = object.asAppPermissionsChangedDetails {
        let appPermissionsChangedDetails = mapDBXTeamLogAppPermissionsChangedDetailsToDB(object: object.appPermissionsChangedDetails)
        return DBTEAMLOGEventDetails(appPermissionsChangedDetails: appPermissionsChangedDetails)
    }
    if let object = object.asCameraUploadsPolicyChangedDetails {
        let cameraUploadsPolicyChangedDetails = mapDBXTeamLogCameraUploadsPolicyChangedDetailsToDB(object: object.cameraUploadsPolicyChangedDetails)
        return DBTEAMLOGEventDetails(cameraUploadsPolicyChangedDetails: cameraUploadsPolicyChangedDetails)
    }
    if let object = object.asCaptureTranscriptPolicyChangedDetails {
        let captureTranscriptPolicyChangedDetails = mapDBXTeamLogCaptureTranscriptPolicyChangedDetailsToDB(object: object.captureTranscriptPolicyChangedDetails)
        return DBTEAMLOGEventDetails(captureTranscriptPolicyChangedDetails: captureTranscriptPolicyChangedDetails)
    }
    if let object = object.asClassificationChangePolicyDetails {
        let classificationChangePolicyDetails = mapDBXTeamLogClassificationChangePolicyDetailsToDB(object: object.classificationChangePolicyDetails)
        return DBTEAMLOGEventDetails(classificationChangePolicyDetails: classificationChangePolicyDetails)
    }
    if let object = object.asComputerBackupPolicyChangedDetails {
        let computerBackupPolicyChangedDetails = mapDBXTeamLogComputerBackupPolicyChangedDetailsToDB(object: object.computerBackupPolicyChangedDetails)
        return DBTEAMLOGEventDetails(computerBackupPolicyChangedDetails: computerBackupPolicyChangedDetails)
    }
    if let object = object.asContentAdministrationPolicyChangedDetails {
        let contentAdministrationPolicyChangedDetails = mapDBXTeamLogContentAdministrationPolicyChangedDetailsToDB(
            object: object
                .contentAdministrationPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(contentAdministrationPolicyChangedDetails: contentAdministrationPolicyChangedDetails)
    }
    if let object = object.asDataPlacementRestrictionChangePolicyDetails {
        let dataPlacementRestrictionChangePolicyDetails = mapDBXTeamLogDataPlacementRestrictionChangePolicyDetailsToDB(
            object: object
                .dataPlacementRestrictionChangePolicyDetails
        )
        return DBTEAMLOGEventDetails(dataPlacementRestrictionChangePolicyDetails: dataPlacementRestrictionChangePolicyDetails)
    }
    if let object = object.asDataPlacementRestrictionSatisfyPolicyDetails {
        let dataPlacementRestrictionSatisfyPolicyDetails = mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyDetailsToDB(
            object: object
                .dataPlacementRestrictionSatisfyPolicyDetails
        )
        return DBTEAMLOGEventDetails(dataPlacementRestrictionSatisfyPolicyDetails: dataPlacementRestrictionSatisfyPolicyDetails)
    }
    if let object = object.asDeviceApprovalsAddExceptionDetails {
        let deviceApprovalsAddExceptionDetails = mapDBXTeamLogDeviceApprovalsAddExceptionDetailsToDB(object: object.deviceApprovalsAddExceptionDetails)
        return DBTEAMLOGEventDetails(deviceApprovalsAddExceptionDetails: deviceApprovalsAddExceptionDetails)
    }
    if let object = object.asDeviceApprovalsChangeDesktopPolicyDetails {
        let deviceApprovalsChangeDesktopPolicyDetails = mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyDetailsToDB(
            object: object
                .deviceApprovalsChangeDesktopPolicyDetails
        )
        return DBTEAMLOGEventDetails(deviceApprovalsChangeDesktopPolicyDetails: deviceApprovalsChangeDesktopPolicyDetails)
    }
    if let object = object.asDeviceApprovalsChangeMobilePolicyDetails {
        let deviceApprovalsChangeMobilePolicyDetails = mapDBXTeamLogDeviceApprovalsChangeMobilePolicyDetailsToDB(
            object: object
                .deviceApprovalsChangeMobilePolicyDetails
        )
        return DBTEAMLOGEventDetails(deviceApprovalsChangeMobilePolicyDetails: deviceApprovalsChangeMobilePolicyDetails)
    }
    if let object = object.asDeviceApprovalsChangeOverageActionDetails {
        let deviceApprovalsChangeOverageActionDetails = mapDBXTeamLogDeviceApprovalsChangeOverageActionDetailsToDB(
            object: object
                .deviceApprovalsChangeOverageActionDetails
        )
        return DBTEAMLOGEventDetails(deviceApprovalsChangeOverageActionDetails: deviceApprovalsChangeOverageActionDetails)
    }
    if let object = object.asDeviceApprovalsChangeUnlinkActionDetails {
        let deviceApprovalsChangeUnlinkActionDetails = mapDBXTeamLogDeviceApprovalsChangeUnlinkActionDetailsToDB(
            object: object
                .deviceApprovalsChangeUnlinkActionDetails
        )
        return DBTEAMLOGEventDetails(deviceApprovalsChangeUnlinkActionDetails: deviceApprovalsChangeUnlinkActionDetails)
    }
    if let object = object.asDeviceApprovalsRemoveExceptionDetails {
        let deviceApprovalsRemoveExceptionDetails = mapDBXTeamLogDeviceApprovalsRemoveExceptionDetailsToDB(object: object.deviceApprovalsRemoveExceptionDetails)
        return DBTEAMLOGEventDetails(deviceApprovalsRemoveExceptionDetails: deviceApprovalsRemoveExceptionDetails)
    }
    if let object = object.asDirectoryRestrictionsAddMembersDetails {
        let directoryRestrictionsAddMembersDetails = mapDBXTeamLogDirectoryRestrictionsAddMembersDetailsToDB(
            object: object
                .directoryRestrictionsAddMembersDetails
        )
        return DBTEAMLOGEventDetails(directoryRestrictionsAddMembersDetails: directoryRestrictionsAddMembersDetails)
    }
    if let object = object.asDirectoryRestrictionsRemoveMembersDetails {
        let directoryRestrictionsRemoveMembersDetails = mapDBXTeamLogDirectoryRestrictionsRemoveMembersDetailsToDB(
            object: object
                .directoryRestrictionsRemoveMembersDetails
        )
        return DBTEAMLOGEventDetails(directoryRestrictionsRemoveMembersDetails: directoryRestrictionsRemoveMembersDetails)
    }
    if let object = object.asDropboxPasswordsPolicyChangedDetails {
        let dropboxPasswordsPolicyChangedDetails = mapDBXTeamLogDropboxPasswordsPolicyChangedDetailsToDB(object: object.dropboxPasswordsPolicyChangedDetails)
        return DBTEAMLOGEventDetails(dropboxPasswordsPolicyChangedDetails: dropboxPasswordsPolicyChangedDetails)
    }
    if let object = object.asEmailIngestPolicyChangedDetails {
        let emailIngestPolicyChangedDetails = mapDBXTeamLogEmailIngestPolicyChangedDetailsToDB(object: object.emailIngestPolicyChangedDetails)
        return DBTEAMLOGEventDetails(emailIngestPolicyChangedDetails: emailIngestPolicyChangedDetails)
    }
    if let object = object.asEmmAddExceptionDetails {
        let emmAddExceptionDetails = mapDBXTeamLogEmmAddExceptionDetailsToDB(object: object.emmAddExceptionDetails)
        return DBTEAMLOGEventDetails(emmAddExceptionDetails: emmAddExceptionDetails)
    }
    if let object = object.asEmmChangePolicyDetails {
        let emmChangePolicyDetails = mapDBXTeamLogEmmChangePolicyDetailsToDB(object: object.emmChangePolicyDetails)
        return DBTEAMLOGEventDetails(emmChangePolicyDetails: emmChangePolicyDetails)
    }
    if let object = object.asEmmRemoveExceptionDetails {
        let emmRemoveExceptionDetails = mapDBXTeamLogEmmRemoveExceptionDetailsToDB(object: object.emmRemoveExceptionDetails)
        return DBTEAMLOGEventDetails(emmRemoveExceptionDetails: emmRemoveExceptionDetails)
    }
    if let object = object.asExtendedVersionHistoryChangePolicyDetails {
        let extendedVersionHistoryChangePolicyDetails = mapDBXTeamLogExtendedVersionHistoryChangePolicyDetailsToDB(
            object: object
                .extendedVersionHistoryChangePolicyDetails
        )
        return DBTEAMLOGEventDetails(extendedVersionHistoryChangePolicyDetails: extendedVersionHistoryChangePolicyDetails)
    }
    if let object = object.asExternalDriveBackupPolicyChangedDetails {
        let externalDriveBackupPolicyChangedDetails = mapDBXTeamLogExternalDriveBackupPolicyChangedDetailsToDB(
            object: object
                .externalDriveBackupPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(externalDriveBackupPolicyChangedDetails: externalDriveBackupPolicyChangedDetails)
    }
    if let object = object.asFileCommentsChangePolicyDetails {
        let fileCommentsChangePolicyDetails = mapDBXTeamLogFileCommentsChangePolicyDetailsToDB(object: object.fileCommentsChangePolicyDetails)
        return DBTEAMLOGEventDetails(fileCommentsChangePolicyDetails: fileCommentsChangePolicyDetails)
    }
    if let object = object.asFileLockingPolicyChangedDetails {
        let fileLockingPolicyChangedDetails = mapDBXTeamLogFileLockingPolicyChangedDetailsToDB(object: object.fileLockingPolicyChangedDetails)
        return DBTEAMLOGEventDetails(fileLockingPolicyChangedDetails: fileLockingPolicyChangedDetails)
    }
    if let object = object.asFileProviderMigrationPolicyChangedDetails {
        let fileProviderMigrationPolicyChangedDetails = mapDBXTeamLogFileProviderMigrationPolicyChangedDetailsToDB(
            object: object
                .fileProviderMigrationPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(fileProviderMigrationPolicyChangedDetails: fileProviderMigrationPolicyChangedDetails)
    }
    if let object = object.asFileRequestsChangePolicyDetails {
        let fileRequestsChangePolicyDetails = mapDBXTeamLogFileRequestsChangePolicyDetailsToDB(object: object.fileRequestsChangePolicyDetails)
        return DBTEAMLOGEventDetails(fileRequestsChangePolicyDetails: fileRequestsChangePolicyDetails)
    }
    if let object = object.asFileRequestsEmailsEnabledDetails {
        let fileRequestsEmailsEnabledDetails = mapDBXTeamLogFileRequestsEmailsEnabledDetailsToDB(object: object.fileRequestsEmailsEnabledDetails)
        return DBTEAMLOGEventDetails(fileRequestsEmailsEnabledDetails: fileRequestsEmailsEnabledDetails)
    }
    if let object = object.asFileRequestsEmailsRestrictedToTeamOnlyDetails {
        let fileRequestsEmailsRestrictedToTeamOnlyDetails = mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetailsToDB(
            object: object
                .fileRequestsEmailsRestrictedToTeamOnlyDetails
        )
        return DBTEAMLOGEventDetails(fileRequestsEmailsRestrictedToTeamOnlyDetails: fileRequestsEmailsRestrictedToTeamOnlyDetails)
    }
    if let object = object.asFileTransfersPolicyChangedDetails {
        let fileTransfersPolicyChangedDetails = mapDBXTeamLogFileTransfersPolicyChangedDetailsToDB(object: object.fileTransfersPolicyChangedDetails)
        return DBTEAMLOGEventDetails(fileTransfersPolicyChangedDetails: fileTransfersPolicyChangedDetails)
    }
    if let object = object.asFolderLinkRestrictionPolicyChangedDetails {
        let folderLinkRestrictionPolicyChangedDetails = mapDBXTeamLogFolderLinkRestrictionPolicyChangedDetailsToDB(
            object: object
                .folderLinkRestrictionPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(folderLinkRestrictionPolicyChangedDetails: folderLinkRestrictionPolicyChangedDetails)
    }
    if let object = object.asGoogleSsoChangePolicyDetails {
        let googleSsoChangePolicyDetails = mapDBXTeamLogGoogleSsoChangePolicyDetailsToDB(object: object.googleSsoChangePolicyDetails)
        return DBTEAMLOGEventDetails(googleSsoChangePolicyDetails: googleSsoChangePolicyDetails)
    }
    if let object = object.asGroupUserManagementChangePolicyDetails {
        let groupUserManagementChangePolicyDetails = mapDBXTeamLogGroupUserManagementChangePolicyDetailsToDB(
            object: object
                .groupUserManagementChangePolicyDetails
        )
        return DBTEAMLOGEventDetails(groupUserManagementChangePolicyDetails: groupUserManagementChangePolicyDetails)
    }
    if let object = object.asIntegrationPolicyChangedDetails {
        let integrationPolicyChangedDetails = mapDBXTeamLogIntegrationPolicyChangedDetailsToDB(object: object.integrationPolicyChangedDetails)
        return DBTEAMLOGEventDetails(integrationPolicyChangedDetails: integrationPolicyChangedDetails)
    }
    if let object = object.asInviteAcceptanceEmailPolicyChangedDetails {
        let inviteAcceptanceEmailPolicyChangedDetails = mapDBXTeamLogInviteAcceptanceEmailPolicyChangedDetailsToDB(
            object: object
                .inviteAcceptanceEmailPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(inviteAcceptanceEmailPolicyChangedDetails: inviteAcceptanceEmailPolicyChangedDetails)
    }
    if let object = object.asMemberRequestsChangePolicyDetails {
        let memberRequestsChangePolicyDetails = mapDBXTeamLogMemberRequestsChangePolicyDetailsToDB(object: object.memberRequestsChangePolicyDetails)
        return DBTEAMLOGEventDetails(memberRequestsChangePolicyDetails: memberRequestsChangePolicyDetails)
    }
    if let object = object.asMemberSendInvitePolicyChangedDetails {
        let memberSendInvitePolicyChangedDetails = mapDBXTeamLogMemberSendInvitePolicyChangedDetailsToDB(object: object.memberSendInvitePolicyChangedDetails)
        return DBTEAMLOGEventDetails(memberSendInvitePolicyChangedDetails: memberSendInvitePolicyChangedDetails)
    }
    if let object = object.asMemberSpaceLimitsAddExceptionDetails {
        let memberSpaceLimitsAddExceptionDetails = mapDBXTeamLogMemberSpaceLimitsAddExceptionDetailsToDB(object: object.memberSpaceLimitsAddExceptionDetails)
        return DBTEAMLOGEventDetails(memberSpaceLimitsAddExceptionDetails: memberSpaceLimitsAddExceptionDetails)
    }
    if let object = object.asMemberSpaceLimitsChangeCapsTypePolicyDetails {
        let memberSpaceLimitsChangeCapsTypePolicyDetails = mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetailsToDB(
            object: object
                .memberSpaceLimitsChangeCapsTypePolicyDetails
        )
        return DBTEAMLOGEventDetails(memberSpaceLimitsChangeCapsTypePolicyDetails: memberSpaceLimitsChangeCapsTypePolicyDetails)
    }
    if let object = object.asMemberSpaceLimitsChangePolicyDetails {
        let memberSpaceLimitsChangePolicyDetails = mapDBXTeamLogMemberSpaceLimitsChangePolicyDetailsToDB(object: object.memberSpaceLimitsChangePolicyDetails)
        return DBTEAMLOGEventDetails(memberSpaceLimitsChangePolicyDetails: memberSpaceLimitsChangePolicyDetails)
    }
    if let object = object.asMemberSpaceLimitsRemoveExceptionDetails {
        let memberSpaceLimitsRemoveExceptionDetails = mapDBXTeamLogMemberSpaceLimitsRemoveExceptionDetailsToDB(
            object: object
                .memberSpaceLimitsRemoveExceptionDetails
        )
        return DBTEAMLOGEventDetails(memberSpaceLimitsRemoveExceptionDetails: memberSpaceLimitsRemoveExceptionDetails)
    }
    if let object = object.asMemberSuggestionsChangePolicyDetails {
        let memberSuggestionsChangePolicyDetails = mapDBXTeamLogMemberSuggestionsChangePolicyDetailsToDB(object: object.memberSuggestionsChangePolicyDetails)
        return DBTEAMLOGEventDetails(memberSuggestionsChangePolicyDetails: memberSuggestionsChangePolicyDetails)
    }
    if let object = object.asMicrosoftOfficeAddinChangePolicyDetails {
        let microsoftOfficeAddinChangePolicyDetails = mapDBXTeamLogMicrosoftOfficeAddinChangePolicyDetailsToDB(
            object: object
                .microsoftOfficeAddinChangePolicyDetails
        )
        return DBTEAMLOGEventDetails(microsoftOfficeAddinChangePolicyDetails: microsoftOfficeAddinChangePolicyDetails)
    }
    if let object = object.asNetworkControlChangePolicyDetails {
        let networkControlChangePolicyDetails = mapDBXTeamLogNetworkControlChangePolicyDetailsToDB(object: object.networkControlChangePolicyDetails)
        return DBTEAMLOGEventDetails(networkControlChangePolicyDetails: networkControlChangePolicyDetails)
    }
    if let object = object.asPaperChangeDeploymentPolicyDetails {
        let paperChangeDeploymentPolicyDetails = mapDBXTeamLogPaperChangeDeploymentPolicyDetailsToDB(object: object.paperChangeDeploymentPolicyDetails)
        return DBTEAMLOGEventDetails(paperChangeDeploymentPolicyDetails: paperChangeDeploymentPolicyDetails)
    }
    if let object = object.asPaperChangeMemberLinkPolicyDetails {
        let paperChangeMemberLinkPolicyDetails = mapDBXTeamLogPaperChangeMemberLinkPolicyDetailsToDB(object: object.paperChangeMemberLinkPolicyDetails)
        return DBTEAMLOGEventDetails(paperChangeMemberLinkPolicyDetails: paperChangeMemberLinkPolicyDetails)
    }
    if let object = object.asPaperChangeMemberPolicyDetails {
        let paperChangeMemberPolicyDetails = mapDBXTeamLogPaperChangeMemberPolicyDetailsToDB(object: object.paperChangeMemberPolicyDetails)
        return DBTEAMLOGEventDetails(paperChangeMemberPolicyDetails: paperChangeMemberPolicyDetails)
    }
    if let object = object.asPaperChangePolicyDetails {
        let paperChangePolicyDetails = mapDBXTeamLogPaperChangePolicyDetailsToDB(object: object.paperChangePolicyDetails)
        return DBTEAMLOGEventDetails(paperChangePolicyDetails: paperChangePolicyDetails)
    }
    if let object = object.asPaperDefaultFolderPolicyChangedDetails {
        let paperDefaultFolderPolicyChangedDetails = mapDBXTeamLogPaperDefaultFolderPolicyChangedDetailsToDB(
            object: object
                .paperDefaultFolderPolicyChangedDetails
        )
        return DBTEAMLOGEventDetails(paperDefaultFolderPolicyChangedDetails: paperDefaultFolderPolicyChangedDetails)
    }
    if let object = object.asPaperDesktopPolicyChangedDetails {
        let paperDesktopPolicyChangedDetails = mapDBXTeamLogPaperDesktopPolicyChangedDetailsToDB(object: object.paperDesktopPolicyChangedDetails)
        return DBTEAMLOGEventDetails(paperDesktopPolicyChangedDetails: paperDesktopPolicyChangedDetails)
    }
    if let object = object.asPaperEnabledUsersGroupAdditionDetails {
        let paperEnabledUsersGroupAdditionDetails = mapDBXTeamLogPaperEnabledUsersGroupAdditionDetailsToDB(object: object.paperEnabledUsersGroupAdditionDetails)
        return DBTEAMLOGEventDetails(paperEnabledUsersGroupAdditionDetails: paperEnabledUsersGroupAdditionDetails)
    }
    if let object = object.asPaperEnabledUsersGroupRemovalDetails {
        let paperEnabledUsersGroupRemovalDetails = mapDBXTeamLogPaperEnabledUsersGroupRemovalDetailsToDB(object: object.paperEnabledUsersGroupRemovalDetails)
        return DBTEAMLOGEventDetails(paperEnabledUsersGroupRemovalDetails: paperEnabledUsersGroupRemovalDetails)
    }
    if let object = object.asPasswordStrengthRequirementsChangePolicyDetails {
        let passwordStrengthRequirementsChangePolicyDetails = mapDBXTeamLogPasswordStrengthRequirementsChangePolicyDetailsToDB(
            object: object
                .passwordStrengthRequirementsChangePolicyDetails
        )
        return DBTEAMLOGEventDetails(passwordStrengthRequirementsChangePolicyDetails: passwordStrengthRequirementsChangePolicyDetails)
    }
    if let object = object.asPermanentDeleteChangePolicyDetails {
        let permanentDeleteChangePolicyDetails = mapDBXTeamLogPermanentDeleteChangePolicyDetailsToDB(object: object.permanentDeleteChangePolicyDetails)
        return DBTEAMLOGEventDetails(permanentDeleteChangePolicyDetails: permanentDeleteChangePolicyDetails)
    }
    if let object = object.asResellerSupportChangePolicyDetails {
        let resellerSupportChangePolicyDetails = mapDBXTeamLogResellerSupportChangePolicyDetailsToDB(object: object.resellerSupportChangePolicyDetails)
        return DBTEAMLOGEventDetails(resellerSupportChangePolicyDetails: resellerSupportChangePolicyDetails)
    }
    if let object = object.asRewindPolicyChangedDetails {
        let rewindPolicyChangedDetails = mapDBXTeamLogRewindPolicyChangedDetailsToDB(object: object.rewindPolicyChangedDetails)
        return DBTEAMLOGEventDetails(rewindPolicyChangedDetails: rewindPolicyChangedDetails)
    }
    if let object = object.asSendForSignaturePolicyChangedDetails {
        let sendForSignaturePolicyChangedDetails = mapDBXTeamLogSendForSignaturePolicyChangedDetailsToDB(object: object.sendForSignaturePolicyChangedDetails)
        return DBTEAMLOGEventDetails(sendForSignaturePolicyChangedDetails: sendForSignaturePolicyChangedDetails)
    }
    if let object = object.asSharingChangeFolderJoinPolicyDetails {
        let sharingChangeFolderJoinPolicyDetails = mapDBXTeamLogSharingChangeFolderJoinPolicyDetailsToDB(object: object.sharingChangeFolderJoinPolicyDetails)
        return DBTEAMLOGEventDetails(sharingChangeFolderJoinPolicyDetails: sharingChangeFolderJoinPolicyDetails)
    }
    if let object = object.asSharingChangeLinkAllowChangeExpirationPolicyDetails {
        let sharingChangeLinkAllowChangeExpirationPolicyDetails = mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetailsToDB(
            object: object
                .sharingChangeLinkAllowChangeExpirationPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharingChangeLinkAllowChangeExpirationPolicyDetails: sharingChangeLinkAllowChangeExpirationPolicyDetails)
    }
    if let object = object.asSharingChangeLinkDefaultExpirationPolicyDetails {
        let sharingChangeLinkDefaultExpirationPolicyDetails = mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetailsToDB(
            object: object
                .sharingChangeLinkDefaultExpirationPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharingChangeLinkDefaultExpirationPolicyDetails: sharingChangeLinkDefaultExpirationPolicyDetails)
    }
    if let object = object.asSharingChangeLinkEnforcePasswordPolicyDetails {
        let sharingChangeLinkEnforcePasswordPolicyDetails = mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetailsToDB(
            object: object
                .sharingChangeLinkEnforcePasswordPolicyDetails
        )
        return DBTEAMLOGEventDetails(sharingChangeLinkEnforcePasswordPolicyDetails: sharingChangeLinkEnforcePasswordPolicyDetails)
    }
    if let object = object.asSharingChangeLinkPolicyDetails {
        let sharingChangeLinkPolicyDetails = mapDBXTeamLogSharingChangeLinkPolicyDetailsToDB(object: object.sharingChangeLinkPolicyDetails)
        return DBTEAMLOGEventDetails(sharingChangeLinkPolicyDetails: sharingChangeLinkPolicyDetails)
    }
    if let object = object.asSharingChangeMemberPolicyDetails {
        let sharingChangeMemberPolicyDetails = mapDBXTeamLogSharingChangeMemberPolicyDetailsToDB(object: object.sharingChangeMemberPolicyDetails)
        return DBTEAMLOGEventDetails(sharingChangeMemberPolicyDetails: sharingChangeMemberPolicyDetails)
    }
    if let object = object.asShowcaseChangeDownloadPolicyDetails {
        let showcaseChangeDownloadPolicyDetails = mapDBXTeamLogShowcaseChangeDownloadPolicyDetailsToDB(object: object.showcaseChangeDownloadPolicyDetails)
        return DBTEAMLOGEventDetails(showcaseChangeDownloadPolicyDetails: showcaseChangeDownloadPolicyDetails)
    }
    if let object = object.asShowcaseChangeEnabledPolicyDetails {
        let showcaseChangeEnabledPolicyDetails = mapDBXTeamLogShowcaseChangeEnabledPolicyDetailsToDB(object: object.showcaseChangeEnabledPolicyDetails)
        return DBTEAMLOGEventDetails(showcaseChangeEnabledPolicyDetails: showcaseChangeEnabledPolicyDetails)
    }
    if let object = object.asShowcaseChangeExternalSharingPolicyDetails {
        let showcaseChangeExternalSharingPolicyDetails = mapDBXTeamLogShowcaseChangeExternalSharingPolicyDetailsToDB(
            object: object
                .showcaseChangeExternalSharingPolicyDetails
        )
        return DBTEAMLOGEventDetails(showcaseChangeExternalSharingPolicyDetails: showcaseChangeExternalSharingPolicyDetails)
    }
    if let object = object.asSmarterSmartSyncPolicyChangedDetails {
        let smarterSmartSyncPolicyChangedDetails = mapDBXTeamLogSmarterSmartSyncPolicyChangedDetailsToDB(object: object.smarterSmartSyncPolicyChangedDetails)
        return DBTEAMLOGEventDetails(smarterSmartSyncPolicyChangedDetails: smarterSmartSyncPolicyChangedDetails)
    }
    if let object = object.asSmartSyncChangePolicyDetails {
        let smartSyncChangePolicyDetails = mapDBXTeamLogSmartSyncChangePolicyDetailsToDB(object: object.smartSyncChangePolicyDetails)
        return DBTEAMLOGEventDetails(smartSyncChangePolicyDetails: smartSyncChangePolicyDetails)
    }
    if let object = object.asSmartSyncNotOptOutDetails {
        let smartSyncNotOptOutDetails = mapDBXTeamLogSmartSyncNotOptOutDetailsToDB(object: object.smartSyncNotOptOutDetails)
        return DBTEAMLOGEventDetails(smartSyncNotOptOutDetails: smartSyncNotOptOutDetails)
    }
    if let object = object.asSmartSyncOptOutDetails {
        let smartSyncOptOutDetails = mapDBXTeamLogSmartSyncOptOutDetailsToDB(object: object.smartSyncOptOutDetails)
        return DBTEAMLOGEventDetails(smartSyncOptOutDetails: smartSyncOptOutDetails)
    }
    if let object = object.asSsoChangePolicyDetails {
        let ssoChangePolicyDetails = mapDBXTeamLogSsoChangePolicyDetailsToDB(object: object.ssoChangePolicyDetails)
        return DBTEAMLOGEventDetails(ssoChangePolicyDetails: ssoChangePolicyDetails)
    }
    if let object = object.asTeamBrandingPolicyChangedDetails {
        let teamBrandingPolicyChangedDetails = mapDBXTeamLogTeamBrandingPolicyChangedDetailsToDB(object: object.teamBrandingPolicyChangedDetails)
        return DBTEAMLOGEventDetails(teamBrandingPolicyChangedDetails: teamBrandingPolicyChangedDetails)
    }
    if let object = object.asTeamExtensionsPolicyChangedDetails {
        let teamExtensionsPolicyChangedDetails = mapDBXTeamLogTeamExtensionsPolicyChangedDetailsToDB(object: object.teamExtensionsPolicyChangedDetails)
        return DBTEAMLOGEventDetails(teamExtensionsPolicyChangedDetails: teamExtensionsPolicyChangedDetails)
    }
    if let object = object.asTeamSelectiveSyncPolicyChangedDetails {
        let teamSelectiveSyncPolicyChangedDetails = mapDBXTeamLogTeamSelectiveSyncPolicyChangedDetailsToDB(object: object.teamSelectiveSyncPolicyChangedDetails)
        return DBTEAMLOGEventDetails(teamSelectiveSyncPolicyChangedDetails: teamSelectiveSyncPolicyChangedDetails)
    }
    if let object = object.asTeamSharingWhitelistSubjectsChangedDetails {
        let teamSharingWhitelistSubjectsChangedDetails = mapDBXTeamLogTeamSharingWhitelistSubjectsChangedDetailsToDB(
            object: object
                .teamSharingWhitelistSubjectsChangedDetails
        )
        return DBTEAMLOGEventDetails(teamSharingWhitelistSubjectsChangedDetails: teamSharingWhitelistSubjectsChangedDetails)
    }
    if let object = object.asTfaAddExceptionDetails {
        let tfaAddExceptionDetails = mapDBXTeamLogTfaAddExceptionDetailsToDB(object: object.tfaAddExceptionDetails)
        return DBTEAMLOGEventDetails(tfaAddExceptionDetails: tfaAddExceptionDetails)
    }
    if let object = object.asTfaChangePolicyDetails {
        let tfaChangePolicyDetails = mapDBXTeamLogTfaChangePolicyDetailsToDB(object: object.tfaChangePolicyDetails)
        return DBTEAMLOGEventDetails(tfaChangePolicyDetails: tfaChangePolicyDetails)
    }
    if let object = object.asTfaRemoveExceptionDetails {
        let tfaRemoveExceptionDetails = mapDBXTeamLogTfaRemoveExceptionDetailsToDB(object: object.tfaRemoveExceptionDetails)
        return DBTEAMLOGEventDetails(tfaRemoveExceptionDetails: tfaRemoveExceptionDetails)
    }
    if let object = object.asTwoAccountChangePolicyDetails {
        let twoAccountChangePolicyDetails = mapDBXTeamLogTwoAccountChangePolicyDetailsToDB(object: object.twoAccountChangePolicyDetails)
        return DBTEAMLOGEventDetails(twoAccountChangePolicyDetails: twoAccountChangePolicyDetails)
    }
    if let object = object.asViewerInfoPolicyChangedDetails {
        let viewerInfoPolicyChangedDetails = mapDBXTeamLogViewerInfoPolicyChangedDetailsToDB(object: object.viewerInfoPolicyChangedDetails)
        return DBTEAMLOGEventDetails(viewerInfoPolicyChangedDetails: viewerInfoPolicyChangedDetails)
    }
    if let object = object.asWatermarkingPolicyChangedDetails {
        let watermarkingPolicyChangedDetails = mapDBXTeamLogWatermarkingPolicyChangedDetailsToDB(object: object.watermarkingPolicyChangedDetails)
        return DBTEAMLOGEventDetails(watermarkingPolicyChangedDetails: watermarkingPolicyChangedDetails)
    }
    if let object = object.asWebSessionsChangeActiveSessionLimitDetails {
        let webSessionsChangeActiveSessionLimitDetails = mapDBXTeamLogWebSessionsChangeActiveSessionLimitDetailsToDB(
            object: object
                .webSessionsChangeActiveSessionLimitDetails
        )
        return DBTEAMLOGEventDetails(webSessionsChangeActiveSessionLimitDetails: webSessionsChangeActiveSessionLimitDetails)
    }
    if let object = object.asWebSessionsChangeFixedLengthPolicyDetails {
        let webSessionsChangeFixedLengthPolicyDetails = mapDBXTeamLogWebSessionsChangeFixedLengthPolicyDetailsToDB(
            object: object
                .webSessionsChangeFixedLengthPolicyDetails
        )
        return DBTEAMLOGEventDetails(webSessionsChangeFixedLengthPolicyDetails: webSessionsChangeFixedLengthPolicyDetails)
    }
    if let object = object.asWebSessionsChangeIdleLengthPolicyDetails {
        let webSessionsChangeIdleLengthPolicyDetails = mapDBXTeamLogWebSessionsChangeIdleLengthPolicyDetailsToDB(
            object: object
                .webSessionsChangeIdleLengthPolicyDetails
        )
        return DBTEAMLOGEventDetails(webSessionsChangeIdleLengthPolicyDetails: webSessionsChangeIdleLengthPolicyDetails)
    }
    if let object = object.asDataResidencyMigrationRequestSuccessfulDetails {
        let dataResidencyMigrationRequestSuccessfulDetails = mapDBXTeamLogDataResidencyMigrationRequestSuccessfulDetailsToDB(
            object: object
                .dataResidencyMigrationRequestSuccessfulDetails
        )
        return DBTEAMLOGEventDetails(dataResidencyMigrationRequestSuccessfulDetails: dataResidencyMigrationRequestSuccessfulDetails)
    }
    if let object = object.asDataResidencyMigrationRequestUnsuccessfulDetails {
        let dataResidencyMigrationRequestUnsuccessfulDetails = mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulDetailsToDB(
            object: object
                .dataResidencyMigrationRequestUnsuccessfulDetails
        )
        return DBTEAMLOGEventDetails(dataResidencyMigrationRequestUnsuccessfulDetails: dataResidencyMigrationRequestUnsuccessfulDetails)
    }
    if let object = object.asTeamMergeFromDetails {
        let teamMergeFromDetails = mapDBXTeamLogTeamMergeFromDetailsToDB(object: object.teamMergeFromDetails)
        return DBTEAMLOGEventDetails(teamMergeFromDetails: teamMergeFromDetails)
    }
    if let object = object.asTeamMergeToDetails {
        let teamMergeToDetails = mapDBXTeamLogTeamMergeToDetailsToDB(object: object.teamMergeToDetails)
        return DBTEAMLOGEventDetails(teamMergeToDetails: teamMergeToDetails)
    }
    if let object = object.asTeamProfileAddBackgroundDetails {
        let teamProfileAddBackgroundDetails = mapDBXTeamLogTeamProfileAddBackgroundDetailsToDB(object: object.teamProfileAddBackgroundDetails)
        return DBTEAMLOGEventDetails(teamProfileAddBackgroundDetails: teamProfileAddBackgroundDetails)
    }
    if let object = object.asTeamProfileAddLogoDetails {
        let teamProfileAddLogoDetails = mapDBXTeamLogTeamProfileAddLogoDetailsToDB(object: object.teamProfileAddLogoDetails)
        return DBTEAMLOGEventDetails(teamProfileAddLogoDetails: teamProfileAddLogoDetails)
    }
    if let object = object.asTeamProfileChangeBackgroundDetails {
        let teamProfileChangeBackgroundDetails = mapDBXTeamLogTeamProfileChangeBackgroundDetailsToDB(object: object.teamProfileChangeBackgroundDetails)
        return DBTEAMLOGEventDetails(teamProfileChangeBackgroundDetails: teamProfileChangeBackgroundDetails)
    }
    if let object = object.asTeamProfileChangeDefaultLanguageDetails {
        let teamProfileChangeDefaultLanguageDetails = mapDBXTeamLogTeamProfileChangeDefaultLanguageDetailsToDB(
            object: object
                .teamProfileChangeDefaultLanguageDetails
        )
        return DBTEAMLOGEventDetails(teamProfileChangeDefaultLanguageDetails: teamProfileChangeDefaultLanguageDetails)
    }
    if let object = object.asTeamProfileChangeLogoDetails {
        let teamProfileChangeLogoDetails = mapDBXTeamLogTeamProfileChangeLogoDetailsToDB(object: object.teamProfileChangeLogoDetails)
        return DBTEAMLOGEventDetails(teamProfileChangeLogoDetails: teamProfileChangeLogoDetails)
    }
    if let object = object.asTeamProfileChangeNameDetails {
        let teamProfileChangeNameDetails = mapDBXTeamLogTeamProfileChangeNameDetailsToDB(object: object.teamProfileChangeNameDetails)
        return DBTEAMLOGEventDetails(teamProfileChangeNameDetails: teamProfileChangeNameDetails)
    }
    if let object = object.asTeamProfileRemoveBackgroundDetails {
        let teamProfileRemoveBackgroundDetails = mapDBXTeamLogTeamProfileRemoveBackgroundDetailsToDB(object: object.teamProfileRemoveBackgroundDetails)
        return DBTEAMLOGEventDetails(teamProfileRemoveBackgroundDetails: teamProfileRemoveBackgroundDetails)
    }
    if let object = object.asTeamProfileRemoveLogoDetails {
        let teamProfileRemoveLogoDetails = mapDBXTeamLogTeamProfileRemoveLogoDetailsToDB(object: object.teamProfileRemoveLogoDetails)
        return DBTEAMLOGEventDetails(teamProfileRemoveLogoDetails: teamProfileRemoveLogoDetails)
    }
    if let object = object.asTfaAddBackupPhoneDetails {
        let tfaAddBackupPhoneDetails = mapDBXTeamLogTfaAddBackupPhoneDetailsToDB(object: object.tfaAddBackupPhoneDetails)
        return DBTEAMLOGEventDetails(tfaAddBackupPhoneDetails: tfaAddBackupPhoneDetails)
    }
    if let object = object.asTfaAddSecurityKeyDetails {
        let tfaAddSecurityKeyDetails = mapDBXTeamLogTfaAddSecurityKeyDetailsToDB(object: object.tfaAddSecurityKeyDetails)
        return DBTEAMLOGEventDetails(tfaAddSecurityKeyDetails: tfaAddSecurityKeyDetails)
    }
    if let object = object.asTfaChangeBackupPhoneDetails {
        let tfaChangeBackupPhoneDetails = mapDBXTeamLogTfaChangeBackupPhoneDetailsToDB(object: object.tfaChangeBackupPhoneDetails)
        return DBTEAMLOGEventDetails(tfaChangeBackupPhoneDetails: tfaChangeBackupPhoneDetails)
    }
    if let object = object.asTfaChangeStatusDetails {
        let tfaChangeStatusDetails = mapDBXTeamLogTfaChangeStatusDetailsToDB(object: object.tfaChangeStatusDetails)
        return DBTEAMLOGEventDetails(tfaChangeStatusDetails: tfaChangeStatusDetails)
    }
    if let object = object.asTfaRemoveBackupPhoneDetails {
        let tfaRemoveBackupPhoneDetails = mapDBXTeamLogTfaRemoveBackupPhoneDetailsToDB(object: object.tfaRemoveBackupPhoneDetails)
        return DBTEAMLOGEventDetails(tfaRemoveBackupPhoneDetails: tfaRemoveBackupPhoneDetails)
    }
    if let object = object.asTfaRemoveSecurityKeyDetails {
        let tfaRemoveSecurityKeyDetails = mapDBXTeamLogTfaRemoveSecurityKeyDetailsToDB(object: object.tfaRemoveSecurityKeyDetails)
        return DBTEAMLOGEventDetails(tfaRemoveSecurityKeyDetails: tfaRemoveSecurityKeyDetails)
    }
    if let object = object.asTfaResetDetails {
        let tfaResetDetails = mapDBXTeamLogTfaResetDetailsToDB(object: object.tfaResetDetails)
        return DBTEAMLOGEventDetails(tfaResetDetails: tfaResetDetails)
    }
    if let object = object.asChangedEnterpriseAdminRoleDetails {
        let changedEnterpriseAdminRoleDetails = mapDBXTeamLogChangedEnterpriseAdminRoleDetailsToDB(object: object.changedEnterpriseAdminRoleDetails)
        return DBTEAMLOGEventDetails(changedEnterpriseAdminRoleDetails: changedEnterpriseAdminRoleDetails)
    }
    if let object = object.asChangedEnterpriseConnectedTeamStatusDetails {
        let changedEnterpriseConnectedTeamStatusDetails = mapDBXTeamLogChangedEnterpriseConnectedTeamStatusDetailsToDB(
            object: object
                .changedEnterpriseConnectedTeamStatusDetails
        )
        return DBTEAMLOGEventDetails(changedEnterpriseConnectedTeamStatusDetails: changedEnterpriseConnectedTeamStatusDetails)
    }
    if let object = object.asEndedEnterpriseAdminSessionDetails {
        let endedEnterpriseAdminSessionDetails = mapDBXTeamLogEndedEnterpriseAdminSessionDetailsToDB(object: object.endedEnterpriseAdminSessionDetails)
        return DBTEAMLOGEventDetails(endedEnterpriseAdminSessionDetails: endedEnterpriseAdminSessionDetails)
    }
    if let object = object.asEndedEnterpriseAdminSessionDeprecatedDetails {
        let endedEnterpriseAdminSessionDeprecatedDetails = mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedDetailsToDB(
            object: object
                .endedEnterpriseAdminSessionDeprecatedDetails
        )
        return DBTEAMLOGEventDetails(endedEnterpriseAdminSessionDeprecatedDetails: endedEnterpriseAdminSessionDeprecatedDetails)
    }
    if let object = object.asEnterpriseSettingsLockingDetails {
        let enterpriseSettingsLockingDetails = mapDBXTeamLogEnterpriseSettingsLockingDetailsToDB(object: object.enterpriseSettingsLockingDetails)
        return DBTEAMLOGEventDetails(enterpriseSettingsLockingDetails: enterpriseSettingsLockingDetails)
    }
    if let object = object.asGuestAdminChangeStatusDetails {
        let guestAdminChangeStatusDetails = mapDBXTeamLogGuestAdminChangeStatusDetailsToDB(object: object.guestAdminChangeStatusDetails)
        return DBTEAMLOGEventDetails(guestAdminChangeStatusDetails: guestAdminChangeStatusDetails)
    }
    if let object = object.asStartedEnterpriseAdminSessionDetails {
        let startedEnterpriseAdminSessionDetails = mapDBXTeamLogStartedEnterpriseAdminSessionDetailsToDB(object: object.startedEnterpriseAdminSessionDetails)
        return DBTEAMLOGEventDetails(startedEnterpriseAdminSessionDetails: startedEnterpriseAdminSessionDetails)
    }
    if let object = object.asTeamMergeRequestAcceptedDetails {
        let teamMergeRequestAcceptedDetails = mapDBXTeamLogTeamMergeRequestAcceptedDetailsToDB(object: object.teamMergeRequestAcceptedDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestAcceptedDetails: teamMergeRequestAcceptedDetails)
    }
    if let object = object.asTeamMergeRequestAcceptedShownToPrimaryTeamDetails {
        let teamMergeRequestAcceptedShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestAcceptedShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestAcceptedShownToPrimaryTeamDetails: teamMergeRequestAcceptedShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestAcceptedShownToSecondaryTeamDetails {
        let teamMergeRequestAcceptedShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestAcceptedShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestAcceptedShownToSecondaryTeamDetails: teamMergeRequestAcceptedShownToSecondaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestAutoCanceledDetails {
        let teamMergeRequestAutoCanceledDetails = mapDBXTeamLogTeamMergeRequestAutoCanceledDetailsToDB(object: object.teamMergeRequestAutoCanceledDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestAutoCanceledDetails: teamMergeRequestAutoCanceledDetails)
    }
    if let object = object.asTeamMergeRequestCanceledDetails {
        let teamMergeRequestCanceledDetails = mapDBXTeamLogTeamMergeRequestCanceledDetailsToDB(object: object.teamMergeRequestCanceledDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestCanceledDetails: teamMergeRequestCanceledDetails)
    }
    if let object = object.asTeamMergeRequestCanceledShownToPrimaryTeamDetails {
        let teamMergeRequestCanceledShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestCanceledShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestCanceledShownToPrimaryTeamDetails: teamMergeRequestCanceledShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestCanceledShownToSecondaryTeamDetails {
        let teamMergeRequestCanceledShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestCanceledShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestCanceledShownToSecondaryTeamDetails: teamMergeRequestCanceledShownToSecondaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestExpiredDetails {
        let teamMergeRequestExpiredDetails = mapDBXTeamLogTeamMergeRequestExpiredDetailsToDB(object: object.teamMergeRequestExpiredDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestExpiredDetails: teamMergeRequestExpiredDetails)
    }
    if let object = object.asTeamMergeRequestExpiredShownToPrimaryTeamDetails {
        let teamMergeRequestExpiredShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestExpiredShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestExpiredShownToPrimaryTeamDetails: teamMergeRequestExpiredShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestExpiredShownToSecondaryTeamDetails {
        let teamMergeRequestExpiredShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestExpiredShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestExpiredShownToSecondaryTeamDetails: teamMergeRequestExpiredShownToSecondaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestRejectedShownToPrimaryTeamDetails {
        let teamMergeRequestRejectedShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestRejectedShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestRejectedShownToPrimaryTeamDetails: teamMergeRequestRejectedShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestRejectedShownToSecondaryTeamDetails {
        let teamMergeRequestRejectedShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestRejectedShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestRejectedShownToSecondaryTeamDetails: teamMergeRequestRejectedShownToSecondaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestReminderDetails {
        let teamMergeRequestReminderDetails = mapDBXTeamLogTeamMergeRequestReminderDetailsToDB(object: object.teamMergeRequestReminderDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestReminderDetails: teamMergeRequestReminderDetails)
    }
    if let object = object.asTeamMergeRequestReminderShownToPrimaryTeamDetails {
        let teamMergeRequestReminderShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestReminderShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestReminderShownToPrimaryTeamDetails: teamMergeRequestReminderShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestReminderShownToSecondaryTeamDetails {
        let teamMergeRequestReminderShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestReminderShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestReminderShownToSecondaryTeamDetails: teamMergeRequestReminderShownToSecondaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestRevokedDetails {
        let teamMergeRequestRevokedDetails = mapDBXTeamLogTeamMergeRequestRevokedDetailsToDB(object: object.teamMergeRequestRevokedDetails)
        return DBTEAMLOGEventDetails(teamMergeRequestRevokedDetails: teamMergeRequestRevokedDetails)
    }
    if let object = object.asTeamMergeRequestSentShownToPrimaryTeamDetails {
        let teamMergeRequestSentShownToPrimaryTeamDetails = mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetailsToDB(
            object: object
                .teamMergeRequestSentShownToPrimaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestSentShownToPrimaryTeamDetails: teamMergeRequestSentShownToPrimaryTeamDetails)
    }
    if let object = object.asTeamMergeRequestSentShownToSecondaryTeamDetails {
        let teamMergeRequestSentShownToSecondaryTeamDetails = mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetailsToDB(
            object: object
                .teamMergeRequestSentShownToSecondaryTeamDetails
        )
        return DBTEAMLOGEventDetails(teamMergeRequestSentShownToSecondaryTeamDetails: teamMergeRequestSentShownToSecondaryTeamDetails)
    }
    if let object = object.asMissingDetails {
        let missingDetails = mapDBXTeamLogMissingDetailsToDB(object: object.missingDetails)
        return DBTEAMLOGEventDetails(missingDetails: missingDetails)
    }
    if object.asOther != nil {
        return DBTEAMLOGEventDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogEventTypeToDBOptional(object: DBXTeamLogEventType?) -> DBTEAMLOGEventType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEventTypeToDB(object: object)
}

func mapDBXTeamLogEventTypeToDB(object: DBXTeamLogEventType) -> DBTEAMLOGEventType {
    if let object = object.asAdminAlertingAlertStateChanged {
        let adminAlertingAlertStateChanged = mapDBXTeamLogAdminAlertingAlertStateChangedTypeToDB(object: object.adminAlertingAlertStateChanged)
        return DBTEAMLOGEventType(adminAlertingAlertStateChanged: adminAlertingAlertStateChanged)
    }
    if let object = object.asAdminAlertingChangedAlertConfig {
        let adminAlertingChangedAlertConfig = mapDBXTeamLogAdminAlertingChangedAlertConfigTypeToDB(object: object.adminAlertingChangedAlertConfig)
        return DBTEAMLOGEventType(adminAlertingChangedAlertConfig: adminAlertingChangedAlertConfig)
    }
    if let object = object.asAdminAlertingTriggeredAlert {
        let adminAlertingTriggeredAlert = mapDBXTeamLogAdminAlertingTriggeredAlertTypeToDB(object: object.adminAlertingTriggeredAlert)
        return DBTEAMLOGEventType(adminAlertingTriggeredAlert: adminAlertingTriggeredAlert)
    }
    if let object = object.asRansomwareRestoreProcessCompleted {
        let ransomwareRestoreProcessCompleted = mapDBXTeamLogRansomwareRestoreProcessCompletedTypeToDB(object: object.ransomwareRestoreProcessCompleted)
        return DBTEAMLOGEventType(ransomwareRestoreProcessCompleted: ransomwareRestoreProcessCompleted)
    }
    if let object = object.asRansomwareRestoreProcessStarted {
        let ransomwareRestoreProcessStarted = mapDBXTeamLogRansomwareRestoreProcessStartedTypeToDB(object: object.ransomwareRestoreProcessStarted)
        return DBTEAMLOGEventType(ransomwareRestoreProcessStarted: ransomwareRestoreProcessStarted)
    }
    if let object = object.asAppBlockedByPermissions {
        let appBlockedByPermissions = mapDBXTeamLogAppBlockedByPermissionsTypeToDB(object: object.appBlockedByPermissions)
        return DBTEAMLOGEventType(appBlockedByPermissions: appBlockedByPermissions)
    }
    if let object = object.asAppLinkTeam {
        let appLinkTeam = mapDBXTeamLogAppLinkTeamTypeToDB(object: object.appLinkTeam)
        return DBTEAMLOGEventType(appLinkTeam: appLinkTeam)
    }
    if let object = object.asAppLinkUser {
        let appLinkUser = mapDBXTeamLogAppLinkUserTypeToDB(object: object.appLinkUser)
        return DBTEAMLOGEventType(appLinkUser: appLinkUser)
    }
    if let object = object.asAppUnlinkTeam {
        let appUnlinkTeam = mapDBXTeamLogAppUnlinkTeamTypeToDB(object: object.appUnlinkTeam)
        return DBTEAMLOGEventType(appUnlinkTeam: appUnlinkTeam)
    }
    if let object = object.asAppUnlinkUser {
        let appUnlinkUser = mapDBXTeamLogAppUnlinkUserTypeToDB(object: object.appUnlinkUser)
        return DBTEAMLOGEventType(appUnlinkUser: appUnlinkUser)
    }
    if let object = object.asIntegrationConnected {
        let integrationConnected = mapDBXTeamLogIntegrationConnectedTypeToDB(object: object.integrationConnected)
        return DBTEAMLOGEventType(integrationConnected: integrationConnected)
    }
    if let object = object.asIntegrationDisconnected {
        let integrationDisconnected = mapDBXTeamLogIntegrationDisconnectedTypeToDB(object: object.integrationDisconnected)
        return DBTEAMLOGEventType(integrationDisconnected: integrationDisconnected)
    }
    if let object = object.asFileAddComment {
        let fileAddComment = mapDBXTeamLogFileAddCommentTypeToDB(object: object.fileAddComment)
        return DBTEAMLOGEventType(fileAddComment: fileAddComment)
    }
    if let object = object.asFileChangeCommentSubscription {
        let fileChangeCommentSubscription = mapDBXTeamLogFileChangeCommentSubscriptionTypeToDB(object: object.fileChangeCommentSubscription)
        return DBTEAMLOGEventType(fileChangeCommentSubscription: fileChangeCommentSubscription)
    }
    if let object = object.asFileDeleteComment {
        let fileDeleteComment = mapDBXTeamLogFileDeleteCommentTypeToDB(object: object.fileDeleteComment)
        return DBTEAMLOGEventType(fileDeleteComment: fileDeleteComment)
    }
    if let object = object.asFileEditComment {
        let fileEditComment = mapDBXTeamLogFileEditCommentTypeToDB(object: object.fileEditComment)
        return DBTEAMLOGEventType(fileEditComment: fileEditComment)
    }
    if let object = object.asFileLikeComment {
        let fileLikeComment = mapDBXTeamLogFileLikeCommentTypeToDB(object: object.fileLikeComment)
        return DBTEAMLOGEventType(fileLikeComment: fileLikeComment)
    }
    if let object = object.asFileResolveComment {
        let fileResolveComment = mapDBXTeamLogFileResolveCommentTypeToDB(object: object.fileResolveComment)
        return DBTEAMLOGEventType(fileResolveComment: fileResolveComment)
    }
    if let object = object.asFileUnlikeComment {
        let fileUnlikeComment = mapDBXTeamLogFileUnlikeCommentTypeToDB(object: object.fileUnlikeComment)
        return DBTEAMLOGEventType(fileUnlikeComment: fileUnlikeComment)
    }
    if let object = object.asFileUnresolveComment {
        let fileUnresolveComment = mapDBXTeamLogFileUnresolveCommentTypeToDB(object: object.fileUnresolveComment)
        return DBTEAMLOGEventType(fileUnresolveComment: fileUnresolveComment)
    }
    if let object = object.asGovernancePolicyAddFolders {
        let governancePolicyAddFolders = mapDBXTeamLogGovernancePolicyAddFoldersTypeToDB(object: object.governancePolicyAddFolders)
        return DBTEAMLOGEventType(governancePolicyAddFolders: governancePolicyAddFolders)
    }
    if let object = object.asGovernancePolicyAddFolderFailed {
        let governancePolicyAddFolderFailed = mapDBXTeamLogGovernancePolicyAddFolderFailedTypeToDB(object: object.governancePolicyAddFolderFailed)
        return DBTEAMLOGEventType(governancePolicyAddFolderFailed: governancePolicyAddFolderFailed)
    }
    if let object = object.asGovernancePolicyContentDisposed {
        let governancePolicyContentDisposed = mapDBXTeamLogGovernancePolicyContentDisposedTypeToDB(object: object.governancePolicyContentDisposed)
        return DBTEAMLOGEventType(governancePolicyContentDisposed: governancePolicyContentDisposed)
    }
    if let object = object.asGovernancePolicyCreate {
        let governancePolicyCreate = mapDBXTeamLogGovernancePolicyCreateTypeToDB(object: object.governancePolicyCreate)
        return DBTEAMLOGEventType(governancePolicyCreate: governancePolicyCreate)
    }
    if let object = object.asGovernancePolicyDelete {
        let governancePolicyDelete = mapDBXTeamLogGovernancePolicyDeleteTypeToDB(object: object.governancePolicyDelete)
        return DBTEAMLOGEventType(governancePolicyDelete: governancePolicyDelete)
    }
    if let object = object.asGovernancePolicyEditDetails {
        let governancePolicyEditDetails = mapDBXTeamLogGovernancePolicyEditDetailsTypeToDB(object: object.governancePolicyEditDetails)
        return DBTEAMLOGEventType(governancePolicyEditDetails: governancePolicyEditDetails)
    }
    if let object = object.asGovernancePolicyEditDuration {
        let governancePolicyEditDuration = mapDBXTeamLogGovernancePolicyEditDurationTypeToDB(object: object.governancePolicyEditDuration)
        return DBTEAMLOGEventType(governancePolicyEditDuration: governancePolicyEditDuration)
    }
    if let object = object.asGovernancePolicyExportCreated {
        let governancePolicyExportCreated = mapDBXTeamLogGovernancePolicyExportCreatedTypeToDB(object: object.governancePolicyExportCreated)
        return DBTEAMLOGEventType(governancePolicyExportCreated: governancePolicyExportCreated)
    }
    if let object = object.asGovernancePolicyExportRemoved {
        let governancePolicyExportRemoved = mapDBXTeamLogGovernancePolicyExportRemovedTypeToDB(object: object.governancePolicyExportRemoved)
        return DBTEAMLOGEventType(governancePolicyExportRemoved: governancePolicyExportRemoved)
    }
    if let object = object.asGovernancePolicyRemoveFolders {
        let governancePolicyRemoveFolders = mapDBXTeamLogGovernancePolicyRemoveFoldersTypeToDB(object: object.governancePolicyRemoveFolders)
        return DBTEAMLOGEventType(governancePolicyRemoveFolders: governancePolicyRemoveFolders)
    }
    if let object = object.asGovernancePolicyReportCreated {
        let governancePolicyReportCreated = mapDBXTeamLogGovernancePolicyReportCreatedTypeToDB(object: object.governancePolicyReportCreated)
        return DBTEAMLOGEventType(governancePolicyReportCreated: governancePolicyReportCreated)
    }
    if let object = object.asGovernancePolicyZipPartDownloaded {
        let governancePolicyZipPartDownloaded = mapDBXTeamLogGovernancePolicyZipPartDownloadedTypeToDB(object: object.governancePolicyZipPartDownloaded)
        return DBTEAMLOGEventType(governancePolicyZipPartDownloaded: governancePolicyZipPartDownloaded)
    }
    if let object = object.asLegalHoldsActivateAHold {
        let legalHoldsActivateAHold = mapDBXTeamLogLegalHoldsActivateAHoldTypeToDB(object: object.legalHoldsActivateAHold)
        return DBTEAMLOGEventType(legalHoldsActivateAHold: legalHoldsActivateAHold)
    }
    if let object = object.asLegalHoldsAddMembers {
        let legalHoldsAddMembers = mapDBXTeamLogLegalHoldsAddMembersTypeToDB(object: object.legalHoldsAddMembers)
        return DBTEAMLOGEventType(legalHoldsAddMembers: legalHoldsAddMembers)
    }
    if let object = object.asLegalHoldsChangeHoldDetails {
        let legalHoldsChangeHoldDetails = mapDBXTeamLogLegalHoldsChangeHoldDetailsTypeToDB(object: object.legalHoldsChangeHoldDetails)
        return DBTEAMLOGEventType(legalHoldsChangeHoldDetails: legalHoldsChangeHoldDetails)
    }
    if let object = object.asLegalHoldsChangeHoldName {
        let legalHoldsChangeHoldName = mapDBXTeamLogLegalHoldsChangeHoldNameTypeToDB(object: object.legalHoldsChangeHoldName)
        return DBTEAMLOGEventType(legalHoldsChangeHoldName: legalHoldsChangeHoldName)
    }
    if let object = object.asLegalHoldsExportAHold {
        let legalHoldsExportAHold = mapDBXTeamLogLegalHoldsExportAHoldTypeToDB(object: object.legalHoldsExportAHold)
        return DBTEAMLOGEventType(legalHoldsExportAHold: legalHoldsExportAHold)
    }
    if let object = object.asLegalHoldsExportCancelled {
        let legalHoldsExportCancelled = mapDBXTeamLogLegalHoldsExportCancelledTypeToDB(object: object.legalHoldsExportCancelled)
        return DBTEAMLOGEventType(legalHoldsExportCancelled: legalHoldsExportCancelled)
    }
    if let object = object.asLegalHoldsExportDownloaded {
        let legalHoldsExportDownloaded = mapDBXTeamLogLegalHoldsExportDownloadedTypeToDB(object: object.legalHoldsExportDownloaded)
        return DBTEAMLOGEventType(legalHoldsExportDownloaded: legalHoldsExportDownloaded)
    }
    if let object = object.asLegalHoldsExportRemoved {
        let legalHoldsExportRemoved = mapDBXTeamLogLegalHoldsExportRemovedTypeToDB(object: object.legalHoldsExportRemoved)
        return DBTEAMLOGEventType(legalHoldsExportRemoved: legalHoldsExportRemoved)
    }
    if let object = object.asLegalHoldsReleaseAHold {
        let legalHoldsReleaseAHold = mapDBXTeamLogLegalHoldsReleaseAHoldTypeToDB(object: object.legalHoldsReleaseAHold)
        return DBTEAMLOGEventType(legalHoldsReleaseAHold: legalHoldsReleaseAHold)
    }
    if let object = object.asLegalHoldsRemoveMembers {
        let legalHoldsRemoveMembers = mapDBXTeamLogLegalHoldsRemoveMembersTypeToDB(object: object.legalHoldsRemoveMembers)
        return DBTEAMLOGEventType(legalHoldsRemoveMembers: legalHoldsRemoveMembers)
    }
    if let object = object.asLegalHoldsReportAHold {
        let legalHoldsReportAHold = mapDBXTeamLogLegalHoldsReportAHoldTypeToDB(object: object.legalHoldsReportAHold)
        return DBTEAMLOGEventType(legalHoldsReportAHold: legalHoldsReportAHold)
    }
    if let object = object.asDeviceChangeIpDesktop {
        let deviceChangeIpDesktop = mapDBXTeamLogDeviceChangeIpDesktopTypeToDB(object: object.deviceChangeIpDesktop)
        return DBTEAMLOGEventType(deviceChangeIpDesktop: deviceChangeIpDesktop)
    }
    if let object = object.asDeviceChangeIpMobile {
        let deviceChangeIpMobile = mapDBXTeamLogDeviceChangeIpMobileTypeToDB(object: object.deviceChangeIpMobile)
        return DBTEAMLOGEventType(deviceChangeIpMobile: deviceChangeIpMobile)
    }
    if let object = object.asDeviceChangeIpWeb {
        let deviceChangeIpWeb = mapDBXTeamLogDeviceChangeIpWebTypeToDB(object: object.deviceChangeIpWeb)
        return DBTEAMLOGEventType(deviceChangeIpWeb: deviceChangeIpWeb)
    }
    if let object = object.asDeviceDeleteOnUnlinkFail {
        let deviceDeleteOnUnlinkFail = mapDBXTeamLogDeviceDeleteOnUnlinkFailTypeToDB(object: object.deviceDeleteOnUnlinkFail)
        return DBTEAMLOGEventType(deviceDeleteOnUnlinkFail: deviceDeleteOnUnlinkFail)
    }
    if let object = object.asDeviceDeleteOnUnlinkSuccess {
        let deviceDeleteOnUnlinkSuccess = mapDBXTeamLogDeviceDeleteOnUnlinkSuccessTypeToDB(object: object.deviceDeleteOnUnlinkSuccess)
        return DBTEAMLOGEventType(deviceDeleteOnUnlinkSuccess: deviceDeleteOnUnlinkSuccess)
    }
    if let object = object.asDeviceLinkFail {
        let deviceLinkFail = mapDBXTeamLogDeviceLinkFailTypeToDB(object: object.deviceLinkFail)
        return DBTEAMLOGEventType(deviceLinkFail: deviceLinkFail)
    }
    if let object = object.asDeviceLinkSuccess {
        let deviceLinkSuccess = mapDBXTeamLogDeviceLinkSuccessTypeToDB(object: object.deviceLinkSuccess)
        return DBTEAMLOGEventType(deviceLinkSuccess: deviceLinkSuccess)
    }
    if let object = object.asDeviceManagementDisabled {
        let deviceManagementDisabled = mapDBXTeamLogDeviceManagementDisabledTypeToDB(object: object.deviceManagementDisabled)
        return DBTEAMLOGEventType(deviceManagementDisabled: deviceManagementDisabled)
    }
    if let object = object.asDeviceManagementEnabled {
        let deviceManagementEnabled = mapDBXTeamLogDeviceManagementEnabledTypeToDB(object: object.deviceManagementEnabled)
        return DBTEAMLOGEventType(deviceManagementEnabled: deviceManagementEnabled)
    }
    if let object = object.asDeviceSyncBackupStatusChanged {
        let deviceSyncBackupStatusChanged = mapDBXTeamLogDeviceSyncBackupStatusChangedTypeToDB(object: object.deviceSyncBackupStatusChanged)
        return DBTEAMLOGEventType(deviceSyncBackupStatusChanged: deviceSyncBackupStatusChanged)
    }
    if let object = object.asDeviceUnlink {
        let deviceUnlink = mapDBXTeamLogDeviceUnlinkTypeToDB(object: object.deviceUnlink)
        return DBTEAMLOGEventType(deviceUnlink: deviceUnlink)
    }
    if let object = object.asDropboxPasswordsExported {
        let dropboxPasswordsExported = mapDBXTeamLogDropboxPasswordsExportedTypeToDB(object: object.dropboxPasswordsExported)
        return DBTEAMLOGEventType(dropboxPasswordsExported: dropboxPasswordsExported)
    }
    if let object = object.asDropboxPasswordsNewDeviceEnrolled {
        let dropboxPasswordsNewDeviceEnrolled = mapDBXTeamLogDropboxPasswordsNewDeviceEnrolledTypeToDB(object: object.dropboxPasswordsNewDeviceEnrolled)
        return DBTEAMLOGEventType(dropboxPasswordsNewDeviceEnrolled: dropboxPasswordsNewDeviceEnrolled)
    }
    if let object = object.asEmmRefreshAuthToken {
        let emmRefreshAuthToken = mapDBXTeamLogEmmRefreshAuthTokenTypeToDB(object: object.emmRefreshAuthToken)
        return DBTEAMLOGEventType(emmRefreshAuthToken: emmRefreshAuthToken)
    }
    if let object = object.asExternalDriveBackupEligibilityStatusChecked {
        let externalDriveBackupEligibilityStatusChecked = mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedTypeToDB(
            object: object
                .externalDriveBackupEligibilityStatusChecked
        )
        return DBTEAMLOGEventType(externalDriveBackupEligibilityStatusChecked: externalDriveBackupEligibilityStatusChecked)
    }
    if let object = object.asExternalDriveBackupStatusChanged {
        let externalDriveBackupStatusChanged = mapDBXTeamLogExternalDriveBackupStatusChangedTypeToDB(object: object.externalDriveBackupStatusChanged)
        return DBTEAMLOGEventType(externalDriveBackupStatusChanged: externalDriveBackupStatusChanged)
    }
    if let object = object.asAccountCaptureChangeAvailability {
        let accountCaptureChangeAvailability = mapDBXTeamLogAccountCaptureChangeAvailabilityTypeToDB(object: object.accountCaptureChangeAvailability)
        return DBTEAMLOGEventType(accountCaptureChangeAvailability: accountCaptureChangeAvailability)
    }
    if let object = object.asAccountCaptureMigrateAccount {
        let accountCaptureMigrateAccount = mapDBXTeamLogAccountCaptureMigrateAccountTypeToDB(object: object.accountCaptureMigrateAccount)
        return DBTEAMLOGEventType(accountCaptureMigrateAccount: accountCaptureMigrateAccount)
    }
    if let object = object.asAccountCaptureNotificationEmailsSent {
        let accountCaptureNotificationEmailsSent = mapDBXTeamLogAccountCaptureNotificationEmailsSentTypeToDB(
            object: object
                .accountCaptureNotificationEmailsSent
        )
        return DBTEAMLOGEventType(accountCaptureNotificationEmailsSent: accountCaptureNotificationEmailsSent)
    }
    if let object = object.asAccountCaptureRelinquishAccount {
        let accountCaptureRelinquishAccount = mapDBXTeamLogAccountCaptureRelinquishAccountTypeToDB(object: object.accountCaptureRelinquishAccount)
        return DBTEAMLOGEventType(accountCaptureRelinquishAccount: accountCaptureRelinquishAccount)
    }
    if let object = object.asDisabledDomainInvites {
        let disabledDomainInvites = mapDBXTeamLogDisabledDomainInvitesTypeToDB(object: object.disabledDomainInvites)
        return DBTEAMLOGEventType(disabledDomainInvites: disabledDomainInvites)
    }
    if let object = object.asDomainInvitesApproveRequestToJoinTeam {
        let domainInvitesApproveRequestToJoinTeam = mapDBXTeamLogDomainInvitesApproveRequestToJoinTeamTypeToDB(
            object: object
                .domainInvitesApproveRequestToJoinTeam
        )
        return DBTEAMLOGEventType(domainInvitesApproveRequestToJoinTeam: domainInvitesApproveRequestToJoinTeam)
    }
    if let object = object.asDomainInvitesDeclineRequestToJoinTeam {
        let domainInvitesDeclineRequestToJoinTeam = mapDBXTeamLogDomainInvitesDeclineRequestToJoinTeamTypeToDB(
            object: object
                .domainInvitesDeclineRequestToJoinTeam
        )
        return DBTEAMLOGEventType(domainInvitesDeclineRequestToJoinTeam: domainInvitesDeclineRequestToJoinTeam)
    }
    if let object = object.asDomainInvitesEmailExistingUsers {
        let domainInvitesEmailExistingUsers = mapDBXTeamLogDomainInvitesEmailExistingUsersTypeToDB(object: object.domainInvitesEmailExistingUsers)
        return DBTEAMLOGEventType(domainInvitesEmailExistingUsers: domainInvitesEmailExistingUsers)
    }
    if let object = object.asDomainInvitesRequestToJoinTeam {
        let domainInvitesRequestToJoinTeam = mapDBXTeamLogDomainInvitesRequestToJoinTeamTypeToDB(object: object.domainInvitesRequestToJoinTeam)
        return DBTEAMLOGEventType(domainInvitesRequestToJoinTeam: domainInvitesRequestToJoinTeam)
    }
    if let object = object.asDomainInvitesSetInviteNewUserPrefToNo {
        let domainInvitesSetInviteNewUserPrefToNo = mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToNoTypeToDB(
            object: object
                .domainInvitesSetInviteNewUserPrefToNo
        )
        return DBTEAMLOGEventType(domainInvitesSetInviteNewUserPrefToNo: domainInvitesSetInviteNewUserPrefToNo)
    }
    if let object = object.asDomainInvitesSetInviteNewUserPrefToYes {
        let domainInvitesSetInviteNewUserPrefToYes = mapDBXTeamLogDomainInvitesSetInviteNewUserPrefToYesTypeToDB(
            object: object
                .domainInvitesSetInviteNewUserPrefToYes
        )
        return DBTEAMLOGEventType(domainInvitesSetInviteNewUserPrefToYes: domainInvitesSetInviteNewUserPrefToYes)
    }
    if let object = object.asDomainVerificationAddDomainFail {
        let domainVerificationAddDomainFail = mapDBXTeamLogDomainVerificationAddDomainFailTypeToDB(object: object.domainVerificationAddDomainFail)
        return DBTEAMLOGEventType(domainVerificationAddDomainFail: domainVerificationAddDomainFail)
    }
    if let object = object.asDomainVerificationAddDomainSuccess {
        let domainVerificationAddDomainSuccess = mapDBXTeamLogDomainVerificationAddDomainSuccessTypeToDB(object: object.domainVerificationAddDomainSuccess)
        return DBTEAMLOGEventType(domainVerificationAddDomainSuccess: domainVerificationAddDomainSuccess)
    }
    if let object = object.asDomainVerificationRemoveDomain {
        let domainVerificationRemoveDomain = mapDBXTeamLogDomainVerificationRemoveDomainTypeToDB(object: object.domainVerificationRemoveDomain)
        return DBTEAMLOGEventType(domainVerificationRemoveDomain: domainVerificationRemoveDomain)
    }
    if let object = object.asEnabledDomainInvites {
        let enabledDomainInvites = mapDBXTeamLogEnabledDomainInvitesTypeToDB(object: object.enabledDomainInvites)
        return DBTEAMLOGEventType(enabledDomainInvites: enabledDomainInvites)
    }
    if let object = object.asTeamEncryptionKeyCancelKeyDeletion {
        let teamEncryptionKeyCancelKeyDeletion = mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionTypeToDB(object: object.teamEncryptionKeyCancelKeyDeletion)
        return DBTEAMLOGEventType(teamEncryptionKeyCancelKeyDeletion: teamEncryptionKeyCancelKeyDeletion)
    }
    if let object = object.asTeamEncryptionKeyCreateKey {
        let teamEncryptionKeyCreateKey = mapDBXTeamLogTeamEncryptionKeyCreateKeyTypeToDB(object: object.teamEncryptionKeyCreateKey)
        return DBTEAMLOGEventType(teamEncryptionKeyCreateKey: teamEncryptionKeyCreateKey)
    }
    if let object = object.asTeamEncryptionKeyDeleteKey {
        let teamEncryptionKeyDeleteKey = mapDBXTeamLogTeamEncryptionKeyDeleteKeyTypeToDB(object: object.teamEncryptionKeyDeleteKey)
        return DBTEAMLOGEventType(teamEncryptionKeyDeleteKey: teamEncryptionKeyDeleteKey)
    }
    if let object = object.asTeamEncryptionKeyDisableKey {
        let teamEncryptionKeyDisableKey = mapDBXTeamLogTeamEncryptionKeyDisableKeyTypeToDB(object: object.teamEncryptionKeyDisableKey)
        return DBTEAMLOGEventType(teamEncryptionKeyDisableKey: teamEncryptionKeyDisableKey)
    }
    if let object = object.asTeamEncryptionKeyEnableKey {
        let teamEncryptionKeyEnableKey = mapDBXTeamLogTeamEncryptionKeyEnableKeyTypeToDB(object: object.teamEncryptionKeyEnableKey)
        return DBTEAMLOGEventType(teamEncryptionKeyEnableKey: teamEncryptionKeyEnableKey)
    }
    if let object = object.asTeamEncryptionKeyRotateKey {
        let teamEncryptionKeyRotateKey = mapDBXTeamLogTeamEncryptionKeyRotateKeyTypeToDB(object: object.teamEncryptionKeyRotateKey)
        return DBTEAMLOGEventType(teamEncryptionKeyRotateKey: teamEncryptionKeyRotateKey)
    }
    if let object = object.asTeamEncryptionKeyScheduleKeyDeletion {
        let teamEncryptionKeyScheduleKeyDeletion = mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionTypeToDB(
            object: object
                .teamEncryptionKeyScheduleKeyDeletion
        )
        return DBTEAMLOGEventType(teamEncryptionKeyScheduleKeyDeletion: teamEncryptionKeyScheduleKeyDeletion)
    }
    if let object = object.asApplyNamingConvention {
        let applyNamingConvention = mapDBXTeamLogApplyNamingConventionTypeToDB(object: object.applyNamingConvention)
        return DBTEAMLOGEventType(applyNamingConvention: applyNamingConvention)
    }
    if let object = object.asCreateFolder {
        let createFolder = mapDBXTeamLogCreateFolderTypeToDB(object: object.createFolder)
        return DBTEAMLOGEventType(createFolder: createFolder)
    }
    if let object = object.asFileAdd {
        let fileAdd = mapDBXTeamLogFileAddTypeToDB(object: object.fileAdd)
        return DBTEAMLOGEventType(fileAdd: fileAdd)
    }
    if let object = object.asFileAddFromAutomation {
        let fileAddFromAutomation = mapDBXTeamLogFileAddFromAutomationTypeToDB(object: object.fileAddFromAutomation)
        return DBTEAMLOGEventType(fileAddFromAutomation: fileAddFromAutomation)
    }
    if let object = object.asFileCopy {
        let fileCopy = mapDBXTeamLogFileCopyTypeToDB(object: object.fileCopy)
        return DBTEAMLOGEventType(fileCopy: fileCopy)
    }
    if let object = object.asFileDelete {
        let fileDelete = mapDBXTeamLogFileDeleteTypeToDB(object: object.fileDelete)
        return DBTEAMLOGEventType(fileDelete: fileDelete)
    }
    if let object = object.asFileDownload {
        let fileDownload = mapDBXTeamLogFileDownloadTypeToDB(object: object.fileDownload)
        return DBTEAMLOGEventType(fileDownload: fileDownload)
    }
    if let object = object.asFileEdit {
        let fileEdit = mapDBXTeamLogFileEditTypeToDB(object: object.fileEdit)
        return DBTEAMLOGEventType(fileEdit: fileEdit)
    }
    if let object = object.asFileGetCopyReference {
        let fileGetCopyReference = mapDBXTeamLogFileGetCopyReferenceTypeToDB(object: object.fileGetCopyReference)
        return DBTEAMLOGEventType(fileGetCopyReference: fileGetCopyReference)
    }
    if let object = object.asFileLockingLockStatusChanged {
        let fileLockingLockStatusChanged = mapDBXTeamLogFileLockingLockStatusChangedTypeToDB(object: object.fileLockingLockStatusChanged)
        return DBTEAMLOGEventType(fileLockingLockStatusChanged: fileLockingLockStatusChanged)
    }
    if let object = object.asFileMove {
        let fileMove = mapDBXTeamLogFileMoveTypeToDB(object: object.fileMove)
        return DBTEAMLOGEventType(fileMove: fileMove)
    }
    if let object = object.asFilePermanentlyDelete {
        let filePermanentlyDelete = mapDBXTeamLogFilePermanentlyDeleteTypeToDB(object: object.filePermanentlyDelete)
        return DBTEAMLOGEventType(filePermanentlyDelete: filePermanentlyDelete)
    }
    if let object = object.asFilePreview {
        let filePreview = mapDBXTeamLogFilePreviewTypeToDB(object: object.filePreview)
        return DBTEAMLOGEventType(filePreview: filePreview)
    }
    if let object = object.asFileRename {
        let fileRename = mapDBXTeamLogFileRenameTypeToDB(object: object.fileRename)
        return DBTEAMLOGEventType(fileRename: fileRename)
    }
    if let object = object.asFileRestore {
        let fileRestore = mapDBXTeamLogFileRestoreTypeToDB(object: object.fileRestore)
        return DBTEAMLOGEventType(fileRestore: fileRestore)
    }
    if let object = object.asFileRevert {
        let fileRevert = mapDBXTeamLogFileRevertTypeToDB(object: object.fileRevert)
        return DBTEAMLOGEventType(fileRevert: fileRevert)
    }
    if let object = object.asFileRollbackChanges {
        let fileRollbackChanges = mapDBXTeamLogFileRollbackChangesTypeToDB(object: object.fileRollbackChanges)
        return DBTEAMLOGEventType(fileRollbackChanges: fileRollbackChanges)
    }
    if let object = object.asFileSaveCopyReference {
        let fileSaveCopyReference = mapDBXTeamLogFileSaveCopyReferenceTypeToDB(object: object.fileSaveCopyReference)
        return DBTEAMLOGEventType(fileSaveCopyReference: fileSaveCopyReference)
    }
    if let object = object.asFolderOverviewDescriptionChanged {
        let folderOverviewDescriptionChanged = mapDBXTeamLogFolderOverviewDescriptionChangedTypeToDB(object: object.folderOverviewDescriptionChanged)
        return DBTEAMLOGEventType(folderOverviewDescriptionChanged: folderOverviewDescriptionChanged)
    }
    if let object = object.asFolderOverviewItemPinned {
        let folderOverviewItemPinned = mapDBXTeamLogFolderOverviewItemPinnedTypeToDB(object: object.folderOverviewItemPinned)
        return DBTEAMLOGEventType(folderOverviewItemPinned: folderOverviewItemPinned)
    }
    if let object = object.asFolderOverviewItemUnpinned {
        let folderOverviewItemUnpinned = mapDBXTeamLogFolderOverviewItemUnpinnedTypeToDB(object: object.folderOverviewItemUnpinned)
        return DBTEAMLOGEventType(folderOverviewItemUnpinned: folderOverviewItemUnpinned)
    }
    if let object = object.asObjectLabelAdded {
        let objectLabelAdded = mapDBXTeamLogObjectLabelAddedTypeToDB(object: object.objectLabelAdded)
        return DBTEAMLOGEventType(objectLabelAdded: objectLabelAdded)
    }
    if let object = object.asObjectLabelRemoved {
        let objectLabelRemoved = mapDBXTeamLogObjectLabelRemovedTypeToDB(object: object.objectLabelRemoved)
        return DBTEAMLOGEventType(objectLabelRemoved: objectLabelRemoved)
    }
    if let object = object.asObjectLabelUpdatedValue {
        let objectLabelUpdatedValue = mapDBXTeamLogObjectLabelUpdatedValueTypeToDB(object: object.objectLabelUpdatedValue)
        return DBTEAMLOGEventType(objectLabelUpdatedValue: objectLabelUpdatedValue)
    }
    if let object = object.asOrganizeFolderWithTidy {
        let organizeFolderWithTidy = mapDBXTeamLogOrganizeFolderWithTidyTypeToDB(object: object.organizeFolderWithTidy)
        return DBTEAMLOGEventType(organizeFolderWithTidy: organizeFolderWithTidy)
    }
    if let object = object.asReplayFileDelete {
        let replayFileDelete = mapDBXTeamLogReplayFileDeleteTypeToDB(object: object.replayFileDelete)
        return DBTEAMLOGEventType(replayFileDelete: replayFileDelete)
    }
    if let object = object.asRewindFolder {
        let rewindFolder = mapDBXTeamLogRewindFolderTypeToDB(object: object.rewindFolder)
        return DBTEAMLOGEventType(rewindFolder: rewindFolder)
    }
    if let object = object.asUndoNamingConvention {
        let undoNamingConvention = mapDBXTeamLogUndoNamingConventionTypeToDB(object: object.undoNamingConvention)
        return DBTEAMLOGEventType(undoNamingConvention: undoNamingConvention)
    }
    if let object = object.asUndoOrganizeFolderWithTidy {
        let undoOrganizeFolderWithTidy = mapDBXTeamLogUndoOrganizeFolderWithTidyTypeToDB(object: object.undoOrganizeFolderWithTidy)
        return DBTEAMLOGEventType(undoOrganizeFolderWithTidy: undoOrganizeFolderWithTidy)
    }
    if let object = object.asUserTagsAdded {
        let userTagsAdded = mapDBXTeamLogUserTagsAddedTypeToDB(object: object.userTagsAdded)
        return DBTEAMLOGEventType(userTagsAdded: userTagsAdded)
    }
    if let object = object.asUserTagsRemoved {
        let userTagsRemoved = mapDBXTeamLogUserTagsRemovedTypeToDB(object: object.userTagsRemoved)
        return DBTEAMLOGEventType(userTagsRemoved: userTagsRemoved)
    }
    if let object = object.asEmailIngestReceiveFile {
        let emailIngestReceiveFile = mapDBXTeamLogEmailIngestReceiveFileTypeToDB(object: object.emailIngestReceiveFile)
        return DBTEAMLOGEventType(emailIngestReceiveFile: emailIngestReceiveFile)
    }
    if let object = object.asFileRequestChange {
        let fileRequestChange = mapDBXTeamLogFileRequestChangeTypeToDB(object: object.fileRequestChange)
        return DBTEAMLOGEventType(fileRequestChange: fileRequestChange)
    }
    if let object = object.asFileRequestClose {
        let fileRequestClose = mapDBXTeamLogFileRequestCloseTypeToDB(object: object.fileRequestClose)
        return DBTEAMLOGEventType(fileRequestClose: fileRequestClose)
    }
    if let object = object.asFileRequestCreate {
        let fileRequestCreate = mapDBXTeamLogFileRequestCreateTypeToDB(object: object.fileRequestCreate)
        return DBTEAMLOGEventType(fileRequestCreate: fileRequestCreate)
    }
    if let object = object.asFileRequestDelete {
        let fileRequestDelete = mapDBXTeamLogFileRequestDeleteTypeToDB(object: object.fileRequestDelete)
        return DBTEAMLOGEventType(fileRequestDelete: fileRequestDelete)
    }
    if let object = object.asFileRequestReceiveFile {
        let fileRequestReceiveFile = mapDBXTeamLogFileRequestReceiveFileTypeToDB(object: object.fileRequestReceiveFile)
        return DBTEAMLOGEventType(fileRequestReceiveFile: fileRequestReceiveFile)
    }
    if let object = object.asGroupAddExternalId {
        let groupAddExternalId = mapDBXTeamLogGroupAddExternalIdTypeToDB(object: object.groupAddExternalId)
        return DBTEAMLOGEventType(groupAddExternalId: groupAddExternalId)
    }
    if let object = object.asGroupAddMember {
        let groupAddMember = mapDBXTeamLogGroupAddMemberTypeToDB(object: object.groupAddMember)
        return DBTEAMLOGEventType(groupAddMember: groupAddMember)
    }
    if let object = object.asGroupChangeExternalId {
        let groupChangeExternalId = mapDBXTeamLogGroupChangeExternalIdTypeToDB(object: object.groupChangeExternalId)
        return DBTEAMLOGEventType(groupChangeExternalId: groupChangeExternalId)
    }
    if let object = object.asGroupChangeManagementType {
        let groupChangeManagementType = mapDBXTeamLogGroupChangeManagementTypeTypeToDB(object: object.groupChangeManagementType)
        return DBTEAMLOGEventType(groupChangeManagementType: groupChangeManagementType)
    }
    if let object = object.asGroupChangeMemberRole {
        let groupChangeMemberRole = mapDBXTeamLogGroupChangeMemberRoleTypeToDB(object: object.groupChangeMemberRole)
        return DBTEAMLOGEventType(groupChangeMemberRole: groupChangeMemberRole)
    }
    if let object = object.asGroupCreate {
        let groupCreate = mapDBXTeamLogGroupCreateTypeToDB(object: object.groupCreate)
        return DBTEAMLOGEventType(groupCreate: groupCreate)
    }
    if let object = object.asGroupDelete {
        let groupDelete = mapDBXTeamLogGroupDeleteTypeToDB(object: object.groupDelete)
        return DBTEAMLOGEventType(groupDelete: groupDelete)
    }
    if let object = object.asGroupDescriptionUpdated {
        let groupDescriptionUpdated = mapDBXTeamLogGroupDescriptionUpdatedTypeToDB(object: object.groupDescriptionUpdated)
        return DBTEAMLOGEventType(groupDescriptionUpdated: groupDescriptionUpdated)
    }
    if let object = object.asGroupJoinPolicyUpdated {
        let groupJoinPolicyUpdated = mapDBXTeamLogGroupJoinPolicyUpdatedTypeToDB(object: object.groupJoinPolicyUpdated)
        return DBTEAMLOGEventType(groupJoinPolicyUpdated: groupJoinPolicyUpdated)
    }
    if let object = object.asGroupMoved {
        let groupMoved = mapDBXTeamLogGroupMovedTypeToDB(object: object.groupMoved)
        return DBTEAMLOGEventType(groupMoved: groupMoved)
    }
    if let object = object.asGroupRemoveExternalId {
        let groupRemoveExternalId = mapDBXTeamLogGroupRemoveExternalIdTypeToDB(object: object.groupRemoveExternalId)
        return DBTEAMLOGEventType(groupRemoveExternalId: groupRemoveExternalId)
    }
    if let object = object.asGroupRemoveMember {
        let groupRemoveMember = mapDBXTeamLogGroupRemoveMemberTypeToDB(object: object.groupRemoveMember)
        return DBTEAMLOGEventType(groupRemoveMember: groupRemoveMember)
    }
    if let object = object.asGroupRename {
        let groupRename = mapDBXTeamLogGroupRenameTypeToDB(object: object.groupRename)
        return DBTEAMLOGEventType(groupRename: groupRename)
    }
    if let object = object.asAccountLockOrUnlocked {
        let accountLockOrUnlocked = mapDBXTeamLogAccountLockOrUnlockedTypeToDB(object: object.accountLockOrUnlocked)
        return DBTEAMLOGEventType(accountLockOrUnlocked: accountLockOrUnlocked)
    }
    if let object = object.asEmmError {
        let emmError = mapDBXTeamLogEmmErrorTypeToDB(object: object.emmError)
        return DBTEAMLOGEventType(emmError: emmError)
    }
    if let object = object.asGuestAdminSignedInViaTrustedTeams {
        let guestAdminSignedInViaTrustedTeams = mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsTypeToDB(object: object.guestAdminSignedInViaTrustedTeams)
        return DBTEAMLOGEventType(guestAdminSignedInViaTrustedTeams: guestAdminSignedInViaTrustedTeams)
    }
    if let object = object.asGuestAdminSignedOutViaTrustedTeams {
        let guestAdminSignedOutViaTrustedTeams = mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsTypeToDB(object: object.guestAdminSignedOutViaTrustedTeams)
        return DBTEAMLOGEventType(guestAdminSignedOutViaTrustedTeams: guestAdminSignedOutViaTrustedTeams)
    }
    if let object = object.asLoginFail {
        let loginFail = mapDBXTeamLogLoginFailTypeToDB(object: object.loginFail)
        return DBTEAMLOGEventType(loginFail: loginFail)
    }
    if let object = object.asLoginSuccess {
        let loginSuccess = mapDBXTeamLogLoginSuccessTypeToDB(object: object.loginSuccess)
        return DBTEAMLOGEventType(loginSuccess: loginSuccess)
    }
    if let object = object.asLogout {
        let logout = mapDBXTeamLogLogoutTypeToDB(object: object.logout)
        return DBTEAMLOGEventType(logout: logout)
    }
    if let object = object.asResellerSupportSessionEnd {
        let resellerSupportSessionEnd = mapDBXTeamLogResellerSupportSessionEndTypeToDB(object: object.resellerSupportSessionEnd)
        return DBTEAMLOGEventType(resellerSupportSessionEnd: resellerSupportSessionEnd)
    }
    if let object = object.asResellerSupportSessionStart {
        let resellerSupportSessionStart = mapDBXTeamLogResellerSupportSessionStartTypeToDB(object: object.resellerSupportSessionStart)
        return DBTEAMLOGEventType(resellerSupportSessionStart: resellerSupportSessionStart)
    }
    if let object = object.asSignInAsSessionEnd {
        let signInAsSessionEnd = mapDBXTeamLogSignInAsSessionEndTypeToDB(object: object.signInAsSessionEnd)
        return DBTEAMLOGEventType(signInAsSessionEnd: signInAsSessionEnd)
    }
    if let object = object.asSignInAsSessionStart {
        let signInAsSessionStart = mapDBXTeamLogSignInAsSessionStartTypeToDB(object: object.signInAsSessionStart)
        return DBTEAMLOGEventType(signInAsSessionStart: signInAsSessionStart)
    }
    if let object = object.asSsoError {
        let ssoError = mapDBXTeamLogSsoErrorTypeToDB(object: object.ssoError)
        return DBTEAMLOGEventType(ssoError: ssoError)
    }
    if let object = object.asBackupAdminInvitationSent {
        let backupAdminInvitationSent = mapDBXTeamLogBackupAdminInvitationSentTypeToDB(object: object.backupAdminInvitationSent)
        return DBTEAMLOGEventType(backupAdminInvitationSent: backupAdminInvitationSent)
    }
    if let object = object.asBackupInvitationOpened {
        let backupInvitationOpened = mapDBXTeamLogBackupInvitationOpenedTypeToDB(object: object.backupInvitationOpened)
        return DBTEAMLOGEventType(backupInvitationOpened: backupInvitationOpened)
    }
    if let object = object.asCreateTeamInviteLink {
        let createTeamInviteLink = mapDBXTeamLogCreateTeamInviteLinkTypeToDB(object: object.createTeamInviteLink)
        return DBTEAMLOGEventType(createTeamInviteLink: createTeamInviteLink)
    }
    if let object = object.asDeleteTeamInviteLink {
        let deleteTeamInviteLink = mapDBXTeamLogDeleteTeamInviteLinkTypeToDB(object: object.deleteTeamInviteLink)
        return DBTEAMLOGEventType(deleteTeamInviteLink: deleteTeamInviteLink)
    }
    if let object = object.asMemberAddExternalId {
        let memberAddExternalId = mapDBXTeamLogMemberAddExternalIdTypeToDB(object: object.memberAddExternalId)
        return DBTEAMLOGEventType(memberAddExternalId: memberAddExternalId)
    }
    if let object = object.asMemberAddName {
        let memberAddName = mapDBXTeamLogMemberAddNameTypeToDB(object: object.memberAddName)
        return DBTEAMLOGEventType(memberAddName: memberAddName)
    }
    if let object = object.asMemberChangeAdminRole {
        let memberChangeAdminRole = mapDBXTeamLogMemberChangeAdminRoleTypeToDB(object: object.memberChangeAdminRole)
        return DBTEAMLOGEventType(memberChangeAdminRole: memberChangeAdminRole)
    }
    if let object = object.asMemberChangeEmail {
        let memberChangeEmail = mapDBXTeamLogMemberChangeEmailTypeToDB(object: object.memberChangeEmail)
        return DBTEAMLOGEventType(memberChangeEmail: memberChangeEmail)
    }
    if let object = object.asMemberChangeExternalId {
        let memberChangeExternalId = mapDBXTeamLogMemberChangeExternalIdTypeToDB(object: object.memberChangeExternalId)
        return DBTEAMLOGEventType(memberChangeExternalId: memberChangeExternalId)
    }
    if let object = object.asMemberChangeMembershipType {
        let memberChangeMembershipType = mapDBXTeamLogMemberChangeMembershipTypeTypeToDB(object: object.memberChangeMembershipType)
        return DBTEAMLOGEventType(memberChangeMembershipType: memberChangeMembershipType)
    }
    if let object = object.asMemberChangeName {
        let memberChangeName = mapDBXTeamLogMemberChangeNameTypeToDB(object: object.memberChangeName)
        return DBTEAMLOGEventType(memberChangeName: memberChangeName)
    }
    if let object = object.asMemberChangeResellerRole {
        let memberChangeResellerRole = mapDBXTeamLogMemberChangeResellerRoleTypeToDB(object: object.memberChangeResellerRole)
        return DBTEAMLOGEventType(memberChangeResellerRole: memberChangeResellerRole)
    }
    if let object = object.asMemberChangeStatus {
        let memberChangeStatus = mapDBXTeamLogMemberChangeStatusTypeToDB(object: object.memberChangeStatus)
        return DBTEAMLOGEventType(memberChangeStatus: memberChangeStatus)
    }
    if let object = object.asMemberDeleteManualContacts {
        let memberDeleteManualContacts = mapDBXTeamLogMemberDeleteManualContactsTypeToDB(object: object.memberDeleteManualContacts)
        return DBTEAMLOGEventType(memberDeleteManualContacts: memberDeleteManualContacts)
    }
    if let object = object.asMemberDeleteProfilePhoto {
        let memberDeleteProfilePhoto = mapDBXTeamLogMemberDeleteProfilePhotoTypeToDB(object: object.memberDeleteProfilePhoto)
        return DBTEAMLOGEventType(memberDeleteProfilePhoto: memberDeleteProfilePhoto)
    }
    if let object = object.asMemberPermanentlyDeleteAccountContents {
        let memberPermanentlyDeleteAccountContents = mapDBXTeamLogMemberPermanentlyDeleteAccountContentsTypeToDB(
            object: object
                .memberPermanentlyDeleteAccountContents
        )
        return DBTEAMLOGEventType(memberPermanentlyDeleteAccountContents: memberPermanentlyDeleteAccountContents)
    }
    if let object = object.asMemberRemoveExternalId {
        let memberRemoveExternalId = mapDBXTeamLogMemberRemoveExternalIdTypeToDB(object: object.memberRemoveExternalId)
        return DBTEAMLOGEventType(memberRemoveExternalId: memberRemoveExternalId)
    }
    if let object = object.asMemberSetProfilePhoto {
        let memberSetProfilePhoto = mapDBXTeamLogMemberSetProfilePhotoTypeToDB(object: object.memberSetProfilePhoto)
        return DBTEAMLOGEventType(memberSetProfilePhoto: memberSetProfilePhoto)
    }
    if let object = object.asMemberSpaceLimitsAddCustomQuota {
        let memberSpaceLimitsAddCustomQuota = mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaTypeToDB(object: object.memberSpaceLimitsAddCustomQuota)
        return DBTEAMLOGEventType(memberSpaceLimitsAddCustomQuota: memberSpaceLimitsAddCustomQuota)
    }
    if let object = object.asMemberSpaceLimitsChangeCustomQuota {
        let memberSpaceLimitsChangeCustomQuota = mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaTypeToDB(object: object.memberSpaceLimitsChangeCustomQuota)
        return DBTEAMLOGEventType(memberSpaceLimitsChangeCustomQuota: memberSpaceLimitsChangeCustomQuota)
    }
    if let object = object.asMemberSpaceLimitsChangeStatus {
        let memberSpaceLimitsChangeStatus = mapDBXTeamLogMemberSpaceLimitsChangeStatusTypeToDB(object: object.memberSpaceLimitsChangeStatus)
        return DBTEAMLOGEventType(memberSpaceLimitsChangeStatus: memberSpaceLimitsChangeStatus)
    }
    if let object = object.asMemberSpaceLimitsRemoveCustomQuota {
        let memberSpaceLimitsRemoveCustomQuota = mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaTypeToDB(object: object.memberSpaceLimitsRemoveCustomQuota)
        return DBTEAMLOGEventType(memberSpaceLimitsRemoveCustomQuota: memberSpaceLimitsRemoveCustomQuota)
    }
    if let object = object.asMemberSuggest {
        let memberSuggest = mapDBXTeamLogMemberSuggestTypeToDB(object: object.memberSuggest)
        return DBTEAMLOGEventType(memberSuggest: memberSuggest)
    }
    if let object = object.asMemberTransferAccountContents {
        let memberTransferAccountContents = mapDBXTeamLogMemberTransferAccountContentsTypeToDB(object: object.memberTransferAccountContents)
        return DBTEAMLOGEventType(memberTransferAccountContents: memberTransferAccountContents)
    }
    if let object = object.asPendingSecondaryEmailAdded {
        let pendingSecondaryEmailAdded = mapDBXTeamLogPendingSecondaryEmailAddedTypeToDB(object: object.pendingSecondaryEmailAdded)
        return DBTEAMLOGEventType(pendingSecondaryEmailAdded: pendingSecondaryEmailAdded)
    }
    if let object = object.asSecondaryEmailDeleted {
        let secondaryEmailDeleted = mapDBXTeamLogSecondaryEmailDeletedTypeToDB(object: object.secondaryEmailDeleted)
        return DBTEAMLOGEventType(secondaryEmailDeleted: secondaryEmailDeleted)
    }
    if let object = object.asSecondaryEmailVerified {
        let secondaryEmailVerified = mapDBXTeamLogSecondaryEmailVerifiedTypeToDB(object: object.secondaryEmailVerified)
        return DBTEAMLOGEventType(secondaryEmailVerified: secondaryEmailVerified)
    }
    if let object = object.asSecondaryMailsPolicyChanged {
        let secondaryMailsPolicyChanged = mapDBXTeamLogSecondaryMailsPolicyChangedTypeToDB(object: object.secondaryMailsPolicyChanged)
        return DBTEAMLOGEventType(secondaryMailsPolicyChanged: secondaryMailsPolicyChanged)
    }
    if let object = object.asBinderAddPage {
        let binderAddPage = mapDBXTeamLogBinderAddPageTypeToDB(object: object.binderAddPage)
        return DBTEAMLOGEventType(binderAddPage: binderAddPage)
    }
    if let object = object.asBinderAddSection {
        let binderAddSection = mapDBXTeamLogBinderAddSectionTypeToDB(object: object.binderAddSection)
        return DBTEAMLOGEventType(binderAddSection: binderAddSection)
    }
    if let object = object.asBinderRemovePage {
        let binderRemovePage = mapDBXTeamLogBinderRemovePageTypeToDB(object: object.binderRemovePage)
        return DBTEAMLOGEventType(binderRemovePage: binderRemovePage)
    }
    if let object = object.asBinderRemoveSection {
        let binderRemoveSection = mapDBXTeamLogBinderRemoveSectionTypeToDB(object: object.binderRemoveSection)
        return DBTEAMLOGEventType(binderRemoveSection: binderRemoveSection)
    }
    if let object = object.asBinderRenamePage {
        let binderRenamePage = mapDBXTeamLogBinderRenamePageTypeToDB(object: object.binderRenamePage)
        return DBTEAMLOGEventType(binderRenamePage: binderRenamePage)
    }
    if let object = object.asBinderRenameSection {
        let binderRenameSection = mapDBXTeamLogBinderRenameSectionTypeToDB(object: object.binderRenameSection)
        return DBTEAMLOGEventType(binderRenameSection: binderRenameSection)
    }
    if let object = object.asBinderReorderPage {
        let binderReorderPage = mapDBXTeamLogBinderReorderPageTypeToDB(object: object.binderReorderPage)
        return DBTEAMLOGEventType(binderReorderPage: binderReorderPage)
    }
    if let object = object.asBinderReorderSection {
        let binderReorderSection = mapDBXTeamLogBinderReorderSectionTypeToDB(object: object.binderReorderSection)
        return DBTEAMLOGEventType(binderReorderSection: binderReorderSection)
    }
    if let object = object.asPaperContentAddMember {
        let paperContentAddMember = mapDBXTeamLogPaperContentAddMemberTypeToDB(object: object.paperContentAddMember)
        return DBTEAMLOGEventType(paperContentAddMember: paperContentAddMember)
    }
    if let object = object.asPaperContentAddToFolder {
        let paperContentAddToFolder = mapDBXTeamLogPaperContentAddToFolderTypeToDB(object: object.paperContentAddToFolder)
        return DBTEAMLOGEventType(paperContentAddToFolder: paperContentAddToFolder)
    }
    if let object = object.asPaperContentArchive {
        let paperContentArchive = mapDBXTeamLogPaperContentArchiveTypeToDB(object: object.paperContentArchive)
        return DBTEAMLOGEventType(paperContentArchive: paperContentArchive)
    }
    if let object = object.asPaperContentCreate {
        let paperContentCreate = mapDBXTeamLogPaperContentCreateTypeToDB(object: object.paperContentCreate)
        return DBTEAMLOGEventType(paperContentCreate: paperContentCreate)
    }
    if let object = object.asPaperContentPermanentlyDelete {
        let paperContentPermanentlyDelete = mapDBXTeamLogPaperContentPermanentlyDeleteTypeToDB(object: object.paperContentPermanentlyDelete)
        return DBTEAMLOGEventType(paperContentPermanentlyDelete: paperContentPermanentlyDelete)
    }
    if let object = object.asPaperContentRemoveFromFolder {
        let paperContentRemoveFromFolder = mapDBXTeamLogPaperContentRemoveFromFolderTypeToDB(object: object.paperContentRemoveFromFolder)
        return DBTEAMLOGEventType(paperContentRemoveFromFolder: paperContentRemoveFromFolder)
    }
    if let object = object.asPaperContentRemoveMember {
        let paperContentRemoveMember = mapDBXTeamLogPaperContentRemoveMemberTypeToDB(object: object.paperContentRemoveMember)
        return DBTEAMLOGEventType(paperContentRemoveMember: paperContentRemoveMember)
    }
    if let object = object.asPaperContentRename {
        let paperContentRename = mapDBXTeamLogPaperContentRenameTypeToDB(object: object.paperContentRename)
        return DBTEAMLOGEventType(paperContentRename: paperContentRename)
    }
    if let object = object.asPaperContentRestore {
        let paperContentRestore = mapDBXTeamLogPaperContentRestoreTypeToDB(object: object.paperContentRestore)
        return DBTEAMLOGEventType(paperContentRestore: paperContentRestore)
    }
    if let object = object.asPaperDocAddComment {
        let paperDocAddComment = mapDBXTeamLogPaperDocAddCommentTypeToDB(object: object.paperDocAddComment)
        return DBTEAMLOGEventType(paperDocAddComment: paperDocAddComment)
    }
    if let object = object.asPaperDocChangeMemberRole {
        let paperDocChangeMemberRole = mapDBXTeamLogPaperDocChangeMemberRoleTypeToDB(object: object.paperDocChangeMemberRole)
        return DBTEAMLOGEventType(paperDocChangeMemberRole: paperDocChangeMemberRole)
    }
    if let object = object.asPaperDocChangeSharingPolicy {
        let paperDocChangeSharingPolicy = mapDBXTeamLogPaperDocChangeSharingPolicyTypeToDB(object: object.paperDocChangeSharingPolicy)
        return DBTEAMLOGEventType(paperDocChangeSharingPolicy: paperDocChangeSharingPolicy)
    }
    if let object = object.asPaperDocChangeSubscription {
        let paperDocChangeSubscription = mapDBXTeamLogPaperDocChangeSubscriptionTypeToDB(object: object.paperDocChangeSubscription)
        return DBTEAMLOGEventType(paperDocChangeSubscription: paperDocChangeSubscription)
    }
    if let object = object.asPaperDocDeleted {
        let paperDocDeleted = mapDBXTeamLogPaperDocDeletedTypeToDB(object: object.paperDocDeleted)
        return DBTEAMLOGEventType(paperDocDeleted: paperDocDeleted)
    }
    if let object = object.asPaperDocDeleteComment {
        let paperDocDeleteComment = mapDBXTeamLogPaperDocDeleteCommentTypeToDB(object: object.paperDocDeleteComment)
        return DBTEAMLOGEventType(paperDocDeleteComment: paperDocDeleteComment)
    }
    if let object = object.asPaperDocDownload {
        let paperDocDownload = mapDBXTeamLogPaperDocDownloadTypeToDB(object: object.paperDocDownload)
        return DBTEAMLOGEventType(paperDocDownload: paperDocDownload)
    }
    if let object = object.asPaperDocEdit {
        let paperDocEdit = mapDBXTeamLogPaperDocEditTypeToDB(object: object.paperDocEdit)
        return DBTEAMLOGEventType(paperDocEdit: paperDocEdit)
    }
    if let object = object.asPaperDocEditComment {
        let paperDocEditComment = mapDBXTeamLogPaperDocEditCommentTypeToDB(object: object.paperDocEditComment)
        return DBTEAMLOGEventType(paperDocEditComment: paperDocEditComment)
    }
    if let object = object.asPaperDocFollowed {
        let paperDocFollowed = mapDBXTeamLogPaperDocFollowedTypeToDB(object: object.paperDocFollowed)
        return DBTEAMLOGEventType(paperDocFollowed: paperDocFollowed)
    }
    if let object = object.asPaperDocMention {
        let paperDocMention = mapDBXTeamLogPaperDocMentionTypeToDB(object: object.paperDocMention)
        return DBTEAMLOGEventType(paperDocMention: paperDocMention)
    }
    if let object = object.asPaperDocOwnershipChanged {
        let paperDocOwnershipChanged = mapDBXTeamLogPaperDocOwnershipChangedTypeToDB(object: object.paperDocOwnershipChanged)
        return DBTEAMLOGEventType(paperDocOwnershipChanged: paperDocOwnershipChanged)
    }
    if let object = object.asPaperDocRequestAccess {
        let paperDocRequestAccess = mapDBXTeamLogPaperDocRequestAccessTypeToDB(object: object.paperDocRequestAccess)
        return DBTEAMLOGEventType(paperDocRequestAccess: paperDocRequestAccess)
    }
    if let object = object.asPaperDocResolveComment {
        let paperDocResolveComment = mapDBXTeamLogPaperDocResolveCommentTypeToDB(object: object.paperDocResolveComment)
        return DBTEAMLOGEventType(paperDocResolveComment: paperDocResolveComment)
    }
    if let object = object.asPaperDocRevert {
        let paperDocRevert = mapDBXTeamLogPaperDocRevertTypeToDB(object: object.paperDocRevert)
        return DBTEAMLOGEventType(paperDocRevert: paperDocRevert)
    }
    if let object = object.asPaperDocSlackShare {
        let paperDocSlackShare = mapDBXTeamLogPaperDocSlackShareTypeToDB(object: object.paperDocSlackShare)
        return DBTEAMLOGEventType(paperDocSlackShare: paperDocSlackShare)
    }
    if let object = object.asPaperDocTeamInvite {
        let paperDocTeamInvite = mapDBXTeamLogPaperDocTeamInviteTypeToDB(object: object.paperDocTeamInvite)
        return DBTEAMLOGEventType(paperDocTeamInvite: paperDocTeamInvite)
    }
    if let object = object.asPaperDocTrashed {
        let paperDocTrashed = mapDBXTeamLogPaperDocTrashedTypeToDB(object: object.paperDocTrashed)
        return DBTEAMLOGEventType(paperDocTrashed: paperDocTrashed)
    }
    if let object = object.asPaperDocUnresolveComment {
        let paperDocUnresolveComment = mapDBXTeamLogPaperDocUnresolveCommentTypeToDB(object: object.paperDocUnresolveComment)
        return DBTEAMLOGEventType(paperDocUnresolveComment: paperDocUnresolveComment)
    }
    if let object = object.asPaperDocUntrashed {
        let paperDocUntrashed = mapDBXTeamLogPaperDocUntrashedTypeToDB(object: object.paperDocUntrashed)
        return DBTEAMLOGEventType(paperDocUntrashed: paperDocUntrashed)
    }
    if let object = object.asPaperDocView {
        let paperDocView = mapDBXTeamLogPaperDocViewTypeToDB(object: object.paperDocView)
        return DBTEAMLOGEventType(paperDocView: paperDocView)
    }
    if let object = object.asPaperExternalViewAllow {
        let paperExternalViewAllow = mapDBXTeamLogPaperExternalViewAllowTypeToDB(object: object.paperExternalViewAllow)
        return DBTEAMLOGEventType(paperExternalViewAllow: paperExternalViewAllow)
    }
    if let object = object.asPaperExternalViewDefaultTeam {
        let paperExternalViewDefaultTeam = mapDBXTeamLogPaperExternalViewDefaultTeamTypeToDB(object: object.paperExternalViewDefaultTeam)
        return DBTEAMLOGEventType(paperExternalViewDefaultTeam: paperExternalViewDefaultTeam)
    }
    if let object = object.asPaperExternalViewForbid {
        let paperExternalViewForbid = mapDBXTeamLogPaperExternalViewForbidTypeToDB(object: object.paperExternalViewForbid)
        return DBTEAMLOGEventType(paperExternalViewForbid: paperExternalViewForbid)
    }
    if let object = object.asPaperFolderChangeSubscription {
        let paperFolderChangeSubscription = mapDBXTeamLogPaperFolderChangeSubscriptionTypeToDB(object: object.paperFolderChangeSubscription)
        return DBTEAMLOGEventType(paperFolderChangeSubscription: paperFolderChangeSubscription)
    }
    if let object = object.asPaperFolderDeleted {
        let paperFolderDeleted = mapDBXTeamLogPaperFolderDeletedTypeToDB(object: object.paperFolderDeleted)
        return DBTEAMLOGEventType(paperFolderDeleted: paperFolderDeleted)
    }
    if let object = object.asPaperFolderFollowed {
        let paperFolderFollowed = mapDBXTeamLogPaperFolderFollowedTypeToDB(object: object.paperFolderFollowed)
        return DBTEAMLOGEventType(paperFolderFollowed: paperFolderFollowed)
    }
    if let object = object.asPaperFolderTeamInvite {
        let paperFolderTeamInvite = mapDBXTeamLogPaperFolderTeamInviteTypeToDB(object: object.paperFolderTeamInvite)
        return DBTEAMLOGEventType(paperFolderTeamInvite: paperFolderTeamInvite)
    }
    if let object = object.asPaperPublishedLinkChangePermission {
        let paperPublishedLinkChangePermission = mapDBXTeamLogPaperPublishedLinkChangePermissionTypeToDB(object: object.paperPublishedLinkChangePermission)
        return DBTEAMLOGEventType(paperPublishedLinkChangePermission: paperPublishedLinkChangePermission)
    }
    if let object = object.asPaperPublishedLinkCreate {
        let paperPublishedLinkCreate = mapDBXTeamLogPaperPublishedLinkCreateTypeToDB(object: object.paperPublishedLinkCreate)
        return DBTEAMLOGEventType(paperPublishedLinkCreate: paperPublishedLinkCreate)
    }
    if let object = object.asPaperPublishedLinkDisabled {
        let paperPublishedLinkDisabled = mapDBXTeamLogPaperPublishedLinkDisabledTypeToDB(object: object.paperPublishedLinkDisabled)
        return DBTEAMLOGEventType(paperPublishedLinkDisabled: paperPublishedLinkDisabled)
    }
    if let object = object.asPaperPublishedLinkView {
        let paperPublishedLinkView = mapDBXTeamLogPaperPublishedLinkViewTypeToDB(object: object.paperPublishedLinkView)
        return DBTEAMLOGEventType(paperPublishedLinkView: paperPublishedLinkView)
    }
    if let object = object.asPasswordChange {
        let passwordChange = mapDBXTeamLogPasswordChangeTypeToDB(object: object.passwordChange)
        return DBTEAMLOGEventType(passwordChange: passwordChange)
    }
    if let object = object.asPasswordReset {
        let passwordReset = mapDBXTeamLogPasswordResetTypeToDB(object: object.passwordReset)
        return DBTEAMLOGEventType(passwordReset: passwordReset)
    }
    if let object = object.asPasswordResetAll {
        let passwordResetAll = mapDBXTeamLogPasswordResetAllTypeToDB(object: object.passwordResetAll)
        return DBTEAMLOGEventType(passwordResetAll: passwordResetAll)
    }
    if let object = object.asClassificationCreateReport {
        let classificationCreateReport = mapDBXTeamLogClassificationCreateReportTypeToDB(object: object.classificationCreateReport)
        return DBTEAMLOGEventType(classificationCreateReport: classificationCreateReport)
    }
    if let object = object.asClassificationCreateReportFail {
        let classificationCreateReportFail = mapDBXTeamLogClassificationCreateReportFailTypeToDB(object: object.classificationCreateReportFail)
        return DBTEAMLOGEventType(classificationCreateReportFail: classificationCreateReportFail)
    }
    if let object = object.asEmmCreateExceptionsReport {
        let emmCreateExceptionsReport = mapDBXTeamLogEmmCreateExceptionsReportTypeToDB(object: object.emmCreateExceptionsReport)
        return DBTEAMLOGEventType(emmCreateExceptionsReport: emmCreateExceptionsReport)
    }
    if let object = object.asEmmCreateUsageReport {
        let emmCreateUsageReport = mapDBXTeamLogEmmCreateUsageReportTypeToDB(object: object.emmCreateUsageReport)
        return DBTEAMLOGEventType(emmCreateUsageReport: emmCreateUsageReport)
    }
    if let object = object.asExportMembersReport {
        let exportMembersReport = mapDBXTeamLogExportMembersReportTypeToDB(object: object.exportMembersReport)
        return DBTEAMLOGEventType(exportMembersReport: exportMembersReport)
    }
    if let object = object.asExportMembersReportFail {
        let exportMembersReportFail = mapDBXTeamLogExportMembersReportFailTypeToDB(object: object.exportMembersReportFail)
        return DBTEAMLOGEventType(exportMembersReportFail: exportMembersReportFail)
    }
    if let object = object.asExternalSharingCreateReport {
        let externalSharingCreateReport = mapDBXTeamLogExternalSharingCreateReportTypeToDB(object: object.externalSharingCreateReport)
        return DBTEAMLOGEventType(externalSharingCreateReport: externalSharingCreateReport)
    }
    if let object = object.asExternalSharingReportFailed {
        let externalSharingReportFailed = mapDBXTeamLogExternalSharingReportFailedTypeToDB(object: object.externalSharingReportFailed)
        return DBTEAMLOGEventType(externalSharingReportFailed: externalSharingReportFailed)
    }
    if let object = object.asNoExpirationLinkGenCreateReport {
        let noExpirationLinkGenCreateReport = mapDBXTeamLogNoExpirationLinkGenCreateReportTypeToDB(object: object.noExpirationLinkGenCreateReport)
        return DBTEAMLOGEventType(noExpirationLinkGenCreateReport: noExpirationLinkGenCreateReport)
    }
    if let object = object.asNoExpirationLinkGenReportFailed {
        let noExpirationLinkGenReportFailed = mapDBXTeamLogNoExpirationLinkGenReportFailedTypeToDB(object: object.noExpirationLinkGenReportFailed)
        return DBTEAMLOGEventType(noExpirationLinkGenReportFailed: noExpirationLinkGenReportFailed)
    }
    if let object = object.asNoPasswordLinkGenCreateReport {
        let noPasswordLinkGenCreateReport = mapDBXTeamLogNoPasswordLinkGenCreateReportTypeToDB(object: object.noPasswordLinkGenCreateReport)
        return DBTEAMLOGEventType(noPasswordLinkGenCreateReport: noPasswordLinkGenCreateReport)
    }
    if let object = object.asNoPasswordLinkGenReportFailed {
        let noPasswordLinkGenReportFailed = mapDBXTeamLogNoPasswordLinkGenReportFailedTypeToDB(object: object.noPasswordLinkGenReportFailed)
        return DBTEAMLOGEventType(noPasswordLinkGenReportFailed: noPasswordLinkGenReportFailed)
    }
    if let object = object.asNoPasswordLinkViewCreateReport {
        let noPasswordLinkViewCreateReport = mapDBXTeamLogNoPasswordLinkViewCreateReportTypeToDB(object: object.noPasswordLinkViewCreateReport)
        return DBTEAMLOGEventType(noPasswordLinkViewCreateReport: noPasswordLinkViewCreateReport)
    }
    if let object = object.asNoPasswordLinkViewReportFailed {
        let noPasswordLinkViewReportFailed = mapDBXTeamLogNoPasswordLinkViewReportFailedTypeToDB(object: object.noPasswordLinkViewReportFailed)
        return DBTEAMLOGEventType(noPasswordLinkViewReportFailed: noPasswordLinkViewReportFailed)
    }
    if let object = object.asOutdatedLinkViewCreateReport {
        let outdatedLinkViewCreateReport = mapDBXTeamLogOutdatedLinkViewCreateReportTypeToDB(object: object.outdatedLinkViewCreateReport)
        return DBTEAMLOGEventType(outdatedLinkViewCreateReport: outdatedLinkViewCreateReport)
    }
    if let object = object.asOutdatedLinkViewReportFailed {
        let outdatedLinkViewReportFailed = mapDBXTeamLogOutdatedLinkViewReportFailedTypeToDB(object: object.outdatedLinkViewReportFailed)
        return DBTEAMLOGEventType(outdatedLinkViewReportFailed: outdatedLinkViewReportFailed)
    }
    if let object = object.asPaperAdminExportStart {
        let paperAdminExportStart = mapDBXTeamLogPaperAdminExportStartTypeToDB(object: object.paperAdminExportStart)
        return DBTEAMLOGEventType(paperAdminExportStart: paperAdminExportStart)
    }
    if let object = object.asRansomwareAlertCreateReport {
        let ransomwareAlertCreateReport = mapDBXTeamLogRansomwareAlertCreateReportTypeToDB(object: object.ransomwareAlertCreateReport)
        return DBTEAMLOGEventType(ransomwareAlertCreateReport: ransomwareAlertCreateReport)
    }
    if let object = object.asRansomwareAlertCreateReportFailed {
        let ransomwareAlertCreateReportFailed = mapDBXTeamLogRansomwareAlertCreateReportFailedTypeToDB(object: object.ransomwareAlertCreateReportFailed)
        return DBTEAMLOGEventType(ransomwareAlertCreateReportFailed: ransomwareAlertCreateReportFailed)
    }
    if let object = object.asSmartSyncCreateAdminPrivilegeReport {
        let smartSyncCreateAdminPrivilegeReport = mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportTypeToDB(object: object.smartSyncCreateAdminPrivilegeReport)
        return DBTEAMLOGEventType(smartSyncCreateAdminPrivilegeReport: smartSyncCreateAdminPrivilegeReport)
    }
    if let object = object.asTeamActivityCreateReport {
        let teamActivityCreateReport = mapDBXTeamLogTeamActivityCreateReportTypeToDB(object: object.teamActivityCreateReport)
        return DBTEAMLOGEventType(teamActivityCreateReport: teamActivityCreateReport)
    }
    if let object = object.asTeamActivityCreateReportFail {
        let teamActivityCreateReportFail = mapDBXTeamLogTeamActivityCreateReportFailTypeToDB(object: object.teamActivityCreateReportFail)
        return DBTEAMLOGEventType(teamActivityCreateReportFail: teamActivityCreateReportFail)
    }
    if let object = object.asCollectionShare {
        let collectionShare = mapDBXTeamLogCollectionShareTypeToDB(object: object.collectionShare)
        return DBTEAMLOGEventType(collectionShare: collectionShare)
    }
    if let object = object.asFileTransfersFileAdd {
        let fileTransfersFileAdd = mapDBXTeamLogFileTransfersFileAddTypeToDB(object: object.fileTransfersFileAdd)
        return DBTEAMLOGEventType(fileTransfersFileAdd: fileTransfersFileAdd)
    }
    if let object = object.asFileTransfersTransferDelete {
        let fileTransfersTransferDelete = mapDBXTeamLogFileTransfersTransferDeleteTypeToDB(object: object.fileTransfersTransferDelete)
        return DBTEAMLOGEventType(fileTransfersTransferDelete: fileTransfersTransferDelete)
    }
    if let object = object.asFileTransfersTransferDownload {
        let fileTransfersTransferDownload = mapDBXTeamLogFileTransfersTransferDownloadTypeToDB(object: object.fileTransfersTransferDownload)
        return DBTEAMLOGEventType(fileTransfersTransferDownload: fileTransfersTransferDownload)
    }
    if let object = object.asFileTransfersTransferSend {
        let fileTransfersTransferSend = mapDBXTeamLogFileTransfersTransferSendTypeToDB(object: object.fileTransfersTransferSend)
        return DBTEAMLOGEventType(fileTransfersTransferSend: fileTransfersTransferSend)
    }
    if let object = object.asFileTransfersTransferView {
        let fileTransfersTransferView = mapDBXTeamLogFileTransfersTransferViewTypeToDB(object: object.fileTransfersTransferView)
        return DBTEAMLOGEventType(fileTransfersTransferView: fileTransfersTransferView)
    }
    if let object = object.asNoteAclInviteOnly {
        let noteAclInviteOnly = mapDBXTeamLogNoteAclInviteOnlyTypeToDB(object: object.noteAclInviteOnly)
        return DBTEAMLOGEventType(noteAclInviteOnly: noteAclInviteOnly)
    }
    if let object = object.asNoteAclLink {
        let noteAclLink = mapDBXTeamLogNoteAclLinkTypeToDB(object: object.noteAclLink)
        return DBTEAMLOGEventType(noteAclLink: noteAclLink)
    }
    if let object = object.asNoteAclTeamLink {
        let noteAclTeamLink = mapDBXTeamLogNoteAclTeamLinkTypeToDB(object: object.noteAclTeamLink)
        return DBTEAMLOGEventType(noteAclTeamLink: noteAclTeamLink)
    }
    if let object = object.asNoteShared {
        let noteShared = mapDBXTeamLogNoteSharedTypeToDB(object: object.noteShared)
        return DBTEAMLOGEventType(noteShared: noteShared)
    }
    if let object = object.asNoteShareReceive {
        let noteShareReceive = mapDBXTeamLogNoteShareReceiveTypeToDB(object: object.noteShareReceive)
        return DBTEAMLOGEventType(noteShareReceive: noteShareReceive)
    }
    if let object = object.asOpenNoteShared {
        let openNoteShared = mapDBXTeamLogOpenNoteSharedTypeToDB(object: object.openNoteShared)
        return DBTEAMLOGEventType(openNoteShared: openNoteShared)
    }
    if let object = object.asReplayFileSharedLinkCreated {
        let replayFileSharedLinkCreated = mapDBXTeamLogReplayFileSharedLinkCreatedTypeToDB(object: object.replayFileSharedLinkCreated)
        return DBTEAMLOGEventType(replayFileSharedLinkCreated: replayFileSharedLinkCreated)
    }
    if let object = object.asReplayFileSharedLinkModified {
        let replayFileSharedLinkModified = mapDBXTeamLogReplayFileSharedLinkModifiedTypeToDB(object: object.replayFileSharedLinkModified)
        return DBTEAMLOGEventType(replayFileSharedLinkModified: replayFileSharedLinkModified)
    }
    if let object = object.asReplayProjectTeamAdd {
        let replayProjectTeamAdd = mapDBXTeamLogReplayProjectTeamAddTypeToDB(object: object.replayProjectTeamAdd)
        return DBTEAMLOGEventType(replayProjectTeamAdd: replayProjectTeamAdd)
    }
    if let object = object.asReplayProjectTeamDelete {
        let replayProjectTeamDelete = mapDBXTeamLogReplayProjectTeamDeleteTypeToDB(object: object.replayProjectTeamDelete)
        return DBTEAMLOGEventType(replayProjectTeamDelete: replayProjectTeamDelete)
    }
    if let object = object.asSfAddGroup {
        let sfAddGroup = mapDBXTeamLogSfAddGroupTypeToDB(object: object.sfAddGroup)
        return DBTEAMLOGEventType(sfAddGroup: sfAddGroup)
    }
    if let object = object.asSfAllowNonMembersToViewSharedLinks {
        let sfAllowNonMembersToViewSharedLinks = mapDBXTeamLogSfAllowNonMembersToViewSharedLinksTypeToDB(object: object.sfAllowNonMembersToViewSharedLinks)
        return DBTEAMLOGEventType(sfAllowNonMembersToViewSharedLinks: sfAllowNonMembersToViewSharedLinks)
    }
    if let object = object.asSfExternalInviteWarn {
        let sfExternalInviteWarn = mapDBXTeamLogSfExternalInviteWarnTypeToDB(object: object.sfExternalInviteWarn)
        return DBTEAMLOGEventType(sfExternalInviteWarn: sfExternalInviteWarn)
    }
    if let object = object.asSfFbInvite {
        let sfFbInvite = mapDBXTeamLogSfFbInviteTypeToDB(object: object.sfFbInvite)
        return DBTEAMLOGEventType(sfFbInvite: sfFbInvite)
    }
    if let object = object.asSfFbInviteChangeRole {
        let sfFbInviteChangeRole = mapDBXTeamLogSfFbInviteChangeRoleTypeToDB(object: object.sfFbInviteChangeRole)
        return DBTEAMLOGEventType(sfFbInviteChangeRole: sfFbInviteChangeRole)
    }
    if let object = object.asSfFbUninvite {
        let sfFbUninvite = mapDBXTeamLogSfFbUninviteTypeToDB(object: object.sfFbUninvite)
        return DBTEAMLOGEventType(sfFbUninvite: sfFbUninvite)
    }
    if let object = object.asSfInviteGroup {
        let sfInviteGroup = mapDBXTeamLogSfInviteGroupTypeToDB(object: object.sfInviteGroup)
        return DBTEAMLOGEventType(sfInviteGroup: sfInviteGroup)
    }
    if let object = object.asSfTeamGrantAccess {
        let sfTeamGrantAccess = mapDBXTeamLogSfTeamGrantAccessTypeToDB(object: object.sfTeamGrantAccess)
        return DBTEAMLOGEventType(sfTeamGrantAccess: sfTeamGrantAccess)
    }
    if let object = object.asSfTeamInvite {
        let sfTeamInvite = mapDBXTeamLogSfTeamInviteTypeToDB(object: object.sfTeamInvite)
        return DBTEAMLOGEventType(sfTeamInvite: sfTeamInvite)
    }
    if let object = object.asSfTeamInviteChangeRole {
        let sfTeamInviteChangeRole = mapDBXTeamLogSfTeamInviteChangeRoleTypeToDB(object: object.sfTeamInviteChangeRole)
        return DBTEAMLOGEventType(sfTeamInviteChangeRole: sfTeamInviteChangeRole)
    }
    if let object = object.asSfTeamJoin {
        let sfTeamJoin = mapDBXTeamLogSfTeamJoinTypeToDB(object: object.sfTeamJoin)
        return DBTEAMLOGEventType(sfTeamJoin: sfTeamJoin)
    }
    if let object = object.asSfTeamJoinFromOobLink {
        let sfTeamJoinFromOobLink = mapDBXTeamLogSfTeamJoinFromOobLinkTypeToDB(object: object.sfTeamJoinFromOobLink)
        return DBTEAMLOGEventType(sfTeamJoinFromOobLink: sfTeamJoinFromOobLink)
    }
    if let object = object.asSfTeamUninvite {
        let sfTeamUninvite = mapDBXTeamLogSfTeamUninviteTypeToDB(object: object.sfTeamUninvite)
        return DBTEAMLOGEventType(sfTeamUninvite: sfTeamUninvite)
    }
    if let object = object.asSharedContentAddInvitees {
        let sharedContentAddInvitees = mapDBXTeamLogSharedContentAddInviteesTypeToDB(object: object.sharedContentAddInvitees)
        return DBTEAMLOGEventType(sharedContentAddInvitees: sharedContentAddInvitees)
    }
    if let object = object.asSharedContentAddLinkExpiry {
        let sharedContentAddLinkExpiry = mapDBXTeamLogSharedContentAddLinkExpiryTypeToDB(object: object.sharedContentAddLinkExpiry)
        return DBTEAMLOGEventType(sharedContentAddLinkExpiry: sharedContentAddLinkExpiry)
    }
    if let object = object.asSharedContentAddLinkPassword {
        let sharedContentAddLinkPassword = mapDBXTeamLogSharedContentAddLinkPasswordTypeToDB(object: object.sharedContentAddLinkPassword)
        return DBTEAMLOGEventType(sharedContentAddLinkPassword: sharedContentAddLinkPassword)
    }
    if let object = object.asSharedContentAddMember {
        let sharedContentAddMember = mapDBXTeamLogSharedContentAddMemberTypeToDB(object: object.sharedContentAddMember)
        return DBTEAMLOGEventType(sharedContentAddMember: sharedContentAddMember)
    }
    if let object = object.asSharedContentChangeDownloadsPolicy {
        let sharedContentChangeDownloadsPolicy = mapDBXTeamLogSharedContentChangeDownloadsPolicyTypeToDB(object: object.sharedContentChangeDownloadsPolicy)
        return DBTEAMLOGEventType(sharedContentChangeDownloadsPolicy: sharedContentChangeDownloadsPolicy)
    }
    if let object = object.asSharedContentChangeInviteeRole {
        let sharedContentChangeInviteeRole = mapDBXTeamLogSharedContentChangeInviteeRoleTypeToDB(object: object.sharedContentChangeInviteeRole)
        return DBTEAMLOGEventType(sharedContentChangeInviteeRole: sharedContentChangeInviteeRole)
    }
    if let object = object.asSharedContentChangeLinkAudience {
        let sharedContentChangeLinkAudience = mapDBXTeamLogSharedContentChangeLinkAudienceTypeToDB(object: object.sharedContentChangeLinkAudience)
        return DBTEAMLOGEventType(sharedContentChangeLinkAudience: sharedContentChangeLinkAudience)
    }
    if let object = object.asSharedContentChangeLinkExpiry {
        let sharedContentChangeLinkExpiry = mapDBXTeamLogSharedContentChangeLinkExpiryTypeToDB(object: object.sharedContentChangeLinkExpiry)
        return DBTEAMLOGEventType(sharedContentChangeLinkExpiry: sharedContentChangeLinkExpiry)
    }
    if let object = object.asSharedContentChangeLinkPassword {
        let sharedContentChangeLinkPassword = mapDBXTeamLogSharedContentChangeLinkPasswordTypeToDB(object: object.sharedContentChangeLinkPassword)
        return DBTEAMLOGEventType(sharedContentChangeLinkPassword: sharedContentChangeLinkPassword)
    }
    if let object = object.asSharedContentChangeMemberRole {
        let sharedContentChangeMemberRole = mapDBXTeamLogSharedContentChangeMemberRoleTypeToDB(object: object.sharedContentChangeMemberRole)
        return DBTEAMLOGEventType(sharedContentChangeMemberRole: sharedContentChangeMemberRole)
    }
    if let object = object.asSharedContentChangeViewerInfoPolicy {
        let sharedContentChangeViewerInfoPolicy = mapDBXTeamLogSharedContentChangeViewerInfoPolicyTypeToDB(object: object.sharedContentChangeViewerInfoPolicy)
        return DBTEAMLOGEventType(sharedContentChangeViewerInfoPolicy: sharedContentChangeViewerInfoPolicy)
    }
    if let object = object.asSharedContentClaimInvitation {
        let sharedContentClaimInvitation = mapDBXTeamLogSharedContentClaimInvitationTypeToDB(object: object.sharedContentClaimInvitation)
        return DBTEAMLOGEventType(sharedContentClaimInvitation: sharedContentClaimInvitation)
    }
    if let object = object.asSharedContentCopy {
        let sharedContentCopy = mapDBXTeamLogSharedContentCopyTypeToDB(object: object.sharedContentCopy)
        return DBTEAMLOGEventType(sharedContentCopy: sharedContentCopy)
    }
    if let object = object.asSharedContentDownload {
        let sharedContentDownload = mapDBXTeamLogSharedContentDownloadTypeToDB(object: object.sharedContentDownload)
        return DBTEAMLOGEventType(sharedContentDownload: sharedContentDownload)
    }
    if let object = object.asSharedContentRelinquishMembership {
        let sharedContentRelinquishMembership = mapDBXTeamLogSharedContentRelinquishMembershipTypeToDB(object: object.sharedContentRelinquishMembership)
        return DBTEAMLOGEventType(sharedContentRelinquishMembership: sharedContentRelinquishMembership)
    }
    if let object = object.asSharedContentRemoveInvitees {
        let sharedContentRemoveInvitees = mapDBXTeamLogSharedContentRemoveInviteesTypeToDB(object: object.sharedContentRemoveInvitees)
        return DBTEAMLOGEventType(sharedContentRemoveInvitees: sharedContentRemoveInvitees)
    }
    if let object = object.asSharedContentRemoveLinkExpiry {
        let sharedContentRemoveLinkExpiry = mapDBXTeamLogSharedContentRemoveLinkExpiryTypeToDB(object: object.sharedContentRemoveLinkExpiry)
        return DBTEAMLOGEventType(sharedContentRemoveLinkExpiry: sharedContentRemoveLinkExpiry)
    }
    if let object = object.asSharedContentRemoveLinkPassword {
        let sharedContentRemoveLinkPassword = mapDBXTeamLogSharedContentRemoveLinkPasswordTypeToDB(object: object.sharedContentRemoveLinkPassword)
        return DBTEAMLOGEventType(sharedContentRemoveLinkPassword: sharedContentRemoveLinkPassword)
    }
    if let object = object.asSharedContentRemoveMember {
        let sharedContentRemoveMember = mapDBXTeamLogSharedContentRemoveMemberTypeToDB(object: object.sharedContentRemoveMember)
        return DBTEAMLOGEventType(sharedContentRemoveMember: sharedContentRemoveMember)
    }
    if let object = object.asSharedContentRequestAccess {
        let sharedContentRequestAccess = mapDBXTeamLogSharedContentRequestAccessTypeToDB(object: object.sharedContentRequestAccess)
        return DBTEAMLOGEventType(sharedContentRequestAccess: sharedContentRequestAccess)
    }
    if let object = object.asSharedContentRestoreInvitees {
        let sharedContentRestoreInvitees = mapDBXTeamLogSharedContentRestoreInviteesTypeToDB(object: object.sharedContentRestoreInvitees)
        return DBTEAMLOGEventType(sharedContentRestoreInvitees: sharedContentRestoreInvitees)
    }
    if let object = object.asSharedContentRestoreMember {
        let sharedContentRestoreMember = mapDBXTeamLogSharedContentRestoreMemberTypeToDB(object: object.sharedContentRestoreMember)
        return DBTEAMLOGEventType(sharedContentRestoreMember: sharedContentRestoreMember)
    }
    if let object = object.asSharedContentUnshare {
        let sharedContentUnshare = mapDBXTeamLogSharedContentUnshareTypeToDB(object: object.sharedContentUnshare)
        return DBTEAMLOGEventType(sharedContentUnshare: sharedContentUnshare)
    }
    if let object = object.asSharedContentView {
        let sharedContentView = mapDBXTeamLogSharedContentViewTypeToDB(object: object.sharedContentView)
        return DBTEAMLOGEventType(sharedContentView: sharedContentView)
    }
    if let object = object.asSharedFolderChangeLinkPolicy {
        let sharedFolderChangeLinkPolicy = mapDBXTeamLogSharedFolderChangeLinkPolicyTypeToDB(object: object.sharedFolderChangeLinkPolicy)
        return DBTEAMLOGEventType(sharedFolderChangeLinkPolicy: sharedFolderChangeLinkPolicy)
    }
    if let object = object.asSharedFolderChangeMembersInheritancePolicy {
        let sharedFolderChangeMembersInheritancePolicy = mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyTypeToDB(
            object: object
                .sharedFolderChangeMembersInheritancePolicy
        )
        return DBTEAMLOGEventType(sharedFolderChangeMembersInheritancePolicy: sharedFolderChangeMembersInheritancePolicy)
    }
    if let object = object.asSharedFolderChangeMembersManagementPolicy {
        let sharedFolderChangeMembersManagementPolicy = mapDBXTeamLogSharedFolderChangeMembersManagementPolicyTypeToDB(
            object: object
                .sharedFolderChangeMembersManagementPolicy
        )
        return DBTEAMLOGEventType(sharedFolderChangeMembersManagementPolicy: sharedFolderChangeMembersManagementPolicy)
    }
    if let object = object.asSharedFolderChangeMembersPolicy {
        let sharedFolderChangeMembersPolicy = mapDBXTeamLogSharedFolderChangeMembersPolicyTypeToDB(object: object.sharedFolderChangeMembersPolicy)
        return DBTEAMLOGEventType(sharedFolderChangeMembersPolicy: sharedFolderChangeMembersPolicy)
    }
    if let object = object.asSharedFolderCreate {
        let sharedFolderCreate = mapDBXTeamLogSharedFolderCreateTypeToDB(object: object.sharedFolderCreate)
        return DBTEAMLOGEventType(sharedFolderCreate: sharedFolderCreate)
    }
    if let object = object.asSharedFolderDeclineInvitation {
        let sharedFolderDeclineInvitation = mapDBXTeamLogSharedFolderDeclineInvitationTypeToDB(object: object.sharedFolderDeclineInvitation)
        return DBTEAMLOGEventType(sharedFolderDeclineInvitation: sharedFolderDeclineInvitation)
    }
    if let object = object.asSharedFolderMount {
        let sharedFolderMount = mapDBXTeamLogSharedFolderMountTypeToDB(object: object.sharedFolderMount)
        return DBTEAMLOGEventType(sharedFolderMount: sharedFolderMount)
    }
    if let object = object.asSharedFolderNest {
        let sharedFolderNest = mapDBXTeamLogSharedFolderNestTypeToDB(object: object.sharedFolderNest)
        return DBTEAMLOGEventType(sharedFolderNest: sharedFolderNest)
    }
    if let object = object.asSharedFolderTransferOwnership {
        let sharedFolderTransferOwnership = mapDBXTeamLogSharedFolderTransferOwnershipTypeToDB(object: object.sharedFolderTransferOwnership)
        return DBTEAMLOGEventType(sharedFolderTransferOwnership: sharedFolderTransferOwnership)
    }
    if let object = object.asSharedFolderUnmount {
        let sharedFolderUnmount = mapDBXTeamLogSharedFolderUnmountTypeToDB(object: object.sharedFolderUnmount)
        return DBTEAMLOGEventType(sharedFolderUnmount: sharedFolderUnmount)
    }
    if let object = object.asSharedLinkAddExpiry {
        let sharedLinkAddExpiry = mapDBXTeamLogSharedLinkAddExpiryTypeToDB(object: object.sharedLinkAddExpiry)
        return DBTEAMLOGEventType(sharedLinkAddExpiry: sharedLinkAddExpiry)
    }
    if let object = object.asSharedLinkChangeExpiry {
        let sharedLinkChangeExpiry = mapDBXTeamLogSharedLinkChangeExpiryTypeToDB(object: object.sharedLinkChangeExpiry)
        return DBTEAMLOGEventType(sharedLinkChangeExpiry: sharedLinkChangeExpiry)
    }
    if let object = object.asSharedLinkChangeVisibility {
        let sharedLinkChangeVisibility = mapDBXTeamLogSharedLinkChangeVisibilityTypeToDB(object: object.sharedLinkChangeVisibility)
        return DBTEAMLOGEventType(sharedLinkChangeVisibility: sharedLinkChangeVisibility)
    }
    if let object = object.asSharedLinkCopy {
        let sharedLinkCopy = mapDBXTeamLogSharedLinkCopyTypeToDB(object: object.sharedLinkCopy)
        return DBTEAMLOGEventType(sharedLinkCopy: sharedLinkCopy)
    }
    if let object = object.asSharedLinkCreate {
        let sharedLinkCreate = mapDBXTeamLogSharedLinkCreateTypeToDB(object: object.sharedLinkCreate)
        return DBTEAMLOGEventType(sharedLinkCreate: sharedLinkCreate)
    }
    if let object = object.asSharedLinkDisable {
        let sharedLinkDisable = mapDBXTeamLogSharedLinkDisableTypeToDB(object: object.sharedLinkDisable)
        return DBTEAMLOGEventType(sharedLinkDisable: sharedLinkDisable)
    }
    if let object = object.asSharedLinkDownload {
        let sharedLinkDownload = mapDBXTeamLogSharedLinkDownloadTypeToDB(object: object.sharedLinkDownload)
        return DBTEAMLOGEventType(sharedLinkDownload: sharedLinkDownload)
    }
    if let object = object.asSharedLinkRemoveExpiry {
        let sharedLinkRemoveExpiry = mapDBXTeamLogSharedLinkRemoveExpiryTypeToDB(object: object.sharedLinkRemoveExpiry)
        return DBTEAMLOGEventType(sharedLinkRemoveExpiry: sharedLinkRemoveExpiry)
    }
    if let object = object.asSharedLinkSettingsAddExpiration {
        let sharedLinkSettingsAddExpiration = mapDBXTeamLogSharedLinkSettingsAddExpirationTypeToDB(object: object.sharedLinkSettingsAddExpiration)
        return DBTEAMLOGEventType(sharedLinkSettingsAddExpiration: sharedLinkSettingsAddExpiration)
    }
    if let object = object.asSharedLinkSettingsAddPassword {
        let sharedLinkSettingsAddPassword = mapDBXTeamLogSharedLinkSettingsAddPasswordTypeToDB(object: object.sharedLinkSettingsAddPassword)
        return DBTEAMLOGEventType(sharedLinkSettingsAddPassword: sharedLinkSettingsAddPassword)
    }
    if let object = object.asSharedLinkSettingsAllowDownloadDisabled {
        let sharedLinkSettingsAllowDownloadDisabled = mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledTypeToDB(
            object: object
                .sharedLinkSettingsAllowDownloadDisabled
        )
        return DBTEAMLOGEventType(sharedLinkSettingsAllowDownloadDisabled: sharedLinkSettingsAllowDownloadDisabled)
    }
    if let object = object.asSharedLinkSettingsAllowDownloadEnabled {
        let sharedLinkSettingsAllowDownloadEnabled = mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledTypeToDB(
            object: object
                .sharedLinkSettingsAllowDownloadEnabled
        )
        return DBTEAMLOGEventType(sharedLinkSettingsAllowDownloadEnabled: sharedLinkSettingsAllowDownloadEnabled)
    }
    if let object = object.asSharedLinkSettingsChangeAudience {
        let sharedLinkSettingsChangeAudience = mapDBXTeamLogSharedLinkSettingsChangeAudienceTypeToDB(object: object.sharedLinkSettingsChangeAudience)
        return DBTEAMLOGEventType(sharedLinkSettingsChangeAudience: sharedLinkSettingsChangeAudience)
    }
    if let object = object.asSharedLinkSettingsChangeExpiration {
        let sharedLinkSettingsChangeExpiration = mapDBXTeamLogSharedLinkSettingsChangeExpirationTypeToDB(object: object.sharedLinkSettingsChangeExpiration)
        return DBTEAMLOGEventType(sharedLinkSettingsChangeExpiration: sharedLinkSettingsChangeExpiration)
    }
    if let object = object.asSharedLinkSettingsChangePassword {
        let sharedLinkSettingsChangePassword = mapDBXTeamLogSharedLinkSettingsChangePasswordTypeToDB(object: object.sharedLinkSettingsChangePassword)
        return DBTEAMLOGEventType(sharedLinkSettingsChangePassword: sharedLinkSettingsChangePassword)
    }
    if let object = object.asSharedLinkSettingsRemoveExpiration {
        let sharedLinkSettingsRemoveExpiration = mapDBXTeamLogSharedLinkSettingsRemoveExpirationTypeToDB(object: object.sharedLinkSettingsRemoveExpiration)
        return DBTEAMLOGEventType(sharedLinkSettingsRemoveExpiration: sharedLinkSettingsRemoveExpiration)
    }
    if let object = object.asSharedLinkSettingsRemovePassword {
        let sharedLinkSettingsRemovePassword = mapDBXTeamLogSharedLinkSettingsRemovePasswordTypeToDB(object: object.sharedLinkSettingsRemovePassword)
        return DBTEAMLOGEventType(sharedLinkSettingsRemovePassword: sharedLinkSettingsRemovePassword)
    }
    if let object = object.asSharedLinkShare {
        let sharedLinkShare = mapDBXTeamLogSharedLinkShareTypeToDB(object: object.sharedLinkShare)
        return DBTEAMLOGEventType(sharedLinkShare: sharedLinkShare)
    }
    if let object = object.asSharedLinkView {
        let sharedLinkView = mapDBXTeamLogSharedLinkViewTypeToDB(object: object.sharedLinkView)
        return DBTEAMLOGEventType(sharedLinkView: sharedLinkView)
    }
    if let object = object.asSharedNoteOpened {
        let sharedNoteOpened = mapDBXTeamLogSharedNoteOpenedTypeToDB(object: object.sharedNoteOpened)
        return DBTEAMLOGEventType(sharedNoteOpened: sharedNoteOpened)
    }
    if let object = object.asShmodelDisableDownloads {
        let shmodelDisableDownloads = mapDBXTeamLogShmodelDisableDownloadsTypeToDB(object: object.shmodelDisableDownloads)
        return DBTEAMLOGEventType(shmodelDisableDownloads: shmodelDisableDownloads)
    }
    if let object = object.asShmodelEnableDownloads {
        let shmodelEnableDownloads = mapDBXTeamLogShmodelEnableDownloadsTypeToDB(object: object.shmodelEnableDownloads)
        return DBTEAMLOGEventType(shmodelEnableDownloads: shmodelEnableDownloads)
    }
    if let object = object.asShmodelGroupShare {
        let shmodelGroupShare = mapDBXTeamLogShmodelGroupShareTypeToDB(object: object.shmodelGroupShare)
        return DBTEAMLOGEventType(shmodelGroupShare: shmodelGroupShare)
    }
    if let object = object.asShowcaseAccessGranted {
        let showcaseAccessGranted = mapDBXTeamLogShowcaseAccessGrantedTypeToDB(object: object.showcaseAccessGranted)
        return DBTEAMLOGEventType(showcaseAccessGranted: showcaseAccessGranted)
    }
    if let object = object.asShowcaseAddMember {
        let showcaseAddMember = mapDBXTeamLogShowcaseAddMemberTypeToDB(object: object.showcaseAddMember)
        return DBTEAMLOGEventType(showcaseAddMember: showcaseAddMember)
    }
    if let object = object.asShowcaseArchived {
        let showcaseArchived = mapDBXTeamLogShowcaseArchivedTypeToDB(object: object.showcaseArchived)
        return DBTEAMLOGEventType(showcaseArchived: showcaseArchived)
    }
    if let object = object.asShowcaseCreated {
        let showcaseCreated = mapDBXTeamLogShowcaseCreatedTypeToDB(object: object.showcaseCreated)
        return DBTEAMLOGEventType(showcaseCreated: showcaseCreated)
    }
    if let object = object.asShowcaseDeleteComment {
        let showcaseDeleteComment = mapDBXTeamLogShowcaseDeleteCommentTypeToDB(object: object.showcaseDeleteComment)
        return DBTEAMLOGEventType(showcaseDeleteComment: showcaseDeleteComment)
    }
    if let object = object.asShowcaseEdited {
        let showcaseEdited = mapDBXTeamLogShowcaseEditedTypeToDB(object: object.showcaseEdited)
        return DBTEAMLOGEventType(showcaseEdited: showcaseEdited)
    }
    if let object = object.asShowcaseEditComment {
        let showcaseEditComment = mapDBXTeamLogShowcaseEditCommentTypeToDB(object: object.showcaseEditComment)
        return DBTEAMLOGEventType(showcaseEditComment: showcaseEditComment)
    }
    if let object = object.asShowcaseFileAdded {
        let showcaseFileAdded = mapDBXTeamLogShowcaseFileAddedTypeToDB(object: object.showcaseFileAdded)
        return DBTEAMLOGEventType(showcaseFileAdded: showcaseFileAdded)
    }
    if let object = object.asShowcaseFileDownload {
        let showcaseFileDownload = mapDBXTeamLogShowcaseFileDownloadTypeToDB(object: object.showcaseFileDownload)
        return DBTEAMLOGEventType(showcaseFileDownload: showcaseFileDownload)
    }
    if let object = object.asShowcaseFileRemoved {
        let showcaseFileRemoved = mapDBXTeamLogShowcaseFileRemovedTypeToDB(object: object.showcaseFileRemoved)
        return DBTEAMLOGEventType(showcaseFileRemoved: showcaseFileRemoved)
    }
    if let object = object.asShowcaseFileView {
        let showcaseFileView = mapDBXTeamLogShowcaseFileViewTypeToDB(object: object.showcaseFileView)
        return DBTEAMLOGEventType(showcaseFileView: showcaseFileView)
    }
    if let object = object.asShowcasePermanentlyDeleted {
        let showcasePermanentlyDeleted = mapDBXTeamLogShowcasePermanentlyDeletedTypeToDB(object: object.showcasePermanentlyDeleted)
        return DBTEAMLOGEventType(showcasePermanentlyDeleted: showcasePermanentlyDeleted)
    }
    if let object = object.asShowcasePostComment {
        let showcasePostComment = mapDBXTeamLogShowcasePostCommentTypeToDB(object: object.showcasePostComment)
        return DBTEAMLOGEventType(showcasePostComment: showcasePostComment)
    }
    if let object = object.asShowcaseRemoveMember {
        let showcaseRemoveMember = mapDBXTeamLogShowcaseRemoveMemberTypeToDB(object: object.showcaseRemoveMember)
        return DBTEAMLOGEventType(showcaseRemoveMember: showcaseRemoveMember)
    }
    if let object = object.asShowcaseRenamed {
        let showcaseRenamed = mapDBXTeamLogShowcaseRenamedTypeToDB(object: object.showcaseRenamed)
        return DBTEAMLOGEventType(showcaseRenamed: showcaseRenamed)
    }
    if let object = object.asShowcaseRequestAccess {
        let showcaseRequestAccess = mapDBXTeamLogShowcaseRequestAccessTypeToDB(object: object.showcaseRequestAccess)
        return DBTEAMLOGEventType(showcaseRequestAccess: showcaseRequestAccess)
    }
    if let object = object.asShowcaseResolveComment {
        let showcaseResolveComment = mapDBXTeamLogShowcaseResolveCommentTypeToDB(object: object.showcaseResolveComment)
        return DBTEAMLOGEventType(showcaseResolveComment: showcaseResolveComment)
    }
    if let object = object.asShowcaseRestored {
        let showcaseRestored = mapDBXTeamLogShowcaseRestoredTypeToDB(object: object.showcaseRestored)
        return DBTEAMLOGEventType(showcaseRestored: showcaseRestored)
    }
    if let object = object.asShowcaseTrashed {
        let showcaseTrashed = mapDBXTeamLogShowcaseTrashedTypeToDB(object: object.showcaseTrashed)
        return DBTEAMLOGEventType(showcaseTrashed: showcaseTrashed)
    }
    if let object = object.asShowcaseTrashedDeprecated {
        let showcaseTrashedDeprecated = mapDBXTeamLogShowcaseTrashedDeprecatedTypeToDB(object: object.showcaseTrashedDeprecated)
        return DBTEAMLOGEventType(showcaseTrashedDeprecated: showcaseTrashedDeprecated)
    }
    if let object = object.asShowcaseUnresolveComment {
        let showcaseUnresolveComment = mapDBXTeamLogShowcaseUnresolveCommentTypeToDB(object: object.showcaseUnresolveComment)
        return DBTEAMLOGEventType(showcaseUnresolveComment: showcaseUnresolveComment)
    }
    if let object = object.asShowcaseUntrashed {
        let showcaseUntrashed = mapDBXTeamLogShowcaseUntrashedTypeToDB(object: object.showcaseUntrashed)
        return DBTEAMLOGEventType(showcaseUntrashed: showcaseUntrashed)
    }
    if let object = object.asShowcaseUntrashedDeprecated {
        let showcaseUntrashedDeprecated = mapDBXTeamLogShowcaseUntrashedDeprecatedTypeToDB(object: object.showcaseUntrashedDeprecated)
        return DBTEAMLOGEventType(showcaseUntrashedDeprecated: showcaseUntrashedDeprecated)
    }
    if let object = object.asShowcaseView {
        let showcaseView = mapDBXTeamLogShowcaseViewTypeToDB(object: object.showcaseView)
        return DBTEAMLOGEventType(showcaseView: showcaseView)
    }
    if let object = object.asSsoAddCert {
        let ssoAddCert = mapDBXTeamLogSsoAddCertTypeToDB(object: object.ssoAddCert)
        return DBTEAMLOGEventType(ssoAddCert: ssoAddCert)
    }
    if let object = object.asSsoAddLoginUrl {
        let ssoAddLoginUrl = mapDBXTeamLogSsoAddLoginUrlTypeToDB(object: object.ssoAddLoginUrl)
        return DBTEAMLOGEventType(ssoAddLoginUrl: ssoAddLoginUrl)
    }
    if let object = object.asSsoAddLogoutUrl {
        let ssoAddLogoutUrl = mapDBXTeamLogSsoAddLogoutUrlTypeToDB(object: object.ssoAddLogoutUrl)
        return DBTEAMLOGEventType(ssoAddLogoutUrl: ssoAddLogoutUrl)
    }
    if let object = object.asSsoChangeCert {
        let ssoChangeCert = mapDBXTeamLogSsoChangeCertTypeToDB(object: object.ssoChangeCert)
        return DBTEAMLOGEventType(ssoChangeCert: ssoChangeCert)
    }
    if let object = object.asSsoChangeLoginUrl {
        let ssoChangeLoginUrl = mapDBXTeamLogSsoChangeLoginUrlTypeToDB(object: object.ssoChangeLoginUrl)
        return DBTEAMLOGEventType(ssoChangeLoginUrl: ssoChangeLoginUrl)
    }
    if let object = object.asSsoChangeLogoutUrl {
        let ssoChangeLogoutUrl = mapDBXTeamLogSsoChangeLogoutUrlTypeToDB(object: object.ssoChangeLogoutUrl)
        return DBTEAMLOGEventType(ssoChangeLogoutUrl: ssoChangeLogoutUrl)
    }
    if let object = object.asSsoChangeSamlIdentityMode {
        let ssoChangeSamlIdentityMode = mapDBXTeamLogSsoChangeSamlIdentityModeTypeToDB(object: object.ssoChangeSamlIdentityMode)
        return DBTEAMLOGEventType(ssoChangeSamlIdentityMode: ssoChangeSamlIdentityMode)
    }
    if let object = object.asSsoRemoveCert {
        let ssoRemoveCert = mapDBXTeamLogSsoRemoveCertTypeToDB(object: object.ssoRemoveCert)
        return DBTEAMLOGEventType(ssoRemoveCert: ssoRemoveCert)
    }
    if let object = object.asSsoRemoveLoginUrl {
        let ssoRemoveLoginUrl = mapDBXTeamLogSsoRemoveLoginUrlTypeToDB(object: object.ssoRemoveLoginUrl)
        return DBTEAMLOGEventType(ssoRemoveLoginUrl: ssoRemoveLoginUrl)
    }
    if let object = object.asSsoRemoveLogoutUrl {
        let ssoRemoveLogoutUrl = mapDBXTeamLogSsoRemoveLogoutUrlTypeToDB(object: object.ssoRemoveLogoutUrl)
        return DBTEAMLOGEventType(ssoRemoveLogoutUrl: ssoRemoveLogoutUrl)
    }
    if let object = object.asTeamFolderChangeStatus {
        let teamFolderChangeStatus = mapDBXTeamLogTeamFolderChangeStatusTypeToDB(object: object.teamFolderChangeStatus)
        return DBTEAMLOGEventType(teamFolderChangeStatus: teamFolderChangeStatus)
    }
    if let object = object.asTeamFolderCreate {
        let teamFolderCreate = mapDBXTeamLogTeamFolderCreateTypeToDB(object: object.teamFolderCreate)
        return DBTEAMLOGEventType(teamFolderCreate: teamFolderCreate)
    }
    if let object = object.asTeamFolderDowngrade {
        let teamFolderDowngrade = mapDBXTeamLogTeamFolderDowngradeTypeToDB(object: object.teamFolderDowngrade)
        return DBTEAMLOGEventType(teamFolderDowngrade: teamFolderDowngrade)
    }
    if let object = object.asTeamFolderPermanentlyDelete {
        let teamFolderPermanentlyDelete = mapDBXTeamLogTeamFolderPermanentlyDeleteTypeToDB(object: object.teamFolderPermanentlyDelete)
        return DBTEAMLOGEventType(teamFolderPermanentlyDelete: teamFolderPermanentlyDelete)
    }
    if let object = object.asTeamFolderRename {
        let teamFolderRename = mapDBXTeamLogTeamFolderRenameTypeToDB(object: object.teamFolderRename)
        return DBTEAMLOGEventType(teamFolderRename: teamFolderRename)
    }
    if let object = object.asTeamSelectiveSyncSettingsChanged {
        let teamSelectiveSyncSettingsChanged = mapDBXTeamLogTeamSelectiveSyncSettingsChangedTypeToDB(object: object.teamSelectiveSyncSettingsChanged)
        return DBTEAMLOGEventType(teamSelectiveSyncSettingsChanged: teamSelectiveSyncSettingsChanged)
    }
    if let object = object.asAccountCaptureChangePolicy {
        let accountCaptureChangePolicy = mapDBXTeamLogAccountCaptureChangePolicyTypeToDB(object: object.accountCaptureChangePolicy)
        return DBTEAMLOGEventType(accountCaptureChangePolicy: accountCaptureChangePolicy)
    }
    if let object = object.asAdminEmailRemindersChanged {
        let adminEmailRemindersChanged = mapDBXTeamLogAdminEmailRemindersChangedTypeToDB(object: object.adminEmailRemindersChanged)
        return DBTEAMLOGEventType(adminEmailRemindersChanged: adminEmailRemindersChanged)
    }
    if let object = object.asAllowDownloadDisabled {
        let allowDownloadDisabled = mapDBXTeamLogAllowDownloadDisabledTypeToDB(object: object.allowDownloadDisabled)
        return DBTEAMLOGEventType(allowDownloadDisabled: allowDownloadDisabled)
    }
    if let object = object.asAllowDownloadEnabled {
        let allowDownloadEnabled = mapDBXTeamLogAllowDownloadEnabledTypeToDB(object: object.allowDownloadEnabled)
        return DBTEAMLOGEventType(allowDownloadEnabled: allowDownloadEnabled)
    }
    if let object = object.asAppPermissionsChanged {
        let appPermissionsChanged = mapDBXTeamLogAppPermissionsChangedTypeToDB(object: object.appPermissionsChanged)
        return DBTEAMLOGEventType(appPermissionsChanged: appPermissionsChanged)
    }
    if let object = object.asCameraUploadsPolicyChanged {
        let cameraUploadsPolicyChanged = mapDBXTeamLogCameraUploadsPolicyChangedTypeToDB(object: object.cameraUploadsPolicyChanged)
        return DBTEAMLOGEventType(cameraUploadsPolicyChanged: cameraUploadsPolicyChanged)
    }
    if let object = object.asCaptureTranscriptPolicyChanged {
        let captureTranscriptPolicyChanged = mapDBXTeamLogCaptureTranscriptPolicyChangedTypeToDB(object: object.captureTranscriptPolicyChanged)
        return DBTEAMLOGEventType(captureTranscriptPolicyChanged: captureTranscriptPolicyChanged)
    }
    if let object = object.asClassificationChangePolicy {
        let classificationChangePolicy = mapDBXTeamLogClassificationChangePolicyTypeToDB(object: object.classificationChangePolicy)
        return DBTEAMLOGEventType(classificationChangePolicy: classificationChangePolicy)
    }
    if let object = object.asComputerBackupPolicyChanged {
        let computerBackupPolicyChanged = mapDBXTeamLogComputerBackupPolicyChangedTypeToDB(object: object.computerBackupPolicyChanged)
        return DBTEAMLOGEventType(computerBackupPolicyChanged: computerBackupPolicyChanged)
    }
    if let object = object.asContentAdministrationPolicyChanged {
        let contentAdministrationPolicyChanged = mapDBXTeamLogContentAdministrationPolicyChangedTypeToDB(object: object.contentAdministrationPolicyChanged)
        return DBTEAMLOGEventType(contentAdministrationPolicyChanged: contentAdministrationPolicyChanged)
    }
    if let object = object.asDataPlacementRestrictionChangePolicy {
        let dataPlacementRestrictionChangePolicy = mapDBXTeamLogDataPlacementRestrictionChangePolicyTypeToDB(
            object: object
                .dataPlacementRestrictionChangePolicy
        )
        return DBTEAMLOGEventType(dataPlacementRestrictionChangePolicy: dataPlacementRestrictionChangePolicy)
    }
    if let object = object.asDataPlacementRestrictionSatisfyPolicy {
        let dataPlacementRestrictionSatisfyPolicy = mapDBXTeamLogDataPlacementRestrictionSatisfyPolicyTypeToDB(
            object: object
                .dataPlacementRestrictionSatisfyPolicy
        )
        return DBTEAMLOGEventType(dataPlacementRestrictionSatisfyPolicy: dataPlacementRestrictionSatisfyPolicy)
    }
    if let object = object.asDeviceApprovalsAddException {
        let deviceApprovalsAddException = mapDBXTeamLogDeviceApprovalsAddExceptionTypeToDB(object: object.deviceApprovalsAddException)
        return DBTEAMLOGEventType(deviceApprovalsAddException: deviceApprovalsAddException)
    }
    if let object = object.asDeviceApprovalsChangeDesktopPolicy {
        let deviceApprovalsChangeDesktopPolicy = mapDBXTeamLogDeviceApprovalsChangeDesktopPolicyTypeToDB(object: object.deviceApprovalsChangeDesktopPolicy)
        return DBTEAMLOGEventType(deviceApprovalsChangeDesktopPolicy: deviceApprovalsChangeDesktopPolicy)
    }
    if let object = object.asDeviceApprovalsChangeMobilePolicy {
        let deviceApprovalsChangeMobilePolicy = mapDBXTeamLogDeviceApprovalsChangeMobilePolicyTypeToDB(object: object.deviceApprovalsChangeMobilePolicy)
        return DBTEAMLOGEventType(deviceApprovalsChangeMobilePolicy: deviceApprovalsChangeMobilePolicy)
    }
    if let object = object.asDeviceApprovalsChangeOverageAction {
        let deviceApprovalsChangeOverageAction = mapDBXTeamLogDeviceApprovalsChangeOverageActionTypeToDB(object: object.deviceApprovalsChangeOverageAction)
        return DBTEAMLOGEventType(deviceApprovalsChangeOverageAction: deviceApprovalsChangeOverageAction)
    }
    if let object = object.asDeviceApprovalsChangeUnlinkAction {
        let deviceApprovalsChangeUnlinkAction = mapDBXTeamLogDeviceApprovalsChangeUnlinkActionTypeToDB(object: object.deviceApprovalsChangeUnlinkAction)
        return DBTEAMLOGEventType(deviceApprovalsChangeUnlinkAction: deviceApprovalsChangeUnlinkAction)
    }
    if let object = object.asDeviceApprovalsRemoveException {
        let deviceApprovalsRemoveException = mapDBXTeamLogDeviceApprovalsRemoveExceptionTypeToDB(object: object.deviceApprovalsRemoveException)
        return DBTEAMLOGEventType(deviceApprovalsRemoveException: deviceApprovalsRemoveException)
    }
    if let object = object.asDirectoryRestrictionsAddMembers {
        let directoryRestrictionsAddMembers = mapDBXTeamLogDirectoryRestrictionsAddMembersTypeToDB(object: object.directoryRestrictionsAddMembers)
        return DBTEAMLOGEventType(directoryRestrictionsAddMembers: directoryRestrictionsAddMembers)
    }
    if let object = object.asDirectoryRestrictionsRemoveMembers {
        let directoryRestrictionsRemoveMembers = mapDBXTeamLogDirectoryRestrictionsRemoveMembersTypeToDB(object: object.directoryRestrictionsRemoveMembers)
        return DBTEAMLOGEventType(directoryRestrictionsRemoveMembers: directoryRestrictionsRemoveMembers)
    }
    if let object = object.asDropboxPasswordsPolicyChanged {
        let dropboxPasswordsPolicyChanged = mapDBXTeamLogDropboxPasswordsPolicyChangedTypeToDB(object: object.dropboxPasswordsPolicyChanged)
        return DBTEAMLOGEventType(dropboxPasswordsPolicyChanged: dropboxPasswordsPolicyChanged)
    }
    if let object = object.asEmailIngestPolicyChanged {
        let emailIngestPolicyChanged = mapDBXTeamLogEmailIngestPolicyChangedTypeToDB(object: object.emailIngestPolicyChanged)
        return DBTEAMLOGEventType(emailIngestPolicyChanged: emailIngestPolicyChanged)
    }
    if let object = object.asEmmAddException {
        let emmAddException = mapDBXTeamLogEmmAddExceptionTypeToDB(object: object.emmAddException)
        return DBTEAMLOGEventType(emmAddException: emmAddException)
    }
    if let object = object.asEmmChangePolicy {
        let emmChangePolicy = mapDBXTeamLogEmmChangePolicyTypeToDB(object: object.emmChangePolicy)
        return DBTEAMLOGEventType(emmChangePolicy: emmChangePolicy)
    }
    if let object = object.asEmmRemoveException {
        let emmRemoveException = mapDBXTeamLogEmmRemoveExceptionTypeToDB(object: object.emmRemoveException)
        return DBTEAMLOGEventType(emmRemoveException: emmRemoveException)
    }
    if let object = object.asExtendedVersionHistoryChangePolicy {
        let extendedVersionHistoryChangePolicy = mapDBXTeamLogExtendedVersionHistoryChangePolicyTypeToDB(object: object.extendedVersionHistoryChangePolicy)
        return DBTEAMLOGEventType(extendedVersionHistoryChangePolicy: extendedVersionHistoryChangePolicy)
    }
    if let object = object.asExternalDriveBackupPolicyChanged {
        let externalDriveBackupPolicyChanged = mapDBXTeamLogExternalDriveBackupPolicyChangedTypeToDB(object: object.externalDriveBackupPolicyChanged)
        return DBTEAMLOGEventType(externalDriveBackupPolicyChanged: externalDriveBackupPolicyChanged)
    }
    if let object = object.asFileCommentsChangePolicy {
        let fileCommentsChangePolicy = mapDBXTeamLogFileCommentsChangePolicyTypeToDB(object: object.fileCommentsChangePolicy)
        return DBTEAMLOGEventType(fileCommentsChangePolicy: fileCommentsChangePolicy)
    }
    if let object = object.asFileLockingPolicyChanged {
        let fileLockingPolicyChanged = mapDBXTeamLogFileLockingPolicyChangedTypeToDB(object: object.fileLockingPolicyChanged)
        return DBTEAMLOGEventType(fileLockingPolicyChanged: fileLockingPolicyChanged)
    }
    if let object = object.asFileProviderMigrationPolicyChanged {
        let fileProviderMigrationPolicyChanged = mapDBXTeamLogFileProviderMigrationPolicyChangedTypeToDB(object: object.fileProviderMigrationPolicyChanged)
        return DBTEAMLOGEventType(fileProviderMigrationPolicyChanged: fileProviderMigrationPolicyChanged)
    }
    if let object = object.asFileRequestsChangePolicy {
        let fileRequestsChangePolicy = mapDBXTeamLogFileRequestsChangePolicyTypeToDB(object: object.fileRequestsChangePolicy)
        return DBTEAMLOGEventType(fileRequestsChangePolicy: fileRequestsChangePolicy)
    }
    if let object = object.asFileRequestsEmailsEnabled {
        let fileRequestsEmailsEnabled = mapDBXTeamLogFileRequestsEmailsEnabledTypeToDB(object: object.fileRequestsEmailsEnabled)
        return DBTEAMLOGEventType(fileRequestsEmailsEnabled: fileRequestsEmailsEnabled)
    }
    if let object = object.asFileRequestsEmailsRestrictedToTeamOnly {
        let fileRequestsEmailsRestrictedToTeamOnly = mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyTypeToDB(
            object: object
                .fileRequestsEmailsRestrictedToTeamOnly
        )
        return DBTEAMLOGEventType(fileRequestsEmailsRestrictedToTeamOnly: fileRequestsEmailsRestrictedToTeamOnly)
    }
    if let object = object.asFileTransfersPolicyChanged {
        let fileTransfersPolicyChanged = mapDBXTeamLogFileTransfersPolicyChangedTypeToDB(object: object.fileTransfersPolicyChanged)
        return DBTEAMLOGEventType(fileTransfersPolicyChanged: fileTransfersPolicyChanged)
    }
    if let object = object.asFolderLinkRestrictionPolicyChanged {
        let folderLinkRestrictionPolicyChanged = mapDBXTeamLogFolderLinkRestrictionPolicyChangedTypeToDB(object: object.folderLinkRestrictionPolicyChanged)
        return DBTEAMLOGEventType(folderLinkRestrictionPolicyChanged: folderLinkRestrictionPolicyChanged)
    }
    if let object = object.asGoogleSsoChangePolicy {
        let googleSsoChangePolicy = mapDBXTeamLogGoogleSsoChangePolicyTypeToDB(object: object.googleSsoChangePolicy)
        return DBTEAMLOGEventType(googleSsoChangePolicy: googleSsoChangePolicy)
    }
    if let object = object.asGroupUserManagementChangePolicy {
        let groupUserManagementChangePolicy = mapDBXTeamLogGroupUserManagementChangePolicyTypeToDB(object: object.groupUserManagementChangePolicy)
        return DBTEAMLOGEventType(groupUserManagementChangePolicy: groupUserManagementChangePolicy)
    }
    if let object = object.asIntegrationPolicyChanged {
        let integrationPolicyChanged = mapDBXTeamLogIntegrationPolicyChangedTypeToDB(object: object.integrationPolicyChanged)
        return DBTEAMLOGEventType(integrationPolicyChanged: integrationPolicyChanged)
    }
    if let object = object.asInviteAcceptanceEmailPolicyChanged {
        let inviteAcceptanceEmailPolicyChanged = mapDBXTeamLogInviteAcceptanceEmailPolicyChangedTypeToDB(object: object.inviteAcceptanceEmailPolicyChanged)
        return DBTEAMLOGEventType(inviteAcceptanceEmailPolicyChanged: inviteAcceptanceEmailPolicyChanged)
    }
    if let object = object.asMemberRequestsChangePolicy {
        let memberRequestsChangePolicy = mapDBXTeamLogMemberRequestsChangePolicyTypeToDB(object: object.memberRequestsChangePolicy)
        return DBTEAMLOGEventType(memberRequestsChangePolicy: memberRequestsChangePolicy)
    }
    if let object = object.asMemberSendInvitePolicyChanged {
        let memberSendInvitePolicyChanged = mapDBXTeamLogMemberSendInvitePolicyChangedTypeToDB(object: object.memberSendInvitePolicyChanged)
        return DBTEAMLOGEventType(memberSendInvitePolicyChanged: memberSendInvitePolicyChanged)
    }
    if let object = object.asMemberSpaceLimitsAddException {
        let memberSpaceLimitsAddException = mapDBXTeamLogMemberSpaceLimitsAddExceptionTypeToDB(object: object.memberSpaceLimitsAddException)
        return DBTEAMLOGEventType(memberSpaceLimitsAddException: memberSpaceLimitsAddException)
    }
    if let object = object.asMemberSpaceLimitsChangeCapsTypePolicy {
        let memberSpaceLimitsChangeCapsTypePolicy = mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyTypeToDB(
            object: object
                .memberSpaceLimitsChangeCapsTypePolicy
        )
        return DBTEAMLOGEventType(memberSpaceLimitsChangeCapsTypePolicy: memberSpaceLimitsChangeCapsTypePolicy)
    }
    if let object = object.asMemberSpaceLimitsChangePolicy {
        let memberSpaceLimitsChangePolicy = mapDBXTeamLogMemberSpaceLimitsChangePolicyTypeToDB(object: object.memberSpaceLimitsChangePolicy)
        return DBTEAMLOGEventType(memberSpaceLimitsChangePolicy: memberSpaceLimitsChangePolicy)
    }
    if let object = object.asMemberSpaceLimitsRemoveException {
        let memberSpaceLimitsRemoveException = mapDBXTeamLogMemberSpaceLimitsRemoveExceptionTypeToDB(object: object.memberSpaceLimitsRemoveException)
        return DBTEAMLOGEventType(memberSpaceLimitsRemoveException: memberSpaceLimitsRemoveException)
    }
    if let object = object.asMemberSuggestionsChangePolicy {
        let memberSuggestionsChangePolicy = mapDBXTeamLogMemberSuggestionsChangePolicyTypeToDB(object: object.memberSuggestionsChangePolicy)
        return DBTEAMLOGEventType(memberSuggestionsChangePolicy: memberSuggestionsChangePolicy)
    }
    if let object = object.asMicrosoftOfficeAddinChangePolicy {
        let microsoftOfficeAddinChangePolicy = mapDBXTeamLogMicrosoftOfficeAddinChangePolicyTypeToDB(object: object.microsoftOfficeAddinChangePolicy)
        return DBTEAMLOGEventType(microsoftOfficeAddinChangePolicy: microsoftOfficeAddinChangePolicy)
    }
    if let object = object.asNetworkControlChangePolicy {
        let networkControlChangePolicy = mapDBXTeamLogNetworkControlChangePolicyTypeToDB(object: object.networkControlChangePolicy)
        return DBTEAMLOGEventType(networkControlChangePolicy: networkControlChangePolicy)
    }
    if let object = object.asPaperChangeDeploymentPolicy {
        let paperChangeDeploymentPolicy = mapDBXTeamLogPaperChangeDeploymentPolicyTypeToDB(object: object.paperChangeDeploymentPolicy)
        return DBTEAMLOGEventType(paperChangeDeploymentPolicy: paperChangeDeploymentPolicy)
    }
    if let object = object.asPaperChangeMemberLinkPolicy {
        let paperChangeMemberLinkPolicy = mapDBXTeamLogPaperChangeMemberLinkPolicyTypeToDB(object: object.paperChangeMemberLinkPolicy)
        return DBTEAMLOGEventType(paperChangeMemberLinkPolicy: paperChangeMemberLinkPolicy)
    }
    if let object = object.asPaperChangeMemberPolicy {
        let paperChangeMemberPolicy = mapDBXTeamLogPaperChangeMemberPolicyTypeToDB(object: object.paperChangeMemberPolicy)
        return DBTEAMLOGEventType(paperChangeMemberPolicy: paperChangeMemberPolicy)
    }
    if let object = object.asPaperChangePolicy {
        let paperChangePolicy = mapDBXTeamLogPaperChangePolicyTypeToDB(object: object.paperChangePolicy)
        return DBTEAMLOGEventType(paperChangePolicy: paperChangePolicy)
    }
    if let object = object.asPaperDefaultFolderPolicyChanged {
        let paperDefaultFolderPolicyChanged = mapDBXTeamLogPaperDefaultFolderPolicyChangedTypeToDB(object: object.paperDefaultFolderPolicyChanged)
        return DBTEAMLOGEventType(paperDefaultFolderPolicyChanged: paperDefaultFolderPolicyChanged)
    }
    if let object = object.asPaperDesktopPolicyChanged {
        let paperDesktopPolicyChanged = mapDBXTeamLogPaperDesktopPolicyChangedTypeToDB(object: object.paperDesktopPolicyChanged)
        return DBTEAMLOGEventType(paperDesktopPolicyChanged: paperDesktopPolicyChanged)
    }
    if let object = object.asPaperEnabledUsersGroupAddition {
        let paperEnabledUsersGroupAddition = mapDBXTeamLogPaperEnabledUsersGroupAdditionTypeToDB(object: object.paperEnabledUsersGroupAddition)
        return DBTEAMLOGEventType(paperEnabledUsersGroupAddition: paperEnabledUsersGroupAddition)
    }
    if let object = object.asPaperEnabledUsersGroupRemoval {
        let paperEnabledUsersGroupRemoval = mapDBXTeamLogPaperEnabledUsersGroupRemovalTypeToDB(object: object.paperEnabledUsersGroupRemoval)
        return DBTEAMLOGEventType(paperEnabledUsersGroupRemoval: paperEnabledUsersGroupRemoval)
    }
    if let object = object.asPasswordStrengthRequirementsChangePolicy {
        let passwordStrengthRequirementsChangePolicy = mapDBXTeamLogPasswordStrengthRequirementsChangePolicyTypeToDB(
            object: object
                .passwordStrengthRequirementsChangePolicy
        )
        return DBTEAMLOGEventType(passwordStrengthRequirementsChangePolicy: passwordStrengthRequirementsChangePolicy)
    }
    if let object = object.asPermanentDeleteChangePolicy {
        let permanentDeleteChangePolicy = mapDBXTeamLogPermanentDeleteChangePolicyTypeToDB(object: object.permanentDeleteChangePolicy)
        return DBTEAMLOGEventType(permanentDeleteChangePolicy: permanentDeleteChangePolicy)
    }
    if let object = object.asResellerSupportChangePolicy {
        let resellerSupportChangePolicy = mapDBXTeamLogResellerSupportChangePolicyTypeToDB(object: object.resellerSupportChangePolicy)
        return DBTEAMLOGEventType(resellerSupportChangePolicy: resellerSupportChangePolicy)
    }
    if let object = object.asRewindPolicyChanged {
        let rewindPolicyChanged = mapDBXTeamLogRewindPolicyChangedTypeToDB(object: object.rewindPolicyChanged)
        return DBTEAMLOGEventType(rewindPolicyChanged: rewindPolicyChanged)
    }
    if let object = object.asSendForSignaturePolicyChanged {
        let sendForSignaturePolicyChanged = mapDBXTeamLogSendForSignaturePolicyChangedTypeToDB(object: object.sendForSignaturePolicyChanged)
        return DBTEAMLOGEventType(sendForSignaturePolicyChanged: sendForSignaturePolicyChanged)
    }
    if let object = object.asSharingChangeFolderJoinPolicy {
        let sharingChangeFolderJoinPolicy = mapDBXTeamLogSharingChangeFolderJoinPolicyTypeToDB(object: object.sharingChangeFolderJoinPolicy)
        return DBTEAMLOGEventType(sharingChangeFolderJoinPolicy: sharingChangeFolderJoinPolicy)
    }
    if let object = object.asSharingChangeLinkAllowChangeExpirationPolicy {
        let sharingChangeLinkAllowChangeExpirationPolicy = mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyTypeToDB(
            object: object
                .sharingChangeLinkAllowChangeExpirationPolicy
        )
        return DBTEAMLOGEventType(sharingChangeLinkAllowChangeExpirationPolicy: sharingChangeLinkAllowChangeExpirationPolicy)
    }
    if let object = object.asSharingChangeLinkDefaultExpirationPolicy {
        let sharingChangeLinkDefaultExpirationPolicy = mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyTypeToDB(
            object: object
                .sharingChangeLinkDefaultExpirationPolicy
        )
        return DBTEAMLOGEventType(sharingChangeLinkDefaultExpirationPolicy: sharingChangeLinkDefaultExpirationPolicy)
    }
    if let object = object.asSharingChangeLinkEnforcePasswordPolicy {
        let sharingChangeLinkEnforcePasswordPolicy = mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyTypeToDB(
            object: object
                .sharingChangeLinkEnforcePasswordPolicy
        )
        return DBTEAMLOGEventType(sharingChangeLinkEnforcePasswordPolicy: sharingChangeLinkEnforcePasswordPolicy)
    }
    if let object = object.asSharingChangeLinkPolicy {
        let sharingChangeLinkPolicy = mapDBXTeamLogSharingChangeLinkPolicyTypeToDB(object: object.sharingChangeLinkPolicy)
        return DBTEAMLOGEventType(sharingChangeLinkPolicy: sharingChangeLinkPolicy)
    }
    if let object = object.asSharingChangeMemberPolicy {
        let sharingChangeMemberPolicy = mapDBXTeamLogSharingChangeMemberPolicyTypeToDB(object: object.sharingChangeMemberPolicy)
        return DBTEAMLOGEventType(sharingChangeMemberPolicy: sharingChangeMemberPolicy)
    }
    if let object = object.asShowcaseChangeDownloadPolicy {
        let showcaseChangeDownloadPolicy = mapDBXTeamLogShowcaseChangeDownloadPolicyTypeToDB(object: object.showcaseChangeDownloadPolicy)
        return DBTEAMLOGEventType(showcaseChangeDownloadPolicy: showcaseChangeDownloadPolicy)
    }
    if let object = object.asShowcaseChangeEnabledPolicy {
        let showcaseChangeEnabledPolicy = mapDBXTeamLogShowcaseChangeEnabledPolicyTypeToDB(object: object.showcaseChangeEnabledPolicy)
        return DBTEAMLOGEventType(showcaseChangeEnabledPolicy: showcaseChangeEnabledPolicy)
    }
    if let object = object.asShowcaseChangeExternalSharingPolicy {
        let showcaseChangeExternalSharingPolicy = mapDBXTeamLogShowcaseChangeExternalSharingPolicyTypeToDB(object: object.showcaseChangeExternalSharingPolicy)
        return DBTEAMLOGEventType(showcaseChangeExternalSharingPolicy: showcaseChangeExternalSharingPolicy)
    }
    if let object = object.asSmarterSmartSyncPolicyChanged {
        let smarterSmartSyncPolicyChanged = mapDBXTeamLogSmarterSmartSyncPolicyChangedTypeToDB(object: object.smarterSmartSyncPolicyChanged)
        return DBTEAMLOGEventType(smarterSmartSyncPolicyChanged: smarterSmartSyncPolicyChanged)
    }
    if let object = object.asSmartSyncChangePolicy {
        let smartSyncChangePolicy = mapDBXTeamLogSmartSyncChangePolicyTypeToDB(object: object.smartSyncChangePolicy)
        return DBTEAMLOGEventType(smartSyncChangePolicy: smartSyncChangePolicy)
    }
    if let object = object.asSmartSyncNotOptOut {
        let smartSyncNotOptOut = mapDBXTeamLogSmartSyncNotOptOutTypeToDB(object: object.smartSyncNotOptOut)
        return DBTEAMLOGEventType(smartSyncNotOptOut: smartSyncNotOptOut)
    }
    if let object = object.asSmartSyncOptOut {
        let smartSyncOptOut = mapDBXTeamLogSmartSyncOptOutTypeToDB(object: object.smartSyncOptOut)
        return DBTEAMLOGEventType(smartSyncOptOut: smartSyncOptOut)
    }
    if let object = object.asSsoChangePolicy {
        let ssoChangePolicy = mapDBXTeamLogSsoChangePolicyTypeToDB(object: object.ssoChangePolicy)
        return DBTEAMLOGEventType(ssoChangePolicy: ssoChangePolicy)
    }
    if let object = object.asTeamBrandingPolicyChanged {
        let teamBrandingPolicyChanged = mapDBXTeamLogTeamBrandingPolicyChangedTypeToDB(object: object.teamBrandingPolicyChanged)
        return DBTEAMLOGEventType(teamBrandingPolicyChanged: teamBrandingPolicyChanged)
    }
    if let object = object.asTeamExtensionsPolicyChanged {
        let teamExtensionsPolicyChanged = mapDBXTeamLogTeamExtensionsPolicyChangedTypeToDB(object: object.teamExtensionsPolicyChanged)
        return DBTEAMLOGEventType(teamExtensionsPolicyChanged: teamExtensionsPolicyChanged)
    }
    if let object = object.asTeamSelectiveSyncPolicyChanged {
        let teamSelectiveSyncPolicyChanged = mapDBXTeamLogTeamSelectiveSyncPolicyChangedTypeToDB(object: object.teamSelectiveSyncPolicyChanged)
        return DBTEAMLOGEventType(teamSelectiveSyncPolicyChanged: teamSelectiveSyncPolicyChanged)
    }
    if let object = object.asTeamSharingWhitelistSubjectsChanged {
        let teamSharingWhitelistSubjectsChanged = mapDBXTeamLogTeamSharingWhitelistSubjectsChangedTypeToDB(object: object.teamSharingWhitelistSubjectsChanged)
        return DBTEAMLOGEventType(teamSharingWhitelistSubjectsChanged: teamSharingWhitelistSubjectsChanged)
    }
    if let object = object.asTfaAddException {
        let tfaAddException = mapDBXTeamLogTfaAddExceptionTypeToDB(object: object.tfaAddException)
        return DBTEAMLOGEventType(tfaAddException: tfaAddException)
    }
    if let object = object.asTfaChangePolicy {
        let tfaChangePolicy = mapDBXTeamLogTfaChangePolicyTypeToDB(object: object.tfaChangePolicy)
        return DBTEAMLOGEventType(tfaChangePolicy: tfaChangePolicy)
    }
    if let object = object.asTfaRemoveException {
        let tfaRemoveException = mapDBXTeamLogTfaRemoveExceptionTypeToDB(object: object.tfaRemoveException)
        return DBTEAMLOGEventType(tfaRemoveException: tfaRemoveException)
    }
    if let object = object.asTwoAccountChangePolicy {
        let twoAccountChangePolicy = mapDBXTeamLogTwoAccountChangePolicyTypeToDB(object: object.twoAccountChangePolicy)
        return DBTEAMLOGEventType(twoAccountChangePolicy: twoAccountChangePolicy)
    }
    if let object = object.asViewerInfoPolicyChanged {
        let viewerInfoPolicyChanged = mapDBXTeamLogViewerInfoPolicyChangedTypeToDB(object: object.viewerInfoPolicyChanged)
        return DBTEAMLOGEventType(viewerInfoPolicyChanged: viewerInfoPolicyChanged)
    }
    if let object = object.asWatermarkingPolicyChanged {
        let watermarkingPolicyChanged = mapDBXTeamLogWatermarkingPolicyChangedTypeToDB(object: object.watermarkingPolicyChanged)
        return DBTEAMLOGEventType(watermarkingPolicyChanged: watermarkingPolicyChanged)
    }
    if let object = object.asWebSessionsChangeActiveSessionLimit {
        let webSessionsChangeActiveSessionLimit = mapDBXTeamLogWebSessionsChangeActiveSessionLimitTypeToDB(object: object.webSessionsChangeActiveSessionLimit)
        return DBTEAMLOGEventType(webSessionsChangeActiveSessionLimit: webSessionsChangeActiveSessionLimit)
    }
    if let object = object.asWebSessionsChangeFixedLengthPolicy {
        let webSessionsChangeFixedLengthPolicy = mapDBXTeamLogWebSessionsChangeFixedLengthPolicyTypeToDB(object: object.webSessionsChangeFixedLengthPolicy)
        return DBTEAMLOGEventType(webSessionsChangeFixedLengthPolicy: webSessionsChangeFixedLengthPolicy)
    }
    if let object = object.asWebSessionsChangeIdleLengthPolicy {
        let webSessionsChangeIdleLengthPolicy = mapDBXTeamLogWebSessionsChangeIdleLengthPolicyTypeToDB(object: object.webSessionsChangeIdleLengthPolicy)
        return DBTEAMLOGEventType(webSessionsChangeIdleLengthPolicy: webSessionsChangeIdleLengthPolicy)
    }
    if let object = object.asDataResidencyMigrationRequestSuccessful {
        let dataResidencyMigrationRequestSuccessful = mapDBXTeamLogDataResidencyMigrationRequestSuccessfulTypeToDB(
            object: object
                .dataResidencyMigrationRequestSuccessful
        )
        return DBTEAMLOGEventType(dataResidencyMigrationRequestSuccessful: dataResidencyMigrationRequestSuccessful)
    }
    if let object = object.asDataResidencyMigrationRequestUnsuccessful {
        let dataResidencyMigrationRequestUnsuccessful = mapDBXTeamLogDataResidencyMigrationRequestUnsuccessfulTypeToDB(
            object: object
                .dataResidencyMigrationRequestUnsuccessful
        )
        return DBTEAMLOGEventType(dataResidencyMigrationRequestUnsuccessful: dataResidencyMigrationRequestUnsuccessful)
    }
    if let object = object.asTeamMergeFrom {
        let teamMergeFrom = mapDBXTeamLogTeamMergeFromTypeToDB(object: object.teamMergeFrom)
        return DBTEAMLOGEventType(teamMergeFrom: teamMergeFrom)
    }
    if let object = object.asTeamMergeTo {
        let teamMergeTo = mapDBXTeamLogTeamMergeToTypeToDB(object: object.teamMergeTo)
        return DBTEAMLOGEventType(teamMergeTo: teamMergeTo)
    }
    if let object = object.asTeamProfileAddBackground {
        let teamProfileAddBackground = mapDBXTeamLogTeamProfileAddBackgroundTypeToDB(object: object.teamProfileAddBackground)
        return DBTEAMLOGEventType(teamProfileAddBackground: teamProfileAddBackground)
    }
    if let object = object.asTeamProfileAddLogo {
        let teamProfileAddLogo = mapDBXTeamLogTeamProfileAddLogoTypeToDB(object: object.teamProfileAddLogo)
        return DBTEAMLOGEventType(teamProfileAddLogo: teamProfileAddLogo)
    }
    if let object = object.asTeamProfileChangeBackground {
        let teamProfileChangeBackground = mapDBXTeamLogTeamProfileChangeBackgroundTypeToDB(object: object.teamProfileChangeBackground)
        return DBTEAMLOGEventType(teamProfileChangeBackground: teamProfileChangeBackground)
    }
    if let object = object.asTeamProfileChangeDefaultLanguage {
        let teamProfileChangeDefaultLanguage = mapDBXTeamLogTeamProfileChangeDefaultLanguageTypeToDB(object: object.teamProfileChangeDefaultLanguage)
        return DBTEAMLOGEventType(teamProfileChangeDefaultLanguage: teamProfileChangeDefaultLanguage)
    }
    if let object = object.asTeamProfileChangeLogo {
        let teamProfileChangeLogo = mapDBXTeamLogTeamProfileChangeLogoTypeToDB(object: object.teamProfileChangeLogo)
        return DBTEAMLOGEventType(teamProfileChangeLogo: teamProfileChangeLogo)
    }
    if let object = object.asTeamProfileChangeName {
        let teamProfileChangeName = mapDBXTeamLogTeamProfileChangeNameTypeToDB(object: object.teamProfileChangeName)
        return DBTEAMLOGEventType(teamProfileChangeName: teamProfileChangeName)
    }
    if let object = object.asTeamProfileRemoveBackground {
        let teamProfileRemoveBackground = mapDBXTeamLogTeamProfileRemoveBackgroundTypeToDB(object: object.teamProfileRemoveBackground)
        return DBTEAMLOGEventType(teamProfileRemoveBackground: teamProfileRemoveBackground)
    }
    if let object = object.asTeamProfileRemoveLogo {
        let teamProfileRemoveLogo = mapDBXTeamLogTeamProfileRemoveLogoTypeToDB(object: object.teamProfileRemoveLogo)
        return DBTEAMLOGEventType(teamProfileRemoveLogo: teamProfileRemoveLogo)
    }
    if let object = object.asTfaAddBackupPhone {
        let tfaAddBackupPhone = mapDBXTeamLogTfaAddBackupPhoneTypeToDB(object: object.tfaAddBackupPhone)
        return DBTEAMLOGEventType(tfaAddBackupPhone: tfaAddBackupPhone)
    }
    if let object = object.asTfaAddSecurityKey {
        let tfaAddSecurityKey = mapDBXTeamLogTfaAddSecurityKeyTypeToDB(object: object.tfaAddSecurityKey)
        return DBTEAMLOGEventType(tfaAddSecurityKey: tfaAddSecurityKey)
    }
    if let object = object.asTfaChangeBackupPhone {
        let tfaChangeBackupPhone = mapDBXTeamLogTfaChangeBackupPhoneTypeToDB(object: object.tfaChangeBackupPhone)
        return DBTEAMLOGEventType(tfaChangeBackupPhone: tfaChangeBackupPhone)
    }
    if let object = object.asTfaChangeStatus {
        let tfaChangeStatus = mapDBXTeamLogTfaChangeStatusTypeToDB(object: object.tfaChangeStatus)
        return DBTEAMLOGEventType(tfaChangeStatus: tfaChangeStatus)
    }
    if let object = object.asTfaRemoveBackupPhone {
        let tfaRemoveBackupPhone = mapDBXTeamLogTfaRemoveBackupPhoneTypeToDB(object: object.tfaRemoveBackupPhone)
        return DBTEAMLOGEventType(tfaRemoveBackupPhone: tfaRemoveBackupPhone)
    }
    if let object = object.asTfaRemoveSecurityKey {
        let tfaRemoveSecurityKey = mapDBXTeamLogTfaRemoveSecurityKeyTypeToDB(object: object.tfaRemoveSecurityKey)
        return DBTEAMLOGEventType(tfaRemoveSecurityKey: tfaRemoveSecurityKey)
    }
    if let object = object.asTfaReset {
        let tfaReset = mapDBXTeamLogTfaResetTypeToDB(object: object.tfaReset)
        return DBTEAMLOGEventType(tfaReset: tfaReset)
    }
    if let object = object.asChangedEnterpriseAdminRole {
        let changedEnterpriseAdminRole = mapDBXTeamLogChangedEnterpriseAdminRoleTypeToDB(object: object.changedEnterpriseAdminRole)
        return DBTEAMLOGEventType(changedEnterpriseAdminRole: changedEnterpriseAdminRole)
    }
    if let object = object.asChangedEnterpriseConnectedTeamStatus {
        let changedEnterpriseConnectedTeamStatus = mapDBXTeamLogChangedEnterpriseConnectedTeamStatusTypeToDB(
            object: object
                .changedEnterpriseConnectedTeamStatus
        )
        return DBTEAMLOGEventType(changedEnterpriseConnectedTeamStatus: changedEnterpriseConnectedTeamStatus)
    }
    if let object = object.asEndedEnterpriseAdminSession {
        let endedEnterpriseAdminSession = mapDBXTeamLogEndedEnterpriseAdminSessionTypeToDB(object: object.endedEnterpriseAdminSession)
        return DBTEAMLOGEventType(endedEnterpriseAdminSession: endedEnterpriseAdminSession)
    }
    if let object = object.asEndedEnterpriseAdminSessionDeprecated {
        let endedEnterpriseAdminSessionDeprecated = mapDBXTeamLogEndedEnterpriseAdminSessionDeprecatedTypeToDB(
            object: object
                .endedEnterpriseAdminSessionDeprecated
        )
        return DBTEAMLOGEventType(endedEnterpriseAdminSessionDeprecated: endedEnterpriseAdminSessionDeprecated)
    }
    if let object = object.asEnterpriseSettingsLocking {
        let enterpriseSettingsLocking = mapDBXTeamLogEnterpriseSettingsLockingTypeToDB(object: object.enterpriseSettingsLocking)
        return DBTEAMLOGEventType(enterpriseSettingsLocking: enterpriseSettingsLocking)
    }
    if let object = object.asGuestAdminChangeStatus {
        let guestAdminChangeStatus = mapDBXTeamLogGuestAdminChangeStatusTypeToDB(object: object.guestAdminChangeStatus)
        return DBTEAMLOGEventType(guestAdminChangeStatus: guestAdminChangeStatus)
    }
    if let object = object.asStartedEnterpriseAdminSession {
        let startedEnterpriseAdminSession = mapDBXTeamLogStartedEnterpriseAdminSessionTypeToDB(object: object.startedEnterpriseAdminSession)
        return DBTEAMLOGEventType(startedEnterpriseAdminSession: startedEnterpriseAdminSession)
    }
    if let object = object.asTeamMergeRequestAccepted {
        let teamMergeRequestAccepted = mapDBXTeamLogTeamMergeRequestAcceptedTypeToDB(object: object.teamMergeRequestAccepted)
        return DBTEAMLOGEventType(teamMergeRequestAccepted: teamMergeRequestAccepted)
    }
    if let object = object.asTeamMergeRequestAcceptedShownToPrimaryTeam {
        let teamMergeRequestAcceptedShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestAcceptedShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestAcceptedShownToPrimaryTeam: teamMergeRequestAcceptedShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestAcceptedShownToSecondaryTeam {
        let teamMergeRequestAcceptedShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestAcceptedShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestAcceptedShownToSecondaryTeam: teamMergeRequestAcceptedShownToSecondaryTeam)
    }
    if let object = object.asTeamMergeRequestAutoCanceled {
        let teamMergeRequestAutoCanceled = mapDBXTeamLogTeamMergeRequestAutoCanceledTypeToDB(object: object.teamMergeRequestAutoCanceled)
        return DBTEAMLOGEventType(teamMergeRequestAutoCanceled: teamMergeRequestAutoCanceled)
    }
    if let object = object.asTeamMergeRequestCanceled {
        let teamMergeRequestCanceled = mapDBXTeamLogTeamMergeRequestCanceledTypeToDB(object: object.teamMergeRequestCanceled)
        return DBTEAMLOGEventType(teamMergeRequestCanceled: teamMergeRequestCanceled)
    }
    if let object = object.asTeamMergeRequestCanceledShownToPrimaryTeam {
        let teamMergeRequestCanceledShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestCanceledShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestCanceledShownToPrimaryTeam: teamMergeRequestCanceledShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestCanceledShownToSecondaryTeam {
        let teamMergeRequestCanceledShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestCanceledShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestCanceledShownToSecondaryTeam: teamMergeRequestCanceledShownToSecondaryTeam)
    }
    if let object = object.asTeamMergeRequestExpired {
        let teamMergeRequestExpired = mapDBXTeamLogTeamMergeRequestExpiredTypeToDB(object: object.teamMergeRequestExpired)
        return DBTEAMLOGEventType(teamMergeRequestExpired: teamMergeRequestExpired)
    }
    if let object = object.asTeamMergeRequestExpiredShownToPrimaryTeam {
        let teamMergeRequestExpiredShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestExpiredShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestExpiredShownToPrimaryTeam: teamMergeRequestExpiredShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestExpiredShownToSecondaryTeam {
        let teamMergeRequestExpiredShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestExpiredShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestExpiredShownToSecondaryTeam: teamMergeRequestExpiredShownToSecondaryTeam)
    }
    if let object = object.asTeamMergeRequestRejectedShownToPrimaryTeam {
        let teamMergeRequestRejectedShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestRejectedShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestRejectedShownToPrimaryTeam: teamMergeRequestRejectedShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestRejectedShownToSecondaryTeam {
        let teamMergeRequestRejectedShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestRejectedShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestRejectedShownToSecondaryTeam: teamMergeRequestRejectedShownToSecondaryTeam)
    }
    if let object = object.asTeamMergeRequestReminder {
        let teamMergeRequestReminder = mapDBXTeamLogTeamMergeRequestReminderTypeToDB(object: object.teamMergeRequestReminder)
        return DBTEAMLOGEventType(teamMergeRequestReminder: teamMergeRequestReminder)
    }
    if let object = object.asTeamMergeRequestReminderShownToPrimaryTeam {
        let teamMergeRequestReminderShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestReminderShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestReminderShownToPrimaryTeam: teamMergeRequestReminderShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestReminderShownToSecondaryTeam {
        let teamMergeRequestReminderShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestReminderShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestReminderShownToSecondaryTeam: teamMergeRequestReminderShownToSecondaryTeam)
    }
    if let object = object.asTeamMergeRequestRevoked {
        let teamMergeRequestRevoked = mapDBXTeamLogTeamMergeRequestRevokedTypeToDB(object: object.teamMergeRequestRevoked)
        return DBTEAMLOGEventType(teamMergeRequestRevoked: teamMergeRequestRevoked)
    }
    if let object = object.asTeamMergeRequestSentShownToPrimaryTeam {
        let teamMergeRequestSentShownToPrimaryTeam = mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamTypeToDB(
            object: object
                .teamMergeRequestSentShownToPrimaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestSentShownToPrimaryTeam: teamMergeRequestSentShownToPrimaryTeam)
    }
    if let object = object.asTeamMergeRequestSentShownToSecondaryTeam {
        let teamMergeRequestSentShownToSecondaryTeam = mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamTypeToDB(
            object: object
                .teamMergeRequestSentShownToSecondaryTeam
        )
        return DBTEAMLOGEventType(teamMergeRequestSentShownToSecondaryTeam: teamMergeRequestSentShownToSecondaryTeam)
    }
    if object.asOther != nil {
        return DBTEAMLOGEventType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogEventTypeArgToDBOptional(object: DBXTeamLogEventTypeArg?) -> DBTEAMLOGEventTypeArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLogEventTypeArgToDB(object: object)
}

func mapDBXTeamLogEventTypeArgToDB(object: DBXTeamLogEventTypeArg) -> DBTEAMLOGEventTypeArg {
    if object.asAdminAlertingAlertStateChanged != nil {
        return DBTEAMLOGEventTypeArg(adminAlertingAlertStateChanged: ())
    }
    if object.asAdminAlertingChangedAlertConfig != nil {
        return DBTEAMLOGEventTypeArg(adminAlertingChangedAlertConfig: ())
    }
    if object.asAdminAlertingTriggeredAlert != nil {
        return DBTEAMLOGEventTypeArg(adminAlertingTriggeredAlert: ())
    }
    if object.asRansomwareRestoreProcessCompleted != nil {
        return DBTEAMLOGEventTypeArg(ransomwareRestoreProcessCompleted: ())
    }
    if object.asRansomwareRestoreProcessStarted != nil {
        return DBTEAMLOGEventTypeArg(ransomwareRestoreProcessStarted: ())
    }
    if object.asAppBlockedByPermissions != nil {
        return DBTEAMLOGEventTypeArg(appBlockedByPermissions: ())
    }
    if object.asAppLinkTeam != nil {
        return DBTEAMLOGEventTypeArg(appLinkTeam: ())
    }
    if object.asAppLinkUser != nil {
        return DBTEAMLOGEventTypeArg(appLinkUser: ())
    }
    if object.asAppUnlinkTeam != nil {
        return DBTEAMLOGEventTypeArg(appUnlinkTeam: ())
    }
    if object.asAppUnlinkUser != nil {
        return DBTEAMLOGEventTypeArg(appUnlinkUser: ())
    }
    if object.asIntegrationConnected != nil {
        return DBTEAMLOGEventTypeArg(integrationConnected: ())
    }
    if object.asIntegrationDisconnected != nil {
        return DBTEAMLOGEventTypeArg(integrationDisconnected: ())
    }
    if object.asFileAddComment != nil {
        return DBTEAMLOGEventTypeArg(fileAddComment: ())
    }
    if object.asFileChangeCommentSubscription != nil {
        return DBTEAMLOGEventTypeArg(fileChangeCommentSubscription: ())
    }
    if object.asFileDeleteComment != nil {
        return DBTEAMLOGEventTypeArg(fileDeleteComment: ())
    }
    if object.asFileEditComment != nil {
        return DBTEAMLOGEventTypeArg(fileEditComment: ())
    }
    if object.asFileLikeComment != nil {
        return DBTEAMLOGEventTypeArg(fileLikeComment: ())
    }
    if object.asFileResolveComment != nil {
        return DBTEAMLOGEventTypeArg(fileResolveComment: ())
    }
    if object.asFileUnlikeComment != nil {
        return DBTEAMLOGEventTypeArg(fileUnlikeComment: ())
    }
    if object.asFileUnresolveComment != nil {
        return DBTEAMLOGEventTypeArg(fileUnresolveComment: ())
    }
    if object.asGovernancePolicyAddFolders != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyAddFolders: ())
    }
    if object.asGovernancePolicyAddFolderFailed != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyAddFolderFailed: ())
    }
    if object.asGovernancePolicyContentDisposed != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyContentDisposed: ())
    }
    if object.asGovernancePolicyCreate != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyCreate: ())
    }
    if object.asGovernancePolicyDelete != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyDelete: ())
    }
    if object.asGovernancePolicyEditDetails != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyEditDetails: ())
    }
    if object.asGovernancePolicyEditDuration != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyEditDuration: ())
    }
    if object.asGovernancePolicyExportCreated != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyExportCreated: ())
    }
    if object.asGovernancePolicyExportRemoved != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyExportRemoved: ())
    }
    if object.asGovernancePolicyRemoveFolders != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyRemoveFolders: ())
    }
    if object.asGovernancePolicyReportCreated != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyReportCreated: ())
    }
    if object.asGovernancePolicyZipPartDownloaded != nil {
        return DBTEAMLOGEventTypeArg(governancePolicyZipPartDownloaded: ())
    }
    if object.asLegalHoldsActivateAHold != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsActivateAHold: ())
    }
    if object.asLegalHoldsAddMembers != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsAddMembers: ())
    }
    if object.asLegalHoldsChangeHoldDetails != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsChangeHoldDetails: ())
    }
    if object.asLegalHoldsChangeHoldName != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsChangeHoldName: ())
    }
    if object.asLegalHoldsExportAHold != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsExportAHold: ())
    }
    if object.asLegalHoldsExportCancelled != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsExportCancelled: ())
    }
    if object.asLegalHoldsExportDownloaded != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsExportDownloaded: ())
    }
    if object.asLegalHoldsExportRemoved != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsExportRemoved: ())
    }
    if object.asLegalHoldsReleaseAHold != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsReleaseAHold: ())
    }
    if object.asLegalHoldsRemoveMembers != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsRemoveMembers: ())
    }
    if object.asLegalHoldsReportAHold != nil {
        return DBTEAMLOGEventTypeArg(legalHoldsReportAHold: ())
    }
    if object.asDeviceChangeIpDesktop != nil {
        return DBTEAMLOGEventTypeArg(deviceChangeIpDesktop: ())
    }
    if object.asDeviceChangeIpMobile != nil {
        return DBTEAMLOGEventTypeArg(deviceChangeIpMobile: ())
    }
    if object.asDeviceChangeIpWeb != nil {
        return DBTEAMLOGEventTypeArg(deviceChangeIpWeb: ())
    }
    if object.asDeviceDeleteOnUnlinkFail != nil {
        return DBTEAMLOGEventTypeArg(deviceDeleteOnUnlinkFail: ())
    }
    if object.asDeviceDeleteOnUnlinkSuccess != nil {
        return DBTEAMLOGEventTypeArg(deviceDeleteOnUnlinkSuccess: ())
    }
    if object.asDeviceLinkFail != nil {
        return DBTEAMLOGEventTypeArg(deviceLinkFail: ())
    }
    if object.asDeviceLinkSuccess != nil {
        return DBTEAMLOGEventTypeArg(deviceLinkSuccess: ())
    }
    if object.asDeviceManagementDisabled != nil {
        return DBTEAMLOGEventTypeArg(deviceManagementDisabled: ())
    }
    if object.asDeviceManagementEnabled != nil {
        return DBTEAMLOGEventTypeArg(deviceManagementEnabled: ())
    }
    if object.asDeviceSyncBackupStatusChanged != nil {
        return DBTEAMLOGEventTypeArg(deviceSyncBackupStatusChanged: ())
    }
    if object.asDeviceUnlink != nil {
        return DBTEAMLOGEventTypeArg(deviceUnlink: ())
    }
    if object.asDropboxPasswordsExported != nil {
        return DBTEAMLOGEventTypeArg(dropboxPasswordsExported: ())
    }
    if object.asDropboxPasswordsNewDeviceEnrolled != nil {
        return DBTEAMLOGEventTypeArg(dropboxPasswordsNewDeviceEnrolled: ())
    }
    if object.asEmmRefreshAuthToken != nil {
        return DBTEAMLOGEventTypeArg(emmRefreshAuthToken: ())
    }
    if object.asExternalDriveBackupEligibilityStatusChecked != nil {
        return DBTEAMLOGEventTypeArg(externalDriveBackupEligibilityStatusChecked: ())
    }
    if object.asExternalDriveBackupStatusChanged != nil {
        return DBTEAMLOGEventTypeArg(externalDriveBackupStatusChanged: ())
    }
    if object.asAccountCaptureChangeAvailability != nil {
        return DBTEAMLOGEventTypeArg(accountCaptureChangeAvailability: ())
    }
    if object.asAccountCaptureMigrateAccount != nil {
        return DBTEAMLOGEventTypeArg(accountCaptureMigrateAccount: ())
    }
    if object.asAccountCaptureNotificationEmailsSent != nil {
        return DBTEAMLOGEventTypeArg(accountCaptureNotificationEmailsSent: ())
    }
    if object.asAccountCaptureRelinquishAccount != nil {
        return DBTEAMLOGEventTypeArg(accountCaptureRelinquishAccount: ())
    }
    if object.asDisabledDomainInvites != nil {
        return DBTEAMLOGEventTypeArg(disabledDomainInvites: ())
    }
    if object.asDomainInvitesApproveRequestToJoinTeam != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesApproveRequestToJoinTeam: ())
    }
    if object.asDomainInvitesDeclineRequestToJoinTeam != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesDeclineRequestToJoinTeam: ())
    }
    if object.asDomainInvitesEmailExistingUsers != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesEmailExistingUsers: ())
    }
    if object.asDomainInvitesRequestToJoinTeam != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesRequestToJoinTeam: ())
    }
    if object.asDomainInvitesSetInviteNewUserPrefToNo != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesSetInviteNewUserPrefToNo: ())
    }
    if object.asDomainInvitesSetInviteNewUserPrefToYes != nil {
        return DBTEAMLOGEventTypeArg(domainInvitesSetInviteNewUserPrefToYes: ())
    }
    if object.asDomainVerificationAddDomainFail != nil {
        return DBTEAMLOGEventTypeArg(domainVerificationAddDomainFail: ())
    }
    if object.asDomainVerificationAddDomainSuccess != nil {
        return DBTEAMLOGEventTypeArg(domainVerificationAddDomainSuccess: ())
    }
    if object.asDomainVerificationRemoveDomain != nil {
        return DBTEAMLOGEventTypeArg(domainVerificationRemoveDomain: ())
    }
    if object.asEnabledDomainInvites != nil {
        return DBTEAMLOGEventTypeArg(enabledDomainInvites: ())
    }
    if object.asTeamEncryptionKeyCancelKeyDeletion != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyCancelKeyDeletion: ())
    }
    if object.asTeamEncryptionKeyCreateKey != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyCreateKey: ())
    }
    if object.asTeamEncryptionKeyDeleteKey != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyDeleteKey: ())
    }
    if object.asTeamEncryptionKeyDisableKey != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyDisableKey: ())
    }
    if object.asTeamEncryptionKeyEnableKey != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyEnableKey: ())
    }
    if object.asTeamEncryptionKeyRotateKey != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyRotateKey: ())
    }
    if object.asTeamEncryptionKeyScheduleKeyDeletion != nil {
        return DBTEAMLOGEventTypeArg(teamEncryptionKeyScheduleKeyDeletion: ())
    }
    if object.asApplyNamingConvention != nil {
        return DBTEAMLOGEventTypeArg(applyNamingConvention: ())
    }
    if object.asCreateFolder != nil {
        return DBTEAMLOGEventTypeArg(createFolder: ())
    }
    if object.asFileAdd != nil {
        return DBTEAMLOGEventTypeArg(fileAdd: ())
    }
    if object.asFileAddFromAutomation != nil {
        return DBTEAMLOGEventTypeArg(fileAddFromAutomation: ())
    }
    if object.asFileCopy != nil {
        return DBTEAMLOGEventTypeArg(fileCopy: ())
    }
    if object.asFileDelete != nil {
        return DBTEAMLOGEventTypeArg(fileDelete: ())
    }
    if object.asFileDownload != nil {
        return DBTEAMLOGEventTypeArg(fileDownload: ())
    }
    if object.asFileEdit != nil {
        return DBTEAMLOGEventTypeArg(fileEdit: ())
    }
    if object.asFileGetCopyReference != nil {
        return DBTEAMLOGEventTypeArg(fileGetCopyReference: ())
    }
    if object.asFileLockingLockStatusChanged != nil {
        return DBTEAMLOGEventTypeArg(fileLockingLockStatusChanged: ())
    }
    if object.asFileMove != nil {
        return DBTEAMLOGEventTypeArg(fileMove: ())
    }
    if object.asFilePermanentlyDelete != nil {
        return DBTEAMLOGEventTypeArg(filePermanentlyDelete: ())
    }
    if object.asFilePreview != nil {
        return DBTEAMLOGEventTypeArg(filePreview: ())
    }
    if object.asFileRename != nil {
        return DBTEAMLOGEventTypeArg(fileRename: ())
    }
    if object.asFileRestore != nil {
        return DBTEAMLOGEventTypeArg(fileRestore: ())
    }
    if object.asFileRevert != nil {
        return DBTEAMLOGEventTypeArg(fileRevert: ())
    }
    if object.asFileRollbackChanges != nil {
        return DBTEAMLOGEventTypeArg(fileRollbackChanges: ())
    }
    if object.asFileSaveCopyReference != nil {
        return DBTEAMLOGEventTypeArg(fileSaveCopyReference: ())
    }
    if object.asFolderOverviewDescriptionChanged != nil {
        return DBTEAMLOGEventTypeArg(folderOverviewDescriptionChanged: ())
    }
    if object.asFolderOverviewItemPinned != nil {
        return DBTEAMLOGEventTypeArg(folderOverviewItemPinned: ())
    }
    if object.asFolderOverviewItemUnpinned != nil {
        return DBTEAMLOGEventTypeArg(folderOverviewItemUnpinned: ())
    }
    if object.asObjectLabelAdded != nil {
        return DBTEAMLOGEventTypeArg(objectLabelAdded: ())
    }
    if object.asObjectLabelRemoved != nil {
        return DBTEAMLOGEventTypeArg(objectLabelRemoved: ())
    }
    if object.asObjectLabelUpdatedValue != nil {
        return DBTEAMLOGEventTypeArg(objectLabelUpdatedValue: ())
    }
    if object.asOrganizeFolderWithTidy != nil {
        return DBTEAMLOGEventTypeArg(organizeFolderWithTidy: ())
    }
    if object.asReplayFileDelete != nil {
        return DBTEAMLOGEventTypeArg(replayFileDelete: ())
    }
    if object.asRewindFolder != nil {
        return DBTEAMLOGEventTypeArg(rewindFolder: ())
    }
    if object.asUndoNamingConvention != nil {
        return DBTEAMLOGEventTypeArg(undoNamingConvention: ())
    }
    if object.asUndoOrganizeFolderWithTidy != nil {
        return DBTEAMLOGEventTypeArg(undoOrganizeFolderWithTidy: ())
    }
    if object.asUserTagsAdded != nil {
        return DBTEAMLOGEventTypeArg(userTagsAdded: ())
    }
    if object.asUserTagsRemoved != nil {
        return DBTEAMLOGEventTypeArg(userTagsRemoved: ())
    }
    if object.asEmailIngestReceiveFile != nil {
        return DBTEAMLOGEventTypeArg(emailIngestReceiveFile: ())
    }
    if object.asFileRequestChange != nil {
        return DBTEAMLOGEventTypeArg(fileRequestChange: ())
    }
    if object.asFileRequestClose != nil {
        return DBTEAMLOGEventTypeArg(fileRequestClose: ())
    }
    if object.asFileRequestCreate != nil {
        return DBTEAMLOGEventTypeArg(fileRequestCreate: ())
    }
    if object.asFileRequestDelete != nil {
        return DBTEAMLOGEventTypeArg(fileRequestDelete: ())
    }
    if object.asFileRequestReceiveFile != nil {
        return DBTEAMLOGEventTypeArg(fileRequestReceiveFile: ())
    }
    if object.asGroupAddExternalId != nil {
        return DBTEAMLOGEventTypeArg(groupAddExternalId: ())
    }
    if object.asGroupAddMember != nil {
        return DBTEAMLOGEventTypeArg(groupAddMember: ())
    }
    if object.asGroupChangeExternalId != nil {
        return DBTEAMLOGEventTypeArg(groupChangeExternalId: ())
    }
    if object.asGroupChangeManagementType != nil {
        return DBTEAMLOGEventTypeArg(groupChangeManagementType: ())
    }
    if object.asGroupChangeMemberRole != nil {
        return DBTEAMLOGEventTypeArg(groupChangeMemberRole: ())
    }
    if object.asGroupCreate != nil {
        return DBTEAMLOGEventTypeArg(groupCreate: ())
    }
    if object.asGroupDelete != nil {
        return DBTEAMLOGEventTypeArg(groupDelete: ())
    }
    if object.asGroupDescriptionUpdated != nil {
        return DBTEAMLOGEventTypeArg(groupDescriptionUpdated: ())
    }
    if object.asGroupJoinPolicyUpdated != nil {
        return DBTEAMLOGEventTypeArg(groupJoinPolicyUpdated: ())
    }
    if object.asGroupMoved != nil {
        return DBTEAMLOGEventTypeArg(groupMoved: ())
    }
    if object.asGroupRemoveExternalId != nil {
        return DBTEAMLOGEventTypeArg(groupRemoveExternalId: ())
    }
    if object.asGroupRemoveMember != nil {
        return DBTEAMLOGEventTypeArg(groupRemoveMember: ())
    }
    if object.asGroupRename != nil {
        return DBTEAMLOGEventTypeArg(groupRename: ())
    }
    if object.asAccountLockOrUnlocked != nil {
        return DBTEAMLOGEventTypeArg(accountLockOrUnlocked: ())
    }
    if object.asEmmError != nil {
        return DBTEAMLOGEventTypeArg(emmError: ())
    }
    if object.asGuestAdminSignedInViaTrustedTeams != nil {
        return DBTEAMLOGEventTypeArg(guestAdminSignedInViaTrustedTeams: ())
    }
    if object.asGuestAdminSignedOutViaTrustedTeams != nil {
        return DBTEAMLOGEventTypeArg(guestAdminSignedOutViaTrustedTeams: ())
    }
    if object.asLoginFail != nil {
        return DBTEAMLOGEventTypeArg(loginFail: ())
    }
    if object.asLoginSuccess != nil {
        return DBTEAMLOGEventTypeArg(loginSuccess: ())
    }
    if object.asLogout != nil {
        return DBTEAMLOGEventTypeArg(logout: ())
    }
    if object.asResellerSupportSessionEnd != nil {
        return DBTEAMLOGEventTypeArg(resellerSupportSessionEnd: ())
    }
    if object.asResellerSupportSessionStart != nil {
        return DBTEAMLOGEventTypeArg(resellerSupportSessionStart: ())
    }
    if object.asSignInAsSessionEnd != nil {
        return DBTEAMLOGEventTypeArg(signInAsSessionEnd: ())
    }
    if object.asSignInAsSessionStart != nil {
        return DBTEAMLOGEventTypeArg(signInAsSessionStart: ())
    }
    if object.asSsoError != nil {
        return DBTEAMLOGEventTypeArg(ssoError: ())
    }
    if object.asBackupAdminInvitationSent != nil {
        return DBTEAMLOGEventTypeArg(backupAdminInvitationSent: ())
    }
    if object.asBackupInvitationOpened != nil {
        return DBTEAMLOGEventTypeArg(backupInvitationOpened: ())
    }
    if object.asCreateTeamInviteLink != nil {
        return DBTEAMLOGEventTypeArg(createTeamInviteLink: ())
    }
    if object.asDeleteTeamInviteLink != nil {
        return DBTEAMLOGEventTypeArg(deleteTeamInviteLink: ())
    }
    if object.asMemberAddExternalId != nil {
        return DBTEAMLOGEventTypeArg(memberAddExternalId: ())
    }
    if object.asMemberAddName != nil {
        return DBTEAMLOGEventTypeArg(memberAddName: ())
    }
    if object.asMemberChangeAdminRole != nil {
        return DBTEAMLOGEventTypeArg(memberChangeAdminRole: ())
    }
    if object.asMemberChangeEmail != nil {
        return DBTEAMLOGEventTypeArg(memberChangeEmail: ())
    }
    if object.asMemberChangeExternalId != nil {
        return DBTEAMLOGEventTypeArg(memberChangeExternalId: ())
    }
    if object.asMemberChangeMembershipType != nil {
        return DBTEAMLOGEventTypeArg(memberChangeMembershipType: ())
    }
    if object.asMemberChangeName != nil {
        return DBTEAMLOGEventTypeArg(memberChangeName: ())
    }
    if object.asMemberChangeResellerRole != nil {
        return DBTEAMLOGEventTypeArg(memberChangeResellerRole: ())
    }
    if object.asMemberChangeStatus != nil {
        return DBTEAMLOGEventTypeArg(memberChangeStatus: ())
    }
    if object.asMemberDeleteManualContacts != nil {
        return DBTEAMLOGEventTypeArg(memberDeleteManualContacts: ())
    }
    if object.asMemberDeleteProfilePhoto != nil {
        return DBTEAMLOGEventTypeArg(memberDeleteProfilePhoto: ())
    }
    if object.asMemberPermanentlyDeleteAccountContents != nil {
        return DBTEAMLOGEventTypeArg(memberPermanentlyDeleteAccountContents: ())
    }
    if object.asMemberRemoveExternalId != nil {
        return DBTEAMLOGEventTypeArg(memberRemoveExternalId: ())
    }
    if object.asMemberSetProfilePhoto != nil {
        return DBTEAMLOGEventTypeArg(memberSetProfilePhoto: ())
    }
    if object.asMemberSpaceLimitsAddCustomQuota != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsAddCustomQuota: ())
    }
    if object.asMemberSpaceLimitsChangeCustomQuota != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsChangeCustomQuota: ())
    }
    if object.asMemberSpaceLimitsChangeStatus != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsChangeStatus: ())
    }
    if object.asMemberSpaceLimitsRemoveCustomQuota != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsRemoveCustomQuota: ())
    }
    if object.asMemberSuggest != nil {
        return DBTEAMLOGEventTypeArg(memberSuggest: ())
    }
    if object.asMemberTransferAccountContents != nil {
        return DBTEAMLOGEventTypeArg(memberTransferAccountContents: ())
    }
    if object.asPendingSecondaryEmailAdded != nil {
        return DBTEAMLOGEventTypeArg(pendingSecondaryEmailAdded: ())
    }
    if object.asSecondaryEmailDeleted != nil {
        return DBTEAMLOGEventTypeArg(secondaryEmailDeleted: ())
    }
    if object.asSecondaryEmailVerified != nil {
        return DBTEAMLOGEventTypeArg(secondaryEmailVerified: ())
    }
    if object.asSecondaryMailsPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(secondaryMailsPolicyChanged: ())
    }
    if object.asBinderAddPage != nil {
        return DBTEAMLOGEventTypeArg(binderAddPage: ())
    }
    if object.asBinderAddSection != nil {
        return DBTEAMLOGEventTypeArg(binderAddSection: ())
    }
    if object.asBinderRemovePage != nil {
        return DBTEAMLOGEventTypeArg(binderRemovePage: ())
    }
    if object.asBinderRemoveSection != nil {
        return DBTEAMLOGEventTypeArg(binderRemoveSection: ())
    }
    if object.asBinderRenamePage != nil {
        return DBTEAMLOGEventTypeArg(binderRenamePage: ())
    }
    if object.asBinderRenameSection != nil {
        return DBTEAMLOGEventTypeArg(binderRenameSection: ())
    }
    if object.asBinderReorderPage != nil {
        return DBTEAMLOGEventTypeArg(binderReorderPage: ())
    }
    if object.asBinderReorderSection != nil {
        return DBTEAMLOGEventTypeArg(binderReorderSection: ())
    }
    if object.asPaperContentAddMember != nil {
        return DBTEAMLOGEventTypeArg(paperContentAddMember: ())
    }
    if object.asPaperContentAddToFolder != nil {
        return DBTEAMLOGEventTypeArg(paperContentAddToFolder: ())
    }
    if object.asPaperContentArchive != nil {
        return DBTEAMLOGEventTypeArg(paperContentArchive: ())
    }
    if object.asPaperContentCreate != nil {
        return DBTEAMLOGEventTypeArg(paperContentCreate: ())
    }
    if object.asPaperContentPermanentlyDelete != nil {
        return DBTEAMLOGEventTypeArg(paperContentPermanentlyDelete: ())
    }
    if object.asPaperContentRemoveFromFolder != nil {
        return DBTEAMLOGEventTypeArg(paperContentRemoveFromFolder: ())
    }
    if object.asPaperContentRemoveMember != nil {
        return DBTEAMLOGEventTypeArg(paperContentRemoveMember: ())
    }
    if object.asPaperContentRename != nil {
        return DBTEAMLOGEventTypeArg(paperContentRename: ())
    }
    if object.asPaperContentRestore != nil {
        return DBTEAMLOGEventTypeArg(paperContentRestore: ())
    }
    if object.asPaperDocAddComment != nil {
        return DBTEAMLOGEventTypeArg(paperDocAddComment: ())
    }
    if object.asPaperDocChangeMemberRole != nil {
        return DBTEAMLOGEventTypeArg(paperDocChangeMemberRole: ())
    }
    if object.asPaperDocChangeSharingPolicy != nil {
        return DBTEAMLOGEventTypeArg(paperDocChangeSharingPolicy: ())
    }
    if object.asPaperDocChangeSubscription != nil {
        return DBTEAMLOGEventTypeArg(paperDocChangeSubscription: ())
    }
    if object.asPaperDocDeleted != nil {
        return DBTEAMLOGEventTypeArg(paperDocDeleted: ())
    }
    if object.asPaperDocDeleteComment != nil {
        return DBTEAMLOGEventTypeArg(paperDocDeleteComment: ())
    }
    if object.asPaperDocDownload != nil {
        return DBTEAMLOGEventTypeArg(paperDocDownload: ())
    }
    if object.asPaperDocEdit != nil {
        return DBTEAMLOGEventTypeArg(paperDocEdit: ())
    }
    if object.asPaperDocEditComment != nil {
        return DBTEAMLOGEventTypeArg(paperDocEditComment: ())
    }
    if object.asPaperDocFollowed != nil {
        return DBTEAMLOGEventTypeArg(paperDocFollowed: ())
    }
    if object.asPaperDocMention != nil {
        return DBTEAMLOGEventTypeArg(paperDocMention: ())
    }
    if object.asPaperDocOwnershipChanged != nil {
        return DBTEAMLOGEventTypeArg(paperDocOwnershipChanged: ())
    }
    if object.asPaperDocRequestAccess != nil {
        return DBTEAMLOGEventTypeArg(paperDocRequestAccess: ())
    }
    if object.asPaperDocResolveComment != nil {
        return DBTEAMLOGEventTypeArg(paperDocResolveComment: ())
    }
    if object.asPaperDocRevert != nil {
        return DBTEAMLOGEventTypeArg(paperDocRevert: ())
    }
    if object.asPaperDocSlackShare != nil {
        return DBTEAMLOGEventTypeArg(paperDocSlackShare: ())
    }
    if object.asPaperDocTeamInvite != nil {
        return DBTEAMLOGEventTypeArg(paperDocTeamInvite: ())
    }
    if object.asPaperDocTrashed != nil {
        return DBTEAMLOGEventTypeArg(paperDocTrashed: ())
    }
    if object.asPaperDocUnresolveComment != nil {
        return DBTEAMLOGEventTypeArg(paperDocUnresolveComment: ())
    }
    if object.asPaperDocUntrashed != nil {
        return DBTEAMLOGEventTypeArg(paperDocUntrashed: ())
    }
    if object.asPaperDocView != nil {
        return DBTEAMLOGEventTypeArg(paperDocView: ())
    }
    if object.asPaperExternalViewAllow != nil {
        return DBTEAMLOGEventTypeArg(paperExternalViewAllow: ())
    }
    if object.asPaperExternalViewDefaultTeam != nil {
        return DBTEAMLOGEventTypeArg(paperExternalViewDefaultTeam: ())
    }
    if object.asPaperExternalViewForbid != nil {
        return DBTEAMLOGEventTypeArg(paperExternalViewForbid: ())
    }
    if object.asPaperFolderChangeSubscription != nil {
        return DBTEAMLOGEventTypeArg(paperFolderChangeSubscription: ())
    }
    if object.asPaperFolderDeleted != nil {
        return DBTEAMLOGEventTypeArg(paperFolderDeleted: ())
    }
    if object.asPaperFolderFollowed != nil {
        return DBTEAMLOGEventTypeArg(paperFolderFollowed: ())
    }
    if object.asPaperFolderTeamInvite != nil {
        return DBTEAMLOGEventTypeArg(paperFolderTeamInvite: ())
    }
    if object.asPaperPublishedLinkChangePermission != nil {
        return DBTEAMLOGEventTypeArg(paperPublishedLinkChangePermission: ())
    }
    if object.asPaperPublishedLinkCreate != nil {
        return DBTEAMLOGEventTypeArg(paperPublishedLinkCreate: ())
    }
    if object.asPaperPublishedLinkDisabled != nil {
        return DBTEAMLOGEventTypeArg(paperPublishedLinkDisabled: ())
    }
    if object.asPaperPublishedLinkView != nil {
        return DBTEAMLOGEventTypeArg(paperPublishedLinkView: ())
    }
    if object.asPasswordChange != nil {
        return DBTEAMLOGEventTypeArg(passwordChange: ())
    }
    if object.asPasswordReset != nil {
        return DBTEAMLOGEventTypeArg(passwordReset: ())
    }
    if object.asPasswordResetAll != nil {
        return DBTEAMLOGEventTypeArg(passwordResetAll: ())
    }
    if object.asClassificationCreateReport != nil {
        return DBTEAMLOGEventTypeArg(classificationCreateReport: ())
    }
    if object.asClassificationCreateReportFail != nil {
        return DBTEAMLOGEventTypeArg(classificationCreateReportFail: ())
    }
    if object.asEmmCreateExceptionsReport != nil {
        return DBTEAMLOGEventTypeArg(emmCreateExceptionsReport: ())
    }
    if object.asEmmCreateUsageReport != nil {
        return DBTEAMLOGEventTypeArg(emmCreateUsageReport: ())
    }
    if object.asExportMembersReport != nil {
        return DBTEAMLOGEventTypeArg(exportMembersReport: ())
    }
    if object.asExportMembersReportFail != nil {
        return DBTEAMLOGEventTypeArg(exportMembersReportFail: ())
    }
    if object.asExternalSharingCreateReport != nil {
        return DBTEAMLOGEventTypeArg(externalSharingCreateReport: ())
    }
    if object.asExternalSharingReportFailed != nil {
        return DBTEAMLOGEventTypeArg(externalSharingReportFailed: ())
    }
    if object.asNoExpirationLinkGenCreateReport != nil {
        return DBTEAMLOGEventTypeArg(noExpirationLinkGenCreateReport: ())
    }
    if object.asNoExpirationLinkGenReportFailed != nil {
        return DBTEAMLOGEventTypeArg(noExpirationLinkGenReportFailed: ())
    }
    if object.asNoPasswordLinkGenCreateReport != nil {
        return DBTEAMLOGEventTypeArg(noPasswordLinkGenCreateReport: ())
    }
    if object.asNoPasswordLinkGenReportFailed != nil {
        return DBTEAMLOGEventTypeArg(noPasswordLinkGenReportFailed: ())
    }
    if object.asNoPasswordLinkViewCreateReport != nil {
        return DBTEAMLOGEventTypeArg(noPasswordLinkViewCreateReport: ())
    }
    if object.asNoPasswordLinkViewReportFailed != nil {
        return DBTEAMLOGEventTypeArg(noPasswordLinkViewReportFailed: ())
    }
    if object.asOutdatedLinkViewCreateReport != nil {
        return DBTEAMLOGEventTypeArg(outdatedLinkViewCreateReport: ())
    }
    if object.asOutdatedLinkViewReportFailed != nil {
        return DBTEAMLOGEventTypeArg(outdatedLinkViewReportFailed: ())
    }
    if object.asPaperAdminExportStart != nil {
        return DBTEAMLOGEventTypeArg(paperAdminExportStart: ())
    }
    if object.asRansomwareAlertCreateReport != nil {
        return DBTEAMLOGEventTypeArg(ransomwareAlertCreateReport: ())
    }
    if object.asRansomwareAlertCreateReportFailed != nil {
        return DBTEAMLOGEventTypeArg(ransomwareAlertCreateReportFailed: ())
    }
    if object.asSmartSyncCreateAdminPrivilegeReport != nil {
        return DBTEAMLOGEventTypeArg(smartSyncCreateAdminPrivilegeReport: ())
    }
    if object.asTeamActivityCreateReport != nil {
        return DBTEAMLOGEventTypeArg(teamActivityCreateReport: ())
    }
    if object.asTeamActivityCreateReportFail != nil {
        return DBTEAMLOGEventTypeArg(teamActivityCreateReportFail: ())
    }
    if object.asCollectionShare != nil {
        return DBTEAMLOGEventTypeArg(collectionShare: ())
    }
    if object.asFileTransfersFileAdd != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersFileAdd: ())
    }
    if object.asFileTransfersTransferDelete != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersTransferDelete: ())
    }
    if object.asFileTransfersTransferDownload != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersTransferDownload: ())
    }
    if object.asFileTransfersTransferSend != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersTransferSend: ())
    }
    if object.asFileTransfersTransferView != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersTransferView: ())
    }
    if object.asNoteAclInviteOnly != nil {
        return DBTEAMLOGEventTypeArg(noteAclInviteOnly: ())
    }
    if object.asNoteAclLink != nil {
        return DBTEAMLOGEventTypeArg(noteAclLink: ())
    }
    if object.asNoteAclTeamLink != nil {
        return DBTEAMLOGEventTypeArg(noteAclTeamLink: ())
    }
    if object.asNoteShared != nil {
        return DBTEAMLOGEventTypeArg(noteShared: ())
    }
    if object.asNoteShareReceive != nil {
        return DBTEAMLOGEventTypeArg(noteShareReceive: ())
    }
    if object.asOpenNoteShared != nil {
        return DBTEAMLOGEventTypeArg(openNoteShared: ())
    }
    if object.asReplayFileSharedLinkCreated != nil {
        return DBTEAMLOGEventTypeArg(replayFileSharedLinkCreated: ())
    }
    if object.asReplayFileSharedLinkModified != nil {
        return DBTEAMLOGEventTypeArg(replayFileSharedLinkModified: ())
    }
    if object.asReplayProjectTeamAdd != nil {
        return DBTEAMLOGEventTypeArg(replayProjectTeamAdd: ())
    }
    if object.asReplayProjectTeamDelete != nil {
        return DBTEAMLOGEventTypeArg(replayProjectTeamDelete: ())
    }
    if object.asSfAddGroup != nil {
        return DBTEAMLOGEventTypeArg(sfAddGroup: ())
    }
    if object.asSfAllowNonMembersToViewSharedLinks != nil {
        return DBTEAMLOGEventTypeArg(sfAllowNonMembersToViewSharedLinks: ())
    }
    if object.asSfExternalInviteWarn != nil {
        return DBTEAMLOGEventTypeArg(sfExternalInviteWarn: ())
    }
    if object.asSfFbInvite != nil {
        return DBTEAMLOGEventTypeArg(sfFbInvite: ())
    }
    if object.asSfFbInviteChangeRole != nil {
        return DBTEAMLOGEventTypeArg(sfFbInviteChangeRole: ())
    }
    if object.asSfFbUninvite != nil {
        return DBTEAMLOGEventTypeArg(sfFbUninvite: ())
    }
    if object.asSfInviteGroup != nil {
        return DBTEAMLOGEventTypeArg(sfInviteGroup: ())
    }
    if object.asSfTeamGrantAccess != nil {
        return DBTEAMLOGEventTypeArg(sfTeamGrantAccess: ())
    }
    if object.asSfTeamInvite != nil {
        return DBTEAMLOGEventTypeArg(sfTeamInvite: ())
    }
    if object.asSfTeamInviteChangeRole != nil {
        return DBTEAMLOGEventTypeArg(sfTeamInviteChangeRole: ())
    }
    if object.asSfTeamJoin != nil {
        return DBTEAMLOGEventTypeArg(sfTeamJoin: ())
    }
    if object.asSfTeamJoinFromOobLink != nil {
        return DBTEAMLOGEventTypeArg(sfTeamJoinFromOobLink: ())
    }
    if object.asSfTeamUninvite != nil {
        return DBTEAMLOGEventTypeArg(sfTeamUninvite: ())
    }
    if object.asSharedContentAddInvitees != nil {
        return DBTEAMLOGEventTypeArg(sharedContentAddInvitees: ())
    }
    if object.asSharedContentAddLinkExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedContentAddLinkExpiry: ())
    }
    if object.asSharedContentAddLinkPassword != nil {
        return DBTEAMLOGEventTypeArg(sharedContentAddLinkPassword: ())
    }
    if object.asSharedContentAddMember != nil {
        return DBTEAMLOGEventTypeArg(sharedContentAddMember: ())
    }
    if object.asSharedContentChangeDownloadsPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeDownloadsPolicy: ())
    }
    if object.asSharedContentChangeInviteeRole != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeInviteeRole: ())
    }
    if object.asSharedContentChangeLinkAudience != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeLinkAudience: ())
    }
    if object.asSharedContentChangeLinkExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeLinkExpiry: ())
    }
    if object.asSharedContentChangeLinkPassword != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeLinkPassword: ())
    }
    if object.asSharedContentChangeMemberRole != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeMemberRole: ())
    }
    if object.asSharedContentChangeViewerInfoPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedContentChangeViewerInfoPolicy: ())
    }
    if object.asSharedContentClaimInvitation != nil {
        return DBTEAMLOGEventTypeArg(sharedContentClaimInvitation: ())
    }
    if object.asSharedContentCopy != nil {
        return DBTEAMLOGEventTypeArg(sharedContentCopy: ())
    }
    if object.asSharedContentDownload != nil {
        return DBTEAMLOGEventTypeArg(sharedContentDownload: ())
    }
    if object.asSharedContentRelinquishMembership != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRelinquishMembership: ())
    }
    if object.asSharedContentRemoveInvitees != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRemoveInvitees: ())
    }
    if object.asSharedContentRemoveLinkExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRemoveLinkExpiry: ())
    }
    if object.asSharedContentRemoveLinkPassword != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRemoveLinkPassword: ())
    }
    if object.asSharedContentRemoveMember != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRemoveMember: ())
    }
    if object.asSharedContentRequestAccess != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRequestAccess: ())
    }
    if object.asSharedContentRestoreInvitees != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRestoreInvitees: ())
    }
    if object.asSharedContentRestoreMember != nil {
        return DBTEAMLOGEventTypeArg(sharedContentRestoreMember: ())
    }
    if object.asSharedContentUnshare != nil {
        return DBTEAMLOGEventTypeArg(sharedContentUnshare: ())
    }
    if object.asSharedContentView != nil {
        return DBTEAMLOGEventTypeArg(sharedContentView: ())
    }
    if object.asSharedFolderChangeLinkPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderChangeLinkPolicy: ())
    }
    if object.asSharedFolderChangeMembersInheritancePolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderChangeMembersInheritancePolicy: ())
    }
    if object.asSharedFolderChangeMembersManagementPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderChangeMembersManagementPolicy: ())
    }
    if object.asSharedFolderChangeMembersPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderChangeMembersPolicy: ())
    }
    if object.asSharedFolderCreate != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderCreate: ())
    }
    if object.asSharedFolderDeclineInvitation != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderDeclineInvitation: ())
    }
    if object.asSharedFolderMount != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderMount: ())
    }
    if object.asSharedFolderNest != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderNest: ())
    }
    if object.asSharedFolderTransferOwnership != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderTransferOwnership: ())
    }
    if object.asSharedFolderUnmount != nil {
        return DBTEAMLOGEventTypeArg(sharedFolderUnmount: ())
    }
    if object.asSharedLinkAddExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkAddExpiry: ())
    }
    if object.asSharedLinkChangeExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkChangeExpiry: ())
    }
    if object.asSharedLinkChangeVisibility != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkChangeVisibility: ())
    }
    if object.asSharedLinkCopy != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkCopy: ())
    }
    if object.asSharedLinkCreate != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkCreate: ())
    }
    if object.asSharedLinkDisable != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkDisable: ())
    }
    if object.asSharedLinkDownload != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkDownload: ())
    }
    if object.asSharedLinkRemoveExpiry != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkRemoveExpiry: ())
    }
    if object.asSharedLinkSettingsAddExpiration != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsAddExpiration: ())
    }
    if object.asSharedLinkSettingsAddPassword != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsAddPassword: ())
    }
    if object.asSharedLinkSettingsAllowDownloadDisabled != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsAllowDownloadDisabled: ())
    }
    if object.asSharedLinkSettingsAllowDownloadEnabled != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsAllowDownloadEnabled: ())
    }
    if object.asSharedLinkSettingsChangeAudience != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsChangeAudience: ())
    }
    if object.asSharedLinkSettingsChangeExpiration != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsChangeExpiration: ())
    }
    if object.asSharedLinkSettingsChangePassword != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsChangePassword: ())
    }
    if object.asSharedLinkSettingsRemoveExpiration != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsRemoveExpiration: ())
    }
    if object.asSharedLinkSettingsRemovePassword != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkSettingsRemovePassword: ())
    }
    if object.asSharedLinkShare != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkShare: ())
    }
    if object.asSharedLinkView != nil {
        return DBTEAMLOGEventTypeArg(sharedLinkView: ())
    }
    if object.asSharedNoteOpened != nil {
        return DBTEAMLOGEventTypeArg(sharedNoteOpened: ())
    }
    if object.asShmodelDisableDownloads != nil {
        return DBTEAMLOGEventTypeArg(shmodelDisableDownloads: ())
    }
    if object.asShmodelEnableDownloads != nil {
        return DBTEAMLOGEventTypeArg(shmodelEnableDownloads: ())
    }
    if object.asShmodelGroupShare != nil {
        return DBTEAMLOGEventTypeArg(shmodelGroupShare: ())
    }
    if object.asShowcaseAccessGranted != nil {
        return DBTEAMLOGEventTypeArg(showcaseAccessGranted: ())
    }
    if object.asShowcaseAddMember != nil {
        return DBTEAMLOGEventTypeArg(showcaseAddMember: ())
    }
    if object.asShowcaseArchived != nil {
        return DBTEAMLOGEventTypeArg(showcaseArchived: ())
    }
    if object.asShowcaseCreated != nil {
        return DBTEAMLOGEventTypeArg(showcaseCreated: ())
    }
    if object.asShowcaseDeleteComment != nil {
        return DBTEAMLOGEventTypeArg(showcaseDeleteComment: ())
    }
    if object.asShowcaseEdited != nil {
        return DBTEAMLOGEventTypeArg(showcaseEdited: ())
    }
    if object.asShowcaseEditComment != nil {
        return DBTEAMLOGEventTypeArg(showcaseEditComment: ())
    }
    if object.asShowcaseFileAdded != nil {
        return DBTEAMLOGEventTypeArg(showcaseFileAdded: ())
    }
    if object.asShowcaseFileDownload != nil {
        return DBTEAMLOGEventTypeArg(showcaseFileDownload: ())
    }
    if object.asShowcaseFileRemoved != nil {
        return DBTEAMLOGEventTypeArg(showcaseFileRemoved: ())
    }
    if object.asShowcaseFileView != nil {
        return DBTEAMLOGEventTypeArg(showcaseFileView: ())
    }
    if object.asShowcasePermanentlyDeleted != nil {
        return DBTEAMLOGEventTypeArg(showcasePermanentlyDeleted: ())
    }
    if object.asShowcasePostComment != nil {
        return DBTEAMLOGEventTypeArg(showcasePostComment: ())
    }
    if object.asShowcaseRemoveMember != nil {
        return DBTEAMLOGEventTypeArg(showcaseRemoveMember: ())
    }
    if object.asShowcaseRenamed != nil {
        return DBTEAMLOGEventTypeArg(showcaseRenamed: ())
    }
    if object.asShowcaseRequestAccess != nil {
        return DBTEAMLOGEventTypeArg(showcaseRequestAccess: ())
    }
    if object.asShowcaseResolveComment != nil {
        return DBTEAMLOGEventTypeArg(showcaseResolveComment: ())
    }
    if object.asShowcaseRestored != nil {
        return DBTEAMLOGEventTypeArg(showcaseRestored: ())
    }
    if object.asShowcaseTrashed != nil {
        return DBTEAMLOGEventTypeArg(showcaseTrashed: ())
    }
    if object.asShowcaseTrashedDeprecated != nil {
        return DBTEAMLOGEventTypeArg(showcaseTrashedDeprecated: ())
    }
    if object.asShowcaseUnresolveComment != nil {
        return DBTEAMLOGEventTypeArg(showcaseUnresolveComment: ())
    }
    if object.asShowcaseUntrashed != nil {
        return DBTEAMLOGEventTypeArg(showcaseUntrashed: ())
    }
    if object.asShowcaseUntrashedDeprecated != nil {
        return DBTEAMLOGEventTypeArg(showcaseUntrashedDeprecated: ())
    }
    if object.asShowcaseView != nil {
        return DBTEAMLOGEventTypeArg(showcaseView: ())
    }
    if object.asSsoAddCert != nil {
        return DBTEAMLOGEventTypeArg(ssoAddCert: ())
    }
    if object.asSsoAddLoginUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoAddLoginUrl: ())
    }
    if object.asSsoAddLogoutUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoAddLogoutUrl: ())
    }
    if object.asSsoChangeCert != nil {
        return DBTEAMLOGEventTypeArg(ssoChangeCert: ())
    }
    if object.asSsoChangeLoginUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoChangeLoginUrl: ())
    }
    if object.asSsoChangeLogoutUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoChangeLogoutUrl: ())
    }
    if object.asSsoChangeSamlIdentityMode != nil {
        return DBTEAMLOGEventTypeArg(ssoChangeSamlIdentityMode: ())
    }
    if object.asSsoRemoveCert != nil {
        return DBTEAMLOGEventTypeArg(ssoRemoveCert: ())
    }
    if object.asSsoRemoveLoginUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoRemoveLoginUrl: ())
    }
    if object.asSsoRemoveLogoutUrl != nil {
        return DBTEAMLOGEventTypeArg(ssoRemoveLogoutUrl: ())
    }
    if object.asTeamFolderChangeStatus != nil {
        return DBTEAMLOGEventTypeArg(teamFolderChangeStatus: ())
    }
    if object.asTeamFolderCreate != nil {
        return DBTEAMLOGEventTypeArg(teamFolderCreate: ())
    }
    if object.asTeamFolderDowngrade != nil {
        return DBTEAMLOGEventTypeArg(teamFolderDowngrade: ())
    }
    if object.asTeamFolderPermanentlyDelete != nil {
        return DBTEAMLOGEventTypeArg(teamFolderPermanentlyDelete: ())
    }
    if object.asTeamFolderRename != nil {
        return DBTEAMLOGEventTypeArg(teamFolderRename: ())
    }
    if object.asTeamSelectiveSyncSettingsChanged != nil {
        return DBTEAMLOGEventTypeArg(teamSelectiveSyncSettingsChanged: ())
    }
    if object.asAccountCaptureChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(accountCaptureChangePolicy: ())
    }
    if object.asAdminEmailRemindersChanged != nil {
        return DBTEAMLOGEventTypeArg(adminEmailRemindersChanged: ())
    }
    if object.asAllowDownloadDisabled != nil {
        return DBTEAMLOGEventTypeArg(allowDownloadDisabled: ())
    }
    if object.asAllowDownloadEnabled != nil {
        return DBTEAMLOGEventTypeArg(allowDownloadEnabled: ())
    }
    if object.asAppPermissionsChanged != nil {
        return DBTEAMLOGEventTypeArg(appPermissionsChanged: ())
    }
    if object.asCameraUploadsPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(cameraUploadsPolicyChanged: ())
    }
    if object.asCaptureTranscriptPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(captureTranscriptPolicyChanged: ())
    }
    if object.asClassificationChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(classificationChangePolicy: ())
    }
    if object.asComputerBackupPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(computerBackupPolicyChanged: ())
    }
    if object.asContentAdministrationPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(contentAdministrationPolicyChanged: ())
    }
    if object.asDataPlacementRestrictionChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(dataPlacementRestrictionChangePolicy: ())
    }
    if object.asDataPlacementRestrictionSatisfyPolicy != nil {
        return DBTEAMLOGEventTypeArg(dataPlacementRestrictionSatisfyPolicy: ())
    }
    if object.asDeviceApprovalsAddException != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsAddException: ())
    }
    if object.asDeviceApprovalsChangeDesktopPolicy != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsChangeDesktopPolicy: ())
    }
    if object.asDeviceApprovalsChangeMobilePolicy != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsChangeMobilePolicy: ())
    }
    if object.asDeviceApprovalsChangeOverageAction != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsChangeOverageAction: ())
    }
    if object.asDeviceApprovalsChangeUnlinkAction != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsChangeUnlinkAction: ())
    }
    if object.asDeviceApprovalsRemoveException != nil {
        return DBTEAMLOGEventTypeArg(deviceApprovalsRemoveException: ())
    }
    if object.asDirectoryRestrictionsAddMembers != nil {
        return DBTEAMLOGEventTypeArg(directoryRestrictionsAddMembers: ())
    }
    if object.asDirectoryRestrictionsRemoveMembers != nil {
        return DBTEAMLOGEventTypeArg(directoryRestrictionsRemoveMembers: ())
    }
    if object.asDropboxPasswordsPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(dropboxPasswordsPolicyChanged: ())
    }
    if object.asEmailIngestPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(emailIngestPolicyChanged: ())
    }
    if object.asEmmAddException != nil {
        return DBTEAMLOGEventTypeArg(emmAddException: ())
    }
    if object.asEmmChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(emmChangePolicy: ())
    }
    if object.asEmmRemoveException != nil {
        return DBTEAMLOGEventTypeArg(emmRemoveException: ())
    }
    if object.asExtendedVersionHistoryChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(extendedVersionHistoryChangePolicy: ())
    }
    if object.asExternalDriveBackupPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(externalDriveBackupPolicyChanged: ())
    }
    if object.asFileCommentsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(fileCommentsChangePolicy: ())
    }
    if object.asFileLockingPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(fileLockingPolicyChanged: ())
    }
    if object.asFileProviderMigrationPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(fileProviderMigrationPolicyChanged: ())
    }
    if object.asFileRequestsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(fileRequestsChangePolicy: ())
    }
    if object.asFileRequestsEmailsEnabled != nil {
        return DBTEAMLOGEventTypeArg(fileRequestsEmailsEnabled: ())
    }
    if object.asFileRequestsEmailsRestrictedToTeamOnly != nil {
        return DBTEAMLOGEventTypeArg(fileRequestsEmailsRestrictedToTeamOnly: ())
    }
    if object.asFileTransfersPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(fileTransfersPolicyChanged: ())
    }
    if object.asFolderLinkRestrictionPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(folderLinkRestrictionPolicyChanged: ())
    }
    if object.asGoogleSsoChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(googleSsoChangePolicy: ())
    }
    if object.asGroupUserManagementChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(groupUserManagementChangePolicy: ())
    }
    if object.asIntegrationPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(integrationPolicyChanged: ())
    }
    if object.asInviteAcceptanceEmailPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(inviteAcceptanceEmailPolicyChanged: ())
    }
    if object.asMemberRequestsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(memberRequestsChangePolicy: ())
    }
    if object.asMemberSendInvitePolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(memberSendInvitePolicyChanged: ())
    }
    if object.asMemberSpaceLimitsAddException != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsAddException: ())
    }
    if object.asMemberSpaceLimitsChangeCapsTypePolicy != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsChangeCapsTypePolicy: ())
    }
    if object.asMemberSpaceLimitsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsChangePolicy: ())
    }
    if object.asMemberSpaceLimitsRemoveException != nil {
        return DBTEAMLOGEventTypeArg(memberSpaceLimitsRemoveException: ())
    }
    if object.asMemberSuggestionsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(memberSuggestionsChangePolicy: ())
    }
    if object.asMicrosoftOfficeAddinChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(microsoftOfficeAddinChangePolicy: ())
    }
    if object.asNetworkControlChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(networkControlChangePolicy: ())
    }
    if object.asPaperChangeDeploymentPolicy != nil {
        return DBTEAMLOGEventTypeArg(paperChangeDeploymentPolicy: ())
    }
    if object.asPaperChangeMemberLinkPolicy != nil {
        return DBTEAMLOGEventTypeArg(paperChangeMemberLinkPolicy: ())
    }
    if object.asPaperChangeMemberPolicy != nil {
        return DBTEAMLOGEventTypeArg(paperChangeMemberPolicy: ())
    }
    if object.asPaperChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(paperChangePolicy: ())
    }
    if object.asPaperDefaultFolderPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(paperDefaultFolderPolicyChanged: ())
    }
    if object.asPaperDesktopPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(paperDesktopPolicyChanged: ())
    }
    if object.asPaperEnabledUsersGroupAddition != nil {
        return DBTEAMLOGEventTypeArg(paperEnabledUsersGroupAddition: ())
    }
    if object.asPaperEnabledUsersGroupRemoval != nil {
        return DBTEAMLOGEventTypeArg(paperEnabledUsersGroupRemoval: ())
    }
    if object.asPasswordStrengthRequirementsChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(passwordStrengthRequirementsChangePolicy: ())
    }
    if object.asPermanentDeleteChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(permanentDeleteChangePolicy: ())
    }
    if object.asResellerSupportChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(resellerSupportChangePolicy: ())
    }
    if object.asRewindPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(rewindPolicyChanged: ())
    }
    if object.asSendForSignaturePolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(sendForSignaturePolicyChanged: ())
    }
    if object.asSharingChangeFolderJoinPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeFolderJoinPolicy: ())
    }
    if object.asSharingChangeLinkAllowChangeExpirationPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeLinkAllowChangeExpirationPolicy: ())
    }
    if object.asSharingChangeLinkDefaultExpirationPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeLinkDefaultExpirationPolicy: ())
    }
    if object.asSharingChangeLinkEnforcePasswordPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeLinkEnforcePasswordPolicy: ())
    }
    if object.asSharingChangeLinkPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeLinkPolicy: ())
    }
    if object.asSharingChangeMemberPolicy != nil {
        return DBTEAMLOGEventTypeArg(sharingChangeMemberPolicy: ())
    }
    if object.asShowcaseChangeDownloadPolicy != nil {
        return DBTEAMLOGEventTypeArg(showcaseChangeDownloadPolicy: ())
    }
    if object.asShowcaseChangeEnabledPolicy != nil {
        return DBTEAMLOGEventTypeArg(showcaseChangeEnabledPolicy: ())
    }
    if object.asShowcaseChangeExternalSharingPolicy != nil {
        return DBTEAMLOGEventTypeArg(showcaseChangeExternalSharingPolicy: ())
    }
    if object.asSmarterSmartSyncPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(smarterSmartSyncPolicyChanged: ())
    }
    if object.asSmartSyncChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(smartSyncChangePolicy: ())
    }
    if object.asSmartSyncNotOptOut != nil {
        return DBTEAMLOGEventTypeArg(smartSyncNotOptOut: ())
    }
    if object.asSmartSyncOptOut != nil {
        return DBTEAMLOGEventTypeArg(smartSyncOptOut: ())
    }
    if object.asSsoChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(ssoChangePolicy: ())
    }
    if object.asTeamBrandingPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(teamBrandingPolicyChanged: ())
    }
    if object.asTeamExtensionsPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(teamExtensionsPolicyChanged: ())
    }
    if object.asTeamSelectiveSyncPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(teamSelectiveSyncPolicyChanged: ())
    }
    if object.asTeamSharingWhitelistSubjectsChanged != nil {
        return DBTEAMLOGEventTypeArg(teamSharingWhitelistSubjectsChanged: ())
    }
    if object.asTfaAddException != nil {
        return DBTEAMLOGEventTypeArg(tfaAddException: ())
    }
    if object.asTfaChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(tfaChangePolicy: ())
    }
    if object.asTfaRemoveException != nil {
        return DBTEAMLOGEventTypeArg(tfaRemoveException: ())
    }
    if object.asTwoAccountChangePolicy != nil {
        return DBTEAMLOGEventTypeArg(twoAccountChangePolicy: ())
    }
    if object.asViewerInfoPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(viewerInfoPolicyChanged: ())
    }
    if object.asWatermarkingPolicyChanged != nil {
        return DBTEAMLOGEventTypeArg(watermarkingPolicyChanged: ())
    }
    if object.asWebSessionsChangeActiveSessionLimit != nil {
        return DBTEAMLOGEventTypeArg(webSessionsChangeActiveSessionLimit: ())
    }
    if object.asWebSessionsChangeFixedLengthPolicy != nil {
        return DBTEAMLOGEventTypeArg(webSessionsChangeFixedLengthPolicy: ())
    }
    if object.asWebSessionsChangeIdleLengthPolicy != nil {
        return DBTEAMLOGEventTypeArg(webSessionsChangeIdleLengthPolicy: ())
    }
    if object.asDataResidencyMigrationRequestSuccessful != nil {
        return DBTEAMLOGEventTypeArg(dataResidencyMigrationRequestSuccessful: ())
    }
    if object.asDataResidencyMigrationRequestUnsuccessful != nil {
        return DBTEAMLOGEventTypeArg(dataResidencyMigrationRequestUnsuccessful: ())
    }
    if object.asTeamMergeFrom != nil {
        return DBTEAMLOGEventTypeArg(teamMergeFrom: ())
    }
    if object.asTeamMergeTo != nil {
        return DBTEAMLOGEventTypeArg(teamMergeTo: ())
    }
    if object.asTeamProfileAddBackground != nil {
        return DBTEAMLOGEventTypeArg(teamProfileAddBackground: ())
    }
    if object.asTeamProfileAddLogo != nil {
        return DBTEAMLOGEventTypeArg(teamProfileAddLogo: ())
    }
    if object.asTeamProfileChangeBackground != nil {
        return DBTEAMLOGEventTypeArg(teamProfileChangeBackground: ())
    }
    if object.asTeamProfileChangeDefaultLanguage != nil {
        return DBTEAMLOGEventTypeArg(teamProfileChangeDefaultLanguage: ())
    }
    if object.asTeamProfileChangeLogo != nil {
        return DBTEAMLOGEventTypeArg(teamProfileChangeLogo: ())
    }
    if object.asTeamProfileChangeName != nil {
        return DBTEAMLOGEventTypeArg(teamProfileChangeName: ())
    }
    if object.asTeamProfileRemoveBackground != nil {
        return DBTEAMLOGEventTypeArg(teamProfileRemoveBackground: ())
    }
    if object.asTeamProfileRemoveLogo != nil {
        return DBTEAMLOGEventTypeArg(teamProfileRemoveLogo: ())
    }
    if object.asTfaAddBackupPhone != nil {
        return DBTEAMLOGEventTypeArg(tfaAddBackupPhone: ())
    }
    if object.asTfaAddSecurityKey != nil {
        return DBTEAMLOGEventTypeArg(tfaAddSecurityKey: ())
    }
    if object.asTfaChangeBackupPhone != nil {
        return DBTEAMLOGEventTypeArg(tfaChangeBackupPhone: ())
    }
    if object.asTfaChangeStatus != nil {
        return DBTEAMLOGEventTypeArg(tfaChangeStatus: ())
    }
    if object.asTfaRemoveBackupPhone != nil {
        return DBTEAMLOGEventTypeArg(tfaRemoveBackupPhone: ())
    }
    if object.asTfaRemoveSecurityKey != nil {
        return DBTEAMLOGEventTypeArg(tfaRemoveSecurityKey: ())
    }
    if object.asTfaReset != nil {
        return DBTEAMLOGEventTypeArg(tfaReset: ())
    }
    if object.asChangedEnterpriseAdminRole != nil {
        return DBTEAMLOGEventTypeArg(changedEnterpriseAdminRole: ())
    }
    if object.asChangedEnterpriseConnectedTeamStatus != nil {
        return DBTEAMLOGEventTypeArg(changedEnterpriseConnectedTeamStatus: ())
    }
    if object.asEndedEnterpriseAdminSession != nil {
        return DBTEAMLOGEventTypeArg(endedEnterpriseAdminSession: ())
    }
    if object.asEndedEnterpriseAdminSessionDeprecated != nil {
        return DBTEAMLOGEventTypeArg(endedEnterpriseAdminSessionDeprecated: ())
    }
    if object.asEnterpriseSettingsLocking != nil {
        return DBTEAMLOGEventTypeArg(enterpriseSettingsLocking: ())
    }
    if object.asGuestAdminChangeStatus != nil {
        return DBTEAMLOGEventTypeArg(guestAdminChangeStatus: ())
    }
    if object.asStartedEnterpriseAdminSession != nil {
        return DBTEAMLOGEventTypeArg(startedEnterpriseAdminSession: ())
    }
    if object.asTeamMergeRequestAccepted != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestAccepted: ())
    }
    if object.asTeamMergeRequestAcceptedShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestAcceptedShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestAcceptedShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestAcceptedShownToSecondaryTeam: ())
    }
    if object.asTeamMergeRequestAutoCanceled != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestAutoCanceled: ())
    }
    if object.asTeamMergeRequestCanceled != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestCanceled: ())
    }
    if object.asTeamMergeRequestCanceledShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestCanceledShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestCanceledShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestCanceledShownToSecondaryTeam: ())
    }
    if object.asTeamMergeRequestExpired != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestExpired: ())
    }
    if object.asTeamMergeRequestExpiredShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestExpiredShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestExpiredShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestExpiredShownToSecondaryTeam: ())
    }
    if object.asTeamMergeRequestRejectedShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestRejectedShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestRejectedShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestRejectedShownToSecondaryTeam: ())
    }
    if object.asTeamMergeRequestReminder != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestReminder: ())
    }
    if object.asTeamMergeRequestReminderShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestReminderShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestReminderShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestReminderShownToSecondaryTeam: ())
    }
    if object.asTeamMergeRequestRevoked != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestRevoked: ())
    }
    if object.asTeamMergeRequestSentShownToPrimaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestSentShownToPrimaryTeam: ())
    }
    if object.asTeamMergeRequestSentShownToSecondaryTeam != nil {
        return DBTEAMLOGEventTypeArg(teamMergeRequestSentShownToSecondaryTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGEventTypeArg(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogExportMembersReportDetailsToDBOptional(object: DBXTeamLogExportMembersReportDetails?) -> DBTEAMLOGExportMembersReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExportMembersReportDetailsToDB(object: object)
}

func mapDBXTeamLogExportMembersReportDetailsToDB(object: DBXTeamLogExportMembersReportDetails) -> DBTEAMLOGExportMembersReportDetails {
    DBTEAMLOGExportMembersReportDetails(default: ())
}

func mapDBXTeamLogExportMembersReportFailDetailsToDBOptional(object: DBXTeamLogExportMembersReportFailDetails?) -> DBTEAMLOGExportMembersReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExportMembersReportFailDetailsToDB(object: object)
}

func mapDBXTeamLogExportMembersReportFailDetailsToDB(object: DBXTeamLogExportMembersReportFailDetails) -> DBTEAMLOGExportMembersReportFailDetails {
    DBTEAMLOGExportMembersReportFailDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogExportMembersReportFailTypeToDBOptional(object: DBXTeamLogExportMembersReportFailType?) -> DBTEAMLOGExportMembersReportFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExportMembersReportFailTypeToDB(object: object)
}

func mapDBXTeamLogExportMembersReportFailTypeToDB(object: DBXTeamLogExportMembersReportFailType) -> DBTEAMLOGExportMembersReportFailType {
    DBTEAMLOGExportMembersReportFailType(description_: object.description_)
}

func mapDBXTeamLogExportMembersReportTypeToDBOptional(object: DBXTeamLogExportMembersReportType?) -> DBTEAMLOGExportMembersReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExportMembersReportTypeToDB(object: object)
}

func mapDBXTeamLogExportMembersReportTypeToDB(object: DBXTeamLogExportMembersReportType) -> DBTEAMLOGExportMembersReportType {
    DBTEAMLOGExportMembersReportType(description_: object.description_)
}

func mapDBXTeamLogExtendedVersionHistoryChangePolicyDetailsToDBOptional(object: DBXTeamLogExtendedVersionHistoryChangePolicyDetails?)
    -> DBTEAMLOGExtendedVersionHistoryChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExtendedVersionHistoryChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogExtendedVersionHistoryChangePolicyDetailsToDB(object: DBXTeamLogExtendedVersionHistoryChangePolicyDetails)
    -> DBTEAMLOGExtendedVersionHistoryChangePolicyDetails {
    DBTEAMLOGExtendedVersionHistoryChangePolicyDetails(
        dNewValue: mapDBXTeamLogExtendedVersionHistoryPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogExtendedVersionHistoryPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogExtendedVersionHistoryChangePolicyTypeToDBOptional(object: DBXTeamLogExtendedVersionHistoryChangePolicyType?)
    -> DBTEAMLOGExtendedVersionHistoryChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExtendedVersionHistoryChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogExtendedVersionHistoryChangePolicyTypeToDB(object: DBXTeamLogExtendedVersionHistoryChangePolicyType)
    -> DBTEAMLOGExtendedVersionHistoryChangePolicyType {
    DBTEAMLOGExtendedVersionHistoryChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogExtendedVersionHistoryPolicyToDBOptional(object: DBXTeamLogExtendedVersionHistoryPolicy?) -> DBTEAMLOGExtendedVersionHistoryPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExtendedVersionHistoryPolicyToDB(object: object)
}

func mapDBXTeamLogExtendedVersionHistoryPolicyToDB(object: DBXTeamLogExtendedVersionHistoryPolicy) -> DBTEAMLOGExtendedVersionHistoryPolicy {
    if object.asExplicitlyLimited != nil {
        return DBTEAMLOGExtendedVersionHistoryPolicy(explicitlyLimited: ())
    }
    if object.asExplicitlyUnlimited != nil {
        return DBTEAMLOGExtendedVersionHistoryPolicy(explicitlyUnlimited: ())
    }
    if object.asImplicitlyLimited != nil {
        return DBTEAMLOGExtendedVersionHistoryPolicy(implicitlyLimited: ())
    }
    if object.asImplicitlyUnlimited != nil {
        return DBTEAMLOGExtendedVersionHistoryPolicy(implicitlyUnlimited: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGExtendedVersionHistoryPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusToDBOptional(object: DBXTeamLogExternalDriveBackupEligibilityStatus?)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupEligibilityStatusToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusToDB(object: DBXTeamLogExternalDriveBackupEligibilityStatus)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatus {
    if object.asExceedLicenseCap != nil {
        return DBTEAMLOGExternalDriveBackupEligibilityStatus(exceedLicenseCap: ())
    }
    if object.asSuccess != nil {
        return DBTEAMLOGExternalDriveBackupEligibilityStatus(success: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGExternalDriveBackupEligibilityStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetailsToDBOptional(object: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails?)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetailsToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetailsToDB(object: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedDetails)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails {
    DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails(
        desktopDeviceSessionInfo: mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: object.desktopDeviceSessionInfo),
        status: mapDBXTeamLogExternalDriveBackupEligibilityStatusToDB(object: object.status),
        numberOfExternalDriveBackup: object.numberOfExternalDriveBackup
    )
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedTypeToDBOptional(object: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType?)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedTypeToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupEligibilityStatusCheckedTypeToDB(object: DBXTeamLogExternalDriveBackupEligibilityStatusCheckedType)
    -> DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedType {
    DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedType(description_: object.description_)
}

func mapDBXTeamLogExternalDriveBackupPolicyToDBOptional(object: DBXTeamLogExternalDriveBackupPolicy?) -> DBTEAMLOGExternalDriveBackupPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupPolicyToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupPolicyToDB(object: DBXTeamLogExternalDriveBackupPolicy) -> DBTEAMLOGExternalDriveBackupPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGExternalDriveBackupPolicy(default_: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGExternalDriveBackupPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGExternalDriveBackupPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGExternalDriveBackupPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogExternalDriveBackupPolicyChangedDetailsToDBOptional(object: DBXTeamLogExternalDriveBackupPolicyChangedDetails?)
    -> DBTEAMLOGExternalDriveBackupPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupPolicyChangedDetailsToDB(object: DBXTeamLogExternalDriveBackupPolicyChangedDetails)
    -> DBTEAMLOGExternalDriveBackupPolicyChangedDetails {
    DBTEAMLOGExternalDriveBackupPolicyChangedDetails(
        dNewValue: mapDBXTeamLogExternalDriveBackupPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogExternalDriveBackupPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogExternalDriveBackupPolicyChangedTypeToDBOptional(object: DBXTeamLogExternalDriveBackupPolicyChangedType?)
    -> DBTEAMLOGExternalDriveBackupPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupPolicyChangedTypeToDB(object: DBXTeamLogExternalDriveBackupPolicyChangedType)
    -> DBTEAMLOGExternalDriveBackupPolicyChangedType {
    DBTEAMLOGExternalDriveBackupPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogExternalDriveBackupStatusToDBOptional(object: DBXTeamLogExternalDriveBackupStatus?) -> DBTEAMLOGExternalDriveBackupStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupStatusToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupStatusToDB(object: DBXTeamLogExternalDriveBackupStatus) -> DBTEAMLOGExternalDriveBackupStatus {
    if object.asBroken != nil {
        return DBTEAMLOGExternalDriveBackupStatus(broken: ())
    }
    if object.asCreated != nil {
        return DBTEAMLOGExternalDriveBackupStatus(created: ())
    }
    if object.asCreatedOrBroken != nil {
        return DBTEAMLOGExternalDriveBackupStatus(createdOrBroken: ())
    }
    if object.asDeleted != nil {
        return DBTEAMLOGExternalDriveBackupStatus(deleted: ())
    }
    if object.asEmpty != nil {
        return DBTEAMLOGExternalDriveBackupStatus(empty: ())
    }
    if object.asUnknown != nil {
        return DBTEAMLOGExternalDriveBackupStatus(unknown: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGExternalDriveBackupStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogExternalDriveBackupStatusChangedDetailsToDBOptional(object: DBXTeamLogExternalDriveBackupStatusChangedDetails?)
    -> DBTEAMLOGExternalDriveBackupStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupStatusChangedDetailsToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupStatusChangedDetailsToDB(object: DBXTeamLogExternalDriveBackupStatusChangedDetails)
    -> DBTEAMLOGExternalDriveBackupStatusChangedDetails {
    DBTEAMLOGExternalDriveBackupStatusChangedDetails(
        desktopDeviceSessionInfo: mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: object.desktopDeviceSessionInfo),
        previousValue: mapDBXTeamLogExternalDriveBackupStatusToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogExternalDriveBackupStatusToDB(object: object.newValue)
    )
}

func mapDBXTeamLogExternalDriveBackupStatusChangedTypeToDBOptional(object: DBXTeamLogExternalDriveBackupStatusChangedType?)
    -> DBTEAMLOGExternalDriveBackupStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalDriveBackupStatusChangedTypeToDB(object: object)
}

func mapDBXTeamLogExternalDriveBackupStatusChangedTypeToDB(object: DBXTeamLogExternalDriveBackupStatusChangedType)
    -> DBTEAMLOGExternalDriveBackupStatusChangedType {
    DBTEAMLOGExternalDriveBackupStatusChangedType(description_: object.description_)
}

func mapDBXTeamLogExternalSharingCreateReportDetailsToDBOptional(object: DBXTeamLogExternalSharingCreateReportDetails?)
    -> DBTEAMLOGExternalSharingCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalSharingCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogExternalSharingCreateReportDetailsToDB(object: DBXTeamLogExternalSharingCreateReportDetails) -> DBTEAMLOGExternalSharingCreateReportDetails {
    DBTEAMLOGExternalSharingCreateReportDetails(default: ())
}

func mapDBXTeamLogExternalSharingCreateReportTypeToDBOptional(object: DBXTeamLogExternalSharingCreateReportType?) -> DBTEAMLOGExternalSharingCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalSharingCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogExternalSharingCreateReportTypeToDB(object: DBXTeamLogExternalSharingCreateReportType) -> DBTEAMLOGExternalSharingCreateReportType {
    DBTEAMLOGExternalSharingCreateReportType(description_: object.description_)
}

func mapDBXTeamLogExternalSharingReportFailedDetailsToDBOptional(object: DBXTeamLogExternalSharingReportFailedDetails?)
    -> DBTEAMLOGExternalSharingReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalSharingReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogExternalSharingReportFailedDetailsToDB(object: DBXTeamLogExternalSharingReportFailedDetails) -> DBTEAMLOGExternalSharingReportFailedDetails {
    DBTEAMLOGExternalSharingReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogExternalSharingReportFailedTypeToDBOptional(object: DBXTeamLogExternalSharingReportFailedType?) -> DBTEAMLOGExternalSharingReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalSharingReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogExternalSharingReportFailedTypeToDB(object: DBXTeamLogExternalSharingReportFailedType) -> DBTEAMLOGExternalSharingReportFailedType {
    DBTEAMLOGExternalSharingReportFailedType(description_: object.description_)
}

func mapDBXTeamLogExternalUserLogInfoToDBOptional(object: DBXTeamLogExternalUserLogInfo?) -> DBTEAMLOGExternalUserLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogExternalUserLogInfoToDB(object: object)
}

func mapDBXTeamLogExternalUserLogInfoToDB(object: DBXTeamLogExternalUserLogInfo) -> DBTEAMLOGExternalUserLogInfo {
    DBTEAMLOGExternalUserLogInfo(userIdentifier: object.userIdentifier, identifierType: mapDBXTeamLogIdentifierTypeToDB(object: object.identifierType))
}

func mapDBXTeamLogFailureDetailsLogInfoToDBOptional(object: DBXTeamLogFailureDetailsLogInfo?) -> DBTEAMLOGFailureDetailsLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFailureDetailsLogInfoToDB(object: object)
}

func mapDBXTeamLogFailureDetailsLogInfoToDB(object: DBXTeamLogFailureDetailsLogInfo) -> DBTEAMLOGFailureDetailsLogInfo {
    DBTEAMLOGFailureDetailsLogInfo(userFriendlyMessage: object.userFriendlyMessage, technicalErrorMessage: object.technicalErrorMessage)
}

func mapDBXTeamLogFedAdminRoleToDBOptional(object: DBXTeamLogFedAdminRole?) -> DBTEAMLOGFedAdminRole? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFedAdminRoleToDB(object: object)
}

func mapDBXTeamLogFedAdminRoleToDB(object: DBXTeamLogFedAdminRole) -> DBTEAMLOGFedAdminRole {
    if object.asEnterpriseAdmin != nil {
        return DBTEAMLOGFedAdminRole(enterpriseAdmin: ())
    }
    if object.asNotEnterpriseAdmin != nil {
        return DBTEAMLOGFedAdminRole(notEnterpriseAdmin: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFedAdminRole(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFedExtraDetailsToDBOptional(object: DBXTeamLogFedExtraDetails?) -> DBTEAMLOGFedExtraDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFedExtraDetailsToDB(object: object)
}

func mapDBXTeamLogFedExtraDetailsToDB(object: DBXTeamLogFedExtraDetails) -> DBTEAMLOGFedExtraDetails {
    if let object = object.asOrganization {
        let organization = mapDBXTeamLogOrganizationDetailsToDB(object: object.organization)
        return DBTEAMLOGFedExtraDetails(organization: organization)
    }
    if let object = object.asTeam {
        let team = mapDBXTeamLogTeamDetailsToDB(object: object.team)
        return DBTEAMLOGFedExtraDetails(team: team)
    }
    if object.asOther != nil {
        return DBTEAMLOGFedExtraDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFedHandshakeActionToDBOptional(object: DBXTeamLogFedHandshakeAction?) -> DBTEAMLOGFedHandshakeAction? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFedHandshakeActionToDB(object: object)
}

func mapDBXTeamLogFedHandshakeActionToDB(object: DBXTeamLogFedHandshakeAction) -> DBTEAMLOGFedHandshakeAction {
    if object.asAcceptedInvite != nil {
        return DBTEAMLOGFedHandshakeAction(acceptedInvite: ())
    }
    if object.asCanceledInvite != nil {
        return DBTEAMLOGFedHandshakeAction(canceledInvite: ())
    }
    if object.asInviteExpired != nil {
        return DBTEAMLOGFedHandshakeAction(inviteExpired: ())
    }
    if object.asInvited != nil {
        return DBTEAMLOGFedHandshakeAction(invited: ())
    }
    if object.asRejectedInvite != nil {
        return DBTEAMLOGFedHandshakeAction(rejectedInvite: ())
    }
    if object.asRemovedTeam != nil {
        return DBTEAMLOGFedHandshakeAction(removedTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFedHandshakeAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFederationStatusChangeAdditionalInfoToDBOptional(object: DBXTeamLogFederationStatusChangeAdditionalInfo?)
    -> DBTEAMLOGFederationStatusChangeAdditionalInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFederationStatusChangeAdditionalInfoToDB(object: object)
}

func mapDBXTeamLogFederationStatusChangeAdditionalInfoToDB(object: DBXTeamLogFederationStatusChangeAdditionalInfo)
    -> DBTEAMLOGFederationStatusChangeAdditionalInfo {
    if let object = object.asConnectedTeamName {
        let connectedTeamName = mapDBXTeamLogConnectedTeamNameToDB(object: object.connectedTeamName)
        return DBTEAMLOGFederationStatusChangeAdditionalInfo(connectedTeamName: connectedTeamName)
    }
    if let object = object.asNonTrustedTeamDetails {
        let nonTrustedTeamDetails = mapDBXTeamLogNonTrustedTeamDetailsToDB(object: object.nonTrustedTeamDetails)
        return DBTEAMLOGFederationStatusChangeAdditionalInfo(nonTrustedTeamDetails: nonTrustedTeamDetails)
    }
    if let object = object.asOrganizationName {
        let organizationName = mapDBXTeamLogOrganizationNameToDB(object: object.organizationName)
        return DBTEAMLOGFederationStatusChangeAdditionalInfo(organizationName: organizationName)
    }
    if object.asOther != nil {
        return DBTEAMLOGFederationStatusChangeAdditionalInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFileAddCommentDetailsToDBOptional(object: DBXTeamLogFileAddCommentDetails?) -> DBTEAMLOGFileAddCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileAddCommentDetailsToDB(object: DBXTeamLogFileAddCommentDetails) -> DBTEAMLOGFileAddCommentDetails {
    DBTEAMLOGFileAddCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileAddCommentTypeToDBOptional(object: DBXTeamLogFileAddCommentType?) -> DBTEAMLOGFileAddCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileAddCommentTypeToDB(object: DBXTeamLogFileAddCommentType) -> DBTEAMLOGFileAddCommentType {
    DBTEAMLOGFileAddCommentType(description_: object.description_)
}

func mapDBXTeamLogFileAddDetailsToDBOptional(object: DBXTeamLogFileAddDetails?) -> DBTEAMLOGFileAddDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddDetailsToDB(object: object)
}

func mapDBXTeamLogFileAddDetailsToDB(object: DBXTeamLogFileAddDetails) -> DBTEAMLOGFileAddDetails {
    DBTEAMLOGFileAddDetails(default: ())
}

func mapDBXTeamLogFileAddFromAutomationDetailsToDBOptional(object: DBXTeamLogFileAddFromAutomationDetails?) -> DBTEAMLOGFileAddFromAutomationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddFromAutomationDetailsToDB(object: object)
}

func mapDBXTeamLogFileAddFromAutomationDetailsToDB(object: DBXTeamLogFileAddFromAutomationDetails) -> DBTEAMLOGFileAddFromAutomationDetails {
    DBTEAMLOGFileAddFromAutomationDetails(default: ())
}

func mapDBXTeamLogFileAddFromAutomationTypeToDBOptional(object: DBXTeamLogFileAddFromAutomationType?) -> DBTEAMLOGFileAddFromAutomationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddFromAutomationTypeToDB(object: object)
}

func mapDBXTeamLogFileAddFromAutomationTypeToDB(object: DBXTeamLogFileAddFromAutomationType) -> DBTEAMLOGFileAddFromAutomationType {
    DBTEAMLOGFileAddFromAutomationType(description_: object.description_)
}

func mapDBXTeamLogFileAddTypeToDBOptional(object: DBXTeamLogFileAddType?) -> DBTEAMLOGFileAddType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileAddTypeToDB(object: object)
}

func mapDBXTeamLogFileAddTypeToDB(object: DBXTeamLogFileAddType) -> DBTEAMLOGFileAddType {
    DBTEAMLOGFileAddType(description_: object.description_)
}

func mapDBXTeamLogFileChangeCommentSubscriptionDetailsToDBOptional(object: DBXTeamLogFileChangeCommentSubscriptionDetails?)
    -> DBTEAMLOGFileChangeCommentSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileChangeCommentSubscriptionDetailsToDB(object: object)
}

func mapDBXTeamLogFileChangeCommentSubscriptionDetailsToDB(object: DBXTeamLogFileChangeCommentSubscriptionDetails)
    -> DBTEAMLOGFileChangeCommentSubscriptionDetails {
    DBTEAMLOGFileChangeCommentSubscriptionDetails(
        dNewValue: mapDBXTeamLogFileCommentNotificationPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogFileCommentNotificationPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogFileChangeCommentSubscriptionTypeToDBOptional(object: DBXTeamLogFileChangeCommentSubscriptionType?)
    -> DBTEAMLOGFileChangeCommentSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileChangeCommentSubscriptionTypeToDB(object: object)
}

func mapDBXTeamLogFileChangeCommentSubscriptionTypeToDB(object: DBXTeamLogFileChangeCommentSubscriptionType) -> DBTEAMLOGFileChangeCommentSubscriptionType {
    DBTEAMLOGFileChangeCommentSubscriptionType(description_: object.description_)
}

func mapDBXTeamLogFileCommentNotificationPolicyToDBOptional(object: DBXTeamLogFileCommentNotificationPolicy?) -> DBTEAMLOGFileCommentNotificationPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCommentNotificationPolicyToDB(object: object)
}

func mapDBXTeamLogFileCommentNotificationPolicyToDB(object: DBXTeamLogFileCommentNotificationPolicy) -> DBTEAMLOGFileCommentNotificationPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGFileCommentNotificationPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGFileCommentNotificationPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFileCommentNotificationPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFileCommentsChangePolicyDetailsToDBOptional(object: DBXTeamLogFileCommentsChangePolicyDetails?) -> DBTEAMLOGFileCommentsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCommentsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogFileCommentsChangePolicyDetailsToDB(object: DBXTeamLogFileCommentsChangePolicyDetails) -> DBTEAMLOGFileCommentsChangePolicyDetails {
    DBTEAMLOGFileCommentsChangePolicyDetails(
        dNewValue: mapDBXTeamLogFileCommentsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogFileCommentsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogFileCommentsChangePolicyTypeToDBOptional(object: DBXTeamLogFileCommentsChangePolicyType?) -> DBTEAMLOGFileCommentsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCommentsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogFileCommentsChangePolicyTypeToDB(object: DBXTeamLogFileCommentsChangePolicyType) -> DBTEAMLOGFileCommentsChangePolicyType {
    DBTEAMLOGFileCommentsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogFileCommentsPolicyToDBOptional(object: DBXTeamLogFileCommentsPolicy?) -> DBTEAMLOGFileCommentsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCommentsPolicyToDB(object: object)
}

func mapDBXTeamLogFileCommentsPolicyToDB(object: DBXTeamLogFileCommentsPolicy) -> DBTEAMLOGFileCommentsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGFileCommentsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGFileCommentsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFileCommentsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFileCopyDetailsToDBOptional(object: DBXTeamLogFileCopyDetails?) -> DBTEAMLOGFileCopyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCopyDetailsToDB(object: object)
}

func mapDBXTeamLogFileCopyDetailsToDB(object: DBXTeamLogFileCopyDetails) -> DBTEAMLOGFileCopyDetails {
    DBTEAMLOGFileCopyDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: $0) })
}

func mapDBXTeamLogFileCopyTypeToDBOptional(object: DBXTeamLogFileCopyType?) -> DBTEAMLOGFileCopyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileCopyTypeToDB(object: object)
}

func mapDBXTeamLogFileCopyTypeToDB(object: DBXTeamLogFileCopyType) -> DBTEAMLOGFileCopyType {
    DBTEAMLOGFileCopyType(description_: object.description_)
}

func mapDBXTeamLogFileDeleteCommentDetailsToDBOptional(object: DBXTeamLogFileDeleteCommentDetails?) -> DBTEAMLOGFileDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDeleteCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileDeleteCommentDetailsToDB(object: DBXTeamLogFileDeleteCommentDetails) -> DBTEAMLOGFileDeleteCommentDetails {
    DBTEAMLOGFileDeleteCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileDeleteCommentTypeToDBOptional(object: DBXTeamLogFileDeleteCommentType?) -> DBTEAMLOGFileDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDeleteCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileDeleteCommentTypeToDB(object: DBXTeamLogFileDeleteCommentType) -> DBTEAMLOGFileDeleteCommentType {
    DBTEAMLOGFileDeleteCommentType(description_: object.description_)
}

func mapDBXTeamLogFileDeleteDetailsToDBOptional(object: DBXTeamLogFileDeleteDetails?) -> DBTEAMLOGFileDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogFileDeleteDetailsToDB(object: DBXTeamLogFileDeleteDetails) -> DBTEAMLOGFileDeleteDetails {
    DBTEAMLOGFileDeleteDetails(default: ())
}

func mapDBXTeamLogFileDeleteTypeToDBOptional(object: DBXTeamLogFileDeleteType?) -> DBTEAMLOGFileDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDeleteTypeToDB(object: object)
}

func mapDBXTeamLogFileDeleteTypeToDB(object: DBXTeamLogFileDeleteType) -> DBTEAMLOGFileDeleteType {
    DBTEAMLOGFileDeleteType(description_: object.description_)
}

func mapDBXTeamLogFileDownloadDetailsToDBOptional(object: DBXTeamLogFileDownloadDetails?) -> DBTEAMLOGFileDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogFileDownloadDetailsToDB(object: DBXTeamLogFileDownloadDetails) -> DBTEAMLOGFileDownloadDetails {
    DBTEAMLOGFileDownloadDetails(default: ())
}

func mapDBXTeamLogFileDownloadTypeToDBOptional(object: DBXTeamLogFileDownloadType?) -> DBTEAMLOGFileDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileDownloadTypeToDB(object: object)
}

func mapDBXTeamLogFileDownloadTypeToDB(object: DBXTeamLogFileDownloadType) -> DBTEAMLOGFileDownloadType {
    DBTEAMLOGFileDownloadType(description_: object.description_)
}

func mapDBXTeamLogFileEditCommentDetailsToDBOptional(object: DBXTeamLogFileEditCommentDetails?) -> DBTEAMLOGFileEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileEditCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileEditCommentDetailsToDB(object: DBXTeamLogFileEditCommentDetails) -> DBTEAMLOGFileEditCommentDetails {
    DBTEAMLOGFileEditCommentDetails(previousCommentText: object.previousCommentText, commentText: object.commentText)
}

func mapDBXTeamLogFileEditCommentTypeToDBOptional(object: DBXTeamLogFileEditCommentType?) -> DBTEAMLOGFileEditCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileEditCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileEditCommentTypeToDB(object: DBXTeamLogFileEditCommentType) -> DBTEAMLOGFileEditCommentType {
    DBTEAMLOGFileEditCommentType(description_: object.description_)
}

func mapDBXTeamLogFileEditDetailsToDBOptional(object: DBXTeamLogFileEditDetails?) -> DBTEAMLOGFileEditDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileEditDetailsToDB(object: object)
}

func mapDBXTeamLogFileEditDetailsToDB(object: DBXTeamLogFileEditDetails) -> DBTEAMLOGFileEditDetails {
    DBTEAMLOGFileEditDetails(default: ())
}

func mapDBXTeamLogFileEditTypeToDBOptional(object: DBXTeamLogFileEditType?) -> DBTEAMLOGFileEditType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileEditTypeToDB(object: object)
}

func mapDBXTeamLogFileEditTypeToDB(object: DBXTeamLogFileEditType) -> DBTEAMLOGFileEditType {
    DBTEAMLOGFileEditType(description_: object.description_)
}

func mapDBXTeamLogFileGetCopyReferenceDetailsToDBOptional(object: DBXTeamLogFileGetCopyReferenceDetails?) -> DBTEAMLOGFileGetCopyReferenceDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileGetCopyReferenceDetailsToDB(object: object)
}

func mapDBXTeamLogFileGetCopyReferenceDetailsToDB(object: DBXTeamLogFileGetCopyReferenceDetails) -> DBTEAMLOGFileGetCopyReferenceDetails {
    DBTEAMLOGFileGetCopyReferenceDetails(default: ())
}

func mapDBXTeamLogFileGetCopyReferenceTypeToDBOptional(object: DBXTeamLogFileGetCopyReferenceType?) -> DBTEAMLOGFileGetCopyReferenceType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileGetCopyReferenceTypeToDB(object: object)
}

func mapDBXTeamLogFileGetCopyReferenceTypeToDB(object: DBXTeamLogFileGetCopyReferenceType) -> DBTEAMLOGFileGetCopyReferenceType {
    DBTEAMLOGFileGetCopyReferenceType(description_: object.description_)
}

func mapDBXTeamLogFileLikeCommentDetailsToDBOptional(object: DBXTeamLogFileLikeCommentDetails?) -> DBTEAMLOGFileLikeCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLikeCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileLikeCommentDetailsToDB(object: DBXTeamLogFileLikeCommentDetails) -> DBTEAMLOGFileLikeCommentDetails {
    DBTEAMLOGFileLikeCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileLikeCommentTypeToDBOptional(object: DBXTeamLogFileLikeCommentType?) -> DBTEAMLOGFileLikeCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLikeCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileLikeCommentTypeToDB(object: DBXTeamLogFileLikeCommentType) -> DBTEAMLOGFileLikeCommentType {
    DBTEAMLOGFileLikeCommentType(description_: object.description_)
}

func mapDBXTeamLogFileLockingLockStatusChangedDetailsToDBOptional(object: DBXTeamLogFileLockingLockStatusChangedDetails?)
    -> DBTEAMLOGFileLockingLockStatusChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLockingLockStatusChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFileLockingLockStatusChangedDetailsToDB(object: DBXTeamLogFileLockingLockStatusChangedDetails)
    -> DBTEAMLOGFileLockingLockStatusChangedDetails {
    DBTEAMLOGFileLockingLockStatusChangedDetails(
        previousValue: mapDBXTeamLogLockStatusToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogLockStatusToDB(object: object.newValue)
    )
}

func mapDBXTeamLogFileLockingLockStatusChangedTypeToDBOptional(object: DBXTeamLogFileLockingLockStatusChangedType?)
    -> DBTEAMLOGFileLockingLockStatusChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLockingLockStatusChangedTypeToDB(object: object)
}

func mapDBXTeamLogFileLockingLockStatusChangedTypeToDB(object: DBXTeamLogFileLockingLockStatusChangedType) -> DBTEAMLOGFileLockingLockStatusChangedType {
    DBTEAMLOGFileLockingLockStatusChangedType(description_: object.description_)
}

func mapDBXTeamLogFileLockingPolicyChangedDetailsToDBOptional(object: DBXTeamLogFileLockingPolicyChangedDetails?) -> DBTEAMLOGFileLockingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLockingPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFileLockingPolicyChangedDetailsToDB(object: DBXTeamLogFileLockingPolicyChangedDetails) -> DBTEAMLOGFileLockingPolicyChangedDetails {
    DBTEAMLOGFileLockingPolicyChangedDetails(
        dNewValue: mapDBXTeamPoliciesFileLockingPolicyStateToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesFileLockingPolicyStateToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogFileLockingPolicyChangedTypeToDBOptional(object: DBXTeamLogFileLockingPolicyChangedType?) -> DBTEAMLOGFileLockingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLockingPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogFileLockingPolicyChangedTypeToDB(object: DBXTeamLogFileLockingPolicyChangedType) -> DBTEAMLOGFileLockingPolicyChangedType {
    DBTEAMLOGFileLockingPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogFileOrFolderLogInfoToDBOptional(object: DBXTeamLogFileOrFolderLogInfo?) -> DBTEAMLOGFileOrFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileOrFolderLogInfoToDB(object: object)
}

func mapDBXTeamLogFileOrFolderLogInfoToDB(object: DBXTeamLogFileOrFolderLogInfo) -> DBTEAMLOGFileOrFolderLogInfo {
    DBTEAMLOGFileOrFolderLogInfo(
        path: mapDBXTeamLogPathLogInfoToDB(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize
    )
}

func mapDBXTeamLogFileLogInfoToDBOptional(object: DBXTeamLogFileLogInfo?) -> DBTEAMLOGFileLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileLogInfoToDB(object: object)
}

func mapDBXTeamLogFileLogInfoToDB(object: DBXTeamLogFileLogInfo) -> DBTEAMLOGFileLogInfo {
    DBTEAMLOGFileLogInfo(
        path: mapDBXTeamLogPathLogInfoToDB(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize
    )
}

func mapDBXTeamLogFileMoveDetailsToDBOptional(object: DBXTeamLogFileMoveDetails?) -> DBTEAMLOGFileMoveDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileMoveDetailsToDB(object: object)
}

func mapDBXTeamLogFileMoveDetailsToDB(object: DBXTeamLogFileMoveDetails) -> DBTEAMLOGFileMoveDetails {
    DBTEAMLOGFileMoveDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: $0) })
}

func mapDBXTeamLogFileMoveTypeToDBOptional(object: DBXTeamLogFileMoveType?) -> DBTEAMLOGFileMoveType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileMoveTypeToDB(object: object)
}

func mapDBXTeamLogFileMoveTypeToDB(object: DBXTeamLogFileMoveType) -> DBTEAMLOGFileMoveType {
    DBTEAMLOGFileMoveType(description_: object.description_)
}

func mapDBXTeamLogFilePermanentlyDeleteDetailsToDBOptional(object: DBXTeamLogFilePermanentlyDeleteDetails?) -> DBTEAMLOGFilePermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFilePermanentlyDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogFilePermanentlyDeleteDetailsToDB(object: DBXTeamLogFilePermanentlyDeleteDetails) -> DBTEAMLOGFilePermanentlyDeleteDetails {
    DBTEAMLOGFilePermanentlyDeleteDetails(default: ())
}

func mapDBXTeamLogFilePermanentlyDeleteTypeToDBOptional(object: DBXTeamLogFilePermanentlyDeleteType?) -> DBTEAMLOGFilePermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFilePermanentlyDeleteTypeToDB(object: object)
}

func mapDBXTeamLogFilePermanentlyDeleteTypeToDB(object: DBXTeamLogFilePermanentlyDeleteType) -> DBTEAMLOGFilePermanentlyDeleteType {
    DBTEAMLOGFilePermanentlyDeleteType(description_: object.description_)
}

func mapDBXTeamLogFilePreviewDetailsToDBOptional(object: DBXTeamLogFilePreviewDetails?) -> DBTEAMLOGFilePreviewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFilePreviewDetailsToDB(object: object)
}

func mapDBXTeamLogFilePreviewDetailsToDB(object: DBXTeamLogFilePreviewDetails) -> DBTEAMLOGFilePreviewDetails {
    DBTEAMLOGFilePreviewDetails(default: ())
}

func mapDBXTeamLogFilePreviewTypeToDBOptional(object: DBXTeamLogFilePreviewType?) -> DBTEAMLOGFilePreviewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFilePreviewTypeToDB(object: object)
}

func mapDBXTeamLogFilePreviewTypeToDB(object: DBXTeamLogFilePreviewType) -> DBTEAMLOGFilePreviewType {
    DBTEAMLOGFilePreviewType(description_: object.description_)
}

func mapDBXTeamLogFileProviderMigrationPolicyChangedDetailsToDBOptional(object: DBXTeamLogFileProviderMigrationPolicyChangedDetails?)
    -> DBTEAMLOGFileProviderMigrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileProviderMigrationPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFileProviderMigrationPolicyChangedDetailsToDB(object: DBXTeamLogFileProviderMigrationPolicyChangedDetails)
    -> DBTEAMLOGFileProviderMigrationPolicyChangedDetails {
    DBTEAMLOGFileProviderMigrationPolicyChangedDetails(
        dNewValue: mapDBXTeamPoliciesFileProviderMigrationPolicyStateToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesFileProviderMigrationPolicyStateToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogFileProviderMigrationPolicyChangedTypeToDBOptional(object: DBXTeamLogFileProviderMigrationPolicyChangedType?)
    -> DBTEAMLOGFileProviderMigrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileProviderMigrationPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogFileProviderMigrationPolicyChangedTypeToDB(object: DBXTeamLogFileProviderMigrationPolicyChangedType)
    -> DBTEAMLOGFileProviderMigrationPolicyChangedType {
    DBTEAMLOGFileProviderMigrationPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogFileRenameDetailsToDBOptional(object: DBXTeamLogFileRenameDetails?) -> DBTEAMLOGFileRenameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRenameDetailsToDB(object: object)
}

func mapDBXTeamLogFileRenameDetailsToDB(object: DBXTeamLogFileRenameDetails) -> DBTEAMLOGFileRenameDetails {
    DBTEAMLOGFileRenameDetails(relocateActionDetails: object.relocateActionDetails.compactMap { mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: $0) })
}

func mapDBXTeamLogFileRenameTypeToDBOptional(object: DBXTeamLogFileRenameType?) -> DBTEAMLOGFileRenameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRenameTypeToDB(object: object)
}

func mapDBXTeamLogFileRenameTypeToDB(object: DBXTeamLogFileRenameType) -> DBTEAMLOGFileRenameType {
    DBTEAMLOGFileRenameType(description_: object.description_)
}

func mapDBXTeamLogFileRequestChangeDetailsToDBOptional(object: DBXTeamLogFileRequestChangeDetails?) -> DBTEAMLOGFileRequestChangeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestChangeDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestChangeDetailsToDB(object: DBXTeamLogFileRequestChangeDetails) -> DBTEAMLOGFileRequestChangeDetails {
    DBTEAMLOGFileRequestChangeDetails(
        dNewDetails: mapDBXTeamLogFileRequestDetailsToDB(object: object.newDetails),
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBXTeamLogFileRequestDetailsToDBOptional(object: object.previousDetails)
    )
}

func mapDBXTeamLogFileRequestChangeTypeToDBOptional(object: DBXTeamLogFileRequestChangeType?) -> DBTEAMLOGFileRequestChangeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestChangeTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestChangeTypeToDB(object: DBXTeamLogFileRequestChangeType) -> DBTEAMLOGFileRequestChangeType {
    DBTEAMLOGFileRequestChangeType(description_: object.description_)
}

func mapDBXTeamLogFileRequestCloseDetailsToDBOptional(object: DBXTeamLogFileRequestCloseDetails?) -> DBTEAMLOGFileRequestCloseDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestCloseDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestCloseDetailsToDB(object: DBXTeamLogFileRequestCloseDetails) -> DBTEAMLOGFileRequestCloseDetails {
    DBTEAMLOGFileRequestCloseDetails(
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBXTeamLogFileRequestDetailsToDBOptional(object: object.previousDetails)
    )
}

func mapDBXTeamLogFileRequestCloseTypeToDBOptional(object: DBXTeamLogFileRequestCloseType?) -> DBTEAMLOGFileRequestCloseType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestCloseTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestCloseTypeToDB(object: DBXTeamLogFileRequestCloseType) -> DBTEAMLOGFileRequestCloseType {
    DBTEAMLOGFileRequestCloseType(description_: object.description_)
}

func mapDBXTeamLogFileRequestCreateDetailsToDBOptional(object: DBXTeamLogFileRequestCreateDetails?) -> DBTEAMLOGFileRequestCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestCreateDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestCreateDetailsToDB(object: DBXTeamLogFileRequestCreateDetails) -> DBTEAMLOGFileRequestCreateDetails {
    DBTEAMLOGFileRequestCreateDetails(
        fileRequestId: object.fileRequestId,
        requestDetails: mapDBXTeamLogFileRequestDetailsToDBOptional(object: object.requestDetails)
    )
}

func mapDBXTeamLogFileRequestCreateTypeToDBOptional(object: DBXTeamLogFileRequestCreateType?) -> DBTEAMLOGFileRequestCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestCreateTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestCreateTypeToDB(object: DBXTeamLogFileRequestCreateType) -> DBTEAMLOGFileRequestCreateType {
    DBTEAMLOGFileRequestCreateType(description_: object.description_)
}

func mapDBXTeamLogFileRequestDeadlineToDBOptional(object: DBXTeamLogFileRequestDeadline?) -> DBTEAMLOGFileRequestDeadline? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestDeadlineToDB(object: object)
}

func mapDBXTeamLogFileRequestDeadlineToDB(object: DBXTeamLogFileRequestDeadline) -> DBTEAMLOGFileRequestDeadline {
    DBTEAMLOGFileRequestDeadline(deadline: object.deadline, allowLateUploads: object.allowLateUploads)
}

func mapDBXTeamLogFileRequestDeleteDetailsToDBOptional(object: DBXTeamLogFileRequestDeleteDetails?) -> DBTEAMLOGFileRequestDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestDeleteDetailsToDB(object: DBXTeamLogFileRequestDeleteDetails) -> DBTEAMLOGFileRequestDeleteDetails {
    DBTEAMLOGFileRequestDeleteDetails(
        fileRequestId: object.fileRequestId,
        previousDetails: mapDBXTeamLogFileRequestDetailsToDBOptional(object: object.previousDetails)
    )
}

func mapDBXTeamLogFileRequestDeleteTypeToDBOptional(object: DBXTeamLogFileRequestDeleteType?) -> DBTEAMLOGFileRequestDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestDeleteTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestDeleteTypeToDB(object: DBXTeamLogFileRequestDeleteType) -> DBTEAMLOGFileRequestDeleteType {
    DBTEAMLOGFileRequestDeleteType(description_: object.description_)
}

func mapDBXTeamLogFileRequestDetailsToDBOptional(object: DBXTeamLogFileRequestDetails?) -> DBTEAMLOGFileRequestDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestDetailsToDB(object: DBXTeamLogFileRequestDetails) -> DBTEAMLOGFileRequestDetails {
    DBTEAMLOGFileRequestDetails(assetIndex: object.assetIndex, deadline: mapDBXTeamLogFileRequestDeadlineToDBOptional(object: object.deadline))
}

func mapDBXTeamLogFileRequestReceiveFileDetailsToDBOptional(object: DBXTeamLogFileRequestReceiveFileDetails?) -> DBTEAMLOGFileRequestReceiveFileDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestReceiveFileDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestReceiveFileDetailsToDB(object: DBXTeamLogFileRequestReceiveFileDetails) -> DBTEAMLOGFileRequestReceiveFileDetails {
    DBTEAMLOGFileRequestReceiveFileDetails(
        submittedFileNames: object.submittedFileNames,
        fileRequestId: object.fileRequestId,
        fileRequestDetails: mapDBXTeamLogFileRequestDetailsToDBOptional(object: object.fileRequestDetails),
        submitterName: object.submitterName,
        submitterEmail: object.submitterEmail
    )
}

func mapDBXTeamLogFileRequestReceiveFileTypeToDBOptional(object: DBXTeamLogFileRequestReceiveFileType?) -> DBTEAMLOGFileRequestReceiveFileType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestReceiveFileTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestReceiveFileTypeToDB(object: DBXTeamLogFileRequestReceiveFileType) -> DBTEAMLOGFileRequestReceiveFileType {
    DBTEAMLOGFileRequestReceiveFileType(description_: object.description_)
}

func mapDBXTeamLogFileRequestsChangePolicyDetailsToDBOptional(object: DBXTeamLogFileRequestsChangePolicyDetails?) -> DBTEAMLOGFileRequestsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestsChangePolicyDetailsToDB(object: DBXTeamLogFileRequestsChangePolicyDetails) -> DBTEAMLOGFileRequestsChangePolicyDetails {
    DBTEAMLOGFileRequestsChangePolicyDetails(
        dNewValue: mapDBXTeamLogFileRequestsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogFileRequestsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogFileRequestsChangePolicyTypeToDBOptional(object: DBXTeamLogFileRequestsChangePolicyType?) -> DBTEAMLOGFileRequestsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestsChangePolicyTypeToDB(object: DBXTeamLogFileRequestsChangePolicyType) -> DBTEAMLOGFileRequestsChangePolicyType {
    DBTEAMLOGFileRequestsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogFileRequestsEmailsEnabledDetailsToDBOptional(object: DBXTeamLogFileRequestsEmailsEnabledDetails?)
    -> DBTEAMLOGFileRequestsEmailsEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsEmailsEnabledDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestsEmailsEnabledDetailsToDB(object: DBXTeamLogFileRequestsEmailsEnabledDetails) -> DBTEAMLOGFileRequestsEmailsEnabledDetails {
    DBTEAMLOGFileRequestsEmailsEnabledDetails(default: ())
}

func mapDBXTeamLogFileRequestsEmailsEnabledTypeToDBOptional(object: DBXTeamLogFileRequestsEmailsEnabledType?) -> DBTEAMLOGFileRequestsEmailsEnabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsEmailsEnabledTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestsEmailsEnabledTypeToDB(object: DBXTeamLogFileRequestsEmailsEnabledType) -> DBTEAMLOGFileRequestsEmailsEnabledType {
    DBTEAMLOGFileRequestsEmailsEnabledType(description_: object.description_)
}

func mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetailsToDBOptional(object: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails?)
    -> DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetailsToDB(object: object)
}

func mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetailsToDB(object: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyDetails)
    -> DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails(default: ())
}

func mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyTypeToDBOptional(object: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType?)
    -> DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyTypeToDB(object: object)
}

func mapDBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyTypeToDB(object: DBXTeamLogFileRequestsEmailsRestrictedToTeamOnlyType)
    -> DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyType(description_: object.description_)
}

func mapDBXTeamLogFileRequestsPolicyToDBOptional(object: DBXTeamLogFileRequestsPolicy?) -> DBTEAMLOGFileRequestsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRequestsPolicyToDB(object: object)
}

func mapDBXTeamLogFileRequestsPolicyToDB(object: DBXTeamLogFileRequestsPolicy) -> DBTEAMLOGFileRequestsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGFileRequestsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGFileRequestsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFileRequestsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFileResolveCommentDetailsToDBOptional(object: DBXTeamLogFileResolveCommentDetails?) -> DBTEAMLOGFileResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileResolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileResolveCommentDetailsToDB(object: DBXTeamLogFileResolveCommentDetails) -> DBTEAMLOGFileResolveCommentDetails {
    DBTEAMLOGFileResolveCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileResolveCommentTypeToDBOptional(object: DBXTeamLogFileResolveCommentType?) -> DBTEAMLOGFileResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileResolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileResolveCommentTypeToDB(object: DBXTeamLogFileResolveCommentType) -> DBTEAMLOGFileResolveCommentType {
    DBTEAMLOGFileResolveCommentType(description_: object.description_)
}

func mapDBXTeamLogFileRestoreDetailsToDBOptional(object: DBXTeamLogFileRestoreDetails?) -> DBTEAMLOGFileRestoreDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRestoreDetailsToDB(object: object)
}

func mapDBXTeamLogFileRestoreDetailsToDB(object: DBXTeamLogFileRestoreDetails) -> DBTEAMLOGFileRestoreDetails {
    DBTEAMLOGFileRestoreDetails(default: ())
}

func mapDBXTeamLogFileRestoreTypeToDBOptional(object: DBXTeamLogFileRestoreType?) -> DBTEAMLOGFileRestoreType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRestoreTypeToDB(object: object)
}

func mapDBXTeamLogFileRestoreTypeToDB(object: DBXTeamLogFileRestoreType) -> DBTEAMLOGFileRestoreType {
    DBTEAMLOGFileRestoreType(description_: object.description_)
}

func mapDBXTeamLogFileRevertDetailsToDBOptional(object: DBXTeamLogFileRevertDetails?) -> DBTEAMLOGFileRevertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRevertDetailsToDB(object: object)
}

func mapDBXTeamLogFileRevertDetailsToDB(object: DBXTeamLogFileRevertDetails) -> DBTEAMLOGFileRevertDetails {
    DBTEAMLOGFileRevertDetails(default: ())
}

func mapDBXTeamLogFileRevertTypeToDBOptional(object: DBXTeamLogFileRevertType?) -> DBTEAMLOGFileRevertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRevertTypeToDB(object: object)
}

func mapDBXTeamLogFileRevertTypeToDB(object: DBXTeamLogFileRevertType) -> DBTEAMLOGFileRevertType {
    DBTEAMLOGFileRevertType(description_: object.description_)
}

func mapDBXTeamLogFileRollbackChangesDetailsToDBOptional(object: DBXTeamLogFileRollbackChangesDetails?) -> DBTEAMLOGFileRollbackChangesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRollbackChangesDetailsToDB(object: object)
}

func mapDBXTeamLogFileRollbackChangesDetailsToDB(object: DBXTeamLogFileRollbackChangesDetails) -> DBTEAMLOGFileRollbackChangesDetails {
    DBTEAMLOGFileRollbackChangesDetails(default: ())
}

func mapDBXTeamLogFileRollbackChangesTypeToDBOptional(object: DBXTeamLogFileRollbackChangesType?) -> DBTEAMLOGFileRollbackChangesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileRollbackChangesTypeToDB(object: object)
}

func mapDBXTeamLogFileRollbackChangesTypeToDB(object: DBXTeamLogFileRollbackChangesType) -> DBTEAMLOGFileRollbackChangesType {
    DBTEAMLOGFileRollbackChangesType(description_: object.description_)
}

func mapDBXTeamLogFileSaveCopyReferenceDetailsToDBOptional(object: DBXTeamLogFileSaveCopyReferenceDetails?) -> DBTEAMLOGFileSaveCopyReferenceDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileSaveCopyReferenceDetailsToDB(object: object)
}

func mapDBXTeamLogFileSaveCopyReferenceDetailsToDB(object: DBXTeamLogFileSaveCopyReferenceDetails) -> DBTEAMLOGFileSaveCopyReferenceDetails {
    DBTEAMLOGFileSaveCopyReferenceDetails(
        relocateActionDetails: object.relocateActionDetails
            .compactMap { mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: $0) }
    )
}

func mapDBXTeamLogFileSaveCopyReferenceTypeToDBOptional(object: DBXTeamLogFileSaveCopyReferenceType?) -> DBTEAMLOGFileSaveCopyReferenceType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileSaveCopyReferenceTypeToDB(object: object)
}

func mapDBXTeamLogFileSaveCopyReferenceTypeToDB(object: DBXTeamLogFileSaveCopyReferenceType) -> DBTEAMLOGFileSaveCopyReferenceType {
    DBTEAMLOGFileSaveCopyReferenceType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersFileAddDetailsToDBOptional(object: DBXTeamLogFileTransfersFileAddDetails?) -> DBTEAMLOGFileTransfersFileAddDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersFileAddDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersFileAddDetailsToDB(object: DBXTeamLogFileTransfersFileAddDetails) -> DBTEAMLOGFileTransfersFileAddDetails {
    DBTEAMLOGFileTransfersFileAddDetails(fileTransferId: object.fileTransferId)
}

func mapDBXTeamLogFileTransfersFileAddTypeToDBOptional(object: DBXTeamLogFileTransfersFileAddType?) -> DBTEAMLOGFileTransfersFileAddType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersFileAddTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersFileAddTypeToDB(object: DBXTeamLogFileTransfersFileAddType) -> DBTEAMLOGFileTransfersFileAddType {
    DBTEAMLOGFileTransfersFileAddType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersPolicyToDBOptional(object: DBXTeamLogFileTransfersPolicy?) -> DBTEAMLOGFileTransfersPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersPolicyToDB(object: object)
}

func mapDBXTeamLogFileTransfersPolicyToDB(object: DBXTeamLogFileTransfersPolicy) -> DBTEAMLOGFileTransfersPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGFileTransfersPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGFileTransfersPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFileTransfersPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFileTransfersPolicyChangedDetailsToDBOptional(object: DBXTeamLogFileTransfersPolicyChangedDetails?)
    -> DBTEAMLOGFileTransfersPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersPolicyChangedDetailsToDB(object: DBXTeamLogFileTransfersPolicyChangedDetails) -> DBTEAMLOGFileTransfersPolicyChangedDetails {
    DBTEAMLOGFileTransfersPolicyChangedDetails(
        dNewValue: mapDBXTeamLogFileTransfersPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogFileTransfersPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogFileTransfersPolicyChangedTypeToDBOptional(object: DBXTeamLogFileTransfersPolicyChangedType?) -> DBTEAMLOGFileTransfersPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersPolicyChangedTypeToDB(object: DBXTeamLogFileTransfersPolicyChangedType) -> DBTEAMLOGFileTransfersPolicyChangedType {
    DBTEAMLOGFileTransfersPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersTransferDeleteDetailsToDBOptional(object: DBXTeamLogFileTransfersTransferDeleteDetails?)
    -> DBTEAMLOGFileTransfersTransferDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferDeleteDetailsToDB(object: DBXTeamLogFileTransfersTransferDeleteDetails) -> DBTEAMLOGFileTransfersTransferDeleteDetails {
    DBTEAMLOGFileTransfersTransferDeleteDetails(fileTransferId: object.fileTransferId)
}

func mapDBXTeamLogFileTransfersTransferDeleteTypeToDBOptional(object: DBXTeamLogFileTransfersTransferDeleteType?) -> DBTEAMLOGFileTransfersTransferDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferDeleteTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferDeleteTypeToDB(object: DBXTeamLogFileTransfersTransferDeleteType) -> DBTEAMLOGFileTransfersTransferDeleteType {
    DBTEAMLOGFileTransfersTransferDeleteType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersTransferDownloadDetailsToDBOptional(object: DBXTeamLogFileTransfersTransferDownloadDetails?)
    -> DBTEAMLOGFileTransfersTransferDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferDownloadDetailsToDB(object: DBXTeamLogFileTransfersTransferDownloadDetails)
    -> DBTEAMLOGFileTransfersTransferDownloadDetails {
    DBTEAMLOGFileTransfersTransferDownloadDetails(fileTransferId: object.fileTransferId)
}

func mapDBXTeamLogFileTransfersTransferDownloadTypeToDBOptional(object: DBXTeamLogFileTransfersTransferDownloadType?)
    -> DBTEAMLOGFileTransfersTransferDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferDownloadTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferDownloadTypeToDB(object: DBXTeamLogFileTransfersTransferDownloadType) -> DBTEAMLOGFileTransfersTransferDownloadType {
    DBTEAMLOGFileTransfersTransferDownloadType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersTransferSendDetailsToDBOptional(object: DBXTeamLogFileTransfersTransferSendDetails?)
    -> DBTEAMLOGFileTransfersTransferSendDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferSendDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferSendDetailsToDB(object: DBXTeamLogFileTransfersTransferSendDetails) -> DBTEAMLOGFileTransfersTransferSendDetails {
    DBTEAMLOGFileTransfersTransferSendDetails(fileTransferId: object.fileTransferId)
}

func mapDBXTeamLogFileTransfersTransferSendTypeToDBOptional(object: DBXTeamLogFileTransfersTransferSendType?) -> DBTEAMLOGFileTransfersTransferSendType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferSendTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferSendTypeToDB(object: DBXTeamLogFileTransfersTransferSendType) -> DBTEAMLOGFileTransfersTransferSendType {
    DBTEAMLOGFileTransfersTransferSendType(description_: object.description_)
}

func mapDBXTeamLogFileTransfersTransferViewDetailsToDBOptional(object: DBXTeamLogFileTransfersTransferViewDetails?)
    -> DBTEAMLOGFileTransfersTransferViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferViewDetailsToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferViewDetailsToDB(object: DBXTeamLogFileTransfersTransferViewDetails) -> DBTEAMLOGFileTransfersTransferViewDetails {
    DBTEAMLOGFileTransfersTransferViewDetails(fileTransferId: object.fileTransferId)
}

func mapDBXTeamLogFileTransfersTransferViewTypeToDBOptional(object: DBXTeamLogFileTransfersTransferViewType?) -> DBTEAMLOGFileTransfersTransferViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileTransfersTransferViewTypeToDB(object: object)
}

func mapDBXTeamLogFileTransfersTransferViewTypeToDB(object: DBXTeamLogFileTransfersTransferViewType) -> DBTEAMLOGFileTransfersTransferViewType {
    DBTEAMLOGFileTransfersTransferViewType(description_: object.description_)
}

func mapDBXTeamLogFileUnlikeCommentDetailsToDBOptional(object: DBXTeamLogFileUnlikeCommentDetails?) -> DBTEAMLOGFileUnlikeCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileUnlikeCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileUnlikeCommentDetailsToDB(object: DBXTeamLogFileUnlikeCommentDetails) -> DBTEAMLOGFileUnlikeCommentDetails {
    DBTEAMLOGFileUnlikeCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileUnlikeCommentTypeToDBOptional(object: DBXTeamLogFileUnlikeCommentType?) -> DBTEAMLOGFileUnlikeCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileUnlikeCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileUnlikeCommentTypeToDB(object: DBXTeamLogFileUnlikeCommentType) -> DBTEAMLOGFileUnlikeCommentType {
    DBTEAMLOGFileUnlikeCommentType(description_: object.description_)
}

func mapDBXTeamLogFileUnresolveCommentDetailsToDBOptional(object: DBXTeamLogFileUnresolveCommentDetails?) -> DBTEAMLOGFileUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileUnresolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogFileUnresolveCommentDetailsToDB(object: DBXTeamLogFileUnresolveCommentDetails) -> DBTEAMLOGFileUnresolveCommentDetails {
    DBTEAMLOGFileUnresolveCommentDetails(commentText: object.commentText)
}

func mapDBXTeamLogFileUnresolveCommentTypeToDBOptional(object: DBXTeamLogFileUnresolveCommentType?) -> DBTEAMLOGFileUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFileUnresolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogFileUnresolveCommentTypeToDB(object: DBXTeamLogFileUnresolveCommentType) -> DBTEAMLOGFileUnresolveCommentType {
    DBTEAMLOGFileUnresolveCommentType(description_: object.description_)
}

func mapDBXTeamLogFolderLinkRestrictionPolicyToDBOptional(object: DBXTeamLogFolderLinkRestrictionPolicy?) -> DBTEAMLOGFolderLinkRestrictionPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderLinkRestrictionPolicyToDB(object: object)
}

func mapDBXTeamLogFolderLinkRestrictionPolicyToDB(object: DBXTeamLogFolderLinkRestrictionPolicy) -> DBTEAMLOGFolderLinkRestrictionPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGFolderLinkRestrictionPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGFolderLinkRestrictionPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGFolderLinkRestrictionPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogFolderLinkRestrictionPolicyChangedDetailsToDBOptional(object: DBXTeamLogFolderLinkRestrictionPolicyChangedDetails?)
    -> DBTEAMLOGFolderLinkRestrictionPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderLinkRestrictionPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFolderLinkRestrictionPolicyChangedDetailsToDB(object: DBXTeamLogFolderLinkRestrictionPolicyChangedDetails)
    -> DBTEAMLOGFolderLinkRestrictionPolicyChangedDetails {
    DBTEAMLOGFolderLinkRestrictionPolicyChangedDetails(
        dNewValue: mapDBXTeamLogFolderLinkRestrictionPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogFolderLinkRestrictionPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogFolderLinkRestrictionPolicyChangedTypeToDBOptional(object: DBXTeamLogFolderLinkRestrictionPolicyChangedType?)
    -> DBTEAMLOGFolderLinkRestrictionPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderLinkRestrictionPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogFolderLinkRestrictionPolicyChangedTypeToDB(object: DBXTeamLogFolderLinkRestrictionPolicyChangedType)
    -> DBTEAMLOGFolderLinkRestrictionPolicyChangedType {
    DBTEAMLOGFolderLinkRestrictionPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogFolderLogInfoToDBOptional(object: DBXTeamLogFolderLogInfo?) -> DBTEAMLOGFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderLogInfoToDB(object: object)
}

func mapDBXTeamLogFolderLogInfoToDB(object: DBXTeamLogFolderLogInfo) -> DBTEAMLOGFolderLogInfo {
    DBTEAMLOGFolderLogInfo(
        path: mapDBXTeamLogPathLogInfoToDB(object: object.path),
        displayName: object.displayName,
        fileId: object.fileId,
        fileSize: object.fileSize,
        fileCount: object.fileCount
    )
}

func mapDBXTeamLogFolderOverviewDescriptionChangedDetailsToDBOptional(object: DBXTeamLogFolderOverviewDescriptionChangedDetails?)
    -> DBTEAMLOGFolderOverviewDescriptionChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewDescriptionChangedDetailsToDB(object: object)
}

func mapDBXTeamLogFolderOverviewDescriptionChangedDetailsToDB(object: DBXTeamLogFolderOverviewDescriptionChangedDetails)
    -> DBTEAMLOGFolderOverviewDescriptionChangedDetails {
    DBTEAMLOGFolderOverviewDescriptionChangedDetails(folderOverviewLocationAsset: object.folderOverviewLocationAsset)
}

func mapDBXTeamLogFolderOverviewDescriptionChangedTypeToDBOptional(object: DBXTeamLogFolderOverviewDescriptionChangedType?)
    -> DBTEAMLOGFolderOverviewDescriptionChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewDescriptionChangedTypeToDB(object: object)
}

func mapDBXTeamLogFolderOverviewDescriptionChangedTypeToDB(object: DBXTeamLogFolderOverviewDescriptionChangedType)
    -> DBTEAMLOGFolderOverviewDescriptionChangedType {
    DBTEAMLOGFolderOverviewDescriptionChangedType(description_: object.description_)
}

func mapDBXTeamLogFolderOverviewItemPinnedDetailsToDBOptional(object: DBXTeamLogFolderOverviewItemPinnedDetails?) -> DBTEAMLOGFolderOverviewItemPinnedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewItemPinnedDetailsToDB(object: object)
}

func mapDBXTeamLogFolderOverviewItemPinnedDetailsToDB(object: DBXTeamLogFolderOverviewItemPinnedDetails) -> DBTEAMLOGFolderOverviewItemPinnedDetails {
    DBTEAMLOGFolderOverviewItemPinnedDetails(
        folderOverviewLocationAsset: object.folderOverviewLocationAsset,
        pinnedItemsAssetIndices: object.pinnedItemsAssetIndices.compactMap { $0 }
    )
}

func mapDBXTeamLogFolderOverviewItemPinnedTypeToDBOptional(object: DBXTeamLogFolderOverviewItemPinnedType?) -> DBTEAMLOGFolderOverviewItemPinnedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewItemPinnedTypeToDB(object: object)
}

func mapDBXTeamLogFolderOverviewItemPinnedTypeToDB(object: DBXTeamLogFolderOverviewItemPinnedType) -> DBTEAMLOGFolderOverviewItemPinnedType {
    DBTEAMLOGFolderOverviewItemPinnedType(description_: object.description_)
}

func mapDBXTeamLogFolderOverviewItemUnpinnedDetailsToDBOptional(object: DBXTeamLogFolderOverviewItemUnpinnedDetails?)
    -> DBTEAMLOGFolderOverviewItemUnpinnedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewItemUnpinnedDetailsToDB(object: object)
}

func mapDBXTeamLogFolderOverviewItemUnpinnedDetailsToDB(object: DBXTeamLogFolderOverviewItemUnpinnedDetails) -> DBTEAMLOGFolderOverviewItemUnpinnedDetails {
    DBTEAMLOGFolderOverviewItemUnpinnedDetails(
        folderOverviewLocationAsset: object.folderOverviewLocationAsset,
        pinnedItemsAssetIndices: object.pinnedItemsAssetIndices.compactMap { $0 }
    )
}

func mapDBXTeamLogFolderOverviewItemUnpinnedTypeToDBOptional(object: DBXTeamLogFolderOverviewItemUnpinnedType?) -> DBTEAMLOGFolderOverviewItemUnpinnedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogFolderOverviewItemUnpinnedTypeToDB(object: object)
}

func mapDBXTeamLogFolderOverviewItemUnpinnedTypeToDB(object: DBXTeamLogFolderOverviewItemUnpinnedType) -> DBTEAMLOGFolderOverviewItemUnpinnedType {
    DBTEAMLOGFolderOverviewItemUnpinnedType(description_: object.description_)
}

func mapDBXTeamLogGeoLocationLogInfoToDBOptional(object: DBXTeamLogGeoLocationLogInfo?) -> DBTEAMLOGGeoLocationLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGeoLocationLogInfoToDB(object: object)
}

func mapDBXTeamLogGeoLocationLogInfoToDB(object: DBXTeamLogGeoLocationLogInfo) -> DBTEAMLOGGeoLocationLogInfo {
    DBTEAMLOGGeoLocationLogInfo(ipAddress: object.ipAddress, city: object.city, region: object.region, country: object.country)
}

func mapDBXTeamLogGetTeamEventsArgToDBOptional(object: DBXTeamLogGetTeamEventsArg?) -> DBTEAMLOGGetTeamEventsArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGetTeamEventsArgToDB(object: object)
}

func mapDBXTeamLogGetTeamEventsArgToDB(object: DBXTeamLogGetTeamEventsArg) -> DBTEAMLOGGetTeamEventsArg {
    DBTEAMLOGGetTeamEventsArg(
        limit: object.limit,
        accountId: object.accountId,
        time: mapDBXTeamCommonTimeRangeToDBOptional(object: object.time),
        category: mapDBXTeamLogEventCategoryToDBOptional(object: object.category),
        eventType: mapDBXTeamLogEventTypeArgToDBOptional(object: object.eventType)
    )
}

func mapDBXTeamLogGetTeamEventsContinueArgToDBOptional(object: DBXTeamLogGetTeamEventsContinueArg?) -> DBTEAMLOGGetTeamEventsContinueArg? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGetTeamEventsContinueArgToDB(object: object)
}

func mapDBXTeamLogGetTeamEventsContinueArgToDB(object: DBXTeamLogGetTeamEventsContinueArg) -> DBTEAMLOGGetTeamEventsContinueArg {
    DBTEAMLOGGetTeamEventsContinueArg(cursor: object.cursor)
}

func mapDBXTeamLogGetTeamEventsContinueErrorToDBOptional(object: DBXTeamLogGetTeamEventsContinueError?) -> DBTEAMLOGGetTeamEventsContinueError? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGetTeamEventsContinueErrorToDB(object: object)
}

func mapDBXTeamLogGetTeamEventsContinueErrorToDB(object: DBXTeamLogGetTeamEventsContinueError) -> DBTEAMLOGGetTeamEventsContinueError {
    if object.asBadCursor != nil {
        return DBTEAMLOGGetTeamEventsContinueError(badCursor: ())
    }
    if let object = object.asReset {
        let reset = object.reset
        return DBTEAMLOGGetTeamEventsContinueError(reset: reset)
    }
    if object.asOther != nil {
        return DBTEAMLOGGetTeamEventsContinueError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogGetTeamEventsErrorToDBOptional(object: DBXTeamLogGetTeamEventsError?) -> DBTEAMLOGGetTeamEventsError? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGetTeamEventsErrorToDB(object: object)
}

func mapDBXTeamLogGetTeamEventsErrorToDB(object: DBXTeamLogGetTeamEventsError) -> DBTEAMLOGGetTeamEventsError {
    if object.asAccountIdNotFound != nil {
        return DBTEAMLOGGetTeamEventsError(accountIdNotFound: ())
    }
    if object.asInvalidTimeRange != nil {
        return DBTEAMLOGGetTeamEventsError(invalidTimeRange: ())
    }
    if object.asInvalidFilters != nil {
        return DBTEAMLOGGetTeamEventsError(invalidFilters: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGGetTeamEventsError(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogGetTeamEventsResultToDBOptional(object: DBXTeamLogGetTeamEventsResult?) -> DBTEAMLOGGetTeamEventsResult? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGetTeamEventsResultToDB(object: object)
}

func mapDBXTeamLogGetTeamEventsResultToDB(object: DBXTeamLogGetTeamEventsResult) -> DBTEAMLOGGetTeamEventsResult {
    DBTEAMLOGGetTeamEventsResult(events: object.events.compactMap { mapDBXTeamLogTeamEventToDB(object: $0) }, cursor: object.cursor, hasMore: object.hasMore)
}

func mapDBXTeamLogGoogleSsoChangePolicyDetailsToDBOptional(object: DBXTeamLogGoogleSsoChangePolicyDetails?) -> DBTEAMLOGGoogleSsoChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGoogleSsoChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogGoogleSsoChangePolicyDetailsToDB(object: DBXTeamLogGoogleSsoChangePolicyDetails) -> DBTEAMLOGGoogleSsoChangePolicyDetails {
    DBTEAMLOGGoogleSsoChangePolicyDetails(
        dNewValue: mapDBXTeamLogGoogleSsoPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogGoogleSsoPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogGoogleSsoChangePolicyTypeToDBOptional(object: DBXTeamLogGoogleSsoChangePolicyType?) -> DBTEAMLOGGoogleSsoChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGoogleSsoChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogGoogleSsoChangePolicyTypeToDB(object: DBXTeamLogGoogleSsoChangePolicyType) -> DBTEAMLOGGoogleSsoChangePolicyType {
    DBTEAMLOGGoogleSsoChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogGoogleSsoPolicyToDBOptional(object: DBXTeamLogGoogleSsoPolicy?) -> DBTEAMLOGGoogleSsoPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGoogleSsoPolicyToDB(object: object)
}

func mapDBXTeamLogGoogleSsoPolicyToDB(object: DBXTeamLogGoogleSsoPolicy) -> DBTEAMLOGGoogleSsoPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGGoogleSsoPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGGoogleSsoPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGGoogleSsoPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogGovernancePolicyAddFolderFailedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyAddFolderFailedDetails?)
    -> DBTEAMLOGGovernancePolicyAddFolderFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyAddFolderFailedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyAddFolderFailedDetailsToDB(object: DBXTeamLogGovernancePolicyAddFolderFailedDetails)
    -> DBTEAMLOGGovernancePolicyAddFolderFailedDetails {
    DBTEAMLOGGovernancePolicyAddFolderFailedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        folder: object.folder,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType),
        reason: object.reason
    )
}

func mapDBXTeamLogGovernancePolicyAddFolderFailedTypeToDBOptional(object: DBXTeamLogGovernancePolicyAddFolderFailedType?)
    -> DBTEAMLOGGovernancePolicyAddFolderFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyAddFolderFailedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyAddFolderFailedTypeToDB(object: DBXTeamLogGovernancePolicyAddFolderFailedType)
    -> DBTEAMLOGGovernancePolicyAddFolderFailedType {
    DBTEAMLOGGovernancePolicyAddFolderFailedType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyAddFoldersDetailsToDBOptional(object: DBXTeamLogGovernancePolicyAddFoldersDetails?)
    -> DBTEAMLOGGovernancePolicyAddFoldersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyAddFoldersDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyAddFoldersDetailsToDB(object: DBXTeamLogGovernancePolicyAddFoldersDetails) -> DBTEAMLOGGovernancePolicyAddFoldersDetails {
    DBTEAMLOGGovernancePolicyAddFoldersDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType),
        folders: object.folders
    )
}

func mapDBXTeamLogGovernancePolicyAddFoldersTypeToDBOptional(object: DBXTeamLogGovernancePolicyAddFoldersType?) -> DBTEAMLOGGovernancePolicyAddFoldersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyAddFoldersTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyAddFoldersTypeToDB(object: DBXTeamLogGovernancePolicyAddFoldersType) -> DBTEAMLOGGovernancePolicyAddFoldersType {
    DBTEAMLOGGovernancePolicyAddFoldersType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyContentDisposedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyContentDisposedDetails?)
    -> DBTEAMLOGGovernancePolicyContentDisposedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyContentDisposedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyContentDisposedDetailsToDB(object: DBXTeamLogGovernancePolicyContentDisposedDetails)
    -> DBTEAMLOGGovernancePolicyContentDisposedDetails {
    DBTEAMLOGGovernancePolicyContentDisposedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        dispositionType: mapDBXTeamLogDispositionActionTypeToDB(object: object.dispositionType),
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyContentDisposedTypeToDBOptional(object: DBXTeamLogGovernancePolicyContentDisposedType?)
    -> DBTEAMLOGGovernancePolicyContentDisposedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyContentDisposedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyContentDisposedTypeToDB(object: DBXTeamLogGovernancePolicyContentDisposedType)
    -> DBTEAMLOGGovernancePolicyContentDisposedType {
    DBTEAMLOGGovernancePolicyContentDisposedType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyCreateDetailsToDBOptional(object: DBXTeamLogGovernancePolicyCreateDetails?) -> DBTEAMLOGGovernancePolicyCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyCreateDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyCreateDetailsToDB(object: DBXTeamLogGovernancePolicyCreateDetails) -> DBTEAMLOGGovernancePolicyCreateDetails {
    DBTEAMLOGGovernancePolicyCreateDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        duration: mapDBXTeamLogDurationLogInfoToDB(object: object.duration),
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType),
        folders: object.folders
    )
}

func mapDBXTeamLogGovernancePolicyCreateTypeToDBOptional(object: DBXTeamLogGovernancePolicyCreateType?) -> DBTEAMLOGGovernancePolicyCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyCreateTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyCreateTypeToDB(object: DBXTeamLogGovernancePolicyCreateType) -> DBTEAMLOGGovernancePolicyCreateType {
    DBTEAMLOGGovernancePolicyCreateType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyDeleteDetailsToDBOptional(object: DBXTeamLogGovernancePolicyDeleteDetails?) -> DBTEAMLOGGovernancePolicyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyDeleteDetailsToDB(object: DBXTeamLogGovernancePolicyDeleteDetails) -> DBTEAMLOGGovernancePolicyDeleteDetails {
    DBTEAMLOGGovernancePolicyDeleteDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyDeleteTypeToDBOptional(object: DBXTeamLogGovernancePolicyDeleteType?) -> DBTEAMLOGGovernancePolicyDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyDeleteTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyDeleteTypeToDB(object: DBXTeamLogGovernancePolicyDeleteType) -> DBTEAMLOGGovernancePolicyDeleteType {
    DBTEAMLOGGovernancePolicyDeleteType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyEditDetailsDetailsToDBOptional(object: DBXTeamLogGovernancePolicyEditDetailsDetails?)
    -> DBTEAMLOGGovernancePolicyEditDetailsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyEditDetailsDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyEditDetailsDetailsToDB(object: DBXTeamLogGovernancePolicyEditDetailsDetails) -> DBTEAMLOGGovernancePolicyEditDetailsDetails {
    DBTEAMLOGGovernancePolicyEditDetailsDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        attribute: object.attribute,
        previousValue: object.previousValue,
        dNewValue: object.newValue,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyEditDetailsTypeToDBOptional(object: DBXTeamLogGovernancePolicyEditDetailsType?) -> DBTEAMLOGGovernancePolicyEditDetailsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyEditDetailsTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyEditDetailsTypeToDB(object: DBXTeamLogGovernancePolicyEditDetailsType) -> DBTEAMLOGGovernancePolicyEditDetailsType {
    DBTEAMLOGGovernancePolicyEditDetailsType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyEditDurationDetailsToDBOptional(object: DBXTeamLogGovernancePolicyEditDurationDetails?)
    -> DBTEAMLOGGovernancePolicyEditDurationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyEditDurationDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyEditDurationDetailsToDB(object: DBXTeamLogGovernancePolicyEditDurationDetails)
    -> DBTEAMLOGGovernancePolicyEditDurationDetails {
    DBTEAMLOGGovernancePolicyEditDurationDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        previousValue: mapDBXTeamLogDurationLogInfoToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogDurationLogInfoToDB(object: object.newValue),
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyEditDurationTypeToDBOptional(object: DBXTeamLogGovernancePolicyEditDurationType?)
    -> DBTEAMLOGGovernancePolicyEditDurationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyEditDurationTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyEditDurationTypeToDB(object: DBXTeamLogGovernancePolicyEditDurationType) -> DBTEAMLOGGovernancePolicyEditDurationType {
    DBTEAMLOGGovernancePolicyEditDurationType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyExportCreatedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyExportCreatedDetails?)
    -> DBTEAMLOGGovernancePolicyExportCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyExportCreatedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyExportCreatedDetailsToDB(object: DBXTeamLogGovernancePolicyExportCreatedDetails)
    -> DBTEAMLOGGovernancePolicyExportCreatedDetails {
    DBTEAMLOGGovernancePolicyExportCreatedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyExportCreatedTypeToDBOptional(object: DBXTeamLogGovernancePolicyExportCreatedType?)
    -> DBTEAMLOGGovernancePolicyExportCreatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyExportCreatedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyExportCreatedTypeToDB(object: DBXTeamLogGovernancePolicyExportCreatedType) -> DBTEAMLOGGovernancePolicyExportCreatedType {
    DBTEAMLOGGovernancePolicyExportCreatedType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyExportRemovedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyExportRemovedDetails?)
    -> DBTEAMLOGGovernancePolicyExportRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyExportRemovedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyExportRemovedDetailsToDB(object: DBXTeamLogGovernancePolicyExportRemovedDetails)
    -> DBTEAMLOGGovernancePolicyExportRemovedDetails {
    DBTEAMLOGGovernancePolicyExportRemovedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyExportRemovedTypeToDBOptional(object: DBXTeamLogGovernancePolicyExportRemovedType?)
    -> DBTEAMLOGGovernancePolicyExportRemovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyExportRemovedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyExportRemovedTypeToDB(object: DBXTeamLogGovernancePolicyExportRemovedType) -> DBTEAMLOGGovernancePolicyExportRemovedType {
    DBTEAMLOGGovernancePolicyExportRemovedType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyRemoveFoldersDetailsToDBOptional(object: DBXTeamLogGovernancePolicyRemoveFoldersDetails?)
    -> DBTEAMLOGGovernancePolicyRemoveFoldersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyRemoveFoldersDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyRemoveFoldersDetailsToDB(object: DBXTeamLogGovernancePolicyRemoveFoldersDetails)
    -> DBTEAMLOGGovernancePolicyRemoveFoldersDetails {
    DBTEAMLOGGovernancePolicyRemoveFoldersDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType),
        folders: object.folders,
        reason: object.reason
    )
}

func mapDBXTeamLogGovernancePolicyRemoveFoldersTypeToDBOptional(object: DBXTeamLogGovernancePolicyRemoveFoldersType?)
    -> DBTEAMLOGGovernancePolicyRemoveFoldersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyRemoveFoldersTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyRemoveFoldersTypeToDB(object: DBXTeamLogGovernancePolicyRemoveFoldersType) -> DBTEAMLOGGovernancePolicyRemoveFoldersType {
    DBTEAMLOGGovernancePolicyRemoveFoldersType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyReportCreatedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyReportCreatedDetails?)
    -> DBTEAMLOGGovernancePolicyReportCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyReportCreatedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyReportCreatedDetailsToDB(object: DBXTeamLogGovernancePolicyReportCreatedDetails)
    -> DBTEAMLOGGovernancePolicyReportCreatedDetails {
    DBTEAMLOGGovernancePolicyReportCreatedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType)
    )
}

func mapDBXTeamLogGovernancePolicyReportCreatedTypeToDBOptional(object: DBXTeamLogGovernancePolicyReportCreatedType?)
    -> DBTEAMLOGGovernancePolicyReportCreatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyReportCreatedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyReportCreatedTypeToDB(object: DBXTeamLogGovernancePolicyReportCreatedType) -> DBTEAMLOGGovernancePolicyReportCreatedType {
    DBTEAMLOGGovernancePolicyReportCreatedType(description_: object.description_)
}

func mapDBXTeamLogGovernancePolicyZipPartDownloadedDetailsToDBOptional(object: DBXTeamLogGovernancePolicyZipPartDownloadedDetails?)
    -> DBTEAMLOGGovernancePolicyZipPartDownloadedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyZipPartDownloadedDetailsToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyZipPartDownloadedDetailsToDB(object: DBXTeamLogGovernancePolicyZipPartDownloadedDetails)
    -> DBTEAMLOGGovernancePolicyZipPartDownloadedDetails {
    DBTEAMLOGGovernancePolicyZipPartDownloadedDetails(
        governancePolicyId: object.governancePolicyId,
        name: object.name,
        exportName: object.exportName,
        policyType: mapDBXTeamLogPolicyTypeToDBOptional(object: object.policyType),
        part: object.part
    )
}

func mapDBXTeamLogGovernancePolicyZipPartDownloadedTypeToDBOptional(object: DBXTeamLogGovernancePolicyZipPartDownloadedType?)
    -> DBTEAMLOGGovernancePolicyZipPartDownloadedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGovernancePolicyZipPartDownloadedTypeToDB(object: object)
}

func mapDBXTeamLogGovernancePolicyZipPartDownloadedTypeToDB(object: DBXTeamLogGovernancePolicyZipPartDownloadedType)
    -> DBTEAMLOGGovernancePolicyZipPartDownloadedType {
    DBTEAMLOGGovernancePolicyZipPartDownloadedType(description_: object.description_)
}

func mapDBXTeamLogGroupAddExternalIdDetailsToDBOptional(object: DBXTeamLogGroupAddExternalIdDetails?) -> DBTEAMLOGGroupAddExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupAddExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogGroupAddExternalIdDetailsToDB(object: DBXTeamLogGroupAddExternalIdDetails) -> DBTEAMLOGGroupAddExternalIdDetails {
    DBTEAMLOGGroupAddExternalIdDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogGroupAddExternalIdTypeToDBOptional(object: DBXTeamLogGroupAddExternalIdType?) -> DBTEAMLOGGroupAddExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupAddExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogGroupAddExternalIdTypeToDB(object: DBXTeamLogGroupAddExternalIdType) -> DBTEAMLOGGroupAddExternalIdType {
    DBTEAMLOGGroupAddExternalIdType(description_: object.description_)
}

func mapDBXTeamLogGroupAddMemberDetailsToDBOptional(object: DBXTeamLogGroupAddMemberDetails?) -> DBTEAMLOGGroupAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupAddMemberDetailsToDB(object: object)
}

func mapDBXTeamLogGroupAddMemberDetailsToDB(object: DBXTeamLogGroupAddMemberDetails) -> DBTEAMLOGGroupAddMemberDetails {
    DBTEAMLOGGroupAddMemberDetails(isGroupOwner: object.isGroupOwner)
}

func mapDBXTeamLogGroupAddMemberTypeToDBOptional(object: DBXTeamLogGroupAddMemberType?) -> DBTEAMLOGGroupAddMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupAddMemberTypeToDB(object: object)
}

func mapDBXTeamLogGroupAddMemberTypeToDB(object: DBXTeamLogGroupAddMemberType) -> DBTEAMLOGGroupAddMemberType {
    DBTEAMLOGGroupAddMemberType(description_: object.description_)
}

func mapDBXTeamLogGroupChangeExternalIdDetailsToDBOptional(object: DBXTeamLogGroupChangeExternalIdDetails?) -> DBTEAMLOGGroupChangeExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogGroupChangeExternalIdDetailsToDB(object: DBXTeamLogGroupChangeExternalIdDetails) -> DBTEAMLOGGroupChangeExternalIdDetails {
    DBTEAMLOGGroupChangeExternalIdDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogGroupChangeExternalIdTypeToDBOptional(object: DBXTeamLogGroupChangeExternalIdType?) -> DBTEAMLOGGroupChangeExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogGroupChangeExternalIdTypeToDB(object: DBXTeamLogGroupChangeExternalIdType) -> DBTEAMLOGGroupChangeExternalIdType {
    DBTEAMLOGGroupChangeExternalIdType(description_: object.description_)
}

func mapDBXTeamLogGroupChangeManagementTypeDetailsToDBOptional(object: DBXTeamLogGroupChangeManagementTypeDetails?)
    -> DBTEAMLOGGroupChangeManagementTypeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeManagementTypeDetailsToDB(object: object)
}

func mapDBXTeamLogGroupChangeManagementTypeDetailsToDB(object: DBXTeamLogGroupChangeManagementTypeDetails) -> DBTEAMLOGGroupChangeManagementTypeDetails {
    DBTEAMLOGGroupChangeManagementTypeDetails(
        dNewValue: mapDBXTeamCommonGroupManagementTypeToDB(object: object.newValue),
        previousValue: mapDBXTeamCommonGroupManagementTypeToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogGroupChangeManagementTypeTypeToDBOptional(object: DBXTeamLogGroupChangeManagementTypeType?) -> DBTEAMLOGGroupChangeManagementTypeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeManagementTypeTypeToDB(object: object)
}

func mapDBXTeamLogGroupChangeManagementTypeTypeToDB(object: DBXTeamLogGroupChangeManagementTypeType) -> DBTEAMLOGGroupChangeManagementTypeType {
    DBTEAMLOGGroupChangeManagementTypeType(description_: object.description_)
}

func mapDBXTeamLogGroupChangeMemberRoleDetailsToDBOptional(object: DBXTeamLogGroupChangeMemberRoleDetails?) -> DBTEAMLOGGroupChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeMemberRoleDetailsToDB(object: object)
}

func mapDBXTeamLogGroupChangeMemberRoleDetailsToDB(object: DBXTeamLogGroupChangeMemberRoleDetails) -> DBTEAMLOGGroupChangeMemberRoleDetails {
    DBTEAMLOGGroupChangeMemberRoleDetails(isGroupOwner: object.isGroupOwner)
}

func mapDBXTeamLogGroupChangeMemberRoleTypeToDBOptional(object: DBXTeamLogGroupChangeMemberRoleType?) -> DBTEAMLOGGroupChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupChangeMemberRoleTypeToDB(object: object)
}

func mapDBXTeamLogGroupChangeMemberRoleTypeToDB(object: DBXTeamLogGroupChangeMemberRoleType) -> DBTEAMLOGGroupChangeMemberRoleType {
    DBTEAMLOGGroupChangeMemberRoleType(description_: object.description_)
}

func mapDBXTeamLogGroupCreateDetailsToDBOptional(object: DBXTeamLogGroupCreateDetails?) -> DBTEAMLOGGroupCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupCreateDetailsToDB(object: object)
}

func mapDBXTeamLogGroupCreateDetailsToDB(object: DBXTeamLogGroupCreateDetails) -> DBTEAMLOGGroupCreateDetails {
    DBTEAMLOGGroupCreateDetails(isCompanyManaged: object.isCompanyManaged, joinPolicy: mapDBXTeamLogGroupJoinPolicyToDBOptional(object: object.joinPolicy))
}

func mapDBXTeamLogGroupCreateTypeToDBOptional(object: DBXTeamLogGroupCreateType?) -> DBTEAMLOGGroupCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupCreateTypeToDB(object: object)
}

func mapDBXTeamLogGroupCreateTypeToDB(object: DBXTeamLogGroupCreateType) -> DBTEAMLOGGroupCreateType {
    DBTEAMLOGGroupCreateType(description_: object.description_)
}

func mapDBXTeamLogGroupDeleteDetailsToDBOptional(object: DBXTeamLogGroupDeleteDetails?) -> DBTEAMLOGGroupDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogGroupDeleteDetailsToDB(object: DBXTeamLogGroupDeleteDetails) -> DBTEAMLOGGroupDeleteDetails {
    DBTEAMLOGGroupDeleteDetails(isCompanyManaged: object.isCompanyManaged)
}

func mapDBXTeamLogGroupDeleteTypeToDBOptional(object: DBXTeamLogGroupDeleteType?) -> DBTEAMLOGGroupDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupDeleteTypeToDB(object: object)
}

func mapDBXTeamLogGroupDeleteTypeToDB(object: DBXTeamLogGroupDeleteType) -> DBTEAMLOGGroupDeleteType {
    DBTEAMLOGGroupDeleteType(description_: object.description_)
}

func mapDBXTeamLogGroupDescriptionUpdatedDetailsToDBOptional(object: DBXTeamLogGroupDescriptionUpdatedDetails?) -> DBTEAMLOGGroupDescriptionUpdatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupDescriptionUpdatedDetailsToDB(object: object)
}

func mapDBXTeamLogGroupDescriptionUpdatedDetailsToDB(object: DBXTeamLogGroupDescriptionUpdatedDetails) -> DBTEAMLOGGroupDescriptionUpdatedDetails {
    DBTEAMLOGGroupDescriptionUpdatedDetails(default: ())
}

func mapDBXTeamLogGroupDescriptionUpdatedTypeToDBOptional(object: DBXTeamLogGroupDescriptionUpdatedType?) -> DBTEAMLOGGroupDescriptionUpdatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupDescriptionUpdatedTypeToDB(object: object)
}

func mapDBXTeamLogGroupDescriptionUpdatedTypeToDB(object: DBXTeamLogGroupDescriptionUpdatedType) -> DBTEAMLOGGroupDescriptionUpdatedType {
    DBTEAMLOGGroupDescriptionUpdatedType(description_: object.description_)
}

func mapDBXTeamLogGroupJoinPolicyToDBOptional(object: DBXTeamLogGroupJoinPolicy?) -> DBTEAMLOGGroupJoinPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupJoinPolicyToDB(object: object)
}

func mapDBXTeamLogGroupJoinPolicyToDB(object: DBXTeamLogGroupJoinPolicy) -> DBTEAMLOGGroupJoinPolicy {
    if object.asOpen != nil {
        return DBTEAMLOGGroupJoinPolicy(open: ())
    }
    if object.asRequestToJoin != nil {
        return DBTEAMLOGGroupJoinPolicy(requestToJoin: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGGroupJoinPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogGroupJoinPolicyUpdatedDetailsToDBOptional(object: DBXTeamLogGroupJoinPolicyUpdatedDetails?) -> DBTEAMLOGGroupJoinPolicyUpdatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupJoinPolicyUpdatedDetailsToDB(object: object)
}

func mapDBXTeamLogGroupJoinPolicyUpdatedDetailsToDB(object: DBXTeamLogGroupJoinPolicyUpdatedDetails) -> DBTEAMLOGGroupJoinPolicyUpdatedDetails {
    DBTEAMLOGGroupJoinPolicyUpdatedDetails(
        isCompanyManaged: object.isCompanyManaged,
        joinPolicy: mapDBXTeamLogGroupJoinPolicyToDBOptional(object: object.joinPolicy)
    )
}

func mapDBXTeamLogGroupJoinPolicyUpdatedTypeToDBOptional(object: DBXTeamLogGroupJoinPolicyUpdatedType?) -> DBTEAMLOGGroupJoinPolicyUpdatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupJoinPolicyUpdatedTypeToDB(object: object)
}

func mapDBXTeamLogGroupJoinPolicyUpdatedTypeToDB(object: DBXTeamLogGroupJoinPolicyUpdatedType) -> DBTEAMLOGGroupJoinPolicyUpdatedType {
    DBTEAMLOGGroupJoinPolicyUpdatedType(description_: object.description_)
}

func mapDBXTeamLogGroupLogInfoToDBOptional(object: DBXTeamLogGroupLogInfo?) -> DBTEAMLOGGroupLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupLogInfoToDB(object: object)
}

func mapDBXTeamLogGroupLogInfoToDB(object: DBXTeamLogGroupLogInfo) -> DBTEAMLOGGroupLogInfo {
    DBTEAMLOGGroupLogInfo(displayName: object.displayName, groupId: object.groupId, externalId: object.externalId)
}

func mapDBXTeamLogGroupMovedDetailsToDBOptional(object: DBXTeamLogGroupMovedDetails?) -> DBTEAMLOGGroupMovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupMovedDetailsToDB(object: object)
}

func mapDBXTeamLogGroupMovedDetailsToDB(object: DBXTeamLogGroupMovedDetails) -> DBTEAMLOGGroupMovedDetails {
    DBTEAMLOGGroupMovedDetails(default: ())
}

func mapDBXTeamLogGroupMovedTypeToDBOptional(object: DBXTeamLogGroupMovedType?) -> DBTEAMLOGGroupMovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupMovedTypeToDB(object: object)
}

func mapDBXTeamLogGroupMovedTypeToDB(object: DBXTeamLogGroupMovedType) -> DBTEAMLOGGroupMovedType {
    DBTEAMLOGGroupMovedType(description_: object.description_)
}

func mapDBXTeamLogGroupRemoveExternalIdDetailsToDBOptional(object: DBXTeamLogGroupRemoveExternalIdDetails?) -> DBTEAMLOGGroupRemoveExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRemoveExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogGroupRemoveExternalIdDetailsToDB(object: DBXTeamLogGroupRemoveExternalIdDetails) -> DBTEAMLOGGroupRemoveExternalIdDetails {
    DBTEAMLOGGroupRemoveExternalIdDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogGroupRemoveExternalIdTypeToDBOptional(object: DBXTeamLogGroupRemoveExternalIdType?) -> DBTEAMLOGGroupRemoveExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRemoveExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogGroupRemoveExternalIdTypeToDB(object: DBXTeamLogGroupRemoveExternalIdType) -> DBTEAMLOGGroupRemoveExternalIdType {
    DBTEAMLOGGroupRemoveExternalIdType(description_: object.description_)
}

func mapDBXTeamLogGroupRemoveMemberDetailsToDBOptional(object: DBXTeamLogGroupRemoveMemberDetails?) -> DBTEAMLOGGroupRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRemoveMemberDetailsToDB(object: object)
}

func mapDBXTeamLogGroupRemoveMemberDetailsToDB(object: DBXTeamLogGroupRemoveMemberDetails) -> DBTEAMLOGGroupRemoveMemberDetails {
    DBTEAMLOGGroupRemoveMemberDetails(default: ())
}

func mapDBXTeamLogGroupRemoveMemberTypeToDBOptional(object: DBXTeamLogGroupRemoveMemberType?) -> DBTEAMLOGGroupRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRemoveMemberTypeToDB(object: object)
}

func mapDBXTeamLogGroupRemoveMemberTypeToDB(object: DBXTeamLogGroupRemoveMemberType) -> DBTEAMLOGGroupRemoveMemberType {
    DBTEAMLOGGroupRemoveMemberType(description_: object.description_)
}

func mapDBXTeamLogGroupRenameDetailsToDBOptional(object: DBXTeamLogGroupRenameDetails?) -> DBTEAMLOGGroupRenameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRenameDetailsToDB(object: object)
}

func mapDBXTeamLogGroupRenameDetailsToDB(object: DBXTeamLogGroupRenameDetails) -> DBTEAMLOGGroupRenameDetails {
    DBTEAMLOGGroupRenameDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogGroupRenameTypeToDBOptional(object: DBXTeamLogGroupRenameType?) -> DBTEAMLOGGroupRenameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupRenameTypeToDB(object: object)
}

func mapDBXTeamLogGroupRenameTypeToDB(object: DBXTeamLogGroupRenameType) -> DBTEAMLOGGroupRenameType {
    DBTEAMLOGGroupRenameType(description_: object.description_)
}

func mapDBXTeamLogGroupUserManagementChangePolicyDetailsToDBOptional(object: DBXTeamLogGroupUserManagementChangePolicyDetails?)
    -> DBTEAMLOGGroupUserManagementChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupUserManagementChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogGroupUserManagementChangePolicyDetailsToDB(object: DBXTeamLogGroupUserManagementChangePolicyDetails)
    -> DBTEAMLOGGroupUserManagementChangePolicyDetails {
    DBTEAMLOGGroupUserManagementChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesGroupCreationToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesGroupCreationToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogGroupUserManagementChangePolicyTypeToDBOptional(object: DBXTeamLogGroupUserManagementChangePolicyType?)
    -> DBTEAMLOGGroupUserManagementChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGroupUserManagementChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogGroupUserManagementChangePolicyTypeToDB(object: DBXTeamLogGroupUserManagementChangePolicyType)
    -> DBTEAMLOGGroupUserManagementChangePolicyType {
    DBTEAMLOGGroupUserManagementChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogGuestAdminChangeStatusDetailsToDBOptional(object: DBXTeamLogGuestAdminChangeStatusDetails?) -> DBTEAMLOGGuestAdminChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminChangeStatusDetailsToDB(object: object)
}

func mapDBXTeamLogGuestAdminChangeStatusDetailsToDB(object: DBXTeamLogGuestAdminChangeStatusDetails) -> DBTEAMLOGGuestAdminChangeStatusDetails {
    DBTEAMLOGGuestAdminChangeStatusDetails(
        isGuest: object.isGuest,
        previousValue: mapDBXTeamLogTrustedTeamsRequestStateToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogTrustedTeamsRequestStateToDB(object: object.newValue),
        actionDetails: mapDBXTeamLogTrustedTeamsRequestActionToDB(object: object.actionDetails),
        guestTeamName: object.guestTeamName,
        hostTeamName: object.hostTeamName
    )
}

func mapDBXTeamLogGuestAdminChangeStatusTypeToDBOptional(object: DBXTeamLogGuestAdminChangeStatusType?) -> DBTEAMLOGGuestAdminChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminChangeStatusTypeToDB(object: object)
}

func mapDBXTeamLogGuestAdminChangeStatusTypeToDB(object: DBXTeamLogGuestAdminChangeStatusType) -> DBTEAMLOGGuestAdminChangeStatusType {
    DBTEAMLOGGuestAdminChangeStatusType(description_: object.description_)
}

func mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsDetailsToDBOptional(object: DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails?)
    -> DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsDetailsToDB(object: object)
}

func mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsDetailsToDB(object: DBXTeamLogGuestAdminSignedInViaTrustedTeamsDetails)
    -> DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails {
    DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails(teamName: object.teamName, trustedTeamName: object.trustedTeamName)
}

func mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsTypeToDBOptional(object: DBXTeamLogGuestAdminSignedInViaTrustedTeamsType?)
    -> DBTEAMLOGGuestAdminSignedInViaTrustedTeamsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsTypeToDB(object: object)
}

func mapDBXTeamLogGuestAdminSignedInViaTrustedTeamsTypeToDB(object: DBXTeamLogGuestAdminSignedInViaTrustedTeamsType)
    -> DBTEAMLOGGuestAdminSignedInViaTrustedTeamsType {
    DBTEAMLOGGuestAdminSignedInViaTrustedTeamsType(description_: object.description_)
}

func mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetailsToDBOptional(object: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails?)
    -> DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetailsToDB(object: object)
}

func mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetailsToDB(object: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsDetails)
    -> DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails {
    DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails(teamName: object.teamName, trustedTeamName: object.trustedTeamName)
}

func mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsTypeToDBOptional(object: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType?)
    -> DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsTypeToDB(object: object)
}

func mapDBXTeamLogGuestAdminSignedOutViaTrustedTeamsTypeToDB(object: DBXTeamLogGuestAdminSignedOutViaTrustedTeamsType)
    -> DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsType {
    DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsType(description_: object.description_)
}

func mapDBXTeamLogIdentifierTypeToDBOptional(object: DBXTeamLogIdentifierType?) -> DBTEAMLOGIdentifierType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIdentifierTypeToDB(object: object)
}

func mapDBXTeamLogIdentifierTypeToDB(object: DBXTeamLogIdentifierType) -> DBTEAMLOGIdentifierType {
    if object.asEmail != nil {
        return DBTEAMLOGIdentifierType(email: ())
    }
    if object.asFacebookProfileName != nil {
        return DBTEAMLOGIdentifierType(facebookProfileName: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGIdentifierType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogIntegrationConnectedDetailsToDBOptional(object: DBXTeamLogIntegrationConnectedDetails?) -> DBTEAMLOGIntegrationConnectedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationConnectedDetailsToDB(object: object)
}

func mapDBXTeamLogIntegrationConnectedDetailsToDB(object: DBXTeamLogIntegrationConnectedDetails) -> DBTEAMLOGIntegrationConnectedDetails {
    DBTEAMLOGIntegrationConnectedDetails(integrationName: object.integrationName)
}

func mapDBXTeamLogIntegrationConnectedTypeToDBOptional(object: DBXTeamLogIntegrationConnectedType?) -> DBTEAMLOGIntegrationConnectedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationConnectedTypeToDB(object: object)
}

func mapDBXTeamLogIntegrationConnectedTypeToDB(object: DBXTeamLogIntegrationConnectedType) -> DBTEAMLOGIntegrationConnectedType {
    DBTEAMLOGIntegrationConnectedType(description_: object.description_)
}

func mapDBXTeamLogIntegrationDisconnectedDetailsToDBOptional(object: DBXTeamLogIntegrationDisconnectedDetails?) -> DBTEAMLOGIntegrationDisconnectedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationDisconnectedDetailsToDB(object: object)
}

func mapDBXTeamLogIntegrationDisconnectedDetailsToDB(object: DBXTeamLogIntegrationDisconnectedDetails) -> DBTEAMLOGIntegrationDisconnectedDetails {
    DBTEAMLOGIntegrationDisconnectedDetails(integrationName: object.integrationName)
}

func mapDBXTeamLogIntegrationDisconnectedTypeToDBOptional(object: DBXTeamLogIntegrationDisconnectedType?) -> DBTEAMLOGIntegrationDisconnectedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationDisconnectedTypeToDB(object: object)
}

func mapDBXTeamLogIntegrationDisconnectedTypeToDB(object: DBXTeamLogIntegrationDisconnectedType) -> DBTEAMLOGIntegrationDisconnectedType {
    DBTEAMLOGIntegrationDisconnectedType(description_: object.description_)
}

func mapDBXTeamLogIntegrationPolicyToDBOptional(object: DBXTeamLogIntegrationPolicy?) -> DBTEAMLOGIntegrationPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationPolicyToDB(object: object)
}

func mapDBXTeamLogIntegrationPolicyToDB(object: DBXTeamLogIntegrationPolicy) -> DBTEAMLOGIntegrationPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGIntegrationPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGIntegrationPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGIntegrationPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogIntegrationPolicyChangedDetailsToDBOptional(object: DBXTeamLogIntegrationPolicyChangedDetails?) -> DBTEAMLOGIntegrationPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogIntegrationPolicyChangedDetailsToDB(object: DBXTeamLogIntegrationPolicyChangedDetails) -> DBTEAMLOGIntegrationPolicyChangedDetails {
    DBTEAMLOGIntegrationPolicyChangedDetails(
        integrationName: object.integrationName,
        dNewValue: mapDBXTeamLogIntegrationPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogIntegrationPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogIntegrationPolicyChangedTypeToDBOptional(object: DBXTeamLogIntegrationPolicyChangedType?) -> DBTEAMLOGIntegrationPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogIntegrationPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogIntegrationPolicyChangedTypeToDB(object: DBXTeamLogIntegrationPolicyChangedType) -> DBTEAMLOGIntegrationPolicyChangedType {
    DBTEAMLOGIntegrationPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyToDBOptional(object: DBXTeamLogInviteAcceptanceEmailPolicy?) -> DBTEAMLOGInviteAcceptanceEmailPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogInviteAcceptanceEmailPolicyToDB(object: object)
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyToDB(object: DBXTeamLogInviteAcceptanceEmailPolicy) -> DBTEAMLOGInviteAcceptanceEmailPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGInviteAcceptanceEmailPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGInviteAcceptanceEmailPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGInviteAcceptanceEmailPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyChangedDetailsToDBOptional(object: DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails?)
    -> DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogInviteAcceptanceEmailPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyChangedDetailsToDB(object: DBXTeamLogInviteAcceptanceEmailPolicyChangedDetails)
    -> DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails {
    DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails(
        dNewValue: mapDBXTeamLogInviteAcceptanceEmailPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogInviteAcceptanceEmailPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyChangedTypeToDBOptional(object: DBXTeamLogInviteAcceptanceEmailPolicyChangedType?)
    -> DBTEAMLOGInviteAcceptanceEmailPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogInviteAcceptanceEmailPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogInviteAcceptanceEmailPolicyChangedTypeToDB(object: DBXTeamLogInviteAcceptanceEmailPolicyChangedType)
    -> DBTEAMLOGInviteAcceptanceEmailPolicyChangedType {
    DBTEAMLOGInviteAcceptanceEmailPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogInviteMethodToDBOptional(object: DBXTeamLogInviteMethod?) -> DBTEAMLOGInviteMethod? {
    guard let object = object else { return nil }
    return mapDBXTeamLogInviteMethodToDB(object: object)
}

func mapDBXTeamLogInviteMethodToDB(object: DBXTeamLogInviteMethod) -> DBTEAMLOGInviteMethod {
    if object.asAutoApprove != nil {
        return DBTEAMLOGInviteMethod(autoApprove: ())
    }
    if object.asInviteLink != nil {
        return DBTEAMLOGInviteMethod(inviteLink: ())
    }
    if object.asMemberInvite != nil {
        return DBTEAMLOGInviteMethod(memberInvite: ())
    }
    if object.asMovedFromAnotherTeam != nil {
        return DBTEAMLOGInviteMethod(movedFromAnotherTeam: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGInviteMethod(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogJoinTeamDetailsToDBOptional(object: DBXTeamLogJoinTeamDetails?) -> DBTEAMLOGJoinTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogJoinTeamDetailsToDB(object: object)
}

func mapDBXTeamLogJoinTeamDetailsToDB(object: DBXTeamLogJoinTeamDetails) -> DBTEAMLOGJoinTeamDetails {
    DBTEAMLOGJoinTeamDetails(
        linkedApps: object.linkedApps.compactMap { mapDBXTeamLogUserLinkedAppLogInfoToDB(object: $0) },
        linkedDevices: object.linkedDevices.compactMap { mapDBXTeamLogLinkedDeviceLogInfoToDB(object: $0) },
        linkedSharedFolders: object.linkedSharedFolders.compactMap { mapDBXTeamLogFolderLogInfoToDB(object: $0) },
        wasLinkedAppsTruncated: object.wasLinkedAppsTruncated,
        wasLinkedDevicesTruncated: object.wasLinkedDevicesTruncated,
        wasLinkedSharedFoldersTruncated: object.wasLinkedSharedFoldersTruncated,
        hasLinkedApps: object.hasLinkedApps,
        hasLinkedDevices: object.hasLinkedDevices,
        hasLinkedSharedFolders: object.hasLinkedSharedFolders
    )
}

func mapDBXTeamLogLabelTypeToDBOptional(object: DBXTeamLogLabelType?) -> DBTEAMLOGLabelType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLabelTypeToDB(object: object)
}

func mapDBXTeamLogLabelTypeToDB(object: DBXTeamLogLabelType) -> DBTEAMLOGLabelType {
    if object.asPersonalInformation != nil {
        return DBTEAMLOGLabelType(personalInformation: ())
    }
    if object.asTestOnly != nil {
        return DBTEAMLOGLabelType(testOnly: ())
    }
    if object.asUserDefinedTag != nil {
        return DBTEAMLOGLabelType(userDefinedTag: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGLabelType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogLegacyDeviceSessionLogInfoToDBOptional(object: DBXTeamLogLegacyDeviceSessionLogInfo?) -> DBTEAMLOGLegacyDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegacyDeviceSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogLegacyDeviceSessionLogInfoToDB(object: DBXTeamLogLegacyDeviceSessionLogInfo) -> DBTEAMLOGLegacyDeviceSessionLogInfo {
    DBTEAMLOGLegacyDeviceSessionLogInfo(
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBXTeamLogSessionLogInfoToDBOptional(object: object.sessionInfo),
        displayName: object.displayName,
        isEmmManaged: object.isEmmManaged,
        platform: object.platform,
        macAddress: object.macAddress,
        osVersion: object.osVersion,
        deviceType: object.deviceType,
        clientVersion: object.clientVersion,
        legacyUniqId: object.legacyUniqId
    )
}

func mapDBXTeamLogLegalHoldsActivateAHoldDetailsToDBOptional(object: DBXTeamLogLegalHoldsActivateAHoldDetails?) -> DBTEAMLOGLegalHoldsActivateAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsActivateAHoldDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsActivateAHoldDetailsToDB(object: DBXTeamLogLegalHoldsActivateAHoldDetails) -> DBTEAMLOGLegalHoldsActivateAHoldDetails {
    DBTEAMLOGLegalHoldsActivateAHoldDetails(legalHoldId: object.legalHoldId, name: object.name, startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogLegalHoldsActivateAHoldTypeToDBOptional(object: DBXTeamLogLegalHoldsActivateAHoldType?) -> DBTEAMLOGLegalHoldsActivateAHoldType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsActivateAHoldTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsActivateAHoldTypeToDB(object: DBXTeamLogLegalHoldsActivateAHoldType) -> DBTEAMLOGLegalHoldsActivateAHoldType {
    DBTEAMLOGLegalHoldsActivateAHoldType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsAddMembersDetailsToDBOptional(object: DBXTeamLogLegalHoldsAddMembersDetails?) -> DBTEAMLOGLegalHoldsAddMembersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsAddMembersDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsAddMembersDetailsToDB(object: DBXTeamLogLegalHoldsAddMembersDetails) -> DBTEAMLOGLegalHoldsAddMembersDetails {
    DBTEAMLOGLegalHoldsAddMembersDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBXTeamLogLegalHoldsAddMembersTypeToDBOptional(object: DBXTeamLogLegalHoldsAddMembersType?) -> DBTEAMLOGLegalHoldsAddMembersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsAddMembersTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsAddMembersTypeToDB(object: DBXTeamLogLegalHoldsAddMembersType) -> DBTEAMLOGLegalHoldsAddMembersType {
    DBTEAMLOGLegalHoldsAddMembersType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsChangeHoldDetailsDetailsToDBOptional(object: DBXTeamLogLegalHoldsChangeHoldDetailsDetails?)
    -> DBTEAMLOGLegalHoldsChangeHoldDetailsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsChangeHoldDetailsDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsChangeHoldDetailsDetailsToDB(object: DBXTeamLogLegalHoldsChangeHoldDetailsDetails) -> DBTEAMLOGLegalHoldsChangeHoldDetailsDetails {
    DBTEAMLOGLegalHoldsChangeHoldDetailsDetails(
        legalHoldId: object.legalHoldId,
        name: object.name,
        previousValue: object.previousValue,
        dNewValue: object.newValue
    )
}

func mapDBXTeamLogLegalHoldsChangeHoldDetailsTypeToDBOptional(object: DBXTeamLogLegalHoldsChangeHoldDetailsType?) -> DBTEAMLOGLegalHoldsChangeHoldDetailsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsChangeHoldDetailsTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsChangeHoldDetailsTypeToDB(object: DBXTeamLogLegalHoldsChangeHoldDetailsType) -> DBTEAMLOGLegalHoldsChangeHoldDetailsType {
    DBTEAMLOGLegalHoldsChangeHoldDetailsType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsChangeHoldNameDetailsToDBOptional(object: DBXTeamLogLegalHoldsChangeHoldNameDetails?) -> DBTEAMLOGLegalHoldsChangeHoldNameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsChangeHoldNameDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsChangeHoldNameDetailsToDB(object: DBXTeamLogLegalHoldsChangeHoldNameDetails) -> DBTEAMLOGLegalHoldsChangeHoldNameDetails {
    DBTEAMLOGLegalHoldsChangeHoldNameDetails(legalHoldId: object.legalHoldId, previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogLegalHoldsChangeHoldNameTypeToDBOptional(object: DBXTeamLogLegalHoldsChangeHoldNameType?) -> DBTEAMLOGLegalHoldsChangeHoldNameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsChangeHoldNameTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsChangeHoldNameTypeToDB(object: DBXTeamLogLegalHoldsChangeHoldNameType) -> DBTEAMLOGLegalHoldsChangeHoldNameType {
    DBTEAMLOGLegalHoldsChangeHoldNameType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsExportAHoldDetailsToDBOptional(object: DBXTeamLogLegalHoldsExportAHoldDetails?) -> DBTEAMLOGLegalHoldsExportAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportAHoldDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportAHoldDetailsToDB(object: DBXTeamLogLegalHoldsExportAHoldDetails) -> DBTEAMLOGLegalHoldsExportAHoldDetails {
    DBTEAMLOGLegalHoldsExportAHoldDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBXTeamLogLegalHoldsExportAHoldTypeToDBOptional(object: DBXTeamLogLegalHoldsExportAHoldType?) -> DBTEAMLOGLegalHoldsExportAHoldType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportAHoldTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportAHoldTypeToDB(object: DBXTeamLogLegalHoldsExportAHoldType) -> DBTEAMLOGLegalHoldsExportAHoldType {
    DBTEAMLOGLegalHoldsExportAHoldType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsExportCancelledDetailsToDBOptional(object: DBXTeamLogLegalHoldsExportCancelledDetails?)
    -> DBTEAMLOGLegalHoldsExportCancelledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportCancelledDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportCancelledDetailsToDB(object: DBXTeamLogLegalHoldsExportCancelledDetails) -> DBTEAMLOGLegalHoldsExportCancelledDetails {
    DBTEAMLOGLegalHoldsExportCancelledDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBXTeamLogLegalHoldsExportCancelledTypeToDBOptional(object: DBXTeamLogLegalHoldsExportCancelledType?) -> DBTEAMLOGLegalHoldsExportCancelledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportCancelledTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportCancelledTypeToDB(object: DBXTeamLogLegalHoldsExportCancelledType) -> DBTEAMLOGLegalHoldsExportCancelledType {
    DBTEAMLOGLegalHoldsExportCancelledType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsExportDownloadedDetailsToDBOptional(object: DBXTeamLogLegalHoldsExportDownloadedDetails?)
    -> DBTEAMLOGLegalHoldsExportDownloadedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportDownloadedDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportDownloadedDetailsToDB(object: DBXTeamLogLegalHoldsExportDownloadedDetails) -> DBTEAMLOGLegalHoldsExportDownloadedDetails {
    DBTEAMLOGLegalHoldsExportDownloadedDetails(
        legalHoldId: object.legalHoldId,
        name: object.name,
        exportName: object.exportName,
        part: object.part,
        fileName: object.fileName
    )
}

func mapDBXTeamLogLegalHoldsExportDownloadedTypeToDBOptional(object: DBXTeamLogLegalHoldsExportDownloadedType?) -> DBTEAMLOGLegalHoldsExportDownloadedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportDownloadedTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportDownloadedTypeToDB(object: DBXTeamLogLegalHoldsExportDownloadedType) -> DBTEAMLOGLegalHoldsExportDownloadedType {
    DBTEAMLOGLegalHoldsExportDownloadedType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsExportRemovedDetailsToDBOptional(object: DBXTeamLogLegalHoldsExportRemovedDetails?) -> DBTEAMLOGLegalHoldsExportRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportRemovedDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportRemovedDetailsToDB(object: DBXTeamLogLegalHoldsExportRemovedDetails) -> DBTEAMLOGLegalHoldsExportRemovedDetails {
    DBTEAMLOGLegalHoldsExportRemovedDetails(legalHoldId: object.legalHoldId, name: object.name, exportName: object.exportName)
}

func mapDBXTeamLogLegalHoldsExportRemovedTypeToDBOptional(object: DBXTeamLogLegalHoldsExportRemovedType?) -> DBTEAMLOGLegalHoldsExportRemovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsExportRemovedTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsExportRemovedTypeToDB(object: DBXTeamLogLegalHoldsExportRemovedType) -> DBTEAMLOGLegalHoldsExportRemovedType {
    DBTEAMLOGLegalHoldsExportRemovedType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsReleaseAHoldDetailsToDBOptional(object: DBXTeamLogLegalHoldsReleaseAHoldDetails?) -> DBTEAMLOGLegalHoldsReleaseAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsReleaseAHoldDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsReleaseAHoldDetailsToDB(object: DBXTeamLogLegalHoldsReleaseAHoldDetails) -> DBTEAMLOGLegalHoldsReleaseAHoldDetails {
    DBTEAMLOGLegalHoldsReleaseAHoldDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBXTeamLogLegalHoldsReleaseAHoldTypeToDBOptional(object: DBXTeamLogLegalHoldsReleaseAHoldType?) -> DBTEAMLOGLegalHoldsReleaseAHoldType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsReleaseAHoldTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsReleaseAHoldTypeToDB(object: DBXTeamLogLegalHoldsReleaseAHoldType) -> DBTEAMLOGLegalHoldsReleaseAHoldType {
    DBTEAMLOGLegalHoldsReleaseAHoldType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsRemoveMembersDetailsToDBOptional(object: DBXTeamLogLegalHoldsRemoveMembersDetails?) -> DBTEAMLOGLegalHoldsRemoveMembersDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsRemoveMembersDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsRemoveMembersDetailsToDB(object: DBXTeamLogLegalHoldsRemoveMembersDetails) -> DBTEAMLOGLegalHoldsRemoveMembersDetails {
    DBTEAMLOGLegalHoldsRemoveMembersDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBXTeamLogLegalHoldsRemoveMembersTypeToDBOptional(object: DBXTeamLogLegalHoldsRemoveMembersType?) -> DBTEAMLOGLegalHoldsRemoveMembersType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsRemoveMembersTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsRemoveMembersTypeToDB(object: DBXTeamLogLegalHoldsRemoveMembersType) -> DBTEAMLOGLegalHoldsRemoveMembersType {
    DBTEAMLOGLegalHoldsRemoveMembersType(description_: object.description_)
}

func mapDBXTeamLogLegalHoldsReportAHoldDetailsToDBOptional(object: DBXTeamLogLegalHoldsReportAHoldDetails?) -> DBTEAMLOGLegalHoldsReportAHoldDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsReportAHoldDetailsToDB(object: object)
}

func mapDBXTeamLogLegalHoldsReportAHoldDetailsToDB(object: DBXTeamLogLegalHoldsReportAHoldDetails) -> DBTEAMLOGLegalHoldsReportAHoldDetails {
    DBTEAMLOGLegalHoldsReportAHoldDetails(legalHoldId: object.legalHoldId, name: object.name)
}

func mapDBXTeamLogLegalHoldsReportAHoldTypeToDBOptional(object: DBXTeamLogLegalHoldsReportAHoldType?) -> DBTEAMLOGLegalHoldsReportAHoldType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLegalHoldsReportAHoldTypeToDB(object: object)
}

func mapDBXTeamLogLegalHoldsReportAHoldTypeToDB(object: DBXTeamLogLegalHoldsReportAHoldType) -> DBTEAMLOGLegalHoldsReportAHoldType {
    DBTEAMLOGLegalHoldsReportAHoldType(description_: object.description_)
}

func mapDBXTeamLogLinkedDeviceLogInfoToDBOptional(object: DBXTeamLogLinkedDeviceLogInfo?) -> DBTEAMLOGLinkedDeviceLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLinkedDeviceLogInfoToDB(object: object)
}

func mapDBXTeamLogLinkedDeviceLogInfoToDB(object: DBXTeamLogLinkedDeviceLogInfo) -> DBTEAMLOGLinkedDeviceLogInfo {
    if let object = object.asDesktopDeviceSession {
        let desktopDeviceSession = mapDBXTeamLogDesktopDeviceSessionLogInfoToDB(object: object.desktopDeviceSession)
        return DBTEAMLOGLinkedDeviceLogInfo(desktopDeviceSession: desktopDeviceSession)
    }
    if let object = object.asLegacyDeviceSession {
        let legacyDeviceSession = mapDBXTeamLogLegacyDeviceSessionLogInfoToDB(object: object.legacyDeviceSession)
        return DBTEAMLOGLinkedDeviceLogInfo(legacyDeviceSession: legacyDeviceSession)
    }
    if let object = object.asMobileDeviceSession {
        let mobileDeviceSession = mapDBXTeamLogMobileDeviceSessionLogInfoToDB(object: object.mobileDeviceSession)
        return DBTEAMLOGLinkedDeviceLogInfo(mobileDeviceSession: mobileDeviceSession)
    }
    if let object = object.asWebDeviceSession {
        let webDeviceSession = mapDBXTeamLogWebDeviceSessionLogInfoToDB(object: object.webDeviceSession)
        return DBTEAMLOGLinkedDeviceLogInfo(webDeviceSession: webDeviceSession)
    }
    if object.asOther != nil {
        return DBTEAMLOGLinkedDeviceLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogLockStatusToDBOptional(object: DBXTeamLogLockStatus?) -> DBTEAMLOGLockStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLockStatusToDB(object: object)
}

func mapDBXTeamLogLockStatusToDB(object: DBXTeamLogLockStatus) -> DBTEAMLOGLockStatus {
    if object.asLocked != nil {
        return DBTEAMLOGLockStatus(locked: ())
    }
    if object.asUnlocked != nil {
        return DBTEAMLOGLockStatus(unlocked: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGLockStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogLoginFailDetailsToDBOptional(object: DBXTeamLogLoginFailDetails?) -> DBTEAMLOGLoginFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLoginFailDetailsToDB(object: object)
}

func mapDBXTeamLogLoginFailDetailsToDB(object: DBXTeamLogLoginFailDetails) -> DBTEAMLOGLoginFailDetails {
    DBTEAMLOGLoginFailDetails(
        loginMethod: mapDBXTeamLogLoginMethodToDB(object: object.loginMethod),
        errorDetails: mapDBXTeamLogFailureDetailsLogInfoToDB(object: object.errorDetails),
        isEmmManaged: object.isEmmManaged
    )
}

func mapDBXTeamLogLoginFailTypeToDBOptional(object: DBXTeamLogLoginFailType?) -> DBTEAMLOGLoginFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLoginFailTypeToDB(object: object)
}

func mapDBXTeamLogLoginFailTypeToDB(object: DBXTeamLogLoginFailType) -> DBTEAMLOGLoginFailType {
    DBTEAMLOGLoginFailType(description_: object.description_)
}

func mapDBXTeamLogLoginMethodToDBOptional(object: DBXTeamLogLoginMethod?) -> DBTEAMLOGLoginMethod? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLoginMethodToDB(object: object)
}

func mapDBXTeamLogLoginMethodToDB(object: DBXTeamLogLoginMethod) -> DBTEAMLOGLoginMethod {
    if object.asAppleOauth != nil {
        return DBTEAMLOGLoginMethod(appleOauth: ())
    }
    if object.asFirstPartyTokenExchange != nil {
        return DBTEAMLOGLoginMethod(firstPartyTokenExchange: ())
    }
    if object.asGoogleOauth != nil {
        return DBTEAMLOGLoginMethod(googleOauth: ())
    }
    if object.asLenovoOauth != nil {
        return DBTEAMLOGLoginMethod(lenovoOauth: ())
    }
    if object.asPassword != nil {
        return DBTEAMLOGLoginMethod(password: ())
    }
    if object.asQrCode != nil {
        return DBTEAMLOGLoginMethod(qrCode: ())
    }
    if object.asSaml != nil {
        return DBTEAMLOGLoginMethod(saml: ())
    }
    if object.asTwoFactorAuthentication != nil {
        return DBTEAMLOGLoginMethod(twoFactorAuthentication: ())
    }
    if object.asWebSession != nil {
        return DBTEAMLOGLoginMethod(webSession: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGLoginMethod(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogLoginSuccessDetailsToDBOptional(object: DBXTeamLogLoginSuccessDetails?) -> DBTEAMLOGLoginSuccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLoginSuccessDetailsToDB(object: object)
}

func mapDBXTeamLogLoginSuccessDetailsToDB(object: DBXTeamLogLoginSuccessDetails) -> DBTEAMLOGLoginSuccessDetails {
    DBTEAMLOGLoginSuccessDetails(loginMethod: mapDBXTeamLogLoginMethodToDB(object: object.loginMethod), isEmmManaged: object.isEmmManaged)
}

func mapDBXTeamLogLoginSuccessTypeToDBOptional(object: DBXTeamLogLoginSuccessType?) -> DBTEAMLOGLoginSuccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLoginSuccessTypeToDB(object: object)
}

func mapDBXTeamLogLoginSuccessTypeToDB(object: DBXTeamLogLoginSuccessType) -> DBTEAMLOGLoginSuccessType {
    DBTEAMLOGLoginSuccessType(description_: object.description_)
}

func mapDBXTeamLogLogoutDetailsToDBOptional(object: DBXTeamLogLogoutDetails?) -> DBTEAMLOGLogoutDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLogoutDetailsToDB(object: object)
}

func mapDBXTeamLogLogoutDetailsToDB(object: DBXTeamLogLogoutDetails) -> DBTEAMLOGLogoutDetails {
    DBTEAMLOGLogoutDetails(loginId: object.loginId)
}

func mapDBXTeamLogLogoutTypeToDBOptional(object: DBXTeamLogLogoutType?) -> DBTEAMLOGLogoutType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogLogoutTypeToDB(object: object)
}

func mapDBXTeamLogLogoutTypeToDB(object: DBXTeamLogLogoutType) -> DBTEAMLOGLogoutType {
    DBTEAMLOGLogoutType(description_: object.description_)
}

func mapDBXTeamLogMemberAddExternalIdDetailsToDBOptional(object: DBXTeamLogMemberAddExternalIdDetails?) -> DBTEAMLOGMemberAddExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberAddExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogMemberAddExternalIdDetailsToDB(object: DBXTeamLogMemberAddExternalIdDetails) -> DBTEAMLOGMemberAddExternalIdDetails {
    DBTEAMLOGMemberAddExternalIdDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogMemberAddExternalIdTypeToDBOptional(object: DBXTeamLogMemberAddExternalIdType?) -> DBTEAMLOGMemberAddExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberAddExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogMemberAddExternalIdTypeToDB(object: DBXTeamLogMemberAddExternalIdType) -> DBTEAMLOGMemberAddExternalIdType {
    DBTEAMLOGMemberAddExternalIdType(description_: object.description_)
}

func mapDBXTeamLogMemberAddNameDetailsToDBOptional(object: DBXTeamLogMemberAddNameDetails?) -> DBTEAMLOGMemberAddNameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberAddNameDetailsToDB(object: object)
}

func mapDBXTeamLogMemberAddNameDetailsToDB(object: DBXTeamLogMemberAddNameDetails) -> DBTEAMLOGMemberAddNameDetails {
    DBTEAMLOGMemberAddNameDetails(dNewValue: mapDBXTeamLogUserNameLogInfoToDB(object: object.newValue))
}

func mapDBXTeamLogMemberAddNameTypeToDBOptional(object: DBXTeamLogMemberAddNameType?) -> DBTEAMLOGMemberAddNameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberAddNameTypeToDB(object: object)
}

func mapDBXTeamLogMemberAddNameTypeToDB(object: DBXTeamLogMemberAddNameType) -> DBTEAMLOGMemberAddNameType {
    DBTEAMLOGMemberAddNameType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeAdminRoleDetailsToDBOptional(object: DBXTeamLogMemberChangeAdminRoleDetails?) -> DBTEAMLOGMemberChangeAdminRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeAdminRoleDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeAdminRoleDetailsToDB(object: DBXTeamLogMemberChangeAdminRoleDetails) -> DBTEAMLOGMemberChangeAdminRoleDetails {
    DBTEAMLOGMemberChangeAdminRoleDetails(
        dNewValue: mapDBXTeamLogAdminRoleToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogAdminRoleToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberChangeAdminRoleTypeToDBOptional(object: DBXTeamLogMemberChangeAdminRoleType?) -> DBTEAMLOGMemberChangeAdminRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeAdminRoleTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeAdminRoleTypeToDB(object: DBXTeamLogMemberChangeAdminRoleType) -> DBTEAMLOGMemberChangeAdminRoleType {
    DBTEAMLOGMemberChangeAdminRoleType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeEmailDetailsToDBOptional(object: DBXTeamLogMemberChangeEmailDetails?) -> DBTEAMLOGMemberChangeEmailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeEmailDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeEmailDetailsToDB(object: DBXTeamLogMemberChangeEmailDetails) -> DBTEAMLOGMemberChangeEmailDetails {
    DBTEAMLOGMemberChangeEmailDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogMemberChangeEmailTypeToDBOptional(object: DBXTeamLogMemberChangeEmailType?) -> DBTEAMLOGMemberChangeEmailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeEmailTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeEmailTypeToDB(object: DBXTeamLogMemberChangeEmailType) -> DBTEAMLOGMemberChangeEmailType {
    DBTEAMLOGMemberChangeEmailType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeExternalIdDetailsToDBOptional(object: DBXTeamLogMemberChangeExternalIdDetails?) -> DBTEAMLOGMemberChangeExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeExternalIdDetailsToDB(object: DBXTeamLogMemberChangeExternalIdDetails) -> DBTEAMLOGMemberChangeExternalIdDetails {
    DBTEAMLOGMemberChangeExternalIdDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogMemberChangeExternalIdTypeToDBOptional(object: DBXTeamLogMemberChangeExternalIdType?) -> DBTEAMLOGMemberChangeExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeExternalIdTypeToDB(object: DBXTeamLogMemberChangeExternalIdType) -> DBTEAMLOGMemberChangeExternalIdType {
    DBTEAMLOGMemberChangeExternalIdType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeMembershipTypeDetailsToDBOptional(object: DBXTeamLogMemberChangeMembershipTypeDetails?)
    -> DBTEAMLOGMemberChangeMembershipTypeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeMembershipTypeDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeMembershipTypeDetailsToDB(object: DBXTeamLogMemberChangeMembershipTypeDetails) -> DBTEAMLOGMemberChangeMembershipTypeDetails {
    DBTEAMLOGMemberChangeMembershipTypeDetails(
        prevValue: mapDBXTeamLogTeamMembershipTypeToDB(object: object.prevValue),
        dNewValue: mapDBXTeamLogTeamMembershipTypeToDB(object: object.newValue)
    )
}

func mapDBXTeamLogMemberChangeMembershipTypeTypeToDBOptional(object: DBXTeamLogMemberChangeMembershipTypeType?) -> DBTEAMLOGMemberChangeMembershipTypeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeMembershipTypeTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeMembershipTypeTypeToDB(object: DBXTeamLogMemberChangeMembershipTypeType) -> DBTEAMLOGMemberChangeMembershipTypeType {
    DBTEAMLOGMemberChangeMembershipTypeType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeNameDetailsToDBOptional(object: DBXTeamLogMemberChangeNameDetails?) -> DBTEAMLOGMemberChangeNameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeNameDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeNameDetailsToDB(object: DBXTeamLogMemberChangeNameDetails) -> DBTEAMLOGMemberChangeNameDetails {
    DBTEAMLOGMemberChangeNameDetails(
        dNewValue: mapDBXTeamLogUserNameLogInfoToDB(object: object.newValue),
        previousValue: mapDBXTeamLogUserNameLogInfoToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberChangeNameTypeToDBOptional(object: DBXTeamLogMemberChangeNameType?) -> DBTEAMLOGMemberChangeNameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeNameTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeNameTypeToDB(object: DBXTeamLogMemberChangeNameType) -> DBTEAMLOGMemberChangeNameType {
    DBTEAMLOGMemberChangeNameType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeResellerRoleDetailsToDBOptional(object: DBXTeamLogMemberChangeResellerRoleDetails?) -> DBTEAMLOGMemberChangeResellerRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeResellerRoleDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeResellerRoleDetailsToDB(object: DBXTeamLogMemberChangeResellerRoleDetails) -> DBTEAMLOGMemberChangeResellerRoleDetails {
    DBTEAMLOGMemberChangeResellerRoleDetails(
        dNewValue: mapDBXTeamLogResellerRoleToDB(object: object.newValue),
        previousValue: mapDBXTeamLogResellerRoleToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberChangeResellerRoleTypeToDBOptional(object: DBXTeamLogMemberChangeResellerRoleType?) -> DBTEAMLOGMemberChangeResellerRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeResellerRoleTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeResellerRoleTypeToDB(object: DBXTeamLogMemberChangeResellerRoleType) -> DBTEAMLOGMemberChangeResellerRoleType {
    DBTEAMLOGMemberChangeResellerRoleType(description_: object.description_)
}

func mapDBXTeamLogMemberChangeStatusDetailsToDBOptional(object: DBXTeamLogMemberChangeStatusDetails?) -> DBTEAMLOGMemberChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeStatusDetailsToDB(object: object)
}

func mapDBXTeamLogMemberChangeStatusDetailsToDB(object: DBXTeamLogMemberChangeStatusDetails) -> DBTEAMLOGMemberChangeStatusDetails {
    DBTEAMLOGMemberChangeStatusDetails(
        dNewValue: mapDBXTeamLogMemberStatusToDB(object: object.newValue),
        previousValue: mapDBXTeamLogMemberStatusToDBOptional(object: object.previousValue),
        action: mapDBXTeamLogActionDetailsToDBOptional(object: object.action),
        dNewTeam: object.newTeam,
        previousTeam: object.previousTeam
    )
}

func mapDBXTeamLogMemberChangeStatusTypeToDBOptional(object: DBXTeamLogMemberChangeStatusType?) -> DBTEAMLOGMemberChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberChangeStatusTypeToDB(object: object)
}

func mapDBXTeamLogMemberChangeStatusTypeToDB(object: DBXTeamLogMemberChangeStatusType) -> DBTEAMLOGMemberChangeStatusType {
    DBTEAMLOGMemberChangeStatusType(description_: object.description_)
}

func mapDBXTeamLogMemberDeleteManualContactsDetailsToDBOptional(object: DBXTeamLogMemberDeleteManualContactsDetails?)
    -> DBTEAMLOGMemberDeleteManualContactsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberDeleteManualContactsDetailsToDB(object: object)
}

func mapDBXTeamLogMemberDeleteManualContactsDetailsToDB(object: DBXTeamLogMemberDeleteManualContactsDetails) -> DBTEAMLOGMemberDeleteManualContactsDetails {
    DBTEAMLOGMemberDeleteManualContactsDetails(default: ())
}

func mapDBXTeamLogMemberDeleteManualContactsTypeToDBOptional(object: DBXTeamLogMemberDeleteManualContactsType?) -> DBTEAMLOGMemberDeleteManualContactsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberDeleteManualContactsTypeToDB(object: object)
}

func mapDBXTeamLogMemberDeleteManualContactsTypeToDB(object: DBXTeamLogMemberDeleteManualContactsType) -> DBTEAMLOGMemberDeleteManualContactsType {
    DBTEAMLOGMemberDeleteManualContactsType(description_: object.description_)
}

func mapDBXTeamLogMemberDeleteProfilePhotoDetailsToDBOptional(object: DBXTeamLogMemberDeleteProfilePhotoDetails?) -> DBTEAMLOGMemberDeleteProfilePhotoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberDeleteProfilePhotoDetailsToDB(object: object)
}

func mapDBXTeamLogMemberDeleteProfilePhotoDetailsToDB(object: DBXTeamLogMemberDeleteProfilePhotoDetails) -> DBTEAMLOGMemberDeleteProfilePhotoDetails {
    DBTEAMLOGMemberDeleteProfilePhotoDetails(default: ())
}

func mapDBXTeamLogMemberDeleteProfilePhotoTypeToDBOptional(object: DBXTeamLogMemberDeleteProfilePhotoType?) -> DBTEAMLOGMemberDeleteProfilePhotoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberDeleteProfilePhotoTypeToDB(object: object)
}

func mapDBXTeamLogMemberDeleteProfilePhotoTypeToDB(object: DBXTeamLogMemberDeleteProfilePhotoType) -> DBTEAMLOGMemberDeleteProfilePhotoType {
    DBTEAMLOGMemberDeleteProfilePhotoType(description_: object.description_)
}

func mapDBXTeamLogMemberPermanentlyDeleteAccountContentsDetailsToDBOptional(object: DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails?)
    -> DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberPermanentlyDeleteAccountContentsDetailsToDB(object: object)
}

func mapDBXTeamLogMemberPermanentlyDeleteAccountContentsDetailsToDB(object: DBXTeamLogMemberPermanentlyDeleteAccountContentsDetails)
    -> DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails(default: ())
}

func mapDBXTeamLogMemberPermanentlyDeleteAccountContentsTypeToDBOptional(object: DBXTeamLogMemberPermanentlyDeleteAccountContentsType?)
    -> DBTEAMLOGMemberPermanentlyDeleteAccountContentsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberPermanentlyDeleteAccountContentsTypeToDB(object: object)
}

func mapDBXTeamLogMemberPermanentlyDeleteAccountContentsTypeToDB(object: DBXTeamLogMemberPermanentlyDeleteAccountContentsType)
    -> DBTEAMLOGMemberPermanentlyDeleteAccountContentsType {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsType(description_: object.description_)
}

func mapDBXTeamLogMemberRemoveActionTypeToDBOptional(object: DBXTeamLogMemberRemoveActionType?) -> DBTEAMLOGMemberRemoveActionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRemoveActionTypeToDB(object: object)
}

func mapDBXTeamLogMemberRemoveActionTypeToDB(object: DBXTeamLogMemberRemoveActionType) -> DBTEAMLOGMemberRemoveActionType {
    if object.asDelete != nil {
        return DBTEAMLOGMemberRemoveActionType(delete_: ())
    }
    if object.asLeave != nil {
        return DBTEAMLOGMemberRemoveActionType(leave: ())
    }
    if object.asOffboard != nil {
        return DBTEAMLOGMemberRemoveActionType(offboard: ())
    }
    if object.asOffboardAndRetainTeamFolders != nil {
        return DBTEAMLOGMemberRemoveActionType(offboardAndRetainTeamFolders: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMemberRemoveActionType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMemberRemoveExternalIdDetailsToDBOptional(object: DBXTeamLogMemberRemoveExternalIdDetails?) -> DBTEAMLOGMemberRemoveExternalIdDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRemoveExternalIdDetailsToDB(object: object)
}

func mapDBXTeamLogMemberRemoveExternalIdDetailsToDB(object: DBXTeamLogMemberRemoveExternalIdDetails) -> DBTEAMLOGMemberRemoveExternalIdDetails {
    DBTEAMLOGMemberRemoveExternalIdDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogMemberRemoveExternalIdTypeToDBOptional(object: DBXTeamLogMemberRemoveExternalIdType?) -> DBTEAMLOGMemberRemoveExternalIdType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRemoveExternalIdTypeToDB(object: object)
}

func mapDBXTeamLogMemberRemoveExternalIdTypeToDB(object: DBXTeamLogMemberRemoveExternalIdType) -> DBTEAMLOGMemberRemoveExternalIdType {
    DBTEAMLOGMemberRemoveExternalIdType(description_: object.description_)
}

func mapDBXTeamLogMemberRequestsChangePolicyDetailsToDBOptional(object: DBXTeamLogMemberRequestsChangePolicyDetails?)
    -> DBTEAMLOGMemberRequestsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRequestsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogMemberRequestsChangePolicyDetailsToDB(object: DBXTeamLogMemberRequestsChangePolicyDetails) -> DBTEAMLOGMemberRequestsChangePolicyDetails {
    DBTEAMLOGMemberRequestsChangePolicyDetails(
        dNewValue: mapDBXTeamLogMemberRequestsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogMemberRequestsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberRequestsChangePolicyTypeToDBOptional(object: DBXTeamLogMemberRequestsChangePolicyType?) -> DBTEAMLOGMemberRequestsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRequestsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogMemberRequestsChangePolicyTypeToDB(object: DBXTeamLogMemberRequestsChangePolicyType) -> DBTEAMLOGMemberRequestsChangePolicyType {
    DBTEAMLOGMemberRequestsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogMemberRequestsPolicyToDBOptional(object: DBXTeamLogMemberRequestsPolicy?) -> DBTEAMLOGMemberRequestsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberRequestsPolicyToDB(object: object)
}

func mapDBXTeamLogMemberRequestsPolicyToDB(object: DBXTeamLogMemberRequestsPolicy) -> DBTEAMLOGMemberRequestsPolicy {
    if object.asAutoAccept != nil {
        return DBTEAMLOGMemberRequestsPolicy(autoAccept: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGMemberRequestsPolicy(disabled: ())
    }
    if object.asRequireApproval != nil {
        return DBTEAMLOGMemberRequestsPolicy(requireApproval: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMemberRequestsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMemberSendInvitePolicyToDBOptional(object: DBXTeamLogMemberSendInvitePolicy?) -> DBTEAMLOGMemberSendInvitePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSendInvitePolicyToDB(object: object)
}

func mapDBXTeamLogMemberSendInvitePolicyToDB(object: DBXTeamLogMemberSendInvitePolicy) -> DBTEAMLOGMemberSendInvitePolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGMemberSendInvitePolicy(disabled: ())
    }
    if object.asEveryone != nil {
        return DBTEAMLOGMemberSendInvitePolicy(everyone: ())
    }
    if object.asSpecificMembers != nil {
        return DBTEAMLOGMemberSendInvitePolicy(specificMembers: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMemberSendInvitePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMemberSendInvitePolicyChangedDetailsToDBOptional(object: DBXTeamLogMemberSendInvitePolicyChangedDetails?)
    -> DBTEAMLOGMemberSendInvitePolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSendInvitePolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSendInvitePolicyChangedDetailsToDB(object: DBXTeamLogMemberSendInvitePolicyChangedDetails)
    -> DBTEAMLOGMemberSendInvitePolicyChangedDetails {
    DBTEAMLOGMemberSendInvitePolicyChangedDetails(
        dNewValue: mapDBXTeamLogMemberSendInvitePolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogMemberSendInvitePolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberSendInvitePolicyChangedTypeToDBOptional(object: DBXTeamLogMemberSendInvitePolicyChangedType?)
    -> DBTEAMLOGMemberSendInvitePolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSendInvitePolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogMemberSendInvitePolicyChangedTypeToDB(object: DBXTeamLogMemberSendInvitePolicyChangedType) -> DBTEAMLOGMemberSendInvitePolicyChangedType {
    DBTEAMLOGMemberSendInvitePolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogMemberSetProfilePhotoDetailsToDBOptional(object: DBXTeamLogMemberSetProfilePhotoDetails?) -> DBTEAMLOGMemberSetProfilePhotoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSetProfilePhotoDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSetProfilePhotoDetailsToDB(object: DBXTeamLogMemberSetProfilePhotoDetails) -> DBTEAMLOGMemberSetProfilePhotoDetails {
    DBTEAMLOGMemberSetProfilePhotoDetails(default: ())
}

func mapDBXTeamLogMemberSetProfilePhotoTypeToDBOptional(object: DBXTeamLogMemberSetProfilePhotoType?) -> DBTEAMLOGMemberSetProfilePhotoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSetProfilePhotoTypeToDB(object: object)
}

func mapDBXTeamLogMemberSetProfilePhotoTypeToDB(object: DBXTeamLogMemberSetProfilePhotoType) -> DBTEAMLOGMemberSetProfilePhotoType {
    DBTEAMLOGMemberSetProfilePhotoType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails?)
    -> DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaDetailsToDB(object: DBXTeamLogMemberSpaceLimitsAddCustomQuotaDetails)
    -> DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails {
    DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsAddCustomQuotaType?)
    -> DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsAddCustomQuotaTypeToDB(object: DBXTeamLogMemberSpaceLimitsAddCustomQuotaType)
    -> DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType {
    DBTEAMLOGMemberSpaceLimitsAddCustomQuotaType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsAddExceptionDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsAddExceptionDetails?)
    -> DBTEAMLOGMemberSpaceLimitsAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsAddExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsAddExceptionDetailsToDB(object: DBXTeamLogMemberSpaceLimitsAddExceptionDetails)
    -> DBTEAMLOGMemberSpaceLimitsAddExceptionDetails {
    DBTEAMLOGMemberSpaceLimitsAddExceptionDetails(default: ())
}

func mapDBXTeamLogMemberSpaceLimitsAddExceptionTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsAddExceptionType?)
    -> DBTEAMLOGMemberSpaceLimitsAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsAddExceptionTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsAddExceptionTypeToDB(object: DBXTeamLogMemberSpaceLimitsAddExceptionType) -> DBTEAMLOGMemberSpaceLimitsAddExceptionType {
    DBTEAMLOGMemberSpaceLimitsAddExceptionType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails?)
    -> DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetailsToDB(object: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyDetails)
    -> DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails {
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails(
        previousValue: mapDBXTeamLogSpaceCapsTypeToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogSpaceCapsTypeToDB(object: object.newValue)
    )
}

func mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType?)
    -> DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyTypeToDB(object: DBXTeamLogMemberSpaceLimitsChangeCapsTypePolicyType)
    -> DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType {
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails?)
    -> DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetailsToDB(object: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaDetails)
    -> DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails {
    DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType?)
    -> DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeCustomQuotaTypeToDB(object: DBXTeamLogMemberSpaceLimitsChangeCustomQuotaType)
    -> DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType {
    DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsChangePolicyDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangePolicyDetails?)
    -> DBTEAMLOGMemberSpaceLimitsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangePolicyDetailsToDB(object: DBXTeamLogMemberSpaceLimitsChangePolicyDetails)
    -> DBTEAMLOGMemberSpaceLimitsChangePolicyDetails {
    DBTEAMLOGMemberSpaceLimitsChangePolicyDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogMemberSpaceLimitsChangePolicyTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangePolicyType?)
    -> DBTEAMLOGMemberSpaceLimitsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangePolicyTypeToDB(object: DBXTeamLogMemberSpaceLimitsChangePolicyType) -> DBTEAMLOGMemberSpaceLimitsChangePolicyType {
    DBTEAMLOGMemberSpaceLimitsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsChangeStatusDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeStatusDetails?)
    -> DBTEAMLOGMemberSpaceLimitsChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeStatusDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeStatusDetailsToDB(object: DBXTeamLogMemberSpaceLimitsChangeStatusDetails)
    -> DBTEAMLOGMemberSpaceLimitsChangeStatusDetails {
    DBTEAMLOGMemberSpaceLimitsChangeStatusDetails(
        previousValue: mapDBXTeamLogSpaceLimitsStatusToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogSpaceLimitsStatusToDB(object: object.newValue)
    )
}

func mapDBXTeamLogMemberSpaceLimitsChangeStatusTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsChangeStatusType?)
    -> DBTEAMLOGMemberSpaceLimitsChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsChangeStatusTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsChangeStatusTypeToDB(object: DBXTeamLogMemberSpaceLimitsChangeStatusType) -> DBTEAMLOGMemberSpaceLimitsChangeStatusType {
    DBTEAMLOGMemberSpaceLimitsChangeStatusType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails?)
    -> DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetailsToDB(object: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaDetails)
    -> DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails {
    DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails(default: ())
}

func mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType?)
    -> DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveCustomQuotaTypeToDB(object: DBXTeamLogMemberSpaceLimitsRemoveCustomQuotaType)
    -> DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType {
    DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaType(description_: object.description_)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveExceptionDetailsToDBOptional(object: DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails?)
    -> DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsRemoveExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveExceptionDetailsToDB(object: DBXTeamLogMemberSpaceLimitsRemoveExceptionDetails)
    -> DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails(default: ())
}

func mapDBXTeamLogMemberSpaceLimitsRemoveExceptionTypeToDBOptional(object: DBXTeamLogMemberSpaceLimitsRemoveExceptionType?)
    -> DBTEAMLOGMemberSpaceLimitsRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSpaceLimitsRemoveExceptionTypeToDB(object: object)
}

func mapDBXTeamLogMemberSpaceLimitsRemoveExceptionTypeToDB(object: DBXTeamLogMemberSpaceLimitsRemoveExceptionType)
    -> DBTEAMLOGMemberSpaceLimitsRemoveExceptionType {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionType(description_: object.description_)
}

func mapDBXTeamLogMemberStatusToDBOptional(object: DBXTeamLogMemberStatus?) -> DBTEAMLOGMemberStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberStatusToDB(object: object)
}

func mapDBXTeamLogMemberStatusToDB(object: DBXTeamLogMemberStatus) -> DBTEAMLOGMemberStatus {
    if object.asActive != nil {
        return DBTEAMLOGMemberStatus(active: ())
    }
    if object.asInvited != nil {
        return DBTEAMLOGMemberStatus(invited: ())
    }
    if object.asMovedToAnotherTeam != nil {
        return DBTEAMLOGMemberStatus(movedToAnotherTeam: ())
    }
    if object.asNotJoined != nil {
        return DBTEAMLOGMemberStatus(notJoined: ())
    }
    if object.asRemoved != nil {
        return DBTEAMLOGMemberStatus(removed: ())
    }
    if object.asSuspended != nil {
        return DBTEAMLOGMemberStatus(suspended: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMemberStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMemberSuggestDetailsToDBOptional(object: DBXTeamLogMemberSuggestDetails?) -> DBTEAMLOGMemberSuggestDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSuggestDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSuggestDetailsToDB(object: DBXTeamLogMemberSuggestDetails) -> DBTEAMLOGMemberSuggestDetails {
    DBTEAMLOGMemberSuggestDetails(suggestedMembers: object.suggestedMembers)
}

func mapDBXTeamLogMemberSuggestTypeToDBOptional(object: DBXTeamLogMemberSuggestType?) -> DBTEAMLOGMemberSuggestType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSuggestTypeToDB(object: object)
}

func mapDBXTeamLogMemberSuggestTypeToDB(object: DBXTeamLogMemberSuggestType) -> DBTEAMLOGMemberSuggestType {
    DBTEAMLOGMemberSuggestType(description_: object.description_)
}

func mapDBXTeamLogMemberSuggestionsChangePolicyDetailsToDBOptional(object: DBXTeamLogMemberSuggestionsChangePolicyDetails?)
    -> DBTEAMLOGMemberSuggestionsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSuggestionsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogMemberSuggestionsChangePolicyDetailsToDB(object: DBXTeamLogMemberSuggestionsChangePolicyDetails)
    -> DBTEAMLOGMemberSuggestionsChangePolicyDetails {
    DBTEAMLOGMemberSuggestionsChangePolicyDetails(
        dNewValue: mapDBXTeamLogMemberSuggestionsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogMemberSuggestionsPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogMemberSuggestionsChangePolicyTypeToDBOptional(object: DBXTeamLogMemberSuggestionsChangePolicyType?)
    -> DBTEAMLOGMemberSuggestionsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSuggestionsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogMemberSuggestionsChangePolicyTypeToDB(object: DBXTeamLogMemberSuggestionsChangePolicyType) -> DBTEAMLOGMemberSuggestionsChangePolicyType {
    DBTEAMLOGMemberSuggestionsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogMemberSuggestionsPolicyToDBOptional(object: DBXTeamLogMemberSuggestionsPolicy?) -> DBTEAMLOGMemberSuggestionsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberSuggestionsPolicyToDB(object: object)
}

func mapDBXTeamLogMemberSuggestionsPolicyToDB(object: DBXTeamLogMemberSuggestionsPolicy) -> DBTEAMLOGMemberSuggestionsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGMemberSuggestionsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGMemberSuggestionsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMemberSuggestionsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMemberTransferAccountContentsDetailsToDBOptional(object: DBXTeamLogMemberTransferAccountContentsDetails?)
    -> DBTEAMLOGMemberTransferAccountContentsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberTransferAccountContentsDetailsToDB(object: object)
}

func mapDBXTeamLogMemberTransferAccountContentsDetailsToDB(object: DBXTeamLogMemberTransferAccountContentsDetails)
    -> DBTEAMLOGMemberTransferAccountContentsDetails {
    DBTEAMLOGMemberTransferAccountContentsDetails(default: ())
}

func mapDBXTeamLogMemberTransferAccountContentsTypeToDBOptional(object: DBXTeamLogMemberTransferAccountContentsType?)
    -> DBTEAMLOGMemberTransferAccountContentsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberTransferAccountContentsTypeToDB(object: object)
}

func mapDBXTeamLogMemberTransferAccountContentsTypeToDB(object: DBXTeamLogMemberTransferAccountContentsType) -> DBTEAMLOGMemberTransferAccountContentsType {
    DBTEAMLOGMemberTransferAccountContentsType(description_: object.description_)
}

func mapDBXTeamLogMemberTransferredInternalFieldsToDBOptional(object: DBXTeamLogMemberTransferredInternalFields?) -> DBTEAMLOGMemberTransferredInternalFields? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMemberTransferredInternalFieldsToDB(object: object)
}

func mapDBXTeamLogMemberTransferredInternalFieldsToDB(object: DBXTeamLogMemberTransferredInternalFields) -> DBTEAMLOGMemberTransferredInternalFields {
    DBTEAMLOGMemberTransferredInternalFields(sourceTeamId: object.sourceTeamId, targetTeamId: object.targetTeamId)
}

func mapDBXTeamLogMicrosoftOfficeAddinChangePolicyDetailsToDBOptional(object: DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails?)
    -> DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMicrosoftOfficeAddinChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogMicrosoftOfficeAddinChangePolicyDetailsToDB(object: DBXTeamLogMicrosoftOfficeAddinChangePolicyDetails)
    -> DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails(
        dNewValue: mapDBXTeamLogMicrosoftOfficeAddinPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogMicrosoftOfficeAddinPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogMicrosoftOfficeAddinChangePolicyTypeToDBOptional(object: DBXTeamLogMicrosoftOfficeAddinChangePolicyType?)
    -> DBTEAMLOGMicrosoftOfficeAddinChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMicrosoftOfficeAddinChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogMicrosoftOfficeAddinChangePolicyTypeToDB(object: DBXTeamLogMicrosoftOfficeAddinChangePolicyType)
    -> DBTEAMLOGMicrosoftOfficeAddinChangePolicyType {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogMicrosoftOfficeAddinPolicyToDBOptional(object: DBXTeamLogMicrosoftOfficeAddinPolicy?) -> DBTEAMLOGMicrosoftOfficeAddinPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMicrosoftOfficeAddinPolicyToDB(object: object)
}

func mapDBXTeamLogMicrosoftOfficeAddinPolicyToDB(object: DBXTeamLogMicrosoftOfficeAddinPolicy) -> DBTEAMLOGMicrosoftOfficeAddinPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGMicrosoftOfficeAddinPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGMicrosoftOfficeAddinPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGMicrosoftOfficeAddinPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogMissingDetailsToDBOptional(object: DBXTeamLogMissingDetails?) -> DBTEAMLOGMissingDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMissingDetailsToDB(object: object)
}

func mapDBXTeamLogMissingDetailsToDB(object: DBXTeamLogMissingDetails) -> DBTEAMLOGMissingDetails {
    DBTEAMLOGMissingDetails(sourceEventFields: object.sourceEventFields)
}

func mapDBXTeamLogMobileDeviceSessionLogInfoToDBOptional(object: DBXTeamLogMobileDeviceSessionLogInfo?) -> DBTEAMLOGMobileDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMobileDeviceSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogMobileDeviceSessionLogInfoToDB(object: DBXTeamLogMobileDeviceSessionLogInfo) -> DBTEAMLOGMobileDeviceSessionLogInfo {
    DBTEAMLOGMobileDeviceSessionLogInfo(
        deviceName: object.deviceName,
        clientType: mapDBXTeamMobileClientPlatformToDB(object: object.clientType),
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBXTeamLogMobileSessionLogInfoToDBOptional(object: object.sessionInfo),
        clientVersion: object.clientVersion,
        osVersion: object.osVersion,
        lastCarrier: object.lastCarrier
    )
}

func mapDBXTeamLogMobileSessionLogInfoToDBOptional(object: DBXTeamLogMobileSessionLogInfo?) -> DBTEAMLOGMobileSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogMobileSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogMobileSessionLogInfoToDB(object: DBXTeamLogMobileSessionLogInfo) -> DBTEAMLOGMobileSessionLogInfo {
    DBTEAMLOGMobileSessionLogInfo(sessionId: object.sessionId)
}

func mapDBXTeamLogNamespaceRelativePathLogInfoToDBOptional(object: DBXTeamLogNamespaceRelativePathLogInfo?) -> DBTEAMLOGNamespaceRelativePathLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNamespaceRelativePathLogInfoToDB(object: object)
}

func mapDBXTeamLogNamespaceRelativePathLogInfoToDB(object: DBXTeamLogNamespaceRelativePathLogInfo) -> DBTEAMLOGNamespaceRelativePathLogInfo {
    DBTEAMLOGNamespaceRelativePathLogInfo(nsId: object.nsId, relativePath: object.relativePath, isSharedNamespace: object.isSharedNamespace)
}

func mapDBXTeamLogNetworkControlChangePolicyDetailsToDBOptional(object: DBXTeamLogNetworkControlChangePolicyDetails?)
    -> DBTEAMLOGNetworkControlChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNetworkControlChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogNetworkControlChangePolicyDetailsToDB(object: DBXTeamLogNetworkControlChangePolicyDetails) -> DBTEAMLOGNetworkControlChangePolicyDetails {
    DBTEAMLOGNetworkControlChangePolicyDetails(
        dNewValue: mapDBXTeamLogNetworkControlPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogNetworkControlPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogNetworkControlChangePolicyTypeToDBOptional(object: DBXTeamLogNetworkControlChangePolicyType?) -> DBTEAMLOGNetworkControlChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNetworkControlChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogNetworkControlChangePolicyTypeToDB(object: DBXTeamLogNetworkControlChangePolicyType) -> DBTEAMLOGNetworkControlChangePolicyType {
    DBTEAMLOGNetworkControlChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogNetworkControlPolicyToDBOptional(object: DBXTeamLogNetworkControlPolicy?) -> DBTEAMLOGNetworkControlPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNetworkControlPolicyToDB(object: object)
}

func mapDBXTeamLogNetworkControlPolicyToDB(object: DBXTeamLogNetworkControlPolicy) -> DBTEAMLOGNetworkControlPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGNetworkControlPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGNetworkControlPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGNetworkControlPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogNoExpirationLinkGenCreateReportDetailsToDBOptional(object: DBXTeamLogNoExpirationLinkGenCreateReportDetails?)
    -> DBTEAMLOGNoExpirationLinkGenCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoExpirationLinkGenCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogNoExpirationLinkGenCreateReportDetailsToDB(object: DBXTeamLogNoExpirationLinkGenCreateReportDetails)
    -> DBTEAMLOGNoExpirationLinkGenCreateReportDetails {
    DBTEAMLOGNoExpirationLinkGenCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogNoExpirationLinkGenCreateReportTypeToDBOptional(object: DBXTeamLogNoExpirationLinkGenCreateReportType?)
    -> DBTEAMLOGNoExpirationLinkGenCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoExpirationLinkGenCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogNoExpirationLinkGenCreateReportTypeToDB(object: DBXTeamLogNoExpirationLinkGenCreateReportType)
    -> DBTEAMLOGNoExpirationLinkGenCreateReportType {
    DBTEAMLOGNoExpirationLinkGenCreateReportType(description_: object.description_)
}

func mapDBXTeamLogNoExpirationLinkGenReportFailedDetailsToDBOptional(object: DBXTeamLogNoExpirationLinkGenReportFailedDetails?)
    -> DBTEAMLOGNoExpirationLinkGenReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoExpirationLinkGenReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogNoExpirationLinkGenReportFailedDetailsToDB(object: DBXTeamLogNoExpirationLinkGenReportFailedDetails)
    -> DBTEAMLOGNoExpirationLinkGenReportFailedDetails {
    DBTEAMLOGNoExpirationLinkGenReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogNoExpirationLinkGenReportFailedTypeToDBOptional(object: DBXTeamLogNoExpirationLinkGenReportFailedType?)
    -> DBTEAMLOGNoExpirationLinkGenReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoExpirationLinkGenReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogNoExpirationLinkGenReportFailedTypeToDB(object: DBXTeamLogNoExpirationLinkGenReportFailedType)
    -> DBTEAMLOGNoExpirationLinkGenReportFailedType {
    DBTEAMLOGNoExpirationLinkGenReportFailedType(description_: object.description_)
}

func mapDBXTeamLogNoPasswordLinkGenCreateReportDetailsToDBOptional(object: DBXTeamLogNoPasswordLinkGenCreateReportDetails?)
    -> DBTEAMLOGNoPasswordLinkGenCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkGenCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkGenCreateReportDetailsToDB(object: DBXTeamLogNoPasswordLinkGenCreateReportDetails)
    -> DBTEAMLOGNoPasswordLinkGenCreateReportDetails {
    DBTEAMLOGNoPasswordLinkGenCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogNoPasswordLinkGenCreateReportTypeToDBOptional(object: DBXTeamLogNoPasswordLinkGenCreateReportType?)
    -> DBTEAMLOGNoPasswordLinkGenCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkGenCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkGenCreateReportTypeToDB(object: DBXTeamLogNoPasswordLinkGenCreateReportType) -> DBTEAMLOGNoPasswordLinkGenCreateReportType {
    DBTEAMLOGNoPasswordLinkGenCreateReportType(description_: object.description_)
}

func mapDBXTeamLogNoPasswordLinkGenReportFailedDetailsToDBOptional(object: DBXTeamLogNoPasswordLinkGenReportFailedDetails?)
    -> DBTEAMLOGNoPasswordLinkGenReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkGenReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkGenReportFailedDetailsToDB(object: DBXTeamLogNoPasswordLinkGenReportFailedDetails)
    -> DBTEAMLOGNoPasswordLinkGenReportFailedDetails {
    DBTEAMLOGNoPasswordLinkGenReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogNoPasswordLinkGenReportFailedTypeToDBOptional(object: DBXTeamLogNoPasswordLinkGenReportFailedType?)
    -> DBTEAMLOGNoPasswordLinkGenReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkGenReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkGenReportFailedTypeToDB(object: DBXTeamLogNoPasswordLinkGenReportFailedType) -> DBTEAMLOGNoPasswordLinkGenReportFailedType {
    DBTEAMLOGNoPasswordLinkGenReportFailedType(description_: object.description_)
}

func mapDBXTeamLogNoPasswordLinkViewCreateReportDetailsToDBOptional(object: DBXTeamLogNoPasswordLinkViewCreateReportDetails?)
    -> DBTEAMLOGNoPasswordLinkViewCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkViewCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkViewCreateReportDetailsToDB(object: DBXTeamLogNoPasswordLinkViewCreateReportDetails)
    -> DBTEAMLOGNoPasswordLinkViewCreateReportDetails {
    DBTEAMLOGNoPasswordLinkViewCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogNoPasswordLinkViewCreateReportTypeToDBOptional(object: DBXTeamLogNoPasswordLinkViewCreateReportType?)
    -> DBTEAMLOGNoPasswordLinkViewCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkViewCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkViewCreateReportTypeToDB(object: DBXTeamLogNoPasswordLinkViewCreateReportType) -> DBTEAMLOGNoPasswordLinkViewCreateReportType {
    DBTEAMLOGNoPasswordLinkViewCreateReportType(description_: object.description_)
}

func mapDBXTeamLogNoPasswordLinkViewReportFailedDetailsToDBOptional(object: DBXTeamLogNoPasswordLinkViewReportFailedDetails?)
    -> DBTEAMLOGNoPasswordLinkViewReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkViewReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkViewReportFailedDetailsToDB(object: DBXTeamLogNoPasswordLinkViewReportFailedDetails)
    -> DBTEAMLOGNoPasswordLinkViewReportFailedDetails {
    DBTEAMLOGNoPasswordLinkViewReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogNoPasswordLinkViewReportFailedTypeToDBOptional(object: DBXTeamLogNoPasswordLinkViewReportFailedType?)
    -> DBTEAMLOGNoPasswordLinkViewReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoPasswordLinkViewReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogNoPasswordLinkViewReportFailedTypeToDB(object: DBXTeamLogNoPasswordLinkViewReportFailedType) -> DBTEAMLOGNoPasswordLinkViewReportFailedType {
    DBTEAMLOGNoPasswordLinkViewReportFailedType(description_: object.description_)
}

func mapDBXTeamLogUserLogInfoToDBOptional(object: DBXTeamLogUserLogInfo?) -> DBTEAMLOGUserLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserLogInfoToDB(object: object)
}

func mapDBXTeamLogUserLogInfoToDB(object: DBXTeamLogUserLogInfo) -> DBTEAMLOGUserLogInfo {
    switch object {
    case let object as DBXTeamLogTeamMemberLogInfo:
        return DBTEAMLOGTeamMemberLogInfo(
            accountId: object.accountId,
            displayName: object.displayName,
            email: object.email,
            teamMemberId: object.teamMemberId,
            memberExternalId: object.memberExternalId,
            team: mapDBXTeamLogTeamLogInfoToDBOptional(object: object.team)
        )
    case let object as DBXTeamLogTrustedNonTeamMemberLogInfo:
        return DBTEAMLOGTrustedNonTeamMemberLogInfo(
            trustedNonTeamMemberType: mapDBXTeamLogTrustedNonTeamMemberTypeToDB(object: object.trustedNonTeamMemberType),
            accountId: object.accountId,
            displayName: object.displayName,
            email: object.email,
            team: mapDBXTeamLogTeamLogInfoToDBOptional(object: object.team)
        )
    case let object as DBXTeamLogNonTeamMemberLogInfo:
        return DBTEAMLOGNonTeamMemberLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
    default:
        return DBTEAMLOGUserLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
    }
}

func mapDBXTeamLogNonTeamMemberLogInfoToDBOptional(object: DBXTeamLogNonTeamMemberLogInfo?) -> DBTEAMLOGNonTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNonTeamMemberLogInfoToDB(object: object)
}

func mapDBXTeamLogNonTeamMemberLogInfoToDB(object: DBXTeamLogNonTeamMemberLogInfo) -> DBTEAMLOGNonTeamMemberLogInfo {
    DBTEAMLOGNonTeamMemberLogInfo(accountId: object.accountId, displayName: object.displayName, email: object.email)
}

func mapDBXTeamLogNonTrustedTeamDetailsToDBOptional(object: DBXTeamLogNonTrustedTeamDetails?) -> DBTEAMLOGNonTrustedTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNonTrustedTeamDetailsToDB(object: object)
}

func mapDBXTeamLogNonTrustedTeamDetailsToDB(object: DBXTeamLogNonTrustedTeamDetails) -> DBTEAMLOGNonTrustedTeamDetails {
    DBTEAMLOGNonTrustedTeamDetails(team: object.team)
}

func mapDBXTeamLogNoteAclInviteOnlyDetailsToDBOptional(object: DBXTeamLogNoteAclInviteOnlyDetails?) -> DBTEAMLOGNoteAclInviteOnlyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclInviteOnlyDetailsToDB(object: object)
}

func mapDBXTeamLogNoteAclInviteOnlyDetailsToDB(object: DBXTeamLogNoteAclInviteOnlyDetails) -> DBTEAMLOGNoteAclInviteOnlyDetails {
    DBTEAMLOGNoteAclInviteOnlyDetails(default: ())
}

func mapDBXTeamLogNoteAclInviteOnlyTypeToDBOptional(object: DBXTeamLogNoteAclInviteOnlyType?) -> DBTEAMLOGNoteAclInviteOnlyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclInviteOnlyTypeToDB(object: object)
}

func mapDBXTeamLogNoteAclInviteOnlyTypeToDB(object: DBXTeamLogNoteAclInviteOnlyType) -> DBTEAMLOGNoteAclInviteOnlyType {
    DBTEAMLOGNoteAclInviteOnlyType(description_: object.description_)
}

func mapDBXTeamLogNoteAclLinkDetailsToDBOptional(object: DBXTeamLogNoteAclLinkDetails?) -> DBTEAMLOGNoteAclLinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclLinkDetailsToDB(object: object)
}

func mapDBXTeamLogNoteAclLinkDetailsToDB(object: DBXTeamLogNoteAclLinkDetails) -> DBTEAMLOGNoteAclLinkDetails {
    DBTEAMLOGNoteAclLinkDetails(default: ())
}

func mapDBXTeamLogNoteAclLinkTypeToDBOptional(object: DBXTeamLogNoteAclLinkType?) -> DBTEAMLOGNoteAclLinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclLinkTypeToDB(object: object)
}

func mapDBXTeamLogNoteAclLinkTypeToDB(object: DBXTeamLogNoteAclLinkType) -> DBTEAMLOGNoteAclLinkType {
    DBTEAMLOGNoteAclLinkType(description_: object.description_)
}

func mapDBXTeamLogNoteAclTeamLinkDetailsToDBOptional(object: DBXTeamLogNoteAclTeamLinkDetails?) -> DBTEAMLOGNoteAclTeamLinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclTeamLinkDetailsToDB(object: object)
}

func mapDBXTeamLogNoteAclTeamLinkDetailsToDB(object: DBXTeamLogNoteAclTeamLinkDetails) -> DBTEAMLOGNoteAclTeamLinkDetails {
    DBTEAMLOGNoteAclTeamLinkDetails(default: ())
}

func mapDBXTeamLogNoteAclTeamLinkTypeToDBOptional(object: DBXTeamLogNoteAclTeamLinkType?) -> DBTEAMLOGNoteAclTeamLinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteAclTeamLinkTypeToDB(object: object)
}

func mapDBXTeamLogNoteAclTeamLinkTypeToDB(object: DBXTeamLogNoteAclTeamLinkType) -> DBTEAMLOGNoteAclTeamLinkType {
    DBTEAMLOGNoteAclTeamLinkType(description_: object.description_)
}

func mapDBXTeamLogNoteShareReceiveDetailsToDBOptional(object: DBXTeamLogNoteShareReceiveDetails?) -> DBTEAMLOGNoteShareReceiveDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteShareReceiveDetailsToDB(object: object)
}

func mapDBXTeamLogNoteShareReceiveDetailsToDB(object: DBXTeamLogNoteShareReceiveDetails) -> DBTEAMLOGNoteShareReceiveDetails {
    DBTEAMLOGNoteShareReceiveDetails(default: ())
}

func mapDBXTeamLogNoteShareReceiveTypeToDBOptional(object: DBXTeamLogNoteShareReceiveType?) -> DBTEAMLOGNoteShareReceiveType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteShareReceiveTypeToDB(object: object)
}

func mapDBXTeamLogNoteShareReceiveTypeToDB(object: DBXTeamLogNoteShareReceiveType) -> DBTEAMLOGNoteShareReceiveType {
    DBTEAMLOGNoteShareReceiveType(description_: object.description_)
}

func mapDBXTeamLogNoteSharedDetailsToDBOptional(object: DBXTeamLogNoteSharedDetails?) -> DBTEAMLOGNoteSharedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteSharedDetailsToDB(object: object)
}

func mapDBXTeamLogNoteSharedDetailsToDB(object: DBXTeamLogNoteSharedDetails) -> DBTEAMLOGNoteSharedDetails {
    DBTEAMLOGNoteSharedDetails(default: ())
}

func mapDBXTeamLogNoteSharedTypeToDBOptional(object: DBXTeamLogNoteSharedType?) -> DBTEAMLOGNoteSharedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogNoteSharedTypeToDB(object: object)
}

func mapDBXTeamLogNoteSharedTypeToDB(object: DBXTeamLogNoteSharedType) -> DBTEAMLOGNoteSharedType {
    DBTEAMLOGNoteSharedType(description_: object.description_)
}

func mapDBXTeamLogObjectLabelAddedDetailsToDBOptional(object: DBXTeamLogObjectLabelAddedDetails?) -> DBTEAMLOGObjectLabelAddedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelAddedDetailsToDB(object: object)
}

func mapDBXTeamLogObjectLabelAddedDetailsToDB(object: DBXTeamLogObjectLabelAddedDetails) -> DBTEAMLOGObjectLabelAddedDetails {
    DBTEAMLOGObjectLabelAddedDetails(labelType: mapDBXTeamLogLabelTypeToDB(object: object.labelType))
}

func mapDBXTeamLogObjectLabelAddedTypeToDBOptional(object: DBXTeamLogObjectLabelAddedType?) -> DBTEAMLOGObjectLabelAddedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelAddedTypeToDB(object: object)
}

func mapDBXTeamLogObjectLabelAddedTypeToDB(object: DBXTeamLogObjectLabelAddedType) -> DBTEAMLOGObjectLabelAddedType {
    DBTEAMLOGObjectLabelAddedType(description_: object.description_)
}

func mapDBXTeamLogObjectLabelRemovedDetailsToDBOptional(object: DBXTeamLogObjectLabelRemovedDetails?) -> DBTEAMLOGObjectLabelRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelRemovedDetailsToDB(object: object)
}

func mapDBXTeamLogObjectLabelRemovedDetailsToDB(object: DBXTeamLogObjectLabelRemovedDetails) -> DBTEAMLOGObjectLabelRemovedDetails {
    DBTEAMLOGObjectLabelRemovedDetails(labelType: mapDBXTeamLogLabelTypeToDB(object: object.labelType))
}

func mapDBXTeamLogObjectLabelRemovedTypeToDBOptional(object: DBXTeamLogObjectLabelRemovedType?) -> DBTEAMLOGObjectLabelRemovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelRemovedTypeToDB(object: object)
}

func mapDBXTeamLogObjectLabelRemovedTypeToDB(object: DBXTeamLogObjectLabelRemovedType) -> DBTEAMLOGObjectLabelRemovedType {
    DBTEAMLOGObjectLabelRemovedType(description_: object.description_)
}

func mapDBXTeamLogObjectLabelUpdatedValueDetailsToDBOptional(object: DBXTeamLogObjectLabelUpdatedValueDetails?) -> DBTEAMLOGObjectLabelUpdatedValueDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelUpdatedValueDetailsToDB(object: object)
}

func mapDBXTeamLogObjectLabelUpdatedValueDetailsToDB(object: DBXTeamLogObjectLabelUpdatedValueDetails) -> DBTEAMLOGObjectLabelUpdatedValueDetails {
    DBTEAMLOGObjectLabelUpdatedValueDetails(labelType: mapDBXTeamLogLabelTypeToDB(object: object.labelType))
}

func mapDBXTeamLogObjectLabelUpdatedValueTypeToDBOptional(object: DBXTeamLogObjectLabelUpdatedValueType?) -> DBTEAMLOGObjectLabelUpdatedValueType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogObjectLabelUpdatedValueTypeToDB(object: object)
}

func mapDBXTeamLogObjectLabelUpdatedValueTypeToDB(object: DBXTeamLogObjectLabelUpdatedValueType) -> DBTEAMLOGObjectLabelUpdatedValueType {
    DBTEAMLOGObjectLabelUpdatedValueType(description_: object.description_)
}

func mapDBXTeamLogOpenNoteSharedDetailsToDBOptional(object: DBXTeamLogOpenNoteSharedDetails?) -> DBTEAMLOGOpenNoteSharedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOpenNoteSharedDetailsToDB(object: object)
}

func mapDBXTeamLogOpenNoteSharedDetailsToDB(object: DBXTeamLogOpenNoteSharedDetails) -> DBTEAMLOGOpenNoteSharedDetails {
    DBTEAMLOGOpenNoteSharedDetails(default: ())
}

func mapDBXTeamLogOpenNoteSharedTypeToDBOptional(object: DBXTeamLogOpenNoteSharedType?) -> DBTEAMLOGOpenNoteSharedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOpenNoteSharedTypeToDB(object: object)
}

func mapDBXTeamLogOpenNoteSharedTypeToDB(object: DBXTeamLogOpenNoteSharedType) -> DBTEAMLOGOpenNoteSharedType {
    DBTEAMLOGOpenNoteSharedType(description_: object.description_)
}

func mapDBXTeamLogOrganizationDetailsToDBOptional(object: DBXTeamLogOrganizationDetails?) -> DBTEAMLOGOrganizationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOrganizationDetailsToDB(object: object)
}

func mapDBXTeamLogOrganizationDetailsToDB(object: DBXTeamLogOrganizationDetails) -> DBTEAMLOGOrganizationDetails {
    DBTEAMLOGOrganizationDetails(organization: object.organization)
}

func mapDBXTeamLogOrganizationNameToDBOptional(object: DBXTeamLogOrganizationName?) -> DBTEAMLOGOrganizationName? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOrganizationNameToDB(object: object)
}

func mapDBXTeamLogOrganizationNameToDB(object: DBXTeamLogOrganizationName) -> DBTEAMLOGOrganizationName {
    DBTEAMLOGOrganizationName(organization: object.organization)
}

func mapDBXTeamLogOrganizeFolderWithTidyDetailsToDBOptional(object: DBXTeamLogOrganizeFolderWithTidyDetails?) -> DBTEAMLOGOrganizeFolderWithTidyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOrganizeFolderWithTidyDetailsToDB(object: object)
}

func mapDBXTeamLogOrganizeFolderWithTidyDetailsToDB(object: DBXTeamLogOrganizeFolderWithTidyDetails) -> DBTEAMLOGOrganizeFolderWithTidyDetails {
    DBTEAMLOGOrganizeFolderWithTidyDetails(default: ())
}

func mapDBXTeamLogOrganizeFolderWithTidyTypeToDBOptional(object: DBXTeamLogOrganizeFolderWithTidyType?) -> DBTEAMLOGOrganizeFolderWithTidyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOrganizeFolderWithTidyTypeToDB(object: object)
}

func mapDBXTeamLogOrganizeFolderWithTidyTypeToDB(object: DBXTeamLogOrganizeFolderWithTidyType) -> DBTEAMLOGOrganizeFolderWithTidyType {
    DBTEAMLOGOrganizeFolderWithTidyType(description_: object.description_)
}

func mapDBXTeamLogOriginLogInfoToDBOptional(object: DBXTeamLogOriginLogInfo?) -> DBTEAMLOGOriginLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOriginLogInfoToDB(object: object)
}

func mapDBXTeamLogOriginLogInfoToDB(object: DBXTeamLogOriginLogInfo) -> DBTEAMLOGOriginLogInfo {
    DBTEAMLOGOriginLogInfo(
        accessMethod: mapDBXTeamLogAccessMethodLogInfoToDB(object: object.accessMethod),
        geoLocation: mapDBXTeamLogGeoLocationLogInfoToDBOptional(object: object.geoLocation)
    )
}

func mapDBXTeamLogOutdatedLinkViewCreateReportDetailsToDBOptional(object: DBXTeamLogOutdatedLinkViewCreateReportDetails?)
    -> DBTEAMLOGOutdatedLinkViewCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOutdatedLinkViewCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogOutdatedLinkViewCreateReportDetailsToDB(object: DBXTeamLogOutdatedLinkViewCreateReportDetails)
    -> DBTEAMLOGOutdatedLinkViewCreateReportDetails {
    DBTEAMLOGOutdatedLinkViewCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogOutdatedLinkViewCreateReportTypeToDBOptional(object: DBXTeamLogOutdatedLinkViewCreateReportType?)
    -> DBTEAMLOGOutdatedLinkViewCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOutdatedLinkViewCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogOutdatedLinkViewCreateReportTypeToDB(object: DBXTeamLogOutdatedLinkViewCreateReportType) -> DBTEAMLOGOutdatedLinkViewCreateReportType {
    DBTEAMLOGOutdatedLinkViewCreateReportType(description_: object.description_)
}

func mapDBXTeamLogOutdatedLinkViewReportFailedDetailsToDBOptional(object: DBXTeamLogOutdatedLinkViewReportFailedDetails?)
    -> DBTEAMLOGOutdatedLinkViewReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOutdatedLinkViewReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogOutdatedLinkViewReportFailedDetailsToDB(object: DBXTeamLogOutdatedLinkViewReportFailedDetails)
    -> DBTEAMLOGOutdatedLinkViewReportFailedDetails {
    DBTEAMLOGOutdatedLinkViewReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogOutdatedLinkViewReportFailedTypeToDBOptional(object: DBXTeamLogOutdatedLinkViewReportFailedType?)
    -> DBTEAMLOGOutdatedLinkViewReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogOutdatedLinkViewReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogOutdatedLinkViewReportFailedTypeToDB(object: DBXTeamLogOutdatedLinkViewReportFailedType) -> DBTEAMLOGOutdatedLinkViewReportFailedType {
    DBTEAMLOGOutdatedLinkViewReportFailedType(description_: object.description_)
}

func mapDBXTeamLogPaperAccessTypeToDBOptional(object: DBXTeamLogPaperAccessType?) -> DBTEAMLOGPaperAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperAccessTypeToDB(object: object)
}

func mapDBXTeamLogPaperAccessTypeToDB(object: DBXTeamLogPaperAccessType) -> DBTEAMLOGPaperAccessType {
    if object.asCommenter != nil {
        return DBTEAMLOGPaperAccessType(commenter: ())
    }
    if object.asEditor != nil {
        return DBTEAMLOGPaperAccessType(editor: ())
    }
    if object.asViewer != nil {
        return DBTEAMLOGPaperAccessType(viewer: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPaperAccessType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPaperAdminExportStartDetailsToDBOptional(object: DBXTeamLogPaperAdminExportStartDetails?) -> DBTEAMLOGPaperAdminExportStartDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperAdminExportStartDetailsToDB(object: object)
}

func mapDBXTeamLogPaperAdminExportStartDetailsToDB(object: DBXTeamLogPaperAdminExportStartDetails) -> DBTEAMLOGPaperAdminExportStartDetails {
    DBTEAMLOGPaperAdminExportStartDetails(default: ())
}

func mapDBXTeamLogPaperAdminExportStartTypeToDBOptional(object: DBXTeamLogPaperAdminExportStartType?) -> DBTEAMLOGPaperAdminExportStartType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperAdminExportStartTypeToDB(object: object)
}

func mapDBXTeamLogPaperAdminExportStartTypeToDB(object: DBXTeamLogPaperAdminExportStartType) -> DBTEAMLOGPaperAdminExportStartType {
    DBTEAMLOGPaperAdminExportStartType(description_: object.description_)
}

func mapDBXTeamLogPaperChangeDeploymentPolicyDetailsToDBOptional(object: DBXTeamLogPaperChangeDeploymentPolicyDetails?)
    -> DBTEAMLOGPaperChangeDeploymentPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeDeploymentPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPaperChangeDeploymentPolicyDetailsToDB(object: DBXTeamLogPaperChangeDeploymentPolicyDetails) -> DBTEAMLOGPaperChangeDeploymentPolicyDetails {
    DBTEAMLOGPaperChangeDeploymentPolicyDetails(
        dNewValue: mapDBXTeamPoliciesPaperDeploymentPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesPaperDeploymentPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogPaperChangeDeploymentPolicyTypeToDBOptional(object: DBXTeamLogPaperChangeDeploymentPolicyType?) -> DBTEAMLOGPaperChangeDeploymentPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeDeploymentPolicyTypeToDB(object: object)
}

func mapDBXTeamLogPaperChangeDeploymentPolicyTypeToDB(object: DBXTeamLogPaperChangeDeploymentPolicyType) -> DBTEAMLOGPaperChangeDeploymentPolicyType {
    DBTEAMLOGPaperChangeDeploymentPolicyType(description_: object.description_)
}

func mapDBXTeamLogPaperChangeMemberLinkPolicyDetailsToDBOptional(object: DBXTeamLogPaperChangeMemberLinkPolicyDetails?)
    -> DBTEAMLOGPaperChangeMemberLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeMemberLinkPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPaperChangeMemberLinkPolicyDetailsToDB(object: DBXTeamLogPaperChangeMemberLinkPolicyDetails) -> DBTEAMLOGPaperChangeMemberLinkPolicyDetails {
    DBTEAMLOGPaperChangeMemberLinkPolicyDetails(dNewValue: mapDBXTeamLogPaperMemberPolicyToDB(object: object.newValue))
}

func mapDBXTeamLogPaperChangeMemberLinkPolicyTypeToDBOptional(object: DBXTeamLogPaperChangeMemberLinkPolicyType?) -> DBTEAMLOGPaperChangeMemberLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeMemberLinkPolicyTypeToDB(object: object)
}

func mapDBXTeamLogPaperChangeMemberLinkPolicyTypeToDB(object: DBXTeamLogPaperChangeMemberLinkPolicyType) -> DBTEAMLOGPaperChangeMemberLinkPolicyType {
    DBTEAMLOGPaperChangeMemberLinkPolicyType(description_: object.description_)
}

func mapDBXTeamLogPaperChangeMemberPolicyDetailsToDBOptional(object: DBXTeamLogPaperChangeMemberPolicyDetails?) -> DBTEAMLOGPaperChangeMemberPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeMemberPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPaperChangeMemberPolicyDetailsToDB(object: DBXTeamLogPaperChangeMemberPolicyDetails) -> DBTEAMLOGPaperChangeMemberPolicyDetails {
    DBTEAMLOGPaperChangeMemberPolicyDetails(
        dNewValue: mapDBXTeamLogPaperMemberPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogPaperMemberPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogPaperChangeMemberPolicyTypeToDBOptional(object: DBXTeamLogPaperChangeMemberPolicyType?) -> DBTEAMLOGPaperChangeMemberPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangeMemberPolicyTypeToDB(object: object)
}

func mapDBXTeamLogPaperChangeMemberPolicyTypeToDB(object: DBXTeamLogPaperChangeMemberPolicyType) -> DBTEAMLOGPaperChangeMemberPolicyType {
    DBTEAMLOGPaperChangeMemberPolicyType(description_: object.description_)
}

func mapDBXTeamLogPaperChangePolicyDetailsToDBOptional(object: DBXTeamLogPaperChangePolicyDetails?) -> DBTEAMLOGPaperChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPaperChangePolicyDetailsToDB(object: DBXTeamLogPaperChangePolicyDetails) -> DBTEAMLOGPaperChangePolicyDetails {
    DBTEAMLOGPaperChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesPaperEnabledPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesPaperEnabledPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogPaperChangePolicyTypeToDBOptional(object: DBXTeamLogPaperChangePolicyType?) -> DBTEAMLOGPaperChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogPaperChangePolicyTypeToDB(object: DBXTeamLogPaperChangePolicyType) -> DBTEAMLOGPaperChangePolicyType {
    DBTEAMLOGPaperChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogPaperContentAddMemberDetailsToDBOptional(object: DBXTeamLogPaperContentAddMemberDetails?) -> DBTEAMLOGPaperContentAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentAddMemberDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentAddMemberDetailsToDB(object: DBXTeamLogPaperContentAddMemberDetails) -> DBTEAMLOGPaperContentAddMemberDetails {
    DBTEAMLOGPaperContentAddMemberDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentAddMemberTypeToDBOptional(object: DBXTeamLogPaperContentAddMemberType?) -> DBTEAMLOGPaperContentAddMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentAddMemberTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentAddMemberTypeToDB(object: DBXTeamLogPaperContentAddMemberType) -> DBTEAMLOGPaperContentAddMemberType {
    DBTEAMLOGPaperContentAddMemberType(description_: object.description_)
}

func mapDBXTeamLogPaperContentAddToFolderDetailsToDBOptional(object: DBXTeamLogPaperContentAddToFolderDetails?) -> DBTEAMLOGPaperContentAddToFolderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentAddToFolderDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentAddToFolderDetailsToDB(object: DBXTeamLogPaperContentAddToFolderDetails) -> DBTEAMLOGPaperContentAddToFolderDetails {
    DBTEAMLOGPaperContentAddToFolderDetails(eventUuid: object.eventUuid, targetAssetIndex: object.targetAssetIndex, parentAssetIndex: object.parentAssetIndex)
}

func mapDBXTeamLogPaperContentAddToFolderTypeToDBOptional(object: DBXTeamLogPaperContentAddToFolderType?) -> DBTEAMLOGPaperContentAddToFolderType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentAddToFolderTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentAddToFolderTypeToDB(object: DBXTeamLogPaperContentAddToFolderType) -> DBTEAMLOGPaperContentAddToFolderType {
    DBTEAMLOGPaperContentAddToFolderType(description_: object.description_)
}

func mapDBXTeamLogPaperContentArchiveDetailsToDBOptional(object: DBXTeamLogPaperContentArchiveDetails?) -> DBTEAMLOGPaperContentArchiveDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentArchiveDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentArchiveDetailsToDB(object: DBXTeamLogPaperContentArchiveDetails) -> DBTEAMLOGPaperContentArchiveDetails {
    DBTEAMLOGPaperContentArchiveDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentArchiveTypeToDBOptional(object: DBXTeamLogPaperContentArchiveType?) -> DBTEAMLOGPaperContentArchiveType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentArchiveTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentArchiveTypeToDB(object: DBXTeamLogPaperContentArchiveType) -> DBTEAMLOGPaperContentArchiveType {
    DBTEAMLOGPaperContentArchiveType(description_: object.description_)
}

func mapDBXTeamLogPaperContentCreateDetailsToDBOptional(object: DBXTeamLogPaperContentCreateDetails?) -> DBTEAMLOGPaperContentCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentCreateDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentCreateDetailsToDB(object: DBXTeamLogPaperContentCreateDetails) -> DBTEAMLOGPaperContentCreateDetails {
    DBTEAMLOGPaperContentCreateDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentCreateTypeToDBOptional(object: DBXTeamLogPaperContentCreateType?) -> DBTEAMLOGPaperContentCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentCreateTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentCreateTypeToDB(object: DBXTeamLogPaperContentCreateType) -> DBTEAMLOGPaperContentCreateType {
    DBTEAMLOGPaperContentCreateType(description_: object.description_)
}

func mapDBXTeamLogPaperContentPermanentlyDeleteDetailsToDBOptional(object: DBXTeamLogPaperContentPermanentlyDeleteDetails?)
    -> DBTEAMLOGPaperContentPermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentPermanentlyDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentPermanentlyDeleteDetailsToDB(object: DBXTeamLogPaperContentPermanentlyDeleteDetails)
    -> DBTEAMLOGPaperContentPermanentlyDeleteDetails {
    DBTEAMLOGPaperContentPermanentlyDeleteDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentPermanentlyDeleteTypeToDBOptional(object: DBXTeamLogPaperContentPermanentlyDeleteType?)
    -> DBTEAMLOGPaperContentPermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentPermanentlyDeleteTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentPermanentlyDeleteTypeToDB(object: DBXTeamLogPaperContentPermanentlyDeleteType) -> DBTEAMLOGPaperContentPermanentlyDeleteType {
    DBTEAMLOGPaperContentPermanentlyDeleteType(description_: object.description_)
}

func mapDBXTeamLogPaperContentRemoveFromFolderDetailsToDBOptional(object: DBXTeamLogPaperContentRemoveFromFolderDetails?)
    -> DBTEAMLOGPaperContentRemoveFromFolderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRemoveFromFolderDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentRemoveFromFolderDetailsToDB(object: DBXTeamLogPaperContentRemoveFromFolderDetails)
    -> DBTEAMLOGPaperContentRemoveFromFolderDetails {
    DBTEAMLOGPaperContentRemoveFromFolderDetails(
        eventUuid: object.eventUuid,
        targetAssetIndex: object.targetAssetIndex,
        parentAssetIndex: object.parentAssetIndex
    )
}

func mapDBXTeamLogPaperContentRemoveFromFolderTypeToDBOptional(object: DBXTeamLogPaperContentRemoveFromFolderType?)
    -> DBTEAMLOGPaperContentRemoveFromFolderType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRemoveFromFolderTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentRemoveFromFolderTypeToDB(object: DBXTeamLogPaperContentRemoveFromFolderType) -> DBTEAMLOGPaperContentRemoveFromFolderType {
    DBTEAMLOGPaperContentRemoveFromFolderType(description_: object.description_)
}

func mapDBXTeamLogPaperContentRemoveMemberDetailsToDBOptional(object: DBXTeamLogPaperContentRemoveMemberDetails?) -> DBTEAMLOGPaperContentRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRemoveMemberDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentRemoveMemberDetailsToDB(object: DBXTeamLogPaperContentRemoveMemberDetails) -> DBTEAMLOGPaperContentRemoveMemberDetails {
    DBTEAMLOGPaperContentRemoveMemberDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentRemoveMemberTypeToDBOptional(object: DBXTeamLogPaperContentRemoveMemberType?) -> DBTEAMLOGPaperContentRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRemoveMemberTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentRemoveMemberTypeToDB(object: DBXTeamLogPaperContentRemoveMemberType) -> DBTEAMLOGPaperContentRemoveMemberType {
    DBTEAMLOGPaperContentRemoveMemberType(description_: object.description_)
}

func mapDBXTeamLogPaperContentRenameDetailsToDBOptional(object: DBXTeamLogPaperContentRenameDetails?) -> DBTEAMLOGPaperContentRenameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRenameDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentRenameDetailsToDB(object: DBXTeamLogPaperContentRenameDetails) -> DBTEAMLOGPaperContentRenameDetails {
    DBTEAMLOGPaperContentRenameDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentRenameTypeToDBOptional(object: DBXTeamLogPaperContentRenameType?) -> DBTEAMLOGPaperContentRenameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRenameTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentRenameTypeToDB(object: DBXTeamLogPaperContentRenameType) -> DBTEAMLOGPaperContentRenameType {
    DBTEAMLOGPaperContentRenameType(description_: object.description_)
}

func mapDBXTeamLogPaperContentRestoreDetailsToDBOptional(object: DBXTeamLogPaperContentRestoreDetails?) -> DBTEAMLOGPaperContentRestoreDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRestoreDetailsToDB(object: object)
}

func mapDBXTeamLogPaperContentRestoreDetailsToDB(object: DBXTeamLogPaperContentRestoreDetails) -> DBTEAMLOGPaperContentRestoreDetails {
    DBTEAMLOGPaperContentRestoreDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperContentRestoreTypeToDBOptional(object: DBXTeamLogPaperContentRestoreType?) -> DBTEAMLOGPaperContentRestoreType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperContentRestoreTypeToDB(object: object)
}

func mapDBXTeamLogPaperContentRestoreTypeToDB(object: DBXTeamLogPaperContentRestoreType) -> DBTEAMLOGPaperContentRestoreType {
    DBTEAMLOGPaperContentRestoreType(description_: object.description_)
}

func mapDBXTeamLogPaperDefaultFolderPolicyToDBOptional(object: DBXTeamLogPaperDefaultFolderPolicy?) -> DBTEAMLOGPaperDefaultFolderPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDefaultFolderPolicyToDB(object: object)
}

func mapDBXTeamLogPaperDefaultFolderPolicyToDB(object: DBXTeamLogPaperDefaultFolderPolicy) -> DBTEAMLOGPaperDefaultFolderPolicy {
    if object.asEveryoneInTeam != nil {
        return DBTEAMLOGPaperDefaultFolderPolicy(everyoneInTeam: ())
    }
    if object.asInviteOnly != nil {
        return DBTEAMLOGPaperDefaultFolderPolicy(inviteOnly: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPaperDefaultFolderPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPaperDefaultFolderPolicyChangedDetailsToDBOptional(object: DBXTeamLogPaperDefaultFolderPolicyChangedDetails?)
    -> DBTEAMLOGPaperDefaultFolderPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDefaultFolderPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDefaultFolderPolicyChangedDetailsToDB(object: DBXTeamLogPaperDefaultFolderPolicyChangedDetails)
    -> DBTEAMLOGPaperDefaultFolderPolicyChangedDetails {
    DBTEAMLOGPaperDefaultFolderPolicyChangedDetails(
        dNewValue: mapDBXTeamLogPaperDefaultFolderPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogPaperDefaultFolderPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogPaperDefaultFolderPolicyChangedTypeToDBOptional(object: DBXTeamLogPaperDefaultFolderPolicyChangedType?)
    -> DBTEAMLOGPaperDefaultFolderPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDefaultFolderPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDefaultFolderPolicyChangedTypeToDB(object: DBXTeamLogPaperDefaultFolderPolicyChangedType)
    -> DBTEAMLOGPaperDefaultFolderPolicyChangedType {
    DBTEAMLOGPaperDefaultFolderPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogPaperDesktopPolicyToDBOptional(object: DBXTeamLogPaperDesktopPolicy?) -> DBTEAMLOGPaperDesktopPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDesktopPolicyToDB(object: object)
}

func mapDBXTeamLogPaperDesktopPolicyToDB(object: DBXTeamLogPaperDesktopPolicy) -> DBTEAMLOGPaperDesktopPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGPaperDesktopPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGPaperDesktopPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPaperDesktopPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPaperDesktopPolicyChangedDetailsToDBOptional(object: DBXTeamLogPaperDesktopPolicyChangedDetails?)
    -> DBTEAMLOGPaperDesktopPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDesktopPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDesktopPolicyChangedDetailsToDB(object: DBXTeamLogPaperDesktopPolicyChangedDetails) -> DBTEAMLOGPaperDesktopPolicyChangedDetails {
    DBTEAMLOGPaperDesktopPolicyChangedDetails(
        dNewValue: mapDBXTeamLogPaperDesktopPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogPaperDesktopPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogPaperDesktopPolicyChangedTypeToDBOptional(object: DBXTeamLogPaperDesktopPolicyChangedType?) -> DBTEAMLOGPaperDesktopPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDesktopPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDesktopPolicyChangedTypeToDB(object: DBXTeamLogPaperDesktopPolicyChangedType) -> DBTEAMLOGPaperDesktopPolicyChangedType {
    DBTEAMLOGPaperDesktopPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocAddCommentDetailsToDBOptional(object: DBXTeamLogPaperDocAddCommentDetails?) -> DBTEAMLOGPaperDocAddCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocAddCommentDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocAddCommentDetailsToDB(object: DBXTeamLogPaperDocAddCommentDetails) -> DBTEAMLOGPaperDocAddCommentDetails {
    DBTEAMLOGPaperDocAddCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogPaperDocAddCommentTypeToDBOptional(object: DBXTeamLogPaperDocAddCommentType?) -> DBTEAMLOGPaperDocAddCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocAddCommentTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocAddCommentTypeToDB(object: DBXTeamLogPaperDocAddCommentType) -> DBTEAMLOGPaperDocAddCommentType {
    DBTEAMLOGPaperDocAddCommentType(description_: object.description_)
}

func mapDBXTeamLogPaperDocChangeMemberRoleDetailsToDBOptional(object: DBXTeamLogPaperDocChangeMemberRoleDetails?) -> DBTEAMLOGPaperDocChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeMemberRoleDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeMemberRoleDetailsToDB(object: DBXTeamLogPaperDocChangeMemberRoleDetails) -> DBTEAMLOGPaperDocChangeMemberRoleDetails {
    DBTEAMLOGPaperDocChangeMemberRoleDetails(eventUuid: object.eventUuid, accessType: mapDBXTeamLogPaperAccessTypeToDB(object: object.accessType))
}

func mapDBXTeamLogPaperDocChangeMemberRoleTypeToDBOptional(object: DBXTeamLogPaperDocChangeMemberRoleType?) -> DBTEAMLOGPaperDocChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeMemberRoleTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeMemberRoleTypeToDB(object: DBXTeamLogPaperDocChangeMemberRoleType) -> DBTEAMLOGPaperDocChangeMemberRoleType {
    DBTEAMLOGPaperDocChangeMemberRoleType(description_: object.description_)
}

func mapDBXTeamLogPaperDocChangeSharingPolicyDetailsToDBOptional(object: DBXTeamLogPaperDocChangeSharingPolicyDetails?)
    -> DBTEAMLOGPaperDocChangeSharingPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeSharingPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeSharingPolicyDetailsToDB(object: DBXTeamLogPaperDocChangeSharingPolicyDetails) -> DBTEAMLOGPaperDocChangeSharingPolicyDetails {
    DBTEAMLOGPaperDocChangeSharingPolicyDetails(
        eventUuid: object.eventUuid,
        publicSharingPolicy: object.publicSharingPolicy,
        teamSharingPolicy: object.teamSharingPolicy
    )
}

func mapDBXTeamLogPaperDocChangeSharingPolicyTypeToDBOptional(object: DBXTeamLogPaperDocChangeSharingPolicyType?) -> DBTEAMLOGPaperDocChangeSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeSharingPolicyTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeSharingPolicyTypeToDB(object: DBXTeamLogPaperDocChangeSharingPolicyType) -> DBTEAMLOGPaperDocChangeSharingPolicyType {
    DBTEAMLOGPaperDocChangeSharingPolicyType(description_: object.description_)
}

func mapDBXTeamLogPaperDocChangeSubscriptionDetailsToDBOptional(object: DBXTeamLogPaperDocChangeSubscriptionDetails?)
    -> DBTEAMLOGPaperDocChangeSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeSubscriptionDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeSubscriptionDetailsToDB(object: DBXTeamLogPaperDocChangeSubscriptionDetails) -> DBTEAMLOGPaperDocChangeSubscriptionDetails {
    DBTEAMLOGPaperDocChangeSubscriptionDetails(
        eventUuid: object.eventUuid,
        dNewSubscriptionLevel: object.newSubscriptionLevel,
        previousSubscriptionLevel: object.previousSubscriptionLevel
    )
}

func mapDBXTeamLogPaperDocChangeSubscriptionTypeToDBOptional(object: DBXTeamLogPaperDocChangeSubscriptionType?) -> DBTEAMLOGPaperDocChangeSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocChangeSubscriptionTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocChangeSubscriptionTypeToDB(object: DBXTeamLogPaperDocChangeSubscriptionType) -> DBTEAMLOGPaperDocChangeSubscriptionType {
    DBTEAMLOGPaperDocChangeSubscriptionType(description_: object.description_)
}

func mapDBXTeamLogPaperDocDeleteCommentDetailsToDBOptional(object: DBXTeamLogPaperDocDeleteCommentDetails?) -> DBTEAMLOGPaperDocDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDeleteCommentDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocDeleteCommentDetailsToDB(object: DBXTeamLogPaperDocDeleteCommentDetails) -> DBTEAMLOGPaperDocDeleteCommentDetails {
    DBTEAMLOGPaperDocDeleteCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogPaperDocDeleteCommentTypeToDBOptional(object: DBXTeamLogPaperDocDeleteCommentType?) -> DBTEAMLOGPaperDocDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDeleteCommentTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocDeleteCommentTypeToDB(object: DBXTeamLogPaperDocDeleteCommentType) -> DBTEAMLOGPaperDocDeleteCommentType {
    DBTEAMLOGPaperDocDeleteCommentType(description_: object.description_)
}

func mapDBXTeamLogPaperDocDeletedDetailsToDBOptional(object: DBXTeamLogPaperDocDeletedDetails?) -> DBTEAMLOGPaperDocDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDeletedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocDeletedDetailsToDB(object: DBXTeamLogPaperDocDeletedDetails) -> DBTEAMLOGPaperDocDeletedDetails {
    DBTEAMLOGPaperDocDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocDeletedTypeToDBOptional(object: DBXTeamLogPaperDocDeletedType?) -> DBTEAMLOGPaperDocDeletedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDeletedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocDeletedTypeToDB(object: DBXTeamLogPaperDocDeletedType) -> DBTEAMLOGPaperDocDeletedType {
    DBTEAMLOGPaperDocDeletedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocDownloadDetailsToDBOptional(object: DBXTeamLogPaperDocDownloadDetails?) -> DBTEAMLOGPaperDocDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocDownloadDetailsToDB(object: DBXTeamLogPaperDocDownloadDetails) -> DBTEAMLOGPaperDocDownloadDetails {
    DBTEAMLOGPaperDocDownloadDetails(eventUuid: object.eventUuid, exportFileFormat: mapDBXTeamLogPaperDownloadFormatToDB(object: object.exportFileFormat))
}

func mapDBXTeamLogPaperDocDownloadTypeToDBOptional(object: DBXTeamLogPaperDocDownloadType?) -> DBTEAMLOGPaperDocDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocDownloadTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocDownloadTypeToDB(object: DBXTeamLogPaperDocDownloadType) -> DBTEAMLOGPaperDocDownloadType {
    DBTEAMLOGPaperDocDownloadType(description_: object.description_)
}

func mapDBXTeamLogPaperDocEditCommentDetailsToDBOptional(object: DBXTeamLogPaperDocEditCommentDetails?) -> DBTEAMLOGPaperDocEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocEditCommentDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocEditCommentDetailsToDB(object: DBXTeamLogPaperDocEditCommentDetails) -> DBTEAMLOGPaperDocEditCommentDetails {
    DBTEAMLOGPaperDocEditCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogPaperDocEditCommentTypeToDBOptional(object: DBXTeamLogPaperDocEditCommentType?) -> DBTEAMLOGPaperDocEditCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocEditCommentTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocEditCommentTypeToDB(object: DBXTeamLogPaperDocEditCommentType) -> DBTEAMLOGPaperDocEditCommentType {
    DBTEAMLOGPaperDocEditCommentType(description_: object.description_)
}

func mapDBXTeamLogPaperDocEditDetailsToDBOptional(object: DBXTeamLogPaperDocEditDetails?) -> DBTEAMLOGPaperDocEditDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocEditDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocEditDetailsToDB(object: DBXTeamLogPaperDocEditDetails) -> DBTEAMLOGPaperDocEditDetails {
    DBTEAMLOGPaperDocEditDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocEditTypeToDBOptional(object: DBXTeamLogPaperDocEditType?) -> DBTEAMLOGPaperDocEditType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocEditTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocEditTypeToDB(object: DBXTeamLogPaperDocEditType) -> DBTEAMLOGPaperDocEditType {
    DBTEAMLOGPaperDocEditType(description_: object.description_)
}

func mapDBXTeamLogPaperDocFollowedDetailsToDBOptional(object: DBXTeamLogPaperDocFollowedDetails?) -> DBTEAMLOGPaperDocFollowedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocFollowedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocFollowedDetailsToDB(object: DBXTeamLogPaperDocFollowedDetails) -> DBTEAMLOGPaperDocFollowedDetails {
    DBTEAMLOGPaperDocFollowedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocFollowedTypeToDBOptional(object: DBXTeamLogPaperDocFollowedType?) -> DBTEAMLOGPaperDocFollowedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocFollowedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocFollowedTypeToDB(object: DBXTeamLogPaperDocFollowedType) -> DBTEAMLOGPaperDocFollowedType {
    DBTEAMLOGPaperDocFollowedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocMentionDetailsToDBOptional(object: DBXTeamLogPaperDocMentionDetails?) -> DBTEAMLOGPaperDocMentionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocMentionDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocMentionDetailsToDB(object: DBXTeamLogPaperDocMentionDetails) -> DBTEAMLOGPaperDocMentionDetails {
    DBTEAMLOGPaperDocMentionDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocMentionTypeToDBOptional(object: DBXTeamLogPaperDocMentionType?) -> DBTEAMLOGPaperDocMentionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocMentionTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocMentionTypeToDB(object: DBXTeamLogPaperDocMentionType) -> DBTEAMLOGPaperDocMentionType {
    DBTEAMLOGPaperDocMentionType(description_: object.description_)
}

func mapDBXTeamLogPaperDocOwnershipChangedDetailsToDBOptional(object: DBXTeamLogPaperDocOwnershipChangedDetails?) -> DBTEAMLOGPaperDocOwnershipChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocOwnershipChangedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocOwnershipChangedDetailsToDB(object: DBXTeamLogPaperDocOwnershipChangedDetails) -> DBTEAMLOGPaperDocOwnershipChangedDetails {
    DBTEAMLOGPaperDocOwnershipChangedDetails(eventUuid: object.eventUuid, dNewOwnerUserId: object.newOwnerUserId, oldOwnerUserId: object.oldOwnerUserId)
}

func mapDBXTeamLogPaperDocOwnershipChangedTypeToDBOptional(object: DBXTeamLogPaperDocOwnershipChangedType?) -> DBTEAMLOGPaperDocOwnershipChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocOwnershipChangedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocOwnershipChangedTypeToDB(object: DBXTeamLogPaperDocOwnershipChangedType) -> DBTEAMLOGPaperDocOwnershipChangedType {
    DBTEAMLOGPaperDocOwnershipChangedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocRequestAccessDetailsToDBOptional(object: DBXTeamLogPaperDocRequestAccessDetails?) -> DBTEAMLOGPaperDocRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocRequestAccessDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocRequestAccessDetailsToDB(object: DBXTeamLogPaperDocRequestAccessDetails) -> DBTEAMLOGPaperDocRequestAccessDetails {
    DBTEAMLOGPaperDocRequestAccessDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocRequestAccessTypeToDBOptional(object: DBXTeamLogPaperDocRequestAccessType?) -> DBTEAMLOGPaperDocRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocRequestAccessTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocRequestAccessTypeToDB(object: DBXTeamLogPaperDocRequestAccessType) -> DBTEAMLOGPaperDocRequestAccessType {
    DBTEAMLOGPaperDocRequestAccessType(description_: object.description_)
}

func mapDBXTeamLogPaperDocResolveCommentDetailsToDBOptional(object: DBXTeamLogPaperDocResolveCommentDetails?) -> DBTEAMLOGPaperDocResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocResolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocResolveCommentDetailsToDB(object: DBXTeamLogPaperDocResolveCommentDetails) -> DBTEAMLOGPaperDocResolveCommentDetails {
    DBTEAMLOGPaperDocResolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogPaperDocResolveCommentTypeToDBOptional(object: DBXTeamLogPaperDocResolveCommentType?) -> DBTEAMLOGPaperDocResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocResolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocResolveCommentTypeToDB(object: DBXTeamLogPaperDocResolveCommentType) -> DBTEAMLOGPaperDocResolveCommentType {
    DBTEAMLOGPaperDocResolveCommentType(description_: object.description_)
}

func mapDBXTeamLogPaperDocRevertDetailsToDBOptional(object: DBXTeamLogPaperDocRevertDetails?) -> DBTEAMLOGPaperDocRevertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocRevertDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocRevertDetailsToDB(object: DBXTeamLogPaperDocRevertDetails) -> DBTEAMLOGPaperDocRevertDetails {
    DBTEAMLOGPaperDocRevertDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocRevertTypeToDBOptional(object: DBXTeamLogPaperDocRevertType?) -> DBTEAMLOGPaperDocRevertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocRevertTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocRevertTypeToDB(object: DBXTeamLogPaperDocRevertType) -> DBTEAMLOGPaperDocRevertType {
    DBTEAMLOGPaperDocRevertType(description_: object.description_)
}

func mapDBXTeamLogPaperDocSlackShareDetailsToDBOptional(object: DBXTeamLogPaperDocSlackShareDetails?) -> DBTEAMLOGPaperDocSlackShareDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocSlackShareDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocSlackShareDetailsToDB(object: DBXTeamLogPaperDocSlackShareDetails) -> DBTEAMLOGPaperDocSlackShareDetails {
    DBTEAMLOGPaperDocSlackShareDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocSlackShareTypeToDBOptional(object: DBXTeamLogPaperDocSlackShareType?) -> DBTEAMLOGPaperDocSlackShareType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocSlackShareTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocSlackShareTypeToDB(object: DBXTeamLogPaperDocSlackShareType) -> DBTEAMLOGPaperDocSlackShareType {
    DBTEAMLOGPaperDocSlackShareType(description_: object.description_)
}

func mapDBXTeamLogPaperDocTeamInviteDetailsToDBOptional(object: DBXTeamLogPaperDocTeamInviteDetails?) -> DBTEAMLOGPaperDocTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocTeamInviteDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocTeamInviteDetailsToDB(object: DBXTeamLogPaperDocTeamInviteDetails) -> DBTEAMLOGPaperDocTeamInviteDetails {
    DBTEAMLOGPaperDocTeamInviteDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocTeamInviteTypeToDBOptional(object: DBXTeamLogPaperDocTeamInviteType?) -> DBTEAMLOGPaperDocTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocTeamInviteTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocTeamInviteTypeToDB(object: DBXTeamLogPaperDocTeamInviteType) -> DBTEAMLOGPaperDocTeamInviteType {
    DBTEAMLOGPaperDocTeamInviteType(description_: object.description_)
}

func mapDBXTeamLogPaperDocTrashedDetailsToDBOptional(object: DBXTeamLogPaperDocTrashedDetails?) -> DBTEAMLOGPaperDocTrashedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocTrashedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocTrashedDetailsToDB(object: DBXTeamLogPaperDocTrashedDetails) -> DBTEAMLOGPaperDocTrashedDetails {
    DBTEAMLOGPaperDocTrashedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocTrashedTypeToDBOptional(object: DBXTeamLogPaperDocTrashedType?) -> DBTEAMLOGPaperDocTrashedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocTrashedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocTrashedTypeToDB(object: DBXTeamLogPaperDocTrashedType) -> DBTEAMLOGPaperDocTrashedType {
    DBTEAMLOGPaperDocTrashedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocUnresolveCommentDetailsToDBOptional(object: DBXTeamLogPaperDocUnresolveCommentDetails?) -> DBTEAMLOGPaperDocUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocUnresolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocUnresolveCommentDetailsToDB(object: DBXTeamLogPaperDocUnresolveCommentDetails) -> DBTEAMLOGPaperDocUnresolveCommentDetails {
    DBTEAMLOGPaperDocUnresolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogPaperDocUnresolveCommentTypeToDBOptional(object: DBXTeamLogPaperDocUnresolveCommentType?) -> DBTEAMLOGPaperDocUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocUnresolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocUnresolveCommentTypeToDB(object: DBXTeamLogPaperDocUnresolveCommentType) -> DBTEAMLOGPaperDocUnresolveCommentType {
    DBTEAMLOGPaperDocUnresolveCommentType(description_: object.description_)
}

func mapDBXTeamLogPaperDocUntrashedDetailsToDBOptional(object: DBXTeamLogPaperDocUntrashedDetails?) -> DBTEAMLOGPaperDocUntrashedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocUntrashedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocUntrashedDetailsToDB(object: DBXTeamLogPaperDocUntrashedDetails) -> DBTEAMLOGPaperDocUntrashedDetails {
    DBTEAMLOGPaperDocUntrashedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocUntrashedTypeToDBOptional(object: DBXTeamLogPaperDocUntrashedType?) -> DBTEAMLOGPaperDocUntrashedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocUntrashedTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocUntrashedTypeToDB(object: DBXTeamLogPaperDocUntrashedType) -> DBTEAMLOGPaperDocUntrashedType {
    DBTEAMLOGPaperDocUntrashedType(description_: object.description_)
}

func mapDBXTeamLogPaperDocViewDetailsToDBOptional(object: DBXTeamLogPaperDocViewDetails?) -> DBTEAMLOGPaperDocViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocViewDetailsToDB(object: object)
}

func mapDBXTeamLogPaperDocViewDetailsToDB(object: DBXTeamLogPaperDocViewDetails) -> DBTEAMLOGPaperDocViewDetails {
    DBTEAMLOGPaperDocViewDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperDocViewTypeToDBOptional(object: DBXTeamLogPaperDocViewType?) -> DBTEAMLOGPaperDocViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocViewTypeToDB(object: object)
}

func mapDBXTeamLogPaperDocViewTypeToDB(object: DBXTeamLogPaperDocViewType) -> DBTEAMLOGPaperDocViewType {
    DBTEAMLOGPaperDocViewType(description_: object.description_)
}

func mapDBXTeamLogPaperDocumentLogInfoToDBOptional(object: DBXTeamLogPaperDocumentLogInfo?) -> DBTEAMLOGPaperDocumentLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDocumentLogInfoToDB(object: object)
}

func mapDBXTeamLogPaperDocumentLogInfoToDB(object: DBXTeamLogPaperDocumentLogInfo) -> DBTEAMLOGPaperDocumentLogInfo {
    DBTEAMLOGPaperDocumentLogInfo(docId: object.docId, docTitle: object.docTitle)
}

func mapDBXTeamLogPaperDownloadFormatToDBOptional(object: DBXTeamLogPaperDownloadFormat?) -> DBTEAMLOGPaperDownloadFormat? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperDownloadFormatToDB(object: object)
}

func mapDBXTeamLogPaperDownloadFormatToDB(object: DBXTeamLogPaperDownloadFormat) -> DBTEAMLOGPaperDownloadFormat {
    if object.asDocx != nil {
        return DBTEAMLOGPaperDownloadFormat(docx: ())
    }
    if object.asHtml != nil {
        return DBTEAMLOGPaperDownloadFormat(html: ())
    }
    if object.asMarkdown != nil {
        return DBTEAMLOGPaperDownloadFormat(markdown: ())
    }
    if object.asPdf != nil {
        return DBTEAMLOGPaperDownloadFormat(pdf: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPaperDownloadFormat(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPaperEnabledUsersGroupAdditionDetailsToDBOptional(object: DBXTeamLogPaperEnabledUsersGroupAdditionDetails?)
    -> DBTEAMLOGPaperEnabledUsersGroupAdditionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperEnabledUsersGroupAdditionDetailsToDB(object: object)
}

func mapDBXTeamLogPaperEnabledUsersGroupAdditionDetailsToDB(object: DBXTeamLogPaperEnabledUsersGroupAdditionDetails)
    -> DBTEAMLOGPaperEnabledUsersGroupAdditionDetails {
    DBTEAMLOGPaperEnabledUsersGroupAdditionDetails(default: ())
}

func mapDBXTeamLogPaperEnabledUsersGroupAdditionTypeToDBOptional(object: DBXTeamLogPaperEnabledUsersGroupAdditionType?)
    -> DBTEAMLOGPaperEnabledUsersGroupAdditionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperEnabledUsersGroupAdditionTypeToDB(object: object)
}

func mapDBXTeamLogPaperEnabledUsersGroupAdditionTypeToDB(object: DBXTeamLogPaperEnabledUsersGroupAdditionType) -> DBTEAMLOGPaperEnabledUsersGroupAdditionType {
    DBTEAMLOGPaperEnabledUsersGroupAdditionType(description_: object.description_)
}

func mapDBXTeamLogPaperEnabledUsersGroupRemovalDetailsToDBOptional(object: DBXTeamLogPaperEnabledUsersGroupRemovalDetails?)
    -> DBTEAMLOGPaperEnabledUsersGroupRemovalDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperEnabledUsersGroupRemovalDetailsToDB(object: object)
}

func mapDBXTeamLogPaperEnabledUsersGroupRemovalDetailsToDB(object: DBXTeamLogPaperEnabledUsersGroupRemovalDetails)
    -> DBTEAMLOGPaperEnabledUsersGroupRemovalDetails {
    DBTEAMLOGPaperEnabledUsersGroupRemovalDetails(default: ())
}

func mapDBXTeamLogPaperEnabledUsersGroupRemovalTypeToDBOptional(object: DBXTeamLogPaperEnabledUsersGroupRemovalType?)
    -> DBTEAMLOGPaperEnabledUsersGroupRemovalType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperEnabledUsersGroupRemovalTypeToDB(object: object)
}

func mapDBXTeamLogPaperEnabledUsersGroupRemovalTypeToDB(object: DBXTeamLogPaperEnabledUsersGroupRemovalType) -> DBTEAMLOGPaperEnabledUsersGroupRemovalType {
    DBTEAMLOGPaperEnabledUsersGroupRemovalType(description_: object.description_)
}

func mapDBXTeamLogPaperExternalViewAllowDetailsToDBOptional(object: DBXTeamLogPaperExternalViewAllowDetails?) -> DBTEAMLOGPaperExternalViewAllowDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewAllowDetailsToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewAllowDetailsToDB(object: DBXTeamLogPaperExternalViewAllowDetails) -> DBTEAMLOGPaperExternalViewAllowDetails {
    DBTEAMLOGPaperExternalViewAllowDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperExternalViewAllowTypeToDBOptional(object: DBXTeamLogPaperExternalViewAllowType?) -> DBTEAMLOGPaperExternalViewAllowType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewAllowTypeToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewAllowTypeToDB(object: DBXTeamLogPaperExternalViewAllowType) -> DBTEAMLOGPaperExternalViewAllowType {
    DBTEAMLOGPaperExternalViewAllowType(description_: object.description_)
}

func mapDBXTeamLogPaperExternalViewDefaultTeamDetailsToDBOptional(object: DBXTeamLogPaperExternalViewDefaultTeamDetails?)
    -> DBTEAMLOGPaperExternalViewDefaultTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewDefaultTeamDetailsToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewDefaultTeamDetailsToDB(object: DBXTeamLogPaperExternalViewDefaultTeamDetails)
    -> DBTEAMLOGPaperExternalViewDefaultTeamDetails {
    DBTEAMLOGPaperExternalViewDefaultTeamDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperExternalViewDefaultTeamTypeToDBOptional(object: DBXTeamLogPaperExternalViewDefaultTeamType?)
    -> DBTEAMLOGPaperExternalViewDefaultTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewDefaultTeamTypeToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewDefaultTeamTypeToDB(object: DBXTeamLogPaperExternalViewDefaultTeamType) -> DBTEAMLOGPaperExternalViewDefaultTeamType {
    DBTEAMLOGPaperExternalViewDefaultTeamType(description_: object.description_)
}

func mapDBXTeamLogPaperExternalViewForbidDetailsToDBOptional(object: DBXTeamLogPaperExternalViewForbidDetails?) -> DBTEAMLOGPaperExternalViewForbidDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewForbidDetailsToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewForbidDetailsToDB(object: DBXTeamLogPaperExternalViewForbidDetails) -> DBTEAMLOGPaperExternalViewForbidDetails {
    DBTEAMLOGPaperExternalViewForbidDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperExternalViewForbidTypeToDBOptional(object: DBXTeamLogPaperExternalViewForbidType?) -> DBTEAMLOGPaperExternalViewForbidType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperExternalViewForbidTypeToDB(object: object)
}

func mapDBXTeamLogPaperExternalViewForbidTypeToDB(object: DBXTeamLogPaperExternalViewForbidType) -> DBTEAMLOGPaperExternalViewForbidType {
    DBTEAMLOGPaperExternalViewForbidType(description_: object.description_)
}

func mapDBXTeamLogPaperFolderChangeSubscriptionDetailsToDBOptional(object: DBXTeamLogPaperFolderChangeSubscriptionDetails?)
    -> DBTEAMLOGPaperFolderChangeSubscriptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderChangeSubscriptionDetailsToDB(object: object)
}

func mapDBXTeamLogPaperFolderChangeSubscriptionDetailsToDB(object: DBXTeamLogPaperFolderChangeSubscriptionDetails)
    -> DBTEAMLOGPaperFolderChangeSubscriptionDetails {
    DBTEAMLOGPaperFolderChangeSubscriptionDetails(
        eventUuid: object.eventUuid,
        dNewSubscriptionLevel: object.newSubscriptionLevel,
        previousSubscriptionLevel: object.previousSubscriptionLevel
    )
}

func mapDBXTeamLogPaperFolderChangeSubscriptionTypeToDBOptional(object: DBXTeamLogPaperFolderChangeSubscriptionType?)
    -> DBTEAMLOGPaperFolderChangeSubscriptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderChangeSubscriptionTypeToDB(object: object)
}

func mapDBXTeamLogPaperFolderChangeSubscriptionTypeToDB(object: DBXTeamLogPaperFolderChangeSubscriptionType) -> DBTEAMLOGPaperFolderChangeSubscriptionType {
    DBTEAMLOGPaperFolderChangeSubscriptionType(description_: object.description_)
}

func mapDBXTeamLogPaperFolderDeletedDetailsToDBOptional(object: DBXTeamLogPaperFolderDeletedDetails?) -> DBTEAMLOGPaperFolderDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderDeletedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperFolderDeletedDetailsToDB(object: DBXTeamLogPaperFolderDeletedDetails) -> DBTEAMLOGPaperFolderDeletedDetails {
    DBTEAMLOGPaperFolderDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperFolderDeletedTypeToDBOptional(object: DBXTeamLogPaperFolderDeletedType?) -> DBTEAMLOGPaperFolderDeletedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderDeletedTypeToDB(object: object)
}

func mapDBXTeamLogPaperFolderDeletedTypeToDB(object: DBXTeamLogPaperFolderDeletedType) -> DBTEAMLOGPaperFolderDeletedType {
    DBTEAMLOGPaperFolderDeletedType(description_: object.description_)
}

func mapDBXTeamLogPaperFolderFollowedDetailsToDBOptional(object: DBXTeamLogPaperFolderFollowedDetails?) -> DBTEAMLOGPaperFolderFollowedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderFollowedDetailsToDB(object: object)
}

func mapDBXTeamLogPaperFolderFollowedDetailsToDB(object: DBXTeamLogPaperFolderFollowedDetails) -> DBTEAMLOGPaperFolderFollowedDetails {
    DBTEAMLOGPaperFolderFollowedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperFolderFollowedTypeToDBOptional(object: DBXTeamLogPaperFolderFollowedType?) -> DBTEAMLOGPaperFolderFollowedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderFollowedTypeToDB(object: object)
}

func mapDBXTeamLogPaperFolderFollowedTypeToDB(object: DBXTeamLogPaperFolderFollowedType) -> DBTEAMLOGPaperFolderFollowedType {
    DBTEAMLOGPaperFolderFollowedType(description_: object.description_)
}

func mapDBXTeamLogPaperFolderLogInfoToDBOptional(object: DBXTeamLogPaperFolderLogInfo?) -> DBTEAMLOGPaperFolderLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderLogInfoToDB(object: object)
}

func mapDBXTeamLogPaperFolderLogInfoToDB(object: DBXTeamLogPaperFolderLogInfo) -> DBTEAMLOGPaperFolderLogInfo {
    DBTEAMLOGPaperFolderLogInfo(folderId: object.folderId, folderName: object.folderName)
}

func mapDBXTeamLogPaperFolderTeamInviteDetailsToDBOptional(object: DBXTeamLogPaperFolderTeamInviteDetails?) -> DBTEAMLOGPaperFolderTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderTeamInviteDetailsToDB(object: object)
}

func mapDBXTeamLogPaperFolderTeamInviteDetailsToDB(object: DBXTeamLogPaperFolderTeamInviteDetails) -> DBTEAMLOGPaperFolderTeamInviteDetails {
    DBTEAMLOGPaperFolderTeamInviteDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperFolderTeamInviteTypeToDBOptional(object: DBXTeamLogPaperFolderTeamInviteType?) -> DBTEAMLOGPaperFolderTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperFolderTeamInviteTypeToDB(object: object)
}

func mapDBXTeamLogPaperFolderTeamInviteTypeToDB(object: DBXTeamLogPaperFolderTeamInviteType) -> DBTEAMLOGPaperFolderTeamInviteType {
    DBTEAMLOGPaperFolderTeamInviteType(description_: object.description_)
}

func mapDBXTeamLogPaperMemberPolicyToDBOptional(object: DBXTeamLogPaperMemberPolicy?) -> DBTEAMLOGPaperMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperMemberPolicyToDB(object: object)
}

func mapDBXTeamLogPaperMemberPolicyToDB(object: DBXTeamLogPaperMemberPolicy) -> DBTEAMLOGPaperMemberPolicy {
    if object.asAnyoneWithLink != nil {
        return DBTEAMLOGPaperMemberPolicy(anyoneWithLink: ())
    }
    if object.asOnlyTeam != nil {
        return DBTEAMLOGPaperMemberPolicy(onlyTeam: ())
    }
    if object.asTeamAndExplicitlyShared != nil {
        return DBTEAMLOGPaperMemberPolicy(teamAndExplicitlyShared: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPaperMemberPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPaperPublishedLinkChangePermissionDetailsToDBOptional(object: DBXTeamLogPaperPublishedLinkChangePermissionDetails?)
    -> DBTEAMLOGPaperPublishedLinkChangePermissionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkChangePermissionDetailsToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkChangePermissionDetailsToDB(object: DBXTeamLogPaperPublishedLinkChangePermissionDetails)
    -> DBTEAMLOGPaperPublishedLinkChangePermissionDetails {
    DBTEAMLOGPaperPublishedLinkChangePermissionDetails(
        eventUuid: object.eventUuid,
        dNewPermissionLevel: object.newPermissionLevel,
        previousPermissionLevel: object.previousPermissionLevel
    )
}

func mapDBXTeamLogPaperPublishedLinkChangePermissionTypeToDBOptional(object: DBXTeamLogPaperPublishedLinkChangePermissionType?)
    -> DBTEAMLOGPaperPublishedLinkChangePermissionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkChangePermissionTypeToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkChangePermissionTypeToDB(object: DBXTeamLogPaperPublishedLinkChangePermissionType)
    -> DBTEAMLOGPaperPublishedLinkChangePermissionType {
    DBTEAMLOGPaperPublishedLinkChangePermissionType(description_: object.description_)
}

func mapDBXTeamLogPaperPublishedLinkCreateDetailsToDBOptional(object: DBXTeamLogPaperPublishedLinkCreateDetails?) -> DBTEAMLOGPaperPublishedLinkCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkCreateDetailsToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkCreateDetailsToDB(object: DBXTeamLogPaperPublishedLinkCreateDetails) -> DBTEAMLOGPaperPublishedLinkCreateDetails {
    DBTEAMLOGPaperPublishedLinkCreateDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperPublishedLinkCreateTypeToDBOptional(object: DBXTeamLogPaperPublishedLinkCreateType?) -> DBTEAMLOGPaperPublishedLinkCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkCreateTypeToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkCreateTypeToDB(object: DBXTeamLogPaperPublishedLinkCreateType) -> DBTEAMLOGPaperPublishedLinkCreateType {
    DBTEAMLOGPaperPublishedLinkCreateType(description_: object.description_)
}

func mapDBXTeamLogPaperPublishedLinkDisabledDetailsToDBOptional(object: DBXTeamLogPaperPublishedLinkDisabledDetails?)
    -> DBTEAMLOGPaperPublishedLinkDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkDisabledDetailsToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkDisabledDetailsToDB(object: DBXTeamLogPaperPublishedLinkDisabledDetails) -> DBTEAMLOGPaperPublishedLinkDisabledDetails {
    DBTEAMLOGPaperPublishedLinkDisabledDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperPublishedLinkDisabledTypeToDBOptional(object: DBXTeamLogPaperPublishedLinkDisabledType?) -> DBTEAMLOGPaperPublishedLinkDisabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkDisabledTypeToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkDisabledTypeToDB(object: DBXTeamLogPaperPublishedLinkDisabledType) -> DBTEAMLOGPaperPublishedLinkDisabledType {
    DBTEAMLOGPaperPublishedLinkDisabledType(description_: object.description_)
}

func mapDBXTeamLogPaperPublishedLinkViewDetailsToDBOptional(object: DBXTeamLogPaperPublishedLinkViewDetails?) -> DBTEAMLOGPaperPublishedLinkViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkViewDetailsToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkViewDetailsToDB(object: DBXTeamLogPaperPublishedLinkViewDetails) -> DBTEAMLOGPaperPublishedLinkViewDetails {
    DBTEAMLOGPaperPublishedLinkViewDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogPaperPublishedLinkViewTypeToDBOptional(object: DBXTeamLogPaperPublishedLinkViewType?) -> DBTEAMLOGPaperPublishedLinkViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPaperPublishedLinkViewTypeToDB(object: object)
}

func mapDBXTeamLogPaperPublishedLinkViewTypeToDB(object: DBXTeamLogPaperPublishedLinkViewType) -> DBTEAMLOGPaperPublishedLinkViewType {
    DBTEAMLOGPaperPublishedLinkViewType(description_: object.description_)
}

func mapDBXTeamLogParticipantLogInfoToDBOptional(object: DBXTeamLogParticipantLogInfo?) -> DBTEAMLOGParticipantLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogParticipantLogInfoToDB(object: object)
}

func mapDBXTeamLogParticipantLogInfoToDB(object: DBXTeamLogParticipantLogInfo) -> DBTEAMLOGParticipantLogInfo {
    if let object = object.asGroup {
        let group = mapDBXTeamLogGroupLogInfoToDB(object: object.group)
        return DBTEAMLOGParticipantLogInfo(group: group)
    }
    if let object = object.asUser {
        let user = mapDBXTeamLogUserLogInfoToDB(object: object.user)
        return DBTEAMLOGParticipantLogInfo(user: user)
    }
    if object.asOther != nil {
        return DBTEAMLOGParticipantLogInfo(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPassPolicyToDBOptional(object: DBXTeamLogPassPolicy?) -> DBTEAMLOGPassPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPassPolicyToDB(object: object)
}

func mapDBXTeamLogPassPolicyToDB(object: DBXTeamLogPassPolicy) -> DBTEAMLOGPassPolicy {
    if object.asAllow != nil {
        return DBTEAMLOGPassPolicy(allow: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGPassPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGPassPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPassPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPasswordChangeDetailsToDBOptional(object: DBXTeamLogPasswordChangeDetails?) -> DBTEAMLOGPasswordChangeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordChangeDetailsToDB(object: object)
}

func mapDBXTeamLogPasswordChangeDetailsToDB(object: DBXTeamLogPasswordChangeDetails) -> DBTEAMLOGPasswordChangeDetails {
    DBTEAMLOGPasswordChangeDetails(default: ())
}

func mapDBXTeamLogPasswordChangeTypeToDBOptional(object: DBXTeamLogPasswordChangeType?) -> DBTEAMLOGPasswordChangeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordChangeTypeToDB(object: object)
}

func mapDBXTeamLogPasswordChangeTypeToDB(object: DBXTeamLogPasswordChangeType) -> DBTEAMLOGPasswordChangeType {
    DBTEAMLOGPasswordChangeType(description_: object.description_)
}

func mapDBXTeamLogPasswordResetAllDetailsToDBOptional(object: DBXTeamLogPasswordResetAllDetails?) -> DBTEAMLOGPasswordResetAllDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordResetAllDetailsToDB(object: object)
}

func mapDBXTeamLogPasswordResetAllDetailsToDB(object: DBXTeamLogPasswordResetAllDetails) -> DBTEAMLOGPasswordResetAllDetails {
    DBTEAMLOGPasswordResetAllDetails(default: ())
}

func mapDBXTeamLogPasswordResetAllTypeToDBOptional(object: DBXTeamLogPasswordResetAllType?) -> DBTEAMLOGPasswordResetAllType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordResetAllTypeToDB(object: object)
}

func mapDBXTeamLogPasswordResetAllTypeToDB(object: DBXTeamLogPasswordResetAllType) -> DBTEAMLOGPasswordResetAllType {
    DBTEAMLOGPasswordResetAllType(description_: object.description_)
}

func mapDBXTeamLogPasswordResetDetailsToDBOptional(object: DBXTeamLogPasswordResetDetails?) -> DBTEAMLOGPasswordResetDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordResetDetailsToDB(object: object)
}

func mapDBXTeamLogPasswordResetDetailsToDB(object: DBXTeamLogPasswordResetDetails) -> DBTEAMLOGPasswordResetDetails {
    DBTEAMLOGPasswordResetDetails(default: ())
}

func mapDBXTeamLogPasswordResetTypeToDBOptional(object: DBXTeamLogPasswordResetType?) -> DBTEAMLOGPasswordResetType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordResetTypeToDB(object: object)
}

func mapDBXTeamLogPasswordResetTypeToDB(object: DBXTeamLogPasswordResetType) -> DBTEAMLOGPasswordResetType {
    DBTEAMLOGPasswordResetType(description_: object.description_)
}

func mapDBXTeamLogPasswordStrengthRequirementsChangePolicyDetailsToDBOptional(object: DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails?)
    -> DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordStrengthRequirementsChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPasswordStrengthRequirementsChangePolicyDetailsToDB(object: DBXTeamLogPasswordStrengthRequirementsChangePolicyDetails)
    -> DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails {
    DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails(
        previousValue: mapDBXTeamPoliciesPasswordStrengthPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamPoliciesPasswordStrengthPolicyToDB(object: object.newValue)
    )
}

func mapDBXTeamLogPasswordStrengthRequirementsChangePolicyTypeToDBOptional(object: DBXTeamLogPasswordStrengthRequirementsChangePolicyType?)
    -> DBTEAMLOGPasswordStrengthRequirementsChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPasswordStrengthRequirementsChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogPasswordStrengthRequirementsChangePolicyTypeToDB(object: DBXTeamLogPasswordStrengthRequirementsChangePolicyType)
    -> DBTEAMLOGPasswordStrengthRequirementsChangePolicyType {
    DBTEAMLOGPasswordStrengthRequirementsChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogPathLogInfoToDBOptional(object: DBXTeamLogPathLogInfo?) -> DBTEAMLOGPathLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPathLogInfoToDB(object: object)
}

func mapDBXTeamLogPathLogInfoToDB(object: DBXTeamLogPathLogInfo) -> DBTEAMLOGPathLogInfo {
    DBTEAMLOGPathLogInfo(namespaceRelative: mapDBXTeamLogNamespaceRelativePathLogInfoToDB(object: object.namespaceRelative), contextual: object.contextual)
}

func mapDBXTeamLogPendingSecondaryEmailAddedDetailsToDBOptional(object: DBXTeamLogPendingSecondaryEmailAddedDetails?)
    -> DBTEAMLOGPendingSecondaryEmailAddedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPendingSecondaryEmailAddedDetailsToDB(object: object)
}

func mapDBXTeamLogPendingSecondaryEmailAddedDetailsToDB(object: DBXTeamLogPendingSecondaryEmailAddedDetails) -> DBTEAMLOGPendingSecondaryEmailAddedDetails {
    DBTEAMLOGPendingSecondaryEmailAddedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBXTeamLogPendingSecondaryEmailAddedTypeToDBOptional(object: DBXTeamLogPendingSecondaryEmailAddedType?) -> DBTEAMLOGPendingSecondaryEmailAddedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPendingSecondaryEmailAddedTypeToDB(object: object)
}

func mapDBXTeamLogPendingSecondaryEmailAddedTypeToDB(object: DBXTeamLogPendingSecondaryEmailAddedType) -> DBTEAMLOGPendingSecondaryEmailAddedType {
    DBTEAMLOGPendingSecondaryEmailAddedType(description_: object.description_)
}

func mapDBXTeamLogPermanentDeleteChangePolicyDetailsToDBOptional(object: DBXTeamLogPermanentDeleteChangePolicyDetails?)
    -> DBTEAMLOGPermanentDeleteChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPermanentDeleteChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogPermanentDeleteChangePolicyDetailsToDB(object: DBXTeamLogPermanentDeleteChangePolicyDetails) -> DBTEAMLOGPermanentDeleteChangePolicyDetails {
    DBTEAMLOGPermanentDeleteChangePolicyDetails(
        dNewValue: mapDBXTeamLogContentPermanentDeletePolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogContentPermanentDeletePolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogPermanentDeleteChangePolicyTypeToDBOptional(object: DBXTeamLogPermanentDeleteChangePolicyType?) -> DBTEAMLOGPermanentDeleteChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPermanentDeleteChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogPermanentDeleteChangePolicyTypeToDB(object: DBXTeamLogPermanentDeleteChangePolicyType) -> DBTEAMLOGPermanentDeleteChangePolicyType {
    DBTEAMLOGPermanentDeleteChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogPlacementRestrictionToDBOptional(object: DBXTeamLogPlacementRestriction?) -> DBTEAMLOGPlacementRestriction? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPlacementRestrictionToDB(object: object)
}

func mapDBXTeamLogPlacementRestrictionToDB(object: DBXTeamLogPlacementRestriction) -> DBTEAMLOGPlacementRestriction {
    if object.asAustraliaOnly != nil {
        return DBTEAMLOGPlacementRestriction(australiaOnly: ())
    }
    if object.asEuropeOnly != nil {
        return DBTEAMLOGPlacementRestriction(europeOnly: ())
    }
    if object.asJapanOnly != nil {
        return DBTEAMLOGPlacementRestriction(japanOnly: ())
    }
    if object.asNone != nil {
        return DBTEAMLOGPlacementRestriction(none: ())
    }
    if object.asUkOnly != nil {
        return DBTEAMLOGPlacementRestriction(ukOnly: ())
    }
    if object.asUsS3Only != nil {
        return DBTEAMLOGPlacementRestriction(usS3Only: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPlacementRestriction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPolicyTypeToDBOptional(object: DBXTeamLogPolicyType?) -> DBTEAMLOGPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPolicyTypeToDB(object: object)
}

func mapDBXTeamLogPolicyTypeToDB(object: DBXTeamLogPolicyType) -> DBTEAMLOGPolicyType {
    if object.asDisposition != nil {
        return DBTEAMLOGPolicyType(disposition: ())
    }
    if object.asRetention != nil {
        return DBTEAMLOGPolicyType(retention: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGPolicyType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogPrimaryTeamRequestAcceptedDetailsToDBOptional(object: DBXTeamLogPrimaryTeamRequestAcceptedDetails?)
    -> DBTEAMLOGPrimaryTeamRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPrimaryTeamRequestAcceptedDetailsToDB(object: object)
}

func mapDBXTeamLogPrimaryTeamRequestAcceptedDetailsToDB(object: DBXTeamLogPrimaryTeamRequestAcceptedDetails) -> DBTEAMLOGPrimaryTeamRequestAcceptedDetails {
    DBTEAMLOGPrimaryTeamRequestAcceptedDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogPrimaryTeamRequestCanceledDetailsToDBOptional(object: DBXTeamLogPrimaryTeamRequestCanceledDetails?)
    -> DBTEAMLOGPrimaryTeamRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPrimaryTeamRequestCanceledDetailsToDB(object: object)
}

func mapDBXTeamLogPrimaryTeamRequestCanceledDetailsToDB(object: DBXTeamLogPrimaryTeamRequestCanceledDetails) -> DBTEAMLOGPrimaryTeamRequestCanceledDetails {
    DBTEAMLOGPrimaryTeamRequestCanceledDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogPrimaryTeamRequestExpiredDetailsToDBOptional(object: DBXTeamLogPrimaryTeamRequestExpiredDetails?)
    -> DBTEAMLOGPrimaryTeamRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPrimaryTeamRequestExpiredDetailsToDB(object: object)
}

func mapDBXTeamLogPrimaryTeamRequestExpiredDetailsToDB(object: DBXTeamLogPrimaryTeamRequestExpiredDetails) -> DBTEAMLOGPrimaryTeamRequestExpiredDetails {
    DBTEAMLOGPrimaryTeamRequestExpiredDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogPrimaryTeamRequestReminderDetailsToDBOptional(object: DBXTeamLogPrimaryTeamRequestReminderDetails?)
    -> DBTEAMLOGPrimaryTeamRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogPrimaryTeamRequestReminderDetailsToDB(object: object)
}

func mapDBXTeamLogPrimaryTeamRequestReminderDetailsToDB(object: DBXTeamLogPrimaryTeamRequestReminderDetails) -> DBTEAMLOGPrimaryTeamRequestReminderDetails {
    DBTEAMLOGPrimaryTeamRequestReminderDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBXTeamLogQuickActionTypeToDBOptional(object: DBXTeamLogQuickActionType?) -> DBTEAMLOGQuickActionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogQuickActionTypeToDB(object: object)
}

func mapDBXTeamLogQuickActionTypeToDB(object: DBXTeamLogQuickActionType) -> DBTEAMLOGQuickActionType {
    if object.asDeleteSharedLink != nil {
        return DBTEAMLOGQuickActionType(deleteSharedLink: ())
    }
    if object.asResetPassword != nil {
        return DBTEAMLOGQuickActionType(resetPassword: ())
    }
    if object.asRestoreFileOrFolder != nil {
        return DBTEAMLOGQuickActionType(restoreFileOrFolder: ())
    }
    if object.asUnlinkApp != nil {
        return DBTEAMLOGQuickActionType(unlinkApp: ())
    }
    if object.asUnlinkDevice != nil {
        return DBTEAMLOGQuickActionType(unlinkDevice: ())
    }
    if object.asUnlinkSession != nil {
        return DBTEAMLOGQuickActionType(unlinkSession: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGQuickActionType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogRansomwareAlertCreateReportDetailsToDBOptional(object: DBXTeamLogRansomwareAlertCreateReportDetails?)
    -> DBTEAMLOGRansomwareAlertCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareAlertCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogRansomwareAlertCreateReportDetailsToDB(object: DBXTeamLogRansomwareAlertCreateReportDetails) -> DBTEAMLOGRansomwareAlertCreateReportDetails {
    DBTEAMLOGRansomwareAlertCreateReportDetails(default: ())
}

func mapDBXTeamLogRansomwareAlertCreateReportFailedDetailsToDBOptional(object: DBXTeamLogRansomwareAlertCreateReportFailedDetails?)
    -> DBTEAMLOGRansomwareAlertCreateReportFailedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareAlertCreateReportFailedDetailsToDB(object: object)
}

func mapDBXTeamLogRansomwareAlertCreateReportFailedDetailsToDB(object: DBXTeamLogRansomwareAlertCreateReportFailedDetails)
    -> DBTEAMLOGRansomwareAlertCreateReportFailedDetails {
    DBTEAMLOGRansomwareAlertCreateReportFailedDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogRansomwareAlertCreateReportFailedTypeToDBOptional(object: DBXTeamLogRansomwareAlertCreateReportFailedType?)
    -> DBTEAMLOGRansomwareAlertCreateReportFailedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareAlertCreateReportFailedTypeToDB(object: object)
}

func mapDBXTeamLogRansomwareAlertCreateReportFailedTypeToDB(object: DBXTeamLogRansomwareAlertCreateReportFailedType)
    -> DBTEAMLOGRansomwareAlertCreateReportFailedType {
    DBTEAMLOGRansomwareAlertCreateReportFailedType(description_: object.description_)
}

func mapDBXTeamLogRansomwareAlertCreateReportTypeToDBOptional(object: DBXTeamLogRansomwareAlertCreateReportType?) -> DBTEAMLOGRansomwareAlertCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareAlertCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogRansomwareAlertCreateReportTypeToDB(object: DBXTeamLogRansomwareAlertCreateReportType) -> DBTEAMLOGRansomwareAlertCreateReportType {
    DBTEAMLOGRansomwareAlertCreateReportType(description_: object.description_)
}

func mapDBXTeamLogRansomwareRestoreProcessCompletedDetailsToDBOptional(object: DBXTeamLogRansomwareRestoreProcessCompletedDetails?)
    -> DBTEAMLOGRansomwareRestoreProcessCompletedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareRestoreProcessCompletedDetailsToDB(object: object)
}

func mapDBXTeamLogRansomwareRestoreProcessCompletedDetailsToDB(object: DBXTeamLogRansomwareRestoreProcessCompletedDetails)
    -> DBTEAMLOGRansomwareRestoreProcessCompletedDetails {
    DBTEAMLOGRansomwareRestoreProcessCompletedDetails(
        status: object.status,
        restoredFilesCount: object.restoredFilesCount,
        restoredFilesFailedCount: object.restoredFilesFailedCount
    )
}

func mapDBXTeamLogRansomwareRestoreProcessCompletedTypeToDBOptional(object: DBXTeamLogRansomwareRestoreProcessCompletedType?)
    -> DBTEAMLOGRansomwareRestoreProcessCompletedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareRestoreProcessCompletedTypeToDB(object: object)
}

func mapDBXTeamLogRansomwareRestoreProcessCompletedTypeToDB(object: DBXTeamLogRansomwareRestoreProcessCompletedType)
    -> DBTEAMLOGRansomwareRestoreProcessCompletedType {
    DBTEAMLOGRansomwareRestoreProcessCompletedType(description_: object.description_)
}

func mapDBXTeamLogRansomwareRestoreProcessStartedDetailsToDBOptional(object: DBXTeamLogRansomwareRestoreProcessStartedDetails?)
    -> DBTEAMLOGRansomwareRestoreProcessStartedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareRestoreProcessStartedDetailsToDB(object: object)
}

func mapDBXTeamLogRansomwareRestoreProcessStartedDetailsToDB(object: DBXTeamLogRansomwareRestoreProcessStartedDetails)
    -> DBTEAMLOGRansomwareRestoreProcessStartedDetails {
    DBTEAMLOGRansomwareRestoreProcessStartedDetails(withExtension: object.extension_)
}

func mapDBXTeamLogRansomwareRestoreProcessStartedTypeToDBOptional(object: DBXTeamLogRansomwareRestoreProcessStartedType?)
    -> DBTEAMLOGRansomwareRestoreProcessStartedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRansomwareRestoreProcessStartedTypeToDB(object: object)
}

func mapDBXTeamLogRansomwareRestoreProcessStartedTypeToDB(object: DBXTeamLogRansomwareRestoreProcessStartedType)
    -> DBTEAMLOGRansomwareRestoreProcessStartedType {
    DBTEAMLOGRansomwareRestoreProcessStartedType(description_: object.description_)
}

func mapDBXTeamLogRecipientsConfigurationToDBOptional(object: DBXTeamLogRecipientsConfiguration?) -> DBTEAMLOGRecipientsConfiguration? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRecipientsConfigurationToDB(object: object)
}

func mapDBXTeamLogRecipientsConfigurationToDB(object: DBXTeamLogRecipientsConfiguration) -> DBTEAMLOGRecipientsConfiguration {
    DBTEAMLOGRecipientsConfiguration(
        recipientSettingType: mapDBXTeamLogAlertRecipientsSettingTypeToDBOptional(object: object.recipientSettingType),
        emails: object.emails,
        groups: object.groups
    )
}

func mapDBXTeamLogRelocateAssetReferencesLogInfoToDBOptional(object: DBXTeamLogRelocateAssetReferencesLogInfo?) -> DBTEAMLOGRelocateAssetReferencesLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: object)
}

func mapDBXTeamLogRelocateAssetReferencesLogInfoToDB(object: DBXTeamLogRelocateAssetReferencesLogInfo) -> DBTEAMLOGRelocateAssetReferencesLogInfo {
    DBTEAMLOGRelocateAssetReferencesLogInfo(srcAssetIndex: object.srcAssetIndex, destAssetIndex: object.destAssetIndex)
}

func mapDBXTeamLogReplayFileDeleteDetailsToDBOptional(object: DBXTeamLogReplayFileDeleteDetails?) -> DBTEAMLOGReplayFileDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogReplayFileDeleteDetailsToDB(object: DBXTeamLogReplayFileDeleteDetails) -> DBTEAMLOGReplayFileDeleteDetails {
    DBTEAMLOGReplayFileDeleteDetails(default: ())
}

func mapDBXTeamLogReplayFileDeleteTypeToDBOptional(object: DBXTeamLogReplayFileDeleteType?) -> DBTEAMLOGReplayFileDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileDeleteTypeToDB(object: object)
}

func mapDBXTeamLogReplayFileDeleteTypeToDB(object: DBXTeamLogReplayFileDeleteType) -> DBTEAMLOGReplayFileDeleteType {
    DBTEAMLOGReplayFileDeleteType(description_: object.description_)
}

func mapDBXTeamLogReplayFileSharedLinkCreatedDetailsToDBOptional(object: DBXTeamLogReplayFileSharedLinkCreatedDetails?)
    -> DBTEAMLOGReplayFileSharedLinkCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileSharedLinkCreatedDetailsToDB(object: object)
}

func mapDBXTeamLogReplayFileSharedLinkCreatedDetailsToDB(object: DBXTeamLogReplayFileSharedLinkCreatedDetails) -> DBTEAMLOGReplayFileSharedLinkCreatedDetails {
    DBTEAMLOGReplayFileSharedLinkCreatedDetails(default: ())
}

func mapDBXTeamLogReplayFileSharedLinkCreatedTypeToDBOptional(object: DBXTeamLogReplayFileSharedLinkCreatedType?) -> DBTEAMLOGReplayFileSharedLinkCreatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileSharedLinkCreatedTypeToDB(object: object)
}

func mapDBXTeamLogReplayFileSharedLinkCreatedTypeToDB(object: DBXTeamLogReplayFileSharedLinkCreatedType) -> DBTEAMLOGReplayFileSharedLinkCreatedType {
    DBTEAMLOGReplayFileSharedLinkCreatedType(description_: object.description_)
}

func mapDBXTeamLogReplayFileSharedLinkModifiedDetailsToDBOptional(object: DBXTeamLogReplayFileSharedLinkModifiedDetails?)
    -> DBTEAMLOGReplayFileSharedLinkModifiedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileSharedLinkModifiedDetailsToDB(object: object)
}

func mapDBXTeamLogReplayFileSharedLinkModifiedDetailsToDB(object: DBXTeamLogReplayFileSharedLinkModifiedDetails)
    -> DBTEAMLOGReplayFileSharedLinkModifiedDetails {
    DBTEAMLOGReplayFileSharedLinkModifiedDetails(default: ())
}

func mapDBXTeamLogReplayFileSharedLinkModifiedTypeToDBOptional(object: DBXTeamLogReplayFileSharedLinkModifiedType?)
    -> DBTEAMLOGReplayFileSharedLinkModifiedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayFileSharedLinkModifiedTypeToDB(object: object)
}

func mapDBXTeamLogReplayFileSharedLinkModifiedTypeToDB(object: DBXTeamLogReplayFileSharedLinkModifiedType) -> DBTEAMLOGReplayFileSharedLinkModifiedType {
    DBTEAMLOGReplayFileSharedLinkModifiedType(description_: object.description_)
}

func mapDBXTeamLogReplayProjectTeamAddDetailsToDBOptional(object: DBXTeamLogReplayProjectTeamAddDetails?) -> DBTEAMLOGReplayProjectTeamAddDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayProjectTeamAddDetailsToDB(object: object)
}

func mapDBXTeamLogReplayProjectTeamAddDetailsToDB(object: DBXTeamLogReplayProjectTeamAddDetails) -> DBTEAMLOGReplayProjectTeamAddDetails {
    DBTEAMLOGReplayProjectTeamAddDetails(default: ())
}

func mapDBXTeamLogReplayProjectTeamAddTypeToDBOptional(object: DBXTeamLogReplayProjectTeamAddType?) -> DBTEAMLOGReplayProjectTeamAddType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayProjectTeamAddTypeToDB(object: object)
}

func mapDBXTeamLogReplayProjectTeamAddTypeToDB(object: DBXTeamLogReplayProjectTeamAddType) -> DBTEAMLOGReplayProjectTeamAddType {
    DBTEAMLOGReplayProjectTeamAddType(description_: object.description_)
}

func mapDBXTeamLogReplayProjectTeamDeleteDetailsToDBOptional(object: DBXTeamLogReplayProjectTeamDeleteDetails?) -> DBTEAMLOGReplayProjectTeamDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayProjectTeamDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogReplayProjectTeamDeleteDetailsToDB(object: DBXTeamLogReplayProjectTeamDeleteDetails) -> DBTEAMLOGReplayProjectTeamDeleteDetails {
    DBTEAMLOGReplayProjectTeamDeleteDetails(default: ())
}

func mapDBXTeamLogReplayProjectTeamDeleteTypeToDBOptional(object: DBXTeamLogReplayProjectTeamDeleteType?) -> DBTEAMLOGReplayProjectTeamDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogReplayProjectTeamDeleteTypeToDB(object: object)
}

func mapDBXTeamLogReplayProjectTeamDeleteTypeToDB(object: DBXTeamLogReplayProjectTeamDeleteType) -> DBTEAMLOGReplayProjectTeamDeleteType {
    DBTEAMLOGReplayProjectTeamDeleteType(description_: object.description_)
}

func mapDBXTeamLogResellerLogInfoToDBOptional(object: DBXTeamLogResellerLogInfo?) -> DBTEAMLOGResellerLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerLogInfoToDB(object: object)
}

func mapDBXTeamLogResellerLogInfoToDB(object: DBXTeamLogResellerLogInfo) -> DBTEAMLOGResellerLogInfo {
    DBTEAMLOGResellerLogInfo(resellerName: object.resellerName, resellerEmail: object.resellerEmail)
}

func mapDBXTeamLogResellerRoleToDBOptional(object: DBXTeamLogResellerRole?) -> DBTEAMLOGResellerRole? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerRoleToDB(object: object)
}

func mapDBXTeamLogResellerRoleToDB(object: DBXTeamLogResellerRole) -> DBTEAMLOGResellerRole {
    if object.asNotReseller != nil {
        return DBTEAMLOGResellerRole(notReseller: ())
    }
    if object.asResellerAdmin != nil {
        return DBTEAMLOGResellerRole(resellerAdmin: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGResellerRole(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogResellerSupportChangePolicyDetailsToDBOptional(object: DBXTeamLogResellerSupportChangePolicyDetails?)
    -> DBTEAMLOGResellerSupportChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogResellerSupportChangePolicyDetailsToDB(object: DBXTeamLogResellerSupportChangePolicyDetails) -> DBTEAMLOGResellerSupportChangePolicyDetails {
    DBTEAMLOGResellerSupportChangePolicyDetails(
        dNewValue: mapDBXTeamLogResellerSupportPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogResellerSupportPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogResellerSupportChangePolicyTypeToDBOptional(object: DBXTeamLogResellerSupportChangePolicyType?) -> DBTEAMLOGResellerSupportChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogResellerSupportChangePolicyTypeToDB(object: DBXTeamLogResellerSupportChangePolicyType) -> DBTEAMLOGResellerSupportChangePolicyType {
    DBTEAMLOGResellerSupportChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogResellerSupportPolicyToDBOptional(object: DBXTeamLogResellerSupportPolicy?) -> DBTEAMLOGResellerSupportPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportPolicyToDB(object: object)
}

func mapDBXTeamLogResellerSupportPolicyToDB(object: DBXTeamLogResellerSupportPolicy) -> DBTEAMLOGResellerSupportPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGResellerSupportPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGResellerSupportPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGResellerSupportPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogResellerSupportSessionEndDetailsToDBOptional(object: DBXTeamLogResellerSupportSessionEndDetails?)
    -> DBTEAMLOGResellerSupportSessionEndDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportSessionEndDetailsToDB(object: object)
}

func mapDBXTeamLogResellerSupportSessionEndDetailsToDB(object: DBXTeamLogResellerSupportSessionEndDetails) -> DBTEAMLOGResellerSupportSessionEndDetails {
    DBTEAMLOGResellerSupportSessionEndDetails(default: ())
}

func mapDBXTeamLogResellerSupportSessionEndTypeToDBOptional(object: DBXTeamLogResellerSupportSessionEndType?) -> DBTEAMLOGResellerSupportSessionEndType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportSessionEndTypeToDB(object: object)
}

func mapDBXTeamLogResellerSupportSessionEndTypeToDB(object: DBXTeamLogResellerSupportSessionEndType) -> DBTEAMLOGResellerSupportSessionEndType {
    DBTEAMLOGResellerSupportSessionEndType(description_: object.description_)
}

func mapDBXTeamLogResellerSupportSessionStartDetailsToDBOptional(object: DBXTeamLogResellerSupportSessionStartDetails?)
    -> DBTEAMLOGResellerSupportSessionStartDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportSessionStartDetailsToDB(object: object)
}

func mapDBXTeamLogResellerSupportSessionStartDetailsToDB(object: DBXTeamLogResellerSupportSessionStartDetails) -> DBTEAMLOGResellerSupportSessionStartDetails {
    DBTEAMLOGResellerSupportSessionStartDetails(default: ())
}

func mapDBXTeamLogResellerSupportSessionStartTypeToDBOptional(object: DBXTeamLogResellerSupportSessionStartType?) -> DBTEAMLOGResellerSupportSessionStartType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogResellerSupportSessionStartTypeToDB(object: object)
}

func mapDBXTeamLogResellerSupportSessionStartTypeToDB(object: DBXTeamLogResellerSupportSessionStartType) -> DBTEAMLOGResellerSupportSessionStartType {
    DBTEAMLOGResellerSupportSessionStartType(description_: object.description_)
}

func mapDBXTeamLogRewindFolderDetailsToDBOptional(object: DBXTeamLogRewindFolderDetails?) -> DBTEAMLOGRewindFolderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRewindFolderDetailsToDB(object: object)
}

func mapDBXTeamLogRewindFolderDetailsToDB(object: DBXTeamLogRewindFolderDetails) -> DBTEAMLOGRewindFolderDetails {
    DBTEAMLOGRewindFolderDetails(rewindFolderTargetTsMs: object.rewindFolderTargetTsMs)
}

func mapDBXTeamLogRewindFolderTypeToDBOptional(object: DBXTeamLogRewindFolderType?) -> DBTEAMLOGRewindFolderType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRewindFolderTypeToDB(object: object)
}

func mapDBXTeamLogRewindFolderTypeToDB(object: DBXTeamLogRewindFolderType) -> DBTEAMLOGRewindFolderType {
    DBTEAMLOGRewindFolderType(description_: object.description_)
}

func mapDBXTeamLogRewindPolicyToDBOptional(object: DBXTeamLogRewindPolicy?) -> DBTEAMLOGRewindPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRewindPolicyToDB(object: object)
}

func mapDBXTeamLogRewindPolicyToDB(object: DBXTeamLogRewindPolicy) -> DBTEAMLOGRewindPolicy {
    if object.asAdminsOnly != nil {
        return DBTEAMLOGRewindPolicy(adminsOnly: ())
    }
    if object.asEveryone != nil {
        return DBTEAMLOGRewindPolicy(everyone: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGRewindPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogRewindPolicyChangedDetailsToDBOptional(object: DBXTeamLogRewindPolicyChangedDetails?) -> DBTEAMLOGRewindPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRewindPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogRewindPolicyChangedDetailsToDB(object: DBXTeamLogRewindPolicyChangedDetails) -> DBTEAMLOGRewindPolicyChangedDetails {
    DBTEAMLOGRewindPolicyChangedDetails(
        dNewValue: mapDBXTeamLogRewindPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogRewindPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogRewindPolicyChangedTypeToDBOptional(object: DBXTeamLogRewindPolicyChangedType?) -> DBTEAMLOGRewindPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogRewindPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogRewindPolicyChangedTypeToDB(object: DBXTeamLogRewindPolicyChangedType) -> DBTEAMLOGRewindPolicyChangedType {
    DBTEAMLOGRewindPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogSecondaryEmailDeletedDetailsToDBOptional(object: DBXTeamLogSecondaryEmailDeletedDetails?) -> DBTEAMLOGSecondaryEmailDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryEmailDeletedDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryEmailDeletedDetailsToDB(object: DBXTeamLogSecondaryEmailDeletedDetails) -> DBTEAMLOGSecondaryEmailDeletedDetails {
    DBTEAMLOGSecondaryEmailDeletedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBXTeamLogSecondaryEmailDeletedTypeToDBOptional(object: DBXTeamLogSecondaryEmailDeletedType?) -> DBTEAMLOGSecondaryEmailDeletedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryEmailDeletedTypeToDB(object: object)
}

func mapDBXTeamLogSecondaryEmailDeletedTypeToDB(object: DBXTeamLogSecondaryEmailDeletedType) -> DBTEAMLOGSecondaryEmailDeletedType {
    DBTEAMLOGSecondaryEmailDeletedType(description_: object.description_)
}

func mapDBXTeamLogSecondaryEmailVerifiedDetailsToDBOptional(object: DBXTeamLogSecondaryEmailVerifiedDetails?) -> DBTEAMLOGSecondaryEmailVerifiedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryEmailVerifiedDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryEmailVerifiedDetailsToDB(object: DBXTeamLogSecondaryEmailVerifiedDetails) -> DBTEAMLOGSecondaryEmailVerifiedDetails {
    DBTEAMLOGSecondaryEmailVerifiedDetails(secondaryEmail: object.secondaryEmail)
}

func mapDBXTeamLogSecondaryEmailVerifiedTypeToDBOptional(object: DBXTeamLogSecondaryEmailVerifiedType?) -> DBTEAMLOGSecondaryEmailVerifiedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryEmailVerifiedTypeToDB(object: object)
}

func mapDBXTeamLogSecondaryEmailVerifiedTypeToDB(object: DBXTeamLogSecondaryEmailVerifiedType) -> DBTEAMLOGSecondaryEmailVerifiedType {
    DBTEAMLOGSecondaryEmailVerifiedType(description_: object.description_)
}

func mapDBXTeamLogSecondaryMailsPolicyToDBOptional(object: DBXTeamLogSecondaryMailsPolicy?) -> DBTEAMLOGSecondaryMailsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryMailsPolicyToDB(object: object)
}

func mapDBXTeamLogSecondaryMailsPolicyToDB(object: DBXTeamLogSecondaryMailsPolicy) -> DBTEAMLOGSecondaryMailsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGSecondaryMailsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGSecondaryMailsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSecondaryMailsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSecondaryMailsPolicyChangedDetailsToDBOptional(object: DBXTeamLogSecondaryMailsPolicyChangedDetails?)
    -> DBTEAMLOGSecondaryMailsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryMailsPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryMailsPolicyChangedDetailsToDB(object: DBXTeamLogSecondaryMailsPolicyChangedDetails) -> DBTEAMLOGSecondaryMailsPolicyChangedDetails {
    DBTEAMLOGSecondaryMailsPolicyChangedDetails(
        previousValue: mapDBXTeamLogSecondaryMailsPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogSecondaryMailsPolicyToDB(object: object.newValue)
    )
}

func mapDBXTeamLogSecondaryMailsPolicyChangedTypeToDBOptional(object: DBXTeamLogSecondaryMailsPolicyChangedType?) -> DBTEAMLOGSecondaryMailsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryMailsPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogSecondaryMailsPolicyChangedTypeToDB(object: DBXTeamLogSecondaryMailsPolicyChangedType) -> DBTEAMLOGSecondaryMailsPolicyChangedType {
    DBTEAMLOGSecondaryMailsPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogSecondaryTeamRequestAcceptedDetailsToDBOptional(object: DBXTeamLogSecondaryTeamRequestAcceptedDetails?)
    -> DBTEAMLOGSecondaryTeamRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryTeamRequestAcceptedDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryTeamRequestAcceptedDetailsToDB(object: DBXTeamLogSecondaryTeamRequestAcceptedDetails)
    -> DBTEAMLOGSecondaryTeamRequestAcceptedDetails {
    DBTEAMLOGSecondaryTeamRequestAcceptedDetails(primaryTeam: object.primaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogSecondaryTeamRequestCanceledDetailsToDBOptional(object: DBXTeamLogSecondaryTeamRequestCanceledDetails?)
    -> DBTEAMLOGSecondaryTeamRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryTeamRequestCanceledDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryTeamRequestCanceledDetailsToDB(object: DBXTeamLogSecondaryTeamRequestCanceledDetails)
    -> DBTEAMLOGSecondaryTeamRequestCanceledDetails {
    DBTEAMLOGSecondaryTeamRequestCanceledDetails(sentTo: object.sentTo, sentBy: object.sentBy)
}

func mapDBXTeamLogSecondaryTeamRequestExpiredDetailsToDBOptional(object: DBXTeamLogSecondaryTeamRequestExpiredDetails?)
    -> DBTEAMLOGSecondaryTeamRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryTeamRequestExpiredDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryTeamRequestExpiredDetailsToDB(object: DBXTeamLogSecondaryTeamRequestExpiredDetails) -> DBTEAMLOGSecondaryTeamRequestExpiredDetails {
    DBTEAMLOGSecondaryTeamRequestExpiredDetails(sentTo: object.sentTo)
}

func mapDBXTeamLogSecondaryTeamRequestReminderDetailsToDBOptional(object: DBXTeamLogSecondaryTeamRequestReminderDetails?)
    -> DBTEAMLOGSecondaryTeamRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSecondaryTeamRequestReminderDetailsToDB(object: object)
}

func mapDBXTeamLogSecondaryTeamRequestReminderDetailsToDB(object: DBXTeamLogSecondaryTeamRequestReminderDetails)
    -> DBTEAMLOGSecondaryTeamRequestReminderDetails {
    DBTEAMLOGSecondaryTeamRequestReminderDetails(sentTo: object.sentTo)
}

func mapDBXTeamLogSendForSignaturePolicyToDBOptional(object: DBXTeamLogSendForSignaturePolicy?) -> DBTEAMLOGSendForSignaturePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSendForSignaturePolicyToDB(object: object)
}

func mapDBXTeamLogSendForSignaturePolicyToDB(object: DBXTeamLogSendForSignaturePolicy) -> DBTEAMLOGSendForSignaturePolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGSendForSignaturePolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGSendForSignaturePolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSendForSignaturePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSendForSignaturePolicyChangedDetailsToDBOptional(object: DBXTeamLogSendForSignaturePolicyChangedDetails?)
    -> DBTEAMLOGSendForSignaturePolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSendForSignaturePolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogSendForSignaturePolicyChangedDetailsToDB(object: DBXTeamLogSendForSignaturePolicyChangedDetails)
    -> DBTEAMLOGSendForSignaturePolicyChangedDetails {
    DBTEAMLOGSendForSignaturePolicyChangedDetails(
        dNewValue: mapDBXTeamLogSendForSignaturePolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSendForSignaturePolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogSendForSignaturePolicyChangedTypeToDBOptional(object: DBXTeamLogSendForSignaturePolicyChangedType?)
    -> DBTEAMLOGSendForSignaturePolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSendForSignaturePolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogSendForSignaturePolicyChangedTypeToDB(object: DBXTeamLogSendForSignaturePolicyChangedType) -> DBTEAMLOGSendForSignaturePolicyChangedType {
    DBTEAMLOGSendForSignaturePolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogSfAddGroupDetailsToDBOptional(object: DBXTeamLogSfAddGroupDetails?) -> DBTEAMLOGSfAddGroupDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfAddGroupDetailsToDB(object: object)
}

func mapDBXTeamLogSfAddGroupDetailsToDB(object: DBXTeamLogSfAddGroupDetails) -> DBTEAMLOGSfAddGroupDetails {
    DBTEAMLOGSfAddGroupDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        teamName: object.teamName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBXTeamLogSfAddGroupTypeToDBOptional(object: DBXTeamLogSfAddGroupType?) -> DBTEAMLOGSfAddGroupType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfAddGroupTypeToDB(object: object)
}

func mapDBXTeamLogSfAddGroupTypeToDB(object: DBXTeamLogSfAddGroupType) -> DBTEAMLOGSfAddGroupType {
    DBTEAMLOGSfAddGroupType(description_: object.description_)
}

func mapDBXTeamLogSfAllowNonMembersToViewSharedLinksDetailsToDBOptional(object: DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails?)
    -> DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfAllowNonMembersToViewSharedLinksDetailsToDB(object: object)
}

func mapDBXTeamLogSfAllowNonMembersToViewSharedLinksDetailsToDB(object: DBXTeamLogSfAllowNonMembersToViewSharedLinksDetails)
    -> DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharedFolderType: object.sharedFolderType
    )
}

func mapDBXTeamLogSfAllowNonMembersToViewSharedLinksTypeToDBOptional(object: DBXTeamLogSfAllowNonMembersToViewSharedLinksType?)
    -> DBTEAMLOGSfAllowNonMembersToViewSharedLinksType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfAllowNonMembersToViewSharedLinksTypeToDB(object: object)
}

func mapDBXTeamLogSfAllowNonMembersToViewSharedLinksTypeToDB(object: DBXTeamLogSfAllowNonMembersToViewSharedLinksType)
    -> DBTEAMLOGSfAllowNonMembersToViewSharedLinksType {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksType(description_: object.description_)
}

func mapDBXTeamLogSfExternalInviteWarnDetailsToDBOptional(object: DBXTeamLogSfExternalInviteWarnDetails?) -> DBTEAMLOGSfExternalInviteWarnDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfExternalInviteWarnDetailsToDB(object: object)
}

func mapDBXTeamLogSfExternalInviteWarnDetailsToDB(object: DBXTeamLogSfExternalInviteWarnDetails) -> DBTEAMLOGSfExternalInviteWarnDetails {
    DBTEAMLOGSfExternalInviteWarnDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        dNewSharingPermission: object.newSharingPermission,
        previousSharingPermission: object.previousSharingPermission
    )
}

func mapDBXTeamLogSfExternalInviteWarnTypeToDBOptional(object: DBXTeamLogSfExternalInviteWarnType?) -> DBTEAMLOGSfExternalInviteWarnType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfExternalInviteWarnTypeToDB(object: object)
}

func mapDBXTeamLogSfExternalInviteWarnTypeToDB(object: DBXTeamLogSfExternalInviteWarnType) -> DBTEAMLOGSfExternalInviteWarnType {
    DBTEAMLOGSfExternalInviteWarnType(description_: object.description_)
}

func mapDBXTeamLogSfFbInviteChangeRoleDetailsToDBOptional(object: DBXTeamLogSfFbInviteChangeRoleDetails?) -> DBTEAMLOGSfFbInviteChangeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbInviteChangeRoleDetailsToDB(object: object)
}

func mapDBXTeamLogSfFbInviteChangeRoleDetailsToDB(object: DBXTeamLogSfFbInviteChangeRoleDetails) -> DBTEAMLOGSfFbInviteChangeRoleDetails {
    DBTEAMLOGSfFbInviteChangeRoleDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        previousSharingPermission: object.previousSharingPermission,
        dNewSharingPermission: object.newSharingPermission
    )
}

func mapDBXTeamLogSfFbInviteChangeRoleTypeToDBOptional(object: DBXTeamLogSfFbInviteChangeRoleType?) -> DBTEAMLOGSfFbInviteChangeRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbInviteChangeRoleTypeToDB(object: object)
}

func mapDBXTeamLogSfFbInviteChangeRoleTypeToDB(object: DBXTeamLogSfFbInviteChangeRoleType) -> DBTEAMLOGSfFbInviteChangeRoleType {
    DBTEAMLOGSfFbInviteChangeRoleType(description_: object.description_)
}

func mapDBXTeamLogSfFbInviteDetailsToDBOptional(object: DBXTeamLogSfFbInviteDetails?) -> DBTEAMLOGSfFbInviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbInviteDetailsToDB(object: object)
}

func mapDBXTeamLogSfFbInviteDetailsToDB(object: DBXTeamLogSfFbInviteDetails) -> DBTEAMLOGSfFbInviteDetails {
    DBTEAMLOGSfFbInviteDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBXTeamLogSfFbInviteTypeToDBOptional(object: DBXTeamLogSfFbInviteType?) -> DBTEAMLOGSfFbInviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbInviteTypeToDB(object: object)
}

func mapDBXTeamLogSfFbInviteTypeToDB(object: DBXTeamLogSfFbInviteType) -> DBTEAMLOGSfFbInviteType {
    DBTEAMLOGSfFbInviteType(description_: object.description_)
}

func mapDBXTeamLogSfFbUninviteDetailsToDBOptional(object: DBXTeamLogSfFbUninviteDetails?) -> DBTEAMLOGSfFbUninviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbUninviteDetailsToDB(object: object)
}

func mapDBXTeamLogSfFbUninviteDetailsToDB(object: DBXTeamLogSfFbUninviteDetails) -> DBTEAMLOGSfFbUninviteDetails {
    DBTEAMLOGSfFbUninviteDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBXTeamLogSfFbUninviteTypeToDBOptional(object: DBXTeamLogSfFbUninviteType?) -> DBTEAMLOGSfFbUninviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfFbUninviteTypeToDB(object: object)
}

func mapDBXTeamLogSfFbUninviteTypeToDB(object: DBXTeamLogSfFbUninviteType) -> DBTEAMLOGSfFbUninviteType {
    DBTEAMLOGSfFbUninviteType(description_: object.description_)
}

func mapDBXTeamLogSfInviteGroupDetailsToDBOptional(object: DBXTeamLogSfInviteGroupDetails?) -> DBTEAMLOGSfInviteGroupDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfInviteGroupDetailsToDB(object: object)
}

func mapDBXTeamLogSfInviteGroupDetailsToDB(object: DBXTeamLogSfInviteGroupDetails) -> DBTEAMLOGSfInviteGroupDetails {
    DBTEAMLOGSfInviteGroupDetails(targetAssetIndex: object.targetAssetIndex)
}

func mapDBXTeamLogSfInviteGroupTypeToDBOptional(object: DBXTeamLogSfInviteGroupType?) -> DBTEAMLOGSfInviteGroupType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfInviteGroupTypeToDB(object: object)
}

func mapDBXTeamLogSfInviteGroupTypeToDB(object: DBXTeamLogSfInviteGroupType) -> DBTEAMLOGSfInviteGroupType {
    DBTEAMLOGSfInviteGroupType(description_: object.description_)
}

func mapDBXTeamLogSfTeamGrantAccessDetailsToDBOptional(object: DBXTeamLogSfTeamGrantAccessDetails?) -> DBTEAMLOGSfTeamGrantAccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamGrantAccessDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamGrantAccessDetailsToDB(object: DBXTeamLogSfTeamGrantAccessDetails) -> DBTEAMLOGSfTeamGrantAccessDetails {
    DBTEAMLOGSfTeamGrantAccessDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBXTeamLogSfTeamGrantAccessTypeToDBOptional(object: DBXTeamLogSfTeamGrantAccessType?) -> DBTEAMLOGSfTeamGrantAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamGrantAccessTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamGrantAccessTypeToDB(object: DBXTeamLogSfTeamGrantAccessType) -> DBTEAMLOGSfTeamGrantAccessType {
    DBTEAMLOGSfTeamGrantAccessType(description_: object.description_)
}

func mapDBXTeamLogSfTeamInviteChangeRoleDetailsToDBOptional(object: DBXTeamLogSfTeamInviteChangeRoleDetails?) -> DBTEAMLOGSfTeamInviteChangeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamInviteChangeRoleDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamInviteChangeRoleDetailsToDB(object: DBXTeamLogSfTeamInviteChangeRoleDetails) -> DBTEAMLOGSfTeamInviteChangeRoleDetails {
    DBTEAMLOGSfTeamInviteChangeRoleDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        dNewSharingPermission: object.newSharingPermission,
        previousSharingPermission: object.previousSharingPermission
    )
}

func mapDBXTeamLogSfTeamInviteChangeRoleTypeToDBOptional(object: DBXTeamLogSfTeamInviteChangeRoleType?) -> DBTEAMLOGSfTeamInviteChangeRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamInviteChangeRoleTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamInviteChangeRoleTypeToDB(object: DBXTeamLogSfTeamInviteChangeRoleType) -> DBTEAMLOGSfTeamInviteChangeRoleType {
    DBTEAMLOGSfTeamInviteChangeRoleType(description_: object.description_)
}

func mapDBXTeamLogSfTeamInviteDetailsToDBOptional(object: DBXTeamLogSfTeamInviteDetails?) -> DBTEAMLOGSfTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamInviteDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamInviteDetailsToDB(object: DBXTeamLogSfTeamInviteDetails) -> DBTEAMLOGSfTeamInviteDetails {
    DBTEAMLOGSfTeamInviteDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        sharingPermission: object.sharingPermission
    )
}

func mapDBXTeamLogSfTeamInviteTypeToDBOptional(object: DBXTeamLogSfTeamInviteType?) -> DBTEAMLOGSfTeamInviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamInviteTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamInviteTypeToDB(object: DBXTeamLogSfTeamInviteType) -> DBTEAMLOGSfTeamInviteType {
    DBTEAMLOGSfTeamInviteType(description_: object.description_)
}

func mapDBXTeamLogSfTeamJoinDetailsToDBOptional(object: DBXTeamLogSfTeamJoinDetails?) -> DBTEAMLOGSfTeamJoinDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamJoinDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamJoinDetailsToDB(object: DBXTeamLogSfTeamJoinDetails) -> DBTEAMLOGSfTeamJoinDetails {
    DBTEAMLOGSfTeamJoinDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBXTeamLogSfTeamJoinFromOobLinkDetailsToDBOptional(object: DBXTeamLogSfTeamJoinFromOobLinkDetails?) -> DBTEAMLOGSfTeamJoinFromOobLinkDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamJoinFromOobLinkDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamJoinFromOobLinkDetailsToDB(object: DBXTeamLogSfTeamJoinFromOobLinkDetails) -> DBTEAMLOGSfTeamJoinFromOobLinkDetails {
    DBTEAMLOGSfTeamJoinFromOobLinkDetails(
        targetAssetIndex: object.targetAssetIndex,
        originalFolderName: object.originalFolderName,
        tokenKey: object.tokenKey,
        sharingPermission: object.sharingPermission
    )
}

func mapDBXTeamLogSfTeamJoinFromOobLinkTypeToDBOptional(object: DBXTeamLogSfTeamJoinFromOobLinkType?) -> DBTEAMLOGSfTeamJoinFromOobLinkType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamJoinFromOobLinkTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamJoinFromOobLinkTypeToDB(object: DBXTeamLogSfTeamJoinFromOobLinkType) -> DBTEAMLOGSfTeamJoinFromOobLinkType {
    DBTEAMLOGSfTeamJoinFromOobLinkType(description_: object.description_)
}

func mapDBXTeamLogSfTeamJoinTypeToDBOptional(object: DBXTeamLogSfTeamJoinType?) -> DBTEAMLOGSfTeamJoinType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamJoinTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamJoinTypeToDB(object: DBXTeamLogSfTeamJoinType) -> DBTEAMLOGSfTeamJoinType {
    DBTEAMLOGSfTeamJoinType(description_: object.description_)
}

func mapDBXTeamLogSfTeamUninviteDetailsToDBOptional(object: DBXTeamLogSfTeamUninviteDetails?) -> DBTEAMLOGSfTeamUninviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamUninviteDetailsToDB(object: object)
}

func mapDBXTeamLogSfTeamUninviteDetailsToDB(object: DBXTeamLogSfTeamUninviteDetails) -> DBTEAMLOGSfTeamUninviteDetails {
    DBTEAMLOGSfTeamUninviteDetails(targetAssetIndex: object.targetAssetIndex, originalFolderName: object.originalFolderName)
}

func mapDBXTeamLogSfTeamUninviteTypeToDBOptional(object: DBXTeamLogSfTeamUninviteType?) -> DBTEAMLOGSfTeamUninviteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSfTeamUninviteTypeToDB(object: object)
}

func mapDBXTeamLogSfTeamUninviteTypeToDB(object: DBXTeamLogSfTeamUninviteType) -> DBTEAMLOGSfTeamUninviteType {
    DBTEAMLOGSfTeamUninviteType(description_: object.description_)
}

func mapDBXTeamLogSharedContentAddInviteesDetailsToDBOptional(object: DBXTeamLogSharedContentAddInviteesDetails?) -> DBTEAMLOGSharedContentAddInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddInviteesDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentAddInviteesDetailsToDB(object: DBXTeamLogSharedContentAddInviteesDetails) -> DBTEAMLOGSharedContentAddInviteesDetails {
    DBTEAMLOGSharedContentAddInviteesDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        invitees: object.invitees
    )
}

func mapDBXTeamLogSharedContentAddInviteesTypeToDBOptional(object: DBXTeamLogSharedContentAddInviteesType?) -> DBTEAMLOGSharedContentAddInviteesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddInviteesTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentAddInviteesTypeToDB(object: DBXTeamLogSharedContentAddInviteesType) -> DBTEAMLOGSharedContentAddInviteesType {
    DBTEAMLOGSharedContentAddInviteesType(description_: object.description_)
}

func mapDBXTeamLogSharedContentAddLinkExpiryDetailsToDBOptional(object: DBXTeamLogSharedContentAddLinkExpiryDetails?)
    -> DBTEAMLOGSharedContentAddLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddLinkExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentAddLinkExpiryDetailsToDB(object: DBXTeamLogSharedContentAddLinkExpiryDetails) -> DBTEAMLOGSharedContentAddLinkExpiryDetails {
    DBTEAMLOGSharedContentAddLinkExpiryDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogSharedContentAddLinkExpiryTypeToDBOptional(object: DBXTeamLogSharedContentAddLinkExpiryType?) -> DBTEAMLOGSharedContentAddLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddLinkExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentAddLinkExpiryTypeToDB(object: DBXTeamLogSharedContentAddLinkExpiryType) -> DBTEAMLOGSharedContentAddLinkExpiryType {
    DBTEAMLOGSharedContentAddLinkExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedContentAddLinkPasswordDetailsToDBOptional(object: DBXTeamLogSharedContentAddLinkPasswordDetails?)
    -> DBTEAMLOGSharedContentAddLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddLinkPasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentAddLinkPasswordDetailsToDB(object: DBXTeamLogSharedContentAddLinkPasswordDetails)
    -> DBTEAMLOGSharedContentAddLinkPasswordDetails {
    DBTEAMLOGSharedContentAddLinkPasswordDetails(default: ())
}

func mapDBXTeamLogSharedContentAddLinkPasswordTypeToDBOptional(object: DBXTeamLogSharedContentAddLinkPasswordType?)
    -> DBTEAMLOGSharedContentAddLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddLinkPasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentAddLinkPasswordTypeToDB(object: DBXTeamLogSharedContentAddLinkPasswordType) -> DBTEAMLOGSharedContentAddLinkPasswordType {
    DBTEAMLOGSharedContentAddLinkPasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedContentAddMemberDetailsToDBOptional(object: DBXTeamLogSharedContentAddMemberDetails?) -> DBTEAMLOGSharedContentAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddMemberDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentAddMemberDetailsToDB(object: DBXTeamLogSharedContentAddMemberDetails) -> DBTEAMLOGSharedContentAddMemberDetails {
    DBTEAMLOGSharedContentAddMemberDetails(sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel))
}

func mapDBXTeamLogSharedContentAddMemberTypeToDBOptional(object: DBXTeamLogSharedContentAddMemberType?) -> DBTEAMLOGSharedContentAddMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentAddMemberTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentAddMemberTypeToDB(object: DBXTeamLogSharedContentAddMemberType) -> DBTEAMLOGSharedContentAddMemberType {
    DBTEAMLOGSharedContentAddMemberType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeDownloadsPolicyDetailsToDBOptional(object: DBXTeamLogSharedContentChangeDownloadsPolicyDetails?)
    -> DBTEAMLOGSharedContentChangeDownloadsPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeDownloadsPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeDownloadsPolicyDetailsToDB(object: DBXTeamLogSharedContentChangeDownloadsPolicyDetails)
    -> DBTEAMLOGSharedContentChangeDownloadsPolicyDetails {
    DBTEAMLOGSharedContentChangeDownloadsPolicyDetails(
        dNewValue: mapDBXTeamLogDownloadPolicyTypeToDB(object: object.newValue),
        previousValue: mapDBXTeamLogDownloadPolicyTypeToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedContentChangeDownloadsPolicyTypeToDBOptional(object: DBXTeamLogSharedContentChangeDownloadsPolicyType?)
    -> DBTEAMLOGSharedContentChangeDownloadsPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeDownloadsPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeDownloadsPolicyTypeToDB(object: DBXTeamLogSharedContentChangeDownloadsPolicyType)
    -> DBTEAMLOGSharedContentChangeDownloadsPolicyType {
    DBTEAMLOGSharedContentChangeDownloadsPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeInviteeRoleDetailsToDBOptional(object: DBXTeamLogSharedContentChangeInviteeRoleDetails?)
    -> DBTEAMLOGSharedContentChangeInviteeRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeInviteeRoleDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeInviteeRoleDetailsToDB(object: DBXTeamLogSharedContentChangeInviteeRoleDetails)
    -> DBTEAMLOGSharedContentChangeInviteeRoleDetails {
    DBTEAMLOGSharedContentChangeInviteeRoleDetails(
        dNewAccessLevel: mapDBXSharingAccessLevelToDB(object: object.newAccessLevel),
        invitee: object.invitee,
        previousAccessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.previousAccessLevel)
    )
}

func mapDBXTeamLogSharedContentChangeInviteeRoleTypeToDBOptional(object: DBXTeamLogSharedContentChangeInviteeRoleType?)
    -> DBTEAMLOGSharedContentChangeInviteeRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeInviteeRoleTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeInviteeRoleTypeToDB(object: DBXTeamLogSharedContentChangeInviteeRoleType) -> DBTEAMLOGSharedContentChangeInviteeRoleType {
    DBTEAMLOGSharedContentChangeInviteeRoleType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeLinkAudienceDetailsToDBOptional(object: DBXTeamLogSharedContentChangeLinkAudienceDetails?)
    -> DBTEAMLOGSharedContentChangeLinkAudienceDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkAudienceDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkAudienceDetailsToDB(object: DBXTeamLogSharedContentChangeLinkAudienceDetails)
    -> DBTEAMLOGSharedContentChangeLinkAudienceDetails {
    DBTEAMLOGSharedContentChangeLinkAudienceDetails(
        dNewValue: mapDBXSharingLinkAudienceToDB(object: object.newValue),
        previousValue: mapDBXSharingLinkAudienceToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedContentChangeLinkAudienceTypeToDBOptional(object: DBXTeamLogSharedContentChangeLinkAudienceType?)
    -> DBTEAMLOGSharedContentChangeLinkAudienceType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkAudienceTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkAudienceTypeToDB(object: DBXTeamLogSharedContentChangeLinkAudienceType)
    -> DBTEAMLOGSharedContentChangeLinkAudienceType {
    DBTEAMLOGSharedContentChangeLinkAudienceType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeLinkExpiryDetailsToDBOptional(object: DBXTeamLogSharedContentChangeLinkExpiryDetails?)
    -> DBTEAMLOGSharedContentChangeLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkExpiryDetailsToDB(object: DBXTeamLogSharedContentChangeLinkExpiryDetails)
    -> DBTEAMLOGSharedContentChangeLinkExpiryDetails {
    DBTEAMLOGSharedContentChangeLinkExpiryDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogSharedContentChangeLinkExpiryTypeToDBOptional(object: DBXTeamLogSharedContentChangeLinkExpiryType?)
    -> DBTEAMLOGSharedContentChangeLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkExpiryTypeToDB(object: DBXTeamLogSharedContentChangeLinkExpiryType) -> DBTEAMLOGSharedContentChangeLinkExpiryType {
    DBTEAMLOGSharedContentChangeLinkExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeLinkPasswordDetailsToDBOptional(object: DBXTeamLogSharedContentChangeLinkPasswordDetails?)
    -> DBTEAMLOGSharedContentChangeLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkPasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkPasswordDetailsToDB(object: DBXTeamLogSharedContentChangeLinkPasswordDetails)
    -> DBTEAMLOGSharedContentChangeLinkPasswordDetails {
    DBTEAMLOGSharedContentChangeLinkPasswordDetails(default: ())
}

func mapDBXTeamLogSharedContentChangeLinkPasswordTypeToDBOptional(object: DBXTeamLogSharedContentChangeLinkPasswordType?)
    -> DBTEAMLOGSharedContentChangeLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeLinkPasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeLinkPasswordTypeToDB(object: DBXTeamLogSharedContentChangeLinkPasswordType)
    -> DBTEAMLOGSharedContentChangeLinkPasswordType {
    DBTEAMLOGSharedContentChangeLinkPasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeMemberRoleDetailsToDBOptional(object: DBXTeamLogSharedContentChangeMemberRoleDetails?)
    -> DBTEAMLOGSharedContentChangeMemberRoleDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeMemberRoleDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeMemberRoleDetailsToDB(object: DBXTeamLogSharedContentChangeMemberRoleDetails)
    -> DBTEAMLOGSharedContentChangeMemberRoleDetails {
    DBTEAMLOGSharedContentChangeMemberRoleDetails(
        dNewAccessLevel: mapDBXSharingAccessLevelToDB(object: object.newAccessLevel),
        previousAccessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.previousAccessLevel)
    )
}

func mapDBXTeamLogSharedContentChangeMemberRoleTypeToDBOptional(object: DBXTeamLogSharedContentChangeMemberRoleType?)
    -> DBTEAMLOGSharedContentChangeMemberRoleType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeMemberRoleTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeMemberRoleTypeToDB(object: DBXTeamLogSharedContentChangeMemberRoleType) -> DBTEAMLOGSharedContentChangeMemberRoleType {
    DBTEAMLOGSharedContentChangeMemberRoleType(description_: object.description_)
}

func mapDBXTeamLogSharedContentChangeViewerInfoPolicyDetailsToDBOptional(object: DBXTeamLogSharedContentChangeViewerInfoPolicyDetails?)
    -> DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeViewerInfoPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeViewerInfoPolicyDetailsToDB(object: DBXTeamLogSharedContentChangeViewerInfoPolicyDetails)
    -> DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails(
        dNewValue: mapDBXSharingViewerInfoPolicyToDB(object: object.newValue),
        previousValue: mapDBXSharingViewerInfoPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedContentChangeViewerInfoPolicyTypeToDBOptional(object: DBXTeamLogSharedContentChangeViewerInfoPolicyType?)
    -> DBTEAMLOGSharedContentChangeViewerInfoPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentChangeViewerInfoPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentChangeViewerInfoPolicyTypeToDB(object: DBXTeamLogSharedContentChangeViewerInfoPolicyType)
    -> DBTEAMLOGSharedContentChangeViewerInfoPolicyType {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedContentClaimInvitationDetailsToDBOptional(object: DBXTeamLogSharedContentClaimInvitationDetails?)
    -> DBTEAMLOGSharedContentClaimInvitationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentClaimInvitationDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentClaimInvitationDetailsToDB(object: DBXTeamLogSharedContentClaimInvitationDetails)
    -> DBTEAMLOGSharedContentClaimInvitationDetails {
    DBTEAMLOGSharedContentClaimInvitationDetails(sharedContentLink: object.sharedContentLink)
}

func mapDBXTeamLogSharedContentClaimInvitationTypeToDBOptional(object: DBXTeamLogSharedContentClaimInvitationType?)
    -> DBTEAMLOGSharedContentClaimInvitationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentClaimInvitationTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentClaimInvitationTypeToDB(object: DBXTeamLogSharedContentClaimInvitationType) -> DBTEAMLOGSharedContentClaimInvitationType {
    DBTEAMLOGSharedContentClaimInvitationType(description_: object.description_)
}

func mapDBXTeamLogSharedContentCopyDetailsToDBOptional(object: DBXTeamLogSharedContentCopyDetails?) -> DBTEAMLOGSharedContentCopyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentCopyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentCopyDetailsToDB(object: DBXTeamLogSharedContentCopyDetails) -> DBTEAMLOGSharedContentCopyDetails {
    DBTEAMLOGSharedContentCopyDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        destinationPath: object.destinationPath,
        sharedContentOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedContentOwner)
    )
}

func mapDBXTeamLogSharedContentCopyTypeToDBOptional(object: DBXTeamLogSharedContentCopyType?) -> DBTEAMLOGSharedContentCopyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentCopyTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentCopyTypeToDB(object: DBXTeamLogSharedContentCopyType) -> DBTEAMLOGSharedContentCopyType {
    DBTEAMLOGSharedContentCopyType(description_: object.description_)
}

func mapDBXTeamLogSharedContentDownloadDetailsToDBOptional(object: DBXTeamLogSharedContentDownloadDetails?) -> DBTEAMLOGSharedContentDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentDownloadDetailsToDB(object: DBXTeamLogSharedContentDownloadDetails) -> DBTEAMLOGSharedContentDownloadDetails {
    DBTEAMLOGSharedContentDownloadDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedContentOwner)
    )
}

func mapDBXTeamLogSharedContentDownloadTypeToDBOptional(object: DBXTeamLogSharedContentDownloadType?) -> DBTEAMLOGSharedContentDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentDownloadTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentDownloadTypeToDB(object: DBXTeamLogSharedContentDownloadType) -> DBTEAMLOGSharedContentDownloadType {
    DBTEAMLOGSharedContentDownloadType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRelinquishMembershipDetailsToDBOptional(object: DBXTeamLogSharedContentRelinquishMembershipDetails?)
    -> DBTEAMLOGSharedContentRelinquishMembershipDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRelinquishMembershipDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRelinquishMembershipDetailsToDB(object: DBXTeamLogSharedContentRelinquishMembershipDetails)
    -> DBTEAMLOGSharedContentRelinquishMembershipDetails {
    DBTEAMLOGSharedContentRelinquishMembershipDetails(default: ())
}

func mapDBXTeamLogSharedContentRelinquishMembershipTypeToDBOptional(object: DBXTeamLogSharedContentRelinquishMembershipType?)
    -> DBTEAMLOGSharedContentRelinquishMembershipType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRelinquishMembershipTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRelinquishMembershipTypeToDB(object: DBXTeamLogSharedContentRelinquishMembershipType)
    -> DBTEAMLOGSharedContentRelinquishMembershipType {
    DBTEAMLOGSharedContentRelinquishMembershipType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRemoveInviteesDetailsToDBOptional(object: DBXTeamLogSharedContentRemoveInviteesDetails?)
    -> DBTEAMLOGSharedContentRemoveInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveInviteesDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveInviteesDetailsToDB(object: DBXTeamLogSharedContentRemoveInviteesDetails) -> DBTEAMLOGSharedContentRemoveInviteesDetails {
    DBTEAMLOGSharedContentRemoveInviteesDetails(invitees: object.invitees)
}

func mapDBXTeamLogSharedContentRemoveInviteesTypeToDBOptional(object: DBXTeamLogSharedContentRemoveInviteesType?) -> DBTEAMLOGSharedContentRemoveInviteesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveInviteesTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveInviteesTypeToDB(object: DBXTeamLogSharedContentRemoveInviteesType) -> DBTEAMLOGSharedContentRemoveInviteesType {
    DBTEAMLOGSharedContentRemoveInviteesType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRemoveLinkExpiryDetailsToDBOptional(object: DBXTeamLogSharedContentRemoveLinkExpiryDetails?)
    -> DBTEAMLOGSharedContentRemoveLinkExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveLinkExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveLinkExpiryDetailsToDB(object: DBXTeamLogSharedContentRemoveLinkExpiryDetails)
    -> DBTEAMLOGSharedContentRemoveLinkExpiryDetails {
    DBTEAMLOGSharedContentRemoveLinkExpiryDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogSharedContentRemoveLinkExpiryTypeToDBOptional(object: DBXTeamLogSharedContentRemoveLinkExpiryType?)
    -> DBTEAMLOGSharedContentRemoveLinkExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveLinkExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveLinkExpiryTypeToDB(object: DBXTeamLogSharedContentRemoveLinkExpiryType) -> DBTEAMLOGSharedContentRemoveLinkExpiryType {
    DBTEAMLOGSharedContentRemoveLinkExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRemoveLinkPasswordDetailsToDBOptional(object: DBXTeamLogSharedContentRemoveLinkPasswordDetails?)
    -> DBTEAMLOGSharedContentRemoveLinkPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveLinkPasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveLinkPasswordDetailsToDB(object: DBXTeamLogSharedContentRemoveLinkPasswordDetails)
    -> DBTEAMLOGSharedContentRemoveLinkPasswordDetails {
    DBTEAMLOGSharedContentRemoveLinkPasswordDetails(default: ())
}

func mapDBXTeamLogSharedContentRemoveLinkPasswordTypeToDBOptional(object: DBXTeamLogSharedContentRemoveLinkPasswordType?)
    -> DBTEAMLOGSharedContentRemoveLinkPasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveLinkPasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveLinkPasswordTypeToDB(object: DBXTeamLogSharedContentRemoveLinkPasswordType)
    -> DBTEAMLOGSharedContentRemoveLinkPasswordType {
    DBTEAMLOGSharedContentRemoveLinkPasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRemoveMemberDetailsToDBOptional(object: DBXTeamLogSharedContentRemoveMemberDetails?)
    -> DBTEAMLOGSharedContentRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveMemberDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveMemberDetailsToDB(object: DBXTeamLogSharedContentRemoveMemberDetails) -> DBTEAMLOGSharedContentRemoveMemberDetails {
    DBTEAMLOGSharedContentRemoveMemberDetails(sharedContentAccessLevel: mapDBXSharingAccessLevelToDBOptional(object: object.sharedContentAccessLevel))
}

func mapDBXTeamLogSharedContentRemoveMemberTypeToDBOptional(object: DBXTeamLogSharedContentRemoveMemberType?) -> DBTEAMLOGSharedContentRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRemoveMemberTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRemoveMemberTypeToDB(object: DBXTeamLogSharedContentRemoveMemberType) -> DBTEAMLOGSharedContentRemoveMemberType {
    DBTEAMLOGSharedContentRemoveMemberType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRequestAccessDetailsToDBOptional(object: DBXTeamLogSharedContentRequestAccessDetails?)
    -> DBTEAMLOGSharedContentRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRequestAccessDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRequestAccessDetailsToDB(object: DBXTeamLogSharedContentRequestAccessDetails) -> DBTEAMLOGSharedContentRequestAccessDetails {
    DBTEAMLOGSharedContentRequestAccessDetails(sharedContentLink: object.sharedContentLink)
}

func mapDBXTeamLogSharedContentRequestAccessTypeToDBOptional(object: DBXTeamLogSharedContentRequestAccessType?) -> DBTEAMLOGSharedContentRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRequestAccessTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRequestAccessTypeToDB(object: DBXTeamLogSharedContentRequestAccessType) -> DBTEAMLOGSharedContentRequestAccessType {
    DBTEAMLOGSharedContentRequestAccessType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRestoreInviteesDetailsToDBOptional(object: DBXTeamLogSharedContentRestoreInviteesDetails?)
    -> DBTEAMLOGSharedContentRestoreInviteesDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRestoreInviteesDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRestoreInviteesDetailsToDB(object: DBXTeamLogSharedContentRestoreInviteesDetails)
    -> DBTEAMLOGSharedContentRestoreInviteesDetails {
    DBTEAMLOGSharedContentRestoreInviteesDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        invitees: object.invitees
    )
}

func mapDBXTeamLogSharedContentRestoreInviteesTypeToDBOptional(object: DBXTeamLogSharedContentRestoreInviteesType?)
    -> DBTEAMLOGSharedContentRestoreInviteesType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRestoreInviteesTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRestoreInviteesTypeToDB(object: DBXTeamLogSharedContentRestoreInviteesType) -> DBTEAMLOGSharedContentRestoreInviteesType {
    DBTEAMLOGSharedContentRestoreInviteesType(description_: object.description_)
}

func mapDBXTeamLogSharedContentRestoreMemberDetailsToDBOptional(object: DBXTeamLogSharedContentRestoreMemberDetails?)
    -> DBTEAMLOGSharedContentRestoreMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRestoreMemberDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentRestoreMemberDetailsToDB(object: DBXTeamLogSharedContentRestoreMemberDetails) -> DBTEAMLOGSharedContentRestoreMemberDetails {
    DBTEAMLOGSharedContentRestoreMemberDetails(sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel))
}

func mapDBXTeamLogSharedContentRestoreMemberTypeToDBOptional(object: DBXTeamLogSharedContentRestoreMemberType?) -> DBTEAMLOGSharedContentRestoreMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentRestoreMemberTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentRestoreMemberTypeToDB(object: DBXTeamLogSharedContentRestoreMemberType) -> DBTEAMLOGSharedContentRestoreMemberType {
    DBTEAMLOGSharedContentRestoreMemberType(description_: object.description_)
}

func mapDBXTeamLogSharedContentUnshareDetailsToDBOptional(object: DBXTeamLogSharedContentUnshareDetails?) -> DBTEAMLOGSharedContentUnshareDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentUnshareDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentUnshareDetailsToDB(object: DBXTeamLogSharedContentUnshareDetails) -> DBTEAMLOGSharedContentUnshareDetails {
    DBTEAMLOGSharedContentUnshareDetails(default: ())
}

func mapDBXTeamLogSharedContentUnshareTypeToDBOptional(object: DBXTeamLogSharedContentUnshareType?) -> DBTEAMLOGSharedContentUnshareType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentUnshareTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentUnshareTypeToDB(object: DBXTeamLogSharedContentUnshareType) -> DBTEAMLOGSharedContentUnshareType {
    DBTEAMLOGSharedContentUnshareType(description_: object.description_)
}

func mapDBXTeamLogSharedContentViewDetailsToDBOptional(object: DBXTeamLogSharedContentViewDetails?) -> DBTEAMLOGSharedContentViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentViewDetailsToDB(object: object)
}

func mapDBXTeamLogSharedContentViewDetailsToDB(object: DBXTeamLogSharedContentViewDetails) -> DBTEAMLOGSharedContentViewDetails {
    DBTEAMLOGSharedContentViewDetails(
        sharedContentLink: object.sharedContentLink,
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedContentOwner)
    )
}

func mapDBXTeamLogSharedContentViewTypeToDBOptional(object: DBXTeamLogSharedContentViewType?) -> DBTEAMLOGSharedContentViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedContentViewTypeToDB(object: object)
}

func mapDBXTeamLogSharedContentViewTypeToDB(object: DBXTeamLogSharedContentViewType) -> DBTEAMLOGSharedContentViewType {
    DBTEAMLOGSharedContentViewType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderChangeLinkPolicyDetailsToDBOptional(object: DBXTeamLogSharedFolderChangeLinkPolicyDetails?)
    -> DBTEAMLOGSharedFolderChangeLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeLinkPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeLinkPolicyDetailsToDB(object: DBXTeamLogSharedFolderChangeLinkPolicyDetails)
    -> DBTEAMLOGSharedFolderChangeLinkPolicyDetails {
    DBTEAMLOGSharedFolderChangeLinkPolicyDetails(
        dNewValue: mapDBXSharingSharedLinkPolicyToDB(object: object.newValue),
        previousValue: mapDBXSharingSharedLinkPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedFolderChangeLinkPolicyTypeToDBOptional(object: DBXTeamLogSharedFolderChangeLinkPolicyType?)
    -> DBTEAMLOGSharedFolderChangeLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeLinkPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeLinkPolicyTypeToDB(object: DBXTeamLogSharedFolderChangeLinkPolicyType) -> DBTEAMLOGSharedFolderChangeLinkPolicyType {
    DBTEAMLOGSharedFolderChangeLinkPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyDetailsToDBOptional(object: DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails?)
    -> DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyDetailsToDB(object: DBXTeamLogSharedFolderChangeMembersInheritancePolicyDetails)
    -> DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails {
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails(
        dNewValue: mapDBXTeamLogSharedFolderMembersInheritancePolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSharedFolderMembersInheritancePolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyTypeToDBOptional(object: DBXTeamLogSharedFolderChangeMembersInheritancePolicyType?)
    -> DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersInheritancePolicyTypeToDB(object: DBXTeamLogSharedFolderChangeMembersInheritancePolicyType)
    -> DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType {
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderChangeMembersManagementPolicyDetailsToDBOptional(object: DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails?)
    -> DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersManagementPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersManagementPolicyDetailsToDB(object: DBXTeamLogSharedFolderChangeMembersManagementPolicyDetails)
    -> DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails {
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails(
        dNewValue: mapDBXSharingAclUpdatePolicyToDB(object: object.newValue),
        previousValue: mapDBXSharingAclUpdatePolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedFolderChangeMembersManagementPolicyTypeToDBOptional(object: DBXTeamLogSharedFolderChangeMembersManagementPolicyType?)
    -> DBTEAMLOGSharedFolderChangeMembersManagementPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersManagementPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersManagementPolicyTypeToDB(object: DBXTeamLogSharedFolderChangeMembersManagementPolicyType)
    -> DBTEAMLOGSharedFolderChangeMembersManagementPolicyType {
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderChangeMembersPolicyDetailsToDBOptional(object: DBXTeamLogSharedFolderChangeMembersPolicyDetails?)
    -> DBTEAMLOGSharedFolderChangeMembersPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersPolicyDetailsToDB(object: DBXTeamLogSharedFolderChangeMembersPolicyDetails)
    -> DBTEAMLOGSharedFolderChangeMembersPolicyDetails {
    DBTEAMLOGSharedFolderChangeMembersPolicyDetails(
        dNewValue: mapDBXSharingMemberPolicyToDB(object: object.newValue),
        previousValue: mapDBXSharingMemberPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedFolderChangeMembersPolicyTypeToDBOptional(object: DBXTeamLogSharedFolderChangeMembersPolicyType?)
    -> DBTEAMLOGSharedFolderChangeMembersPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderChangeMembersPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderChangeMembersPolicyTypeToDB(object: DBXTeamLogSharedFolderChangeMembersPolicyType)
    -> DBTEAMLOGSharedFolderChangeMembersPolicyType {
    DBTEAMLOGSharedFolderChangeMembersPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderCreateDetailsToDBOptional(object: DBXTeamLogSharedFolderCreateDetails?) -> DBTEAMLOGSharedFolderCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderCreateDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderCreateDetailsToDB(object: DBXTeamLogSharedFolderCreateDetails) -> DBTEAMLOGSharedFolderCreateDetails {
    DBTEAMLOGSharedFolderCreateDetails(targetNsId: object.targetNsId)
}

func mapDBXTeamLogSharedFolderCreateTypeToDBOptional(object: DBXTeamLogSharedFolderCreateType?) -> DBTEAMLOGSharedFolderCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderCreateTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderCreateTypeToDB(object: DBXTeamLogSharedFolderCreateType) -> DBTEAMLOGSharedFolderCreateType {
    DBTEAMLOGSharedFolderCreateType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderDeclineInvitationDetailsToDBOptional(object: DBXTeamLogSharedFolderDeclineInvitationDetails?)
    -> DBTEAMLOGSharedFolderDeclineInvitationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderDeclineInvitationDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderDeclineInvitationDetailsToDB(object: DBXTeamLogSharedFolderDeclineInvitationDetails)
    -> DBTEAMLOGSharedFolderDeclineInvitationDetails {
    DBTEAMLOGSharedFolderDeclineInvitationDetails(default: ())
}

func mapDBXTeamLogSharedFolderDeclineInvitationTypeToDBOptional(object: DBXTeamLogSharedFolderDeclineInvitationType?)
    -> DBTEAMLOGSharedFolderDeclineInvitationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderDeclineInvitationTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderDeclineInvitationTypeToDB(object: DBXTeamLogSharedFolderDeclineInvitationType) -> DBTEAMLOGSharedFolderDeclineInvitationType {
    DBTEAMLOGSharedFolderDeclineInvitationType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderMembersInheritancePolicyToDBOptional(object: DBXTeamLogSharedFolderMembersInheritancePolicy?)
    -> DBTEAMLOGSharedFolderMembersInheritancePolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderMembersInheritancePolicyToDB(object: object)
}

func mapDBXTeamLogSharedFolderMembersInheritancePolicyToDB(object: DBXTeamLogSharedFolderMembersInheritancePolicy)
    -> DBTEAMLOGSharedFolderMembersInheritancePolicy {
    if object.asDontInheritMembers != nil {
        return DBTEAMLOGSharedFolderMembersInheritancePolicy(dontInheritMembers: ())
    }
    if object.asInheritMembers != nil {
        return DBTEAMLOGSharedFolderMembersInheritancePolicy(inheritMembers: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharedFolderMembersInheritancePolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSharedFolderMountDetailsToDBOptional(object: DBXTeamLogSharedFolderMountDetails?) -> DBTEAMLOGSharedFolderMountDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderMountDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderMountDetailsToDB(object: DBXTeamLogSharedFolderMountDetails) -> DBTEAMLOGSharedFolderMountDetails {
    DBTEAMLOGSharedFolderMountDetails(default: ())
}

func mapDBXTeamLogSharedFolderMountTypeToDBOptional(object: DBXTeamLogSharedFolderMountType?) -> DBTEAMLOGSharedFolderMountType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderMountTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderMountTypeToDB(object: DBXTeamLogSharedFolderMountType) -> DBTEAMLOGSharedFolderMountType {
    DBTEAMLOGSharedFolderMountType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderNestDetailsToDBOptional(object: DBXTeamLogSharedFolderNestDetails?) -> DBTEAMLOGSharedFolderNestDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderNestDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderNestDetailsToDB(object: DBXTeamLogSharedFolderNestDetails) -> DBTEAMLOGSharedFolderNestDetails {
    DBTEAMLOGSharedFolderNestDetails(
        previousParentNsId: object.previousParentNsId,
        dNewParentNsId: object.newParentNsId,
        previousNsPath: object.previousNsPath,
        dNewNsPath: object.newNsPath
    )
}

func mapDBXTeamLogSharedFolderNestTypeToDBOptional(object: DBXTeamLogSharedFolderNestType?) -> DBTEAMLOGSharedFolderNestType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderNestTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderNestTypeToDB(object: DBXTeamLogSharedFolderNestType) -> DBTEAMLOGSharedFolderNestType {
    DBTEAMLOGSharedFolderNestType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderTransferOwnershipDetailsToDBOptional(object: DBXTeamLogSharedFolderTransferOwnershipDetails?)
    -> DBTEAMLOGSharedFolderTransferOwnershipDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderTransferOwnershipDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderTransferOwnershipDetailsToDB(object: DBXTeamLogSharedFolderTransferOwnershipDetails)
    -> DBTEAMLOGSharedFolderTransferOwnershipDetails {
    DBTEAMLOGSharedFolderTransferOwnershipDetails(dNewOwnerEmail: object.newOwnerEmail, previousOwnerEmail: object.previousOwnerEmail)
}

func mapDBXTeamLogSharedFolderTransferOwnershipTypeToDBOptional(object: DBXTeamLogSharedFolderTransferOwnershipType?)
    -> DBTEAMLOGSharedFolderTransferOwnershipType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderTransferOwnershipTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderTransferOwnershipTypeToDB(object: DBXTeamLogSharedFolderTransferOwnershipType) -> DBTEAMLOGSharedFolderTransferOwnershipType {
    DBTEAMLOGSharedFolderTransferOwnershipType(description_: object.description_)
}

func mapDBXTeamLogSharedFolderUnmountDetailsToDBOptional(object: DBXTeamLogSharedFolderUnmountDetails?) -> DBTEAMLOGSharedFolderUnmountDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderUnmountDetailsToDB(object: object)
}

func mapDBXTeamLogSharedFolderUnmountDetailsToDB(object: DBXTeamLogSharedFolderUnmountDetails) -> DBTEAMLOGSharedFolderUnmountDetails {
    DBTEAMLOGSharedFolderUnmountDetails(default: ())
}

func mapDBXTeamLogSharedFolderUnmountTypeToDBOptional(object: DBXTeamLogSharedFolderUnmountType?) -> DBTEAMLOGSharedFolderUnmountType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedFolderUnmountTypeToDB(object: object)
}

func mapDBXTeamLogSharedFolderUnmountTypeToDB(object: DBXTeamLogSharedFolderUnmountType) -> DBTEAMLOGSharedFolderUnmountType {
    DBTEAMLOGSharedFolderUnmountType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkAccessLevelToDBOptional(object: DBXTeamLogSharedLinkAccessLevel?) -> DBTEAMLOGSharedLinkAccessLevel? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkAccessLevelToDB(object: object)
}

func mapDBXTeamLogSharedLinkAccessLevelToDB(object: DBXTeamLogSharedLinkAccessLevel) -> DBTEAMLOGSharedLinkAccessLevel {
    if object.asNone != nil {
        return DBTEAMLOGSharedLinkAccessLevel(none: ())
    }
    if object.asReader != nil {
        return DBTEAMLOGSharedLinkAccessLevel(reader: ())
    }
    if object.asWriter != nil {
        return DBTEAMLOGSharedLinkAccessLevel(writer: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharedLinkAccessLevel(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSharedLinkAddExpiryDetailsToDBOptional(object: DBXTeamLogSharedLinkAddExpiryDetails?) -> DBTEAMLOGSharedLinkAddExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkAddExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkAddExpiryDetailsToDB(object: DBXTeamLogSharedLinkAddExpiryDetails) -> DBTEAMLOGSharedLinkAddExpiryDetails {
    DBTEAMLOGSharedLinkAddExpiryDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogSharedLinkAddExpiryTypeToDBOptional(object: DBXTeamLogSharedLinkAddExpiryType?) -> DBTEAMLOGSharedLinkAddExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkAddExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkAddExpiryTypeToDB(object: DBXTeamLogSharedLinkAddExpiryType) -> DBTEAMLOGSharedLinkAddExpiryType {
    DBTEAMLOGSharedLinkAddExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkChangeExpiryDetailsToDBOptional(object: DBXTeamLogSharedLinkChangeExpiryDetails?) -> DBTEAMLOGSharedLinkChangeExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkChangeExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkChangeExpiryDetailsToDB(object: DBXTeamLogSharedLinkChangeExpiryDetails) -> DBTEAMLOGSharedLinkChangeExpiryDetails {
    DBTEAMLOGSharedLinkChangeExpiryDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogSharedLinkChangeExpiryTypeToDBOptional(object: DBXTeamLogSharedLinkChangeExpiryType?) -> DBTEAMLOGSharedLinkChangeExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkChangeExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkChangeExpiryTypeToDB(object: DBXTeamLogSharedLinkChangeExpiryType) -> DBTEAMLOGSharedLinkChangeExpiryType {
    DBTEAMLOGSharedLinkChangeExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkChangeVisibilityDetailsToDBOptional(object: DBXTeamLogSharedLinkChangeVisibilityDetails?)
    -> DBTEAMLOGSharedLinkChangeVisibilityDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkChangeVisibilityDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkChangeVisibilityDetailsToDB(object: DBXTeamLogSharedLinkChangeVisibilityDetails) -> DBTEAMLOGSharedLinkChangeVisibilityDetails {
    DBTEAMLOGSharedLinkChangeVisibilityDetails(
        dNewValue: mapDBXTeamLogSharedLinkVisibilityToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSharedLinkVisibilityToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedLinkChangeVisibilityTypeToDBOptional(object: DBXTeamLogSharedLinkChangeVisibilityType?) -> DBTEAMLOGSharedLinkChangeVisibilityType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkChangeVisibilityTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkChangeVisibilityTypeToDB(object: DBXTeamLogSharedLinkChangeVisibilityType) -> DBTEAMLOGSharedLinkChangeVisibilityType {
    DBTEAMLOGSharedLinkChangeVisibilityType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkCopyDetailsToDBOptional(object: DBXTeamLogSharedLinkCopyDetails?) -> DBTEAMLOGSharedLinkCopyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkCopyDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkCopyDetailsToDB(object: DBXTeamLogSharedLinkCopyDetails) -> DBTEAMLOGSharedLinkCopyDetails {
    DBTEAMLOGSharedLinkCopyDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogSharedLinkCopyTypeToDBOptional(object: DBXTeamLogSharedLinkCopyType?) -> DBTEAMLOGSharedLinkCopyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkCopyTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkCopyTypeToDB(object: DBXTeamLogSharedLinkCopyType) -> DBTEAMLOGSharedLinkCopyType {
    DBTEAMLOGSharedLinkCopyType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkCreateDetailsToDBOptional(object: DBXTeamLogSharedLinkCreateDetails?) -> DBTEAMLOGSharedLinkCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkCreateDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkCreateDetailsToDB(object: DBXTeamLogSharedLinkCreateDetails) -> DBTEAMLOGSharedLinkCreateDetails {
    DBTEAMLOGSharedLinkCreateDetails(sharedLinkAccessLevel: mapDBXTeamLogSharedLinkAccessLevelToDBOptional(object: object.sharedLinkAccessLevel))
}

func mapDBXTeamLogSharedLinkCreateTypeToDBOptional(object: DBXTeamLogSharedLinkCreateType?) -> DBTEAMLOGSharedLinkCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkCreateTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkCreateTypeToDB(object: DBXTeamLogSharedLinkCreateType) -> DBTEAMLOGSharedLinkCreateType {
    DBTEAMLOGSharedLinkCreateType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkDisableDetailsToDBOptional(object: DBXTeamLogSharedLinkDisableDetails?) -> DBTEAMLOGSharedLinkDisableDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkDisableDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkDisableDetailsToDB(object: DBXTeamLogSharedLinkDisableDetails) -> DBTEAMLOGSharedLinkDisableDetails {
    DBTEAMLOGSharedLinkDisableDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogSharedLinkDisableTypeToDBOptional(object: DBXTeamLogSharedLinkDisableType?) -> DBTEAMLOGSharedLinkDisableType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkDisableTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkDisableTypeToDB(object: DBXTeamLogSharedLinkDisableType) -> DBTEAMLOGSharedLinkDisableType {
    DBTEAMLOGSharedLinkDisableType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkDownloadDetailsToDBOptional(object: DBXTeamLogSharedLinkDownloadDetails?) -> DBTEAMLOGSharedLinkDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkDownloadDetailsToDB(object: DBXTeamLogSharedLinkDownloadDetails) -> DBTEAMLOGSharedLinkDownloadDetails {
    DBTEAMLOGSharedLinkDownloadDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogSharedLinkDownloadTypeToDBOptional(object: DBXTeamLogSharedLinkDownloadType?) -> DBTEAMLOGSharedLinkDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkDownloadTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkDownloadTypeToDB(object: DBXTeamLogSharedLinkDownloadType) -> DBTEAMLOGSharedLinkDownloadType {
    DBTEAMLOGSharedLinkDownloadType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkRemoveExpiryDetailsToDBOptional(object: DBXTeamLogSharedLinkRemoveExpiryDetails?) -> DBTEAMLOGSharedLinkRemoveExpiryDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkRemoveExpiryDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkRemoveExpiryDetailsToDB(object: DBXTeamLogSharedLinkRemoveExpiryDetails) -> DBTEAMLOGSharedLinkRemoveExpiryDetails {
    DBTEAMLOGSharedLinkRemoveExpiryDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogSharedLinkRemoveExpiryTypeToDBOptional(object: DBXTeamLogSharedLinkRemoveExpiryType?) -> DBTEAMLOGSharedLinkRemoveExpiryType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkRemoveExpiryTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkRemoveExpiryTypeToDB(object: DBXTeamLogSharedLinkRemoveExpiryType) -> DBTEAMLOGSharedLinkRemoveExpiryType {
    DBTEAMLOGSharedLinkRemoveExpiryType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsAddExpirationDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsAddExpirationDetails?)
    -> DBTEAMLOGSharedLinkSettingsAddExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAddExpirationDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAddExpirationDetailsToDB(object: DBXTeamLogSharedLinkSettingsAddExpirationDetails)
    -> DBTEAMLOGSharedLinkSettingsAddExpirationDetails {
    DBTEAMLOGSharedLinkSettingsAddExpirationDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        dNewValue: object.newValue
    )
}

func mapDBXTeamLogSharedLinkSettingsAddExpirationTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsAddExpirationType?)
    -> DBTEAMLOGSharedLinkSettingsAddExpirationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAddExpirationTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAddExpirationTypeToDB(object: DBXTeamLogSharedLinkSettingsAddExpirationType)
    -> DBTEAMLOGSharedLinkSettingsAddExpirationType {
    DBTEAMLOGSharedLinkSettingsAddExpirationType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsAddPasswordDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsAddPasswordDetails?)
    -> DBTEAMLOGSharedLinkSettingsAddPasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAddPasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAddPasswordDetailsToDB(object: DBXTeamLogSharedLinkSettingsAddPasswordDetails)
    -> DBTEAMLOGSharedLinkSettingsAddPasswordDetails {
    DBTEAMLOGSharedLinkSettingsAddPasswordDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBXTeamLogSharedLinkSettingsAddPasswordTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsAddPasswordType?)
    -> DBTEAMLOGSharedLinkSettingsAddPasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAddPasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAddPasswordTypeToDB(object: DBXTeamLogSharedLinkSettingsAddPasswordType) -> DBTEAMLOGSharedLinkSettingsAddPasswordType {
    DBTEAMLOGSharedLinkSettingsAddPasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails?)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetailsToDB(object: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledDetails)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails {
    DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType?)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadDisabledTypeToDB(object: DBXTeamLogSharedLinkSettingsAllowDownloadDisabledType)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledType {
    DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails?)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetailsToDB(object: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledDetails)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails {
    DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType?)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsAllowDownloadEnabledTypeToDB(object: DBXTeamLogSharedLinkSettingsAllowDownloadEnabledType)
    -> DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledType {
    DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsChangeAudienceDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsChangeAudienceDetails?)
    -> DBTEAMLOGSharedLinkSettingsChangeAudienceDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangeAudienceDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangeAudienceDetailsToDB(object: DBXTeamLogSharedLinkSettingsChangeAudienceDetails)
    -> DBTEAMLOGSharedLinkSettingsChangeAudienceDetails {
    DBTEAMLOGSharedLinkSettingsChangeAudienceDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        dNewValue: mapDBXSharingLinkAudienceToDB(object: object.newValue),
        sharedContentLink: object.sharedContentLink,
        previousValue: mapDBXSharingLinkAudienceToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharedLinkSettingsChangeAudienceTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsChangeAudienceType?)
    -> DBTEAMLOGSharedLinkSettingsChangeAudienceType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangeAudienceTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangeAudienceTypeToDB(object: DBXTeamLogSharedLinkSettingsChangeAudienceType)
    -> DBTEAMLOGSharedLinkSettingsChangeAudienceType {
    DBTEAMLOGSharedLinkSettingsChangeAudienceType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsChangeExpirationDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsChangeExpirationDetails?)
    -> DBTEAMLOGSharedLinkSettingsChangeExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangeExpirationDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangeExpirationDetailsToDB(object: DBXTeamLogSharedLinkSettingsChangeExpirationDetails)
    -> DBTEAMLOGSharedLinkSettingsChangeExpirationDetails {
    DBTEAMLOGSharedLinkSettingsChangeExpirationDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        dNewValue: object.newValue,
        previousValue: object.previousValue
    )
}

func mapDBXTeamLogSharedLinkSettingsChangeExpirationTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsChangeExpirationType?)
    -> DBTEAMLOGSharedLinkSettingsChangeExpirationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangeExpirationTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangeExpirationTypeToDB(object: DBXTeamLogSharedLinkSettingsChangeExpirationType)
    -> DBTEAMLOGSharedLinkSettingsChangeExpirationType {
    DBTEAMLOGSharedLinkSettingsChangeExpirationType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsChangePasswordDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsChangePasswordDetails?)
    -> DBTEAMLOGSharedLinkSettingsChangePasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangePasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangePasswordDetailsToDB(object: DBXTeamLogSharedLinkSettingsChangePasswordDetails)
    -> DBTEAMLOGSharedLinkSettingsChangePasswordDetails {
    DBTEAMLOGSharedLinkSettingsChangePasswordDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBXTeamLogSharedLinkSettingsChangePasswordTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsChangePasswordType?)
    -> DBTEAMLOGSharedLinkSettingsChangePasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsChangePasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsChangePasswordTypeToDB(object: DBXTeamLogSharedLinkSettingsChangePasswordType)
    -> DBTEAMLOGSharedLinkSettingsChangePasswordType {
    DBTEAMLOGSharedLinkSettingsChangePasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsRemoveExpirationDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsRemoveExpirationDetails?)
    -> DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsRemoveExpirationDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsRemoveExpirationDetailsToDB(object: DBXTeamLogSharedLinkSettingsRemoveExpirationDetails)
    -> DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails {
    DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink,
        previousValue: object.previousValue
    )
}

func mapDBXTeamLogSharedLinkSettingsRemoveExpirationTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsRemoveExpirationType?)
    -> DBTEAMLOGSharedLinkSettingsRemoveExpirationType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsRemoveExpirationTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsRemoveExpirationTypeToDB(object: DBXTeamLogSharedLinkSettingsRemoveExpirationType)
    -> DBTEAMLOGSharedLinkSettingsRemoveExpirationType {
    DBTEAMLOGSharedLinkSettingsRemoveExpirationType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkSettingsRemovePasswordDetailsToDBOptional(object: DBXTeamLogSharedLinkSettingsRemovePasswordDetails?)
    -> DBTEAMLOGSharedLinkSettingsRemovePasswordDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsRemovePasswordDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsRemovePasswordDetailsToDB(object: DBXTeamLogSharedLinkSettingsRemovePasswordDetails)
    -> DBTEAMLOGSharedLinkSettingsRemovePasswordDetails {
    DBTEAMLOGSharedLinkSettingsRemovePasswordDetails(
        sharedContentAccessLevel: mapDBXSharingAccessLevelToDB(object: object.sharedContentAccessLevel),
        sharedContentLink: object.sharedContentLink
    )
}

func mapDBXTeamLogSharedLinkSettingsRemovePasswordTypeToDBOptional(object: DBXTeamLogSharedLinkSettingsRemovePasswordType?)
    -> DBTEAMLOGSharedLinkSettingsRemovePasswordType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkSettingsRemovePasswordTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkSettingsRemovePasswordTypeToDB(object: DBXTeamLogSharedLinkSettingsRemovePasswordType)
    -> DBTEAMLOGSharedLinkSettingsRemovePasswordType {
    DBTEAMLOGSharedLinkSettingsRemovePasswordType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkShareDetailsToDBOptional(object: DBXTeamLogSharedLinkShareDetails?) -> DBTEAMLOGSharedLinkShareDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkShareDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkShareDetailsToDB(object: DBXTeamLogSharedLinkShareDetails) -> DBTEAMLOGSharedLinkShareDetails {
    DBTEAMLOGSharedLinkShareDetails(
        sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner),
        externalUsers: object.externalUsers?.compactMap { mapDBXTeamLogExternalUserLogInfoToDB(object: $0) }
    )
}

func mapDBXTeamLogSharedLinkShareTypeToDBOptional(object: DBXTeamLogSharedLinkShareType?) -> DBTEAMLOGSharedLinkShareType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkShareTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkShareTypeToDB(object: DBXTeamLogSharedLinkShareType) -> DBTEAMLOGSharedLinkShareType {
    DBTEAMLOGSharedLinkShareType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkViewDetailsToDBOptional(object: DBXTeamLogSharedLinkViewDetails?) -> DBTEAMLOGSharedLinkViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkViewDetailsToDB(object: object)
}

func mapDBXTeamLogSharedLinkViewDetailsToDB(object: DBXTeamLogSharedLinkViewDetails) -> DBTEAMLOGSharedLinkViewDetails {
    DBTEAMLOGSharedLinkViewDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogSharedLinkViewTypeToDBOptional(object: DBXTeamLogSharedLinkViewType?) -> DBTEAMLOGSharedLinkViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkViewTypeToDB(object: object)
}

func mapDBXTeamLogSharedLinkViewTypeToDB(object: DBXTeamLogSharedLinkViewType) -> DBTEAMLOGSharedLinkViewType {
    DBTEAMLOGSharedLinkViewType(description_: object.description_)
}

func mapDBXTeamLogSharedLinkVisibilityToDBOptional(object: DBXTeamLogSharedLinkVisibility?) -> DBTEAMLOGSharedLinkVisibility? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedLinkVisibilityToDB(object: object)
}

func mapDBXTeamLogSharedLinkVisibilityToDB(object: DBXTeamLogSharedLinkVisibility) -> DBTEAMLOGSharedLinkVisibility {
    if object.asNoOne != nil {
        return DBTEAMLOGSharedLinkVisibility(noOne: ())
    }
    if object.asPassword != nil {
        return DBTEAMLOGSharedLinkVisibility(password: ())
    }
    if object.asPublic_ != nil {
        return DBTEAMLOGSharedLinkVisibility(withPublic: ())
    }
    if object.asTeamOnly != nil {
        return DBTEAMLOGSharedLinkVisibility(teamOnly: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharedLinkVisibility(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSharedNoteOpenedDetailsToDBOptional(object: DBXTeamLogSharedNoteOpenedDetails?) -> DBTEAMLOGSharedNoteOpenedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedNoteOpenedDetailsToDB(object: object)
}

func mapDBXTeamLogSharedNoteOpenedDetailsToDB(object: DBXTeamLogSharedNoteOpenedDetails) -> DBTEAMLOGSharedNoteOpenedDetails {
    DBTEAMLOGSharedNoteOpenedDetails(default: ())
}

func mapDBXTeamLogSharedNoteOpenedTypeToDBOptional(object: DBXTeamLogSharedNoteOpenedType?) -> DBTEAMLOGSharedNoteOpenedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharedNoteOpenedTypeToDB(object: object)
}

func mapDBXTeamLogSharedNoteOpenedTypeToDB(object: DBXTeamLogSharedNoteOpenedType) -> DBTEAMLOGSharedNoteOpenedType {
    DBTEAMLOGSharedNoteOpenedType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeFolderJoinPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeFolderJoinPolicyDetails?)
    -> DBTEAMLOGSharingChangeFolderJoinPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeFolderJoinPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeFolderJoinPolicyDetailsToDB(object: DBXTeamLogSharingChangeFolderJoinPolicyDetails)
    -> DBTEAMLOGSharingChangeFolderJoinPolicyDetails {
    DBTEAMLOGSharingChangeFolderJoinPolicyDetails(
        dNewValue: mapDBXTeamLogSharingFolderJoinPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSharingFolderJoinPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeFolderJoinPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeFolderJoinPolicyType?)
    -> DBTEAMLOGSharingChangeFolderJoinPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeFolderJoinPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeFolderJoinPolicyTypeToDB(object: DBXTeamLogSharingChangeFolderJoinPolicyType) -> DBTEAMLOGSharingChangeFolderJoinPolicyType {
    DBTEAMLOGSharingChangeFolderJoinPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails?)
    -> DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetailsToDB(object: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyDetails)
    -> DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails {
    DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails(
        dNewValue: mapDBXTeamLogEnforceLinkPasswordPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogEnforceLinkPasswordPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType?)
    -> DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyTypeToDB(object: DBXTeamLogSharingChangeLinkAllowChangeExpirationPolicyType)
    -> DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyType {
    DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails?)
    -> DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetailsToDB(object: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyDetails)
    -> DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails {
    DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails(
        dNewValue: mapDBXTeamLogDefaultLinkExpirationDaysPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogDefaultLinkExpirationDaysPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType?)
    -> DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkDefaultExpirationPolicyTypeToDB(object: DBXTeamLogSharingChangeLinkDefaultExpirationPolicyType)
    -> DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyType {
    DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails?)
    -> DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetailsToDB(object: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyDetails)
    -> DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails {
    DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails(
        dNewValue: mapDBXTeamLogChangeLinkExpirationPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogChangeLinkExpirationPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType?)
    -> DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkEnforcePasswordPolicyTypeToDB(object: DBXTeamLogSharingChangeLinkEnforcePasswordPolicyType)
    -> DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyType {
    DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeLinkPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeLinkPolicyDetails?) -> DBTEAMLOGSharingChangeLinkPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkPolicyDetailsToDB(object: DBXTeamLogSharingChangeLinkPolicyDetails) -> DBTEAMLOGSharingChangeLinkPolicyDetails {
    DBTEAMLOGSharingChangeLinkPolicyDetails(
        dNewValue: mapDBXTeamLogSharingLinkPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSharingLinkPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeLinkPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeLinkPolicyType?) -> DBTEAMLOGSharingChangeLinkPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeLinkPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeLinkPolicyTypeToDB(object: DBXTeamLogSharingChangeLinkPolicyType) -> DBTEAMLOGSharingChangeLinkPolicyType {
    DBTEAMLOGSharingChangeLinkPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingChangeMemberPolicyDetailsToDBOptional(object: DBXTeamLogSharingChangeMemberPolicyDetails?)
    -> DBTEAMLOGSharingChangeMemberPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeMemberPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSharingChangeMemberPolicyDetailsToDB(object: DBXTeamLogSharingChangeMemberPolicyDetails) -> DBTEAMLOGSharingChangeMemberPolicyDetails {
    DBTEAMLOGSharingChangeMemberPolicyDetails(
        dNewValue: mapDBXTeamLogSharingMemberPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogSharingMemberPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSharingChangeMemberPolicyTypeToDBOptional(object: DBXTeamLogSharingChangeMemberPolicyType?) -> DBTEAMLOGSharingChangeMemberPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingChangeMemberPolicyTypeToDB(object: object)
}

func mapDBXTeamLogSharingChangeMemberPolicyTypeToDB(object: DBXTeamLogSharingChangeMemberPolicyType) -> DBTEAMLOGSharingChangeMemberPolicyType {
    DBTEAMLOGSharingChangeMemberPolicyType(description_: object.description_)
}

func mapDBXTeamLogSharingFolderJoinPolicyToDBOptional(object: DBXTeamLogSharingFolderJoinPolicy?) -> DBTEAMLOGSharingFolderJoinPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingFolderJoinPolicyToDB(object: object)
}

func mapDBXTeamLogSharingFolderJoinPolicyToDB(object: DBXTeamLogSharingFolderJoinPolicy) -> DBTEAMLOGSharingFolderJoinPolicy {
    if object.asFromAnyone != nil {
        return DBTEAMLOGSharingFolderJoinPolicy(fromAnyone: ())
    }
    if object.asFromTeamOnly != nil {
        return DBTEAMLOGSharingFolderJoinPolicy(fromTeamOnly: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharingFolderJoinPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSharingLinkPolicyToDBOptional(object: DBXTeamLogSharingLinkPolicy?) -> DBTEAMLOGSharingLinkPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingLinkPolicyToDB(object: object)
}

func mapDBXTeamLogSharingLinkPolicyToDB(object: DBXTeamLogSharingLinkPolicy) -> DBTEAMLOGSharingLinkPolicy {
    if object.asDefaultNoOne != nil {
        return DBTEAMLOGSharingLinkPolicy(defaultNoOne: ())
    }
    if object.asDefaultPrivate != nil {
        return DBTEAMLOGSharingLinkPolicy(defaultPrivate: ())
    }
    if object.asDefaultPublic != nil {
        return DBTEAMLOGSharingLinkPolicy(defaultPublic: ())
    }
    if object.asOnlyPrivate != nil {
        return DBTEAMLOGSharingLinkPolicy(onlyPrivate: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharingLinkPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSharingMemberPolicyToDBOptional(object: DBXTeamLogSharingMemberPolicy?) -> DBTEAMLOGSharingMemberPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSharingMemberPolicyToDB(object: object)
}

func mapDBXTeamLogSharingMemberPolicyToDB(object: DBXTeamLogSharingMemberPolicy) -> DBTEAMLOGSharingMemberPolicy {
    if object.asAllow != nil {
        return DBTEAMLOGSharingMemberPolicy(allow: ())
    }
    if object.asForbid != nil {
        return DBTEAMLOGSharingMemberPolicy(forbid: ())
    }
    if object.asForbidWithExclusions != nil {
        return DBTEAMLOGSharingMemberPolicy(forbidWithExclusions: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSharingMemberPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogShmodelDisableDownloadsDetailsToDBOptional(object: DBXTeamLogShmodelDisableDownloadsDetails?) -> DBTEAMLOGShmodelDisableDownloadsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelDisableDownloadsDetailsToDB(object: object)
}

func mapDBXTeamLogShmodelDisableDownloadsDetailsToDB(object: DBXTeamLogShmodelDisableDownloadsDetails) -> DBTEAMLOGShmodelDisableDownloadsDetails {
    DBTEAMLOGShmodelDisableDownloadsDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogShmodelDisableDownloadsTypeToDBOptional(object: DBXTeamLogShmodelDisableDownloadsType?) -> DBTEAMLOGShmodelDisableDownloadsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelDisableDownloadsTypeToDB(object: object)
}

func mapDBXTeamLogShmodelDisableDownloadsTypeToDB(object: DBXTeamLogShmodelDisableDownloadsType) -> DBTEAMLOGShmodelDisableDownloadsType {
    DBTEAMLOGShmodelDisableDownloadsType(description_: object.description_)
}

func mapDBXTeamLogShmodelEnableDownloadsDetailsToDBOptional(object: DBXTeamLogShmodelEnableDownloadsDetails?) -> DBTEAMLOGShmodelEnableDownloadsDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelEnableDownloadsDetailsToDB(object: object)
}

func mapDBXTeamLogShmodelEnableDownloadsDetailsToDB(object: DBXTeamLogShmodelEnableDownloadsDetails) -> DBTEAMLOGShmodelEnableDownloadsDetails {
    DBTEAMLOGShmodelEnableDownloadsDetails(sharedLinkOwner: mapDBXTeamLogUserLogInfoToDBOptional(object: object.sharedLinkOwner))
}

func mapDBXTeamLogShmodelEnableDownloadsTypeToDBOptional(object: DBXTeamLogShmodelEnableDownloadsType?) -> DBTEAMLOGShmodelEnableDownloadsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelEnableDownloadsTypeToDB(object: object)
}

func mapDBXTeamLogShmodelEnableDownloadsTypeToDB(object: DBXTeamLogShmodelEnableDownloadsType) -> DBTEAMLOGShmodelEnableDownloadsType {
    DBTEAMLOGShmodelEnableDownloadsType(description_: object.description_)
}

func mapDBXTeamLogShmodelGroupShareDetailsToDBOptional(object: DBXTeamLogShmodelGroupShareDetails?) -> DBTEAMLOGShmodelGroupShareDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelGroupShareDetailsToDB(object: object)
}

func mapDBXTeamLogShmodelGroupShareDetailsToDB(object: DBXTeamLogShmodelGroupShareDetails) -> DBTEAMLOGShmodelGroupShareDetails {
    DBTEAMLOGShmodelGroupShareDetails(default: ())
}

func mapDBXTeamLogShmodelGroupShareTypeToDBOptional(object: DBXTeamLogShmodelGroupShareType?) -> DBTEAMLOGShmodelGroupShareType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShmodelGroupShareTypeToDB(object: object)
}

func mapDBXTeamLogShmodelGroupShareTypeToDB(object: DBXTeamLogShmodelGroupShareType) -> DBTEAMLOGShmodelGroupShareType {
    DBTEAMLOGShmodelGroupShareType(description_: object.description_)
}

func mapDBXTeamLogShowcaseAccessGrantedDetailsToDBOptional(object: DBXTeamLogShowcaseAccessGrantedDetails?) -> DBTEAMLOGShowcaseAccessGrantedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseAccessGrantedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseAccessGrantedDetailsToDB(object: DBXTeamLogShowcaseAccessGrantedDetails) -> DBTEAMLOGShowcaseAccessGrantedDetails {
    DBTEAMLOGShowcaseAccessGrantedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseAccessGrantedTypeToDBOptional(object: DBXTeamLogShowcaseAccessGrantedType?) -> DBTEAMLOGShowcaseAccessGrantedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseAccessGrantedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseAccessGrantedTypeToDB(object: DBXTeamLogShowcaseAccessGrantedType) -> DBTEAMLOGShowcaseAccessGrantedType {
    DBTEAMLOGShowcaseAccessGrantedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseAddMemberDetailsToDBOptional(object: DBXTeamLogShowcaseAddMemberDetails?) -> DBTEAMLOGShowcaseAddMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseAddMemberDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseAddMemberDetailsToDB(object: DBXTeamLogShowcaseAddMemberDetails) -> DBTEAMLOGShowcaseAddMemberDetails {
    DBTEAMLOGShowcaseAddMemberDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseAddMemberTypeToDBOptional(object: DBXTeamLogShowcaseAddMemberType?) -> DBTEAMLOGShowcaseAddMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseAddMemberTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseAddMemberTypeToDB(object: DBXTeamLogShowcaseAddMemberType) -> DBTEAMLOGShowcaseAddMemberType {
    DBTEAMLOGShowcaseAddMemberType(description_: object.description_)
}

func mapDBXTeamLogShowcaseArchivedDetailsToDBOptional(object: DBXTeamLogShowcaseArchivedDetails?) -> DBTEAMLOGShowcaseArchivedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseArchivedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseArchivedDetailsToDB(object: DBXTeamLogShowcaseArchivedDetails) -> DBTEAMLOGShowcaseArchivedDetails {
    DBTEAMLOGShowcaseArchivedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseArchivedTypeToDBOptional(object: DBXTeamLogShowcaseArchivedType?) -> DBTEAMLOGShowcaseArchivedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseArchivedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseArchivedTypeToDB(object: DBXTeamLogShowcaseArchivedType) -> DBTEAMLOGShowcaseArchivedType {
    DBTEAMLOGShowcaseArchivedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseChangeDownloadPolicyDetailsToDBOptional(object: DBXTeamLogShowcaseChangeDownloadPolicyDetails?)
    -> DBTEAMLOGShowcaseChangeDownloadPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeDownloadPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeDownloadPolicyDetailsToDB(object: DBXTeamLogShowcaseChangeDownloadPolicyDetails)
    -> DBTEAMLOGShowcaseChangeDownloadPolicyDetails {
    DBTEAMLOGShowcaseChangeDownloadPolicyDetails(
        dNewValue: mapDBXTeamLogShowcaseDownloadPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogShowcaseDownloadPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogShowcaseChangeDownloadPolicyTypeToDBOptional(object: DBXTeamLogShowcaseChangeDownloadPolicyType?)
    -> DBTEAMLOGShowcaseChangeDownloadPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeDownloadPolicyTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeDownloadPolicyTypeToDB(object: DBXTeamLogShowcaseChangeDownloadPolicyType) -> DBTEAMLOGShowcaseChangeDownloadPolicyType {
    DBTEAMLOGShowcaseChangeDownloadPolicyType(description_: object.description_)
}

func mapDBXTeamLogShowcaseChangeEnabledPolicyDetailsToDBOptional(object: DBXTeamLogShowcaseChangeEnabledPolicyDetails?)
    -> DBTEAMLOGShowcaseChangeEnabledPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeEnabledPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeEnabledPolicyDetailsToDB(object: DBXTeamLogShowcaseChangeEnabledPolicyDetails) -> DBTEAMLOGShowcaseChangeEnabledPolicyDetails {
    DBTEAMLOGShowcaseChangeEnabledPolicyDetails(
        dNewValue: mapDBXTeamLogShowcaseEnabledPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogShowcaseEnabledPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogShowcaseChangeEnabledPolicyTypeToDBOptional(object: DBXTeamLogShowcaseChangeEnabledPolicyType?) -> DBTEAMLOGShowcaseChangeEnabledPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeEnabledPolicyTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeEnabledPolicyTypeToDB(object: DBXTeamLogShowcaseChangeEnabledPolicyType) -> DBTEAMLOGShowcaseChangeEnabledPolicyType {
    DBTEAMLOGShowcaseChangeEnabledPolicyType(description_: object.description_)
}

func mapDBXTeamLogShowcaseChangeExternalSharingPolicyDetailsToDBOptional(object: DBXTeamLogShowcaseChangeExternalSharingPolicyDetails?)
    -> DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeExternalSharingPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeExternalSharingPolicyDetailsToDB(object: DBXTeamLogShowcaseChangeExternalSharingPolicyDetails)
    -> DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails {
    DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails(
        dNewValue: mapDBXTeamLogShowcaseExternalSharingPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogShowcaseExternalSharingPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogShowcaseChangeExternalSharingPolicyTypeToDBOptional(object: DBXTeamLogShowcaseChangeExternalSharingPolicyType?)
    -> DBTEAMLOGShowcaseChangeExternalSharingPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseChangeExternalSharingPolicyTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseChangeExternalSharingPolicyTypeToDB(object: DBXTeamLogShowcaseChangeExternalSharingPolicyType)
    -> DBTEAMLOGShowcaseChangeExternalSharingPolicyType {
    DBTEAMLOGShowcaseChangeExternalSharingPolicyType(description_: object.description_)
}

func mapDBXTeamLogShowcaseCreatedDetailsToDBOptional(object: DBXTeamLogShowcaseCreatedDetails?) -> DBTEAMLOGShowcaseCreatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseCreatedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseCreatedDetailsToDB(object: DBXTeamLogShowcaseCreatedDetails) -> DBTEAMLOGShowcaseCreatedDetails {
    DBTEAMLOGShowcaseCreatedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseCreatedTypeToDBOptional(object: DBXTeamLogShowcaseCreatedType?) -> DBTEAMLOGShowcaseCreatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseCreatedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseCreatedTypeToDB(object: DBXTeamLogShowcaseCreatedType) -> DBTEAMLOGShowcaseCreatedType {
    DBTEAMLOGShowcaseCreatedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseDeleteCommentDetailsToDBOptional(object: DBXTeamLogShowcaseDeleteCommentDetails?) -> DBTEAMLOGShowcaseDeleteCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseDeleteCommentDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseDeleteCommentDetailsToDB(object: DBXTeamLogShowcaseDeleteCommentDetails) -> DBTEAMLOGShowcaseDeleteCommentDetails {
    DBTEAMLOGShowcaseDeleteCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogShowcaseDeleteCommentTypeToDBOptional(object: DBXTeamLogShowcaseDeleteCommentType?) -> DBTEAMLOGShowcaseDeleteCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseDeleteCommentTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseDeleteCommentTypeToDB(object: DBXTeamLogShowcaseDeleteCommentType) -> DBTEAMLOGShowcaseDeleteCommentType {
    DBTEAMLOGShowcaseDeleteCommentType(description_: object.description_)
}

func mapDBXTeamLogShowcaseDocumentLogInfoToDBOptional(object: DBXTeamLogShowcaseDocumentLogInfo?) -> DBTEAMLOGShowcaseDocumentLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseDocumentLogInfoToDB(object: object)
}

func mapDBXTeamLogShowcaseDocumentLogInfoToDB(object: DBXTeamLogShowcaseDocumentLogInfo) -> DBTEAMLOGShowcaseDocumentLogInfo {
    DBTEAMLOGShowcaseDocumentLogInfo(showcaseId: object.showcaseId, showcaseTitle: object.showcaseTitle)
}

func mapDBXTeamLogShowcaseDownloadPolicyToDBOptional(object: DBXTeamLogShowcaseDownloadPolicy?) -> DBTEAMLOGShowcaseDownloadPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseDownloadPolicyToDB(object: object)
}

func mapDBXTeamLogShowcaseDownloadPolicyToDB(object: DBXTeamLogShowcaseDownloadPolicy) -> DBTEAMLOGShowcaseDownloadPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGShowcaseDownloadPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGShowcaseDownloadPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGShowcaseDownloadPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogShowcaseEditCommentDetailsToDBOptional(object: DBXTeamLogShowcaseEditCommentDetails?) -> DBTEAMLOGShowcaseEditCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseEditCommentDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseEditCommentDetailsToDB(object: DBXTeamLogShowcaseEditCommentDetails) -> DBTEAMLOGShowcaseEditCommentDetails {
    DBTEAMLOGShowcaseEditCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogShowcaseEditCommentTypeToDBOptional(object: DBXTeamLogShowcaseEditCommentType?) -> DBTEAMLOGShowcaseEditCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseEditCommentTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseEditCommentTypeToDB(object: DBXTeamLogShowcaseEditCommentType) -> DBTEAMLOGShowcaseEditCommentType {
    DBTEAMLOGShowcaseEditCommentType(description_: object.description_)
}

func mapDBXTeamLogShowcaseEditedDetailsToDBOptional(object: DBXTeamLogShowcaseEditedDetails?) -> DBTEAMLOGShowcaseEditedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseEditedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseEditedDetailsToDB(object: DBXTeamLogShowcaseEditedDetails) -> DBTEAMLOGShowcaseEditedDetails {
    DBTEAMLOGShowcaseEditedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseEditedTypeToDBOptional(object: DBXTeamLogShowcaseEditedType?) -> DBTEAMLOGShowcaseEditedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseEditedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseEditedTypeToDB(object: DBXTeamLogShowcaseEditedType) -> DBTEAMLOGShowcaseEditedType {
    DBTEAMLOGShowcaseEditedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseEnabledPolicyToDBOptional(object: DBXTeamLogShowcaseEnabledPolicy?) -> DBTEAMLOGShowcaseEnabledPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseEnabledPolicyToDB(object: object)
}

func mapDBXTeamLogShowcaseEnabledPolicyToDB(object: DBXTeamLogShowcaseEnabledPolicy) -> DBTEAMLOGShowcaseEnabledPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGShowcaseEnabledPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGShowcaseEnabledPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGShowcaseEnabledPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogShowcaseExternalSharingPolicyToDBOptional(object: DBXTeamLogShowcaseExternalSharingPolicy?) -> DBTEAMLOGShowcaseExternalSharingPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseExternalSharingPolicyToDB(object: object)
}

func mapDBXTeamLogShowcaseExternalSharingPolicyToDB(object: DBXTeamLogShowcaseExternalSharingPolicy) -> DBTEAMLOGShowcaseExternalSharingPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGShowcaseExternalSharingPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGShowcaseExternalSharingPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGShowcaseExternalSharingPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogShowcaseFileAddedDetailsToDBOptional(object: DBXTeamLogShowcaseFileAddedDetails?) -> DBTEAMLOGShowcaseFileAddedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileAddedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseFileAddedDetailsToDB(object: DBXTeamLogShowcaseFileAddedDetails) -> DBTEAMLOGShowcaseFileAddedDetails {
    DBTEAMLOGShowcaseFileAddedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseFileAddedTypeToDBOptional(object: DBXTeamLogShowcaseFileAddedType?) -> DBTEAMLOGShowcaseFileAddedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileAddedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseFileAddedTypeToDB(object: DBXTeamLogShowcaseFileAddedType) -> DBTEAMLOGShowcaseFileAddedType {
    DBTEAMLOGShowcaseFileAddedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseFileDownloadDetailsToDBOptional(object: DBXTeamLogShowcaseFileDownloadDetails?) -> DBTEAMLOGShowcaseFileDownloadDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileDownloadDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseFileDownloadDetailsToDB(object: DBXTeamLogShowcaseFileDownloadDetails) -> DBTEAMLOGShowcaseFileDownloadDetails {
    DBTEAMLOGShowcaseFileDownloadDetails(eventUuid: object.eventUuid, downloadType: object.downloadType)
}

func mapDBXTeamLogShowcaseFileDownloadTypeToDBOptional(object: DBXTeamLogShowcaseFileDownloadType?) -> DBTEAMLOGShowcaseFileDownloadType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileDownloadTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseFileDownloadTypeToDB(object: DBXTeamLogShowcaseFileDownloadType) -> DBTEAMLOGShowcaseFileDownloadType {
    DBTEAMLOGShowcaseFileDownloadType(description_: object.description_)
}

func mapDBXTeamLogShowcaseFileRemovedDetailsToDBOptional(object: DBXTeamLogShowcaseFileRemovedDetails?) -> DBTEAMLOGShowcaseFileRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileRemovedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseFileRemovedDetailsToDB(object: DBXTeamLogShowcaseFileRemovedDetails) -> DBTEAMLOGShowcaseFileRemovedDetails {
    DBTEAMLOGShowcaseFileRemovedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseFileRemovedTypeToDBOptional(object: DBXTeamLogShowcaseFileRemovedType?) -> DBTEAMLOGShowcaseFileRemovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileRemovedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseFileRemovedTypeToDB(object: DBXTeamLogShowcaseFileRemovedType) -> DBTEAMLOGShowcaseFileRemovedType {
    DBTEAMLOGShowcaseFileRemovedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseFileViewDetailsToDBOptional(object: DBXTeamLogShowcaseFileViewDetails?) -> DBTEAMLOGShowcaseFileViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileViewDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseFileViewDetailsToDB(object: DBXTeamLogShowcaseFileViewDetails) -> DBTEAMLOGShowcaseFileViewDetails {
    DBTEAMLOGShowcaseFileViewDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseFileViewTypeToDBOptional(object: DBXTeamLogShowcaseFileViewType?) -> DBTEAMLOGShowcaseFileViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseFileViewTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseFileViewTypeToDB(object: DBXTeamLogShowcaseFileViewType) -> DBTEAMLOGShowcaseFileViewType {
    DBTEAMLOGShowcaseFileViewType(description_: object.description_)
}

func mapDBXTeamLogShowcasePermanentlyDeletedDetailsToDBOptional(object: DBXTeamLogShowcasePermanentlyDeletedDetails?)
    -> DBTEAMLOGShowcasePermanentlyDeletedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcasePermanentlyDeletedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcasePermanentlyDeletedDetailsToDB(object: DBXTeamLogShowcasePermanentlyDeletedDetails) -> DBTEAMLOGShowcasePermanentlyDeletedDetails {
    DBTEAMLOGShowcasePermanentlyDeletedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcasePermanentlyDeletedTypeToDBOptional(object: DBXTeamLogShowcasePermanentlyDeletedType?) -> DBTEAMLOGShowcasePermanentlyDeletedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcasePermanentlyDeletedTypeToDB(object: object)
}

func mapDBXTeamLogShowcasePermanentlyDeletedTypeToDB(object: DBXTeamLogShowcasePermanentlyDeletedType) -> DBTEAMLOGShowcasePermanentlyDeletedType {
    DBTEAMLOGShowcasePermanentlyDeletedType(description_: object.description_)
}

func mapDBXTeamLogShowcasePostCommentDetailsToDBOptional(object: DBXTeamLogShowcasePostCommentDetails?) -> DBTEAMLOGShowcasePostCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcasePostCommentDetailsToDB(object: object)
}

func mapDBXTeamLogShowcasePostCommentDetailsToDB(object: DBXTeamLogShowcasePostCommentDetails) -> DBTEAMLOGShowcasePostCommentDetails {
    DBTEAMLOGShowcasePostCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogShowcasePostCommentTypeToDBOptional(object: DBXTeamLogShowcasePostCommentType?) -> DBTEAMLOGShowcasePostCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcasePostCommentTypeToDB(object: object)
}

func mapDBXTeamLogShowcasePostCommentTypeToDB(object: DBXTeamLogShowcasePostCommentType) -> DBTEAMLOGShowcasePostCommentType {
    DBTEAMLOGShowcasePostCommentType(description_: object.description_)
}

func mapDBXTeamLogShowcaseRemoveMemberDetailsToDBOptional(object: DBXTeamLogShowcaseRemoveMemberDetails?) -> DBTEAMLOGShowcaseRemoveMemberDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRemoveMemberDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseRemoveMemberDetailsToDB(object: DBXTeamLogShowcaseRemoveMemberDetails) -> DBTEAMLOGShowcaseRemoveMemberDetails {
    DBTEAMLOGShowcaseRemoveMemberDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseRemoveMemberTypeToDBOptional(object: DBXTeamLogShowcaseRemoveMemberType?) -> DBTEAMLOGShowcaseRemoveMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRemoveMemberTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseRemoveMemberTypeToDB(object: DBXTeamLogShowcaseRemoveMemberType) -> DBTEAMLOGShowcaseRemoveMemberType {
    DBTEAMLOGShowcaseRemoveMemberType(description_: object.description_)
}

func mapDBXTeamLogShowcaseRenamedDetailsToDBOptional(object: DBXTeamLogShowcaseRenamedDetails?) -> DBTEAMLOGShowcaseRenamedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRenamedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseRenamedDetailsToDB(object: DBXTeamLogShowcaseRenamedDetails) -> DBTEAMLOGShowcaseRenamedDetails {
    DBTEAMLOGShowcaseRenamedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseRenamedTypeToDBOptional(object: DBXTeamLogShowcaseRenamedType?) -> DBTEAMLOGShowcaseRenamedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRenamedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseRenamedTypeToDB(object: DBXTeamLogShowcaseRenamedType) -> DBTEAMLOGShowcaseRenamedType {
    DBTEAMLOGShowcaseRenamedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseRequestAccessDetailsToDBOptional(object: DBXTeamLogShowcaseRequestAccessDetails?) -> DBTEAMLOGShowcaseRequestAccessDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRequestAccessDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseRequestAccessDetailsToDB(object: DBXTeamLogShowcaseRequestAccessDetails) -> DBTEAMLOGShowcaseRequestAccessDetails {
    DBTEAMLOGShowcaseRequestAccessDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseRequestAccessTypeToDBOptional(object: DBXTeamLogShowcaseRequestAccessType?) -> DBTEAMLOGShowcaseRequestAccessType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRequestAccessTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseRequestAccessTypeToDB(object: DBXTeamLogShowcaseRequestAccessType) -> DBTEAMLOGShowcaseRequestAccessType {
    DBTEAMLOGShowcaseRequestAccessType(description_: object.description_)
}

func mapDBXTeamLogShowcaseResolveCommentDetailsToDBOptional(object: DBXTeamLogShowcaseResolveCommentDetails?) -> DBTEAMLOGShowcaseResolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseResolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseResolveCommentDetailsToDB(object: DBXTeamLogShowcaseResolveCommentDetails) -> DBTEAMLOGShowcaseResolveCommentDetails {
    DBTEAMLOGShowcaseResolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogShowcaseResolveCommentTypeToDBOptional(object: DBXTeamLogShowcaseResolveCommentType?) -> DBTEAMLOGShowcaseResolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseResolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseResolveCommentTypeToDB(object: DBXTeamLogShowcaseResolveCommentType) -> DBTEAMLOGShowcaseResolveCommentType {
    DBTEAMLOGShowcaseResolveCommentType(description_: object.description_)
}

func mapDBXTeamLogShowcaseRestoredDetailsToDBOptional(object: DBXTeamLogShowcaseRestoredDetails?) -> DBTEAMLOGShowcaseRestoredDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRestoredDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseRestoredDetailsToDB(object: DBXTeamLogShowcaseRestoredDetails) -> DBTEAMLOGShowcaseRestoredDetails {
    DBTEAMLOGShowcaseRestoredDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseRestoredTypeToDBOptional(object: DBXTeamLogShowcaseRestoredType?) -> DBTEAMLOGShowcaseRestoredType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseRestoredTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseRestoredTypeToDB(object: DBXTeamLogShowcaseRestoredType) -> DBTEAMLOGShowcaseRestoredType {
    DBTEAMLOGShowcaseRestoredType(description_: object.description_)
}

func mapDBXTeamLogShowcaseTrashedDeprecatedDetailsToDBOptional(object: DBXTeamLogShowcaseTrashedDeprecatedDetails?)
    -> DBTEAMLOGShowcaseTrashedDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseTrashedDeprecatedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseTrashedDeprecatedDetailsToDB(object: DBXTeamLogShowcaseTrashedDeprecatedDetails) -> DBTEAMLOGShowcaseTrashedDeprecatedDetails {
    DBTEAMLOGShowcaseTrashedDeprecatedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseTrashedDeprecatedTypeToDBOptional(object: DBXTeamLogShowcaseTrashedDeprecatedType?) -> DBTEAMLOGShowcaseTrashedDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseTrashedDeprecatedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseTrashedDeprecatedTypeToDB(object: DBXTeamLogShowcaseTrashedDeprecatedType) -> DBTEAMLOGShowcaseTrashedDeprecatedType {
    DBTEAMLOGShowcaseTrashedDeprecatedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseTrashedDetailsToDBOptional(object: DBXTeamLogShowcaseTrashedDetails?) -> DBTEAMLOGShowcaseTrashedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseTrashedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseTrashedDetailsToDB(object: DBXTeamLogShowcaseTrashedDetails) -> DBTEAMLOGShowcaseTrashedDetails {
    DBTEAMLOGShowcaseTrashedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseTrashedTypeToDBOptional(object: DBXTeamLogShowcaseTrashedType?) -> DBTEAMLOGShowcaseTrashedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseTrashedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseTrashedTypeToDB(object: DBXTeamLogShowcaseTrashedType) -> DBTEAMLOGShowcaseTrashedType {
    DBTEAMLOGShowcaseTrashedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseUnresolveCommentDetailsToDBOptional(object: DBXTeamLogShowcaseUnresolveCommentDetails?) -> DBTEAMLOGShowcaseUnresolveCommentDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUnresolveCommentDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseUnresolveCommentDetailsToDB(object: DBXTeamLogShowcaseUnresolveCommentDetails) -> DBTEAMLOGShowcaseUnresolveCommentDetails {
    DBTEAMLOGShowcaseUnresolveCommentDetails(eventUuid: object.eventUuid, commentText: object.commentText)
}

func mapDBXTeamLogShowcaseUnresolveCommentTypeToDBOptional(object: DBXTeamLogShowcaseUnresolveCommentType?) -> DBTEAMLOGShowcaseUnresolveCommentType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUnresolveCommentTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseUnresolveCommentTypeToDB(object: DBXTeamLogShowcaseUnresolveCommentType) -> DBTEAMLOGShowcaseUnresolveCommentType {
    DBTEAMLOGShowcaseUnresolveCommentType(description_: object.description_)
}

func mapDBXTeamLogShowcaseUntrashedDeprecatedDetailsToDBOptional(object: DBXTeamLogShowcaseUntrashedDeprecatedDetails?)
    -> DBTEAMLOGShowcaseUntrashedDeprecatedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUntrashedDeprecatedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseUntrashedDeprecatedDetailsToDB(object: DBXTeamLogShowcaseUntrashedDeprecatedDetails) -> DBTEAMLOGShowcaseUntrashedDeprecatedDetails {
    DBTEAMLOGShowcaseUntrashedDeprecatedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseUntrashedDeprecatedTypeToDBOptional(object: DBXTeamLogShowcaseUntrashedDeprecatedType?) -> DBTEAMLOGShowcaseUntrashedDeprecatedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUntrashedDeprecatedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseUntrashedDeprecatedTypeToDB(object: DBXTeamLogShowcaseUntrashedDeprecatedType) -> DBTEAMLOGShowcaseUntrashedDeprecatedType {
    DBTEAMLOGShowcaseUntrashedDeprecatedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseUntrashedDetailsToDBOptional(object: DBXTeamLogShowcaseUntrashedDetails?) -> DBTEAMLOGShowcaseUntrashedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUntrashedDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseUntrashedDetailsToDB(object: DBXTeamLogShowcaseUntrashedDetails) -> DBTEAMLOGShowcaseUntrashedDetails {
    DBTEAMLOGShowcaseUntrashedDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseUntrashedTypeToDBOptional(object: DBXTeamLogShowcaseUntrashedType?) -> DBTEAMLOGShowcaseUntrashedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseUntrashedTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseUntrashedTypeToDB(object: DBXTeamLogShowcaseUntrashedType) -> DBTEAMLOGShowcaseUntrashedType {
    DBTEAMLOGShowcaseUntrashedType(description_: object.description_)
}

func mapDBXTeamLogShowcaseViewDetailsToDBOptional(object: DBXTeamLogShowcaseViewDetails?) -> DBTEAMLOGShowcaseViewDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseViewDetailsToDB(object: object)
}

func mapDBXTeamLogShowcaseViewDetailsToDB(object: DBXTeamLogShowcaseViewDetails) -> DBTEAMLOGShowcaseViewDetails {
    DBTEAMLOGShowcaseViewDetails(eventUuid: object.eventUuid)
}

func mapDBXTeamLogShowcaseViewTypeToDBOptional(object: DBXTeamLogShowcaseViewType?) -> DBTEAMLOGShowcaseViewType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogShowcaseViewTypeToDB(object: object)
}

func mapDBXTeamLogShowcaseViewTypeToDB(object: DBXTeamLogShowcaseViewType) -> DBTEAMLOGShowcaseViewType {
    DBTEAMLOGShowcaseViewType(description_: object.description_)
}

func mapDBXTeamLogSignInAsSessionEndDetailsToDBOptional(object: DBXTeamLogSignInAsSessionEndDetails?) -> DBTEAMLOGSignInAsSessionEndDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSignInAsSessionEndDetailsToDB(object: object)
}

func mapDBXTeamLogSignInAsSessionEndDetailsToDB(object: DBXTeamLogSignInAsSessionEndDetails) -> DBTEAMLOGSignInAsSessionEndDetails {
    DBTEAMLOGSignInAsSessionEndDetails(default: ())
}

func mapDBXTeamLogSignInAsSessionEndTypeToDBOptional(object: DBXTeamLogSignInAsSessionEndType?) -> DBTEAMLOGSignInAsSessionEndType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSignInAsSessionEndTypeToDB(object: object)
}

func mapDBXTeamLogSignInAsSessionEndTypeToDB(object: DBXTeamLogSignInAsSessionEndType) -> DBTEAMLOGSignInAsSessionEndType {
    DBTEAMLOGSignInAsSessionEndType(description_: object.description_)
}

func mapDBXTeamLogSignInAsSessionStartDetailsToDBOptional(object: DBXTeamLogSignInAsSessionStartDetails?) -> DBTEAMLOGSignInAsSessionStartDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSignInAsSessionStartDetailsToDB(object: object)
}

func mapDBXTeamLogSignInAsSessionStartDetailsToDB(object: DBXTeamLogSignInAsSessionStartDetails) -> DBTEAMLOGSignInAsSessionStartDetails {
    DBTEAMLOGSignInAsSessionStartDetails(default: ())
}

func mapDBXTeamLogSignInAsSessionStartTypeToDBOptional(object: DBXTeamLogSignInAsSessionStartType?) -> DBTEAMLOGSignInAsSessionStartType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSignInAsSessionStartTypeToDB(object: object)
}

func mapDBXTeamLogSignInAsSessionStartTypeToDB(object: DBXTeamLogSignInAsSessionStartType) -> DBTEAMLOGSignInAsSessionStartType {
    DBTEAMLOGSignInAsSessionStartType(description_: object.description_)
}

func mapDBXTeamLogSmartSyncChangePolicyDetailsToDBOptional(object: DBXTeamLogSmartSyncChangePolicyDetails?) -> DBTEAMLOGSmartSyncChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSmartSyncChangePolicyDetailsToDB(object: DBXTeamLogSmartSyncChangePolicyDetails) -> DBTEAMLOGSmartSyncChangePolicyDetails {
    DBTEAMLOGSmartSyncChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesSmartSyncPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamPoliciesSmartSyncPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSmartSyncChangePolicyTypeToDBOptional(object: DBXTeamLogSmartSyncChangePolicyType?) -> DBTEAMLOGSmartSyncChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogSmartSyncChangePolicyTypeToDB(object: DBXTeamLogSmartSyncChangePolicyType) -> DBTEAMLOGSmartSyncChangePolicyType {
    DBTEAMLOGSmartSyncChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportDetailsToDBOptional(object: DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails?)
    -> DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportDetailsToDB(object: object)
}

func mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportDetailsToDB(object: DBXTeamLogSmartSyncCreateAdminPrivilegeReportDetails)
    -> DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails(default: ())
}

func mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportTypeToDBOptional(object: DBXTeamLogSmartSyncCreateAdminPrivilegeReportType?)
    -> DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportTypeToDB(object: object)
}

func mapDBXTeamLogSmartSyncCreateAdminPrivilegeReportTypeToDB(object: DBXTeamLogSmartSyncCreateAdminPrivilegeReportType)
    -> DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportType(description_: object.description_)
}

func mapDBXTeamLogSmartSyncNotOptOutDetailsToDBOptional(object: DBXTeamLogSmartSyncNotOptOutDetails?) -> DBTEAMLOGSmartSyncNotOptOutDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncNotOptOutDetailsToDB(object: object)
}

func mapDBXTeamLogSmartSyncNotOptOutDetailsToDB(object: DBXTeamLogSmartSyncNotOptOutDetails) -> DBTEAMLOGSmartSyncNotOptOutDetails {
    DBTEAMLOGSmartSyncNotOptOutDetails(
        previousValue: mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: object.newValue)
    )
}

func mapDBXTeamLogSmartSyncNotOptOutTypeToDBOptional(object: DBXTeamLogSmartSyncNotOptOutType?) -> DBTEAMLOGSmartSyncNotOptOutType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncNotOptOutTypeToDB(object: object)
}

func mapDBXTeamLogSmartSyncNotOptOutTypeToDB(object: DBXTeamLogSmartSyncNotOptOutType) -> DBTEAMLOGSmartSyncNotOptOutType {
    DBTEAMLOGSmartSyncNotOptOutType(description_: object.description_)
}

func mapDBXTeamLogSmartSyncOptOutDetailsToDBOptional(object: DBXTeamLogSmartSyncOptOutDetails?) -> DBTEAMLOGSmartSyncOptOutDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncOptOutDetailsToDB(object: object)
}

func mapDBXTeamLogSmartSyncOptOutDetailsToDB(object: DBXTeamLogSmartSyncOptOutDetails) -> DBTEAMLOGSmartSyncOptOutDetails {
    DBTEAMLOGSmartSyncOptOutDetails(
        previousValue: mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: object.newValue)
    )
}

func mapDBXTeamLogSmartSyncOptOutPolicyToDBOptional(object: DBXTeamLogSmartSyncOptOutPolicy?) -> DBTEAMLOGSmartSyncOptOutPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: object)
}

func mapDBXTeamLogSmartSyncOptOutPolicyToDB(object: DBXTeamLogSmartSyncOptOutPolicy) -> DBTEAMLOGSmartSyncOptOutPolicy {
    if object.asDefault_ != nil {
        return DBTEAMLOGSmartSyncOptOutPolicy(default_: ())
    }
    if object.asOptedOut != nil {
        return DBTEAMLOGSmartSyncOptOutPolicy(optedOut: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSmartSyncOptOutPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSmartSyncOptOutTypeToDBOptional(object: DBXTeamLogSmartSyncOptOutType?) -> DBTEAMLOGSmartSyncOptOutType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmartSyncOptOutTypeToDB(object: object)
}

func mapDBXTeamLogSmartSyncOptOutTypeToDB(object: DBXTeamLogSmartSyncOptOutType) -> DBTEAMLOGSmartSyncOptOutType {
    DBTEAMLOGSmartSyncOptOutType(description_: object.description_)
}

func mapDBXTeamLogSmarterSmartSyncPolicyChangedDetailsToDBOptional(object: DBXTeamLogSmarterSmartSyncPolicyChangedDetails?)
    -> DBTEAMLOGSmarterSmartSyncPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmarterSmartSyncPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogSmarterSmartSyncPolicyChangedDetailsToDB(object: DBXTeamLogSmarterSmartSyncPolicyChangedDetails)
    -> DBTEAMLOGSmarterSmartSyncPolicyChangedDetails {
    DBTEAMLOGSmarterSmartSyncPolicyChangedDetails(
        previousValue: mapDBXTeamPoliciesSmarterSmartSyncPolicyStateToDB(object: object.previousValue),
        dNewValue: mapDBXTeamPoliciesSmarterSmartSyncPolicyStateToDB(object: object.newValue)
    )
}

func mapDBXTeamLogSmarterSmartSyncPolicyChangedTypeToDBOptional(object: DBXTeamLogSmarterSmartSyncPolicyChangedType?)
    -> DBTEAMLOGSmarterSmartSyncPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSmarterSmartSyncPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogSmarterSmartSyncPolicyChangedTypeToDB(object: DBXTeamLogSmarterSmartSyncPolicyChangedType) -> DBTEAMLOGSmarterSmartSyncPolicyChangedType {
    DBTEAMLOGSmarterSmartSyncPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogSpaceCapsTypeToDBOptional(object: DBXTeamLogSpaceCapsType?) -> DBTEAMLOGSpaceCapsType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSpaceCapsTypeToDB(object: object)
}

func mapDBXTeamLogSpaceCapsTypeToDB(object: DBXTeamLogSpaceCapsType) -> DBTEAMLOGSpaceCapsType {
    if object.asHard != nil {
        return DBTEAMLOGSpaceCapsType(hard: ())
    }
    if object.asOff != nil {
        return DBTEAMLOGSpaceCapsType(off: ())
    }
    if object.asSoft != nil {
        return DBTEAMLOGSpaceCapsType(soft: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSpaceCapsType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSpaceLimitsStatusToDBOptional(object: DBXTeamLogSpaceLimitsStatus?) -> DBTEAMLOGSpaceLimitsStatus? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSpaceLimitsStatusToDB(object: object)
}

func mapDBXTeamLogSpaceLimitsStatusToDB(object: DBXTeamLogSpaceLimitsStatus) -> DBTEAMLOGSpaceLimitsStatus {
    if object.asNearQuota != nil {
        return DBTEAMLOGSpaceLimitsStatus(nearQuota: ())
    }
    if object.asOverQuota != nil {
        return DBTEAMLOGSpaceLimitsStatus(overQuota: ())
    }
    if object.asWithinQuota != nil {
        return DBTEAMLOGSpaceLimitsStatus(withinQuota: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGSpaceLimitsStatus(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogSsoAddCertDetailsToDBOptional(object: DBXTeamLogSsoAddCertDetails?) -> DBTEAMLOGSsoAddCertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddCertDetailsToDB(object: object)
}

func mapDBXTeamLogSsoAddCertDetailsToDB(object: DBXTeamLogSsoAddCertDetails) -> DBTEAMLOGSsoAddCertDetails {
    DBTEAMLOGSsoAddCertDetails(certificateDetails: mapDBXTeamLogCertificateToDB(object: object.certificateDetails))
}

func mapDBXTeamLogSsoAddCertTypeToDBOptional(object: DBXTeamLogSsoAddCertType?) -> DBTEAMLOGSsoAddCertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddCertTypeToDB(object: object)
}

func mapDBXTeamLogSsoAddCertTypeToDB(object: DBXTeamLogSsoAddCertType) -> DBTEAMLOGSsoAddCertType {
    DBTEAMLOGSsoAddCertType(description_: object.description_)
}

func mapDBXTeamLogSsoAddLoginUrlDetailsToDBOptional(object: DBXTeamLogSsoAddLoginUrlDetails?) -> DBTEAMLOGSsoAddLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddLoginUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoAddLoginUrlDetailsToDB(object: DBXTeamLogSsoAddLoginUrlDetails) -> DBTEAMLOGSsoAddLoginUrlDetails {
    DBTEAMLOGSsoAddLoginUrlDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogSsoAddLoginUrlTypeToDBOptional(object: DBXTeamLogSsoAddLoginUrlType?) -> DBTEAMLOGSsoAddLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddLoginUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoAddLoginUrlTypeToDB(object: DBXTeamLogSsoAddLoginUrlType) -> DBTEAMLOGSsoAddLoginUrlType {
    DBTEAMLOGSsoAddLoginUrlType(description_: object.description_)
}

func mapDBXTeamLogSsoAddLogoutUrlDetailsToDBOptional(object: DBXTeamLogSsoAddLogoutUrlDetails?) -> DBTEAMLOGSsoAddLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddLogoutUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoAddLogoutUrlDetailsToDB(object: DBXTeamLogSsoAddLogoutUrlDetails) -> DBTEAMLOGSsoAddLogoutUrlDetails {
    DBTEAMLOGSsoAddLogoutUrlDetails(dNewValue: object.newValue)
}

func mapDBXTeamLogSsoAddLogoutUrlTypeToDBOptional(object: DBXTeamLogSsoAddLogoutUrlType?) -> DBTEAMLOGSsoAddLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoAddLogoutUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoAddLogoutUrlTypeToDB(object: DBXTeamLogSsoAddLogoutUrlType) -> DBTEAMLOGSsoAddLogoutUrlType {
    DBTEAMLOGSsoAddLogoutUrlType(description_: object.description_)
}

func mapDBXTeamLogSsoChangeCertDetailsToDBOptional(object: DBXTeamLogSsoChangeCertDetails?) -> DBTEAMLOGSsoChangeCertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeCertDetailsToDB(object: object)
}

func mapDBXTeamLogSsoChangeCertDetailsToDB(object: DBXTeamLogSsoChangeCertDetails) -> DBTEAMLOGSsoChangeCertDetails {
    DBTEAMLOGSsoChangeCertDetails(
        dNewCertificateDetails: mapDBXTeamLogCertificateToDB(object: object.newCertificateDetails),
        previousCertificateDetails: mapDBXTeamLogCertificateToDBOptional(object: object.previousCertificateDetails)
    )
}

func mapDBXTeamLogSsoChangeCertTypeToDBOptional(object: DBXTeamLogSsoChangeCertType?) -> DBTEAMLOGSsoChangeCertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeCertTypeToDB(object: object)
}

func mapDBXTeamLogSsoChangeCertTypeToDB(object: DBXTeamLogSsoChangeCertType) -> DBTEAMLOGSsoChangeCertType {
    DBTEAMLOGSsoChangeCertType(description_: object.description_)
}

func mapDBXTeamLogSsoChangeLoginUrlDetailsToDBOptional(object: DBXTeamLogSsoChangeLoginUrlDetails?) -> DBTEAMLOGSsoChangeLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeLoginUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoChangeLoginUrlDetailsToDB(object: DBXTeamLogSsoChangeLoginUrlDetails) -> DBTEAMLOGSsoChangeLoginUrlDetails {
    DBTEAMLOGSsoChangeLoginUrlDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogSsoChangeLoginUrlTypeToDBOptional(object: DBXTeamLogSsoChangeLoginUrlType?) -> DBTEAMLOGSsoChangeLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeLoginUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoChangeLoginUrlTypeToDB(object: DBXTeamLogSsoChangeLoginUrlType) -> DBTEAMLOGSsoChangeLoginUrlType {
    DBTEAMLOGSsoChangeLoginUrlType(description_: object.description_)
}

func mapDBXTeamLogSsoChangeLogoutUrlDetailsToDBOptional(object: DBXTeamLogSsoChangeLogoutUrlDetails?) -> DBTEAMLOGSsoChangeLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeLogoutUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoChangeLogoutUrlDetailsToDB(object: DBXTeamLogSsoChangeLogoutUrlDetails) -> DBTEAMLOGSsoChangeLogoutUrlDetails {
    DBTEAMLOGSsoChangeLogoutUrlDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogSsoChangeLogoutUrlTypeToDBOptional(object: DBXTeamLogSsoChangeLogoutUrlType?) -> DBTEAMLOGSsoChangeLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeLogoutUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoChangeLogoutUrlTypeToDB(object: DBXTeamLogSsoChangeLogoutUrlType) -> DBTEAMLOGSsoChangeLogoutUrlType {
    DBTEAMLOGSsoChangeLogoutUrlType(description_: object.description_)
}

func mapDBXTeamLogSsoChangePolicyDetailsToDBOptional(object: DBXTeamLogSsoChangePolicyDetails?) -> DBTEAMLOGSsoChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogSsoChangePolicyDetailsToDB(object: DBXTeamLogSsoChangePolicyDetails) -> DBTEAMLOGSsoChangePolicyDetails {
    DBTEAMLOGSsoChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesSsoPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesSsoPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogSsoChangePolicyTypeToDBOptional(object: DBXTeamLogSsoChangePolicyType?) -> DBTEAMLOGSsoChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogSsoChangePolicyTypeToDB(object: DBXTeamLogSsoChangePolicyType) -> DBTEAMLOGSsoChangePolicyType {
    DBTEAMLOGSsoChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogSsoChangeSamlIdentityModeDetailsToDBOptional(object: DBXTeamLogSsoChangeSamlIdentityModeDetails?)
    -> DBTEAMLOGSsoChangeSamlIdentityModeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeSamlIdentityModeDetailsToDB(object: object)
}

func mapDBXTeamLogSsoChangeSamlIdentityModeDetailsToDB(object: DBXTeamLogSsoChangeSamlIdentityModeDetails) -> DBTEAMLOGSsoChangeSamlIdentityModeDetails {
    DBTEAMLOGSsoChangeSamlIdentityModeDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogSsoChangeSamlIdentityModeTypeToDBOptional(object: DBXTeamLogSsoChangeSamlIdentityModeType?) -> DBTEAMLOGSsoChangeSamlIdentityModeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoChangeSamlIdentityModeTypeToDB(object: object)
}

func mapDBXTeamLogSsoChangeSamlIdentityModeTypeToDB(object: DBXTeamLogSsoChangeSamlIdentityModeType) -> DBTEAMLOGSsoChangeSamlIdentityModeType {
    DBTEAMLOGSsoChangeSamlIdentityModeType(description_: object.description_)
}

func mapDBXTeamLogSsoErrorDetailsToDBOptional(object: DBXTeamLogSsoErrorDetails?) -> DBTEAMLOGSsoErrorDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoErrorDetailsToDB(object: object)
}

func mapDBXTeamLogSsoErrorDetailsToDB(object: DBXTeamLogSsoErrorDetails) -> DBTEAMLOGSsoErrorDetails {
    DBTEAMLOGSsoErrorDetails(errorDetails: mapDBXTeamLogFailureDetailsLogInfoToDB(object: object.errorDetails))
}

func mapDBXTeamLogSsoErrorTypeToDBOptional(object: DBXTeamLogSsoErrorType?) -> DBTEAMLOGSsoErrorType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoErrorTypeToDB(object: object)
}

func mapDBXTeamLogSsoErrorTypeToDB(object: DBXTeamLogSsoErrorType) -> DBTEAMLOGSsoErrorType {
    DBTEAMLOGSsoErrorType(description_: object.description_)
}

func mapDBXTeamLogSsoRemoveCertDetailsToDBOptional(object: DBXTeamLogSsoRemoveCertDetails?) -> DBTEAMLOGSsoRemoveCertDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveCertDetailsToDB(object: object)
}

func mapDBXTeamLogSsoRemoveCertDetailsToDB(object: DBXTeamLogSsoRemoveCertDetails) -> DBTEAMLOGSsoRemoveCertDetails {
    DBTEAMLOGSsoRemoveCertDetails(default: ())
}

func mapDBXTeamLogSsoRemoveCertTypeToDBOptional(object: DBXTeamLogSsoRemoveCertType?) -> DBTEAMLOGSsoRemoveCertType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveCertTypeToDB(object: object)
}

func mapDBXTeamLogSsoRemoveCertTypeToDB(object: DBXTeamLogSsoRemoveCertType) -> DBTEAMLOGSsoRemoveCertType {
    DBTEAMLOGSsoRemoveCertType(description_: object.description_)
}

func mapDBXTeamLogSsoRemoveLoginUrlDetailsToDBOptional(object: DBXTeamLogSsoRemoveLoginUrlDetails?) -> DBTEAMLOGSsoRemoveLoginUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveLoginUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoRemoveLoginUrlDetailsToDB(object: DBXTeamLogSsoRemoveLoginUrlDetails) -> DBTEAMLOGSsoRemoveLoginUrlDetails {
    DBTEAMLOGSsoRemoveLoginUrlDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogSsoRemoveLoginUrlTypeToDBOptional(object: DBXTeamLogSsoRemoveLoginUrlType?) -> DBTEAMLOGSsoRemoveLoginUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveLoginUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoRemoveLoginUrlTypeToDB(object: DBXTeamLogSsoRemoveLoginUrlType) -> DBTEAMLOGSsoRemoveLoginUrlType {
    DBTEAMLOGSsoRemoveLoginUrlType(description_: object.description_)
}

func mapDBXTeamLogSsoRemoveLogoutUrlDetailsToDBOptional(object: DBXTeamLogSsoRemoveLogoutUrlDetails?) -> DBTEAMLOGSsoRemoveLogoutUrlDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveLogoutUrlDetailsToDB(object: object)
}

func mapDBXTeamLogSsoRemoveLogoutUrlDetailsToDB(object: DBXTeamLogSsoRemoveLogoutUrlDetails) -> DBTEAMLOGSsoRemoveLogoutUrlDetails {
    DBTEAMLOGSsoRemoveLogoutUrlDetails(previousValue: object.previousValue)
}

func mapDBXTeamLogSsoRemoveLogoutUrlTypeToDBOptional(object: DBXTeamLogSsoRemoveLogoutUrlType?) -> DBTEAMLOGSsoRemoveLogoutUrlType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogSsoRemoveLogoutUrlTypeToDB(object: object)
}

func mapDBXTeamLogSsoRemoveLogoutUrlTypeToDB(object: DBXTeamLogSsoRemoveLogoutUrlType) -> DBTEAMLOGSsoRemoveLogoutUrlType {
    DBTEAMLOGSsoRemoveLogoutUrlType(description_: object.description_)
}

func mapDBXTeamLogStartedEnterpriseAdminSessionDetailsToDBOptional(object: DBXTeamLogStartedEnterpriseAdminSessionDetails?)
    -> DBTEAMLOGStartedEnterpriseAdminSessionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogStartedEnterpriseAdminSessionDetailsToDB(object: object)
}

func mapDBXTeamLogStartedEnterpriseAdminSessionDetailsToDB(object: DBXTeamLogStartedEnterpriseAdminSessionDetails)
    -> DBTEAMLOGStartedEnterpriseAdminSessionDetails {
    DBTEAMLOGStartedEnterpriseAdminSessionDetails(federationExtraDetails: mapDBXTeamLogFedExtraDetailsToDB(object: object.federationExtraDetails))
}

func mapDBXTeamLogStartedEnterpriseAdminSessionTypeToDBOptional(object: DBXTeamLogStartedEnterpriseAdminSessionType?)
    -> DBTEAMLOGStartedEnterpriseAdminSessionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogStartedEnterpriseAdminSessionTypeToDB(object: object)
}

func mapDBXTeamLogStartedEnterpriseAdminSessionTypeToDB(object: DBXTeamLogStartedEnterpriseAdminSessionType) -> DBTEAMLOGStartedEnterpriseAdminSessionType {
    DBTEAMLOGStartedEnterpriseAdminSessionType(description_: object.description_)
}

func mapDBXTeamLogTeamActivityCreateReportDetailsToDBOptional(object: DBXTeamLogTeamActivityCreateReportDetails?) -> DBTEAMLOGTeamActivityCreateReportDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamActivityCreateReportDetailsToDB(object: object)
}

func mapDBXTeamLogTeamActivityCreateReportDetailsToDB(object: DBXTeamLogTeamActivityCreateReportDetails) -> DBTEAMLOGTeamActivityCreateReportDetails {
    DBTEAMLOGTeamActivityCreateReportDetails(startDate: object.startDate, endDate: object.endDate)
}

func mapDBXTeamLogTeamActivityCreateReportFailDetailsToDBOptional(object: DBXTeamLogTeamActivityCreateReportFailDetails?)
    -> DBTEAMLOGTeamActivityCreateReportFailDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamActivityCreateReportFailDetailsToDB(object: object)
}

func mapDBXTeamLogTeamActivityCreateReportFailDetailsToDB(object: DBXTeamLogTeamActivityCreateReportFailDetails)
    -> DBTEAMLOGTeamActivityCreateReportFailDetails {
    DBTEAMLOGTeamActivityCreateReportFailDetails(failureReason: mapDBXTeamTeamReportFailureReasonToDB(object: object.failureReason))
}

func mapDBXTeamLogTeamActivityCreateReportFailTypeToDBOptional(object: DBXTeamLogTeamActivityCreateReportFailType?)
    -> DBTEAMLOGTeamActivityCreateReportFailType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamActivityCreateReportFailTypeToDB(object: object)
}

func mapDBXTeamLogTeamActivityCreateReportFailTypeToDB(object: DBXTeamLogTeamActivityCreateReportFailType) -> DBTEAMLOGTeamActivityCreateReportFailType {
    DBTEAMLOGTeamActivityCreateReportFailType(description_: object.description_)
}

func mapDBXTeamLogTeamActivityCreateReportTypeToDBOptional(object: DBXTeamLogTeamActivityCreateReportType?) -> DBTEAMLOGTeamActivityCreateReportType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamActivityCreateReportTypeToDB(object: object)
}

func mapDBXTeamLogTeamActivityCreateReportTypeToDB(object: DBXTeamLogTeamActivityCreateReportType) -> DBTEAMLOGTeamActivityCreateReportType {
    DBTEAMLOGTeamActivityCreateReportType(description_: object.description_)
}

func mapDBXTeamLogTeamBrandingPolicyToDBOptional(object: DBXTeamLogTeamBrandingPolicy?) -> DBTEAMLOGTeamBrandingPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamBrandingPolicyToDB(object: object)
}

func mapDBXTeamLogTeamBrandingPolicyToDB(object: DBXTeamLogTeamBrandingPolicy) -> DBTEAMLOGTeamBrandingPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGTeamBrandingPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGTeamBrandingPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamBrandingPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamBrandingPolicyChangedDetailsToDBOptional(object: DBXTeamLogTeamBrandingPolicyChangedDetails?)
    -> DBTEAMLOGTeamBrandingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamBrandingPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamBrandingPolicyChangedDetailsToDB(object: DBXTeamLogTeamBrandingPolicyChangedDetails) -> DBTEAMLOGTeamBrandingPolicyChangedDetails {
    DBTEAMLOGTeamBrandingPolicyChangedDetails(
        dNewValue: mapDBXTeamLogTeamBrandingPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTeamBrandingPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogTeamBrandingPolicyChangedTypeToDBOptional(object: DBXTeamLogTeamBrandingPolicyChangedType?) -> DBTEAMLOGTeamBrandingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamBrandingPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogTeamBrandingPolicyChangedTypeToDB(object: DBXTeamLogTeamBrandingPolicyChangedType) -> DBTEAMLOGTeamBrandingPolicyChangedType {
    DBTEAMLOGTeamBrandingPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogTeamDetailsToDBOptional(object: DBXTeamLogTeamDetails?) -> DBTEAMLOGTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamDetailsToDB(object: DBXTeamLogTeamDetails) -> DBTEAMLOGTeamDetails {
    DBTEAMLOGTeamDetails(team: object.team)
}

func mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails?)
    -> DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetailsToDB(object: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionDetails)
    -> DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetails {
    DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType?)
    -> DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyCancelKeyDeletionTypeToDB(object: DBXTeamLogTeamEncryptionKeyCancelKeyDeletionType)
    -> DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionType {
    DBTEAMLOGTeamEncryptionKeyCancelKeyDeletionType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyCreateKeyDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyCreateKeyDetails?)
    -> DBTEAMLOGTeamEncryptionKeyCreateKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyCreateKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyCreateKeyDetailsToDB(object: DBXTeamLogTeamEncryptionKeyCreateKeyDetails) -> DBTEAMLOGTeamEncryptionKeyCreateKeyDetails {
    DBTEAMLOGTeamEncryptionKeyCreateKeyDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyCreateKeyTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyCreateKeyType?) -> DBTEAMLOGTeamEncryptionKeyCreateKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyCreateKeyTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyCreateKeyTypeToDB(object: DBXTeamLogTeamEncryptionKeyCreateKeyType) -> DBTEAMLOGTeamEncryptionKeyCreateKeyType {
    DBTEAMLOGTeamEncryptionKeyCreateKeyType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyDeleteKeyDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyDeleteKeyDetails?)
    -> DBTEAMLOGTeamEncryptionKeyDeleteKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyDeleteKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyDeleteKeyDetailsToDB(object: DBXTeamLogTeamEncryptionKeyDeleteKeyDetails) -> DBTEAMLOGTeamEncryptionKeyDeleteKeyDetails {
    DBTEAMLOGTeamEncryptionKeyDeleteKeyDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyDeleteKeyTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyDeleteKeyType?) -> DBTEAMLOGTeamEncryptionKeyDeleteKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyDeleteKeyTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyDeleteKeyTypeToDB(object: DBXTeamLogTeamEncryptionKeyDeleteKeyType) -> DBTEAMLOGTeamEncryptionKeyDeleteKeyType {
    DBTEAMLOGTeamEncryptionKeyDeleteKeyType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyDisableKeyDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyDisableKeyDetails?)
    -> DBTEAMLOGTeamEncryptionKeyDisableKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyDisableKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyDisableKeyDetailsToDB(object: DBXTeamLogTeamEncryptionKeyDisableKeyDetails) -> DBTEAMLOGTeamEncryptionKeyDisableKeyDetails {
    DBTEAMLOGTeamEncryptionKeyDisableKeyDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyDisableKeyTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyDisableKeyType?) -> DBTEAMLOGTeamEncryptionKeyDisableKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyDisableKeyTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyDisableKeyTypeToDB(object: DBXTeamLogTeamEncryptionKeyDisableKeyType) -> DBTEAMLOGTeamEncryptionKeyDisableKeyType {
    DBTEAMLOGTeamEncryptionKeyDisableKeyType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyEnableKeyDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyEnableKeyDetails?)
    -> DBTEAMLOGTeamEncryptionKeyEnableKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyEnableKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyEnableKeyDetailsToDB(object: DBXTeamLogTeamEncryptionKeyEnableKeyDetails) -> DBTEAMLOGTeamEncryptionKeyEnableKeyDetails {
    DBTEAMLOGTeamEncryptionKeyEnableKeyDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyEnableKeyTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyEnableKeyType?) -> DBTEAMLOGTeamEncryptionKeyEnableKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyEnableKeyTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyEnableKeyTypeToDB(object: DBXTeamLogTeamEncryptionKeyEnableKeyType) -> DBTEAMLOGTeamEncryptionKeyEnableKeyType {
    DBTEAMLOGTeamEncryptionKeyEnableKeyType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyRotateKeyDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyRotateKeyDetails?)
    -> DBTEAMLOGTeamEncryptionKeyRotateKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyRotateKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyRotateKeyDetailsToDB(object: DBXTeamLogTeamEncryptionKeyRotateKeyDetails) -> DBTEAMLOGTeamEncryptionKeyRotateKeyDetails {
    DBTEAMLOGTeamEncryptionKeyRotateKeyDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyRotateKeyTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyRotateKeyType?) -> DBTEAMLOGTeamEncryptionKeyRotateKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyRotateKeyTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyRotateKeyTypeToDB(object: DBXTeamLogTeamEncryptionKeyRotateKeyType) -> DBTEAMLOGTeamEncryptionKeyRotateKeyType {
    DBTEAMLOGTeamEncryptionKeyRotateKeyType(description_: object.description_)
}

func mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetailsToDBOptional(object: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails?)
    -> DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetailsToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetailsToDB(object: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionDetails)
    -> DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetails {
    DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionDetails(default: ())
}

func mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionTypeToDBOptional(object: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType?)
    -> DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionTypeToDB(object: object)
}

func mapDBXTeamLogTeamEncryptionKeyScheduleKeyDeletionTypeToDB(object: DBXTeamLogTeamEncryptionKeyScheduleKeyDeletionType)
    -> DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionType {
    DBTEAMLOGTeamEncryptionKeyScheduleKeyDeletionType(description_: object.description_)
}

func mapDBXTeamLogTeamEventToDBOptional(object: DBXTeamLogTeamEvent?) -> DBTEAMLOGTeamEvent? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamEventToDB(object: object)
}

func mapDBXTeamLogTeamEventToDB(object: DBXTeamLogTeamEvent) -> DBTEAMLOGTeamEvent {
    DBTEAMLOGTeamEvent(
        timestamp: object.timestamp_,
        eventCategory: mapDBXTeamLogEventCategoryToDB(object: object.eventCategory),
        eventType: mapDBXTeamLogEventTypeToDB(object: object.eventType),
        details: mapDBXTeamLogEventDetailsToDB(object: object.details),
        actor: mapDBXTeamLogActorLogInfoToDBOptional(object: object.actor),
        origin: mapDBXTeamLogOriginLogInfoToDBOptional(object: object.origin),
        involveNonTeamMember: object.involveNonTeamMember,
        context: mapDBXTeamLogContextLogInfoToDBOptional(object: object.context),
        participants: object.participants?.compactMap { mapDBXTeamLogParticipantLogInfoToDB(object: $0) },
        assets: object.assets?.compactMap { mapDBXTeamLogAssetLogInfoToDB(object: $0) }
    )
}

func mapDBXTeamLogTeamExtensionsPolicyToDBOptional(object: DBXTeamLogTeamExtensionsPolicy?) -> DBTEAMLOGTeamExtensionsPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamExtensionsPolicyToDB(object: object)
}

func mapDBXTeamLogTeamExtensionsPolicyToDB(object: DBXTeamLogTeamExtensionsPolicy) -> DBTEAMLOGTeamExtensionsPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGTeamExtensionsPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGTeamExtensionsPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamExtensionsPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamExtensionsPolicyChangedDetailsToDBOptional(object: DBXTeamLogTeamExtensionsPolicyChangedDetails?)
    -> DBTEAMLOGTeamExtensionsPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamExtensionsPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamExtensionsPolicyChangedDetailsToDB(object: DBXTeamLogTeamExtensionsPolicyChangedDetails) -> DBTEAMLOGTeamExtensionsPolicyChangedDetails {
    DBTEAMLOGTeamExtensionsPolicyChangedDetails(
        dNewValue: mapDBXTeamLogTeamExtensionsPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTeamExtensionsPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogTeamExtensionsPolicyChangedTypeToDBOptional(object: DBXTeamLogTeamExtensionsPolicyChangedType?) -> DBTEAMLOGTeamExtensionsPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamExtensionsPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogTeamExtensionsPolicyChangedTypeToDB(object: DBXTeamLogTeamExtensionsPolicyChangedType) -> DBTEAMLOGTeamExtensionsPolicyChangedType {
    DBTEAMLOGTeamExtensionsPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogTeamFolderChangeStatusDetailsToDBOptional(object: DBXTeamLogTeamFolderChangeStatusDetails?) -> DBTEAMLOGTeamFolderChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderChangeStatusDetailsToDB(object: object)
}

func mapDBXTeamLogTeamFolderChangeStatusDetailsToDB(object: DBXTeamLogTeamFolderChangeStatusDetails) -> DBTEAMLOGTeamFolderChangeStatusDetails {
    DBTEAMLOGTeamFolderChangeStatusDetails(
        dNewValue: mapDBXTeamTeamFolderStatusToDB(object: object.newValue),
        previousValue: mapDBXTeamTeamFolderStatusToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogTeamFolderChangeStatusTypeToDBOptional(object: DBXTeamLogTeamFolderChangeStatusType?) -> DBTEAMLOGTeamFolderChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderChangeStatusTypeToDB(object: object)
}

func mapDBXTeamLogTeamFolderChangeStatusTypeToDB(object: DBXTeamLogTeamFolderChangeStatusType) -> DBTEAMLOGTeamFolderChangeStatusType {
    DBTEAMLOGTeamFolderChangeStatusType(description_: object.description_)
}

func mapDBXTeamLogTeamFolderCreateDetailsToDBOptional(object: DBXTeamLogTeamFolderCreateDetails?) -> DBTEAMLOGTeamFolderCreateDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderCreateDetailsToDB(object: object)
}

func mapDBXTeamLogTeamFolderCreateDetailsToDB(object: DBXTeamLogTeamFolderCreateDetails) -> DBTEAMLOGTeamFolderCreateDetails {
    DBTEAMLOGTeamFolderCreateDetails(default: ())
}

func mapDBXTeamLogTeamFolderCreateTypeToDBOptional(object: DBXTeamLogTeamFolderCreateType?) -> DBTEAMLOGTeamFolderCreateType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderCreateTypeToDB(object: object)
}

func mapDBXTeamLogTeamFolderCreateTypeToDB(object: DBXTeamLogTeamFolderCreateType) -> DBTEAMLOGTeamFolderCreateType {
    DBTEAMLOGTeamFolderCreateType(description_: object.description_)
}

func mapDBXTeamLogTeamFolderDowngradeDetailsToDBOptional(object: DBXTeamLogTeamFolderDowngradeDetails?) -> DBTEAMLOGTeamFolderDowngradeDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderDowngradeDetailsToDB(object: object)
}

func mapDBXTeamLogTeamFolderDowngradeDetailsToDB(object: DBXTeamLogTeamFolderDowngradeDetails) -> DBTEAMLOGTeamFolderDowngradeDetails {
    DBTEAMLOGTeamFolderDowngradeDetails(targetAssetIndex: object.targetAssetIndex)
}

func mapDBXTeamLogTeamFolderDowngradeTypeToDBOptional(object: DBXTeamLogTeamFolderDowngradeType?) -> DBTEAMLOGTeamFolderDowngradeType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderDowngradeTypeToDB(object: object)
}

func mapDBXTeamLogTeamFolderDowngradeTypeToDB(object: DBXTeamLogTeamFolderDowngradeType) -> DBTEAMLOGTeamFolderDowngradeType {
    DBTEAMLOGTeamFolderDowngradeType(description_: object.description_)
}

func mapDBXTeamLogTeamFolderPermanentlyDeleteDetailsToDBOptional(object: DBXTeamLogTeamFolderPermanentlyDeleteDetails?)
    -> DBTEAMLOGTeamFolderPermanentlyDeleteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderPermanentlyDeleteDetailsToDB(object: object)
}

func mapDBXTeamLogTeamFolderPermanentlyDeleteDetailsToDB(object: DBXTeamLogTeamFolderPermanentlyDeleteDetails) -> DBTEAMLOGTeamFolderPermanentlyDeleteDetails {
    DBTEAMLOGTeamFolderPermanentlyDeleteDetails(default: ())
}

func mapDBXTeamLogTeamFolderPermanentlyDeleteTypeToDBOptional(object: DBXTeamLogTeamFolderPermanentlyDeleteType?) -> DBTEAMLOGTeamFolderPermanentlyDeleteType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderPermanentlyDeleteTypeToDB(object: object)
}

func mapDBXTeamLogTeamFolderPermanentlyDeleteTypeToDB(object: DBXTeamLogTeamFolderPermanentlyDeleteType) -> DBTEAMLOGTeamFolderPermanentlyDeleteType {
    DBTEAMLOGTeamFolderPermanentlyDeleteType(description_: object.description_)
}

func mapDBXTeamLogTeamFolderRenameDetailsToDBOptional(object: DBXTeamLogTeamFolderRenameDetails?) -> DBTEAMLOGTeamFolderRenameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderRenameDetailsToDB(object: object)
}

func mapDBXTeamLogTeamFolderRenameDetailsToDB(object: DBXTeamLogTeamFolderRenameDetails) -> DBTEAMLOGTeamFolderRenameDetails {
    DBTEAMLOGTeamFolderRenameDetails(previousFolderName: object.previousFolderName, dNewFolderName: object.newFolderName)
}

func mapDBXTeamLogTeamFolderRenameTypeToDBOptional(object: DBXTeamLogTeamFolderRenameType?) -> DBTEAMLOGTeamFolderRenameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamFolderRenameTypeToDB(object: object)
}

func mapDBXTeamLogTeamFolderRenameTypeToDB(object: DBXTeamLogTeamFolderRenameType) -> DBTEAMLOGTeamFolderRenameType {
    DBTEAMLOGTeamFolderRenameType(description_: object.description_)
}

func mapDBXTeamLogTeamInviteDetailsToDBOptional(object: DBXTeamLogTeamInviteDetails?) -> DBTEAMLOGTeamInviteDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamInviteDetailsToDB(object: object)
}

func mapDBXTeamLogTeamInviteDetailsToDB(object: DBXTeamLogTeamInviteDetails) -> DBTEAMLOGTeamInviteDetails {
    DBTEAMLOGTeamInviteDetails(
        inviteMethod: mapDBXTeamLogInviteMethodToDB(object: object.inviteMethod),
        additionalLicensePurchase: object.additionalLicensePurchase
    )
}

func mapDBXTeamLogTeamLinkedAppLogInfoToDBOptional(object: DBXTeamLogTeamLinkedAppLogInfo?) -> DBTEAMLOGTeamLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamLinkedAppLogInfoToDB(object: object)
}

func mapDBXTeamLogTeamLinkedAppLogInfoToDB(object: DBXTeamLogTeamLinkedAppLogInfo) -> DBTEAMLOGTeamLinkedAppLogInfo {
    DBTEAMLOGTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBXTeamLogTeamLogInfoToDBOptional(object: DBXTeamLogTeamLogInfo?) -> DBTEAMLOGTeamLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamLogInfoToDB(object: object)
}

func mapDBXTeamLogTeamLogInfoToDB(object: DBXTeamLogTeamLogInfo) -> DBTEAMLOGTeamLogInfo {
    DBTEAMLOGTeamLogInfo(displayName: object.displayName)
}

func mapDBXTeamLogTeamMemberLogInfoToDBOptional(object: DBXTeamLogTeamMemberLogInfo?) -> DBTEAMLOGTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMemberLogInfoToDB(object: object)
}

func mapDBXTeamLogTeamMemberLogInfoToDB(object: DBXTeamLogTeamMemberLogInfo) -> DBTEAMLOGTeamMemberLogInfo {
    DBTEAMLOGTeamMemberLogInfo(
        accountId: object.accountId,
        displayName: object.displayName,
        email: object.email,
        teamMemberId: object.teamMemberId,
        memberExternalId: object.memberExternalId,
        team: mapDBXTeamLogTeamLogInfoToDBOptional(object: object.team)
    )
}

func mapDBXTeamLogTeamMembershipTypeToDBOptional(object: DBXTeamLogTeamMembershipType?) -> DBTEAMLOGTeamMembershipType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMembershipTypeToDB(object: object)
}

func mapDBXTeamLogTeamMembershipTypeToDB(object: DBXTeamLogTeamMembershipType) -> DBTEAMLOGTeamMembershipType {
    if object.asFree != nil {
        return DBTEAMLOGTeamMembershipType(free: ())
    }
    if object.asFull != nil {
        return DBTEAMLOGTeamMembershipType(full: ())
    }
    if object.asGuest != nil {
        return DBTEAMLOGTeamMembershipType(guest: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamMembershipType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamMergeFromDetailsToDBOptional(object: DBXTeamLogTeamMergeFromDetails?) -> DBTEAMLOGTeamMergeFromDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeFromDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeFromDetailsToDB(object: DBXTeamLogTeamMergeFromDetails) -> DBTEAMLOGTeamMergeFromDetails {
    DBTEAMLOGTeamMergeFromDetails(teamName: object.teamName)
}

func mapDBXTeamLogTeamMergeFromTypeToDBOptional(object: DBXTeamLogTeamMergeFromType?) -> DBTEAMLOGTeamMergeFromType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeFromTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeFromTypeToDB(object: DBXTeamLogTeamMergeFromType) -> DBTEAMLOGTeamMergeFromType {
    DBTEAMLOGTeamMergeFromType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestAcceptedDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedDetails?) -> DBTEAMLOGTeamMergeRequestAcceptedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedDetailsToDB(object: DBXTeamLogTeamMergeRequestAcceptedDetails) -> DBTEAMLOGTeamMergeRequestAcceptedDetails {
    DBTEAMLOGTeamMergeRequestAcceptedDetails(requestAcceptedDetails: mapDBXTeamLogTeamMergeRequestAcceptedExtraDetailsToDB(
        object: object
            .requestAcceptedDetails
    ))
}

func mapDBXTeamLogTeamMergeRequestAcceptedExtraDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedExtraDetails?)
    -> DBTEAMLOGTeamMergeRequestAcceptedExtraDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedExtraDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedExtraDetailsToDB(object: DBXTeamLogTeamMergeRequestAcceptedExtraDetails)
    -> DBTEAMLOGTeamMergeRequestAcceptedExtraDetails {
    if let object = object.asPrimaryTeam {
        let primaryTeam = mapDBXTeamLogPrimaryTeamRequestAcceptedDetailsToDB(object: object.primaryTeam)
        return DBTEAMLOGTeamMergeRequestAcceptedExtraDetails(primaryTeam: primaryTeam)
    }
    if let object = object.asSecondaryTeam {
        let secondaryTeam = mapDBXTeamLogSecondaryTeamRequestAcceptedDetailsToDB(object: object.secondaryTeam)
        return DBTEAMLOGTeamMergeRequestAcceptedExtraDetails(secondaryTeam: secondaryTeam)
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamMergeRequestAcceptedExtraDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestAcceptedShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails(primaryTeam: object.primaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestAcceptedShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestAcceptedTypeToDBOptional(object: DBXTeamLogTeamMergeRequestAcceptedType?) -> DBTEAMLOGTeamMergeRequestAcceptedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAcceptedTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAcceptedTypeToDB(object: DBXTeamLogTeamMergeRequestAcceptedType) -> DBTEAMLOGTeamMergeRequestAcceptedType {
    DBTEAMLOGTeamMergeRequestAcceptedType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestAutoCanceledDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestAutoCanceledDetails?)
    -> DBTEAMLOGTeamMergeRequestAutoCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAutoCanceledDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAutoCanceledDetailsToDB(object: DBXTeamLogTeamMergeRequestAutoCanceledDetails)
    -> DBTEAMLOGTeamMergeRequestAutoCanceledDetails {
    DBTEAMLOGTeamMergeRequestAutoCanceledDetails(details: object.details)
}

func mapDBXTeamLogTeamMergeRequestAutoCanceledTypeToDBOptional(object: DBXTeamLogTeamMergeRequestAutoCanceledType?)
    -> DBTEAMLOGTeamMergeRequestAutoCanceledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestAutoCanceledTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestAutoCanceledTypeToDB(object: DBXTeamLogTeamMergeRequestAutoCanceledType) -> DBTEAMLOGTeamMergeRequestAutoCanceledType {
    DBTEAMLOGTeamMergeRequestAutoCanceledType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestCanceledDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledDetails?) -> DBTEAMLOGTeamMergeRequestCanceledDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledDetailsToDB(object: DBXTeamLogTeamMergeRequestCanceledDetails) -> DBTEAMLOGTeamMergeRequestCanceledDetails {
    DBTEAMLOGTeamMergeRequestCanceledDetails(requestCanceledDetails: mapDBXTeamLogTeamMergeRequestCanceledExtraDetailsToDB(
        object: object
            .requestCanceledDetails
    ))
}

func mapDBXTeamLogTeamMergeRequestCanceledExtraDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledExtraDetails?)
    -> DBTEAMLOGTeamMergeRequestCanceledExtraDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledExtraDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledExtraDetailsToDB(object: DBXTeamLogTeamMergeRequestCanceledExtraDetails)
    -> DBTEAMLOGTeamMergeRequestCanceledExtraDetails {
    if let object = object.asPrimaryTeam {
        let primaryTeam = mapDBXTeamLogPrimaryTeamRequestCanceledDetailsToDB(object: object.primaryTeam)
        return DBTEAMLOGTeamMergeRequestCanceledExtraDetails(primaryTeam: primaryTeam)
    }
    if let object = object.asSecondaryTeam {
        let secondaryTeam = mapDBXTeamLogSecondaryTeamRequestCanceledDetailsToDB(object: object.secondaryTeam)
        return DBTEAMLOGTeamMergeRequestCanceledExtraDetails(secondaryTeam: secondaryTeam)
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamMergeRequestCanceledExtraDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestCanceledShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails(sentTo: object.sentTo, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestCanceledShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestCanceledTypeToDBOptional(object: DBXTeamLogTeamMergeRequestCanceledType?) -> DBTEAMLOGTeamMergeRequestCanceledType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestCanceledTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestCanceledTypeToDB(object: DBXTeamLogTeamMergeRequestCanceledType) -> DBTEAMLOGTeamMergeRequestCanceledType {
    DBTEAMLOGTeamMergeRequestCanceledType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestExpiredDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredDetails?) -> DBTEAMLOGTeamMergeRequestExpiredDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredDetailsToDB(object: DBXTeamLogTeamMergeRequestExpiredDetails) -> DBTEAMLOGTeamMergeRequestExpiredDetails {
    DBTEAMLOGTeamMergeRequestExpiredDetails(requestExpiredDetails: mapDBXTeamLogTeamMergeRequestExpiredExtraDetailsToDB(object: object.requestExpiredDetails))
}

func mapDBXTeamLogTeamMergeRequestExpiredExtraDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredExtraDetails?)
    -> DBTEAMLOGTeamMergeRequestExpiredExtraDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredExtraDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredExtraDetailsToDB(object: DBXTeamLogTeamMergeRequestExpiredExtraDetails)
    -> DBTEAMLOGTeamMergeRequestExpiredExtraDetails {
    if let object = object.asPrimaryTeam {
        let primaryTeam = mapDBXTeamLogPrimaryTeamRequestExpiredDetailsToDB(object: object.primaryTeam)
        return DBTEAMLOGTeamMergeRequestExpiredExtraDetails(primaryTeam: primaryTeam)
    }
    if let object = object.asSecondaryTeam {
        let secondaryTeam = mapDBXTeamLogSecondaryTeamRequestExpiredDetailsToDB(object: object.secondaryTeam)
        return DBTEAMLOGTeamMergeRequestExpiredExtraDetails(secondaryTeam: secondaryTeam)
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamMergeRequestExpiredExtraDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestExpiredShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestExpiredShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestExpiredTypeToDBOptional(object: DBXTeamLogTeamMergeRequestExpiredType?) -> DBTEAMLOGTeamMergeRequestExpiredType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestExpiredTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestExpiredTypeToDB(object: DBXTeamLogTeamMergeRequestExpiredType) -> DBTEAMLOGTeamMergeRequestExpiredType {
    DBTEAMLOGTeamMergeRequestExpiredType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestRejectedShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails(sentBy: object.sentBy)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestRejectedShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestReminderDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestReminderDetails?) -> DBTEAMLOGTeamMergeRequestReminderDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderDetailsToDB(object: DBXTeamLogTeamMergeRequestReminderDetails) -> DBTEAMLOGTeamMergeRequestReminderDetails {
    DBTEAMLOGTeamMergeRequestReminderDetails(requestReminderDetails: mapDBXTeamLogTeamMergeRequestReminderExtraDetailsToDB(
        object: object
            .requestReminderDetails
    ))
}

func mapDBXTeamLogTeamMergeRequestReminderExtraDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestReminderExtraDetails?)
    -> DBTEAMLOGTeamMergeRequestReminderExtraDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderExtraDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderExtraDetailsToDB(object: DBXTeamLogTeamMergeRequestReminderExtraDetails)
    -> DBTEAMLOGTeamMergeRequestReminderExtraDetails {
    if let object = object.asPrimaryTeam {
        let primaryTeam = mapDBXTeamLogPrimaryTeamRequestReminderDetailsToDB(object: object.primaryTeam)
        return DBTEAMLOGTeamMergeRequestReminderExtraDetails(primaryTeam: primaryTeam)
    }
    if let object = object.asSecondaryTeam {
        let secondaryTeam = mapDBXTeamLogSecondaryTeamRequestReminderDetailsToDB(object: object.secondaryTeam)
        return DBTEAMLOGTeamMergeRequestReminderExtraDetails(secondaryTeam: secondaryTeam)
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamMergeRequestReminderExtraDetails(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestReminderShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestReminderShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestReminderTypeToDBOptional(object: DBXTeamLogTeamMergeRequestReminderType?) -> DBTEAMLOGTeamMergeRequestReminderType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestReminderTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestReminderTypeToDB(object: DBXTeamLogTeamMergeRequestReminderType) -> DBTEAMLOGTeamMergeRequestReminderType {
    DBTEAMLOGTeamMergeRequestReminderType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestRevokedDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestRevokedDetails?) -> DBTEAMLOGTeamMergeRequestRevokedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRevokedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRevokedDetailsToDB(object: DBXTeamLogTeamMergeRequestRevokedDetails) -> DBTEAMLOGTeamMergeRequestRevokedDetails {
    DBTEAMLOGTeamMergeRequestRevokedDetails(team: object.team)
}

func mapDBXTeamLogTeamMergeRequestRevokedTypeToDBOptional(object: DBXTeamLogTeamMergeRequestRevokedType?) -> DBTEAMLOGTeamMergeRequestRevokedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestRevokedTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestRevokedTypeToDB(object: DBXTeamLogTeamMergeRequestRevokedType) -> DBTEAMLOGTeamMergeRequestRevokedType {
    DBTEAMLOGTeamMergeRequestRevokedType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails {
    DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails(secondaryTeam: object.secondaryTeam, sentTo: object.sentTo)
}

func mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestSentShownToPrimaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestSentShownToPrimaryTeamType)
    -> DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamType {
    DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetailsToDBOptional(object: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails?)
    -> DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetailsToDB(object: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamDetails)
    -> DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails {
    DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails(sentTo: object.sentTo)
}

func mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamTypeToDBOptional(object: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType?)
    -> DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeRequestSentShownToSecondaryTeamTypeToDB(object: DBXTeamLogTeamMergeRequestSentShownToSecondaryTeamType)
    -> DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamType {
    DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamType(description_: object.description_)
}

func mapDBXTeamLogTeamMergeToDetailsToDBOptional(object: DBXTeamLogTeamMergeToDetails?) -> DBTEAMLOGTeamMergeToDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeToDetailsToDB(object: object)
}

func mapDBXTeamLogTeamMergeToDetailsToDB(object: DBXTeamLogTeamMergeToDetails) -> DBTEAMLOGTeamMergeToDetails {
    DBTEAMLOGTeamMergeToDetails(teamName: object.teamName)
}

func mapDBXTeamLogTeamMergeToTypeToDBOptional(object: DBXTeamLogTeamMergeToType?) -> DBTEAMLOGTeamMergeToType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamMergeToTypeToDB(object: object)
}

func mapDBXTeamLogTeamMergeToTypeToDB(object: DBXTeamLogTeamMergeToType) -> DBTEAMLOGTeamMergeToType {
    DBTEAMLOGTeamMergeToType(description_: object.description_)
}

func mapDBXTeamLogTeamNameToDBOptional(object: DBXTeamLogTeamName?) -> DBTEAMLOGTeamName? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamNameToDB(object: object)
}

func mapDBXTeamLogTeamNameToDB(object: DBXTeamLogTeamName) -> DBTEAMLOGTeamName {
    DBTEAMLOGTeamName(teamDisplayName: object.teamDisplayName, teamLegalName: object.teamLegalName)
}

func mapDBXTeamLogTeamProfileAddBackgroundDetailsToDBOptional(object: DBXTeamLogTeamProfileAddBackgroundDetails?) -> DBTEAMLOGTeamProfileAddBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileAddBackgroundDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileAddBackgroundDetailsToDB(object: DBXTeamLogTeamProfileAddBackgroundDetails) -> DBTEAMLOGTeamProfileAddBackgroundDetails {
    DBTEAMLOGTeamProfileAddBackgroundDetails(default: ())
}

func mapDBXTeamLogTeamProfileAddBackgroundTypeToDBOptional(object: DBXTeamLogTeamProfileAddBackgroundType?) -> DBTEAMLOGTeamProfileAddBackgroundType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileAddBackgroundTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileAddBackgroundTypeToDB(object: DBXTeamLogTeamProfileAddBackgroundType) -> DBTEAMLOGTeamProfileAddBackgroundType {
    DBTEAMLOGTeamProfileAddBackgroundType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileAddLogoDetailsToDBOptional(object: DBXTeamLogTeamProfileAddLogoDetails?) -> DBTEAMLOGTeamProfileAddLogoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileAddLogoDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileAddLogoDetailsToDB(object: DBXTeamLogTeamProfileAddLogoDetails) -> DBTEAMLOGTeamProfileAddLogoDetails {
    DBTEAMLOGTeamProfileAddLogoDetails(default: ())
}

func mapDBXTeamLogTeamProfileAddLogoTypeToDBOptional(object: DBXTeamLogTeamProfileAddLogoType?) -> DBTEAMLOGTeamProfileAddLogoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileAddLogoTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileAddLogoTypeToDB(object: DBXTeamLogTeamProfileAddLogoType) -> DBTEAMLOGTeamProfileAddLogoType {
    DBTEAMLOGTeamProfileAddLogoType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileChangeBackgroundDetailsToDBOptional(object: DBXTeamLogTeamProfileChangeBackgroundDetails?)
    -> DBTEAMLOGTeamProfileChangeBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeBackgroundDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeBackgroundDetailsToDB(object: DBXTeamLogTeamProfileChangeBackgroundDetails) -> DBTEAMLOGTeamProfileChangeBackgroundDetails {
    DBTEAMLOGTeamProfileChangeBackgroundDetails(default: ())
}

func mapDBXTeamLogTeamProfileChangeBackgroundTypeToDBOptional(object: DBXTeamLogTeamProfileChangeBackgroundType?) -> DBTEAMLOGTeamProfileChangeBackgroundType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeBackgroundTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeBackgroundTypeToDB(object: DBXTeamLogTeamProfileChangeBackgroundType) -> DBTEAMLOGTeamProfileChangeBackgroundType {
    DBTEAMLOGTeamProfileChangeBackgroundType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileChangeDefaultLanguageDetailsToDBOptional(object: DBXTeamLogTeamProfileChangeDefaultLanguageDetails?)
    -> DBTEAMLOGTeamProfileChangeDefaultLanguageDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeDefaultLanguageDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeDefaultLanguageDetailsToDB(object: DBXTeamLogTeamProfileChangeDefaultLanguageDetails)
    -> DBTEAMLOGTeamProfileChangeDefaultLanguageDetails {
    DBTEAMLOGTeamProfileChangeDefaultLanguageDetails(dNewValue: object.newValue, previousValue: object.previousValue)
}

func mapDBXTeamLogTeamProfileChangeDefaultLanguageTypeToDBOptional(object: DBXTeamLogTeamProfileChangeDefaultLanguageType?)
    -> DBTEAMLOGTeamProfileChangeDefaultLanguageType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeDefaultLanguageTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeDefaultLanguageTypeToDB(object: DBXTeamLogTeamProfileChangeDefaultLanguageType)
    -> DBTEAMLOGTeamProfileChangeDefaultLanguageType {
    DBTEAMLOGTeamProfileChangeDefaultLanguageType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileChangeLogoDetailsToDBOptional(object: DBXTeamLogTeamProfileChangeLogoDetails?) -> DBTEAMLOGTeamProfileChangeLogoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeLogoDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeLogoDetailsToDB(object: DBXTeamLogTeamProfileChangeLogoDetails) -> DBTEAMLOGTeamProfileChangeLogoDetails {
    DBTEAMLOGTeamProfileChangeLogoDetails(default: ())
}

func mapDBXTeamLogTeamProfileChangeLogoTypeToDBOptional(object: DBXTeamLogTeamProfileChangeLogoType?) -> DBTEAMLOGTeamProfileChangeLogoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeLogoTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeLogoTypeToDB(object: DBXTeamLogTeamProfileChangeLogoType) -> DBTEAMLOGTeamProfileChangeLogoType {
    DBTEAMLOGTeamProfileChangeLogoType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileChangeNameDetailsToDBOptional(object: DBXTeamLogTeamProfileChangeNameDetails?) -> DBTEAMLOGTeamProfileChangeNameDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeNameDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeNameDetailsToDB(object: DBXTeamLogTeamProfileChangeNameDetails) -> DBTEAMLOGTeamProfileChangeNameDetails {
    DBTEAMLOGTeamProfileChangeNameDetails(
        dNewValue: mapDBXTeamLogTeamNameToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTeamNameToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogTeamProfileChangeNameTypeToDBOptional(object: DBXTeamLogTeamProfileChangeNameType?) -> DBTEAMLOGTeamProfileChangeNameType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileChangeNameTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileChangeNameTypeToDB(object: DBXTeamLogTeamProfileChangeNameType) -> DBTEAMLOGTeamProfileChangeNameType {
    DBTEAMLOGTeamProfileChangeNameType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileRemoveBackgroundDetailsToDBOptional(object: DBXTeamLogTeamProfileRemoveBackgroundDetails?)
    -> DBTEAMLOGTeamProfileRemoveBackgroundDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileRemoveBackgroundDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileRemoveBackgroundDetailsToDB(object: DBXTeamLogTeamProfileRemoveBackgroundDetails) -> DBTEAMLOGTeamProfileRemoveBackgroundDetails {
    DBTEAMLOGTeamProfileRemoveBackgroundDetails(default: ())
}

func mapDBXTeamLogTeamProfileRemoveBackgroundTypeToDBOptional(object: DBXTeamLogTeamProfileRemoveBackgroundType?) -> DBTEAMLOGTeamProfileRemoveBackgroundType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileRemoveBackgroundTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileRemoveBackgroundTypeToDB(object: DBXTeamLogTeamProfileRemoveBackgroundType) -> DBTEAMLOGTeamProfileRemoveBackgroundType {
    DBTEAMLOGTeamProfileRemoveBackgroundType(description_: object.description_)
}

func mapDBXTeamLogTeamProfileRemoveLogoDetailsToDBOptional(object: DBXTeamLogTeamProfileRemoveLogoDetails?) -> DBTEAMLOGTeamProfileRemoveLogoDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileRemoveLogoDetailsToDB(object: object)
}

func mapDBXTeamLogTeamProfileRemoveLogoDetailsToDB(object: DBXTeamLogTeamProfileRemoveLogoDetails) -> DBTEAMLOGTeamProfileRemoveLogoDetails {
    DBTEAMLOGTeamProfileRemoveLogoDetails(default: ())
}

func mapDBXTeamLogTeamProfileRemoveLogoTypeToDBOptional(object: DBXTeamLogTeamProfileRemoveLogoType?) -> DBTEAMLOGTeamProfileRemoveLogoType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamProfileRemoveLogoTypeToDB(object: object)
}

func mapDBXTeamLogTeamProfileRemoveLogoTypeToDB(object: DBXTeamLogTeamProfileRemoveLogoType) -> DBTEAMLOGTeamProfileRemoveLogoType {
    DBTEAMLOGTeamProfileRemoveLogoType(description_: object.description_)
}

func mapDBXTeamLogTeamSelectiveSyncPolicyToDBOptional(object: DBXTeamLogTeamSelectiveSyncPolicy?) -> DBTEAMLOGTeamSelectiveSyncPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSelectiveSyncPolicyToDB(object: object)
}

func mapDBXTeamLogTeamSelectiveSyncPolicyToDB(object: DBXTeamLogTeamSelectiveSyncPolicy) -> DBTEAMLOGTeamSelectiveSyncPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGTeamSelectiveSyncPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGTeamSelectiveSyncPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTeamSelectiveSyncPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTeamSelectiveSyncPolicyChangedDetailsToDBOptional(object: DBXTeamLogTeamSelectiveSyncPolicyChangedDetails?)
    -> DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSelectiveSyncPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamSelectiveSyncPolicyChangedDetailsToDB(object: DBXTeamLogTeamSelectiveSyncPolicyChangedDetails)
    -> DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails {
    DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails(
        dNewValue: mapDBXTeamLogTeamSelectiveSyncPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTeamSelectiveSyncPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogTeamSelectiveSyncPolicyChangedTypeToDBOptional(object: DBXTeamLogTeamSelectiveSyncPolicyChangedType?)
    -> DBTEAMLOGTeamSelectiveSyncPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSelectiveSyncPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogTeamSelectiveSyncPolicyChangedTypeToDB(object: DBXTeamLogTeamSelectiveSyncPolicyChangedType) -> DBTEAMLOGTeamSelectiveSyncPolicyChangedType {
    DBTEAMLOGTeamSelectiveSyncPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogTeamSelectiveSyncSettingsChangedDetailsToDBOptional(object: DBXTeamLogTeamSelectiveSyncSettingsChangedDetails?)
    -> DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSelectiveSyncSettingsChangedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamSelectiveSyncSettingsChangedDetailsToDB(object: DBXTeamLogTeamSelectiveSyncSettingsChangedDetails)
    -> DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails {
    DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails(
        previousValue: mapDBXFilesSyncSettingToDB(object: object.previousValue),
        dNewValue: mapDBXFilesSyncSettingToDB(object: object.newValue)
    )
}

func mapDBXTeamLogTeamSelectiveSyncSettingsChangedTypeToDBOptional(object: DBXTeamLogTeamSelectiveSyncSettingsChangedType?)
    -> DBTEAMLOGTeamSelectiveSyncSettingsChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSelectiveSyncSettingsChangedTypeToDB(object: object)
}

func mapDBXTeamLogTeamSelectiveSyncSettingsChangedTypeToDB(object: DBXTeamLogTeamSelectiveSyncSettingsChangedType)
    -> DBTEAMLOGTeamSelectiveSyncSettingsChangedType {
    DBTEAMLOGTeamSelectiveSyncSettingsChangedType(description_: object.description_)
}

func mapDBXTeamLogTeamSharingWhitelistSubjectsChangedDetailsToDBOptional(object: DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails?)
    -> DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSharingWhitelistSubjectsChangedDetailsToDB(object: object)
}

func mapDBXTeamLogTeamSharingWhitelistSubjectsChangedDetailsToDB(object: DBXTeamLogTeamSharingWhitelistSubjectsChangedDetails)
    -> DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails {
    DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails(
        addedWhitelistSubjects: object.addedWhitelistSubjects,
        removedWhitelistSubjects: object.removedWhitelistSubjects
    )
}

func mapDBXTeamLogTeamSharingWhitelistSubjectsChangedTypeToDBOptional(object: DBXTeamLogTeamSharingWhitelistSubjectsChangedType?)
    -> DBTEAMLOGTeamSharingWhitelistSubjectsChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTeamSharingWhitelistSubjectsChangedTypeToDB(object: object)
}

func mapDBXTeamLogTeamSharingWhitelistSubjectsChangedTypeToDB(object: DBXTeamLogTeamSharingWhitelistSubjectsChangedType)
    -> DBTEAMLOGTeamSharingWhitelistSubjectsChangedType {
    DBTEAMLOGTeamSharingWhitelistSubjectsChangedType(description_: object.description_)
}

func mapDBXTeamLogTfaAddBackupPhoneDetailsToDBOptional(object: DBXTeamLogTfaAddBackupPhoneDetails?) -> DBTEAMLOGTfaAddBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddBackupPhoneDetailsToDB(object: object)
}

func mapDBXTeamLogTfaAddBackupPhoneDetailsToDB(object: DBXTeamLogTfaAddBackupPhoneDetails) -> DBTEAMLOGTfaAddBackupPhoneDetails {
    DBTEAMLOGTfaAddBackupPhoneDetails(default: ())
}

func mapDBXTeamLogTfaAddBackupPhoneTypeToDBOptional(object: DBXTeamLogTfaAddBackupPhoneType?) -> DBTEAMLOGTfaAddBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddBackupPhoneTypeToDB(object: object)
}

func mapDBXTeamLogTfaAddBackupPhoneTypeToDB(object: DBXTeamLogTfaAddBackupPhoneType) -> DBTEAMLOGTfaAddBackupPhoneType {
    DBTEAMLOGTfaAddBackupPhoneType(description_: object.description_)
}

func mapDBXTeamLogTfaAddExceptionDetailsToDBOptional(object: DBXTeamLogTfaAddExceptionDetails?) -> DBTEAMLOGTfaAddExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogTfaAddExceptionDetailsToDB(object: DBXTeamLogTfaAddExceptionDetails) -> DBTEAMLOGTfaAddExceptionDetails {
    DBTEAMLOGTfaAddExceptionDetails(default: ())
}

func mapDBXTeamLogTfaAddExceptionTypeToDBOptional(object: DBXTeamLogTfaAddExceptionType?) -> DBTEAMLOGTfaAddExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddExceptionTypeToDB(object: object)
}

func mapDBXTeamLogTfaAddExceptionTypeToDB(object: DBXTeamLogTfaAddExceptionType) -> DBTEAMLOGTfaAddExceptionType {
    DBTEAMLOGTfaAddExceptionType(description_: object.description_)
}

func mapDBXTeamLogTfaAddSecurityKeyDetailsToDBOptional(object: DBXTeamLogTfaAddSecurityKeyDetails?) -> DBTEAMLOGTfaAddSecurityKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddSecurityKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTfaAddSecurityKeyDetailsToDB(object: DBXTeamLogTfaAddSecurityKeyDetails) -> DBTEAMLOGTfaAddSecurityKeyDetails {
    DBTEAMLOGTfaAddSecurityKeyDetails(default: ())
}

func mapDBXTeamLogTfaAddSecurityKeyTypeToDBOptional(object: DBXTeamLogTfaAddSecurityKeyType?) -> DBTEAMLOGTfaAddSecurityKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaAddSecurityKeyTypeToDB(object: object)
}

func mapDBXTeamLogTfaAddSecurityKeyTypeToDB(object: DBXTeamLogTfaAddSecurityKeyType) -> DBTEAMLOGTfaAddSecurityKeyType {
    DBTEAMLOGTfaAddSecurityKeyType(description_: object.description_)
}

func mapDBXTeamLogTfaChangeBackupPhoneDetailsToDBOptional(object: DBXTeamLogTfaChangeBackupPhoneDetails?) -> DBTEAMLOGTfaChangeBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangeBackupPhoneDetailsToDB(object: object)
}

func mapDBXTeamLogTfaChangeBackupPhoneDetailsToDB(object: DBXTeamLogTfaChangeBackupPhoneDetails) -> DBTEAMLOGTfaChangeBackupPhoneDetails {
    DBTEAMLOGTfaChangeBackupPhoneDetails(default: ())
}

func mapDBXTeamLogTfaChangeBackupPhoneTypeToDBOptional(object: DBXTeamLogTfaChangeBackupPhoneType?) -> DBTEAMLOGTfaChangeBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangeBackupPhoneTypeToDB(object: object)
}

func mapDBXTeamLogTfaChangeBackupPhoneTypeToDB(object: DBXTeamLogTfaChangeBackupPhoneType) -> DBTEAMLOGTfaChangeBackupPhoneType {
    DBTEAMLOGTfaChangeBackupPhoneType(description_: object.description_)
}

func mapDBXTeamLogTfaChangePolicyDetailsToDBOptional(object: DBXTeamLogTfaChangePolicyDetails?) -> DBTEAMLOGTfaChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogTfaChangePolicyDetailsToDB(object: DBXTeamLogTfaChangePolicyDetails) -> DBTEAMLOGTfaChangePolicyDetails {
    DBTEAMLOGTfaChangePolicyDetails(
        dNewValue: mapDBXTeamPoliciesTwoStepVerificationPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamPoliciesTwoStepVerificationPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogTfaChangePolicyTypeToDBOptional(object: DBXTeamLogTfaChangePolicyType?) -> DBTEAMLOGTfaChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogTfaChangePolicyTypeToDB(object: DBXTeamLogTfaChangePolicyType) -> DBTEAMLOGTfaChangePolicyType {
    DBTEAMLOGTfaChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogTfaChangeStatusDetailsToDBOptional(object: DBXTeamLogTfaChangeStatusDetails?) -> DBTEAMLOGTfaChangeStatusDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangeStatusDetailsToDB(object: object)
}

func mapDBXTeamLogTfaChangeStatusDetailsToDB(object: DBXTeamLogTfaChangeStatusDetails) -> DBTEAMLOGTfaChangeStatusDetails {
    DBTEAMLOGTfaChangeStatusDetails(
        dNewValue: mapDBXTeamLogTfaConfigurationToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTfaConfigurationToDBOptional(object: object.previousValue),
        usedRescueCode: object.usedRescueCode
    )
}

func mapDBXTeamLogTfaChangeStatusTypeToDBOptional(object: DBXTeamLogTfaChangeStatusType?) -> DBTEAMLOGTfaChangeStatusType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaChangeStatusTypeToDB(object: object)
}

func mapDBXTeamLogTfaChangeStatusTypeToDB(object: DBXTeamLogTfaChangeStatusType) -> DBTEAMLOGTfaChangeStatusType {
    DBTEAMLOGTfaChangeStatusType(description_: object.description_)
}

func mapDBXTeamLogTfaConfigurationToDBOptional(object: DBXTeamLogTfaConfiguration?) -> DBTEAMLOGTfaConfiguration? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaConfigurationToDB(object: object)
}

func mapDBXTeamLogTfaConfigurationToDB(object: DBXTeamLogTfaConfiguration) -> DBTEAMLOGTfaConfiguration {
    if object.asAuthenticator != nil {
        return DBTEAMLOGTfaConfiguration(authenticator: ())
    }
    if object.asDisabled != nil {
        return DBTEAMLOGTfaConfiguration(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGTfaConfiguration(enabled: ())
    }
    if object.asSms != nil {
        return DBTEAMLOGTfaConfiguration(sms: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTfaConfiguration(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTfaRemoveBackupPhoneDetailsToDBOptional(object: DBXTeamLogTfaRemoveBackupPhoneDetails?) -> DBTEAMLOGTfaRemoveBackupPhoneDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveBackupPhoneDetailsToDB(object: object)
}

func mapDBXTeamLogTfaRemoveBackupPhoneDetailsToDB(object: DBXTeamLogTfaRemoveBackupPhoneDetails) -> DBTEAMLOGTfaRemoveBackupPhoneDetails {
    DBTEAMLOGTfaRemoveBackupPhoneDetails(default: ())
}

func mapDBXTeamLogTfaRemoveBackupPhoneTypeToDBOptional(object: DBXTeamLogTfaRemoveBackupPhoneType?) -> DBTEAMLOGTfaRemoveBackupPhoneType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveBackupPhoneTypeToDB(object: object)
}

func mapDBXTeamLogTfaRemoveBackupPhoneTypeToDB(object: DBXTeamLogTfaRemoveBackupPhoneType) -> DBTEAMLOGTfaRemoveBackupPhoneType {
    DBTEAMLOGTfaRemoveBackupPhoneType(description_: object.description_)
}

func mapDBXTeamLogTfaRemoveExceptionDetailsToDBOptional(object: DBXTeamLogTfaRemoveExceptionDetails?) -> DBTEAMLOGTfaRemoveExceptionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveExceptionDetailsToDB(object: object)
}

func mapDBXTeamLogTfaRemoveExceptionDetailsToDB(object: DBXTeamLogTfaRemoveExceptionDetails) -> DBTEAMLOGTfaRemoveExceptionDetails {
    DBTEAMLOGTfaRemoveExceptionDetails(default: ())
}

func mapDBXTeamLogTfaRemoveExceptionTypeToDBOptional(object: DBXTeamLogTfaRemoveExceptionType?) -> DBTEAMLOGTfaRemoveExceptionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveExceptionTypeToDB(object: object)
}

func mapDBXTeamLogTfaRemoveExceptionTypeToDB(object: DBXTeamLogTfaRemoveExceptionType) -> DBTEAMLOGTfaRemoveExceptionType {
    DBTEAMLOGTfaRemoveExceptionType(description_: object.description_)
}

func mapDBXTeamLogTfaRemoveSecurityKeyDetailsToDBOptional(object: DBXTeamLogTfaRemoveSecurityKeyDetails?) -> DBTEAMLOGTfaRemoveSecurityKeyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveSecurityKeyDetailsToDB(object: object)
}

func mapDBXTeamLogTfaRemoveSecurityKeyDetailsToDB(object: DBXTeamLogTfaRemoveSecurityKeyDetails) -> DBTEAMLOGTfaRemoveSecurityKeyDetails {
    DBTEAMLOGTfaRemoveSecurityKeyDetails(default: ())
}

func mapDBXTeamLogTfaRemoveSecurityKeyTypeToDBOptional(object: DBXTeamLogTfaRemoveSecurityKeyType?) -> DBTEAMLOGTfaRemoveSecurityKeyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaRemoveSecurityKeyTypeToDB(object: object)
}

func mapDBXTeamLogTfaRemoveSecurityKeyTypeToDB(object: DBXTeamLogTfaRemoveSecurityKeyType) -> DBTEAMLOGTfaRemoveSecurityKeyType {
    DBTEAMLOGTfaRemoveSecurityKeyType(description_: object.description_)
}

func mapDBXTeamLogTfaResetDetailsToDBOptional(object: DBXTeamLogTfaResetDetails?) -> DBTEAMLOGTfaResetDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaResetDetailsToDB(object: object)
}

func mapDBXTeamLogTfaResetDetailsToDB(object: DBXTeamLogTfaResetDetails) -> DBTEAMLOGTfaResetDetails {
    DBTEAMLOGTfaResetDetails(default: ())
}

func mapDBXTeamLogTfaResetTypeToDBOptional(object: DBXTeamLogTfaResetType?) -> DBTEAMLOGTfaResetType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTfaResetTypeToDB(object: object)
}

func mapDBXTeamLogTfaResetTypeToDB(object: DBXTeamLogTfaResetType) -> DBTEAMLOGTfaResetType {
    DBTEAMLOGTfaResetType(description_: object.description_)
}

func mapDBXTeamLogTimeUnitToDBOptional(object: DBXTeamLogTimeUnit?) -> DBTEAMLOGTimeUnit? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTimeUnitToDB(object: object)
}

func mapDBXTeamLogTimeUnitToDB(object: DBXTeamLogTimeUnit) -> DBTEAMLOGTimeUnit {
    if object.asDays != nil {
        return DBTEAMLOGTimeUnit(days: ())
    }
    if object.asHours != nil {
        return DBTEAMLOGTimeUnit(hours: ())
    }
    if object.asMilliseconds != nil {
        return DBTEAMLOGTimeUnit(milliseconds: ())
    }
    if object.asMinutes != nil {
        return DBTEAMLOGTimeUnit(minutes: ())
    }
    if object.asMonths != nil {
        return DBTEAMLOGTimeUnit(months: ())
    }
    if object.asSeconds != nil {
        return DBTEAMLOGTimeUnit(seconds: ())
    }
    if object.asWeeks != nil {
        return DBTEAMLOGTimeUnit(weeks: ())
    }
    if object.asYears != nil {
        return DBTEAMLOGTimeUnit(years: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTimeUnit(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTrustedNonTeamMemberLogInfoToDBOptional(object: DBXTeamLogTrustedNonTeamMemberLogInfo?) -> DBTEAMLOGTrustedNonTeamMemberLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTrustedNonTeamMemberLogInfoToDB(object: object)
}

func mapDBXTeamLogTrustedNonTeamMemberLogInfoToDB(object: DBXTeamLogTrustedNonTeamMemberLogInfo) -> DBTEAMLOGTrustedNonTeamMemberLogInfo {
    DBTEAMLOGTrustedNonTeamMemberLogInfo(
        trustedNonTeamMemberType: mapDBXTeamLogTrustedNonTeamMemberTypeToDB(object: object.trustedNonTeamMemberType),
        accountId: object.accountId,
        displayName: object.displayName,
        email: object.email,
        team: mapDBXTeamLogTeamLogInfoToDBOptional(object: object.team)
    )
}

func mapDBXTeamLogTrustedNonTeamMemberTypeToDBOptional(object: DBXTeamLogTrustedNonTeamMemberType?) -> DBTEAMLOGTrustedNonTeamMemberType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTrustedNonTeamMemberTypeToDB(object: object)
}

func mapDBXTeamLogTrustedNonTeamMemberTypeToDB(object: DBXTeamLogTrustedNonTeamMemberType) -> DBTEAMLOGTrustedNonTeamMemberType {
    if object.asEnterpriseAdmin != nil {
        return DBTEAMLOGTrustedNonTeamMemberType(enterpriseAdmin: ())
    }
    if object.asMultiInstanceAdmin != nil {
        return DBTEAMLOGTrustedNonTeamMemberType(multiInstanceAdmin: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTrustedNonTeamMemberType(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTrustedTeamsRequestActionToDBOptional(object: DBXTeamLogTrustedTeamsRequestAction?) -> DBTEAMLOGTrustedTeamsRequestAction? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTrustedTeamsRequestActionToDB(object: object)
}

func mapDBXTeamLogTrustedTeamsRequestActionToDB(object: DBXTeamLogTrustedTeamsRequestAction) -> DBTEAMLOGTrustedTeamsRequestAction {
    if object.asAccepted != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(accepted: ())
    }
    if object.asDeclined != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(declined: ())
    }
    if object.asExpired != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(expired: ())
    }
    if object.asInvited != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(invited: ())
    }
    if object.asRevoked != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(revoked: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTrustedTeamsRequestAction(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTrustedTeamsRequestStateToDBOptional(object: DBXTeamLogTrustedTeamsRequestState?) -> DBTEAMLOGTrustedTeamsRequestState? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTrustedTeamsRequestStateToDB(object: object)
}

func mapDBXTeamLogTrustedTeamsRequestStateToDB(object: DBXTeamLogTrustedTeamsRequestState) -> DBTEAMLOGTrustedTeamsRequestState {
    if object.asInvited != nil {
        return DBTEAMLOGTrustedTeamsRequestState(invited: ())
    }
    if object.asLinked != nil {
        return DBTEAMLOGTrustedTeamsRequestState(linked: ())
    }
    if object.asUnlinked != nil {
        return DBTEAMLOGTrustedTeamsRequestState(unlinked: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTrustedTeamsRequestState(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogTwoAccountChangePolicyDetailsToDBOptional(object: DBXTeamLogTwoAccountChangePolicyDetails?) -> DBTEAMLOGTwoAccountChangePolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTwoAccountChangePolicyDetailsToDB(object: object)
}

func mapDBXTeamLogTwoAccountChangePolicyDetailsToDB(object: DBXTeamLogTwoAccountChangePolicyDetails) -> DBTEAMLOGTwoAccountChangePolicyDetails {
    DBTEAMLOGTwoAccountChangePolicyDetails(
        dNewValue: mapDBXTeamLogTwoAccountPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogTwoAccountPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogTwoAccountChangePolicyTypeToDBOptional(object: DBXTeamLogTwoAccountChangePolicyType?) -> DBTEAMLOGTwoAccountChangePolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTwoAccountChangePolicyTypeToDB(object: object)
}

func mapDBXTeamLogTwoAccountChangePolicyTypeToDB(object: DBXTeamLogTwoAccountChangePolicyType) -> DBTEAMLOGTwoAccountChangePolicyType {
    DBTEAMLOGTwoAccountChangePolicyType(description_: object.description_)
}

func mapDBXTeamLogTwoAccountPolicyToDBOptional(object: DBXTeamLogTwoAccountPolicy?) -> DBTEAMLOGTwoAccountPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogTwoAccountPolicyToDB(object: object)
}

func mapDBXTeamLogTwoAccountPolicyToDB(object: DBXTeamLogTwoAccountPolicy) -> DBTEAMLOGTwoAccountPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGTwoAccountPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGTwoAccountPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGTwoAccountPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogUndoNamingConventionDetailsToDBOptional(object: DBXTeamLogUndoNamingConventionDetails?) -> DBTEAMLOGUndoNamingConventionDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUndoNamingConventionDetailsToDB(object: object)
}

func mapDBXTeamLogUndoNamingConventionDetailsToDB(object: DBXTeamLogUndoNamingConventionDetails) -> DBTEAMLOGUndoNamingConventionDetails {
    DBTEAMLOGUndoNamingConventionDetails(default: ())
}

func mapDBXTeamLogUndoNamingConventionTypeToDBOptional(object: DBXTeamLogUndoNamingConventionType?) -> DBTEAMLOGUndoNamingConventionType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUndoNamingConventionTypeToDB(object: object)
}

func mapDBXTeamLogUndoNamingConventionTypeToDB(object: DBXTeamLogUndoNamingConventionType) -> DBTEAMLOGUndoNamingConventionType {
    DBTEAMLOGUndoNamingConventionType(description_: object.description_)
}

func mapDBXTeamLogUndoOrganizeFolderWithTidyDetailsToDBOptional(object: DBXTeamLogUndoOrganizeFolderWithTidyDetails?)
    -> DBTEAMLOGUndoOrganizeFolderWithTidyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUndoOrganizeFolderWithTidyDetailsToDB(object: object)
}

func mapDBXTeamLogUndoOrganizeFolderWithTidyDetailsToDB(object: DBXTeamLogUndoOrganizeFolderWithTidyDetails) -> DBTEAMLOGUndoOrganizeFolderWithTidyDetails {
    DBTEAMLOGUndoOrganizeFolderWithTidyDetails(default: ())
}

func mapDBXTeamLogUndoOrganizeFolderWithTidyTypeToDBOptional(object: DBXTeamLogUndoOrganizeFolderWithTidyType?) -> DBTEAMLOGUndoOrganizeFolderWithTidyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUndoOrganizeFolderWithTidyTypeToDB(object: object)
}

func mapDBXTeamLogUndoOrganizeFolderWithTidyTypeToDB(object: DBXTeamLogUndoOrganizeFolderWithTidyType) -> DBTEAMLOGUndoOrganizeFolderWithTidyType {
    DBTEAMLOGUndoOrganizeFolderWithTidyType(description_: object.description_)
}

func mapDBXTeamLogUserLinkedAppLogInfoToDBOptional(object: DBXTeamLogUserLinkedAppLogInfo?) -> DBTEAMLOGUserLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserLinkedAppLogInfoToDB(object: object)
}

func mapDBXTeamLogUserLinkedAppLogInfoToDB(object: DBXTeamLogUserLinkedAppLogInfo) -> DBTEAMLOGUserLinkedAppLogInfo {
    DBTEAMLOGUserLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBXTeamLogUserNameLogInfoToDBOptional(object: DBXTeamLogUserNameLogInfo?) -> DBTEAMLOGUserNameLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserNameLogInfoToDB(object: object)
}

func mapDBXTeamLogUserNameLogInfoToDB(object: DBXTeamLogUserNameLogInfo) -> DBTEAMLOGUserNameLogInfo {
    DBTEAMLOGUserNameLogInfo(givenName: object.givenName, surname: object.surname, locale: object.locale)
}

func mapDBXTeamLogUserOrTeamLinkedAppLogInfoToDBOptional(object: DBXTeamLogUserOrTeamLinkedAppLogInfo?) -> DBTEAMLOGUserOrTeamLinkedAppLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserOrTeamLinkedAppLogInfoToDB(object: object)
}

func mapDBXTeamLogUserOrTeamLinkedAppLogInfoToDB(object: DBXTeamLogUserOrTeamLinkedAppLogInfo) -> DBTEAMLOGUserOrTeamLinkedAppLogInfo {
    DBTEAMLOGUserOrTeamLinkedAppLogInfo(appId: object.appId, displayName: object.displayName)
}

func mapDBXTeamLogUserTagsAddedDetailsToDBOptional(object: DBXTeamLogUserTagsAddedDetails?) -> DBTEAMLOGUserTagsAddedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserTagsAddedDetailsToDB(object: object)
}

func mapDBXTeamLogUserTagsAddedDetailsToDB(object: DBXTeamLogUserTagsAddedDetails) -> DBTEAMLOGUserTagsAddedDetails {
    DBTEAMLOGUserTagsAddedDetails(values: object.values)
}

func mapDBXTeamLogUserTagsAddedTypeToDBOptional(object: DBXTeamLogUserTagsAddedType?) -> DBTEAMLOGUserTagsAddedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserTagsAddedTypeToDB(object: object)
}

func mapDBXTeamLogUserTagsAddedTypeToDB(object: DBXTeamLogUserTagsAddedType) -> DBTEAMLOGUserTagsAddedType {
    DBTEAMLOGUserTagsAddedType(description_: object.description_)
}

func mapDBXTeamLogUserTagsRemovedDetailsToDBOptional(object: DBXTeamLogUserTagsRemovedDetails?) -> DBTEAMLOGUserTagsRemovedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserTagsRemovedDetailsToDB(object: object)
}

func mapDBXTeamLogUserTagsRemovedDetailsToDB(object: DBXTeamLogUserTagsRemovedDetails) -> DBTEAMLOGUserTagsRemovedDetails {
    DBTEAMLOGUserTagsRemovedDetails(values: object.values)
}

func mapDBXTeamLogUserTagsRemovedTypeToDBOptional(object: DBXTeamLogUserTagsRemovedType?) -> DBTEAMLOGUserTagsRemovedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogUserTagsRemovedTypeToDB(object: object)
}

func mapDBXTeamLogUserTagsRemovedTypeToDB(object: DBXTeamLogUserTagsRemovedType) -> DBTEAMLOGUserTagsRemovedType {
    DBTEAMLOGUserTagsRemovedType(description_: object.description_)
}

func mapDBXTeamLogViewerInfoPolicyChangedDetailsToDBOptional(object: DBXTeamLogViewerInfoPolicyChangedDetails?) -> DBTEAMLOGViewerInfoPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogViewerInfoPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogViewerInfoPolicyChangedDetailsToDB(object: DBXTeamLogViewerInfoPolicyChangedDetails) -> DBTEAMLOGViewerInfoPolicyChangedDetails {
    DBTEAMLOGViewerInfoPolicyChangedDetails(
        previousValue: mapDBXTeamLogPassPolicyToDB(object: object.previousValue),
        dNewValue: mapDBXTeamLogPassPolicyToDB(object: object.newValue)
    )
}

func mapDBXTeamLogViewerInfoPolicyChangedTypeToDBOptional(object: DBXTeamLogViewerInfoPolicyChangedType?) -> DBTEAMLOGViewerInfoPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogViewerInfoPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogViewerInfoPolicyChangedTypeToDB(object: DBXTeamLogViewerInfoPolicyChangedType) -> DBTEAMLOGViewerInfoPolicyChangedType {
    DBTEAMLOGViewerInfoPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogWatermarkingPolicyToDBOptional(object: DBXTeamLogWatermarkingPolicy?) -> DBTEAMLOGWatermarkingPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWatermarkingPolicyToDB(object: object)
}

func mapDBXTeamLogWatermarkingPolicyToDB(object: DBXTeamLogWatermarkingPolicy) -> DBTEAMLOGWatermarkingPolicy {
    if object.asDisabled != nil {
        return DBTEAMLOGWatermarkingPolicy(disabled: ())
    }
    if object.asEnabled != nil {
        return DBTEAMLOGWatermarkingPolicy(enabled: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGWatermarkingPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogWatermarkingPolicyChangedDetailsToDBOptional(object: DBXTeamLogWatermarkingPolicyChangedDetails?)
    -> DBTEAMLOGWatermarkingPolicyChangedDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWatermarkingPolicyChangedDetailsToDB(object: object)
}

func mapDBXTeamLogWatermarkingPolicyChangedDetailsToDB(object: DBXTeamLogWatermarkingPolicyChangedDetails) -> DBTEAMLOGWatermarkingPolicyChangedDetails {
    DBTEAMLOGWatermarkingPolicyChangedDetails(
        dNewValue: mapDBXTeamLogWatermarkingPolicyToDB(object: object.newValue),
        previousValue: mapDBXTeamLogWatermarkingPolicyToDB(object: object.previousValue)
    )
}

func mapDBXTeamLogWatermarkingPolicyChangedTypeToDBOptional(object: DBXTeamLogWatermarkingPolicyChangedType?) -> DBTEAMLOGWatermarkingPolicyChangedType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWatermarkingPolicyChangedTypeToDB(object: object)
}

func mapDBXTeamLogWatermarkingPolicyChangedTypeToDB(object: DBXTeamLogWatermarkingPolicyChangedType) -> DBTEAMLOGWatermarkingPolicyChangedType {
    DBTEAMLOGWatermarkingPolicyChangedType(description_: object.description_)
}

func mapDBXTeamLogWebDeviceSessionLogInfoToDBOptional(object: DBXTeamLogWebDeviceSessionLogInfo?) -> DBTEAMLOGWebDeviceSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebDeviceSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogWebDeviceSessionLogInfoToDB(object: DBXTeamLogWebDeviceSessionLogInfo) -> DBTEAMLOGWebDeviceSessionLogInfo {
    DBTEAMLOGWebDeviceSessionLogInfo(
        userAgent: object.userAgent,
        os: object.os,
        browser: object.browser,
        ipAddress: object.ipAddress,
        created: object.created,
        updated: object.updated,
        sessionInfo: mapDBXTeamLogWebSessionLogInfoToDBOptional(object: object.sessionInfo)
    )
}

func mapDBXTeamLogWebSessionLogInfoToDBOptional(object: DBXTeamLogWebSessionLogInfo?) -> DBTEAMLOGWebSessionLogInfo? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionLogInfoToDB(object: object)
}

func mapDBXTeamLogWebSessionLogInfoToDB(object: DBXTeamLogWebSessionLogInfo) -> DBTEAMLOGWebSessionLogInfo {
    DBTEAMLOGWebSessionLogInfo(sessionId: object.sessionId)
}

func mapDBXTeamLogWebSessionsChangeActiveSessionLimitDetailsToDBOptional(object: DBXTeamLogWebSessionsChangeActiveSessionLimitDetails?)
    -> DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeActiveSessionLimitDetailsToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeActiveSessionLimitDetailsToDB(object: DBXTeamLogWebSessionsChangeActiveSessionLimitDetails)
    -> DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails {
    DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails(previousValue: object.previousValue, dNewValue: object.newValue)
}

func mapDBXTeamLogWebSessionsChangeActiveSessionLimitTypeToDBOptional(object: DBXTeamLogWebSessionsChangeActiveSessionLimitType?)
    -> DBTEAMLOGWebSessionsChangeActiveSessionLimitType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeActiveSessionLimitTypeToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeActiveSessionLimitTypeToDB(object: DBXTeamLogWebSessionsChangeActiveSessionLimitType)
    -> DBTEAMLOGWebSessionsChangeActiveSessionLimitType {
    DBTEAMLOGWebSessionsChangeActiveSessionLimitType(description_: object.description_)
}

func mapDBXTeamLogWebSessionsChangeFixedLengthPolicyDetailsToDBOptional(object: DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails?)
    -> DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeFixedLengthPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeFixedLengthPolicyDetailsToDB(object: DBXTeamLogWebSessionsChangeFixedLengthPolicyDetails)
    -> DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails(
        dNewValue: mapDBXTeamLogWebSessionsFixedLengthPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogWebSessionsFixedLengthPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogWebSessionsChangeFixedLengthPolicyTypeToDBOptional(object: DBXTeamLogWebSessionsChangeFixedLengthPolicyType?)
    -> DBTEAMLOGWebSessionsChangeFixedLengthPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeFixedLengthPolicyTypeToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeFixedLengthPolicyTypeToDB(object: DBXTeamLogWebSessionsChangeFixedLengthPolicyType)
    -> DBTEAMLOGWebSessionsChangeFixedLengthPolicyType {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyType(description_: object.description_)
}

func mapDBXTeamLogWebSessionsChangeIdleLengthPolicyDetailsToDBOptional(object: DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails?)
    -> DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeIdleLengthPolicyDetailsToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeIdleLengthPolicyDetailsToDB(object: DBXTeamLogWebSessionsChangeIdleLengthPolicyDetails)
    -> DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails(
        dNewValue: mapDBXTeamLogWebSessionsIdleLengthPolicyToDBOptional(object: object.newValue),
        previousValue: mapDBXTeamLogWebSessionsIdleLengthPolicyToDBOptional(object: object.previousValue)
    )
}

func mapDBXTeamLogWebSessionsChangeIdleLengthPolicyTypeToDBOptional(object: DBXTeamLogWebSessionsChangeIdleLengthPolicyType?)
    -> DBTEAMLOGWebSessionsChangeIdleLengthPolicyType? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsChangeIdleLengthPolicyTypeToDB(object: object)
}

func mapDBXTeamLogWebSessionsChangeIdleLengthPolicyTypeToDB(object: DBXTeamLogWebSessionsChangeIdleLengthPolicyType)
    -> DBTEAMLOGWebSessionsChangeIdleLengthPolicyType {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyType(description_: object.description_)
}

func mapDBXTeamLogWebSessionsFixedLengthPolicyToDBOptional(object: DBXTeamLogWebSessionsFixedLengthPolicy?) -> DBTEAMLOGWebSessionsFixedLengthPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsFixedLengthPolicyToDB(object: object)
}

func mapDBXTeamLogWebSessionsFixedLengthPolicyToDB(object: DBXTeamLogWebSessionsFixedLengthPolicy) -> DBTEAMLOGWebSessionsFixedLengthPolicy {
    if let object = object.asDefined {
        let defined = mapDBXTeamLogDurationLogInfoToDB(object: object.defined)
        return DBTEAMLOGWebSessionsFixedLengthPolicy(defined: defined)
    }
    if object.asUndefined != nil {
        return DBTEAMLOGWebSessionsFixedLengthPolicy(undefined: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGWebSessionsFixedLengthPolicy(other: ())
    }
    fatalError("codegen error")
}

func mapDBXTeamLogWebSessionsIdleLengthPolicyToDBOptional(object: DBXTeamLogWebSessionsIdleLengthPolicy?) -> DBTEAMLOGWebSessionsIdleLengthPolicy? {
    guard let object = object else { return nil }
    return mapDBXTeamLogWebSessionsIdleLengthPolicyToDB(object: object)
}

func mapDBXTeamLogWebSessionsIdleLengthPolicyToDB(object: DBXTeamLogWebSessionsIdleLengthPolicy) -> DBTEAMLOGWebSessionsIdleLengthPolicy {
    if let object = object.asDefined {
        let defined = mapDBXTeamLogDurationLogInfoToDB(object: object.defined)
        return DBTEAMLOGWebSessionsIdleLengthPolicy(defined: defined)
    }
    if object.asUndefined != nil {
        return DBTEAMLOGWebSessionsIdleLengthPolicy(undefined: ())
    }
    if object.asOther != nil {
        return DBTEAMLOGWebSessionsIdleLengthPolicy(other: ())
    }
    fatalError("codegen error")
}
